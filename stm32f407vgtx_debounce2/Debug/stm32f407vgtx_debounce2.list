
stm32f407vgtx_debounce2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000199c4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000031c0  08019b54  08019b54  00029b54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801cd14  0801cd14  00030174  2**0
                  CONTENTS
  4 .ARM          00000008  0801cd14  0801cd14  0002cd14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801cd1c  0801cd1c  00030174  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801cd1c  0801cd1c  0002cd1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801cd20  0801cd20  0002cd20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000174  20000000  0801cd24  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030174  2**0
                  CONTENTS
 10 .bss          0000e4c4  20000174  20000174  00030174  2**2
                  ALLOC
 11 ._user_heap_stack 00006000  2000e638  2000e638  00030174  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030174  2**0
                  CONTENTS, READONLY
 13 .debug_info   00035395  00000000  00000000  000301a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000087e1  00000000  00000000  00065539  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002870  00000000  00000000  0006dd20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002660  00000000  00000000  00070590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00013c4a  00000000  00000000  00072bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003c2df  00000000  00000000  0008683a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f245c  00000000  00000000  000c2b19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001b4f75  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000b018  00000000  00000000  001b4fc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000174 	.word	0x20000174
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08019b3c 	.word	0x08019b3c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000178 	.word	0x20000178
 80001cc:	08019b3c 	.word	0x08019b3c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000578:	f000 faea 	bl	8000b50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057c:	f000 f816 	bl	80005ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000580:	f000 f87e 	bl	8000680 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000584:	f007 fd0a 	bl	8007f9c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000588:	4a05      	ldr	r2, [pc, #20]	; (80005a0 <main+0x2c>)
 800058a:	2100      	movs	r1, #0
 800058c:	4805      	ldr	r0, [pc, #20]	; (80005a4 <main+0x30>)
 800058e:	f007 fd64 	bl	800805a <osThreadNew>
 8000592:	4603      	mov	r3, r0
 8000594:	4a04      	ldr	r2, [pc, #16]	; (80005a8 <main+0x34>)
 8000596:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000598:	f007 fd24 	bl	8007fe4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800059c:	e7fe      	b.n	800059c <main+0x28>
 800059e:	bf00      	nop
 80005a0:	0801ca4c 	.word	0x0801ca4c
 80005a4:	0800078d 	.word	0x0800078d
 80005a8:	20000190 	.word	0x20000190

080005ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b094      	sub	sp, #80	; 0x50
 80005b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b2:	f107 0320 	add.w	r3, r7, #32
 80005b6:	2230      	movs	r2, #48	; 0x30
 80005b8:	2100      	movs	r1, #0
 80005ba:	4618      	mov	r0, r3
 80005bc:	f018 fa66 	bl	8018a8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c0:	f107 030c 	add.w	r3, r7, #12
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
 80005c8:	605a      	str	r2, [r3, #4]
 80005ca:	609a      	str	r2, [r3, #8]
 80005cc:	60da      	str	r2, [r3, #12]
 80005ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005d0:	2300      	movs	r3, #0
 80005d2:	60bb      	str	r3, [r7, #8]
 80005d4:	4b28      	ldr	r3, [pc, #160]	; (8000678 <SystemClock_Config+0xcc>)
 80005d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d8:	4a27      	ldr	r2, [pc, #156]	; (8000678 <SystemClock_Config+0xcc>)
 80005da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005de:	6413      	str	r3, [r2, #64]	; 0x40
 80005e0:	4b25      	ldr	r3, [pc, #148]	; (8000678 <SystemClock_Config+0xcc>)
 80005e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005e8:	60bb      	str	r3, [r7, #8]
 80005ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005ec:	2300      	movs	r3, #0
 80005ee:	607b      	str	r3, [r7, #4]
 80005f0:	4b22      	ldr	r3, [pc, #136]	; (800067c <SystemClock_Config+0xd0>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a21      	ldr	r2, [pc, #132]	; (800067c <SystemClock_Config+0xd0>)
 80005f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005fa:	6013      	str	r3, [r2, #0]
 80005fc:	4b1f      	ldr	r3, [pc, #124]	; (800067c <SystemClock_Config+0xd0>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000604:	607b      	str	r3, [r7, #4]
 8000606:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000608:	2301      	movs	r3, #1
 800060a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800060c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000610:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000612:	2302      	movs	r3, #2
 8000614:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000616:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800061a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800061c:	2308      	movs	r3, #8
 800061e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000620:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000624:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000626:	2302      	movs	r3, #2
 8000628:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800062a:	2307      	movs	r3, #7
 800062c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800062e:	f107 0320 	add.w	r3, r7, #32
 8000632:	4618      	mov	r0, r3
 8000634:	f002 fe6c 	bl	8003310 <HAL_RCC_OscConfig>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800063e:	f000 f8c3 	bl	80007c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000642:	230f      	movs	r3, #15
 8000644:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000646:	2302      	movs	r3, #2
 8000648:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800064a:	2300      	movs	r3, #0
 800064c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800064e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000652:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000654:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000658:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800065a:	f107 030c 	add.w	r3, r7, #12
 800065e:	2105      	movs	r1, #5
 8000660:	4618      	mov	r0, r3
 8000662:	f003 f8cd 	bl	8003800 <HAL_RCC_ClockConfig>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800066c:	f000 f8ac 	bl	80007c8 <Error_Handler>
  }
}
 8000670:	bf00      	nop
 8000672:	3750      	adds	r7, #80	; 0x50
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	40023800 	.word	0x40023800
 800067c:	40007000 	.word	0x40007000

08000680 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b08a      	sub	sp, #40	; 0x28
 8000684:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000686:	f107 0314 	add.w	r3, r7, #20
 800068a:	2200      	movs	r2, #0
 800068c:	601a      	str	r2, [r3, #0]
 800068e:	605a      	str	r2, [r3, #4]
 8000690:	609a      	str	r2, [r3, #8]
 8000692:	60da      	str	r2, [r3, #12]
 8000694:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000696:	2300      	movs	r3, #0
 8000698:	613b      	str	r3, [r7, #16]
 800069a:	4b39      	ldr	r3, [pc, #228]	; (8000780 <MX_GPIO_Init+0x100>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	4a38      	ldr	r2, [pc, #224]	; (8000780 <MX_GPIO_Init+0x100>)
 80006a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006a4:	6313      	str	r3, [r2, #48]	; 0x30
 80006a6:	4b36      	ldr	r3, [pc, #216]	; (8000780 <MX_GPIO_Init+0x100>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006ae:	613b      	str	r3, [r7, #16]
 80006b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006b2:	2300      	movs	r3, #0
 80006b4:	60fb      	str	r3, [r7, #12]
 80006b6:	4b32      	ldr	r3, [pc, #200]	; (8000780 <MX_GPIO_Init+0x100>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	4a31      	ldr	r2, [pc, #196]	; (8000780 <MX_GPIO_Init+0x100>)
 80006bc:	f043 0304 	orr.w	r3, r3, #4
 80006c0:	6313      	str	r3, [r2, #48]	; 0x30
 80006c2:	4b2f      	ldr	r3, [pc, #188]	; (8000780 <MX_GPIO_Init+0x100>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c6:	f003 0304 	and.w	r3, r3, #4
 80006ca:	60fb      	str	r3, [r7, #12]
 80006cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ce:	2300      	movs	r3, #0
 80006d0:	60bb      	str	r3, [r7, #8]
 80006d2:	4b2b      	ldr	r3, [pc, #172]	; (8000780 <MX_GPIO_Init+0x100>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	4a2a      	ldr	r2, [pc, #168]	; (8000780 <MX_GPIO_Init+0x100>)
 80006d8:	f043 0301 	orr.w	r3, r3, #1
 80006dc:	6313      	str	r3, [r2, #48]	; 0x30
 80006de:	4b28      	ldr	r3, [pc, #160]	; (8000780 <MX_GPIO_Init+0x100>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	f003 0301 	and.w	r3, r3, #1
 80006e6:	60bb      	str	r3, [r7, #8]
 80006e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ea:	2300      	movs	r3, #0
 80006ec:	607b      	str	r3, [r7, #4]
 80006ee:	4b24      	ldr	r3, [pc, #144]	; (8000780 <MX_GPIO_Init+0x100>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	4a23      	ldr	r2, [pc, #140]	; (8000780 <MX_GPIO_Init+0x100>)
 80006f4:	f043 0302 	orr.w	r3, r3, #2
 80006f8:	6313      	str	r3, [r2, #48]	; 0x30
 80006fa:	4b21      	ldr	r3, [pc, #132]	; (8000780 <MX_GPIO_Init+0x100>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	f003 0302 	and.w	r3, r3, #2
 8000702:	607b      	str	r3, [r7, #4]
 8000704:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000706:	2300      	movs	r3, #0
 8000708:	603b      	str	r3, [r7, #0]
 800070a:	4b1d      	ldr	r3, [pc, #116]	; (8000780 <MX_GPIO_Init+0x100>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	4a1c      	ldr	r2, [pc, #112]	; (8000780 <MX_GPIO_Init+0x100>)
 8000710:	f043 0308 	orr.w	r3, r3, #8
 8000714:	6313      	str	r3, [r2, #48]	; 0x30
 8000716:	4b1a      	ldr	r3, [pc, #104]	; (8000780 <MX_GPIO_Init+0x100>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	f003 0308 	and.w	r3, r3, #8
 800071e:	603b      	str	r3, [r7, #0]
 8000720:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000722:	2200      	movs	r2, #0
 8000724:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000728:	4816      	ldr	r0, [pc, #88]	; (8000784 <MX_GPIO_Init+0x104>)
 800072a:	f001 fb37 	bl	8001d9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800072e:	2301      	movs	r3, #1
 8000730:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000732:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000736:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000738:	2300      	movs	r3, #0
 800073a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800073c:	f107 0314 	add.w	r3, r7, #20
 8000740:	4619      	mov	r1, r3
 8000742:	4811      	ldr	r0, [pc, #68]	; (8000788 <MX_GPIO_Init+0x108>)
 8000744:	f001 f98e 	bl	8001a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000748:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800074c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800074e:	2301      	movs	r3, #1
 8000750:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000752:	2300      	movs	r3, #0
 8000754:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000756:	2300      	movs	r3, #0
 8000758:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800075a:	f107 0314 	add.w	r3, r7, #20
 800075e:	4619      	mov	r1, r3
 8000760:	4808      	ldr	r0, [pc, #32]	; (8000784 <MX_GPIO_Init+0x104>)
 8000762:	f001 f97f 	bl	8001a64 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000766:	2200      	movs	r2, #0
 8000768:	2105      	movs	r1, #5
 800076a:	2006      	movs	r0, #6
 800076c:	f000 fb0e 	bl	8000d8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000770:	2006      	movs	r0, #6
 8000772:	f000 fb27 	bl	8000dc4 <HAL_NVIC_EnableIRQ>

}
 8000776:	bf00      	nop
 8000778:	3728      	adds	r7, #40	; 0x28
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	40023800 	.word	0x40023800
 8000784:	40020c00 	.word	0x40020c00
 8000788:	40020000 	.word	0x40020000

0800078c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000794:	f017 fc44 	bl	8018020 <MX_USB_DEVICE_Init>

  /* init code for LWIP */
  MX_LWIP_Init();
 8000798:	f005 f96c 	bl	8005a74 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800079c:	2001      	movs	r0, #1
 800079e:	f007 fcee 	bl	800817e <osDelay>
 80007a2:	e7fb      	b.n	800079c <StartDefaultTask+0x10>

080007a4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4a04      	ldr	r2, [pc, #16]	; (80007c4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007b2:	4293      	cmp	r3, r2
 80007b4:	d101      	bne.n	80007ba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007b6:	f000 f9ed 	bl	8000b94 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007ba:	bf00      	nop
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	40010000 	.word	0x40010000

080007c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007cc:	b672      	cpsid	i
}
 80007ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007d0:	e7fe      	b.n	80007d0 <Error_Handler+0x8>
	...

080007d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	607b      	str	r3, [r7, #4]
 80007de:	4b12      	ldr	r3, [pc, #72]	; (8000828 <HAL_MspInit+0x54>)
 80007e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007e2:	4a11      	ldr	r2, [pc, #68]	; (8000828 <HAL_MspInit+0x54>)
 80007e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007e8:	6453      	str	r3, [r2, #68]	; 0x44
 80007ea:	4b0f      	ldr	r3, [pc, #60]	; (8000828 <HAL_MspInit+0x54>)
 80007ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007f2:	607b      	str	r3, [r7, #4]
 80007f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	603b      	str	r3, [r7, #0]
 80007fa:	4b0b      	ldr	r3, [pc, #44]	; (8000828 <HAL_MspInit+0x54>)
 80007fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007fe:	4a0a      	ldr	r2, [pc, #40]	; (8000828 <HAL_MspInit+0x54>)
 8000800:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000804:	6413      	str	r3, [r2, #64]	; 0x40
 8000806:	4b08      	ldr	r3, [pc, #32]	; (8000828 <HAL_MspInit+0x54>)
 8000808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800080e:	603b      	str	r3, [r7, #0]
 8000810:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000812:	2200      	movs	r2, #0
 8000814:	210f      	movs	r1, #15
 8000816:	f06f 0001 	mvn.w	r0, #1
 800081a:	f000 fab7 	bl	8000d8c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800081e:	bf00      	nop
 8000820:	3708      	adds	r7, #8
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	40023800 	.word	0x40023800

0800082c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b08c      	sub	sp, #48	; 0x30
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000834:	2300      	movs	r3, #0
 8000836:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000838:	2300      	movs	r3, #0
 800083a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 800083c:	2200      	movs	r2, #0
 800083e:	6879      	ldr	r1, [r7, #4]
 8000840:	2019      	movs	r0, #25
 8000842:	f000 faa3 	bl	8000d8c <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000846:	2019      	movs	r0, #25
 8000848:	f000 fabc 	bl	8000dc4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800084c:	2300      	movs	r3, #0
 800084e:	60fb      	str	r3, [r7, #12]
 8000850:	4b1f      	ldr	r3, [pc, #124]	; (80008d0 <HAL_InitTick+0xa4>)
 8000852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000854:	4a1e      	ldr	r2, [pc, #120]	; (80008d0 <HAL_InitTick+0xa4>)
 8000856:	f043 0301 	orr.w	r3, r3, #1
 800085a:	6453      	str	r3, [r2, #68]	; 0x44
 800085c:	4b1c      	ldr	r3, [pc, #112]	; (80008d0 <HAL_InitTick+0xa4>)
 800085e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000860:	f003 0301 	and.w	r3, r3, #1
 8000864:	60fb      	str	r3, [r7, #12]
 8000866:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000868:	f107 0210 	add.w	r2, r7, #16
 800086c:	f107 0314 	add.w	r3, r7, #20
 8000870:	4611      	mov	r1, r2
 8000872:	4618      	mov	r0, r3
 8000874:	f003 f9d0 	bl	8003c18 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000878:	f003 f9ba 	bl	8003bf0 <HAL_RCC_GetPCLK2Freq>
 800087c:	4603      	mov	r3, r0
 800087e:	005b      	lsls	r3, r3, #1
 8000880:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000884:	4a13      	ldr	r2, [pc, #76]	; (80008d4 <HAL_InitTick+0xa8>)
 8000886:	fba2 2303 	umull	r2, r3, r2, r3
 800088a:	0c9b      	lsrs	r3, r3, #18
 800088c:	3b01      	subs	r3, #1
 800088e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000890:	4b11      	ldr	r3, [pc, #68]	; (80008d8 <HAL_InitTick+0xac>)
 8000892:	4a12      	ldr	r2, [pc, #72]	; (80008dc <HAL_InitTick+0xb0>)
 8000894:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000896:	4b10      	ldr	r3, [pc, #64]	; (80008d8 <HAL_InitTick+0xac>)
 8000898:	f240 32e7 	movw	r2, #999	; 0x3e7
 800089c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800089e:	4a0e      	ldr	r2, [pc, #56]	; (80008d8 <HAL_InitTick+0xac>)
 80008a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008a2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80008a4:	4b0c      	ldr	r3, [pc, #48]	; (80008d8 <HAL_InitTick+0xac>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008aa:	4b0b      	ldr	r3, [pc, #44]	; (80008d8 <HAL_InitTick+0xac>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80008b0:	4809      	ldr	r0, [pc, #36]	; (80008d8 <HAL_InitTick+0xac>)
 80008b2:	f003 f9e3 	bl	8003c7c <HAL_TIM_Base_Init>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d104      	bne.n	80008c6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80008bc:	4806      	ldr	r0, [pc, #24]	; (80008d8 <HAL_InitTick+0xac>)
 80008be:	f003 fa37 	bl	8003d30 <HAL_TIM_Base_Start_IT>
 80008c2:	4603      	mov	r3, r0
 80008c4:	e000      	b.n	80008c8 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80008c6:	2301      	movs	r3, #1
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	3730      	adds	r7, #48	; 0x30
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	40023800 	.word	0x40023800
 80008d4:	431bde83 	.word	0x431bde83
 80008d8:	20000194 	.word	0x20000194
 80008dc:	40010000 	.word	0x40010000

080008e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008e4:	e7fe      	b.n	80008e4 <NMI_Handler+0x4>

080008e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008e6:	b480      	push	{r7}
 80008e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ea:	e7fe      	b.n	80008ea <HardFault_Handler+0x4>

080008ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008f0:	e7fe      	b.n	80008f0 <MemManage_Handler+0x4>

080008f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008f2:	b480      	push	{r7}
 80008f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008f6:	e7fe      	b.n	80008f6 <BusFault_Handler+0x4>

080008f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008fc:	e7fe      	b.n	80008fc <UsageFault_Handler+0x4>

080008fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008fe:	b480      	push	{r7}
 8000900:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000902:	bf00      	nop
 8000904:	46bd      	mov	sp, r7
 8000906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090a:	4770      	bx	lr

0800090c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000910:	2001      	movs	r0, #1
 8000912:	f001 fa5d 	bl	8001dd0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}
	...

0800091c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000920:	4802      	ldr	r0, [pc, #8]	; (800092c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000922:	f003 fa75 	bl	8003e10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000926:	bf00      	nop
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	20000194 	.word	0x20000194

08000930 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000934:	4802      	ldr	r0, [pc, #8]	; (8000940 <OTG_FS_IRQHandler+0x10>)
 8000936:	f001 fbbe 	bl	80020b6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	2000df00 	.word	0x2000df00

08000944 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
	return 1;
 8000948:	2301      	movs	r3, #1
}
 800094a:	4618      	mov	r0, r3
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr

08000954 <_kill>:

int _kill(int pid, int sig)
{
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
 800095c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800095e:	4b05      	ldr	r3, [pc, #20]	; (8000974 <_kill+0x20>)
 8000960:	2216      	movs	r2, #22
 8000962:	601a      	str	r2, [r3, #0]
	return -1;
 8000964:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000968:	4618      	mov	r0, r3
 800096a:	370c      	adds	r7, #12
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr
 8000974:	2000ca1c 	.word	0x2000ca1c

08000978 <_exit>:

void _exit (int status)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000980:	f04f 31ff 	mov.w	r1, #4294967295
 8000984:	6878      	ldr	r0, [r7, #4]
 8000986:	f7ff ffe5 	bl	8000954 <_kill>
	while (1) {}		/* Make sure we hang here */
 800098a:	e7fe      	b.n	800098a <_exit+0x12>

0800098c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b086      	sub	sp, #24
 8000990:	af00      	add	r7, sp, #0
 8000992:	60f8      	str	r0, [r7, #12]
 8000994:	60b9      	str	r1, [r7, #8]
 8000996:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000998:	2300      	movs	r3, #0
 800099a:	617b      	str	r3, [r7, #20]
 800099c:	e00a      	b.n	80009b4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800099e:	f3af 8000 	nop.w
 80009a2:	4601      	mov	r1, r0
 80009a4:	68bb      	ldr	r3, [r7, #8]
 80009a6:	1c5a      	adds	r2, r3, #1
 80009a8:	60ba      	str	r2, [r7, #8]
 80009aa:	b2ca      	uxtb	r2, r1
 80009ac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009ae:	697b      	ldr	r3, [r7, #20]
 80009b0:	3301      	adds	r3, #1
 80009b2:	617b      	str	r3, [r7, #20]
 80009b4:	697a      	ldr	r2, [r7, #20]
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	429a      	cmp	r2, r3
 80009ba:	dbf0      	blt.n	800099e <_read+0x12>
	}

return len;
 80009bc:	687b      	ldr	r3, [r7, #4]
}
 80009be:	4618      	mov	r0, r3
 80009c0:	3718      	adds	r7, #24
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}

080009c6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009c6:	b580      	push	{r7, lr}
 80009c8:	b086      	sub	sp, #24
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	60f8      	str	r0, [r7, #12]
 80009ce:	60b9      	str	r1, [r7, #8]
 80009d0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009d2:	2300      	movs	r3, #0
 80009d4:	617b      	str	r3, [r7, #20]
 80009d6:	e009      	b.n	80009ec <_write+0x26>
	{
		__io_putchar(*ptr++);
 80009d8:	68bb      	ldr	r3, [r7, #8]
 80009da:	1c5a      	adds	r2, r3, #1
 80009dc:	60ba      	str	r2, [r7, #8]
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	4618      	mov	r0, r3
 80009e2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009e6:	697b      	ldr	r3, [r7, #20]
 80009e8:	3301      	adds	r3, #1
 80009ea:	617b      	str	r3, [r7, #20]
 80009ec:	697a      	ldr	r2, [r7, #20]
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	429a      	cmp	r2, r3
 80009f2:	dbf1      	blt.n	80009d8 <_write+0x12>
	}
	return len;
 80009f4:	687b      	ldr	r3, [r7, #4]
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	3718      	adds	r7, #24
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}

080009fe <_close>:

int _close(int file)
{
 80009fe:	b480      	push	{r7}
 8000a00:	b083      	sub	sp, #12
 8000a02:	af00      	add	r7, sp, #0
 8000a04:	6078      	str	r0, [r7, #4]
	return -1;
 8000a06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	370c      	adds	r7, #12
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr

08000a16 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a16:	b480      	push	{r7}
 8000a18:	b083      	sub	sp, #12
 8000a1a:	af00      	add	r7, sp, #0
 8000a1c:	6078      	str	r0, [r7, #4]
 8000a1e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a26:	605a      	str	r2, [r3, #4]
	return 0;
 8000a28:	2300      	movs	r3, #0
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	370c      	adds	r7, #12
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr

08000a36 <_isatty>:

int _isatty(int file)
{
 8000a36:	b480      	push	{r7}
 8000a38:	b083      	sub	sp, #12
 8000a3a:	af00      	add	r7, sp, #0
 8000a3c:	6078      	str	r0, [r7, #4]
	return 1;
 8000a3e:	2301      	movs	r3, #1
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	370c      	adds	r7, #12
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr

08000a4c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b085      	sub	sp, #20
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	60f8      	str	r0, [r7, #12]
 8000a54:	60b9      	str	r1, [r7, #8]
 8000a56:	607a      	str	r2, [r7, #4]
	return 0;
 8000a58:	2300      	movs	r3, #0
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	3714      	adds	r7, #20
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
	...

08000a68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b087      	sub	sp, #28
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a70:	4a14      	ldr	r2, [pc, #80]	; (8000ac4 <_sbrk+0x5c>)
 8000a72:	4b15      	ldr	r3, [pc, #84]	; (8000ac8 <_sbrk+0x60>)
 8000a74:	1ad3      	subs	r3, r2, r3
 8000a76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a78:	697b      	ldr	r3, [r7, #20]
 8000a7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a7c:	4b13      	ldr	r3, [pc, #76]	; (8000acc <_sbrk+0x64>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d102      	bne.n	8000a8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a84:	4b11      	ldr	r3, [pc, #68]	; (8000acc <_sbrk+0x64>)
 8000a86:	4a12      	ldr	r2, [pc, #72]	; (8000ad0 <_sbrk+0x68>)
 8000a88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a8a:	4b10      	ldr	r3, [pc, #64]	; (8000acc <_sbrk+0x64>)
 8000a8c:	681a      	ldr	r2, [r3, #0]
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	4413      	add	r3, r2
 8000a92:	693a      	ldr	r2, [r7, #16]
 8000a94:	429a      	cmp	r2, r3
 8000a96:	d205      	bcs.n	8000aa4 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000a98:	4b0e      	ldr	r3, [pc, #56]	; (8000ad4 <_sbrk+0x6c>)
 8000a9a:	220c      	movs	r2, #12
 8000a9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000aa2:	e009      	b.n	8000ab8 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000aa4:	4b09      	ldr	r3, [pc, #36]	; (8000acc <_sbrk+0x64>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000aaa:	4b08      	ldr	r3, [pc, #32]	; (8000acc <_sbrk+0x64>)
 8000aac:	681a      	ldr	r2, [r3, #0]
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	4413      	add	r3, r2
 8000ab2:	4a06      	ldr	r2, [pc, #24]	; (8000acc <_sbrk+0x64>)
 8000ab4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ab6:	68fb      	ldr	r3, [r7, #12]
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	371c      	adds	r7, #28
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr
 8000ac4:	20020000 	.word	0x20020000
 8000ac8:	00004000 	.word	0x00004000
 8000acc:	200001dc 	.word	0x200001dc
 8000ad0:	2000e638 	.word	0x2000e638
 8000ad4:	2000ca1c 	.word	0x2000ca1c

08000ad8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000adc:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <SystemInit+0x20>)
 8000ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ae2:	4a05      	ldr	r2, [pc, #20]	; (8000af8 <SystemInit+0x20>)
 8000ae4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ae8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000aec:	bf00      	nop
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	e000ed00 	.word	0xe000ed00

08000afc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000afc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b34 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b00:	480d      	ldr	r0, [pc, #52]	; (8000b38 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b02:	490e      	ldr	r1, [pc, #56]	; (8000b3c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b04:	4a0e      	ldr	r2, [pc, #56]	; (8000b40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b08:	e002      	b.n	8000b10 <LoopCopyDataInit>

08000b0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b0e:	3304      	adds	r3, #4

08000b10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b14:	d3f9      	bcc.n	8000b0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b16:	4a0b      	ldr	r2, [pc, #44]	; (8000b44 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b18:	4c0b      	ldr	r4, [pc, #44]	; (8000b48 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b1c:	e001      	b.n	8000b22 <LoopFillZerobss>

08000b1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b20:	3204      	adds	r2, #4

08000b22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b24:	d3fb      	bcc.n	8000b1e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b26:	f7ff ffd7 	bl	8000ad8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b2a:	f017 ff6d 	bl	8018a08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b2e:	f7ff fd21 	bl	8000574 <main>
  bx  lr    
 8000b32:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b34:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b3c:	20000174 	.word	0x20000174
  ldr r2, =_sidata
 8000b40:	0801cd24 	.word	0x0801cd24
  ldr r2, =_sbss
 8000b44:	20000174 	.word	0x20000174
  ldr r4, =_ebss
 8000b48:	2000e638 	.word	0x2000e638

08000b4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b4c:	e7fe      	b.n	8000b4c <ADC_IRQHandler>
	...

08000b50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b54:	4b0e      	ldr	r3, [pc, #56]	; (8000b90 <HAL_Init+0x40>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a0d      	ldr	r2, [pc, #52]	; (8000b90 <HAL_Init+0x40>)
 8000b5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b60:	4b0b      	ldr	r3, [pc, #44]	; (8000b90 <HAL_Init+0x40>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a0a      	ldr	r2, [pc, #40]	; (8000b90 <HAL_Init+0x40>)
 8000b66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b6c:	4b08      	ldr	r3, [pc, #32]	; (8000b90 <HAL_Init+0x40>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a07      	ldr	r2, [pc, #28]	; (8000b90 <HAL_Init+0x40>)
 8000b72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b78:	2003      	movs	r0, #3
 8000b7a:	f000 f8fc 	bl	8000d76 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b7e:	200f      	movs	r0, #15
 8000b80:	f7ff fe54 	bl	800082c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b84:	f7ff fe26 	bl	80007d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b88:	2300      	movs	r3, #0
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40023c00 	.word	0x40023c00

08000b94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b98:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <HAL_IncTick+0x20>)
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	461a      	mov	r2, r3
 8000b9e:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <HAL_IncTick+0x24>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4413      	add	r3, r2
 8000ba4:	4a04      	ldr	r2, [pc, #16]	; (8000bb8 <HAL_IncTick+0x24>)
 8000ba6:	6013      	str	r3, [r2, #0]
}
 8000ba8:	bf00      	nop
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	20000008 	.word	0x20000008
 8000bb8:	200001e0 	.word	0x200001e0

08000bbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  return uwTick;
 8000bc0:	4b03      	ldr	r3, [pc, #12]	; (8000bd0 <HAL_GetTick+0x14>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	200001e0 	.word	0x200001e0

08000bd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b084      	sub	sp, #16
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bdc:	f7ff ffee 	bl	8000bbc <HAL_GetTick>
 8000be0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bec:	d005      	beq.n	8000bfa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bee:	4b0a      	ldr	r3, [pc, #40]	; (8000c18 <HAL_Delay+0x44>)
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	461a      	mov	r2, r3
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	4413      	add	r3, r2
 8000bf8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000bfa:	bf00      	nop
 8000bfc:	f7ff ffde 	bl	8000bbc <HAL_GetTick>
 8000c00:	4602      	mov	r2, r0
 8000c02:	68bb      	ldr	r3, [r7, #8]
 8000c04:	1ad3      	subs	r3, r2, r3
 8000c06:	68fa      	ldr	r2, [r7, #12]
 8000c08:	429a      	cmp	r2, r3
 8000c0a:	d8f7      	bhi.n	8000bfc <HAL_Delay+0x28>
  {
  }
}
 8000c0c:	bf00      	nop
 8000c0e:	bf00      	nop
 8000c10:	3710      	adds	r7, #16
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	20000008 	.word	0x20000008

08000c1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b085      	sub	sp, #20
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	f003 0307 	and.w	r3, r3, #7
 8000c2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c2c:	4b0c      	ldr	r3, [pc, #48]	; (8000c60 <__NVIC_SetPriorityGrouping+0x44>)
 8000c2e:	68db      	ldr	r3, [r3, #12]
 8000c30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c32:	68ba      	ldr	r2, [r7, #8]
 8000c34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c38:	4013      	ands	r3, r2
 8000c3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c40:	68bb      	ldr	r3, [r7, #8]
 8000c42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c4e:	4a04      	ldr	r2, [pc, #16]	; (8000c60 <__NVIC_SetPriorityGrouping+0x44>)
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	60d3      	str	r3, [r2, #12]
}
 8000c54:	bf00      	nop
 8000c56:	3714      	adds	r7, #20
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr
 8000c60:	e000ed00 	.word	0xe000ed00

08000c64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c68:	4b04      	ldr	r3, [pc, #16]	; (8000c7c <__NVIC_GetPriorityGrouping+0x18>)
 8000c6a:	68db      	ldr	r3, [r3, #12]
 8000c6c:	0a1b      	lsrs	r3, r3, #8
 8000c6e:	f003 0307 	and.w	r3, r3, #7
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr
 8000c7c:	e000ed00 	.word	0xe000ed00

08000c80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	4603      	mov	r3, r0
 8000c88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	db0b      	blt.n	8000caa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c92:	79fb      	ldrb	r3, [r7, #7]
 8000c94:	f003 021f 	and.w	r2, r3, #31
 8000c98:	4907      	ldr	r1, [pc, #28]	; (8000cb8 <__NVIC_EnableIRQ+0x38>)
 8000c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9e:	095b      	lsrs	r3, r3, #5
 8000ca0:	2001      	movs	r0, #1
 8000ca2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ca6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000caa:	bf00      	nop
 8000cac:	370c      	adds	r7, #12
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	e000e100 	.word	0xe000e100

08000cbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	6039      	str	r1, [r7, #0]
 8000cc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	db0a      	blt.n	8000ce6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	b2da      	uxtb	r2, r3
 8000cd4:	490c      	ldr	r1, [pc, #48]	; (8000d08 <__NVIC_SetPriority+0x4c>)
 8000cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cda:	0112      	lsls	r2, r2, #4
 8000cdc:	b2d2      	uxtb	r2, r2
 8000cde:	440b      	add	r3, r1
 8000ce0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ce4:	e00a      	b.n	8000cfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	b2da      	uxtb	r2, r3
 8000cea:	4908      	ldr	r1, [pc, #32]	; (8000d0c <__NVIC_SetPriority+0x50>)
 8000cec:	79fb      	ldrb	r3, [r7, #7]
 8000cee:	f003 030f 	and.w	r3, r3, #15
 8000cf2:	3b04      	subs	r3, #4
 8000cf4:	0112      	lsls	r2, r2, #4
 8000cf6:	b2d2      	uxtb	r2, r2
 8000cf8:	440b      	add	r3, r1
 8000cfa:	761a      	strb	r2, [r3, #24]
}
 8000cfc:	bf00      	nop
 8000cfe:	370c      	adds	r7, #12
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr
 8000d08:	e000e100 	.word	0xe000e100
 8000d0c:	e000ed00 	.word	0xe000ed00

08000d10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b089      	sub	sp, #36	; 0x24
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	60f8      	str	r0, [r7, #12]
 8000d18:	60b9      	str	r1, [r7, #8]
 8000d1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	f003 0307 	and.w	r3, r3, #7
 8000d22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d24:	69fb      	ldr	r3, [r7, #28]
 8000d26:	f1c3 0307 	rsb	r3, r3, #7
 8000d2a:	2b04      	cmp	r3, #4
 8000d2c:	bf28      	it	cs
 8000d2e:	2304      	movcs	r3, #4
 8000d30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d32:	69fb      	ldr	r3, [r7, #28]
 8000d34:	3304      	adds	r3, #4
 8000d36:	2b06      	cmp	r3, #6
 8000d38:	d902      	bls.n	8000d40 <NVIC_EncodePriority+0x30>
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	3b03      	subs	r3, #3
 8000d3e:	e000      	b.n	8000d42 <NVIC_EncodePriority+0x32>
 8000d40:	2300      	movs	r3, #0
 8000d42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d44:	f04f 32ff 	mov.w	r2, #4294967295
 8000d48:	69bb      	ldr	r3, [r7, #24]
 8000d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4e:	43da      	mvns	r2, r3
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	401a      	ands	r2, r3
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d58:	f04f 31ff 	mov.w	r1, #4294967295
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d62:	43d9      	mvns	r1, r3
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d68:	4313      	orrs	r3, r2
         );
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	3724      	adds	r7, #36	; 0x24
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr

08000d76 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d76:	b580      	push	{r7, lr}
 8000d78:	b082      	sub	sp, #8
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d7e:	6878      	ldr	r0, [r7, #4]
 8000d80:	f7ff ff4c 	bl	8000c1c <__NVIC_SetPriorityGrouping>
}
 8000d84:	bf00      	nop
 8000d86:	3708      	adds	r7, #8
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b086      	sub	sp, #24
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	4603      	mov	r3, r0
 8000d94:	60b9      	str	r1, [r7, #8]
 8000d96:	607a      	str	r2, [r7, #4]
 8000d98:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d9e:	f7ff ff61 	bl	8000c64 <__NVIC_GetPriorityGrouping>
 8000da2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000da4:	687a      	ldr	r2, [r7, #4]
 8000da6:	68b9      	ldr	r1, [r7, #8]
 8000da8:	6978      	ldr	r0, [r7, #20]
 8000daa:	f7ff ffb1 	bl	8000d10 <NVIC_EncodePriority>
 8000dae:	4602      	mov	r2, r0
 8000db0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000db4:	4611      	mov	r1, r2
 8000db6:	4618      	mov	r0, r3
 8000db8:	f7ff ff80 	bl	8000cbc <__NVIC_SetPriority>
}
 8000dbc:	bf00      	nop
 8000dbe:	3718      	adds	r7, #24
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}

08000dc4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	4603      	mov	r3, r0
 8000dcc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f7ff ff54 	bl	8000c80 <__NVIC_EnableIRQ>
}
 8000dd8:	bf00      	nop
 8000dda:	3708      	adds	r7, #8
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d101      	bne.n	8000df2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8000dee:	2301      	movs	r3, #1
 8000df0:	e06c      	b.n	8000ecc <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d106      	bne.n	8000e0a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	2223      	movs	r2, #35	; 0x23
 8000e00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8000e04:	6878      	ldr	r0, [r7, #4]
 8000e06:	f000 f869 	bl	8000edc <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	60bb      	str	r3, [r7, #8]
 8000e0e:	4b31      	ldr	r3, [pc, #196]	; (8000ed4 <HAL_ETH_Init+0xf4>)
 8000e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e12:	4a30      	ldr	r2, [pc, #192]	; (8000ed4 <HAL_ETH_Init+0xf4>)
 8000e14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e18:	6453      	str	r3, [r2, #68]	; 0x44
 8000e1a:	4b2e      	ldr	r3, [pc, #184]	; (8000ed4 <HAL_ETH_Init+0xf4>)
 8000e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e22:	60bb      	str	r3, [r7, #8]
 8000e24:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8000e26:	4b2c      	ldr	r3, [pc, #176]	; (8000ed8 <HAL_ETH_Init+0xf8>)
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	4a2b      	ldr	r2, [pc, #172]	; (8000ed8 <HAL_ETH_Init+0xf8>)
 8000e2c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000e30:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8000e32:	4b29      	ldr	r3, [pc, #164]	; (8000ed8 <HAL_ETH_Init+0xf8>)
 8000e34:	685a      	ldr	r2, [r3, #4]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	689b      	ldr	r3, [r3, #8]
 8000e3a:	4927      	ldr	r1, [pc, #156]	; (8000ed8 <HAL_ETH_Init+0xf8>)
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8000e40:	4b25      	ldr	r3, [pc, #148]	; (8000ed8 <HAL_ETH_Init+0xf8>)
 8000e42:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	687a      	ldr	r2, [r7, #4]
 8000e50:	6812      	ldr	r2, [r2, #0]
 8000e52:	f043 0301 	orr.w	r3, r3, #1
 8000e56:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8000e5a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e5c:	f7ff feae 	bl	8000bbc <HAL_GetTick>
 8000e60:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8000e62:	e011      	b.n	8000e88 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8000e64:	f7ff feaa 	bl	8000bbc <HAL_GetTick>
 8000e68:	4602      	mov	r2, r0
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	1ad3      	subs	r3, r2, r3
 8000e6e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000e72:	d909      	bls.n	8000e88 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2204      	movs	r2, #4
 8000e78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	22e0      	movs	r2, #224	; 0xe0
 8000e80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8000e84:	2301      	movs	r3, #1
 8000e86:	e021      	b.n	8000ecc <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f003 0301 	and.w	r3, r3, #1
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d1e4      	bne.n	8000e64 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8000e9a:	6878      	ldr	r0, [r7, #4]
 8000e9c:	f000 fb3c 	bl	8001518 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8000ea0:	6878      	ldr	r0, [r7, #4]
 8000ea2:	f000 fbe3 	bl	800166c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8000ea6:	6878      	ldr	r0, [r7, #4]
 8000ea8:	f000 fc39 	bl	800171e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	6878      	ldr	r0, [r7, #4]
 8000eb6:	f000 fba1 	bl	80015fc <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2210      	movs	r2, #16
 8000ec6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8000eca:	2300      	movs	r3, #0
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	3710      	adds	r7, #16
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	40023800 	.word	0x40023800
 8000ed8:	40013800 	.word	0x40013800

08000edc <HAL_ETH_MspInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_MspInit(ETH_HandleTypeDef *heth)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_MspInit could be implemented in the user file
  */
}
 8000ee4:	bf00      	nop
 8000ee6:	370c      	adds	r7, #12
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr

08000ef0 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d109      	bne.n	8000f14 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f06:	f043 0201 	orr.w	r2, r3, #1
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8000f10:	2301      	movs	r3, #1
 8000f12:	e045      	b.n	8000fa0 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000f1a:	2b23      	cmp	r3, #35	; 0x23
 8000f1c:	d13f      	bne.n	8000f9e <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8000f26:	2201      	movs	r2, #1
 8000f28:	6839      	ldr	r1, [r7, #0]
 8000f2a:	6878      	ldr	r0, [r7, #4]
 8000f2c:	f000 fc64 	bl	80017f8 <ETH_Prepare_Tx_Descriptors>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d009      	beq.n	8000f4a <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f3c:	f043 0202 	orr.w	r2, r3, #2
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8000f46:	2301      	movs	r3, #1
 8000f48:	e02a      	b.n	8000fa0 <HAL_ETH_Transmit_IT+0xb0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000f4a:	f3bf 8f4f 	dsb	sy
}
 8000f4e:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f54:	1c5a      	adds	r2, r3, #1
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	629a      	str	r2, [r3, #40]	; 0x28
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f5e:	2b03      	cmp	r3, #3
 8000f60:	d904      	bls.n	8000f6c <HAL_ETH_Transmit_IT+0x7c>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f66:	1f1a      	subs	r2, r3, #4
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000f74:	695b      	ldr	r3, [r3, #20]
 8000f76:	f003 0304 	and.w	r3, r3, #4
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d00d      	beq.n	8000f9a <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000f86:	461a      	mov	r2, r3
 8000f88:	2304      	movs	r3, #4
 8000f8a:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000f94:	461a      	mov	r2, r3
 8000f96:	2300      	movs	r3, #0
 8000f98:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	e000      	b.n	8000fa0 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
  }
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3708      	adds	r7, #8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}

08000fa8 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b088      	sub	sp, #32
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d109      	bne.n	8000fd4 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fc6:	f043 0201 	orr.w	r2, r3, #1
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	e0a8      	b.n	8001126 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000fda:	2b23      	cmp	r3, #35	; 0x23
 8000fdc:	d001      	beq.n	8000fe2 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e0a1      	b.n	8001126 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fe6:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	69fa      	ldr	r2, [r7, #28]
 8000fec:	3212      	adds	r2, #18
 8000fee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ff2:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000ff8:	f1c3 0304 	rsb	r3, r3, #4
 8000ffc:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8000ffe:	e06a      	b.n	80010d6 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8001000:	69bb      	ldr	r3, [r7, #24]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001008:	2b00      	cmp	r3, #0
 800100a:	d007      	beq.n	800101c <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 800100c:	69bb      	ldr	r3, [r7, #24]
 800100e:	699a      	ldr	r2, [r3, #24]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8001014:	69bb      	ldr	r3, [r7, #24]
 8001016:	69da      	ldr	r2, [r3, #28]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 800101c:	69bb      	ldr	r3, [r7, #24]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001024:	2b00      	cmp	r3, #0
 8001026:	d103      	bne.n	8001030 <HAL_ETH_ReadData+0x88>
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800102c:	2b00      	cmp	r3, #0
 800102e:	d040      	beq.n	80010b2 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001030:	69bb      	ldr	r3, [r7, #24]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001038:	2b00      	cmp	r3, #0
 800103a:	d005      	beq.n	8001048 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2200      	movs	r2, #0
 8001040:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2200      	movs	r2, #0
 8001046:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	695b      	ldr	r3, [r3, #20]
 800104c:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 800104e:	69bb      	ldr	r3, [r7, #24]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001056:	2b00      	cmp	r3, #0
 8001058:	d00c      	beq.n	8001074 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 800105a:	69bb      	ldr	r3, [r7, #24]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	0c1b      	lsrs	r3, r3, #16
 8001060:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001064:	3b04      	subs	r3, #4
 8001066:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8001068:	69bb      	ldr	r3, [r7, #24]
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8001070:	2301      	movs	r3, #1
 8001072:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8001074:	69bb      	ldr	r3, [r7, #24]
 8001076:	689a      	ldr	r2, [r3, #8]
 8001078:	69bb      	ldr	r3, [r7, #24]
 800107a:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001088:	69bb      	ldr	r3, [r7, #24]
 800108a:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800108c:	461a      	mov	r2, r3
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	b29b      	uxth	r3, r3
 8001092:	f004 ff71 	bl	8005f78 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800109a:	1c5a      	adds	r2, r3, #1
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	441a      	add	r2, r3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 80010ac:	69bb      	ldr	r3, [r7, #24]
 80010ae:	2200      	movs	r2, #0
 80010b0:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	3301      	adds	r3, #1
 80010b6:	61fb      	str	r3, [r7, #28]
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	2b03      	cmp	r3, #3
 80010bc:	d902      	bls.n	80010c4 <HAL_ETH_ReadData+0x11c>
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	3b04      	subs	r3, #4
 80010c2:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	69fa      	ldr	r2, [r7, #28]
 80010c8:	3212      	adds	r2, #18
 80010ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010ce:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	3301      	adds	r3, #1
 80010d4:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80010d6:	69bb      	ldr	r3, [r7, #24]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	db06      	blt.n	80010ec <HAL_ETH_ReadData+0x144>
 80010de:	697a      	ldr	r2, [r7, #20]
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	429a      	cmp	r2, r3
 80010e4:	d202      	bcs.n	80010ec <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 80010e6:	7bfb      	ldrb	r3, [r7, #15]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d089      	beq.n	8001000 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	441a      	add	r2, r3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d002      	beq.n	8001106 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001100:	6878      	ldr	r0, [r7, #4]
 8001102:	f000 f815 	bl	8001130 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	69fa      	ldr	r2, [r7, #28]
 800110a:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 800110c:	7bfb      	ldrb	r3, [r7, #15]
 800110e:	2b01      	cmp	r3, #1
 8001110:	d108      	bne.n	8001124 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2200      	movs	r2, #0
 800111e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8001120:	2300      	movs	r3, #0
 8001122:	e000      	b.n	8001126 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001124:	2301      	movs	r3, #1
}
 8001126:	4618      	mov	r0, r3
 8001128:	3720      	adds	r7, #32
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
	...

08001130 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b088      	sub	sp, #32
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001138:	2300      	movs	r3, #0
 800113a:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 800113c:	2301      	movs	r3, #1
 800113e:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001144:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	69fa      	ldr	r2, [r7, #28]
 800114a:	3212      	adds	r2, #18
 800114c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001150:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001156:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001158:	e03e      	b.n	80011d8 <ETH_UpdateDescriptor+0xa8>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	6a1b      	ldr	r3, [r3, #32]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d112      	bne.n	8001188 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001162:	f107 030c 	add.w	r3, r7, #12
 8001166:	4618      	mov	r0, r3
 8001168:	f004 fed6 	bl	8005f18 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d102      	bne.n	8001178 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001172:	2300      	movs	r3, #0
 8001174:	74fb      	strb	r3, [r7, #19]
 8001176:	e007      	b.n	8001188 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	461a      	mov	r2, r3
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	461a      	mov	r2, r3
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8001188:	7cfb      	ldrb	r3, [r7, #19]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d024      	beq.n	80011d8 <ETH_UpdateDescriptor+0xa8>
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800118e:	f3bf 8f5f 	dmb	sy
}
 8001192:	bf00      	nop
    {
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();

      WRITE_REG(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800119a:	601a      	str	r2, [r3, #0]

      if (heth->RxDescList.ItMode == 0U)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d103      	bne.n	80011ac <ETH_UpdateDescriptor+0x7c>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | 1000U | ETH_DMARXDESC_RCH);
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	4a1a      	ldr	r2, [pc, #104]	; (8001210 <ETH_UpdateDescriptor+0xe0>)
 80011a8:	605a      	str	r2, [r3, #4]
 80011aa:	e003      	b.n	80011b4 <ETH_UpdateDescriptor+0x84>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, 1000U | ETH_DMARXDESC_RCH);
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	f244 32e8 	movw	r2, #17384	; 0x43e8
 80011b2:	605a      	str	r2, [r3, #4]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	3301      	adds	r3, #1
 80011b8:	61fb      	str	r3, [r7, #28]
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	2b03      	cmp	r3, #3
 80011be:	d902      	bls.n	80011c6 <ETH_UpdateDescriptor+0x96>
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	3b04      	subs	r3, #4
 80011c4:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	69fa      	ldr	r2, [r7, #28]
 80011ca:	3212      	adds	r2, #18
 80011cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011d0:	617b      	str	r3, [r7, #20]
      desccount--;
 80011d2:	69bb      	ldr	r3, [r7, #24]
 80011d4:	3b01      	subs	r3, #1
 80011d6:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80011d8:	69bb      	ldr	r3, [r7, #24]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d002      	beq.n	80011e4 <ETH_UpdateDescriptor+0xb4>
 80011de:	7cfb      	ldrb	r3, [r7, #19]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d1ba      	bne.n	800115a <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	429a      	cmp	r2, r3
 80011ec:	d00c      	beq.n	8001208 <ETH_UpdateDescriptor+0xd8>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011f6:	461a      	mov	r2, r3
 80011f8:	2300      	movs	r3, #0
 80011fa:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	69fa      	ldr	r2, [r7, #28]
 8001200:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8001208:	bf00      	nop
 800120a:	3720      	adds	r7, #32
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	800043e8 	.word	0x800043e8

08001214 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b086      	sub	sp, #24
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	3318      	adds	r3, #24
 8001220:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8001222:	68bb      	ldr	r3, [r7, #8]
 8001224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001226:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800122c:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 800122e:	2301      	movs	r3, #1
 8001230:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001232:	e03f      	b.n	80012b4 <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 8001234:	2301      	movs	r3, #1
 8001236:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	3b01      	subs	r3, #1
 800123c:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 800123e:	68ba      	ldr	r2, [r7, #8]
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	3304      	adds	r3, #4
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	4413      	add	r3, r2
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d106      	bne.n	800125c <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	3301      	adds	r3, #1
 8001252:	f003 0303 	and.w	r3, r3, #3
 8001256:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8001258:	2300      	movs	r3, #0
 800125a:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 800125c:	7bbb      	ldrb	r3, [r7, #14]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d028      	beq.n	80012b4 <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	68d9      	ldr	r1, [r3, #12]
 8001266:	693a      	ldr	r2, [r7, #16]
 8001268:	4613      	mov	r3, r2
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	4413      	add	r3, r2
 800126e:	00db      	lsls	r3, r3, #3
 8001270:	440b      	add	r3, r1
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	2b00      	cmp	r3, #0
 8001276:	db1b      	blt.n	80012b0 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8001278:	68ba      	ldr	r2, [r7, #8]
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	3304      	adds	r3, #4
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	4413      	add	r3, r2
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	4618      	mov	r0, r3
 8001286:	f004 feb7 	bl	8005ff8 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 800128a:	68ba      	ldr	r2, [r7, #8]
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	3304      	adds	r3, #4
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	4413      	add	r3, r2
 8001294:	2200      	movs	r2, #0
 8001296:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	3301      	adds	r3, #1
 800129c:	f003 0303 	and.w	r3, r3, #3
 80012a0:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	697a      	ldr	r2, [r7, #20]
 80012a6:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	693a      	ldr	r2, [r7, #16]
 80012ac:	62da      	str	r2, [r3, #44]	; 0x2c
 80012ae:	e001      	b.n	80012b4 <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 80012b0:	2300      	movs	r3, #0
 80012b2:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d002      	beq.n	80012c0 <HAL_ETH_ReleaseTxPacket+0xac>
 80012ba:	7bfb      	ldrb	r3, [r7, #15]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d1b9      	bne.n	8001234 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 80012c0:	2300      	movs	r3, #0
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3718      	adds	r7, #24
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
	...

080012cc <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b084      	sub	sp, #16
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80012de:	68fa      	ldr	r2, [r7, #12]
 80012e0:	4b47      	ldr	r3, [pc, #284]	; (8001400 <ETH_SetMACConfig+0x134>)
 80012e2:	4013      	ands	r3, r2
 80012e4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	7c1b      	ldrb	r3, [r3, #16]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d102      	bne.n	80012f4 <ETH_SetMACConfig+0x28>
 80012ee:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80012f2:	e000      	b.n	80012f6 <ETH_SetMACConfig+0x2a>
 80012f4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	7c5b      	ldrb	r3, [r3, #17]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d102      	bne.n	8001304 <ETH_SetMACConfig+0x38>
 80012fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001302:	e000      	b.n	8001306 <ETH_SetMACConfig+0x3a>
 8001304:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001306:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800130c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	7fdb      	ldrb	r3, [r3, #31]
 8001312:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001314:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800131a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800131c:	683a      	ldr	r2, [r7, #0]
 800131e:	7f92      	ldrb	r2, [r2, #30]
 8001320:	2a00      	cmp	r2, #0
 8001322:	d102      	bne.n	800132a <ETH_SetMACConfig+0x5e>
 8001324:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001328:	e000      	b.n	800132c <ETH_SetMACConfig+0x60>
 800132a:	2200      	movs	r2, #0
                        macconf->Speed |
 800132c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	7f1b      	ldrb	r3, [r3, #28]
 8001332:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001334:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800133a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	791b      	ldrb	r3, [r3, #4]
 8001340:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001342:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001344:	683a      	ldr	r2, [r7, #0]
 8001346:	f892 2020 	ldrb.w	r2, [r2, #32]
 800134a:	2a00      	cmp	r2, #0
 800134c:	d102      	bne.n	8001354 <ETH_SetMACConfig+0x88>
 800134e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001352:	e000      	b.n	8001356 <ETH_SetMACConfig+0x8a>
 8001354:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001356:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	7bdb      	ldrb	r3, [r3, #15]
 800135c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800135e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001364:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800136c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800136e:	4313      	orrs	r3, r2
 8001370:	68fa      	ldr	r2, [r7, #12]
 8001372:	4313      	orrs	r3, r2
 8001374:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	68fa      	ldr	r2, [r7, #12]
 800137c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001386:	2001      	movs	r0, #1
 8001388:	f7ff fc24 	bl	8000bd4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	68fa      	ldr	r2, [r7, #12]
 8001392:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	699b      	ldr	r3, [r3, #24]
 800139a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800139c:	68fa      	ldr	r2, [r7, #12]
 800139e:	f64f 7341 	movw	r3, #65345	; 0xff41
 80013a2:	4013      	ands	r3, r2
 80013a4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013aa:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->ZeroQuantaPause |
 80013ac:	683a      	ldr	r2, [r7, #0]
 80013ae:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80013b2:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        (uint32_t)macconf->ZeroQuantaPause |
 80013b8:	4313      	orrs	r3, r2
                        (uint32_t)macconf->UnicastSlowProtocolPacketDetect |
 80013ba:	683a      	ldr	r2, [r7, #0]
 80013bc:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
                        macconf->PauseLowThreshold |
 80013c0:	4313      	orrs	r3, r2
                        (uint32_t)macconf->ReceiveFlowControl |
 80013c2:	683a      	ldr	r2, [r7, #0]
 80013c4:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
                        (uint32_t)macconf->UnicastSlowProtocolPacketDetect |
 80013c8:	4313      	orrs	r3, r2
                        (uint32_t)macconf->TransmitFlowControl);
 80013ca:	683a      	ldr	r2, [r7, #0]
 80013cc:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80013d0:	4313      	orrs	r3, r2
 80013d2:	68fa      	ldr	r2, [r7, #12]
 80013d4:	4313      	orrs	r3, r2
 80013d6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	68fa      	ldr	r2, [r7, #12]
 80013de:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	699b      	ldr	r3, [r3, #24]
 80013e6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80013e8:	2001      	movs	r0, #1
 80013ea:	f7ff fbf3 	bl	8000bd4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	68fa      	ldr	r2, [r7, #12]
 80013f4:	619a      	str	r2, [r3, #24]
}
 80013f6:	bf00      	nop
 80013f8:	3710      	adds	r7, #16
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	ff20810f 	.word	0xff20810f

08001404 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001416:	699b      	ldr	r3, [r3, #24]
 8001418:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800141a:	68fa      	ldr	r2, [r7, #12]
 800141c:	4b3d      	ldr	r3, [pc, #244]	; (8001514 <ETH_SetDMAConfig+0x110>)
 800141e:	4013      	ands	r3, r2
 8001420:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	7b1b      	ldrb	r3, [r3, #12]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d102      	bne.n	8001430 <ETH_SetDMAConfig+0x2c>
 800142a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800142e:	e000      	b.n	8001432 <ETH_SetDMAConfig+0x2e>
 8001430:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	7b5b      	ldrb	r3, [r3, #13]
 8001436:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001438:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800143a:	683a      	ldr	r2, [r7, #0]
 800143c:	7f52      	ldrb	r2, [r2, #29]
 800143e:	2a00      	cmp	r2, #0
 8001440:	d102      	bne.n	8001448 <ETH_SetDMAConfig+0x44>
 8001442:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001446:	e000      	b.n	800144a <ETH_SetDMAConfig+0x46>
 8001448:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800144a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	7b9b      	ldrb	r3, [r3, #14]
 8001450:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001452:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001458:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	7f1b      	ldrb	r3, [r3, #28]
 800145e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001460:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	7f9b      	ldrb	r3, [r3, #30]
 8001466:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001468:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800146e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001476:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001478:	4313      	orrs	r3, r2
 800147a:	68fa      	ldr	r2, [r7, #12]
 800147c:	4313      	orrs	r3, r2
 800147e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001488:	461a      	mov	r2, r3
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001496:	699b      	ldr	r3, [r3, #24]
 8001498:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800149a:	2001      	movs	r0, #1
 800149c:	f7ff fb9a 	bl	8000bd4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014a8:	461a      	mov	r2, r3
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	791b      	ldrb	r3, [r3, #4]
 80014b2:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80014b8:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80014be:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80014c4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80014cc:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80014ce:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014d4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80014d6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80014dc:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	6812      	ldr	r2, [r2, #0]
 80014e2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80014e6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80014ea:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80014f8:	2001      	movs	r0, #1
 80014fa:	f7ff fb6b 	bl	8000bd4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001506:	461a      	mov	r2, r3
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	6013      	str	r3, [r2, #0]
}
 800150c:	bf00      	nop
 800150e:	3710      	adds	r7, #16
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	f8de3f23 	.word	0xf8de3f23

08001518 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b0a6      	sub	sp, #152	; 0x98
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001520:	2301      	movs	r3, #1
 8001522:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001526:	2301      	movs	r3, #1
 8001528:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800152c:	2300      	movs	r3, #0
 800152e:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001530:	2300      	movs	r3, #0
 8001532:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001536:	2301      	movs	r3, #1
 8001538:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800153c:	2300      	movs	r3, #0
 800153e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001542:	2301      	movs	r3, #1
 8001544:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001548:	2300      	movs	r3, #0
 800154a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800154e:	2300      	movs	r3, #0
 8001550:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001554:	2300      	movs	r3, #0
 8001556:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001558:	2300      	movs	r3, #0
 800155a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800155e:	2300      	movs	r3, #0
 8001560:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001562:	2300      	movs	r3, #0
 8001564:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001568:	2300      	movs	r3, #0
 800156a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800156e:	2300      	movs	r3, #0
 8001570:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001574:	2300      	movs	r3, #0
 8001576:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800157a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800157e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001580:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001584:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001586:	2300      	movs	r3, #0
 8001588:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800158c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001590:	4619      	mov	r1, r3
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f7ff fe9a 	bl	80012cc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001598:	2301      	movs	r3, #1
 800159a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800159c:	2301      	movs	r3, #1
 800159e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80015a0:	2301      	movs	r3, #1
 80015a2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80015a6:	2301      	movs	r3, #1
 80015a8:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80015aa:	2300      	movs	r3, #0
 80015ac:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80015ae:	2300      	movs	r3, #0
 80015b0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80015b4:	2300      	movs	r3, #0
 80015b6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80015ba:	2300      	movs	r3, #0
 80015bc:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80015be:	2301      	movs	r3, #1
 80015c0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80015c4:	2301      	movs	r3, #1
 80015c6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80015c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015cc:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80015ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80015d2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80015d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015d8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80015da:	2301      	movs	r3, #1
 80015dc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80015e0:	2300      	movs	r3, #0
 80015e2:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80015e4:	2300      	movs	r3, #0
 80015e6:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80015e8:	f107 0308 	add.w	r3, r7, #8
 80015ec:	4619      	mov	r1, r3
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f7ff ff08 	bl	8001404 <ETH_SetDMAConfig>
}
 80015f4:	bf00      	nop
 80015f6:	3798      	adds	r7, #152	; 0x98
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}

080015fc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b087      	sub	sp, #28
 8001600:	af00      	add	r7, sp, #0
 8001602:	60f8      	str	r0, [r7, #12]
 8001604:	60b9      	str	r1, [r7, #8]
 8001606:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	3305      	adds	r3, #5
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	021b      	lsls	r3, r3, #8
 8001610:	687a      	ldr	r2, [r7, #4]
 8001612:	3204      	adds	r2, #4
 8001614:	7812      	ldrb	r2, [r2, #0]
 8001616:	4313      	orrs	r3, r2
 8001618:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800161a:	68ba      	ldr	r2, [r7, #8]
 800161c:	4b11      	ldr	r3, [pc, #68]	; (8001664 <ETH_MACAddressConfig+0x68>)
 800161e:	4413      	add	r3, r2
 8001620:	461a      	mov	r2, r3
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	3303      	adds	r3, #3
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	061a      	lsls	r2, r3, #24
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	3302      	adds	r3, #2
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	041b      	lsls	r3, r3, #16
 8001636:	431a      	orrs	r2, r3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	3301      	adds	r3, #1
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	021b      	lsls	r3, r3, #8
 8001640:	4313      	orrs	r3, r2
 8001642:	687a      	ldr	r2, [r7, #4]
 8001644:	7812      	ldrb	r2, [r2, #0]
 8001646:	4313      	orrs	r3, r2
 8001648:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800164a:	68ba      	ldr	r2, [r7, #8]
 800164c:	4b06      	ldr	r3, [pc, #24]	; (8001668 <ETH_MACAddressConfig+0x6c>)
 800164e:	4413      	add	r3, r2
 8001650:	461a      	mov	r2, r3
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	6013      	str	r3, [r2, #0]
}
 8001656:	bf00      	nop
 8001658:	371c      	adds	r7, #28
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	40028040 	.word	0x40028040
 8001668:	40028044 	.word	0x40028044

0800166c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800166c:	b480      	push	{r7}
 800166e:	b085      	sub	sp, #20
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001674:	2300      	movs	r3, #0
 8001676:	60fb      	str	r3, [r7, #12]
 8001678:	e03e      	b.n	80016f8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	68d9      	ldr	r1, [r3, #12]
 800167e:	68fa      	ldr	r2, [r7, #12]
 8001680:	4613      	mov	r3, r2
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	4413      	add	r3, r2
 8001686:	00db      	lsls	r3, r3, #3
 8001688:	440b      	add	r3, r1
 800168a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	2200      	movs	r2, #0
 8001690:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	2200      	movs	r2, #0
 8001696:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	2200      	movs	r2, #0
 800169c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	2200      	movs	r2, #0
 80016a2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80016a4:	68b9      	ldr	r1, [r7, #8]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	68fa      	ldr	r2, [r7, #12]
 80016aa:	3206      	adds	r2, #6
 80016ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d80c      	bhi.n	80016dc <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	68d9      	ldr	r1, [r3, #12]
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	1c5a      	adds	r2, r3, #1
 80016ca:	4613      	mov	r3, r2
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	4413      	add	r3, r2
 80016d0:	00db      	lsls	r3, r3, #3
 80016d2:	440b      	add	r3, r1
 80016d4:	461a      	mov	r2, r3
 80016d6:	68bb      	ldr	r3, [r7, #8]
 80016d8:	60da      	str	r2, [r3, #12]
 80016da:	e004      	b.n	80016e6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	461a      	mov	r2, r3
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	3301      	adds	r3, #1
 80016f6:	60fb      	str	r3, [r7, #12]
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	2b03      	cmp	r3, #3
 80016fc:	d9bd      	bls.n	800167a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2200      	movs	r2, #0
 8001702:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	68da      	ldr	r2, [r3, #12]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001710:	611a      	str	r2, [r3, #16]
}
 8001712:	bf00      	nop
 8001714:	3714      	adds	r7, #20
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr

0800171e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800171e:	b480      	push	{r7}
 8001720:	b085      	sub	sp, #20
 8001722:	af00      	add	r7, sp, #0
 8001724:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001726:	2300      	movs	r3, #0
 8001728:	60fb      	str	r3, [r7, #12]
 800172a:	e046      	b.n	80017ba <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6919      	ldr	r1, [r3, #16]
 8001730:	68fa      	ldr	r2, [r7, #12]
 8001732:	4613      	mov	r3, r2
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	4413      	add	r3, r2
 8001738:	00db      	lsls	r3, r3, #3
 800173a:	440b      	add	r3, r1
 800173c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	2200      	movs	r2, #0
 8001742:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	2200      	movs	r2, #0
 8001748:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	2200      	movs	r2, #0
 800174e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	2200      	movs	r2, #0
 8001754:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	2200      	movs	r2, #0
 800175a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	2200      	movs	r2, #0
 8001760:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001768:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8001770:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800177e:	68b9      	ldr	r1, [r7, #8]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	68fa      	ldr	r2, [r7, #12]
 8001784:	3212      	adds	r2, #18
 8001786:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	2b02      	cmp	r3, #2
 800178e:	d80c      	bhi.n	80017aa <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6919      	ldr	r1, [r3, #16]
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	1c5a      	adds	r2, r3, #1
 8001798:	4613      	mov	r3, r2
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	4413      	add	r3, r2
 800179e:	00db      	lsls	r3, r3, #3
 80017a0:	440b      	add	r3, r1
 80017a2:	461a      	mov	r2, r3
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	60da      	str	r2, [r3, #12]
 80017a8:	e004      	b.n	80017b4 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	691b      	ldr	r3, [r3, #16]
 80017ae:	461a      	mov	r2, r3
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	3301      	adds	r3, #1
 80017b8:	60fb      	str	r3, [r7, #12]
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	2b03      	cmp	r3, #3
 80017be:	d9b5      	bls.n	800172c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2200      	movs	r2, #0
 80017c4:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2200      	movs	r2, #0
 80017ca:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2200      	movs	r2, #0
 80017d0:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2200      	movs	r2, #0
 80017d6:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2200      	movs	r2, #0
 80017dc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	691a      	ldr	r2, [r3, #16]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017ea:	60da      	str	r2, [r3, #12]
}
 80017ec:	bf00      	nop
 80017ee:	3714      	adds	r7, #20
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr

080017f8 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b08d      	sub	sp, #52	; 0x34
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	60f8      	str	r0, [r7, #12]
 8001800:	60b9      	str	r1, [r7, #8]
 8001802:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	3318      	adds	r3, #24
 8001808:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	691b      	ldr	r3, [r3, #16]
 800180e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	691b      	ldr	r3, [r3, #16]
 8001814:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8001816:	2300      	movs	r3, #0
 8001818:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800181e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001822:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 800182a:	2300      	movs	r3, #0
 800182c:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800182e:	6a3b      	ldr	r3, [r7, #32]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001836:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800183a:	d007      	beq.n	800184c <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800183c:	697a      	ldr	r2, [r7, #20]
 800183e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001840:	3304      	adds	r3, #4
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	4413      	add	r3, r2
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 800184c:	2302      	movs	r3, #2
 800184e:	e103      	b.n	8001a58 <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 8001850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001852:	3301      	adds	r3, #1
 8001854:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	461a      	mov	r2, r3
 800185c:	6a3b      	ldr	r3, [r7, #32]
 800185e:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8001860:	6a3b      	ldr	r3, [r7, #32]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8001868:	f023 031f 	bic.w	r3, r3, #31
 800186c:	69fa      	ldr	r2, [r7, #28]
 800186e:	6852      	ldr	r2, [r2, #4]
 8001870:	431a      	orrs	r2, r3
 8001872:	6a3b      	ldr	r3, [r7, #32]
 8001874:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 0301 	and.w	r3, r3, #1
 800187e:	2b00      	cmp	r3, #0
 8001880:	d008      	beq.n	8001894 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8001882:	6a3b      	ldr	r3, [r7, #32]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	695b      	ldr	r3, [r3, #20]
 800188e:	431a      	orrs	r2, r3
 8001890:	6a3b      	ldr	r3, [r7, #32]
 8001892:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 0320 	and.w	r3, r3, #32
 800189c:	2b00      	cmp	r3, #0
 800189e:	d008      	beq.n	80018b2 <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 80018a0:	6a3b      	ldr	r3, [r7, #32]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	691b      	ldr	r3, [r3, #16]
 80018ac:	431a      	orrs	r2, r3
 80018ae:	6a3b      	ldr	r3, [r7, #32]
 80018b0:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0304 	and.w	r3, r3, #4
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d005      	beq.n	80018ca <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 80018be:	6a3b      	ldr	r3, [r7, #32]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80018c6:	6a3b      	ldr	r3, [r7, #32]
 80018c8:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80018ca:	6a3b      	ldr	r3, [r7, #32]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80018d2:	6a3b      	ldr	r3, [r7, #32]
 80018d4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 80018d6:	f3bf 8f5f 	dmb	sy
}
 80018da:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80018dc:	6a3b      	ldr	r3, [r7, #32]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80018e4:	6a3b      	ldr	r3, [r7, #32]
 80018e6:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80018e8:	e084      	b.n	80019f4 <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80018ea:	6a3b      	ldr	r3, [r7, #32]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80018f2:	6a3b      	ldr	r3, [r7, #32]
 80018f4:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d006      	beq.n	800190a <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80018fc:	6a3b      	ldr	r3, [r7, #32]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8001904:	6a3b      	ldr	r3, [r7, #32]
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	e005      	b.n	8001916 <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800190a:	6a3b      	ldr	r3, [r7, #32]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8001912:	6a3b      	ldr	r3, [r7, #32]
 8001914:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8001916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001918:	3301      	adds	r3, #1
 800191a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800191c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800191e:	2b03      	cmp	r3, #3
 8001920:	d902      	bls.n	8001928 <ETH_Prepare_Tx_Descriptors+0x130>
 8001922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001924:	3b04      	subs	r3, #4
 8001926:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800192c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001930:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8001932:	6a3b      	ldr	r3, [r7, #32]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800193a:	6a3b      	ldr	r3, [r7, #32]
 800193c:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800193e:	6a3b      	ldr	r3, [r7, #32]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001946:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800194a:	d007      	beq.n	800195c <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800194c:	697a      	ldr	r2, [r7, #20]
 800194e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001950:	3304      	adds	r3, #4
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	4413      	add	r3, r2
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d029      	beq.n	80019b0 <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001964:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001968:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 800196a:	2300      	movs	r3, #0
 800196c:	62bb      	str	r3, [r7, #40]	; 0x28
 800196e:	e019      	b.n	80019a4 <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 8001970:	f3bf 8f5f 	dmb	sy
}
 8001974:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8001976:	6a3b      	ldr	r3, [r7, #32]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800197e:	6a3b      	ldr	r3, [r7, #32]
 8001980:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8001982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001984:	3301      	adds	r3, #1
 8001986:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800198a:	2b03      	cmp	r3, #3
 800198c:	d902      	bls.n	8001994 <ETH_Prepare_Tx_Descriptors+0x19c>
 800198e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001990:	3b04      	subs	r3, #4
 8001992:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001998:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800199c:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 800199e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019a0:	3301      	adds	r3, #1
 80019a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80019a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80019a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d3e1      	bcc.n	8001970 <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 80019ac:	2302      	movs	r3, #2
 80019ae:	e053      	b.n	8001a58 <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 80019b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b2:	3301      	adds	r3, #1
 80019b4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80019bc:	69fb      	ldr	r3, [r7, #28]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	461a      	mov	r2, r3
 80019c2:	6a3b      	ldr	r3, [r7, #32]
 80019c4:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80019c6:	6a3b      	ldr	r3, [r7, #32]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 80019ce:	f023 031f 	bic.w	r3, r3, #31
 80019d2:	69fa      	ldr	r2, [r7, #28]
 80019d4:	6852      	ldr	r2, [r2, #4]
 80019d6:	431a      	orrs	r2, r3
 80019d8:	6a3b      	ldr	r3, [r7, #32]
 80019da:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 80019dc:	69bb      	ldr	r3, [r7, #24]
 80019de:	3301      	adds	r3, #1
 80019e0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 80019e2:	f3bf 8f5f 	dmb	sy
}
 80019e6:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80019e8:	6a3b      	ldr	r3, [r7, #32]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80019f0:	6a3b      	ldr	r3, [r7, #32]
 80019f2:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 80019f4:	69fb      	ldr	r3, [r7, #28]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	f47f af76 	bne.w	80018ea <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d006      	beq.n	8001a12 <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8001a04:	6a3b      	ldr	r3, [r7, #32]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8001a0c:	6a3b      	ldr	r3, [r7, #32]
 8001a0e:	601a      	str	r2, [r3, #0]
 8001a10:	e005      	b.n	8001a1e <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8001a12:	6a3b      	ldr	r3, [r7, #32]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8001a1a:	6a3b      	ldr	r3, [r7, #32]
 8001a1c:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8001a1e:	6a3b      	ldr	r3, [r7, #32]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8001a26:	6a3b      	ldr	r3, [r7, #32]
 8001a28:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a2e:	6979      	ldr	r1, [r7, #20]
 8001a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a32:	3304      	adds	r3, #4
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	440b      	add	r3, r1
 8001a38:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a3e:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8001a40:	b672      	cpsid	i
}
 8001a42:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a48:	69bb      	ldr	r3, [r7, #24]
 8001a4a:	4413      	add	r3, r2
 8001a4c:	1c5a      	adds	r2, r3, #1
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8001a52:	b662      	cpsie	i
}
 8001a54:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8001a56:	2300      	movs	r3, #0
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3734      	adds	r7, #52	; 0x34
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b089      	sub	sp, #36	; 0x24
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a72:	2300      	movs	r3, #0
 8001a74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a76:	2300      	movs	r3, #0
 8001a78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	61fb      	str	r3, [r7, #28]
 8001a7e:	e16b      	b.n	8001d58 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a80:	2201      	movs	r2, #1
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	697a      	ldr	r2, [r7, #20]
 8001a90:	4013      	ands	r3, r2
 8001a92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a94:	693a      	ldr	r2, [r7, #16]
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	f040 815a 	bne.w	8001d52 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	f003 0303 	and.w	r3, r3, #3
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d005      	beq.n	8001ab6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d130      	bne.n	8001b18 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	2203      	movs	r2, #3
 8001ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac6:	43db      	mvns	r3, r3
 8001ac8:	69ba      	ldr	r2, [r7, #24]
 8001aca:	4013      	ands	r3, r2
 8001acc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	68da      	ldr	r2, [r3, #12]
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ada:	69ba      	ldr	r2, [r7, #24]
 8001adc:	4313      	orrs	r3, r2
 8001ade:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	69ba      	ldr	r2, [r7, #24]
 8001ae4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001aec:	2201      	movs	r2, #1
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	fa02 f303 	lsl.w	r3, r2, r3
 8001af4:	43db      	mvns	r3, r3
 8001af6:	69ba      	ldr	r2, [r7, #24]
 8001af8:	4013      	ands	r3, r2
 8001afa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	091b      	lsrs	r3, r3, #4
 8001b02:	f003 0201 	and.w	r2, r3, #1
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	69ba      	ldr	r2, [r7, #24]
 8001b16:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f003 0303 	and.w	r3, r3, #3
 8001b20:	2b03      	cmp	r3, #3
 8001b22:	d017      	beq.n	8001b54 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	2203      	movs	r2, #3
 8001b30:	fa02 f303 	lsl.w	r3, r2, r3
 8001b34:	43db      	mvns	r3, r3
 8001b36:	69ba      	ldr	r2, [r7, #24]
 8001b38:	4013      	ands	r3, r2
 8001b3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	689a      	ldr	r2, [r3, #8]
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	005b      	lsls	r3, r3, #1
 8001b44:	fa02 f303 	lsl.w	r3, r2, r3
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f003 0303 	and.w	r3, r3, #3
 8001b5c:	2b02      	cmp	r3, #2
 8001b5e:	d123      	bne.n	8001ba8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	08da      	lsrs	r2, r3, #3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	3208      	adds	r2, #8
 8001b68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	f003 0307 	and.w	r3, r3, #7
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	220f      	movs	r2, #15
 8001b78:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7c:	43db      	mvns	r3, r3
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	4013      	ands	r3, r2
 8001b82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	691a      	ldr	r2, [r3, #16]
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	f003 0307 	and.w	r3, r3, #7
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	08da      	lsrs	r2, r3, #3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	3208      	adds	r2, #8
 8001ba2:	69b9      	ldr	r1, [r7, #24]
 8001ba4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	2203      	movs	r2, #3
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	43db      	mvns	r3, r3
 8001bba:	69ba      	ldr	r2, [r7, #24]
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f003 0203 	and.w	r2, r3, #3
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	005b      	lsls	r3, r3, #1
 8001bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	f000 80b4 	beq.w	8001d52 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bea:	2300      	movs	r3, #0
 8001bec:	60fb      	str	r3, [r7, #12]
 8001bee:	4b60      	ldr	r3, [pc, #384]	; (8001d70 <HAL_GPIO_Init+0x30c>)
 8001bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf2:	4a5f      	ldr	r2, [pc, #380]	; (8001d70 <HAL_GPIO_Init+0x30c>)
 8001bf4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bf8:	6453      	str	r3, [r2, #68]	; 0x44
 8001bfa:	4b5d      	ldr	r3, [pc, #372]	; (8001d70 <HAL_GPIO_Init+0x30c>)
 8001bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c02:	60fb      	str	r3, [r7, #12]
 8001c04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c06:	4a5b      	ldr	r2, [pc, #364]	; (8001d74 <HAL_GPIO_Init+0x310>)
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	089b      	lsrs	r3, r3, #2
 8001c0c:	3302      	adds	r3, #2
 8001c0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	f003 0303 	and.w	r3, r3, #3
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	220f      	movs	r2, #15
 8001c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c22:	43db      	mvns	r3, r3
 8001c24:	69ba      	ldr	r2, [r7, #24]
 8001c26:	4013      	ands	r3, r2
 8001c28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4a52      	ldr	r2, [pc, #328]	; (8001d78 <HAL_GPIO_Init+0x314>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d02b      	beq.n	8001c8a <HAL_GPIO_Init+0x226>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4a51      	ldr	r2, [pc, #324]	; (8001d7c <HAL_GPIO_Init+0x318>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d025      	beq.n	8001c86 <HAL_GPIO_Init+0x222>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4a50      	ldr	r2, [pc, #320]	; (8001d80 <HAL_GPIO_Init+0x31c>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d01f      	beq.n	8001c82 <HAL_GPIO_Init+0x21e>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4a4f      	ldr	r2, [pc, #316]	; (8001d84 <HAL_GPIO_Init+0x320>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d019      	beq.n	8001c7e <HAL_GPIO_Init+0x21a>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a4e      	ldr	r2, [pc, #312]	; (8001d88 <HAL_GPIO_Init+0x324>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d013      	beq.n	8001c7a <HAL_GPIO_Init+0x216>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a4d      	ldr	r2, [pc, #308]	; (8001d8c <HAL_GPIO_Init+0x328>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d00d      	beq.n	8001c76 <HAL_GPIO_Init+0x212>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a4c      	ldr	r2, [pc, #304]	; (8001d90 <HAL_GPIO_Init+0x32c>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d007      	beq.n	8001c72 <HAL_GPIO_Init+0x20e>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a4b      	ldr	r2, [pc, #300]	; (8001d94 <HAL_GPIO_Init+0x330>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d101      	bne.n	8001c6e <HAL_GPIO_Init+0x20a>
 8001c6a:	2307      	movs	r3, #7
 8001c6c:	e00e      	b.n	8001c8c <HAL_GPIO_Init+0x228>
 8001c6e:	2308      	movs	r3, #8
 8001c70:	e00c      	b.n	8001c8c <HAL_GPIO_Init+0x228>
 8001c72:	2306      	movs	r3, #6
 8001c74:	e00a      	b.n	8001c8c <HAL_GPIO_Init+0x228>
 8001c76:	2305      	movs	r3, #5
 8001c78:	e008      	b.n	8001c8c <HAL_GPIO_Init+0x228>
 8001c7a:	2304      	movs	r3, #4
 8001c7c:	e006      	b.n	8001c8c <HAL_GPIO_Init+0x228>
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e004      	b.n	8001c8c <HAL_GPIO_Init+0x228>
 8001c82:	2302      	movs	r3, #2
 8001c84:	e002      	b.n	8001c8c <HAL_GPIO_Init+0x228>
 8001c86:	2301      	movs	r3, #1
 8001c88:	e000      	b.n	8001c8c <HAL_GPIO_Init+0x228>
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	69fa      	ldr	r2, [r7, #28]
 8001c8e:	f002 0203 	and.w	r2, r2, #3
 8001c92:	0092      	lsls	r2, r2, #2
 8001c94:	4093      	lsls	r3, r2
 8001c96:	69ba      	ldr	r2, [r7, #24]
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c9c:	4935      	ldr	r1, [pc, #212]	; (8001d74 <HAL_GPIO_Init+0x310>)
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	089b      	lsrs	r3, r3, #2
 8001ca2:	3302      	adds	r3, #2
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001caa:	4b3b      	ldr	r3, [pc, #236]	; (8001d98 <HAL_GPIO_Init+0x334>)
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	43db      	mvns	r3, r3
 8001cb4:	69ba      	ldr	r2, [r7, #24]
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d003      	beq.n	8001cce <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001cc6:	69ba      	ldr	r2, [r7, #24]
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cce:	4a32      	ldr	r2, [pc, #200]	; (8001d98 <HAL_GPIO_Init+0x334>)
 8001cd0:	69bb      	ldr	r3, [r7, #24]
 8001cd2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cd4:	4b30      	ldr	r3, [pc, #192]	; (8001d98 <HAL_GPIO_Init+0x334>)
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	43db      	mvns	r3, r3
 8001cde:	69ba      	ldr	r2, [r7, #24]
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d003      	beq.n	8001cf8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001cf0:	69ba      	ldr	r2, [r7, #24]
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cf8:	4a27      	ldr	r2, [pc, #156]	; (8001d98 <HAL_GPIO_Init+0x334>)
 8001cfa:	69bb      	ldr	r3, [r7, #24]
 8001cfc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cfe:	4b26      	ldr	r3, [pc, #152]	; (8001d98 <HAL_GPIO_Init+0x334>)
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	43db      	mvns	r3, r3
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d003      	beq.n	8001d22 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001d1a:	69ba      	ldr	r2, [r7, #24]
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d22:	4a1d      	ldr	r2, [pc, #116]	; (8001d98 <HAL_GPIO_Init+0x334>)
 8001d24:	69bb      	ldr	r3, [r7, #24]
 8001d26:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d28:	4b1b      	ldr	r3, [pc, #108]	; (8001d98 <HAL_GPIO_Init+0x334>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	43db      	mvns	r3, r3
 8001d32:	69ba      	ldr	r2, [r7, #24]
 8001d34:	4013      	ands	r3, r2
 8001d36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d003      	beq.n	8001d4c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001d44:	69ba      	ldr	r2, [r7, #24]
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d4c:	4a12      	ldr	r2, [pc, #72]	; (8001d98 <HAL_GPIO_Init+0x334>)
 8001d4e:	69bb      	ldr	r3, [r7, #24]
 8001d50:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	3301      	adds	r3, #1
 8001d56:	61fb      	str	r3, [r7, #28]
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	2b0f      	cmp	r3, #15
 8001d5c:	f67f ae90 	bls.w	8001a80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d60:	bf00      	nop
 8001d62:	bf00      	nop
 8001d64:	3724      	adds	r7, #36	; 0x24
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	40023800 	.word	0x40023800
 8001d74:	40013800 	.word	0x40013800
 8001d78:	40020000 	.word	0x40020000
 8001d7c:	40020400 	.word	0x40020400
 8001d80:	40020800 	.word	0x40020800
 8001d84:	40020c00 	.word	0x40020c00
 8001d88:	40021000 	.word	0x40021000
 8001d8c:	40021400 	.word	0x40021400
 8001d90:	40021800 	.word	0x40021800
 8001d94:	40021c00 	.word	0x40021c00
 8001d98:	40013c00 	.word	0x40013c00

08001d9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	460b      	mov	r3, r1
 8001da6:	807b      	strh	r3, [r7, #2]
 8001da8:	4613      	mov	r3, r2
 8001daa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001dac:	787b      	ldrb	r3, [r7, #1]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d003      	beq.n	8001dba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001db2:	887a      	ldrh	r2, [r7, #2]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001db8:	e003      	b.n	8001dc2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001dba:	887b      	ldrh	r3, [r7, #2]
 8001dbc:	041a      	lsls	r2, r3, #16
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	619a      	str	r2, [r3, #24]
}
 8001dc2:	bf00      	nop
 8001dc4:	370c      	adds	r7, #12
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
	...

08001dd0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001dda:	4b08      	ldr	r3, [pc, #32]	; (8001dfc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ddc:	695a      	ldr	r2, [r3, #20]
 8001dde:	88fb      	ldrh	r3, [r7, #6]
 8001de0:	4013      	ands	r3, r2
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d006      	beq.n	8001df4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001de6:	4a05      	ldr	r2, [pc, #20]	; (8001dfc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001de8:	88fb      	ldrh	r3, [r7, #6]
 8001dea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001dec:	88fb      	ldrh	r3, [r7, #6]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f000 f806 	bl	8001e00 <HAL_GPIO_EXTI_Callback>
  }
}
 8001df4:	bf00      	nop
 8001df6:	3708      	adds	r7, #8
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	40013c00 	.word	0x40013c00

08001e00 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	4603      	mov	r3, r0
 8001e08:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001e0a:	bf00      	nop
 8001e0c:	370c      	adds	r7, #12
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr

08001e16 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001e16:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e18:	b08f      	sub	sp, #60	; 0x3c
 8001e1a:	af0a      	add	r7, sp, #40	; 0x28
 8001e1c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d101      	bne.n	8001e28 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e10f      	b.n	8002048 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d106      	bne.n	8001e48 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f016 facc 	bl	80183e0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2203      	movs	r2, #3
 8001e4c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d102      	bne.n	8001e62 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4618      	mov	r0, r3
 8001e68:	f002 facb 	bl	8004402 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	603b      	str	r3, [r7, #0]
 8001e72:	687e      	ldr	r6, [r7, #4]
 8001e74:	466d      	mov	r5, sp
 8001e76:	f106 0410 	add.w	r4, r6, #16
 8001e7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e82:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e86:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e8a:	1d33      	adds	r3, r6, #4
 8001e8c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e8e:	6838      	ldr	r0, [r7, #0]
 8001e90:	f002 f9a2 	bl	80041d8 <USB_CoreInit>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d005      	beq.n	8001ea6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2202      	movs	r2, #2
 8001e9e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e0d0      	b.n	8002048 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	2100      	movs	r1, #0
 8001eac:	4618      	mov	r0, r3
 8001eae:	f002 fab9 	bl	8004424 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	73fb      	strb	r3, [r7, #15]
 8001eb6:	e04a      	b.n	8001f4e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001eb8:	7bfa      	ldrb	r2, [r7, #15]
 8001eba:	6879      	ldr	r1, [r7, #4]
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	00db      	lsls	r3, r3, #3
 8001ec0:	4413      	add	r3, r2
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	440b      	add	r3, r1
 8001ec6:	333d      	adds	r3, #61	; 0x3d
 8001ec8:	2201      	movs	r2, #1
 8001eca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001ecc:	7bfa      	ldrb	r2, [r7, #15]
 8001ece:	6879      	ldr	r1, [r7, #4]
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	00db      	lsls	r3, r3, #3
 8001ed4:	4413      	add	r3, r2
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	440b      	add	r3, r1
 8001eda:	333c      	adds	r3, #60	; 0x3c
 8001edc:	7bfa      	ldrb	r2, [r7, #15]
 8001ede:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001ee0:	7bfa      	ldrb	r2, [r7, #15]
 8001ee2:	7bfb      	ldrb	r3, [r7, #15]
 8001ee4:	b298      	uxth	r0, r3
 8001ee6:	6879      	ldr	r1, [r7, #4]
 8001ee8:	4613      	mov	r3, r2
 8001eea:	00db      	lsls	r3, r3, #3
 8001eec:	4413      	add	r3, r2
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	440b      	add	r3, r1
 8001ef2:	3344      	adds	r3, #68	; 0x44
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001ef8:	7bfa      	ldrb	r2, [r7, #15]
 8001efa:	6879      	ldr	r1, [r7, #4]
 8001efc:	4613      	mov	r3, r2
 8001efe:	00db      	lsls	r3, r3, #3
 8001f00:	4413      	add	r3, r2
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	440b      	add	r3, r1
 8001f06:	3340      	adds	r3, #64	; 0x40
 8001f08:	2200      	movs	r2, #0
 8001f0a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001f0c:	7bfa      	ldrb	r2, [r7, #15]
 8001f0e:	6879      	ldr	r1, [r7, #4]
 8001f10:	4613      	mov	r3, r2
 8001f12:	00db      	lsls	r3, r3, #3
 8001f14:	4413      	add	r3, r2
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	440b      	add	r3, r1
 8001f1a:	3348      	adds	r3, #72	; 0x48
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001f20:	7bfa      	ldrb	r2, [r7, #15]
 8001f22:	6879      	ldr	r1, [r7, #4]
 8001f24:	4613      	mov	r3, r2
 8001f26:	00db      	lsls	r3, r3, #3
 8001f28:	4413      	add	r3, r2
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	440b      	add	r3, r1
 8001f2e:	334c      	adds	r3, #76	; 0x4c
 8001f30:	2200      	movs	r2, #0
 8001f32:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001f34:	7bfa      	ldrb	r2, [r7, #15]
 8001f36:	6879      	ldr	r1, [r7, #4]
 8001f38:	4613      	mov	r3, r2
 8001f3a:	00db      	lsls	r3, r3, #3
 8001f3c:	4413      	add	r3, r2
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	440b      	add	r3, r1
 8001f42:	3354      	adds	r3, #84	; 0x54
 8001f44:	2200      	movs	r2, #0
 8001f46:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f48:	7bfb      	ldrb	r3, [r7, #15]
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	73fb      	strb	r3, [r7, #15]
 8001f4e:	7bfa      	ldrb	r2, [r7, #15]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d3af      	bcc.n	8001eb8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f58:	2300      	movs	r3, #0
 8001f5a:	73fb      	strb	r3, [r7, #15]
 8001f5c:	e044      	b.n	8001fe8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001f5e:	7bfa      	ldrb	r2, [r7, #15]
 8001f60:	6879      	ldr	r1, [r7, #4]
 8001f62:	4613      	mov	r3, r2
 8001f64:	00db      	lsls	r3, r3, #3
 8001f66:	4413      	add	r3, r2
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	440b      	add	r3, r1
 8001f6c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001f70:	2200      	movs	r2, #0
 8001f72:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001f74:	7bfa      	ldrb	r2, [r7, #15]
 8001f76:	6879      	ldr	r1, [r7, #4]
 8001f78:	4613      	mov	r3, r2
 8001f7a:	00db      	lsls	r3, r3, #3
 8001f7c:	4413      	add	r3, r2
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	440b      	add	r3, r1
 8001f82:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001f86:	7bfa      	ldrb	r2, [r7, #15]
 8001f88:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001f8a:	7bfa      	ldrb	r2, [r7, #15]
 8001f8c:	6879      	ldr	r1, [r7, #4]
 8001f8e:	4613      	mov	r3, r2
 8001f90:	00db      	lsls	r3, r3, #3
 8001f92:	4413      	add	r3, r2
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	440b      	add	r3, r1
 8001f98:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001fa0:	7bfa      	ldrb	r2, [r7, #15]
 8001fa2:	6879      	ldr	r1, [r7, #4]
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	00db      	lsls	r3, r3, #3
 8001fa8:	4413      	add	r3, r2
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	440b      	add	r3, r1
 8001fae:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001fb6:	7bfa      	ldrb	r2, [r7, #15]
 8001fb8:	6879      	ldr	r1, [r7, #4]
 8001fba:	4613      	mov	r3, r2
 8001fbc:	00db      	lsls	r3, r3, #3
 8001fbe:	4413      	add	r3, r2
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	440b      	add	r3, r1
 8001fc4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001fc8:	2200      	movs	r2, #0
 8001fca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001fcc:	7bfa      	ldrb	r2, [r7, #15]
 8001fce:	6879      	ldr	r1, [r7, #4]
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	00db      	lsls	r3, r3, #3
 8001fd4:	4413      	add	r3, r2
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	440b      	add	r3, r1
 8001fda:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001fde:	2200      	movs	r2, #0
 8001fe0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fe2:	7bfb      	ldrb	r3, [r7, #15]
 8001fe4:	3301      	adds	r3, #1
 8001fe6:	73fb      	strb	r3, [r7, #15]
 8001fe8:	7bfa      	ldrb	r2, [r7, #15]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d3b5      	bcc.n	8001f5e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	603b      	str	r3, [r7, #0]
 8001ff8:	687e      	ldr	r6, [r7, #4]
 8001ffa:	466d      	mov	r5, sp
 8001ffc:	f106 0410 	add.w	r4, r6, #16
 8002000:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002002:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002004:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002006:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002008:	e894 0003 	ldmia.w	r4, {r0, r1}
 800200c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002010:	1d33      	adds	r3, r6, #4
 8002012:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002014:	6838      	ldr	r0, [r7, #0]
 8002016:	f002 fa51 	bl	80044bc <USB_DevInit>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d005      	beq.n	800202c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2202      	movs	r2, #2
 8002024:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e00d      	b.n	8002048 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2200      	movs	r2, #0
 8002030:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2201      	movs	r2, #1
 8002038:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4618      	mov	r0, r3
 8002042:	f003 fba0 	bl	8005786 <USB_DevDisconnect>

  return HAL_OK;
 8002046:	2300      	movs	r3, #0
}
 8002048:	4618      	mov	r0, r3
 800204a:	3714      	adds	r7, #20
 800204c:	46bd      	mov	sp, r7
 800204e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002050 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002064:	2b01      	cmp	r3, #1
 8002066:	d101      	bne.n	800206c <HAL_PCD_Start+0x1c>
 8002068:	2302      	movs	r3, #2
 800206a:	e020      	b.n	80020ae <HAL_PCD_Start+0x5e>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2201      	movs	r2, #1
 8002070:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002078:	2b01      	cmp	r3, #1
 800207a:	d109      	bne.n	8002090 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002080:	2b01      	cmp	r3, #1
 8002082:	d005      	beq.n	8002090 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002088:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4618      	mov	r0, r3
 8002096:	f002 f9a3 	bl	80043e0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4618      	mov	r0, r3
 80020a0:	f003 fb50 	bl	8005744 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2200      	movs	r2, #0
 80020a8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3710      	adds	r7, #16
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}

080020b6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80020b6:	b590      	push	{r4, r7, lr}
 80020b8:	b08d      	sub	sp, #52	; 0x34
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020c4:	6a3b      	ldr	r3, [r7, #32]
 80020c6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4618      	mov	r0, r3
 80020ce:	f003 fc0e 	bl	80058ee <USB_GetMode>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	f040 848a 	bne.w	80029ee <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4618      	mov	r0, r3
 80020e0:	f003 fb72 	bl	80057c8 <USB_ReadInterrupts>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	f000 8480 	beq.w	80029ec <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	0a1b      	lsrs	r3, r3, #8
 80020f6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4618      	mov	r0, r3
 8002106:	f003 fb5f 	bl	80057c8 <USB_ReadInterrupts>
 800210a:	4603      	mov	r3, r0
 800210c:	f003 0302 	and.w	r3, r3, #2
 8002110:	2b02      	cmp	r3, #2
 8002112:	d107      	bne.n	8002124 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	695a      	ldr	r2, [r3, #20]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f002 0202 	and.w	r2, r2, #2
 8002122:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4618      	mov	r0, r3
 800212a:	f003 fb4d 	bl	80057c8 <USB_ReadInterrupts>
 800212e:	4603      	mov	r3, r0
 8002130:	f003 0310 	and.w	r3, r3, #16
 8002134:	2b10      	cmp	r3, #16
 8002136:	d161      	bne.n	80021fc <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	699a      	ldr	r2, [r3, #24]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f022 0210 	bic.w	r2, r2, #16
 8002146:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002148:	6a3b      	ldr	r3, [r7, #32]
 800214a:	6a1b      	ldr	r3, [r3, #32]
 800214c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800214e:	69bb      	ldr	r3, [r7, #24]
 8002150:	f003 020f 	and.w	r2, r3, #15
 8002154:	4613      	mov	r3, r2
 8002156:	00db      	lsls	r3, r3, #3
 8002158:	4413      	add	r3, r2
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	4413      	add	r3, r2
 8002164:	3304      	adds	r3, #4
 8002166:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002168:	69bb      	ldr	r3, [r7, #24]
 800216a:	0c5b      	lsrs	r3, r3, #17
 800216c:	f003 030f 	and.w	r3, r3, #15
 8002170:	2b02      	cmp	r3, #2
 8002172:	d124      	bne.n	80021be <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800217a:	4013      	ands	r3, r2
 800217c:	2b00      	cmp	r3, #0
 800217e:	d035      	beq.n	80021ec <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002184:	69bb      	ldr	r3, [r7, #24]
 8002186:	091b      	lsrs	r3, r3, #4
 8002188:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800218a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800218e:	b29b      	uxth	r3, r3
 8002190:	461a      	mov	r2, r3
 8002192:	6a38      	ldr	r0, [r7, #32]
 8002194:	f003 f984 	bl	80054a0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	691a      	ldr	r2, [r3, #16]
 800219c:	69bb      	ldr	r3, [r7, #24]
 800219e:	091b      	lsrs	r3, r3, #4
 80021a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021a4:	441a      	add	r2, r3
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	6a1a      	ldr	r2, [r3, #32]
 80021ae:	69bb      	ldr	r3, [r7, #24]
 80021b0:	091b      	lsrs	r3, r3, #4
 80021b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021b6:	441a      	add	r2, r3
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	621a      	str	r2, [r3, #32]
 80021bc:	e016      	b.n	80021ec <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80021be:	69bb      	ldr	r3, [r7, #24]
 80021c0:	0c5b      	lsrs	r3, r3, #17
 80021c2:	f003 030f 	and.w	r3, r3, #15
 80021c6:	2b06      	cmp	r3, #6
 80021c8:	d110      	bne.n	80021ec <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80021d0:	2208      	movs	r2, #8
 80021d2:	4619      	mov	r1, r3
 80021d4:	6a38      	ldr	r0, [r7, #32]
 80021d6:	f003 f963 	bl	80054a0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	6a1a      	ldr	r2, [r3, #32]
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	091b      	lsrs	r3, r3, #4
 80021e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021e6:	441a      	add	r2, r3
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	699a      	ldr	r2, [r3, #24]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f042 0210 	orr.w	r2, r2, #16
 80021fa:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4618      	mov	r0, r3
 8002202:	f003 fae1 	bl	80057c8 <USB_ReadInterrupts>
 8002206:	4603      	mov	r3, r0
 8002208:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800220c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002210:	f040 80a7 	bne.w	8002362 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002214:	2300      	movs	r3, #0
 8002216:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4618      	mov	r0, r3
 800221e:	f003 fae6 	bl	80057ee <USB_ReadDevAllOutEpInterrupt>
 8002222:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002224:	e099      	b.n	800235a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002228:	f003 0301 	and.w	r3, r3, #1
 800222c:	2b00      	cmp	r3, #0
 800222e:	f000 808e 	beq.w	800234e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002238:	b2d2      	uxtb	r2, r2
 800223a:	4611      	mov	r1, r2
 800223c:	4618      	mov	r0, r3
 800223e:	f003 fb0a 	bl	8005856 <USB_ReadDevOutEPInterrupt>
 8002242:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	f003 0301 	and.w	r3, r3, #1
 800224a:	2b00      	cmp	r3, #0
 800224c:	d00c      	beq.n	8002268 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800224e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002250:	015a      	lsls	r2, r3, #5
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	4413      	add	r3, r2
 8002256:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800225a:	461a      	mov	r2, r3
 800225c:	2301      	movs	r3, #1
 800225e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002260:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f000 fec2 	bl	8002fec <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	f003 0308 	and.w	r3, r3, #8
 800226e:	2b00      	cmp	r3, #0
 8002270:	d00c      	beq.n	800228c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002274:	015a      	lsls	r2, r3, #5
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	4413      	add	r3, r2
 800227a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800227e:	461a      	mov	r2, r3
 8002280:	2308      	movs	r3, #8
 8002282:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002284:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f000 ff98 	bl	80031bc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	f003 0310 	and.w	r3, r3, #16
 8002292:	2b00      	cmp	r3, #0
 8002294:	d008      	beq.n	80022a8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002298:	015a      	lsls	r2, r3, #5
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	4413      	add	r3, r2
 800229e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022a2:	461a      	mov	r2, r3
 80022a4:	2310      	movs	r3, #16
 80022a6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	f003 0302 	and.w	r3, r3, #2
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d030      	beq.n	8002314 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80022b2:	6a3b      	ldr	r3, [r7, #32]
 80022b4:	695b      	ldr	r3, [r3, #20]
 80022b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022ba:	2b80      	cmp	r3, #128	; 0x80
 80022bc:	d109      	bne.n	80022d2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	69fa      	ldr	r2, [r7, #28]
 80022c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80022cc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022d0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80022d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022d4:	4613      	mov	r3, r2
 80022d6:	00db      	lsls	r3, r3, #3
 80022d8:	4413      	add	r3, r2
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	4413      	add	r3, r2
 80022e4:	3304      	adds	r3, #4
 80022e6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	78db      	ldrb	r3, [r3, #3]
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d108      	bne.n	8002302 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	2200      	movs	r2, #0
 80022f4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80022f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	4619      	mov	r1, r3
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	f016 f975 	bl	80185ec <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002304:	015a      	lsls	r2, r3, #5
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	4413      	add	r3, r2
 800230a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800230e:	461a      	mov	r2, r3
 8002310:	2302      	movs	r3, #2
 8002312:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	f003 0320 	and.w	r3, r3, #32
 800231a:	2b00      	cmp	r3, #0
 800231c:	d008      	beq.n	8002330 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800231e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002320:	015a      	lsls	r2, r3, #5
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	4413      	add	r3, r2
 8002326:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800232a:	461a      	mov	r2, r3
 800232c:	2320      	movs	r3, #32
 800232e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d009      	beq.n	800234e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800233a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233c:	015a      	lsls	r2, r3, #5
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	4413      	add	r3, r2
 8002342:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002346:	461a      	mov	r2, r3
 8002348:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800234c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800234e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002350:	3301      	adds	r3, #1
 8002352:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002356:	085b      	lsrs	r3, r3, #1
 8002358:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800235a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800235c:	2b00      	cmp	r3, #0
 800235e:	f47f af62 	bne.w	8002226 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4618      	mov	r0, r3
 8002368:	f003 fa2e 	bl	80057c8 <USB_ReadInterrupts>
 800236c:	4603      	mov	r3, r0
 800236e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002372:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002376:	f040 80db 	bne.w	8002530 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4618      	mov	r0, r3
 8002380:	f003 fa4f 	bl	8005822 <USB_ReadDevAllInEpInterrupt>
 8002384:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002386:	2300      	movs	r3, #0
 8002388:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800238a:	e0cd      	b.n	8002528 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800238c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800238e:	f003 0301 	and.w	r3, r3, #1
 8002392:	2b00      	cmp	r3, #0
 8002394:	f000 80c2 	beq.w	800251c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800239e:	b2d2      	uxtb	r2, r2
 80023a0:	4611      	mov	r1, r2
 80023a2:	4618      	mov	r0, r3
 80023a4:	f003 fa75 	bl	8005892 <USB_ReadDevInEPInterrupt>
 80023a8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	f003 0301 	and.w	r3, r3, #1
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d057      	beq.n	8002464 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80023b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b6:	f003 030f 	and.w	r3, r3, #15
 80023ba:	2201      	movs	r2, #1
 80023bc:	fa02 f303 	lsl.w	r3, r2, r3
 80023c0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	43db      	mvns	r3, r3
 80023ce:	69f9      	ldr	r1, [r7, #28]
 80023d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80023d4:	4013      	ands	r3, r2
 80023d6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80023d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023da:	015a      	lsls	r2, r3, #5
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	4413      	add	r3, r2
 80023e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023e4:	461a      	mov	r2, r3
 80023e6:	2301      	movs	r3, #1
 80023e8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	691b      	ldr	r3, [r3, #16]
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d132      	bne.n	8002458 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80023f2:	6879      	ldr	r1, [r7, #4]
 80023f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023f6:	4613      	mov	r3, r2
 80023f8:	00db      	lsls	r3, r3, #3
 80023fa:	4413      	add	r3, r2
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	440b      	add	r3, r1
 8002400:	334c      	adds	r3, #76	; 0x4c
 8002402:	6819      	ldr	r1, [r3, #0]
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002408:	4613      	mov	r3, r2
 800240a:	00db      	lsls	r3, r3, #3
 800240c:	4413      	add	r3, r2
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	4403      	add	r3, r0
 8002412:	3348      	adds	r3, #72	; 0x48
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4419      	add	r1, r3
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800241c:	4613      	mov	r3, r2
 800241e:	00db      	lsls	r3, r3, #3
 8002420:	4413      	add	r3, r2
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	4403      	add	r3, r0
 8002426:	334c      	adds	r3, #76	; 0x4c
 8002428:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800242a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242c:	2b00      	cmp	r3, #0
 800242e:	d113      	bne.n	8002458 <HAL_PCD_IRQHandler+0x3a2>
 8002430:	6879      	ldr	r1, [r7, #4]
 8002432:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002434:	4613      	mov	r3, r2
 8002436:	00db      	lsls	r3, r3, #3
 8002438:	4413      	add	r3, r2
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	440b      	add	r3, r1
 800243e:	3354      	adds	r3, #84	; 0x54
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d108      	bne.n	8002458 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6818      	ldr	r0, [r3, #0]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002450:	461a      	mov	r2, r3
 8002452:	2101      	movs	r1, #1
 8002454:	f003 fa7c 	bl	8005950 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245a:	b2db      	uxtb	r3, r3
 800245c:	4619      	mov	r1, r3
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f016 f83f 	bl	80184e2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	f003 0308 	and.w	r3, r3, #8
 800246a:	2b00      	cmp	r3, #0
 800246c:	d008      	beq.n	8002480 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800246e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002470:	015a      	lsls	r2, r3, #5
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	4413      	add	r3, r2
 8002476:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800247a:	461a      	mov	r2, r3
 800247c:	2308      	movs	r3, #8
 800247e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	f003 0310 	and.w	r3, r3, #16
 8002486:	2b00      	cmp	r3, #0
 8002488:	d008      	beq.n	800249c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800248a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248c:	015a      	lsls	r2, r3, #5
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	4413      	add	r3, r2
 8002492:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002496:	461a      	mov	r2, r3
 8002498:	2310      	movs	r3, #16
 800249a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d008      	beq.n	80024b8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80024a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a8:	015a      	lsls	r2, r3, #5
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	4413      	add	r3, r2
 80024ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024b2:	461a      	mov	r2, r3
 80024b4:	2340      	movs	r3, #64	; 0x40
 80024b6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	f003 0302 	and.w	r3, r3, #2
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d023      	beq.n	800250a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80024c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024c4:	6a38      	ldr	r0, [r7, #32]
 80024c6:	f002 f95d 	bl	8004784 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80024ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024cc:	4613      	mov	r3, r2
 80024ce:	00db      	lsls	r3, r3, #3
 80024d0:	4413      	add	r3, r2
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	3338      	adds	r3, #56	; 0x38
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	4413      	add	r3, r2
 80024da:	3304      	adds	r3, #4
 80024dc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	78db      	ldrb	r3, [r3, #3]
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d108      	bne.n	80024f8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	2200      	movs	r2, #0
 80024ea:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80024ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	4619      	mov	r1, r3
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f016 f88c 	bl	8018610 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80024f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fa:	015a      	lsls	r2, r3, #5
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	4413      	add	r3, r2
 8002500:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002504:	461a      	mov	r2, r3
 8002506:	2302      	movs	r3, #2
 8002508:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002510:	2b00      	cmp	r3, #0
 8002512:	d003      	beq.n	800251c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002514:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f000 fcdb 	bl	8002ed2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800251c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251e:	3301      	adds	r3, #1
 8002520:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002524:	085b      	lsrs	r3, r3, #1
 8002526:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800252a:	2b00      	cmp	r3, #0
 800252c:	f47f af2e 	bne.w	800238c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4618      	mov	r0, r3
 8002536:	f003 f947 	bl	80057c8 <USB_ReadInterrupts>
 800253a:	4603      	mov	r3, r0
 800253c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002540:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002544:	d122      	bne.n	800258c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	69fa      	ldr	r2, [r7, #28]
 8002550:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002554:	f023 0301 	bic.w	r3, r3, #1
 8002558:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002560:	2b01      	cmp	r3, #1
 8002562:	d108      	bne.n	8002576 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2200      	movs	r2, #0
 8002568:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800256c:	2100      	movs	r1, #0
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f000 fec2 	bl	80032f8 <HAL_PCDEx_LPM_Callback>
 8002574:	e002      	b.n	800257c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f016 f82a 	bl	80185d0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	695a      	ldr	r2, [r3, #20]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800258a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4618      	mov	r0, r3
 8002592:	f003 f919 	bl	80057c8 <USB_ReadInterrupts>
 8002596:	4603      	mov	r3, r0
 8002598:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800259c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80025a0:	d112      	bne.n	80025c8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	f003 0301 	and.w	r3, r3, #1
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d102      	bne.n	80025b8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f015 ffe6 	bl	8018584 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	695a      	ldr	r2, [r3, #20]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80025c6:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4618      	mov	r0, r3
 80025ce:	f003 f8fb 	bl	80057c8 <USB_ReadInterrupts>
 80025d2:	4603      	mov	r3, r0
 80025d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025dc:	f040 80b7 	bne.w	800274e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	69fa      	ldr	r2, [r7, #28]
 80025ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025ee:	f023 0301 	bic.w	r3, r3, #1
 80025f2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	2110      	movs	r1, #16
 80025fa:	4618      	mov	r0, r3
 80025fc:	f002 f8c2 	bl	8004784 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002600:	2300      	movs	r3, #0
 8002602:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002604:	e046      	b.n	8002694 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002608:	015a      	lsls	r2, r3, #5
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	4413      	add	r3, r2
 800260e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002612:	461a      	mov	r2, r3
 8002614:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002618:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800261a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800261c:	015a      	lsls	r2, r3, #5
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	4413      	add	r3, r2
 8002622:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800262a:	0151      	lsls	r1, r2, #5
 800262c:	69fa      	ldr	r2, [r7, #28]
 800262e:	440a      	add	r2, r1
 8002630:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002634:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002638:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800263a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800263c:	015a      	lsls	r2, r3, #5
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	4413      	add	r3, r2
 8002642:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002646:	461a      	mov	r2, r3
 8002648:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800264c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800264e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002650:	015a      	lsls	r2, r3, #5
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	4413      	add	r3, r2
 8002656:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800265e:	0151      	lsls	r1, r2, #5
 8002660:	69fa      	ldr	r2, [r7, #28]
 8002662:	440a      	add	r2, r1
 8002664:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002668:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800266c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800266e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002670:	015a      	lsls	r2, r3, #5
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	4413      	add	r3, r2
 8002676:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800267e:	0151      	lsls	r1, r2, #5
 8002680:	69fa      	ldr	r2, [r7, #28]
 8002682:	440a      	add	r2, r1
 8002684:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002688:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800268c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800268e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002690:	3301      	adds	r3, #1
 8002692:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800269a:	429a      	cmp	r2, r3
 800269c:	d3b3      	bcc.n	8002606 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026a4:	69db      	ldr	r3, [r3, #28]
 80026a6:	69fa      	ldr	r2, [r7, #28]
 80026a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026ac:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80026b0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d016      	beq.n	80026e8 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026c4:	69fa      	ldr	r2, [r7, #28]
 80026c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026ca:	f043 030b 	orr.w	r3, r3, #11
 80026ce:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026da:	69fa      	ldr	r2, [r7, #28]
 80026dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026e0:	f043 030b 	orr.w	r3, r3, #11
 80026e4:	6453      	str	r3, [r2, #68]	; 0x44
 80026e6:	e015      	b.n	8002714 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026ee:	695b      	ldr	r3, [r3, #20]
 80026f0:	69fa      	ldr	r2, [r7, #28]
 80026f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026f6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80026fa:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80026fe:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002706:	691b      	ldr	r3, [r3, #16]
 8002708:	69fa      	ldr	r2, [r7, #28]
 800270a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800270e:	f043 030b 	orr.w	r3, r3, #11
 8002712:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	69fa      	ldr	r2, [r7, #28]
 800271e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002722:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002726:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6818      	ldr	r0, [r3, #0]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	691b      	ldr	r3, [r3, #16]
 8002730:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002738:	461a      	mov	r2, r3
 800273a:	f003 f909 	bl	8005950 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	695a      	ldr	r2, [r3, #20]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800274c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4618      	mov	r0, r3
 8002754:	f003 f838 	bl	80057c8 <USB_ReadInterrupts>
 8002758:	4603      	mov	r3, r0
 800275a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800275e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002762:	d124      	bne.n	80027ae <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4618      	mov	r0, r3
 800276a:	f003 f8ce 	bl	800590a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4618      	mov	r0, r3
 8002774:	f002 f883 	bl	800487e <USB_GetDevSpeed>
 8002778:	4603      	mov	r3, r0
 800277a:	461a      	mov	r2, r3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681c      	ldr	r4, [r3, #0]
 8002784:	f001 fa28 	bl	8003bd8 <HAL_RCC_GetHCLKFreq>
 8002788:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800278e:	b2db      	uxtb	r3, r3
 8002790:	461a      	mov	r2, r3
 8002792:	4620      	mov	r0, r4
 8002794:	f001 fd82 	bl	800429c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	f015 feca 	bl	8018532 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	695a      	ldr	r2, [r3, #20]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80027ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4618      	mov	r0, r3
 80027b4:	f003 f808 	bl	80057c8 <USB_ReadInterrupts>
 80027b8:	4603      	mov	r3, r0
 80027ba:	f003 0308 	and.w	r3, r3, #8
 80027be:	2b08      	cmp	r3, #8
 80027c0:	d10a      	bne.n	80027d8 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f015 fea7 	bl	8018516 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	695a      	ldr	r2, [r3, #20]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f002 0208 	and.w	r2, r2, #8
 80027d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4618      	mov	r0, r3
 80027de:	f002 fff3 	bl	80057c8 <USB_ReadInterrupts>
 80027e2:	4603      	mov	r3, r0
 80027e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027e8:	2b80      	cmp	r3, #128	; 0x80
 80027ea:	d122      	bne.n	8002832 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80027ec:	6a3b      	ldr	r3, [r7, #32]
 80027ee:	699b      	ldr	r3, [r3, #24]
 80027f0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80027f4:	6a3b      	ldr	r3, [r7, #32]
 80027f6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80027f8:	2301      	movs	r3, #1
 80027fa:	627b      	str	r3, [r7, #36]	; 0x24
 80027fc:	e014      	b.n	8002828 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80027fe:	6879      	ldr	r1, [r7, #4]
 8002800:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002802:	4613      	mov	r3, r2
 8002804:	00db      	lsls	r3, r3, #3
 8002806:	4413      	add	r3, r2
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	440b      	add	r3, r1
 800280c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	2b01      	cmp	r3, #1
 8002814:	d105      	bne.n	8002822 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002818:	b2db      	uxtb	r3, r3
 800281a:	4619      	mov	r1, r3
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f000 fb27 	bl	8002e70 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002824:	3301      	adds	r3, #1
 8002826:	627b      	str	r3, [r7, #36]	; 0x24
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800282e:	429a      	cmp	r2, r3
 8002830:	d3e5      	bcc.n	80027fe <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4618      	mov	r0, r3
 8002838:	f002 ffc6 	bl	80057c8 <USB_ReadInterrupts>
 800283c:	4603      	mov	r3, r0
 800283e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002842:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002846:	d13b      	bne.n	80028c0 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002848:	2301      	movs	r3, #1
 800284a:	627b      	str	r3, [r7, #36]	; 0x24
 800284c:	e02b      	b.n	80028a6 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800284e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002850:	015a      	lsls	r2, r3, #5
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	4413      	add	r3, r2
 8002856:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800285e:	6879      	ldr	r1, [r7, #4]
 8002860:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002862:	4613      	mov	r3, r2
 8002864:	00db      	lsls	r3, r3, #3
 8002866:	4413      	add	r3, r2
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	440b      	add	r3, r1
 800286c:	3340      	adds	r3, #64	; 0x40
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	2b01      	cmp	r3, #1
 8002872:	d115      	bne.n	80028a0 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002874:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002876:	2b00      	cmp	r3, #0
 8002878:	da12      	bge.n	80028a0 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800287a:	6879      	ldr	r1, [r7, #4]
 800287c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800287e:	4613      	mov	r3, r2
 8002880:	00db      	lsls	r3, r3, #3
 8002882:	4413      	add	r3, r2
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	440b      	add	r3, r1
 8002888:	333f      	adds	r3, #63	; 0x3f
 800288a:	2201      	movs	r2, #1
 800288c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800288e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002890:	b2db      	uxtb	r3, r3
 8002892:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002896:	b2db      	uxtb	r3, r3
 8002898:	4619      	mov	r1, r3
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f000 fae8 	bl	8002e70 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80028a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a2:	3301      	adds	r3, #1
 80028a4:	627b      	str	r3, [r7, #36]	; 0x24
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d3ce      	bcc.n	800284e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	695a      	ldr	r2, [r3, #20]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80028be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4618      	mov	r0, r3
 80028c6:	f002 ff7f 	bl	80057c8 <USB_ReadInterrupts>
 80028ca:	4603      	mov	r3, r0
 80028cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80028d4:	d155      	bne.n	8002982 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80028d6:	2301      	movs	r3, #1
 80028d8:	627b      	str	r3, [r7, #36]	; 0x24
 80028da:	e045      	b.n	8002968 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80028dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028de:	015a      	lsls	r2, r3, #5
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	4413      	add	r3, r2
 80028e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80028ec:	6879      	ldr	r1, [r7, #4]
 80028ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028f0:	4613      	mov	r3, r2
 80028f2:	00db      	lsls	r3, r3, #3
 80028f4:	4413      	add	r3, r2
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	440b      	add	r3, r1
 80028fa:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	2b01      	cmp	r3, #1
 8002902:	d12e      	bne.n	8002962 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002904:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002906:	2b00      	cmp	r3, #0
 8002908:	da2b      	bge.n	8002962 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002916:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800291a:	429a      	cmp	r2, r3
 800291c:	d121      	bne.n	8002962 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800291e:	6879      	ldr	r1, [r7, #4]
 8002920:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002922:	4613      	mov	r3, r2
 8002924:	00db      	lsls	r3, r3, #3
 8002926:	4413      	add	r3, r2
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	440b      	add	r3, r1
 800292c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002930:	2201      	movs	r2, #1
 8002932:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002934:	6a3b      	ldr	r3, [r7, #32]
 8002936:	699b      	ldr	r3, [r3, #24]
 8002938:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800293c:	6a3b      	ldr	r3, [r7, #32]
 800293e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002940:	6a3b      	ldr	r3, [r7, #32]
 8002942:	695b      	ldr	r3, [r3, #20]
 8002944:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002948:	2b00      	cmp	r3, #0
 800294a:	d10a      	bne.n	8002962 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	69fa      	ldr	r2, [r7, #28]
 8002956:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800295a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800295e:	6053      	str	r3, [r2, #4]
            break;
 8002960:	e007      	b.n	8002972 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002964:	3301      	adds	r3, #1
 8002966:	627b      	str	r3, [r7, #36]	; 0x24
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800296e:	429a      	cmp	r2, r3
 8002970:	d3b4      	bcc.n	80028dc <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	695a      	ldr	r2, [r3, #20]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002980:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4618      	mov	r0, r3
 8002988:	f002 ff1e 	bl	80057c8 <USB_ReadInterrupts>
 800298c:	4603      	mov	r3, r0
 800298e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002992:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002996:	d10a      	bne.n	80029ae <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f015 fe4b 	bl	8018634 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	695a      	ldr	r2, [r3, #20]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80029ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4618      	mov	r0, r3
 80029b4:	f002 ff08 	bl	80057c8 <USB_ReadInterrupts>
 80029b8:	4603      	mov	r3, r0
 80029ba:	f003 0304 	and.w	r3, r3, #4
 80029be:	2b04      	cmp	r3, #4
 80029c0:	d115      	bne.n	80029ee <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	f003 0304 	and.w	r3, r3, #4
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d002      	beq.n	80029da <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	f015 fe3b 	bl	8018650 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	6859      	ldr	r1, [r3, #4]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	69ba      	ldr	r2, [r7, #24]
 80029e6:	430a      	orrs	r2, r1
 80029e8:	605a      	str	r2, [r3, #4]
 80029ea:	e000      	b.n	80029ee <HAL_PCD_IRQHandler+0x938>
      return;
 80029ec:	bf00      	nop
    }
  }
}
 80029ee:	3734      	adds	r7, #52	; 0x34
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd90      	pop	{r4, r7, pc}

080029f4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	460b      	mov	r3, r1
 80029fe:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d101      	bne.n	8002a0e <HAL_PCD_SetAddress+0x1a>
 8002a0a:	2302      	movs	r3, #2
 8002a0c:	e013      	b.n	8002a36 <HAL_PCD_SetAddress+0x42>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2201      	movs	r2, #1
 8002a12:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	78fa      	ldrb	r2, [r7, #3]
 8002a1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	78fa      	ldrb	r2, [r7, #3]
 8002a24:	4611      	mov	r1, r2
 8002a26:	4618      	mov	r0, r3
 8002a28:	f002 fe66 	bl	80056f8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002a34:	2300      	movs	r3, #0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3708      	adds	r7, #8
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}

08002a3e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002a3e:	b580      	push	{r7, lr}
 8002a40:	b084      	sub	sp, #16
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	6078      	str	r0, [r7, #4]
 8002a46:	4608      	mov	r0, r1
 8002a48:	4611      	mov	r1, r2
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	70fb      	strb	r3, [r7, #3]
 8002a50:	460b      	mov	r3, r1
 8002a52:	803b      	strh	r3, [r7, #0]
 8002a54:	4613      	mov	r3, r2
 8002a56:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002a5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	da0f      	bge.n	8002a84 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a64:	78fb      	ldrb	r3, [r7, #3]
 8002a66:	f003 020f 	and.w	r2, r3, #15
 8002a6a:	4613      	mov	r3, r2
 8002a6c:	00db      	lsls	r3, r3, #3
 8002a6e:	4413      	add	r3, r2
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	3338      	adds	r3, #56	; 0x38
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	4413      	add	r3, r2
 8002a78:	3304      	adds	r3, #4
 8002a7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	705a      	strb	r2, [r3, #1]
 8002a82:	e00f      	b.n	8002aa4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a84:	78fb      	ldrb	r3, [r7, #3]
 8002a86:	f003 020f 	and.w	r2, r3, #15
 8002a8a:	4613      	mov	r3, r2
 8002a8c:	00db      	lsls	r3, r3, #3
 8002a8e:	4413      	add	r3, r2
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	4413      	add	r3, r2
 8002a9a:	3304      	adds	r3, #4
 8002a9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002aa4:	78fb      	ldrb	r3, [r7, #3]
 8002aa6:	f003 030f 	and.w	r3, r3, #15
 8002aaa:	b2da      	uxtb	r2, r3
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002ab0:	883a      	ldrh	r2, [r7, #0]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	78ba      	ldrb	r2, [r7, #2]
 8002aba:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	785b      	ldrb	r3, [r3, #1]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d004      	beq.n	8002ace <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	b29a      	uxth	r2, r3
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002ace:	78bb      	ldrb	r3, [r7, #2]
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d102      	bne.n	8002ada <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d101      	bne.n	8002ae8 <HAL_PCD_EP_Open+0xaa>
 8002ae4:	2302      	movs	r3, #2
 8002ae6:	e00e      	b.n	8002b06 <HAL_PCD_EP_Open+0xc8>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2201      	movs	r2, #1
 8002aec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	68f9      	ldr	r1, [r7, #12]
 8002af6:	4618      	mov	r0, r3
 8002af8:	f001 fee6 	bl	80048c8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2200      	movs	r2, #0
 8002b00:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002b04:	7afb      	ldrb	r3, [r7, #11]
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3710      	adds	r7, #16
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}

08002b0e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b0e:	b580      	push	{r7, lr}
 8002b10:	b084      	sub	sp, #16
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]
 8002b16:	460b      	mov	r3, r1
 8002b18:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002b1a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	da0f      	bge.n	8002b42 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b22:	78fb      	ldrb	r3, [r7, #3]
 8002b24:	f003 020f 	and.w	r2, r3, #15
 8002b28:	4613      	mov	r3, r2
 8002b2a:	00db      	lsls	r3, r3, #3
 8002b2c:	4413      	add	r3, r2
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	3338      	adds	r3, #56	; 0x38
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	4413      	add	r3, r2
 8002b36:	3304      	adds	r3, #4
 8002b38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	705a      	strb	r2, [r3, #1]
 8002b40:	e00f      	b.n	8002b62 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b42:	78fb      	ldrb	r3, [r7, #3]
 8002b44:	f003 020f 	and.w	r2, r3, #15
 8002b48:	4613      	mov	r3, r2
 8002b4a:	00db      	lsls	r3, r3, #3
 8002b4c:	4413      	add	r3, r2
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	4413      	add	r3, r2
 8002b58:	3304      	adds	r3, #4
 8002b5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002b62:	78fb      	ldrb	r3, [r7, #3]
 8002b64:	f003 030f 	and.w	r3, r3, #15
 8002b68:	b2da      	uxtb	r2, r3
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d101      	bne.n	8002b7c <HAL_PCD_EP_Close+0x6e>
 8002b78:	2302      	movs	r3, #2
 8002b7a:	e00e      	b.n	8002b9a <HAL_PCD_EP_Close+0x8c>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	68f9      	ldr	r1, [r7, #12]
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f001 ff24 	bl	80049d8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2200      	movs	r2, #0
 8002b94:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002b98:	2300      	movs	r3, #0
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3710      	adds	r7, #16
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}

08002ba2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002ba2:	b580      	push	{r7, lr}
 8002ba4:	b086      	sub	sp, #24
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	60f8      	str	r0, [r7, #12]
 8002baa:	607a      	str	r2, [r7, #4]
 8002bac:	603b      	str	r3, [r7, #0]
 8002bae:	460b      	mov	r3, r1
 8002bb0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002bb2:	7afb      	ldrb	r3, [r7, #11]
 8002bb4:	f003 020f 	and.w	r2, r3, #15
 8002bb8:	4613      	mov	r3, r2
 8002bba:	00db      	lsls	r3, r3, #3
 8002bbc:	4413      	add	r3, r2
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002bc4:	68fa      	ldr	r2, [r7, #12]
 8002bc6:	4413      	add	r3, r2
 8002bc8:	3304      	adds	r3, #4
 8002bca:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	683a      	ldr	r2, [r7, #0]
 8002bd6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	2200      	movs	r2, #0
 8002be2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002be4:	7afb      	ldrb	r3, [r7, #11]
 8002be6:	f003 030f 	and.w	r3, r3, #15
 8002bea:	b2da      	uxtb	r2, r3
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	691b      	ldr	r3, [r3, #16]
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d102      	bne.n	8002bfe <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002bfe:	7afb      	ldrb	r3, [r7, #11]
 8002c00:	f003 030f 	and.w	r3, r3, #15
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d109      	bne.n	8002c1c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	6818      	ldr	r0, [r3, #0]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	691b      	ldr	r3, [r3, #16]
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	461a      	mov	r2, r3
 8002c14:	6979      	ldr	r1, [r7, #20]
 8002c16:	f002 fa03 	bl	8005020 <USB_EP0StartXfer>
 8002c1a:	e008      	b.n	8002c2e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	6818      	ldr	r0, [r3, #0]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	691b      	ldr	r3, [r3, #16]
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	461a      	mov	r2, r3
 8002c28:	6979      	ldr	r1, [r7, #20]
 8002c2a:	f001 ffb1 	bl	8004b90 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002c2e:	2300      	movs	r3, #0
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3718      	adds	r7, #24
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}

08002c38 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	460b      	mov	r3, r1
 8002c42:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002c44:	78fb      	ldrb	r3, [r7, #3]
 8002c46:	f003 020f 	and.w	r2, r3, #15
 8002c4a:	6879      	ldr	r1, [r7, #4]
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	00db      	lsls	r3, r3, #3
 8002c50:	4413      	add	r3, r2
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	440b      	add	r3, r1
 8002c56:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002c5a:	681b      	ldr	r3, [r3, #0]
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	370c      	adds	r7, #12
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr

08002c68 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b086      	sub	sp, #24
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	60f8      	str	r0, [r7, #12]
 8002c70:	607a      	str	r2, [r7, #4]
 8002c72:	603b      	str	r3, [r7, #0]
 8002c74:	460b      	mov	r3, r1
 8002c76:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c78:	7afb      	ldrb	r3, [r7, #11]
 8002c7a:	f003 020f 	and.w	r2, r3, #15
 8002c7e:	4613      	mov	r3, r2
 8002c80:	00db      	lsls	r3, r3, #3
 8002c82:	4413      	add	r3, r2
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	3338      	adds	r3, #56	; 0x38
 8002c88:	68fa      	ldr	r2, [r7, #12]
 8002c8a:	4413      	add	r3, r2
 8002c8c:	3304      	adds	r3, #4
 8002c8e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	683a      	ldr	r2, [r7, #0]
 8002c9a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ca8:	7afb      	ldrb	r3, [r7, #11]
 8002caa:	f003 030f 	and.w	r3, r3, #15
 8002cae:	b2da      	uxtb	r2, r3
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	691b      	ldr	r3, [r3, #16]
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d102      	bne.n	8002cc2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002cbc:	687a      	ldr	r2, [r7, #4]
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002cc2:	7afb      	ldrb	r3, [r7, #11]
 8002cc4:	f003 030f 	and.w	r3, r3, #15
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d109      	bne.n	8002ce0 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6818      	ldr	r0, [r3, #0]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	691b      	ldr	r3, [r3, #16]
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	6979      	ldr	r1, [r7, #20]
 8002cda:	f002 f9a1 	bl	8005020 <USB_EP0StartXfer>
 8002cde:	e008      	b.n	8002cf2 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6818      	ldr	r0, [r3, #0]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	691b      	ldr	r3, [r3, #16]
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	461a      	mov	r2, r3
 8002cec:	6979      	ldr	r1, [r7, #20]
 8002cee:	f001 ff4f 	bl	8004b90 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002cf2:	2300      	movs	r3, #0
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3718      	adds	r7, #24
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}

08002cfc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	460b      	mov	r3, r1
 8002d06:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002d08:	78fb      	ldrb	r3, [r7, #3]
 8002d0a:	f003 020f 	and.w	r2, r3, #15
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d901      	bls.n	8002d1a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e050      	b.n	8002dbc <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002d1a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	da0f      	bge.n	8002d42 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d22:	78fb      	ldrb	r3, [r7, #3]
 8002d24:	f003 020f 	and.w	r2, r3, #15
 8002d28:	4613      	mov	r3, r2
 8002d2a:	00db      	lsls	r3, r3, #3
 8002d2c:	4413      	add	r3, r2
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	3338      	adds	r3, #56	; 0x38
 8002d32:	687a      	ldr	r2, [r7, #4]
 8002d34:	4413      	add	r3, r2
 8002d36:	3304      	adds	r3, #4
 8002d38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	705a      	strb	r2, [r3, #1]
 8002d40:	e00d      	b.n	8002d5e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002d42:	78fa      	ldrb	r2, [r7, #3]
 8002d44:	4613      	mov	r3, r2
 8002d46:	00db      	lsls	r3, r3, #3
 8002d48:	4413      	add	r3, r2
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	4413      	add	r3, r2
 8002d54:	3304      	adds	r3, #4
 8002d56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2201      	movs	r2, #1
 8002d62:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d64:	78fb      	ldrb	r3, [r7, #3]
 8002d66:	f003 030f 	and.w	r3, r3, #15
 8002d6a:	b2da      	uxtb	r2, r3
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d101      	bne.n	8002d7e <HAL_PCD_EP_SetStall+0x82>
 8002d7a:	2302      	movs	r3, #2
 8002d7c:	e01e      	b.n	8002dbc <HAL_PCD_EP_SetStall+0xc0>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2201      	movs	r2, #1
 8002d82:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	68f9      	ldr	r1, [r7, #12]
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f002 fbdf 	bl	8005550 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002d92:	78fb      	ldrb	r3, [r7, #3]
 8002d94:	f003 030f 	and.w	r3, r3, #15
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d10a      	bne.n	8002db2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6818      	ldr	r0, [r3, #0]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	691b      	ldr	r3, [r3, #16]
 8002da4:	b2d9      	uxtb	r1, r3
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002dac:	461a      	mov	r2, r3
 8002dae:	f002 fdcf 	bl	8005950 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002dba:	2300      	movs	r3, #0
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3710      	adds	r7, #16
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b084      	sub	sp, #16
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	460b      	mov	r3, r1
 8002dce:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002dd0:	78fb      	ldrb	r3, [r7, #3]
 8002dd2:	f003 020f 	and.w	r2, r3, #15
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d901      	bls.n	8002de2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e042      	b.n	8002e68 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002de2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	da0f      	bge.n	8002e0a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002dea:	78fb      	ldrb	r3, [r7, #3]
 8002dec:	f003 020f 	and.w	r2, r3, #15
 8002df0:	4613      	mov	r3, r2
 8002df2:	00db      	lsls	r3, r3, #3
 8002df4:	4413      	add	r3, r2
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	3338      	adds	r3, #56	; 0x38
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	4413      	add	r3, r2
 8002dfe:	3304      	adds	r3, #4
 8002e00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2201      	movs	r2, #1
 8002e06:	705a      	strb	r2, [r3, #1]
 8002e08:	e00f      	b.n	8002e2a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e0a:	78fb      	ldrb	r3, [r7, #3]
 8002e0c:	f003 020f 	and.w	r2, r3, #15
 8002e10:	4613      	mov	r3, r2
 8002e12:	00db      	lsls	r3, r3, #3
 8002e14:	4413      	add	r3, r2
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	4413      	add	r3, r2
 8002e20:	3304      	adds	r3, #4
 8002e22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2200      	movs	r2, #0
 8002e28:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e30:	78fb      	ldrb	r3, [r7, #3]
 8002e32:	f003 030f 	and.w	r3, r3, #15
 8002e36:	b2da      	uxtb	r2, r3
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d101      	bne.n	8002e4a <HAL_PCD_EP_ClrStall+0x86>
 8002e46:	2302      	movs	r3, #2
 8002e48:	e00e      	b.n	8002e68 <HAL_PCD_EP_ClrStall+0xa4>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	68f9      	ldr	r1, [r7, #12]
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f002 fbe7 	bl	800562c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002e66:	2300      	movs	r3, #0
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3710      	adds	r7, #16
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}

08002e70 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b084      	sub	sp, #16
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	460b      	mov	r3, r1
 8002e7a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002e7c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	da0c      	bge.n	8002e9e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e84:	78fb      	ldrb	r3, [r7, #3]
 8002e86:	f003 020f 	and.w	r2, r3, #15
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	00db      	lsls	r3, r3, #3
 8002e8e:	4413      	add	r3, r2
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	3338      	adds	r3, #56	; 0x38
 8002e94:	687a      	ldr	r2, [r7, #4]
 8002e96:	4413      	add	r3, r2
 8002e98:	3304      	adds	r3, #4
 8002e9a:	60fb      	str	r3, [r7, #12]
 8002e9c:	e00c      	b.n	8002eb8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e9e:	78fb      	ldrb	r3, [r7, #3]
 8002ea0:	f003 020f 	and.w	r2, r3, #15
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	00db      	lsls	r3, r3, #3
 8002ea8:	4413      	add	r3, r2
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	4413      	add	r3, r2
 8002eb4:	3304      	adds	r3, #4
 8002eb6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	68f9      	ldr	r1, [r7, #12]
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f002 fa06 	bl	80052d0 <USB_EPStopXfer>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002ec8:	7afb      	ldrb	r3, [r7, #11]
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3710      	adds	r7, #16
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}

08002ed2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002ed2:	b580      	push	{r7, lr}
 8002ed4:	b08a      	sub	sp, #40	; 0x28
 8002ed6:	af02      	add	r7, sp, #8
 8002ed8:	6078      	str	r0, [r7, #4]
 8002eda:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002ee6:	683a      	ldr	r2, [r7, #0]
 8002ee8:	4613      	mov	r3, r2
 8002eea:	00db      	lsls	r3, r3, #3
 8002eec:	4413      	add	r3, r2
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	3338      	adds	r3, #56	; 0x38
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	4413      	add	r3, r2
 8002ef6:	3304      	adds	r3, #4
 8002ef8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	6a1a      	ldr	r2, [r3, #32]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	699b      	ldr	r3, [r3, #24]
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d901      	bls.n	8002f0a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e06c      	b.n	8002fe4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	699a      	ldr	r2, [r3, #24]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	6a1b      	ldr	r3, [r3, #32]
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	68db      	ldr	r3, [r3, #12]
 8002f1a:	69fa      	ldr	r2, [r7, #28]
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d902      	bls.n	8002f26 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	3303      	adds	r3, #3
 8002f2a:	089b      	lsrs	r3, r3, #2
 8002f2c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002f2e:	e02b      	b.n	8002f88 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	699a      	ldr	r2, [r3, #24]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6a1b      	ldr	r3, [r3, #32]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	69fa      	ldr	r2, [r7, #28]
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d902      	bls.n	8002f4c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	3303      	adds	r3, #3
 8002f50:	089b      	lsrs	r3, r3, #2
 8002f52:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6919      	ldr	r1, [r3, #16]
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	b2da      	uxtb	r2, r3
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	9300      	str	r3, [sp, #0]
 8002f68:	4603      	mov	r3, r0
 8002f6a:	6978      	ldr	r0, [r7, #20]
 8002f6c:	f002 fa5a 	bl	8005424 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	691a      	ldr	r2, [r3, #16]
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	441a      	add	r2, r3
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	6a1a      	ldr	r2, [r3, #32]
 8002f80:	69fb      	ldr	r3, [r7, #28]
 8002f82:	441a      	add	r2, r3
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	015a      	lsls	r2, r3, #5
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	4413      	add	r3, r2
 8002f90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f94:	699b      	ldr	r3, [r3, #24]
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	69ba      	ldr	r2, [r7, #24]
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d809      	bhi.n	8002fb2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	6a1a      	ldr	r2, [r3, #32]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d203      	bcs.n	8002fb2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	699b      	ldr	r3, [r3, #24]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d1be      	bne.n	8002f30 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	699a      	ldr	r2, [r3, #24]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6a1b      	ldr	r3, [r3, #32]
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d811      	bhi.n	8002fe2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	f003 030f 	and.w	r3, r3, #15
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fca:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fd2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	43db      	mvns	r3, r3
 8002fd8:	6939      	ldr	r1, [r7, #16]
 8002fda:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002fde:	4013      	ands	r3, r2
 8002fe0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002fe2:	2300      	movs	r3, #0
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3720      	adds	r7, #32
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}

08002fec <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b088      	sub	sp, #32
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	333c      	adds	r3, #60	; 0x3c
 8003004:	3304      	adds	r3, #4
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	015a      	lsls	r2, r3, #5
 800300e:	69bb      	ldr	r3, [r7, #24]
 8003010:	4413      	add	r3, r2
 8003012:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	691b      	ldr	r3, [r3, #16]
 800301e:	2b01      	cmp	r3, #1
 8003020:	d17b      	bne.n	800311a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	f003 0308 	and.w	r3, r3, #8
 8003028:	2b00      	cmp	r3, #0
 800302a:	d015      	beq.n	8003058 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	4a61      	ldr	r2, [pc, #388]	; (80031b4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003030:	4293      	cmp	r3, r2
 8003032:	f240 80b9 	bls.w	80031a8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800303c:	2b00      	cmp	r3, #0
 800303e:	f000 80b3 	beq.w	80031a8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	015a      	lsls	r2, r3, #5
 8003046:	69bb      	ldr	r3, [r7, #24]
 8003048:	4413      	add	r3, r2
 800304a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800304e:	461a      	mov	r2, r3
 8003050:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003054:	6093      	str	r3, [r2, #8]
 8003056:	e0a7      	b.n	80031a8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	f003 0320 	and.w	r3, r3, #32
 800305e:	2b00      	cmp	r3, #0
 8003060:	d009      	beq.n	8003076 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	015a      	lsls	r2, r3, #5
 8003066:	69bb      	ldr	r3, [r7, #24]
 8003068:	4413      	add	r3, r2
 800306a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800306e:	461a      	mov	r2, r3
 8003070:	2320      	movs	r3, #32
 8003072:	6093      	str	r3, [r2, #8]
 8003074:	e098      	b.n	80031a8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800307c:	2b00      	cmp	r3, #0
 800307e:	f040 8093 	bne.w	80031a8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	4a4b      	ldr	r2, [pc, #300]	; (80031b4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d90f      	bls.n	80030aa <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003090:	2b00      	cmp	r3, #0
 8003092:	d00a      	beq.n	80030aa <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	015a      	lsls	r2, r3, #5
 8003098:	69bb      	ldr	r3, [r7, #24]
 800309a:	4413      	add	r3, r2
 800309c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030a0:	461a      	mov	r2, r3
 80030a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030a6:	6093      	str	r3, [r2, #8]
 80030a8:	e07e      	b.n	80031a8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80030aa:	683a      	ldr	r2, [r7, #0]
 80030ac:	4613      	mov	r3, r2
 80030ae:	00db      	lsls	r3, r3, #3
 80030b0:	4413      	add	r3, r2
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	4413      	add	r3, r2
 80030bc:	3304      	adds	r3, #4
 80030be:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	69da      	ldr	r2, [r3, #28]
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	0159      	lsls	r1, r3, #5
 80030c8:	69bb      	ldr	r3, [r7, #24]
 80030ca:	440b      	add	r3, r1
 80030cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030d0:	691b      	ldr	r3, [r3, #16]
 80030d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030d6:	1ad2      	subs	r2, r2, r3
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d114      	bne.n	800310c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	699b      	ldr	r3, [r3, #24]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d109      	bne.n	80030fe <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6818      	ldr	r0, [r3, #0]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80030f4:	461a      	mov	r2, r3
 80030f6:	2101      	movs	r1, #1
 80030f8:	f002 fc2a 	bl	8005950 <USB_EP0_OutStart>
 80030fc:	e006      	b.n	800310c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	691a      	ldr	r2, [r3, #16]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	6a1b      	ldr	r3, [r3, #32]
 8003106:	441a      	add	r2, r3
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	b2db      	uxtb	r3, r3
 8003110:	4619      	mov	r1, r3
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f015 f9ca 	bl	80184ac <HAL_PCD_DataOutStageCallback>
 8003118:	e046      	b.n	80031a8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	4a26      	ldr	r2, [pc, #152]	; (80031b8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d124      	bne.n	800316c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003128:	2b00      	cmp	r3, #0
 800312a:	d00a      	beq.n	8003142 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	015a      	lsls	r2, r3, #5
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	4413      	add	r3, r2
 8003134:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003138:	461a      	mov	r2, r3
 800313a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800313e:	6093      	str	r3, [r2, #8]
 8003140:	e032      	b.n	80031a8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	f003 0320 	and.w	r3, r3, #32
 8003148:	2b00      	cmp	r3, #0
 800314a:	d008      	beq.n	800315e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	015a      	lsls	r2, r3, #5
 8003150:	69bb      	ldr	r3, [r7, #24]
 8003152:	4413      	add	r3, r2
 8003154:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003158:	461a      	mov	r2, r3
 800315a:	2320      	movs	r3, #32
 800315c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	b2db      	uxtb	r3, r3
 8003162:	4619      	mov	r1, r3
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f015 f9a1 	bl	80184ac <HAL_PCD_DataOutStageCallback>
 800316a:	e01d      	b.n	80031a8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d114      	bne.n	800319c <PCD_EP_OutXfrComplete_int+0x1b0>
 8003172:	6879      	ldr	r1, [r7, #4]
 8003174:	683a      	ldr	r2, [r7, #0]
 8003176:	4613      	mov	r3, r2
 8003178:	00db      	lsls	r3, r3, #3
 800317a:	4413      	add	r3, r2
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	440b      	add	r3, r1
 8003180:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d108      	bne.n	800319c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6818      	ldr	r0, [r3, #0]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003194:	461a      	mov	r2, r3
 8003196:	2100      	movs	r1, #0
 8003198:	f002 fbda 	bl	8005950 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	4619      	mov	r1, r3
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f015 f982 	bl	80184ac <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80031a8:	2300      	movs	r3, #0
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3720      	adds	r7, #32
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	4f54300a 	.word	0x4f54300a
 80031b8:	4f54310a 	.word	0x4f54310a

080031bc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b086      	sub	sp, #24
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	333c      	adds	r3, #60	; 0x3c
 80031d4:	3304      	adds	r3, #4
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	015a      	lsls	r2, r3, #5
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	4413      	add	r3, r2
 80031e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	4a15      	ldr	r2, [pc, #84]	; (8003244 <PCD_EP_OutSetupPacket_int+0x88>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d90e      	bls.n	8003210 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d009      	beq.n	8003210 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	015a      	lsls	r2, r3, #5
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	4413      	add	r3, r2
 8003204:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003208:	461a      	mov	r2, r3
 800320a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800320e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f015 f939 	bl	8018488 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	4a0a      	ldr	r2, [pc, #40]	; (8003244 <PCD_EP_OutSetupPacket_int+0x88>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d90c      	bls.n	8003238 <PCD_EP_OutSetupPacket_int+0x7c>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	691b      	ldr	r3, [r3, #16]
 8003222:	2b01      	cmp	r3, #1
 8003224:	d108      	bne.n	8003238 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6818      	ldr	r0, [r3, #0]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003230:	461a      	mov	r2, r3
 8003232:	2101      	movs	r1, #1
 8003234:	f002 fb8c 	bl	8005950 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003238:	2300      	movs	r3, #0
}
 800323a:	4618      	mov	r0, r3
 800323c:	3718      	adds	r7, #24
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	4f54300a 	.word	0x4f54300a

08003248 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003248:	b480      	push	{r7}
 800324a:	b085      	sub	sp, #20
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	460b      	mov	r3, r1
 8003252:	70fb      	strb	r3, [r7, #3]
 8003254:	4613      	mov	r3, r2
 8003256:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003260:	78fb      	ldrb	r3, [r7, #3]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d107      	bne.n	8003276 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003266:	883b      	ldrh	r3, [r7, #0]
 8003268:	0419      	lsls	r1, r3, #16
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	68ba      	ldr	r2, [r7, #8]
 8003270:	430a      	orrs	r2, r1
 8003272:	629a      	str	r2, [r3, #40]	; 0x28
 8003274:	e028      	b.n	80032c8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800327c:	0c1b      	lsrs	r3, r3, #16
 800327e:	68ba      	ldr	r2, [r7, #8]
 8003280:	4413      	add	r3, r2
 8003282:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003284:	2300      	movs	r3, #0
 8003286:	73fb      	strb	r3, [r7, #15]
 8003288:	e00d      	b.n	80032a6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	7bfb      	ldrb	r3, [r7, #15]
 8003290:	3340      	adds	r3, #64	; 0x40
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	4413      	add	r3, r2
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	0c1b      	lsrs	r3, r3, #16
 800329a:	68ba      	ldr	r2, [r7, #8]
 800329c:	4413      	add	r3, r2
 800329e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80032a0:	7bfb      	ldrb	r3, [r7, #15]
 80032a2:	3301      	adds	r3, #1
 80032a4:	73fb      	strb	r3, [r7, #15]
 80032a6:	7bfa      	ldrb	r2, [r7, #15]
 80032a8:	78fb      	ldrb	r3, [r7, #3]
 80032aa:	3b01      	subs	r3, #1
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d3ec      	bcc.n	800328a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80032b0:	883b      	ldrh	r3, [r7, #0]
 80032b2:	0418      	lsls	r0, r3, #16
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6819      	ldr	r1, [r3, #0]
 80032b8:	78fb      	ldrb	r3, [r7, #3]
 80032ba:	3b01      	subs	r3, #1
 80032bc:	68ba      	ldr	r2, [r7, #8]
 80032be:	4302      	orrs	r2, r0
 80032c0:	3340      	adds	r3, #64	; 0x40
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	440b      	add	r3, r1
 80032c6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80032c8:	2300      	movs	r3, #0
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3714      	adds	r7, #20
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr

080032d6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80032d6:	b480      	push	{r7}
 80032d8:	b083      	sub	sp, #12
 80032da:	af00      	add	r7, sp, #0
 80032dc:	6078      	str	r0, [r7, #4]
 80032de:	460b      	mov	r3, r1
 80032e0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	887a      	ldrh	r2, [r7, #2]
 80032e8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80032ea:	2300      	movs	r3, #0
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	370c      	adds	r7, #12
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr

080032f8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	460b      	mov	r3, r1
 8003302:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003304:	bf00      	nop
 8003306:	370c      	adds	r7, #12
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr

08003310 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b086      	sub	sp, #24
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d101      	bne.n	8003322 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e267      	b.n	80037f2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0301 	and.w	r3, r3, #1
 800332a:	2b00      	cmp	r3, #0
 800332c:	d075      	beq.n	800341a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800332e:	4b88      	ldr	r3, [pc, #544]	; (8003550 <HAL_RCC_OscConfig+0x240>)
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	f003 030c 	and.w	r3, r3, #12
 8003336:	2b04      	cmp	r3, #4
 8003338:	d00c      	beq.n	8003354 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800333a:	4b85      	ldr	r3, [pc, #532]	; (8003550 <HAL_RCC_OscConfig+0x240>)
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003342:	2b08      	cmp	r3, #8
 8003344:	d112      	bne.n	800336c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003346:	4b82      	ldr	r3, [pc, #520]	; (8003550 <HAL_RCC_OscConfig+0x240>)
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800334e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003352:	d10b      	bne.n	800336c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003354:	4b7e      	ldr	r3, [pc, #504]	; (8003550 <HAL_RCC_OscConfig+0x240>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800335c:	2b00      	cmp	r3, #0
 800335e:	d05b      	beq.n	8003418 <HAL_RCC_OscConfig+0x108>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d157      	bne.n	8003418 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e242      	b.n	80037f2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003374:	d106      	bne.n	8003384 <HAL_RCC_OscConfig+0x74>
 8003376:	4b76      	ldr	r3, [pc, #472]	; (8003550 <HAL_RCC_OscConfig+0x240>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a75      	ldr	r2, [pc, #468]	; (8003550 <HAL_RCC_OscConfig+0x240>)
 800337c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003380:	6013      	str	r3, [r2, #0]
 8003382:	e01d      	b.n	80033c0 <HAL_RCC_OscConfig+0xb0>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800338c:	d10c      	bne.n	80033a8 <HAL_RCC_OscConfig+0x98>
 800338e:	4b70      	ldr	r3, [pc, #448]	; (8003550 <HAL_RCC_OscConfig+0x240>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a6f      	ldr	r2, [pc, #444]	; (8003550 <HAL_RCC_OscConfig+0x240>)
 8003394:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003398:	6013      	str	r3, [r2, #0]
 800339a:	4b6d      	ldr	r3, [pc, #436]	; (8003550 <HAL_RCC_OscConfig+0x240>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a6c      	ldr	r2, [pc, #432]	; (8003550 <HAL_RCC_OscConfig+0x240>)
 80033a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033a4:	6013      	str	r3, [r2, #0]
 80033a6:	e00b      	b.n	80033c0 <HAL_RCC_OscConfig+0xb0>
 80033a8:	4b69      	ldr	r3, [pc, #420]	; (8003550 <HAL_RCC_OscConfig+0x240>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a68      	ldr	r2, [pc, #416]	; (8003550 <HAL_RCC_OscConfig+0x240>)
 80033ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033b2:	6013      	str	r3, [r2, #0]
 80033b4:	4b66      	ldr	r3, [pc, #408]	; (8003550 <HAL_RCC_OscConfig+0x240>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a65      	ldr	r2, [pc, #404]	; (8003550 <HAL_RCC_OscConfig+0x240>)
 80033ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d013      	beq.n	80033f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033c8:	f7fd fbf8 	bl	8000bbc <HAL_GetTick>
 80033cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ce:	e008      	b.n	80033e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033d0:	f7fd fbf4 	bl	8000bbc <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	2b64      	cmp	r3, #100	; 0x64
 80033dc:	d901      	bls.n	80033e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e207      	b.n	80037f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033e2:	4b5b      	ldr	r3, [pc, #364]	; (8003550 <HAL_RCC_OscConfig+0x240>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d0f0      	beq.n	80033d0 <HAL_RCC_OscConfig+0xc0>
 80033ee:	e014      	b.n	800341a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033f0:	f7fd fbe4 	bl	8000bbc <HAL_GetTick>
 80033f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033f6:	e008      	b.n	800340a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033f8:	f7fd fbe0 	bl	8000bbc <HAL_GetTick>
 80033fc:	4602      	mov	r2, r0
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	2b64      	cmp	r3, #100	; 0x64
 8003404:	d901      	bls.n	800340a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003406:	2303      	movs	r3, #3
 8003408:	e1f3      	b.n	80037f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800340a:	4b51      	ldr	r3, [pc, #324]	; (8003550 <HAL_RCC_OscConfig+0x240>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d1f0      	bne.n	80033f8 <HAL_RCC_OscConfig+0xe8>
 8003416:	e000      	b.n	800341a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003418:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0302 	and.w	r3, r3, #2
 8003422:	2b00      	cmp	r3, #0
 8003424:	d063      	beq.n	80034ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003426:	4b4a      	ldr	r3, [pc, #296]	; (8003550 <HAL_RCC_OscConfig+0x240>)
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	f003 030c 	and.w	r3, r3, #12
 800342e:	2b00      	cmp	r3, #0
 8003430:	d00b      	beq.n	800344a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003432:	4b47      	ldr	r3, [pc, #284]	; (8003550 <HAL_RCC_OscConfig+0x240>)
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800343a:	2b08      	cmp	r3, #8
 800343c:	d11c      	bne.n	8003478 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800343e:	4b44      	ldr	r3, [pc, #272]	; (8003550 <HAL_RCC_OscConfig+0x240>)
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d116      	bne.n	8003478 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800344a:	4b41      	ldr	r3, [pc, #260]	; (8003550 <HAL_RCC_OscConfig+0x240>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0302 	and.w	r3, r3, #2
 8003452:	2b00      	cmp	r3, #0
 8003454:	d005      	beq.n	8003462 <HAL_RCC_OscConfig+0x152>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	68db      	ldr	r3, [r3, #12]
 800345a:	2b01      	cmp	r3, #1
 800345c:	d001      	beq.n	8003462 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e1c7      	b.n	80037f2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003462:	4b3b      	ldr	r3, [pc, #236]	; (8003550 <HAL_RCC_OscConfig+0x240>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	691b      	ldr	r3, [r3, #16]
 800346e:	00db      	lsls	r3, r3, #3
 8003470:	4937      	ldr	r1, [pc, #220]	; (8003550 <HAL_RCC_OscConfig+0x240>)
 8003472:	4313      	orrs	r3, r2
 8003474:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003476:	e03a      	b.n	80034ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d020      	beq.n	80034c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003480:	4b34      	ldr	r3, [pc, #208]	; (8003554 <HAL_RCC_OscConfig+0x244>)
 8003482:	2201      	movs	r2, #1
 8003484:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003486:	f7fd fb99 	bl	8000bbc <HAL_GetTick>
 800348a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800348c:	e008      	b.n	80034a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800348e:	f7fd fb95 	bl	8000bbc <HAL_GetTick>
 8003492:	4602      	mov	r2, r0
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	1ad3      	subs	r3, r2, r3
 8003498:	2b02      	cmp	r3, #2
 800349a:	d901      	bls.n	80034a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800349c:	2303      	movs	r3, #3
 800349e:	e1a8      	b.n	80037f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034a0:	4b2b      	ldr	r3, [pc, #172]	; (8003550 <HAL_RCC_OscConfig+0x240>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 0302 	and.w	r3, r3, #2
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d0f0      	beq.n	800348e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034ac:	4b28      	ldr	r3, [pc, #160]	; (8003550 <HAL_RCC_OscConfig+0x240>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	691b      	ldr	r3, [r3, #16]
 80034b8:	00db      	lsls	r3, r3, #3
 80034ba:	4925      	ldr	r1, [pc, #148]	; (8003550 <HAL_RCC_OscConfig+0x240>)
 80034bc:	4313      	orrs	r3, r2
 80034be:	600b      	str	r3, [r1, #0]
 80034c0:	e015      	b.n	80034ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034c2:	4b24      	ldr	r3, [pc, #144]	; (8003554 <HAL_RCC_OscConfig+0x244>)
 80034c4:	2200      	movs	r2, #0
 80034c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c8:	f7fd fb78 	bl	8000bbc <HAL_GetTick>
 80034cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034ce:	e008      	b.n	80034e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034d0:	f7fd fb74 	bl	8000bbc <HAL_GetTick>
 80034d4:	4602      	mov	r2, r0
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d901      	bls.n	80034e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e187      	b.n	80037f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034e2:	4b1b      	ldr	r3, [pc, #108]	; (8003550 <HAL_RCC_OscConfig+0x240>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0302 	and.w	r3, r3, #2
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d1f0      	bne.n	80034d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0308 	and.w	r3, r3, #8
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d036      	beq.n	8003568 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	695b      	ldr	r3, [r3, #20]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d016      	beq.n	8003530 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003502:	4b15      	ldr	r3, [pc, #84]	; (8003558 <HAL_RCC_OscConfig+0x248>)
 8003504:	2201      	movs	r2, #1
 8003506:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003508:	f7fd fb58 	bl	8000bbc <HAL_GetTick>
 800350c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800350e:	e008      	b.n	8003522 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003510:	f7fd fb54 	bl	8000bbc <HAL_GetTick>
 8003514:	4602      	mov	r2, r0
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	1ad3      	subs	r3, r2, r3
 800351a:	2b02      	cmp	r3, #2
 800351c:	d901      	bls.n	8003522 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800351e:	2303      	movs	r3, #3
 8003520:	e167      	b.n	80037f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003522:	4b0b      	ldr	r3, [pc, #44]	; (8003550 <HAL_RCC_OscConfig+0x240>)
 8003524:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003526:	f003 0302 	and.w	r3, r3, #2
 800352a:	2b00      	cmp	r3, #0
 800352c:	d0f0      	beq.n	8003510 <HAL_RCC_OscConfig+0x200>
 800352e:	e01b      	b.n	8003568 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003530:	4b09      	ldr	r3, [pc, #36]	; (8003558 <HAL_RCC_OscConfig+0x248>)
 8003532:	2200      	movs	r2, #0
 8003534:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003536:	f7fd fb41 	bl	8000bbc <HAL_GetTick>
 800353a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800353c:	e00e      	b.n	800355c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800353e:	f7fd fb3d 	bl	8000bbc <HAL_GetTick>
 8003542:	4602      	mov	r2, r0
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	1ad3      	subs	r3, r2, r3
 8003548:	2b02      	cmp	r3, #2
 800354a:	d907      	bls.n	800355c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800354c:	2303      	movs	r3, #3
 800354e:	e150      	b.n	80037f2 <HAL_RCC_OscConfig+0x4e2>
 8003550:	40023800 	.word	0x40023800
 8003554:	42470000 	.word	0x42470000
 8003558:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800355c:	4b88      	ldr	r3, [pc, #544]	; (8003780 <HAL_RCC_OscConfig+0x470>)
 800355e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003560:	f003 0302 	and.w	r3, r3, #2
 8003564:	2b00      	cmp	r3, #0
 8003566:	d1ea      	bne.n	800353e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0304 	and.w	r3, r3, #4
 8003570:	2b00      	cmp	r3, #0
 8003572:	f000 8097 	beq.w	80036a4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003576:	2300      	movs	r3, #0
 8003578:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800357a:	4b81      	ldr	r3, [pc, #516]	; (8003780 <HAL_RCC_OscConfig+0x470>)
 800357c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003582:	2b00      	cmp	r3, #0
 8003584:	d10f      	bne.n	80035a6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003586:	2300      	movs	r3, #0
 8003588:	60bb      	str	r3, [r7, #8]
 800358a:	4b7d      	ldr	r3, [pc, #500]	; (8003780 <HAL_RCC_OscConfig+0x470>)
 800358c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358e:	4a7c      	ldr	r2, [pc, #496]	; (8003780 <HAL_RCC_OscConfig+0x470>)
 8003590:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003594:	6413      	str	r3, [r2, #64]	; 0x40
 8003596:	4b7a      	ldr	r3, [pc, #488]	; (8003780 <HAL_RCC_OscConfig+0x470>)
 8003598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800359e:	60bb      	str	r3, [r7, #8]
 80035a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035a2:	2301      	movs	r3, #1
 80035a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035a6:	4b77      	ldr	r3, [pc, #476]	; (8003784 <HAL_RCC_OscConfig+0x474>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d118      	bne.n	80035e4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035b2:	4b74      	ldr	r3, [pc, #464]	; (8003784 <HAL_RCC_OscConfig+0x474>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a73      	ldr	r2, [pc, #460]	; (8003784 <HAL_RCC_OscConfig+0x474>)
 80035b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035be:	f7fd fafd 	bl	8000bbc <HAL_GetTick>
 80035c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035c4:	e008      	b.n	80035d8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035c6:	f7fd faf9 	bl	8000bbc <HAL_GetTick>
 80035ca:	4602      	mov	r2, r0
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	1ad3      	subs	r3, r2, r3
 80035d0:	2b02      	cmp	r3, #2
 80035d2:	d901      	bls.n	80035d8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80035d4:	2303      	movs	r3, #3
 80035d6:	e10c      	b.n	80037f2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035d8:	4b6a      	ldr	r3, [pc, #424]	; (8003784 <HAL_RCC_OscConfig+0x474>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d0f0      	beq.n	80035c6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d106      	bne.n	80035fa <HAL_RCC_OscConfig+0x2ea>
 80035ec:	4b64      	ldr	r3, [pc, #400]	; (8003780 <HAL_RCC_OscConfig+0x470>)
 80035ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035f0:	4a63      	ldr	r2, [pc, #396]	; (8003780 <HAL_RCC_OscConfig+0x470>)
 80035f2:	f043 0301 	orr.w	r3, r3, #1
 80035f6:	6713      	str	r3, [r2, #112]	; 0x70
 80035f8:	e01c      	b.n	8003634 <HAL_RCC_OscConfig+0x324>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	2b05      	cmp	r3, #5
 8003600:	d10c      	bne.n	800361c <HAL_RCC_OscConfig+0x30c>
 8003602:	4b5f      	ldr	r3, [pc, #380]	; (8003780 <HAL_RCC_OscConfig+0x470>)
 8003604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003606:	4a5e      	ldr	r2, [pc, #376]	; (8003780 <HAL_RCC_OscConfig+0x470>)
 8003608:	f043 0304 	orr.w	r3, r3, #4
 800360c:	6713      	str	r3, [r2, #112]	; 0x70
 800360e:	4b5c      	ldr	r3, [pc, #368]	; (8003780 <HAL_RCC_OscConfig+0x470>)
 8003610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003612:	4a5b      	ldr	r2, [pc, #364]	; (8003780 <HAL_RCC_OscConfig+0x470>)
 8003614:	f043 0301 	orr.w	r3, r3, #1
 8003618:	6713      	str	r3, [r2, #112]	; 0x70
 800361a:	e00b      	b.n	8003634 <HAL_RCC_OscConfig+0x324>
 800361c:	4b58      	ldr	r3, [pc, #352]	; (8003780 <HAL_RCC_OscConfig+0x470>)
 800361e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003620:	4a57      	ldr	r2, [pc, #348]	; (8003780 <HAL_RCC_OscConfig+0x470>)
 8003622:	f023 0301 	bic.w	r3, r3, #1
 8003626:	6713      	str	r3, [r2, #112]	; 0x70
 8003628:	4b55      	ldr	r3, [pc, #340]	; (8003780 <HAL_RCC_OscConfig+0x470>)
 800362a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800362c:	4a54      	ldr	r2, [pc, #336]	; (8003780 <HAL_RCC_OscConfig+0x470>)
 800362e:	f023 0304 	bic.w	r3, r3, #4
 8003632:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d015      	beq.n	8003668 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800363c:	f7fd fabe 	bl	8000bbc <HAL_GetTick>
 8003640:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003642:	e00a      	b.n	800365a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003644:	f7fd faba 	bl	8000bbc <HAL_GetTick>
 8003648:	4602      	mov	r2, r0
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003652:	4293      	cmp	r3, r2
 8003654:	d901      	bls.n	800365a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e0cb      	b.n	80037f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800365a:	4b49      	ldr	r3, [pc, #292]	; (8003780 <HAL_RCC_OscConfig+0x470>)
 800365c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800365e:	f003 0302 	and.w	r3, r3, #2
 8003662:	2b00      	cmp	r3, #0
 8003664:	d0ee      	beq.n	8003644 <HAL_RCC_OscConfig+0x334>
 8003666:	e014      	b.n	8003692 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003668:	f7fd faa8 	bl	8000bbc <HAL_GetTick>
 800366c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800366e:	e00a      	b.n	8003686 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003670:	f7fd faa4 	bl	8000bbc <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	f241 3288 	movw	r2, #5000	; 0x1388
 800367e:	4293      	cmp	r3, r2
 8003680:	d901      	bls.n	8003686 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e0b5      	b.n	80037f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003686:	4b3e      	ldr	r3, [pc, #248]	; (8003780 <HAL_RCC_OscConfig+0x470>)
 8003688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800368a:	f003 0302 	and.w	r3, r3, #2
 800368e:	2b00      	cmp	r3, #0
 8003690:	d1ee      	bne.n	8003670 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003692:	7dfb      	ldrb	r3, [r7, #23]
 8003694:	2b01      	cmp	r3, #1
 8003696:	d105      	bne.n	80036a4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003698:	4b39      	ldr	r3, [pc, #228]	; (8003780 <HAL_RCC_OscConfig+0x470>)
 800369a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369c:	4a38      	ldr	r2, [pc, #224]	; (8003780 <HAL_RCC_OscConfig+0x470>)
 800369e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036a2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	699b      	ldr	r3, [r3, #24]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	f000 80a1 	beq.w	80037f0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80036ae:	4b34      	ldr	r3, [pc, #208]	; (8003780 <HAL_RCC_OscConfig+0x470>)
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	f003 030c 	and.w	r3, r3, #12
 80036b6:	2b08      	cmp	r3, #8
 80036b8:	d05c      	beq.n	8003774 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	699b      	ldr	r3, [r3, #24]
 80036be:	2b02      	cmp	r3, #2
 80036c0:	d141      	bne.n	8003746 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036c2:	4b31      	ldr	r3, [pc, #196]	; (8003788 <HAL_RCC_OscConfig+0x478>)
 80036c4:	2200      	movs	r2, #0
 80036c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036c8:	f7fd fa78 	bl	8000bbc <HAL_GetTick>
 80036cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036ce:	e008      	b.n	80036e2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036d0:	f7fd fa74 	bl	8000bbc <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d901      	bls.n	80036e2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	e087      	b.n	80037f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036e2:	4b27      	ldr	r3, [pc, #156]	; (8003780 <HAL_RCC_OscConfig+0x470>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d1f0      	bne.n	80036d0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	69da      	ldr	r2, [r3, #28]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6a1b      	ldr	r3, [r3, #32]
 80036f6:	431a      	orrs	r2, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fc:	019b      	lsls	r3, r3, #6
 80036fe:	431a      	orrs	r2, r3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003704:	085b      	lsrs	r3, r3, #1
 8003706:	3b01      	subs	r3, #1
 8003708:	041b      	lsls	r3, r3, #16
 800370a:	431a      	orrs	r2, r3
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003710:	061b      	lsls	r3, r3, #24
 8003712:	491b      	ldr	r1, [pc, #108]	; (8003780 <HAL_RCC_OscConfig+0x470>)
 8003714:	4313      	orrs	r3, r2
 8003716:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003718:	4b1b      	ldr	r3, [pc, #108]	; (8003788 <HAL_RCC_OscConfig+0x478>)
 800371a:	2201      	movs	r2, #1
 800371c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800371e:	f7fd fa4d 	bl	8000bbc <HAL_GetTick>
 8003722:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003724:	e008      	b.n	8003738 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003726:	f7fd fa49 	bl	8000bbc <HAL_GetTick>
 800372a:	4602      	mov	r2, r0
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	1ad3      	subs	r3, r2, r3
 8003730:	2b02      	cmp	r3, #2
 8003732:	d901      	bls.n	8003738 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003734:	2303      	movs	r3, #3
 8003736:	e05c      	b.n	80037f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003738:	4b11      	ldr	r3, [pc, #68]	; (8003780 <HAL_RCC_OscConfig+0x470>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003740:	2b00      	cmp	r3, #0
 8003742:	d0f0      	beq.n	8003726 <HAL_RCC_OscConfig+0x416>
 8003744:	e054      	b.n	80037f0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003746:	4b10      	ldr	r3, [pc, #64]	; (8003788 <HAL_RCC_OscConfig+0x478>)
 8003748:	2200      	movs	r2, #0
 800374a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800374c:	f7fd fa36 	bl	8000bbc <HAL_GetTick>
 8003750:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003752:	e008      	b.n	8003766 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003754:	f7fd fa32 	bl	8000bbc <HAL_GetTick>
 8003758:	4602      	mov	r2, r0
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	2b02      	cmp	r3, #2
 8003760:	d901      	bls.n	8003766 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003762:	2303      	movs	r3, #3
 8003764:	e045      	b.n	80037f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003766:	4b06      	ldr	r3, [pc, #24]	; (8003780 <HAL_RCC_OscConfig+0x470>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d1f0      	bne.n	8003754 <HAL_RCC_OscConfig+0x444>
 8003772:	e03d      	b.n	80037f0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	699b      	ldr	r3, [r3, #24]
 8003778:	2b01      	cmp	r3, #1
 800377a:	d107      	bne.n	800378c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e038      	b.n	80037f2 <HAL_RCC_OscConfig+0x4e2>
 8003780:	40023800 	.word	0x40023800
 8003784:	40007000 	.word	0x40007000
 8003788:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800378c:	4b1b      	ldr	r3, [pc, #108]	; (80037fc <HAL_RCC_OscConfig+0x4ec>)
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	699b      	ldr	r3, [r3, #24]
 8003796:	2b01      	cmp	r3, #1
 8003798:	d028      	beq.n	80037ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d121      	bne.n	80037ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d11a      	bne.n	80037ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037b6:	68fa      	ldr	r2, [r7, #12]
 80037b8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80037bc:	4013      	ands	r3, r2
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80037c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d111      	bne.n	80037ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037d2:	085b      	lsrs	r3, r3, #1
 80037d4:	3b01      	subs	r3, #1
 80037d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037d8:	429a      	cmp	r2, r3
 80037da:	d107      	bne.n	80037ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d001      	beq.n	80037f0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e000      	b.n	80037f2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80037f0:	2300      	movs	r3, #0
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3718      	adds	r7, #24
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	bf00      	nop
 80037fc:	40023800 	.word	0x40023800

08003800 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d101      	bne.n	8003814 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	e0cc      	b.n	80039ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003814:	4b68      	ldr	r3, [pc, #416]	; (80039b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 0307 	and.w	r3, r3, #7
 800381c:	683a      	ldr	r2, [r7, #0]
 800381e:	429a      	cmp	r2, r3
 8003820:	d90c      	bls.n	800383c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003822:	4b65      	ldr	r3, [pc, #404]	; (80039b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003824:	683a      	ldr	r2, [r7, #0]
 8003826:	b2d2      	uxtb	r2, r2
 8003828:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800382a:	4b63      	ldr	r3, [pc, #396]	; (80039b8 <HAL_RCC_ClockConfig+0x1b8>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0307 	and.w	r3, r3, #7
 8003832:	683a      	ldr	r2, [r7, #0]
 8003834:	429a      	cmp	r2, r3
 8003836:	d001      	beq.n	800383c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e0b8      	b.n	80039ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 0302 	and.w	r3, r3, #2
 8003844:	2b00      	cmp	r3, #0
 8003846:	d020      	beq.n	800388a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 0304 	and.w	r3, r3, #4
 8003850:	2b00      	cmp	r3, #0
 8003852:	d005      	beq.n	8003860 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003854:	4b59      	ldr	r3, [pc, #356]	; (80039bc <HAL_RCC_ClockConfig+0x1bc>)
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	4a58      	ldr	r2, [pc, #352]	; (80039bc <HAL_RCC_ClockConfig+0x1bc>)
 800385a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800385e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0308 	and.w	r3, r3, #8
 8003868:	2b00      	cmp	r3, #0
 800386a:	d005      	beq.n	8003878 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800386c:	4b53      	ldr	r3, [pc, #332]	; (80039bc <HAL_RCC_ClockConfig+0x1bc>)
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	4a52      	ldr	r2, [pc, #328]	; (80039bc <HAL_RCC_ClockConfig+0x1bc>)
 8003872:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003876:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003878:	4b50      	ldr	r3, [pc, #320]	; (80039bc <HAL_RCC_ClockConfig+0x1bc>)
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	494d      	ldr	r1, [pc, #308]	; (80039bc <HAL_RCC_ClockConfig+0x1bc>)
 8003886:	4313      	orrs	r3, r2
 8003888:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0301 	and.w	r3, r3, #1
 8003892:	2b00      	cmp	r3, #0
 8003894:	d044      	beq.n	8003920 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	2b01      	cmp	r3, #1
 800389c:	d107      	bne.n	80038ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800389e:	4b47      	ldr	r3, [pc, #284]	; (80039bc <HAL_RCC_ClockConfig+0x1bc>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d119      	bne.n	80038de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e07f      	b.n	80039ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	d003      	beq.n	80038be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038ba:	2b03      	cmp	r3, #3
 80038bc:	d107      	bne.n	80038ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038be:	4b3f      	ldr	r3, [pc, #252]	; (80039bc <HAL_RCC_ClockConfig+0x1bc>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d109      	bne.n	80038de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e06f      	b.n	80039ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038ce:	4b3b      	ldr	r3, [pc, #236]	; (80039bc <HAL_RCC_ClockConfig+0x1bc>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0302 	and.w	r3, r3, #2
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d101      	bne.n	80038de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e067      	b.n	80039ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038de:	4b37      	ldr	r3, [pc, #220]	; (80039bc <HAL_RCC_ClockConfig+0x1bc>)
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	f023 0203 	bic.w	r2, r3, #3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	4934      	ldr	r1, [pc, #208]	; (80039bc <HAL_RCC_ClockConfig+0x1bc>)
 80038ec:	4313      	orrs	r3, r2
 80038ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038f0:	f7fd f964 	bl	8000bbc <HAL_GetTick>
 80038f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038f6:	e00a      	b.n	800390e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038f8:	f7fd f960 	bl	8000bbc <HAL_GetTick>
 80038fc:	4602      	mov	r2, r0
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	f241 3288 	movw	r2, #5000	; 0x1388
 8003906:	4293      	cmp	r3, r2
 8003908:	d901      	bls.n	800390e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800390a:	2303      	movs	r3, #3
 800390c:	e04f      	b.n	80039ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800390e:	4b2b      	ldr	r3, [pc, #172]	; (80039bc <HAL_RCC_ClockConfig+0x1bc>)
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	f003 020c 	and.w	r2, r3, #12
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	429a      	cmp	r2, r3
 800391e:	d1eb      	bne.n	80038f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003920:	4b25      	ldr	r3, [pc, #148]	; (80039b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 0307 	and.w	r3, r3, #7
 8003928:	683a      	ldr	r2, [r7, #0]
 800392a:	429a      	cmp	r2, r3
 800392c:	d20c      	bcs.n	8003948 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800392e:	4b22      	ldr	r3, [pc, #136]	; (80039b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003930:	683a      	ldr	r2, [r7, #0]
 8003932:	b2d2      	uxtb	r2, r2
 8003934:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003936:	4b20      	ldr	r3, [pc, #128]	; (80039b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0307 	and.w	r3, r3, #7
 800393e:	683a      	ldr	r2, [r7, #0]
 8003940:	429a      	cmp	r2, r3
 8003942:	d001      	beq.n	8003948 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e032      	b.n	80039ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0304 	and.w	r3, r3, #4
 8003950:	2b00      	cmp	r3, #0
 8003952:	d008      	beq.n	8003966 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003954:	4b19      	ldr	r3, [pc, #100]	; (80039bc <HAL_RCC_ClockConfig+0x1bc>)
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	4916      	ldr	r1, [pc, #88]	; (80039bc <HAL_RCC_ClockConfig+0x1bc>)
 8003962:	4313      	orrs	r3, r2
 8003964:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0308 	and.w	r3, r3, #8
 800396e:	2b00      	cmp	r3, #0
 8003970:	d009      	beq.n	8003986 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003972:	4b12      	ldr	r3, [pc, #72]	; (80039bc <HAL_RCC_ClockConfig+0x1bc>)
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	691b      	ldr	r3, [r3, #16]
 800397e:	00db      	lsls	r3, r3, #3
 8003980:	490e      	ldr	r1, [pc, #56]	; (80039bc <HAL_RCC_ClockConfig+0x1bc>)
 8003982:	4313      	orrs	r3, r2
 8003984:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003986:	f000 f821 	bl	80039cc <HAL_RCC_GetSysClockFreq>
 800398a:	4602      	mov	r2, r0
 800398c:	4b0b      	ldr	r3, [pc, #44]	; (80039bc <HAL_RCC_ClockConfig+0x1bc>)
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	091b      	lsrs	r3, r3, #4
 8003992:	f003 030f 	and.w	r3, r3, #15
 8003996:	490a      	ldr	r1, [pc, #40]	; (80039c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003998:	5ccb      	ldrb	r3, [r1, r3]
 800399a:	fa22 f303 	lsr.w	r3, r2, r3
 800399e:	4a09      	ldr	r2, [pc, #36]	; (80039c4 <HAL_RCC_ClockConfig+0x1c4>)
 80039a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80039a2:	4b09      	ldr	r3, [pc, #36]	; (80039c8 <HAL_RCC_ClockConfig+0x1c8>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4618      	mov	r0, r3
 80039a8:	f7fc ff40 	bl	800082c <HAL_InitTick>

  return HAL_OK;
 80039ac:	2300      	movs	r3, #0
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3710      	adds	r7, #16
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	40023c00 	.word	0x40023c00
 80039bc:	40023800 	.word	0x40023800
 80039c0:	0801ca70 	.word	0x0801ca70
 80039c4:	20000000 	.word	0x20000000
 80039c8:	20000004 	.word	0x20000004

080039cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039d0:	b094      	sub	sp, #80	; 0x50
 80039d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80039d4:	2300      	movs	r3, #0
 80039d6:	647b      	str	r3, [r7, #68]	; 0x44
 80039d8:	2300      	movs	r3, #0
 80039da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039dc:	2300      	movs	r3, #0
 80039de:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80039e0:	2300      	movs	r3, #0
 80039e2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039e4:	4b79      	ldr	r3, [pc, #484]	; (8003bcc <HAL_RCC_GetSysClockFreq+0x200>)
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	f003 030c 	and.w	r3, r3, #12
 80039ec:	2b08      	cmp	r3, #8
 80039ee:	d00d      	beq.n	8003a0c <HAL_RCC_GetSysClockFreq+0x40>
 80039f0:	2b08      	cmp	r3, #8
 80039f2:	f200 80e1 	bhi.w	8003bb8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d002      	beq.n	8003a00 <HAL_RCC_GetSysClockFreq+0x34>
 80039fa:	2b04      	cmp	r3, #4
 80039fc:	d003      	beq.n	8003a06 <HAL_RCC_GetSysClockFreq+0x3a>
 80039fe:	e0db      	b.n	8003bb8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a00:	4b73      	ldr	r3, [pc, #460]	; (8003bd0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003a02:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003a04:	e0db      	b.n	8003bbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a06:	4b73      	ldr	r3, [pc, #460]	; (8003bd4 <HAL_RCC_GetSysClockFreq+0x208>)
 8003a08:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a0a:	e0d8      	b.n	8003bbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a0c:	4b6f      	ldr	r3, [pc, #444]	; (8003bcc <HAL_RCC_GetSysClockFreq+0x200>)
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a14:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a16:	4b6d      	ldr	r3, [pc, #436]	; (8003bcc <HAL_RCC_GetSysClockFreq+0x200>)
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d063      	beq.n	8003aea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a22:	4b6a      	ldr	r3, [pc, #424]	; (8003bcc <HAL_RCC_GetSysClockFreq+0x200>)
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	099b      	lsrs	r3, r3, #6
 8003a28:	2200      	movs	r2, #0
 8003a2a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a2c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a34:	633b      	str	r3, [r7, #48]	; 0x30
 8003a36:	2300      	movs	r3, #0
 8003a38:	637b      	str	r3, [r7, #52]	; 0x34
 8003a3a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003a3e:	4622      	mov	r2, r4
 8003a40:	462b      	mov	r3, r5
 8003a42:	f04f 0000 	mov.w	r0, #0
 8003a46:	f04f 0100 	mov.w	r1, #0
 8003a4a:	0159      	lsls	r1, r3, #5
 8003a4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a50:	0150      	lsls	r0, r2, #5
 8003a52:	4602      	mov	r2, r0
 8003a54:	460b      	mov	r3, r1
 8003a56:	4621      	mov	r1, r4
 8003a58:	1a51      	subs	r1, r2, r1
 8003a5a:	6139      	str	r1, [r7, #16]
 8003a5c:	4629      	mov	r1, r5
 8003a5e:	eb63 0301 	sbc.w	r3, r3, r1
 8003a62:	617b      	str	r3, [r7, #20]
 8003a64:	f04f 0200 	mov.w	r2, #0
 8003a68:	f04f 0300 	mov.w	r3, #0
 8003a6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a70:	4659      	mov	r1, fp
 8003a72:	018b      	lsls	r3, r1, #6
 8003a74:	4651      	mov	r1, sl
 8003a76:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a7a:	4651      	mov	r1, sl
 8003a7c:	018a      	lsls	r2, r1, #6
 8003a7e:	4651      	mov	r1, sl
 8003a80:	ebb2 0801 	subs.w	r8, r2, r1
 8003a84:	4659      	mov	r1, fp
 8003a86:	eb63 0901 	sbc.w	r9, r3, r1
 8003a8a:	f04f 0200 	mov.w	r2, #0
 8003a8e:	f04f 0300 	mov.w	r3, #0
 8003a92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a9e:	4690      	mov	r8, r2
 8003aa0:	4699      	mov	r9, r3
 8003aa2:	4623      	mov	r3, r4
 8003aa4:	eb18 0303 	adds.w	r3, r8, r3
 8003aa8:	60bb      	str	r3, [r7, #8]
 8003aaa:	462b      	mov	r3, r5
 8003aac:	eb49 0303 	adc.w	r3, r9, r3
 8003ab0:	60fb      	str	r3, [r7, #12]
 8003ab2:	f04f 0200 	mov.w	r2, #0
 8003ab6:	f04f 0300 	mov.w	r3, #0
 8003aba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003abe:	4629      	mov	r1, r5
 8003ac0:	024b      	lsls	r3, r1, #9
 8003ac2:	4621      	mov	r1, r4
 8003ac4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003ac8:	4621      	mov	r1, r4
 8003aca:	024a      	lsls	r2, r1, #9
 8003acc:	4610      	mov	r0, r2
 8003ace:	4619      	mov	r1, r3
 8003ad0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ad6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ad8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003adc:	f7fc fbc8 	bl	8000270 <__aeabi_uldivmod>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	460b      	mov	r3, r1
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ae8:	e058      	b.n	8003b9c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003aea:	4b38      	ldr	r3, [pc, #224]	; (8003bcc <HAL_RCC_GetSysClockFreq+0x200>)
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	099b      	lsrs	r3, r3, #6
 8003af0:	2200      	movs	r2, #0
 8003af2:	4618      	mov	r0, r3
 8003af4:	4611      	mov	r1, r2
 8003af6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003afa:	623b      	str	r3, [r7, #32]
 8003afc:	2300      	movs	r3, #0
 8003afe:	627b      	str	r3, [r7, #36]	; 0x24
 8003b00:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003b04:	4642      	mov	r2, r8
 8003b06:	464b      	mov	r3, r9
 8003b08:	f04f 0000 	mov.w	r0, #0
 8003b0c:	f04f 0100 	mov.w	r1, #0
 8003b10:	0159      	lsls	r1, r3, #5
 8003b12:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b16:	0150      	lsls	r0, r2, #5
 8003b18:	4602      	mov	r2, r0
 8003b1a:	460b      	mov	r3, r1
 8003b1c:	4641      	mov	r1, r8
 8003b1e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003b22:	4649      	mov	r1, r9
 8003b24:	eb63 0b01 	sbc.w	fp, r3, r1
 8003b28:	f04f 0200 	mov.w	r2, #0
 8003b2c:	f04f 0300 	mov.w	r3, #0
 8003b30:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003b34:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003b38:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003b3c:	ebb2 040a 	subs.w	r4, r2, sl
 8003b40:	eb63 050b 	sbc.w	r5, r3, fp
 8003b44:	f04f 0200 	mov.w	r2, #0
 8003b48:	f04f 0300 	mov.w	r3, #0
 8003b4c:	00eb      	lsls	r3, r5, #3
 8003b4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b52:	00e2      	lsls	r2, r4, #3
 8003b54:	4614      	mov	r4, r2
 8003b56:	461d      	mov	r5, r3
 8003b58:	4643      	mov	r3, r8
 8003b5a:	18e3      	adds	r3, r4, r3
 8003b5c:	603b      	str	r3, [r7, #0]
 8003b5e:	464b      	mov	r3, r9
 8003b60:	eb45 0303 	adc.w	r3, r5, r3
 8003b64:	607b      	str	r3, [r7, #4]
 8003b66:	f04f 0200 	mov.w	r2, #0
 8003b6a:	f04f 0300 	mov.w	r3, #0
 8003b6e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b72:	4629      	mov	r1, r5
 8003b74:	028b      	lsls	r3, r1, #10
 8003b76:	4621      	mov	r1, r4
 8003b78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b7c:	4621      	mov	r1, r4
 8003b7e:	028a      	lsls	r2, r1, #10
 8003b80:	4610      	mov	r0, r2
 8003b82:	4619      	mov	r1, r3
 8003b84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b86:	2200      	movs	r2, #0
 8003b88:	61bb      	str	r3, [r7, #24]
 8003b8a:	61fa      	str	r2, [r7, #28]
 8003b8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b90:	f7fc fb6e 	bl	8000270 <__aeabi_uldivmod>
 8003b94:	4602      	mov	r2, r0
 8003b96:	460b      	mov	r3, r1
 8003b98:	4613      	mov	r3, r2
 8003b9a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b9c:	4b0b      	ldr	r3, [pc, #44]	; (8003bcc <HAL_RCC_GetSysClockFreq+0x200>)
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	0c1b      	lsrs	r3, r3, #16
 8003ba2:	f003 0303 	and.w	r3, r3, #3
 8003ba6:	3301      	adds	r3, #1
 8003ba8:	005b      	lsls	r3, r3, #1
 8003baa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003bac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003bae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bb4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003bb6:	e002      	b.n	8003bbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003bb8:	4b05      	ldr	r3, [pc, #20]	; (8003bd0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003bba:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003bbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003bbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3750      	adds	r7, #80	; 0x50
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003bca:	bf00      	nop
 8003bcc:	40023800 	.word	0x40023800
 8003bd0:	00f42400 	.word	0x00f42400
 8003bd4:	007a1200 	.word	0x007a1200

08003bd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bdc:	4b03      	ldr	r3, [pc, #12]	; (8003bec <HAL_RCC_GetHCLKFreq+0x14>)
 8003bde:	681b      	ldr	r3, [r3, #0]
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr
 8003bea:	bf00      	nop
 8003bec:	20000000 	.word	0x20000000

08003bf0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003bf4:	f7ff fff0 	bl	8003bd8 <HAL_RCC_GetHCLKFreq>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	4b05      	ldr	r3, [pc, #20]	; (8003c10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	0b5b      	lsrs	r3, r3, #13
 8003c00:	f003 0307 	and.w	r3, r3, #7
 8003c04:	4903      	ldr	r1, [pc, #12]	; (8003c14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c06:	5ccb      	ldrb	r3, [r1, r3]
 8003c08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	bd80      	pop	{r7, pc}
 8003c10:	40023800 	.word	0x40023800
 8003c14:	0801ca80 	.word	0x0801ca80

08003c18 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b083      	sub	sp, #12
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
 8003c20:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	220f      	movs	r2, #15
 8003c26:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003c28:	4b12      	ldr	r3, [pc, #72]	; (8003c74 <HAL_RCC_GetClockConfig+0x5c>)
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	f003 0203 	and.w	r2, r3, #3
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003c34:	4b0f      	ldr	r3, [pc, #60]	; (8003c74 <HAL_RCC_GetClockConfig+0x5c>)
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003c40:	4b0c      	ldr	r3, [pc, #48]	; (8003c74 <HAL_RCC_GetClockConfig+0x5c>)
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003c4c:	4b09      	ldr	r3, [pc, #36]	; (8003c74 <HAL_RCC_GetClockConfig+0x5c>)
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	08db      	lsrs	r3, r3, #3
 8003c52:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003c5a:	4b07      	ldr	r3, [pc, #28]	; (8003c78 <HAL_RCC_GetClockConfig+0x60>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 0207 	and.w	r2, r3, #7
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	601a      	str	r2, [r3, #0]
}
 8003c66:	bf00      	nop
 8003c68:	370c      	adds	r7, #12
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr
 8003c72:	bf00      	nop
 8003c74:	40023800 	.word	0x40023800
 8003c78:	40023c00 	.word	0x40023c00

08003c7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b082      	sub	sp, #8
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d101      	bne.n	8003c8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e041      	b.n	8003d12 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d106      	bne.n	8003ca8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f000 f839 	bl	8003d1a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2202      	movs	r2, #2
 8003cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	3304      	adds	r3, #4
 8003cb8:	4619      	mov	r1, r3
 8003cba:	4610      	mov	r0, r2
 8003cbc:	f000 f9d8 	bl	8004070 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2201      	movs	r2, #1
 8003d04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d10:	2300      	movs	r3, #0
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3708      	adds	r7, #8
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}

08003d1a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003d1a:	b480      	push	{r7}
 8003d1c:	b083      	sub	sp, #12
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003d22:	bf00      	nop
 8003d24:	370c      	adds	r7, #12
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr
	...

08003d30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b085      	sub	sp, #20
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d001      	beq.n	8003d48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	e04e      	b.n	8003de6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2202      	movs	r2, #2
 8003d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	68da      	ldr	r2, [r3, #12]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f042 0201 	orr.w	r2, r2, #1
 8003d5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a23      	ldr	r2, [pc, #140]	; (8003df4 <HAL_TIM_Base_Start_IT+0xc4>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d022      	beq.n	8003db0 <HAL_TIM_Base_Start_IT+0x80>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d72:	d01d      	beq.n	8003db0 <HAL_TIM_Base_Start_IT+0x80>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a1f      	ldr	r2, [pc, #124]	; (8003df8 <HAL_TIM_Base_Start_IT+0xc8>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d018      	beq.n	8003db0 <HAL_TIM_Base_Start_IT+0x80>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a1e      	ldr	r2, [pc, #120]	; (8003dfc <HAL_TIM_Base_Start_IT+0xcc>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d013      	beq.n	8003db0 <HAL_TIM_Base_Start_IT+0x80>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a1c      	ldr	r2, [pc, #112]	; (8003e00 <HAL_TIM_Base_Start_IT+0xd0>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d00e      	beq.n	8003db0 <HAL_TIM_Base_Start_IT+0x80>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a1b      	ldr	r2, [pc, #108]	; (8003e04 <HAL_TIM_Base_Start_IT+0xd4>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d009      	beq.n	8003db0 <HAL_TIM_Base_Start_IT+0x80>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a19      	ldr	r2, [pc, #100]	; (8003e08 <HAL_TIM_Base_Start_IT+0xd8>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d004      	beq.n	8003db0 <HAL_TIM_Base_Start_IT+0x80>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a18      	ldr	r2, [pc, #96]	; (8003e0c <HAL_TIM_Base_Start_IT+0xdc>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d111      	bne.n	8003dd4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	f003 0307 	and.w	r3, r3, #7
 8003dba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2b06      	cmp	r3, #6
 8003dc0:	d010      	beq.n	8003de4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f042 0201 	orr.w	r2, r2, #1
 8003dd0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dd2:	e007      	b.n	8003de4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f042 0201 	orr.w	r2, r2, #1
 8003de2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003de4:	2300      	movs	r3, #0
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3714      	adds	r7, #20
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr
 8003df2:	bf00      	nop
 8003df4:	40010000 	.word	0x40010000
 8003df8:	40000400 	.word	0x40000400
 8003dfc:	40000800 	.word	0x40000800
 8003e00:	40000c00 	.word	0x40000c00
 8003e04:	40010400 	.word	0x40010400
 8003e08:	40014000 	.word	0x40014000
 8003e0c:	40001800 	.word	0x40001800

08003e10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b082      	sub	sp, #8
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	691b      	ldr	r3, [r3, #16]
 8003e1e:	f003 0302 	and.w	r3, r3, #2
 8003e22:	2b02      	cmp	r3, #2
 8003e24:	d122      	bne.n	8003e6c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	f003 0302 	and.w	r3, r3, #2
 8003e30:	2b02      	cmp	r3, #2
 8003e32:	d11b      	bne.n	8003e6c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f06f 0202 	mvn.w	r2, #2
 8003e3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2201      	movs	r2, #1
 8003e42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	699b      	ldr	r3, [r3, #24]
 8003e4a:	f003 0303 	and.w	r3, r3, #3
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d003      	beq.n	8003e5a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f000 f8ee 	bl	8004034 <HAL_TIM_IC_CaptureCallback>
 8003e58:	e005      	b.n	8003e66 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f000 f8e0 	bl	8004020 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f000 f8f1 	bl	8004048 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	691b      	ldr	r3, [r3, #16]
 8003e72:	f003 0304 	and.w	r3, r3, #4
 8003e76:	2b04      	cmp	r3, #4
 8003e78:	d122      	bne.n	8003ec0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	f003 0304 	and.w	r3, r3, #4
 8003e84:	2b04      	cmp	r3, #4
 8003e86:	d11b      	bne.n	8003ec0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f06f 0204 	mvn.w	r2, #4
 8003e90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2202      	movs	r2, #2
 8003e96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	699b      	ldr	r3, [r3, #24]
 8003e9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d003      	beq.n	8003eae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f000 f8c4 	bl	8004034 <HAL_TIM_IC_CaptureCallback>
 8003eac:	e005      	b.n	8003eba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f000 f8b6 	bl	8004020 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	f000 f8c7 	bl	8004048 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	691b      	ldr	r3, [r3, #16]
 8003ec6:	f003 0308 	and.w	r3, r3, #8
 8003eca:	2b08      	cmp	r3, #8
 8003ecc:	d122      	bne.n	8003f14 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	f003 0308 	and.w	r3, r3, #8
 8003ed8:	2b08      	cmp	r3, #8
 8003eda:	d11b      	bne.n	8003f14 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f06f 0208 	mvn.w	r2, #8
 8003ee4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2204      	movs	r2, #4
 8003eea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	69db      	ldr	r3, [r3, #28]
 8003ef2:	f003 0303 	and.w	r3, r3, #3
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d003      	beq.n	8003f02 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f000 f89a 	bl	8004034 <HAL_TIM_IC_CaptureCallback>
 8003f00:	e005      	b.n	8003f0e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f000 f88c 	bl	8004020 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	f000 f89d 	bl	8004048 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2200      	movs	r2, #0
 8003f12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	691b      	ldr	r3, [r3, #16]
 8003f1a:	f003 0310 	and.w	r3, r3, #16
 8003f1e:	2b10      	cmp	r3, #16
 8003f20:	d122      	bne.n	8003f68 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	f003 0310 	and.w	r3, r3, #16
 8003f2c:	2b10      	cmp	r3, #16
 8003f2e:	d11b      	bne.n	8003f68 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f06f 0210 	mvn.w	r2, #16
 8003f38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2208      	movs	r2, #8
 8003f3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	69db      	ldr	r3, [r3, #28]
 8003f46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d003      	beq.n	8003f56 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f000 f870 	bl	8004034 <HAL_TIM_IC_CaptureCallback>
 8003f54:	e005      	b.n	8003f62 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f000 f862 	bl	8004020 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f000 f873 	bl	8004048 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	691b      	ldr	r3, [r3, #16]
 8003f6e:	f003 0301 	and.w	r3, r3, #1
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d10e      	bne.n	8003f94 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	f003 0301 	and.w	r3, r3, #1
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d107      	bne.n	8003f94 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f06f 0201 	mvn.w	r2, #1
 8003f8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f7fc fc08 	bl	80007a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	691b      	ldr	r3, [r3, #16]
 8003f9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f9e:	2b80      	cmp	r3, #128	; 0x80
 8003fa0:	d10e      	bne.n	8003fc0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fac:	2b80      	cmp	r3, #128	; 0x80
 8003fae:	d107      	bne.n	8003fc0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003fb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f000 f902 	bl	80041c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	691b      	ldr	r3, [r3, #16]
 8003fc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fca:	2b40      	cmp	r3, #64	; 0x40
 8003fcc:	d10e      	bne.n	8003fec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fd8:	2b40      	cmp	r3, #64	; 0x40
 8003fda:	d107      	bne.n	8003fec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003fe4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f000 f838 	bl	800405c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	691b      	ldr	r3, [r3, #16]
 8003ff2:	f003 0320 	and.w	r3, r3, #32
 8003ff6:	2b20      	cmp	r3, #32
 8003ff8:	d10e      	bne.n	8004018 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	f003 0320 	and.w	r3, r3, #32
 8004004:	2b20      	cmp	r3, #32
 8004006:	d107      	bne.n	8004018 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f06f 0220 	mvn.w	r2, #32
 8004010:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f000 f8cc 	bl	80041b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004018:	bf00      	nop
 800401a:	3708      	adds	r7, #8
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}

08004020 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004028:	bf00      	nop
 800402a:	370c      	adds	r7, #12
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr

08004034 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004034:	b480      	push	{r7}
 8004036:	b083      	sub	sp, #12
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800403c:	bf00      	nop
 800403e:	370c      	adds	r7, #12
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr

08004048 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004048:	b480      	push	{r7}
 800404a:	b083      	sub	sp, #12
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004050:	bf00      	nop
 8004052:	370c      	adds	r7, #12
 8004054:	46bd      	mov	sp, r7
 8004056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405a:	4770      	bx	lr

0800405c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800405c:	b480      	push	{r7}
 800405e:	b083      	sub	sp, #12
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004064:	bf00      	nop
 8004066:	370c      	adds	r7, #12
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr

08004070 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004070:	b480      	push	{r7}
 8004072:	b085      	sub	sp, #20
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	4a40      	ldr	r2, [pc, #256]	; (8004184 <TIM_Base_SetConfig+0x114>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d013      	beq.n	80040b0 <TIM_Base_SetConfig+0x40>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800408e:	d00f      	beq.n	80040b0 <TIM_Base_SetConfig+0x40>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	4a3d      	ldr	r2, [pc, #244]	; (8004188 <TIM_Base_SetConfig+0x118>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d00b      	beq.n	80040b0 <TIM_Base_SetConfig+0x40>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	4a3c      	ldr	r2, [pc, #240]	; (800418c <TIM_Base_SetConfig+0x11c>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d007      	beq.n	80040b0 <TIM_Base_SetConfig+0x40>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	4a3b      	ldr	r2, [pc, #236]	; (8004190 <TIM_Base_SetConfig+0x120>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d003      	beq.n	80040b0 <TIM_Base_SetConfig+0x40>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	4a3a      	ldr	r2, [pc, #232]	; (8004194 <TIM_Base_SetConfig+0x124>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d108      	bne.n	80040c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	68fa      	ldr	r2, [r7, #12]
 80040be:	4313      	orrs	r3, r2
 80040c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4a2f      	ldr	r2, [pc, #188]	; (8004184 <TIM_Base_SetConfig+0x114>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d02b      	beq.n	8004122 <TIM_Base_SetConfig+0xb2>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040d0:	d027      	beq.n	8004122 <TIM_Base_SetConfig+0xb2>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	4a2c      	ldr	r2, [pc, #176]	; (8004188 <TIM_Base_SetConfig+0x118>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d023      	beq.n	8004122 <TIM_Base_SetConfig+0xb2>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	4a2b      	ldr	r2, [pc, #172]	; (800418c <TIM_Base_SetConfig+0x11c>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d01f      	beq.n	8004122 <TIM_Base_SetConfig+0xb2>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	4a2a      	ldr	r2, [pc, #168]	; (8004190 <TIM_Base_SetConfig+0x120>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d01b      	beq.n	8004122 <TIM_Base_SetConfig+0xb2>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	4a29      	ldr	r2, [pc, #164]	; (8004194 <TIM_Base_SetConfig+0x124>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d017      	beq.n	8004122 <TIM_Base_SetConfig+0xb2>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	4a28      	ldr	r2, [pc, #160]	; (8004198 <TIM_Base_SetConfig+0x128>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d013      	beq.n	8004122 <TIM_Base_SetConfig+0xb2>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	4a27      	ldr	r2, [pc, #156]	; (800419c <TIM_Base_SetConfig+0x12c>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d00f      	beq.n	8004122 <TIM_Base_SetConfig+0xb2>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	4a26      	ldr	r2, [pc, #152]	; (80041a0 <TIM_Base_SetConfig+0x130>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d00b      	beq.n	8004122 <TIM_Base_SetConfig+0xb2>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	4a25      	ldr	r2, [pc, #148]	; (80041a4 <TIM_Base_SetConfig+0x134>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d007      	beq.n	8004122 <TIM_Base_SetConfig+0xb2>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	4a24      	ldr	r2, [pc, #144]	; (80041a8 <TIM_Base_SetConfig+0x138>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d003      	beq.n	8004122 <TIM_Base_SetConfig+0xb2>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	4a23      	ldr	r2, [pc, #140]	; (80041ac <TIM_Base_SetConfig+0x13c>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d108      	bne.n	8004134 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004128:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	68db      	ldr	r3, [r3, #12]
 800412e:	68fa      	ldr	r2, [r7, #12]
 8004130:	4313      	orrs	r3, r2
 8004132:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	695b      	ldr	r3, [r3, #20]
 800413e:	4313      	orrs	r3, r2
 8004140:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	68fa      	ldr	r2, [r7, #12]
 8004146:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	689a      	ldr	r2, [r3, #8]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	4a0a      	ldr	r2, [pc, #40]	; (8004184 <TIM_Base_SetConfig+0x114>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d003      	beq.n	8004168 <TIM_Base_SetConfig+0xf8>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	4a0c      	ldr	r2, [pc, #48]	; (8004194 <TIM_Base_SetConfig+0x124>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d103      	bne.n	8004170 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	691a      	ldr	r2, [r3, #16]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2201      	movs	r2, #1
 8004174:	615a      	str	r2, [r3, #20]
}
 8004176:	bf00      	nop
 8004178:	3714      	adds	r7, #20
 800417a:	46bd      	mov	sp, r7
 800417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004180:	4770      	bx	lr
 8004182:	bf00      	nop
 8004184:	40010000 	.word	0x40010000
 8004188:	40000400 	.word	0x40000400
 800418c:	40000800 	.word	0x40000800
 8004190:	40000c00 	.word	0x40000c00
 8004194:	40010400 	.word	0x40010400
 8004198:	40014000 	.word	0x40014000
 800419c:	40014400 	.word	0x40014400
 80041a0:	40014800 	.word	0x40014800
 80041a4:	40001800 	.word	0x40001800
 80041a8:	40001c00 	.word	0x40001c00
 80041ac:	40002000 	.word	0x40002000

080041b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80041b8:	bf00      	nop
 80041ba:	370c      	adds	r7, #12
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr

080041c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b083      	sub	sp, #12
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80041cc:	bf00      	nop
 80041ce:	370c      	adds	r7, #12
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr

080041d8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80041d8:	b084      	sub	sp, #16
 80041da:	b580      	push	{r7, lr}
 80041dc:	b084      	sub	sp, #16
 80041de:	af00      	add	r7, sp, #0
 80041e0:	6078      	str	r0, [r7, #4]
 80041e2:	f107 001c 	add.w	r0, r7, #28
 80041e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80041ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d122      	bne.n	8004236 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004204:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004208:	687a      	ldr	r2, [r7, #4]
 800420a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004218:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800421a:	2b01      	cmp	r3, #1
 800421c:	d105      	bne.n	800422a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f001 fbee 	bl	8005a0c <USB_CoreReset>
 8004230:	4603      	mov	r3, r0
 8004232:	73fb      	strb	r3, [r7, #15]
 8004234:	e01a      	b.n	800426c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	68db      	ldr	r3, [r3, #12]
 800423a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f001 fbe2 	bl	8005a0c <USB_CoreReset>
 8004248:	4603      	mov	r3, r0
 800424a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800424c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800424e:	2b00      	cmp	r3, #0
 8004250:	d106      	bne.n	8004260 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004256:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	639a      	str	r2, [r3, #56]	; 0x38
 800425e:	e005      	b.n	800426c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004264:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800426c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800426e:	2b01      	cmp	r3, #1
 8004270:	d10b      	bne.n	800428a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	f043 0206 	orr.w	r2, r3, #6
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	f043 0220 	orr.w	r2, r3, #32
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800428a:	7bfb      	ldrb	r3, [r7, #15]
}
 800428c:	4618      	mov	r0, r3
 800428e:	3710      	adds	r7, #16
 8004290:	46bd      	mov	sp, r7
 8004292:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004296:	b004      	add	sp, #16
 8004298:	4770      	bx	lr
	...

0800429c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800429c:	b480      	push	{r7}
 800429e:	b087      	sub	sp, #28
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	60f8      	str	r0, [r7, #12]
 80042a4:	60b9      	str	r1, [r7, #8]
 80042a6:	4613      	mov	r3, r2
 80042a8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80042aa:	79fb      	ldrb	r3, [r7, #7]
 80042ac:	2b02      	cmp	r3, #2
 80042ae:	d165      	bne.n	800437c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	4a41      	ldr	r2, [pc, #260]	; (80043b8 <USB_SetTurnaroundTime+0x11c>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d906      	bls.n	80042c6 <USB_SetTurnaroundTime+0x2a>
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	4a40      	ldr	r2, [pc, #256]	; (80043bc <USB_SetTurnaroundTime+0x120>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d202      	bcs.n	80042c6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80042c0:	230f      	movs	r3, #15
 80042c2:	617b      	str	r3, [r7, #20]
 80042c4:	e062      	b.n	800438c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	4a3c      	ldr	r2, [pc, #240]	; (80043bc <USB_SetTurnaroundTime+0x120>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d306      	bcc.n	80042dc <USB_SetTurnaroundTime+0x40>
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	4a3b      	ldr	r2, [pc, #236]	; (80043c0 <USB_SetTurnaroundTime+0x124>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d202      	bcs.n	80042dc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80042d6:	230e      	movs	r3, #14
 80042d8:	617b      	str	r3, [r7, #20]
 80042da:	e057      	b.n	800438c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	4a38      	ldr	r2, [pc, #224]	; (80043c0 <USB_SetTurnaroundTime+0x124>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d306      	bcc.n	80042f2 <USB_SetTurnaroundTime+0x56>
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	4a37      	ldr	r2, [pc, #220]	; (80043c4 <USB_SetTurnaroundTime+0x128>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d202      	bcs.n	80042f2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80042ec:	230d      	movs	r3, #13
 80042ee:	617b      	str	r3, [r7, #20]
 80042f0:	e04c      	b.n	800438c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	4a33      	ldr	r2, [pc, #204]	; (80043c4 <USB_SetTurnaroundTime+0x128>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d306      	bcc.n	8004308 <USB_SetTurnaroundTime+0x6c>
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	4a32      	ldr	r2, [pc, #200]	; (80043c8 <USB_SetTurnaroundTime+0x12c>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d802      	bhi.n	8004308 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004302:	230c      	movs	r3, #12
 8004304:	617b      	str	r3, [r7, #20]
 8004306:	e041      	b.n	800438c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	4a2f      	ldr	r2, [pc, #188]	; (80043c8 <USB_SetTurnaroundTime+0x12c>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d906      	bls.n	800431e <USB_SetTurnaroundTime+0x82>
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	4a2e      	ldr	r2, [pc, #184]	; (80043cc <USB_SetTurnaroundTime+0x130>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d802      	bhi.n	800431e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004318:	230b      	movs	r3, #11
 800431a:	617b      	str	r3, [r7, #20]
 800431c:	e036      	b.n	800438c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	4a2a      	ldr	r2, [pc, #168]	; (80043cc <USB_SetTurnaroundTime+0x130>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d906      	bls.n	8004334 <USB_SetTurnaroundTime+0x98>
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	4a29      	ldr	r2, [pc, #164]	; (80043d0 <USB_SetTurnaroundTime+0x134>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d802      	bhi.n	8004334 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800432e:	230a      	movs	r3, #10
 8004330:	617b      	str	r3, [r7, #20]
 8004332:	e02b      	b.n	800438c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	4a26      	ldr	r2, [pc, #152]	; (80043d0 <USB_SetTurnaroundTime+0x134>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d906      	bls.n	800434a <USB_SetTurnaroundTime+0xae>
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	4a25      	ldr	r2, [pc, #148]	; (80043d4 <USB_SetTurnaroundTime+0x138>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d202      	bcs.n	800434a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004344:	2309      	movs	r3, #9
 8004346:	617b      	str	r3, [r7, #20]
 8004348:	e020      	b.n	800438c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	4a21      	ldr	r2, [pc, #132]	; (80043d4 <USB_SetTurnaroundTime+0x138>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d306      	bcc.n	8004360 <USB_SetTurnaroundTime+0xc4>
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	4a20      	ldr	r2, [pc, #128]	; (80043d8 <USB_SetTurnaroundTime+0x13c>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d802      	bhi.n	8004360 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800435a:	2308      	movs	r3, #8
 800435c:	617b      	str	r3, [r7, #20]
 800435e:	e015      	b.n	800438c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	4a1d      	ldr	r2, [pc, #116]	; (80043d8 <USB_SetTurnaroundTime+0x13c>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d906      	bls.n	8004376 <USB_SetTurnaroundTime+0xda>
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	4a1c      	ldr	r2, [pc, #112]	; (80043dc <USB_SetTurnaroundTime+0x140>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d202      	bcs.n	8004376 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004370:	2307      	movs	r3, #7
 8004372:	617b      	str	r3, [r7, #20]
 8004374:	e00a      	b.n	800438c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004376:	2306      	movs	r3, #6
 8004378:	617b      	str	r3, [r7, #20]
 800437a:	e007      	b.n	800438c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800437c:	79fb      	ldrb	r3, [r7, #7]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d102      	bne.n	8004388 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004382:	2309      	movs	r3, #9
 8004384:	617b      	str	r3, [r7, #20]
 8004386:	e001      	b.n	800438c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004388:	2309      	movs	r3, #9
 800438a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	68da      	ldr	r2, [r3, #12]
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	029b      	lsls	r3, r3, #10
 80043a0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80043a4:	431a      	orrs	r2, r3
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80043aa:	2300      	movs	r3, #0
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	371c      	adds	r7, #28
 80043b0:	46bd      	mov	sp, r7
 80043b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b6:	4770      	bx	lr
 80043b8:	00d8acbf 	.word	0x00d8acbf
 80043bc:	00e4e1c0 	.word	0x00e4e1c0
 80043c0:	00f42400 	.word	0x00f42400
 80043c4:	01067380 	.word	0x01067380
 80043c8:	011a499f 	.word	0x011a499f
 80043cc:	01312cff 	.word	0x01312cff
 80043d0:	014ca43f 	.word	0x014ca43f
 80043d4:	016e3600 	.word	0x016e3600
 80043d8:	01a6ab1f 	.word	0x01a6ab1f
 80043dc:	01e84800 	.word	0x01e84800

080043e0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b083      	sub	sp, #12
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	f043 0201 	orr.w	r2, r3, #1
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80043f4:	2300      	movs	r3, #0
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	370c      	adds	r7, #12
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr

08004402 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004402:	b480      	push	{r7}
 8004404:	b083      	sub	sp, #12
 8004406:	af00      	add	r7, sp, #0
 8004408:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	f023 0201 	bic.w	r2, r3, #1
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004416:	2300      	movs	r3, #0
}
 8004418:	4618      	mov	r0, r3
 800441a:	370c      	adds	r7, #12
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b084      	sub	sp, #16
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	460b      	mov	r3, r1
 800442e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004430:	2300      	movs	r3, #0
 8004432:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004440:	78fb      	ldrb	r3, [r7, #3]
 8004442:	2b01      	cmp	r3, #1
 8004444:	d115      	bne.n	8004472 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	68db      	ldr	r3, [r3, #12]
 800444a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004452:	2001      	movs	r0, #1
 8004454:	f7fc fbbe 	bl	8000bd4 <HAL_Delay>
      ms++;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	3301      	adds	r3, #1
 800445c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f001 fa45 	bl	80058ee <USB_GetMode>
 8004464:	4603      	mov	r3, r0
 8004466:	2b01      	cmp	r3, #1
 8004468:	d01e      	beq.n	80044a8 <USB_SetCurrentMode+0x84>
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2b31      	cmp	r3, #49	; 0x31
 800446e:	d9f0      	bls.n	8004452 <USB_SetCurrentMode+0x2e>
 8004470:	e01a      	b.n	80044a8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004472:	78fb      	ldrb	r3, [r7, #3]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d115      	bne.n	80044a4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004484:	2001      	movs	r0, #1
 8004486:	f7fc fba5 	bl	8000bd4 <HAL_Delay>
      ms++;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	3301      	adds	r3, #1
 800448e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f001 fa2c 	bl	80058ee <USB_GetMode>
 8004496:	4603      	mov	r3, r0
 8004498:	2b00      	cmp	r3, #0
 800449a:	d005      	beq.n	80044a8 <USB_SetCurrentMode+0x84>
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2b31      	cmp	r3, #49	; 0x31
 80044a0:	d9f0      	bls.n	8004484 <USB_SetCurrentMode+0x60>
 80044a2:	e001      	b.n	80044a8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	e005      	b.n	80044b4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2b32      	cmp	r3, #50	; 0x32
 80044ac:	d101      	bne.n	80044b2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e000      	b.n	80044b4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80044b2:	2300      	movs	r3, #0
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	3710      	adds	r7, #16
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}

080044bc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80044bc:	b084      	sub	sp, #16
 80044be:	b580      	push	{r7, lr}
 80044c0:	b086      	sub	sp, #24
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	6078      	str	r0, [r7, #4]
 80044c6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80044ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80044ce:	2300      	movs	r3, #0
 80044d0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80044d6:	2300      	movs	r3, #0
 80044d8:	613b      	str	r3, [r7, #16]
 80044da:	e009      	b.n	80044f0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80044dc:	687a      	ldr	r2, [r7, #4]
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	3340      	adds	r3, #64	; 0x40
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	4413      	add	r3, r2
 80044e6:	2200      	movs	r2, #0
 80044e8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	3301      	adds	r3, #1
 80044ee:	613b      	str	r3, [r7, #16]
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	2b0e      	cmp	r3, #14
 80044f4:	d9f2      	bls.n	80044dc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80044f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d11c      	bne.n	8004536 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	68fa      	ldr	r2, [r7, #12]
 8004506:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800450a:	f043 0302 	orr.w	r3, r3, #2
 800450e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004514:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004520:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800452c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	639a      	str	r2, [r3, #56]	; 0x38
 8004534:	e00b      	b.n	800454e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800453a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004546:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004554:	461a      	mov	r2, r3
 8004556:	2300      	movs	r3, #0
 8004558:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004560:	4619      	mov	r1, r3
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004568:	461a      	mov	r2, r3
 800456a:	680b      	ldr	r3, [r1, #0]
 800456c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800456e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004570:	2b01      	cmp	r3, #1
 8004572:	d10c      	bne.n	800458e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004576:	2b00      	cmp	r3, #0
 8004578:	d104      	bne.n	8004584 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800457a:	2100      	movs	r1, #0
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f000 f965 	bl	800484c <USB_SetDevSpeed>
 8004582:	e008      	b.n	8004596 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004584:	2101      	movs	r1, #1
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f000 f960 	bl	800484c <USB_SetDevSpeed>
 800458c:	e003      	b.n	8004596 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800458e:	2103      	movs	r1, #3
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	f000 f95b 	bl	800484c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004596:	2110      	movs	r1, #16
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f000 f8f3 	bl	8004784 <USB_FlushTxFifo>
 800459e:	4603      	mov	r3, r0
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d001      	beq.n	80045a8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	f000 f91f 	bl	80047ec <USB_FlushRxFifo>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d001      	beq.n	80045b8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045be:	461a      	mov	r2, r3
 80045c0:	2300      	movs	r3, #0
 80045c2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045ca:	461a      	mov	r2, r3
 80045cc:	2300      	movs	r3, #0
 80045ce:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045d6:	461a      	mov	r2, r3
 80045d8:	2300      	movs	r3, #0
 80045da:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80045dc:	2300      	movs	r3, #0
 80045de:	613b      	str	r3, [r7, #16]
 80045e0:	e043      	b.n	800466a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	015a      	lsls	r2, r3, #5
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	4413      	add	r3, r2
 80045ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80045f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80045f8:	d118      	bne.n	800462c <USB_DevInit+0x170>
    {
      if (i == 0U)
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d10a      	bne.n	8004616 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	015a      	lsls	r2, r3, #5
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	4413      	add	r3, r2
 8004608:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800460c:	461a      	mov	r2, r3
 800460e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004612:	6013      	str	r3, [r2, #0]
 8004614:	e013      	b.n	800463e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	015a      	lsls	r2, r3, #5
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	4413      	add	r3, r2
 800461e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004622:	461a      	mov	r2, r3
 8004624:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004628:	6013      	str	r3, [r2, #0]
 800462a:	e008      	b.n	800463e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	015a      	lsls	r2, r3, #5
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	4413      	add	r3, r2
 8004634:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004638:	461a      	mov	r2, r3
 800463a:	2300      	movs	r3, #0
 800463c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	015a      	lsls	r2, r3, #5
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	4413      	add	r3, r2
 8004646:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800464a:	461a      	mov	r2, r3
 800464c:	2300      	movs	r3, #0
 800464e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	015a      	lsls	r2, r3, #5
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	4413      	add	r3, r2
 8004658:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800465c:	461a      	mov	r2, r3
 800465e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004662:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	3301      	adds	r3, #1
 8004668:	613b      	str	r3, [r7, #16]
 800466a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466c:	693a      	ldr	r2, [r7, #16]
 800466e:	429a      	cmp	r2, r3
 8004670:	d3b7      	bcc.n	80045e2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004672:	2300      	movs	r3, #0
 8004674:	613b      	str	r3, [r7, #16]
 8004676:	e043      	b.n	8004700 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	015a      	lsls	r2, r3, #5
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	4413      	add	r3, r2
 8004680:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800468a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800468e:	d118      	bne.n	80046c2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d10a      	bne.n	80046ac <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	015a      	lsls	r2, r3, #5
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	4413      	add	r3, r2
 800469e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046a2:	461a      	mov	r2, r3
 80046a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80046a8:	6013      	str	r3, [r2, #0]
 80046aa:	e013      	b.n	80046d4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	015a      	lsls	r2, r3, #5
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	4413      	add	r3, r2
 80046b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046b8:	461a      	mov	r2, r3
 80046ba:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80046be:	6013      	str	r3, [r2, #0]
 80046c0:	e008      	b.n	80046d4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	015a      	lsls	r2, r3, #5
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	4413      	add	r3, r2
 80046ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046ce:	461a      	mov	r2, r3
 80046d0:	2300      	movs	r3, #0
 80046d2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	015a      	lsls	r2, r3, #5
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	4413      	add	r3, r2
 80046dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046e0:	461a      	mov	r2, r3
 80046e2:	2300      	movs	r3, #0
 80046e4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	015a      	lsls	r2, r3, #5
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	4413      	add	r3, r2
 80046ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046f2:	461a      	mov	r2, r3
 80046f4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80046f8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	3301      	adds	r3, #1
 80046fe:	613b      	str	r3, [r7, #16]
 8004700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004702:	693a      	ldr	r2, [r7, #16]
 8004704:	429a      	cmp	r2, r3
 8004706:	d3b7      	bcc.n	8004678 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800470e:	691b      	ldr	r3, [r3, #16]
 8004710:	68fa      	ldr	r2, [r7, #12]
 8004712:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004716:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800471a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004728:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800472a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800472c:	2b00      	cmp	r3, #0
 800472e:	d105      	bne.n	800473c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	699b      	ldr	r3, [r3, #24]
 8004734:	f043 0210 	orr.w	r2, r3, #16
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	699a      	ldr	r2, [r3, #24]
 8004740:	4b0f      	ldr	r3, [pc, #60]	; (8004780 <USB_DevInit+0x2c4>)
 8004742:	4313      	orrs	r3, r2
 8004744:	687a      	ldr	r2, [r7, #4]
 8004746:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004748:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800474a:	2b00      	cmp	r3, #0
 800474c:	d005      	beq.n	800475a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	699b      	ldr	r3, [r3, #24]
 8004752:	f043 0208 	orr.w	r2, r3, #8
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800475a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800475c:	2b01      	cmp	r3, #1
 800475e:	d107      	bne.n	8004770 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	699b      	ldr	r3, [r3, #24]
 8004764:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004768:	f043 0304 	orr.w	r3, r3, #4
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004770:	7dfb      	ldrb	r3, [r7, #23]
}
 8004772:	4618      	mov	r0, r3
 8004774:	3718      	adds	r7, #24
 8004776:	46bd      	mov	sp, r7
 8004778:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800477c:	b004      	add	sp, #16
 800477e:	4770      	bx	lr
 8004780:	803c3800 	.word	0x803c3800

08004784 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004784:	b480      	push	{r7}
 8004786:	b085      	sub	sp, #20
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
 800478c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800478e:	2300      	movs	r3, #0
 8004790:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	3301      	adds	r3, #1
 8004796:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	4a13      	ldr	r2, [pc, #76]	; (80047e8 <USB_FlushTxFifo+0x64>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d901      	bls.n	80047a4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80047a0:	2303      	movs	r3, #3
 80047a2:	e01b      	b.n	80047dc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	691b      	ldr	r3, [r3, #16]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	daf2      	bge.n	8004792 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80047ac:	2300      	movs	r3, #0
 80047ae:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	019b      	lsls	r3, r3, #6
 80047b4:	f043 0220 	orr.w	r2, r3, #32
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	3301      	adds	r3, #1
 80047c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	4a08      	ldr	r2, [pc, #32]	; (80047e8 <USB_FlushTxFifo+0x64>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d901      	bls.n	80047ce <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80047ca:	2303      	movs	r3, #3
 80047cc:	e006      	b.n	80047dc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	691b      	ldr	r3, [r3, #16]
 80047d2:	f003 0320 	and.w	r3, r3, #32
 80047d6:	2b20      	cmp	r3, #32
 80047d8:	d0f0      	beq.n	80047bc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80047da:	2300      	movs	r3, #0
}
 80047dc:	4618      	mov	r0, r3
 80047de:	3714      	adds	r7, #20
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr
 80047e8:	00030d40 	.word	0x00030d40

080047ec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b085      	sub	sp, #20
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80047f4:	2300      	movs	r3, #0
 80047f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	3301      	adds	r3, #1
 80047fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	4a11      	ldr	r2, [pc, #68]	; (8004848 <USB_FlushRxFifo+0x5c>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d901      	bls.n	800480a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004806:	2303      	movs	r3, #3
 8004808:	e018      	b.n	800483c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	691b      	ldr	r3, [r3, #16]
 800480e:	2b00      	cmp	r3, #0
 8004810:	daf2      	bge.n	80047f8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004812:	2300      	movs	r3, #0
 8004814:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2210      	movs	r2, #16
 800481a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	3301      	adds	r3, #1
 8004820:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	4a08      	ldr	r2, [pc, #32]	; (8004848 <USB_FlushRxFifo+0x5c>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d901      	bls.n	800482e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800482a:	2303      	movs	r3, #3
 800482c:	e006      	b.n	800483c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	691b      	ldr	r3, [r3, #16]
 8004832:	f003 0310 	and.w	r3, r3, #16
 8004836:	2b10      	cmp	r3, #16
 8004838:	d0f0      	beq.n	800481c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800483a:	2300      	movs	r3, #0
}
 800483c:	4618      	mov	r0, r3
 800483e:	3714      	adds	r7, #20
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr
 8004848:	00030d40 	.word	0x00030d40

0800484c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800484c:	b480      	push	{r7}
 800484e:	b085      	sub	sp, #20
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	460b      	mov	r3, r1
 8004856:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	78fb      	ldrb	r3, [r7, #3]
 8004866:	68f9      	ldr	r1, [r7, #12]
 8004868:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800486c:	4313      	orrs	r3, r2
 800486e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004870:	2300      	movs	r3, #0
}
 8004872:	4618      	mov	r0, r3
 8004874:	3714      	adds	r7, #20
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr

0800487e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800487e:	b480      	push	{r7}
 8004880:	b087      	sub	sp, #28
 8004882:	af00      	add	r7, sp, #0
 8004884:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	f003 0306 	and.w	r3, r3, #6
 8004896:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d102      	bne.n	80048a4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800489e:	2300      	movs	r3, #0
 80048a0:	75fb      	strb	r3, [r7, #23]
 80048a2:	e00a      	b.n	80048ba <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2b02      	cmp	r3, #2
 80048a8:	d002      	beq.n	80048b0 <USB_GetDevSpeed+0x32>
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2b06      	cmp	r3, #6
 80048ae:	d102      	bne.n	80048b6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80048b0:	2302      	movs	r3, #2
 80048b2:	75fb      	strb	r3, [r7, #23]
 80048b4:	e001      	b.n	80048ba <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80048b6:	230f      	movs	r3, #15
 80048b8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80048ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80048bc:	4618      	mov	r0, r3
 80048be:	371c      	adds	r7, #28
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr

080048c8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b085      	sub	sp, #20
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
 80048d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	781b      	ldrb	r3, [r3, #0]
 80048da:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	785b      	ldrb	r3, [r3, #1]
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d13a      	bne.n	800495a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048ea:	69da      	ldr	r2, [r3, #28]
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	781b      	ldrb	r3, [r3, #0]
 80048f0:	f003 030f 	and.w	r3, r3, #15
 80048f4:	2101      	movs	r1, #1
 80048f6:	fa01 f303 	lsl.w	r3, r1, r3
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	68f9      	ldr	r1, [r7, #12]
 80048fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004902:	4313      	orrs	r3, r2
 8004904:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	015a      	lsls	r2, r3, #5
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	4413      	add	r3, r2
 800490e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004918:	2b00      	cmp	r3, #0
 800491a:	d155      	bne.n	80049c8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	015a      	lsls	r2, r3, #5
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	4413      	add	r3, r2
 8004924:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	68db      	ldr	r3, [r3, #12]
 800492e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	791b      	ldrb	r3, [r3, #4]
 8004936:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004938:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	059b      	lsls	r3, r3, #22
 800493e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004940:	4313      	orrs	r3, r2
 8004942:	68ba      	ldr	r2, [r7, #8]
 8004944:	0151      	lsls	r1, r2, #5
 8004946:	68fa      	ldr	r2, [r7, #12]
 8004948:	440a      	add	r2, r1
 800494a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800494e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004952:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004956:	6013      	str	r3, [r2, #0]
 8004958:	e036      	b.n	80049c8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004960:	69da      	ldr	r2, [r3, #28]
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	781b      	ldrb	r3, [r3, #0]
 8004966:	f003 030f 	and.w	r3, r3, #15
 800496a:	2101      	movs	r1, #1
 800496c:	fa01 f303 	lsl.w	r3, r1, r3
 8004970:	041b      	lsls	r3, r3, #16
 8004972:	68f9      	ldr	r1, [r7, #12]
 8004974:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004978:	4313      	orrs	r3, r2
 800497a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	015a      	lsls	r2, r3, #5
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	4413      	add	r3, r2
 8004984:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800498e:	2b00      	cmp	r3, #0
 8004990:	d11a      	bne.n	80049c8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	015a      	lsls	r2, r3, #5
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	4413      	add	r3, r2
 800499a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	791b      	ldrb	r3, [r3, #4]
 80049ac:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80049ae:	430b      	orrs	r3, r1
 80049b0:	4313      	orrs	r3, r2
 80049b2:	68ba      	ldr	r2, [r7, #8]
 80049b4:	0151      	lsls	r1, r2, #5
 80049b6:	68fa      	ldr	r2, [r7, #12]
 80049b8:	440a      	add	r2, r1
 80049ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049c6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80049c8:	2300      	movs	r3, #0
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3714      	adds	r7, #20
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr
	...

080049d8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80049d8:	b480      	push	{r7}
 80049da:	b085      	sub	sp, #20
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
 80049e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	781b      	ldrb	r3, [r3, #0]
 80049ea:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	785b      	ldrb	r3, [r3, #1]
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d161      	bne.n	8004ab8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	015a      	lsls	r2, r3, #5
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	4413      	add	r3, r2
 80049fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a0a:	d11f      	bne.n	8004a4c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	015a      	lsls	r2, r3, #5
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	4413      	add	r3, r2
 8004a14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	68ba      	ldr	r2, [r7, #8]
 8004a1c:	0151      	lsls	r1, r2, #5
 8004a1e:	68fa      	ldr	r2, [r7, #12]
 8004a20:	440a      	add	r2, r1
 8004a22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a26:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004a2a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	015a      	lsls	r2, r3, #5
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	4413      	add	r3, r2
 8004a34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	68ba      	ldr	r2, [r7, #8]
 8004a3c:	0151      	lsls	r1, r2, #5
 8004a3e:	68fa      	ldr	r2, [r7, #12]
 8004a40:	440a      	add	r2, r1
 8004a42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a46:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004a4a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	781b      	ldrb	r3, [r3, #0]
 8004a58:	f003 030f 	and.w	r3, r3, #15
 8004a5c:	2101      	movs	r1, #1
 8004a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	43db      	mvns	r3, r3
 8004a66:	68f9      	ldr	r1, [r7, #12]
 8004a68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a76:	69da      	ldr	r2, [r3, #28]
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	781b      	ldrb	r3, [r3, #0]
 8004a7c:	f003 030f 	and.w	r3, r3, #15
 8004a80:	2101      	movs	r1, #1
 8004a82:	fa01 f303 	lsl.w	r3, r1, r3
 8004a86:	b29b      	uxth	r3, r3
 8004a88:	43db      	mvns	r3, r3
 8004a8a:	68f9      	ldr	r1, [r7, #12]
 8004a8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a90:	4013      	ands	r3, r2
 8004a92:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	015a      	lsls	r2, r3, #5
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	4413      	add	r3, r2
 8004a9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	0159      	lsls	r1, r3, #5
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	440b      	add	r3, r1
 8004aaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aae:	4619      	mov	r1, r3
 8004ab0:	4b35      	ldr	r3, [pc, #212]	; (8004b88 <USB_DeactivateEndpoint+0x1b0>)
 8004ab2:	4013      	ands	r3, r2
 8004ab4:	600b      	str	r3, [r1, #0]
 8004ab6:	e060      	b.n	8004b7a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	015a      	lsls	r2, r3, #5
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	4413      	add	r3, r2
 8004ac0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004aca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ace:	d11f      	bne.n	8004b10 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	015a      	lsls	r2, r3, #5
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	4413      	add	r3, r2
 8004ad8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	68ba      	ldr	r2, [r7, #8]
 8004ae0:	0151      	lsls	r1, r2, #5
 8004ae2:	68fa      	ldr	r2, [r7, #12]
 8004ae4:	440a      	add	r2, r1
 8004ae6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004aea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004aee:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	015a      	lsls	r2, r3, #5
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	4413      	add	r3, r2
 8004af8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	68ba      	ldr	r2, [r7, #8]
 8004b00:	0151      	lsls	r1, r2, #5
 8004b02:	68fa      	ldr	r2, [r7, #12]
 8004b04:	440a      	add	r2, r1
 8004b06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b0a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004b0e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	781b      	ldrb	r3, [r3, #0]
 8004b1c:	f003 030f 	and.w	r3, r3, #15
 8004b20:	2101      	movs	r1, #1
 8004b22:	fa01 f303 	lsl.w	r3, r1, r3
 8004b26:	041b      	lsls	r3, r3, #16
 8004b28:	43db      	mvns	r3, r3
 8004b2a:	68f9      	ldr	r1, [r7, #12]
 8004b2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b30:	4013      	ands	r3, r2
 8004b32:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b3a:	69da      	ldr	r2, [r3, #28]
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	781b      	ldrb	r3, [r3, #0]
 8004b40:	f003 030f 	and.w	r3, r3, #15
 8004b44:	2101      	movs	r1, #1
 8004b46:	fa01 f303 	lsl.w	r3, r1, r3
 8004b4a:	041b      	lsls	r3, r3, #16
 8004b4c:	43db      	mvns	r3, r3
 8004b4e:	68f9      	ldr	r1, [r7, #12]
 8004b50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b54:	4013      	ands	r3, r2
 8004b56:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	015a      	lsls	r2, r3, #5
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	4413      	add	r3, r2
 8004b60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	0159      	lsls	r1, r3, #5
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	440b      	add	r3, r1
 8004b6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b72:	4619      	mov	r1, r3
 8004b74:	4b05      	ldr	r3, [pc, #20]	; (8004b8c <USB_DeactivateEndpoint+0x1b4>)
 8004b76:	4013      	ands	r3, r2
 8004b78:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004b7a:	2300      	movs	r3, #0
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3714      	adds	r7, #20
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr
 8004b88:	ec337800 	.word	0xec337800
 8004b8c:	eff37800 	.word	0xeff37800

08004b90 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b08a      	sub	sp, #40	; 0x28
 8004b94:	af02      	add	r7, sp, #8
 8004b96:	60f8      	str	r0, [r7, #12]
 8004b98:	60b9      	str	r1, [r7, #8]
 8004b9a:	4613      	mov	r3, r2
 8004b9c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	781b      	ldrb	r3, [r3, #0]
 8004ba6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	785b      	ldrb	r3, [r3, #1]
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	f040 815c 	bne.w	8004e6a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	699b      	ldr	r3, [r3, #24]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d132      	bne.n	8004c20 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004bba:	69bb      	ldr	r3, [r7, #24]
 8004bbc:	015a      	lsls	r2, r3, #5
 8004bbe:	69fb      	ldr	r3, [r7, #28]
 8004bc0:	4413      	add	r3, r2
 8004bc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bc6:	691b      	ldr	r3, [r3, #16]
 8004bc8:	69ba      	ldr	r2, [r7, #24]
 8004bca:	0151      	lsls	r1, r2, #5
 8004bcc:	69fa      	ldr	r2, [r7, #28]
 8004bce:	440a      	add	r2, r1
 8004bd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bd4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004bd8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004bdc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004bde:	69bb      	ldr	r3, [r7, #24]
 8004be0:	015a      	lsls	r2, r3, #5
 8004be2:	69fb      	ldr	r3, [r7, #28]
 8004be4:	4413      	add	r3, r2
 8004be6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bea:	691b      	ldr	r3, [r3, #16]
 8004bec:	69ba      	ldr	r2, [r7, #24]
 8004bee:	0151      	lsls	r1, r2, #5
 8004bf0:	69fa      	ldr	r2, [r7, #28]
 8004bf2:	440a      	add	r2, r1
 8004bf4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bf8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004bfc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004bfe:	69bb      	ldr	r3, [r7, #24]
 8004c00:	015a      	lsls	r2, r3, #5
 8004c02:	69fb      	ldr	r3, [r7, #28]
 8004c04:	4413      	add	r3, r2
 8004c06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c0a:	691b      	ldr	r3, [r3, #16]
 8004c0c:	69ba      	ldr	r2, [r7, #24]
 8004c0e:	0151      	lsls	r1, r2, #5
 8004c10:	69fa      	ldr	r2, [r7, #28]
 8004c12:	440a      	add	r2, r1
 8004c14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c18:	0cdb      	lsrs	r3, r3, #19
 8004c1a:	04db      	lsls	r3, r3, #19
 8004c1c:	6113      	str	r3, [r2, #16]
 8004c1e:	e074      	b.n	8004d0a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004c20:	69bb      	ldr	r3, [r7, #24]
 8004c22:	015a      	lsls	r2, r3, #5
 8004c24:	69fb      	ldr	r3, [r7, #28]
 8004c26:	4413      	add	r3, r2
 8004c28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c2c:	691b      	ldr	r3, [r3, #16]
 8004c2e:	69ba      	ldr	r2, [r7, #24]
 8004c30:	0151      	lsls	r1, r2, #5
 8004c32:	69fa      	ldr	r2, [r7, #28]
 8004c34:	440a      	add	r2, r1
 8004c36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c3a:	0cdb      	lsrs	r3, r3, #19
 8004c3c:	04db      	lsls	r3, r3, #19
 8004c3e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004c40:	69bb      	ldr	r3, [r7, #24]
 8004c42:	015a      	lsls	r2, r3, #5
 8004c44:	69fb      	ldr	r3, [r7, #28]
 8004c46:	4413      	add	r3, r2
 8004c48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c4c:	691b      	ldr	r3, [r3, #16]
 8004c4e:	69ba      	ldr	r2, [r7, #24]
 8004c50:	0151      	lsls	r1, r2, #5
 8004c52:	69fa      	ldr	r2, [r7, #28]
 8004c54:	440a      	add	r2, r1
 8004c56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c5a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004c5e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004c62:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004c64:	69bb      	ldr	r3, [r7, #24]
 8004c66:	015a      	lsls	r2, r3, #5
 8004c68:	69fb      	ldr	r3, [r7, #28]
 8004c6a:	4413      	add	r3, r2
 8004c6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c70:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	6999      	ldr	r1, [r3, #24]
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	68db      	ldr	r3, [r3, #12]
 8004c7a:	440b      	add	r3, r1
 8004c7c:	1e59      	subs	r1, r3, #1
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	68db      	ldr	r3, [r3, #12]
 8004c82:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c86:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004c88:	4b9d      	ldr	r3, [pc, #628]	; (8004f00 <USB_EPStartXfer+0x370>)
 8004c8a:	400b      	ands	r3, r1
 8004c8c:	69b9      	ldr	r1, [r7, #24]
 8004c8e:	0148      	lsls	r0, r1, #5
 8004c90:	69f9      	ldr	r1, [r7, #28]
 8004c92:	4401      	add	r1, r0
 8004c94:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004c9c:	69bb      	ldr	r3, [r7, #24]
 8004c9e:	015a      	lsls	r2, r3, #5
 8004ca0:	69fb      	ldr	r3, [r7, #28]
 8004ca2:	4413      	add	r3, r2
 8004ca4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ca8:	691a      	ldr	r2, [r3, #16]
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	699b      	ldr	r3, [r3, #24]
 8004cae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cb2:	69b9      	ldr	r1, [r7, #24]
 8004cb4:	0148      	lsls	r0, r1, #5
 8004cb6:	69f9      	ldr	r1, [r7, #28]
 8004cb8:	4401      	add	r1, r0
 8004cba:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	791b      	ldrb	r3, [r3, #4]
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d11f      	bne.n	8004d0a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004cca:	69bb      	ldr	r3, [r7, #24]
 8004ccc:	015a      	lsls	r2, r3, #5
 8004cce:	69fb      	ldr	r3, [r7, #28]
 8004cd0:	4413      	add	r3, r2
 8004cd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cd6:	691b      	ldr	r3, [r3, #16]
 8004cd8:	69ba      	ldr	r2, [r7, #24]
 8004cda:	0151      	lsls	r1, r2, #5
 8004cdc:	69fa      	ldr	r2, [r7, #28]
 8004cde:	440a      	add	r2, r1
 8004ce0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ce4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004ce8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004cea:	69bb      	ldr	r3, [r7, #24]
 8004cec:	015a      	lsls	r2, r3, #5
 8004cee:	69fb      	ldr	r3, [r7, #28]
 8004cf0:	4413      	add	r3, r2
 8004cf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cf6:	691b      	ldr	r3, [r3, #16]
 8004cf8:	69ba      	ldr	r2, [r7, #24]
 8004cfa:	0151      	lsls	r1, r2, #5
 8004cfc:	69fa      	ldr	r2, [r7, #28]
 8004cfe:	440a      	add	r2, r1
 8004d00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d04:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004d08:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004d0a:	79fb      	ldrb	r3, [r7, #7]
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d14b      	bne.n	8004da8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	695b      	ldr	r3, [r3, #20]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d009      	beq.n	8004d2c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004d18:	69bb      	ldr	r3, [r7, #24]
 8004d1a:	015a      	lsls	r2, r3, #5
 8004d1c:	69fb      	ldr	r3, [r7, #28]
 8004d1e:	4413      	add	r3, r2
 8004d20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d24:	461a      	mov	r2, r3
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	695b      	ldr	r3, [r3, #20]
 8004d2a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	791b      	ldrb	r3, [r3, #4]
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d128      	bne.n	8004d86 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004d34:	69fb      	ldr	r3, [r7, #28]
 8004d36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d110      	bne.n	8004d66 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004d44:	69bb      	ldr	r3, [r7, #24]
 8004d46:	015a      	lsls	r2, r3, #5
 8004d48:	69fb      	ldr	r3, [r7, #28]
 8004d4a:	4413      	add	r3, r2
 8004d4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	69ba      	ldr	r2, [r7, #24]
 8004d54:	0151      	lsls	r1, r2, #5
 8004d56:	69fa      	ldr	r2, [r7, #28]
 8004d58:	440a      	add	r2, r1
 8004d5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d5e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004d62:	6013      	str	r3, [r2, #0]
 8004d64:	e00f      	b.n	8004d86 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004d66:	69bb      	ldr	r3, [r7, #24]
 8004d68:	015a      	lsls	r2, r3, #5
 8004d6a:	69fb      	ldr	r3, [r7, #28]
 8004d6c:	4413      	add	r3, r2
 8004d6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	69ba      	ldr	r2, [r7, #24]
 8004d76:	0151      	lsls	r1, r2, #5
 8004d78:	69fa      	ldr	r2, [r7, #28]
 8004d7a:	440a      	add	r2, r1
 8004d7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d84:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004d86:	69bb      	ldr	r3, [r7, #24]
 8004d88:	015a      	lsls	r2, r3, #5
 8004d8a:	69fb      	ldr	r3, [r7, #28]
 8004d8c:	4413      	add	r3, r2
 8004d8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	69ba      	ldr	r2, [r7, #24]
 8004d96:	0151      	lsls	r1, r2, #5
 8004d98:	69fa      	ldr	r2, [r7, #28]
 8004d9a:	440a      	add	r2, r1
 8004d9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004da0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004da4:	6013      	str	r3, [r2, #0]
 8004da6:	e133      	b.n	8005010 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004da8:	69bb      	ldr	r3, [r7, #24]
 8004daa:	015a      	lsls	r2, r3, #5
 8004dac:	69fb      	ldr	r3, [r7, #28]
 8004dae:	4413      	add	r3, r2
 8004db0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	69ba      	ldr	r2, [r7, #24]
 8004db8:	0151      	lsls	r1, r2, #5
 8004dba:	69fa      	ldr	r2, [r7, #28]
 8004dbc:	440a      	add	r2, r1
 8004dbe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dc2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004dc6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	791b      	ldrb	r3, [r3, #4]
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d015      	beq.n	8004dfc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	699b      	ldr	r3, [r3, #24]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	f000 811b 	beq.w	8005010 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004dda:	69fb      	ldr	r3, [r7, #28]
 8004ddc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004de0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	781b      	ldrb	r3, [r3, #0]
 8004de6:	f003 030f 	and.w	r3, r3, #15
 8004dea:	2101      	movs	r1, #1
 8004dec:	fa01 f303 	lsl.w	r3, r1, r3
 8004df0:	69f9      	ldr	r1, [r7, #28]
 8004df2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004df6:	4313      	orrs	r3, r2
 8004df8:	634b      	str	r3, [r1, #52]	; 0x34
 8004dfa:	e109      	b.n	8005010 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004dfc:	69fb      	ldr	r3, [r7, #28]
 8004dfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d110      	bne.n	8004e2e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004e0c:	69bb      	ldr	r3, [r7, #24]
 8004e0e:	015a      	lsls	r2, r3, #5
 8004e10:	69fb      	ldr	r3, [r7, #28]
 8004e12:	4413      	add	r3, r2
 8004e14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	69ba      	ldr	r2, [r7, #24]
 8004e1c:	0151      	lsls	r1, r2, #5
 8004e1e:	69fa      	ldr	r2, [r7, #28]
 8004e20:	440a      	add	r2, r1
 8004e22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e26:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004e2a:	6013      	str	r3, [r2, #0]
 8004e2c:	e00f      	b.n	8004e4e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004e2e:	69bb      	ldr	r3, [r7, #24]
 8004e30:	015a      	lsls	r2, r3, #5
 8004e32:	69fb      	ldr	r3, [r7, #28]
 8004e34:	4413      	add	r3, r2
 8004e36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	69ba      	ldr	r2, [r7, #24]
 8004e3e:	0151      	lsls	r1, r2, #5
 8004e40:	69fa      	ldr	r2, [r7, #28]
 8004e42:	440a      	add	r2, r1
 8004e44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e4c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	6919      	ldr	r1, [r3, #16]
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	781a      	ldrb	r2, [r3, #0]
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	699b      	ldr	r3, [r3, #24]
 8004e5a:	b298      	uxth	r0, r3
 8004e5c:	79fb      	ldrb	r3, [r7, #7]
 8004e5e:	9300      	str	r3, [sp, #0]
 8004e60:	4603      	mov	r3, r0
 8004e62:	68f8      	ldr	r0, [r7, #12]
 8004e64:	f000 fade 	bl	8005424 <USB_WritePacket>
 8004e68:	e0d2      	b.n	8005010 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004e6a:	69bb      	ldr	r3, [r7, #24]
 8004e6c:	015a      	lsls	r2, r3, #5
 8004e6e:	69fb      	ldr	r3, [r7, #28]
 8004e70:	4413      	add	r3, r2
 8004e72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e76:	691b      	ldr	r3, [r3, #16]
 8004e78:	69ba      	ldr	r2, [r7, #24]
 8004e7a:	0151      	lsls	r1, r2, #5
 8004e7c:	69fa      	ldr	r2, [r7, #28]
 8004e7e:	440a      	add	r2, r1
 8004e80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e84:	0cdb      	lsrs	r3, r3, #19
 8004e86:	04db      	lsls	r3, r3, #19
 8004e88:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004e8a:	69bb      	ldr	r3, [r7, #24]
 8004e8c:	015a      	lsls	r2, r3, #5
 8004e8e:	69fb      	ldr	r3, [r7, #28]
 8004e90:	4413      	add	r3, r2
 8004e92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e96:	691b      	ldr	r3, [r3, #16]
 8004e98:	69ba      	ldr	r2, [r7, #24]
 8004e9a:	0151      	lsls	r1, r2, #5
 8004e9c:	69fa      	ldr	r2, [r7, #28]
 8004e9e:	440a      	add	r2, r1
 8004ea0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ea4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004ea8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004eac:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	699b      	ldr	r3, [r3, #24]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d126      	bne.n	8004f04 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004eb6:	69bb      	ldr	r3, [r7, #24]
 8004eb8:	015a      	lsls	r2, r3, #5
 8004eba:	69fb      	ldr	r3, [r7, #28]
 8004ebc:	4413      	add	r3, r2
 8004ebe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ec2:	691a      	ldr	r2, [r3, #16]
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	68db      	ldr	r3, [r3, #12]
 8004ec8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ecc:	69b9      	ldr	r1, [r7, #24]
 8004ece:	0148      	lsls	r0, r1, #5
 8004ed0:	69f9      	ldr	r1, [r7, #28]
 8004ed2:	4401      	add	r1, r0
 8004ed4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004edc:	69bb      	ldr	r3, [r7, #24]
 8004ede:	015a      	lsls	r2, r3, #5
 8004ee0:	69fb      	ldr	r3, [r7, #28]
 8004ee2:	4413      	add	r3, r2
 8004ee4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ee8:	691b      	ldr	r3, [r3, #16]
 8004eea:	69ba      	ldr	r2, [r7, #24]
 8004eec:	0151      	lsls	r1, r2, #5
 8004eee:	69fa      	ldr	r2, [r7, #28]
 8004ef0:	440a      	add	r2, r1
 8004ef2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ef6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004efa:	6113      	str	r3, [r2, #16]
 8004efc:	e03a      	b.n	8004f74 <USB_EPStartXfer+0x3e4>
 8004efe:	bf00      	nop
 8004f00:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	699a      	ldr	r2, [r3, #24]
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	68db      	ldr	r3, [r3, #12]
 8004f0c:	4413      	add	r3, r2
 8004f0e:	1e5a      	subs	r2, r3, #1
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	68db      	ldr	r3, [r3, #12]
 8004f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f18:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	68db      	ldr	r3, [r3, #12]
 8004f1e:	8afa      	ldrh	r2, [r7, #22]
 8004f20:	fb03 f202 	mul.w	r2, r3, r2
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004f28:	69bb      	ldr	r3, [r7, #24]
 8004f2a:	015a      	lsls	r2, r3, #5
 8004f2c:	69fb      	ldr	r3, [r7, #28]
 8004f2e:	4413      	add	r3, r2
 8004f30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f34:	691a      	ldr	r2, [r3, #16]
 8004f36:	8afb      	ldrh	r3, [r7, #22]
 8004f38:	04d9      	lsls	r1, r3, #19
 8004f3a:	4b38      	ldr	r3, [pc, #224]	; (800501c <USB_EPStartXfer+0x48c>)
 8004f3c:	400b      	ands	r3, r1
 8004f3e:	69b9      	ldr	r1, [r7, #24]
 8004f40:	0148      	lsls	r0, r1, #5
 8004f42:	69f9      	ldr	r1, [r7, #28]
 8004f44:	4401      	add	r1, r0
 8004f46:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004f4e:	69bb      	ldr	r3, [r7, #24]
 8004f50:	015a      	lsls	r2, r3, #5
 8004f52:	69fb      	ldr	r3, [r7, #28]
 8004f54:	4413      	add	r3, r2
 8004f56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f5a:	691a      	ldr	r2, [r3, #16]
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	69db      	ldr	r3, [r3, #28]
 8004f60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f64:	69b9      	ldr	r1, [r7, #24]
 8004f66:	0148      	lsls	r0, r1, #5
 8004f68:	69f9      	ldr	r1, [r7, #28]
 8004f6a:	4401      	add	r1, r0
 8004f6c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004f70:	4313      	orrs	r3, r2
 8004f72:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004f74:	79fb      	ldrb	r3, [r7, #7]
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d10d      	bne.n	8004f96 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	691b      	ldr	r3, [r3, #16]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d009      	beq.n	8004f96 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	6919      	ldr	r1, [r3, #16]
 8004f86:	69bb      	ldr	r3, [r7, #24]
 8004f88:	015a      	lsls	r2, r3, #5
 8004f8a:	69fb      	ldr	r3, [r7, #28]
 8004f8c:	4413      	add	r3, r2
 8004f8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f92:	460a      	mov	r2, r1
 8004f94:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	791b      	ldrb	r3, [r3, #4]
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d128      	bne.n	8004ff0 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004f9e:	69fb      	ldr	r3, [r7, #28]
 8004fa0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d110      	bne.n	8004fd0 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004fae:	69bb      	ldr	r3, [r7, #24]
 8004fb0:	015a      	lsls	r2, r3, #5
 8004fb2:	69fb      	ldr	r3, [r7, #28]
 8004fb4:	4413      	add	r3, r2
 8004fb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	69ba      	ldr	r2, [r7, #24]
 8004fbe:	0151      	lsls	r1, r2, #5
 8004fc0:	69fa      	ldr	r2, [r7, #28]
 8004fc2:	440a      	add	r2, r1
 8004fc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fc8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004fcc:	6013      	str	r3, [r2, #0]
 8004fce:	e00f      	b.n	8004ff0 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004fd0:	69bb      	ldr	r3, [r7, #24]
 8004fd2:	015a      	lsls	r2, r3, #5
 8004fd4:	69fb      	ldr	r3, [r7, #28]
 8004fd6:	4413      	add	r3, r2
 8004fd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	69ba      	ldr	r2, [r7, #24]
 8004fe0:	0151      	lsls	r1, r2, #5
 8004fe2:	69fa      	ldr	r2, [r7, #28]
 8004fe4:	440a      	add	r2, r1
 8004fe6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fee:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004ff0:	69bb      	ldr	r3, [r7, #24]
 8004ff2:	015a      	lsls	r2, r3, #5
 8004ff4:	69fb      	ldr	r3, [r7, #28]
 8004ff6:	4413      	add	r3, r2
 8004ff8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	69ba      	ldr	r2, [r7, #24]
 8005000:	0151      	lsls	r1, r2, #5
 8005002:	69fa      	ldr	r2, [r7, #28]
 8005004:	440a      	add	r2, r1
 8005006:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800500a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800500e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005010:	2300      	movs	r3, #0
}
 8005012:	4618      	mov	r0, r3
 8005014:	3720      	adds	r7, #32
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}
 800501a:	bf00      	nop
 800501c:	1ff80000 	.word	0x1ff80000

08005020 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005020:	b480      	push	{r7}
 8005022:	b087      	sub	sp, #28
 8005024:	af00      	add	r7, sp, #0
 8005026:	60f8      	str	r0, [r7, #12]
 8005028:	60b9      	str	r1, [r7, #8]
 800502a:	4613      	mov	r3, r2
 800502c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	781b      	ldrb	r3, [r3, #0]
 8005036:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	785b      	ldrb	r3, [r3, #1]
 800503c:	2b01      	cmp	r3, #1
 800503e:	f040 80ce 	bne.w	80051de <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	699b      	ldr	r3, [r3, #24]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d132      	bne.n	80050b0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	015a      	lsls	r2, r3, #5
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	4413      	add	r3, r2
 8005052:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005056:	691b      	ldr	r3, [r3, #16]
 8005058:	693a      	ldr	r2, [r7, #16]
 800505a:	0151      	lsls	r1, r2, #5
 800505c:	697a      	ldr	r2, [r7, #20]
 800505e:	440a      	add	r2, r1
 8005060:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005064:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005068:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800506c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	015a      	lsls	r2, r3, #5
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	4413      	add	r3, r2
 8005076:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800507a:	691b      	ldr	r3, [r3, #16]
 800507c:	693a      	ldr	r2, [r7, #16]
 800507e:	0151      	lsls	r1, r2, #5
 8005080:	697a      	ldr	r2, [r7, #20]
 8005082:	440a      	add	r2, r1
 8005084:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005088:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800508c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	015a      	lsls	r2, r3, #5
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	4413      	add	r3, r2
 8005096:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800509a:	691b      	ldr	r3, [r3, #16]
 800509c:	693a      	ldr	r2, [r7, #16]
 800509e:	0151      	lsls	r1, r2, #5
 80050a0:	697a      	ldr	r2, [r7, #20]
 80050a2:	440a      	add	r2, r1
 80050a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050a8:	0cdb      	lsrs	r3, r3, #19
 80050aa:	04db      	lsls	r3, r3, #19
 80050ac:	6113      	str	r3, [r2, #16]
 80050ae:	e04e      	b.n	800514e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	015a      	lsls	r2, r3, #5
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	4413      	add	r3, r2
 80050b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050bc:	691b      	ldr	r3, [r3, #16]
 80050be:	693a      	ldr	r2, [r7, #16]
 80050c0:	0151      	lsls	r1, r2, #5
 80050c2:	697a      	ldr	r2, [r7, #20]
 80050c4:	440a      	add	r2, r1
 80050c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050ca:	0cdb      	lsrs	r3, r3, #19
 80050cc:	04db      	lsls	r3, r3, #19
 80050ce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	015a      	lsls	r2, r3, #5
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	4413      	add	r3, r2
 80050d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050dc:	691b      	ldr	r3, [r3, #16]
 80050de:	693a      	ldr	r2, [r7, #16]
 80050e0:	0151      	lsls	r1, r2, #5
 80050e2:	697a      	ldr	r2, [r7, #20]
 80050e4:	440a      	add	r2, r1
 80050e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050ea:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80050ee:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80050f2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	699a      	ldr	r2, [r3, #24]
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	68db      	ldr	r3, [r3, #12]
 80050fc:	429a      	cmp	r2, r3
 80050fe:	d903      	bls.n	8005108 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	68da      	ldr	r2, [r3, #12]
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	015a      	lsls	r2, r3, #5
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	4413      	add	r3, r2
 8005110:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005114:	691b      	ldr	r3, [r3, #16]
 8005116:	693a      	ldr	r2, [r7, #16]
 8005118:	0151      	lsls	r1, r2, #5
 800511a:	697a      	ldr	r2, [r7, #20]
 800511c:	440a      	add	r2, r1
 800511e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005122:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005126:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	015a      	lsls	r2, r3, #5
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	4413      	add	r3, r2
 8005130:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005134:	691a      	ldr	r2, [r3, #16]
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	699b      	ldr	r3, [r3, #24]
 800513a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800513e:	6939      	ldr	r1, [r7, #16]
 8005140:	0148      	lsls	r0, r1, #5
 8005142:	6979      	ldr	r1, [r7, #20]
 8005144:	4401      	add	r1, r0
 8005146:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800514a:	4313      	orrs	r3, r2
 800514c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800514e:	79fb      	ldrb	r3, [r7, #7]
 8005150:	2b01      	cmp	r3, #1
 8005152:	d11e      	bne.n	8005192 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	695b      	ldr	r3, [r3, #20]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d009      	beq.n	8005170 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	015a      	lsls	r2, r3, #5
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	4413      	add	r3, r2
 8005164:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005168:	461a      	mov	r2, r3
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	695b      	ldr	r3, [r3, #20]
 800516e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	015a      	lsls	r2, r3, #5
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	4413      	add	r3, r2
 8005178:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	693a      	ldr	r2, [r7, #16]
 8005180:	0151      	lsls	r1, r2, #5
 8005182:	697a      	ldr	r2, [r7, #20]
 8005184:	440a      	add	r2, r1
 8005186:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800518a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800518e:	6013      	str	r3, [r2, #0]
 8005190:	e097      	b.n	80052c2 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	015a      	lsls	r2, r3, #5
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	4413      	add	r3, r2
 800519a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	693a      	ldr	r2, [r7, #16]
 80051a2:	0151      	lsls	r1, r2, #5
 80051a4:	697a      	ldr	r2, [r7, #20]
 80051a6:	440a      	add	r2, r1
 80051a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051ac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80051b0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	699b      	ldr	r3, [r3, #24]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	f000 8083 	beq.w	80052c2 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	781b      	ldrb	r3, [r3, #0]
 80051c8:	f003 030f 	and.w	r3, r3, #15
 80051cc:	2101      	movs	r1, #1
 80051ce:	fa01 f303 	lsl.w	r3, r1, r3
 80051d2:	6979      	ldr	r1, [r7, #20]
 80051d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80051d8:	4313      	orrs	r3, r2
 80051da:	634b      	str	r3, [r1, #52]	; 0x34
 80051dc:	e071      	b.n	80052c2 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	015a      	lsls	r2, r3, #5
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	4413      	add	r3, r2
 80051e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051ea:	691b      	ldr	r3, [r3, #16]
 80051ec:	693a      	ldr	r2, [r7, #16]
 80051ee:	0151      	lsls	r1, r2, #5
 80051f0:	697a      	ldr	r2, [r7, #20]
 80051f2:	440a      	add	r2, r1
 80051f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051f8:	0cdb      	lsrs	r3, r3, #19
 80051fa:	04db      	lsls	r3, r3, #19
 80051fc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	015a      	lsls	r2, r3, #5
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	4413      	add	r3, r2
 8005206:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800520a:	691b      	ldr	r3, [r3, #16]
 800520c:	693a      	ldr	r2, [r7, #16]
 800520e:	0151      	lsls	r1, r2, #5
 8005210:	697a      	ldr	r2, [r7, #20]
 8005212:	440a      	add	r2, r1
 8005214:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005218:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800521c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005220:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	699b      	ldr	r3, [r3, #24]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d003      	beq.n	8005232 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	68da      	ldr	r2, [r3, #12]
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	68da      	ldr	r2, [r3, #12]
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	015a      	lsls	r2, r3, #5
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	4413      	add	r3, r2
 8005242:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005246:	691b      	ldr	r3, [r3, #16]
 8005248:	693a      	ldr	r2, [r7, #16]
 800524a:	0151      	lsls	r1, r2, #5
 800524c:	697a      	ldr	r2, [r7, #20]
 800524e:	440a      	add	r2, r1
 8005250:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005254:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005258:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	015a      	lsls	r2, r3, #5
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	4413      	add	r3, r2
 8005262:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005266:	691a      	ldr	r2, [r3, #16]
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	69db      	ldr	r3, [r3, #28]
 800526c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005270:	6939      	ldr	r1, [r7, #16]
 8005272:	0148      	lsls	r0, r1, #5
 8005274:	6979      	ldr	r1, [r7, #20]
 8005276:	4401      	add	r1, r0
 8005278:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800527c:	4313      	orrs	r3, r2
 800527e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005280:	79fb      	ldrb	r3, [r7, #7]
 8005282:	2b01      	cmp	r3, #1
 8005284:	d10d      	bne.n	80052a2 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	691b      	ldr	r3, [r3, #16]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d009      	beq.n	80052a2 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	6919      	ldr	r1, [r3, #16]
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	015a      	lsls	r2, r3, #5
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	4413      	add	r3, r2
 800529a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800529e:	460a      	mov	r2, r1
 80052a0:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	015a      	lsls	r2, r3, #5
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	4413      	add	r3, r2
 80052aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	693a      	ldr	r2, [r7, #16]
 80052b2:	0151      	lsls	r1, r2, #5
 80052b4:	697a      	ldr	r2, [r7, #20]
 80052b6:	440a      	add	r2, r1
 80052b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052bc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80052c0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80052c2:	2300      	movs	r3, #0
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	371c      	adds	r7, #28
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr

080052d0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b087      	sub	sp, #28
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
 80052d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80052da:	2300      	movs	r3, #0
 80052dc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80052de:	2300      	movs	r3, #0
 80052e0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	785b      	ldrb	r3, [r3, #1]
 80052ea:	2b01      	cmp	r3, #1
 80052ec:	d14a      	bne.n	8005384 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	781b      	ldrb	r3, [r3, #0]
 80052f2:	015a      	lsls	r2, r3, #5
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	4413      	add	r3, r2
 80052f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005302:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005306:	f040 8086 	bne.w	8005416 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	781b      	ldrb	r3, [r3, #0]
 800530e:	015a      	lsls	r2, r3, #5
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	4413      	add	r3, r2
 8005314:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	683a      	ldr	r2, [r7, #0]
 800531c:	7812      	ldrb	r2, [r2, #0]
 800531e:	0151      	lsls	r1, r2, #5
 8005320:	693a      	ldr	r2, [r7, #16]
 8005322:	440a      	add	r2, r1
 8005324:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005328:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800532c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	781b      	ldrb	r3, [r3, #0]
 8005332:	015a      	lsls	r2, r3, #5
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	4413      	add	r3, r2
 8005338:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	683a      	ldr	r2, [r7, #0]
 8005340:	7812      	ldrb	r2, [r2, #0]
 8005342:	0151      	lsls	r1, r2, #5
 8005344:	693a      	ldr	r2, [r7, #16]
 8005346:	440a      	add	r2, r1
 8005348:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800534c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005350:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	3301      	adds	r3, #1
 8005356:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f242 7210 	movw	r2, #10000	; 0x2710
 800535e:	4293      	cmp	r3, r2
 8005360:	d902      	bls.n	8005368 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	75fb      	strb	r3, [r7, #23]
          break;
 8005366:	e056      	b.n	8005416 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	781b      	ldrb	r3, [r3, #0]
 800536c:	015a      	lsls	r2, r3, #5
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	4413      	add	r3, r2
 8005372:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800537c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005380:	d0e7      	beq.n	8005352 <USB_EPStopXfer+0x82>
 8005382:	e048      	b.n	8005416 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	781b      	ldrb	r3, [r3, #0]
 8005388:	015a      	lsls	r2, r3, #5
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	4413      	add	r3, r2
 800538e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005398:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800539c:	d13b      	bne.n	8005416 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	781b      	ldrb	r3, [r3, #0]
 80053a2:	015a      	lsls	r2, r3, #5
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	4413      	add	r3, r2
 80053a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	683a      	ldr	r2, [r7, #0]
 80053b0:	7812      	ldrb	r2, [r2, #0]
 80053b2:	0151      	lsls	r1, r2, #5
 80053b4:	693a      	ldr	r2, [r7, #16]
 80053b6:	440a      	add	r2, r1
 80053b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053bc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80053c0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	781b      	ldrb	r3, [r3, #0]
 80053c6:	015a      	lsls	r2, r3, #5
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	4413      	add	r3, r2
 80053cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	683a      	ldr	r2, [r7, #0]
 80053d4:	7812      	ldrb	r2, [r2, #0]
 80053d6:	0151      	lsls	r1, r2, #5
 80053d8:	693a      	ldr	r2, [r7, #16]
 80053da:	440a      	add	r2, r1
 80053dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80053e4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	3301      	adds	r3, #1
 80053ea:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f242 7210 	movw	r2, #10000	; 0x2710
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d902      	bls.n	80053fc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	75fb      	strb	r3, [r7, #23]
          break;
 80053fa:	e00c      	b.n	8005416 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	781b      	ldrb	r3, [r3, #0]
 8005400:	015a      	lsls	r2, r3, #5
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	4413      	add	r3, r2
 8005406:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005410:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005414:	d0e7      	beq.n	80053e6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005416:	7dfb      	ldrb	r3, [r7, #23]
}
 8005418:	4618      	mov	r0, r3
 800541a:	371c      	adds	r7, #28
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr

08005424 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005424:	b480      	push	{r7}
 8005426:	b089      	sub	sp, #36	; 0x24
 8005428:	af00      	add	r7, sp, #0
 800542a:	60f8      	str	r0, [r7, #12]
 800542c:	60b9      	str	r1, [r7, #8]
 800542e:	4611      	mov	r1, r2
 8005430:	461a      	mov	r2, r3
 8005432:	460b      	mov	r3, r1
 8005434:	71fb      	strb	r3, [r7, #7]
 8005436:	4613      	mov	r3, r2
 8005438:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005442:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005446:	2b00      	cmp	r3, #0
 8005448:	d123      	bne.n	8005492 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800544a:	88bb      	ldrh	r3, [r7, #4]
 800544c:	3303      	adds	r3, #3
 800544e:	089b      	lsrs	r3, r3, #2
 8005450:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005452:	2300      	movs	r3, #0
 8005454:	61bb      	str	r3, [r7, #24]
 8005456:	e018      	b.n	800548a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005458:	79fb      	ldrb	r3, [r7, #7]
 800545a:	031a      	lsls	r2, r3, #12
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	4413      	add	r3, r2
 8005460:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005464:	461a      	mov	r2, r3
 8005466:	69fb      	ldr	r3, [r7, #28]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800546c:	69fb      	ldr	r3, [r7, #28]
 800546e:	3301      	adds	r3, #1
 8005470:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005472:	69fb      	ldr	r3, [r7, #28]
 8005474:	3301      	adds	r3, #1
 8005476:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005478:	69fb      	ldr	r3, [r7, #28]
 800547a:	3301      	adds	r3, #1
 800547c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800547e:	69fb      	ldr	r3, [r7, #28]
 8005480:	3301      	adds	r3, #1
 8005482:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005484:	69bb      	ldr	r3, [r7, #24]
 8005486:	3301      	adds	r3, #1
 8005488:	61bb      	str	r3, [r7, #24]
 800548a:	69ba      	ldr	r2, [r7, #24]
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	429a      	cmp	r2, r3
 8005490:	d3e2      	bcc.n	8005458 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005492:	2300      	movs	r3, #0
}
 8005494:	4618      	mov	r0, r3
 8005496:	3724      	adds	r7, #36	; 0x24
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr

080054a0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b08b      	sub	sp, #44	; 0x2c
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	60f8      	str	r0, [r7, #12]
 80054a8:	60b9      	str	r1, [r7, #8]
 80054aa:	4613      	mov	r3, r2
 80054ac:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80054b6:	88fb      	ldrh	r3, [r7, #6]
 80054b8:	089b      	lsrs	r3, r3, #2
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80054be:	88fb      	ldrh	r3, [r7, #6]
 80054c0:	f003 0303 	and.w	r3, r3, #3
 80054c4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80054c6:	2300      	movs	r3, #0
 80054c8:	623b      	str	r3, [r7, #32]
 80054ca:	e014      	b.n	80054f6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80054cc:	69bb      	ldr	r3, [r7, #24]
 80054ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d6:	601a      	str	r2, [r3, #0]
    pDest++;
 80054d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054da:	3301      	adds	r3, #1
 80054dc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80054de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e0:	3301      	adds	r3, #1
 80054e2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80054e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e6:	3301      	adds	r3, #1
 80054e8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80054ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ec:	3301      	adds	r3, #1
 80054ee:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80054f0:	6a3b      	ldr	r3, [r7, #32]
 80054f2:	3301      	adds	r3, #1
 80054f4:	623b      	str	r3, [r7, #32]
 80054f6:	6a3a      	ldr	r2, [r7, #32]
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	429a      	cmp	r2, r3
 80054fc:	d3e6      	bcc.n	80054cc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80054fe:	8bfb      	ldrh	r3, [r7, #30]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d01e      	beq.n	8005542 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005504:	2300      	movs	r3, #0
 8005506:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005508:	69bb      	ldr	r3, [r7, #24]
 800550a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800550e:	461a      	mov	r2, r3
 8005510:	f107 0310 	add.w	r3, r7, #16
 8005514:	6812      	ldr	r2, [r2, #0]
 8005516:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005518:	693a      	ldr	r2, [r7, #16]
 800551a:	6a3b      	ldr	r3, [r7, #32]
 800551c:	b2db      	uxtb	r3, r3
 800551e:	00db      	lsls	r3, r3, #3
 8005520:	fa22 f303 	lsr.w	r3, r2, r3
 8005524:	b2da      	uxtb	r2, r3
 8005526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005528:	701a      	strb	r2, [r3, #0]
      i++;
 800552a:	6a3b      	ldr	r3, [r7, #32]
 800552c:	3301      	adds	r3, #1
 800552e:	623b      	str	r3, [r7, #32]
      pDest++;
 8005530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005532:	3301      	adds	r3, #1
 8005534:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005536:	8bfb      	ldrh	r3, [r7, #30]
 8005538:	3b01      	subs	r3, #1
 800553a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800553c:	8bfb      	ldrh	r3, [r7, #30]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d1ea      	bne.n	8005518 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005544:	4618      	mov	r0, r3
 8005546:	372c      	adds	r7, #44	; 0x2c
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr

08005550 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005550:	b480      	push	{r7}
 8005552:	b085      	sub	sp, #20
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
 8005558:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	781b      	ldrb	r3, [r3, #0]
 8005562:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	785b      	ldrb	r3, [r3, #1]
 8005568:	2b01      	cmp	r3, #1
 800556a:	d12c      	bne.n	80055c6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	015a      	lsls	r2, r3, #5
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	4413      	add	r3, r2
 8005574:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	2b00      	cmp	r3, #0
 800557c:	db12      	blt.n	80055a4 <USB_EPSetStall+0x54>
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d00f      	beq.n	80055a4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	015a      	lsls	r2, r3, #5
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	4413      	add	r3, r2
 800558c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	68ba      	ldr	r2, [r7, #8]
 8005594:	0151      	lsls	r1, r2, #5
 8005596:	68fa      	ldr	r2, [r7, #12]
 8005598:	440a      	add	r2, r1
 800559a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800559e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80055a2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	015a      	lsls	r2, r3, #5
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	4413      	add	r3, r2
 80055ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	68ba      	ldr	r2, [r7, #8]
 80055b4:	0151      	lsls	r1, r2, #5
 80055b6:	68fa      	ldr	r2, [r7, #12]
 80055b8:	440a      	add	r2, r1
 80055ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055be:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80055c2:	6013      	str	r3, [r2, #0]
 80055c4:	e02b      	b.n	800561e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	015a      	lsls	r2, r3, #5
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	4413      	add	r3, r2
 80055ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	db12      	blt.n	80055fe <USB_EPSetStall+0xae>
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d00f      	beq.n	80055fe <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	015a      	lsls	r2, r3, #5
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	4413      	add	r3, r2
 80055e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	68ba      	ldr	r2, [r7, #8]
 80055ee:	0151      	lsls	r1, r2, #5
 80055f0:	68fa      	ldr	r2, [r7, #12]
 80055f2:	440a      	add	r2, r1
 80055f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055f8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80055fc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	015a      	lsls	r2, r3, #5
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	4413      	add	r3, r2
 8005606:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	68ba      	ldr	r2, [r7, #8]
 800560e:	0151      	lsls	r1, r2, #5
 8005610:	68fa      	ldr	r2, [r7, #12]
 8005612:	440a      	add	r2, r1
 8005614:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005618:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800561c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800561e:	2300      	movs	r3, #0
}
 8005620:	4618      	mov	r0, r3
 8005622:	3714      	adds	r7, #20
 8005624:	46bd      	mov	sp, r7
 8005626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562a:	4770      	bx	lr

0800562c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800562c:	b480      	push	{r7}
 800562e:	b085      	sub	sp, #20
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
 8005634:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	781b      	ldrb	r3, [r3, #0]
 800563e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	785b      	ldrb	r3, [r3, #1]
 8005644:	2b01      	cmp	r3, #1
 8005646:	d128      	bne.n	800569a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	015a      	lsls	r2, r3, #5
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	4413      	add	r3, r2
 8005650:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	68ba      	ldr	r2, [r7, #8]
 8005658:	0151      	lsls	r1, r2, #5
 800565a:	68fa      	ldr	r2, [r7, #12]
 800565c:	440a      	add	r2, r1
 800565e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005662:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005666:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	791b      	ldrb	r3, [r3, #4]
 800566c:	2b03      	cmp	r3, #3
 800566e:	d003      	beq.n	8005678 <USB_EPClearStall+0x4c>
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	791b      	ldrb	r3, [r3, #4]
 8005674:	2b02      	cmp	r3, #2
 8005676:	d138      	bne.n	80056ea <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	015a      	lsls	r2, r3, #5
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	4413      	add	r3, r2
 8005680:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	68ba      	ldr	r2, [r7, #8]
 8005688:	0151      	lsls	r1, r2, #5
 800568a:	68fa      	ldr	r2, [r7, #12]
 800568c:	440a      	add	r2, r1
 800568e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005692:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005696:	6013      	str	r3, [r2, #0]
 8005698:	e027      	b.n	80056ea <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	015a      	lsls	r2, r3, #5
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	4413      	add	r3, r2
 80056a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	68ba      	ldr	r2, [r7, #8]
 80056aa:	0151      	lsls	r1, r2, #5
 80056ac:	68fa      	ldr	r2, [r7, #12]
 80056ae:	440a      	add	r2, r1
 80056b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056b4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80056b8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	791b      	ldrb	r3, [r3, #4]
 80056be:	2b03      	cmp	r3, #3
 80056c0:	d003      	beq.n	80056ca <USB_EPClearStall+0x9e>
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	791b      	ldrb	r3, [r3, #4]
 80056c6:	2b02      	cmp	r3, #2
 80056c8:	d10f      	bne.n	80056ea <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	015a      	lsls	r2, r3, #5
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	4413      	add	r3, r2
 80056d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	68ba      	ldr	r2, [r7, #8]
 80056da:	0151      	lsls	r1, r2, #5
 80056dc:	68fa      	ldr	r2, [r7, #12]
 80056de:	440a      	add	r2, r1
 80056e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056e8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80056ea:	2300      	movs	r3, #0
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	3714      	adds	r7, #20
 80056f0:	46bd      	mov	sp, r7
 80056f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f6:	4770      	bx	lr

080056f8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b085      	sub	sp, #20
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
 8005700:	460b      	mov	r3, r1
 8005702:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	68fa      	ldr	r2, [r7, #12]
 8005712:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005716:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800571a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005722:	681a      	ldr	r2, [r3, #0]
 8005724:	78fb      	ldrb	r3, [r7, #3]
 8005726:	011b      	lsls	r3, r3, #4
 8005728:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800572c:	68f9      	ldr	r1, [r7, #12]
 800572e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005732:	4313      	orrs	r3, r2
 8005734:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005736:	2300      	movs	r3, #0
}
 8005738:	4618      	mov	r0, r3
 800573a:	3714      	adds	r7, #20
 800573c:	46bd      	mov	sp, r7
 800573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005742:	4770      	bx	lr

08005744 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005744:	b480      	push	{r7}
 8005746:	b085      	sub	sp, #20
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	68fa      	ldr	r2, [r7, #12]
 800575a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800575e:	f023 0303 	bic.w	r3, r3, #3
 8005762:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	68fa      	ldr	r2, [r7, #12]
 800576e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005772:	f023 0302 	bic.w	r3, r3, #2
 8005776:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005778:	2300      	movs	r3, #0
}
 800577a:	4618      	mov	r0, r3
 800577c:	3714      	adds	r7, #20
 800577e:	46bd      	mov	sp, r7
 8005780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005784:	4770      	bx	lr

08005786 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005786:	b480      	push	{r7}
 8005788:	b085      	sub	sp, #20
 800578a:	af00      	add	r7, sp, #0
 800578c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	68fa      	ldr	r2, [r7, #12]
 800579c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80057a0:	f023 0303 	bic.w	r3, r3, #3
 80057a4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	68fa      	ldr	r2, [r7, #12]
 80057b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80057b4:	f043 0302 	orr.w	r3, r3, #2
 80057b8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80057ba:	2300      	movs	r3, #0
}
 80057bc:	4618      	mov	r0, r3
 80057be:	3714      	adds	r7, #20
 80057c0:	46bd      	mov	sp, r7
 80057c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c6:	4770      	bx	lr

080057c8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b085      	sub	sp, #20
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	695b      	ldr	r3, [r3, #20]
 80057d4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	699b      	ldr	r3, [r3, #24]
 80057da:	68fa      	ldr	r2, [r7, #12]
 80057dc:	4013      	ands	r3, r2
 80057de:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80057e0:	68fb      	ldr	r3, [r7, #12]
}
 80057e2:	4618      	mov	r0, r3
 80057e4:	3714      	adds	r7, #20
 80057e6:	46bd      	mov	sp, r7
 80057e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ec:	4770      	bx	lr

080057ee <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80057ee:	b480      	push	{r7}
 80057f0:	b085      	sub	sp, #20
 80057f2:	af00      	add	r7, sp, #0
 80057f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005800:	699b      	ldr	r3, [r3, #24]
 8005802:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800580a:	69db      	ldr	r3, [r3, #28]
 800580c:	68ba      	ldr	r2, [r7, #8]
 800580e:	4013      	ands	r3, r2
 8005810:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	0c1b      	lsrs	r3, r3, #16
}
 8005816:	4618      	mov	r0, r3
 8005818:	3714      	adds	r7, #20
 800581a:	46bd      	mov	sp, r7
 800581c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005820:	4770      	bx	lr

08005822 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005822:	b480      	push	{r7}
 8005824:	b085      	sub	sp, #20
 8005826:	af00      	add	r7, sp, #0
 8005828:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005834:	699b      	ldr	r3, [r3, #24]
 8005836:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800583e:	69db      	ldr	r3, [r3, #28]
 8005840:	68ba      	ldr	r2, [r7, #8]
 8005842:	4013      	ands	r3, r2
 8005844:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	b29b      	uxth	r3, r3
}
 800584a:	4618      	mov	r0, r3
 800584c:	3714      	adds	r7, #20
 800584e:	46bd      	mov	sp, r7
 8005850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005854:	4770      	bx	lr

08005856 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005856:	b480      	push	{r7}
 8005858:	b085      	sub	sp, #20
 800585a:	af00      	add	r7, sp, #0
 800585c:	6078      	str	r0, [r7, #4]
 800585e:	460b      	mov	r3, r1
 8005860:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005866:	78fb      	ldrb	r3, [r7, #3]
 8005868:	015a      	lsls	r2, r3, #5
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	4413      	add	r3, r2
 800586e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800587c:	695b      	ldr	r3, [r3, #20]
 800587e:	68ba      	ldr	r2, [r7, #8]
 8005880:	4013      	ands	r3, r2
 8005882:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005884:	68bb      	ldr	r3, [r7, #8]
}
 8005886:	4618      	mov	r0, r3
 8005888:	3714      	adds	r7, #20
 800588a:	46bd      	mov	sp, r7
 800588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005890:	4770      	bx	lr

08005892 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005892:	b480      	push	{r7}
 8005894:	b087      	sub	sp, #28
 8005896:	af00      	add	r7, sp, #0
 8005898:	6078      	str	r0, [r7, #4]
 800589a:	460b      	mov	r3, r1
 800589c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058a8:	691b      	ldr	r3, [r3, #16]
 80058aa:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058b4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80058b6:	78fb      	ldrb	r3, [r7, #3]
 80058b8:	f003 030f 	and.w	r3, r3, #15
 80058bc:	68fa      	ldr	r2, [r7, #12]
 80058be:	fa22 f303 	lsr.w	r3, r2, r3
 80058c2:	01db      	lsls	r3, r3, #7
 80058c4:	b2db      	uxtb	r3, r3
 80058c6:	693a      	ldr	r2, [r7, #16]
 80058c8:	4313      	orrs	r3, r2
 80058ca:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80058cc:	78fb      	ldrb	r3, [r7, #3]
 80058ce:	015a      	lsls	r2, r3, #5
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	4413      	add	r3, r2
 80058d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	693a      	ldr	r2, [r7, #16]
 80058dc:	4013      	ands	r3, r2
 80058de:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80058e0:	68bb      	ldr	r3, [r7, #8]
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	371c      	adds	r7, #28
 80058e6:	46bd      	mov	sp, r7
 80058e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ec:	4770      	bx	lr

080058ee <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80058ee:	b480      	push	{r7}
 80058f0:	b083      	sub	sp, #12
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	695b      	ldr	r3, [r3, #20]
 80058fa:	f003 0301 	and.w	r3, r3, #1
}
 80058fe:	4618      	mov	r0, r3
 8005900:	370c      	adds	r7, #12
 8005902:	46bd      	mov	sp, r7
 8005904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005908:	4770      	bx	lr

0800590a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800590a:	b480      	push	{r7}
 800590c:	b085      	sub	sp, #20
 800590e:	af00      	add	r7, sp, #0
 8005910:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	68fa      	ldr	r2, [r7, #12]
 8005920:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005924:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005928:	f023 0307 	bic.w	r3, r3, #7
 800592c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	68fa      	ldr	r2, [r7, #12]
 8005938:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800593c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005940:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005942:	2300      	movs	r3, #0
}
 8005944:	4618      	mov	r0, r3
 8005946:	3714      	adds	r7, #20
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr

08005950 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005950:	b480      	push	{r7}
 8005952:	b087      	sub	sp, #28
 8005954:	af00      	add	r7, sp, #0
 8005956:	60f8      	str	r0, [r7, #12]
 8005958:	460b      	mov	r3, r1
 800595a:	607a      	str	r2, [r7, #4]
 800595c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	333c      	adds	r3, #60	; 0x3c
 8005966:	3304      	adds	r3, #4
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	4a26      	ldr	r2, [pc, #152]	; (8005a08 <USB_EP0_OutStart+0xb8>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d90a      	bls.n	800598a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005980:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005984:	d101      	bne.n	800598a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005986:	2300      	movs	r3, #0
 8005988:	e037      	b.n	80059fa <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005990:	461a      	mov	r2, r3
 8005992:	2300      	movs	r3, #0
 8005994:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800599c:	691b      	ldr	r3, [r3, #16]
 800599e:	697a      	ldr	r2, [r7, #20]
 80059a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80059a8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059b0:	691b      	ldr	r3, [r3, #16]
 80059b2:	697a      	ldr	r2, [r7, #20]
 80059b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059b8:	f043 0318 	orr.w	r3, r3, #24
 80059bc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059c4:	691b      	ldr	r3, [r3, #16]
 80059c6:	697a      	ldr	r2, [r7, #20]
 80059c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059cc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80059d0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80059d2:	7afb      	ldrb	r3, [r7, #11]
 80059d4:	2b01      	cmp	r3, #1
 80059d6:	d10f      	bne.n	80059f8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059de:	461a      	mov	r2, r3
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	697a      	ldr	r2, [r7, #20]
 80059ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059f2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80059f6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80059f8:	2300      	movs	r3, #0
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	371c      	adds	r7, #28
 80059fe:	46bd      	mov	sp, r7
 8005a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a04:	4770      	bx	lr
 8005a06:	bf00      	nop
 8005a08:	4f54300a 	.word	0x4f54300a

08005a0c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b085      	sub	sp, #20
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005a14:	2300      	movs	r3, #0
 8005a16:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	3301      	adds	r3, #1
 8005a1c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	4a13      	ldr	r2, [pc, #76]	; (8005a70 <USB_CoreReset+0x64>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d901      	bls.n	8005a2a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005a26:	2303      	movs	r3, #3
 8005a28:	e01b      	b.n	8005a62 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	691b      	ldr	r3, [r3, #16]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	daf2      	bge.n	8005a18 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005a32:	2300      	movs	r3, #0
 8005a34:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	691b      	ldr	r3, [r3, #16]
 8005a3a:	f043 0201 	orr.w	r2, r3, #1
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	3301      	adds	r3, #1
 8005a46:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	4a09      	ldr	r2, [pc, #36]	; (8005a70 <USB_CoreReset+0x64>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d901      	bls.n	8005a54 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005a50:	2303      	movs	r3, #3
 8005a52:	e006      	b.n	8005a62 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	691b      	ldr	r3, [r3, #16]
 8005a58:	f003 0301 	and.w	r3, r3, #1
 8005a5c:	2b01      	cmp	r3, #1
 8005a5e:	d0f0      	beq.n	8005a42 <USB_CoreReset+0x36>

  return HAL_OK;
 8005a60:	2300      	movs	r3, #0
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	3714      	adds	r7, #20
 8005a66:	46bd      	mov	sp, r7
 8005a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6c:	4770      	bx	lr
 8005a6e:	bf00      	nop
 8005a70:	00030d40 	.word	0x00030d40

08005a74 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b084      	sub	sp, #16
 8005a78:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8005a7a:	2100      	movs	r1, #0
 8005a7c:	2000      	movs	r0, #0
 8005a7e:	f006 f9a5 	bl	800bdcc <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 8005a82:	4b23      	ldr	r3, [pc, #140]	; (8005b10 <MX_LWIP_Init+0x9c>)
 8005a84:	2200      	movs	r2, #0
 8005a86:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 8005a88:	4b22      	ldr	r3, [pc, #136]	; (8005b14 <MX_LWIP_Init+0xa0>)
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 8005a8e:	4b22      	ldr	r3, [pc, #136]	; (8005b18 <MX_LWIP_Init+0xa4>)
 8005a90:	2200      	movs	r2, #0
 8005a92:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8005a94:	4b21      	ldr	r3, [pc, #132]	; (8005b1c <MX_LWIP_Init+0xa8>)
 8005a96:	9302      	str	r3, [sp, #8]
 8005a98:	4b21      	ldr	r3, [pc, #132]	; (8005b20 <MX_LWIP_Init+0xac>)
 8005a9a:	9301      	str	r3, [sp, #4]
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	9300      	str	r3, [sp, #0]
 8005aa0:	4b1d      	ldr	r3, [pc, #116]	; (8005b18 <MX_LWIP_Init+0xa4>)
 8005aa2:	4a1c      	ldr	r2, [pc, #112]	; (8005b14 <MX_LWIP_Init+0xa0>)
 8005aa4:	491a      	ldr	r1, [pc, #104]	; (8005b10 <MX_LWIP_Init+0x9c>)
 8005aa6:	481f      	ldr	r0, [pc, #124]	; (8005b24 <MX_LWIP_Init+0xb0>)
 8005aa8:	f007 f812 	bl	800cad0 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8005aac:	481d      	ldr	r0, [pc, #116]	; (8005b24 <MX_LWIP_Init+0xb0>)
 8005aae:	f007 f9c9 	bl	800ce44 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8005ab2:	4b1c      	ldr	r3, [pc, #112]	; (8005b24 <MX_LWIP_Init+0xb0>)
 8005ab4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005ab8:	089b      	lsrs	r3, r3, #2
 8005aba:	f003 0301 	and.w	r3, r3, #1
 8005abe:	b2db      	uxtb	r3, r3
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d003      	beq.n	8005acc <MX_LWIP_Init+0x58>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8005ac4:	4817      	ldr	r0, [pc, #92]	; (8005b24 <MX_LWIP_Init+0xb0>)
 8005ac6:	f007 f9cd 	bl	800ce64 <netif_set_up>
 8005aca:	e002      	b.n	8005ad2 <MX_LWIP_Init+0x5e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8005acc:	4815      	ldr	r0, [pc, #84]	; (8005b24 <MX_LWIP_Init+0xb0>)
 8005ace:	f007 fa35 	bl	800cf3c <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8005ad2:	4915      	ldr	r1, [pc, #84]	; (8005b28 <MX_LWIP_Init+0xb4>)
 8005ad4:	4813      	ldr	r0, [pc, #76]	; (8005b24 <MX_LWIP_Init+0xb0>)
 8005ad6:	f007 fa63 	bl	800cfa0 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8005ada:	2224      	movs	r2, #36	; 0x24
 8005adc:	2100      	movs	r1, #0
 8005ade:	4813      	ldr	r0, [pc, #76]	; (8005b2c <MX_LWIP_Init+0xb8>)
 8005ae0:	f012 ffd4 	bl	8018a8c <memset>
  attributes.name = "EthLink";
 8005ae4:	4b11      	ldr	r3, [pc, #68]	; (8005b2c <MX_LWIP_Init+0xb8>)
 8005ae6:	4a12      	ldr	r2, [pc, #72]	; (8005b30 <MX_LWIP_Init+0xbc>)
 8005ae8:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8005aea:	4b10      	ldr	r3, [pc, #64]	; (8005b2c <MX_LWIP_Init+0xb8>)
 8005aec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005af0:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 8005af2:	4b0e      	ldr	r3, [pc, #56]	; (8005b2c <MX_LWIP_Init+0xb8>)
 8005af4:	2210      	movs	r2, #16
 8005af6:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 8005af8:	4a0c      	ldr	r2, [pc, #48]	; (8005b2c <MX_LWIP_Init+0xb8>)
 8005afa:	490a      	ldr	r1, [pc, #40]	; (8005b24 <MX_LWIP_Init+0xb0>)
 8005afc:	480d      	ldr	r0, [pc, #52]	; (8005b34 <MX_LWIP_Init+0xc0>)
 8005afe:	f002 faac 	bl	800805a <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 8005b02:	4808      	ldr	r0, [pc, #32]	; (8005b24 <MX_LWIP_Init+0xb0>)
 8005b04:	f00e fbb2 	bl	801426c <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8005b08:	bf00      	nop
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}
 8005b0e:	bf00      	nop
 8005b10:	2000021c 	.word	0x2000021c
 8005b14:	20000220 	.word	0x20000220
 8005b18:	20000224 	.word	0x20000224
 8005b1c:	0800bd09 	.word	0x0800bd09
 8005b20:	08005e5d 	.word	0x08005e5d
 8005b24:	200001e4 	.word	0x200001e4
 8005b28:	08005b39 	.word	0x08005b39
 8005b2c:	20000228 	.word	0x20000228
 8005b30:	08019b60 	.word	0x08019b60
 8005b34:	08005f07 	.word	0x08005f07

08005b38 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b083      	sub	sp, #12
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8005b40:	bf00      	nop
 8005b42:	370c      	adds	r7, #12
 8005b44:	46bd      	mov	sp, r7
 8005b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4a:	4770      	bx	lr

08005b4c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b08e      	sub	sp, #56	; 0x38
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8005b54:	2300      	movs	r3, #0
 8005b56:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

/* USER CODE END low_level_init Variables Initialization for User BSP */
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8005b5a:	4b4e      	ldr	r3, [pc, #312]	; (8005c94 <low_level_init+0x148>)
 8005b5c:	4a4e      	ldr	r2, [pc, #312]	; (8005c98 <low_level_init+0x14c>)
 8005b5e:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8005b60:	2300      	movs	r3, #0
 8005b62:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8005b64:	2380      	movs	r3, #128	; 0x80
 8005b66:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8005b68:	23e1      	movs	r3, #225	; 0xe1
 8005b6a:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8005b70:	2300      	movs	r3, #0
 8005b72:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8005b74:	2300      	movs	r3, #0
 8005b76:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8005b78:	4a46      	ldr	r2, [pc, #280]	; (8005c94 <low_level_init+0x148>)
 8005b7a:	f107 0308 	add.w	r3, r7, #8
 8005b7e:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8005b80:	4b44      	ldr	r3, [pc, #272]	; (8005c94 <low_level_init+0x148>)
 8005b82:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005b86:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8005b88:	4b42      	ldr	r3, [pc, #264]	; (8005c94 <low_level_init+0x148>)
 8005b8a:	4a44      	ldr	r2, [pc, #272]	; (8005c9c <low_level_init+0x150>)
 8005b8c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8005b8e:	4b41      	ldr	r3, [pc, #260]	; (8005c94 <low_level_init+0x148>)
 8005b90:	4a43      	ldr	r2, [pc, #268]	; (8005ca0 <low_level_init+0x154>)
 8005b92:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8005b94:	4b3f      	ldr	r3, [pc, #252]	; (8005c94 <low_level_init+0x148>)
 8005b96:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8005b9a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8005b9c:	483d      	ldr	r0, [pc, #244]	; (8005c94 <low_level_init+0x148>)
 8005b9e:	f7fb f91f 	bl	8000de0 <HAL_ETH_Init>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8005ba8:	2238      	movs	r2, #56	; 0x38
 8005baa:	2100      	movs	r1, #0
 8005bac:	483d      	ldr	r0, [pc, #244]	; (8005ca4 <low_level_init+0x158>)
 8005bae:	f012 ff6d 	bl	8018a8c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8005bb2:	4b3c      	ldr	r3, [pc, #240]	; (8005ca4 <low_level_init+0x158>)
 8005bb4:	2221      	movs	r2, #33	; 0x21
 8005bb6:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8005bb8:	4b3a      	ldr	r3, [pc, #232]	; (8005ca4 <low_level_init+0x158>)
 8005bba:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8005bbe:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8005bc0:	4b38      	ldr	r3, [pc, #224]	; (8005ca4 <low_level_init+0x158>)
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8005bc6:	4838      	ldr	r0, [pc, #224]	; (8005ca8 <low_level_init+0x15c>)
 8005bc8:	f006 fe3c 	bl	800c844 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2206      	movs	r2, #6
 8005bd0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8005bd4:	4b2f      	ldr	r3, [pc, #188]	; (8005c94 <low_level_init+0x148>)
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	781a      	ldrb	r2, [r3, #0]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8005be0:	4b2c      	ldr	r3, [pc, #176]	; (8005c94 <low_level_init+0x148>)
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	785a      	ldrb	r2, [r3, #1]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8005bec:	4b29      	ldr	r3, [pc, #164]	; (8005c94 <low_level_init+0x148>)
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	789a      	ldrb	r2, [r3, #2]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8005bf8:	4b26      	ldr	r3, [pc, #152]	; (8005c94 <low_level_init+0x148>)
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	78da      	ldrb	r2, [r3, #3]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8005c04:	4b23      	ldr	r3, [pc, #140]	; (8005c94 <low_level_init+0x148>)
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	791a      	ldrb	r2, [r3, #4]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8005c10:	4b20      	ldr	r3, [pc, #128]	; (8005c94 <low_level_init+0x148>)
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	795a      	ldrb	r2, [r3, #5]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8005c22:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005c2a:	f043 030a 	orr.w	r3, r3, #10
 8005c2e:	b2da      	uxtb	r2, r3
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8005c36:	2200      	movs	r2, #0
 8005c38:	2101      	movs	r1, #1
 8005c3a:	2001      	movs	r0, #1
 8005c3c:	f002 fbc8 	bl	80083d0 <osSemaphoreNew>
 8005c40:	4603      	mov	r3, r0
 8005c42:	4a1a      	ldr	r2, [pc, #104]	; (8005cac <low_level_init+0x160>)
 8005c44:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8005c46:	2200      	movs	r2, #0
 8005c48:	2101      	movs	r1, #1
 8005c4a:	2001      	movs	r0, #1
 8005c4c:	f002 fbc0 	bl	80083d0 <osSemaphoreNew>
 8005c50:	4603      	mov	r3, r0
 8005c52:	4a17      	ldr	r2, [pc, #92]	; (8005cb0 <low_level_init+0x164>)
 8005c54:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8005c56:	f107 0310 	add.w	r3, r7, #16
 8005c5a:	2224      	movs	r2, #36	; 0x24
 8005c5c:	2100      	movs	r1, #0
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f012 ff14 	bl	8018a8c <memset>
  attributes.name = "EthIf";
 8005c64:	4b13      	ldr	r3, [pc, #76]	; (8005cb4 <low_level_init+0x168>)
 8005c66:	613b      	str	r3, [r7, #16]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8005c68:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8005c6c:	627b      	str	r3, [r7, #36]	; 0x24
  attributes.priority = osPriorityRealtime;
 8005c6e:	2330      	movs	r3, #48	; 0x30
 8005c70:	62bb      	str	r3, [r7, #40]	; 0x28
  osThreadNew(ethernetif_input, netif, &attributes);
 8005c72:	f107 0310 	add.w	r3, r7, #16
 8005c76:	461a      	mov	r2, r3
 8005c78:	6879      	ldr	r1, [r7, #4]
 8005c7a:	480f      	ldr	r0, [pc, #60]	; (8005cb8 <low_level_init+0x16c>)
 8005c7c:	f002 f9ed 	bl	800805a <osThreadNew>

/* USER CODE BEGIN low_level_init Code 1 for User BSP */

/* USER CODE END low_level_init Code 1 for User BSP */

  if (hal_eth_init_status == HAL_OK)
 8005c80:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d001      	beq.n	8005c8c <low_level_init+0x140>
/* USER CODE END low_level_init Code 2 for User BSP */

  }
  else
  {
    Error_Handler();
 8005c88:	f7fa fd9e 	bl	80007c8 <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8005c8c:	bf00      	nop
 8005c8e:	3738      	adds	r7, #56	; 0x38
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}
 8005c94:	20004d20 	.word	0x20004d20
 8005c98:	40028000 	.word	0x40028000
 8005c9c:	20004c78 	.word	0x20004c78
 8005ca0:	20004bd8 	.word	0x20004bd8
 8005ca4:	20004dd0 	.word	0x20004dd0
 8005ca8:	0801ca88 	.word	0x0801ca88
 8005cac:	20004d18 	.word	0x20004d18
 8005cb0:	20004d1c 	.word	0x20004d1c
 8005cb4:	08019b68 	.word	0x08019b68
 8005cb8:	08005e09 	.word	0x08005e09

08005cbc <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b092      	sub	sp, #72	; 0x48
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
 8005cc4:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT];

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8005cd4:	f107 030c 	add.w	r3, r7, #12
 8005cd8:	2230      	movs	r2, #48	; 0x30
 8005cda:	2100      	movs	r1, #0
 8005cdc:	4618      	mov	r0, r3
 8005cde:	f012 fed5 	bl	8018a8c <memset>

  for(q = p; q != NULL; q = q->next)
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	643b      	str	r3, [r7, #64]	; 0x40
 8005ce6:	e045      	b.n	8005d74 <low_level_output+0xb8>
  {
    if(i >= ETH_TX_DESC_CNT)
 8005ce8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cea:	2b03      	cmp	r3, #3
 8005cec:	d902      	bls.n	8005cf4 <low_level_output+0x38>
      return ERR_IF;
 8005cee:	f06f 030b 	mvn.w	r3, #11
 8005cf2:	e065      	b.n	8005dc0 <low_level_output+0x104>

    Txbuffer[i].buffer = q->payload;
 8005cf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cf6:	6859      	ldr	r1, [r3, #4]
 8005cf8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005cfa:	4613      	mov	r3, r2
 8005cfc:	005b      	lsls	r3, r3, #1
 8005cfe:	4413      	add	r3, r2
 8005d00:	009b      	lsls	r3, r3, #2
 8005d02:	3348      	adds	r3, #72	; 0x48
 8005d04:	443b      	add	r3, r7
 8005d06:	3b3c      	subs	r3, #60	; 0x3c
 8005d08:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8005d0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d0c:	895b      	ldrh	r3, [r3, #10]
 8005d0e:	4619      	mov	r1, r3
 8005d10:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d12:	4613      	mov	r3, r2
 8005d14:	005b      	lsls	r3, r3, #1
 8005d16:	4413      	add	r3, r2
 8005d18:	009b      	lsls	r3, r3, #2
 8005d1a:	3348      	adds	r3, #72	; 0x48
 8005d1c:	443b      	add	r3, r7
 8005d1e:	3b38      	subs	r3, #56	; 0x38
 8005d20:	6019      	str	r1, [r3, #0]

    if(i>0)
 8005d22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d011      	beq.n	8005d4c <low_level_output+0x90>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8005d28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d2a:	1e5a      	subs	r2, r3, #1
 8005d2c:	f107 000c 	add.w	r0, r7, #12
 8005d30:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005d32:	460b      	mov	r3, r1
 8005d34:	005b      	lsls	r3, r3, #1
 8005d36:	440b      	add	r3, r1
 8005d38:	009b      	lsls	r3, r3, #2
 8005d3a:	18c1      	adds	r1, r0, r3
 8005d3c:	4613      	mov	r3, r2
 8005d3e:	005b      	lsls	r3, r3, #1
 8005d40:	4413      	add	r3, r2
 8005d42:	009b      	lsls	r3, r3, #2
 8005d44:	3348      	adds	r3, #72	; 0x48
 8005d46:	443b      	add	r3, r7
 8005d48:	3b34      	subs	r3, #52	; 0x34
 8005d4a:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8005d4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d109      	bne.n	8005d68 <low_level_output+0xac>
    {
      Txbuffer[i].next = NULL;
 8005d54:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d56:	4613      	mov	r3, r2
 8005d58:	005b      	lsls	r3, r3, #1
 8005d5a:	4413      	add	r3, r2
 8005d5c:	009b      	lsls	r3, r3, #2
 8005d5e:	3348      	adds	r3, #72	; 0x48
 8005d60:	443b      	add	r3, r7
 8005d62:	3b34      	subs	r3, #52	; 0x34
 8005d64:	2200      	movs	r2, #0
 8005d66:	601a      	str	r2, [r3, #0]
    }

    i++;
 8005d68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d6a:	3301      	adds	r3, #1
 8005d6c:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8005d6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	643b      	str	r3, [r7, #64]	; 0x40
 8005d74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d1b6      	bne.n	8005ce8 <low_level_output+0x2c>
  }

  TxConfig.Length = p->tot_len;
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	891b      	ldrh	r3, [r3, #8]
 8005d7e:	461a      	mov	r2, r3
 8005d80:	4b11      	ldr	r3, [pc, #68]	; (8005dc8 <low_level_output+0x10c>)
 8005d82:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8005d84:	4a10      	ldr	r2, [pc, #64]	; (8005dc8 <low_level_output+0x10c>)
 8005d86:	f107 030c 	add.w	r3, r7, #12
 8005d8a:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8005d8c:	4a0e      	ldr	r2, [pc, #56]	; (8005dc8 <low_level_output+0x10c>)
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 8005d92:	6838      	ldr	r0, [r7, #0]
 8005d94:	f007 fd58 	bl	800d848 <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 8005d98:	490b      	ldr	r1, [pc, #44]	; (8005dc8 <low_level_output+0x10c>)
 8005d9a:	480c      	ldr	r0, [pc, #48]	; (8005dcc <low_level_output+0x110>)
 8005d9c:	f7fb f8a8 	bl	8000ef0 <HAL_ETH_Transmit_IT>
  while(osSemaphoreAcquire(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 8005da0:	bf00      	nop
 8005da2:	4b0b      	ldr	r3, [pc, #44]	; (8005dd0 <low_level_output+0x114>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f04f 31ff 	mov.w	r1, #4294967295
 8005daa:	4618      	mov	r0, r3
 8005dac:	f002 fb9a 	bl	80084e4 <osSemaphoreAcquire>
 8005db0:	4603      	mov	r3, r0
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d1f5      	bne.n	8005da2 <low_level_output+0xe6>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 8005db6:	4805      	ldr	r0, [pc, #20]	; (8005dcc <low_level_output+0x110>)
 8005db8:	f7fb fa2c 	bl	8001214 <HAL_ETH_ReleaseTxPacket>

  return errval;
 8005dbc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	3748      	adds	r7, #72	; 0x48
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}
 8005dc8:	20004dd0 	.word	0x20004dd0
 8005dcc:	20004d20 	.word	0x20004d20
 8005dd0:	20004d1c 	.word	0x20004d1c

08005dd4 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b084      	sub	sp, #16
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8005de0:	4b07      	ldr	r3, [pc, #28]	; (8005e00 <low_level_input+0x2c>)
 8005de2:	781b      	ldrb	r3, [r3, #0]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d105      	bne.n	8005df4 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8005de8:	f107 030c 	add.w	r3, r7, #12
 8005dec:	4619      	mov	r1, r3
 8005dee:	4805      	ldr	r0, [pc, #20]	; (8005e04 <low_level_input+0x30>)
 8005df0:	f7fb f8da 	bl	8000fa8 <HAL_ETH_ReadData>
  }

  return p;
 8005df4:	68fb      	ldr	r3, [r7, #12]
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3710      	adds	r7, #16
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}
 8005dfe:	bf00      	nop
 8005e00:	20004bd4 	.word	0x20004bd4
 8005e04:	20004d20 	.word	0x20004d20

08005e08 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b084      	sub	sp, #16
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005e10:	2300      	movs	r3, #0
 8005e12:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8005e18:	4b0f      	ldr	r3, [pc, #60]	; (8005e58 <ethernetif_input+0x50>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f04f 31ff 	mov.w	r1, #4294967295
 8005e20:	4618      	mov	r0, r3
 8005e22:	f002 fb5f 	bl	80084e4 <osSemaphoreAcquire>
 8005e26:	4603      	mov	r3, r0
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d1f5      	bne.n	8005e18 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8005e2c:	68b8      	ldr	r0, [r7, #8]
 8005e2e:	f7ff ffd1 	bl	8005dd4 <low_level_input>
 8005e32:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d00a      	beq.n	8005e50 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	691b      	ldr	r3, [r3, #16]
 8005e3e:	68b9      	ldr	r1, [r7, #8]
 8005e40:	68f8      	ldr	r0, [r7, #12]
 8005e42:	4798      	blx	r3
 8005e44:	4603      	mov	r3, r0
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d002      	beq.n	8005e50 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8005e4a:	68f8      	ldr	r0, [r7, #12]
 8005e4c:	f007 fc56 	bl	800d6fc <pbuf_free>
          }
        }
      } while(p!=NULL);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d1ea      	bne.n	8005e2c <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8005e56:	e7df      	b.n	8005e18 <ethernetif_input+0x10>
 8005e58:	20004d18 	.word	0x20004d18

08005e5c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b082      	sub	sp, #8
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d106      	bne.n	8005e78 <ethernetif_init+0x1c>
 8005e6a:	4b0e      	ldr	r3, [pc, #56]	; (8005ea4 <ethernetif_init+0x48>)
 8005e6c:	f240 12af 	movw	r2, #431	; 0x1af
 8005e70:	490d      	ldr	r1, [pc, #52]	; (8005ea8 <ethernetif_init+0x4c>)
 8005e72:	480e      	ldr	r0, [pc, #56]	; (8005eac <ethernetif_init+0x50>)
 8005e74:	f012 fe12 	bl	8018a9c <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2273      	movs	r2, #115	; 0x73
 8005e7c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2274      	movs	r2, #116	; 0x74
 8005e84:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	4a09      	ldr	r2, [pc, #36]	; (8005eb0 <ethernetif_init+0x54>)
 8005e8c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	4a08      	ldr	r2, [pc, #32]	; (8005eb4 <ethernetif_init+0x58>)
 8005e92:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f7ff fe59 	bl	8005b4c <low_level_init>

  return ERR_OK;
 8005e9a:	2300      	movs	r3, #0
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	3708      	adds	r7, #8
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}
 8005ea4:	08019b70 	.word	0x08019b70
 8005ea8:	08019b8c 	.word	0x08019b8c
 8005eac:	08019b9c 	.word	0x08019b9c
 8005eb0:	080160c1 	.word	0x080160c1
 8005eb4:	08005cbd 	.word	0x08005cbd

08005eb8 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b084      	sub	sp, #16
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8005ec4:	68f9      	ldr	r1, [r7, #12]
 8005ec6:	4809      	ldr	r0, [pc, #36]	; (8005eec <pbuf_free_custom+0x34>)
 8005ec8:	f006 fdac 	bl	800ca24 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8005ecc:	4b08      	ldr	r3, [pc, #32]	; (8005ef0 <pbuf_free_custom+0x38>)
 8005ece:	781b      	ldrb	r3, [r3, #0]
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d107      	bne.n	8005ee4 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8005ed4:	4b06      	ldr	r3, [pc, #24]	; (8005ef0 <pbuf_free_custom+0x38>)
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8005eda:	4b06      	ldr	r3, [pc, #24]	; (8005ef4 <pbuf_free_custom+0x3c>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f002 fb52 	bl	8008588 <osSemaphoreRelease>
  }
}
 8005ee4:	bf00      	nop
 8005ee6:	3710      	adds	r7, #16
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}
 8005eec:	0801ca88 	.word	0x0801ca88
 8005ef0:	20004bd4 	.word	0x20004bd4
 8005ef4:	20004d18 	.word	0x20004d18

08005ef8 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005efc:	f7fa fe5e 	bl	8000bbc <HAL_GetTick>
 8005f00:	4603      	mov	r3, r0
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	bd80      	pop	{r7, pc}

08005f06 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @param  argument: netif
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 8005f06:	b580      	push	{r7, lr}
 8005f08:	b082      	sub	sp, #8
 8005f0a:	af00      	add	r7, sp, #0
 8005f0c:	6078      	str	r0, [r7, #4]

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8005f0e:	2064      	movs	r0, #100	; 0x64
 8005f10:	f002 f935 	bl	800817e <osDelay>
 8005f14:	e7fb      	b.n	8005f0e <ethernet_link_thread+0x8>
	...

08005f18 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b086      	sub	sp, #24
 8005f1c:	af02      	add	r7, sp, #8
 8005f1e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */

  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8005f20:	4812      	ldr	r0, [pc, #72]	; (8005f6c <HAL_ETH_RxAllocateCallback+0x54>)
 8005f22:	f006 fd0b 	bl	800c93c <memp_malloc_pool>
 8005f26:	60f8      	str	r0, [r7, #12]
  if (p)
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d014      	beq.n	8005f58 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	f103 0220 	add.w	r2, r3, #32
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	4a0d      	ldr	r2, [pc, #52]	; (8005f70 <HAL_ETH_RxAllocateCallback+0x58>)
 8005f3c:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8005f46:	9201      	str	r2, [sp, #4]
 8005f48:	9300      	str	r3, [sp, #0]
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2241      	movs	r2, #65	; 0x41
 8005f4e:	2100      	movs	r1, #0
 8005f50:	2000      	movs	r0, #0
 8005f52:	f007 fa19 	bl	800d388 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8005f56:	e005      	b.n	8005f64 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8005f58:	4b06      	ldr	r3, [pc, #24]	; (8005f74 <HAL_ETH_RxAllocateCallback+0x5c>)
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2200      	movs	r2, #0
 8005f62:	601a      	str	r2, [r3, #0]
}
 8005f64:	bf00      	nop
 8005f66:	3710      	adds	r7, #16
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}
 8005f6c:	0801ca88 	.word	0x0801ca88
 8005f70:	08005eb9 	.word	0x08005eb9
 8005f74:	20004bd4 	.word	0x20004bd4

08005f78 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b089      	sub	sp, #36	; 0x24
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	60f8      	str	r0, [r7, #12]
 8005f80:	60b9      	str	r1, [r7, #8]
 8005f82:	607a      	str	r2, [r7, #4]
 8005f84:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	3b20      	subs	r3, #32
 8005f96:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8005f98:	69fb      	ldr	r3, [r7, #28]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8005f9e:	69fb      	ldr	r3, [r7, #28]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8005fa4:	69fb      	ldr	r3, [r7, #28]
 8005fa6:	887a      	ldrh	r2, [r7, #2]
 8005fa8:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8005faa:	69bb      	ldr	r3, [r7, #24]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d103      	bne.n	8005fba <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8005fb2:	69bb      	ldr	r3, [r7, #24]
 8005fb4:	69fa      	ldr	r2, [r7, #28]
 8005fb6:	601a      	str	r2, [r3, #0]
 8005fb8:	e003      	b.n	8005fc2 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	69fa      	ldr	r2, [r7, #28]
 8005fc0:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	69fa      	ldr	r2, [r7, #28]
 8005fc6:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8005fc8:	69bb      	ldr	r3, [r7, #24]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	61fb      	str	r3, [r7, #28]
 8005fce:	e009      	b.n	8005fe4 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8005fd0:	69fb      	ldr	r3, [r7, #28]
 8005fd2:	891a      	ldrh	r2, [r3, #8]
 8005fd4:	887b      	ldrh	r3, [r7, #2]
 8005fd6:	4413      	add	r3, r2
 8005fd8:	b29a      	uxth	r2, r3
 8005fda:	69fb      	ldr	r3, [r7, #28]
 8005fdc:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8005fde:	69fb      	ldr	r3, [r7, #28]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	61fb      	str	r3, [r7, #28]
 8005fe4:	69fb      	ldr	r3, [r7, #28]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d1f2      	bne.n	8005fd0 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 8005fea:	bf00      	nop
 8005fec:	bf00      	nop
 8005fee:	3724      	adds	r7, #36	; 0x24
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff6:	4770      	bx	lr

08005ff8 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b082      	sub	sp, #8
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	f007 fb7b 	bl	800d6fc <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8006006:	bf00      	nop
 8006008:	3708      	adds	r7, #8
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}
	...

08006010 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b084      	sub	sp, #16
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
 8006018:	460b      	mov	r3, r1
 800601a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800601c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006020:	f012 fcae 	bl	8018980 <USBD_static_malloc>
 8006024:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d109      	bne.n	8006040 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	32b0      	adds	r2, #176	; 0xb0
 8006036:	2100      	movs	r1, #0
 8006038:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800603c:	2302      	movs	r3, #2
 800603e:	e0d4      	b.n	80061ea <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006040:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006044:	2100      	movs	r1, #0
 8006046:	68f8      	ldr	r0, [r7, #12]
 8006048:	f012 fd20 	bl	8018a8c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	32b0      	adds	r2, #176	; 0xb0
 8006056:	68f9      	ldr	r1, [r7, #12]
 8006058:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	32b0      	adds	r2, #176	; 0xb0
 8006066:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	7c1b      	ldrb	r3, [r3, #16]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d138      	bne.n	80060ea <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006078:	4b5e      	ldr	r3, [pc, #376]	; (80061f4 <USBD_CDC_Init+0x1e4>)
 800607a:	7819      	ldrb	r1, [r3, #0]
 800607c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006080:	2202      	movs	r2, #2
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f012 fb59 	bl	801873a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006088:	4b5a      	ldr	r3, [pc, #360]	; (80061f4 <USBD_CDC_Init+0x1e4>)
 800608a:	781b      	ldrb	r3, [r3, #0]
 800608c:	f003 020f 	and.w	r2, r3, #15
 8006090:	6879      	ldr	r1, [r7, #4]
 8006092:	4613      	mov	r3, r2
 8006094:	009b      	lsls	r3, r3, #2
 8006096:	4413      	add	r3, r2
 8006098:	009b      	lsls	r3, r3, #2
 800609a:	440b      	add	r3, r1
 800609c:	3324      	adds	r3, #36	; 0x24
 800609e:	2201      	movs	r2, #1
 80060a0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80060a2:	4b55      	ldr	r3, [pc, #340]	; (80061f8 <USBD_CDC_Init+0x1e8>)
 80060a4:	7819      	ldrb	r1, [r3, #0]
 80060a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80060aa:	2202      	movs	r2, #2
 80060ac:	6878      	ldr	r0, [r7, #4]
 80060ae:	f012 fb44 	bl	801873a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80060b2:	4b51      	ldr	r3, [pc, #324]	; (80061f8 <USBD_CDC_Init+0x1e8>)
 80060b4:	781b      	ldrb	r3, [r3, #0]
 80060b6:	f003 020f 	and.w	r2, r3, #15
 80060ba:	6879      	ldr	r1, [r7, #4]
 80060bc:	4613      	mov	r3, r2
 80060be:	009b      	lsls	r3, r3, #2
 80060c0:	4413      	add	r3, r2
 80060c2:	009b      	lsls	r3, r3, #2
 80060c4:	440b      	add	r3, r1
 80060c6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80060ca:	2201      	movs	r2, #1
 80060cc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80060ce:	4b4b      	ldr	r3, [pc, #300]	; (80061fc <USBD_CDC_Init+0x1ec>)
 80060d0:	781b      	ldrb	r3, [r3, #0]
 80060d2:	f003 020f 	and.w	r2, r3, #15
 80060d6:	6879      	ldr	r1, [r7, #4]
 80060d8:	4613      	mov	r3, r2
 80060da:	009b      	lsls	r3, r3, #2
 80060dc:	4413      	add	r3, r2
 80060de:	009b      	lsls	r3, r3, #2
 80060e0:	440b      	add	r3, r1
 80060e2:	3326      	adds	r3, #38	; 0x26
 80060e4:	2210      	movs	r2, #16
 80060e6:	801a      	strh	r2, [r3, #0]
 80060e8:	e035      	b.n	8006156 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80060ea:	4b42      	ldr	r3, [pc, #264]	; (80061f4 <USBD_CDC_Init+0x1e4>)
 80060ec:	7819      	ldrb	r1, [r3, #0]
 80060ee:	2340      	movs	r3, #64	; 0x40
 80060f0:	2202      	movs	r2, #2
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f012 fb21 	bl	801873a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80060f8:	4b3e      	ldr	r3, [pc, #248]	; (80061f4 <USBD_CDC_Init+0x1e4>)
 80060fa:	781b      	ldrb	r3, [r3, #0]
 80060fc:	f003 020f 	and.w	r2, r3, #15
 8006100:	6879      	ldr	r1, [r7, #4]
 8006102:	4613      	mov	r3, r2
 8006104:	009b      	lsls	r3, r3, #2
 8006106:	4413      	add	r3, r2
 8006108:	009b      	lsls	r3, r3, #2
 800610a:	440b      	add	r3, r1
 800610c:	3324      	adds	r3, #36	; 0x24
 800610e:	2201      	movs	r2, #1
 8006110:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006112:	4b39      	ldr	r3, [pc, #228]	; (80061f8 <USBD_CDC_Init+0x1e8>)
 8006114:	7819      	ldrb	r1, [r3, #0]
 8006116:	2340      	movs	r3, #64	; 0x40
 8006118:	2202      	movs	r2, #2
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f012 fb0d 	bl	801873a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006120:	4b35      	ldr	r3, [pc, #212]	; (80061f8 <USBD_CDC_Init+0x1e8>)
 8006122:	781b      	ldrb	r3, [r3, #0]
 8006124:	f003 020f 	and.w	r2, r3, #15
 8006128:	6879      	ldr	r1, [r7, #4]
 800612a:	4613      	mov	r3, r2
 800612c:	009b      	lsls	r3, r3, #2
 800612e:	4413      	add	r3, r2
 8006130:	009b      	lsls	r3, r3, #2
 8006132:	440b      	add	r3, r1
 8006134:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006138:	2201      	movs	r2, #1
 800613a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800613c:	4b2f      	ldr	r3, [pc, #188]	; (80061fc <USBD_CDC_Init+0x1ec>)
 800613e:	781b      	ldrb	r3, [r3, #0]
 8006140:	f003 020f 	and.w	r2, r3, #15
 8006144:	6879      	ldr	r1, [r7, #4]
 8006146:	4613      	mov	r3, r2
 8006148:	009b      	lsls	r3, r3, #2
 800614a:	4413      	add	r3, r2
 800614c:	009b      	lsls	r3, r3, #2
 800614e:	440b      	add	r3, r1
 8006150:	3326      	adds	r3, #38	; 0x26
 8006152:	2210      	movs	r2, #16
 8006154:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006156:	4b29      	ldr	r3, [pc, #164]	; (80061fc <USBD_CDC_Init+0x1ec>)
 8006158:	7819      	ldrb	r1, [r3, #0]
 800615a:	2308      	movs	r3, #8
 800615c:	2203      	movs	r2, #3
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f012 faeb 	bl	801873a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006164:	4b25      	ldr	r3, [pc, #148]	; (80061fc <USBD_CDC_Init+0x1ec>)
 8006166:	781b      	ldrb	r3, [r3, #0]
 8006168:	f003 020f 	and.w	r2, r3, #15
 800616c:	6879      	ldr	r1, [r7, #4]
 800616e:	4613      	mov	r3, r2
 8006170:	009b      	lsls	r3, r3, #2
 8006172:	4413      	add	r3, r2
 8006174:	009b      	lsls	r3, r3, #2
 8006176:	440b      	add	r3, r1
 8006178:	3324      	adds	r3, #36	; 0x24
 800617a:	2201      	movs	r2, #1
 800617c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2200      	movs	r2, #0
 8006182:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800618c:	687a      	ldr	r2, [r7, #4]
 800618e:	33b0      	adds	r3, #176	; 0xb0
 8006190:	009b      	lsls	r3, r3, #2
 8006192:	4413      	add	r3, r2
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2200      	movs	r2, #0
 800619e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2200      	movs	r2, #0
 80061a6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d101      	bne.n	80061b8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80061b4:	2302      	movs	r3, #2
 80061b6:	e018      	b.n	80061ea <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	7c1b      	ldrb	r3, [r3, #16]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d10a      	bne.n	80061d6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80061c0:	4b0d      	ldr	r3, [pc, #52]	; (80061f8 <USBD_CDC_Init+0x1e8>)
 80061c2:	7819      	ldrb	r1, [r3, #0]
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80061ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f012 fba2 	bl	8018918 <USBD_LL_PrepareReceive>
 80061d4:	e008      	b.n	80061e8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80061d6:	4b08      	ldr	r3, [pc, #32]	; (80061f8 <USBD_CDC_Init+0x1e8>)
 80061d8:	7819      	ldrb	r1, [r3, #0]
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80061e0:	2340      	movs	r3, #64	; 0x40
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f012 fb98 	bl	8018918 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80061e8:	2300      	movs	r3, #0
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3710      	adds	r7, #16
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}
 80061f2:	bf00      	nop
 80061f4:	20000093 	.word	0x20000093
 80061f8:	20000094 	.word	0x20000094
 80061fc:	20000095 	.word	0x20000095

08006200 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b082      	sub	sp, #8
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
 8006208:	460b      	mov	r3, r1
 800620a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800620c:	4b3a      	ldr	r3, [pc, #232]	; (80062f8 <USBD_CDC_DeInit+0xf8>)
 800620e:	781b      	ldrb	r3, [r3, #0]
 8006210:	4619      	mov	r1, r3
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f012 fab7 	bl	8018786 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006218:	4b37      	ldr	r3, [pc, #220]	; (80062f8 <USBD_CDC_DeInit+0xf8>)
 800621a:	781b      	ldrb	r3, [r3, #0]
 800621c:	f003 020f 	and.w	r2, r3, #15
 8006220:	6879      	ldr	r1, [r7, #4]
 8006222:	4613      	mov	r3, r2
 8006224:	009b      	lsls	r3, r3, #2
 8006226:	4413      	add	r3, r2
 8006228:	009b      	lsls	r3, r3, #2
 800622a:	440b      	add	r3, r1
 800622c:	3324      	adds	r3, #36	; 0x24
 800622e:	2200      	movs	r2, #0
 8006230:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006232:	4b32      	ldr	r3, [pc, #200]	; (80062fc <USBD_CDC_DeInit+0xfc>)
 8006234:	781b      	ldrb	r3, [r3, #0]
 8006236:	4619      	mov	r1, r3
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f012 faa4 	bl	8018786 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800623e:	4b2f      	ldr	r3, [pc, #188]	; (80062fc <USBD_CDC_DeInit+0xfc>)
 8006240:	781b      	ldrb	r3, [r3, #0]
 8006242:	f003 020f 	and.w	r2, r3, #15
 8006246:	6879      	ldr	r1, [r7, #4]
 8006248:	4613      	mov	r3, r2
 800624a:	009b      	lsls	r3, r3, #2
 800624c:	4413      	add	r3, r2
 800624e:	009b      	lsls	r3, r3, #2
 8006250:	440b      	add	r3, r1
 8006252:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006256:	2200      	movs	r2, #0
 8006258:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800625a:	4b29      	ldr	r3, [pc, #164]	; (8006300 <USBD_CDC_DeInit+0x100>)
 800625c:	781b      	ldrb	r3, [r3, #0]
 800625e:	4619      	mov	r1, r3
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f012 fa90 	bl	8018786 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006266:	4b26      	ldr	r3, [pc, #152]	; (8006300 <USBD_CDC_DeInit+0x100>)
 8006268:	781b      	ldrb	r3, [r3, #0]
 800626a:	f003 020f 	and.w	r2, r3, #15
 800626e:	6879      	ldr	r1, [r7, #4]
 8006270:	4613      	mov	r3, r2
 8006272:	009b      	lsls	r3, r3, #2
 8006274:	4413      	add	r3, r2
 8006276:	009b      	lsls	r3, r3, #2
 8006278:	440b      	add	r3, r1
 800627a:	3324      	adds	r3, #36	; 0x24
 800627c:	2200      	movs	r2, #0
 800627e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006280:	4b1f      	ldr	r3, [pc, #124]	; (8006300 <USBD_CDC_DeInit+0x100>)
 8006282:	781b      	ldrb	r3, [r3, #0]
 8006284:	f003 020f 	and.w	r2, r3, #15
 8006288:	6879      	ldr	r1, [r7, #4]
 800628a:	4613      	mov	r3, r2
 800628c:	009b      	lsls	r3, r3, #2
 800628e:	4413      	add	r3, r2
 8006290:	009b      	lsls	r3, r3, #2
 8006292:	440b      	add	r3, r1
 8006294:	3326      	adds	r3, #38	; 0x26
 8006296:	2200      	movs	r2, #0
 8006298:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	32b0      	adds	r2, #176	; 0xb0
 80062a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d01f      	beq.n	80062ec <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80062b2:	687a      	ldr	r2, [r7, #4]
 80062b4:	33b0      	adds	r3, #176	; 0xb0
 80062b6:	009b      	lsls	r3, r3, #2
 80062b8:	4413      	add	r3, r2
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	32b0      	adds	r2, #176	; 0xb0
 80062ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062ce:	4618      	mov	r0, r3
 80062d0:	f012 fb64 	bl	801899c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	32b0      	adds	r2, #176	; 0xb0
 80062de:	2100      	movs	r1, #0
 80062e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2200      	movs	r2, #0
 80062e8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80062ec:	2300      	movs	r3, #0
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3708      	adds	r7, #8
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}
 80062f6:	bf00      	nop
 80062f8:	20000093 	.word	0x20000093
 80062fc:	20000094 	.word	0x20000094
 8006300:	20000095 	.word	0x20000095

08006304 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b086      	sub	sp, #24
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	32b0      	adds	r2, #176	; 0xb0
 8006318:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800631c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800631e:	2300      	movs	r3, #0
 8006320:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006322:	2300      	movs	r3, #0
 8006324:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006326:	2300      	movs	r3, #0
 8006328:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d101      	bne.n	8006334 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006330:	2303      	movs	r3, #3
 8006332:	e0bf      	b.n	80064b4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	781b      	ldrb	r3, [r3, #0]
 8006338:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800633c:	2b00      	cmp	r3, #0
 800633e:	d050      	beq.n	80063e2 <USBD_CDC_Setup+0xde>
 8006340:	2b20      	cmp	r3, #32
 8006342:	f040 80af 	bne.w	80064a4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	88db      	ldrh	r3, [r3, #6]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d03a      	beq.n	80063c4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	781b      	ldrb	r3, [r3, #0]
 8006352:	b25b      	sxtb	r3, r3
 8006354:	2b00      	cmp	r3, #0
 8006356:	da1b      	bge.n	8006390 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800635e:	687a      	ldr	r2, [r7, #4]
 8006360:	33b0      	adds	r3, #176	; 0xb0
 8006362:	009b      	lsls	r3, r3, #2
 8006364:	4413      	add	r3, r2
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	689b      	ldr	r3, [r3, #8]
 800636a:	683a      	ldr	r2, [r7, #0]
 800636c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800636e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006370:	683a      	ldr	r2, [r7, #0]
 8006372:	88d2      	ldrh	r2, [r2, #6]
 8006374:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	88db      	ldrh	r3, [r3, #6]
 800637a:	2b07      	cmp	r3, #7
 800637c:	bf28      	it	cs
 800637e:	2307      	movcs	r3, #7
 8006380:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	89fa      	ldrh	r2, [r7, #14]
 8006386:	4619      	mov	r1, r3
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	f001 fd43 	bl	8007e14 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800638e:	e090      	b.n	80064b2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	785a      	ldrb	r2, [r3, #1]
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	88db      	ldrh	r3, [r3, #6]
 800639e:	2b3f      	cmp	r3, #63	; 0x3f
 80063a0:	d803      	bhi.n	80063aa <USBD_CDC_Setup+0xa6>
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	88db      	ldrh	r3, [r3, #6]
 80063a6:	b2da      	uxtb	r2, r3
 80063a8:	e000      	b.n	80063ac <USBD_CDC_Setup+0xa8>
 80063aa:	2240      	movs	r2, #64	; 0x40
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80063b2:	6939      	ldr	r1, [r7, #16]
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80063ba:	461a      	mov	r2, r3
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f001 fd55 	bl	8007e6c <USBD_CtlPrepareRx>
      break;
 80063c2:	e076      	b.n	80064b2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80063ca:	687a      	ldr	r2, [r7, #4]
 80063cc:	33b0      	adds	r3, #176	; 0xb0
 80063ce:	009b      	lsls	r3, r3, #2
 80063d0:	4413      	add	r3, r2
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	689b      	ldr	r3, [r3, #8]
 80063d6:	683a      	ldr	r2, [r7, #0]
 80063d8:	7850      	ldrb	r0, [r2, #1]
 80063da:	2200      	movs	r2, #0
 80063dc:	6839      	ldr	r1, [r7, #0]
 80063de:	4798      	blx	r3
      break;
 80063e0:	e067      	b.n	80064b2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	785b      	ldrb	r3, [r3, #1]
 80063e6:	2b0b      	cmp	r3, #11
 80063e8:	d851      	bhi.n	800648e <USBD_CDC_Setup+0x18a>
 80063ea:	a201      	add	r2, pc, #4	; (adr r2, 80063f0 <USBD_CDC_Setup+0xec>)
 80063ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063f0:	08006421 	.word	0x08006421
 80063f4:	0800649d 	.word	0x0800649d
 80063f8:	0800648f 	.word	0x0800648f
 80063fc:	0800648f 	.word	0x0800648f
 8006400:	0800648f 	.word	0x0800648f
 8006404:	0800648f 	.word	0x0800648f
 8006408:	0800648f 	.word	0x0800648f
 800640c:	0800648f 	.word	0x0800648f
 8006410:	0800648f 	.word	0x0800648f
 8006414:	0800648f 	.word	0x0800648f
 8006418:	0800644b 	.word	0x0800644b
 800641c:	08006475 	.word	0x08006475
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006426:	b2db      	uxtb	r3, r3
 8006428:	2b03      	cmp	r3, #3
 800642a:	d107      	bne.n	800643c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800642c:	f107 030a 	add.w	r3, r7, #10
 8006430:	2202      	movs	r2, #2
 8006432:	4619      	mov	r1, r3
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	f001 fced 	bl	8007e14 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800643a:	e032      	b.n	80064a2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800643c:	6839      	ldr	r1, [r7, #0]
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f001 fc77 	bl	8007d32 <USBD_CtlError>
            ret = USBD_FAIL;
 8006444:	2303      	movs	r3, #3
 8006446:	75fb      	strb	r3, [r7, #23]
          break;
 8006448:	e02b      	b.n	80064a2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006450:	b2db      	uxtb	r3, r3
 8006452:	2b03      	cmp	r3, #3
 8006454:	d107      	bne.n	8006466 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006456:	f107 030d 	add.w	r3, r7, #13
 800645a:	2201      	movs	r2, #1
 800645c:	4619      	mov	r1, r3
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f001 fcd8 	bl	8007e14 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006464:	e01d      	b.n	80064a2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006466:	6839      	ldr	r1, [r7, #0]
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f001 fc62 	bl	8007d32 <USBD_CtlError>
            ret = USBD_FAIL;
 800646e:	2303      	movs	r3, #3
 8006470:	75fb      	strb	r3, [r7, #23]
          break;
 8006472:	e016      	b.n	80064a2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800647a:	b2db      	uxtb	r3, r3
 800647c:	2b03      	cmp	r3, #3
 800647e:	d00f      	beq.n	80064a0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006480:	6839      	ldr	r1, [r7, #0]
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f001 fc55 	bl	8007d32 <USBD_CtlError>
            ret = USBD_FAIL;
 8006488:	2303      	movs	r3, #3
 800648a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800648c:	e008      	b.n	80064a0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800648e:	6839      	ldr	r1, [r7, #0]
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f001 fc4e 	bl	8007d32 <USBD_CtlError>
          ret = USBD_FAIL;
 8006496:	2303      	movs	r3, #3
 8006498:	75fb      	strb	r3, [r7, #23]
          break;
 800649a:	e002      	b.n	80064a2 <USBD_CDC_Setup+0x19e>
          break;
 800649c:	bf00      	nop
 800649e:	e008      	b.n	80064b2 <USBD_CDC_Setup+0x1ae>
          break;
 80064a0:	bf00      	nop
      }
      break;
 80064a2:	e006      	b.n	80064b2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80064a4:	6839      	ldr	r1, [r7, #0]
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f001 fc43 	bl	8007d32 <USBD_CtlError>
      ret = USBD_FAIL;
 80064ac:	2303      	movs	r3, #3
 80064ae:	75fb      	strb	r3, [r7, #23]
      break;
 80064b0:	bf00      	nop
  }

  return (uint8_t)ret;
 80064b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	3718      	adds	r7, #24
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}

080064bc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b084      	sub	sp, #16
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
 80064c4:	460b      	mov	r3, r1
 80064c6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80064ce:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	32b0      	adds	r2, #176	; 0xb0
 80064da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d101      	bne.n	80064e6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80064e2:	2303      	movs	r3, #3
 80064e4:	e065      	b.n	80065b2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	32b0      	adds	r2, #176	; 0xb0
 80064f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064f4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80064f6:	78fb      	ldrb	r3, [r7, #3]
 80064f8:	f003 020f 	and.w	r2, r3, #15
 80064fc:	6879      	ldr	r1, [r7, #4]
 80064fe:	4613      	mov	r3, r2
 8006500:	009b      	lsls	r3, r3, #2
 8006502:	4413      	add	r3, r2
 8006504:	009b      	lsls	r3, r3, #2
 8006506:	440b      	add	r3, r1
 8006508:	3318      	adds	r3, #24
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d02f      	beq.n	8006570 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006510:	78fb      	ldrb	r3, [r7, #3]
 8006512:	f003 020f 	and.w	r2, r3, #15
 8006516:	6879      	ldr	r1, [r7, #4]
 8006518:	4613      	mov	r3, r2
 800651a:	009b      	lsls	r3, r3, #2
 800651c:	4413      	add	r3, r2
 800651e:	009b      	lsls	r3, r3, #2
 8006520:	440b      	add	r3, r1
 8006522:	3318      	adds	r3, #24
 8006524:	681a      	ldr	r2, [r3, #0]
 8006526:	78fb      	ldrb	r3, [r7, #3]
 8006528:	f003 010f 	and.w	r1, r3, #15
 800652c:	68f8      	ldr	r0, [r7, #12]
 800652e:	460b      	mov	r3, r1
 8006530:	00db      	lsls	r3, r3, #3
 8006532:	440b      	add	r3, r1
 8006534:	009b      	lsls	r3, r3, #2
 8006536:	4403      	add	r3, r0
 8006538:	3348      	adds	r3, #72	; 0x48
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	fbb2 f1f3 	udiv	r1, r2, r3
 8006540:	fb01 f303 	mul.w	r3, r1, r3
 8006544:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006546:	2b00      	cmp	r3, #0
 8006548:	d112      	bne.n	8006570 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800654a:	78fb      	ldrb	r3, [r7, #3]
 800654c:	f003 020f 	and.w	r2, r3, #15
 8006550:	6879      	ldr	r1, [r7, #4]
 8006552:	4613      	mov	r3, r2
 8006554:	009b      	lsls	r3, r3, #2
 8006556:	4413      	add	r3, r2
 8006558:	009b      	lsls	r3, r3, #2
 800655a:	440b      	add	r3, r1
 800655c:	3318      	adds	r3, #24
 800655e:	2200      	movs	r2, #0
 8006560:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006562:	78f9      	ldrb	r1, [r7, #3]
 8006564:	2300      	movs	r3, #0
 8006566:	2200      	movs	r2, #0
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f012 f9b4 	bl	80188d6 <USBD_LL_Transmit>
 800656e:	e01f      	b.n	80065b0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	2200      	movs	r2, #0
 8006574:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800657e:	687a      	ldr	r2, [r7, #4]
 8006580:	33b0      	adds	r3, #176	; 0xb0
 8006582:	009b      	lsls	r3, r3, #2
 8006584:	4413      	add	r3, r2
 8006586:	685b      	ldr	r3, [r3, #4]
 8006588:	691b      	ldr	r3, [r3, #16]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d010      	beq.n	80065b0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006594:	687a      	ldr	r2, [r7, #4]
 8006596:	33b0      	adds	r3, #176	; 0xb0
 8006598:	009b      	lsls	r3, r3, #2
 800659a:	4413      	add	r3, r2
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	691b      	ldr	r3, [r3, #16]
 80065a0:	68ba      	ldr	r2, [r7, #8]
 80065a2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80065a6:	68ba      	ldr	r2, [r7, #8]
 80065a8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80065ac:	78fa      	ldrb	r2, [r7, #3]
 80065ae:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80065b0:	2300      	movs	r3, #0
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3710      	adds	r7, #16
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}

080065ba <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80065ba:	b580      	push	{r7, lr}
 80065bc:	b084      	sub	sp, #16
 80065be:	af00      	add	r7, sp, #0
 80065c0:	6078      	str	r0, [r7, #4]
 80065c2:	460b      	mov	r3, r1
 80065c4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	32b0      	adds	r2, #176	; 0xb0
 80065d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065d4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	32b0      	adds	r2, #176	; 0xb0
 80065e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d101      	bne.n	80065ec <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80065e8:	2303      	movs	r3, #3
 80065ea:	e01a      	b.n	8006622 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80065ec:	78fb      	ldrb	r3, [r7, #3]
 80065ee:	4619      	mov	r1, r3
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f012 f9b2 	bl	801895a <USBD_LL_GetRxDataSize>
 80065f6:	4602      	mov	r2, r0
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006604:	687a      	ldr	r2, [r7, #4]
 8006606:	33b0      	adds	r3, #176	; 0xb0
 8006608:	009b      	lsls	r3, r3, #2
 800660a:	4413      	add	r3, r2
 800660c:	685b      	ldr	r3, [r3, #4]
 800660e:	68db      	ldr	r3, [r3, #12]
 8006610:	68fa      	ldr	r2, [r7, #12]
 8006612:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006616:	68fa      	ldr	r2, [r7, #12]
 8006618:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800661c:	4611      	mov	r1, r2
 800661e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006620:	2300      	movs	r3, #0
}
 8006622:	4618      	mov	r0, r3
 8006624:	3710      	adds	r7, #16
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}

0800662a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800662a:	b580      	push	{r7, lr}
 800662c:	b084      	sub	sp, #16
 800662e:	af00      	add	r7, sp, #0
 8006630:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	32b0      	adds	r2, #176	; 0xb0
 800663c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006640:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d101      	bne.n	800664c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006648:	2303      	movs	r3, #3
 800664a:	e025      	b.n	8006698 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006652:	687a      	ldr	r2, [r7, #4]
 8006654:	33b0      	adds	r3, #176	; 0xb0
 8006656:	009b      	lsls	r3, r3, #2
 8006658:	4413      	add	r3, r2
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d01a      	beq.n	8006696 <USBD_CDC_EP0_RxReady+0x6c>
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006666:	2bff      	cmp	r3, #255	; 0xff
 8006668:	d015      	beq.n	8006696 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006670:	687a      	ldr	r2, [r7, #4]
 8006672:	33b0      	adds	r3, #176	; 0xb0
 8006674:	009b      	lsls	r3, r3, #2
 8006676:	4413      	add	r3, r2
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	689b      	ldr	r3, [r3, #8]
 800667c:	68fa      	ldr	r2, [r7, #12]
 800667e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8006682:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006684:	68fa      	ldr	r2, [r7, #12]
 8006686:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800668a:	b292      	uxth	r2, r2
 800668c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	22ff      	movs	r2, #255	; 0xff
 8006692:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006696:	2300      	movs	r3, #0
}
 8006698:	4618      	mov	r0, r3
 800669a:	3710      	adds	r7, #16
 800669c:	46bd      	mov	sp, r7
 800669e:	bd80      	pop	{r7, pc}

080066a0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b086      	sub	sp, #24
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80066a8:	2182      	movs	r1, #130	; 0x82
 80066aa:	4818      	ldr	r0, [pc, #96]	; (800670c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80066ac:	f000 fd09 	bl	80070c2 <USBD_GetEpDesc>
 80066b0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80066b2:	2101      	movs	r1, #1
 80066b4:	4815      	ldr	r0, [pc, #84]	; (800670c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80066b6:	f000 fd04 	bl	80070c2 <USBD_GetEpDesc>
 80066ba:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80066bc:	2181      	movs	r1, #129	; 0x81
 80066be:	4813      	ldr	r0, [pc, #76]	; (800670c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80066c0:	f000 fcff 	bl	80070c2 <USBD_GetEpDesc>
 80066c4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d002      	beq.n	80066d2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	2210      	movs	r2, #16
 80066d0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d006      	beq.n	80066e6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	2200      	movs	r2, #0
 80066dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80066e0:	711a      	strb	r2, [r3, #4]
 80066e2:	2200      	movs	r2, #0
 80066e4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d006      	beq.n	80066fa <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	2200      	movs	r2, #0
 80066f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80066f4:	711a      	strb	r2, [r3, #4]
 80066f6:	2200      	movs	r2, #0
 80066f8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2243      	movs	r2, #67	; 0x43
 80066fe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006700:	4b02      	ldr	r3, [pc, #8]	; (800670c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006702:	4618      	mov	r0, r3
 8006704:	3718      	adds	r7, #24
 8006706:	46bd      	mov	sp, r7
 8006708:	bd80      	pop	{r7, pc}
 800670a:	bf00      	nop
 800670c:	20000050 	.word	0x20000050

08006710 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b086      	sub	sp, #24
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006718:	2182      	movs	r1, #130	; 0x82
 800671a:	4818      	ldr	r0, [pc, #96]	; (800677c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800671c:	f000 fcd1 	bl	80070c2 <USBD_GetEpDesc>
 8006720:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006722:	2101      	movs	r1, #1
 8006724:	4815      	ldr	r0, [pc, #84]	; (800677c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006726:	f000 fccc 	bl	80070c2 <USBD_GetEpDesc>
 800672a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800672c:	2181      	movs	r1, #129	; 0x81
 800672e:	4813      	ldr	r0, [pc, #76]	; (800677c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006730:	f000 fcc7 	bl	80070c2 <USBD_GetEpDesc>
 8006734:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d002      	beq.n	8006742 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	2210      	movs	r2, #16
 8006740:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d006      	beq.n	8006756 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006748:	693b      	ldr	r3, [r7, #16]
 800674a:	2200      	movs	r2, #0
 800674c:	711a      	strb	r2, [r3, #4]
 800674e:	2200      	movs	r2, #0
 8006750:	f042 0202 	orr.w	r2, r2, #2
 8006754:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d006      	beq.n	800676a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	2200      	movs	r2, #0
 8006760:	711a      	strb	r2, [r3, #4]
 8006762:	2200      	movs	r2, #0
 8006764:	f042 0202 	orr.w	r2, r2, #2
 8006768:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2243      	movs	r2, #67	; 0x43
 800676e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006770:	4b02      	ldr	r3, [pc, #8]	; (800677c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006772:	4618      	mov	r0, r3
 8006774:	3718      	adds	r7, #24
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}
 800677a:	bf00      	nop
 800677c:	20000050 	.word	0x20000050

08006780 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b086      	sub	sp, #24
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006788:	2182      	movs	r1, #130	; 0x82
 800678a:	4818      	ldr	r0, [pc, #96]	; (80067ec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800678c:	f000 fc99 	bl	80070c2 <USBD_GetEpDesc>
 8006790:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006792:	2101      	movs	r1, #1
 8006794:	4815      	ldr	r0, [pc, #84]	; (80067ec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006796:	f000 fc94 	bl	80070c2 <USBD_GetEpDesc>
 800679a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800679c:	2181      	movs	r1, #129	; 0x81
 800679e:	4813      	ldr	r0, [pc, #76]	; (80067ec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80067a0:	f000 fc8f 	bl	80070c2 <USBD_GetEpDesc>
 80067a4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d002      	beq.n	80067b2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	2210      	movs	r2, #16
 80067b0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d006      	beq.n	80067c6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	2200      	movs	r2, #0
 80067bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80067c0:	711a      	strb	r2, [r3, #4]
 80067c2:	2200      	movs	r2, #0
 80067c4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d006      	beq.n	80067da <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	2200      	movs	r2, #0
 80067d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80067d4:	711a      	strb	r2, [r3, #4]
 80067d6:	2200      	movs	r2, #0
 80067d8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2243      	movs	r2, #67	; 0x43
 80067de:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80067e0:	4b02      	ldr	r3, [pc, #8]	; (80067ec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	3718      	adds	r7, #24
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}
 80067ea:	bf00      	nop
 80067ec:	20000050 	.word	0x20000050

080067f0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b083      	sub	sp, #12
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	220a      	movs	r2, #10
 80067fc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80067fe:	4b03      	ldr	r3, [pc, #12]	; (800680c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006800:	4618      	mov	r0, r3
 8006802:	370c      	adds	r7, #12
 8006804:	46bd      	mov	sp, r7
 8006806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680a:	4770      	bx	lr
 800680c:	2000000c 	.word	0x2000000c

08006810 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006810:	b480      	push	{r7}
 8006812:	b083      	sub	sp, #12
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
 8006818:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d101      	bne.n	8006824 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006820:	2303      	movs	r3, #3
 8006822:	e009      	b.n	8006838 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800682a:	687a      	ldr	r2, [r7, #4]
 800682c:	33b0      	adds	r3, #176	; 0xb0
 800682e:	009b      	lsls	r3, r3, #2
 8006830:	4413      	add	r3, r2
 8006832:	683a      	ldr	r2, [r7, #0]
 8006834:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006836:	2300      	movs	r3, #0
}
 8006838:	4618      	mov	r0, r3
 800683a:	370c      	adds	r7, #12
 800683c:	46bd      	mov	sp, r7
 800683e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006842:	4770      	bx	lr

08006844 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006844:	b480      	push	{r7}
 8006846:	b087      	sub	sp, #28
 8006848:	af00      	add	r7, sp, #0
 800684a:	60f8      	str	r0, [r7, #12]
 800684c:	60b9      	str	r1, [r7, #8]
 800684e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	32b0      	adds	r2, #176	; 0xb0
 800685a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800685e:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006860:	697b      	ldr	r3, [r7, #20]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d101      	bne.n	800686a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006866:	2303      	movs	r3, #3
 8006868:	e008      	b.n	800687c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	68ba      	ldr	r2, [r7, #8]
 800686e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006872:	697b      	ldr	r3, [r7, #20]
 8006874:	687a      	ldr	r2, [r7, #4]
 8006876:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800687a:	2300      	movs	r3, #0
}
 800687c:	4618      	mov	r0, r3
 800687e:	371c      	adds	r7, #28
 8006880:	46bd      	mov	sp, r7
 8006882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006886:	4770      	bx	lr

08006888 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006888:	b480      	push	{r7}
 800688a:	b085      	sub	sp, #20
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
 8006890:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	32b0      	adds	r2, #176	; 0xb0
 800689c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068a0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d101      	bne.n	80068ac <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80068a8:	2303      	movs	r3, #3
 80068aa:	e004      	b.n	80068b6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	683a      	ldr	r2, [r7, #0]
 80068b0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80068b4:	2300      	movs	r3, #0
}
 80068b6:	4618      	mov	r0, r3
 80068b8:	3714      	adds	r7, #20
 80068ba:	46bd      	mov	sp, r7
 80068bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c0:	4770      	bx	lr
	...

080068c4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b084      	sub	sp, #16
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	32b0      	adds	r2, #176	; 0xb0
 80068d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068da:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	32b0      	adds	r2, #176	; 0xb0
 80068e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d101      	bne.n	80068f2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80068ee:	2303      	movs	r3, #3
 80068f0:	e018      	b.n	8006924 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	7c1b      	ldrb	r3, [r3, #16]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d10a      	bne.n	8006910 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80068fa:	4b0c      	ldr	r3, [pc, #48]	; (800692c <USBD_CDC_ReceivePacket+0x68>)
 80068fc:	7819      	ldrb	r1, [r3, #0]
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006904:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f012 f805 	bl	8018918 <USBD_LL_PrepareReceive>
 800690e:	e008      	b.n	8006922 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006910:	4b06      	ldr	r3, [pc, #24]	; (800692c <USBD_CDC_ReceivePacket+0x68>)
 8006912:	7819      	ldrb	r1, [r3, #0]
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800691a:	2340      	movs	r3, #64	; 0x40
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f011 fffb 	bl	8018918 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006922:	2300      	movs	r3, #0
}
 8006924:	4618      	mov	r0, r3
 8006926:	3710      	adds	r7, #16
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}
 800692c:	20000094 	.word	0x20000094

08006930 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b086      	sub	sp, #24
 8006934:	af00      	add	r7, sp, #0
 8006936:	60f8      	str	r0, [r7, #12]
 8006938:	60b9      	str	r1, [r7, #8]
 800693a:	4613      	mov	r3, r2
 800693c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d101      	bne.n	8006948 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006944:	2303      	movs	r3, #3
 8006946:	e01f      	b.n	8006988 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	2200      	movs	r2, #0
 800694c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2200      	movs	r2, #0
 8006954:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	2200      	movs	r2, #0
 800695c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d003      	beq.n	800696e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	68ba      	ldr	r2, [r7, #8]
 800696a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2201      	movs	r2, #1
 8006972:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	79fa      	ldrb	r2, [r7, #7]
 800697a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800697c:	68f8      	ldr	r0, [r7, #12]
 800697e:	f011 fe75 	bl	801866c <USBD_LL_Init>
 8006982:	4603      	mov	r3, r0
 8006984:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006986:	7dfb      	ldrb	r3, [r7, #23]
}
 8006988:	4618      	mov	r0, r3
 800698a:	3718      	adds	r7, #24
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}

08006990 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b084      	sub	sp, #16
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
 8006998:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800699a:	2300      	movs	r3, #0
 800699c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d101      	bne.n	80069a8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80069a4:	2303      	movs	r3, #3
 80069a6:	e025      	b.n	80069f4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	683a      	ldr	r2, [r7, #0]
 80069ac:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	32ae      	adds	r2, #174	; 0xae
 80069ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d00f      	beq.n	80069e4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	32ae      	adds	r2, #174	; 0xae
 80069ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069d4:	f107 020e 	add.w	r2, r7, #14
 80069d8:	4610      	mov	r0, r2
 80069da:	4798      	blx	r3
 80069dc:	4602      	mov	r2, r0
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80069ea:	1c5a      	adds	r2, r3, #1
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80069f2:	2300      	movs	r3, #0
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	3710      	adds	r7, #16
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}

080069fc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b082      	sub	sp, #8
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f011 fe7d 	bl	8018704 <USBD_LL_Start>
 8006a0a:	4603      	mov	r3, r0
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	3708      	adds	r7, #8
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd80      	pop	{r7, pc}

08006a14 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b083      	sub	sp, #12
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006a1c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006a1e:	4618      	mov	r0, r3
 8006a20:	370c      	adds	r7, #12
 8006a22:	46bd      	mov	sp, r7
 8006a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a28:	4770      	bx	lr

08006a2a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006a2a:	b580      	push	{r7, lr}
 8006a2c:	b084      	sub	sp, #16
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	6078      	str	r0, [r7, #4]
 8006a32:	460b      	mov	r3, r1
 8006a34:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a36:	2300      	movs	r3, #0
 8006a38:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d009      	beq.n	8006a58 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	78fa      	ldrb	r2, [r7, #3]
 8006a4e:	4611      	mov	r1, r2
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	4798      	blx	r3
 8006a54:	4603      	mov	r3, r0
 8006a56:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	3710      	adds	r7, #16
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}

08006a62 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006a62:	b580      	push	{r7, lr}
 8006a64:	b084      	sub	sp, #16
 8006a66:	af00      	add	r7, sp, #0
 8006a68:	6078      	str	r0, [r7, #4]
 8006a6a:	460b      	mov	r3, r1
 8006a6c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	78fa      	ldrb	r2, [r7, #3]
 8006a7c:	4611      	mov	r1, r2
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	4798      	blx	r3
 8006a82:	4603      	mov	r3, r0
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d001      	beq.n	8006a8c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006a88:	2303      	movs	r3, #3
 8006a8a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006a8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3710      	adds	r7, #16
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}

08006a96 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006a96:	b580      	push	{r7, lr}
 8006a98:	b084      	sub	sp, #16
 8006a9a:	af00      	add	r7, sp, #0
 8006a9c:	6078      	str	r0, [r7, #4]
 8006a9e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006aa6:	6839      	ldr	r1, [r7, #0]
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	f001 f908 	bl	8007cbe <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2201      	movs	r2, #1
 8006ab2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006abc:	461a      	mov	r2, r3
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006aca:	f003 031f 	and.w	r3, r3, #31
 8006ace:	2b02      	cmp	r3, #2
 8006ad0:	d01a      	beq.n	8006b08 <USBD_LL_SetupStage+0x72>
 8006ad2:	2b02      	cmp	r3, #2
 8006ad4:	d822      	bhi.n	8006b1c <USBD_LL_SetupStage+0x86>
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d002      	beq.n	8006ae0 <USBD_LL_SetupStage+0x4a>
 8006ada:	2b01      	cmp	r3, #1
 8006adc:	d00a      	beq.n	8006af4 <USBD_LL_SetupStage+0x5e>
 8006ade:	e01d      	b.n	8006b1c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006ae6:	4619      	mov	r1, r3
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	f000 fb5f 	bl	80071ac <USBD_StdDevReq>
 8006aee:	4603      	mov	r3, r0
 8006af0:	73fb      	strb	r3, [r7, #15]
      break;
 8006af2:	e020      	b.n	8006b36 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006afa:	4619      	mov	r1, r3
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f000 fbc7 	bl	8007290 <USBD_StdItfReq>
 8006b02:	4603      	mov	r3, r0
 8006b04:	73fb      	strb	r3, [r7, #15]
      break;
 8006b06:	e016      	b.n	8006b36 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006b0e:	4619      	mov	r1, r3
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f000 fc29 	bl	8007368 <USBD_StdEPReq>
 8006b16:	4603      	mov	r3, r0
 8006b18:	73fb      	strb	r3, [r7, #15]
      break;
 8006b1a:	e00c      	b.n	8006b36 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006b22:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006b26:	b2db      	uxtb	r3, r3
 8006b28:	4619      	mov	r1, r3
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f011 fe4a 	bl	80187c4 <USBD_LL_StallEP>
 8006b30:	4603      	mov	r3, r0
 8006b32:	73fb      	strb	r3, [r7, #15]
      break;
 8006b34:	bf00      	nop
  }

  return ret;
 8006b36:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	3710      	adds	r7, #16
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bd80      	pop	{r7, pc}

08006b40 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b086      	sub	sp, #24
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	60f8      	str	r0, [r7, #12]
 8006b48:	460b      	mov	r3, r1
 8006b4a:	607a      	str	r2, [r7, #4]
 8006b4c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006b52:	7afb      	ldrb	r3, [r7, #11]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d16e      	bne.n	8006c36 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006b5e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006b66:	2b03      	cmp	r3, #3
 8006b68:	f040 8098 	bne.w	8006c9c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	689a      	ldr	r2, [r3, #8]
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	68db      	ldr	r3, [r3, #12]
 8006b74:	429a      	cmp	r2, r3
 8006b76:	d913      	bls.n	8006ba0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006b78:	693b      	ldr	r3, [r7, #16]
 8006b7a:	689a      	ldr	r2, [r3, #8]
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	68db      	ldr	r3, [r3, #12]
 8006b80:	1ad2      	subs	r2, r2, r3
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006b86:	693b      	ldr	r3, [r7, #16]
 8006b88:	68da      	ldr	r2, [r3, #12]
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	689b      	ldr	r3, [r3, #8]
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	bf28      	it	cs
 8006b92:	4613      	movcs	r3, r2
 8006b94:	461a      	mov	r2, r3
 8006b96:	6879      	ldr	r1, [r7, #4]
 8006b98:	68f8      	ldr	r0, [r7, #12]
 8006b9a:	f001 f984 	bl	8007ea6 <USBD_CtlContinueRx>
 8006b9e:	e07d      	b.n	8006c9c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006ba6:	f003 031f 	and.w	r3, r3, #31
 8006baa:	2b02      	cmp	r3, #2
 8006bac:	d014      	beq.n	8006bd8 <USBD_LL_DataOutStage+0x98>
 8006bae:	2b02      	cmp	r3, #2
 8006bb0:	d81d      	bhi.n	8006bee <USBD_LL_DataOutStage+0xae>
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d002      	beq.n	8006bbc <USBD_LL_DataOutStage+0x7c>
 8006bb6:	2b01      	cmp	r3, #1
 8006bb8:	d003      	beq.n	8006bc2 <USBD_LL_DataOutStage+0x82>
 8006bba:	e018      	b.n	8006bee <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	75bb      	strb	r3, [r7, #22]
            break;
 8006bc0:	e018      	b.n	8006bf4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006bc8:	b2db      	uxtb	r3, r3
 8006bca:	4619      	mov	r1, r3
 8006bcc:	68f8      	ldr	r0, [r7, #12]
 8006bce:	f000 fa5e 	bl	800708e <USBD_CoreFindIF>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	75bb      	strb	r3, [r7, #22]
            break;
 8006bd6:	e00d      	b.n	8006bf4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006bde:	b2db      	uxtb	r3, r3
 8006be0:	4619      	mov	r1, r3
 8006be2:	68f8      	ldr	r0, [r7, #12]
 8006be4:	f000 fa60 	bl	80070a8 <USBD_CoreFindEP>
 8006be8:	4603      	mov	r3, r0
 8006bea:	75bb      	strb	r3, [r7, #22]
            break;
 8006bec:	e002      	b.n	8006bf4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	75bb      	strb	r3, [r7, #22]
            break;
 8006bf2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006bf4:	7dbb      	ldrb	r3, [r7, #22]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d119      	bne.n	8006c2e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c00:	b2db      	uxtb	r3, r3
 8006c02:	2b03      	cmp	r3, #3
 8006c04:	d113      	bne.n	8006c2e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006c06:	7dba      	ldrb	r2, [r7, #22]
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	32ae      	adds	r2, #174	; 0xae
 8006c0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c10:	691b      	ldr	r3, [r3, #16]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d00b      	beq.n	8006c2e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006c16:	7dba      	ldrb	r2, [r7, #22]
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006c1e:	7dba      	ldrb	r2, [r7, #22]
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	32ae      	adds	r2, #174	; 0xae
 8006c24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c28:	691b      	ldr	r3, [r3, #16]
 8006c2a:	68f8      	ldr	r0, [r7, #12]
 8006c2c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006c2e:	68f8      	ldr	r0, [r7, #12]
 8006c30:	f001 f94a 	bl	8007ec8 <USBD_CtlSendStatus>
 8006c34:	e032      	b.n	8006c9c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006c36:	7afb      	ldrb	r3, [r7, #11]
 8006c38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c3c:	b2db      	uxtb	r3, r3
 8006c3e:	4619      	mov	r1, r3
 8006c40:	68f8      	ldr	r0, [r7, #12]
 8006c42:	f000 fa31 	bl	80070a8 <USBD_CoreFindEP>
 8006c46:	4603      	mov	r3, r0
 8006c48:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006c4a:	7dbb      	ldrb	r3, [r7, #22]
 8006c4c:	2bff      	cmp	r3, #255	; 0xff
 8006c4e:	d025      	beq.n	8006c9c <USBD_LL_DataOutStage+0x15c>
 8006c50:	7dbb      	ldrb	r3, [r7, #22]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d122      	bne.n	8006c9c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c5c:	b2db      	uxtb	r3, r3
 8006c5e:	2b03      	cmp	r3, #3
 8006c60:	d117      	bne.n	8006c92 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006c62:	7dba      	ldrb	r2, [r7, #22]
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	32ae      	adds	r2, #174	; 0xae
 8006c68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c6c:	699b      	ldr	r3, [r3, #24]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d00f      	beq.n	8006c92 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006c72:	7dba      	ldrb	r2, [r7, #22]
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006c7a:	7dba      	ldrb	r2, [r7, #22]
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	32ae      	adds	r2, #174	; 0xae
 8006c80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c84:	699b      	ldr	r3, [r3, #24]
 8006c86:	7afa      	ldrb	r2, [r7, #11]
 8006c88:	4611      	mov	r1, r2
 8006c8a:	68f8      	ldr	r0, [r7, #12]
 8006c8c:	4798      	blx	r3
 8006c8e:	4603      	mov	r3, r0
 8006c90:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006c92:	7dfb      	ldrb	r3, [r7, #23]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d001      	beq.n	8006c9c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006c98:	7dfb      	ldrb	r3, [r7, #23]
 8006c9a:	e000      	b.n	8006c9e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006c9c:	2300      	movs	r3, #0
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	3718      	adds	r7, #24
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}

08006ca6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006ca6:	b580      	push	{r7, lr}
 8006ca8:	b086      	sub	sp, #24
 8006caa:	af00      	add	r7, sp, #0
 8006cac:	60f8      	str	r0, [r7, #12]
 8006cae:	460b      	mov	r3, r1
 8006cb0:	607a      	str	r2, [r7, #4]
 8006cb2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006cb4:	7afb      	ldrb	r3, [r7, #11]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d16f      	bne.n	8006d9a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	3314      	adds	r3, #20
 8006cbe:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006cc6:	2b02      	cmp	r3, #2
 8006cc8:	d15a      	bne.n	8006d80 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	689a      	ldr	r2, [r3, #8]
 8006cce:	693b      	ldr	r3, [r7, #16]
 8006cd0:	68db      	ldr	r3, [r3, #12]
 8006cd2:	429a      	cmp	r2, r3
 8006cd4:	d914      	bls.n	8006d00 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006cd6:	693b      	ldr	r3, [r7, #16]
 8006cd8:	689a      	ldr	r2, [r3, #8]
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	68db      	ldr	r3, [r3, #12]
 8006cde:	1ad2      	subs	r2, r2, r3
 8006ce0:	693b      	ldr	r3, [r7, #16]
 8006ce2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	689b      	ldr	r3, [r3, #8]
 8006ce8:	461a      	mov	r2, r3
 8006cea:	6879      	ldr	r1, [r7, #4]
 8006cec:	68f8      	ldr	r0, [r7, #12]
 8006cee:	f001 f8ac 	bl	8007e4a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	2100      	movs	r1, #0
 8006cf8:	68f8      	ldr	r0, [r7, #12]
 8006cfa:	f011 fe0d 	bl	8018918 <USBD_LL_PrepareReceive>
 8006cfe:	e03f      	b.n	8006d80 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	68da      	ldr	r2, [r3, #12]
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	689b      	ldr	r3, [r3, #8]
 8006d08:	429a      	cmp	r2, r3
 8006d0a:	d11c      	bne.n	8006d46 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	685a      	ldr	r2, [r3, #4]
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006d14:	429a      	cmp	r2, r3
 8006d16:	d316      	bcc.n	8006d46 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006d18:	693b      	ldr	r3, [r7, #16]
 8006d1a:	685a      	ldr	r2, [r3, #4]
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006d22:	429a      	cmp	r2, r3
 8006d24:	d20f      	bcs.n	8006d46 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006d26:	2200      	movs	r2, #0
 8006d28:	2100      	movs	r1, #0
 8006d2a:	68f8      	ldr	r0, [r7, #12]
 8006d2c:	f001 f88d 	bl	8007e4a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	2200      	movs	r2, #0
 8006d34:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006d38:	2300      	movs	r3, #0
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	2100      	movs	r1, #0
 8006d3e:	68f8      	ldr	r0, [r7, #12]
 8006d40:	f011 fdea 	bl	8018918 <USBD_LL_PrepareReceive>
 8006d44:	e01c      	b.n	8006d80 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d4c:	b2db      	uxtb	r3, r3
 8006d4e:	2b03      	cmp	r3, #3
 8006d50:	d10f      	bne.n	8006d72 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d58:	68db      	ldr	r3, [r3, #12]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d009      	beq.n	8006d72 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	2200      	movs	r2, #0
 8006d62:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d6c:	68db      	ldr	r3, [r3, #12]
 8006d6e:	68f8      	ldr	r0, [r7, #12]
 8006d70:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006d72:	2180      	movs	r1, #128	; 0x80
 8006d74:	68f8      	ldr	r0, [r7, #12]
 8006d76:	f011 fd25 	bl	80187c4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006d7a:	68f8      	ldr	r0, [r7, #12]
 8006d7c:	f001 f8b7 	bl	8007eee <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d03a      	beq.n	8006e00 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006d8a:	68f8      	ldr	r0, [r7, #12]
 8006d8c:	f7ff fe42 	bl	8006a14 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	2200      	movs	r2, #0
 8006d94:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006d98:	e032      	b.n	8006e00 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006d9a:	7afb      	ldrb	r3, [r7, #11]
 8006d9c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006da0:	b2db      	uxtb	r3, r3
 8006da2:	4619      	mov	r1, r3
 8006da4:	68f8      	ldr	r0, [r7, #12]
 8006da6:	f000 f97f 	bl	80070a8 <USBD_CoreFindEP>
 8006daa:	4603      	mov	r3, r0
 8006dac:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006dae:	7dfb      	ldrb	r3, [r7, #23]
 8006db0:	2bff      	cmp	r3, #255	; 0xff
 8006db2:	d025      	beq.n	8006e00 <USBD_LL_DataInStage+0x15a>
 8006db4:	7dfb      	ldrb	r3, [r7, #23]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d122      	bne.n	8006e00 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dc0:	b2db      	uxtb	r3, r3
 8006dc2:	2b03      	cmp	r3, #3
 8006dc4:	d11c      	bne.n	8006e00 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006dc6:	7dfa      	ldrb	r2, [r7, #23]
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	32ae      	adds	r2, #174	; 0xae
 8006dcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dd0:	695b      	ldr	r3, [r3, #20]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d014      	beq.n	8006e00 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006dd6:	7dfa      	ldrb	r2, [r7, #23]
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006dde:	7dfa      	ldrb	r2, [r7, #23]
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	32ae      	adds	r2, #174	; 0xae
 8006de4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006de8:	695b      	ldr	r3, [r3, #20]
 8006dea:	7afa      	ldrb	r2, [r7, #11]
 8006dec:	4611      	mov	r1, r2
 8006dee:	68f8      	ldr	r0, [r7, #12]
 8006df0:	4798      	blx	r3
 8006df2:	4603      	mov	r3, r0
 8006df4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006df6:	7dbb      	ldrb	r3, [r7, #22]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d001      	beq.n	8006e00 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006dfc:	7dbb      	ldrb	r3, [r7, #22]
 8006dfe:	e000      	b.n	8006e02 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006e00:	2300      	movs	r3, #0
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	3718      	adds	r7, #24
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bd80      	pop	{r7, pc}

08006e0a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006e0a:	b580      	push	{r7, lr}
 8006e0c:	b084      	sub	sp, #16
 8006e0e:	af00      	add	r7, sp, #0
 8006e10:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e12:	2300      	movs	r3, #0
 8006e14:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2201      	movs	r2, #1
 8006e1a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2200      	movs	r2, #0
 8006e22:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2200      	movs	r2, #0
 8006e38:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d014      	beq.n	8006e70 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d00e      	beq.n	8006e70 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e58:	685b      	ldr	r3, [r3, #4]
 8006e5a:	687a      	ldr	r2, [r7, #4]
 8006e5c:	6852      	ldr	r2, [r2, #4]
 8006e5e:	b2d2      	uxtb	r2, r2
 8006e60:	4611      	mov	r1, r2
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	4798      	blx	r3
 8006e66:	4603      	mov	r3, r0
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d001      	beq.n	8006e70 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006e6c:	2303      	movs	r3, #3
 8006e6e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006e70:	2340      	movs	r3, #64	; 0x40
 8006e72:	2200      	movs	r2, #0
 8006e74:	2100      	movs	r1, #0
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f011 fc5f 	bl	801873a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2201      	movs	r2, #1
 8006e80:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2240      	movs	r2, #64	; 0x40
 8006e88:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006e8c:	2340      	movs	r3, #64	; 0x40
 8006e8e:	2200      	movs	r2, #0
 8006e90:	2180      	movs	r1, #128	; 0x80
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f011 fc51 	bl	801873a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2240      	movs	r2, #64	; 0x40
 8006ea2:	621a      	str	r2, [r3, #32]

  return ret;
 8006ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	3710      	adds	r7, #16
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bd80      	pop	{r7, pc}

08006eae <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006eae:	b480      	push	{r7}
 8006eb0:	b083      	sub	sp, #12
 8006eb2:	af00      	add	r7, sp, #0
 8006eb4:	6078      	str	r0, [r7, #4]
 8006eb6:	460b      	mov	r3, r1
 8006eb8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	78fa      	ldrb	r2, [r7, #3]
 8006ebe:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006ec0:	2300      	movs	r3, #0
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	370c      	adds	r7, #12
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ecc:	4770      	bx	lr

08006ece <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006ece:	b480      	push	{r7}
 8006ed0:	b083      	sub	sp, #12
 8006ed2:	af00      	add	r7, sp, #0
 8006ed4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006edc:	b2da      	uxtb	r2, r3
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2204      	movs	r2, #4
 8006ee8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006eec:	2300      	movs	r3, #0
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	370c      	adds	r7, #12
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef8:	4770      	bx	lr

08006efa <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006efa:	b480      	push	{r7}
 8006efc:	b083      	sub	sp, #12
 8006efe:	af00      	add	r7, sp, #0
 8006f00:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f08:	b2db      	uxtb	r3, r3
 8006f0a:	2b04      	cmp	r3, #4
 8006f0c:	d106      	bne.n	8006f1c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006f14:	b2da      	uxtb	r2, r3
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006f1c:	2300      	movs	r3, #0
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	370c      	adds	r7, #12
 8006f22:	46bd      	mov	sp, r7
 8006f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f28:	4770      	bx	lr

08006f2a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006f2a:	b580      	push	{r7, lr}
 8006f2c:	b082      	sub	sp, #8
 8006f2e:	af00      	add	r7, sp, #0
 8006f30:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f38:	b2db      	uxtb	r3, r3
 8006f3a:	2b03      	cmp	r3, #3
 8006f3c:	d110      	bne.n	8006f60 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d00b      	beq.n	8006f60 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f4e:	69db      	ldr	r3, [r3, #28]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d005      	beq.n	8006f60 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f5a:	69db      	ldr	r3, [r3, #28]
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006f60:	2300      	movs	r3, #0
}
 8006f62:	4618      	mov	r0, r3
 8006f64:	3708      	adds	r7, #8
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd80      	pop	{r7, pc}

08006f6a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006f6a:	b580      	push	{r7, lr}
 8006f6c:	b082      	sub	sp, #8
 8006f6e:	af00      	add	r7, sp, #0
 8006f70:	6078      	str	r0, [r7, #4]
 8006f72:	460b      	mov	r3, r1
 8006f74:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	32ae      	adds	r2, #174	; 0xae
 8006f80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d101      	bne.n	8006f8c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006f88:	2303      	movs	r3, #3
 8006f8a:	e01c      	b.n	8006fc6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f92:	b2db      	uxtb	r3, r3
 8006f94:	2b03      	cmp	r3, #3
 8006f96:	d115      	bne.n	8006fc4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	32ae      	adds	r2, #174	; 0xae
 8006fa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fa6:	6a1b      	ldr	r3, [r3, #32]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d00b      	beq.n	8006fc4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	32ae      	adds	r2, #174	; 0xae
 8006fb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fba:	6a1b      	ldr	r3, [r3, #32]
 8006fbc:	78fa      	ldrb	r2, [r7, #3]
 8006fbe:	4611      	mov	r1, r2
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006fc4:	2300      	movs	r3, #0
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3708      	adds	r7, #8
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}

08006fce <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006fce:	b580      	push	{r7, lr}
 8006fd0:	b082      	sub	sp, #8
 8006fd2:	af00      	add	r7, sp, #0
 8006fd4:	6078      	str	r0, [r7, #4]
 8006fd6:	460b      	mov	r3, r1
 8006fd8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	32ae      	adds	r2, #174	; 0xae
 8006fe4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d101      	bne.n	8006ff0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006fec:	2303      	movs	r3, #3
 8006fee:	e01c      	b.n	800702a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ff6:	b2db      	uxtb	r3, r3
 8006ff8:	2b03      	cmp	r3, #3
 8006ffa:	d115      	bne.n	8007028 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	32ae      	adds	r2, #174	; 0xae
 8007006:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800700a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800700c:	2b00      	cmp	r3, #0
 800700e:	d00b      	beq.n	8007028 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	32ae      	adds	r2, #174	; 0xae
 800701a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800701e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007020:	78fa      	ldrb	r2, [r7, #3]
 8007022:	4611      	mov	r1, r2
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007028:	2300      	movs	r3, #0
}
 800702a:	4618      	mov	r0, r3
 800702c:	3708      	adds	r7, #8
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}

08007032 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007032:	b480      	push	{r7}
 8007034:	b083      	sub	sp, #12
 8007036:	af00      	add	r7, sp, #0
 8007038:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800703a:	2300      	movs	r3, #0
}
 800703c:	4618      	mov	r0, r3
 800703e:	370c      	adds	r7, #12
 8007040:	46bd      	mov	sp, r7
 8007042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007046:	4770      	bx	lr

08007048 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b084      	sub	sp, #16
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007050:	2300      	movs	r3, #0
 8007052:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2201      	movs	r2, #1
 8007058:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007062:	2b00      	cmp	r3, #0
 8007064:	d00e      	beq.n	8007084 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800706c:	685b      	ldr	r3, [r3, #4]
 800706e:	687a      	ldr	r2, [r7, #4]
 8007070:	6852      	ldr	r2, [r2, #4]
 8007072:	b2d2      	uxtb	r2, r2
 8007074:	4611      	mov	r1, r2
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	4798      	blx	r3
 800707a:	4603      	mov	r3, r0
 800707c:	2b00      	cmp	r3, #0
 800707e:	d001      	beq.n	8007084 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007080:	2303      	movs	r3, #3
 8007082:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007084:	7bfb      	ldrb	r3, [r7, #15]
}
 8007086:	4618      	mov	r0, r3
 8007088:	3710      	adds	r7, #16
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}

0800708e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800708e:	b480      	push	{r7}
 8007090:	b083      	sub	sp, #12
 8007092:	af00      	add	r7, sp, #0
 8007094:	6078      	str	r0, [r7, #4]
 8007096:	460b      	mov	r3, r1
 8007098:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800709a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800709c:	4618      	mov	r0, r3
 800709e:	370c      	adds	r7, #12
 80070a0:	46bd      	mov	sp, r7
 80070a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a6:	4770      	bx	lr

080070a8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b083      	sub	sp, #12
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
 80070b0:	460b      	mov	r3, r1
 80070b2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80070b4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	370c      	adds	r7, #12
 80070ba:	46bd      	mov	sp, r7
 80070bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c0:	4770      	bx	lr

080070c2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80070c2:	b580      	push	{r7, lr}
 80070c4:	b086      	sub	sp, #24
 80070c6:	af00      	add	r7, sp, #0
 80070c8:	6078      	str	r0, [r7, #4]
 80070ca:	460b      	mov	r3, r1
 80070cc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80070d6:	2300      	movs	r3, #0
 80070d8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	885b      	ldrh	r3, [r3, #2]
 80070de:	b29a      	uxth	r2, r3
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	781b      	ldrb	r3, [r3, #0]
 80070e4:	b29b      	uxth	r3, r3
 80070e6:	429a      	cmp	r2, r3
 80070e8:	d920      	bls.n	800712c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	781b      	ldrb	r3, [r3, #0]
 80070ee:	b29b      	uxth	r3, r3
 80070f0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80070f2:	e013      	b.n	800711c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80070f4:	f107 030a 	add.w	r3, r7, #10
 80070f8:	4619      	mov	r1, r3
 80070fa:	6978      	ldr	r0, [r7, #20]
 80070fc:	f000 f81b 	bl	8007136 <USBD_GetNextDesc>
 8007100:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	785b      	ldrb	r3, [r3, #1]
 8007106:	2b05      	cmp	r3, #5
 8007108:	d108      	bne.n	800711c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800710e:	693b      	ldr	r3, [r7, #16]
 8007110:	789b      	ldrb	r3, [r3, #2]
 8007112:	78fa      	ldrb	r2, [r7, #3]
 8007114:	429a      	cmp	r2, r3
 8007116:	d008      	beq.n	800712a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007118:	2300      	movs	r3, #0
 800711a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	885b      	ldrh	r3, [r3, #2]
 8007120:	b29a      	uxth	r2, r3
 8007122:	897b      	ldrh	r3, [r7, #10]
 8007124:	429a      	cmp	r2, r3
 8007126:	d8e5      	bhi.n	80070f4 <USBD_GetEpDesc+0x32>
 8007128:	e000      	b.n	800712c <USBD_GetEpDesc+0x6a>
          break;
 800712a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800712c:	693b      	ldr	r3, [r7, #16]
}
 800712e:	4618      	mov	r0, r3
 8007130:	3718      	adds	r7, #24
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}

08007136 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007136:	b480      	push	{r7}
 8007138:	b085      	sub	sp, #20
 800713a:	af00      	add	r7, sp, #0
 800713c:	6078      	str	r0, [r7, #4]
 800713e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	881a      	ldrh	r2, [r3, #0]
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	781b      	ldrb	r3, [r3, #0]
 800714c:	b29b      	uxth	r3, r3
 800714e:	4413      	add	r3, r2
 8007150:	b29a      	uxth	r2, r3
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	781b      	ldrb	r3, [r3, #0]
 800715a:	461a      	mov	r2, r3
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	4413      	add	r3, r2
 8007160:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007162:	68fb      	ldr	r3, [r7, #12]
}
 8007164:	4618      	mov	r0, r3
 8007166:	3714      	adds	r7, #20
 8007168:	46bd      	mov	sp, r7
 800716a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716e:	4770      	bx	lr

08007170 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007170:	b480      	push	{r7}
 8007172:	b087      	sub	sp, #28
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	781b      	ldrb	r3, [r3, #0]
 8007180:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	3301      	adds	r3, #1
 8007186:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	781b      	ldrb	r3, [r3, #0]
 800718c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800718e:	8a3b      	ldrh	r3, [r7, #16]
 8007190:	021b      	lsls	r3, r3, #8
 8007192:	b21a      	sxth	r2, r3
 8007194:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007198:	4313      	orrs	r3, r2
 800719a:	b21b      	sxth	r3, r3
 800719c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800719e:	89fb      	ldrh	r3, [r7, #14]
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	371c      	adds	r7, #28
 80071a4:	46bd      	mov	sp, r7
 80071a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071aa:	4770      	bx	lr

080071ac <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b084      	sub	sp, #16
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
 80071b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80071b6:	2300      	movs	r3, #0
 80071b8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	781b      	ldrb	r3, [r3, #0]
 80071be:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80071c2:	2b40      	cmp	r3, #64	; 0x40
 80071c4:	d005      	beq.n	80071d2 <USBD_StdDevReq+0x26>
 80071c6:	2b40      	cmp	r3, #64	; 0x40
 80071c8:	d857      	bhi.n	800727a <USBD_StdDevReq+0xce>
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d00f      	beq.n	80071ee <USBD_StdDevReq+0x42>
 80071ce:	2b20      	cmp	r3, #32
 80071d0:	d153      	bne.n	800727a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	32ae      	adds	r2, #174	; 0xae
 80071dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071e0:	689b      	ldr	r3, [r3, #8]
 80071e2:	6839      	ldr	r1, [r7, #0]
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	4798      	blx	r3
 80071e8:	4603      	mov	r3, r0
 80071ea:	73fb      	strb	r3, [r7, #15]
      break;
 80071ec:	e04a      	b.n	8007284 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	785b      	ldrb	r3, [r3, #1]
 80071f2:	2b09      	cmp	r3, #9
 80071f4:	d83b      	bhi.n	800726e <USBD_StdDevReq+0xc2>
 80071f6:	a201      	add	r2, pc, #4	; (adr r2, 80071fc <USBD_StdDevReq+0x50>)
 80071f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071fc:	08007251 	.word	0x08007251
 8007200:	08007265 	.word	0x08007265
 8007204:	0800726f 	.word	0x0800726f
 8007208:	0800725b 	.word	0x0800725b
 800720c:	0800726f 	.word	0x0800726f
 8007210:	0800722f 	.word	0x0800722f
 8007214:	08007225 	.word	0x08007225
 8007218:	0800726f 	.word	0x0800726f
 800721c:	08007247 	.word	0x08007247
 8007220:	08007239 	.word	0x08007239
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007224:	6839      	ldr	r1, [r7, #0]
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f000 fa3c 	bl	80076a4 <USBD_GetDescriptor>
          break;
 800722c:	e024      	b.n	8007278 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800722e:	6839      	ldr	r1, [r7, #0]
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f000 fba1 	bl	8007978 <USBD_SetAddress>
          break;
 8007236:	e01f      	b.n	8007278 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007238:	6839      	ldr	r1, [r7, #0]
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f000 fbe0 	bl	8007a00 <USBD_SetConfig>
 8007240:	4603      	mov	r3, r0
 8007242:	73fb      	strb	r3, [r7, #15]
          break;
 8007244:	e018      	b.n	8007278 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007246:	6839      	ldr	r1, [r7, #0]
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f000 fc83 	bl	8007b54 <USBD_GetConfig>
          break;
 800724e:	e013      	b.n	8007278 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007250:	6839      	ldr	r1, [r7, #0]
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f000 fcb4 	bl	8007bc0 <USBD_GetStatus>
          break;
 8007258:	e00e      	b.n	8007278 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800725a:	6839      	ldr	r1, [r7, #0]
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	f000 fce3 	bl	8007c28 <USBD_SetFeature>
          break;
 8007262:	e009      	b.n	8007278 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007264:	6839      	ldr	r1, [r7, #0]
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f000 fd07 	bl	8007c7a <USBD_ClrFeature>
          break;
 800726c:	e004      	b.n	8007278 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800726e:	6839      	ldr	r1, [r7, #0]
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f000 fd5e 	bl	8007d32 <USBD_CtlError>
          break;
 8007276:	bf00      	nop
      }
      break;
 8007278:	e004      	b.n	8007284 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800727a:	6839      	ldr	r1, [r7, #0]
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	f000 fd58 	bl	8007d32 <USBD_CtlError>
      break;
 8007282:	bf00      	nop
  }

  return ret;
 8007284:	7bfb      	ldrb	r3, [r7, #15]
}
 8007286:	4618      	mov	r0, r3
 8007288:	3710      	adds	r7, #16
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}
 800728e:	bf00      	nop

08007290 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b084      	sub	sp, #16
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
 8007298:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800729a:	2300      	movs	r3, #0
 800729c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	781b      	ldrb	r3, [r3, #0]
 80072a2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80072a6:	2b40      	cmp	r3, #64	; 0x40
 80072a8:	d005      	beq.n	80072b6 <USBD_StdItfReq+0x26>
 80072aa:	2b40      	cmp	r3, #64	; 0x40
 80072ac:	d852      	bhi.n	8007354 <USBD_StdItfReq+0xc4>
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d001      	beq.n	80072b6 <USBD_StdItfReq+0x26>
 80072b2:	2b20      	cmp	r3, #32
 80072b4:	d14e      	bne.n	8007354 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072bc:	b2db      	uxtb	r3, r3
 80072be:	3b01      	subs	r3, #1
 80072c0:	2b02      	cmp	r3, #2
 80072c2:	d840      	bhi.n	8007346 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	889b      	ldrh	r3, [r3, #4]
 80072c8:	b2db      	uxtb	r3, r3
 80072ca:	2b01      	cmp	r3, #1
 80072cc:	d836      	bhi.n	800733c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	889b      	ldrh	r3, [r3, #4]
 80072d2:	b2db      	uxtb	r3, r3
 80072d4:	4619      	mov	r1, r3
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f7ff fed9 	bl	800708e <USBD_CoreFindIF>
 80072dc:	4603      	mov	r3, r0
 80072de:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80072e0:	7bbb      	ldrb	r3, [r7, #14]
 80072e2:	2bff      	cmp	r3, #255	; 0xff
 80072e4:	d01d      	beq.n	8007322 <USBD_StdItfReq+0x92>
 80072e6:	7bbb      	ldrb	r3, [r7, #14]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d11a      	bne.n	8007322 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80072ec:	7bba      	ldrb	r2, [r7, #14]
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	32ae      	adds	r2, #174	; 0xae
 80072f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072f6:	689b      	ldr	r3, [r3, #8]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d00f      	beq.n	800731c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80072fc:	7bba      	ldrb	r2, [r7, #14]
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007304:	7bba      	ldrb	r2, [r7, #14]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	32ae      	adds	r2, #174	; 0xae
 800730a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800730e:	689b      	ldr	r3, [r3, #8]
 8007310:	6839      	ldr	r1, [r7, #0]
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	4798      	blx	r3
 8007316:	4603      	mov	r3, r0
 8007318:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800731a:	e004      	b.n	8007326 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800731c:	2303      	movs	r3, #3
 800731e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007320:	e001      	b.n	8007326 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007322:	2303      	movs	r3, #3
 8007324:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	88db      	ldrh	r3, [r3, #6]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d110      	bne.n	8007350 <USBD_StdItfReq+0xc0>
 800732e:	7bfb      	ldrb	r3, [r7, #15]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d10d      	bne.n	8007350 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	f000 fdc7 	bl	8007ec8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800733a:	e009      	b.n	8007350 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800733c:	6839      	ldr	r1, [r7, #0]
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f000 fcf7 	bl	8007d32 <USBD_CtlError>
          break;
 8007344:	e004      	b.n	8007350 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007346:	6839      	ldr	r1, [r7, #0]
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f000 fcf2 	bl	8007d32 <USBD_CtlError>
          break;
 800734e:	e000      	b.n	8007352 <USBD_StdItfReq+0xc2>
          break;
 8007350:	bf00      	nop
      }
      break;
 8007352:	e004      	b.n	800735e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007354:	6839      	ldr	r1, [r7, #0]
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f000 fceb 	bl	8007d32 <USBD_CtlError>
      break;
 800735c:	bf00      	nop
  }

  return ret;
 800735e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007360:	4618      	mov	r0, r3
 8007362:	3710      	adds	r7, #16
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}

08007368 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b084      	sub	sp, #16
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
 8007370:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007372:	2300      	movs	r3, #0
 8007374:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	889b      	ldrh	r3, [r3, #4]
 800737a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	781b      	ldrb	r3, [r3, #0]
 8007380:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007384:	2b40      	cmp	r3, #64	; 0x40
 8007386:	d007      	beq.n	8007398 <USBD_StdEPReq+0x30>
 8007388:	2b40      	cmp	r3, #64	; 0x40
 800738a:	f200 817f 	bhi.w	800768c <USBD_StdEPReq+0x324>
 800738e:	2b00      	cmp	r3, #0
 8007390:	d02a      	beq.n	80073e8 <USBD_StdEPReq+0x80>
 8007392:	2b20      	cmp	r3, #32
 8007394:	f040 817a 	bne.w	800768c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007398:	7bbb      	ldrb	r3, [r7, #14]
 800739a:	4619      	mov	r1, r3
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	f7ff fe83 	bl	80070a8 <USBD_CoreFindEP>
 80073a2:	4603      	mov	r3, r0
 80073a4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80073a6:	7b7b      	ldrb	r3, [r7, #13]
 80073a8:	2bff      	cmp	r3, #255	; 0xff
 80073aa:	f000 8174 	beq.w	8007696 <USBD_StdEPReq+0x32e>
 80073ae:	7b7b      	ldrb	r3, [r7, #13]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	f040 8170 	bne.w	8007696 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80073b6:	7b7a      	ldrb	r2, [r7, #13]
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80073be:	7b7a      	ldrb	r2, [r7, #13]
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	32ae      	adds	r2, #174	; 0xae
 80073c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073c8:	689b      	ldr	r3, [r3, #8]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	f000 8163 	beq.w	8007696 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80073d0:	7b7a      	ldrb	r2, [r7, #13]
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	32ae      	adds	r2, #174	; 0xae
 80073d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073da:	689b      	ldr	r3, [r3, #8]
 80073dc:	6839      	ldr	r1, [r7, #0]
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	4798      	blx	r3
 80073e2:	4603      	mov	r3, r0
 80073e4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80073e6:	e156      	b.n	8007696 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	785b      	ldrb	r3, [r3, #1]
 80073ec:	2b03      	cmp	r3, #3
 80073ee:	d008      	beq.n	8007402 <USBD_StdEPReq+0x9a>
 80073f0:	2b03      	cmp	r3, #3
 80073f2:	f300 8145 	bgt.w	8007680 <USBD_StdEPReq+0x318>
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	f000 809b 	beq.w	8007532 <USBD_StdEPReq+0x1ca>
 80073fc:	2b01      	cmp	r3, #1
 80073fe:	d03c      	beq.n	800747a <USBD_StdEPReq+0x112>
 8007400:	e13e      	b.n	8007680 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007408:	b2db      	uxtb	r3, r3
 800740a:	2b02      	cmp	r3, #2
 800740c:	d002      	beq.n	8007414 <USBD_StdEPReq+0xac>
 800740e:	2b03      	cmp	r3, #3
 8007410:	d016      	beq.n	8007440 <USBD_StdEPReq+0xd8>
 8007412:	e02c      	b.n	800746e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007414:	7bbb      	ldrb	r3, [r7, #14]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d00d      	beq.n	8007436 <USBD_StdEPReq+0xce>
 800741a:	7bbb      	ldrb	r3, [r7, #14]
 800741c:	2b80      	cmp	r3, #128	; 0x80
 800741e:	d00a      	beq.n	8007436 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007420:	7bbb      	ldrb	r3, [r7, #14]
 8007422:	4619      	mov	r1, r3
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f011 f9cd 	bl	80187c4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800742a:	2180      	movs	r1, #128	; 0x80
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f011 f9c9 	bl	80187c4 <USBD_LL_StallEP>
 8007432:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007434:	e020      	b.n	8007478 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007436:	6839      	ldr	r1, [r7, #0]
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f000 fc7a 	bl	8007d32 <USBD_CtlError>
              break;
 800743e:	e01b      	b.n	8007478 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	885b      	ldrh	r3, [r3, #2]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d10e      	bne.n	8007466 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007448:	7bbb      	ldrb	r3, [r7, #14]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d00b      	beq.n	8007466 <USBD_StdEPReq+0xfe>
 800744e:	7bbb      	ldrb	r3, [r7, #14]
 8007450:	2b80      	cmp	r3, #128	; 0x80
 8007452:	d008      	beq.n	8007466 <USBD_StdEPReq+0xfe>
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	88db      	ldrh	r3, [r3, #6]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d104      	bne.n	8007466 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800745c:	7bbb      	ldrb	r3, [r7, #14]
 800745e:	4619      	mov	r1, r3
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f011 f9af 	bl	80187c4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f000 fd2e 	bl	8007ec8 <USBD_CtlSendStatus>

              break;
 800746c:	e004      	b.n	8007478 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800746e:	6839      	ldr	r1, [r7, #0]
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f000 fc5e 	bl	8007d32 <USBD_CtlError>
              break;
 8007476:	bf00      	nop
          }
          break;
 8007478:	e107      	b.n	800768a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007480:	b2db      	uxtb	r3, r3
 8007482:	2b02      	cmp	r3, #2
 8007484:	d002      	beq.n	800748c <USBD_StdEPReq+0x124>
 8007486:	2b03      	cmp	r3, #3
 8007488:	d016      	beq.n	80074b8 <USBD_StdEPReq+0x150>
 800748a:	e04b      	b.n	8007524 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800748c:	7bbb      	ldrb	r3, [r7, #14]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d00d      	beq.n	80074ae <USBD_StdEPReq+0x146>
 8007492:	7bbb      	ldrb	r3, [r7, #14]
 8007494:	2b80      	cmp	r3, #128	; 0x80
 8007496:	d00a      	beq.n	80074ae <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007498:	7bbb      	ldrb	r3, [r7, #14]
 800749a:	4619      	mov	r1, r3
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f011 f991 	bl	80187c4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80074a2:	2180      	movs	r1, #128	; 0x80
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f011 f98d 	bl	80187c4 <USBD_LL_StallEP>
 80074aa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80074ac:	e040      	b.n	8007530 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80074ae:	6839      	ldr	r1, [r7, #0]
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f000 fc3e 	bl	8007d32 <USBD_CtlError>
              break;
 80074b6:	e03b      	b.n	8007530 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	885b      	ldrh	r3, [r3, #2]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d136      	bne.n	800752e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80074c0:	7bbb      	ldrb	r3, [r7, #14]
 80074c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d004      	beq.n	80074d4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80074ca:	7bbb      	ldrb	r3, [r7, #14]
 80074cc:	4619      	mov	r1, r3
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f011 f997 	bl	8018802 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f000 fcf7 	bl	8007ec8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80074da:	7bbb      	ldrb	r3, [r7, #14]
 80074dc:	4619      	mov	r1, r3
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f7ff fde2 	bl	80070a8 <USBD_CoreFindEP>
 80074e4:	4603      	mov	r3, r0
 80074e6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80074e8:	7b7b      	ldrb	r3, [r7, #13]
 80074ea:	2bff      	cmp	r3, #255	; 0xff
 80074ec:	d01f      	beq.n	800752e <USBD_StdEPReq+0x1c6>
 80074ee:	7b7b      	ldrb	r3, [r7, #13]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d11c      	bne.n	800752e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80074f4:	7b7a      	ldrb	r2, [r7, #13]
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80074fc:	7b7a      	ldrb	r2, [r7, #13]
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	32ae      	adds	r2, #174	; 0xae
 8007502:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007506:	689b      	ldr	r3, [r3, #8]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d010      	beq.n	800752e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800750c:	7b7a      	ldrb	r2, [r7, #13]
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	32ae      	adds	r2, #174	; 0xae
 8007512:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007516:	689b      	ldr	r3, [r3, #8]
 8007518:	6839      	ldr	r1, [r7, #0]
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	4798      	blx	r3
 800751e:	4603      	mov	r3, r0
 8007520:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007522:	e004      	b.n	800752e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007524:	6839      	ldr	r1, [r7, #0]
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f000 fc03 	bl	8007d32 <USBD_CtlError>
              break;
 800752c:	e000      	b.n	8007530 <USBD_StdEPReq+0x1c8>
              break;
 800752e:	bf00      	nop
          }
          break;
 8007530:	e0ab      	b.n	800768a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007538:	b2db      	uxtb	r3, r3
 800753a:	2b02      	cmp	r3, #2
 800753c:	d002      	beq.n	8007544 <USBD_StdEPReq+0x1dc>
 800753e:	2b03      	cmp	r3, #3
 8007540:	d032      	beq.n	80075a8 <USBD_StdEPReq+0x240>
 8007542:	e097      	b.n	8007674 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007544:	7bbb      	ldrb	r3, [r7, #14]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d007      	beq.n	800755a <USBD_StdEPReq+0x1f2>
 800754a:	7bbb      	ldrb	r3, [r7, #14]
 800754c:	2b80      	cmp	r3, #128	; 0x80
 800754e:	d004      	beq.n	800755a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007550:	6839      	ldr	r1, [r7, #0]
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f000 fbed 	bl	8007d32 <USBD_CtlError>
                break;
 8007558:	e091      	b.n	800767e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800755a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800755e:	2b00      	cmp	r3, #0
 8007560:	da0b      	bge.n	800757a <USBD_StdEPReq+0x212>
 8007562:	7bbb      	ldrb	r3, [r7, #14]
 8007564:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007568:	4613      	mov	r3, r2
 800756a:	009b      	lsls	r3, r3, #2
 800756c:	4413      	add	r3, r2
 800756e:	009b      	lsls	r3, r3, #2
 8007570:	3310      	adds	r3, #16
 8007572:	687a      	ldr	r2, [r7, #4]
 8007574:	4413      	add	r3, r2
 8007576:	3304      	adds	r3, #4
 8007578:	e00b      	b.n	8007592 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800757a:	7bbb      	ldrb	r3, [r7, #14]
 800757c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007580:	4613      	mov	r3, r2
 8007582:	009b      	lsls	r3, r3, #2
 8007584:	4413      	add	r3, r2
 8007586:	009b      	lsls	r3, r3, #2
 8007588:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800758c:	687a      	ldr	r2, [r7, #4]
 800758e:	4413      	add	r3, r2
 8007590:	3304      	adds	r3, #4
 8007592:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	2200      	movs	r2, #0
 8007598:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	2202      	movs	r2, #2
 800759e:	4619      	mov	r1, r3
 80075a0:	6878      	ldr	r0, [r7, #4]
 80075a2:	f000 fc37 	bl	8007e14 <USBD_CtlSendData>
              break;
 80075a6:	e06a      	b.n	800767e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80075a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	da11      	bge.n	80075d4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80075b0:	7bbb      	ldrb	r3, [r7, #14]
 80075b2:	f003 020f 	and.w	r2, r3, #15
 80075b6:	6879      	ldr	r1, [r7, #4]
 80075b8:	4613      	mov	r3, r2
 80075ba:	009b      	lsls	r3, r3, #2
 80075bc:	4413      	add	r3, r2
 80075be:	009b      	lsls	r3, r3, #2
 80075c0:	440b      	add	r3, r1
 80075c2:	3324      	adds	r3, #36	; 0x24
 80075c4:	881b      	ldrh	r3, [r3, #0]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d117      	bne.n	80075fa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80075ca:	6839      	ldr	r1, [r7, #0]
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f000 fbb0 	bl	8007d32 <USBD_CtlError>
                  break;
 80075d2:	e054      	b.n	800767e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80075d4:	7bbb      	ldrb	r3, [r7, #14]
 80075d6:	f003 020f 	and.w	r2, r3, #15
 80075da:	6879      	ldr	r1, [r7, #4]
 80075dc:	4613      	mov	r3, r2
 80075de:	009b      	lsls	r3, r3, #2
 80075e0:	4413      	add	r3, r2
 80075e2:	009b      	lsls	r3, r3, #2
 80075e4:	440b      	add	r3, r1
 80075e6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80075ea:	881b      	ldrh	r3, [r3, #0]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d104      	bne.n	80075fa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80075f0:	6839      	ldr	r1, [r7, #0]
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f000 fb9d 	bl	8007d32 <USBD_CtlError>
                  break;
 80075f8:	e041      	b.n	800767e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80075fa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	da0b      	bge.n	800761a <USBD_StdEPReq+0x2b2>
 8007602:	7bbb      	ldrb	r3, [r7, #14]
 8007604:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007608:	4613      	mov	r3, r2
 800760a:	009b      	lsls	r3, r3, #2
 800760c:	4413      	add	r3, r2
 800760e:	009b      	lsls	r3, r3, #2
 8007610:	3310      	adds	r3, #16
 8007612:	687a      	ldr	r2, [r7, #4]
 8007614:	4413      	add	r3, r2
 8007616:	3304      	adds	r3, #4
 8007618:	e00b      	b.n	8007632 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800761a:	7bbb      	ldrb	r3, [r7, #14]
 800761c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007620:	4613      	mov	r3, r2
 8007622:	009b      	lsls	r3, r3, #2
 8007624:	4413      	add	r3, r2
 8007626:	009b      	lsls	r3, r3, #2
 8007628:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800762c:	687a      	ldr	r2, [r7, #4]
 800762e:	4413      	add	r3, r2
 8007630:	3304      	adds	r3, #4
 8007632:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007634:	7bbb      	ldrb	r3, [r7, #14]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d002      	beq.n	8007640 <USBD_StdEPReq+0x2d8>
 800763a:	7bbb      	ldrb	r3, [r7, #14]
 800763c:	2b80      	cmp	r3, #128	; 0x80
 800763e:	d103      	bne.n	8007648 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	2200      	movs	r2, #0
 8007644:	601a      	str	r2, [r3, #0]
 8007646:	e00e      	b.n	8007666 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007648:	7bbb      	ldrb	r3, [r7, #14]
 800764a:	4619      	mov	r1, r3
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f011 f8f7 	bl	8018840 <USBD_LL_IsStallEP>
 8007652:	4603      	mov	r3, r0
 8007654:	2b00      	cmp	r3, #0
 8007656:	d003      	beq.n	8007660 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	2201      	movs	r2, #1
 800765c:	601a      	str	r2, [r3, #0]
 800765e:	e002      	b.n	8007666 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	2200      	movs	r2, #0
 8007664:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	2202      	movs	r2, #2
 800766a:	4619      	mov	r1, r3
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	f000 fbd1 	bl	8007e14 <USBD_CtlSendData>
              break;
 8007672:	e004      	b.n	800767e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007674:	6839      	ldr	r1, [r7, #0]
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f000 fb5b 	bl	8007d32 <USBD_CtlError>
              break;
 800767c:	bf00      	nop
          }
          break;
 800767e:	e004      	b.n	800768a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007680:	6839      	ldr	r1, [r7, #0]
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f000 fb55 	bl	8007d32 <USBD_CtlError>
          break;
 8007688:	bf00      	nop
      }
      break;
 800768a:	e005      	b.n	8007698 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800768c:	6839      	ldr	r1, [r7, #0]
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f000 fb4f 	bl	8007d32 <USBD_CtlError>
      break;
 8007694:	e000      	b.n	8007698 <USBD_StdEPReq+0x330>
      break;
 8007696:	bf00      	nop
  }

  return ret;
 8007698:	7bfb      	ldrb	r3, [r7, #15]
}
 800769a:	4618      	mov	r0, r3
 800769c:	3710      	adds	r7, #16
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}
	...

080076a4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b084      	sub	sp, #16
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
 80076ac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80076ae:	2300      	movs	r3, #0
 80076b0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80076b2:	2300      	movs	r3, #0
 80076b4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80076b6:	2300      	movs	r3, #0
 80076b8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	885b      	ldrh	r3, [r3, #2]
 80076be:	0a1b      	lsrs	r3, r3, #8
 80076c0:	b29b      	uxth	r3, r3
 80076c2:	3b01      	subs	r3, #1
 80076c4:	2b06      	cmp	r3, #6
 80076c6:	f200 8128 	bhi.w	800791a <USBD_GetDescriptor+0x276>
 80076ca:	a201      	add	r2, pc, #4	; (adr r2, 80076d0 <USBD_GetDescriptor+0x2c>)
 80076cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076d0:	080076ed 	.word	0x080076ed
 80076d4:	08007705 	.word	0x08007705
 80076d8:	08007745 	.word	0x08007745
 80076dc:	0800791b 	.word	0x0800791b
 80076e0:	0800791b 	.word	0x0800791b
 80076e4:	080078bb 	.word	0x080078bb
 80076e8:	080078e7 	.word	0x080078e7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	687a      	ldr	r2, [r7, #4]
 80076f6:	7c12      	ldrb	r2, [r2, #16]
 80076f8:	f107 0108 	add.w	r1, r7, #8
 80076fc:	4610      	mov	r0, r2
 80076fe:	4798      	blx	r3
 8007700:	60f8      	str	r0, [r7, #12]
      break;
 8007702:	e112      	b.n	800792a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	7c1b      	ldrb	r3, [r3, #16]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d10d      	bne.n	8007728 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007714:	f107 0208 	add.w	r2, r7, #8
 8007718:	4610      	mov	r0, r2
 800771a:	4798      	blx	r3
 800771c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	3301      	adds	r3, #1
 8007722:	2202      	movs	r2, #2
 8007724:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007726:	e100      	b.n	800792a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800772e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007730:	f107 0208 	add.w	r2, r7, #8
 8007734:	4610      	mov	r0, r2
 8007736:	4798      	blx	r3
 8007738:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	3301      	adds	r3, #1
 800773e:	2202      	movs	r2, #2
 8007740:	701a      	strb	r2, [r3, #0]
      break;
 8007742:	e0f2      	b.n	800792a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	885b      	ldrh	r3, [r3, #2]
 8007748:	b2db      	uxtb	r3, r3
 800774a:	2b05      	cmp	r3, #5
 800774c:	f200 80ac 	bhi.w	80078a8 <USBD_GetDescriptor+0x204>
 8007750:	a201      	add	r2, pc, #4	; (adr r2, 8007758 <USBD_GetDescriptor+0xb4>)
 8007752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007756:	bf00      	nop
 8007758:	08007771 	.word	0x08007771
 800775c:	080077a5 	.word	0x080077a5
 8007760:	080077d9 	.word	0x080077d9
 8007764:	0800780d 	.word	0x0800780d
 8007768:	08007841 	.word	0x08007841
 800776c:	08007875 	.word	0x08007875
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007776:	685b      	ldr	r3, [r3, #4]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d00b      	beq.n	8007794 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007782:	685b      	ldr	r3, [r3, #4]
 8007784:	687a      	ldr	r2, [r7, #4]
 8007786:	7c12      	ldrb	r2, [r2, #16]
 8007788:	f107 0108 	add.w	r1, r7, #8
 800778c:	4610      	mov	r0, r2
 800778e:	4798      	blx	r3
 8007790:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007792:	e091      	b.n	80078b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007794:	6839      	ldr	r1, [r7, #0]
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f000 facb 	bl	8007d32 <USBD_CtlError>
            err++;
 800779c:	7afb      	ldrb	r3, [r7, #11]
 800779e:	3301      	adds	r3, #1
 80077a0:	72fb      	strb	r3, [r7, #11]
          break;
 80077a2:	e089      	b.n	80078b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077aa:	689b      	ldr	r3, [r3, #8]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d00b      	beq.n	80077c8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077b6:	689b      	ldr	r3, [r3, #8]
 80077b8:	687a      	ldr	r2, [r7, #4]
 80077ba:	7c12      	ldrb	r2, [r2, #16]
 80077bc:	f107 0108 	add.w	r1, r7, #8
 80077c0:	4610      	mov	r0, r2
 80077c2:	4798      	blx	r3
 80077c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077c6:	e077      	b.n	80078b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80077c8:	6839      	ldr	r1, [r7, #0]
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f000 fab1 	bl	8007d32 <USBD_CtlError>
            err++;
 80077d0:	7afb      	ldrb	r3, [r7, #11]
 80077d2:	3301      	adds	r3, #1
 80077d4:	72fb      	strb	r3, [r7, #11]
          break;
 80077d6:	e06f      	b.n	80078b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077de:	68db      	ldr	r3, [r3, #12]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d00b      	beq.n	80077fc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077ea:	68db      	ldr	r3, [r3, #12]
 80077ec:	687a      	ldr	r2, [r7, #4]
 80077ee:	7c12      	ldrb	r2, [r2, #16]
 80077f0:	f107 0108 	add.w	r1, r7, #8
 80077f4:	4610      	mov	r0, r2
 80077f6:	4798      	blx	r3
 80077f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077fa:	e05d      	b.n	80078b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80077fc:	6839      	ldr	r1, [r7, #0]
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f000 fa97 	bl	8007d32 <USBD_CtlError>
            err++;
 8007804:	7afb      	ldrb	r3, [r7, #11]
 8007806:	3301      	adds	r3, #1
 8007808:	72fb      	strb	r3, [r7, #11]
          break;
 800780a:	e055      	b.n	80078b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007812:	691b      	ldr	r3, [r3, #16]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d00b      	beq.n	8007830 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800781e:	691b      	ldr	r3, [r3, #16]
 8007820:	687a      	ldr	r2, [r7, #4]
 8007822:	7c12      	ldrb	r2, [r2, #16]
 8007824:	f107 0108 	add.w	r1, r7, #8
 8007828:	4610      	mov	r0, r2
 800782a:	4798      	blx	r3
 800782c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800782e:	e043      	b.n	80078b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007830:	6839      	ldr	r1, [r7, #0]
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f000 fa7d 	bl	8007d32 <USBD_CtlError>
            err++;
 8007838:	7afb      	ldrb	r3, [r7, #11]
 800783a:	3301      	adds	r3, #1
 800783c:	72fb      	strb	r3, [r7, #11]
          break;
 800783e:	e03b      	b.n	80078b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007846:	695b      	ldr	r3, [r3, #20]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d00b      	beq.n	8007864 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007852:	695b      	ldr	r3, [r3, #20]
 8007854:	687a      	ldr	r2, [r7, #4]
 8007856:	7c12      	ldrb	r2, [r2, #16]
 8007858:	f107 0108 	add.w	r1, r7, #8
 800785c:	4610      	mov	r0, r2
 800785e:	4798      	blx	r3
 8007860:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007862:	e029      	b.n	80078b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007864:	6839      	ldr	r1, [r7, #0]
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f000 fa63 	bl	8007d32 <USBD_CtlError>
            err++;
 800786c:	7afb      	ldrb	r3, [r7, #11]
 800786e:	3301      	adds	r3, #1
 8007870:	72fb      	strb	r3, [r7, #11]
          break;
 8007872:	e021      	b.n	80078b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800787a:	699b      	ldr	r3, [r3, #24]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d00b      	beq.n	8007898 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007886:	699b      	ldr	r3, [r3, #24]
 8007888:	687a      	ldr	r2, [r7, #4]
 800788a:	7c12      	ldrb	r2, [r2, #16]
 800788c:	f107 0108 	add.w	r1, r7, #8
 8007890:	4610      	mov	r0, r2
 8007892:	4798      	blx	r3
 8007894:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007896:	e00f      	b.n	80078b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007898:	6839      	ldr	r1, [r7, #0]
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f000 fa49 	bl	8007d32 <USBD_CtlError>
            err++;
 80078a0:	7afb      	ldrb	r3, [r7, #11]
 80078a2:	3301      	adds	r3, #1
 80078a4:	72fb      	strb	r3, [r7, #11]
          break;
 80078a6:	e007      	b.n	80078b8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80078a8:	6839      	ldr	r1, [r7, #0]
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f000 fa41 	bl	8007d32 <USBD_CtlError>
          err++;
 80078b0:	7afb      	ldrb	r3, [r7, #11]
 80078b2:	3301      	adds	r3, #1
 80078b4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80078b6:	bf00      	nop
      }
      break;
 80078b8:	e037      	b.n	800792a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	7c1b      	ldrb	r3, [r3, #16]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d109      	bne.n	80078d6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078ca:	f107 0208 	add.w	r2, r7, #8
 80078ce:	4610      	mov	r0, r2
 80078d0:	4798      	blx	r3
 80078d2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80078d4:	e029      	b.n	800792a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80078d6:	6839      	ldr	r1, [r7, #0]
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f000 fa2a 	bl	8007d32 <USBD_CtlError>
        err++;
 80078de:	7afb      	ldrb	r3, [r7, #11]
 80078e0:	3301      	adds	r3, #1
 80078e2:	72fb      	strb	r3, [r7, #11]
      break;
 80078e4:	e021      	b.n	800792a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	7c1b      	ldrb	r3, [r3, #16]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d10d      	bne.n	800790a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078f6:	f107 0208 	add.w	r2, r7, #8
 80078fa:	4610      	mov	r0, r2
 80078fc:	4798      	blx	r3
 80078fe:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	3301      	adds	r3, #1
 8007904:	2207      	movs	r2, #7
 8007906:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007908:	e00f      	b.n	800792a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800790a:	6839      	ldr	r1, [r7, #0]
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f000 fa10 	bl	8007d32 <USBD_CtlError>
        err++;
 8007912:	7afb      	ldrb	r3, [r7, #11]
 8007914:	3301      	adds	r3, #1
 8007916:	72fb      	strb	r3, [r7, #11]
      break;
 8007918:	e007      	b.n	800792a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800791a:	6839      	ldr	r1, [r7, #0]
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f000 fa08 	bl	8007d32 <USBD_CtlError>
      err++;
 8007922:	7afb      	ldrb	r3, [r7, #11]
 8007924:	3301      	adds	r3, #1
 8007926:	72fb      	strb	r3, [r7, #11]
      break;
 8007928:	bf00      	nop
  }

  if (err != 0U)
 800792a:	7afb      	ldrb	r3, [r7, #11]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d11e      	bne.n	800796e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	88db      	ldrh	r3, [r3, #6]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d016      	beq.n	8007966 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007938:	893b      	ldrh	r3, [r7, #8]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d00e      	beq.n	800795c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	88da      	ldrh	r2, [r3, #6]
 8007942:	893b      	ldrh	r3, [r7, #8]
 8007944:	4293      	cmp	r3, r2
 8007946:	bf28      	it	cs
 8007948:	4613      	movcs	r3, r2
 800794a:	b29b      	uxth	r3, r3
 800794c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800794e:	893b      	ldrh	r3, [r7, #8]
 8007950:	461a      	mov	r2, r3
 8007952:	68f9      	ldr	r1, [r7, #12]
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f000 fa5d 	bl	8007e14 <USBD_CtlSendData>
 800795a:	e009      	b.n	8007970 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800795c:	6839      	ldr	r1, [r7, #0]
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f000 f9e7 	bl	8007d32 <USBD_CtlError>
 8007964:	e004      	b.n	8007970 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	f000 faae 	bl	8007ec8 <USBD_CtlSendStatus>
 800796c:	e000      	b.n	8007970 <USBD_GetDescriptor+0x2cc>
    return;
 800796e:	bf00      	nop
  }
}
 8007970:	3710      	adds	r7, #16
 8007972:	46bd      	mov	sp, r7
 8007974:	bd80      	pop	{r7, pc}
 8007976:	bf00      	nop

08007978 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b084      	sub	sp, #16
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
 8007980:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	889b      	ldrh	r3, [r3, #4]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d131      	bne.n	80079ee <USBD_SetAddress+0x76>
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	88db      	ldrh	r3, [r3, #6]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d12d      	bne.n	80079ee <USBD_SetAddress+0x76>
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	885b      	ldrh	r3, [r3, #2]
 8007996:	2b7f      	cmp	r3, #127	; 0x7f
 8007998:	d829      	bhi.n	80079ee <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	885b      	ldrh	r3, [r3, #2]
 800799e:	b2db      	uxtb	r3, r3
 80079a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079a4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079ac:	b2db      	uxtb	r3, r3
 80079ae:	2b03      	cmp	r3, #3
 80079b0:	d104      	bne.n	80079bc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80079b2:	6839      	ldr	r1, [r7, #0]
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f000 f9bc 	bl	8007d32 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079ba:	e01d      	b.n	80079f8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	7bfa      	ldrb	r2, [r7, #15]
 80079c0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80079c4:	7bfb      	ldrb	r3, [r7, #15]
 80079c6:	4619      	mov	r1, r3
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f010 ff65 	bl	8018898 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f000 fa7a 	bl	8007ec8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80079d4:	7bfb      	ldrb	r3, [r7, #15]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d004      	beq.n	80079e4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2202      	movs	r2, #2
 80079de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079e2:	e009      	b.n	80079f8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2201      	movs	r2, #1
 80079e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079ec:	e004      	b.n	80079f8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80079ee:	6839      	ldr	r1, [r7, #0]
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f000 f99e 	bl	8007d32 <USBD_CtlError>
  }
}
 80079f6:	bf00      	nop
 80079f8:	bf00      	nop
 80079fa:	3710      	adds	r7, #16
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}

08007a00 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b084      	sub	sp, #16
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
 8007a08:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	885b      	ldrh	r3, [r3, #2]
 8007a12:	b2da      	uxtb	r2, r3
 8007a14:	4b4e      	ldr	r3, [pc, #312]	; (8007b50 <USBD_SetConfig+0x150>)
 8007a16:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007a18:	4b4d      	ldr	r3, [pc, #308]	; (8007b50 <USBD_SetConfig+0x150>)
 8007a1a:	781b      	ldrb	r3, [r3, #0]
 8007a1c:	2b01      	cmp	r3, #1
 8007a1e:	d905      	bls.n	8007a2c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007a20:	6839      	ldr	r1, [r7, #0]
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	f000 f985 	bl	8007d32 <USBD_CtlError>
    return USBD_FAIL;
 8007a28:	2303      	movs	r3, #3
 8007a2a:	e08c      	b.n	8007b46 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a32:	b2db      	uxtb	r3, r3
 8007a34:	2b02      	cmp	r3, #2
 8007a36:	d002      	beq.n	8007a3e <USBD_SetConfig+0x3e>
 8007a38:	2b03      	cmp	r3, #3
 8007a3a:	d029      	beq.n	8007a90 <USBD_SetConfig+0x90>
 8007a3c:	e075      	b.n	8007b2a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007a3e:	4b44      	ldr	r3, [pc, #272]	; (8007b50 <USBD_SetConfig+0x150>)
 8007a40:	781b      	ldrb	r3, [r3, #0]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d020      	beq.n	8007a88 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007a46:	4b42      	ldr	r3, [pc, #264]	; (8007b50 <USBD_SetConfig+0x150>)
 8007a48:	781b      	ldrb	r3, [r3, #0]
 8007a4a:	461a      	mov	r2, r3
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007a50:	4b3f      	ldr	r3, [pc, #252]	; (8007b50 <USBD_SetConfig+0x150>)
 8007a52:	781b      	ldrb	r3, [r3, #0]
 8007a54:	4619      	mov	r1, r3
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f7fe ffe7 	bl	8006a2a <USBD_SetClassConfig>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007a60:	7bfb      	ldrb	r3, [r7, #15]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d008      	beq.n	8007a78 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007a66:	6839      	ldr	r1, [r7, #0]
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	f000 f962 	bl	8007d32 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2202      	movs	r2, #2
 8007a72:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007a76:	e065      	b.n	8007b44 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	f000 fa25 	bl	8007ec8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2203      	movs	r2, #3
 8007a82:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007a86:	e05d      	b.n	8007b44 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f000 fa1d 	bl	8007ec8 <USBD_CtlSendStatus>
      break;
 8007a8e:	e059      	b.n	8007b44 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007a90:	4b2f      	ldr	r3, [pc, #188]	; (8007b50 <USBD_SetConfig+0x150>)
 8007a92:	781b      	ldrb	r3, [r3, #0]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d112      	bne.n	8007abe <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2202      	movs	r2, #2
 8007a9c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007aa0:	4b2b      	ldr	r3, [pc, #172]	; (8007b50 <USBD_SetConfig+0x150>)
 8007aa2:	781b      	ldrb	r3, [r3, #0]
 8007aa4:	461a      	mov	r2, r3
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007aaa:	4b29      	ldr	r3, [pc, #164]	; (8007b50 <USBD_SetConfig+0x150>)
 8007aac:	781b      	ldrb	r3, [r3, #0]
 8007aae:	4619      	mov	r1, r3
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	f7fe ffd6 	bl	8006a62 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f000 fa06 	bl	8007ec8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007abc:	e042      	b.n	8007b44 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007abe:	4b24      	ldr	r3, [pc, #144]	; (8007b50 <USBD_SetConfig+0x150>)
 8007ac0:	781b      	ldrb	r3, [r3, #0]
 8007ac2:	461a      	mov	r2, r3
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	685b      	ldr	r3, [r3, #4]
 8007ac8:	429a      	cmp	r2, r3
 8007aca:	d02a      	beq.n	8007b22 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	685b      	ldr	r3, [r3, #4]
 8007ad0:	b2db      	uxtb	r3, r3
 8007ad2:	4619      	mov	r1, r3
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f7fe ffc4 	bl	8006a62 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007ada:	4b1d      	ldr	r3, [pc, #116]	; (8007b50 <USBD_SetConfig+0x150>)
 8007adc:	781b      	ldrb	r3, [r3, #0]
 8007ade:	461a      	mov	r2, r3
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007ae4:	4b1a      	ldr	r3, [pc, #104]	; (8007b50 <USBD_SetConfig+0x150>)
 8007ae6:	781b      	ldrb	r3, [r3, #0]
 8007ae8:	4619      	mov	r1, r3
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f7fe ff9d 	bl	8006a2a <USBD_SetClassConfig>
 8007af0:	4603      	mov	r3, r0
 8007af2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007af4:	7bfb      	ldrb	r3, [r7, #15]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d00f      	beq.n	8007b1a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007afa:	6839      	ldr	r1, [r7, #0]
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	f000 f918 	bl	8007d32 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	685b      	ldr	r3, [r3, #4]
 8007b06:	b2db      	uxtb	r3, r3
 8007b08:	4619      	mov	r1, r3
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f7fe ffa9 	bl	8006a62 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2202      	movs	r2, #2
 8007b14:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007b18:	e014      	b.n	8007b44 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f000 f9d4 	bl	8007ec8 <USBD_CtlSendStatus>
      break;
 8007b20:	e010      	b.n	8007b44 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f000 f9d0 	bl	8007ec8 <USBD_CtlSendStatus>
      break;
 8007b28:	e00c      	b.n	8007b44 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007b2a:	6839      	ldr	r1, [r7, #0]
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f000 f900 	bl	8007d32 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007b32:	4b07      	ldr	r3, [pc, #28]	; (8007b50 <USBD_SetConfig+0x150>)
 8007b34:	781b      	ldrb	r3, [r3, #0]
 8007b36:	4619      	mov	r1, r3
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	f7fe ff92 	bl	8006a62 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007b3e:	2303      	movs	r3, #3
 8007b40:	73fb      	strb	r3, [r7, #15]
      break;
 8007b42:	bf00      	nop
  }

  return ret;
 8007b44:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	3710      	adds	r7, #16
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}
 8007b4e:	bf00      	nop
 8007b50:	20004e08 	.word	0x20004e08

08007b54 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b082      	sub	sp, #8
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
 8007b5c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	88db      	ldrh	r3, [r3, #6]
 8007b62:	2b01      	cmp	r3, #1
 8007b64:	d004      	beq.n	8007b70 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007b66:	6839      	ldr	r1, [r7, #0]
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f000 f8e2 	bl	8007d32 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007b6e:	e023      	b.n	8007bb8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b76:	b2db      	uxtb	r3, r3
 8007b78:	2b02      	cmp	r3, #2
 8007b7a:	dc02      	bgt.n	8007b82 <USBD_GetConfig+0x2e>
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	dc03      	bgt.n	8007b88 <USBD_GetConfig+0x34>
 8007b80:	e015      	b.n	8007bae <USBD_GetConfig+0x5a>
 8007b82:	2b03      	cmp	r3, #3
 8007b84:	d00b      	beq.n	8007b9e <USBD_GetConfig+0x4a>
 8007b86:	e012      	b.n	8007bae <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	3308      	adds	r3, #8
 8007b92:	2201      	movs	r2, #1
 8007b94:	4619      	mov	r1, r3
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f000 f93c 	bl	8007e14 <USBD_CtlSendData>
        break;
 8007b9c:	e00c      	b.n	8007bb8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	3304      	adds	r3, #4
 8007ba2:	2201      	movs	r2, #1
 8007ba4:	4619      	mov	r1, r3
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f000 f934 	bl	8007e14 <USBD_CtlSendData>
        break;
 8007bac:	e004      	b.n	8007bb8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007bae:	6839      	ldr	r1, [r7, #0]
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	f000 f8be 	bl	8007d32 <USBD_CtlError>
        break;
 8007bb6:	bf00      	nop
}
 8007bb8:	bf00      	nop
 8007bba:	3708      	adds	r7, #8
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	bd80      	pop	{r7, pc}

08007bc0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b082      	sub	sp, #8
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
 8007bc8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bd0:	b2db      	uxtb	r3, r3
 8007bd2:	3b01      	subs	r3, #1
 8007bd4:	2b02      	cmp	r3, #2
 8007bd6:	d81e      	bhi.n	8007c16 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	88db      	ldrh	r3, [r3, #6]
 8007bdc:	2b02      	cmp	r3, #2
 8007bde:	d004      	beq.n	8007bea <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007be0:	6839      	ldr	r1, [r7, #0]
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f000 f8a5 	bl	8007d32 <USBD_CtlError>
        break;
 8007be8:	e01a      	b.n	8007c20 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2201      	movs	r2, #1
 8007bee:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d005      	beq.n	8007c06 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	68db      	ldr	r3, [r3, #12]
 8007bfe:	f043 0202 	orr.w	r2, r3, #2
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	330c      	adds	r3, #12
 8007c0a:	2202      	movs	r2, #2
 8007c0c:	4619      	mov	r1, r3
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f000 f900 	bl	8007e14 <USBD_CtlSendData>
      break;
 8007c14:	e004      	b.n	8007c20 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007c16:	6839      	ldr	r1, [r7, #0]
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	f000 f88a 	bl	8007d32 <USBD_CtlError>
      break;
 8007c1e:	bf00      	nop
  }
}
 8007c20:	bf00      	nop
 8007c22:	3708      	adds	r7, #8
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bd80      	pop	{r7, pc}

08007c28 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b082      	sub	sp, #8
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
 8007c30:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	885b      	ldrh	r3, [r3, #2]
 8007c36:	2b01      	cmp	r3, #1
 8007c38:	d107      	bne.n	8007c4a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2201      	movs	r2, #1
 8007c3e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f000 f940 	bl	8007ec8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007c48:	e013      	b.n	8007c72 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	885b      	ldrh	r3, [r3, #2]
 8007c4e:	2b02      	cmp	r3, #2
 8007c50:	d10b      	bne.n	8007c6a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	889b      	ldrh	r3, [r3, #4]
 8007c56:	0a1b      	lsrs	r3, r3, #8
 8007c58:	b29b      	uxth	r3, r3
 8007c5a:	b2da      	uxtb	r2, r3
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f000 f930 	bl	8007ec8 <USBD_CtlSendStatus>
}
 8007c68:	e003      	b.n	8007c72 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007c6a:	6839      	ldr	r1, [r7, #0]
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f000 f860 	bl	8007d32 <USBD_CtlError>
}
 8007c72:	bf00      	nop
 8007c74:	3708      	adds	r7, #8
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bd80      	pop	{r7, pc}

08007c7a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c7a:	b580      	push	{r7, lr}
 8007c7c:	b082      	sub	sp, #8
 8007c7e:	af00      	add	r7, sp, #0
 8007c80:	6078      	str	r0, [r7, #4]
 8007c82:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c8a:	b2db      	uxtb	r3, r3
 8007c8c:	3b01      	subs	r3, #1
 8007c8e:	2b02      	cmp	r3, #2
 8007c90:	d80b      	bhi.n	8007caa <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	885b      	ldrh	r3, [r3, #2]
 8007c96:	2b01      	cmp	r3, #1
 8007c98:	d10c      	bne.n	8007cb4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f000 f910 	bl	8007ec8 <USBD_CtlSendStatus>
      }
      break;
 8007ca8:	e004      	b.n	8007cb4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007caa:	6839      	ldr	r1, [r7, #0]
 8007cac:	6878      	ldr	r0, [r7, #4]
 8007cae:	f000 f840 	bl	8007d32 <USBD_CtlError>
      break;
 8007cb2:	e000      	b.n	8007cb6 <USBD_ClrFeature+0x3c>
      break;
 8007cb4:	bf00      	nop
  }
}
 8007cb6:	bf00      	nop
 8007cb8:	3708      	adds	r7, #8
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}

08007cbe <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007cbe:	b580      	push	{r7, lr}
 8007cc0:	b084      	sub	sp, #16
 8007cc2:	af00      	add	r7, sp, #0
 8007cc4:	6078      	str	r0, [r7, #4]
 8007cc6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	781a      	ldrb	r2, [r3, #0]
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	3301      	adds	r3, #1
 8007cd8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	781a      	ldrb	r2, [r3, #0]
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	3301      	adds	r3, #1
 8007ce6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007ce8:	68f8      	ldr	r0, [r7, #12]
 8007cea:	f7ff fa41 	bl	8007170 <SWAPBYTE>
 8007cee:	4603      	mov	r3, r0
 8007cf0:	461a      	mov	r2, r3
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	3301      	adds	r3, #1
 8007cfa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	3301      	adds	r3, #1
 8007d00:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007d02:	68f8      	ldr	r0, [r7, #12]
 8007d04:	f7ff fa34 	bl	8007170 <SWAPBYTE>
 8007d08:	4603      	mov	r3, r0
 8007d0a:	461a      	mov	r2, r3
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	3301      	adds	r3, #1
 8007d14:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	3301      	adds	r3, #1
 8007d1a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007d1c:	68f8      	ldr	r0, [r7, #12]
 8007d1e:	f7ff fa27 	bl	8007170 <SWAPBYTE>
 8007d22:	4603      	mov	r3, r0
 8007d24:	461a      	mov	r2, r3
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	80da      	strh	r2, [r3, #6]
}
 8007d2a:	bf00      	nop
 8007d2c:	3710      	adds	r7, #16
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bd80      	pop	{r7, pc}

08007d32 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d32:	b580      	push	{r7, lr}
 8007d34:	b082      	sub	sp, #8
 8007d36:	af00      	add	r7, sp, #0
 8007d38:	6078      	str	r0, [r7, #4]
 8007d3a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007d3c:	2180      	movs	r1, #128	; 0x80
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f010 fd40 	bl	80187c4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007d44:	2100      	movs	r1, #0
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	f010 fd3c 	bl	80187c4 <USBD_LL_StallEP>
}
 8007d4c:	bf00      	nop
 8007d4e:	3708      	adds	r7, #8
 8007d50:	46bd      	mov	sp, r7
 8007d52:	bd80      	pop	{r7, pc}

08007d54 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b086      	sub	sp, #24
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	60f8      	str	r0, [r7, #12]
 8007d5c:	60b9      	str	r1, [r7, #8]
 8007d5e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007d60:	2300      	movs	r3, #0
 8007d62:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d036      	beq.n	8007dd8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007d6e:	6938      	ldr	r0, [r7, #16]
 8007d70:	f000 f836 	bl	8007de0 <USBD_GetLen>
 8007d74:	4603      	mov	r3, r0
 8007d76:	3301      	adds	r3, #1
 8007d78:	b29b      	uxth	r3, r3
 8007d7a:	005b      	lsls	r3, r3, #1
 8007d7c:	b29a      	uxth	r2, r3
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007d82:	7dfb      	ldrb	r3, [r7, #23]
 8007d84:	68ba      	ldr	r2, [r7, #8]
 8007d86:	4413      	add	r3, r2
 8007d88:	687a      	ldr	r2, [r7, #4]
 8007d8a:	7812      	ldrb	r2, [r2, #0]
 8007d8c:	701a      	strb	r2, [r3, #0]
  idx++;
 8007d8e:	7dfb      	ldrb	r3, [r7, #23]
 8007d90:	3301      	adds	r3, #1
 8007d92:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007d94:	7dfb      	ldrb	r3, [r7, #23]
 8007d96:	68ba      	ldr	r2, [r7, #8]
 8007d98:	4413      	add	r3, r2
 8007d9a:	2203      	movs	r2, #3
 8007d9c:	701a      	strb	r2, [r3, #0]
  idx++;
 8007d9e:	7dfb      	ldrb	r3, [r7, #23]
 8007da0:	3301      	adds	r3, #1
 8007da2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007da4:	e013      	b.n	8007dce <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007da6:	7dfb      	ldrb	r3, [r7, #23]
 8007da8:	68ba      	ldr	r2, [r7, #8]
 8007daa:	4413      	add	r3, r2
 8007dac:	693a      	ldr	r2, [r7, #16]
 8007dae:	7812      	ldrb	r2, [r2, #0]
 8007db0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007db2:	693b      	ldr	r3, [r7, #16]
 8007db4:	3301      	adds	r3, #1
 8007db6:	613b      	str	r3, [r7, #16]
    idx++;
 8007db8:	7dfb      	ldrb	r3, [r7, #23]
 8007dba:	3301      	adds	r3, #1
 8007dbc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007dbe:	7dfb      	ldrb	r3, [r7, #23]
 8007dc0:	68ba      	ldr	r2, [r7, #8]
 8007dc2:	4413      	add	r3, r2
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	701a      	strb	r2, [r3, #0]
    idx++;
 8007dc8:	7dfb      	ldrb	r3, [r7, #23]
 8007dca:	3301      	adds	r3, #1
 8007dcc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007dce:	693b      	ldr	r3, [r7, #16]
 8007dd0:	781b      	ldrb	r3, [r3, #0]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d1e7      	bne.n	8007da6 <USBD_GetString+0x52>
 8007dd6:	e000      	b.n	8007dda <USBD_GetString+0x86>
    return;
 8007dd8:	bf00      	nop
  }
}
 8007dda:	3718      	adds	r7, #24
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bd80      	pop	{r7, pc}

08007de0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007de0:	b480      	push	{r7}
 8007de2:	b085      	sub	sp, #20
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007de8:	2300      	movs	r3, #0
 8007dea:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007df0:	e005      	b.n	8007dfe <USBD_GetLen+0x1e>
  {
    len++;
 8007df2:	7bfb      	ldrb	r3, [r7, #15]
 8007df4:	3301      	adds	r3, #1
 8007df6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	3301      	adds	r3, #1
 8007dfc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	781b      	ldrb	r3, [r3, #0]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d1f5      	bne.n	8007df2 <USBD_GetLen+0x12>
  }

  return len;
 8007e06:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	3714      	adds	r7, #20
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e12:	4770      	bx	lr

08007e14 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b084      	sub	sp, #16
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	60f8      	str	r0, [r7, #12]
 8007e1c:	60b9      	str	r1, [r7, #8]
 8007e1e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	2202      	movs	r2, #2
 8007e24:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	687a      	ldr	r2, [r7, #4]
 8007e2c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	687a      	ldr	r2, [r7, #4]
 8007e32:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	68ba      	ldr	r2, [r7, #8]
 8007e38:	2100      	movs	r1, #0
 8007e3a:	68f8      	ldr	r0, [r7, #12]
 8007e3c:	f010 fd4b 	bl	80188d6 <USBD_LL_Transmit>

  return USBD_OK;
 8007e40:	2300      	movs	r3, #0
}
 8007e42:	4618      	mov	r0, r3
 8007e44:	3710      	adds	r7, #16
 8007e46:	46bd      	mov	sp, r7
 8007e48:	bd80      	pop	{r7, pc}

08007e4a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007e4a:	b580      	push	{r7, lr}
 8007e4c:	b084      	sub	sp, #16
 8007e4e:	af00      	add	r7, sp, #0
 8007e50:	60f8      	str	r0, [r7, #12]
 8007e52:	60b9      	str	r1, [r7, #8]
 8007e54:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	68ba      	ldr	r2, [r7, #8]
 8007e5a:	2100      	movs	r1, #0
 8007e5c:	68f8      	ldr	r0, [r7, #12]
 8007e5e:	f010 fd3a 	bl	80188d6 <USBD_LL_Transmit>

  return USBD_OK;
 8007e62:	2300      	movs	r3, #0
}
 8007e64:	4618      	mov	r0, r3
 8007e66:	3710      	adds	r7, #16
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	bd80      	pop	{r7, pc}

08007e6c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b084      	sub	sp, #16
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	60f8      	str	r0, [r7, #12]
 8007e74:	60b9      	str	r1, [r7, #8]
 8007e76:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	2203      	movs	r2, #3
 8007e7c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	687a      	ldr	r2, [r7, #4]
 8007e84:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	687a      	ldr	r2, [r7, #4]
 8007e8c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	68ba      	ldr	r2, [r7, #8]
 8007e94:	2100      	movs	r1, #0
 8007e96:	68f8      	ldr	r0, [r7, #12]
 8007e98:	f010 fd3e 	bl	8018918 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007e9c:	2300      	movs	r3, #0
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	3710      	adds	r7, #16
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}

08007ea6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007ea6:	b580      	push	{r7, lr}
 8007ea8:	b084      	sub	sp, #16
 8007eaa:	af00      	add	r7, sp, #0
 8007eac:	60f8      	str	r0, [r7, #12]
 8007eae:	60b9      	str	r1, [r7, #8]
 8007eb0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	68ba      	ldr	r2, [r7, #8]
 8007eb6:	2100      	movs	r1, #0
 8007eb8:	68f8      	ldr	r0, [r7, #12]
 8007eba:	f010 fd2d 	bl	8018918 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007ebe:	2300      	movs	r3, #0
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	3710      	adds	r7, #16
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bd80      	pop	{r7, pc}

08007ec8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b082      	sub	sp, #8
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2204      	movs	r2, #4
 8007ed4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007ed8:	2300      	movs	r3, #0
 8007eda:	2200      	movs	r2, #0
 8007edc:	2100      	movs	r1, #0
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	f010 fcf9 	bl	80188d6 <USBD_LL_Transmit>

  return USBD_OK;
 8007ee4:	2300      	movs	r3, #0
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	3708      	adds	r7, #8
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}

08007eee <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007eee:	b580      	push	{r7, lr}
 8007ef0:	b082      	sub	sp, #8
 8007ef2:	af00      	add	r7, sp, #0
 8007ef4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2205      	movs	r2, #5
 8007efa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007efe:	2300      	movs	r3, #0
 8007f00:	2200      	movs	r2, #0
 8007f02:	2100      	movs	r1, #0
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f010 fd07 	bl	8018918 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007f0a:	2300      	movs	r3, #0
}
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	3708      	adds	r7, #8
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}

08007f14 <__NVIC_SetPriority>:
{
 8007f14:	b480      	push	{r7}
 8007f16:	b083      	sub	sp, #12
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	6039      	str	r1, [r7, #0]
 8007f1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007f20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	db0a      	blt.n	8007f3e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	b2da      	uxtb	r2, r3
 8007f2c:	490c      	ldr	r1, [pc, #48]	; (8007f60 <__NVIC_SetPriority+0x4c>)
 8007f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f32:	0112      	lsls	r2, r2, #4
 8007f34:	b2d2      	uxtb	r2, r2
 8007f36:	440b      	add	r3, r1
 8007f38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007f3c:	e00a      	b.n	8007f54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	b2da      	uxtb	r2, r3
 8007f42:	4908      	ldr	r1, [pc, #32]	; (8007f64 <__NVIC_SetPriority+0x50>)
 8007f44:	79fb      	ldrb	r3, [r7, #7]
 8007f46:	f003 030f 	and.w	r3, r3, #15
 8007f4a:	3b04      	subs	r3, #4
 8007f4c:	0112      	lsls	r2, r2, #4
 8007f4e:	b2d2      	uxtb	r2, r2
 8007f50:	440b      	add	r3, r1
 8007f52:	761a      	strb	r2, [r3, #24]
}
 8007f54:	bf00      	nop
 8007f56:	370c      	adds	r7, #12
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5e:	4770      	bx	lr
 8007f60:	e000e100 	.word	0xe000e100
 8007f64:	e000ed00 	.word	0xe000ed00

08007f68 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007f6c:	4b05      	ldr	r3, [pc, #20]	; (8007f84 <SysTick_Handler+0x1c>)
 8007f6e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007f70:	f002 fc6c 	bl	800a84c <xTaskGetSchedulerState>
 8007f74:	4603      	mov	r3, r0
 8007f76:	2b01      	cmp	r3, #1
 8007f78:	d001      	beq.n	8007f7e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007f7a:	f003 fb55 	bl	800b628 <xPortSysTickHandler>
  }
}
 8007f7e:	bf00      	nop
 8007f80:	bd80      	pop	{r7, pc}
 8007f82:	bf00      	nop
 8007f84:	e000e010 	.word	0xe000e010

08007f88 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007f8c:	2100      	movs	r1, #0
 8007f8e:	f06f 0004 	mvn.w	r0, #4
 8007f92:	f7ff ffbf 	bl	8007f14 <__NVIC_SetPriority>
#endif
}
 8007f96:	bf00      	nop
 8007f98:	bd80      	pop	{r7, pc}
	...

08007f9c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007f9c:	b480      	push	{r7}
 8007f9e:	b083      	sub	sp, #12
 8007fa0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007fa2:	f3ef 8305 	mrs	r3, IPSR
 8007fa6:	603b      	str	r3, [r7, #0]
  return(result);
 8007fa8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d003      	beq.n	8007fb6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007fae:	f06f 0305 	mvn.w	r3, #5
 8007fb2:	607b      	str	r3, [r7, #4]
 8007fb4:	e00c      	b.n	8007fd0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007fb6:	4b0a      	ldr	r3, [pc, #40]	; (8007fe0 <osKernelInitialize+0x44>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d105      	bne.n	8007fca <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007fbe:	4b08      	ldr	r3, [pc, #32]	; (8007fe0 <osKernelInitialize+0x44>)
 8007fc0:	2201      	movs	r2, #1
 8007fc2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	607b      	str	r3, [r7, #4]
 8007fc8:	e002      	b.n	8007fd0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007fca:	f04f 33ff 	mov.w	r3, #4294967295
 8007fce:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007fd0:	687b      	ldr	r3, [r7, #4]
}
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	370c      	adds	r7, #12
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fdc:	4770      	bx	lr
 8007fde:	bf00      	nop
 8007fe0:	20004e0c 	.word	0x20004e0c

08007fe4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b082      	sub	sp, #8
 8007fe8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007fea:	f3ef 8305 	mrs	r3, IPSR
 8007fee:	603b      	str	r3, [r7, #0]
  return(result);
 8007ff0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d003      	beq.n	8007ffe <osKernelStart+0x1a>
    stat = osErrorISR;
 8007ff6:	f06f 0305 	mvn.w	r3, #5
 8007ffa:	607b      	str	r3, [r7, #4]
 8007ffc:	e010      	b.n	8008020 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007ffe:	4b0b      	ldr	r3, [pc, #44]	; (800802c <osKernelStart+0x48>)
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	2b01      	cmp	r3, #1
 8008004:	d109      	bne.n	800801a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008006:	f7ff ffbf 	bl	8007f88 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800800a:	4b08      	ldr	r3, [pc, #32]	; (800802c <osKernelStart+0x48>)
 800800c:	2202      	movs	r2, #2
 800800e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008010:	f001 ffb2 	bl	8009f78 <vTaskStartScheduler>
      stat = osOK;
 8008014:	2300      	movs	r3, #0
 8008016:	607b      	str	r3, [r7, #4]
 8008018:	e002      	b.n	8008020 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800801a:	f04f 33ff 	mov.w	r3, #4294967295
 800801e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008020:	687b      	ldr	r3, [r7, #4]
}
 8008022:	4618      	mov	r0, r3
 8008024:	3708      	adds	r7, #8
 8008026:	46bd      	mov	sp, r7
 8008028:	bd80      	pop	{r7, pc}
 800802a:	bf00      	nop
 800802c:	20004e0c 	.word	0x20004e0c

08008030 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8008030:	b580      	push	{r7, lr}
 8008032:	b082      	sub	sp, #8
 8008034:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008036:	f3ef 8305 	mrs	r3, IPSR
 800803a:	603b      	str	r3, [r7, #0]
  return(result);
 800803c:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800803e:	2b00      	cmp	r3, #0
 8008040:	d003      	beq.n	800804a <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8008042:	f002 f8bb 	bl	800a1bc <xTaskGetTickCountFromISR>
 8008046:	6078      	str	r0, [r7, #4]
 8008048:	e002      	b.n	8008050 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800804a:	f002 f8a7 	bl	800a19c <xTaskGetTickCount>
 800804e:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8008050:	687b      	ldr	r3, [r7, #4]
}
 8008052:	4618      	mov	r0, r3
 8008054:	3708      	adds	r7, #8
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}

0800805a <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800805a:	b580      	push	{r7, lr}
 800805c:	b08e      	sub	sp, #56	; 0x38
 800805e:	af04      	add	r7, sp, #16
 8008060:	60f8      	str	r0, [r7, #12]
 8008062:	60b9      	str	r1, [r7, #8]
 8008064:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008066:	2300      	movs	r3, #0
 8008068:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800806a:	f3ef 8305 	mrs	r3, IPSR
 800806e:	617b      	str	r3, [r7, #20]
  return(result);
 8008070:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008072:	2b00      	cmp	r3, #0
 8008074:	d17e      	bne.n	8008174 <osThreadNew+0x11a>
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d07b      	beq.n	8008174 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800807c:	2380      	movs	r3, #128	; 0x80
 800807e:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008080:	2318      	movs	r3, #24
 8008082:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008084:	2300      	movs	r3, #0
 8008086:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8008088:	f04f 33ff 	mov.w	r3, #4294967295
 800808c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d045      	beq.n	8008120 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d002      	beq.n	80080a2 <osThreadNew+0x48>
        name = attr->name;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	699b      	ldr	r3, [r3, #24]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d002      	beq.n	80080b0 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	699b      	ldr	r3, [r3, #24]
 80080ae:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80080b0:	69fb      	ldr	r3, [r7, #28]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d008      	beq.n	80080c8 <osThreadNew+0x6e>
 80080b6:	69fb      	ldr	r3, [r7, #28]
 80080b8:	2b38      	cmp	r3, #56	; 0x38
 80080ba:	d805      	bhi.n	80080c8 <osThreadNew+0x6e>
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	685b      	ldr	r3, [r3, #4]
 80080c0:	f003 0301 	and.w	r3, r3, #1
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d001      	beq.n	80080cc <osThreadNew+0x72>
        return (NULL);
 80080c8:	2300      	movs	r3, #0
 80080ca:	e054      	b.n	8008176 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	695b      	ldr	r3, [r3, #20]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d003      	beq.n	80080dc <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	695b      	ldr	r3, [r3, #20]
 80080d8:	089b      	lsrs	r3, r3, #2
 80080da:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	689b      	ldr	r3, [r3, #8]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d00e      	beq.n	8008102 <osThreadNew+0xa8>
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	68db      	ldr	r3, [r3, #12]
 80080e8:	2b5b      	cmp	r3, #91	; 0x5b
 80080ea:	d90a      	bls.n	8008102 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d006      	beq.n	8008102 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	695b      	ldr	r3, [r3, #20]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d002      	beq.n	8008102 <osThreadNew+0xa8>
        mem = 1;
 80080fc:	2301      	movs	r3, #1
 80080fe:	61bb      	str	r3, [r7, #24]
 8008100:	e010      	b.n	8008124 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	689b      	ldr	r3, [r3, #8]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d10c      	bne.n	8008124 <osThreadNew+0xca>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	68db      	ldr	r3, [r3, #12]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d108      	bne.n	8008124 <osThreadNew+0xca>
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	691b      	ldr	r3, [r3, #16]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d104      	bne.n	8008124 <osThreadNew+0xca>
          mem = 0;
 800811a:	2300      	movs	r3, #0
 800811c:	61bb      	str	r3, [r7, #24]
 800811e:	e001      	b.n	8008124 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008120:	2300      	movs	r3, #0
 8008122:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008124:	69bb      	ldr	r3, [r7, #24]
 8008126:	2b01      	cmp	r3, #1
 8008128:	d110      	bne.n	800814c <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800812e:	687a      	ldr	r2, [r7, #4]
 8008130:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008132:	9202      	str	r2, [sp, #8]
 8008134:	9301      	str	r3, [sp, #4]
 8008136:	69fb      	ldr	r3, [r7, #28]
 8008138:	9300      	str	r3, [sp, #0]
 800813a:	68bb      	ldr	r3, [r7, #8]
 800813c:	6a3a      	ldr	r2, [r7, #32]
 800813e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008140:	68f8      	ldr	r0, [r7, #12]
 8008142:	f001 fd43 	bl	8009bcc <xTaskCreateStatic>
 8008146:	4603      	mov	r3, r0
 8008148:	613b      	str	r3, [r7, #16]
 800814a:	e013      	b.n	8008174 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800814c:	69bb      	ldr	r3, [r7, #24]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d110      	bne.n	8008174 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008152:	6a3b      	ldr	r3, [r7, #32]
 8008154:	b29a      	uxth	r2, r3
 8008156:	f107 0310 	add.w	r3, r7, #16
 800815a:	9301      	str	r3, [sp, #4]
 800815c:	69fb      	ldr	r3, [r7, #28]
 800815e:	9300      	str	r3, [sp, #0]
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008164:	68f8      	ldr	r0, [r7, #12]
 8008166:	f001 fd8e 	bl	8009c86 <xTaskCreate>
 800816a:	4603      	mov	r3, r0
 800816c:	2b01      	cmp	r3, #1
 800816e:	d001      	beq.n	8008174 <osThreadNew+0x11a>
            hTask = NULL;
 8008170:	2300      	movs	r3, #0
 8008172:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008174:	693b      	ldr	r3, [r7, #16]
}
 8008176:	4618      	mov	r0, r3
 8008178:	3728      	adds	r7, #40	; 0x28
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}

0800817e <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800817e:	b580      	push	{r7, lr}
 8008180:	b084      	sub	sp, #16
 8008182:	af00      	add	r7, sp, #0
 8008184:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008186:	f3ef 8305 	mrs	r3, IPSR
 800818a:	60bb      	str	r3, [r7, #8]
  return(result);
 800818c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800818e:	2b00      	cmp	r3, #0
 8008190:	d003      	beq.n	800819a <osDelay+0x1c>
    stat = osErrorISR;
 8008192:	f06f 0305 	mvn.w	r3, #5
 8008196:	60fb      	str	r3, [r7, #12]
 8008198:	e007      	b.n	80081aa <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800819a:	2300      	movs	r3, #0
 800819c:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d002      	beq.n	80081aa <osDelay+0x2c>
      vTaskDelay(ticks);
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	f001 feb3 	bl	8009f10 <vTaskDelay>
    }
  }

  return (stat);
 80081aa:	68fb      	ldr	r3, [r7, #12]
}
 80081ac:	4618      	mov	r0, r3
 80081ae:	3710      	adds	r7, #16
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd80      	pop	{r7, pc}

080081b4 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b088      	sub	sp, #32
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80081bc:	2300      	movs	r3, #0
 80081be:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80081c0:	f3ef 8305 	mrs	r3, IPSR
 80081c4:	60bb      	str	r3, [r7, #8]
  return(result);
 80081c6:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d174      	bne.n	80082b6 <osMutexNew+0x102>
    if (attr != NULL) {
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d003      	beq.n	80081da <osMutexNew+0x26>
      type = attr->attr_bits;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	685b      	ldr	r3, [r3, #4]
 80081d6:	61bb      	str	r3, [r7, #24]
 80081d8:	e001      	b.n	80081de <osMutexNew+0x2a>
    } else {
      type = 0U;
 80081da:	2300      	movs	r3, #0
 80081dc:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80081de:	69bb      	ldr	r3, [r7, #24]
 80081e0:	f003 0301 	and.w	r3, r3, #1
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d002      	beq.n	80081ee <osMutexNew+0x3a>
      rmtx = 1U;
 80081e8:	2301      	movs	r3, #1
 80081ea:	617b      	str	r3, [r7, #20]
 80081ec:	e001      	b.n	80081f2 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 80081ee:	2300      	movs	r3, #0
 80081f0:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80081f2:	69bb      	ldr	r3, [r7, #24]
 80081f4:	f003 0308 	and.w	r3, r3, #8
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d15c      	bne.n	80082b6 <osMutexNew+0x102>
      mem = -1;
 80081fc:	f04f 33ff 	mov.w	r3, #4294967295
 8008200:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d015      	beq.n	8008234 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	689b      	ldr	r3, [r3, #8]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d006      	beq.n	800821e <osMutexNew+0x6a>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	68db      	ldr	r3, [r3, #12]
 8008214:	2b4f      	cmp	r3, #79	; 0x4f
 8008216:	d902      	bls.n	800821e <osMutexNew+0x6a>
          mem = 1;
 8008218:	2301      	movs	r3, #1
 800821a:	613b      	str	r3, [r7, #16]
 800821c:	e00c      	b.n	8008238 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	689b      	ldr	r3, [r3, #8]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d108      	bne.n	8008238 <osMutexNew+0x84>
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	68db      	ldr	r3, [r3, #12]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d104      	bne.n	8008238 <osMutexNew+0x84>
            mem = 0;
 800822e:	2300      	movs	r3, #0
 8008230:	613b      	str	r3, [r7, #16]
 8008232:	e001      	b.n	8008238 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8008234:	2300      	movs	r3, #0
 8008236:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8008238:	693b      	ldr	r3, [r7, #16]
 800823a:	2b01      	cmp	r3, #1
 800823c:	d112      	bne.n	8008264 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800823e:	697b      	ldr	r3, [r7, #20]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d007      	beq.n	8008254 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	689b      	ldr	r3, [r3, #8]
 8008248:	4619      	mov	r1, r3
 800824a:	2004      	movs	r0, #4
 800824c:	f000 fd69 	bl	8008d22 <xQueueCreateMutexStatic>
 8008250:	61f8      	str	r0, [r7, #28]
 8008252:	e016      	b.n	8008282 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	689b      	ldr	r3, [r3, #8]
 8008258:	4619      	mov	r1, r3
 800825a:	2001      	movs	r0, #1
 800825c:	f000 fd61 	bl	8008d22 <xQueueCreateMutexStatic>
 8008260:	61f8      	str	r0, [r7, #28]
 8008262:	e00e      	b.n	8008282 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8008264:	693b      	ldr	r3, [r7, #16]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d10b      	bne.n	8008282 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800826a:	697b      	ldr	r3, [r7, #20]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d004      	beq.n	800827a <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8008270:	2004      	movs	r0, #4
 8008272:	f000 fd3e 	bl	8008cf2 <xQueueCreateMutex>
 8008276:	61f8      	str	r0, [r7, #28]
 8008278:	e003      	b.n	8008282 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800827a:	2001      	movs	r0, #1
 800827c:	f000 fd39 	bl	8008cf2 <xQueueCreateMutex>
 8008280:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8008282:	69fb      	ldr	r3, [r7, #28]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d00c      	beq.n	80082a2 <osMutexNew+0xee>
        if (attr != NULL) {
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d003      	beq.n	8008296 <osMutexNew+0xe2>
          name = attr->name;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	60fb      	str	r3, [r7, #12]
 8008294:	e001      	b.n	800829a <osMutexNew+0xe6>
        } else {
          name = NULL;
 8008296:	2300      	movs	r3, #0
 8008298:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800829a:	68f9      	ldr	r1, [r7, #12]
 800829c:	69f8      	ldr	r0, [r7, #28]
 800829e:	f001 fc0d 	bl	8009abc <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80082a2:	69fb      	ldr	r3, [r7, #28]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d006      	beq.n	80082b6 <osMutexNew+0x102>
 80082a8:	697b      	ldr	r3, [r7, #20]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d003      	beq.n	80082b6 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80082ae:	69fb      	ldr	r3, [r7, #28]
 80082b0:	f043 0301 	orr.w	r3, r3, #1
 80082b4:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80082b6:	69fb      	ldr	r3, [r7, #28]
}
 80082b8:	4618      	mov	r0, r3
 80082ba:	3720      	adds	r7, #32
 80082bc:	46bd      	mov	sp, r7
 80082be:	bd80      	pop	{r7, pc}

080082c0 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b086      	sub	sp, #24
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
 80082c8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	f023 0301 	bic.w	r3, r3, #1
 80082d0:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	f003 0301 	and.w	r3, r3, #1
 80082d8:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80082da:	2300      	movs	r3, #0
 80082dc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80082de:	f3ef 8305 	mrs	r3, IPSR
 80082e2:	60bb      	str	r3, [r7, #8]
  return(result);
 80082e4:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d003      	beq.n	80082f2 <osMutexAcquire+0x32>
    stat = osErrorISR;
 80082ea:	f06f 0305 	mvn.w	r3, #5
 80082ee:	617b      	str	r3, [r7, #20]
 80082f0:	e02c      	b.n	800834c <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 80082f2:	693b      	ldr	r3, [r7, #16]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d103      	bne.n	8008300 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 80082f8:	f06f 0303 	mvn.w	r3, #3
 80082fc:	617b      	str	r3, [r7, #20]
 80082fe:	e025      	b.n	800834c <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d011      	beq.n	800832a <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8008306:	6839      	ldr	r1, [r7, #0]
 8008308:	6938      	ldr	r0, [r7, #16]
 800830a:	f000 fd59 	bl	8008dc0 <xQueueTakeMutexRecursive>
 800830e:	4603      	mov	r3, r0
 8008310:	2b01      	cmp	r3, #1
 8008312:	d01b      	beq.n	800834c <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d003      	beq.n	8008322 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800831a:	f06f 0301 	mvn.w	r3, #1
 800831e:	617b      	str	r3, [r7, #20]
 8008320:	e014      	b.n	800834c <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8008322:	f06f 0302 	mvn.w	r3, #2
 8008326:	617b      	str	r3, [r7, #20]
 8008328:	e010      	b.n	800834c <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800832a:	6839      	ldr	r1, [r7, #0]
 800832c:	6938      	ldr	r0, [r7, #16]
 800832e:	f001 f8ed 	bl	800950c <xQueueSemaphoreTake>
 8008332:	4603      	mov	r3, r0
 8008334:	2b01      	cmp	r3, #1
 8008336:	d009      	beq.n	800834c <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d003      	beq.n	8008346 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800833e:	f06f 0301 	mvn.w	r3, #1
 8008342:	617b      	str	r3, [r7, #20]
 8008344:	e002      	b.n	800834c <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8008346:	f06f 0302 	mvn.w	r3, #2
 800834a:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800834c:	697b      	ldr	r3, [r7, #20]
}
 800834e:	4618      	mov	r0, r3
 8008350:	3718      	adds	r7, #24
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}

08008356 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8008356:	b580      	push	{r7, lr}
 8008358:	b086      	sub	sp, #24
 800835a:	af00      	add	r7, sp, #0
 800835c:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	f023 0301 	bic.w	r3, r3, #1
 8008364:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	f003 0301 	and.w	r3, r3, #1
 800836c:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800836e:	2300      	movs	r3, #0
 8008370:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008372:	f3ef 8305 	mrs	r3, IPSR
 8008376:	60bb      	str	r3, [r7, #8]
  return(result);
 8008378:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800837a:	2b00      	cmp	r3, #0
 800837c:	d003      	beq.n	8008386 <osMutexRelease+0x30>
    stat = osErrorISR;
 800837e:	f06f 0305 	mvn.w	r3, #5
 8008382:	617b      	str	r3, [r7, #20]
 8008384:	e01f      	b.n	80083c6 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8008386:	693b      	ldr	r3, [r7, #16]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d103      	bne.n	8008394 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800838c:	f06f 0303 	mvn.w	r3, #3
 8008390:	617b      	str	r3, [r7, #20]
 8008392:	e018      	b.n	80083c6 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d009      	beq.n	80083ae <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800839a:	6938      	ldr	r0, [r7, #16]
 800839c:	f000 fcdc 	bl	8008d58 <xQueueGiveMutexRecursive>
 80083a0:	4603      	mov	r3, r0
 80083a2:	2b01      	cmp	r3, #1
 80083a4:	d00f      	beq.n	80083c6 <osMutexRelease+0x70>
        stat = osErrorResource;
 80083a6:	f06f 0302 	mvn.w	r3, #2
 80083aa:	617b      	str	r3, [r7, #20]
 80083ac:	e00b      	b.n	80083c6 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80083ae:	2300      	movs	r3, #0
 80083b0:	2200      	movs	r2, #0
 80083b2:	2100      	movs	r1, #0
 80083b4:	6938      	ldr	r0, [r7, #16]
 80083b6:	f000 fda3 	bl	8008f00 <xQueueGenericSend>
 80083ba:	4603      	mov	r3, r0
 80083bc:	2b01      	cmp	r3, #1
 80083be:	d002      	beq.n	80083c6 <osMutexRelease+0x70>
        stat = osErrorResource;
 80083c0:	f06f 0302 	mvn.w	r3, #2
 80083c4:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80083c6:	697b      	ldr	r3, [r7, #20]
}
 80083c8:	4618      	mov	r0, r3
 80083ca:	3718      	adds	r7, #24
 80083cc:	46bd      	mov	sp, r7
 80083ce:	bd80      	pop	{r7, pc}

080083d0 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b08a      	sub	sp, #40	; 0x28
 80083d4:	af02      	add	r7, sp, #8
 80083d6:	60f8      	str	r0, [r7, #12]
 80083d8:	60b9      	str	r1, [r7, #8]
 80083da:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80083dc:	2300      	movs	r3, #0
 80083de:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80083e0:	f3ef 8305 	mrs	r3, IPSR
 80083e4:	613b      	str	r3, [r7, #16]
  return(result);
 80083e6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d175      	bne.n	80084d8 <osSemaphoreNew+0x108>
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d072      	beq.n	80084d8 <osSemaphoreNew+0x108>
 80083f2:	68ba      	ldr	r2, [r7, #8]
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	429a      	cmp	r2, r3
 80083f8:	d86e      	bhi.n	80084d8 <osSemaphoreNew+0x108>
    mem = -1;
 80083fa:	f04f 33ff 	mov.w	r3, #4294967295
 80083fe:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d015      	beq.n	8008432 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	689b      	ldr	r3, [r3, #8]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d006      	beq.n	800841c <osSemaphoreNew+0x4c>
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	68db      	ldr	r3, [r3, #12]
 8008412:	2b4f      	cmp	r3, #79	; 0x4f
 8008414:	d902      	bls.n	800841c <osSemaphoreNew+0x4c>
        mem = 1;
 8008416:	2301      	movs	r3, #1
 8008418:	61bb      	str	r3, [r7, #24]
 800841a:	e00c      	b.n	8008436 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	689b      	ldr	r3, [r3, #8]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d108      	bne.n	8008436 <osSemaphoreNew+0x66>
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	68db      	ldr	r3, [r3, #12]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d104      	bne.n	8008436 <osSemaphoreNew+0x66>
          mem = 0;
 800842c:	2300      	movs	r3, #0
 800842e:	61bb      	str	r3, [r7, #24]
 8008430:	e001      	b.n	8008436 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8008432:	2300      	movs	r3, #0
 8008434:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8008436:	69bb      	ldr	r3, [r7, #24]
 8008438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800843c:	d04c      	beq.n	80084d8 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	2b01      	cmp	r3, #1
 8008442:	d128      	bne.n	8008496 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8008444:	69bb      	ldr	r3, [r7, #24]
 8008446:	2b01      	cmp	r3, #1
 8008448:	d10a      	bne.n	8008460 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	689b      	ldr	r3, [r3, #8]
 800844e:	2203      	movs	r2, #3
 8008450:	9200      	str	r2, [sp, #0]
 8008452:	2200      	movs	r2, #0
 8008454:	2100      	movs	r1, #0
 8008456:	2001      	movs	r0, #1
 8008458:	f000 fb5c 	bl	8008b14 <xQueueGenericCreateStatic>
 800845c:	61f8      	str	r0, [r7, #28]
 800845e:	e005      	b.n	800846c <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8008460:	2203      	movs	r2, #3
 8008462:	2100      	movs	r1, #0
 8008464:	2001      	movs	r0, #1
 8008466:	f000 fbcd 	bl	8008c04 <xQueueGenericCreate>
 800846a:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800846c:	69fb      	ldr	r3, [r7, #28]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d022      	beq.n	80084b8 <osSemaphoreNew+0xe8>
 8008472:	68bb      	ldr	r3, [r7, #8]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d01f      	beq.n	80084b8 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008478:	2300      	movs	r3, #0
 800847a:	2200      	movs	r2, #0
 800847c:	2100      	movs	r1, #0
 800847e:	69f8      	ldr	r0, [r7, #28]
 8008480:	f000 fd3e 	bl	8008f00 <xQueueGenericSend>
 8008484:	4603      	mov	r3, r0
 8008486:	2b01      	cmp	r3, #1
 8008488:	d016      	beq.n	80084b8 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800848a:	69f8      	ldr	r0, [r7, #28]
 800848c:	f001 f9ca 	bl	8009824 <vQueueDelete>
            hSemaphore = NULL;
 8008490:	2300      	movs	r3, #0
 8008492:	61fb      	str	r3, [r7, #28]
 8008494:	e010      	b.n	80084b8 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8008496:	69bb      	ldr	r3, [r7, #24]
 8008498:	2b01      	cmp	r3, #1
 800849a:	d108      	bne.n	80084ae <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	689b      	ldr	r3, [r3, #8]
 80084a0:	461a      	mov	r2, r3
 80084a2:	68b9      	ldr	r1, [r7, #8]
 80084a4:	68f8      	ldr	r0, [r7, #12]
 80084a6:	f000 fcc1 	bl	8008e2c <xQueueCreateCountingSemaphoreStatic>
 80084aa:	61f8      	str	r0, [r7, #28]
 80084ac:	e004      	b.n	80084b8 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80084ae:	68b9      	ldr	r1, [r7, #8]
 80084b0:	68f8      	ldr	r0, [r7, #12]
 80084b2:	f000 fcf2 	bl	8008e9a <xQueueCreateCountingSemaphore>
 80084b6:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80084b8:	69fb      	ldr	r3, [r7, #28]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d00c      	beq.n	80084d8 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d003      	beq.n	80084cc <osSemaphoreNew+0xfc>
          name = attr->name;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	617b      	str	r3, [r7, #20]
 80084ca:	e001      	b.n	80084d0 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80084cc:	2300      	movs	r3, #0
 80084ce:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80084d0:	6979      	ldr	r1, [r7, #20]
 80084d2:	69f8      	ldr	r0, [r7, #28]
 80084d4:	f001 faf2 	bl	8009abc <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80084d8:	69fb      	ldr	r3, [r7, #28]
}
 80084da:	4618      	mov	r0, r3
 80084dc:	3720      	adds	r7, #32
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}
	...

080084e4 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b086      	sub	sp, #24
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
 80084ec:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80084f2:	2300      	movs	r3, #0
 80084f4:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80084f6:	693b      	ldr	r3, [r7, #16]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d103      	bne.n	8008504 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80084fc:	f06f 0303 	mvn.w	r3, #3
 8008500:	617b      	str	r3, [r7, #20]
 8008502:	e039      	b.n	8008578 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008504:	f3ef 8305 	mrs	r3, IPSR
 8008508:	60fb      	str	r3, [r7, #12]
  return(result);
 800850a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800850c:	2b00      	cmp	r3, #0
 800850e:	d022      	beq.n	8008556 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d003      	beq.n	800851e <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8008516:	f06f 0303 	mvn.w	r3, #3
 800851a:	617b      	str	r3, [r7, #20]
 800851c:	e02c      	b.n	8008578 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800851e:	2300      	movs	r3, #0
 8008520:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8008522:	f107 0308 	add.w	r3, r7, #8
 8008526:	461a      	mov	r2, r3
 8008528:	2100      	movs	r1, #0
 800852a:	6938      	ldr	r0, [r7, #16]
 800852c:	f001 f8fa 	bl	8009724 <xQueueReceiveFromISR>
 8008530:	4603      	mov	r3, r0
 8008532:	2b01      	cmp	r3, #1
 8008534:	d003      	beq.n	800853e <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8008536:	f06f 0302 	mvn.w	r3, #2
 800853a:	617b      	str	r3, [r7, #20]
 800853c:	e01c      	b.n	8008578 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800853e:	68bb      	ldr	r3, [r7, #8]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d019      	beq.n	8008578 <osSemaphoreAcquire+0x94>
 8008544:	4b0f      	ldr	r3, [pc, #60]	; (8008584 <osSemaphoreAcquire+0xa0>)
 8008546:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800854a:	601a      	str	r2, [r3, #0]
 800854c:	f3bf 8f4f 	dsb	sy
 8008550:	f3bf 8f6f 	isb	sy
 8008554:	e010      	b.n	8008578 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8008556:	6839      	ldr	r1, [r7, #0]
 8008558:	6938      	ldr	r0, [r7, #16]
 800855a:	f000 ffd7 	bl	800950c <xQueueSemaphoreTake>
 800855e:	4603      	mov	r3, r0
 8008560:	2b01      	cmp	r3, #1
 8008562:	d009      	beq.n	8008578 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d003      	beq.n	8008572 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800856a:	f06f 0301 	mvn.w	r3, #1
 800856e:	617b      	str	r3, [r7, #20]
 8008570:	e002      	b.n	8008578 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8008572:	f06f 0302 	mvn.w	r3, #2
 8008576:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8008578:	697b      	ldr	r3, [r7, #20]
}
 800857a:	4618      	mov	r0, r3
 800857c:	3718      	adds	r7, #24
 800857e:	46bd      	mov	sp, r7
 8008580:	bd80      	pop	{r7, pc}
 8008582:	bf00      	nop
 8008584:	e000ed04 	.word	0xe000ed04

08008588 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8008588:	b580      	push	{r7, lr}
 800858a:	b086      	sub	sp, #24
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8008594:	2300      	movs	r3, #0
 8008596:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8008598:	693b      	ldr	r3, [r7, #16]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d103      	bne.n	80085a6 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800859e:	f06f 0303 	mvn.w	r3, #3
 80085a2:	617b      	str	r3, [r7, #20]
 80085a4:	e02c      	b.n	8008600 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80085a6:	f3ef 8305 	mrs	r3, IPSR
 80085aa:	60fb      	str	r3, [r7, #12]
  return(result);
 80085ac:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d01a      	beq.n	80085e8 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 80085b2:	2300      	movs	r3, #0
 80085b4:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80085b6:	f107 0308 	add.w	r3, r7, #8
 80085ba:	4619      	mov	r1, r3
 80085bc:	6938      	ldr	r0, [r7, #16]
 80085be:	f000 fe38 	bl	8009232 <xQueueGiveFromISR>
 80085c2:	4603      	mov	r3, r0
 80085c4:	2b01      	cmp	r3, #1
 80085c6:	d003      	beq.n	80085d0 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80085c8:	f06f 0302 	mvn.w	r3, #2
 80085cc:	617b      	str	r3, [r7, #20]
 80085ce:	e017      	b.n	8008600 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80085d0:	68bb      	ldr	r3, [r7, #8]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d014      	beq.n	8008600 <osSemaphoreRelease+0x78>
 80085d6:	4b0d      	ldr	r3, [pc, #52]	; (800860c <osSemaphoreRelease+0x84>)
 80085d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085dc:	601a      	str	r2, [r3, #0]
 80085de:	f3bf 8f4f 	dsb	sy
 80085e2:	f3bf 8f6f 	isb	sy
 80085e6:	e00b      	b.n	8008600 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80085e8:	2300      	movs	r3, #0
 80085ea:	2200      	movs	r2, #0
 80085ec:	2100      	movs	r1, #0
 80085ee:	6938      	ldr	r0, [r7, #16]
 80085f0:	f000 fc86 	bl	8008f00 <xQueueGenericSend>
 80085f4:	4603      	mov	r3, r0
 80085f6:	2b01      	cmp	r3, #1
 80085f8:	d002      	beq.n	8008600 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80085fa:	f06f 0302 	mvn.w	r3, #2
 80085fe:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8008600:	697b      	ldr	r3, [r7, #20]
}
 8008602:	4618      	mov	r0, r3
 8008604:	3718      	adds	r7, #24
 8008606:	46bd      	mov	sp, r7
 8008608:	bd80      	pop	{r7, pc}
 800860a:	bf00      	nop
 800860c:	e000ed04 	.word	0xe000ed04

08008610 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8008610:	b580      	push	{r7, lr}
 8008612:	b08a      	sub	sp, #40	; 0x28
 8008614:	af02      	add	r7, sp, #8
 8008616:	60f8      	str	r0, [r7, #12]
 8008618:	60b9      	str	r1, [r7, #8]
 800861a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800861c:	2300      	movs	r3, #0
 800861e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008620:	f3ef 8305 	mrs	r3, IPSR
 8008624:	613b      	str	r3, [r7, #16]
  return(result);
 8008626:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8008628:	2b00      	cmp	r3, #0
 800862a:	d15f      	bne.n	80086ec <osMessageQueueNew+0xdc>
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d05c      	beq.n	80086ec <osMessageQueueNew+0xdc>
 8008632:	68bb      	ldr	r3, [r7, #8]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d059      	beq.n	80086ec <osMessageQueueNew+0xdc>
    mem = -1;
 8008638:	f04f 33ff 	mov.w	r3, #4294967295
 800863c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d029      	beq.n	8008698 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	689b      	ldr	r3, [r3, #8]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d012      	beq.n	8008672 <osMessageQueueNew+0x62>
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	68db      	ldr	r3, [r3, #12]
 8008650:	2b4f      	cmp	r3, #79	; 0x4f
 8008652:	d90e      	bls.n	8008672 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008658:	2b00      	cmp	r3, #0
 800865a:	d00a      	beq.n	8008672 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	695a      	ldr	r2, [r3, #20]
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	68b9      	ldr	r1, [r7, #8]
 8008664:	fb01 f303 	mul.w	r3, r1, r3
 8008668:	429a      	cmp	r2, r3
 800866a:	d302      	bcc.n	8008672 <osMessageQueueNew+0x62>
        mem = 1;
 800866c:	2301      	movs	r3, #1
 800866e:	61bb      	str	r3, [r7, #24]
 8008670:	e014      	b.n	800869c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	689b      	ldr	r3, [r3, #8]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d110      	bne.n	800869c <osMessageQueueNew+0x8c>
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	68db      	ldr	r3, [r3, #12]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d10c      	bne.n	800869c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008686:	2b00      	cmp	r3, #0
 8008688:	d108      	bne.n	800869c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	695b      	ldr	r3, [r3, #20]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d104      	bne.n	800869c <osMessageQueueNew+0x8c>
          mem = 0;
 8008692:	2300      	movs	r3, #0
 8008694:	61bb      	str	r3, [r7, #24]
 8008696:	e001      	b.n	800869c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8008698:	2300      	movs	r3, #0
 800869a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800869c:	69bb      	ldr	r3, [r7, #24]
 800869e:	2b01      	cmp	r3, #1
 80086a0:	d10b      	bne.n	80086ba <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	691a      	ldr	r2, [r3, #16]
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	689b      	ldr	r3, [r3, #8]
 80086aa:	2100      	movs	r1, #0
 80086ac:	9100      	str	r1, [sp, #0]
 80086ae:	68b9      	ldr	r1, [r7, #8]
 80086b0:	68f8      	ldr	r0, [r7, #12]
 80086b2:	f000 fa2f 	bl	8008b14 <xQueueGenericCreateStatic>
 80086b6:	61f8      	str	r0, [r7, #28]
 80086b8:	e008      	b.n	80086cc <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80086ba:	69bb      	ldr	r3, [r7, #24]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d105      	bne.n	80086cc <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80086c0:	2200      	movs	r2, #0
 80086c2:	68b9      	ldr	r1, [r7, #8]
 80086c4:	68f8      	ldr	r0, [r7, #12]
 80086c6:	f000 fa9d 	bl	8008c04 <xQueueGenericCreate>
 80086ca:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80086cc:	69fb      	ldr	r3, [r7, #28]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d00c      	beq.n	80086ec <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d003      	beq.n	80086e0 <osMessageQueueNew+0xd0>
        name = attr->name;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	617b      	str	r3, [r7, #20]
 80086de:	e001      	b.n	80086e4 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80086e0:	2300      	movs	r3, #0
 80086e2:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80086e4:	6979      	ldr	r1, [r7, #20]
 80086e6:	69f8      	ldr	r0, [r7, #28]
 80086e8:	f001 f9e8 	bl	8009abc <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80086ec:	69fb      	ldr	r3, [r7, #28]
}
 80086ee:	4618      	mov	r0, r3
 80086f0:	3720      	adds	r7, #32
 80086f2:	46bd      	mov	sp, r7
 80086f4:	bd80      	pop	{r7, pc}
	...

080086f8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b088      	sub	sp, #32
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	60f8      	str	r0, [r7, #12]
 8008700:	60b9      	str	r1, [r7, #8]
 8008702:	603b      	str	r3, [r7, #0]
 8008704:	4613      	mov	r3, r2
 8008706:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800870c:	2300      	movs	r3, #0
 800870e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008710:	f3ef 8305 	mrs	r3, IPSR
 8008714:	617b      	str	r3, [r7, #20]
  return(result);
 8008716:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008718:	2b00      	cmp	r3, #0
 800871a:	d028      	beq.n	800876e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800871c:	69bb      	ldr	r3, [r7, #24]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d005      	beq.n	800872e <osMessageQueuePut+0x36>
 8008722:	68bb      	ldr	r3, [r7, #8]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d002      	beq.n	800872e <osMessageQueuePut+0x36>
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d003      	beq.n	8008736 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800872e:	f06f 0303 	mvn.w	r3, #3
 8008732:	61fb      	str	r3, [r7, #28]
 8008734:	e038      	b.n	80087a8 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8008736:	2300      	movs	r3, #0
 8008738:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800873a:	f107 0210 	add.w	r2, r7, #16
 800873e:	2300      	movs	r3, #0
 8008740:	68b9      	ldr	r1, [r7, #8]
 8008742:	69b8      	ldr	r0, [r7, #24]
 8008744:	f000 fcda 	bl	80090fc <xQueueGenericSendFromISR>
 8008748:	4603      	mov	r3, r0
 800874a:	2b01      	cmp	r3, #1
 800874c:	d003      	beq.n	8008756 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800874e:	f06f 0302 	mvn.w	r3, #2
 8008752:	61fb      	str	r3, [r7, #28]
 8008754:	e028      	b.n	80087a8 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8008756:	693b      	ldr	r3, [r7, #16]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d025      	beq.n	80087a8 <osMessageQueuePut+0xb0>
 800875c:	4b15      	ldr	r3, [pc, #84]	; (80087b4 <osMessageQueuePut+0xbc>)
 800875e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008762:	601a      	str	r2, [r3, #0]
 8008764:	f3bf 8f4f 	dsb	sy
 8008768:	f3bf 8f6f 	isb	sy
 800876c:	e01c      	b.n	80087a8 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800876e:	69bb      	ldr	r3, [r7, #24]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d002      	beq.n	800877a <osMessageQueuePut+0x82>
 8008774:	68bb      	ldr	r3, [r7, #8]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d103      	bne.n	8008782 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800877a:	f06f 0303 	mvn.w	r3, #3
 800877e:	61fb      	str	r3, [r7, #28]
 8008780:	e012      	b.n	80087a8 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008782:	2300      	movs	r3, #0
 8008784:	683a      	ldr	r2, [r7, #0]
 8008786:	68b9      	ldr	r1, [r7, #8]
 8008788:	69b8      	ldr	r0, [r7, #24]
 800878a:	f000 fbb9 	bl	8008f00 <xQueueGenericSend>
 800878e:	4603      	mov	r3, r0
 8008790:	2b01      	cmp	r3, #1
 8008792:	d009      	beq.n	80087a8 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d003      	beq.n	80087a2 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800879a:	f06f 0301 	mvn.w	r3, #1
 800879e:	61fb      	str	r3, [r7, #28]
 80087a0:	e002      	b.n	80087a8 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80087a2:	f06f 0302 	mvn.w	r3, #2
 80087a6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80087a8:	69fb      	ldr	r3, [r7, #28]
}
 80087aa:	4618      	mov	r0, r3
 80087ac:	3720      	adds	r7, #32
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bd80      	pop	{r7, pc}
 80087b2:	bf00      	nop
 80087b4:	e000ed04 	.word	0xe000ed04

080087b8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b088      	sub	sp, #32
 80087bc:	af00      	add	r7, sp, #0
 80087be:	60f8      	str	r0, [r7, #12]
 80087c0:	60b9      	str	r1, [r7, #8]
 80087c2:	607a      	str	r2, [r7, #4]
 80087c4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80087ca:	2300      	movs	r3, #0
 80087cc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80087ce:	f3ef 8305 	mrs	r3, IPSR
 80087d2:	617b      	str	r3, [r7, #20]
  return(result);
 80087d4:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d028      	beq.n	800882c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80087da:	69bb      	ldr	r3, [r7, #24]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d005      	beq.n	80087ec <osMessageQueueGet+0x34>
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d002      	beq.n	80087ec <osMessageQueueGet+0x34>
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d003      	beq.n	80087f4 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80087ec:	f06f 0303 	mvn.w	r3, #3
 80087f0:	61fb      	str	r3, [r7, #28]
 80087f2:	e037      	b.n	8008864 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80087f4:	2300      	movs	r3, #0
 80087f6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80087f8:	f107 0310 	add.w	r3, r7, #16
 80087fc:	461a      	mov	r2, r3
 80087fe:	68b9      	ldr	r1, [r7, #8]
 8008800:	69b8      	ldr	r0, [r7, #24]
 8008802:	f000 ff8f 	bl	8009724 <xQueueReceiveFromISR>
 8008806:	4603      	mov	r3, r0
 8008808:	2b01      	cmp	r3, #1
 800880a:	d003      	beq.n	8008814 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800880c:	f06f 0302 	mvn.w	r3, #2
 8008810:	61fb      	str	r3, [r7, #28]
 8008812:	e027      	b.n	8008864 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8008814:	693b      	ldr	r3, [r7, #16]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d024      	beq.n	8008864 <osMessageQueueGet+0xac>
 800881a:	4b15      	ldr	r3, [pc, #84]	; (8008870 <osMessageQueueGet+0xb8>)
 800881c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008820:	601a      	str	r2, [r3, #0]
 8008822:	f3bf 8f4f 	dsb	sy
 8008826:	f3bf 8f6f 	isb	sy
 800882a:	e01b      	b.n	8008864 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800882c:	69bb      	ldr	r3, [r7, #24]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d002      	beq.n	8008838 <osMessageQueueGet+0x80>
 8008832:	68bb      	ldr	r3, [r7, #8]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d103      	bne.n	8008840 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8008838:	f06f 0303 	mvn.w	r3, #3
 800883c:	61fb      	str	r3, [r7, #28]
 800883e:	e011      	b.n	8008864 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008840:	683a      	ldr	r2, [r7, #0]
 8008842:	68b9      	ldr	r1, [r7, #8]
 8008844:	69b8      	ldr	r0, [r7, #24]
 8008846:	f000 fd81 	bl	800934c <xQueueReceive>
 800884a:	4603      	mov	r3, r0
 800884c:	2b01      	cmp	r3, #1
 800884e:	d009      	beq.n	8008864 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d003      	beq.n	800885e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8008856:	f06f 0301 	mvn.w	r3, #1
 800885a:	61fb      	str	r3, [r7, #28]
 800885c:	e002      	b.n	8008864 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800885e:	f06f 0302 	mvn.w	r3, #2
 8008862:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008864:	69fb      	ldr	r3, [r7, #28]
}
 8008866:	4618      	mov	r0, r3
 8008868:	3720      	adds	r7, #32
 800886a:	46bd      	mov	sp, r7
 800886c:	bd80      	pop	{r7, pc}
 800886e:	bf00      	nop
 8008870:	e000ed04 	.word	0xe000ed04

08008874 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008874:	b480      	push	{r7}
 8008876:	b085      	sub	sp, #20
 8008878:	af00      	add	r7, sp, #0
 800887a:	60f8      	str	r0, [r7, #12]
 800887c:	60b9      	str	r1, [r7, #8]
 800887e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	4a07      	ldr	r2, [pc, #28]	; (80088a0 <vApplicationGetIdleTaskMemory+0x2c>)
 8008884:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008886:	68bb      	ldr	r3, [r7, #8]
 8008888:	4a06      	ldr	r2, [pc, #24]	; (80088a4 <vApplicationGetIdleTaskMemory+0x30>)
 800888a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2280      	movs	r2, #128	; 0x80
 8008890:	601a      	str	r2, [r3, #0]
}
 8008892:	bf00      	nop
 8008894:	3714      	adds	r7, #20
 8008896:	46bd      	mov	sp, r7
 8008898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889c:	4770      	bx	lr
 800889e:	bf00      	nop
 80088a0:	20004e10 	.word	0x20004e10
 80088a4:	20004e6c 	.word	0x20004e6c

080088a8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80088a8:	b480      	push	{r7}
 80088aa:	b085      	sub	sp, #20
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	60f8      	str	r0, [r7, #12]
 80088b0:	60b9      	str	r1, [r7, #8]
 80088b2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	4a07      	ldr	r2, [pc, #28]	; (80088d4 <vApplicationGetTimerTaskMemory+0x2c>)
 80088b8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80088ba:	68bb      	ldr	r3, [r7, #8]
 80088bc:	4a06      	ldr	r2, [pc, #24]	; (80088d8 <vApplicationGetTimerTaskMemory+0x30>)
 80088be:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80088c6:	601a      	str	r2, [r3, #0]
}
 80088c8:	bf00      	nop
 80088ca:	3714      	adds	r7, #20
 80088cc:	46bd      	mov	sp, r7
 80088ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d2:	4770      	bx	lr
 80088d4:	2000506c 	.word	0x2000506c
 80088d8:	200050c8 	.word	0x200050c8

080088dc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80088dc:	b480      	push	{r7}
 80088de:	b083      	sub	sp, #12
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	f103 0208 	add.w	r2, r3, #8
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	f04f 32ff 	mov.w	r2, #4294967295
 80088f4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	f103 0208 	add.w	r2, r3, #8
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	f103 0208 	add.w	r2, r3, #8
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2200      	movs	r2, #0
 800890e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008910:	bf00      	nop
 8008912:	370c      	adds	r7, #12
 8008914:	46bd      	mov	sp, r7
 8008916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891a:	4770      	bx	lr

0800891c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800891c:	b480      	push	{r7}
 800891e:	b083      	sub	sp, #12
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2200      	movs	r2, #0
 8008928:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800892a:	bf00      	nop
 800892c:	370c      	adds	r7, #12
 800892e:	46bd      	mov	sp, r7
 8008930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008934:	4770      	bx	lr

08008936 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008936:	b480      	push	{r7}
 8008938:	b085      	sub	sp, #20
 800893a:	af00      	add	r7, sp, #0
 800893c:	6078      	str	r0, [r7, #4]
 800893e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	685b      	ldr	r3, [r3, #4]
 8008944:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	68fa      	ldr	r2, [r7, #12]
 800894a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	689a      	ldr	r2, [r3, #8]
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	689b      	ldr	r3, [r3, #8]
 8008958:	683a      	ldr	r2, [r7, #0]
 800895a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	683a      	ldr	r2, [r7, #0]
 8008960:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	687a      	ldr	r2, [r7, #4]
 8008966:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	1c5a      	adds	r2, r3, #1
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	601a      	str	r2, [r3, #0]
}
 8008972:	bf00      	nop
 8008974:	3714      	adds	r7, #20
 8008976:	46bd      	mov	sp, r7
 8008978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897c:	4770      	bx	lr

0800897e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800897e:	b480      	push	{r7}
 8008980:	b085      	sub	sp, #20
 8008982:	af00      	add	r7, sp, #0
 8008984:	6078      	str	r0, [r7, #4]
 8008986:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008994:	d103      	bne.n	800899e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	691b      	ldr	r3, [r3, #16]
 800899a:	60fb      	str	r3, [r7, #12]
 800899c:	e00c      	b.n	80089b8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	3308      	adds	r3, #8
 80089a2:	60fb      	str	r3, [r7, #12]
 80089a4:	e002      	b.n	80089ac <vListInsert+0x2e>
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	685b      	ldr	r3, [r3, #4]
 80089aa:	60fb      	str	r3, [r7, #12]
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	685b      	ldr	r3, [r3, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	68ba      	ldr	r2, [r7, #8]
 80089b4:	429a      	cmp	r2, r3
 80089b6:	d2f6      	bcs.n	80089a6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	685a      	ldr	r2, [r3, #4]
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	685b      	ldr	r3, [r3, #4]
 80089c4:	683a      	ldr	r2, [r7, #0]
 80089c6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	68fa      	ldr	r2, [r7, #12]
 80089cc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	683a      	ldr	r2, [r7, #0]
 80089d2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	687a      	ldr	r2, [r7, #4]
 80089d8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	1c5a      	adds	r2, r3, #1
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	601a      	str	r2, [r3, #0]
}
 80089e4:	bf00      	nop
 80089e6:	3714      	adds	r7, #20
 80089e8:	46bd      	mov	sp, r7
 80089ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ee:	4770      	bx	lr

080089f0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80089f0:	b480      	push	{r7}
 80089f2:	b085      	sub	sp, #20
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	691b      	ldr	r3, [r3, #16]
 80089fc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	685b      	ldr	r3, [r3, #4]
 8008a02:	687a      	ldr	r2, [r7, #4]
 8008a04:	6892      	ldr	r2, [r2, #8]
 8008a06:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	689b      	ldr	r3, [r3, #8]
 8008a0c:	687a      	ldr	r2, [r7, #4]
 8008a0e:	6852      	ldr	r2, [r2, #4]
 8008a10:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	685b      	ldr	r3, [r3, #4]
 8008a16:	687a      	ldr	r2, [r7, #4]
 8008a18:	429a      	cmp	r2, r3
 8008a1a:	d103      	bne.n	8008a24 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	689a      	ldr	r2, [r3, #8]
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2200      	movs	r2, #0
 8008a28:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	1e5a      	subs	r2, r3, #1
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	681b      	ldr	r3, [r3, #0]
}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	3714      	adds	r7, #20
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a42:	4770      	bx	lr

08008a44 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b084      	sub	sp, #16
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
 8008a4c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d10a      	bne.n	8008a6e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a5c:	f383 8811 	msr	BASEPRI, r3
 8008a60:	f3bf 8f6f 	isb	sy
 8008a64:	f3bf 8f4f 	dsb	sy
 8008a68:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008a6a:	bf00      	nop
 8008a6c:	e7fe      	b.n	8008a6c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008a6e:	f002 fd49 	bl	800b504 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	681a      	ldr	r2, [r3, #0]
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a7a:	68f9      	ldr	r1, [r7, #12]
 8008a7c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008a7e:	fb01 f303 	mul.w	r3, r1, r3
 8008a82:	441a      	add	r2, r3
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681a      	ldr	r2, [r3, #0]
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	681a      	ldr	r2, [r3, #0]
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a9e:	3b01      	subs	r3, #1
 8008aa0:	68f9      	ldr	r1, [r7, #12]
 8008aa2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008aa4:	fb01 f303 	mul.w	r3, r1, r3
 8008aa8:	441a      	add	r2, r3
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	22ff      	movs	r2, #255	; 0xff
 8008ab2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	22ff      	movs	r2, #255	; 0xff
 8008aba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d114      	bne.n	8008aee <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	691b      	ldr	r3, [r3, #16]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d01a      	beq.n	8008b02 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	3310      	adds	r3, #16
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	f001 fced 	bl	800a4b0 <xTaskRemoveFromEventList>
 8008ad6:	4603      	mov	r3, r0
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d012      	beq.n	8008b02 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008adc:	4b0c      	ldr	r3, [pc, #48]	; (8008b10 <xQueueGenericReset+0xcc>)
 8008ade:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ae2:	601a      	str	r2, [r3, #0]
 8008ae4:	f3bf 8f4f 	dsb	sy
 8008ae8:	f3bf 8f6f 	isb	sy
 8008aec:	e009      	b.n	8008b02 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	3310      	adds	r3, #16
 8008af2:	4618      	mov	r0, r3
 8008af4:	f7ff fef2 	bl	80088dc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	3324      	adds	r3, #36	; 0x24
 8008afc:	4618      	mov	r0, r3
 8008afe:	f7ff feed 	bl	80088dc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008b02:	f002 fd2f 	bl	800b564 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008b06:	2301      	movs	r3, #1
}
 8008b08:	4618      	mov	r0, r3
 8008b0a:	3710      	adds	r7, #16
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	bd80      	pop	{r7, pc}
 8008b10:	e000ed04 	.word	0xe000ed04

08008b14 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b08e      	sub	sp, #56	; 0x38
 8008b18:	af02      	add	r7, sp, #8
 8008b1a:	60f8      	str	r0, [r7, #12]
 8008b1c:	60b9      	str	r1, [r7, #8]
 8008b1e:	607a      	str	r2, [r7, #4]
 8008b20:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d10a      	bne.n	8008b3e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b2c:	f383 8811 	msr	BASEPRI, r3
 8008b30:	f3bf 8f6f 	isb	sy
 8008b34:	f3bf 8f4f 	dsb	sy
 8008b38:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008b3a:	bf00      	nop
 8008b3c:	e7fe      	b.n	8008b3c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d10a      	bne.n	8008b5a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b48:	f383 8811 	msr	BASEPRI, r3
 8008b4c:	f3bf 8f6f 	isb	sy
 8008b50:	f3bf 8f4f 	dsb	sy
 8008b54:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008b56:	bf00      	nop
 8008b58:	e7fe      	b.n	8008b58 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d002      	beq.n	8008b66 <xQueueGenericCreateStatic+0x52>
 8008b60:	68bb      	ldr	r3, [r7, #8]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d001      	beq.n	8008b6a <xQueueGenericCreateStatic+0x56>
 8008b66:	2301      	movs	r3, #1
 8008b68:	e000      	b.n	8008b6c <xQueueGenericCreateStatic+0x58>
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d10a      	bne.n	8008b86 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b74:	f383 8811 	msr	BASEPRI, r3
 8008b78:	f3bf 8f6f 	isb	sy
 8008b7c:	f3bf 8f4f 	dsb	sy
 8008b80:	623b      	str	r3, [r7, #32]
}
 8008b82:	bf00      	nop
 8008b84:	e7fe      	b.n	8008b84 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d102      	bne.n	8008b92 <xQueueGenericCreateStatic+0x7e>
 8008b8c:	68bb      	ldr	r3, [r7, #8]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d101      	bne.n	8008b96 <xQueueGenericCreateStatic+0x82>
 8008b92:	2301      	movs	r3, #1
 8008b94:	e000      	b.n	8008b98 <xQueueGenericCreateStatic+0x84>
 8008b96:	2300      	movs	r3, #0
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d10a      	bne.n	8008bb2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ba0:	f383 8811 	msr	BASEPRI, r3
 8008ba4:	f3bf 8f6f 	isb	sy
 8008ba8:	f3bf 8f4f 	dsb	sy
 8008bac:	61fb      	str	r3, [r7, #28]
}
 8008bae:	bf00      	nop
 8008bb0:	e7fe      	b.n	8008bb0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008bb2:	2350      	movs	r3, #80	; 0x50
 8008bb4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008bb6:	697b      	ldr	r3, [r7, #20]
 8008bb8:	2b50      	cmp	r3, #80	; 0x50
 8008bba:	d00a      	beq.n	8008bd2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bc0:	f383 8811 	msr	BASEPRI, r3
 8008bc4:	f3bf 8f6f 	isb	sy
 8008bc8:	f3bf 8f4f 	dsb	sy
 8008bcc:	61bb      	str	r3, [r7, #24]
}
 8008bce:	bf00      	nop
 8008bd0:	e7fe      	b.n	8008bd0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008bd2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d00d      	beq.n	8008bfa <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008be0:	2201      	movs	r2, #1
 8008be2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008be6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bec:	9300      	str	r3, [sp, #0]
 8008bee:	4613      	mov	r3, r2
 8008bf0:	687a      	ldr	r2, [r7, #4]
 8008bf2:	68b9      	ldr	r1, [r7, #8]
 8008bf4:	68f8      	ldr	r0, [r7, #12]
 8008bf6:	f000 f83f 	bl	8008c78 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	3730      	adds	r7, #48	; 0x30
 8008c00:	46bd      	mov	sp, r7
 8008c02:	bd80      	pop	{r7, pc}

08008c04 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b08a      	sub	sp, #40	; 0x28
 8008c08:	af02      	add	r7, sp, #8
 8008c0a:	60f8      	str	r0, [r7, #12]
 8008c0c:	60b9      	str	r1, [r7, #8]
 8008c0e:	4613      	mov	r3, r2
 8008c10:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d10a      	bne.n	8008c2e <xQueueGenericCreate+0x2a>
	__asm volatile
 8008c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c1c:	f383 8811 	msr	BASEPRI, r3
 8008c20:	f3bf 8f6f 	isb	sy
 8008c24:	f3bf 8f4f 	dsb	sy
 8008c28:	613b      	str	r3, [r7, #16]
}
 8008c2a:	bf00      	nop
 8008c2c:	e7fe      	b.n	8008c2c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	68ba      	ldr	r2, [r7, #8]
 8008c32:	fb02 f303 	mul.w	r3, r2, r3
 8008c36:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008c38:	69fb      	ldr	r3, [r7, #28]
 8008c3a:	3350      	adds	r3, #80	; 0x50
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	f002 fd83 	bl	800b748 <pvPortMalloc>
 8008c42:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008c44:	69bb      	ldr	r3, [r7, #24]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d011      	beq.n	8008c6e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008c4a:	69bb      	ldr	r3, [r7, #24]
 8008c4c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008c4e:	697b      	ldr	r3, [r7, #20]
 8008c50:	3350      	adds	r3, #80	; 0x50
 8008c52:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008c54:	69bb      	ldr	r3, [r7, #24]
 8008c56:	2200      	movs	r2, #0
 8008c58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008c5c:	79fa      	ldrb	r2, [r7, #7]
 8008c5e:	69bb      	ldr	r3, [r7, #24]
 8008c60:	9300      	str	r3, [sp, #0]
 8008c62:	4613      	mov	r3, r2
 8008c64:	697a      	ldr	r2, [r7, #20]
 8008c66:	68b9      	ldr	r1, [r7, #8]
 8008c68:	68f8      	ldr	r0, [r7, #12]
 8008c6a:	f000 f805 	bl	8008c78 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008c6e:	69bb      	ldr	r3, [r7, #24]
	}
 8008c70:	4618      	mov	r0, r3
 8008c72:	3720      	adds	r7, #32
 8008c74:	46bd      	mov	sp, r7
 8008c76:	bd80      	pop	{r7, pc}

08008c78 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b084      	sub	sp, #16
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	60f8      	str	r0, [r7, #12]
 8008c80:	60b9      	str	r1, [r7, #8]
 8008c82:	607a      	str	r2, [r7, #4]
 8008c84:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008c86:	68bb      	ldr	r3, [r7, #8]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d103      	bne.n	8008c94 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008c8c:	69bb      	ldr	r3, [r7, #24]
 8008c8e:	69ba      	ldr	r2, [r7, #24]
 8008c90:	601a      	str	r2, [r3, #0]
 8008c92:	e002      	b.n	8008c9a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008c94:	69bb      	ldr	r3, [r7, #24]
 8008c96:	687a      	ldr	r2, [r7, #4]
 8008c98:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008c9a:	69bb      	ldr	r3, [r7, #24]
 8008c9c:	68fa      	ldr	r2, [r7, #12]
 8008c9e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008ca0:	69bb      	ldr	r3, [r7, #24]
 8008ca2:	68ba      	ldr	r2, [r7, #8]
 8008ca4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008ca6:	2101      	movs	r1, #1
 8008ca8:	69b8      	ldr	r0, [r7, #24]
 8008caa:	f7ff fecb 	bl	8008a44 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008cae:	69bb      	ldr	r3, [r7, #24]
 8008cb0:	78fa      	ldrb	r2, [r7, #3]
 8008cb2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008cb6:	bf00      	nop
 8008cb8:	3710      	adds	r7, #16
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	bd80      	pop	{r7, pc}

08008cbe <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8008cbe:	b580      	push	{r7, lr}
 8008cc0:	b082      	sub	sp, #8
 8008cc2:	af00      	add	r7, sp, #0
 8008cc4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d00e      	beq.n	8008cea <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2200      	movs	r2, #0
 8008cd0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2200      	movs	r2, #0
 8008cdc:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8008cde:	2300      	movs	r3, #0
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	2100      	movs	r1, #0
 8008ce4:	6878      	ldr	r0, [r7, #4]
 8008ce6:	f000 f90b 	bl	8008f00 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8008cea:	bf00      	nop
 8008cec:	3708      	adds	r7, #8
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	bd80      	pop	{r7, pc}

08008cf2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8008cf2:	b580      	push	{r7, lr}
 8008cf4:	b086      	sub	sp, #24
 8008cf6:	af00      	add	r7, sp, #0
 8008cf8:	4603      	mov	r3, r0
 8008cfa:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008cfc:	2301      	movs	r3, #1
 8008cfe:	617b      	str	r3, [r7, #20]
 8008d00:	2300      	movs	r3, #0
 8008d02:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8008d04:	79fb      	ldrb	r3, [r7, #7]
 8008d06:	461a      	mov	r2, r3
 8008d08:	6939      	ldr	r1, [r7, #16]
 8008d0a:	6978      	ldr	r0, [r7, #20]
 8008d0c:	f7ff ff7a 	bl	8008c04 <xQueueGenericCreate>
 8008d10:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008d12:	68f8      	ldr	r0, [r7, #12]
 8008d14:	f7ff ffd3 	bl	8008cbe <prvInitialiseMutex>

		return xNewQueue;
 8008d18:	68fb      	ldr	r3, [r7, #12]
	}
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	3718      	adds	r7, #24
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bd80      	pop	{r7, pc}

08008d22 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8008d22:	b580      	push	{r7, lr}
 8008d24:	b088      	sub	sp, #32
 8008d26:	af02      	add	r7, sp, #8
 8008d28:	4603      	mov	r3, r0
 8008d2a:	6039      	str	r1, [r7, #0]
 8008d2c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008d2e:	2301      	movs	r3, #1
 8008d30:	617b      	str	r3, [r7, #20]
 8008d32:	2300      	movs	r3, #0
 8008d34:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8008d36:	79fb      	ldrb	r3, [r7, #7]
 8008d38:	9300      	str	r3, [sp, #0]
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	6939      	ldr	r1, [r7, #16]
 8008d40:	6978      	ldr	r0, [r7, #20]
 8008d42:	f7ff fee7 	bl	8008b14 <xQueueGenericCreateStatic>
 8008d46:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008d48:	68f8      	ldr	r0, [r7, #12]
 8008d4a:	f7ff ffb8 	bl	8008cbe <prvInitialiseMutex>

		return xNewQueue;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
	}
 8008d50:	4618      	mov	r0, r3
 8008d52:	3718      	adds	r7, #24
 8008d54:	46bd      	mov	sp, r7
 8008d56:	bd80      	pop	{r7, pc}

08008d58 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8008d58:	b590      	push	{r4, r7, lr}
 8008d5a:	b087      	sub	sp, #28
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8008d64:	693b      	ldr	r3, [r7, #16]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d10a      	bne.n	8008d80 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8008d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d6e:	f383 8811 	msr	BASEPRI, r3
 8008d72:	f3bf 8f6f 	isb	sy
 8008d76:	f3bf 8f4f 	dsb	sy
 8008d7a:	60fb      	str	r3, [r7, #12]
}
 8008d7c:	bf00      	nop
 8008d7e:	e7fe      	b.n	8008d7e <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8008d80:	693b      	ldr	r3, [r7, #16]
 8008d82:	689c      	ldr	r4, [r3, #8]
 8008d84:	f001 fd52 	bl	800a82c <xTaskGetCurrentTaskHandle>
 8008d88:	4603      	mov	r3, r0
 8008d8a:	429c      	cmp	r4, r3
 8008d8c:	d111      	bne.n	8008db2 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8008d8e:	693b      	ldr	r3, [r7, #16]
 8008d90:	68db      	ldr	r3, [r3, #12]
 8008d92:	1e5a      	subs	r2, r3, #1
 8008d94:	693b      	ldr	r3, [r7, #16]
 8008d96:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8008d98:	693b      	ldr	r3, [r7, #16]
 8008d9a:	68db      	ldr	r3, [r3, #12]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d105      	bne.n	8008dac <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8008da0:	2300      	movs	r3, #0
 8008da2:	2200      	movs	r2, #0
 8008da4:	2100      	movs	r1, #0
 8008da6:	6938      	ldr	r0, [r7, #16]
 8008da8:	f000 f8aa 	bl	8008f00 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8008dac:	2301      	movs	r3, #1
 8008dae:	617b      	str	r3, [r7, #20]
 8008db0:	e001      	b.n	8008db6 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8008db2:	2300      	movs	r3, #0
 8008db4:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8008db6:	697b      	ldr	r3, [r7, #20]
	}
 8008db8:	4618      	mov	r0, r3
 8008dba:	371c      	adds	r7, #28
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	bd90      	pop	{r4, r7, pc}

08008dc0 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8008dc0:	b590      	push	{r4, r7, lr}
 8008dc2:	b087      	sub	sp, #28
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
 8008dc8:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8008dce:	693b      	ldr	r3, [r7, #16]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d10a      	bne.n	8008dea <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8008dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dd8:	f383 8811 	msr	BASEPRI, r3
 8008ddc:	f3bf 8f6f 	isb	sy
 8008de0:	f3bf 8f4f 	dsb	sy
 8008de4:	60fb      	str	r3, [r7, #12]
}
 8008de6:	bf00      	nop
 8008de8:	e7fe      	b.n	8008de8 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8008dea:	693b      	ldr	r3, [r7, #16]
 8008dec:	689c      	ldr	r4, [r3, #8]
 8008dee:	f001 fd1d 	bl	800a82c <xTaskGetCurrentTaskHandle>
 8008df2:	4603      	mov	r3, r0
 8008df4:	429c      	cmp	r4, r3
 8008df6:	d107      	bne.n	8008e08 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8008df8:	693b      	ldr	r3, [r7, #16]
 8008dfa:	68db      	ldr	r3, [r3, #12]
 8008dfc:	1c5a      	adds	r2, r3, #1
 8008dfe:	693b      	ldr	r3, [r7, #16]
 8008e00:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8008e02:	2301      	movs	r3, #1
 8008e04:	617b      	str	r3, [r7, #20]
 8008e06:	e00c      	b.n	8008e22 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8008e08:	6839      	ldr	r1, [r7, #0]
 8008e0a:	6938      	ldr	r0, [r7, #16]
 8008e0c:	f000 fb7e 	bl	800950c <xQueueSemaphoreTake>
 8008e10:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8008e12:	697b      	ldr	r3, [r7, #20]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d004      	beq.n	8008e22 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8008e18:	693b      	ldr	r3, [r7, #16]
 8008e1a:	68db      	ldr	r3, [r3, #12]
 8008e1c:	1c5a      	adds	r2, r3, #1
 8008e1e:	693b      	ldr	r3, [r7, #16]
 8008e20:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8008e22:	697b      	ldr	r3, [r7, #20]
	}
 8008e24:	4618      	mov	r0, r3
 8008e26:	371c      	adds	r7, #28
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	bd90      	pop	{r4, r7, pc}

08008e2c <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b08a      	sub	sp, #40	; 0x28
 8008e30:	af02      	add	r7, sp, #8
 8008e32:	60f8      	str	r0, [r7, #12]
 8008e34:	60b9      	str	r1, [r7, #8]
 8008e36:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d10a      	bne.n	8008e54 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8008e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e42:	f383 8811 	msr	BASEPRI, r3
 8008e46:	f3bf 8f6f 	isb	sy
 8008e4a:	f3bf 8f4f 	dsb	sy
 8008e4e:	61bb      	str	r3, [r7, #24]
}
 8008e50:	bf00      	nop
 8008e52:	e7fe      	b.n	8008e52 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008e54:	68ba      	ldr	r2, [r7, #8]
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	429a      	cmp	r2, r3
 8008e5a:	d90a      	bls.n	8008e72 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8008e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e60:	f383 8811 	msr	BASEPRI, r3
 8008e64:	f3bf 8f6f 	isb	sy
 8008e68:	f3bf 8f4f 	dsb	sy
 8008e6c:	617b      	str	r3, [r7, #20]
}
 8008e6e:	bf00      	nop
 8008e70:	e7fe      	b.n	8008e70 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008e72:	2302      	movs	r3, #2
 8008e74:	9300      	str	r3, [sp, #0]
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	2200      	movs	r2, #0
 8008e7a:	2100      	movs	r1, #0
 8008e7c:	68f8      	ldr	r0, [r7, #12]
 8008e7e:	f7ff fe49 	bl	8008b14 <xQueueGenericCreateStatic>
 8008e82:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8008e84:	69fb      	ldr	r3, [r7, #28]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d002      	beq.n	8008e90 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008e8a:	69fb      	ldr	r3, [r7, #28]
 8008e8c:	68ba      	ldr	r2, [r7, #8]
 8008e8e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008e90:	69fb      	ldr	r3, [r7, #28]
	}
 8008e92:	4618      	mov	r0, r3
 8008e94:	3720      	adds	r7, #32
 8008e96:	46bd      	mov	sp, r7
 8008e98:	bd80      	pop	{r7, pc}

08008e9a <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8008e9a:	b580      	push	{r7, lr}
 8008e9c:	b086      	sub	sp, #24
 8008e9e:	af00      	add	r7, sp, #0
 8008ea0:	6078      	str	r0, [r7, #4]
 8008ea2:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d10a      	bne.n	8008ec0 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8008eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eae:	f383 8811 	msr	BASEPRI, r3
 8008eb2:	f3bf 8f6f 	isb	sy
 8008eb6:	f3bf 8f4f 	dsb	sy
 8008eba:	613b      	str	r3, [r7, #16]
}
 8008ebc:	bf00      	nop
 8008ebe:	e7fe      	b.n	8008ebe <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008ec0:	683a      	ldr	r2, [r7, #0]
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	429a      	cmp	r2, r3
 8008ec6:	d90a      	bls.n	8008ede <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8008ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ecc:	f383 8811 	msr	BASEPRI, r3
 8008ed0:	f3bf 8f6f 	isb	sy
 8008ed4:	f3bf 8f4f 	dsb	sy
 8008ed8:	60fb      	str	r3, [r7, #12]
}
 8008eda:	bf00      	nop
 8008edc:	e7fe      	b.n	8008edc <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008ede:	2202      	movs	r2, #2
 8008ee0:	2100      	movs	r1, #0
 8008ee2:	6878      	ldr	r0, [r7, #4]
 8008ee4:	f7ff fe8e 	bl	8008c04 <xQueueGenericCreate>
 8008ee8:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8008eea:	697b      	ldr	r3, [r7, #20]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d002      	beq.n	8008ef6 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008ef0:	697b      	ldr	r3, [r7, #20]
 8008ef2:	683a      	ldr	r2, [r7, #0]
 8008ef4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008ef6:	697b      	ldr	r3, [r7, #20]
	}
 8008ef8:	4618      	mov	r0, r3
 8008efa:	3718      	adds	r7, #24
 8008efc:	46bd      	mov	sp, r7
 8008efe:	bd80      	pop	{r7, pc}

08008f00 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b08e      	sub	sp, #56	; 0x38
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	60f8      	str	r0, [r7, #12]
 8008f08:	60b9      	str	r1, [r7, #8]
 8008f0a:	607a      	str	r2, [r7, #4]
 8008f0c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008f0e:	2300      	movs	r3, #0
 8008f10:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d10a      	bne.n	8008f32 <xQueueGenericSend+0x32>
	__asm volatile
 8008f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f20:	f383 8811 	msr	BASEPRI, r3
 8008f24:	f3bf 8f6f 	isb	sy
 8008f28:	f3bf 8f4f 	dsb	sy
 8008f2c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008f2e:	bf00      	nop
 8008f30:	e7fe      	b.n	8008f30 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008f32:	68bb      	ldr	r3, [r7, #8]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d103      	bne.n	8008f40 <xQueueGenericSend+0x40>
 8008f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d101      	bne.n	8008f44 <xQueueGenericSend+0x44>
 8008f40:	2301      	movs	r3, #1
 8008f42:	e000      	b.n	8008f46 <xQueueGenericSend+0x46>
 8008f44:	2300      	movs	r3, #0
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d10a      	bne.n	8008f60 <xQueueGenericSend+0x60>
	__asm volatile
 8008f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f4e:	f383 8811 	msr	BASEPRI, r3
 8008f52:	f3bf 8f6f 	isb	sy
 8008f56:	f3bf 8f4f 	dsb	sy
 8008f5a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008f5c:	bf00      	nop
 8008f5e:	e7fe      	b.n	8008f5e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	2b02      	cmp	r3, #2
 8008f64:	d103      	bne.n	8008f6e <xQueueGenericSend+0x6e>
 8008f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f6a:	2b01      	cmp	r3, #1
 8008f6c:	d101      	bne.n	8008f72 <xQueueGenericSend+0x72>
 8008f6e:	2301      	movs	r3, #1
 8008f70:	e000      	b.n	8008f74 <xQueueGenericSend+0x74>
 8008f72:	2300      	movs	r3, #0
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d10a      	bne.n	8008f8e <xQueueGenericSend+0x8e>
	__asm volatile
 8008f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f7c:	f383 8811 	msr	BASEPRI, r3
 8008f80:	f3bf 8f6f 	isb	sy
 8008f84:	f3bf 8f4f 	dsb	sy
 8008f88:	623b      	str	r3, [r7, #32]
}
 8008f8a:	bf00      	nop
 8008f8c:	e7fe      	b.n	8008f8c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008f8e:	f001 fc5d 	bl	800a84c <xTaskGetSchedulerState>
 8008f92:	4603      	mov	r3, r0
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d102      	bne.n	8008f9e <xQueueGenericSend+0x9e>
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d101      	bne.n	8008fa2 <xQueueGenericSend+0xa2>
 8008f9e:	2301      	movs	r3, #1
 8008fa0:	e000      	b.n	8008fa4 <xQueueGenericSend+0xa4>
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d10a      	bne.n	8008fbe <xQueueGenericSend+0xbe>
	__asm volatile
 8008fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fac:	f383 8811 	msr	BASEPRI, r3
 8008fb0:	f3bf 8f6f 	isb	sy
 8008fb4:	f3bf 8f4f 	dsb	sy
 8008fb8:	61fb      	str	r3, [r7, #28]
}
 8008fba:	bf00      	nop
 8008fbc:	e7fe      	b.n	8008fbc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008fbe:	f002 faa1 	bl	800b504 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fca:	429a      	cmp	r2, r3
 8008fcc:	d302      	bcc.n	8008fd4 <xQueueGenericSend+0xd4>
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	2b02      	cmp	r3, #2
 8008fd2:	d129      	bne.n	8009028 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008fd4:	683a      	ldr	r2, [r7, #0]
 8008fd6:	68b9      	ldr	r1, [r7, #8]
 8008fd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008fda:	f000 fc5e 	bl	800989a <prvCopyDataToQueue>
 8008fde:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d010      	beq.n	800900a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fea:	3324      	adds	r3, #36	; 0x24
 8008fec:	4618      	mov	r0, r3
 8008fee:	f001 fa5f 	bl	800a4b0 <xTaskRemoveFromEventList>
 8008ff2:	4603      	mov	r3, r0
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d013      	beq.n	8009020 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008ff8:	4b3f      	ldr	r3, [pc, #252]	; (80090f8 <xQueueGenericSend+0x1f8>)
 8008ffa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ffe:	601a      	str	r2, [r3, #0]
 8009000:	f3bf 8f4f 	dsb	sy
 8009004:	f3bf 8f6f 	isb	sy
 8009008:	e00a      	b.n	8009020 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800900a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800900c:	2b00      	cmp	r3, #0
 800900e:	d007      	beq.n	8009020 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009010:	4b39      	ldr	r3, [pc, #228]	; (80090f8 <xQueueGenericSend+0x1f8>)
 8009012:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009016:	601a      	str	r2, [r3, #0]
 8009018:	f3bf 8f4f 	dsb	sy
 800901c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009020:	f002 faa0 	bl	800b564 <vPortExitCritical>
				return pdPASS;
 8009024:	2301      	movs	r3, #1
 8009026:	e063      	b.n	80090f0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d103      	bne.n	8009036 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800902e:	f002 fa99 	bl	800b564 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009032:	2300      	movs	r3, #0
 8009034:	e05c      	b.n	80090f0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009036:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009038:	2b00      	cmp	r3, #0
 800903a:	d106      	bne.n	800904a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800903c:	f107 0314 	add.w	r3, r7, #20
 8009040:	4618      	mov	r0, r3
 8009042:	f001 fa99 	bl	800a578 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009046:	2301      	movs	r3, #1
 8009048:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800904a:	f002 fa8b 	bl	800b564 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800904e:	f000 fff9 	bl	800a044 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009052:	f002 fa57 	bl	800b504 <vPortEnterCritical>
 8009056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009058:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800905c:	b25b      	sxtb	r3, r3
 800905e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009062:	d103      	bne.n	800906c <xQueueGenericSend+0x16c>
 8009064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009066:	2200      	movs	r2, #0
 8009068:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800906c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800906e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009072:	b25b      	sxtb	r3, r3
 8009074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009078:	d103      	bne.n	8009082 <xQueueGenericSend+0x182>
 800907a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800907c:	2200      	movs	r2, #0
 800907e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009082:	f002 fa6f 	bl	800b564 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009086:	1d3a      	adds	r2, r7, #4
 8009088:	f107 0314 	add.w	r3, r7, #20
 800908c:	4611      	mov	r1, r2
 800908e:	4618      	mov	r0, r3
 8009090:	f001 fa88 	bl	800a5a4 <xTaskCheckForTimeOut>
 8009094:	4603      	mov	r3, r0
 8009096:	2b00      	cmp	r3, #0
 8009098:	d124      	bne.n	80090e4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800909a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800909c:	f000 fcf5 	bl	8009a8a <prvIsQueueFull>
 80090a0:	4603      	mov	r3, r0
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d018      	beq.n	80090d8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80090a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090a8:	3310      	adds	r3, #16
 80090aa:	687a      	ldr	r2, [r7, #4]
 80090ac:	4611      	mov	r1, r2
 80090ae:	4618      	mov	r0, r3
 80090b0:	f001 f9ae 	bl	800a410 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80090b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80090b6:	f000 fc80 	bl	80099ba <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80090ba:	f000 ffd1 	bl	800a060 <xTaskResumeAll>
 80090be:	4603      	mov	r3, r0
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	f47f af7c 	bne.w	8008fbe <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80090c6:	4b0c      	ldr	r3, [pc, #48]	; (80090f8 <xQueueGenericSend+0x1f8>)
 80090c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090cc:	601a      	str	r2, [r3, #0]
 80090ce:	f3bf 8f4f 	dsb	sy
 80090d2:	f3bf 8f6f 	isb	sy
 80090d6:	e772      	b.n	8008fbe <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80090d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80090da:	f000 fc6e 	bl	80099ba <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80090de:	f000 ffbf 	bl	800a060 <xTaskResumeAll>
 80090e2:	e76c      	b.n	8008fbe <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80090e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80090e6:	f000 fc68 	bl	80099ba <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80090ea:	f000 ffb9 	bl	800a060 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80090ee:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80090f0:	4618      	mov	r0, r3
 80090f2:	3738      	adds	r7, #56	; 0x38
 80090f4:	46bd      	mov	sp, r7
 80090f6:	bd80      	pop	{r7, pc}
 80090f8:	e000ed04 	.word	0xe000ed04

080090fc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b090      	sub	sp, #64	; 0x40
 8009100:	af00      	add	r7, sp, #0
 8009102:	60f8      	str	r0, [r7, #12]
 8009104:	60b9      	str	r1, [r7, #8]
 8009106:	607a      	str	r2, [r7, #4]
 8009108:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800910e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009110:	2b00      	cmp	r3, #0
 8009112:	d10a      	bne.n	800912a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009118:	f383 8811 	msr	BASEPRI, r3
 800911c:	f3bf 8f6f 	isb	sy
 8009120:	f3bf 8f4f 	dsb	sy
 8009124:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009126:	bf00      	nop
 8009128:	e7fe      	b.n	8009128 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800912a:	68bb      	ldr	r3, [r7, #8]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d103      	bne.n	8009138 <xQueueGenericSendFromISR+0x3c>
 8009130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009134:	2b00      	cmp	r3, #0
 8009136:	d101      	bne.n	800913c <xQueueGenericSendFromISR+0x40>
 8009138:	2301      	movs	r3, #1
 800913a:	e000      	b.n	800913e <xQueueGenericSendFromISR+0x42>
 800913c:	2300      	movs	r3, #0
 800913e:	2b00      	cmp	r3, #0
 8009140:	d10a      	bne.n	8009158 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009146:	f383 8811 	msr	BASEPRI, r3
 800914a:	f3bf 8f6f 	isb	sy
 800914e:	f3bf 8f4f 	dsb	sy
 8009152:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009154:	bf00      	nop
 8009156:	e7fe      	b.n	8009156 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009158:	683b      	ldr	r3, [r7, #0]
 800915a:	2b02      	cmp	r3, #2
 800915c:	d103      	bne.n	8009166 <xQueueGenericSendFromISR+0x6a>
 800915e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009162:	2b01      	cmp	r3, #1
 8009164:	d101      	bne.n	800916a <xQueueGenericSendFromISR+0x6e>
 8009166:	2301      	movs	r3, #1
 8009168:	e000      	b.n	800916c <xQueueGenericSendFromISR+0x70>
 800916a:	2300      	movs	r3, #0
 800916c:	2b00      	cmp	r3, #0
 800916e:	d10a      	bne.n	8009186 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009174:	f383 8811 	msr	BASEPRI, r3
 8009178:	f3bf 8f6f 	isb	sy
 800917c:	f3bf 8f4f 	dsb	sy
 8009180:	623b      	str	r3, [r7, #32]
}
 8009182:	bf00      	nop
 8009184:	e7fe      	b.n	8009184 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009186:	f002 fa9f 	bl	800b6c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800918a:	f3ef 8211 	mrs	r2, BASEPRI
 800918e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009192:	f383 8811 	msr	BASEPRI, r3
 8009196:	f3bf 8f6f 	isb	sy
 800919a:	f3bf 8f4f 	dsb	sy
 800919e:	61fa      	str	r2, [r7, #28]
 80091a0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80091a2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80091a4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80091a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80091aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091ae:	429a      	cmp	r2, r3
 80091b0:	d302      	bcc.n	80091b8 <xQueueGenericSendFromISR+0xbc>
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	2b02      	cmp	r3, #2
 80091b6:	d12f      	bne.n	8009218 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80091b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80091be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80091c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091c6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80091c8:	683a      	ldr	r2, [r7, #0]
 80091ca:	68b9      	ldr	r1, [r7, #8]
 80091cc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80091ce:	f000 fb64 	bl	800989a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80091d2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80091d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091da:	d112      	bne.n	8009202 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80091dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d016      	beq.n	8009212 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80091e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091e6:	3324      	adds	r3, #36	; 0x24
 80091e8:	4618      	mov	r0, r3
 80091ea:	f001 f961 	bl	800a4b0 <xTaskRemoveFromEventList>
 80091ee:	4603      	mov	r3, r0
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d00e      	beq.n	8009212 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d00b      	beq.n	8009212 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	2201      	movs	r2, #1
 80091fe:	601a      	str	r2, [r3, #0]
 8009200:	e007      	b.n	8009212 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009202:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009206:	3301      	adds	r3, #1
 8009208:	b2db      	uxtb	r3, r3
 800920a:	b25a      	sxtb	r2, r3
 800920c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800920e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009212:	2301      	movs	r3, #1
 8009214:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8009216:	e001      	b.n	800921c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009218:	2300      	movs	r3, #0
 800921a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800921c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800921e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009220:	697b      	ldr	r3, [r7, #20]
 8009222:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009226:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009228:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800922a:	4618      	mov	r0, r3
 800922c:	3740      	adds	r7, #64	; 0x40
 800922e:	46bd      	mov	sp, r7
 8009230:	bd80      	pop	{r7, pc}

08009232 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009232:	b580      	push	{r7, lr}
 8009234:	b08e      	sub	sp, #56	; 0x38
 8009236:	af00      	add	r7, sp, #0
 8009238:	6078      	str	r0, [r7, #4]
 800923a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8009240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009242:	2b00      	cmp	r3, #0
 8009244:	d10a      	bne.n	800925c <xQueueGiveFromISR+0x2a>
	__asm volatile
 8009246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800924a:	f383 8811 	msr	BASEPRI, r3
 800924e:	f3bf 8f6f 	isb	sy
 8009252:	f3bf 8f4f 	dsb	sy
 8009256:	623b      	str	r3, [r7, #32]
}
 8009258:	bf00      	nop
 800925a:	e7fe      	b.n	800925a <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800925c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800925e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009260:	2b00      	cmp	r3, #0
 8009262:	d00a      	beq.n	800927a <xQueueGiveFromISR+0x48>
	__asm volatile
 8009264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009268:	f383 8811 	msr	BASEPRI, r3
 800926c:	f3bf 8f6f 	isb	sy
 8009270:	f3bf 8f4f 	dsb	sy
 8009274:	61fb      	str	r3, [r7, #28]
}
 8009276:	bf00      	nop
 8009278:	e7fe      	b.n	8009278 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800927a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d103      	bne.n	800928a <xQueueGiveFromISR+0x58>
 8009282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009284:	689b      	ldr	r3, [r3, #8]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d101      	bne.n	800928e <xQueueGiveFromISR+0x5c>
 800928a:	2301      	movs	r3, #1
 800928c:	e000      	b.n	8009290 <xQueueGiveFromISR+0x5e>
 800928e:	2300      	movs	r3, #0
 8009290:	2b00      	cmp	r3, #0
 8009292:	d10a      	bne.n	80092aa <xQueueGiveFromISR+0x78>
	__asm volatile
 8009294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009298:	f383 8811 	msr	BASEPRI, r3
 800929c:	f3bf 8f6f 	isb	sy
 80092a0:	f3bf 8f4f 	dsb	sy
 80092a4:	61bb      	str	r3, [r7, #24]
}
 80092a6:	bf00      	nop
 80092a8:	e7fe      	b.n	80092a8 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80092aa:	f002 fa0d 	bl	800b6c8 <vPortValidateInterruptPriority>
	__asm volatile
 80092ae:	f3ef 8211 	mrs	r2, BASEPRI
 80092b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092b6:	f383 8811 	msr	BASEPRI, r3
 80092ba:	f3bf 8f6f 	isb	sy
 80092be:	f3bf 8f4f 	dsb	sy
 80092c2:	617a      	str	r2, [r7, #20]
 80092c4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80092c6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80092c8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80092ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092ce:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80092d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80092d6:	429a      	cmp	r2, r3
 80092d8:	d22b      	bcs.n	8009332 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80092da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80092e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80092e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092e6:	1c5a      	adds	r2, r3, #1
 80092e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092ea:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80092ec:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80092f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092f4:	d112      	bne.n	800931c <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80092f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d016      	beq.n	800932c <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80092fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009300:	3324      	adds	r3, #36	; 0x24
 8009302:	4618      	mov	r0, r3
 8009304:	f001 f8d4 	bl	800a4b0 <xTaskRemoveFromEventList>
 8009308:	4603      	mov	r3, r0
 800930a:	2b00      	cmp	r3, #0
 800930c:	d00e      	beq.n	800932c <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d00b      	beq.n	800932c <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	2201      	movs	r2, #1
 8009318:	601a      	str	r2, [r3, #0]
 800931a:	e007      	b.n	800932c <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800931c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009320:	3301      	adds	r3, #1
 8009322:	b2db      	uxtb	r3, r3
 8009324:	b25a      	sxtb	r2, r3
 8009326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009328:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800932c:	2301      	movs	r3, #1
 800932e:	637b      	str	r3, [r7, #52]	; 0x34
 8009330:	e001      	b.n	8009336 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009332:	2300      	movs	r3, #0
 8009334:	637b      	str	r3, [r7, #52]	; 0x34
 8009336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009338:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	f383 8811 	msr	BASEPRI, r3
}
 8009340:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009342:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009344:	4618      	mov	r0, r3
 8009346:	3738      	adds	r7, #56	; 0x38
 8009348:	46bd      	mov	sp, r7
 800934a:	bd80      	pop	{r7, pc}

0800934c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b08c      	sub	sp, #48	; 0x30
 8009350:	af00      	add	r7, sp, #0
 8009352:	60f8      	str	r0, [r7, #12]
 8009354:	60b9      	str	r1, [r7, #8]
 8009356:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009358:	2300      	movs	r3, #0
 800935a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009362:	2b00      	cmp	r3, #0
 8009364:	d10a      	bne.n	800937c <xQueueReceive+0x30>
	__asm volatile
 8009366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800936a:	f383 8811 	msr	BASEPRI, r3
 800936e:	f3bf 8f6f 	isb	sy
 8009372:	f3bf 8f4f 	dsb	sy
 8009376:	623b      	str	r3, [r7, #32]
}
 8009378:	bf00      	nop
 800937a:	e7fe      	b.n	800937a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800937c:	68bb      	ldr	r3, [r7, #8]
 800937e:	2b00      	cmp	r3, #0
 8009380:	d103      	bne.n	800938a <xQueueReceive+0x3e>
 8009382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009386:	2b00      	cmp	r3, #0
 8009388:	d101      	bne.n	800938e <xQueueReceive+0x42>
 800938a:	2301      	movs	r3, #1
 800938c:	e000      	b.n	8009390 <xQueueReceive+0x44>
 800938e:	2300      	movs	r3, #0
 8009390:	2b00      	cmp	r3, #0
 8009392:	d10a      	bne.n	80093aa <xQueueReceive+0x5e>
	__asm volatile
 8009394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009398:	f383 8811 	msr	BASEPRI, r3
 800939c:	f3bf 8f6f 	isb	sy
 80093a0:	f3bf 8f4f 	dsb	sy
 80093a4:	61fb      	str	r3, [r7, #28]
}
 80093a6:	bf00      	nop
 80093a8:	e7fe      	b.n	80093a8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80093aa:	f001 fa4f 	bl	800a84c <xTaskGetSchedulerState>
 80093ae:	4603      	mov	r3, r0
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d102      	bne.n	80093ba <xQueueReceive+0x6e>
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d101      	bne.n	80093be <xQueueReceive+0x72>
 80093ba:	2301      	movs	r3, #1
 80093bc:	e000      	b.n	80093c0 <xQueueReceive+0x74>
 80093be:	2300      	movs	r3, #0
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d10a      	bne.n	80093da <xQueueReceive+0x8e>
	__asm volatile
 80093c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093c8:	f383 8811 	msr	BASEPRI, r3
 80093cc:	f3bf 8f6f 	isb	sy
 80093d0:	f3bf 8f4f 	dsb	sy
 80093d4:	61bb      	str	r3, [r7, #24]
}
 80093d6:	bf00      	nop
 80093d8:	e7fe      	b.n	80093d8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80093da:	f002 f893 	bl	800b504 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80093de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093e2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80093e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d01f      	beq.n	800942a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80093ea:	68b9      	ldr	r1, [r7, #8]
 80093ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80093ee:	f000 fabe 	bl	800996e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80093f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093f4:	1e5a      	subs	r2, r3, #1
 80093f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093f8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80093fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093fc:	691b      	ldr	r3, [r3, #16]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d00f      	beq.n	8009422 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009404:	3310      	adds	r3, #16
 8009406:	4618      	mov	r0, r3
 8009408:	f001 f852 	bl	800a4b0 <xTaskRemoveFromEventList>
 800940c:	4603      	mov	r3, r0
 800940e:	2b00      	cmp	r3, #0
 8009410:	d007      	beq.n	8009422 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009412:	4b3d      	ldr	r3, [pc, #244]	; (8009508 <xQueueReceive+0x1bc>)
 8009414:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009418:	601a      	str	r2, [r3, #0]
 800941a:	f3bf 8f4f 	dsb	sy
 800941e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009422:	f002 f89f 	bl	800b564 <vPortExitCritical>
				return pdPASS;
 8009426:	2301      	movs	r3, #1
 8009428:	e069      	b.n	80094fe <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d103      	bne.n	8009438 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009430:	f002 f898 	bl	800b564 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009434:	2300      	movs	r3, #0
 8009436:	e062      	b.n	80094fe <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800943a:	2b00      	cmp	r3, #0
 800943c:	d106      	bne.n	800944c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800943e:	f107 0310 	add.w	r3, r7, #16
 8009442:	4618      	mov	r0, r3
 8009444:	f001 f898 	bl	800a578 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009448:	2301      	movs	r3, #1
 800944a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800944c:	f002 f88a 	bl	800b564 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009450:	f000 fdf8 	bl	800a044 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009454:	f002 f856 	bl	800b504 <vPortEnterCritical>
 8009458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800945a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800945e:	b25b      	sxtb	r3, r3
 8009460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009464:	d103      	bne.n	800946e <xQueueReceive+0x122>
 8009466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009468:	2200      	movs	r2, #0
 800946a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800946e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009470:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009474:	b25b      	sxtb	r3, r3
 8009476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800947a:	d103      	bne.n	8009484 <xQueueReceive+0x138>
 800947c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800947e:	2200      	movs	r2, #0
 8009480:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009484:	f002 f86e 	bl	800b564 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009488:	1d3a      	adds	r2, r7, #4
 800948a:	f107 0310 	add.w	r3, r7, #16
 800948e:	4611      	mov	r1, r2
 8009490:	4618      	mov	r0, r3
 8009492:	f001 f887 	bl	800a5a4 <xTaskCheckForTimeOut>
 8009496:	4603      	mov	r3, r0
 8009498:	2b00      	cmp	r3, #0
 800949a:	d123      	bne.n	80094e4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800949c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800949e:	f000 fade 	bl	8009a5e <prvIsQueueEmpty>
 80094a2:	4603      	mov	r3, r0
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d017      	beq.n	80094d8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80094a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094aa:	3324      	adds	r3, #36	; 0x24
 80094ac:	687a      	ldr	r2, [r7, #4]
 80094ae:	4611      	mov	r1, r2
 80094b0:	4618      	mov	r0, r3
 80094b2:	f000 ffad 	bl	800a410 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80094b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80094b8:	f000 fa7f 	bl	80099ba <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80094bc:	f000 fdd0 	bl	800a060 <xTaskResumeAll>
 80094c0:	4603      	mov	r3, r0
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d189      	bne.n	80093da <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80094c6:	4b10      	ldr	r3, [pc, #64]	; (8009508 <xQueueReceive+0x1bc>)
 80094c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094cc:	601a      	str	r2, [r3, #0]
 80094ce:	f3bf 8f4f 	dsb	sy
 80094d2:	f3bf 8f6f 	isb	sy
 80094d6:	e780      	b.n	80093da <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80094d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80094da:	f000 fa6e 	bl	80099ba <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80094de:	f000 fdbf 	bl	800a060 <xTaskResumeAll>
 80094e2:	e77a      	b.n	80093da <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80094e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80094e6:	f000 fa68 	bl	80099ba <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80094ea:	f000 fdb9 	bl	800a060 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80094ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80094f0:	f000 fab5 	bl	8009a5e <prvIsQueueEmpty>
 80094f4:	4603      	mov	r3, r0
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	f43f af6f 	beq.w	80093da <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80094fc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80094fe:	4618      	mov	r0, r3
 8009500:	3730      	adds	r7, #48	; 0x30
 8009502:	46bd      	mov	sp, r7
 8009504:	bd80      	pop	{r7, pc}
 8009506:	bf00      	nop
 8009508:	e000ed04 	.word	0xe000ed04

0800950c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800950c:	b580      	push	{r7, lr}
 800950e:	b08e      	sub	sp, #56	; 0x38
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
 8009514:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009516:	2300      	movs	r3, #0
 8009518:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800951e:	2300      	movs	r3, #0
 8009520:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009524:	2b00      	cmp	r3, #0
 8009526:	d10a      	bne.n	800953e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8009528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800952c:	f383 8811 	msr	BASEPRI, r3
 8009530:	f3bf 8f6f 	isb	sy
 8009534:	f3bf 8f4f 	dsb	sy
 8009538:	623b      	str	r3, [r7, #32]
}
 800953a:	bf00      	nop
 800953c:	e7fe      	b.n	800953c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800953e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009542:	2b00      	cmp	r3, #0
 8009544:	d00a      	beq.n	800955c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8009546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800954a:	f383 8811 	msr	BASEPRI, r3
 800954e:	f3bf 8f6f 	isb	sy
 8009552:	f3bf 8f4f 	dsb	sy
 8009556:	61fb      	str	r3, [r7, #28]
}
 8009558:	bf00      	nop
 800955a:	e7fe      	b.n	800955a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800955c:	f001 f976 	bl	800a84c <xTaskGetSchedulerState>
 8009560:	4603      	mov	r3, r0
 8009562:	2b00      	cmp	r3, #0
 8009564:	d102      	bne.n	800956c <xQueueSemaphoreTake+0x60>
 8009566:	683b      	ldr	r3, [r7, #0]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d101      	bne.n	8009570 <xQueueSemaphoreTake+0x64>
 800956c:	2301      	movs	r3, #1
 800956e:	e000      	b.n	8009572 <xQueueSemaphoreTake+0x66>
 8009570:	2300      	movs	r3, #0
 8009572:	2b00      	cmp	r3, #0
 8009574:	d10a      	bne.n	800958c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8009576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800957a:	f383 8811 	msr	BASEPRI, r3
 800957e:	f3bf 8f6f 	isb	sy
 8009582:	f3bf 8f4f 	dsb	sy
 8009586:	61bb      	str	r3, [r7, #24]
}
 8009588:	bf00      	nop
 800958a:	e7fe      	b.n	800958a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800958c:	f001 ffba 	bl	800b504 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009594:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009598:	2b00      	cmp	r3, #0
 800959a:	d024      	beq.n	80095e6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800959c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800959e:	1e5a      	subs	r2, r3, #1
 80095a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095a2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80095a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d104      	bne.n	80095b6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80095ac:	f001 fac4 	bl	800ab38 <pvTaskIncrementMutexHeldCount>
 80095b0:	4602      	mov	r2, r0
 80095b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095b4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80095b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095b8:	691b      	ldr	r3, [r3, #16]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d00f      	beq.n	80095de <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80095be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095c0:	3310      	adds	r3, #16
 80095c2:	4618      	mov	r0, r3
 80095c4:	f000 ff74 	bl	800a4b0 <xTaskRemoveFromEventList>
 80095c8:	4603      	mov	r3, r0
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d007      	beq.n	80095de <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80095ce:	4b54      	ldr	r3, [pc, #336]	; (8009720 <xQueueSemaphoreTake+0x214>)
 80095d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095d4:	601a      	str	r2, [r3, #0]
 80095d6:	f3bf 8f4f 	dsb	sy
 80095da:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80095de:	f001 ffc1 	bl	800b564 <vPortExitCritical>
				return pdPASS;
 80095e2:	2301      	movs	r3, #1
 80095e4:	e097      	b.n	8009716 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80095e6:	683b      	ldr	r3, [r7, #0]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d111      	bne.n	8009610 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80095ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d00a      	beq.n	8009608 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80095f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095f6:	f383 8811 	msr	BASEPRI, r3
 80095fa:	f3bf 8f6f 	isb	sy
 80095fe:	f3bf 8f4f 	dsb	sy
 8009602:	617b      	str	r3, [r7, #20]
}
 8009604:	bf00      	nop
 8009606:	e7fe      	b.n	8009606 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009608:	f001 ffac 	bl	800b564 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800960c:	2300      	movs	r3, #0
 800960e:	e082      	b.n	8009716 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009610:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009612:	2b00      	cmp	r3, #0
 8009614:	d106      	bne.n	8009624 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009616:	f107 030c 	add.w	r3, r7, #12
 800961a:	4618      	mov	r0, r3
 800961c:	f000 ffac 	bl	800a578 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009620:	2301      	movs	r3, #1
 8009622:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009624:	f001 ff9e 	bl	800b564 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009628:	f000 fd0c 	bl	800a044 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800962c:	f001 ff6a 	bl	800b504 <vPortEnterCritical>
 8009630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009632:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009636:	b25b      	sxtb	r3, r3
 8009638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800963c:	d103      	bne.n	8009646 <xQueueSemaphoreTake+0x13a>
 800963e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009640:	2200      	movs	r2, #0
 8009642:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009648:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800964c:	b25b      	sxtb	r3, r3
 800964e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009652:	d103      	bne.n	800965c <xQueueSemaphoreTake+0x150>
 8009654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009656:	2200      	movs	r2, #0
 8009658:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800965c:	f001 ff82 	bl	800b564 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009660:	463a      	mov	r2, r7
 8009662:	f107 030c 	add.w	r3, r7, #12
 8009666:	4611      	mov	r1, r2
 8009668:	4618      	mov	r0, r3
 800966a:	f000 ff9b 	bl	800a5a4 <xTaskCheckForTimeOut>
 800966e:	4603      	mov	r3, r0
 8009670:	2b00      	cmp	r3, #0
 8009672:	d132      	bne.n	80096da <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009674:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009676:	f000 f9f2 	bl	8009a5e <prvIsQueueEmpty>
 800967a:	4603      	mov	r3, r0
 800967c:	2b00      	cmp	r3, #0
 800967e:	d026      	beq.n	80096ce <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d109      	bne.n	800969c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8009688:	f001 ff3c 	bl	800b504 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800968c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800968e:	689b      	ldr	r3, [r3, #8]
 8009690:	4618      	mov	r0, r3
 8009692:	f001 f8f9 	bl	800a888 <xTaskPriorityInherit>
 8009696:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8009698:	f001 ff64 	bl	800b564 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800969c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800969e:	3324      	adds	r3, #36	; 0x24
 80096a0:	683a      	ldr	r2, [r7, #0]
 80096a2:	4611      	mov	r1, r2
 80096a4:	4618      	mov	r0, r3
 80096a6:	f000 feb3 	bl	800a410 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80096aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80096ac:	f000 f985 	bl	80099ba <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80096b0:	f000 fcd6 	bl	800a060 <xTaskResumeAll>
 80096b4:	4603      	mov	r3, r0
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	f47f af68 	bne.w	800958c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80096bc:	4b18      	ldr	r3, [pc, #96]	; (8009720 <xQueueSemaphoreTake+0x214>)
 80096be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096c2:	601a      	str	r2, [r3, #0]
 80096c4:	f3bf 8f4f 	dsb	sy
 80096c8:	f3bf 8f6f 	isb	sy
 80096cc:	e75e      	b.n	800958c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80096ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80096d0:	f000 f973 	bl	80099ba <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80096d4:	f000 fcc4 	bl	800a060 <xTaskResumeAll>
 80096d8:	e758      	b.n	800958c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80096da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80096dc:	f000 f96d 	bl	80099ba <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80096e0:	f000 fcbe 	bl	800a060 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80096e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80096e6:	f000 f9ba 	bl	8009a5e <prvIsQueueEmpty>
 80096ea:	4603      	mov	r3, r0
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	f43f af4d 	beq.w	800958c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80096f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d00d      	beq.n	8009714 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80096f8:	f001 ff04 	bl	800b504 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80096fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80096fe:	f000 f8b4 	bl	800986a <prvGetDisinheritPriorityAfterTimeout>
 8009702:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009706:	689b      	ldr	r3, [r3, #8]
 8009708:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800970a:	4618      	mov	r0, r3
 800970c:	f001 f992 	bl	800aa34 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009710:	f001 ff28 	bl	800b564 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009714:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009716:	4618      	mov	r0, r3
 8009718:	3738      	adds	r7, #56	; 0x38
 800971a:	46bd      	mov	sp, r7
 800971c:	bd80      	pop	{r7, pc}
 800971e:	bf00      	nop
 8009720:	e000ed04 	.word	0xe000ed04

08009724 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b08e      	sub	sp, #56	; 0x38
 8009728:	af00      	add	r7, sp, #0
 800972a:	60f8      	str	r0, [r7, #12]
 800972c:	60b9      	str	r1, [r7, #8]
 800972e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009736:	2b00      	cmp	r3, #0
 8009738:	d10a      	bne.n	8009750 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800973a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800973e:	f383 8811 	msr	BASEPRI, r3
 8009742:	f3bf 8f6f 	isb	sy
 8009746:	f3bf 8f4f 	dsb	sy
 800974a:	623b      	str	r3, [r7, #32]
}
 800974c:	bf00      	nop
 800974e:	e7fe      	b.n	800974e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009750:	68bb      	ldr	r3, [r7, #8]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d103      	bne.n	800975e <xQueueReceiveFromISR+0x3a>
 8009756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800975a:	2b00      	cmp	r3, #0
 800975c:	d101      	bne.n	8009762 <xQueueReceiveFromISR+0x3e>
 800975e:	2301      	movs	r3, #1
 8009760:	e000      	b.n	8009764 <xQueueReceiveFromISR+0x40>
 8009762:	2300      	movs	r3, #0
 8009764:	2b00      	cmp	r3, #0
 8009766:	d10a      	bne.n	800977e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8009768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800976c:	f383 8811 	msr	BASEPRI, r3
 8009770:	f3bf 8f6f 	isb	sy
 8009774:	f3bf 8f4f 	dsb	sy
 8009778:	61fb      	str	r3, [r7, #28]
}
 800977a:	bf00      	nop
 800977c:	e7fe      	b.n	800977c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800977e:	f001 ffa3 	bl	800b6c8 <vPortValidateInterruptPriority>
	__asm volatile
 8009782:	f3ef 8211 	mrs	r2, BASEPRI
 8009786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800978a:	f383 8811 	msr	BASEPRI, r3
 800978e:	f3bf 8f6f 	isb	sy
 8009792:	f3bf 8f4f 	dsb	sy
 8009796:	61ba      	str	r2, [r7, #24]
 8009798:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800979a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800979c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800979e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097a2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80097a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d02f      	beq.n	800980a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80097aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80097b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80097b4:	68b9      	ldr	r1, [r7, #8]
 80097b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80097b8:	f000 f8d9 	bl	800996e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80097bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097be:	1e5a      	subs	r2, r3, #1
 80097c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097c2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80097c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80097c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097cc:	d112      	bne.n	80097f4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80097ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097d0:	691b      	ldr	r3, [r3, #16]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d016      	beq.n	8009804 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80097d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097d8:	3310      	adds	r3, #16
 80097da:	4618      	mov	r0, r3
 80097dc:	f000 fe68 	bl	800a4b0 <xTaskRemoveFromEventList>
 80097e0:	4603      	mov	r3, r0
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d00e      	beq.n	8009804 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d00b      	beq.n	8009804 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2201      	movs	r2, #1
 80097f0:	601a      	str	r2, [r3, #0]
 80097f2:	e007      	b.n	8009804 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80097f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80097f8:	3301      	adds	r3, #1
 80097fa:	b2db      	uxtb	r3, r3
 80097fc:	b25a      	sxtb	r2, r3
 80097fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009800:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8009804:	2301      	movs	r3, #1
 8009806:	637b      	str	r3, [r7, #52]	; 0x34
 8009808:	e001      	b.n	800980e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800980a:	2300      	movs	r3, #0
 800980c:	637b      	str	r3, [r7, #52]	; 0x34
 800980e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009810:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009812:	693b      	ldr	r3, [r7, #16]
 8009814:	f383 8811 	msr	BASEPRI, r3
}
 8009818:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800981a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800981c:	4618      	mov	r0, r3
 800981e:	3738      	adds	r7, #56	; 0x38
 8009820:	46bd      	mov	sp, r7
 8009822:	bd80      	pop	{r7, pc}

08009824 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8009824:	b580      	push	{r7, lr}
 8009826:	b084      	sub	sp, #16
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d10a      	bne.n	800984c <vQueueDelete+0x28>
	__asm volatile
 8009836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800983a:	f383 8811 	msr	BASEPRI, r3
 800983e:	f3bf 8f6f 	isb	sy
 8009842:	f3bf 8f4f 	dsb	sy
 8009846:	60bb      	str	r3, [r7, #8]
}
 8009848:	bf00      	nop
 800984a:	e7fe      	b.n	800984a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800984c:	68f8      	ldr	r0, [r7, #12]
 800984e:	f000 f95f 	bl	8009b10 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8009858:	2b00      	cmp	r3, #0
 800985a:	d102      	bne.n	8009862 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800985c:	68f8      	ldr	r0, [r7, #12]
 800985e:	f002 f83f 	bl	800b8e0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8009862:	bf00      	nop
 8009864:	3710      	adds	r7, #16
 8009866:	46bd      	mov	sp, r7
 8009868:	bd80      	pop	{r7, pc}

0800986a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800986a:	b480      	push	{r7}
 800986c:	b085      	sub	sp, #20
 800986e:	af00      	add	r7, sp, #0
 8009870:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009876:	2b00      	cmp	r3, #0
 8009878:	d006      	beq.n	8009888 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8009884:	60fb      	str	r3, [r7, #12]
 8009886:	e001      	b.n	800988c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009888:	2300      	movs	r3, #0
 800988a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800988c:	68fb      	ldr	r3, [r7, #12]
	}
 800988e:	4618      	mov	r0, r3
 8009890:	3714      	adds	r7, #20
 8009892:	46bd      	mov	sp, r7
 8009894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009898:	4770      	bx	lr

0800989a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800989a:	b580      	push	{r7, lr}
 800989c:	b086      	sub	sp, #24
 800989e:	af00      	add	r7, sp, #0
 80098a0:	60f8      	str	r0, [r7, #12]
 80098a2:	60b9      	str	r1, [r7, #8]
 80098a4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80098a6:	2300      	movs	r3, #0
 80098a8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098ae:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d10d      	bne.n	80098d4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d14d      	bne.n	800995c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	689b      	ldr	r3, [r3, #8]
 80098c4:	4618      	mov	r0, r3
 80098c6:	f001 f847 	bl	800a958 <xTaskPriorityDisinherit>
 80098ca:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	2200      	movs	r2, #0
 80098d0:	609a      	str	r2, [r3, #8]
 80098d2:	e043      	b.n	800995c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d119      	bne.n	800990e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	6858      	ldr	r0, [r3, #4]
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098e2:	461a      	mov	r2, r3
 80098e4:	68b9      	ldr	r1, [r7, #8]
 80098e6:	f00f f8c3 	bl	8018a70 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	685a      	ldr	r2, [r3, #4]
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098f2:	441a      	add	r2, r3
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	685a      	ldr	r2, [r3, #4]
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	689b      	ldr	r3, [r3, #8]
 8009900:	429a      	cmp	r2, r3
 8009902:	d32b      	bcc.n	800995c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	681a      	ldr	r2, [r3, #0]
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	605a      	str	r2, [r3, #4]
 800990c:	e026      	b.n	800995c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	68d8      	ldr	r0, [r3, #12]
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009916:	461a      	mov	r2, r3
 8009918:	68b9      	ldr	r1, [r7, #8]
 800991a:	f00f f8a9 	bl	8018a70 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	68da      	ldr	r2, [r3, #12]
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009926:	425b      	negs	r3, r3
 8009928:	441a      	add	r2, r3
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	68da      	ldr	r2, [r3, #12]
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	429a      	cmp	r2, r3
 8009938:	d207      	bcs.n	800994a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	689a      	ldr	r2, [r3, #8]
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009942:	425b      	negs	r3, r3
 8009944:	441a      	add	r2, r3
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	2b02      	cmp	r3, #2
 800994e:	d105      	bne.n	800995c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009950:	693b      	ldr	r3, [r7, #16]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d002      	beq.n	800995c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009956:	693b      	ldr	r3, [r7, #16]
 8009958:	3b01      	subs	r3, #1
 800995a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800995c:	693b      	ldr	r3, [r7, #16]
 800995e:	1c5a      	adds	r2, r3, #1
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009964:	697b      	ldr	r3, [r7, #20]
}
 8009966:	4618      	mov	r0, r3
 8009968:	3718      	adds	r7, #24
 800996a:	46bd      	mov	sp, r7
 800996c:	bd80      	pop	{r7, pc}

0800996e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800996e:	b580      	push	{r7, lr}
 8009970:	b082      	sub	sp, #8
 8009972:	af00      	add	r7, sp, #0
 8009974:	6078      	str	r0, [r7, #4]
 8009976:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800997c:	2b00      	cmp	r3, #0
 800997e:	d018      	beq.n	80099b2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	68da      	ldr	r2, [r3, #12]
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009988:	441a      	add	r2, r3
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	68da      	ldr	r2, [r3, #12]
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	689b      	ldr	r3, [r3, #8]
 8009996:	429a      	cmp	r2, r3
 8009998:	d303      	bcc.n	80099a2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681a      	ldr	r2, [r3, #0]
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	68d9      	ldr	r1, [r3, #12]
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099aa:	461a      	mov	r2, r3
 80099ac:	6838      	ldr	r0, [r7, #0]
 80099ae:	f00f f85f 	bl	8018a70 <memcpy>
	}
}
 80099b2:	bf00      	nop
 80099b4:	3708      	adds	r7, #8
 80099b6:	46bd      	mov	sp, r7
 80099b8:	bd80      	pop	{r7, pc}

080099ba <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80099ba:	b580      	push	{r7, lr}
 80099bc:	b084      	sub	sp, #16
 80099be:	af00      	add	r7, sp, #0
 80099c0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80099c2:	f001 fd9f 	bl	800b504 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80099cc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80099ce:	e011      	b.n	80099f4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d012      	beq.n	80099fe <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	3324      	adds	r3, #36	; 0x24
 80099dc:	4618      	mov	r0, r3
 80099de:	f000 fd67 	bl	800a4b0 <xTaskRemoveFromEventList>
 80099e2:	4603      	mov	r3, r0
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d001      	beq.n	80099ec <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80099e8:	f000 fe3e 	bl	800a668 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80099ec:	7bfb      	ldrb	r3, [r7, #15]
 80099ee:	3b01      	subs	r3, #1
 80099f0:	b2db      	uxtb	r3, r3
 80099f2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80099f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	dce9      	bgt.n	80099d0 <prvUnlockQueue+0x16>
 80099fc:	e000      	b.n	8009a00 <prvUnlockQueue+0x46>
					break;
 80099fe:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	22ff      	movs	r2, #255	; 0xff
 8009a04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009a08:	f001 fdac 	bl	800b564 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009a0c:	f001 fd7a 	bl	800b504 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009a16:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009a18:	e011      	b.n	8009a3e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	691b      	ldr	r3, [r3, #16]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d012      	beq.n	8009a48 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	3310      	adds	r3, #16
 8009a26:	4618      	mov	r0, r3
 8009a28:	f000 fd42 	bl	800a4b0 <xTaskRemoveFromEventList>
 8009a2c:	4603      	mov	r3, r0
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d001      	beq.n	8009a36 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009a32:	f000 fe19 	bl	800a668 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009a36:	7bbb      	ldrb	r3, [r7, #14]
 8009a38:	3b01      	subs	r3, #1
 8009a3a:	b2db      	uxtb	r3, r3
 8009a3c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009a3e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	dce9      	bgt.n	8009a1a <prvUnlockQueue+0x60>
 8009a46:	e000      	b.n	8009a4a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009a48:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	22ff      	movs	r2, #255	; 0xff
 8009a4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009a52:	f001 fd87 	bl	800b564 <vPortExitCritical>
}
 8009a56:	bf00      	nop
 8009a58:	3710      	adds	r7, #16
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	bd80      	pop	{r7, pc}

08009a5e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009a5e:	b580      	push	{r7, lr}
 8009a60:	b084      	sub	sp, #16
 8009a62:	af00      	add	r7, sp, #0
 8009a64:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009a66:	f001 fd4d 	bl	800b504 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d102      	bne.n	8009a78 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009a72:	2301      	movs	r3, #1
 8009a74:	60fb      	str	r3, [r7, #12]
 8009a76:	e001      	b.n	8009a7c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009a78:	2300      	movs	r3, #0
 8009a7a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009a7c:	f001 fd72 	bl	800b564 <vPortExitCritical>

	return xReturn;
 8009a80:	68fb      	ldr	r3, [r7, #12]
}
 8009a82:	4618      	mov	r0, r3
 8009a84:	3710      	adds	r7, #16
 8009a86:	46bd      	mov	sp, r7
 8009a88:	bd80      	pop	{r7, pc}

08009a8a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009a8a:	b580      	push	{r7, lr}
 8009a8c:	b084      	sub	sp, #16
 8009a8e:	af00      	add	r7, sp, #0
 8009a90:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009a92:	f001 fd37 	bl	800b504 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a9e:	429a      	cmp	r2, r3
 8009aa0:	d102      	bne.n	8009aa8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009aa2:	2301      	movs	r3, #1
 8009aa4:	60fb      	str	r3, [r7, #12]
 8009aa6:	e001      	b.n	8009aac <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009aac:	f001 fd5a 	bl	800b564 <vPortExitCritical>

	return xReturn;
 8009ab0:	68fb      	ldr	r3, [r7, #12]
}
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	3710      	adds	r7, #16
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	bd80      	pop	{r7, pc}
	...

08009abc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009abc:	b480      	push	{r7}
 8009abe:	b085      	sub	sp, #20
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
 8009ac4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	60fb      	str	r3, [r7, #12]
 8009aca:	e014      	b.n	8009af6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009acc:	4a0f      	ldr	r2, [pc, #60]	; (8009b0c <vQueueAddToRegistry+0x50>)
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d10b      	bne.n	8009af0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009ad8:	490c      	ldr	r1, [pc, #48]	; (8009b0c <vQueueAddToRegistry+0x50>)
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	683a      	ldr	r2, [r7, #0]
 8009ade:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009ae2:	4a0a      	ldr	r2, [pc, #40]	; (8009b0c <vQueueAddToRegistry+0x50>)
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	00db      	lsls	r3, r3, #3
 8009ae8:	4413      	add	r3, r2
 8009aea:	687a      	ldr	r2, [r7, #4]
 8009aec:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009aee:	e006      	b.n	8009afe <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	3301      	adds	r3, #1
 8009af4:	60fb      	str	r3, [r7, #12]
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	2b07      	cmp	r3, #7
 8009afa:	d9e7      	bls.n	8009acc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009afc:	bf00      	nop
 8009afe:	bf00      	nop
 8009b00:	3714      	adds	r7, #20
 8009b02:	46bd      	mov	sp, r7
 8009b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b08:	4770      	bx	lr
 8009b0a:	bf00      	nop
 8009b0c:	200054c8 	.word	0x200054c8

08009b10 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8009b10:	b480      	push	{r7}
 8009b12:	b085      	sub	sp, #20
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009b18:	2300      	movs	r3, #0
 8009b1a:	60fb      	str	r3, [r7, #12]
 8009b1c:	e016      	b.n	8009b4c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8009b1e:	4a10      	ldr	r2, [pc, #64]	; (8009b60 <vQueueUnregisterQueue+0x50>)
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	00db      	lsls	r3, r3, #3
 8009b24:	4413      	add	r3, r2
 8009b26:	685b      	ldr	r3, [r3, #4]
 8009b28:	687a      	ldr	r2, [r7, #4]
 8009b2a:	429a      	cmp	r2, r3
 8009b2c:	d10b      	bne.n	8009b46 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8009b2e:	4a0c      	ldr	r2, [pc, #48]	; (8009b60 <vQueueUnregisterQueue+0x50>)
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	2100      	movs	r1, #0
 8009b34:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8009b38:	4a09      	ldr	r2, [pc, #36]	; (8009b60 <vQueueUnregisterQueue+0x50>)
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	00db      	lsls	r3, r3, #3
 8009b3e:	4413      	add	r3, r2
 8009b40:	2200      	movs	r2, #0
 8009b42:	605a      	str	r2, [r3, #4]
				break;
 8009b44:	e006      	b.n	8009b54 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	3301      	adds	r3, #1
 8009b4a:	60fb      	str	r3, [r7, #12]
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	2b07      	cmp	r3, #7
 8009b50:	d9e5      	bls.n	8009b1e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8009b52:	bf00      	nop
 8009b54:	bf00      	nop
 8009b56:	3714      	adds	r7, #20
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5e:	4770      	bx	lr
 8009b60:	200054c8 	.word	0x200054c8

08009b64 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b086      	sub	sp, #24
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	60f8      	str	r0, [r7, #12]
 8009b6c:	60b9      	str	r1, [r7, #8]
 8009b6e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009b74:	f001 fcc6 	bl	800b504 <vPortEnterCritical>
 8009b78:	697b      	ldr	r3, [r7, #20]
 8009b7a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009b7e:	b25b      	sxtb	r3, r3
 8009b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b84:	d103      	bne.n	8009b8e <vQueueWaitForMessageRestricted+0x2a>
 8009b86:	697b      	ldr	r3, [r7, #20]
 8009b88:	2200      	movs	r2, #0
 8009b8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009b8e:	697b      	ldr	r3, [r7, #20]
 8009b90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009b94:	b25b      	sxtb	r3, r3
 8009b96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b9a:	d103      	bne.n	8009ba4 <vQueueWaitForMessageRestricted+0x40>
 8009b9c:	697b      	ldr	r3, [r7, #20]
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009ba4:	f001 fcde 	bl	800b564 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009ba8:	697b      	ldr	r3, [r7, #20]
 8009baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d106      	bne.n	8009bbe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009bb0:	697b      	ldr	r3, [r7, #20]
 8009bb2:	3324      	adds	r3, #36	; 0x24
 8009bb4:	687a      	ldr	r2, [r7, #4]
 8009bb6:	68b9      	ldr	r1, [r7, #8]
 8009bb8:	4618      	mov	r0, r3
 8009bba:	f000 fc4d 	bl	800a458 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009bbe:	6978      	ldr	r0, [r7, #20]
 8009bc0:	f7ff fefb 	bl	80099ba <prvUnlockQueue>
	}
 8009bc4:	bf00      	nop
 8009bc6:	3718      	adds	r7, #24
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	bd80      	pop	{r7, pc}

08009bcc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b08e      	sub	sp, #56	; 0x38
 8009bd0:	af04      	add	r7, sp, #16
 8009bd2:	60f8      	str	r0, [r7, #12]
 8009bd4:	60b9      	str	r1, [r7, #8]
 8009bd6:	607a      	str	r2, [r7, #4]
 8009bd8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009bda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d10a      	bne.n	8009bf6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8009be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009be4:	f383 8811 	msr	BASEPRI, r3
 8009be8:	f3bf 8f6f 	isb	sy
 8009bec:	f3bf 8f4f 	dsb	sy
 8009bf0:	623b      	str	r3, [r7, #32]
}
 8009bf2:	bf00      	nop
 8009bf4:	e7fe      	b.n	8009bf4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d10a      	bne.n	8009c12 <xTaskCreateStatic+0x46>
	__asm volatile
 8009bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c00:	f383 8811 	msr	BASEPRI, r3
 8009c04:	f3bf 8f6f 	isb	sy
 8009c08:	f3bf 8f4f 	dsb	sy
 8009c0c:	61fb      	str	r3, [r7, #28]
}
 8009c0e:	bf00      	nop
 8009c10:	e7fe      	b.n	8009c10 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009c12:	235c      	movs	r3, #92	; 0x5c
 8009c14:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009c16:	693b      	ldr	r3, [r7, #16]
 8009c18:	2b5c      	cmp	r3, #92	; 0x5c
 8009c1a:	d00a      	beq.n	8009c32 <xTaskCreateStatic+0x66>
	__asm volatile
 8009c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c20:	f383 8811 	msr	BASEPRI, r3
 8009c24:	f3bf 8f6f 	isb	sy
 8009c28:	f3bf 8f4f 	dsb	sy
 8009c2c:	61bb      	str	r3, [r7, #24]
}
 8009c2e:	bf00      	nop
 8009c30:	e7fe      	b.n	8009c30 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009c32:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d01e      	beq.n	8009c78 <xTaskCreateStatic+0xac>
 8009c3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d01b      	beq.n	8009c78 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c42:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009c48:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c4c:	2202      	movs	r2, #2
 8009c4e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009c52:	2300      	movs	r3, #0
 8009c54:	9303      	str	r3, [sp, #12]
 8009c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c58:	9302      	str	r3, [sp, #8]
 8009c5a:	f107 0314 	add.w	r3, r7, #20
 8009c5e:	9301      	str	r3, [sp, #4]
 8009c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c62:	9300      	str	r3, [sp, #0]
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	687a      	ldr	r2, [r7, #4]
 8009c68:	68b9      	ldr	r1, [r7, #8]
 8009c6a:	68f8      	ldr	r0, [r7, #12]
 8009c6c:	f000 f850 	bl	8009d10 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009c70:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009c72:	f000 f8dd 	bl	8009e30 <prvAddNewTaskToReadyList>
 8009c76:	e001      	b.n	8009c7c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009c78:	2300      	movs	r3, #0
 8009c7a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009c7c:	697b      	ldr	r3, [r7, #20]
	}
 8009c7e:	4618      	mov	r0, r3
 8009c80:	3728      	adds	r7, #40	; 0x28
 8009c82:	46bd      	mov	sp, r7
 8009c84:	bd80      	pop	{r7, pc}

08009c86 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009c86:	b580      	push	{r7, lr}
 8009c88:	b08c      	sub	sp, #48	; 0x30
 8009c8a:	af04      	add	r7, sp, #16
 8009c8c:	60f8      	str	r0, [r7, #12]
 8009c8e:	60b9      	str	r1, [r7, #8]
 8009c90:	603b      	str	r3, [r7, #0]
 8009c92:	4613      	mov	r3, r2
 8009c94:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009c96:	88fb      	ldrh	r3, [r7, #6]
 8009c98:	009b      	lsls	r3, r3, #2
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	f001 fd54 	bl	800b748 <pvPortMalloc>
 8009ca0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009ca2:	697b      	ldr	r3, [r7, #20]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d00e      	beq.n	8009cc6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009ca8:	205c      	movs	r0, #92	; 0x5c
 8009caa:	f001 fd4d 	bl	800b748 <pvPortMalloc>
 8009cae:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009cb0:	69fb      	ldr	r3, [r7, #28]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d003      	beq.n	8009cbe <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009cb6:	69fb      	ldr	r3, [r7, #28]
 8009cb8:	697a      	ldr	r2, [r7, #20]
 8009cba:	631a      	str	r2, [r3, #48]	; 0x30
 8009cbc:	e005      	b.n	8009cca <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009cbe:	6978      	ldr	r0, [r7, #20]
 8009cc0:	f001 fe0e 	bl	800b8e0 <vPortFree>
 8009cc4:	e001      	b.n	8009cca <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009cca:	69fb      	ldr	r3, [r7, #28]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d017      	beq.n	8009d00 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009cd0:	69fb      	ldr	r3, [r7, #28]
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009cd8:	88fa      	ldrh	r2, [r7, #6]
 8009cda:	2300      	movs	r3, #0
 8009cdc:	9303      	str	r3, [sp, #12]
 8009cde:	69fb      	ldr	r3, [r7, #28]
 8009ce0:	9302      	str	r3, [sp, #8]
 8009ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ce4:	9301      	str	r3, [sp, #4]
 8009ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ce8:	9300      	str	r3, [sp, #0]
 8009cea:	683b      	ldr	r3, [r7, #0]
 8009cec:	68b9      	ldr	r1, [r7, #8]
 8009cee:	68f8      	ldr	r0, [r7, #12]
 8009cf0:	f000 f80e 	bl	8009d10 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009cf4:	69f8      	ldr	r0, [r7, #28]
 8009cf6:	f000 f89b 	bl	8009e30 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009cfa:	2301      	movs	r3, #1
 8009cfc:	61bb      	str	r3, [r7, #24]
 8009cfe:	e002      	b.n	8009d06 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009d00:	f04f 33ff 	mov.w	r3, #4294967295
 8009d04:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009d06:	69bb      	ldr	r3, [r7, #24]
	}
 8009d08:	4618      	mov	r0, r3
 8009d0a:	3720      	adds	r7, #32
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	bd80      	pop	{r7, pc}

08009d10 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b088      	sub	sp, #32
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	60f8      	str	r0, [r7, #12]
 8009d18:	60b9      	str	r1, [r7, #8]
 8009d1a:	607a      	str	r2, [r7, #4]
 8009d1c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d20:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	009b      	lsls	r3, r3, #2
 8009d26:	461a      	mov	r2, r3
 8009d28:	21a5      	movs	r1, #165	; 0xa5
 8009d2a:	f00e feaf 	bl	8018a8c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009d38:	3b01      	subs	r3, #1
 8009d3a:	009b      	lsls	r3, r3, #2
 8009d3c:	4413      	add	r3, r2
 8009d3e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009d40:	69bb      	ldr	r3, [r7, #24]
 8009d42:	f023 0307 	bic.w	r3, r3, #7
 8009d46:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009d48:	69bb      	ldr	r3, [r7, #24]
 8009d4a:	f003 0307 	and.w	r3, r3, #7
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d00a      	beq.n	8009d68 <prvInitialiseNewTask+0x58>
	__asm volatile
 8009d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d56:	f383 8811 	msr	BASEPRI, r3
 8009d5a:	f3bf 8f6f 	isb	sy
 8009d5e:	f3bf 8f4f 	dsb	sy
 8009d62:	617b      	str	r3, [r7, #20]
}
 8009d64:	bf00      	nop
 8009d66:	e7fe      	b.n	8009d66 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009d68:	68bb      	ldr	r3, [r7, #8]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d01f      	beq.n	8009dae <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009d6e:	2300      	movs	r3, #0
 8009d70:	61fb      	str	r3, [r7, #28]
 8009d72:	e012      	b.n	8009d9a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009d74:	68ba      	ldr	r2, [r7, #8]
 8009d76:	69fb      	ldr	r3, [r7, #28]
 8009d78:	4413      	add	r3, r2
 8009d7a:	7819      	ldrb	r1, [r3, #0]
 8009d7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d7e:	69fb      	ldr	r3, [r7, #28]
 8009d80:	4413      	add	r3, r2
 8009d82:	3334      	adds	r3, #52	; 0x34
 8009d84:	460a      	mov	r2, r1
 8009d86:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009d88:	68ba      	ldr	r2, [r7, #8]
 8009d8a:	69fb      	ldr	r3, [r7, #28]
 8009d8c:	4413      	add	r3, r2
 8009d8e:	781b      	ldrb	r3, [r3, #0]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d006      	beq.n	8009da2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009d94:	69fb      	ldr	r3, [r7, #28]
 8009d96:	3301      	adds	r3, #1
 8009d98:	61fb      	str	r3, [r7, #28]
 8009d9a:	69fb      	ldr	r3, [r7, #28]
 8009d9c:	2b0f      	cmp	r3, #15
 8009d9e:	d9e9      	bls.n	8009d74 <prvInitialiseNewTask+0x64>
 8009da0:	e000      	b.n	8009da4 <prvInitialiseNewTask+0x94>
			{
				break;
 8009da2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009da6:	2200      	movs	r2, #0
 8009da8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009dac:	e003      	b.n	8009db6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009db0:	2200      	movs	r2, #0
 8009db2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009db8:	2b37      	cmp	r3, #55	; 0x37
 8009dba:	d901      	bls.n	8009dc0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009dbc:	2337      	movs	r3, #55	; 0x37
 8009dbe:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009dc4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009dca:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dce:	2200      	movs	r2, #0
 8009dd0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dd4:	3304      	adds	r3, #4
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	f7fe fda0 	bl	800891c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dde:	3318      	adds	r3, #24
 8009de0:	4618      	mov	r0, r3
 8009de2:	f7fe fd9b 	bl	800891c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009de8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009dea:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dee:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009df4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009df8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009dfa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dfe:	2200      	movs	r2, #0
 8009e00:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e04:	2200      	movs	r2, #0
 8009e06:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009e0a:	683a      	ldr	r2, [r7, #0]
 8009e0c:	68f9      	ldr	r1, [r7, #12]
 8009e0e:	69b8      	ldr	r0, [r7, #24]
 8009e10:	f001 fa48 	bl	800b2a4 <pxPortInitialiseStack>
 8009e14:	4602      	mov	r2, r0
 8009e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e18:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d002      	beq.n	8009e26 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009e26:	bf00      	nop
 8009e28:	3720      	adds	r7, #32
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	bd80      	pop	{r7, pc}
	...

08009e30 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009e30:	b580      	push	{r7, lr}
 8009e32:	b082      	sub	sp, #8
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009e38:	f001 fb64 	bl	800b504 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009e3c:	4b2d      	ldr	r3, [pc, #180]	; (8009ef4 <prvAddNewTaskToReadyList+0xc4>)
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	3301      	adds	r3, #1
 8009e42:	4a2c      	ldr	r2, [pc, #176]	; (8009ef4 <prvAddNewTaskToReadyList+0xc4>)
 8009e44:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009e46:	4b2c      	ldr	r3, [pc, #176]	; (8009ef8 <prvAddNewTaskToReadyList+0xc8>)
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d109      	bne.n	8009e62 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009e4e:	4a2a      	ldr	r2, [pc, #168]	; (8009ef8 <prvAddNewTaskToReadyList+0xc8>)
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009e54:	4b27      	ldr	r3, [pc, #156]	; (8009ef4 <prvAddNewTaskToReadyList+0xc4>)
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	2b01      	cmp	r3, #1
 8009e5a:	d110      	bne.n	8009e7e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009e5c:	f000 fc28 	bl	800a6b0 <prvInitialiseTaskLists>
 8009e60:	e00d      	b.n	8009e7e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009e62:	4b26      	ldr	r3, [pc, #152]	; (8009efc <prvAddNewTaskToReadyList+0xcc>)
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d109      	bne.n	8009e7e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009e6a:	4b23      	ldr	r3, [pc, #140]	; (8009ef8 <prvAddNewTaskToReadyList+0xc8>)
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e74:	429a      	cmp	r2, r3
 8009e76:	d802      	bhi.n	8009e7e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009e78:	4a1f      	ldr	r2, [pc, #124]	; (8009ef8 <prvAddNewTaskToReadyList+0xc8>)
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009e7e:	4b20      	ldr	r3, [pc, #128]	; (8009f00 <prvAddNewTaskToReadyList+0xd0>)
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	3301      	adds	r3, #1
 8009e84:	4a1e      	ldr	r2, [pc, #120]	; (8009f00 <prvAddNewTaskToReadyList+0xd0>)
 8009e86:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009e88:	4b1d      	ldr	r3, [pc, #116]	; (8009f00 <prvAddNewTaskToReadyList+0xd0>)
 8009e8a:	681a      	ldr	r2, [r3, #0]
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e94:	4b1b      	ldr	r3, [pc, #108]	; (8009f04 <prvAddNewTaskToReadyList+0xd4>)
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	429a      	cmp	r2, r3
 8009e9a:	d903      	bls.n	8009ea4 <prvAddNewTaskToReadyList+0x74>
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ea0:	4a18      	ldr	r2, [pc, #96]	; (8009f04 <prvAddNewTaskToReadyList+0xd4>)
 8009ea2:	6013      	str	r3, [r2, #0]
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ea8:	4613      	mov	r3, r2
 8009eaa:	009b      	lsls	r3, r3, #2
 8009eac:	4413      	add	r3, r2
 8009eae:	009b      	lsls	r3, r3, #2
 8009eb0:	4a15      	ldr	r2, [pc, #84]	; (8009f08 <prvAddNewTaskToReadyList+0xd8>)
 8009eb2:	441a      	add	r2, r3
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	3304      	adds	r3, #4
 8009eb8:	4619      	mov	r1, r3
 8009eba:	4610      	mov	r0, r2
 8009ebc:	f7fe fd3b 	bl	8008936 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009ec0:	f001 fb50 	bl	800b564 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009ec4:	4b0d      	ldr	r3, [pc, #52]	; (8009efc <prvAddNewTaskToReadyList+0xcc>)
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d00e      	beq.n	8009eea <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009ecc:	4b0a      	ldr	r3, [pc, #40]	; (8009ef8 <prvAddNewTaskToReadyList+0xc8>)
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ed6:	429a      	cmp	r2, r3
 8009ed8:	d207      	bcs.n	8009eea <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009eda:	4b0c      	ldr	r3, [pc, #48]	; (8009f0c <prvAddNewTaskToReadyList+0xdc>)
 8009edc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ee0:	601a      	str	r2, [r3, #0]
 8009ee2:	f3bf 8f4f 	dsb	sy
 8009ee6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009eea:	bf00      	nop
 8009eec:	3708      	adds	r7, #8
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	bd80      	pop	{r7, pc}
 8009ef2:	bf00      	nop
 8009ef4:	200059dc 	.word	0x200059dc
 8009ef8:	20005508 	.word	0x20005508
 8009efc:	200059e8 	.word	0x200059e8
 8009f00:	200059f8 	.word	0x200059f8
 8009f04:	200059e4 	.word	0x200059e4
 8009f08:	2000550c 	.word	0x2000550c
 8009f0c:	e000ed04 	.word	0xe000ed04

08009f10 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b084      	sub	sp, #16
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009f18:	2300      	movs	r3, #0
 8009f1a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d017      	beq.n	8009f52 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009f22:	4b13      	ldr	r3, [pc, #76]	; (8009f70 <vTaskDelay+0x60>)
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d00a      	beq.n	8009f40 <vTaskDelay+0x30>
	__asm volatile
 8009f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f2e:	f383 8811 	msr	BASEPRI, r3
 8009f32:	f3bf 8f6f 	isb	sy
 8009f36:	f3bf 8f4f 	dsb	sy
 8009f3a:	60bb      	str	r3, [r7, #8]
}
 8009f3c:	bf00      	nop
 8009f3e:	e7fe      	b.n	8009f3e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009f40:	f000 f880 	bl	800a044 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009f44:	2100      	movs	r1, #0
 8009f46:	6878      	ldr	r0, [r7, #4]
 8009f48:	f000 fe0a 	bl	800ab60 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009f4c:	f000 f888 	bl	800a060 <xTaskResumeAll>
 8009f50:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d107      	bne.n	8009f68 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009f58:	4b06      	ldr	r3, [pc, #24]	; (8009f74 <vTaskDelay+0x64>)
 8009f5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f5e:	601a      	str	r2, [r3, #0]
 8009f60:	f3bf 8f4f 	dsb	sy
 8009f64:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009f68:	bf00      	nop
 8009f6a:	3710      	adds	r7, #16
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	bd80      	pop	{r7, pc}
 8009f70:	20005a04 	.word	0x20005a04
 8009f74:	e000ed04 	.word	0xe000ed04

08009f78 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b08a      	sub	sp, #40	; 0x28
 8009f7c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009f7e:	2300      	movs	r3, #0
 8009f80:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009f82:	2300      	movs	r3, #0
 8009f84:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009f86:	463a      	mov	r2, r7
 8009f88:	1d39      	adds	r1, r7, #4
 8009f8a:	f107 0308 	add.w	r3, r7, #8
 8009f8e:	4618      	mov	r0, r3
 8009f90:	f7fe fc70 	bl	8008874 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009f94:	6839      	ldr	r1, [r7, #0]
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	68ba      	ldr	r2, [r7, #8]
 8009f9a:	9202      	str	r2, [sp, #8]
 8009f9c:	9301      	str	r3, [sp, #4]
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	9300      	str	r3, [sp, #0]
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	460a      	mov	r2, r1
 8009fa6:	4921      	ldr	r1, [pc, #132]	; (800a02c <vTaskStartScheduler+0xb4>)
 8009fa8:	4821      	ldr	r0, [pc, #132]	; (800a030 <vTaskStartScheduler+0xb8>)
 8009faa:	f7ff fe0f 	bl	8009bcc <xTaskCreateStatic>
 8009fae:	4603      	mov	r3, r0
 8009fb0:	4a20      	ldr	r2, [pc, #128]	; (800a034 <vTaskStartScheduler+0xbc>)
 8009fb2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009fb4:	4b1f      	ldr	r3, [pc, #124]	; (800a034 <vTaskStartScheduler+0xbc>)
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d002      	beq.n	8009fc2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009fbc:	2301      	movs	r3, #1
 8009fbe:	617b      	str	r3, [r7, #20]
 8009fc0:	e001      	b.n	8009fc6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009fc6:	697b      	ldr	r3, [r7, #20]
 8009fc8:	2b01      	cmp	r3, #1
 8009fca:	d102      	bne.n	8009fd2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009fcc:	f000 fe1c 	bl	800ac08 <xTimerCreateTimerTask>
 8009fd0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009fd2:	697b      	ldr	r3, [r7, #20]
 8009fd4:	2b01      	cmp	r3, #1
 8009fd6:	d116      	bne.n	800a006 <vTaskStartScheduler+0x8e>
	__asm volatile
 8009fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fdc:	f383 8811 	msr	BASEPRI, r3
 8009fe0:	f3bf 8f6f 	isb	sy
 8009fe4:	f3bf 8f4f 	dsb	sy
 8009fe8:	613b      	str	r3, [r7, #16]
}
 8009fea:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009fec:	4b12      	ldr	r3, [pc, #72]	; (800a038 <vTaskStartScheduler+0xc0>)
 8009fee:	f04f 32ff 	mov.w	r2, #4294967295
 8009ff2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009ff4:	4b11      	ldr	r3, [pc, #68]	; (800a03c <vTaskStartScheduler+0xc4>)
 8009ff6:	2201      	movs	r2, #1
 8009ff8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009ffa:	4b11      	ldr	r3, [pc, #68]	; (800a040 <vTaskStartScheduler+0xc8>)
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a000:	f001 f9de 	bl	800b3c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a004:	e00e      	b.n	800a024 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a006:	697b      	ldr	r3, [r7, #20]
 800a008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a00c:	d10a      	bne.n	800a024 <vTaskStartScheduler+0xac>
	__asm volatile
 800a00e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a012:	f383 8811 	msr	BASEPRI, r3
 800a016:	f3bf 8f6f 	isb	sy
 800a01a:	f3bf 8f4f 	dsb	sy
 800a01e:	60fb      	str	r3, [r7, #12]
}
 800a020:	bf00      	nop
 800a022:	e7fe      	b.n	800a022 <vTaskStartScheduler+0xaa>
}
 800a024:	bf00      	nop
 800a026:	3718      	adds	r7, #24
 800a028:	46bd      	mov	sp, r7
 800a02a:	bd80      	pop	{r7, pc}
 800a02c:	08019bc4 	.word	0x08019bc4
 800a030:	0800a681 	.word	0x0800a681
 800a034:	20005a00 	.word	0x20005a00
 800a038:	200059fc 	.word	0x200059fc
 800a03c:	200059e8 	.word	0x200059e8
 800a040:	200059e0 	.word	0x200059e0

0800a044 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a044:	b480      	push	{r7}
 800a046:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a048:	4b04      	ldr	r3, [pc, #16]	; (800a05c <vTaskSuspendAll+0x18>)
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	3301      	adds	r3, #1
 800a04e:	4a03      	ldr	r2, [pc, #12]	; (800a05c <vTaskSuspendAll+0x18>)
 800a050:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a052:	bf00      	nop
 800a054:	46bd      	mov	sp, r7
 800a056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05a:	4770      	bx	lr
 800a05c:	20005a04 	.word	0x20005a04

0800a060 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a060:	b580      	push	{r7, lr}
 800a062:	b084      	sub	sp, #16
 800a064:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a066:	2300      	movs	r3, #0
 800a068:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a06a:	2300      	movs	r3, #0
 800a06c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a06e:	4b42      	ldr	r3, [pc, #264]	; (800a178 <xTaskResumeAll+0x118>)
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	2b00      	cmp	r3, #0
 800a074:	d10a      	bne.n	800a08c <xTaskResumeAll+0x2c>
	__asm volatile
 800a076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a07a:	f383 8811 	msr	BASEPRI, r3
 800a07e:	f3bf 8f6f 	isb	sy
 800a082:	f3bf 8f4f 	dsb	sy
 800a086:	603b      	str	r3, [r7, #0]
}
 800a088:	bf00      	nop
 800a08a:	e7fe      	b.n	800a08a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a08c:	f001 fa3a 	bl	800b504 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a090:	4b39      	ldr	r3, [pc, #228]	; (800a178 <xTaskResumeAll+0x118>)
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	3b01      	subs	r3, #1
 800a096:	4a38      	ldr	r2, [pc, #224]	; (800a178 <xTaskResumeAll+0x118>)
 800a098:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a09a:	4b37      	ldr	r3, [pc, #220]	; (800a178 <xTaskResumeAll+0x118>)
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d162      	bne.n	800a168 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a0a2:	4b36      	ldr	r3, [pc, #216]	; (800a17c <xTaskResumeAll+0x11c>)
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d05e      	beq.n	800a168 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a0aa:	e02f      	b.n	800a10c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a0ac:	4b34      	ldr	r3, [pc, #208]	; (800a180 <xTaskResumeAll+0x120>)
 800a0ae:	68db      	ldr	r3, [r3, #12]
 800a0b0:	68db      	ldr	r3, [r3, #12]
 800a0b2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	3318      	adds	r3, #24
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	f7fe fc99 	bl	80089f0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	3304      	adds	r3, #4
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	f7fe fc94 	bl	80089f0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0cc:	4b2d      	ldr	r3, [pc, #180]	; (800a184 <xTaskResumeAll+0x124>)
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	429a      	cmp	r2, r3
 800a0d2:	d903      	bls.n	800a0dc <xTaskResumeAll+0x7c>
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0d8:	4a2a      	ldr	r2, [pc, #168]	; (800a184 <xTaskResumeAll+0x124>)
 800a0da:	6013      	str	r3, [r2, #0]
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0e0:	4613      	mov	r3, r2
 800a0e2:	009b      	lsls	r3, r3, #2
 800a0e4:	4413      	add	r3, r2
 800a0e6:	009b      	lsls	r3, r3, #2
 800a0e8:	4a27      	ldr	r2, [pc, #156]	; (800a188 <xTaskResumeAll+0x128>)
 800a0ea:	441a      	add	r2, r3
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	3304      	adds	r3, #4
 800a0f0:	4619      	mov	r1, r3
 800a0f2:	4610      	mov	r0, r2
 800a0f4:	f7fe fc1f 	bl	8008936 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0fc:	4b23      	ldr	r3, [pc, #140]	; (800a18c <xTaskResumeAll+0x12c>)
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a102:	429a      	cmp	r2, r3
 800a104:	d302      	bcc.n	800a10c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a106:	4b22      	ldr	r3, [pc, #136]	; (800a190 <xTaskResumeAll+0x130>)
 800a108:	2201      	movs	r2, #1
 800a10a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a10c:	4b1c      	ldr	r3, [pc, #112]	; (800a180 <xTaskResumeAll+0x120>)
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d1cb      	bne.n	800a0ac <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	2b00      	cmp	r3, #0
 800a118:	d001      	beq.n	800a11e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a11a:	f000 fb67 	bl	800a7ec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a11e:	4b1d      	ldr	r3, [pc, #116]	; (800a194 <xTaskResumeAll+0x134>)
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d010      	beq.n	800a14c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a12a:	f000 f859 	bl	800a1e0 <xTaskIncrementTick>
 800a12e:	4603      	mov	r3, r0
 800a130:	2b00      	cmp	r3, #0
 800a132:	d002      	beq.n	800a13a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a134:	4b16      	ldr	r3, [pc, #88]	; (800a190 <xTaskResumeAll+0x130>)
 800a136:	2201      	movs	r2, #1
 800a138:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	3b01      	subs	r3, #1
 800a13e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d1f1      	bne.n	800a12a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a146:	4b13      	ldr	r3, [pc, #76]	; (800a194 <xTaskResumeAll+0x134>)
 800a148:	2200      	movs	r2, #0
 800a14a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a14c:	4b10      	ldr	r3, [pc, #64]	; (800a190 <xTaskResumeAll+0x130>)
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	2b00      	cmp	r3, #0
 800a152:	d009      	beq.n	800a168 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a154:	2301      	movs	r3, #1
 800a156:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a158:	4b0f      	ldr	r3, [pc, #60]	; (800a198 <xTaskResumeAll+0x138>)
 800a15a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a15e:	601a      	str	r2, [r3, #0]
 800a160:	f3bf 8f4f 	dsb	sy
 800a164:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a168:	f001 f9fc 	bl	800b564 <vPortExitCritical>

	return xAlreadyYielded;
 800a16c:	68bb      	ldr	r3, [r7, #8]
}
 800a16e:	4618      	mov	r0, r3
 800a170:	3710      	adds	r7, #16
 800a172:	46bd      	mov	sp, r7
 800a174:	bd80      	pop	{r7, pc}
 800a176:	bf00      	nop
 800a178:	20005a04 	.word	0x20005a04
 800a17c:	200059dc 	.word	0x200059dc
 800a180:	2000599c 	.word	0x2000599c
 800a184:	200059e4 	.word	0x200059e4
 800a188:	2000550c 	.word	0x2000550c
 800a18c:	20005508 	.word	0x20005508
 800a190:	200059f0 	.word	0x200059f0
 800a194:	200059ec 	.word	0x200059ec
 800a198:	e000ed04 	.word	0xe000ed04

0800a19c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a19c:	b480      	push	{r7}
 800a19e:	b083      	sub	sp, #12
 800a1a0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a1a2:	4b05      	ldr	r3, [pc, #20]	; (800a1b8 <xTaskGetTickCount+0x1c>)
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a1a8:	687b      	ldr	r3, [r7, #4]
}
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	370c      	adds	r7, #12
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b4:	4770      	bx	lr
 800a1b6:	bf00      	nop
 800a1b8:	200059e0 	.word	0x200059e0

0800a1bc <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b082      	sub	sp, #8
 800a1c0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a1c2:	f001 fa81 	bl	800b6c8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800a1ca:	4b04      	ldr	r3, [pc, #16]	; (800a1dc <xTaskGetTickCountFromISR+0x20>)
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a1d0:	683b      	ldr	r3, [r7, #0]
}
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	3708      	adds	r7, #8
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	bd80      	pop	{r7, pc}
 800a1da:	bf00      	nop
 800a1dc:	200059e0 	.word	0x200059e0

0800a1e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	b086      	sub	sp, #24
 800a1e4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a1ea:	4b4f      	ldr	r3, [pc, #316]	; (800a328 <xTaskIncrementTick+0x148>)
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	f040 808f 	bne.w	800a312 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a1f4:	4b4d      	ldr	r3, [pc, #308]	; (800a32c <xTaskIncrementTick+0x14c>)
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	3301      	adds	r3, #1
 800a1fa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a1fc:	4a4b      	ldr	r2, [pc, #300]	; (800a32c <xTaskIncrementTick+0x14c>)
 800a1fe:	693b      	ldr	r3, [r7, #16]
 800a200:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a202:	693b      	ldr	r3, [r7, #16]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d120      	bne.n	800a24a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a208:	4b49      	ldr	r3, [pc, #292]	; (800a330 <xTaskIncrementTick+0x150>)
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d00a      	beq.n	800a228 <xTaskIncrementTick+0x48>
	__asm volatile
 800a212:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a216:	f383 8811 	msr	BASEPRI, r3
 800a21a:	f3bf 8f6f 	isb	sy
 800a21e:	f3bf 8f4f 	dsb	sy
 800a222:	603b      	str	r3, [r7, #0]
}
 800a224:	bf00      	nop
 800a226:	e7fe      	b.n	800a226 <xTaskIncrementTick+0x46>
 800a228:	4b41      	ldr	r3, [pc, #260]	; (800a330 <xTaskIncrementTick+0x150>)
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	60fb      	str	r3, [r7, #12]
 800a22e:	4b41      	ldr	r3, [pc, #260]	; (800a334 <xTaskIncrementTick+0x154>)
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	4a3f      	ldr	r2, [pc, #252]	; (800a330 <xTaskIncrementTick+0x150>)
 800a234:	6013      	str	r3, [r2, #0]
 800a236:	4a3f      	ldr	r2, [pc, #252]	; (800a334 <xTaskIncrementTick+0x154>)
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	6013      	str	r3, [r2, #0]
 800a23c:	4b3e      	ldr	r3, [pc, #248]	; (800a338 <xTaskIncrementTick+0x158>)
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	3301      	adds	r3, #1
 800a242:	4a3d      	ldr	r2, [pc, #244]	; (800a338 <xTaskIncrementTick+0x158>)
 800a244:	6013      	str	r3, [r2, #0]
 800a246:	f000 fad1 	bl	800a7ec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a24a:	4b3c      	ldr	r3, [pc, #240]	; (800a33c <xTaskIncrementTick+0x15c>)
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	693a      	ldr	r2, [r7, #16]
 800a250:	429a      	cmp	r2, r3
 800a252:	d349      	bcc.n	800a2e8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a254:	4b36      	ldr	r3, [pc, #216]	; (800a330 <xTaskIncrementTick+0x150>)
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d104      	bne.n	800a268 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a25e:	4b37      	ldr	r3, [pc, #220]	; (800a33c <xTaskIncrementTick+0x15c>)
 800a260:	f04f 32ff 	mov.w	r2, #4294967295
 800a264:	601a      	str	r2, [r3, #0]
					break;
 800a266:	e03f      	b.n	800a2e8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a268:	4b31      	ldr	r3, [pc, #196]	; (800a330 <xTaskIncrementTick+0x150>)
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	68db      	ldr	r3, [r3, #12]
 800a26e:	68db      	ldr	r3, [r3, #12]
 800a270:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a272:	68bb      	ldr	r3, [r7, #8]
 800a274:	685b      	ldr	r3, [r3, #4]
 800a276:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a278:	693a      	ldr	r2, [r7, #16]
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	429a      	cmp	r2, r3
 800a27e:	d203      	bcs.n	800a288 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a280:	4a2e      	ldr	r2, [pc, #184]	; (800a33c <xTaskIncrementTick+0x15c>)
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a286:	e02f      	b.n	800a2e8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a288:	68bb      	ldr	r3, [r7, #8]
 800a28a:	3304      	adds	r3, #4
 800a28c:	4618      	mov	r0, r3
 800a28e:	f7fe fbaf 	bl	80089f0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a292:	68bb      	ldr	r3, [r7, #8]
 800a294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a296:	2b00      	cmp	r3, #0
 800a298:	d004      	beq.n	800a2a4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a29a:	68bb      	ldr	r3, [r7, #8]
 800a29c:	3318      	adds	r3, #24
 800a29e:	4618      	mov	r0, r3
 800a2a0:	f7fe fba6 	bl	80089f0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a2a4:	68bb      	ldr	r3, [r7, #8]
 800a2a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2a8:	4b25      	ldr	r3, [pc, #148]	; (800a340 <xTaskIncrementTick+0x160>)
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	429a      	cmp	r2, r3
 800a2ae:	d903      	bls.n	800a2b8 <xTaskIncrementTick+0xd8>
 800a2b0:	68bb      	ldr	r3, [r7, #8]
 800a2b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2b4:	4a22      	ldr	r2, [pc, #136]	; (800a340 <xTaskIncrementTick+0x160>)
 800a2b6:	6013      	str	r3, [r2, #0]
 800a2b8:	68bb      	ldr	r3, [r7, #8]
 800a2ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2bc:	4613      	mov	r3, r2
 800a2be:	009b      	lsls	r3, r3, #2
 800a2c0:	4413      	add	r3, r2
 800a2c2:	009b      	lsls	r3, r3, #2
 800a2c4:	4a1f      	ldr	r2, [pc, #124]	; (800a344 <xTaskIncrementTick+0x164>)
 800a2c6:	441a      	add	r2, r3
 800a2c8:	68bb      	ldr	r3, [r7, #8]
 800a2ca:	3304      	adds	r3, #4
 800a2cc:	4619      	mov	r1, r3
 800a2ce:	4610      	mov	r0, r2
 800a2d0:	f7fe fb31 	bl	8008936 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a2d4:	68bb      	ldr	r3, [r7, #8]
 800a2d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2d8:	4b1b      	ldr	r3, [pc, #108]	; (800a348 <xTaskIncrementTick+0x168>)
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2de:	429a      	cmp	r2, r3
 800a2e0:	d3b8      	bcc.n	800a254 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a2e2:	2301      	movs	r3, #1
 800a2e4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a2e6:	e7b5      	b.n	800a254 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a2e8:	4b17      	ldr	r3, [pc, #92]	; (800a348 <xTaskIncrementTick+0x168>)
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2ee:	4915      	ldr	r1, [pc, #84]	; (800a344 <xTaskIncrementTick+0x164>)
 800a2f0:	4613      	mov	r3, r2
 800a2f2:	009b      	lsls	r3, r3, #2
 800a2f4:	4413      	add	r3, r2
 800a2f6:	009b      	lsls	r3, r3, #2
 800a2f8:	440b      	add	r3, r1
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	2b01      	cmp	r3, #1
 800a2fe:	d901      	bls.n	800a304 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a300:	2301      	movs	r3, #1
 800a302:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a304:	4b11      	ldr	r3, [pc, #68]	; (800a34c <xTaskIncrementTick+0x16c>)
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d007      	beq.n	800a31c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a30c:	2301      	movs	r3, #1
 800a30e:	617b      	str	r3, [r7, #20]
 800a310:	e004      	b.n	800a31c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a312:	4b0f      	ldr	r3, [pc, #60]	; (800a350 <xTaskIncrementTick+0x170>)
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	3301      	adds	r3, #1
 800a318:	4a0d      	ldr	r2, [pc, #52]	; (800a350 <xTaskIncrementTick+0x170>)
 800a31a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a31c:	697b      	ldr	r3, [r7, #20]
}
 800a31e:	4618      	mov	r0, r3
 800a320:	3718      	adds	r7, #24
 800a322:	46bd      	mov	sp, r7
 800a324:	bd80      	pop	{r7, pc}
 800a326:	bf00      	nop
 800a328:	20005a04 	.word	0x20005a04
 800a32c:	200059e0 	.word	0x200059e0
 800a330:	20005994 	.word	0x20005994
 800a334:	20005998 	.word	0x20005998
 800a338:	200059f4 	.word	0x200059f4
 800a33c:	200059fc 	.word	0x200059fc
 800a340:	200059e4 	.word	0x200059e4
 800a344:	2000550c 	.word	0x2000550c
 800a348:	20005508 	.word	0x20005508
 800a34c:	200059f0 	.word	0x200059f0
 800a350:	200059ec 	.word	0x200059ec

0800a354 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a354:	b480      	push	{r7}
 800a356:	b085      	sub	sp, #20
 800a358:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a35a:	4b28      	ldr	r3, [pc, #160]	; (800a3fc <vTaskSwitchContext+0xa8>)
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d003      	beq.n	800a36a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a362:	4b27      	ldr	r3, [pc, #156]	; (800a400 <vTaskSwitchContext+0xac>)
 800a364:	2201      	movs	r2, #1
 800a366:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a368:	e041      	b.n	800a3ee <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800a36a:	4b25      	ldr	r3, [pc, #148]	; (800a400 <vTaskSwitchContext+0xac>)
 800a36c:	2200      	movs	r2, #0
 800a36e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a370:	4b24      	ldr	r3, [pc, #144]	; (800a404 <vTaskSwitchContext+0xb0>)
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	60fb      	str	r3, [r7, #12]
 800a376:	e010      	b.n	800a39a <vTaskSwitchContext+0x46>
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d10a      	bne.n	800a394 <vTaskSwitchContext+0x40>
	__asm volatile
 800a37e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a382:	f383 8811 	msr	BASEPRI, r3
 800a386:	f3bf 8f6f 	isb	sy
 800a38a:	f3bf 8f4f 	dsb	sy
 800a38e:	607b      	str	r3, [r7, #4]
}
 800a390:	bf00      	nop
 800a392:	e7fe      	b.n	800a392 <vTaskSwitchContext+0x3e>
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	3b01      	subs	r3, #1
 800a398:	60fb      	str	r3, [r7, #12]
 800a39a:	491b      	ldr	r1, [pc, #108]	; (800a408 <vTaskSwitchContext+0xb4>)
 800a39c:	68fa      	ldr	r2, [r7, #12]
 800a39e:	4613      	mov	r3, r2
 800a3a0:	009b      	lsls	r3, r3, #2
 800a3a2:	4413      	add	r3, r2
 800a3a4:	009b      	lsls	r3, r3, #2
 800a3a6:	440b      	add	r3, r1
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d0e4      	beq.n	800a378 <vTaskSwitchContext+0x24>
 800a3ae:	68fa      	ldr	r2, [r7, #12]
 800a3b0:	4613      	mov	r3, r2
 800a3b2:	009b      	lsls	r3, r3, #2
 800a3b4:	4413      	add	r3, r2
 800a3b6:	009b      	lsls	r3, r3, #2
 800a3b8:	4a13      	ldr	r2, [pc, #76]	; (800a408 <vTaskSwitchContext+0xb4>)
 800a3ba:	4413      	add	r3, r2
 800a3bc:	60bb      	str	r3, [r7, #8]
 800a3be:	68bb      	ldr	r3, [r7, #8]
 800a3c0:	685b      	ldr	r3, [r3, #4]
 800a3c2:	685a      	ldr	r2, [r3, #4]
 800a3c4:	68bb      	ldr	r3, [r7, #8]
 800a3c6:	605a      	str	r2, [r3, #4]
 800a3c8:	68bb      	ldr	r3, [r7, #8]
 800a3ca:	685a      	ldr	r2, [r3, #4]
 800a3cc:	68bb      	ldr	r3, [r7, #8]
 800a3ce:	3308      	adds	r3, #8
 800a3d0:	429a      	cmp	r2, r3
 800a3d2:	d104      	bne.n	800a3de <vTaskSwitchContext+0x8a>
 800a3d4:	68bb      	ldr	r3, [r7, #8]
 800a3d6:	685b      	ldr	r3, [r3, #4]
 800a3d8:	685a      	ldr	r2, [r3, #4]
 800a3da:	68bb      	ldr	r3, [r7, #8]
 800a3dc:	605a      	str	r2, [r3, #4]
 800a3de:	68bb      	ldr	r3, [r7, #8]
 800a3e0:	685b      	ldr	r3, [r3, #4]
 800a3e2:	68db      	ldr	r3, [r3, #12]
 800a3e4:	4a09      	ldr	r2, [pc, #36]	; (800a40c <vTaskSwitchContext+0xb8>)
 800a3e6:	6013      	str	r3, [r2, #0]
 800a3e8:	4a06      	ldr	r2, [pc, #24]	; (800a404 <vTaskSwitchContext+0xb0>)
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	6013      	str	r3, [r2, #0]
}
 800a3ee:	bf00      	nop
 800a3f0:	3714      	adds	r7, #20
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f8:	4770      	bx	lr
 800a3fa:	bf00      	nop
 800a3fc:	20005a04 	.word	0x20005a04
 800a400:	200059f0 	.word	0x200059f0
 800a404:	200059e4 	.word	0x200059e4
 800a408:	2000550c 	.word	0x2000550c
 800a40c:	20005508 	.word	0x20005508

0800a410 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b084      	sub	sp, #16
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
 800a418:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d10a      	bne.n	800a436 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a420:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a424:	f383 8811 	msr	BASEPRI, r3
 800a428:	f3bf 8f6f 	isb	sy
 800a42c:	f3bf 8f4f 	dsb	sy
 800a430:	60fb      	str	r3, [r7, #12]
}
 800a432:	bf00      	nop
 800a434:	e7fe      	b.n	800a434 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a436:	4b07      	ldr	r3, [pc, #28]	; (800a454 <vTaskPlaceOnEventList+0x44>)
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	3318      	adds	r3, #24
 800a43c:	4619      	mov	r1, r3
 800a43e:	6878      	ldr	r0, [r7, #4]
 800a440:	f7fe fa9d 	bl	800897e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a444:	2101      	movs	r1, #1
 800a446:	6838      	ldr	r0, [r7, #0]
 800a448:	f000 fb8a 	bl	800ab60 <prvAddCurrentTaskToDelayedList>
}
 800a44c:	bf00      	nop
 800a44e:	3710      	adds	r7, #16
 800a450:	46bd      	mov	sp, r7
 800a452:	bd80      	pop	{r7, pc}
 800a454:	20005508 	.word	0x20005508

0800a458 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a458:	b580      	push	{r7, lr}
 800a45a:	b086      	sub	sp, #24
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	60f8      	str	r0, [r7, #12]
 800a460:	60b9      	str	r1, [r7, #8]
 800a462:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d10a      	bne.n	800a480 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a46a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a46e:	f383 8811 	msr	BASEPRI, r3
 800a472:	f3bf 8f6f 	isb	sy
 800a476:	f3bf 8f4f 	dsb	sy
 800a47a:	617b      	str	r3, [r7, #20]
}
 800a47c:	bf00      	nop
 800a47e:	e7fe      	b.n	800a47e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a480:	4b0a      	ldr	r3, [pc, #40]	; (800a4ac <vTaskPlaceOnEventListRestricted+0x54>)
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	3318      	adds	r3, #24
 800a486:	4619      	mov	r1, r3
 800a488:	68f8      	ldr	r0, [r7, #12]
 800a48a:	f7fe fa54 	bl	8008936 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d002      	beq.n	800a49a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a494:	f04f 33ff 	mov.w	r3, #4294967295
 800a498:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a49a:	6879      	ldr	r1, [r7, #4]
 800a49c:	68b8      	ldr	r0, [r7, #8]
 800a49e:	f000 fb5f 	bl	800ab60 <prvAddCurrentTaskToDelayedList>
	}
 800a4a2:	bf00      	nop
 800a4a4:	3718      	adds	r7, #24
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	bd80      	pop	{r7, pc}
 800a4aa:	bf00      	nop
 800a4ac:	20005508 	.word	0x20005508

0800a4b0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	b086      	sub	sp, #24
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	68db      	ldr	r3, [r3, #12]
 800a4bc:	68db      	ldr	r3, [r3, #12]
 800a4be:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a4c0:	693b      	ldr	r3, [r7, #16]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d10a      	bne.n	800a4dc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a4c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4ca:	f383 8811 	msr	BASEPRI, r3
 800a4ce:	f3bf 8f6f 	isb	sy
 800a4d2:	f3bf 8f4f 	dsb	sy
 800a4d6:	60fb      	str	r3, [r7, #12]
}
 800a4d8:	bf00      	nop
 800a4da:	e7fe      	b.n	800a4da <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a4dc:	693b      	ldr	r3, [r7, #16]
 800a4de:	3318      	adds	r3, #24
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	f7fe fa85 	bl	80089f0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a4e6:	4b1e      	ldr	r3, [pc, #120]	; (800a560 <xTaskRemoveFromEventList+0xb0>)
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d11d      	bne.n	800a52a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a4ee:	693b      	ldr	r3, [r7, #16]
 800a4f0:	3304      	adds	r3, #4
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	f7fe fa7c 	bl	80089f0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a4f8:	693b      	ldr	r3, [r7, #16]
 800a4fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4fc:	4b19      	ldr	r3, [pc, #100]	; (800a564 <xTaskRemoveFromEventList+0xb4>)
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	429a      	cmp	r2, r3
 800a502:	d903      	bls.n	800a50c <xTaskRemoveFromEventList+0x5c>
 800a504:	693b      	ldr	r3, [r7, #16]
 800a506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a508:	4a16      	ldr	r2, [pc, #88]	; (800a564 <xTaskRemoveFromEventList+0xb4>)
 800a50a:	6013      	str	r3, [r2, #0]
 800a50c:	693b      	ldr	r3, [r7, #16]
 800a50e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a510:	4613      	mov	r3, r2
 800a512:	009b      	lsls	r3, r3, #2
 800a514:	4413      	add	r3, r2
 800a516:	009b      	lsls	r3, r3, #2
 800a518:	4a13      	ldr	r2, [pc, #76]	; (800a568 <xTaskRemoveFromEventList+0xb8>)
 800a51a:	441a      	add	r2, r3
 800a51c:	693b      	ldr	r3, [r7, #16]
 800a51e:	3304      	adds	r3, #4
 800a520:	4619      	mov	r1, r3
 800a522:	4610      	mov	r0, r2
 800a524:	f7fe fa07 	bl	8008936 <vListInsertEnd>
 800a528:	e005      	b.n	800a536 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a52a:	693b      	ldr	r3, [r7, #16]
 800a52c:	3318      	adds	r3, #24
 800a52e:	4619      	mov	r1, r3
 800a530:	480e      	ldr	r0, [pc, #56]	; (800a56c <xTaskRemoveFromEventList+0xbc>)
 800a532:	f7fe fa00 	bl	8008936 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a536:	693b      	ldr	r3, [r7, #16]
 800a538:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a53a:	4b0d      	ldr	r3, [pc, #52]	; (800a570 <xTaskRemoveFromEventList+0xc0>)
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a540:	429a      	cmp	r2, r3
 800a542:	d905      	bls.n	800a550 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a544:	2301      	movs	r3, #1
 800a546:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a548:	4b0a      	ldr	r3, [pc, #40]	; (800a574 <xTaskRemoveFromEventList+0xc4>)
 800a54a:	2201      	movs	r2, #1
 800a54c:	601a      	str	r2, [r3, #0]
 800a54e:	e001      	b.n	800a554 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a550:	2300      	movs	r3, #0
 800a552:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a554:	697b      	ldr	r3, [r7, #20]
}
 800a556:	4618      	mov	r0, r3
 800a558:	3718      	adds	r7, #24
 800a55a:	46bd      	mov	sp, r7
 800a55c:	bd80      	pop	{r7, pc}
 800a55e:	bf00      	nop
 800a560:	20005a04 	.word	0x20005a04
 800a564:	200059e4 	.word	0x200059e4
 800a568:	2000550c 	.word	0x2000550c
 800a56c:	2000599c 	.word	0x2000599c
 800a570:	20005508 	.word	0x20005508
 800a574:	200059f0 	.word	0x200059f0

0800a578 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a578:	b480      	push	{r7}
 800a57a:	b083      	sub	sp, #12
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a580:	4b06      	ldr	r3, [pc, #24]	; (800a59c <vTaskInternalSetTimeOutState+0x24>)
 800a582:	681a      	ldr	r2, [r3, #0]
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a588:	4b05      	ldr	r3, [pc, #20]	; (800a5a0 <vTaskInternalSetTimeOutState+0x28>)
 800a58a:	681a      	ldr	r2, [r3, #0]
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	605a      	str	r2, [r3, #4]
}
 800a590:	bf00      	nop
 800a592:	370c      	adds	r7, #12
 800a594:	46bd      	mov	sp, r7
 800a596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59a:	4770      	bx	lr
 800a59c:	200059f4 	.word	0x200059f4
 800a5a0:	200059e0 	.word	0x200059e0

0800a5a4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b088      	sub	sp, #32
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
 800a5ac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d10a      	bne.n	800a5ca <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a5b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5b8:	f383 8811 	msr	BASEPRI, r3
 800a5bc:	f3bf 8f6f 	isb	sy
 800a5c0:	f3bf 8f4f 	dsb	sy
 800a5c4:	613b      	str	r3, [r7, #16]
}
 800a5c6:	bf00      	nop
 800a5c8:	e7fe      	b.n	800a5c8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a5ca:	683b      	ldr	r3, [r7, #0]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d10a      	bne.n	800a5e6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a5d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5d4:	f383 8811 	msr	BASEPRI, r3
 800a5d8:	f3bf 8f6f 	isb	sy
 800a5dc:	f3bf 8f4f 	dsb	sy
 800a5e0:	60fb      	str	r3, [r7, #12]
}
 800a5e2:	bf00      	nop
 800a5e4:	e7fe      	b.n	800a5e4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a5e6:	f000 ff8d 	bl	800b504 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a5ea:	4b1d      	ldr	r3, [pc, #116]	; (800a660 <xTaskCheckForTimeOut+0xbc>)
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	685b      	ldr	r3, [r3, #4]
 800a5f4:	69ba      	ldr	r2, [r7, #24]
 800a5f6:	1ad3      	subs	r3, r2, r3
 800a5f8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a5fa:	683b      	ldr	r3, [r7, #0]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a602:	d102      	bne.n	800a60a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a604:	2300      	movs	r3, #0
 800a606:	61fb      	str	r3, [r7, #28]
 800a608:	e023      	b.n	800a652 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681a      	ldr	r2, [r3, #0]
 800a60e:	4b15      	ldr	r3, [pc, #84]	; (800a664 <xTaskCheckForTimeOut+0xc0>)
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	429a      	cmp	r2, r3
 800a614:	d007      	beq.n	800a626 <xTaskCheckForTimeOut+0x82>
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	685b      	ldr	r3, [r3, #4]
 800a61a:	69ba      	ldr	r2, [r7, #24]
 800a61c:	429a      	cmp	r2, r3
 800a61e:	d302      	bcc.n	800a626 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a620:	2301      	movs	r3, #1
 800a622:	61fb      	str	r3, [r7, #28]
 800a624:	e015      	b.n	800a652 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a626:	683b      	ldr	r3, [r7, #0]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	697a      	ldr	r2, [r7, #20]
 800a62c:	429a      	cmp	r2, r3
 800a62e:	d20b      	bcs.n	800a648 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a630:	683b      	ldr	r3, [r7, #0]
 800a632:	681a      	ldr	r2, [r3, #0]
 800a634:	697b      	ldr	r3, [r7, #20]
 800a636:	1ad2      	subs	r2, r2, r3
 800a638:	683b      	ldr	r3, [r7, #0]
 800a63a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a63c:	6878      	ldr	r0, [r7, #4]
 800a63e:	f7ff ff9b 	bl	800a578 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a642:	2300      	movs	r3, #0
 800a644:	61fb      	str	r3, [r7, #28]
 800a646:	e004      	b.n	800a652 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a648:	683b      	ldr	r3, [r7, #0]
 800a64a:	2200      	movs	r2, #0
 800a64c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a64e:	2301      	movs	r3, #1
 800a650:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a652:	f000 ff87 	bl	800b564 <vPortExitCritical>

	return xReturn;
 800a656:	69fb      	ldr	r3, [r7, #28]
}
 800a658:	4618      	mov	r0, r3
 800a65a:	3720      	adds	r7, #32
 800a65c:	46bd      	mov	sp, r7
 800a65e:	bd80      	pop	{r7, pc}
 800a660:	200059e0 	.word	0x200059e0
 800a664:	200059f4 	.word	0x200059f4

0800a668 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a668:	b480      	push	{r7}
 800a66a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a66c:	4b03      	ldr	r3, [pc, #12]	; (800a67c <vTaskMissedYield+0x14>)
 800a66e:	2201      	movs	r2, #1
 800a670:	601a      	str	r2, [r3, #0]
}
 800a672:	bf00      	nop
 800a674:	46bd      	mov	sp, r7
 800a676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67a:	4770      	bx	lr
 800a67c:	200059f0 	.word	0x200059f0

0800a680 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a680:	b580      	push	{r7, lr}
 800a682:	b082      	sub	sp, #8
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a688:	f000 f852 	bl	800a730 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a68c:	4b06      	ldr	r3, [pc, #24]	; (800a6a8 <prvIdleTask+0x28>)
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	2b01      	cmp	r3, #1
 800a692:	d9f9      	bls.n	800a688 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a694:	4b05      	ldr	r3, [pc, #20]	; (800a6ac <prvIdleTask+0x2c>)
 800a696:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a69a:	601a      	str	r2, [r3, #0]
 800a69c:	f3bf 8f4f 	dsb	sy
 800a6a0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a6a4:	e7f0      	b.n	800a688 <prvIdleTask+0x8>
 800a6a6:	bf00      	nop
 800a6a8:	2000550c 	.word	0x2000550c
 800a6ac:	e000ed04 	.word	0xe000ed04

0800a6b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b082      	sub	sp, #8
 800a6b4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	607b      	str	r3, [r7, #4]
 800a6ba:	e00c      	b.n	800a6d6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a6bc:	687a      	ldr	r2, [r7, #4]
 800a6be:	4613      	mov	r3, r2
 800a6c0:	009b      	lsls	r3, r3, #2
 800a6c2:	4413      	add	r3, r2
 800a6c4:	009b      	lsls	r3, r3, #2
 800a6c6:	4a12      	ldr	r2, [pc, #72]	; (800a710 <prvInitialiseTaskLists+0x60>)
 800a6c8:	4413      	add	r3, r2
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	f7fe f906 	bl	80088dc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	3301      	adds	r3, #1
 800a6d4:	607b      	str	r3, [r7, #4]
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	2b37      	cmp	r3, #55	; 0x37
 800a6da:	d9ef      	bls.n	800a6bc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a6dc:	480d      	ldr	r0, [pc, #52]	; (800a714 <prvInitialiseTaskLists+0x64>)
 800a6de:	f7fe f8fd 	bl	80088dc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a6e2:	480d      	ldr	r0, [pc, #52]	; (800a718 <prvInitialiseTaskLists+0x68>)
 800a6e4:	f7fe f8fa 	bl	80088dc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a6e8:	480c      	ldr	r0, [pc, #48]	; (800a71c <prvInitialiseTaskLists+0x6c>)
 800a6ea:	f7fe f8f7 	bl	80088dc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a6ee:	480c      	ldr	r0, [pc, #48]	; (800a720 <prvInitialiseTaskLists+0x70>)
 800a6f0:	f7fe f8f4 	bl	80088dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a6f4:	480b      	ldr	r0, [pc, #44]	; (800a724 <prvInitialiseTaskLists+0x74>)
 800a6f6:	f7fe f8f1 	bl	80088dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a6fa:	4b0b      	ldr	r3, [pc, #44]	; (800a728 <prvInitialiseTaskLists+0x78>)
 800a6fc:	4a05      	ldr	r2, [pc, #20]	; (800a714 <prvInitialiseTaskLists+0x64>)
 800a6fe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a700:	4b0a      	ldr	r3, [pc, #40]	; (800a72c <prvInitialiseTaskLists+0x7c>)
 800a702:	4a05      	ldr	r2, [pc, #20]	; (800a718 <prvInitialiseTaskLists+0x68>)
 800a704:	601a      	str	r2, [r3, #0]
}
 800a706:	bf00      	nop
 800a708:	3708      	adds	r7, #8
 800a70a:	46bd      	mov	sp, r7
 800a70c:	bd80      	pop	{r7, pc}
 800a70e:	bf00      	nop
 800a710:	2000550c 	.word	0x2000550c
 800a714:	2000596c 	.word	0x2000596c
 800a718:	20005980 	.word	0x20005980
 800a71c:	2000599c 	.word	0x2000599c
 800a720:	200059b0 	.word	0x200059b0
 800a724:	200059c8 	.word	0x200059c8
 800a728:	20005994 	.word	0x20005994
 800a72c:	20005998 	.word	0x20005998

0800a730 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a730:	b580      	push	{r7, lr}
 800a732:	b082      	sub	sp, #8
 800a734:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a736:	e019      	b.n	800a76c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a738:	f000 fee4 	bl	800b504 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a73c:	4b10      	ldr	r3, [pc, #64]	; (800a780 <prvCheckTasksWaitingTermination+0x50>)
 800a73e:	68db      	ldr	r3, [r3, #12]
 800a740:	68db      	ldr	r3, [r3, #12]
 800a742:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	3304      	adds	r3, #4
 800a748:	4618      	mov	r0, r3
 800a74a:	f7fe f951 	bl	80089f0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a74e:	4b0d      	ldr	r3, [pc, #52]	; (800a784 <prvCheckTasksWaitingTermination+0x54>)
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	3b01      	subs	r3, #1
 800a754:	4a0b      	ldr	r2, [pc, #44]	; (800a784 <prvCheckTasksWaitingTermination+0x54>)
 800a756:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a758:	4b0b      	ldr	r3, [pc, #44]	; (800a788 <prvCheckTasksWaitingTermination+0x58>)
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	3b01      	subs	r3, #1
 800a75e:	4a0a      	ldr	r2, [pc, #40]	; (800a788 <prvCheckTasksWaitingTermination+0x58>)
 800a760:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a762:	f000 feff 	bl	800b564 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a766:	6878      	ldr	r0, [r7, #4]
 800a768:	f000 f810 	bl	800a78c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a76c:	4b06      	ldr	r3, [pc, #24]	; (800a788 <prvCheckTasksWaitingTermination+0x58>)
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	2b00      	cmp	r3, #0
 800a772:	d1e1      	bne.n	800a738 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a774:	bf00      	nop
 800a776:	bf00      	nop
 800a778:	3708      	adds	r7, #8
 800a77a:	46bd      	mov	sp, r7
 800a77c:	bd80      	pop	{r7, pc}
 800a77e:	bf00      	nop
 800a780:	200059b0 	.word	0x200059b0
 800a784:	200059dc 	.word	0x200059dc
 800a788:	200059c4 	.word	0x200059c4

0800a78c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a78c:	b580      	push	{r7, lr}
 800a78e:	b084      	sub	sp, #16
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d108      	bne.n	800a7b0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	f001 f89c 	bl	800b8e0 <vPortFree>
				vPortFree( pxTCB );
 800a7a8:	6878      	ldr	r0, [r7, #4]
 800a7aa:	f001 f899 	bl	800b8e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a7ae:	e018      	b.n	800a7e2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a7b6:	2b01      	cmp	r3, #1
 800a7b8:	d103      	bne.n	800a7c2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a7ba:	6878      	ldr	r0, [r7, #4]
 800a7bc:	f001 f890 	bl	800b8e0 <vPortFree>
	}
 800a7c0:	e00f      	b.n	800a7e2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a7c8:	2b02      	cmp	r3, #2
 800a7ca:	d00a      	beq.n	800a7e2 <prvDeleteTCB+0x56>
	__asm volatile
 800a7cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7d0:	f383 8811 	msr	BASEPRI, r3
 800a7d4:	f3bf 8f6f 	isb	sy
 800a7d8:	f3bf 8f4f 	dsb	sy
 800a7dc:	60fb      	str	r3, [r7, #12]
}
 800a7de:	bf00      	nop
 800a7e0:	e7fe      	b.n	800a7e0 <prvDeleteTCB+0x54>
	}
 800a7e2:	bf00      	nop
 800a7e4:	3710      	adds	r7, #16
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	bd80      	pop	{r7, pc}
	...

0800a7ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a7ec:	b480      	push	{r7}
 800a7ee:	b083      	sub	sp, #12
 800a7f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a7f2:	4b0c      	ldr	r3, [pc, #48]	; (800a824 <prvResetNextTaskUnblockTime+0x38>)
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d104      	bne.n	800a806 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a7fc:	4b0a      	ldr	r3, [pc, #40]	; (800a828 <prvResetNextTaskUnblockTime+0x3c>)
 800a7fe:	f04f 32ff 	mov.w	r2, #4294967295
 800a802:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a804:	e008      	b.n	800a818 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a806:	4b07      	ldr	r3, [pc, #28]	; (800a824 <prvResetNextTaskUnblockTime+0x38>)
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	68db      	ldr	r3, [r3, #12]
 800a80c:	68db      	ldr	r3, [r3, #12]
 800a80e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	685b      	ldr	r3, [r3, #4]
 800a814:	4a04      	ldr	r2, [pc, #16]	; (800a828 <prvResetNextTaskUnblockTime+0x3c>)
 800a816:	6013      	str	r3, [r2, #0]
}
 800a818:	bf00      	nop
 800a81a:	370c      	adds	r7, #12
 800a81c:	46bd      	mov	sp, r7
 800a81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a822:	4770      	bx	lr
 800a824:	20005994 	.word	0x20005994
 800a828:	200059fc 	.word	0x200059fc

0800a82c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800a82c:	b480      	push	{r7}
 800a82e:	b083      	sub	sp, #12
 800a830:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800a832:	4b05      	ldr	r3, [pc, #20]	; (800a848 <xTaskGetCurrentTaskHandle+0x1c>)
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	607b      	str	r3, [r7, #4]

		return xReturn;
 800a838:	687b      	ldr	r3, [r7, #4]
	}
 800a83a:	4618      	mov	r0, r3
 800a83c:	370c      	adds	r7, #12
 800a83e:	46bd      	mov	sp, r7
 800a840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a844:	4770      	bx	lr
 800a846:	bf00      	nop
 800a848:	20005508 	.word	0x20005508

0800a84c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a84c:	b480      	push	{r7}
 800a84e:	b083      	sub	sp, #12
 800a850:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a852:	4b0b      	ldr	r3, [pc, #44]	; (800a880 <xTaskGetSchedulerState+0x34>)
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d102      	bne.n	800a860 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a85a:	2301      	movs	r3, #1
 800a85c:	607b      	str	r3, [r7, #4]
 800a85e:	e008      	b.n	800a872 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a860:	4b08      	ldr	r3, [pc, #32]	; (800a884 <xTaskGetSchedulerState+0x38>)
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	2b00      	cmp	r3, #0
 800a866:	d102      	bne.n	800a86e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a868:	2302      	movs	r3, #2
 800a86a:	607b      	str	r3, [r7, #4]
 800a86c:	e001      	b.n	800a872 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a86e:	2300      	movs	r3, #0
 800a870:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a872:	687b      	ldr	r3, [r7, #4]
	}
 800a874:	4618      	mov	r0, r3
 800a876:	370c      	adds	r7, #12
 800a878:	46bd      	mov	sp, r7
 800a87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87e:	4770      	bx	lr
 800a880:	200059e8 	.word	0x200059e8
 800a884:	20005a04 	.word	0x20005a04

0800a888 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a888:	b580      	push	{r7, lr}
 800a88a:	b084      	sub	sp, #16
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a894:	2300      	movs	r3, #0
 800a896:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d051      	beq.n	800a942 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a89e:	68bb      	ldr	r3, [r7, #8]
 800a8a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8a2:	4b2a      	ldr	r3, [pc, #168]	; (800a94c <xTaskPriorityInherit+0xc4>)
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8a8:	429a      	cmp	r2, r3
 800a8aa:	d241      	bcs.n	800a930 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a8ac:	68bb      	ldr	r3, [r7, #8]
 800a8ae:	699b      	ldr	r3, [r3, #24]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	db06      	blt.n	800a8c2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a8b4:	4b25      	ldr	r3, [pc, #148]	; (800a94c <xTaskPriorityInherit+0xc4>)
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8ba:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a8be:	68bb      	ldr	r3, [r7, #8]
 800a8c0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a8c2:	68bb      	ldr	r3, [r7, #8]
 800a8c4:	6959      	ldr	r1, [r3, #20]
 800a8c6:	68bb      	ldr	r3, [r7, #8]
 800a8c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8ca:	4613      	mov	r3, r2
 800a8cc:	009b      	lsls	r3, r3, #2
 800a8ce:	4413      	add	r3, r2
 800a8d0:	009b      	lsls	r3, r3, #2
 800a8d2:	4a1f      	ldr	r2, [pc, #124]	; (800a950 <xTaskPriorityInherit+0xc8>)
 800a8d4:	4413      	add	r3, r2
 800a8d6:	4299      	cmp	r1, r3
 800a8d8:	d122      	bne.n	800a920 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a8da:	68bb      	ldr	r3, [r7, #8]
 800a8dc:	3304      	adds	r3, #4
 800a8de:	4618      	mov	r0, r3
 800a8e0:	f7fe f886 	bl	80089f0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a8e4:	4b19      	ldr	r3, [pc, #100]	; (800a94c <xTaskPriorityInherit+0xc4>)
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8ea:	68bb      	ldr	r3, [r7, #8]
 800a8ec:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a8ee:	68bb      	ldr	r3, [r7, #8]
 800a8f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8f2:	4b18      	ldr	r3, [pc, #96]	; (800a954 <xTaskPriorityInherit+0xcc>)
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	429a      	cmp	r2, r3
 800a8f8:	d903      	bls.n	800a902 <xTaskPriorityInherit+0x7a>
 800a8fa:	68bb      	ldr	r3, [r7, #8]
 800a8fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8fe:	4a15      	ldr	r2, [pc, #84]	; (800a954 <xTaskPriorityInherit+0xcc>)
 800a900:	6013      	str	r3, [r2, #0]
 800a902:	68bb      	ldr	r3, [r7, #8]
 800a904:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a906:	4613      	mov	r3, r2
 800a908:	009b      	lsls	r3, r3, #2
 800a90a:	4413      	add	r3, r2
 800a90c:	009b      	lsls	r3, r3, #2
 800a90e:	4a10      	ldr	r2, [pc, #64]	; (800a950 <xTaskPriorityInherit+0xc8>)
 800a910:	441a      	add	r2, r3
 800a912:	68bb      	ldr	r3, [r7, #8]
 800a914:	3304      	adds	r3, #4
 800a916:	4619      	mov	r1, r3
 800a918:	4610      	mov	r0, r2
 800a91a:	f7fe f80c 	bl	8008936 <vListInsertEnd>
 800a91e:	e004      	b.n	800a92a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a920:	4b0a      	ldr	r3, [pc, #40]	; (800a94c <xTaskPriorityInherit+0xc4>)
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a926:	68bb      	ldr	r3, [r7, #8]
 800a928:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a92a:	2301      	movs	r3, #1
 800a92c:	60fb      	str	r3, [r7, #12]
 800a92e:	e008      	b.n	800a942 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a930:	68bb      	ldr	r3, [r7, #8]
 800a932:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a934:	4b05      	ldr	r3, [pc, #20]	; (800a94c <xTaskPriorityInherit+0xc4>)
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a93a:	429a      	cmp	r2, r3
 800a93c:	d201      	bcs.n	800a942 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a93e:	2301      	movs	r3, #1
 800a940:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a942:	68fb      	ldr	r3, [r7, #12]
	}
 800a944:	4618      	mov	r0, r3
 800a946:	3710      	adds	r7, #16
 800a948:	46bd      	mov	sp, r7
 800a94a:	bd80      	pop	{r7, pc}
 800a94c:	20005508 	.word	0x20005508
 800a950:	2000550c 	.word	0x2000550c
 800a954:	200059e4 	.word	0x200059e4

0800a958 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a958:	b580      	push	{r7, lr}
 800a95a:	b086      	sub	sp, #24
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a964:	2300      	movs	r3, #0
 800a966:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d056      	beq.n	800aa1c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a96e:	4b2e      	ldr	r3, [pc, #184]	; (800aa28 <xTaskPriorityDisinherit+0xd0>)
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	693a      	ldr	r2, [r7, #16]
 800a974:	429a      	cmp	r2, r3
 800a976:	d00a      	beq.n	800a98e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a97c:	f383 8811 	msr	BASEPRI, r3
 800a980:	f3bf 8f6f 	isb	sy
 800a984:	f3bf 8f4f 	dsb	sy
 800a988:	60fb      	str	r3, [r7, #12]
}
 800a98a:	bf00      	nop
 800a98c:	e7fe      	b.n	800a98c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a98e:	693b      	ldr	r3, [r7, #16]
 800a990:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a992:	2b00      	cmp	r3, #0
 800a994:	d10a      	bne.n	800a9ac <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a99a:	f383 8811 	msr	BASEPRI, r3
 800a99e:	f3bf 8f6f 	isb	sy
 800a9a2:	f3bf 8f4f 	dsb	sy
 800a9a6:	60bb      	str	r3, [r7, #8]
}
 800a9a8:	bf00      	nop
 800a9aa:	e7fe      	b.n	800a9aa <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a9ac:	693b      	ldr	r3, [r7, #16]
 800a9ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9b0:	1e5a      	subs	r2, r3, #1
 800a9b2:	693b      	ldr	r3, [r7, #16]
 800a9b4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a9b6:	693b      	ldr	r3, [r7, #16]
 800a9b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9ba:	693b      	ldr	r3, [r7, #16]
 800a9bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a9be:	429a      	cmp	r2, r3
 800a9c0:	d02c      	beq.n	800aa1c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a9c2:	693b      	ldr	r3, [r7, #16]
 800a9c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d128      	bne.n	800aa1c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a9ca:	693b      	ldr	r3, [r7, #16]
 800a9cc:	3304      	adds	r3, #4
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	f7fe f80e 	bl	80089f0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a9d4:	693b      	ldr	r3, [r7, #16]
 800a9d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a9d8:	693b      	ldr	r3, [r7, #16]
 800a9da:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a9dc:	693b      	ldr	r3, [r7, #16]
 800a9de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9e0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a9e4:	693b      	ldr	r3, [r7, #16]
 800a9e6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a9e8:	693b      	ldr	r3, [r7, #16]
 800a9ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9ec:	4b0f      	ldr	r3, [pc, #60]	; (800aa2c <xTaskPriorityDisinherit+0xd4>)
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	429a      	cmp	r2, r3
 800a9f2:	d903      	bls.n	800a9fc <xTaskPriorityDisinherit+0xa4>
 800a9f4:	693b      	ldr	r3, [r7, #16]
 800a9f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9f8:	4a0c      	ldr	r2, [pc, #48]	; (800aa2c <xTaskPriorityDisinherit+0xd4>)
 800a9fa:	6013      	str	r3, [r2, #0]
 800a9fc:	693b      	ldr	r3, [r7, #16]
 800a9fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa00:	4613      	mov	r3, r2
 800aa02:	009b      	lsls	r3, r3, #2
 800aa04:	4413      	add	r3, r2
 800aa06:	009b      	lsls	r3, r3, #2
 800aa08:	4a09      	ldr	r2, [pc, #36]	; (800aa30 <xTaskPriorityDisinherit+0xd8>)
 800aa0a:	441a      	add	r2, r3
 800aa0c:	693b      	ldr	r3, [r7, #16]
 800aa0e:	3304      	adds	r3, #4
 800aa10:	4619      	mov	r1, r3
 800aa12:	4610      	mov	r0, r2
 800aa14:	f7fd ff8f 	bl	8008936 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800aa18:	2301      	movs	r3, #1
 800aa1a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800aa1c:	697b      	ldr	r3, [r7, #20]
	}
 800aa1e:	4618      	mov	r0, r3
 800aa20:	3718      	adds	r7, #24
 800aa22:	46bd      	mov	sp, r7
 800aa24:	bd80      	pop	{r7, pc}
 800aa26:	bf00      	nop
 800aa28:	20005508 	.word	0x20005508
 800aa2c:	200059e4 	.word	0x200059e4
 800aa30:	2000550c 	.word	0x2000550c

0800aa34 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800aa34:	b580      	push	{r7, lr}
 800aa36:	b088      	sub	sp, #32
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	6078      	str	r0, [r7, #4]
 800aa3c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800aa42:	2301      	movs	r3, #1
 800aa44:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d06a      	beq.n	800ab22 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800aa4c:	69bb      	ldr	r3, [r7, #24]
 800aa4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d10a      	bne.n	800aa6a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800aa54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa58:	f383 8811 	msr	BASEPRI, r3
 800aa5c:	f3bf 8f6f 	isb	sy
 800aa60:	f3bf 8f4f 	dsb	sy
 800aa64:	60fb      	str	r3, [r7, #12]
}
 800aa66:	bf00      	nop
 800aa68:	e7fe      	b.n	800aa68 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800aa6a:	69bb      	ldr	r3, [r7, #24]
 800aa6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa6e:	683a      	ldr	r2, [r7, #0]
 800aa70:	429a      	cmp	r2, r3
 800aa72:	d902      	bls.n	800aa7a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800aa74:	683b      	ldr	r3, [r7, #0]
 800aa76:	61fb      	str	r3, [r7, #28]
 800aa78:	e002      	b.n	800aa80 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800aa7a:	69bb      	ldr	r3, [r7, #24]
 800aa7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa7e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800aa80:	69bb      	ldr	r3, [r7, #24]
 800aa82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa84:	69fa      	ldr	r2, [r7, #28]
 800aa86:	429a      	cmp	r2, r3
 800aa88:	d04b      	beq.n	800ab22 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800aa8a:	69bb      	ldr	r3, [r7, #24]
 800aa8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa8e:	697a      	ldr	r2, [r7, #20]
 800aa90:	429a      	cmp	r2, r3
 800aa92:	d146      	bne.n	800ab22 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800aa94:	4b25      	ldr	r3, [pc, #148]	; (800ab2c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	69ba      	ldr	r2, [r7, #24]
 800aa9a:	429a      	cmp	r2, r3
 800aa9c:	d10a      	bne.n	800aab4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800aa9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaa2:	f383 8811 	msr	BASEPRI, r3
 800aaa6:	f3bf 8f6f 	isb	sy
 800aaaa:	f3bf 8f4f 	dsb	sy
 800aaae:	60bb      	str	r3, [r7, #8]
}
 800aab0:	bf00      	nop
 800aab2:	e7fe      	b.n	800aab2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800aab4:	69bb      	ldr	r3, [r7, #24]
 800aab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aab8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800aaba:	69bb      	ldr	r3, [r7, #24]
 800aabc:	69fa      	ldr	r2, [r7, #28]
 800aabe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800aac0:	69bb      	ldr	r3, [r7, #24]
 800aac2:	699b      	ldr	r3, [r3, #24]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	db04      	blt.n	800aad2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aac8:	69fb      	ldr	r3, [r7, #28]
 800aaca:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800aace:	69bb      	ldr	r3, [r7, #24]
 800aad0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800aad2:	69bb      	ldr	r3, [r7, #24]
 800aad4:	6959      	ldr	r1, [r3, #20]
 800aad6:	693a      	ldr	r2, [r7, #16]
 800aad8:	4613      	mov	r3, r2
 800aada:	009b      	lsls	r3, r3, #2
 800aadc:	4413      	add	r3, r2
 800aade:	009b      	lsls	r3, r3, #2
 800aae0:	4a13      	ldr	r2, [pc, #76]	; (800ab30 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800aae2:	4413      	add	r3, r2
 800aae4:	4299      	cmp	r1, r3
 800aae6:	d11c      	bne.n	800ab22 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aae8:	69bb      	ldr	r3, [r7, #24]
 800aaea:	3304      	adds	r3, #4
 800aaec:	4618      	mov	r0, r3
 800aaee:	f7fd ff7f 	bl	80089f0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800aaf2:	69bb      	ldr	r3, [r7, #24]
 800aaf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aaf6:	4b0f      	ldr	r3, [pc, #60]	; (800ab34 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	429a      	cmp	r2, r3
 800aafc:	d903      	bls.n	800ab06 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800aafe:	69bb      	ldr	r3, [r7, #24]
 800ab00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab02:	4a0c      	ldr	r2, [pc, #48]	; (800ab34 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ab04:	6013      	str	r3, [r2, #0]
 800ab06:	69bb      	ldr	r3, [r7, #24]
 800ab08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab0a:	4613      	mov	r3, r2
 800ab0c:	009b      	lsls	r3, r3, #2
 800ab0e:	4413      	add	r3, r2
 800ab10:	009b      	lsls	r3, r3, #2
 800ab12:	4a07      	ldr	r2, [pc, #28]	; (800ab30 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800ab14:	441a      	add	r2, r3
 800ab16:	69bb      	ldr	r3, [r7, #24]
 800ab18:	3304      	adds	r3, #4
 800ab1a:	4619      	mov	r1, r3
 800ab1c:	4610      	mov	r0, r2
 800ab1e:	f7fd ff0a 	bl	8008936 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ab22:	bf00      	nop
 800ab24:	3720      	adds	r7, #32
 800ab26:	46bd      	mov	sp, r7
 800ab28:	bd80      	pop	{r7, pc}
 800ab2a:	bf00      	nop
 800ab2c:	20005508 	.word	0x20005508
 800ab30:	2000550c 	.word	0x2000550c
 800ab34:	200059e4 	.word	0x200059e4

0800ab38 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800ab38:	b480      	push	{r7}
 800ab3a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ab3c:	4b07      	ldr	r3, [pc, #28]	; (800ab5c <pvTaskIncrementMutexHeldCount+0x24>)
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d004      	beq.n	800ab4e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ab44:	4b05      	ldr	r3, [pc, #20]	; (800ab5c <pvTaskIncrementMutexHeldCount+0x24>)
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ab4a:	3201      	adds	r2, #1
 800ab4c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800ab4e:	4b03      	ldr	r3, [pc, #12]	; (800ab5c <pvTaskIncrementMutexHeldCount+0x24>)
 800ab50:	681b      	ldr	r3, [r3, #0]
	}
 800ab52:	4618      	mov	r0, r3
 800ab54:	46bd      	mov	sp, r7
 800ab56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5a:	4770      	bx	lr
 800ab5c:	20005508 	.word	0x20005508

0800ab60 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b084      	sub	sp, #16
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
 800ab68:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ab6a:	4b21      	ldr	r3, [pc, #132]	; (800abf0 <prvAddCurrentTaskToDelayedList+0x90>)
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ab70:	4b20      	ldr	r3, [pc, #128]	; (800abf4 <prvAddCurrentTaskToDelayedList+0x94>)
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	3304      	adds	r3, #4
 800ab76:	4618      	mov	r0, r3
 800ab78:	f7fd ff3a 	bl	80089f0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab82:	d10a      	bne.n	800ab9a <prvAddCurrentTaskToDelayedList+0x3a>
 800ab84:	683b      	ldr	r3, [r7, #0]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d007      	beq.n	800ab9a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ab8a:	4b1a      	ldr	r3, [pc, #104]	; (800abf4 <prvAddCurrentTaskToDelayedList+0x94>)
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	3304      	adds	r3, #4
 800ab90:	4619      	mov	r1, r3
 800ab92:	4819      	ldr	r0, [pc, #100]	; (800abf8 <prvAddCurrentTaskToDelayedList+0x98>)
 800ab94:	f7fd fecf 	bl	8008936 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ab98:	e026      	b.n	800abe8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ab9a:	68fa      	ldr	r2, [r7, #12]
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	4413      	add	r3, r2
 800aba0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800aba2:	4b14      	ldr	r3, [pc, #80]	; (800abf4 <prvAddCurrentTaskToDelayedList+0x94>)
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	68ba      	ldr	r2, [r7, #8]
 800aba8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800abaa:	68ba      	ldr	r2, [r7, #8]
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	429a      	cmp	r2, r3
 800abb0:	d209      	bcs.n	800abc6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800abb2:	4b12      	ldr	r3, [pc, #72]	; (800abfc <prvAddCurrentTaskToDelayedList+0x9c>)
 800abb4:	681a      	ldr	r2, [r3, #0]
 800abb6:	4b0f      	ldr	r3, [pc, #60]	; (800abf4 <prvAddCurrentTaskToDelayedList+0x94>)
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	3304      	adds	r3, #4
 800abbc:	4619      	mov	r1, r3
 800abbe:	4610      	mov	r0, r2
 800abc0:	f7fd fedd 	bl	800897e <vListInsert>
}
 800abc4:	e010      	b.n	800abe8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800abc6:	4b0e      	ldr	r3, [pc, #56]	; (800ac00 <prvAddCurrentTaskToDelayedList+0xa0>)
 800abc8:	681a      	ldr	r2, [r3, #0]
 800abca:	4b0a      	ldr	r3, [pc, #40]	; (800abf4 <prvAddCurrentTaskToDelayedList+0x94>)
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	3304      	adds	r3, #4
 800abd0:	4619      	mov	r1, r3
 800abd2:	4610      	mov	r0, r2
 800abd4:	f7fd fed3 	bl	800897e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800abd8:	4b0a      	ldr	r3, [pc, #40]	; (800ac04 <prvAddCurrentTaskToDelayedList+0xa4>)
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	68ba      	ldr	r2, [r7, #8]
 800abde:	429a      	cmp	r2, r3
 800abe0:	d202      	bcs.n	800abe8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800abe2:	4a08      	ldr	r2, [pc, #32]	; (800ac04 <prvAddCurrentTaskToDelayedList+0xa4>)
 800abe4:	68bb      	ldr	r3, [r7, #8]
 800abe6:	6013      	str	r3, [r2, #0]
}
 800abe8:	bf00      	nop
 800abea:	3710      	adds	r7, #16
 800abec:	46bd      	mov	sp, r7
 800abee:	bd80      	pop	{r7, pc}
 800abf0:	200059e0 	.word	0x200059e0
 800abf4:	20005508 	.word	0x20005508
 800abf8:	200059c8 	.word	0x200059c8
 800abfc:	20005998 	.word	0x20005998
 800ac00:	20005994 	.word	0x20005994
 800ac04:	200059fc 	.word	0x200059fc

0800ac08 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	b08a      	sub	sp, #40	; 0x28
 800ac0c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ac0e:	2300      	movs	r3, #0
 800ac10:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ac12:	f000 fb07 	bl	800b224 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ac16:	4b1c      	ldr	r3, [pc, #112]	; (800ac88 <xTimerCreateTimerTask+0x80>)
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d021      	beq.n	800ac62 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ac1e:	2300      	movs	r3, #0
 800ac20:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ac22:	2300      	movs	r3, #0
 800ac24:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ac26:	1d3a      	adds	r2, r7, #4
 800ac28:	f107 0108 	add.w	r1, r7, #8
 800ac2c:	f107 030c 	add.w	r3, r7, #12
 800ac30:	4618      	mov	r0, r3
 800ac32:	f7fd fe39 	bl	80088a8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ac36:	6879      	ldr	r1, [r7, #4]
 800ac38:	68bb      	ldr	r3, [r7, #8]
 800ac3a:	68fa      	ldr	r2, [r7, #12]
 800ac3c:	9202      	str	r2, [sp, #8]
 800ac3e:	9301      	str	r3, [sp, #4]
 800ac40:	2302      	movs	r3, #2
 800ac42:	9300      	str	r3, [sp, #0]
 800ac44:	2300      	movs	r3, #0
 800ac46:	460a      	mov	r2, r1
 800ac48:	4910      	ldr	r1, [pc, #64]	; (800ac8c <xTimerCreateTimerTask+0x84>)
 800ac4a:	4811      	ldr	r0, [pc, #68]	; (800ac90 <xTimerCreateTimerTask+0x88>)
 800ac4c:	f7fe ffbe 	bl	8009bcc <xTaskCreateStatic>
 800ac50:	4603      	mov	r3, r0
 800ac52:	4a10      	ldr	r2, [pc, #64]	; (800ac94 <xTimerCreateTimerTask+0x8c>)
 800ac54:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ac56:	4b0f      	ldr	r3, [pc, #60]	; (800ac94 <xTimerCreateTimerTask+0x8c>)
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d001      	beq.n	800ac62 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ac5e:	2301      	movs	r3, #1
 800ac60:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ac62:	697b      	ldr	r3, [r7, #20]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d10a      	bne.n	800ac7e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800ac68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac6c:	f383 8811 	msr	BASEPRI, r3
 800ac70:	f3bf 8f6f 	isb	sy
 800ac74:	f3bf 8f4f 	dsb	sy
 800ac78:	613b      	str	r3, [r7, #16]
}
 800ac7a:	bf00      	nop
 800ac7c:	e7fe      	b.n	800ac7c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ac7e:	697b      	ldr	r3, [r7, #20]
}
 800ac80:	4618      	mov	r0, r3
 800ac82:	3718      	adds	r7, #24
 800ac84:	46bd      	mov	sp, r7
 800ac86:	bd80      	pop	{r7, pc}
 800ac88:	20005a38 	.word	0x20005a38
 800ac8c:	08019bcc 	.word	0x08019bcc
 800ac90:	0800adcd 	.word	0x0800adcd
 800ac94:	20005a3c 	.word	0x20005a3c

0800ac98 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b08a      	sub	sp, #40	; 0x28
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	60f8      	str	r0, [r7, #12]
 800aca0:	60b9      	str	r1, [r7, #8]
 800aca2:	607a      	str	r2, [r7, #4]
 800aca4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800aca6:	2300      	movs	r3, #0
 800aca8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	2b00      	cmp	r3, #0
 800acae:	d10a      	bne.n	800acc6 <xTimerGenericCommand+0x2e>
	__asm volatile
 800acb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acb4:	f383 8811 	msr	BASEPRI, r3
 800acb8:	f3bf 8f6f 	isb	sy
 800acbc:	f3bf 8f4f 	dsb	sy
 800acc0:	623b      	str	r3, [r7, #32]
}
 800acc2:	bf00      	nop
 800acc4:	e7fe      	b.n	800acc4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800acc6:	4b1a      	ldr	r3, [pc, #104]	; (800ad30 <xTimerGenericCommand+0x98>)
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	2b00      	cmp	r3, #0
 800accc:	d02a      	beq.n	800ad24 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800acce:	68bb      	ldr	r3, [r7, #8]
 800acd0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800acda:	68bb      	ldr	r3, [r7, #8]
 800acdc:	2b05      	cmp	r3, #5
 800acde:	dc18      	bgt.n	800ad12 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ace0:	f7ff fdb4 	bl	800a84c <xTaskGetSchedulerState>
 800ace4:	4603      	mov	r3, r0
 800ace6:	2b02      	cmp	r3, #2
 800ace8:	d109      	bne.n	800acfe <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800acea:	4b11      	ldr	r3, [pc, #68]	; (800ad30 <xTimerGenericCommand+0x98>)
 800acec:	6818      	ldr	r0, [r3, #0]
 800acee:	f107 0110 	add.w	r1, r7, #16
 800acf2:	2300      	movs	r3, #0
 800acf4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800acf6:	f7fe f903 	bl	8008f00 <xQueueGenericSend>
 800acfa:	6278      	str	r0, [r7, #36]	; 0x24
 800acfc:	e012      	b.n	800ad24 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800acfe:	4b0c      	ldr	r3, [pc, #48]	; (800ad30 <xTimerGenericCommand+0x98>)
 800ad00:	6818      	ldr	r0, [r3, #0]
 800ad02:	f107 0110 	add.w	r1, r7, #16
 800ad06:	2300      	movs	r3, #0
 800ad08:	2200      	movs	r2, #0
 800ad0a:	f7fe f8f9 	bl	8008f00 <xQueueGenericSend>
 800ad0e:	6278      	str	r0, [r7, #36]	; 0x24
 800ad10:	e008      	b.n	800ad24 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ad12:	4b07      	ldr	r3, [pc, #28]	; (800ad30 <xTimerGenericCommand+0x98>)
 800ad14:	6818      	ldr	r0, [r3, #0]
 800ad16:	f107 0110 	add.w	r1, r7, #16
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	683a      	ldr	r2, [r7, #0]
 800ad1e:	f7fe f9ed 	bl	80090fc <xQueueGenericSendFromISR>
 800ad22:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ad24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ad26:	4618      	mov	r0, r3
 800ad28:	3728      	adds	r7, #40	; 0x28
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	bd80      	pop	{r7, pc}
 800ad2e:	bf00      	nop
 800ad30:	20005a38 	.word	0x20005a38

0800ad34 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b088      	sub	sp, #32
 800ad38:	af02      	add	r7, sp, #8
 800ad3a:	6078      	str	r0, [r7, #4]
 800ad3c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad3e:	4b22      	ldr	r3, [pc, #136]	; (800adc8 <prvProcessExpiredTimer+0x94>)
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	68db      	ldr	r3, [r3, #12]
 800ad44:	68db      	ldr	r3, [r3, #12]
 800ad46:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ad48:	697b      	ldr	r3, [r7, #20]
 800ad4a:	3304      	adds	r3, #4
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	f7fd fe4f 	bl	80089f0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ad52:	697b      	ldr	r3, [r7, #20]
 800ad54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ad58:	f003 0304 	and.w	r3, r3, #4
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d022      	beq.n	800ada6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ad60:	697b      	ldr	r3, [r7, #20]
 800ad62:	699a      	ldr	r2, [r3, #24]
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	18d1      	adds	r1, r2, r3
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	683a      	ldr	r2, [r7, #0]
 800ad6c:	6978      	ldr	r0, [r7, #20]
 800ad6e:	f000 f8d1 	bl	800af14 <prvInsertTimerInActiveList>
 800ad72:	4603      	mov	r3, r0
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d01f      	beq.n	800adb8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ad78:	2300      	movs	r3, #0
 800ad7a:	9300      	str	r3, [sp, #0]
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	687a      	ldr	r2, [r7, #4]
 800ad80:	2100      	movs	r1, #0
 800ad82:	6978      	ldr	r0, [r7, #20]
 800ad84:	f7ff ff88 	bl	800ac98 <xTimerGenericCommand>
 800ad88:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ad8a:	693b      	ldr	r3, [r7, #16]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d113      	bne.n	800adb8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800ad90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad94:	f383 8811 	msr	BASEPRI, r3
 800ad98:	f3bf 8f6f 	isb	sy
 800ad9c:	f3bf 8f4f 	dsb	sy
 800ada0:	60fb      	str	r3, [r7, #12]
}
 800ada2:	bf00      	nop
 800ada4:	e7fe      	b.n	800ada4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ada6:	697b      	ldr	r3, [r7, #20]
 800ada8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800adac:	f023 0301 	bic.w	r3, r3, #1
 800adb0:	b2da      	uxtb	r2, r3
 800adb2:	697b      	ldr	r3, [r7, #20]
 800adb4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800adb8:	697b      	ldr	r3, [r7, #20]
 800adba:	6a1b      	ldr	r3, [r3, #32]
 800adbc:	6978      	ldr	r0, [r7, #20]
 800adbe:	4798      	blx	r3
}
 800adc0:	bf00      	nop
 800adc2:	3718      	adds	r7, #24
 800adc4:	46bd      	mov	sp, r7
 800adc6:	bd80      	pop	{r7, pc}
 800adc8:	20005a30 	.word	0x20005a30

0800adcc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800adcc:	b580      	push	{r7, lr}
 800adce:	b084      	sub	sp, #16
 800add0:	af00      	add	r7, sp, #0
 800add2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800add4:	f107 0308 	add.w	r3, r7, #8
 800add8:	4618      	mov	r0, r3
 800adda:	f000 f857 	bl	800ae8c <prvGetNextExpireTime>
 800adde:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ade0:	68bb      	ldr	r3, [r7, #8]
 800ade2:	4619      	mov	r1, r3
 800ade4:	68f8      	ldr	r0, [r7, #12]
 800ade6:	f000 f803 	bl	800adf0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800adea:	f000 f8d5 	bl	800af98 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800adee:	e7f1      	b.n	800add4 <prvTimerTask+0x8>

0800adf0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800adf0:	b580      	push	{r7, lr}
 800adf2:	b084      	sub	sp, #16
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]
 800adf8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800adfa:	f7ff f923 	bl	800a044 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800adfe:	f107 0308 	add.w	r3, r7, #8
 800ae02:	4618      	mov	r0, r3
 800ae04:	f000 f866 	bl	800aed4 <prvSampleTimeNow>
 800ae08:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ae0a:	68bb      	ldr	r3, [r7, #8]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d130      	bne.n	800ae72 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ae10:	683b      	ldr	r3, [r7, #0]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d10a      	bne.n	800ae2c <prvProcessTimerOrBlockTask+0x3c>
 800ae16:	687a      	ldr	r2, [r7, #4]
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	429a      	cmp	r2, r3
 800ae1c:	d806      	bhi.n	800ae2c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ae1e:	f7ff f91f 	bl	800a060 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ae22:	68f9      	ldr	r1, [r7, #12]
 800ae24:	6878      	ldr	r0, [r7, #4]
 800ae26:	f7ff ff85 	bl	800ad34 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ae2a:	e024      	b.n	800ae76 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ae2c:	683b      	ldr	r3, [r7, #0]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d008      	beq.n	800ae44 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ae32:	4b13      	ldr	r3, [pc, #76]	; (800ae80 <prvProcessTimerOrBlockTask+0x90>)
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d101      	bne.n	800ae40 <prvProcessTimerOrBlockTask+0x50>
 800ae3c:	2301      	movs	r3, #1
 800ae3e:	e000      	b.n	800ae42 <prvProcessTimerOrBlockTask+0x52>
 800ae40:	2300      	movs	r3, #0
 800ae42:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ae44:	4b0f      	ldr	r3, [pc, #60]	; (800ae84 <prvProcessTimerOrBlockTask+0x94>)
 800ae46:	6818      	ldr	r0, [r3, #0]
 800ae48:	687a      	ldr	r2, [r7, #4]
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	1ad3      	subs	r3, r2, r3
 800ae4e:	683a      	ldr	r2, [r7, #0]
 800ae50:	4619      	mov	r1, r3
 800ae52:	f7fe fe87 	bl	8009b64 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ae56:	f7ff f903 	bl	800a060 <xTaskResumeAll>
 800ae5a:	4603      	mov	r3, r0
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d10a      	bne.n	800ae76 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ae60:	4b09      	ldr	r3, [pc, #36]	; (800ae88 <prvProcessTimerOrBlockTask+0x98>)
 800ae62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae66:	601a      	str	r2, [r3, #0]
 800ae68:	f3bf 8f4f 	dsb	sy
 800ae6c:	f3bf 8f6f 	isb	sy
}
 800ae70:	e001      	b.n	800ae76 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ae72:	f7ff f8f5 	bl	800a060 <xTaskResumeAll>
}
 800ae76:	bf00      	nop
 800ae78:	3710      	adds	r7, #16
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	bd80      	pop	{r7, pc}
 800ae7e:	bf00      	nop
 800ae80:	20005a34 	.word	0x20005a34
 800ae84:	20005a38 	.word	0x20005a38
 800ae88:	e000ed04 	.word	0xe000ed04

0800ae8c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ae8c:	b480      	push	{r7}
 800ae8e:	b085      	sub	sp, #20
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ae94:	4b0e      	ldr	r3, [pc, #56]	; (800aed0 <prvGetNextExpireTime+0x44>)
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d101      	bne.n	800aea2 <prvGetNextExpireTime+0x16>
 800ae9e:	2201      	movs	r2, #1
 800aea0:	e000      	b.n	800aea4 <prvGetNextExpireTime+0x18>
 800aea2:	2200      	movs	r2, #0
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d105      	bne.n	800aebc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800aeb0:	4b07      	ldr	r3, [pc, #28]	; (800aed0 <prvGetNextExpireTime+0x44>)
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	68db      	ldr	r3, [r3, #12]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	60fb      	str	r3, [r7, #12]
 800aeba:	e001      	b.n	800aec0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800aebc:	2300      	movs	r3, #0
 800aebe:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800aec0:	68fb      	ldr	r3, [r7, #12]
}
 800aec2:	4618      	mov	r0, r3
 800aec4:	3714      	adds	r7, #20
 800aec6:	46bd      	mov	sp, r7
 800aec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aecc:	4770      	bx	lr
 800aece:	bf00      	nop
 800aed0:	20005a30 	.word	0x20005a30

0800aed4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800aed4:	b580      	push	{r7, lr}
 800aed6:	b084      	sub	sp, #16
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800aedc:	f7ff f95e 	bl	800a19c <xTaskGetTickCount>
 800aee0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800aee2:	4b0b      	ldr	r3, [pc, #44]	; (800af10 <prvSampleTimeNow+0x3c>)
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	68fa      	ldr	r2, [r7, #12]
 800aee8:	429a      	cmp	r2, r3
 800aeea:	d205      	bcs.n	800aef8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800aeec:	f000 f936 	bl	800b15c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	2201      	movs	r2, #1
 800aef4:	601a      	str	r2, [r3, #0]
 800aef6:	e002      	b.n	800aefe <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	2200      	movs	r2, #0
 800aefc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800aefe:	4a04      	ldr	r2, [pc, #16]	; (800af10 <prvSampleTimeNow+0x3c>)
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800af04:	68fb      	ldr	r3, [r7, #12]
}
 800af06:	4618      	mov	r0, r3
 800af08:	3710      	adds	r7, #16
 800af0a:	46bd      	mov	sp, r7
 800af0c:	bd80      	pop	{r7, pc}
 800af0e:	bf00      	nop
 800af10:	20005a40 	.word	0x20005a40

0800af14 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800af14:	b580      	push	{r7, lr}
 800af16:	b086      	sub	sp, #24
 800af18:	af00      	add	r7, sp, #0
 800af1a:	60f8      	str	r0, [r7, #12]
 800af1c:	60b9      	str	r1, [r7, #8]
 800af1e:	607a      	str	r2, [r7, #4]
 800af20:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800af22:	2300      	movs	r3, #0
 800af24:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	68ba      	ldr	r2, [r7, #8]
 800af2a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	68fa      	ldr	r2, [r7, #12]
 800af30:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800af32:	68ba      	ldr	r2, [r7, #8]
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	429a      	cmp	r2, r3
 800af38:	d812      	bhi.n	800af60 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af3a:	687a      	ldr	r2, [r7, #4]
 800af3c:	683b      	ldr	r3, [r7, #0]
 800af3e:	1ad2      	subs	r2, r2, r3
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	699b      	ldr	r3, [r3, #24]
 800af44:	429a      	cmp	r2, r3
 800af46:	d302      	bcc.n	800af4e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800af48:	2301      	movs	r3, #1
 800af4a:	617b      	str	r3, [r7, #20]
 800af4c:	e01b      	b.n	800af86 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800af4e:	4b10      	ldr	r3, [pc, #64]	; (800af90 <prvInsertTimerInActiveList+0x7c>)
 800af50:	681a      	ldr	r2, [r3, #0]
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	3304      	adds	r3, #4
 800af56:	4619      	mov	r1, r3
 800af58:	4610      	mov	r0, r2
 800af5a:	f7fd fd10 	bl	800897e <vListInsert>
 800af5e:	e012      	b.n	800af86 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800af60:	687a      	ldr	r2, [r7, #4]
 800af62:	683b      	ldr	r3, [r7, #0]
 800af64:	429a      	cmp	r2, r3
 800af66:	d206      	bcs.n	800af76 <prvInsertTimerInActiveList+0x62>
 800af68:	68ba      	ldr	r2, [r7, #8]
 800af6a:	683b      	ldr	r3, [r7, #0]
 800af6c:	429a      	cmp	r2, r3
 800af6e:	d302      	bcc.n	800af76 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800af70:	2301      	movs	r3, #1
 800af72:	617b      	str	r3, [r7, #20]
 800af74:	e007      	b.n	800af86 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800af76:	4b07      	ldr	r3, [pc, #28]	; (800af94 <prvInsertTimerInActiveList+0x80>)
 800af78:	681a      	ldr	r2, [r3, #0]
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	3304      	adds	r3, #4
 800af7e:	4619      	mov	r1, r3
 800af80:	4610      	mov	r0, r2
 800af82:	f7fd fcfc 	bl	800897e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800af86:	697b      	ldr	r3, [r7, #20]
}
 800af88:	4618      	mov	r0, r3
 800af8a:	3718      	adds	r7, #24
 800af8c:	46bd      	mov	sp, r7
 800af8e:	bd80      	pop	{r7, pc}
 800af90:	20005a34 	.word	0x20005a34
 800af94:	20005a30 	.word	0x20005a30

0800af98 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800af98:	b580      	push	{r7, lr}
 800af9a:	b08e      	sub	sp, #56	; 0x38
 800af9c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800af9e:	e0ca      	b.n	800b136 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	da18      	bge.n	800afd8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800afa6:	1d3b      	adds	r3, r7, #4
 800afa8:	3304      	adds	r3, #4
 800afaa:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800afac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d10a      	bne.n	800afc8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800afb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afb6:	f383 8811 	msr	BASEPRI, r3
 800afba:	f3bf 8f6f 	isb	sy
 800afbe:	f3bf 8f4f 	dsb	sy
 800afc2:	61fb      	str	r3, [r7, #28]
}
 800afc4:	bf00      	nop
 800afc6:	e7fe      	b.n	800afc6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800afc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800afce:	6850      	ldr	r0, [r2, #4]
 800afd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800afd2:	6892      	ldr	r2, [r2, #8]
 800afd4:	4611      	mov	r1, r2
 800afd6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	2b00      	cmp	r3, #0
 800afdc:	f2c0 80aa 	blt.w	800b134 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800afe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afe6:	695b      	ldr	r3, [r3, #20]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d004      	beq.n	800aff6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800afec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afee:	3304      	adds	r3, #4
 800aff0:	4618      	mov	r0, r3
 800aff2:	f7fd fcfd 	bl	80089f0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800aff6:	463b      	mov	r3, r7
 800aff8:	4618      	mov	r0, r3
 800affa:	f7ff ff6b 	bl	800aed4 <prvSampleTimeNow>
 800affe:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	2b09      	cmp	r3, #9
 800b004:	f200 8097 	bhi.w	800b136 <prvProcessReceivedCommands+0x19e>
 800b008:	a201      	add	r2, pc, #4	; (adr r2, 800b010 <prvProcessReceivedCommands+0x78>)
 800b00a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b00e:	bf00      	nop
 800b010:	0800b039 	.word	0x0800b039
 800b014:	0800b039 	.word	0x0800b039
 800b018:	0800b039 	.word	0x0800b039
 800b01c:	0800b0ad 	.word	0x0800b0ad
 800b020:	0800b0c1 	.word	0x0800b0c1
 800b024:	0800b10b 	.word	0x0800b10b
 800b028:	0800b039 	.word	0x0800b039
 800b02c:	0800b039 	.word	0x0800b039
 800b030:	0800b0ad 	.word	0x0800b0ad
 800b034:	0800b0c1 	.word	0x0800b0c1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b03a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b03e:	f043 0301 	orr.w	r3, r3, #1
 800b042:	b2da      	uxtb	r2, r3
 800b044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b046:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b04a:	68ba      	ldr	r2, [r7, #8]
 800b04c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b04e:	699b      	ldr	r3, [r3, #24]
 800b050:	18d1      	adds	r1, r2, r3
 800b052:	68bb      	ldr	r3, [r7, #8]
 800b054:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b056:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b058:	f7ff ff5c 	bl	800af14 <prvInsertTimerInActiveList>
 800b05c:	4603      	mov	r3, r0
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d069      	beq.n	800b136 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b064:	6a1b      	ldr	r3, [r3, #32]
 800b066:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b068:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b06a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b06c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b070:	f003 0304 	and.w	r3, r3, #4
 800b074:	2b00      	cmp	r3, #0
 800b076:	d05e      	beq.n	800b136 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b078:	68ba      	ldr	r2, [r7, #8]
 800b07a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b07c:	699b      	ldr	r3, [r3, #24]
 800b07e:	441a      	add	r2, r3
 800b080:	2300      	movs	r3, #0
 800b082:	9300      	str	r3, [sp, #0]
 800b084:	2300      	movs	r3, #0
 800b086:	2100      	movs	r1, #0
 800b088:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b08a:	f7ff fe05 	bl	800ac98 <xTimerGenericCommand>
 800b08e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b090:	6a3b      	ldr	r3, [r7, #32]
 800b092:	2b00      	cmp	r3, #0
 800b094:	d14f      	bne.n	800b136 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800b096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b09a:	f383 8811 	msr	BASEPRI, r3
 800b09e:	f3bf 8f6f 	isb	sy
 800b0a2:	f3bf 8f4f 	dsb	sy
 800b0a6:	61bb      	str	r3, [r7, #24]
}
 800b0a8:	bf00      	nop
 800b0aa:	e7fe      	b.n	800b0aa <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b0ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b0b2:	f023 0301 	bic.w	r3, r3, #1
 800b0b6:	b2da      	uxtb	r2, r3
 800b0b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b0be:	e03a      	b.n	800b136 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b0c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b0c6:	f043 0301 	orr.w	r3, r3, #1
 800b0ca:	b2da      	uxtb	r2, r3
 800b0cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b0d2:	68ba      	ldr	r2, [r7, #8]
 800b0d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0d6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b0d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0da:	699b      	ldr	r3, [r3, #24]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d10a      	bne.n	800b0f6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800b0e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0e4:	f383 8811 	msr	BASEPRI, r3
 800b0e8:	f3bf 8f6f 	isb	sy
 800b0ec:	f3bf 8f4f 	dsb	sy
 800b0f0:	617b      	str	r3, [r7, #20]
}
 800b0f2:	bf00      	nop
 800b0f4:	e7fe      	b.n	800b0f4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b0f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0f8:	699a      	ldr	r2, [r3, #24]
 800b0fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0fc:	18d1      	adds	r1, r2, r3
 800b0fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b100:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b102:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b104:	f7ff ff06 	bl	800af14 <prvInsertTimerInActiveList>
					break;
 800b108:	e015      	b.n	800b136 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b10a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b10c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b110:	f003 0302 	and.w	r3, r3, #2
 800b114:	2b00      	cmp	r3, #0
 800b116:	d103      	bne.n	800b120 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800b118:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b11a:	f000 fbe1 	bl	800b8e0 <vPortFree>
 800b11e:	e00a      	b.n	800b136 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b122:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b126:	f023 0301 	bic.w	r3, r3, #1
 800b12a:	b2da      	uxtb	r2, r3
 800b12c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b12e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b132:	e000      	b.n	800b136 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b134:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b136:	4b08      	ldr	r3, [pc, #32]	; (800b158 <prvProcessReceivedCommands+0x1c0>)
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	1d39      	adds	r1, r7, #4
 800b13c:	2200      	movs	r2, #0
 800b13e:	4618      	mov	r0, r3
 800b140:	f7fe f904 	bl	800934c <xQueueReceive>
 800b144:	4603      	mov	r3, r0
 800b146:	2b00      	cmp	r3, #0
 800b148:	f47f af2a 	bne.w	800afa0 <prvProcessReceivedCommands+0x8>
	}
}
 800b14c:	bf00      	nop
 800b14e:	bf00      	nop
 800b150:	3730      	adds	r7, #48	; 0x30
 800b152:	46bd      	mov	sp, r7
 800b154:	bd80      	pop	{r7, pc}
 800b156:	bf00      	nop
 800b158:	20005a38 	.word	0x20005a38

0800b15c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b15c:	b580      	push	{r7, lr}
 800b15e:	b088      	sub	sp, #32
 800b160:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b162:	e048      	b.n	800b1f6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b164:	4b2d      	ldr	r3, [pc, #180]	; (800b21c <prvSwitchTimerLists+0xc0>)
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	68db      	ldr	r3, [r3, #12]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b16e:	4b2b      	ldr	r3, [pc, #172]	; (800b21c <prvSwitchTimerLists+0xc0>)
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	68db      	ldr	r3, [r3, #12]
 800b174:	68db      	ldr	r3, [r3, #12]
 800b176:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	3304      	adds	r3, #4
 800b17c:	4618      	mov	r0, r3
 800b17e:	f7fd fc37 	bl	80089f0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	6a1b      	ldr	r3, [r3, #32]
 800b186:	68f8      	ldr	r0, [r7, #12]
 800b188:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b190:	f003 0304 	and.w	r3, r3, #4
 800b194:	2b00      	cmp	r3, #0
 800b196:	d02e      	beq.n	800b1f6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	699b      	ldr	r3, [r3, #24]
 800b19c:	693a      	ldr	r2, [r7, #16]
 800b19e:	4413      	add	r3, r2
 800b1a0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b1a2:	68ba      	ldr	r2, [r7, #8]
 800b1a4:	693b      	ldr	r3, [r7, #16]
 800b1a6:	429a      	cmp	r2, r3
 800b1a8:	d90e      	bls.n	800b1c8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	68ba      	ldr	r2, [r7, #8]
 800b1ae:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	68fa      	ldr	r2, [r7, #12]
 800b1b4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b1b6:	4b19      	ldr	r3, [pc, #100]	; (800b21c <prvSwitchTimerLists+0xc0>)
 800b1b8:	681a      	ldr	r2, [r3, #0]
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	3304      	adds	r3, #4
 800b1be:	4619      	mov	r1, r3
 800b1c0:	4610      	mov	r0, r2
 800b1c2:	f7fd fbdc 	bl	800897e <vListInsert>
 800b1c6:	e016      	b.n	800b1f6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	9300      	str	r3, [sp, #0]
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	693a      	ldr	r2, [r7, #16]
 800b1d0:	2100      	movs	r1, #0
 800b1d2:	68f8      	ldr	r0, [r7, #12]
 800b1d4:	f7ff fd60 	bl	800ac98 <xTimerGenericCommand>
 800b1d8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d10a      	bne.n	800b1f6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800b1e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1e4:	f383 8811 	msr	BASEPRI, r3
 800b1e8:	f3bf 8f6f 	isb	sy
 800b1ec:	f3bf 8f4f 	dsb	sy
 800b1f0:	603b      	str	r3, [r7, #0]
}
 800b1f2:	bf00      	nop
 800b1f4:	e7fe      	b.n	800b1f4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b1f6:	4b09      	ldr	r3, [pc, #36]	; (800b21c <prvSwitchTimerLists+0xc0>)
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d1b1      	bne.n	800b164 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b200:	4b06      	ldr	r3, [pc, #24]	; (800b21c <prvSwitchTimerLists+0xc0>)
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b206:	4b06      	ldr	r3, [pc, #24]	; (800b220 <prvSwitchTimerLists+0xc4>)
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	4a04      	ldr	r2, [pc, #16]	; (800b21c <prvSwitchTimerLists+0xc0>)
 800b20c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b20e:	4a04      	ldr	r2, [pc, #16]	; (800b220 <prvSwitchTimerLists+0xc4>)
 800b210:	697b      	ldr	r3, [r7, #20]
 800b212:	6013      	str	r3, [r2, #0]
}
 800b214:	bf00      	nop
 800b216:	3718      	adds	r7, #24
 800b218:	46bd      	mov	sp, r7
 800b21a:	bd80      	pop	{r7, pc}
 800b21c:	20005a30 	.word	0x20005a30
 800b220:	20005a34 	.word	0x20005a34

0800b224 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b224:	b580      	push	{r7, lr}
 800b226:	b082      	sub	sp, #8
 800b228:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b22a:	f000 f96b 	bl	800b504 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b22e:	4b15      	ldr	r3, [pc, #84]	; (800b284 <prvCheckForValidListAndQueue+0x60>)
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d120      	bne.n	800b278 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b236:	4814      	ldr	r0, [pc, #80]	; (800b288 <prvCheckForValidListAndQueue+0x64>)
 800b238:	f7fd fb50 	bl	80088dc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b23c:	4813      	ldr	r0, [pc, #76]	; (800b28c <prvCheckForValidListAndQueue+0x68>)
 800b23e:	f7fd fb4d 	bl	80088dc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b242:	4b13      	ldr	r3, [pc, #76]	; (800b290 <prvCheckForValidListAndQueue+0x6c>)
 800b244:	4a10      	ldr	r2, [pc, #64]	; (800b288 <prvCheckForValidListAndQueue+0x64>)
 800b246:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b248:	4b12      	ldr	r3, [pc, #72]	; (800b294 <prvCheckForValidListAndQueue+0x70>)
 800b24a:	4a10      	ldr	r2, [pc, #64]	; (800b28c <prvCheckForValidListAndQueue+0x68>)
 800b24c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b24e:	2300      	movs	r3, #0
 800b250:	9300      	str	r3, [sp, #0]
 800b252:	4b11      	ldr	r3, [pc, #68]	; (800b298 <prvCheckForValidListAndQueue+0x74>)
 800b254:	4a11      	ldr	r2, [pc, #68]	; (800b29c <prvCheckForValidListAndQueue+0x78>)
 800b256:	2110      	movs	r1, #16
 800b258:	200a      	movs	r0, #10
 800b25a:	f7fd fc5b 	bl	8008b14 <xQueueGenericCreateStatic>
 800b25e:	4603      	mov	r3, r0
 800b260:	4a08      	ldr	r2, [pc, #32]	; (800b284 <prvCheckForValidListAndQueue+0x60>)
 800b262:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b264:	4b07      	ldr	r3, [pc, #28]	; (800b284 <prvCheckForValidListAndQueue+0x60>)
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d005      	beq.n	800b278 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b26c:	4b05      	ldr	r3, [pc, #20]	; (800b284 <prvCheckForValidListAndQueue+0x60>)
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	490b      	ldr	r1, [pc, #44]	; (800b2a0 <prvCheckForValidListAndQueue+0x7c>)
 800b272:	4618      	mov	r0, r3
 800b274:	f7fe fc22 	bl	8009abc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b278:	f000 f974 	bl	800b564 <vPortExitCritical>
}
 800b27c:	bf00      	nop
 800b27e:	46bd      	mov	sp, r7
 800b280:	bd80      	pop	{r7, pc}
 800b282:	bf00      	nop
 800b284:	20005a38 	.word	0x20005a38
 800b288:	20005a08 	.word	0x20005a08
 800b28c:	20005a1c 	.word	0x20005a1c
 800b290:	20005a30 	.word	0x20005a30
 800b294:	20005a34 	.word	0x20005a34
 800b298:	20005ae4 	.word	0x20005ae4
 800b29c:	20005a44 	.word	0x20005a44
 800b2a0:	08019bd4 	.word	0x08019bd4

0800b2a4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b2a4:	b480      	push	{r7}
 800b2a6:	b085      	sub	sp, #20
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	60f8      	str	r0, [r7, #12]
 800b2ac:	60b9      	str	r1, [r7, #8]
 800b2ae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	3b04      	subs	r3, #4
 800b2b4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b2bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	3b04      	subs	r3, #4
 800b2c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b2c4:	68bb      	ldr	r3, [r7, #8]
 800b2c6:	f023 0201 	bic.w	r2, r3, #1
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	3b04      	subs	r3, #4
 800b2d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b2d4:	4a0c      	ldr	r2, [pc, #48]	; (800b308 <pxPortInitialiseStack+0x64>)
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	3b14      	subs	r3, #20
 800b2de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b2e0:	687a      	ldr	r2, [r7, #4]
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	3b04      	subs	r3, #4
 800b2ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	f06f 0202 	mvn.w	r2, #2
 800b2f2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	3b20      	subs	r3, #32
 800b2f8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b2fa:	68fb      	ldr	r3, [r7, #12]
}
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	3714      	adds	r7, #20
 800b300:	46bd      	mov	sp, r7
 800b302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b306:	4770      	bx	lr
 800b308:	0800b30d 	.word	0x0800b30d

0800b30c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b30c:	b480      	push	{r7}
 800b30e:	b085      	sub	sp, #20
 800b310:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b312:	2300      	movs	r3, #0
 800b314:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b316:	4b12      	ldr	r3, [pc, #72]	; (800b360 <prvTaskExitError+0x54>)
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b31e:	d00a      	beq.n	800b336 <prvTaskExitError+0x2a>
	__asm volatile
 800b320:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b324:	f383 8811 	msr	BASEPRI, r3
 800b328:	f3bf 8f6f 	isb	sy
 800b32c:	f3bf 8f4f 	dsb	sy
 800b330:	60fb      	str	r3, [r7, #12]
}
 800b332:	bf00      	nop
 800b334:	e7fe      	b.n	800b334 <prvTaskExitError+0x28>
	__asm volatile
 800b336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b33a:	f383 8811 	msr	BASEPRI, r3
 800b33e:	f3bf 8f6f 	isb	sy
 800b342:	f3bf 8f4f 	dsb	sy
 800b346:	60bb      	str	r3, [r7, #8]
}
 800b348:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b34a:	bf00      	nop
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d0fc      	beq.n	800b34c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b352:	bf00      	nop
 800b354:	bf00      	nop
 800b356:	3714      	adds	r7, #20
 800b358:	46bd      	mov	sp, r7
 800b35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35e:	4770      	bx	lr
 800b360:	20000098 	.word	0x20000098
	...

0800b370 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b370:	4b07      	ldr	r3, [pc, #28]	; (800b390 <pxCurrentTCBConst2>)
 800b372:	6819      	ldr	r1, [r3, #0]
 800b374:	6808      	ldr	r0, [r1, #0]
 800b376:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b37a:	f380 8809 	msr	PSP, r0
 800b37e:	f3bf 8f6f 	isb	sy
 800b382:	f04f 0000 	mov.w	r0, #0
 800b386:	f380 8811 	msr	BASEPRI, r0
 800b38a:	4770      	bx	lr
 800b38c:	f3af 8000 	nop.w

0800b390 <pxCurrentTCBConst2>:
 800b390:	20005508 	.word	0x20005508
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b394:	bf00      	nop
 800b396:	bf00      	nop

0800b398 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b398:	4808      	ldr	r0, [pc, #32]	; (800b3bc <prvPortStartFirstTask+0x24>)
 800b39a:	6800      	ldr	r0, [r0, #0]
 800b39c:	6800      	ldr	r0, [r0, #0]
 800b39e:	f380 8808 	msr	MSP, r0
 800b3a2:	f04f 0000 	mov.w	r0, #0
 800b3a6:	f380 8814 	msr	CONTROL, r0
 800b3aa:	b662      	cpsie	i
 800b3ac:	b661      	cpsie	f
 800b3ae:	f3bf 8f4f 	dsb	sy
 800b3b2:	f3bf 8f6f 	isb	sy
 800b3b6:	df00      	svc	0
 800b3b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b3ba:	bf00      	nop
 800b3bc:	e000ed08 	.word	0xe000ed08

0800b3c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b3c0:	b580      	push	{r7, lr}
 800b3c2:	b086      	sub	sp, #24
 800b3c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b3c6:	4b46      	ldr	r3, [pc, #280]	; (800b4e0 <xPortStartScheduler+0x120>)
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	4a46      	ldr	r2, [pc, #280]	; (800b4e4 <xPortStartScheduler+0x124>)
 800b3cc:	4293      	cmp	r3, r2
 800b3ce:	d10a      	bne.n	800b3e6 <xPortStartScheduler+0x26>
	__asm volatile
 800b3d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3d4:	f383 8811 	msr	BASEPRI, r3
 800b3d8:	f3bf 8f6f 	isb	sy
 800b3dc:	f3bf 8f4f 	dsb	sy
 800b3e0:	613b      	str	r3, [r7, #16]
}
 800b3e2:	bf00      	nop
 800b3e4:	e7fe      	b.n	800b3e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b3e6:	4b3e      	ldr	r3, [pc, #248]	; (800b4e0 <xPortStartScheduler+0x120>)
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	4a3f      	ldr	r2, [pc, #252]	; (800b4e8 <xPortStartScheduler+0x128>)
 800b3ec:	4293      	cmp	r3, r2
 800b3ee:	d10a      	bne.n	800b406 <xPortStartScheduler+0x46>
	__asm volatile
 800b3f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3f4:	f383 8811 	msr	BASEPRI, r3
 800b3f8:	f3bf 8f6f 	isb	sy
 800b3fc:	f3bf 8f4f 	dsb	sy
 800b400:	60fb      	str	r3, [r7, #12]
}
 800b402:	bf00      	nop
 800b404:	e7fe      	b.n	800b404 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b406:	4b39      	ldr	r3, [pc, #228]	; (800b4ec <xPortStartScheduler+0x12c>)
 800b408:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b40a:	697b      	ldr	r3, [r7, #20]
 800b40c:	781b      	ldrb	r3, [r3, #0]
 800b40e:	b2db      	uxtb	r3, r3
 800b410:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b412:	697b      	ldr	r3, [r7, #20]
 800b414:	22ff      	movs	r2, #255	; 0xff
 800b416:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b418:	697b      	ldr	r3, [r7, #20]
 800b41a:	781b      	ldrb	r3, [r3, #0]
 800b41c:	b2db      	uxtb	r3, r3
 800b41e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b420:	78fb      	ldrb	r3, [r7, #3]
 800b422:	b2db      	uxtb	r3, r3
 800b424:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b428:	b2da      	uxtb	r2, r3
 800b42a:	4b31      	ldr	r3, [pc, #196]	; (800b4f0 <xPortStartScheduler+0x130>)
 800b42c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b42e:	4b31      	ldr	r3, [pc, #196]	; (800b4f4 <xPortStartScheduler+0x134>)
 800b430:	2207      	movs	r2, #7
 800b432:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b434:	e009      	b.n	800b44a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b436:	4b2f      	ldr	r3, [pc, #188]	; (800b4f4 <xPortStartScheduler+0x134>)
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	3b01      	subs	r3, #1
 800b43c:	4a2d      	ldr	r2, [pc, #180]	; (800b4f4 <xPortStartScheduler+0x134>)
 800b43e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b440:	78fb      	ldrb	r3, [r7, #3]
 800b442:	b2db      	uxtb	r3, r3
 800b444:	005b      	lsls	r3, r3, #1
 800b446:	b2db      	uxtb	r3, r3
 800b448:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b44a:	78fb      	ldrb	r3, [r7, #3]
 800b44c:	b2db      	uxtb	r3, r3
 800b44e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b452:	2b80      	cmp	r3, #128	; 0x80
 800b454:	d0ef      	beq.n	800b436 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b456:	4b27      	ldr	r3, [pc, #156]	; (800b4f4 <xPortStartScheduler+0x134>)
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	f1c3 0307 	rsb	r3, r3, #7
 800b45e:	2b04      	cmp	r3, #4
 800b460:	d00a      	beq.n	800b478 <xPortStartScheduler+0xb8>
	__asm volatile
 800b462:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b466:	f383 8811 	msr	BASEPRI, r3
 800b46a:	f3bf 8f6f 	isb	sy
 800b46e:	f3bf 8f4f 	dsb	sy
 800b472:	60bb      	str	r3, [r7, #8]
}
 800b474:	bf00      	nop
 800b476:	e7fe      	b.n	800b476 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b478:	4b1e      	ldr	r3, [pc, #120]	; (800b4f4 <xPortStartScheduler+0x134>)
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	021b      	lsls	r3, r3, #8
 800b47e:	4a1d      	ldr	r2, [pc, #116]	; (800b4f4 <xPortStartScheduler+0x134>)
 800b480:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b482:	4b1c      	ldr	r3, [pc, #112]	; (800b4f4 <xPortStartScheduler+0x134>)
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b48a:	4a1a      	ldr	r2, [pc, #104]	; (800b4f4 <xPortStartScheduler+0x134>)
 800b48c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	b2da      	uxtb	r2, r3
 800b492:	697b      	ldr	r3, [r7, #20]
 800b494:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b496:	4b18      	ldr	r3, [pc, #96]	; (800b4f8 <xPortStartScheduler+0x138>)
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	4a17      	ldr	r2, [pc, #92]	; (800b4f8 <xPortStartScheduler+0x138>)
 800b49c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b4a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b4a2:	4b15      	ldr	r3, [pc, #84]	; (800b4f8 <xPortStartScheduler+0x138>)
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	4a14      	ldr	r2, [pc, #80]	; (800b4f8 <xPortStartScheduler+0x138>)
 800b4a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b4ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b4ae:	f000 f8dd 	bl	800b66c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b4b2:	4b12      	ldr	r3, [pc, #72]	; (800b4fc <xPortStartScheduler+0x13c>)
 800b4b4:	2200      	movs	r2, #0
 800b4b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b4b8:	f000 f8fc 	bl	800b6b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b4bc:	4b10      	ldr	r3, [pc, #64]	; (800b500 <xPortStartScheduler+0x140>)
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	4a0f      	ldr	r2, [pc, #60]	; (800b500 <xPortStartScheduler+0x140>)
 800b4c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b4c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b4c8:	f7ff ff66 	bl	800b398 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b4cc:	f7fe ff42 	bl	800a354 <vTaskSwitchContext>
	prvTaskExitError();
 800b4d0:	f7ff ff1c 	bl	800b30c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b4d4:	2300      	movs	r3, #0
}
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	3718      	adds	r7, #24
 800b4da:	46bd      	mov	sp, r7
 800b4dc:	bd80      	pop	{r7, pc}
 800b4de:	bf00      	nop
 800b4e0:	e000ed00 	.word	0xe000ed00
 800b4e4:	410fc271 	.word	0x410fc271
 800b4e8:	410fc270 	.word	0x410fc270
 800b4ec:	e000e400 	.word	0xe000e400
 800b4f0:	20005b34 	.word	0x20005b34
 800b4f4:	20005b38 	.word	0x20005b38
 800b4f8:	e000ed20 	.word	0xe000ed20
 800b4fc:	20000098 	.word	0x20000098
 800b500:	e000ef34 	.word	0xe000ef34

0800b504 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b504:	b480      	push	{r7}
 800b506:	b083      	sub	sp, #12
 800b508:	af00      	add	r7, sp, #0
	__asm volatile
 800b50a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b50e:	f383 8811 	msr	BASEPRI, r3
 800b512:	f3bf 8f6f 	isb	sy
 800b516:	f3bf 8f4f 	dsb	sy
 800b51a:	607b      	str	r3, [r7, #4]
}
 800b51c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b51e:	4b0f      	ldr	r3, [pc, #60]	; (800b55c <vPortEnterCritical+0x58>)
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	3301      	adds	r3, #1
 800b524:	4a0d      	ldr	r2, [pc, #52]	; (800b55c <vPortEnterCritical+0x58>)
 800b526:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b528:	4b0c      	ldr	r3, [pc, #48]	; (800b55c <vPortEnterCritical+0x58>)
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	2b01      	cmp	r3, #1
 800b52e:	d10f      	bne.n	800b550 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b530:	4b0b      	ldr	r3, [pc, #44]	; (800b560 <vPortEnterCritical+0x5c>)
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	b2db      	uxtb	r3, r3
 800b536:	2b00      	cmp	r3, #0
 800b538:	d00a      	beq.n	800b550 <vPortEnterCritical+0x4c>
	__asm volatile
 800b53a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b53e:	f383 8811 	msr	BASEPRI, r3
 800b542:	f3bf 8f6f 	isb	sy
 800b546:	f3bf 8f4f 	dsb	sy
 800b54a:	603b      	str	r3, [r7, #0]
}
 800b54c:	bf00      	nop
 800b54e:	e7fe      	b.n	800b54e <vPortEnterCritical+0x4a>
	}
}
 800b550:	bf00      	nop
 800b552:	370c      	adds	r7, #12
 800b554:	46bd      	mov	sp, r7
 800b556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b55a:	4770      	bx	lr
 800b55c:	20000098 	.word	0x20000098
 800b560:	e000ed04 	.word	0xe000ed04

0800b564 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b564:	b480      	push	{r7}
 800b566:	b083      	sub	sp, #12
 800b568:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b56a:	4b12      	ldr	r3, [pc, #72]	; (800b5b4 <vPortExitCritical+0x50>)
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d10a      	bne.n	800b588 <vPortExitCritical+0x24>
	__asm volatile
 800b572:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b576:	f383 8811 	msr	BASEPRI, r3
 800b57a:	f3bf 8f6f 	isb	sy
 800b57e:	f3bf 8f4f 	dsb	sy
 800b582:	607b      	str	r3, [r7, #4]
}
 800b584:	bf00      	nop
 800b586:	e7fe      	b.n	800b586 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b588:	4b0a      	ldr	r3, [pc, #40]	; (800b5b4 <vPortExitCritical+0x50>)
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	3b01      	subs	r3, #1
 800b58e:	4a09      	ldr	r2, [pc, #36]	; (800b5b4 <vPortExitCritical+0x50>)
 800b590:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b592:	4b08      	ldr	r3, [pc, #32]	; (800b5b4 <vPortExitCritical+0x50>)
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	2b00      	cmp	r3, #0
 800b598:	d105      	bne.n	800b5a6 <vPortExitCritical+0x42>
 800b59a:	2300      	movs	r3, #0
 800b59c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b59e:	683b      	ldr	r3, [r7, #0]
 800b5a0:	f383 8811 	msr	BASEPRI, r3
}
 800b5a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b5a6:	bf00      	nop
 800b5a8:	370c      	adds	r7, #12
 800b5aa:	46bd      	mov	sp, r7
 800b5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b0:	4770      	bx	lr
 800b5b2:	bf00      	nop
 800b5b4:	20000098 	.word	0x20000098
	...

0800b5c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b5c0:	f3ef 8009 	mrs	r0, PSP
 800b5c4:	f3bf 8f6f 	isb	sy
 800b5c8:	4b15      	ldr	r3, [pc, #84]	; (800b620 <pxCurrentTCBConst>)
 800b5ca:	681a      	ldr	r2, [r3, #0]
 800b5cc:	f01e 0f10 	tst.w	lr, #16
 800b5d0:	bf08      	it	eq
 800b5d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b5d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5da:	6010      	str	r0, [r2, #0]
 800b5dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b5e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b5e4:	f380 8811 	msr	BASEPRI, r0
 800b5e8:	f3bf 8f4f 	dsb	sy
 800b5ec:	f3bf 8f6f 	isb	sy
 800b5f0:	f7fe feb0 	bl	800a354 <vTaskSwitchContext>
 800b5f4:	f04f 0000 	mov.w	r0, #0
 800b5f8:	f380 8811 	msr	BASEPRI, r0
 800b5fc:	bc09      	pop	{r0, r3}
 800b5fe:	6819      	ldr	r1, [r3, #0]
 800b600:	6808      	ldr	r0, [r1, #0]
 800b602:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b606:	f01e 0f10 	tst.w	lr, #16
 800b60a:	bf08      	it	eq
 800b60c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b610:	f380 8809 	msr	PSP, r0
 800b614:	f3bf 8f6f 	isb	sy
 800b618:	4770      	bx	lr
 800b61a:	bf00      	nop
 800b61c:	f3af 8000 	nop.w

0800b620 <pxCurrentTCBConst>:
 800b620:	20005508 	.word	0x20005508
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b624:	bf00      	nop
 800b626:	bf00      	nop

0800b628 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b628:	b580      	push	{r7, lr}
 800b62a:	b082      	sub	sp, #8
 800b62c:	af00      	add	r7, sp, #0
	__asm volatile
 800b62e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b632:	f383 8811 	msr	BASEPRI, r3
 800b636:	f3bf 8f6f 	isb	sy
 800b63a:	f3bf 8f4f 	dsb	sy
 800b63e:	607b      	str	r3, [r7, #4]
}
 800b640:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b642:	f7fe fdcd 	bl	800a1e0 <xTaskIncrementTick>
 800b646:	4603      	mov	r3, r0
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d003      	beq.n	800b654 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b64c:	4b06      	ldr	r3, [pc, #24]	; (800b668 <xPortSysTickHandler+0x40>)
 800b64e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b652:	601a      	str	r2, [r3, #0]
 800b654:	2300      	movs	r3, #0
 800b656:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b658:	683b      	ldr	r3, [r7, #0]
 800b65a:	f383 8811 	msr	BASEPRI, r3
}
 800b65e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b660:	bf00      	nop
 800b662:	3708      	adds	r7, #8
 800b664:	46bd      	mov	sp, r7
 800b666:	bd80      	pop	{r7, pc}
 800b668:	e000ed04 	.word	0xe000ed04

0800b66c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b66c:	b480      	push	{r7}
 800b66e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b670:	4b0b      	ldr	r3, [pc, #44]	; (800b6a0 <vPortSetupTimerInterrupt+0x34>)
 800b672:	2200      	movs	r2, #0
 800b674:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b676:	4b0b      	ldr	r3, [pc, #44]	; (800b6a4 <vPortSetupTimerInterrupt+0x38>)
 800b678:	2200      	movs	r2, #0
 800b67a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b67c:	4b0a      	ldr	r3, [pc, #40]	; (800b6a8 <vPortSetupTimerInterrupt+0x3c>)
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	4a0a      	ldr	r2, [pc, #40]	; (800b6ac <vPortSetupTimerInterrupt+0x40>)
 800b682:	fba2 2303 	umull	r2, r3, r2, r3
 800b686:	099b      	lsrs	r3, r3, #6
 800b688:	4a09      	ldr	r2, [pc, #36]	; (800b6b0 <vPortSetupTimerInterrupt+0x44>)
 800b68a:	3b01      	subs	r3, #1
 800b68c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b68e:	4b04      	ldr	r3, [pc, #16]	; (800b6a0 <vPortSetupTimerInterrupt+0x34>)
 800b690:	2207      	movs	r2, #7
 800b692:	601a      	str	r2, [r3, #0]
}
 800b694:	bf00      	nop
 800b696:	46bd      	mov	sp, r7
 800b698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b69c:	4770      	bx	lr
 800b69e:	bf00      	nop
 800b6a0:	e000e010 	.word	0xe000e010
 800b6a4:	e000e018 	.word	0xe000e018
 800b6a8:	20000000 	.word	0x20000000
 800b6ac:	10624dd3 	.word	0x10624dd3
 800b6b0:	e000e014 	.word	0xe000e014

0800b6b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b6b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b6c4 <vPortEnableVFP+0x10>
 800b6b8:	6801      	ldr	r1, [r0, #0]
 800b6ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b6be:	6001      	str	r1, [r0, #0]
 800b6c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b6c2:	bf00      	nop
 800b6c4:	e000ed88 	.word	0xe000ed88

0800b6c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b6c8:	b480      	push	{r7}
 800b6ca:	b085      	sub	sp, #20
 800b6cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b6ce:	f3ef 8305 	mrs	r3, IPSR
 800b6d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	2b0f      	cmp	r3, #15
 800b6d8:	d914      	bls.n	800b704 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b6da:	4a17      	ldr	r2, [pc, #92]	; (800b738 <vPortValidateInterruptPriority+0x70>)
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	4413      	add	r3, r2
 800b6e0:	781b      	ldrb	r3, [r3, #0]
 800b6e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b6e4:	4b15      	ldr	r3, [pc, #84]	; (800b73c <vPortValidateInterruptPriority+0x74>)
 800b6e6:	781b      	ldrb	r3, [r3, #0]
 800b6e8:	7afa      	ldrb	r2, [r7, #11]
 800b6ea:	429a      	cmp	r2, r3
 800b6ec:	d20a      	bcs.n	800b704 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b6ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6f2:	f383 8811 	msr	BASEPRI, r3
 800b6f6:	f3bf 8f6f 	isb	sy
 800b6fa:	f3bf 8f4f 	dsb	sy
 800b6fe:	607b      	str	r3, [r7, #4]
}
 800b700:	bf00      	nop
 800b702:	e7fe      	b.n	800b702 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b704:	4b0e      	ldr	r3, [pc, #56]	; (800b740 <vPortValidateInterruptPriority+0x78>)
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b70c:	4b0d      	ldr	r3, [pc, #52]	; (800b744 <vPortValidateInterruptPriority+0x7c>)
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	429a      	cmp	r2, r3
 800b712:	d90a      	bls.n	800b72a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b714:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b718:	f383 8811 	msr	BASEPRI, r3
 800b71c:	f3bf 8f6f 	isb	sy
 800b720:	f3bf 8f4f 	dsb	sy
 800b724:	603b      	str	r3, [r7, #0]
}
 800b726:	bf00      	nop
 800b728:	e7fe      	b.n	800b728 <vPortValidateInterruptPriority+0x60>
	}
 800b72a:	bf00      	nop
 800b72c:	3714      	adds	r7, #20
 800b72e:	46bd      	mov	sp, r7
 800b730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b734:	4770      	bx	lr
 800b736:	bf00      	nop
 800b738:	e000e3f0 	.word	0xe000e3f0
 800b73c:	20005b34 	.word	0x20005b34
 800b740:	e000ed0c 	.word	0xe000ed0c
 800b744:	20005b38 	.word	0x20005b38

0800b748 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b748:	b580      	push	{r7, lr}
 800b74a:	b08a      	sub	sp, #40	; 0x28
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b750:	2300      	movs	r3, #0
 800b752:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b754:	f7fe fc76 	bl	800a044 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b758:	4b5b      	ldr	r3, [pc, #364]	; (800b8c8 <pvPortMalloc+0x180>)
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d101      	bne.n	800b764 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b760:	f000 f920 	bl	800b9a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b764:	4b59      	ldr	r3, [pc, #356]	; (800b8cc <pvPortMalloc+0x184>)
 800b766:	681a      	ldr	r2, [r3, #0]
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	4013      	ands	r3, r2
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	f040 8093 	bne.w	800b898 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	2b00      	cmp	r3, #0
 800b776:	d01d      	beq.n	800b7b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b778:	2208      	movs	r2, #8
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	4413      	add	r3, r2
 800b77e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	f003 0307 	and.w	r3, r3, #7
 800b786:	2b00      	cmp	r3, #0
 800b788:	d014      	beq.n	800b7b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	f023 0307 	bic.w	r3, r3, #7
 800b790:	3308      	adds	r3, #8
 800b792:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	f003 0307 	and.w	r3, r3, #7
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d00a      	beq.n	800b7b4 <pvPortMalloc+0x6c>
	__asm volatile
 800b79e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7a2:	f383 8811 	msr	BASEPRI, r3
 800b7a6:	f3bf 8f6f 	isb	sy
 800b7aa:	f3bf 8f4f 	dsb	sy
 800b7ae:	617b      	str	r3, [r7, #20]
}
 800b7b0:	bf00      	nop
 800b7b2:	e7fe      	b.n	800b7b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d06e      	beq.n	800b898 <pvPortMalloc+0x150>
 800b7ba:	4b45      	ldr	r3, [pc, #276]	; (800b8d0 <pvPortMalloc+0x188>)
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	687a      	ldr	r2, [r7, #4]
 800b7c0:	429a      	cmp	r2, r3
 800b7c2:	d869      	bhi.n	800b898 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b7c4:	4b43      	ldr	r3, [pc, #268]	; (800b8d4 <pvPortMalloc+0x18c>)
 800b7c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b7c8:	4b42      	ldr	r3, [pc, #264]	; (800b8d4 <pvPortMalloc+0x18c>)
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b7ce:	e004      	b.n	800b7da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b7d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b7d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b7da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7dc:	685b      	ldr	r3, [r3, #4]
 800b7de:	687a      	ldr	r2, [r7, #4]
 800b7e0:	429a      	cmp	r2, r3
 800b7e2:	d903      	bls.n	800b7ec <pvPortMalloc+0xa4>
 800b7e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d1f1      	bne.n	800b7d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b7ec:	4b36      	ldr	r3, [pc, #216]	; (800b8c8 <pvPortMalloc+0x180>)
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b7f2:	429a      	cmp	r2, r3
 800b7f4:	d050      	beq.n	800b898 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b7f6:	6a3b      	ldr	r3, [r7, #32]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	2208      	movs	r2, #8
 800b7fc:	4413      	add	r3, r2
 800b7fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b802:	681a      	ldr	r2, [r3, #0]
 800b804:	6a3b      	ldr	r3, [r7, #32]
 800b806:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b80a:	685a      	ldr	r2, [r3, #4]
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	1ad2      	subs	r2, r2, r3
 800b810:	2308      	movs	r3, #8
 800b812:	005b      	lsls	r3, r3, #1
 800b814:	429a      	cmp	r2, r3
 800b816:	d91f      	bls.n	800b858 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b818:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	4413      	add	r3, r2
 800b81e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b820:	69bb      	ldr	r3, [r7, #24]
 800b822:	f003 0307 	and.w	r3, r3, #7
 800b826:	2b00      	cmp	r3, #0
 800b828:	d00a      	beq.n	800b840 <pvPortMalloc+0xf8>
	__asm volatile
 800b82a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b82e:	f383 8811 	msr	BASEPRI, r3
 800b832:	f3bf 8f6f 	isb	sy
 800b836:	f3bf 8f4f 	dsb	sy
 800b83a:	613b      	str	r3, [r7, #16]
}
 800b83c:	bf00      	nop
 800b83e:	e7fe      	b.n	800b83e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b842:	685a      	ldr	r2, [r3, #4]
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	1ad2      	subs	r2, r2, r3
 800b848:	69bb      	ldr	r3, [r7, #24]
 800b84a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b84c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b84e:	687a      	ldr	r2, [r7, #4]
 800b850:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b852:	69b8      	ldr	r0, [r7, #24]
 800b854:	f000 f908 	bl	800ba68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b858:	4b1d      	ldr	r3, [pc, #116]	; (800b8d0 <pvPortMalloc+0x188>)
 800b85a:	681a      	ldr	r2, [r3, #0]
 800b85c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b85e:	685b      	ldr	r3, [r3, #4]
 800b860:	1ad3      	subs	r3, r2, r3
 800b862:	4a1b      	ldr	r2, [pc, #108]	; (800b8d0 <pvPortMalloc+0x188>)
 800b864:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b866:	4b1a      	ldr	r3, [pc, #104]	; (800b8d0 <pvPortMalloc+0x188>)
 800b868:	681a      	ldr	r2, [r3, #0]
 800b86a:	4b1b      	ldr	r3, [pc, #108]	; (800b8d8 <pvPortMalloc+0x190>)
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	429a      	cmp	r2, r3
 800b870:	d203      	bcs.n	800b87a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b872:	4b17      	ldr	r3, [pc, #92]	; (800b8d0 <pvPortMalloc+0x188>)
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	4a18      	ldr	r2, [pc, #96]	; (800b8d8 <pvPortMalloc+0x190>)
 800b878:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b87a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b87c:	685a      	ldr	r2, [r3, #4]
 800b87e:	4b13      	ldr	r3, [pc, #76]	; (800b8cc <pvPortMalloc+0x184>)
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	431a      	orrs	r2, r3
 800b884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b886:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b88a:	2200      	movs	r2, #0
 800b88c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b88e:	4b13      	ldr	r3, [pc, #76]	; (800b8dc <pvPortMalloc+0x194>)
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	3301      	adds	r3, #1
 800b894:	4a11      	ldr	r2, [pc, #68]	; (800b8dc <pvPortMalloc+0x194>)
 800b896:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b898:	f7fe fbe2 	bl	800a060 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b89c:	69fb      	ldr	r3, [r7, #28]
 800b89e:	f003 0307 	and.w	r3, r3, #7
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d00a      	beq.n	800b8bc <pvPortMalloc+0x174>
	__asm volatile
 800b8a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8aa:	f383 8811 	msr	BASEPRI, r3
 800b8ae:	f3bf 8f6f 	isb	sy
 800b8b2:	f3bf 8f4f 	dsb	sy
 800b8b6:	60fb      	str	r3, [r7, #12]
}
 800b8b8:	bf00      	nop
 800b8ba:	e7fe      	b.n	800b8ba <pvPortMalloc+0x172>
	return pvReturn;
 800b8bc:	69fb      	ldr	r3, [r7, #28]
}
 800b8be:	4618      	mov	r0, r3
 800b8c0:	3728      	adds	r7, #40	; 0x28
 800b8c2:	46bd      	mov	sp, r7
 800b8c4:	bd80      	pop	{r7, pc}
 800b8c6:	bf00      	nop
 800b8c8:	20009744 	.word	0x20009744
 800b8cc:	20009758 	.word	0x20009758
 800b8d0:	20009748 	.word	0x20009748
 800b8d4:	2000973c 	.word	0x2000973c
 800b8d8:	2000974c 	.word	0x2000974c
 800b8dc:	20009750 	.word	0x20009750

0800b8e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	b086      	sub	sp, #24
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d04d      	beq.n	800b98e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b8f2:	2308      	movs	r3, #8
 800b8f4:	425b      	negs	r3, r3
 800b8f6:	697a      	ldr	r2, [r7, #20]
 800b8f8:	4413      	add	r3, r2
 800b8fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b8fc:	697b      	ldr	r3, [r7, #20]
 800b8fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b900:	693b      	ldr	r3, [r7, #16]
 800b902:	685a      	ldr	r2, [r3, #4]
 800b904:	4b24      	ldr	r3, [pc, #144]	; (800b998 <vPortFree+0xb8>)
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	4013      	ands	r3, r2
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d10a      	bne.n	800b924 <vPortFree+0x44>
	__asm volatile
 800b90e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b912:	f383 8811 	msr	BASEPRI, r3
 800b916:	f3bf 8f6f 	isb	sy
 800b91a:	f3bf 8f4f 	dsb	sy
 800b91e:	60fb      	str	r3, [r7, #12]
}
 800b920:	bf00      	nop
 800b922:	e7fe      	b.n	800b922 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b924:	693b      	ldr	r3, [r7, #16]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d00a      	beq.n	800b942 <vPortFree+0x62>
	__asm volatile
 800b92c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b930:	f383 8811 	msr	BASEPRI, r3
 800b934:	f3bf 8f6f 	isb	sy
 800b938:	f3bf 8f4f 	dsb	sy
 800b93c:	60bb      	str	r3, [r7, #8]
}
 800b93e:	bf00      	nop
 800b940:	e7fe      	b.n	800b940 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b942:	693b      	ldr	r3, [r7, #16]
 800b944:	685a      	ldr	r2, [r3, #4]
 800b946:	4b14      	ldr	r3, [pc, #80]	; (800b998 <vPortFree+0xb8>)
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	4013      	ands	r3, r2
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d01e      	beq.n	800b98e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b950:	693b      	ldr	r3, [r7, #16]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d11a      	bne.n	800b98e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b958:	693b      	ldr	r3, [r7, #16]
 800b95a:	685a      	ldr	r2, [r3, #4]
 800b95c:	4b0e      	ldr	r3, [pc, #56]	; (800b998 <vPortFree+0xb8>)
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	43db      	mvns	r3, r3
 800b962:	401a      	ands	r2, r3
 800b964:	693b      	ldr	r3, [r7, #16]
 800b966:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b968:	f7fe fb6c 	bl	800a044 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b96c:	693b      	ldr	r3, [r7, #16]
 800b96e:	685a      	ldr	r2, [r3, #4]
 800b970:	4b0a      	ldr	r3, [pc, #40]	; (800b99c <vPortFree+0xbc>)
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	4413      	add	r3, r2
 800b976:	4a09      	ldr	r2, [pc, #36]	; (800b99c <vPortFree+0xbc>)
 800b978:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b97a:	6938      	ldr	r0, [r7, #16]
 800b97c:	f000 f874 	bl	800ba68 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b980:	4b07      	ldr	r3, [pc, #28]	; (800b9a0 <vPortFree+0xc0>)
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	3301      	adds	r3, #1
 800b986:	4a06      	ldr	r2, [pc, #24]	; (800b9a0 <vPortFree+0xc0>)
 800b988:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b98a:	f7fe fb69 	bl	800a060 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b98e:	bf00      	nop
 800b990:	3718      	adds	r7, #24
 800b992:	46bd      	mov	sp, r7
 800b994:	bd80      	pop	{r7, pc}
 800b996:	bf00      	nop
 800b998:	20009758 	.word	0x20009758
 800b99c:	20009748 	.word	0x20009748
 800b9a0:	20009754 	.word	0x20009754

0800b9a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b9a4:	b480      	push	{r7}
 800b9a6:	b085      	sub	sp, #20
 800b9a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b9aa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b9ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b9b0:	4b27      	ldr	r3, [pc, #156]	; (800ba50 <prvHeapInit+0xac>)
 800b9b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	f003 0307 	and.w	r3, r3, #7
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d00c      	beq.n	800b9d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	3307      	adds	r3, #7
 800b9c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	f023 0307 	bic.w	r3, r3, #7
 800b9ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b9cc:	68ba      	ldr	r2, [r7, #8]
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	1ad3      	subs	r3, r2, r3
 800b9d2:	4a1f      	ldr	r2, [pc, #124]	; (800ba50 <prvHeapInit+0xac>)
 800b9d4:	4413      	add	r3, r2
 800b9d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b9dc:	4a1d      	ldr	r2, [pc, #116]	; (800ba54 <prvHeapInit+0xb0>)
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b9e2:	4b1c      	ldr	r3, [pc, #112]	; (800ba54 <prvHeapInit+0xb0>)
 800b9e4:	2200      	movs	r2, #0
 800b9e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	68ba      	ldr	r2, [r7, #8]
 800b9ec:	4413      	add	r3, r2
 800b9ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b9f0:	2208      	movs	r2, #8
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	1a9b      	subs	r3, r3, r2
 800b9f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	f023 0307 	bic.w	r3, r3, #7
 800b9fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	4a15      	ldr	r2, [pc, #84]	; (800ba58 <prvHeapInit+0xb4>)
 800ba04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ba06:	4b14      	ldr	r3, [pc, #80]	; (800ba58 <prvHeapInit+0xb4>)
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ba0e:	4b12      	ldr	r3, [pc, #72]	; (800ba58 <prvHeapInit+0xb4>)
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	2200      	movs	r2, #0
 800ba14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ba1a:	683b      	ldr	r3, [r7, #0]
 800ba1c:	68fa      	ldr	r2, [r7, #12]
 800ba1e:	1ad2      	subs	r2, r2, r3
 800ba20:	683b      	ldr	r3, [r7, #0]
 800ba22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ba24:	4b0c      	ldr	r3, [pc, #48]	; (800ba58 <prvHeapInit+0xb4>)
 800ba26:	681a      	ldr	r2, [r3, #0]
 800ba28:	683b      	ldr	r3, [r7, #0]
 800ba2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ba2c:	683b      	ldr	r3, [r7, #0]
 800ba2e:	685b      	ldr	r3, [r3, #4]
 800ba30:	4a0a      	ldr	r2, [pc, #40]	; (800ba5c <prvHeapInit+0xb8>)
 800ba32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ba34:	683b      	ldr	r3, [r7, #0]
 800ba36:	685b      	ldr	r3, [r3, #4]
 800ba38:	4a09      	ldr	r2, [pc, #36]	; (800ba60 <prvHeapInit+0xbc>)
 800ba3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ba3c:	4b09      	ldr	r3, [pc, #36]	; (800ba64 <prvHeapInit+0xc0>)
 800ba3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ba42:	601a      	str	r2, [r3, #0]
}
 800ba44:	bf00      	nop
 800ba46:	3714      	adds	r7, #20
 800ba48:	46bd      	mov	sp, r7
 800ba4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba4e:	4770      	bx	lr
 800ba50:	20005b3c 	.word	0x20005b3c
 800ba54:	2000973c 	.word	0x2000973c
 800ba58:	20009744 	.word	0x20009744
 800ba5c:	2000974c 	.word	0x2000974c
 800ba60:	20009748 	.word	0x20009748
 800ba64:	20009758 	.word	0x20009758

0800ba68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ba68:	b480      	push	{r7}
 800ba6a:	b085      	sub	sp, #20
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ba70:	4b28      	ldr	r3, [pc, #160]	; (800bb14 <prvInsertBlockIntoFreeList+0xac>)
 800ba72:	60fb      	str	r3, [r7, #12]
 800ba74:	e002      	b.n	800ba7c <prvInsertBlockIntoFreeList+0x14>
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	60fb      	str	r3, [r7, #12]
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	687a      	ldr	r2, [r7, #4]
 800ba82:	429a      	cmp	r2, r3
 800ba84:	d8f7      	bhi.n	800ba76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	685b      	ldr	r3, [r3, #4]
 800ba8e:	68ba      	ldr	r2, [r7, #8]
 800ba90:	4413      	add	r3, r2
 800ba92:	687a      	ldr	r2, [r7, #4]
 800ba94:	429a      	cmp	r2, r3
 800ba96:	d108      	bne.n	800baaa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	685a      	ldr	r2, [r3, #4]
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	685b      	ldr	r3, [r3, #4]
 800baa0:	441a      	add	r2, r3
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	685b      	ldr	r3, [r3, #4]
 800bab2:	68ba      	ldr	r2, [r7, #8]
 800bab4:	441a      	add	r2, r3
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	429a      	cmp	r2, r3
 800babc:	d118      	bne.n	800baf0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	681a      	ldr	r2, [r3, #0]
 800bac2:	4b15      	ldr	r3, [pc, #84]	; (800bb18 <prvInsertBlockIntoFreeList+0xb0>)
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	429a      	cmp	r2, r3
 800bac8:	d00d      	beq.n	800bae6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	685a      	ldr	r2, [r3, #4]
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	685b      	ldr	r3, [r3, #4]
 800bad4:	441a      	add	r2, r3
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	681a      	ldr	r2, [r3, #0]
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	601a      	str	r2, [r3, #0]
 800bae4:	e008      	b.n	800baf8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bae6:	4b0c      	ldr	r3, [pc, #48]	; (800bb18 <prvInsertBlockIntoFreeList+0xb0>)
 800bae8:	681a      	ldr	r2, [r3, #0]
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	601a      	str	r2, [r3, #0]
 800baee:	e003      	b.n	800baf8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	681a      	ldr	r2, [r3, #0]
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800baf8:	68fa      	ldr	r2, [r7, #12]
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	429a      	cmp	r2, r3
 800bafe:	d002      	beq.n	800bb06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	687a      	ldr	r2, [r7, #4]
 800bb04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bb06:	bf00      	nop
 800bb08:	3714      	adds	r7, #20
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb10:	4770      	bx	lr
 800bb12:	bf00      	nop
 800bb14:	2000973c 	.word	0x2000973c
 800bb18:	20009744 	.word	0x20009744

0800bb1c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800bb1c:	b580      	push	{r7, lr}
 800bb1e:	b084      	sub	sp, #16
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	6078      	str	r0, [r7, #4]
 800bb24:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800bb26:	f007 fb31 	bl	801318c <sys_timeouts_sleeptime>
 800bb2a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb32:	d10b      	bne.n	800bb4c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800bb34:	4813      	ldr	r0, [pc, #76]	; (800bb84 <tcpip_timeouts_mbox_fetch+0x68>)
 800bb36:	f00c fa28 	bl	8017f8a <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800bb3a:	2200      	movs	r2, #0
 800bb3c:	6839      	ldr	r1, [r7, #0]
 800bb3e:	6878      	ldr	r0, [r7, #4]
 800bb40:	f00c f9b0 	bl	8017ea4 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800bb44:	480f      	ldr	r0, [pc, #60]	; (800bb84 <tcpip_timeouts_mbox_fetch+0x68>)
 800bb46:	f00c fa11 	bl	8017f6c <sys_mutex_lock>
    return;
 800bb4a:	e018      	b.n	800bb7e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d102      	bne.n	800bb58 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800bb52:	f007 fae1 	bl	8013118 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800bb56:	e7e6      	b.n	800bb26 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800bb58:	480a      	ldr	r0, [pc, #40]	; (800bb84 <tcpip_timeouts_mbox_fetch+0x68>)
 800bb5a:	f00c fa16 	bl	8017f8a <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800bb5e:	68fa      	ldr	r2, [r7, #12]
 800bb60:	6839      	ldr	r1, [r7, #0]
 800bb62:	6878      	ldr	r0, [r7, #4]
 800bb64:	f00c f99e 	bl	8017ea4 <sys_arch_mbox_fetch>
 800bb68:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800bb6a:	4806      	ldr	r0, [pc, #24]	; (800bb84 <tcpip_timeouts_mbox_fetch+0x68>)
 800bb6c:	f00c f9fe 	bl	8017f6c <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800bb70:	68bb      	ldr	r3, [r7, #8]
 800bb72:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb76:	d102      	bne.n	800bb7e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800bb78:	f007 face 	bl	8013118 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800bb7c:	e7d3      	b.n	800bb26 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800bb7e:	3710      	adds	r7, #16
 800bb80:	46bd      	mov	sp, r7
 800bb82:	bd80      	pop	{r7, pc}
 800bb84:	20009768 	.word	0x20009768

0800bb88 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	b084      	sub	sp, #16
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800bb90:	4810      	ldr	r0, [pc, #64]	; (800bbd4 <tcpip_thread+0x4c>)
 800bb92:	f00c f9eb 	bl	8017f6c <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800bb96:	4b10      	ldr	r3, [pc, #64]	; (800bbd8 <tcpip_thread+0x50>)
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d005      	beq.n	800bbaa <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800bb9e:	4b0e      	ldr	r3, [pc, #56]	; (800bbd8 <tcpip_thread+0x50>)
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	4a0e      	ldr	r2, [pc, #56]	; (800bbdc <tcpip_thread+0x54>)
 800bba4:	6812      	ldr	r2, [r2, #0]
 800bba6:	4610      	mov	r0, r2
 800bba8:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800bbaa:	f107 030c 	add.w	r3, r7, #12
 800bbae:	4619      	mov	r1, r3
 800bbb0:	480b      	ldr	r0, [pc, #44]	; (800bbe0 <tcpip_thread+0x58>)
 800bbb2:	f7ff ffb3 	bl	800bb1c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d106      	bne.n	800bbca <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800bbbc:	4b09      	ldr	r3, [pc, #36]	; (800bbe4 <tcpip_thread+0x5c>)
 800bbbe:	2291      	movs	r2, #145	; 0x91
 800bbc0:	4909      	ldr	r1, [pc, #36]	; (800bbe8 <tcpip_thread+0x60>)
 800bbc2:	480a      	ldr	r0, [pc, #40]	; (800bbec <tcpip_thread+0x64>)
 800bbc4:	f00c ff6a 	bl	8018a9c <iprintf>
      continue;
 800bbc8:	e003      	b.n	800bbd2 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	4618      	mov	r0, r3
 800bbce:	f000 f80f 	bl	800bbf0 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800bbd2:	e7ea      	b.n	800bbaa <tcpip_thread+0x22>
 800bbd4:	20009768 	.word	0x20009768
 800bbd8:	2000975c 	.word	0x2000975c
 800bbdc:	20009760 	.word	0x20009760
 800bbe0:	20009764 	.word	0x20009764
 800bbe4:	08019bdc 	.word	0x08019bdc
 800bbe8:	08019c0c 	.word	0x08019c0c
 800bbec:	08019c2c 	.word	0x08019c2c

0800bbf0 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	b082      	sub	sp, #8
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	781b      	ldrb	r3, [r3, #0]
 800bbfc:	2b02      	cmp	r3, #2
 800bbfe:	d026      	beq.n	800bc4e <tcpip_thread_handle_msg+0x5e>
 800bc00:	2b02      	cmp	r3, #2
 800bc02:	dc2b      	bgt.n	800bc5c <tcpip_thread_handle_msg+0x6c>
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d002      	beq.n	800bc0e <tcpip_thread_handle_msg+0x1e>
 800bc08:	2b01      	cmp	r3, #1
 800bc0a:	d015      	beq.n	800bc38 <tcpip_thread_handle_msg+0x48>
 800bc0c:	e026      	b.n	800bc5c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	68db      	ldr	r3, [r3, #12]
 800bc12:	687a      	ldr	r2, [r7, #4]
 800bc14:	6850      	ldr	r0, [r2, #4]
 800bc16:	687a      	ldr	r2, [r7, #4]
 800bc18:	6892      	ldr	r2, [r2, #8]
 800bc1a:	4611      	mov	r1, r2
 800bc1c:	4798      	blx	r3
 800bc1e:	4603      	mov	r3, r0
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d004      	beq.n	800bc2e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	685b      	ldr	r3, [r3, #4]
 800bc28:	4618      	mov	r0, r3
 800bc2a:	f001 fd67 	bl	800d6fc <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800bc2e:	6879      	ldr	r1, [r7, #4]
 800bc30:	2009      	movs	r0, #9
 800bc32:	f000 ff1b 	bl	800ca6c <memp_free>
      break;
 800bc36:	e018      	b.n	800bc6a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	685b      	ldr	r3, [r3, #4]
 800bc3c:	687a      	ldr	r2, [r7, #4]
 800bc3e:	6892      	ldr	r2, [r2, #8]
 800bc40:	4610      	mov	r0, r2
 800bc42:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800bc44:	6879      	ldr	r1, [r7, #4]
 800bc46:	2008      	movs	r0, #8
 800bc48:	f000 ff10 	bl	800ca6c <memp_free>
      break;
 800bc4c:	e00d      	b.n	800bc6a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	685b      	ldr	r3, [r3, #4]
 800bc52:	687a      	ldr	r2, [r7, #4]
 800bc54:	6892      	ldr	r2, [r2, #8]
 800bc56:	4610      	mov	r0, r2
 800bc58:	4798      	blx	r3
      break;
 800bc5a:	e006      	b.n	800bc6a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800bc5c:	4b05      	ldr	r3, [pc, #20]	; (800bc74 <tcpip_thread_handle_msg+0x84>)
 800bc5e:	22cf      	movs	r2, #207	; 0xcf
 800bc60:	4905      	ldr	r1, [pc, #20]	; (800bc78 <tcpip_thread_handle_msg+0x88>)
 800bc62:	4806      	ldr	r0, [pc, #24]	; (800bc7c <tcpip_thread_handle_msg+0x8c>)
 800bc64:	f00c ff1a 	bl	8018a9c <iprintf>
      break;
 800bc68:	bf00      	nop
  }
}
 800bc6a:	bf00      	nop
 800bc6c:	3708      	adds	r7, #8
 800bc6e:	46bd      	mov	sp, r7
 800bc70:	bd80      	pop	{r7, pc}
 800bc72:	bf00      	nop
 800bc74:	08019bdc 	.word	0x08019bdc
 800bc78:	08019c0c 	.word	0x08019c0c
 800bc7c:	08019c2c 	.word	0x08019c2c

0800bc80 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800bc80:	b580      	push	{r7, lr}
 800bc82:	b086      	sub	sp, #24
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	60f8      	str	r0, [r7, #12]
 800bc88:	60b9      	str	r1, [r7, #8]
 800bc8a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800bc8c:	481a      	ldr	r0, [pc, #104]	; (800bcf8 <tcpip_inpkt+0x78>)
 800bc8e:	f00c f93a 	bl	8017f06 <sys_mbox_valid>
 800bc92:	4603      	mov	r3, r0
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d105      	bne.n	800bca4 <tcpip_inpkt+0x24>
 800bc98:	4b18      	ldr	r3, [pc, #96]	; (800bcfc <tcpip_inpkt+0x7c>)
 800bc9a:	22fc      	movs	r2, #252	; 0xfc
 800bc9c:	4918      	ldr	r1, [pc, #96]	; (800bd00 <tcpip_inpkt+0x80>)
 800bc9e:	4819      	ldr	r0, [pc, #100]	; (800bd04 <tcpip_inpkt+0x84>)
 800bca0:	f00c fefc 	bl	8018a9c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800bca4:	2009      	movs	r0, #9
 800bca6:	f000 fe6b 	bl	800c980 <memp_malloc>
 800bcaa:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800bcac:	697b      	ldr	r3, [r7, #20]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d102      	bne.n	800bcb8 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800bcb2:	f04f 33ff 	mov.w	r3, #4294967295
 800bcb6:	e01a      	b.n	800bcee <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800bcb8:	697b      	ldr	r3, [r7, #20]
 800bcba:	2200      	movs	r2, #0
 800bcbc:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800bcbe:	697b      	ldr	r3, [r7, #20]
 800bcc0:	68fa      	ldr	r2, [r7, #12]
 800bcc2:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800bcc4:	697b      	ldr	r3, [r7, #20]
 800bcc6:	68ba      	ldr	r2, [r7, #8]
 800bcc8:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800bcca:	697b      	ldr	r3, [r7, #20]
 800bccc:	687a      	ldr	r2, [r7, #4]
 800bcce:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800bcd0:	6979      	ldr	r1, [r7, #20]
 800bcd2:	4809      	ldr	r0, [pc, #36]	; (800bcf8 <tcpip_inpkt+0x78>)
 800bcd4:	f00c f8cc 	bl	8017e70 <sys_mbox_trypost>
 800bcd8:	4603      	mov	r3, r0
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d006      	beq.n	800bcec <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800bcde:	6979      	ldr	r1, [r7, #20]
 800bce0:	2009      	movs	r0, #9
 800bce2:	f000 fec3 	bl	800ca6c <memp_free>
    return ERR_MEM;
 800bce6:	f04f 33ff 	mov.w	r3, #4294967295
 800bcea:	e000      	b.n	800bcee <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800bcec:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800bcee:	4618      	mov	r0, r3
 800bcf0:	3718      	adds	r7, #24
 800bcf2:	46bd      	mov	sp, r7
 800bcf4:	bd80      	pop	{r7, pc}
 800bcf6:	bf00      	nop
 800bcf8:	20009764 	.word	0x20009764
 800bcfc:	08019bdc 	.word	0x08019bdc
 800bd00:	08019c54 	.word	0x08019c54
 800bd04:	08019c2c 	.word	0x08019c2c

0800bd08 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b082      	sub	sp, #8
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	6078      	str	r0, [r7, #4]
 800bd10:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800bd12:	683b      	ldr	r3, [r7, #0]
 800bd14:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800bd18:	f003 0318 	and.w	r3, r3, #24
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d006      	beq.n	800bd2e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800bd20:	4a08      	ldr	r2, [pc, #32]	; (800bd44 <tcpip_input+0x3c>)
 800bd22:	6839      	ldr	r1, [r7, #0]
 800bd24:	6878      	ldr	r0, [r7, #4]
 800bd26:	f7ff ffab 	bl	800bc80 <tcpip_inpkt>
 800bd2a:	4603      	mov	r3, r0
 800bd2c:	e005      	b.n	800bd3a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800bd2e:	4a06      	ldr	r2, [pc, #24]	; (800bd48 <tcpip_input+0x40>)
 800bd30:	6839      	ldr	r1, [r7, #0]
 800bd32:	6878      	ldr	r0, [r7, #4]
 800bd34:	f7ff ffa4 	bl	800bc80 <tcpip_inpkt>
 800bd38:	4603      	mov	r3, r0
}
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	3708      	adds	r7, #8
 800bd3e:	46bd      	mov	sp, r7
 800bd40:	bd80      	pop	{r7, pc}
 800bd42:	bf00      	nop
 800bd44:	08017c91 	.word	0x08017c91
 800bd48:	08016b5d 	.word	0x08016b5d

0800bd4c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800bd4c:	b580      	push	{r7, lr}
 800bd4e:	b084      	sub	sp, #16
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	6078      	str	r0, [r7, #4]
 800bd54:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800bd56:	4819      	ldr	r0, [pc, #100]	; (800bdbc <tcpip_try_callback+0x70>)
 800bd58:	f00c f8d5 	bl	8017f06 <sys_mbox_valid>
 800bd5c:	4603      	mov	r3, r0
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d106      	bne.n	800bd70 <tcpip_try_callback+0x24>
 800bd62:	4b17      	ldr	r3, [pc, #92]	; (800bdc0 <tcpip_try_callback+0x74>)
 800bd64:	f240 125d 	movw	r2, #349	; 0x15d
 800bd68:	4916      	ldr	r1, [pc, #88]	; (800bdc4 <tcpip_try_callback+0x78>)
 800bd6a:	4817      	ldr	r0, [pc, #92]	; (800bdc8 <tcpip_try_callback+0x7c>)
 800bd6c:	f00c fe96 	bl	8018a9c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800bd70:	2008      	movs	r0, #8
 800bd72:	f000 fe05 	bl	800c980 <memp_malloc>
 800bd76:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d102      	bne.n	800bd84 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800bd7e:	f04f 33ff 	mov.w	r3, #4294967295
 800bd82:	e017      	b.n	800bdb4 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	2201      	movs	r2, #1
 800bd88:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	687a      	ldr	r2, [r7, #4]
 800bd8e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	683a      	ldr	r2, [r7, #0]
 800bd94:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800bd96:	68f9      	ldr	r1, [r7, #12]
 800bd98:	4808      	ldr	r0, [pc, #32]	; (800bdbc <tcpip_try_callback+0x70>)
 800bd9a:	f00c f869 	bl	8017e70 <sys_mbox_trypost>
 800bd9e:	4603      	mov	r3, r0
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d006      	beq.n	800bdb2 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800bda4:	68f9      	ldr	r1, [r7, #12]
 800bda6:	2008      	movs	r0, #8
 800bda8:	f000 fe60 	bl	800ca6c <memp_free>
    return ERR_MEM;
 800bdac:	f04f 33ff 	mov.w	r3, #4294967295
 800bdb0:	e000      	b.n	800bdb4 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800bdb2:	2300      	movs	r3, #0
}
 800bdb4:	4618      	mov	r0, r3
 800bdb6:	3710      	adds	r7, #16
 800bdb8:	46bd      	mov	sp, r7
 800bdba:	bd80      	pop	{r7, pc}
 800bdbc:	20009764 	.word	0x20009764
 800bdc0:	08019bdc 	.word	0x08019bdc
 800bdc4:	08019c54 	.word	0x08019c54
 800bdc8:	08019c2c 	.word	0x08019c2c

0800bdcc <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800bdcc:	b580      	push	{r7, lr}
 800bdce:	b084      	sub	sp, #16
 800bdd0:	af02      	add	r7, sp, #8
 800bdd2:	6078      	str	r0, [r7, #4]
 800bdd4:	6039      	str	r1, [r7, #0]
  lwip_init();
 800bdd6:	f000 f92d 	bl	800c034 <lwip_init>

  tcpip_init_done = initfunc;
 800bdda:	4a17      	ldr	r2, [pc, #92]	; (800be38 <tcpip_init+0x6c>)
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800bde0:	4a16      	ldr	r2, [pc, #88]	; (800be3c <tcpip_init+0x70>)
 800bde2:	683b      	ldr	r3, [r7, #0]
 800bde4:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800bde6:	2106      	movs	r1, #6
 800bde8:	4815      	ldr	r0, [pc, #84]	; (800be40 <tcpip_init+0x74>)
 800bdea:	f00c f827 	bl	8017e3c <sys_mbox_new>
 800bdee:	4603      	mov	r3, r0
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d006      	beq.n	800be02 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800bdf4:	4b13      	ldr	r3, [pc, #76]	; (800be44 <tcpip_init+0x78>)
 800bdf6:	f240 2261 	movw	r2, #609	; 0x261
 800bdfa:	4913      	ldr	r1, [pc, #76]	; (800be48 <tcpip_init+0x7c>)
 800bdfc:	4813      	ldr	r0, [pc, #76]	; (800be4c <tcpip_init+0x80>)
 800bdfe:	f00c fe4d 	bl	8018a9c <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800be02:	4813      	ldr	r0, [pc, #76]	; (800be50 <tcpip_init+0x84>)
 800be04:	f00c f89c 	bl	8017f40 <sys_mutex_new>
 800be08:	4603      	mov	r3, r0
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d006      	beq.n	800be1c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800be0e:	4b0d      	ldr	r3, [pc, #52]	; (800be44 <tcpip_init+0x78>)
 800be10:	f240 2265 	movw	r2, #613	; 0x265
 800be14:	490f      	ldr	r1, [pc, #60]	; (800be54 <tcpip_init+0x88>)
 800be16:	480d      	ldr	r0, [pc, #52]	; (800be4c <tcpip_init+0x80>)
 800be18:	f00c fe40 	bl	8018a9c <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800be1c:	2318      	movs	r3, #24
 800be1e:	9300      	str	r3, [sp, #0]
 800be20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800be24:	2200      	movs	r2, #0
 800be26:	490c      	ldr	r1, [pc, #48]	; (800be58 <tcpip_init+0x8c>)
 800be28:	480c      	ldr	r0, [pc, #48]	; (800be5c <tcpip_init+0x90>)
 800be2a:	f00c f8bb 	bl	8017fa4 <sys_thread_new>
}
 800be2e:	bf00      	nop
 800be30:	3708      	adds	r7, #8
 800be32:	46bd      	mov	sp, r7
 800be34:	bd80      	pop	{r7, pc}
 800be36:	bf00      	nop
 800be38:	2000975c 	.word	0x2000975c
 800be3c:	20009760 	.word	0x20009760
 800be40:	20009764 	.word	0x20009764
 800be44:	08019bdc 	.word	0x08019bdc
 800be48:	08019c64 	.word	0x08019c64
 800be4c:	08019c2c 	.word	0x08019c2c
 800be50:	20009768 	.word	0x20009768
 800be54:	08019c88 	.word	0x08019c88
 800be58:	0800bb89 	.word	0x0800bb89
 800be5c:	08019cac 	.word	0x08019cac

0800be60 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800be60:	b480      	push	{r7}
 800be62:	b083      	sub	sp, #12
 800be64:	af00      	add	r7, sp, #0
 800be66:	4603      	mov	r3, r0
 800be68:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800be6a:	88fb      	ldrh	r3, [r7, #6]
 800be6c:	021b      	lsls	r3, r3, #8
 800be6e:	b21a      	sxth	r2, r3
 800be70:	88fb      	ldrh	r3, [r7, #6]
 800be72:	0a1b      	lsrs	r3, r3, #8
 800be74:	b29b      	uxth	r3, r3
 800be76:	b21b      	sxth	r3, r3
 800be78:	4313      	orrs	r3, r2
 800be7a:	b21b      	sxth	r3, r3
 800be7c:	b29b      	uxth	r3, r3
}
 800be7e:	4618      	mov	r0, r3
 800be80:	370c      	adds	r7, #12
 800be82:	46bd      	mov	sp, r7
 800be84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be88:	4770      	bx	lr

0800be8a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800be8a:	b480      	push	{r7}
 800be8c:	b083      	sub	sp, #12
 800be8e:	af00      	add	r7, sp, #0
 800be90:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	061a      	lsls	r2, r3, #24
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	021b      	lsls	r3, r3, #8
 800be9a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800be9e:	431a      	orrs	r2, r3
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	0a1b      	lsrs	r3, r3, #8
 800bea4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800bea8:	431a      	orrs	r2, r3
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	0e1b      	lsrs	r3, r3, #24
 800beae:	4313      	orrs	r3, r2
}
 800beb0:	4618      	mov	r0, r3
 800beb2:	370c      	adds	r7, #12
 800beb4:	46bd      	mov	sp, r7
 800beb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beba:	4770      	bx	lr

0800bebc <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800bebc:	b480      	push	{r7}
 800bebe:	b089      	sub	sp, #36	; 0x24
 800bec0:	af00      	add	r7, sp, #0
 800bec2:	6078      	str	r0, [r7, #4]
 800bec4:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800beca:	2300      	movs	r3, #0
 800becc:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800bece:	2300      	movs	r3, #0
 800bed0:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800bed2:	69fb      	ldr	r3, [r7, #28]
 800bed4:	f003 0301 	and.w	r3, r3, #1
 800bed8:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800beda:	693b      	ldr	r3, [r7, #16]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d00d      	beq.n	800befc <lwip_standard_chksum+0x40>
 800bee0:	683b      	ldr	r3, [r7, #0]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	dd0a      	ble.n	800befc <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800bee6:	69fa      	ldr	r2, [r7, #28]
 800bee8:	1c53      	adds	r3, r2, #1
 800beea:	61fb      	str	r3, [r7, #28]
 800beec:	f107 030e 	add.w	r3, r7, #14
 800bef0:	3301      	adds	r3, #1
 800bef2:	7812      	ldrb	r2, [r2, #0]
 800bef4:	701a      	strb	r2, [r3, #0]
    len--;
 800bef6:	683b      	ldr	r3, [r7, #0]
 800bef8:	3b01      	subs	r3, #1
 800befa:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800befc:	69fb      	ldr	r3, [r7, #28]
 800befe:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800bf00:	e00a      	b.n	800bf18 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800bf02:	69bb      	ldr	r3, [r7, #24]
 800bf04:	1c9a      	adds	r2, r3, #2
 800bf06:	61ba      	str	r2, [r7, #24]
 800bf08:	881b      	ldrh	r3, [r3, #0]
 800bf0a:	461a      	mov	r2, r3
 800bf0c:	697b      	ldr	r3, [r7, #20]
 800bf0e:	4413      	add	r3, r2
 800bf10:	617b      	str	r3, [r7, #20]
    len -= 2;
 800bf12:	683b      	ldr	r3, [r7, #0]
 800bf14:	3b02      	subs	r3, #2
 800bf16:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800bf18:	683b      	ldr	r3, [r7, #0]
 800bf1a:	2b01      	cmp	r3, #1
 800bf1c:	dcf1      	bgt.n	800bf02 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800bf1e:	683b      	ldr	r3, [r7, #0]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	dd04      	ble.n	800bf2e <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800bf24:	f107 030e 	add.w	r3, r7, #14
 800bf28:	69ba      	ldr	r2, [r7, #24]
 800bf2a:	7812      	ldrb	r2, [r2, #0]
 800bf2c:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800bf2e:	89fb      	ldrh	r3, [r7, #14]
 800bf30:	461a      	mov	r2, r3
 800bf32:	697b      	ldr	r3, [r7, #20]
 800bf34:	4413      	add	r3, r2
 800bf36:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800bf38:	697b      	ldr	r3, [r7, #20]
 800bf3a:	0c1a      	lsrs	r2, r3, #16
 800bf3c:	697b      	ldr	r3, [r7, #20]
 800bf3e:	b29b      	uxth	r3, r3
 800bf40:	4413      	add	r3, r2
 800bf42:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800bf44:	697b      	ldr	r3, [r7, #20]
 800bf46:	0c1a      	lsrs	r2, r3, #16
 800bf48:	697b      	ldr	r3, [r7, #20]
 800bf4a:	b29b      	uxth	r3, r3
 800bf4c:	4413      	add	r3, r2
 800bf4e:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800bf50:	693b      	ldr	r3, [r7, #16]
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d007      	beq.n	800bf66 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800bf56:	697b      	ldr	r3, [r7, #20]
 800bf58:	021b      	lsls	r3, r3, #8
 800bf5a:	b29a      	uxth	r2, r3
 800bf5c:	697b      	ldr	r3, [r7, #20]
 800bf5e:	0a1b      	lsrs	r3, r3, #8
 800bf60:	b2db      	uxtb	r3, r3
 800bf62:	4313      	orrs	r3, r2
 800bf64:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800bf66:	697b      	ldr	r3, [r7, #20]
 800bf68:	b29b      	uxth	r3, r3
}
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	3724      	adds	r7, #36	; 0x24
 800bf6e:	46bd      	mov	sp, r7
 800bf70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf74:	4770      	bx	lr

0800bf76 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800bf76:	b580      	push	{r7, lr}
 800bf78:	b082      	sub	sp, #8
 800bf7a:	af00      	add	r7, sp, #0
 800bf7c:	6078      	str	r0, [r7, #4]
 800bf7e:	460b      	mov	r3, r1
 800bf80:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800bf82:	887b      	ldrh	r3, [r7, #2]
 800bf84:	4619      	mov	r1, r3
 800bf86:	6878      	ldr	r0, [r7, #4]
 800bf88:	f7ff ff98 	bl	800bebc <lwip_standard_chksum>
 800bf8c:	4603      	mov	r3, r0
 800bf8e:	43db      	mvns	r3, r3
 800bf90:	b29b      	uxth	r3, r3
}
 800bf92:	4618      	mov	r0, r3
 800bf94:	3708      	adds	r7, #8
 800bf96:	46bd      	mov	sp, r7
 800bf98:	bd80      	pop	{r7, pc}

0800bf9a <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800bf9a:	b580      	push	{r7, lr}
 800bf9c:	b086      	sub	sp, #24
 800bf9e:	af00      	add	r7, sp, #0
 800bfa0:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 800bfa2:	2300      	movs	r3, #0
 800bfa4:	60fb      	str	r3, [r7, #12]

  acc = 0;
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	613b      	str	r3, [r7, #16]
 800bfae:	e02b      	b.n	800c008 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 800bfb0:	693b      	ldr	r3, [r7, #16]
 800bfb2:	685a      	ldr	r2, [r3, #4]
 800bfb4:	693b      	ldr	r3, [r7, #16]
 800bfb6:	895b      	ldrh	r3, [r3, #10]
 800bfb8:	4619      	mov	r1, r3
 800bfba:	4610      	mov	r0, r2
 800bfbc:	f7ff ff7e 	bl	800bebc <lwip_standard_chksum>
 800bfc0:	4603      	mov	r3, r0
 800bfc2:	461a      	mov	r2, r3
 800bfc4:	697b      	ldr	r3, [r7, #20]
 800bfc6:	4413      	add	r3, r2
 800bfc8:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800bfca:	697b      	ldr	r3, [r7, #20]
 800bfcc:	0c1a      	lsrs	r2, r3, #16
 800bfce:	697b      	ldr	r3, [r7, #20]
 800bfd0:	b29b      	uxth	r3, r3
 800bfd2:	4413      	add	r3, r2
 800bfd4:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800bfd6:	693b      	ldr	r3, [r7, #16]
 800bfd8:	895b      	ldrh	r3, [r3, #10]
 800bfda:	f003 0301 	and.w	r3, r3, #1
 800bfde:	b29b      	uxth	r3, r3
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d00e      	beq.n	800c002 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	bf0c      	ite	eq
 800bfea:	2301      	moveq	r3, #1
 800bfec:	2300      	movne	r3, #0
 800bfee:	b2db      	uxtb	r3, r3
 800bff0:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 800bff2:	697b      	ldr	r3, [r7, #20]
 800bff4:	021b      	lsls	r3, r3, #8
 800bff6:	b29a      	uxth	r2, r3
 800bff8:	697b      	ldr	r3, [r7, #20]
 800bffa:	0a1b      	lsrs	r3, r3, #8
 800bffc:	b2db      	uxtb	r3, r3
 800bffe:	4313      	orrs	r3, r2
 800c000:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800c002:	693b      	ldr	r3, [r7, #16]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	613b      	str	r3, [r7, #16]
 800c008:	693b      	ldr	r3, [r7, #16]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d1d0      	bne.n	800bfb0 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	2b00      	cmp	r3, #0
 800c012:	d007      	beq.n	800c024 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 800c014:	697b      	ldr	r3, [r7, #20]
 800c016:	021b      	lsls	r3, r3, #8
 800c018:	b29a      	uxth	r2, r3
 800c01a:	697b      	ldr	r3, [r7, #20]
 800c01c:	0a1b      	lsrs	r3, r3, #8
 800c01e:	b2db      	uxtb	r3, r3
 800c020:	4313      	orrs	r3, r2
 800c022:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 800c024:	697b      	ldr	r3, [r7, #20]
 800c026:	b29b      	uxth	r3, r3
 800c028:	43db      	mvns	r3, r3
 800c02a:	b29b      	uxth	r3, r3
}
 800c02c:	4618      	mov	r0, r3
 800c02e:	3718      	adds	r7, #24
 800c030:	46bd      	mov	sp, r7
 800c032:	bd80      	pop	{r7, pc}

0800c034 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800c034:	b580      	push	{r7, lr}
 800c036:	b082      	sub	sp, #8
 800c038:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800c03a:	2300      	movs	r3, #0
 800c03c:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800c03e:	f00b ff73 	bl	8017f28 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800c042:	f000 f8d5 	bl	800c1f0 <mem_init>
  memp_init();
 800c046:	f000 fc2d 	bl	800c8a4 <memp_init>
  pbuf_init();
  netif_init();
 800c04a:	f000 fd39 	bl	800cac0 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800c04e:	f007 f8d5 	bl	80131fc <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800c052:	f001 fdfd 	bl	800dc50 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800c056:	f007 f817 	bl	8013088 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800c05a:	bf00      	nop
 800c05c:	3708      	adds	r7, #8
 800c05e:	46bd      	mov	sp, r7
 800c060:	bd80      	pop	{r7, pc}
	...

0800c064 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800c064:	b480      	push	{r7}
 800c066:	b083      	sub	sp, #12
 800c068:	af00      	add	r7, sp, #0
 800c06a:	4603      	mov	r3, r0
 800c06c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800c06e:	4b05      	ldr	r3, [pc, #20]	; (800c084 <ptr_to_mem+0x20>)
 800c070:	681a      	ldr	r2, [r3, #0]
 800c072:	88fb      	ldrh	r3, [r7, #6]
 800c074:	4413      	add	r3, r2
}
 800c076:	4618      	mov	r0, r3
 800c078:	370c      	adds	r7, #12
 800c07a:	46bd      	mov	sp, r7
 800c07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c080:	4770      	bx	lr
 800c082:	bf00      	nop
 800c084:	20009784 	.word	0x20009784

0800c088 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800c088:	b480      	push	{r7}
 800c08a:	b083      	sub	sp, #12
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800c090:	4b05      	ldr	r3, [pc, #20]	; (800c0a8 <mem_to_ptr+0x20>)
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	687a      	ldr	r2, [r7, #4]
 800c096:	1ad3      	subs	r3, r2, r3
 800c098:	b29b      	uxth	r3, r3
}
 800c09a:	4618      	mov	r0, r3
 800c09c:	370c      	adds	r7, #12
 800c09e:	46bd      	mov	sp, r7
 800c0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a4:	4770      	bx	lr
 800c0a6:	bf00      	nop
 800c0a8:	20009784 	.word	0x20009784

0800c0ac <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800c0ac:	b590      	push	{r4, r7, lr}
 800c0ae:	b085      	sub	sp, #20
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800c0b4:	4b45      	ldr	r3, [pc, #276]	; (800c1cc <plug_holes+0x120>)
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	687a      	ldr	r2, [r7, #4]
 800c0ba:	429a      	cmp	r2, r3
 800c0bc:	d206      	bcs.n	800c0cc <plug_holes+0x20>
 800c0be:	4b44      	ldr	r3, [pc, #272]	; (800c1d0 <plug_holes+0x124>)
 800c0c0:	f240 12df 	movw	r2, #479	; 0x1df
 800c0c4:	4943      	ldr	r1, [pc, #268]	; (800c1d4 <plug_holes+0x128>)
 800c0c6:	4844      	ldr	r0, [pc, #272]	; (800c1d8 <plug_holes+0x12c>)
 800c0c8:	f00c fce8 	bl	8018a9c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800c0cc:	4b43      	ldr	r3, [pc, #268]	; (800c1dc <plug_holes+0x130>)
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	687a      	ldr	r2, [r7, #4]
 800c0d2:	429a      	cmp	r2, r3
 800c0d4:	d306      	bcc.n	800c0e4 <plug_holes+0x38>
 800c0d6:	4b3e      	ldr	r3, [pc, #248]	; (800c1d0 <plug_holes+0x124>)
 800c0d8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800c0dc:	4940      	ldr	r1, [pc, #256]	; (800c1e0 <plug_holes+0x134>)
 800c0de:	483e      	ldr	r0, [pc, #248]	; (800c1d8 <plug_holes+0x12c>)
 800c0e0:	f00c fcdc 	bl	8018a9c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	791b      	ldrb	r3, [r3, #4]
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d006      	beq.n	800c0fa <plug_holes+0x4e>
 800c0ec:	4b38      	ldr	r3, [pc, #224]	; (800c1d0 <plug_holes+0x124>)
 800c0ee:	f240 12e1 	movw	r2, #481	; 0x1e1
 800c0f2:	493c      	ldr	r1, [pc, #240]	; (800c1e4 <plug_holes+0x138>)
 800c0f4:	4838      	ldr	r0, [pc, #224]	; (800c1d8 <plug_holes+0x12c>)
 800c0f6:	f00c fcd1 	bl	8018a9c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	881b      	ldrh	r3, [r3, #0]
 800c0fe:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c102:	d906      	bls.n	800c112 <plug_holes+0x66>
 800c104:	4b32      	ldr	r3, [pc, #200]	; (800c1d0 <plug_holes+0x124>)
 800c106:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800c10a:	4937      	ldr	r1, [pc, #220]	; (800c1e8 <plug_holes+0x13c>)
 800c10c:	4832      	ldr	r0, [pc, #200]	; (800c1d8 <plug_holes+0x12c>)
 800c10e:	f00c fcc5 	bl	8018a9c <iprintf>

  nmem = ptr_to_mem(mem->next);
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	881b      	ldrh	r3, [r3, #0]
 800c116:	4618      	mov	r0, r3
 800c118:	f7ff ffa4 	bl	800c064 <ptr_to_mem>
 800c11c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800c11e:	687a      	ldr	r2, [r7, #4]
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	429a      	cmp	r2, r3
 800c124:	d024      	beq.n	800c170 <plug_holes+0xc4>
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	791b      	ldrb	r3, [r3, #4]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d120      	bne.n	800c170 <plug_holes+0xc4>
 800c12e:	4b2b      	ldr	r3, [pc, #172]	; (800c1dc <plug_holes+0x130>)
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	68fa      	ldr	r2, [r7, #12]
 800c134:	429a      	cmp	r2, r3
 800c136:	d01b      	beq.n	800c170 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800c138:	4b2c      	ldr	r3, [pc, #176]	; (800c1ec <plug_holes+0x140>)
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	68fa      	ldr	r2, [r7, #12]
 800c13e:	429a      	cmp	r2, r3
 800c140:	d102      	bne.n	800c148 <plug_holes+0x9c>
      lfree = mem;
 800c142:	4a2a      	ldr	r2, [pc, #168]	; (800c1ec <plug_holes+0x140>)
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	881a      	ldrh	r2, [r3, #0]
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	881b      	ldrh	r3, [r3, #0]
 800c154:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c158:	d00a      	beq.n	800c170 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	881b      	ldrh	r3, [r3, #0]
 800c15e:	4618      	mov	r0, r3
 800c160:	f7ff ff80 	bl	800c064 <ptr_to_mem>
 800c164:	4604      	mov	r4, r0
 800c166:	6878      	ldr	r0, [r7, #4]
 800c168:	f7ff ff8e 	bl	800c088 <mem_to_ptr>
 800c16c:	4603      	mov	r3, r0
 800c16e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	885b      	ldrh	r3, [r3, #2]
 800c174:	4618      	mov	r0, r3
 800c176:	f7ff ff75 	bl	800c064 <ptr_to_mem>
 800c17a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800c17c:	68ba      	ldr	r2, [r7, #8]
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	429a      	cmp	r2, r3
 800c182:	d01f      	beq.n	800c1c4 <plug_holes+0x118>
 800c184:	68bb      	ldr	r3, [r7, #8]
 800c186:	791b      	ldrb	r3, [r3, #4]
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d11b      	bne.n	800c1c4 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800c18c:	4b17      	ldr	r3, [pc, #92]	; (800c1ec <plug_holes+0x140>)
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	687a      	ldr	r2, [r7, #4]
 800c192:	429a      	cmp	r2, r3
 800c194:	d102      	bne.n	800c19c <plug_holes+0xf0>
      lfree = pmem;
 800c196:	4a15      	ldr	r2, [pc, #84]	; (800c1ec <plug_holes+0x140>)
 800c198:	68bb      	ldr	r3, [r7, #8]
 800c19a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	881a      	ldrh	r2, [r3, #0]
 800c1a0:	68bb      	ldr	r3, [r7, #8]
 800c1a2:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	881b      	ldrh	r3, [r3, #0]
 800c1a8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c1ac:	d00a      	beq.n	800c1c4 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	881b      	ldrh	r3, [r3, #0]
 800c1b2:	4618      	mov	r0, r3
 800c1b4:	f7ff ff56 	bl	800c064 <ptr_to_mem>
 800c1b8:	4604      	mov	r4, r0
 800c1ba:	68b8      	ldr	r0, [r7, #8]
 800c1bc:	f7ff ff64 	bl	800c088 <mem_to_ptr>
 800c1c0:	4603      	mov	r3, r0
 800c1c2:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800c1c4:	bf00      	nop
 800c1c6:	3714      	adds	r7, #20
 800c1c8:	46bd      	mov	sp, r7
 800c1ca:	bd90      	pop	{r4, r7, pc}
 800c1cc:	20009784 	.word	0x20009784
 800c1d0:	08019cbc 	.word	0x08019cbc
 800c1d4:	08019cec 	.word	0x08019cec
 800c1d8:	08019d04 	.word	0x08019d04
 800c1dc:	20009788 	.word	0x20009788
 800c1e0:	08019d2c 	.word	0x08019d2c
 800c1e4:	08019d48 	.word	0x08019d48
 800c1e8:	08019d64 	.word	0x08019d64
 800c1ec:	20009790 	.word	0x20009790

0800c1f0 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800c1f0:	b580      	push	{r7, lr}
 800c1f2:	b082      	sub	sp, #8
 800c1f4:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800c1f6:	4b1d      	ldr	r3, [pc, #116]	; (800c26c <mem_init+0x7c>)
 800c1f8:	4a1d      	ldr	r2, [pc, #116]	; (800c270 <mem_init+0x80>)
 800c1fa:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800c1fc:	4b1b      	ldr	r3, [pc, #108]	; (800c26c <mem_init+0x7c>)
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800c208:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	2200      	movs	r2, #0
 800c20e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	2200      	movs	r2, #0
 800c214:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800c216:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800c21a:	f7ff ff23 	bl	800c064 <ptr_to_mem>
 800c21e:	4603      	mov	r3, r0
 800c220:	4a14      	ldr	r2, [pc, #80]	; (800c274 <mem_init+0x84>)
 800c222:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800c224:	4b13      	ldr	r3, [pc, #76]	; (800c274 <mem_init+0x84>)
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	2201      	movs	r2, #1
 800c22a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800c22c:	4b11      	ldr	r3, [pc, #68]	; (800c274 <mem_init+0x84>)
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800c234:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800c236:	4b0f      	ldr	r3, [pc, #60]	; (800c274 <mem_init+0x84>)
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800c23e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800c240:	4b0a      	ldr	r3, [pc, #40]	; (800c26c <mem_init+0x7c>)
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	4a0c      	ldr	r2, [pc, #48]	; (800c278 <mem_init+0x88>)
 800c246:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800c248:	480c      	ldr	r0, [pc, #48]	; (800c27c <mem_init+0x8c>)
 800c24a:	f00b fe79 	bl	8017f40 <sys_mutex_new>
 800c24e:	4603      	mov	r3, r0
 800c250:	2b00      	cmp	r3, #0
 800c252:	d006      	beq.n	800c262 <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800c254:	4b0a      	ldr	r3, [pc, #40]	; (800c280 <mem_init+0x90>)
 800c256:	f240 221f 	movw	r2, #543	; 0x21f
 800c25a:	490a      	ldr	r1, [pc, #40]	; (800c284 <mem_init+0x94>)
 800c25c:	480a      	ldr	r0, [pc, #40]	; (800c288 <mem_init+0x98>)
 800c25e:	f00c fc1d 	bl	8018a9c <iprintf>
  }
}
 800c262:	bf00      	nop
 800c264:	3708      	adds	r7, #8
 800c266:	46bd      	mov	sp, r7
 800c268:	bd80      	pop	{r7, pc}
 800c26a:	bf00      	nop
 800c26c:	20009784 	.word	0x20009784
 800c270:	30044000 	.word	0x30044000
 800c274:	20009788 	.word	0x20009788
 800c278:	20009790 	.word	0x20009790
 800c27c:	2000978c 	.word	0x2000978c
 800c280:	08019cbc 	.word	0x08019cbc
 800c284:	08019d90 	.word	0x08019d90
 800c288:	08019d04 	.word	0x08019d04

0800c28c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800c28c:	b580      	push	{r7, lr}
 800c28e:	b086      	sub	sp, #24
 800c290:	af00      	add	r7, sp, #0
 800c292:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800c294:	6878      	ldr	r0, [r7, #4]
 800c296:	f7ff fef7 	bl	800c088 <mem_to_ptr>
 800c29a:	4603      	mov	r3, r0
 800c29c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	881b      	ldrh	r3, [r3, #0]
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	f7ff fede 	bl	800c064 <ptr_to_mem>
 800c2a8:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	885b      	ldrh	r3, [r3, #2]
 800c2ae:	4618      	mov	r0, r3
 800c2b0:	f7ff fed8 	bl	800c064 <ptr_to_mem>
 800c2b4:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	881b      	ldrh	r3, [r3, #0]
 800c2ba:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c2be:	d818      	bhi.n	800c2f2 <mem_link_valid+0x66>
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	885b      	ldrh	r3, [r3, #2]
 800c2c4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c2c8:	d813      	bhi.n	800c2f2 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800c2ce:	8afa      	ldrh	r2, [r7, #22]
 800c2d0:	429a      	cmp	r2, r3
 800c2d2:	d004      	beq.n	800c2de <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	881b      	ldrh	r3, [r3, #0]
 800c2d8:	8afa      	ldrh	r2, [r7, #22]
 800c2da:	429a      	cmp	r2, r3
 800c2dc:	d109      	bne.n	800c2f2 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800c2de:	4b08      	ldr	r3, [pc, #32]	; (800c300 <mem_link_valid+0x74>)
 800c2e0:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c2e2:	693a      	ldr	r2, [r7, #16]
 800c2e4:	429a      	cmp	r2, r3
 800c2e6:	d006      	beq.n	800c2f6 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800c2e8:	693b      	ldr	r3, [r7, #16]
 800c2ea:	885b      	ldrh	r3, [r3, #2]
 800c2ec:	8afa      	ldrh	r2, [r7, #22]
 800c2ee:	429a      	cmp	r2, r3
 800c2f0:	d001      	beq.n	800c2f6 <mem_link_valid+0x6a>
    return 0;
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	e000      	b.n	800c2f8 <mem_link_valid+0x6c>
  }
  return 1;
 800c2f6:	2301      	movs	r3, #1
}
 800c2f8:	4618      	mov	r0, r3
 800c2fa:	3718      	adds	r7, #24
 800c2fc:	46bd      	mov	sp, r7
 800c2fe:	bd80      	pop	{r7, pc}
 800c300:	20009788 	.word	0x20009788

0800c304 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800c304:	b580      	push	{r7, lr}
 800c306:	b088      	sub	sp, #32
 800c308:	af00      	add	r7, sp, #0
 800c30a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d070      	beq.n	800c3f4 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	f003 0303 	and.w	r3, r3, #3
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d00d      	beq.n	800c338 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800c31c:	4b37      	ldr	r3, [pc, #220]	; (800c3fc <mem_free+0xf8>)
 800c31e:	f240 2273 	movw	r2, #627	; 0x273
 800c322:	4937      	ldr	r1, [pc, #220]	; (800c400 <mem_free+0xfc>)
 800c324:	4837      	ldr	r0, [pc, #220]	; (800c404 <mem_free+0x100>)
 800c326:	f00c fbb9 	bl	8018a9c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c32a:	f00b fe5b 	bl	8017fe4 <sys_arch_protect>
 800c32e:	60f8      	str	r0, [r7, #12]
 800c330:	68f8      	ldr	r0, [r7, #12]
 800c332:	f00b fe65 	bl	8018000 <sys_arch_unprotect>
    return;
 800c336:	e05e      	b.n	800c3f6 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	3b08      	subs	r3, #8
 800c33c:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800c33e:	4b32      	ldr	r3, [pc, #200]	; (800c408 <mem_free+0x104>)
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	69fa      	ldr	r2, [r7, #28]
 800c344:	429a      	cmp	r2, r3
 800c346:	d306      	bcc.n	800c356 <mem_free+0x52>
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	f103 020c 	add.w	r2, r3, #12
 800c34e:	4b2f      	ldr	r3, [pc, #188]	; (800c40c <mem_free+0x108>)
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	429a      	cmp	r2, r3
 800c354:	d90d      	bls.n	800c372 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800c356:	4b29      	ldr	r3, [pc, #164]	; (800c3fc <mem_free+0xf8>)
 800c358:	f240 227f 	movw	r2, #639	; 0x27f
 800c35c:	492c      	ldr	r1, [pc, #176]	; (800c410 <mem_free+0x10c>)
 800c35e:	4829      	ldr	r0, [pc, #164]	; (800c404 <mem_free+0x100>)
 800c360:	f00c fb9c 	bl	8018a9c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c364:	f00b fe3e 	bl	8017fe4 <sys_arch_protect>
 800c368:	6138      	str	r0, [r7, #16]
 800c36a:	6938      	ldr	r0, [r7, #16]
 800c36c:	f00b fe48 	bl	8018000 <sys_arch_unprotect>
    return;
 800c370:	e041      	b.n	800c3f6 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800c372:	4828      	ldr	r0, [pc, #160]	; (800c414 <mem_free+0x110>)
 800c374:	f00b fdfa 	bl	8017f6c <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800c378:	69fb      	ldr	r3, [r7, #28]
 800c37a:	791b      	ldrb	r3, [r3, #4]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d110      	bne.n	800c3a2 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800c380:	4b1e      	ldr	r3, [pc, #120]	; (800c3fc <mem_free+0xf8>)
 800c382:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800c386:	4924      	ldr	r1, [pc, #144]	; (800c418 <mem_free+0x114>)
 800c388:	481e      	ldr	r0, [pc, #120]	; (800c404 <mem_free+0x100>)
 800c38a:	f00c fb87 	bl	8018a9c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800c38e:	4821      	ldr	r0, [pc, #132]	; (800c414 <mem_free+0x110>)
 800c390:	f00b fdfb 	bl	8017f8a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c394:	f00b fe26 	bl	8017fe4 <sys_arch_protect>
 800c398:	6178      	str	r0, [r7, #20]
 800c39a:	6978      	ldr	r0, [r7, #20]
 800c39c:	f00b fe30 	bl	8018000 <sys_arch_unprotect>
    return;
 800c3a0:	e029      	b.n	800c3f6 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800c3a2:	69f8      	ldr	r0, [r7, #28]
 800c3a4:	f7ff ff72 	bl	800c28c <mem_link_valid>
 800c3a8:	4603      	mov	r3, r0
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d110      	bne.n	800c3d0 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800c3ae:	4b13      	ldr	r3, [pc, #76]	; (800c3fc <mem_free+0xf8>)
 800c3b0:	f240 2295 	movw	r2, #661	; 0x295
 800c3b4:	4919      	ldr	r1, [pc, #100]	; (800c41c <mem_free+0x118>)
 800c3b6:	4813      	ldr	r0, [pc, #76]	; (800c404 <mem_free+0x100>)
 800c3b8:	f00c fb70 	bl	8018a9c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800c3bc:	4815      	ldr	r0, [pc, #84]	; (800c414 <mem_free+0x110>)
 800c3be:	f00b fde4 	bl	8017f8a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c3c2:	f00b fe0f 	bl	8017fe4 <sys_arch_protect>
 800c3c6:	61b8      	str	r0, [r7, #24]
 800c3c8:	69b8      	ldr	r0, [r7, #24]
 800c3ca:	f00b fe19 	bl	8018000 <sys_arch_unprotect>
    return;
 800c3ce:	e012      	b.n	800c3f6 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800c3d0:	69fb      	ldr	r3, [r7, #28]
 800c3d2:	2200      	movs	r2, #0
 800c3d4:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800c3d6:	4b12      	ldr	r3, [pc, #72]	; (800c420 <mem_free+0x11c>)
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	69fa      	ldr	r2, [r7, #28]
 800c3dc:	429a      	cmp	r2, r3
 800c3de:	d202      	bcs.n	800c3e6 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800c3e0:	4a0f      	ldr	r2, [pc, #60]	; (800c420 <mem_free+0x11c>)
 800c3e2:	69fb      	ldr	r3, [r7, #28]
 800c3e4:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800c3e6:	69f8      	ldr	r0, [r7, #28]
 800c3e8:	f7ff fe60 	bl	800c0ac <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800c3ec:	4809      	ldr	r0, [pc, #36]	; (800c414 <mem_free+0x110>)
 800c3ee:	f00b fdcc 	bl	8017f8a <sys_mutex_unlock>
 800c3f2:	e000      	b.n	800c3f6 <mem_free+0xf2>
    return;
 800c3f4:	bf00      	nop
}
 800c3f6:	3720      	adds	r7, #32
 800c3f8:	46bd      	mov	sp, r7
 800c3fa:	bd80      	pop	{r7, pc}
 800c3fc:	08019cbc 	.word	0x08019cbc
 800c400:	08019dac 	.word	0x08019dac
 800c404:	08019d04 	.word	0x08019d04
 800c408:	20009784 	.word	0x20009784
 800c40c:	20009788 	.word	0x20009788
 800c410:	08019dd0 	.word	0x08019dd0
 800c414:	2000978c 	.word	0x2000978c
 800c418:	08019dec 	.word	0x08019dec
 800c41c:	08019e14 	.word	0x08019e14
 800c420:	20009790 	.word	0x20009790

0800c424 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800c424:	b580      	push	{r7, lr}
 800c426:	b088      	sub	sp, #32
 800c428:	af00      	add	r7, sp, #0
 800c42a:	6078      	str	r0, [r7, #4]
 800c42c:	460b      	mov	r3, r1
 800c42e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800c430:	887b      	ldrh	r3, [r7, #2]
 800c432:	3303      	adds	r3, #3
 800c434:	b29b      	uxth	r3, r3
 800c436:	f023 0303 	bic.w	r3, r3, #3
 800c43a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800c43c:	8bfb      	ldrh	r3, [r7, #30]
 800c43e:	2b0b      	cmp	r3, #11
 800c440:	d801      	bhi.n	800c446 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800c442:	230c      	movs	r3, #12
 800c444:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800c446:	8bfb      	ldrh	r3, [r7, #30]
 800c448:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c44c:	d803      	bhi.n	800c456 <mem_trim+0x32>
 800c44e:	8bfa      	ldrh	r2, [r7, #30]
 800c450:	887b      	ldrh	r3, [r7, #2]
 800c452:	429a      	cmp	r2, r3
 800c454:	d201      	bcs.n	800c45a <mem_trim+0x36>
    return NULL;
 800c456:	2300      	movs	r3, #0
 800c458:	e0d8      	b.n	800c60c <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800c45a:	4b6e      	ldr	r3, [pc, #440]	; (800c614 <mem_trim+0x1f0>)
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	687a      	ldr	r2, [r7, #4]
 800c460:	429a      	cmp	r2, r3
 800c462:	d304      	bcc.n	800c46e <mem_trim+0x4a>
 800c464:	4b6c      	ldr	r3, [pc, #432]	; (800c618 <mem_trim+0x1f4>)
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	687a      	ldr	r2, [r7, #4]
 800c46a:	429a      	cmp	r2, r3
 800c46c:	d306      	bcc.n	800c47c <mem_trim+0x58>
 800c46e:	4b6b      	ldr	r3, [pc, #428]	; (800c61c <mem_trim+0x1f8>)
 800c470:	f240 22d1 	movw	r2, #721	; 0x2d1
 800c474:	496a      	ldr	r1, [pc, #424]	; (800c620 <mem_trim+0x1fc>)
 800c476:	486b      	ldr	r0, [pc, #428]	; (800c624 <mem_trim+0x200>)
 800c478:	f00c fb10 	bl	8018a9c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800c47c:	4b65      	ldr	r3, [pc, #404]	; (800c614 <mem_trim+0x1f0>)
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	687a      	ldr	r2, [r7, #4]
 800c482:	429a      	cmp	r2, r3
 800c484:	d304      	bcc.n	800c490 <mem_trim+0x6c>
 800c486:	4b64      	ldr	r3, [pc, #400]	; (800c618 <mem_trim+0x1f4>)
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	687a      	ldr	r2, [r7, #4]
 800c48c:	429a      	cmp	r2, r3
 800c48e:	d307      	bcc.n	800c4a0 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c490:	f00b fda8 	bl	8017fe4 <sys_arch_protect>
 800c494:	60b8      	str	r0, [r7, #8]
 800c496:	68b8      	ldr	r0, [r7, #8]
 800c498:	f00b fdb2 	bl	8018000 <sys_arch_unprotect>
    return rmem;
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	e0b5      	b.n	800c60c <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	3b08      	subs	r3, #8
 800c4a4:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800c4a6:	69b8      	ldr	r0, [r7, #24]
 800c4a8:	f7ff fdee 	bl	800c088 <mem_to_ptr>
 800c4ac:	4603      	mov	r3, r0
 800c4ae:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800c4b0:	69bb      	ldr	r3, [r7, #24]
 800c4b2:	881a      	ldrh	r2, [r3, #0]
 800c4b4:	8afb      	ldrh	r3, [r7, #22]
 800c4b6:	1ad3      	subs	r3, r2, r3
 800c4b8:	b29b      	uxth	r3, r3
 800c4ba:	3b08      	subs	r3, #8
 800c4bc:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800c4be:	8bfa      	ldrh	r2, [r7, #30]
 800c4c0:	8abb      	ldrh	r3, [r7, #20]
 800c4c2:	429a      	cmp	r2, r3
 800c4c4:	d906      	bls.n	800c4d4 <mem_trim+0xb0>
 800c4c6:	4b55      	ldr	r3, [pc, #340]	; (800c61c <mem_trim+0x1f8>)
 800c4c8:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800c4cc:	4956      	ldr	r1, [pc, #344]	; (800c628 <mem_trim+0x204>)
 800c4ce:	4855      	ldr	r0, [pc, #340]	; (800c624 <mem_trim+0x200>)
 800c4d0:	f00c fae4 	bl	8018a9c <iprintf>
  if (newsize > size) {
 800c4d4:	8bfa      	ldrh	r2, [r7, #30]
 800c4d6:	8abb      	ldrh	r3, [r7, #20]
 800c4d8:	429a      	cmp	r2, r3
 800c4da:	d901      	bls.n	800c4e0 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800c4dc:	2300      	movs	r3, #0
 800c4de:	e095      	b.n	800c60c <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800c4e0:	8bfa      	ldrh	r2, [r7, #30]
 800c4e2:	8abb      	ldrh	r3, [r7, #20]
 800c4e4:	429a      	cmp	r2, r3
 800c4e6:	d101      	bne.n	800c4ec <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	e08f      	b.n	800c60c <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800c4ec:	484f      	ldr	r0, [pc, #316]	; (800c62c <mem_trim+0x208>)
 800c4ee:	f00b fd3d 	bl	8017f6c <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800c4f2:	69bb      	ldr	r3, [r7, #24]
 800c4f4:	881b      	ldrh	r3, [r3, #0]
 800c4f6:	4618      	mov	r0, r3
 800c4f8:	f7ff fdb4 	bl	800c064 <ptr_to_mem>
 800c4fc:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800c4fe:	693b      	ldr	r3, [r7, #16]
 800c500:	791b      	ldrb	r3, [r3, #4]
 800c502:	2b00      	cmp	r3, #0
 800c504:	d13f      	bne.n	800c586 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800c506:	69bb      	ldr	r3, [r7, #24]
 800c508:	881b      	ldrh	r3, [r3, #0]
 800c50a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c50e:	d106      	bne.n	800c51e <mem_trim+0xfa>
 800c510:	4b42      	ldr	r3, [pc, #264]	; (800c61c <mem_trim+0x1f8>)
 800c512:	f240 22f5 	movw	r2, #757	; 0x2f5
 800c516:	4946      	ldr	r1, [pc, #280]	; (800c630 <mem_trim+0x20c>)
 800c518:	4842      	ldr	r0, [pc, #264]	; (800c624 <mem_trim+0x200>)
 800c51a:	f00c fabf 	bl	8018a9c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800c51e:	693b      	ldr	r3, [r7, #16]
 800c520:	881b      	ldrh	r3, [r3, #0]
 800c522:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800c524:	8afa      	ldrh	r2, [r7, #22]
 800c526:	8bfb      	ldrh	r3, [r7, #30]
 800c528:	4413      	add	r3, r2
 800c52a:	b29b      	uxth	r3, r3
 800c52c:	3308      	adds	r3, #8
 800c52e:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800c530:	4b40      	ldr	r3, [pc, #256]	; (800c634 <mem_trim+0x210>)
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	693a      	ldr	r2, [r7, #16]
 800c536:	429a      	cmp	r2, r3
 800c538:	d106      	bne.n	800c548 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800c53a:	89fb      	ldrh	r3, [r7, #14]
 800c53c:	4618      	mov	r0, r3
 800c53e:	f7ff fd91 	bl	800c064 <ptr_to_mem>
 800c542:	4603      	mov	r3, r0
 800c544:	4a3b      	ldr	r2, [pc, #236]	; (800c634 <mem_trim+0x210>)
 800c546:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800c548:	89fb      	ldrh	r3, [r7, #14]
 800c54a:	4618      	mov	r0, r3
 800c54c:	f7ff fd8a 	bl	800c064 <ptr_to_mem>
 800c550:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800c552:	693b      	ldr	r3, [r7, #16]
 800c554:	2200      	movs	r2, #0
 800c556:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800c558:	693b      	ldr	r3, [r7, #16]
 800c55a:	89ba      	ldrh	r2, [r7, #12]
 800c55c:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800c55e:	693b      	ldr	r3, [r7, #16]
 800c560:	8afa      	ldrh	r2, [r7, #22]
 800c562:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800c564:	69bb      	ldr	r3, [r7, #24]
 800c566:	89fa      	ldrh	r2, [r7, #14]
 800c568:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c56a:	693b      	ldr	r3, [r7, #16]
 800c56c:	881b      	ldrh	r3, [r3, #0]
 800c56e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c572:	d047      	beq.n	800c604 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800c574:	693b      	ldr	r3, [r7, #16]
 800c576:	881b      	ldrh	r3, [r3, #0]
 800c578:	4618      	mov	r0, r3
 800c57a:	f7ff fd73 	bl	800c064 <ptr_to_mem>
 800c57e:	4602      	mov	r2, r0
 800c580:	89fb      	ldrh	r3, [r7, #14]
 800c582:	8053      	strh	r3, [r2, #2]
 800c584:	e03e      	b.n	800c604 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800c586:	8bfb      	ldrh	r3, [r7, #30]
 800c588:	f103 0214 	add.w	r2, r3, #20
 800c58c:	8abb      	ldrh	r3, [r7, #20]
 800c58e:	429a      	cmp	r2, r3
 800c590:	d838      	bhi.n	800c604 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800c592:	8afa      	ldrh	r2, [r7, #22]
 800c594:	8bfb      	ldrh	r3, [r7, #30]
 800c596:	4413      	add	r3, r2
 800c598:	b29b      	uxth	r3, r3
 800c59a:	3308      	adds	r3, #8
 800c59c:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800c59e:	69bb      	ldr	r3, [r7, #24]
 800c5a0:	881b      	ldrh	r3, [r3, #0]
 800c5a2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c5a6:	d106      	bne.n	800c5b6 <mem_trim+0x192>
 800c5a8:	4b1c      	ldr	r3, [pc, #112]	; (800c61c <mem_trim+0x1f8>)
 800c5aa:	f240 3216 	movw	r2, #790	; 0x316
 800c5ae:	4920      	ldr	r1, [pc, #128]	; (800c630 <mem_trim+0x20c>)
 800c5b0:	481c      	ldr	r0, [pc, #112]	; (800c624 <mem_trim+0x200>)
 800c5b2:	f00c fa73 	bl	8018a9c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800c5b6:	89fb      	ldrh	r3, [r7, #14]
 800c5b8:	4618      	mov	r0, r3
 800c5ba:	f7ff fd53 	bl	800c064 <ptr_to_mem>
 800c5be:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800c5c0:	4b1c      	ldr	r3, [pc, #112]	; (800c634 <mem_trim+0x210>)
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	693a      	ldr	r2, [r7, #16]
 800c5c6:	429a      	cmp	r2, r3
 800c5c8:	d202      	bcs.n	800c5d0 <mem_trim+0x1ac>
      lfree = mem2;
 800c5ca:	4a1a      	ldr	r2, [pc, #104]	; (800c634 <mem_trim+0x210>)
 800c5cc:	693b      	ldr	r3, [r7, #16]
 800c5ce:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800c5d0:	693b      	ldr	r3, [r7, #16]
 800c5d2:	2200      	movs	r2, #0
 800c5d4:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800c5d6:	69bb      	ldr	r3, [r7, #24]
 800c5d8:	881a      	ldrh	r2, [r3, #0]
 800c5da:	693b      	ldr	r3, [r7, #16]
 800c5dc:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800c5de:	693b      	ldr	r3, [r7, #16]
 800c5e0:	8afa      	ldrh	r2, [r7, #22]
 800c5e2:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800c5e4:	69bb      	ldr	r3, [r7, #24]
 800c5e6:	89fa      	ldrh	r2, [r7, #14]
 800c5e8:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c5ea:	693b      	ldr	r3, [r7, #16]
 800c5ec:	881b      	ldrh	r3, [r3, #0]
 800c5ee:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c5f2:	d007      	beq.n	800c604 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800c5f4:	693b      	ldr	r3, [r7, #16]
 800c5f6:	881b      	ldrh	r3, [r3, #0]
 800c5f8:	4618      	mov	r0, r3
 800c5fa:	f7ff fd33 	bl	800c064 <ptr_to_mem>
 800c5fe:	4602      	mov	r2, r0
 800c600:	89fb      	ldrh	r3, [r7, #14]
 800c602:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800c604:	4809      	ldr	r0, [pc, #36]	; (800c62c <mem_trim+0x208>)
 800c606:	f00b fcc0 	bl	8017f8a <sys_mutex_unlock>
  return rmem;
 800c60a:	687b      	ldr	r3, [r7, #4]
}
 800c60c:	4618      	mov	r0, r3
 800c60e:	3720      	adds	r7, #32
 800c610:	46bd      	mov	sp, r7
 800c612:	bd80      	pop	{r7, pc}
 800c614:	20009784 	.word	0x20009784
 800c618:	20009788 	.word	0x20009788
 800c61c:	08019cbc 	.word	0x08019cbc
 800c620:	08019e48 	.word	0x08019e48
 800c624:	08019d04 	.word	0x08019d04
 800c628:	08019e60 	.word	0x08019e60
 800c62c:	2000978c 	.word	0x2000978c
 800c630:	08019e80 	.word	0x08019e80
 800c634:	20009790 	.word	0x20009790

0800c638 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800c638:	b580      	push	{r7, lr}
 800c63a:	b088      	sub	sp, #32
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	4603      	mov	r3, r0
 800c640:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800c642:	88fb      	ldrh	r3, [r7, #6]
 800c644:	2b00      	cmp	r3, #0
 800c646:	d101      	bne.n	800c64c <mem_malloc+0x14>
    return NULL;
 800c648:	2300      	movs	r3, #0
 800c64a:	e0e2      	b.n	800c812 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800c64c:	88fb      	ldrh	r3, [r7, #6]
 800c64e:	3303      	adds	r3, #3
 800c650:	b29b      	uxth	r3, r3
 800c652:	f023 0303 	bic.w	r3, r3, #3
 800c656:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800c658:	8bbb      	ldrh	r3, [r7, #28]
 800c65a:	2b0b      	cmp	r3, #11
 800c65c:	d801      	bhi.n	800c662 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800c65e:	230c      	movs	r3, #12
 800c660:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800c662:	8bbb      	ldrh	r3, [r7, #28]
 800c664:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c668:	d803      	bhi.n	800c672 <mem_malloc+0x3a>
 800c66a:	8bba      	ldrh	r2, [r7, #28]
 800c66c:	88fb      	ldrh	r3, [r7, #6]
 800c66e:	429a      	cmp	r2, r3
 800c670:	d201      	bcs.n	800c676 <mem_malloc+0x3e>
    return NULL;
 800c672:	2300      	movs	r3, #0
 800c674:	e0cd      	b.n	800c812 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800c676:	4869      	ldr	r0, [pc, #420]	; (800c81c <mem_malloc+0x1e4>)
 800c678:	f00b fc78 	bl	8017f6c <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800c67c:	4b68      	ldr	r3, [pc, #416]	; (800c820 <mem_malloc+0x1e8>)
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	4618      	mov	r0, r3
 800c682:	f7ff fd01 	bl	800c088 <mem_to_ptr>
 800c686:	4603      	mov	r3, r0
 800c688:	83fb      	strh	r3, [r7, #30]
 800c68a:	e0b7      	b.n	800c7fc <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800c68c:	8bfb      	ldrh	r3, [r7, #30]
 800c68e:	4618      	mov	r0, r3
 800c690:	f7ff fce8 	bl	800c064 <ptr_to_mem>
 800c694:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800c696:	697b      	ldr	r3, [r7, #20]
 800c698:	791b      	ldrb	r3, [r3, #4]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	f040 80a7 	bne.w	800c7ee <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800c6a0:	697b      	ldr	r3, [r7, #20]
 800c6a2:	881b      	ldrh	r3, [r3, #0]
 800c6a4:	461a      	mov	r2, r3
 800c6a6:	8bfb      	ldrh	r3, [r7, #30]
 800c6a8:	1ad3      	subs	r3, r2, r3
 800c6aa:	f1a3 0208 	sub.w	r2, r3, #8
 800c6ae:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800c6b0:	429a      	cmp	r2, r3
 800c6b2:	f0c0 809c 	bcc.w	800c7ee <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800c6b6:	697b      	ldr	r3, [r7, #20]
 800c6b8:	881b      	ldrh	r3, [r3, #0]
 800c6ba:	461a      	mov	r2, r3
 800c6bc:	8bfb      	ldrh	r3, [r7, #30]
 800c6be:	1ad3      	subs	r3, r2, r3
 800c6c0:	f1a3 0208 	sub.w	r2, r3, #8
 800c6c4:	8bbb      	ldrh	r3, [r7, #28]
 800c6c6:	3314      	adds	r3, #20
 800c6c8:	429a      	cmp	r2, r3
 800c6ca:	d333      	bcc.n	800c734 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800c6cc:	8bfa      	ldrh	r2, [r7, #30]
 800c6ce:	8bbb      	ldrh	r3, [r7, #28]
 800c6d0:	4413      	add	r3, r2
 800c6d2:	b29b      	uxth	r3, r3
 800c6d4:	3308      	adds	r3, #8
 800c6d6:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800c6d8:	8a7b      	ldrh	r3, [r7, #18]
 800c6da:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c6de:	d106      	bne.n	800c6ee <mem_malloc+0xb6>
 800c6e0:	4b50      	ldr	r3, [pc, #320]	; (800c824 <mem_malloc+0x1ec>)
 800c6e2:	f240 3287 	movw	r2, #903	; 0x387
 800c6e6:	4950      	ldr	r1, [pc, #320]	; (800c828 <mem_malloc+0x1f0>)
 800c6e8:	4850      	ldr	r0, [pc, #320]	; (800c82c <mem_malloc+0x1f4>)
 800c6ea:	f00c f9d7 	bl	8018a9c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800c6ee:	8a7b      	ldrh	r3, [r7, #18]
 800c6f0:	4618      	mov	r0, r3
 800c6f2:	f7ff fcb7 	bl	800c064 <ptr_to_mem>
 800c6f6:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	2200      	movs	r2, #0
 800c6fc:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800c6fe:	697b      	ldr	r3, [r7, #20]
 800c700:	881a      	ldrh	r2, [r3, #0]
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	8bfa      	ldrh	r2, [r7, #30]
 800c70a:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800c70c:	697b      	ldr	r3, [r7, #20]
 800c70e:	8a7a      	ldrh	r2, [r7, #18]
 800c710:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800c712:	697b      	ldr	r3, [r7, #20]
 800c714:	2201      	movs	r2, #1
 800c716:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	881b      	ldrh	r3, [r3, #0]
 800c71c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c720:	d00b      	beq.n	800c73a <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	881b      	ldrh	r3, [r3, #0]
 800c726:	4618      	mov	r0, r3
 800c728:	f7ff fc9c 	bl	800c064 <ptr_to_mem>
 800c72c:	4602      	mov	r2, r0
 800c72e:	8a7b      	ldrh	r3, [r7, #18]
 800c730:	8053      	strh	r3, [r2, #2]
 800c732:	e002      	b.n	800c73a <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800c734:	697b      	ldr	r3, [r7, #20]
 800c736:	2201      	movs	r2, #1
 800c738:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800c73a:	4b39      	ldr	r3, [pc, #228]	; (800c820 <mem_malloc+0x1e8>)
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	697a      	ldr	r2, [r7, #20]
 800c740:	429a      	cmp	r2, r3
 800c742:	d127      	bne.n	800c794 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800c744:	4b36      	ldr	r3, [pc, #216]	; (800c820 <mem_malloc+0x1e8>)
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800c74a:	e005      	b.n	800c758 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800c74c:	69bb      	ldr	r3, [r7, #24]
 800c74e:	881b      	ldrh	r3, [r3, #0]
 800c750:	4618      	mov	r0, r3
 800c752:	f7ff fc87 	bl	800c064 <ptr_to_mem>
 800c756:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800c758:	69bb      	ldr	r3, [r7, #24]
 800c75a:	791b      	ldrb	r3, [r3, #4]
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d004      	beq.n	800c76a <mem_malloc+0x132>
 800c760:	4b33      	ldr	r3, [pc, #204]	; (800c830 <mem_malloc+0x1f8>)
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	69ba      	ldr	r2, [r7, #24]
 800c766:	429a      	cmp	r2, r3
 800c768:	d1f0      	bne.n	800c74c <mem_malloc+0x114>
          }
          lfree = cur;
 800c76a:	4a2d      	ldr	r2, [pc, #180]	; (800c820 <mem_malloc+0x1e8>)
 800c76c:	69bb      	ldr	r3, [r7, #24]
 800c76e:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800c770:	4b2b      	ldr	r3, [pc, #172]	; (800c820 <mem_malloc+0x1e8>)
 800c772:	681a      	ldr	r2, [r3, #0]
 800c774:	4b2e      	ldr	r3, [pc, #184]	; (800c830 <mem_malloc+0x1f8>)
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	429a      	cmp	r2, r3
 800c77a:	d00b      	beq.n	800c794 <mem_malloc+0x15c>
 800c77c:	4b28      	ldr	r3, [pc, #160]	; (800c820 <mem_malloc+0x1e8>)
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	791b      	ldrb	r3, [r3, #4]
 800c782:	2b00      	cmp	r3, #0
 800c784:	d006      	beq.n	800c794 <mem_malloc+0x15c>
 800c786:	4b27      	ldr	r3, [pc, #156]	; (800c824 <mem_malloc+0x1ec>)
 800c788:	f240 32b5 	movw	r2, #949	; 0x3b5
 800c78c:	4929      	ldr	r1, [pc, #164]	; (800c834 <mem_malloc+0x1fc>)
 800c78e:	4827      	ldr	r0, [pc, #156]	; (800c82c <mem_malloc+0x1f4>)
 800c790:	f00c f984 	bl	8018a9c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800c794:	4821      	ldr	r0, [pc, #132]	; (800c81c <mem_malloc+0x1e4>)
 800c796:	f00b fbf8 	bl	8017f8a <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800c79a:	8bba      	ldrh	r2, [r7, #28]
 800c79c:	697b      	ldr	r3, [r7, #20]
 800c79e:	4413      	add	r3, r2
 800c7a0:	3308      	adds	r3, #8
 800c7a2:	4a23      	ldr	r2, [pc, #140]	; (800c830 <mem_malloc+0x1f8>)
 800c7a4:	6812      	ldr	r2, [r2, #0]
 800c7a6:	4293      	cmp	r3, r2
 800c7a8:	d906      	bls.n	800c7b8 <mem_malloc+0x180>
 800c7aa:	4b1e      	ldr	r3, [pc, #120]	; (800c824 <mem_malloc+0x1ec>)
 800c7ac:	f240 32b9 	movw	r2, #953	; 0x3b9
 800c7b0:	4921      	ldr	r1, [pc, #132]	; (800c838 <mem_malloc+0x200>)
 800c7b2:	481e      	ldr	r0, [pc, #120]	; (800c82c <mem_malloc+0x1f4>)
 800c7b4:	f00c f972 	bl	8018a9c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800c7b8:	697b      	ldr	r3, [r7, #20]
 800c7ba:	f003 0303 	and.w	r3, r3, #3
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d006      	beq.n	800c7d0 <mem_malloc+0x198>
 800c7c2:	4b18      	ldr	r3, [pc, #96]	; (800c824 <mem_malloc+0x1ec>)
 800c7c4:	f240 32bb 	movw	r2, #955	; 0x3bb
 800c7c8:	491c      	ldr	r1, [pc, #112]	; (800c83c <mem_malloc+0x204>)
 800c7ca:	4818      	ldr	r0, [pc, #96]	; (800c82c <mem_malloc+0x1f4>)
 800c7cc:	f00c f966 	bl	8018a9c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800c7d0:	697b      	ldr	r3, [r7, #20]
 800c7d2:	f003 0303 	and.w	r3, r3, #3
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d006      	beq.n	800c7e8 <mem_malloc+0x1b0>
 800c7da:	4b12      	ldr	r3, [pc, #72]	; (800c824 <mem_malloc+0x1ec>)
 800c7dc:	f240 32bd 	movw	r2, #957	; 0x3bd
 800c7e0:	4917      	ldr	r1, [pc, #92]	; (800c840 <mem_malloc+0x208>)
 800c7e2:	4812      	ldr	r0, [pc, #72]	; (800c82c <mem_malloc+0x1f4>)
 800c7e4:	f00c f95a 	bl	8018a9c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800c7e8:	697b      	ldr	r3, [r7, #20]
 800c7ea:	3308      	adds	r3, #8
 800c7ec:	e011      	b.n	800c812 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800c7ee:	8bfb      	ldrh	r3, [r7, #30]
 800c7f0:	4618      	mov	r0, r3
 800c7f2:	f7ff fc37 	bl	800c064 <ptr_to_mem>
 800c7f6:	4603      	mov	r3, r0
 800c7f8:	881b      	ldrh	r3, [r3, #0]
 800c7fa:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800c7fc:	8bfa      	ldrh	r2, [r7, #30]
 800c7fe:	8bbb      	ldrh	r3, [r7, #28]
 800c800:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800c804:	429a      	cmp	r2, r3
 800c806:	f4ff af41 	bcc.w	800c68c <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800c80a:	4804      	ldr	r0, [pc, #16]	; (800c81c <mem_malloc+0x1e4>)
 800c80c:	f00b fbbd 	bl	8017f8a <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800c810:	2300      	movs	r3, #0
}
 800c812:	4618      	mov	r0, r3
 800c814:	3720      	adds	r7, #32
 800c816:	46bd      	mov	sp, r7
 800c818:	bd80      	pop	{r7, pc}
 800c81a:	bf00      	nop
 800c81c:	2000978c 	.word	0x2000978c
 800c820:	20009790 	.word	0x20009790
 800c824:	08019cbc 	.word	0x08019cbc
 800c828:	08019e80 	.word	0x08019e80
 800c82c:	08019d04 	.word	0x08019d04
 800c830:	20009788 	.word	0x20009788
 800c834:	08019e94 	.word	0x08019e94
 800c838:	08019eb0 	.word	0x08019eb0
 800c83c:	08019ee0 	.word	0x08019ee0
 800c840:	08019f10 	.word	0x08019f10

0800c844 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800c844:	b480      	push	{r7}
 800c846:	b085      	sub	sp, #20
 800c848:	af00      	add	r7, sp, #0
 800c84a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	689b      	ldr	r3, [r3, #8]
 800c850:	2200      	movs	r2, #0
 800c852:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	685b      	ldr	r3, [r3, #4]
 800c858:	3303      	adds	r3, #3
 800c85a:	f023 0303 	bic.w	r3, r3, #3
 800c85e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800c860:	2300      	movs	r3, #0
 800c862:	60fb      	str	r3, [r7, #12]
 800c864:	e011      	b.n	800c88a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	689b      	ldr	r3, [r3, #8]
 800c86a:	681a      	ldr	r2, [r3, #0]
 800c86c:	68bb      	ldr	r3, [r7, #8]
 800c86e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	689b      	ldr	r3, [r3, #8]
 800c874:	68ba      	ldr	r2, [r7, #8]
 800c876:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	881b      	ldrh	r3, [r3, #0]
 800c87c:	461a      	mov	r2, r3
 800c87e:	68bb      	ldr	r3, [r7, #8]
 800c880:	4413      	add	r3, r2
 800c882:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	3301      	adds	r3, #1
 800c888:	60fb      	str	r3, [r7, #12]
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	885b      	ldrh	r3, [r3, #2]
 800c88e:	461a      	mov	r2, r3
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	4293      	cmp	r3, r2
 800c894:	dbe7      	blt.n	800c866 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800c896:	bf00      	nop
 800c898:	bf00      	nop
 800c89a:	3714      	adds	r7, #20
 800c89c:	46bd      	mov	sp, r7
 800c89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a2:	4770      	bx	lr

0800c8a4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800c8a4:	b580      	push	{r7, lr}
 800c8a6:	b082      	sub	sp, #8
 800c8a8:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	80fb      	strh	r3, [r7, #6]
 800c8ae:	e009      	b.n	800c8c4 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800c8b0:	88fb      	ldrh	r3, [r7, #6]
 800c8b2:	4a08      	ldr	r2, [pc, #32]	; (800c8d4 <memp_init+0x30>)
 800c8b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c8b8:	4618      	mov	r0, r3
 800c8ba:	f7ff ffc3 	bl	800c844 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c8be:	88fb      	ldrh	r3, [r7, #6]
 800c8c0:	3301      	adds	r3, #1
 800c8c2:	80fb      	strh	r3, [r7, #6]
 800c8c4:	88fb      	ldrh	r3, [r7, #6]
 800c8c6:	2b0c      	cmp	r3, #12
 800c8c8:	d9f2      	bls.n	800c8b0 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800c8ca:	bf00      	nop
 800c8cc:	bf00      	nop
 800c8ce:	3708      	adds	r7, #8
 800c8d0:	46bd      	mov	sp, r7
 800c8d2:	bd80      	pop	{r7, pc}
 800c8d4:	0801cb30 	.word	0x0801cb30

0800c8d8 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800c8d8:	b580      	push	{r7, lr}
 800c8da:	b084      	sub	sp, #16
 800c8dc:	af00      	add	r7, sp, #0
 800c8de:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800c8e0:	f00b fb80 	bl	8017fe4 <sys_arch_protect>
 800c8e4:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	689b      	ldr	r3, [r3, #8]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800c8ee:	68bb      	ldr	r3, [r7, #8]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d015      	beq.n	800c920 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	689b      	ldr	r3, [r3, #8]
 800c8f8:	68ba      	ldr	r2, [r7, #8]
 800c8fa:	6812      	ldr	r2, [r2, #0]
 800c8fc:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800c8fe:	68bb      	ldr	r3, [r7, #8]
 800c900:	f003 0303 	and.w	r3, r3, #3
 800c904:	2b00      	cmp	r3, #0
 800c906:	d006      	beq.n	800c916 <do_memp_malloc_pool+0x3e>
 800c908:	4b09      	ldr	r3, [pc, #36]	; (800c930 <do_memp_malloc_pool+0x58>)
 800c90a:	f44f 728c 	mov.w	r2, #280	; 0x118
 800c90e:	4909      	ldr	r1, [pc, #36]	; (800c934 <do_memp_malloc_pool+0x5c>)
 800c910:	4809      	ldr	r0, [pc, #36]	; (800c938 <do_memp_malloc_pool+0x60>)
 800c912:	f00c f8c3 	bl	8018a9c <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800c916:	68f8      	ldr	r0, [r7, #12]
 800c918:	f00b fb72 	bl	8018000 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800c91c:	68bb      	ldr	r3, [r7, #8]
 800c91e:	e003      	b.n	800c928 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800c920:	68f8      	ldr	r0, [r7, #12]
 800c922:	f00b fb6d 	bl	8018000 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800c926:	2300      	movs	r3, #0
}
 800c928:	4618      	mov	r0, r3
 800c92a:	3710      	adds	r7, #16
 800c92c:	46bd      	mov	sp, r7
 800c92e:	bd80      	pop	{r7, pc}
 800c930:	08019f34 	.word	0x08019f34
 800c934:	08019f64 	.word	0x08019f64
 800c938:	08019f88 	.word	0x08019f88

0800c93c <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800c93c:	b580      	push	{r7, lr}
 800c93e:	b082      	sub	sp, #8
 800c940:	af00      	add	r7, sp, #0
 800c942:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	2b00      	cmp	r3, #0
 800c948:	d106      	bne.n	800c958 <memp_malloc_pool+0x1c>
 800c94a:	4b0a      	ldr	r3, [pc, #40]	; (800c974 <memp_malloc_pool+0x38>)
 800c94c:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800c950:	4909      	ldr	r1, [pc, #36]	; (800c978 <memp_malloc_pool+0x3c>)
 800c952:	480a      	ldr	r0, [pc, #40]	; (800c97c <memp_malloc_pool+0x40>)
 800c954:	f00c f8a2 	bl	8018a9c <iprintf>
  if (desc == NULL) {
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d101      	bne.n	800c962 <memp_malloc_pool+0x26>
    return NULL;
 800c95e:	2300      	movs	r3, #0
 800c960:	e003      	b.n	800c96a <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800c962:	6878      	ldr	r0, [r7, #4]
 800c964:	f7ff ffb8 	bl	800c8d8 <do_memp_malloc_pool>
 800c968:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800c96a:	4618      	mov	r0, r3
 800c96c:	3708      	adds	r7, #8
 800c96e:	46bd      	mov	sp, r7
 800c970:	bd80      	pop	{r7, pc}
 800c972:	bf00      	nop
 800c974:	08019f34 	.word	0x08019f34
 800c978:	08019fb0 	.word	0x08019fb0
 800c97c:	08019f88 	.word	0x08019f88

0800c980 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800c980:	b580      	push	{r7, lr}
 800c982:	b084      	sub	sp, #16
 800c984:	af00      	add	r7, sp, #0
 800c986:	4603      	mov	r3, r0
 800c988:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800c98a:	79fb      	ldrb	r3, [r7, #7]
 800c98c:	2b0c      	cmp	r3, #12
 800c98e:	d908      	bls.n	800c9a2 <memp_malloc+0x22>
 800c990:	4b0a      	ldr	r3, [pc, #40]	; (800c9bc <memp_malloc+0x3c>)
 800c992:	f240 1257 	movw	r2, #343	; 0x157
 800c996:	490a      	ldr	r1, [pc, #40]	; (800c9c0 <memp_malloc+0x40>)
 800c998:	480a      	ldr	r0, [pc, #40]	; (800c9c4 <memp_malloc+0x44>)
 800c99a:	f00c f87f 	bl	8018a9c <iprintf>
 800c99e:	2300      	movs	r3, #0
 800c9a0:	e008      	b.n	800c9b4 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800c9a2:	79fb      	ldrb	r3, [r7, #7]
 800c9a4:	4a08      	ldr	r2, [pc, #32]	; (800c9c8 <memp_malloc+0x48>)
 800c9a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c9aa:	4618      	mov	r0, r3
 800c9ac:	f7ff ff94 	bl	800c8d8 <do_memp_malloc_pool>
 800c9b0:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800c9b2:	68fb      	ldr	r3, [r7, #12]
}
 800c9b4:	4618      	mov	r0, r3
 800c9b6:	3710      	adds	r7, #16
 800c9b8:	46bd      	mov	sp, r7
 800c9ba:	bd80      	pop	{r7, pc}
 800c9bc:	08019f34 	.word	0x08019f34
 800c9c0:	08019fc4 	.word	0x08019fc4
 800c9c4:	08019f88 	.word	0x08019f88
 800c9c8:	0801cb30 	.word	0x0801cb30

0800c9cc <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800c9cc:	b580      	push	{r7, lr}
 800c9ce:	b084      	sub	sp, #16
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	6078      	str	r0, [r7, #4]
 800c9d4:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800c9d6:	683b      	ldr	r3, [r7, #0]
 800c9d8:	f003 0303 	and.w	r3, r3, #3
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d006      	beq.n	800c9ee <do_memp_free_pool+0x22>
 800c9e0:	4b0d      	ldr	r3, [pc, #52]	; (800ca18 <do_memp_free_pool+0x4c>)
 800c9e2:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800c9e6:	490d      	ldr	r1, [pc, #52]	; (800ca1c <do_memp_free_pool+0x50>)
 800c9e8:	480d      	ldr	r0, [pc, #52]	; (800ca20 <do_memp_free_pool+0x54>)
 800c9ea:	f00c f857 	bl	8018a9c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800c9ee:	683b      	ldr	r3, [r7, #0]
 800c9f0:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800c9f2:	f00b faf7 	bl	8017fe4 <sys_arch_protect>
 800c9f6:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	689b      	ldr	r3, [r3, #8]
 800c9fc:	681a      	ldr	r2, [r3, #0]
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	689b      	ldr	r3, [r3, #8]
 800ca06:	68fa      	ldr	r2, [r7, #12]
 800ca08:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800ca0a:	68b8      	ldr	r0, [r7, #8]
 800ca0c:	f00b faf8 	bl	8018000 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800ca10:	bf00      	nop
 800ca12:	3710      	adds	r7, #16
 800ca14:	46bd      	mov	sp, r7
 800ca16:	bd80      	pop	{r7, pc}
 800ca18:	08019f34 	.word	0x08019f34
 800ca1c:	08019fe4 	.word	0x08019fe4
 800ca20:	08019f88 	.word	0x08019f88

0800ca24 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800ca24:	b580      	push	{r7, lr}
 800ca26:	b082      	sub	sp, #8
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	6078      	str	r0, [r7, #4]
 800ca2c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d106      	bne.n	800ca42 <memp_free_pool+0x1e>
 800ca34:	4b0a      	ldr	r3, [pc, #40]	; (800ca60 <memp_free_pool+0x3c>)
 800ca36:	f240 1295 	movw	r2, #405	; 0x195
 800ca3a:	490a      	ldr	r1, [pc, #40]	; (800ca64 <memp_free_pool+0x40>)
 800ca3c:	480a      	ldr	r0, [pc, #40]	; (800ca68 <memp_free_pool+0x44>)
 800ca3e:	f00c f82d 	bl	8018a9c <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d007      	beq.n	800ca58 <memp_free_pool+0x34>
 800ca48:	683b      	ldr	r3, [r7, #0]
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d004      	beq.n	800ca58 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800ca4e:	6839      	ldr	r1, [r7, #0]
 800ca50:	6878      	ldr	r0, [r7, #4]
 800ca52:	f7ff ffbb 	bl	800c9cc <do_memp_free_pool>
 800ca56:	e000      	b.n	800ca5a <memp_free_pool+0x36>
    return;
 800ca58:	bf00      	nop
}
 800ca5a:	3708      	adds	r7, #8
 800ca5c:	46bd      	mov	sp, r7
 800ca5e:	bd80      	pop	{r7, pc}
 800ca60:	08019f34 	.word	0x08019f34
 800ca64:	08019fb0 	.word	0x08019fb0
 800ca68:	08019f88 	.word	0x08019f88

0800ca6c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800ca6c:	b580      	push	{r7, lr}
 800ca6e:	b082      	sub	sp, #8
 800ca70:	af00      	add	r7, sp, #0
 800ca72:	4603      	mov	r3, r0
 800ca74:	6039      	str	r1, [r7, #0]
 800ca76:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800ca78:	79fb      	ldrb	r3, [r7, #7]
 800ca7a:	2b0c      	cmp	r3, #12
 800ca7c:	d907      	bls.n	800ca8e <memp_free+0x22>
 800ca7e:	4b0c      	ldr	r3, [pc, #48]	; (800cab0 <memp_free+0x44>)
 800ca80:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800ca84:	490b      	ldr	r1, [pc, #44]	; (800cab4 <memp_free+0x48>)
 800ca86:	480c      	ldr	r0, [pc, #48]	; (800cab8 <memp_free+0x4c>)
 800ca88:	f00c f808 	bl	8018a9c <iprintf>
 800ca8c:	e00c      	b.n	800caa8 <memp_free+0x3c>

  if (mem == NULL) {
 800ca8e:	683b      	ldr	r3, [r7, #0]
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d008      	beq.n	800caa6 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800ca94:	79fb      	ldrb	r3, [r7, #7]
 800ca96:	4a09      	ldr	r2, [pc, #36]	; (800cabc <memp_free+0x50>)
 800ca98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ca9c:	6839      	ldr	r1, [r7, #0]
 800ca9e:	4618      	mov	r0, r3
 800caa0:	f7ff ff94 	bl	800c9cc <do_memp_free_pool>
 800caa4:	e000      	b.n	800caa8 <memp_free+0x3c>
    return;
 800caa6:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800caa8:	3708      	adds	r7, #8
 800caaa:	46bd      	mov	sp, r7
 800caac:	bd80      	pop	{r7, pc}
 800caae:	bf00      	nop
 800cab0:	08019f34 	.word	0x08019f34
 800cab4:	0801a004 	.word	0x0801a004
 800cab8:	08019f88 	.word	0x08019f88
 800cabc:	0801cb30 	.word	0x0801cb30

0800cac0 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800cac0:	b480      	push	{r7}
 800cac2:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800cac4:	bf00      	nop
 800cac6:	46bd      	mov	sp, r7
 800cac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cacc:	4770      	bx	lr
	...

0800cad0 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800cad0:	b580      	push	{r7, lr}
 800cad2:	b086      	sub	sp, #24
 800cad4:	af00      	add	r7, sp, #0
 800cad6:	60f8      	str	r0, [r7, #12]
 800cad8:	60b9      	str	r1, [r7, #8]
 800cada:	607a      	str	r2, [r7, #4]
 800cadc:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d108      	bne.n	800caf6 <netif_add+0x26>
 800cae4:	4b5b      	ldr	r3, [pc, #364]	; (800cc54 <netif_add+0x184>)
 800cae6:	f240 1227 	movw	r2, #295	; 0x127
 800caea:	495b      	ldr	r1, [pc, #364]	; (800cc58 <netif_add+0x188>)
 800caec:	485b      	ldr	r0, [pc, #364]	; (800cc5c <netif_add+0x18c>)
 800caee:	f00b ffd5 	bl	8018a9c <iprintf>
 800caf2:	2300      	movs	r3, #0
 800caf4:	e0a9      	b.n	800cc4a <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800caf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d108      	bne.n	800cb0e <netif_add+0x3e>
 800cafc:	4b55      	ldr	r3, [pc, #340]	; (800cc54 <netif_add+0x184>)
 800cafe:	f44f 7294 	mov.w	r2, #296	; 0x128
 800cb02:	4957      	ldr	r1, [pc, #348]	; (800cc60 <netif_add+0x190>)
 800cb04:	4855      	ldr	r0, [pc, #340]	; (800cc5c <netif_add+0x18c>)
 800cb06:	f00b ffc9 	bl	8018a9c <iprintf>
 800cb0a:	2300      	movs	r3, #0
 800cb0c:	e09d      	b.n	800cc4a <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800cb0e:	68bb      	ldr	r3, [r7, #8]
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d101      	bne.n	800cb18 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800cb14:	4b53      	ldr	r3, [pc, #332]	; (800cc64 <netif_add+0x194>)
 800cb16:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d101      	bne.n	800cb22 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800cb1e:	4b51      	ldr	r3, [pc, #324]	; (800cc64 <netif_add+0x194>)
 800cb20:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800cb22:	683b      	ldr	r3, [r7, #0]
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d101      	bne.n	800cb2c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800cb28:	4b4e      	ldr	r3, [pc, #312]	; (800cc64 <netif_add+0x194>)
 800cb2a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	2200      	movs	r2, #0
 800cb30:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	2200      	movs	r2, #0
 800cb36:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	2200      	movs	r2, #0
 800cb3c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	4a49      	ldr	r2, [pc, #292]	; (800cc68 <netif_add+0x198>)
 800cb42:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	2200      	movs	r2, #0
 800cb48:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	2200      	movs	r2, #0
 800cb4e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	3324      	adds	r3, #36	; 0x24
 800cb56:	2204      	movs	r2, #4
 800cb58:	2100      	movs	r1, #0
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	f00b ff96 	bl	8018a8c <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	2200      	movs	r2, #0
 800cb64:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	6a3a      	ldr	r2, [r7, #32]
 800cb6a:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800cb6c:	4b3f      	ldr	r3, [pc, #252]	; (800cc6c <netif_add+0x19c>)
 800cb6e:	781a      	ldrb	r2, [r3, #0]
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cb7a:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800cb7c:	683b      	ldr	r3, [r7, #0]
 800cb7e:	687a      	ldr	r2, [r7, #4]
 800cb80:	68b9      	ldr	r1, [r7, #8]
 800cb82:	68f8      	ldr	r0, [r7, #12]
 800cb84:	f000 f914 	bl	800cdb0 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800cb88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb8a:	68f8      	ldr	r0, [r7, #12]
 800cb8c:	4798      	blx	r3
 800cb8e:	4603      	mov	r3, r0
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d001      	beq.n	800cb98 <netif_add+0xc8>
    return NULL;
 800cb94:	2300      	movs	r3, #0
 800cb96:	e058      	b.n	800cc4a <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cb9e:	2bff      	cmp	r3, #255	; 0xff
 800cba0:	d103      	bne.n	800cbaa <netif_add+0xda>
        netif->num = 0;
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	2200      	movs	r2, #0
 800cba6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 800cbaa:	2300      	movs	r3, #0
 800cbac:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800cbae:	4b30      	ldr	r3, [pc, #192]	; (800cc70 <netif_add+0x1a0>)
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	617b      	str	r3, [r7, #20]
 800cbb4:	e02b      	b.n	800cc0e <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800cbb6:	697a      	ldr	r2, [r7, #20]
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	429a      	cmp	r2, r3
 800cbbc:	d106      	bne.n	800cbcc <netif_add+0xfc>
 800cbbe:	4b25      	ldr	r3, [pc, #148]	; (800cc54 <netif_add+0x184>)
 800cbc0:	f240 128b 	movw	r2, #395	; 0x18b
 800cbc4:	492b      	ldr	r1, [pc, #172]	; (800cc74 <netif_add+0x1a4>)
 800cbc6:	4825      	ldr	r0, [pc, #148]	; (800cc5c <netif_add+0x18c>)
 800cbc8:	f00b ff68 	bl	8018a9c <iprintf>
        num_netifs++;
 800cbcc:	693b      	ldr	r3, [r7, #16]
 800cbce:	3301      	adds	r3, #1
 800cbd0:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800cbd2:	693b      	ldr	r3, [r7, #16]
 800cbd4:	2bff      	cmp	r3, #255	; 0xff
 800cbd6:	dd06      	ble.n	800cbe6 <netif_add+0x116>
 800cbd8:	4b1e      	ldr	r3, [pc, #120]	; (800cc54 <netif_add+0x184>)
 800cbda:	f240 128d 	movw	r2, #397	; 0x18d
 800cbde:	4926      	ldr	r1, [pc, #152]	; (800cc78 <netif_add+0x1a8>)
 800cbe0:	481e      	ldr	r0, [pc, #120]	; (800cc5c <netif_add+0x18c>)
 800cbe2:	f00b ff5b 	bl	8018a9c <iprintf>
        if (netif2->num == netif->num) {
 800cbe6:	697b      	ldr	r3, [r7, #20]
 800cbe8:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cbf2:	429a      	cmp	r2, r3
 800cbf4:	d108      	bne.n	800cc08 <netif_add+0x138>
          netif->num++;
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cbfc:	3301      	adds	r3, #1
 800cbfe:	b2da      	uxtb	r2, r3
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 800cc06:	e005      	b.n	800cc14 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800cc08:	697b      	ldr	r3, [r7, #20]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	617b      	str	r3, [r7, #20]
 800cc0e:	697b      	ldr	r3, [r7, #20]
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d1d0      	bne.n	800cbb6 <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 800cc14:	697b      	ldr	r3, [r7, #20]
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d1be      	bne.n	800cb98 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cc20:	2bfe      	cmp	r3, #254	; 0xfe
 800cc22:	d103      	bne.n	800cc2c <netif_add+0x15c>
    netif_num = 0;
 800cc24:	4b11      	ldr	r3, [pc, #68]	; (800cc6c <netif_add+0x19c>)
 800cc26:	2200      	movs	r2, #0
 800cc28:	701a      	strb	r2, [r3, #0]
 800cc2a:	e006      	b.n	800cc3a <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cc32:	3301      	adds	r3, #1
 800cc34:	b2da      	uxtb	r2, r3
 800cc36:	4b0d      	ldr	r3, [pc, #52]	; (800cc6c <netif_add+0x19c>)
 800cc38:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800cc3a:	4b0d      	ldr	r3, [pc, #52]	; (800cc70 <netif_add+0x1a0>)
 800cc3c:	681a      	ldr	r2, [r3, #0]
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800cc42:	4a0b      	ldr	r2, [pc, #44]	; (800cc70 <netif_add+0x1a0>)
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800cc48:	68fb      	ldr	r3, [r7, #12]
}
 800cc4a:	4618      	mov	r0, r3
 800cc4c:	3718      	adds	r7, #24
 800cc4e:	46bd      	mov	sp, r7
 800cc50:	bd80      	pop	{r7, pc}
 800cc52:	bf00      	nop
 800cc54:	0801a020 	.word	0x0801a020
 800cc58:	0801a0b4 	.word	0x0801a0b4
 800cc5c:	0801a070 	.word	0x0801a070
 800cc60:	0801a0d0 	.word	0x0801a0d0
 800cc64:	0801cbb4 	.word	0x0801cbb4
 800cc68:	0800cfc3 	.word	0x0800cfc3
 800cc6c:	2000c888 	.word	0x2000c888
 800cc70:	2000c880 	.word	0x2000c880
 800cc74:	0801a0f4 	.word	0x0801a0f4
 800cc78:	0801a108 	.word	0x0801a108

0800cc7c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800cc7c:	b580      	push	{r7, lr}
 800cc7e:	b082      	sub	sp, #8
 800cc80:	af00      	add	r7, sp, #0
 800cc82:	6078      	str	r0, [r7, #4]
 800cc84:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800cc86:	6839      	ldr	r1, [r7, #0]
 800cc88:	6878      	ldr	r0, [r7, #4]
 800cc8a:	f002 fb29 	bl	800f2e0 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800cc8e:	6839      	ldr	r1, [r7, #0]
 800cc90:	6878      	ldr	r0, [r7, #4]
 800cc92:	f006 ff3f 	bl	8013b14 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800cc96:	bf00      	nop
 800cc98:	3708      	adds	r7, #8
 800cc9a:	46bd      	mov	sp, r7
 800cc9c:	bd80      	pop	{r7, pc}
	...

0800cca0 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800cca0:	b580      	push	{r7, lr}
 800cca2:	b086      	sub	sp, #24
 800cca4:	af00      	add	r7, sp, #0
 800cca6:	60f8      	str	r0, [r7, #12]
 800cca8:	60b9      	str	r1, [r7, #8]
 800ccaa:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800ccac:	68bb      	ldr	r3, [r7, #8]
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d106      	bne.n	800ccc0 <netif_do_set_ipaddr+0x20>
 800ccb2:	4b1d      	ldr	r3, [pc, #116]	; (800cd28 <netif_do_set_ipaddr+0x88>)
 800ccb4:	f240 12cb 	movw	r2, #459	; 0x1cb
 800ccb8:	491c      	ldr	r1, [pc, #112]	; (800cd2c <netif_do_set_ipaddr+0x8c>)
 800ccba:	481d      	ldr	r0, [pc, #116]	; (800cd30 <netif_do_set_ipaddr+0x90>)
 800ccbc:	f00b feee 	bl	8018a9c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d106      	bne.n	800ccd4 <netif_do_set_ipaddr+0x34>
 800ccc6:	4b18      	ldr	r3, [pc, #96]	; (800cd28 <netif_do_set_ipaddr+0x88>)
 800ccc8:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800cccc:	4917      	ldr	r1, [pc, #92]	; (800cd2c <netif_do_set_ipaddr+0x8c>)
 800ccce:	4818      	ldr	r0, [pc, #96]	; (800cd30 <netif_do_set_ipaddr+0x90>)
 800ccd0:	f00b fee4 	bl	8018a9c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800ccd4:	68bb      	ldr	r3, [r7, #8]
 800ccd6:	681a      	ldr	r2, [r3, #0]
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	3304      	adds	r3, #4
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	429a      	cmp	r2, r3
 800cce0:	d01c      	beq.n	800cd1c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800cce2:	68bb      	ldr	r3, [r7, #8]
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	3304      	adds	r3, #4
 800ccec:	681a      	ldr	r2, [r3, #0]
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800ccf2:	f107 0314 	add.w	r3, r7, #20
 800ccf6:	4619      	mov	r1, r3
 800ccf8:	6878      	ldr	r0, [r7, #4]
 800ccfa:	f7ff ffbf 	bl	800cc7c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800ccfe:	68bb      	ldr	r3, [r7, #8]
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d002      	beq.n	800cd0a <netif_do_set_ipaddr+0x6a>
 800cd04:	68bb      	ldr	r3, [r7, #8]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	e000      	b.n	800cd0c <netif_do_set_ipaddr+0x6c>
 800cd0a:	2300      	movs	r3, #0
 800cd0c:	68fa      	ldr	r2, [r7, #12]
 800cd0e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800cd10:	2101      	movs	r1, #1
 800cd12:	68f8      	ldr	r0, [r7, #12]
 800cd14:	f000 f8d2 	bl	800cebc <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800cd18:	2301      	movs	r3, #1
 800cd1a:	e000      	b.n	800cd1e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800cd1c:	2300      	movs	r3, #0
}
 800cd1e:	4618      	mov	r0, r3
 800cd20:	3718      	adds	r7, #24
 800cd22:	46bd      	mov	sp, r7
 800cd24:	bd80      	pop	{r7, pc}
 800cd26:	bf00      	nop
 800cd28:	0801a020 	.word	0x0801a020
 800cd2c:	0801a138 	.word	0x0801a138
 800cd30:	0801a070 	.word	0x0801a070

0800cd34 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800cd34:	b480      	push	{r7}
 800cd36:	b085      	sub	sp, #20
 800cd38:	af00      	add	r7, sp, #0
 800cd3a:	60f8      	str	r0, [r7, #12]
 800cd3c:	60b9      	str	r1, [r7, #8]
 800cd3e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800cd40:	68bb      	ldr	r3, [r7, #8]
 800cd42:	681a      	ldr	r2, [r3, #0]
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	3308      	adds	r3, #8
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	429a      	cmp	r2, r3
 800cd4c:	d00a      	beq.n	800cd64 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800cd4e:	68bb      	ldr	r3, [r7, #8]
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d002      	beq.n	800cd5a <netif_do_set_netmask+0x26>
 800cd54:	68bb      	ldr	r3, [r7, #8]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	e000      	b.n	800cd5c <netif_do_set_netmask+0x28>
 800cd5a:	2300      	movs	r3, #0
 800cd5c:	68fa      	ldr	r2, [r7, #12]
 800cd5e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800cd60:	2301      	movs	r3, #1
 800cd62:	e000      	b.n	800cd66 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800cd64:	2300      	movs	r3, #0
}
 800cd66:	4618      	mov	r0, r3
 800cd68:	3714      	adds	r7, #20
 800cd6a:	46bd      	mov	sp, r7
 800cd6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd70:	4770      	bx	lr

0800cd72 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800cd72:	b480      	push	{r7}
 800cd74:	b085      	sub	sp, #20
 800cd76:	af00      	add	r7, sp, #0
 800cd78:	60f8      	str	r0, [r7, #12]
 800cd7a:	60b9      	str	r1, [r7, #8]
 800cd7c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800cd7e:	68bb      	ldr	r3, [r7, #8]
 800cd80:	681a      	ldr	r2, [r3, #0]
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	330c      	adds	r3, #12
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	429a      	cmp	r2, r3
 800cd8a:	d00a      	beq.n	800cda2 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800cd8c:	68bb      	ldr	r3, [r7, #8]
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d002      	beq.n	800cd98 <netif_do_set_gw+0x26>
 800cd92:	68bb      	ldr	r3, [r7, #8]
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	e000      	b.n	800cd9a <netif_do_set_gw+0x28>
 800cd98:	2300      	movs	r3, #0
 800cd9a:	68fa      	ldr	r2, [r7, #12]
 800cd9c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800cd9e:	2301      	movs	r3, #1
 800cda0:	e000      	b.n	800cda4 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800cda2:	2300      	movs	r3, #0
}
 800cda4:	4618      	mov	r0, r3
 800cda6:	3714      	adds	r7, #20
 800cda8:	46bd      	mov	sp, r7
 800cdaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdae:	4770      	bx	lr

0800cdb0 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800cdb0:	b580      	push	{r7, lr}
 800cdb2:	b088      	sub	sp, #32
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	60f8      	str	r0, [r7, #12]
 800cdb8:	60b9      	str	r1, [r7, #8]
 800cdba:	607a      	str	r2, [r7, #4]
 800cdbc:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800cdbe:	2300      	movs	r3, #0
 800cdc0:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800cdc2:	2300      	movs	r3, #0
 800cdc4:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800cdc6:	68bb      	ldr	r3, [r7, #8]
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d101      	bne.n	800cdd0 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800cdcc:	4b1c      	ldr	r3, [pc, #112]	; (800ce40 <netif_set_addr+0x90>)
 800cdce:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d101      	bne.n	800cdda <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800cdd6:	4b1a      	ldr	r3, [pc, #104]	; (800ce40 <netif_set_addr+0x90>)
 800cdd8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800cdda:	683b      	ldr	r3, [r7, #0]
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d101      	bne.n	800cde4 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800cde0:	4b17      	ldr	r3, [pc, #92]	; (800ce40 <netif_set_addr+0x90>)
 800cde2:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800cde4:	68bb      	ldr	r3, [r7, #8]
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d003      	beq.n	800cdf2 <netif_set_addr+0x42>
 800cdea:	68bb      	ldr	r3, [r7, #8]
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d101      	bne.n	800cdf6 <netif_set_addr+0x46>
 800cdf2:	2301      	movs	r3, #1
 800cdf4:	e000      	b.n	800cdf8 <netif_set_addr+0x48>
 800cdf6:	2300      	movs	r3, #0
 800cdf8:	617b      	str	r3, [r7, #20]
  if (remove) {
 800cdfa:	697b      	ldr	r3, [r7, #20]
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d006      	beq.n	800ce0e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800ce00:	f107 0310 	add.w	r3, r7, #16
 800ce04:	461a      	mov	r2, r3
 800ce06:	68b9      	ldr	r1, [r7, #8]
 800ce08:	68f8      	ldr	r0, [r7, #12]
 800ce0a:	f7ff ff49 	bl	800cca0 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800ce0e:	69fa      	ldr	r2, [r7, #28]
 800ce10:	6879      	ldr	r1, [r7, #4]
 800ce12:	68f8      	ldr	r0, [r7, #12]
 800ce14:	f7ff ff8e 	bl	800cd34 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800ce18:	69ba      	ldr	r2, [r7, #24]
 800ce1a:	6839      	ldr	r1, [r7, #0]
 800ce1c:	68f8      	ldr	r0, [r7, #12]
 800ce1e:	f7ff ffa8 	bl	800cd72 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800ce22:	697b      	ldr	r3, [r7, #20]
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d106      	bne.n	800ce36 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800ce28:	f107 0310 	add.w	r3, r7, #16
 800ce2c:	461a      	mov	r2, r3
 800ce2e:	68b9      	ldr	r1, [r7, #8]
 800ce30:	68f8      	ldr	r0, [r7, #12]
 800ce32:	f7ff ff35 	bl	800cca0 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800ce36:	bf00      	nop
 800ce38:	3720      	adds	r7, #32
 800ce3a:	46bd      	mov	sp, r7
 800ce3c:	bd80      	pop	{r7, pc}
 800ce3e:	bf00      	nop
 800ce40:	0801cbb4 	.word	0x0801cbb4

0800ce44 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800ce44:	b480      	push	{r7}
 800ce46:	b083      	sub	sp, #12
 800ce48:	af00      	add	r7, sp, #0
 800ce4a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800ce4c:	4a04      	ldr	r2, [pc, #16]	; (800ce60 <netif_set_default+0x1c>)
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800ce52:	bf00      	nop
 800ce54:	370c      	adds	r7, #12
 800ce56:	46bd      	mov	sp, r7
 800ce58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce5c:	4770      	bx	lr
 800ce5e:	bf00      	nop
 800ce60:	2000c884 	.word	0x2000c884

0800ce64 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800ce64:	b580      	push	{r7, lr}
 800ce66:	b082      	sub	sp, #8
 800ce68:	af00      	add	r7, sp, #0
 800ce6a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d107      	bne.n	800ce82 <netif_set_up+0x1e>
 800ce72:	4b0f      	ldr	r3, [pc, #60]	; (800ceb0 <netif_set_up+0x4c>)
 800ce74:	f44f 7254 	mov.w	r2, #848	; 0x350
 800ce78:	490e      	ldr	r1, [pc, #56]	; (800ceb4 <netif_set_up+0x50>)
 800ce7a:	480f      	ldr	r0, [pc, #60]	; (800ceb8 <netif_set_up+0x54>)
 800ce7c:	f00b fe0e 	bl	8018a9c <iprintf>
 800ce80:	e013      	b.n	800ceaa <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ce88:	f003 0301 	and.w	r3, r3, #1
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d10c      	bne.n	800ceaa <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ce96:	f043 0301 	orr.w	r3, r3, #1
 800ce9a:	b2da      	uxtb	r2, r3
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800cea2:	2103      	movs	r1, #3
 800cea4:	6878      	ldr	r0, [r7, #4]
 800cea6:	f000 f809 	bl	800cebc <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800ceaa:	3708      	adds	r7, #8
 800ceac:	46bd      	mov	sp, r7
 800ceae:	bd80      	pop	{r7, pc}
 800ceb0:	0801a020 	.word	0x0801a020
 800ceb4:	0801a1a8 	.word	0x0801a1a8
 800ceb8:	0801a070 	.word	0x0801a070

0800cebc <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800cebc:	b580      	push	{r7, lr}
 800cebe:	b082      	sub	sp, #8
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	6078      	str	r0, [r7, #4]
 800cec4:	460b      	mov	r3, r1
 800cec6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d106      	bne.n	800cedc <netif_issue_reports+0x20>
 800cece:	4b18      	ldr	r3, [pc, #96]	; (800cf30 <netif_issue_reports+0x74>)
 800ced0:	f240 326d 	movw	r2, #877	; 0x36d
 800ced4:	4917      	ldr	r1, [pc, #92]	; (800cf34 <netif_issue_reports+0x78>)
 800ced6:	4818      	ldr	r0, [pc, #96]	; (800cf38 <netif_issue_reports+0x7c>)
 800ced8:	f00b fde0 	bl	8018a9c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800cee2:	f003 0304 	and.w	r3, r3, #4
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d01e      	beq.n	800cf28 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800cef0:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d017      	beq.n	800cf28 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800cef8:	78fb      	ldrb	r3, [r7, #3]
 800cefa:	f003 0301 	and.w	r3, r3, #1
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d013      	beq.n	800cf2a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	3304      	adds	r3, #4
 800cf06:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d00e      	beq.n	800cf2a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800cf12:	f003 0308 	and.w	r3, r3, #8
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d007      	beq.n	800cf2a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	3304      	adds	r3, #4
 800cf1e:	4619      	mov	r1, r3
 800cf20:	6878      	ldr	r0, [r7, #4]
 800cf22:	f009 fbbb 	bl	801669c <etharp_request>
 800cf26:	e000      	b.n	800cf2a <netif_issue_reports+0x6e>
    return;
 800cf28:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800cf2a:	3708      	adds	r7, #8
 800cf2c:	46bd      	mov	sp, r7
 800cf2e:	bd80      	pop	{r7, pc}
 800cf30:	0801a020 	.word	0x0801a020
 800cf34:	0801a1c4 	.word	0x0801a1c4
 800cf38:	0801a070 	.word	0x0801a070

0800cf3c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800cf3c:	b580      	push	{r7, lr}
 800cf3e:	b082      	sub	sp, #8
 800cf40:	af00      	add	r7, sp, #0
 800cf42:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d107      	bne.n	800cf5a <netif_set_down+0x1e>
 800cf4a:	4b12      	ldr	r3, [pc, #72]	; (800cf94 <netif_set_down+0x58>)
 800cf4c:	f240 329b 	movw	r2, #923	; 0x39b
 800cf50:	4911      	ldr	r1, [pc, #68]	; (800cf98 <netif_set_down+0x5c>)
 800cf52:	4812      	ldr	r0, [pc, #72]	; (800cf9c <netif_set_down+0x60>)
 800cf54:	f00b fda2 	bl	8018a9c <iprintf>
 800cf58:	e019      	b.n	800cf8e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800cf60:	f003 0301 	and.w	r3, r3, #1
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d012      	beq.n	800cf8e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800cf6e:	f023 0301 	bic.w	r3, r3, #1
 800cf72:	b2da      	uxtb	r2, r3
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800cf80:	f003 0308 	and.w	r3, r3, #8
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d002      	beq.n	800cf8e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800cf88:	6878      	ldr	r0, [r7, #4]
 800cf8a:	f008 ff41 	bl	8015e10 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800cf8e:	3708      	adds	r7, #8
 800cf90:	46bd      	mov	sp, r7
 800cf92:	bd80      	pop	{r7, pc}
 800cf94:	0801a020 	.word	0x0801a020
 800cf98:	0801a1e8 	.word	0x0801a1e8
 800cf9c:	0801a070 	.word	0x0801a070

0800cfa0 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800cfa0:	b480      	push	{r7}
 800cfa2:	b083      	sub	sp, #12
 800cfa4:	af00      	add	r7, sp, #0
 800cfa6:	6078      	str	r0, [r7, #4]
 800cfa8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d002      	beq.n	800cfb6 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	683a      	ldr	r2, [r7, #0]
 800cfb4:	61da      	str	r2, [r3, #28]
  }
}
 800cfb6:	bf00      	nop
 800cfb8:	370c      	adds	r7, #12
 800cfba:	46bd      	mov	sp, r7
 800cfbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc0:	4770      	bx	lr

0800cfc2 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800cfc2:	b480      	push	{r7}
 800cfc4:	b085      	sub	sp, #20
 800cfc6:	af00      	add	r7, sp, #0
 800cfc8:	60f8      	str	r0, [r7, #12]
 800cfca:	60b9      	str	r1, [r7, #8]
 800cfcc:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800cfce:	f06f 030b 	mvn.w	r3, #11
}
 800cfd2:	4618      	mov	r0, r3
 800cfd4:	3714      	adds	r7, #20
 800cfd6:	46bd      	mov	sp, r7
 800cfd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfdc:	4770      	bx	lr
	...

0800cfe0 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800cfe0:	b480      	push	{r7}
 800cfe2:	b085      	sub	sp, #20
 800cfe4:	af00      	add	r7, sp, #0
 800cfe6:	4603      	mov	r3, r0
 800cfe8:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800cfea:	79fb      	ldrb	r3, [r7, #7]
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d013      	beq.n	800d018 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800cff0:	4b0d      	ldr	r3, [pc, #52]	; (800d028 <netif_get_by_index+0x48>)
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	60fb      	str	r3, [r7, #12]
 800cff6:	e00c      	b.n	800d012 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cffe:	3301      	adds	r3, #1
 800d000:	b2db      	uxtb	r3, r3
 800d002:	79fa      	ldrb	r2, [r7, #7]
 800d004:	429a      	cmp	r2, r3
 800d006:	d101      	bne.n	800d00c <netif_get_by_index+0x2c>
        return netif; /* found! */
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	e006      	b.n	800d01a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	60fb      	str	r3, [r7, #12]
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	2b00      	cmp	r3, #0
 800d016:	d1ef      	bne.n	800cff8 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800d018:	2300      	movs	r3, #0
}
 800d01a:	4618      	mov	r0, r3
 800d01c:	3714      	adds	r7, #20
 800d01e:	46bd      	mov	sp, r7
 800d020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d024:	4770      	bx	lr
 800d026:	bf00      	nop
 800d028:	2000c880 	.word	0x2000c880

0800d02c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800d02c:	b580      	push	{r7, lr}
 800d02e:	b082      	sub	sp, #8
 800d030:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800d032:	f00a ffd7 	bl	8017fe4 <sys_arch_protect>
 800d036:	6038      	str	r0, [r7, #0]
 800d038:	4b0d      	ldr	r3, [pc, #52]	; (800d070 <pbuf_free_ooseq+0x44>)
 800d03a:	2200      	movs	r2, #0
 800d03c:	701a      	strb	r2, [r3, #0]
 800d03e:	6838      	ldr	r0, [r7, #0]
 800d040:	f00a ffde 	bl	8018000 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800d044:	4b0b      	ldr	r3, [pc, #44]	; (800d074 <pbuf_free_ooseq+0x48>)
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	607b      	str	r3, [r7, #4]
 800d04a:	e00a      	b.n	800d062 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d050:	2b00      	cmp	r3, #0
 800d052:	d003      	beq.n	800d05c <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800d054:	6878      	ldr	r0, [r7, #4]
 800d056:	f002 f981 	bl	800f35c <tcp_free_ooseq>
      return;
 800d05a:	e005      	b.n	800d068 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	68db      	ldr	r3, [r3, #12]
 800d060:	607b      	str	r3, [r7, #4]
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	2b00      	cmp	r3, #0
 800d066:	d1f1      	bne.n	800d04c <pbuf_free_ooseq+0x20>
    }
  }
}
 800d068:	3708      	adds	r7, #8
 800d06a:	46bd      	mov	sp, r7
 800d06c:	bd80      	pop	{r7, pc}
 800d06e:	bf00      	nop
 800d070:	2000c889 	.word	0x2000c889
 800d074:	2000c898 	.word	0x2000c898

0800d078 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800d078:	b580      	push	{r7, lr}
 800d07a:	b082      	sub	sp, #8
 800d07c:	af00      	add	r7, sp, #0
 800d07e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800d080:	f7ff ffd4 	bl	800d02c <pbuf_free_ooseq>
}
 800d084:	bf00      	nop
 800d086:	3708      	adds	r7, #8
 800d088:	46bd      	mov	sp, r7
 800d08a:	bd80      	pop	{r7, pc}

0800d08c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800d08c:	b580      	push	{r7, lr}
 800d08e:	b082      	sub	sp, #8
 800d090:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800d092:	f00a ffa7 	bl	8017fe4 <sys_arch_protect>
 800d096:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800d098:	4b0f      	ldr	r3, [pc, #60]	; (800d0d8 <pbuf_pool_is_empty+0x4c>)
 800d09a:	781b      	ldrb	r3, [r3, #0]
 800d09c:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800d09e:	4b0e      	ldr	r3, [pc, #56]	; (800d0d8 <pbuf_pool_is_empty+0x4c>)
 800d0a0:	2201      	movs	r2, #1
 800d0a2:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800d0a4:	6878      	ldr	r0, [r7, #4]
 800d0a6:	f00a ffab 	bl	8018000 <sys_arch_unprotect>

  if (!queued) {
 800d0aa:	78fb      	ldrb	r3, [r7, #3]
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d10f      	bne.n	800d0d0 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800d0b0:	2100      	movs	r1, #0
 800d0b2:	480a      	ldr	r0, [pc, #40]	; (800d0dc <pbuf_pool_is_empty+0x50>)
 800d0b4:	f7fe fe4a 	bl	800bd4c <tcpip_try_callback>
 800d0b8:	4603      	mov	r3, r0
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d008      	beq.n	800d0d0 <pbuf_pool_is_empty+0x44>
 800d0be:	f00a ff91 	bl	8017fe4 <sys_arch_protect>
 800d0c2:	6078      	str	r0, [r7, #4]
 800d0c4:	4b04      	ldr	r3, [pc, #16]	; (800d0d8 <pbuf_pool_is_empty+0x4c>)
 800d0c6:	2200      	movs	r2, #0
 800d0c8:	701a      	strb	r2, [r3, #0]
 800d0ca:	6878      	ldr	r0, [r7, #4]
 800d0cc:	f00a ff98 	bl	8018000 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800d0d0:	bf00      	nop
 800d0d2:	3708      	adds	r7, #8
 800d0d4:	46bd      	mov	sp, r7
 800d0d6:	bd80      	pop	{r7, pc}
 800d0d8:	2000c889 	.word	0x2000c889
 800d0dc:	0800d079 	.word	0x0800d079

0800d0e0 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800d0e0:	b480      	push	{r7}
 800d0e2:	b085      	sub	sp, #20
 800d0e4:	af00      	add	r7, sp, #0
 800d0e6:	60f8      	str	r0, [r7, #12]
 800d0e8:	60b9      	str	r1, [r7, #8]
 800d0ea:	4611      	mov	r1, r2
 800d0ec:	461a      	mov	r2, r3
 800d0ee:	460b      	mov	r3, r1
 800d0f0:	80fb      	strh	r3, [r7, #6]
 800d0f2:	4613      	mov	r3, r2
 800d0f4:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	2200      	movs	r2, #0
 800d0fa:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	68ba      	ldr	r2, [r7, #8]
 800d100:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	88fa      	ldrh	r2, [r7, #6]
 800d106:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	88ba      	ldrh	r2, [r7, #4]
 800d10c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800d10e:	8b3b      	ldrh	r3, [r7, #24]
 800d110:	b2da      	uxtb	r2, r3
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	7f3a      	ldrb	r2, [r7, #28]
 800d11a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	2201      	movs	r2, #1
 800d120:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	2200      	movs	r2, #0
 800d126:	73da      	strb	r2, [r3, #15]
}
 800d128:	bf00      	nop
 800d12a:	3714      	adds	r7, #20
 800d12c:	46bd      	mov	sp, r7
 800d12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d132:	4770      	bx	lr

0800d134 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800d134:	b580      	push	{r7, lr}
 800d136:	b08c      	sub	sp, #48	; 0x30
 800d138:	af02      	add	r7, sp, #8
 800d13a:	4603      	mov	r3, r0
 800d13c:	71fb      	strb	r3, [r7, #7]
 800d13e:	460b      	mov	r3, r1
 800d140:	80bb      	strh	r3, [r7, #4]
 800d142:	4613      	mov	r3, r2
 800d144:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800d146:	79fb      	ldrb	r3, [r7, #7]
 800d148:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800d14a:	887b      	ldrh	r3, [r7, #2]
 800d14c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800d150:	d07f      	beq.n	800d252 <pbuf_alloc+0x11e>
 800d152:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800d156:	f300 80c8 	bgt.w	800d2ea <pbuf_alloc+0x1b6>
 800d15a:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800d15e:	d010      	beq.n	800d182 <pbuf_alloc+0x4e>
 800d160:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800d164:	f300 80c1 	bgt.w	800d2ea <pbuf_alloc+0x1b6>
 800d168:	2b01      	cmp	r3, #1
 800d16a:	d002      	beq.n	800d172 <pbuf_alloc+0x3e>
 800d16c:	2b41      	cmp	r3, #65	; 0x41
 800d16e:	f040 80bc 	bne.w	800d2ea <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800d172:	887a      	ldrh	r2, [r7, #2]
 800d174:	88bb      	ldrh	r3, [r7, #4]
 800d176:	4619      	mov	r1, r3
 800d178:	2000      	movs	r0, #0
 800d17a:	f000 f8d1 	bl	800d320 <pbuf_alloc_reference>
 800d17e:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800d180:	e0bd      	b.n	800d2fe <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800d182:	2300      	movs	r3, #0
 800d184:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800d186:	2300      	movs	r3, #0
 800d188:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800d18a:	88bb      	ldrh	r3, [r7, #4]
 800d18c:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800d18e:	200c      	movs	r0, #12
 800d190:	f7ff fbf6 	bl	800c980 <memp_malloc>
 800d194:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800d196:	693b      	ldr	r3, [r7, #16]
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d109      	bne.n	800d1b0 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800d19c:	f7ff ff76 	bl	800d08c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800d1a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d002      	beq.n	800d1ac <pbuf_alloc+0x78>
            pbuf_free(p);
 800d1a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d1a8:	f000 faa8 	bl	800d6fc <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800d1ac:	2300      	movs	r3, #0
 800d1ae:	e0a7      	b.n	800d300 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800d1b0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d1b2:	3303      	adds	r3, #3
 800d1b4:	b29b      	uxth	r3, r3
 800d1b6:	f023 0303 	bic.w	r3, r3, #3
 800d1ba:	b29b      	uxth	r3, r3
 800d1bc:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800d1c0:	b29b      	uxth	r3, r3
 800d1c2:	8b7a      	ldrh	r2, [r7, #26]
 800d1c4:	4293      	cmp	r3, r2
 800d1c6:	bf28      	it	cs
 800d1c8:	4613      	movcs	r3, r2
 800d1ca:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800d1cc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d1ce:	3310      	adds	r3, #16
 800d1d0:	693a      	ldr	r2, [r7, #16]
 800d1d2:	4413      	add	r3, r2
 800d1d4:	3303      	adds	r3, #3
 800d1d6:	f023 0303 	bic.w	r3, r3, #3
 800d1da:	4618      	mov	r0, r3
 800d1dc:	89f9      	ldrh	r1, [r7, #14]
 800d1de:	8b7a      	ldrh	r2, [r7, #26]
 800d1e0:	2300      	movs	r3, #0
 800d1e2:	9301      	str	r3, [sp, #4]
 800d1e4:	887b      	ldrh	r3, [r7, #2]
 800d1e6:	9300      	str	r3, [sp, #0]
 800d1e8:	460b      	mov	r3, r1
 800d1ea:	4601      	mov	r1, r0
 800d1ec:	6938      	ldr	r0, [r7, #16]
 800d1ee:	f7ff ff77 	bl	800d0e0 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800d1f2:	693b      	ldr	r3, [r7, #16]
 800d1f4:	685b      	ldr	r3, [r3, #4]
 800d1f6:	f003 0303 	and.w	r3, r3, #3
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d006      	beq.n	800d20c <pbuf_alloc+0xd8>
 800d1fe:	4b42      	ldr	r3, [pc, #264]	; (800d308 <pbuf_alloc+0x1d4>)
 800d200:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d204:	4941      	ldr	r1, [pc, #260]	; (800d30c <pbuf_alloc+0x1d8>)
 800d206:	4842      	ldr	r0, [pc, #264]	; (800d310 <pbuf_alloc+0x1dc>)
 800d208:	f00b fc48 	bl	8018a9c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800d20c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d20e:	3303      	adds	r3, #3
 800d210:	f023 0303 	bic.w	r3, r3, #3
 800d214:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800d218:	d106      	bne.n	800d228 <pbuf_alloc+0xf4>
 800d21a:	4b3b      	ldr	r3, [pc, #236]	; (800d308 <pbuf_alloc+0x1d4>)
 800d21c:	f44f 7281 	mov.w	r2, #258	; 0x102
 800d220:	493c      	ldr	r1, [pc, #240]	; (800d314 <pbuf_alloc+0x1e0>)
 800d222:	483b      	ldr	r0, [pc, #236]	; (800d310 <pbuf_alloc+0x1dc>)
 800d224:	f00b fc3a 	bl	8018a9c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800d228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d102      	bne.n	800d234 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800d22e:	693b      	ldr	r3, [r7, #16]
 800d230:	627b      	str	r3, [r7, #36]	; 0x24
 800d232:	e002      	b.n	800d23a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800d234:	69fb      	ldr	r3, [r7, #28]
 800d236:	693a      	ldr	r2, [r7, #16]
 800d238:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800d23a:	693b      	ldr	r3, [r7, #16]
 800d23c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800d23e:	8b7a      	ldrh	r2, [r7, #26]
 800d240:	89fb      	ldrh	r3, [r7, #14]
 800d242:	1ad3      	subs	r3, r2, r3
 800d244:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800d246:	2300      	movs	r3, #0
 800d248:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800d24a:	8b7b      	ldrh	r3, [r7, #26]
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d19e      	bne.n	800d18e <pbuf_alloc+0x5a>
      break;
 800d250:	e055      	b.n	800d2fe <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800d252:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d254:	3303      	adds	r3, #3
 800d256:	b29b      	uxth	r3, r3
 800d258:	f023 0303 	bic.w	r3, r3, #3
 800d25c:	b29a      	uxth	r2, r3
 800d25e:	88bb      	ldrh	r3, [r7, #4]
 800d260:	3303      	adds	r3, #3
 800d262:	b29b      	uxth	r3, r3
 800d264:	f023 0303 	bic.w	r3, r3, #3
 800d268:	b29b      	uxth	r3, r3
 800d26a:	4413      	add	r3, r2
 800d26c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800d26e:	8b3b      	ldrh	r3, [r7, #24]
 800d270:	3310      	adds	r3, #16
 800d272:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800d274:	8b3a      	ldrh	r2, [r7, #24]
 800d276:	88bb      	ldrh	r3, [r7, #4]
 800d278:	3303      	adds	r3, #3
 800d27a:	f023 0303 	bic.w	r3, r3, #3
 800d27e:	429a      	cmp	r2, r3
 800d280:	d306      	bcc.n	800d290 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800d282:	8afa      	ldrh	r2, [r7, #22]
 800d284:	88bb      	ldrh	r3, [r7, #4]
 800d286:	3303      	adds	r3, #3
 800d288:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800d28c:	429a      	cmp	r2, r3
 800d28e:	d201      	bcs.n	800d294 <pbuf_alloc+0x160>
        return NULL;
 800d290:	2300      	movs	r3, #0
 800d292:	e035      	b.n	800d300 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800d294:	8afb      	ldrh	r3, [r7, #22]
 800d296:	4618      	mov	r0, r3
 800d298:	f7ff f9ce 	bl	800c638 <mem_malloc>
 800d29c:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800d29e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d101      	bne.n	800d2a8 <pbuf_alloc+0x174>
        return NULL;
 800d2a4:	2300      	movs	r3, #0
 800d2a6:	e02b      	b.n	800d300 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800d2a8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d2aa:	3310      	adds	r3, #16
 800d2ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d2ae:	4413      	add	r3, r2
 800d2b0:	3303      	adds	r3, #3
 800d2b2:	f023 0303 	bic.w	r3, r3, #3
 800d2b6:	4618      	mov	r0, r3
 800d2b8:	88b9      	ldrh	r1, [r7, #4]
 800d2ba:	88ba      	ldrh	r2, [r7, #4]
 800d2bc:	2300      	movs	r3, #0
 800d2be:	9301      	str	r3, [sp, #4]
 800d2c0:	887b      	ldrh	r3, [r7, #2]
 800d2c2:	9300      	str	r3, [sp, #0]
 800d2c4:	460b      	mov	r3, r1
 800d2c6:	4601      	mov	r1, r0
 800d2c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d2ca:	f7ff ff09 	bl	800d0e0 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800d2ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2d0:	685b      	ldr	r3, [r3, #4]
 800d2d2:	f003 0303 	and.w	r3, r3, #3
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d010      	beq.n	800d2fc <pbuf_alloc+0x1c8>
 800d2da:	4b0b      	ldr	r3, [pc, #44]	; (800d308 <pbuf_alloc+0x1d4>)
 800d2dc:	f44f 7291 	mov.w	r2, #290	; 0x122
 800d2e0:	490d      	ldr	r1, [pc, #52]	; (800d318 <pbuf_alloc+0x1e4>)
 800d2e2:	480b      	ldr	r0, [pc, #44]	; (800d310 <pbuf_alloc+0x1dc>)
 800d2e4:	f00b fbda 	bl	8018a9c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800d2e8:	e008      	b.n	800d2fc <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800d2ea:	4b07      	ldr	r3, [pc, #28]	; (800d308 <pbuf_alloc+0x1d4>)
 800d2ec:	f240 1227 	movw	r2, #295	; 0x127
 800d2f0:	490a      	ldr	r1, [pc, #40]	; (800d31c <pbuf_alloc+0x1e8>)
 800d2f2:	4807      	ldr	r0, [pc, #28]	; (800d310 <pbuf_alloc+0x1dc>)
 800d2f4:	f00b fbd2 	bl	8018a9c <iprintf>
      return NULL;
 800d2f8:	2300      	movs	r3, #0
 800d2fa:	e001      	b.n	800d300 <pbuf_alloc+0x1cc>
      break;
 800d2fc:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800d2fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d300:	4618      	mov	r0, r3
 800d302:	3728      	adds	r7, #40	; 0x28
 800d304:	46bd      	mov	sp, r7
 800d306:	bd80      	pop	{r7, pc}
 800d308:	0801a250 	.word	0x0801a250
 800d30c:	0801a280 	.word	0x0801a280
 800d310:	0801a2b0 	.word	0x0801a2b0
 800d314:	0801a2d8 	.word	0x0801a2d8
 800d318:	0801a30c 	.word	0x0801a30c
 800d31c:	0801a338 	.word	0x0801a338

0800d320 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800d320:	b580      	push	{r7, lr}
 800d322:	b086      	sub	sp, #24
 800d324:	af02      	add	r7, sp, #8
 800d326:	6078      	str	r0, [r7, #4]
 800d328:	460b      	mov	r3, r1
 800d32a:	807b      	strh	r3, [r7, #2]
 800d32c:	4613      	mov	r3, r2
 800d32e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800d330:	883b      	ldrh	r3, [r7, #0]
 800d332:	2b41      	cmp	r3, #65	; 0x41
 800d334:	d009      	beq.n	800d34a <pbuf_alloc_reference+0x2a>
 800d336:	883b      	ldrh	r3, [r7, #0]
 800d338:	2b01      	cmp	r3, #1
 800d33a:	d006      	beq.n	800d34a <pbuf_alloc_reference+0x2a>
 800d33c:	4b0f      	ldr	r3, [pc, #60]	; (800d37c <pbuf_alloc_reference+0x5c>)
 800d33e:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800d342:	490f      	ldr	r1, [pc, #60]	; (800d380 <pbuf_alloc_reference+0x60>)
 800d344:	480f      	ldr	r0, [pc, #60]	; (800d384 <pbuf_alloc_reference+0x64>)
 800d346:	f00b fba9 	bl	8018a9c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800d34a:	200b      	movs	r0, #11
 800d34c:	f7ff fb18 	bl	800c980 <memp_malloc>
 800d350:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	2b00      	cmp	r3, #0
 800d356:	d101      	bne.n	800d35c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800d358:	2300      	movs	r3, #0
 800d35a:	e00b      	b.n	800d374 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800d35c:	8879      	ldrh	r1, [r7, #2]
 800d35e:	887a      	ldrh	r2, [r7, #2]
 800d360:	2300      	movs	r3, #0
 800d362:	9301      	str	r3, [sp, #4]
 800d364:	883b      	ldrh	r3, [r7, #0]
 800d366:	9300      	str	r3, [sp, #0]
 800d368:	460b      	mov	r3, r1
 800d36a:	6879      	ldr	r1, [r7, #4]
 800d36c:	68f8      	ldr	r0, [r7, #12]
 800d36e:	f7ff feb7 	bl	800d0e0 <pbuf_init_alloced_pbuf>
  return p;
 800d372:	68fb      	ldr	r3, [r7, #12]
}
 800d374:	4618      	mov	r0, r3
 800d376:	3710      	adds	r7, #16
 800d378:	46bd      	mov	sp, r7
 800d37a:	bd80      	pop	{r7, pc}
 800d37c:	0801a250 	.word	0x0801a250
 800d380:	0801a354 	.word	0x0801a354
 800d384:	0801a2b0 	.word	0x0801a2b0

0800d388 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800d388:	b580      	push	{r7, lr}
 800d38a:	b088      	sub	sp, #32
 800d38c:	af02      	add	r7, sp, #8
 800d38e:	607b      	str	r3, [r7, #4]
 800d390:	4603      	mov	r3, r0
 800d392:	73fb      	strb	r3, [r7, #15]
 800d394:	460b      	mov	r3, r1
 800d396:	81bb      	strh	r3, [r7, #12]
 800d398:	4613      	mov	r3, r2
 800d39a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800d39c:	7bfb      	ldrb	r3, [r7, #15]
 800d39e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800d3a0:	8a7b      	ldrh	r3, [r7, #18]
 800d3a2:	3303      	adds	r3, #3
 800d3a4:	f023 0203 	bic.w	r2, r3, #3
 800d3a8:	89bb      	ldrh	r3, [r7, #12]
 800d3aa:	441a      	add	r2, r3
 800d3ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d3ae:	429a      	cmp	r2, r3
 800d3b0:	d901      	bls.n	800d3b6 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800d3b2:	2300      	movs	r3, #0
 800d3b4:	e018      	b.n	800d3e8 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800d3b6:	6a3b      	ldr	r3, [r7, #32]
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d007      	beq.n	800d3cc <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800d3bc:	8a7b      	ldrh	r3, [r7, #18]
 800d3be:	3303      	adds	r3, #3
 800d3c0:	f023 0303 	bic.w	r3, r3, #3
 800d3c4:	6a3a      	ldr	r2, [r7, #32]
 800d3c6:	4413      	add	r3, r2
 800d3c8:	617b      	str	r3, [r7, #20]
 800d3ca:	e001      	b.n	800d3d0 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800d3cc:	2300      	movs	r3, #0
 800d3ce:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800d3d0:	6878      	ldr	r0, [r7, #4]
 800d3d2:	89b9      	ldrh	r1, [r7, #12]
 800d3d4:	89ba      	ldrh	r2, [r7, #12]
 800d3d6:	2302      	movs	r3, #2
 800d3d8:	9301      	str	r3, [sp, #4]
 800d3da:	897b      	ldrh	r3, [r7, #10]
 800d3dc:	9300      	str	r3, [sp, #0]
 800d3de:	460b      	mov	r3, r1
 800d3e0:	6979      	ldr	r1, [r7, #20]
 800d3e2:	f7ff fe7d 	bl	800d0e0 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800d3e6:	687b      	ldr	r3, [r7, #4]
}
 800d3e8:	4618      	mov	r0, r3
 800d3ea:	3718      	adds	r7, #24
 800d3ec:	46bd      	mov	sp, r7
 800d3ee:	bd80      	pop	{r7, pc}

0800d3f0 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800d3f0:	b580      	push	{r7, lr}
 800d3f2:	b084      	sub	sp, #16
 800d3f4:	af00      	add	r7, sp, #0
 800d3f6:	6078      	str	r0, [r7, #4]
 800d3f8:	460b      	mov	r3, r1
 800d3fa:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d106      	bne.n	800d410 <pbuf_realloc+0x20>
 800d402:	4b3a      	ldr	r3, [pc, #232]	; (800d4ec <pbuf_realloc+0xfc>)
 800d404:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800d408:	4939      	ldr	r1, [pc, #228]	; (800d4f0 <pbuf_realloc+0x100>)
 800d40a:	483a      	ldr	r0, [pc, #232]	; (800d4f4 <pbuf_realloc+0x104>)
 800d40c:	f00b fb46 	bl	8018a9c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	891b      	ldrh	r3, [r3, #8]
 800d414:	887a      	ldrh	r2, [r7, #2]
 800d416:	429a      	cmp	r2, r3
 800d418:	d263      	bcs.n	800d4e2 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	891a      	ldrh	r2, [r3, #8]
 800d41e:	887b      	ldrh	r3, [r7, #2]
 800d420:	1ad3      	subs	r3, r2, r3
 800d422:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800d424:	887b      	ldrh	r3, [r7, #2]
 800d426:	817b      	strh	r3, [r7, #10]
  q = p;
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800d42c:	e018      	b.n	800d460 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	895b      	ldrh	r3, [r3, #10]
 800d432:	897a      	ldrh	r2, [r7, #10]
 800d434:	1ad3      	subs	r3, r2, r3
 800d436:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	891a      	ldrh	r2, [r3, #8]
 800d43c:	893b      	ldrh	r3, [r7, #8]
 800d43e:	1ad3      	subs	r3, r2, r3
 800d440:	b29a      	uxth	r2, r3
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d106      	bne.n	800d460 <pbuf_realloc+0x70>
 800d452:	4b26      	ldr	r3, [pc, #152]	; (800d4ec <pbuf_realloc+0xfc>)
 800d454:	f240 12af 	movw	r2, #431	; 0x1af
 800d458:	4927      	ldr	r1, [pc, #156]	; (800d4f8 <pbuf_realloc+0x108>)
 800d45a:	4826      	ldr	r0, [pc, #152]	; (800d4f4 <pbuf_realloc+0x104>)
 800d45c:	f00b fb1e 	bl	8018a9c <iprintf>
  while (rem_len > q->len) {
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	895b      	ldrh	r3, [r3, #10]
 800d464:	897a      	ldrh	r2, [r7, #10]
 800d466:	429a      	cmp	r2, r3
 800d468:	d8e1      	bhi.n	800d42e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	7b1b      	ldrb	r3, [r3, #12]
 800d46e:	f003 030f 	and.w	r3, r3, #15
 800d472:	2b00      	cmp	r3, #0
 800d474:	d121      	bne.n	800d4ba <pbuf_realloc+0xca>
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	895b      	ldrh	r3, [r3, #10]
 800d47a:	897a      	ldrh	r2, [r7, #10]
 800d47c:	429a      	cmp	r2, r3
 800d47e:	d01c      	beq.n	800d4ba <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	7b5b      	ldrb	r3, [r3, #13]
 800d484:	f003 0302 	and.w	r3, r3, #2
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d116      	bne.n	800d4ba <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	685a      	ldr	r2, [r3, #4]
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	1ad3      	subs	r3, r2, r3
 800d494:	b29a      	uxth	r2, r3
 800d496:	897b      	ldrh	r3, [r7, #10]
 800d498:	4413      	add	r3, r2
 800d49a:	b29b      	uxth	r3, r3
 800d49c:	4619      	mov	r1, r3
 800d49e:	68f8      	ldr	r0, [r7, #12]
 800d4a0:	f7fe ffc0 	bl	800c424 <mem_trim>
 800d4a4:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d106      	bne.n	800d4ba <pbuf_realloc+0xca>
 800d4ac:	4b0f      	ldr	r3, [pc, #60]	; (800d4ec <pbuf_realloc+0xfc>)
 800d4ae:	f240 12bd 	movw	r2, #445	; 0x1bd
 800d4b2:	4912      	ldr	r1, [pc, #72]	; (800d4fc <pbuf_realloc+0x10c>)
 800d4b4:	480f      	ldr	r0, [pc, #60]	; (800d4f4 <pbuf_realloc+0x104>)
 800d4b6:	f00b faf1 	bl	8018a9c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	897a      	ldrh	r2, [r7, #10]
 800d4be:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	895a      	ldrh	r2, [r3, #10]
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d004      	beq.n	800d4da <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	4618      	mov	r0, r3
 800d4d6:	f000 f911 	bl	800d6fc <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	2200      	movs	r2, #0
 800d4de:	601a      	str	r2, [r3, #0]
 800d4e0:	e000      	b.n	800d4e4 <pbuf_realloc+0xf4>
    return;
 800d4e2:	bf00      	nop

}
 800d4e4:	3710      	adds	r7, #16
 800d4e6:	46bd      	mov	sp, r7
 800d4e8:	bd80      	pop	{r7, pc}
 800d4ea:	bf00      	nop
 800d4ec:	0801a250 	.word	0x0801a250
 800d4f0:	0801a368 	.word	0x0801a368
 800d4f4:	0801a2b0 	.word	0x0801a2b0
 800d4f8:	0801a380 	.word	0x0801a380
 800d4fc:	0801a398 	.word	0x0801a398

0800d500 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800d500:	b580      	push	{r7, lr}
 800d502:	b086      	sub	sp, #24
 800d504:	af00      	add	r7, sp, #0
 800d506:	60f8      	str	r0, [r7, #12]
 800d508:	60b9      	str	r1, [r7, #8]
 800d50a:	4613      	mov	r3, r2
 800d50c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	2b00      	cmp	r3, #0
 800d512:	d106      	bne.n	800d522 <pbuf_add_header_impl+0x22>
 800d514:	4b2b      	ldr	r3, [pc, #172]	; (800d5c4 <pbuf_add_header_impl+0xc4>)
 800d516:	f240 12df 	movw	r2, #479	; 0x1df
 800d51a:	492b      	ldr	r1, [pc, #172]	; (800d5c8 <pbuf_add_header_impl+0xc8>)
 800d51c:	482b      	ldr	r0, [pc, #172]	; (800d5cc <pbuf_add_header_impl+0xcc>)
 800d51e:	f00b fabd 	bl	8018a9c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	2b00      	cmp	r3, #0
 800d526:	d003      	beq.n	800d530 <pbuf_add_header_impl+0x30>
 800d528:	68bb      	ldr	r3, [r7, #8]
 800d52a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d52e:	d301      	bcc.n	800d534 <pbuf_add_header_impl+0x34>
    return 1;
 800d530:	2301      	movs	r3, #1
 800d532:	e043      	b.n	800d5bc <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800d534:	68bb      	ldr	r3, [r7, #8]
 800d536:	2b00      	cmp	r3, #0
 800d538:	d101      	bne.n	800d53e <pbuf_add_header_impl+0x3e>
    return 0;
 800d53a:	2300      	movs	r3, #0
 800d53c:	e03e      	b.n	800d5bc <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800d53e:	68bb      	ldr	r3, [r7, #8]
 800d540:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	891a      	ldrh	r2, [r3, #8]
 800d546:	8a7b      	ldrh	r3, [r7, #18]
 800d548:	4413      	add	r3, r2
 800d54a:	b29b      	uxth	r3, r3
 800d54c:	8a7a      	ldrh	r2, [r7, #18]
 800d54e:	429a      	cmp	r2, r3
 800d550:	d901      	bls.n	800d556 <pbuf_add_header_impl+0x56>
    return 1;
 800d552:	2301      	movs	r3, #1
 800d554:	e032      	b.n	800d5bc <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	7b1b      	ldrb	r3, [r3, #12]
 800d55a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800d55c:	8a3b      	ldrh	r3, [r7, #16]
 800d55e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d562:	2b00      	cmp	r3, #0
 800d564:	d00c      	beq.n	800d580 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	685a      	ldr	r2, [r3, #4]
 800d56a:	68bb      	ldr	r3, [r7, #8]
 800d56c:	425b      	negs	r3, r3
 800d56e:	4413      	add	r3, r2
 800d570:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	3310      	adds	r3, #16
 800d576:	697a      	ldr	r2, [r7, #20]
 800d578:	429a      	cmp	r2, r3
 800d57a:	d20d      	bcs.n	800d598 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800d57c:	2301      	movs	r3, #1
 800d57e:	e01d      	b.n	800d5bc <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800d580:	79fb      	ldrb	r3, [r7, #7]
 800d582:	2b00      	cmp	r3, #0
 800d584:	d006      	beq.n	800d594 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	685a      	ldr	r2, [r3, #4]
 800d58a:	68bb      	ldr	r3, [r7, #8]
 800d58c:	425b      	negs	r3, r3
 800d58e:	4413      	add	r3, r2
 800d590:	617b      	str	r3, [r7, #20]
 800d592:	e001      	b.n	800d598 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800d594:	2301      	movs	r3, #1
 800d596:	e011      	b.n	800d5bc <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	697a      	ldr	r2, [r7, #20]
 800d59c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800d59e:	68fb      	ldr	r3, [r7, #12]
 800d5a0:	895a      	ldrh	r2, [r3, #10]
 800d5a2:	8a7b      	ldrh	r3, [r7, #18]
 800d5a4:	4413      	add	r3, r2
 800d5a6:	b29a      	uxth	r2, r3
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	891a      	ldrh	r2, [r3, #8]
 800d5b0:	8a7b      	ldrh	r3, [r7, #18]
 800d5b2:	4413      	add	r3, r2
 800d5b4:	b29a      	uxth	r2, r3
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	811a      	strh	r2, [r3, #8]


  return 0;
 800d5ba:	2300      	movs	r3, #0
}
 800d5bc:	4618      	mov	r0, r3
 800d5be:	3718      	adds	r7, #24
 800d5c0:	46bd      	mov	sp, r7
 800d5c2:	bd80      	pop	{r7, pc}
 800d5c4:	0801a250 	.word	0x0801a250
 800d5c8:	0801a3b4 	.word	0x0801a3b4
 800d5cc:	0801a2b0 	.word	0x0801a2b0

0800d5d0 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800d5d0:	b580      	push	{r7, lr}
 800d5d2:	b082      	sub	sp, #8
 800d5d4:	af00      	add	r7, sp, #0
 800d5d6:	6078      	str	r0, [r7, #4]
 800d5d8:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800d5da:	2200      	movs	r2, #0
 800d5dc:	6839      	ldr	r1, [r7, #0]
 800d5de:	6878      	ldr	r0, [r7, #4]
 800d5e0:	f7ff ff8e 	bl	800d500 <pbuf_add_header_impl>
 800d5e4:	4603      	mov	r3, r0
}
 800d5e6:	4618      	mov	r0, r3
 800d5e8:	3708      	adds	r7, #8
 800d5ea:	46bd      	mov	sp, r7
 800d5ec:	bd80      	pop	{r7, pc}
	...

0800d5f0 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800d5f0:	b580      	push	{r7, lr}
 800d5f2:	b084      	sub	sp, #16
 800d5f4:	af00      	add	r7, sp, #0
 800d5f6:	6078      	str	r0, [r7, #4]
 800d5f8:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d106      	bne.n	800d60e <pbuf_remove_header+0x1e>
 800d600:	4b20      	ldr	r3, [pc, #128]	; (800d684 <pbuf_remove_header+0x94>)
 800d602:	f240 224b 	movw	r2, #587	; 0x24b
 800d606:	4920      	ldr	r1, [pc, #128]	; (800d688 <pbuf_remove_header+0x98>)
 800d608:	4820      	ldr	r0, [pc, #128]	; (800d68c <pbuf_remove_header+0x9c>)
 800d60a:	f00b fa47 	bl	8018a9c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	2b00      	cmp	r3, #0
 800d612:	d003      	beq.n	800d61c <pbuf_remove_header+0x2c>
 800d614:	683b      	ldr	r3, [r7, #0]
 800d616:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d61a:	d301      	bcc.n	800d620 <pbuf_remove_header+0x30>
    return 1;
 800d61c:	2301      	movs	r3, #1
 800d61e:	e02c      	b.n	800d67a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800d620:	683b      	ldr	r3, [r7, #0]
 800d622:	2b00      	cmp	r3, #0
 800d624:	d101      	bne.n	800d62a <pbuf_remove_header+0x3a>
    return 0;
 800d626:	2300      	movs	r3, #0
 800d628:	e027      	b.n	800d67a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800d62a:	683b      	ldr	r3, [r7, #0]
 800d62c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	895b      	ldrh	r3, [r3, #10]
 800d632:	89fa      	ldrh	r2, [r7, #14]
 800d634:	429a      	cmp	r2, r3
 800d636:	d908      	bls.n	800d64a <pbuf_remove_header+0x5a>
 800d638:	4b12      	ldr	r3, [pc, #72]	; (800d684 <pbuf_remove_header+0x94>)
 800d63a:	f240 2255 	movw	r2, #597	; 0x255
 800d63e:	4914      	ldr	r1, [pc, #80]	; (800d690 <pbuf_remove_header+0xa0>)
 800d640:	4812      	ldr	r0, [pc, #72]	; (800d68c <pbuf_remove_header+0x9c>)
 800d642:	f00b fa2b 	bl	8018a9c <iprintf>
 800d646:	2301      	movs	r3, #1
 800d648:	e017      	b.n	800d67a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	685b      	ldr	r3, [r3, #4]
 800d64e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	685a      	ldr	r2, [r3, #4]
 800d654:	683b      	ldr	r3, [r7, #0]
 800d656:	441a      	add	r2, r3
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	895a      	ldrh	r2, [r3, #10]
 800d660:	89fb      	ldrh	r3, [r7, #14]
 800d662:	1ad3      	subs	r3, r2, r3
 800d664:	b29a      	uxth	r2, r3
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	891a      	ldrh	r2, [r3, #8]
 800d66e:	89fb      	ldrh	r3, [r7, #14]
 800d670:	1ad3      	subs	r3, r2, r3
 800d672:	b29a      	uxth	r2, r3
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800d678:	2300      	movs	r3, #0
}
 800d67a:	4618      	mov	r0, r3
 800d67c:	3710      	adds	r7, #16
 800d67e:	46bd      	mov	sp, r7
 800d680:	bd80      	pop	{r7, pc}
 800d682:	bf00      	nop
 800d684:	0801a250 	.word	0x0801a250
 800d688:	0801a3b4 	.word	0x0801a3b4
 800d68c:	0801a2b0 	.word	0x0801a2b0
 800d690:	0801a3c0 	.word	0x0801a3c0

0800d694 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800d694:	b580      	push	{r7, lr}
 800d696:	b082      	sub	sp, #8
 800d698:	af00      	add	r7, sp, #0
 800d69a:	6078      	str	r0, [r7, #4]
 800d69c:	460b      	mov	r3, r1
 800d69e:	807b      	strh	r3, [r7, #2]
 800d6a0:	4613      	mov	r3, r2
 800d6a2:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800d6a4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	da08      	bge.n	800d6be <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800d6ac:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d6b0:	425b      	negs	r3, r3
 800d6b2:	4619      	mov	r1, r3
 800d6b4:	6878      	ldr	r0, [r7, #4]
 800d6b6:	f7ff ff9b 	bl	800d5f0 <pbuf_remove_header>
 800d6ba:	4603      	mov	r3, r0
 800d6bc:	e007      	b.n	800d6ce <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800d6be:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d6c2:	787a      	ldrb	r2, [r7, #1]
 800d6c4:	4619      	mov	r1, r3
 800d6c6:	6878      	ldr	r0, [r7, #4]
 800d6c8:	f7ff ff1a 	bl	800d500 <pbuf_add_header_impl>
 800d6cc:	4603      	mov	r3, r0
  }
}
 800d6ce:	4618      	mov	r0, r3
 800d6d0:	3708      	adds	r7, #8
 800d6d2:	46bd      	mov	sp, r7
 800d6d4:	bd80      	pop	{r7, pc}

0800d6d6 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800d6d6:	b580      	push	{r7, lr}
 800d6d8:	b082      	sub	sp, #8
 800d6da:	af00      	add	r7, sp, #0
 800d6dc:	6078      	str	r0, [r7, #4]
 800d6de:	460b      	mov	r3, r1
 800d6e0:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800d6e2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d6e6:	2201      	movs	r2, #1
 800d6e8:	4619      	mov	r1, r3
 800d6ea:	6878      	ldr	r0, [r7, #4]
 800d6ec:	f7ff ffd2 	bl	800d694 <pbuf_header_impl>
 800d6f0:	4603      	mov	r3, r0
}
 800d6f2:	4618      	mov	r0, r3
 800d6f4:	3708      	adds	r7, #8
 800d6f6:	46bd      	mov	sp, r7
 800d6f8:	bd80      	pop	{r7, pc}
	...

0800d6fc <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800d6fc:	b580      	push	{r7, lr}
 800d6fe:	b088      	sub	sp, #32
 800d700:	af00      	add	r7, sp, #0
 800d702:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	2b00      	cmp	r3, #0
 800d708:	d10b      	bne.n	800d722 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d106      	bne.n	800d71e <pbuf_free+0x22>
 800d710:	4b3b      	ldr	r3, [pc, #236]	; (800d800 <pbuf_free+0x104>)
 800d712:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800d716:	493b      	ldr	r1, [pc, #236]	; (800d804 <pbuf_free+0x108>)
 800d718:	483b      	ldr	r0, [pc, #236]	; (800d808 <pbuf_free+0x10c>)
 800d71a:	f00b f9bf 	bl	8018a9c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800d71e:	2300      	movs	r3, #0
 800d720:	e069      	b.n	800d7f6 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800d722:	2300      	movs	r3, #0
 800d724:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800d726:	e062      	b.n	800d7ee <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800d728:	f00a fc5c 	bl	8017fe4 <sys_arch_protect>
 800d72c:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	7b9b      	ldrb	r3, [r3, #14]
 800d732:	2b00      	cmp	r3, #0
 800d734:	d106      	bne.n	800d744 <pbuf_free+0x48>
 800d736:	4b32      	ldr	r3, [pc, #200]	; (800d800 <pbuf_free+0x104>)
 800d738:	f240 22f1 	movw	r2, #753	; 0x2f1
 800d73c:	4933      	ldr	r1, [pc, #204]	; (800d80c <pbuf_free+0x110>)
 800d73e:	4832      	ldr	r0, [pc, #200]	; (800d808 <pbuf_free+0x10c>)
 800d740:	f00b f9ac 	bl	8018a9c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	7b9b      	ldrb	r3, [r3, #14]
 800d748:	3b01      	subs	r3, #1
 800d74a:	b2da      	uxtb	r2, r3
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	739a      	strb	r2, [r3, #14]
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	7b9b      	ldrb	r3, [r3, #14]
 800d754:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800d756:	69b8      	ldr	r0, [r7, #24]
 800d758:	f00a fc52 	bl	8018000 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800d75c:	7dfb      	ldrb	r3, [r7, #23]
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d143      	bne.n	800d7ea <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	7b1b      	ldrb	r3, [r3, #12]
 800d76c:	f003 030f 	and.w	r3, r3, #15
 800d770:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	7b5b      	ldrb	r3, [r3, #13]
 800d776:	f003 0302 	and.w	r3, r3, #2
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d011      	beq.n	800d7a2 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800d782:	68bb      	ldr	r3, [r7, #8]
 800d784:	691b      	ldr	r3, [r3, #16]
 800d786:	2b00      	cmp	r3, #0
 800d788:	d106      	bne.n	800d798 <pbuf_free+0x9c>
 800d78a:	4b1d      	ldr	r3, [pc, #116]	; (800d800 <pbuf_free+0x104>)
 800d78c:	f240 22ff 	movw	r2, #767	; 0x2ff
 800d790:	491f      	ldr	r1, [pc, #124]	; (800d810 <pbuf_free+0x114>)
 800d792:	481d      	ldr	r0, [pc, #116]	; (800d808 <pbuf_free+0x10c>)
 800d794:	f00b f982 	bl	8018a9c <iprintf>
        pc->custom_free_function(p);
 800d798:	68bb      	ldr	r3, [r7, #8]
 800d79a:	691b      	ldr	r3, [r3, #16]
 800d79c:	6878      	ldr	r0, [r7, #4]
 800d79e:	4798      	blx	r3
 800d7a0:	e01d      	b.n	800d7de <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800d7a2:	7bfb      	ldrb	r3, [r7, #15]
 800d7a4:	2b02      	cmp	r3, #2
 800d7a6:	d104      	bne.n	800d7b2 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800d7a8:	6879      	ldr	r1, [r7, #4]
 800d7aa:	200c      	movs	r0, #12
 800d7ac:	f7ff f95e 	bl	800ca6c <memp_free>
 800d7b0:	e015      	b.n	800d7de <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800d7b2:	7bfb      	ldrb	r3, [r7, #15]
 800d7b4:	2b01      	cmp	r3, #1
 800d7b6:	d104      	bne.n	800d7c2 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800d7b8:	6879      	ldr	r1, [r7, #4]
 800d7ba:	200b      	movs	r0, #11
 800d7bc:	f7ff f956 	bl	800ca6c <memp_free>
 800d7c0:	e00d      	b.n	800d7de <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800d7c2:	7bfb      	ldrb	r3, [r7, #15]
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d103      	bne.n	800d7d0 <pbuf_free+0xd4>
          mem_free(p);
 800d7c8:	6878      	ldr	r0, [r7, #4]
 800d7ca:	f7fe fd9b 	bl	800c304 <mem_free>
 800d7ce:	e006      	b.n	800d7de <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800d7d0:	4b0b      	ldr	r3, [pc, #44]	; (800d800 <pbuf_free+0x104>)
 800d7d2:	f240 320f 	movw	r2, #783	; 0x30f
 800d7d6:	490f      	ldr	r1, [pc, #60]	; (800d814 <pbuf_free+0x118>)
 800d7d8:	480b      	ldr	r0, [pc, #44]	; (800d808 <pbuf_free+0x10c>)
 800d7da:	f00b f95f 	bl	8018a9c <iprintf>
        }
      }
      count++;
 800d7de:	7ffb      	ldrb	r3, [r7, #31]
 800d7e0:	3301      	adds	r3, #1
 800d7e2:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800d7e4:	693b      	ldr	r3, [r7, #16]
 800d7e6:	607b      	str	r3, [r7, #4]
 800d7e8:	e001      	b.n	800d7ee <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800d7ea:	2300      	movs	r3, #0
 800d7ec:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d199      	bne.n	800d728 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800d7f4:	7ffb      	ldrb	r3, [r7, #31]
}
 800d7f6:	4618      	mov	r0, r3
 800d7f8:	3720      	adds	r7, #32
 800d7fa:	46bd      	mov	sp, r7
 800d7fc:	bd80      	pop	{r7, pc}
 800d7fe:	bf00      	nop
 800d800:	0801a250 	.word	0x0801a250
 800d804:	0801a3b4 	.word	0x0801a3b4
 800d808:	0801a2b0 	.word	0x0801a2b0
 800d80c:	0801a3e0 	.word	0x0801a3e0
 800d810:	0801a3f8 	.word	0x0801a3f8
 800d814:	0801a41c 	.word	0x0801a41c

0800d818 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800d818:	b480      	push	{r7}
 800d81a:	b085      	sub	sp, #20
 800d81c:	af00      	add	r7, sp, #0
 800d81e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800d820:	2300      	movs	r3, #0
 800d822:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800d824:	e005      	b.n	800d832 <pbuf_clen+0x1a>
    ++len;
 800d826:	89fb      	ldrh	r3, [r7, #14]
 800d828:	3301      	adds	r3, #1
 800d82a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	2b00      	cmp	r3, #0
 800d836:	d1f6      	bne.n	800d826 <pbuf_clen+0xe>
  }
  return len;
 800d838:	89fb      	ldrh	r3, [r7, #14]
}
 800d83a:	4618      	mov	r0, r3
 800d83c:	3714      	adds	r7, #20
 800d83e:	46bd      	mov	sp, r7
 800d840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d844:	4770      	bx	lr
	...

0800d848 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800d848:	b580      	push	{r7, lr}
 800d84a:	b084      	sub	sp, #16
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	2b00      	cmp	r3, #0
 800d854:	d016      	beq.n	800d884 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800d856:	f00a fbc5 	bl	8017fe4 <sys_arch_protect>
 800d85a:	60f8      	str	r0, [r7, #12]
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	7b9b      	ldrb	r3, [r3, #14]
 800d860:	3301      	adds	r3, #1
 800d862:	b2da      	uxtb	r2, r3
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	739a      	strb	r2, [r3, #14]
 800d868:	68f8      	ldr	r0, [r7, #12]
 800d86a:	f00a fbc9 	bl	8018000 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	7b9b      	ldrb	r3, [r3, #14]
 800d872:	2b00      	cmp	r3, #0
 800d874:	d106      	bne.n	800d884 <pbuf_ref+0x3c>
 800d876:	4b05      	ldr	r3, [pc, #20]	; (800d88c <pbuf_ref+0x44>)
 800d878:	f240 3242 	movw	r2, #834	; 0x342
 800d87c:	4904      	ldr	r1, [pc, #16]	; (800d890 <pbuf_ref+0x48>)
 800d87e:	4805      	ldr	r0, [pc, #20]	; (800d894 <pbuf_ref+0x4c>)
 800d880:	f00b f90c 	bl	8018a9c <iprintf>
  }
}
 800d884:	bf00      	nop
 800d886:	3710      	adds	r7, #16
 800d888:	46bd      	mov	sp, r7
 800d88a:	bd80      	pop	{r7, pc}
 800d88c:	0801a250 	.word	0x0801a250
 800d890:	0801a430 	.word	0x0801a430
 800d894:	0801a2b0 	.word	0x0801a2b0

0800d898 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800d898:	b580      	push	{r7, lr}
 800d89a:	b084      	sub	sp, #16
 800d89c:	af00      	add	r7, sp, #0
 800d89e:	6078      	str	r0, [r7, #4]
 800d8a0:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d002      	beq.n	800d8ae <pbuf_cat+0x16>
 800d8a8:	683b      	ldr	r3, [r7, #0]
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d107      	bne.n	800d8be <pbuf_cat+0x26>
 800d8ae:	4b20      	ldr	r3, [pc, #128]	; (800d930 <pbuf_cat+0x98>)
 800d8b0:	f240 3259 	movw	r2, #857	; 0x359
 800d8b4:	491f      	ldr	r1, [pc, #124]	; (800d934 <pbuf_cat+0x9c>)
 800d8b6:	4820      	ldr	r0, [pc, #128]	; (800d938 <pbuf_cat+0xa0>)
 800d8b8:	f00b f8f0 	bl	8018a9c <iprintf>
 800d8bc:	e034      	b.n	800d928 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	60fb      	str	r3, [r7, #12]
 800d8c2:	e00a      	b.n	800d8da <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	891a      	ldrh	r2, [r3, #8]
 800d8c8:	683b      	ldr	r3, [r7, #0]
 800d8ca:	891b      	ldrh	r3, [r3, #8]
 800d8cc:	4413      	add	r3, r2
 800d8ce:	b29a      	uxth	r2, r3
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	60fb      	str	r3, [r7, #12]
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d1f0      	bne.n	800d8c4 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	891a      	ldrh	r2, [r3, #8]
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	895b      	ldrh	r3, [r3, #10]
 800d8ea:	429a      	cmp	r2, r3
 800d8ec:	d006      	beq.n	800d8fc <pbuf_cat+0x64>
 800d8ee:	4b10      	ldr	r3, [pc, #64]	; (800d930 <pbuf_cat+0x98>)
 800d8f0:	f240 3262 	movw	r2, #866	; 0x362
 800d8f4:	4911      	ldr	r1, [pc, #68]	; (800d93c <pbuf_cat+0xa4>)
 800d8f6:	4810      	ldr	r0, [pc, #64]	; (800d938 <pbuf_cat+0xa0>)
 800d8f8:	f00b f8d0 	bl	8018a9c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	2b00      	cmp	r3, #0
 800d902:	d006      	beq.n	800d912 <pbuf_cat+0x7a>
 800d904:	4b0a      	ldr	r3, [pc, #40]	; (800d930 <pbuf_cat+0x98>)
 800d906:	f240 3263 	movw	r2, #867	; 0x363
 800d90a:	490d      	ldr	r1, [pc, #52]	; (800d940 <pbuf_cat+0xa8>)
 800d90c:	480a      	ldr	r0, [pc, #40]	; (800d938 <pbuf_cat+0xa0>)
 800d90e:	f00b f8c5 	bl	8018a9c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	891a      	ldrh	r2, [r3, #8]
 800d916:	683b      	ldr	r3, [r7, #0]
 800d918:	891b      	ldrh	r3, [r3, #8]
 800d91a:	4413      	add	r3, r2
 800d91c:	b29a      	uxth	r2, r3
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	683a      	ldr	r2, [r7, #0]
 800d926:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800d928:	3710      	adds	r7, #16
 800d92a:	46bd      	mov	sp, r7
 800d92c:	bd80      	pop	{r7, pc}
 800d92e:	bf00      	nop
 800d930:	0801a250 	.word	0x0801a250
 800d934:	0801a444 	.word	0x0801a444
 800d938:	0801a2b0 	.word	0x0801a2b0
 800d93c:	0801a47c 	.word	0x0801a47c
 800d940:	0801a4ac 	.word	0x0801a4ac

0800d944 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800d944:	b580      	push	{r7, lr}
 800d946:	b082      	sub	sp, #8
 800d948:	af00      	add	r7, sp, #0
 800d94a:	6078      	str	r0, [r7, #4]
 800d94c:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800d94e:	6839      	ldr	r1, [r7, #0]
 800d950:	6878      	ldr	r0, [r7, #4]
 800d952:	f7ff ffa1 	bl	800d898 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800d956:	6838      	ldr	r0, [r7, #0]
 800d958:	f7ff ff76 	bl	800d848 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800d95c:	bf00      	nop
 800d95e:	3708      	adds	r7, #8
 800d960:	46bd      	mov	sp, r7
 800d962:	bd80      	pop	{r7, pc}

0800d964 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800d964:	b580      	push	{r7, lr}
 800d966:	b086      	sub	sp, #24
 800d968:	af00      	add	r7, sp, #0
 800d96a:	6078      	str	r0, [r7, #4]
 800d96c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800d96e:	2300      	movs	r3, #0
 800d970:	617b      	str	r3, [r7, #20]
 800d972:	2300      	movs	r3, #0
 800d974:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d008      	beq.n	800d98e <pbuf_copy+0x2a>
 800d97c:	683b      	ldr	r3, [r7, #0]
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d005      	beq.n	800d98e <pbuf_copy+0x2a>
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	891a      	ldrh	r2, [r3, #8]
 800d986:	683b      	ldr	r3, [r7, #0]
 800d988:	891b      	ldrh	r3, [r3, #8]
 800d98a:	429a      	cmp	r2, r3
 800d98c:	d209      	bcs.n	800d9a2 <pbuf_copy+0x3e>
 800d98e:	4b57      	ldr	r3, [pc, #348]	; (800daec <pbuf_copy+0x188>)
 800d990:	f240 32c9 	movw	r2, #969	; 0x3c9
 800d994:	4956      	ldr	r1, [pc, #344]	; (800daf0 <pbuf_copy+0x18c>)
 800d996:	4857      	ldr	r0, [pc, #348]	; (800daf4 <pbuf_copy+0x190>)
 800d998:	f00b f880 	bl	8018a9c <iprintf>
 800d99c:	f06f 030f 	mvn.w	r3, #15
 800d9a0:	e09f      	b.n	800dae2 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	895b      	ldrh	r3, [r3, #10]
 800d9a6:	461a      	mov	r2, r3
 800d9a8:	697b      	ldr	r3, [r7, #20]
 800d9aa:	1ad2      	subs	r2, r2, r3
 800d9ac:	683b      	ldr	r3, [r7, #0]
 800d9ae:	895b      	ldrh	r3, [r3, #10]
 800d9b0:	4619      	mov	r1, r3
 800d9b2:	693b      	ldr	r3, [r7, #16]
 800d9b4:	1acb      	subs	r3, r1, r3
 800d9b6:	429a      	cmp	r2, r3
 800d9b8:	d306      	bcc.n	800d9c8 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800d9ba:	683b      	ldr	r3, [r7, #0]
 800d9bc:	895b      	ldrh	r3, [r3, #10]
 800d9be:	461a      	mov	r2, r3
 800d9c0:	693b      	ldr	r3, [r7, #16]
 800d9c2:	1ad3      	subs	r3, r2, r3
 800d9c4:	60fb      	str	r3, [r7, #12]
 800d9c6:	e005      	b.n	800d9d4 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	895b      	ldrh	r3, [r3, #10]
 800d9cc:	461a      	mov	r2, r3
 800d9ce:	697b      	ldr	r3, [r7, #20]
 800d9d0:	1ad3      	subs	r3, r2, r3
 800d9d2:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	685a      	ldr	r2, [r3, #4]
 800d9d8:	697b      	ldr	r3, [r7, #20]
 800d9da:	18d0      	adds	r0, r2, r3
 800d9dc:	683b      	ldr	r3, [r7, #0]
 800d9de:	685a      	ldr	r2, [r3, #4]
 800d9e0:	693b      	ldr	r3, [r7, #16]
 800d9e2:	4413      	add	r3, r2
 800d9e4:	68fa      	ldr	r2, [r7, #12]
 800d9e6:	4619      	mov	r1, r3
 800d9e8:	f00b f842 	bl	8018a70 <memcpy>
    offset_to += len;
 800d9ec:	697a      	ldr	r2, [r7, #20]
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	4413      	add	r3, r2
 800d9f2:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800d9f4:	693a      	ldr	r2, [r7, #16]
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	4413      	add	r3, r2
 800d9fa:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	895b      	ldrh	r3, [r3, #10]
 800da00:	461a      	mov	r2, r3
 800da02:	697b      	ldr	r3, [r7, #20]
 800da04:	4293      	cmp	r3, r2
 800da06:	d906      	bls.n	800da16 <pbuf_copy+0xb2>
 800da08:	4b38      	ldr	r3, [pc, #224]	; (800daec <pbuf_copy+0x188>)
 800da0a:	f240 32d9 	movw	r2, #985	; 0x3d9
 800da0e:	493a      	ldr	r1, [pc, #232]	; (800daf8 <pbuf_copy+0x194>)
 800da10:	4838      	ldr	r0, [pc, #224]	; (800daf4 <pbuf_copy+0x190>)
 800da12:	f00b f843 	bl	8018a9c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800da16:	683b      	ldr	r3, [r7, #0]
 800da18:	895b      	ldrh	r3, [r3, #10]
 800da1a:	461a      	mov	r2, r3
 800da1c:	693b      	ldr	r3, [r7, #16]
 800da1e:	4293      	cmp	r3, r2
 800da20:	d906      	bls.n	800da30 <pbuf_copy+0xcc>
 800da22:	4b32      	ldr	r3, [pc, #200]	; (800daec <pbuf_copy+0x188>)
 800da24:	f240 32da 	movw	r2, #986	; 0x3da
 800da28:	4934      	ldr	r1, [pc, #208]	; (800dafc <pbuf_copy+0x198>)
 800da2a:	4832      	ldr	r0, [pc, #200]	; (800daf4 <pbuf_copy+0x190>)
 800da2c:	f00b f836 	bl	8018a9c <iprintf>
    if (offset_from >= p_from->len) {
 800da30:	683b      	ldr	r3, [r7, #0]
 800da32:	895b      	ldrh	r3, [r3, #10]
 800da34:	461a      	mov	r2, r3
 800da36:	693b      	ldr	r3, [r7, #16]
 800da38:	4293      	cmp	r3, r2
 800da3a:	d304      	bcc.n	800da46 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800da3c:	2300      	movs	r3, #0
 800da3e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800da40:	683b      	ldr	r3, [r7, #0]
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	895b      	ldrh	r3, [r3, #10]
 800da4a:	461a      	mov	r2, r3
 800da4c:	697b      	ldr	r3, [r7, #20]
 800da4e:	4293      	cmp	r3, r2
 800da50:	d114      	bne.n	800da7c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800da52:	2300      	movs	r3, #0
 800da54:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d10c      	bne.n	800da7c <pbuf_copy+0x118>
 800da62:	683b      	ldr	r3, [r7, #0]
 800da64:	2b00      	cmp	r3, #0
 800da66:	d009      	beq.n	800da7c <pbuf_copy+0x118>
 800da68:	4b20      	ldr	r3, [pc, #128]	; (800daec <pbuf_copy+0x188>)
 800da6a:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800da6e:	4924      	ldr	r1, [pc, #144]	; (800db00 <pbuf_copy+0x19c>)
 800da70:	4820      	ldr	r0, [pc, #128]	; (800daf4 <pbuf_copy+0x190>)
 800da72:	f00b f813 	bl	8018a9c <iprintf>
 800da76:	f06f 030f 	mvn.w	r3, #15
 800da7a:	e032      	b.n	800dae2 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800da7c:	683b      	ldr	r3, [r7, #0]
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d013      	beq.n	800daaa <pbuf_copy+0x146>
 800da82:	683b      	ldr	r3, [r7, #0]
 800da84:	895a      	ldrh	r2, [r3, #10]
 800da86:	683b      	ldr	r3, [r7, #0]
 800da88:	891b      	ldrh	r3, [r3, #8]
 800da8a:	429a      	cmp	r2, r3
 800da8c:	d10d      	bne.n	800daaa <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800da8e:	683b      	ldr	r3, [r7, #0]
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	2b00      	cmp	r3, #0
 800da94:	d009      	beq.n	800daaa <pbuf_copy+0x146>
 800da96:	4b15      	ldr	r3, [pc, #84]	; (800daec <pbuf_copy+0x188>)
 800da98:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800da9c:	4919      	ldr	r1, [pc, #100]	; (800db04 <pbuf_copy+0x1a0>)
 800da9e:	4815      	ldr	r0, [pc, #84]	; (800daf4 <pbuf_copy+0x190>)
 800daa0:	f00a fffc 	bl	8018a9c <iprintf>
 800daa4:	f06f 0305 	mvn.w	r3, #5
 800daa8:	e01b      	b.n	800dae2 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	2b00      	cmp	r3, #0
 800daae:	d013      	beq.n	800dad8 <pbuf_copy+0x174>
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	895a      	ldrh	r2, [r3, #10]
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	891b      	ldrh	r3, [r3, #8]
 800dab8:	429a      	cmp	r2, r3
 800daba:	d10d      	bne.n	800dad8 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d009      	beq.n	800dad8 <pbuf_copy+0x174>
 800dac4:	4b09      	ldr	r3, [pc, #36]	; (800daec <pbuf_copy+0x188>)
 800dac6:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800daca:	490e      	ldr	r1, [pc, #56]	; (800db04 <pbuf_copy+0x1a0>)
 800dacc:	4809      	ldr	r0, [pc, #36]	; (800daf4 <pbuf_copy+0x190>)
 800dace:	f00a ffe5 	bl	8018a9c <iprintf>
 800dad2:	f06f 0305 	mvn.w	r3, #5
 800dad6:	e004      	b.n	800dae2 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800dad8:	683b      	ldr	r3, [r7, #0]
 800dada:	2b00      	cmp	r3, #0
 800dadc:	f47f af61 	bne.w	800d9a2 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800dae0:	2300      	movs	r3, #0
}
 800dae2:	4618      	mov	r0, r3
 800dae4:	3718      	adds	r7, #24
 800dae6:	46bd      	mov	sp, r7
 800dae8:	bd80      	pop	{r7, pc}
 800daea:	bf00      	nop
 800daec:	0801a250 	.word	0x0801a250
 800daf0:	0801a4f8 	.word	0x0801a4f8
 800daf4:	0801a2b0 	.word	0x0801a2b0
 800daf8:	0801a528 	.word	0x0801a528
 800dafc:	0801a540 	.word	0x0801a540
 800db00:	0801a55c 	.word	0x0801a55c
 800db04:	0801a56c 	.word	0x0801a56c

0800db08 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800db08:	b580      	push	{r7, lr}
 800db0a:	b088      	sub	sp, #32
 800db0c:	af00      	add	r7, sp, #0
 800db0e:	60f8      	str	r0, [r7, #12]
 800db10:	60b9      	str	r1, [r7, #8]
 800db12:	4611      	mov	r1, r2
 800db14:	461a      	mov	r2, r3
 800db16:	460b      	mov	r3, r1
 800db18:	80fb      	strh	r3, [r7, #6]
 800db1a:	4613      	mov	r3, r2
 800db1c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800db1e:	2300      	movs	r3, #0
 800db20:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800db22:	2300      	movs	r3, #0
 800db24:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d108      	bne.n	800db3e <pbuf_copy_partial+0x36>
 800db2c:	4b2b      	ldr	r3, [pc, #172]	; (800dbdc <pbuf_copy_partial+0xd4>)
 800db2e:	f240 420a 	movw	r2, #1034	; 0x40a
 800db32:	492b      	ldr	r1, [pc, #172]	; (800dbe0 <pbuf_copy_partial+0xd8>)
 800db34:	482b      	ldr	r0, [pc, #172]	; (800dbe4 <pbuf_copy_partial+0xdc>)
 800db36:	f00a ffb1 	bl	8018a9c <iprintf>
 800db3a:	2300      	movs	r3, #0
 800db3c:	e04a      	b.n	800dbd4 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800db3e:	68bb      	ldr	r3, [r7, #8]
 800db40:	2b00      	cmp	r3, #0
 800db42:	d108      	bne.n	800db56 <pbuf_copy_partial+0x4e>
 800db44:	4b25      	ldr	r3, [pc, #148]	; (800dbdc <pbuf_copy_partial+0xd4>)
 800db46:	f240 420b 	movw	r2, #1035	; 0x40b
 800db4a:	4927      	ldr	r1, [pc, #156]	; (800dbe8 <pbuf_copy_partial+0xe0>)
 800db4c:	4825      	ldr	r0, [pc, #148]	; (800dbe4 <pbuf_copy_partial+0xdc>)
 800db4e:	f00a ffa5 	bl	8018a9c <iprintf>
 800db52:	2300      	movs	r3, #0
 800db54:	e03e      	b.n	800dbd4 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	61fb      	str	r3, [r7, #28]
 800db5a:	e034      	b.n	800dbc6 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800db5c:	88bb      	ldrh	r3, [r7, #4]
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d00a      	beq.n	800db78 <pbuf_copy_partial+0x70>
 800db62:	69fb      	ldr	r3, [r7, #28]
 800db64:	895b      	ldrh	r3, [r3, #10]
 800db66:	88ba      	ldrh	r2, [r7, #4]
 800db68:	429a      	cmp	r2, r3
 800db6a:	d305      	bcc.n	800db78 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800db6c:	69fb      	ldr	r3, [r7, #28]
 800db6e:	895b      	ldrh	r3, [r3, #10]
 800db70:	88ba      	ldrh	r2, [r7, #4]
 800db72:	1ad3      	subs	r3, r2, r3
 800db74:	80bb      	strh	r3, [r7, #4]
 800db76:	e023      	b.n	800dbc0 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800db78:	69fb      	ldr	r3, [r7, #28]
 800db7a:	895a      	ldrh	r2, [r3, #10]
 800db7c:	88bb      	ldrh	r3, [r7, #4]
 800db7e:	1ad3      	subs	r3, r2, r3
 800db80:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800db82:	8b3a      	ldrh	r2, [r7, #24]
 800db84:	88fb      	ldrh	r3, [r7, #6]
 800db86:	429a      	cmp	r2, r3
 800db88:	d901      	bls.n	800db8e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800db8a:	88fb      	ldrh	r3, [r7, #6]
 800db8c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800db8e:	8b7b      	ldrh	r3, [r7, #26]
 800db90:	68ba      	ldr	r2, [r7, #8]
 800db92:	18d0      	adds	r0, r2, r3
 800db94:	69fb      	ldr	r3, [r7, #28]
 800db96:	685a      	ldr	r2, [r3, #4]
 800db98:	88bb      	ldrh	r3, [r7, #4]
 800db9a:	4413      	add	r3, r2
 800db9c:	8b3a      	ldrh	r2, [r7, #24]
 800db9e:	4619      	mov	r1, r3
 800dba0:	f00a ff66 	bl	8018a70 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800dba4:	8afa      	ldrh	r2, [r7, #22]
 800dba6:	8b3b      	ldrh	r3, [r7, #24]
 800dba8:	4413      	add	r3, r2
 800dbaa:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800dbac:	8b7a      	ldrh	r2, [r7, #26]
 800dbae:	8b3b      	ldrh	r3, [r7, #24]
 800dbb0:	4413      	add	r3, r2
 800dbb2:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800dbb4:	88fa      	ldrh	r2, [r7, #6]
 800dbb6:	8b3b      	ldrh	r3, [r7, #24]
 800dbb8:	1ad3      	subs	r3, r2, r3
 800dbba:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800dbbc:	2300      	movs	r3, #0
 800dbbe:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800dbc0:	69fb      	ldr	r3, [r7, #28]
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	61fb      	str	r3, [r7, #28]
 800dbc6:	88fb      	ldrh	r3, [r7, #6]
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d002      	beq.n	800dbd2 <pbuf_copy_partial+0xca>
 800dbcc:	69fb      	ldr	r3, [r7, #28]
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d1c4      	bne.n	800db5c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800dbd2:	8afb      	ldrh	r3, [r7, #22]
}
 800dbd4:	4618      	mov	r0, r3
 800dbd6:	3720      	adds	r7, #32
 800dbd8:	46bd      	mov	sp, r7
 800dbda:	bd80      	pop	{r7, pc}
 800dbdc:	0801a250 	.word	0x0801a250
 800dbe0:	0801a598 	.word	0x0801a598
 800dbe4:	0801a2b0 	.word	0x0801a2b0
 800dbe8:	0801a5b8 	.word	0x0801a5b8

0800dbec <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800dbec:	b580      	push	{r7, lr}
 800dbee:	b084      	sub	sp, #16
 800dbf0:	af00      	add	r7, sp, #0
 800dbf2:	4603      	mov	r3, r0
 800dbf4:	603a      	str	r2, [r7, #0]
 800dbf6:	71fb      	strb	r3, [r7, #7]
 800dbf8:	460b      	mov	r3, r1
 800dbfa:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800dbfc:	683b      	ldr	r3, [r7, #0]
 800dbfe:	8919      	ldrh	r1, [r3, #8]
 800dc00:	88ba      	ldrh	r2, [r7, #4]
 800dc02:	79fb      	ldrb	r3, [r7, #7]
 800dc04:	4618      	mov	r0, r3
 800dc06:	f7ff fa95 	bl	800d134 <pbuf_alloc>
 800dc0a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d101      	bne.n	800dc16 <pbuf_clone+0x2a>
    return NULL;
 800dc12:	2300      	movs	r3, #0
 800dc14:	e011      	b.n	800dc3a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800dc16:	6839      	ldr	r1, [r7, #0]
 800dc18:	68f8      	ldr	r0, [r7, #12]
 800dc1a:	f7ff fea3 	bl	800d964 <pbuf_copy>
 800dc1e:	4603      	mov	r3, r0
 800dc20:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800dc22:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d006      	beq.n	800dc38 <pbuf_clone+0x4c>
 800dc2a:	4b06      	ldr	r3, [pc, #24]	; (800dc44 <pbuf_clone+0x58>)
 800dc2c:	f240 5224 	movw	r2, #1316	; 0x524
 800dc30:	4905      	ldr	r1, [pc, #20]	; (800dc48 <pbuf_clone+0x5c>)
 800dc32:	4806      	ldr	r0, [pc, #24]	; (800dc4c <pbuf_clone+0x60>)
 800dc34:	f00a ff32 	bl	8018a9c <iprintf>
  return q;
 800dc38:	68fb      	ldr	r3, [r7, #12]
}
 800dc3a:	4618      	mov	r0, r3
 800dc3c:	3710      	adds	r7, #16
 800dc3e:	46bd      	mov	sp, r7
 800dc40:	bd80      	pop	{r7, pc}
 800dc42:	bf00      	nop
 800dc44:	0801a250 	.word	0x0801a250
 800dc48:	0801a6c4 	.word	0x0801a6c4
 800dc4c:	0801a2b0 	.word	0x0801a2b0

0800dc50 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800dc50:	b580      	push	{r7, lr}
 800dc52:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800dc54:	f00a ff3a 	bl	8018acc <rand>
 800dc58:	4603      	mov	r3, r0
 800dc5a:	b29b      	uxth	r3, r3
 800dc5c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800dc60:	b29b      	uxth	r3, r3
 800dc62:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800dc66:	b29a      	uxth	r2, r3
 800dc68:	4b01      	ldr	r3, [pc, #4]	; (800dc70 <tcp_init+0x20>)
 800dc6a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800dc6c:	bf00      	nop
 800dc6e:	bd80      	pop	{r7, pc}
 800dc70:	2000009c 	.word	0x2000009c

0800dc74 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800dc74:	b580      	push	{r7, lr}
 800dc76:	b082      	sub	sp, #8
 800dc78:	af00      	add	r7, sp, #0
 800dc7a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	7d1b      	ldrb	r3, [r3, #20]
 800dc80:	2b01      	cmp	r3, #1
 800dc82:	d105      	bne.n	800dc90 <tcp_free+0x1c>
 800dc84:	4b06      	ldr	r3, [pc, #24]	; (800dca0 <tcp_free+0x2c>)
 800dc86:	22d4      	movs	r2, #212	; 0xd4
 800dc88:	4906      	ldr	r1, [pc, #24]	; (800dca4 <tcp_free+0x30>)
 800dc8a:	4807      	ldr	r0, [pc, #28]	; (800dca8 <tcp_free+0x34>)
 800dc8c:	f00a ff06 	bl	8018a9c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800dc90:	6879      	ldr	r1, [r7, #4]
 800dc92:	2001      	movs	r0, #1
 800dc94:	f7fe feea 	bl	800ca6c <memp_free>
}
 800dc98:	bf00      	nop
 800dc9a:	3708      	adds	r7, #8
 800dc9c:	46bd      	mov	sp, r7
 800dc9e:	bd80      	pop	{r7, pc}
 800dca0:	0801a750 	.word	0x0801a750
 800dca4:	0801a780 	.word	0x0801a780
 800dca8:	0801a794 	.word	0x0801a794

0800dcac <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800dcac:	b580      	push	{r7, lr}
 800dcae:	b082      	sub	sp, #8
 800dcb0:	af00      	add	r7, sp, #0
 800dcb2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	7d1b      	ldrb	r3, [r3, #20]
 800dcb8:	2b01      	cmp	r3, #1
 800dcba:	d105      	bne.n	800dcc8 <tcp_free_listen+0x1c>
 800dcbc:	4b06      	ldr	r3, [pc, #24]	; (800dcd8 <tcp_free_listen+0x2c>)
 800dcbe:	22df      	movs	r2, #223	; 0xdf
 800dcc0:	4906      	ldr	r1, [pc, #24]	; (800dcdc <tcp_free_listen+0x30>)
 800dcc2:	4807      	ldr	r0, [pc, #28]	; (800dce0 <tcp_free_listen+0x34>)
 800dcc4:	f00a feea 	bl	8018a9c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800dcc8:	6879      	ldr	r1, [r7, #4]
 800dcca:	2002      	movs	r0, #2
 800dccc:	f7fe fece 	bl	800ca6c <memp_free>
}
 800dcd0:	bf00      	nop
 800dcd2:	3708      	adds	r7, #8
 800dcd4:	46bd      	mov	sp, r7
 800dcd6:	bd80      	pop	{r7, pc}
 800dcd8:	0801a750 	.word	0x0801a750
 800dcdc:	0801a7bc 	.word	0x0801a7bc
 800dce0:	0801a794 	.word	0x0801a794

0800dce4 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800dce4:	b580      	push	{r7, lr}
 800dce6:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800dce8:	f000 fea2 	bl	800ea30 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800dcec:	4b07      	ldr	r3, [pc, #28]	; (800dd0c <tcp_tmr+0x28>)
 800dcee:	781b      	ldrb	r3, [r3, #0]
 800dcf0:	3301      	adds	r3, #1
 800dcf2:	b2da      	uxtb	r2, r3
 800dcf4:	4b05      	ldr	r3, [pc, #20]	; (800dd0c <tcp_tmr+0x28>)
 800dcf6:	701a      	strb	r2, [r3, #0]
 800dcf8:	4b04      	ldr	r3, [pc, #16]	; (800dd0c <tcp_tmr+0x28>)
 800dcfa:	781b      	ldrb	r3, [r3, #0]
 800dcfc:	f003 0301 	and.w	r3, r3, #1
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d001      	beq.n	800dd08 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800dd04:	f000 fb54 	bl	800e3b0 <tcp_slowtmr>
  }
}
 800dd08:	bf00      	nop
 800dd0a:	bd80      	pop	{r7, pc}
 800dd0c:	2000c8a1 	.word	0x2000c8a1

0800dd10 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800dd10:	b580      	push	{r7, lr}
 800dd12:	b084      	sub	sp, #16
 800dd14:	af00      	add	r7, sp, #0
 800dd16:	6078      	str	r0, [r7, #4]
 800dd18:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800dd1a:	683b      	ldr	r3, [r7, #0]
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d105      	bne.n	800dd2c <tcp_remove_listener+0x1c>
 800dd20:	4b0d      	ldr	r3, [pc, #52]	; (800dd58 <tcp_remove_listener+0x48>)
 800dd22:	22ff      	movs	r2, #255	; 0xff
 800dd24:	490d      	ldr	r1, [pc, #52]	; (800dd5c <tcp_remove_listener+0x4c>)
 800dd26:	480e      	ldr	r0, [pc, #56]	; (800dd60 <tcp_remove_listener+0x50>)
 800dd28:	f00a feb8 	bl	8018a9c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	60fb      	str	r3, [r7, #12]
 800dd30:	e00a      	b.n	800dd48 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dd36:	683a      	ldr	r2, [r7, #0]
 800dd38:	429a      	cmp	r2, r3
 800dd3a:	d102      	bne.n	800dd42 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	2200      	movs	r2, #0
 800dd40:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	68db      	ldr	r3, [r3, #12]
 800dd46:	60fb      	str	r3, [r7, #12]
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d1f1      	bne.n	800dd32 <tcp_remove_listener+0x22>
    }
  }
}
 800dd4e:	bf00      	nop
 800dd50:	bf00      	nop
 800dd52:	3710      	adds	r7, #16
 800dd54:	46bd      	mov	sp, r7
 800dd56:	bd80      	pop	{r7, pc}
 800dd58:	0801a750 	.word	0x0801a750
 800dd5c:	0801a7d8 	.word	0x0801a7d8
 800dd60:	0801a794 	.word	0x0801a794

0800dd64 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800dd64:	b580      	push	{r7, lr}
 800dd66:	b084      	sub	sp, #16
 800dd68:	af00      	add	r7, sp, #0
 800dd6a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d106      	bne.n	800dd80 <tcp_listen_closed+0x1c>
 800dd72:	4b14      	ldr	r3, [pc, #80]	; (800ddc4 <tcp_listen_closed+0x60>)
 800dd74:	f240 1211 	movw	r2, #273	; 0x111
 800dd78:	4913      	ldr	r1, [pc, #76]	; (800ddc8 <tcp_listen_closed+0x64>)
 800dd7a:	4814      	ldr	r0, [pc, #80]	; (800ddcc <tcp_listen_closed+0x68>)
 800dd7c:	f00a fe8e 	bl	8018a9c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	7d1b      	ldrb	r3, [r3, #20]
 800dd84:	2b01      	cmp	r3, #1
 800dd86:	d006      	beq.n	800dd96 <tcp_listen_closed+0x32>
 800dd88:	4b0e      	ldr	r3, [pc, #56]	; (800ddc4 <tcp_listen_closed+0x60>)
 800dd8a:	f44f 7289 	mov.w	r2, #274	; 0x112
 800dd8e:	4910      	ldr	r1, [pc, #64]	; (800ddd0 <tcp_listen_closed+0x6c>)
 800dd90:	480e      	ldr	r0, [pc, #56]	; (800ddcc <tcp_listen_closed+0x68>)
 800dd92:	f00a fe83 	bl	8018a9c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800dd96:	2301      	movs	r3, #1
 800dd98:	60fb      	str	r3, [r7, #12]
 800dd9a:	e00b      	b.n	800ddb4 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800dd9c:	4a0d      	ldr	r2, [pc, #52]	; (800ddd4 <tcp_listen_closed+0x70>)
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	6879      	ldr	r1, [r7, #4]
 800dda8:	4618      	mov	r0, r3
 800ddaa:	f7ff ffb1 	bl	800dd10 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	3301      	adds	r3, #1
 800ddb2:	60fb      	str	r3, [r7, #12]
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	2b03      	cmp	r3, #3
 800ddb8:	d9f0      	bls.n	800dd9c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800ddba:	bf00      	nop
 800ddbc:	bf00      	nop
 800ddbe:	3710      	adds	r7, #16
 800ddc0:	46bd      	mov	sp, r7
 800ddc2:	bd80      	pop	{r7, pc}
 800ddc4:	0801a750 	.word	0x0801a750
 800ddc8:	0801a800 	.word	0x0801a800
 800ddcc:	0801a794 	.word	0x0801a794
 800ddd0:	0801a80c 	.word	0x0801a80c
 800ddd4:	0801cb7c 	.word	0x0801cb7c

0800ddd8 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800ddd8:	b5b0      	push	{r4, r5, r7, lr}
 800ddda:	b088      	sub	sp, #32
 800dddc:	af04      	add	r7, sp, #16
 800ddde:	6078      	str	r0, [r7, #4]
 800dde0:	460b      	mov	r3, r1
 800dde2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d106      	bne.n	800ddf8 <tcp_close_shutdown+0x20>
 800ddea:	4b63      	ldr	r3, [pc, #396]	; (800df78 <tcp_close_shutdown+0x1a0>)
 800ddec:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800ddf0:	4962      	ldr	r1, [pc, #392]	; (800df7c <tcp_close_shutdown+0x1a4>)
 800ddf2:	4863      	ldr	r0, [pc, #396]	; (800df80 <tcp_close_shutdown+0x1a8>)
 800ddf4:	f00a fe52 	bl	8018a9c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800ddf8:	78fb      	ldrb	r3, [r7, #3]
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d066      	beq.n	800decc <tcp_close_shutdown+0xf4>
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	7d1b      	ldrb	r3, [r3, #20]
 800de02:	2b04      	cmp	r3, #4
 800de04:	d003      	beq.n	800de0e <tcp_close_shutdown+0x36>
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	7d1b      	ldrb	r3, [r3, #20]
 800de0a:	2b07      	cmp	r3, #7
 800de0c:	d15e      	bne.n	800decc <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800de12:	2b00      	cmp	r3, #0
 800de14:	d104      	bne.n	800de20 <tcp_close_shutdown+0x48>
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800de1a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800de1e:	d055      	beq.n	800decc <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	8b5b      	ldrh	r3, [r3, #26]
 800de24:	f003 0310 	and.w	r3, r3, #16
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d106      	bne.n	800de3a <tcp_close_shutdown+0x62>
 800de2c:	4b52      	ldr	r3, [pc, #328]	; (800df78 <tcp_close_shutdown+0x1a0>)
 800de2e:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800de32:	4954      	ldr	r1, [pc, #336]	; (800df84 <tcp_close_shutdown+0x1ac>)
 800de34:	4852      	ldr	r0, [pc, #328]	; (800df80 <tcp_close_shutdown+0x1a8>)
 800de36:	f00a fe31 	bl	8018a9c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800de42:	687d      	ldr	r5, [r7, #4]
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	3304      	adds	r3, #4
 800de48:	687a      	ldr	r2, [r7, #4]
 800de4a:	8ad2      	ldrh	r2, [r2, #22]
 800de4c:	6879      	ldr	r1, [r7, #4]
 800de4e:	8b09      	ldrh	r1, [r1, #24]
 800de50:	9102      	str	r1, [sp, #8]
 800de52:	9201      	str	r2, [sp, #4]
 800de54:	9300      	str	r3, [sp, #0]
 800de56:	462b      	mov	r3, r5
 800de58:	4622      	mov	r2, r4
 800de5a:	4601      	mov	r1, r0
 800de5c:	6878      	ldr	r0, [r7, #4]
 800de5e:	f004 fe91 	bl	8012b84 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800de62:	6878      	ldr	r0, [r7, #4]
 800de64:	f001 f8c6 	bl	800eff4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800de68:	4b47      	ldr	r3, [pc, #284]	; (800df88 <tcp_close_shutdown+0x1b0>)
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	687a      	ldr	r2, [r7, #4]
 800de6e:	429a      	cmp	r2, r3
 800de70:	d105      	bne.n	800de7e <tcp_close_shutdown+0xa6>
 800de72:	4b45      	ldr	r3, [pc, #276]	; (800df88 <tcp_close_shutdown+0x1b0>)
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	68db      	ldr	r3, [r3, #12]
 800de78:	4a43      	ldr	r2, [pc, #268]	; (800df88 <tcp_close_shutdown+0x1b0>)
 800de7a:	6013      	str	r3, [r2, #0]
 800de7c:	e013      	b.n	800dea6 <tcp_close_shutdown+0xce>
 800de7e:	4b42      	ldr	r3, [pc, #264]	; (800df88 <tcp_close_shutdown+0x1b0>)
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	60fb      	str	r3, [r7, #12]
 800de84:	e00c      	b.n	800dea0 <tcp_close_shutdown+0xc8>
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	68db      	ldr	r3, [r3, #12]
 800de8a:	687a      	ldr	r2, [r7, #4]
 800de8c:	429a      	cmp	r2, r3
 800de8e:	d104      	bne.n	800de9a <tcp_close_shutdown+0xc2>
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	68da      	ldr	r2, [r3, #12]
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	60da      	str	r2, [r3, #12]
 800de98:	e005      	b.n	800dea6 <tcp_close_shutdown+0xce>
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	68db      	ldr	r3, [r3, #12]
 800de9e:	60fb      	str	r3, [r7, #12]
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d1ef      	bne.n	800de86 <tcp_close_shutdown+0xae>
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	2200      	movs	r2, #0
 800deaa:	60da      	str	r2, [r3, #12]
 800deac:	4b37      	ldr	r3, [pc, #220]	; (800df8c <tcp_close_shutdown+0x1b4>)
 800deae:	2201      	movs	r2, #1
 800deb0:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800deb2:	4b37      	ldr	r3, [pc, #220]	; (800df90 <tcp_close_shutdown+0x1b8>)
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	687a      	ldr	r2, [r7, #4]
 800deb8:	429a      	cmp	r2, r3
 800deba:	d102      	bne.n	800dec2 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800debc:	f003 fd5e 	bl	801197c <tcp_trigger_input_pcb_close>
 800dec0:	e002      	b.n	800dec8 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800dec2:	6878      	ldr	r0, [r7, #4]
 800dec4:	f7ff fed6 	bl	800dc74 <tcp_free>
      }
      return ERR_OK;
 800dec8:	2300      	movs	r3, #0
 800deca:	e050      	b.n	800df6e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	7d1b      	ldrb	r3, [r3, #20]
 800ded0:	2b02      	cmp	r3, #2
 800ded2:	d03b      	beq.n	800df4c <tcp_close_shutdown+0x174>
 800ded4:	2b02      	cmp	r3, #2
 800ded6:	dc44      	bgt.n	800df62 <tcp_close_shutdown+0x18a>
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d002      	beq.n	800dee2 <tcp_close_shutdown+0x10a>
 800dedc:	2b01      	cmp	r3, #1
 800dede:	d02a      	beq.n	800df36 <tcp_close_shutdown+0x15e>
 800dee0:	e03f      	b.n	800df62 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	8adb      	ldrh	r3, [r3, #22]
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d021      	beq.n	800df2e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800deea:	4b2a      	ldr	r3, [pc, #168]	; (800df94 <tcp_close_shutdown+0x1bc>)
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	687a      	ldr	r2, [r7, #4]
 800def0:	429a      	cmp	r2, r3
 800def2:	d105      	bne.n	800df00 <tcp_close_shutdown+0x128>
 800def4:	4b27      	ldr	r3, [pc, #156]	; (800df94 <tcp_close_shutdown+0x1bc>)
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	68db      	ldr	r3, [r3, #12]
 800defa:	4a26      	ldr	r2, [pc, #152]	; (800df94 <tcp_close_shutdown+0x1bc>)
 800defc:	6013      	str	r3, [r2, #0]
 800defe:	e013      	b.n	800df28 <tcp_close_shutdown+0x150>
 800df00:	4b24      	ldr	r3, [pc, #144]	; (800df94 <tcp_close_shutdown+0x1bc>)
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	60bb      	str	r3, [r7, #8]
 800df06:	e00c      	b.n	800df22 <tcp_close_shutdown+0x14a>
 800df08:	68bb      	ldr	r3, [r7, #8]
 800df0a:	68db      	ldr	r3, [r3, #12]
 800df0c:	687a      	ldr	r2, [r7, #4]
 800df0e:	429a      	cmp	r2, r3
 800df10:	d104      	bne.n	800df1c <tcp_close_shutdown+0x144>
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	68da      	ldr	r2, [r3, #12]
 800df16:	68bb      	ldr	r3, [r7, #8]
 800df18:	60da      	str	r2, [r3, #12]
 800df1a:	e005      	b.n	800df28 <tcp_close_shutdown+0x150>
 800df1c:	68bb      	ldr	r3, [r7, #8]
 800df1e:	68db      	ldr	r3, [r3, #12]
 800df20:	60bb      	str	r3, [r7, #8]
 800df22:	68bb      	ldr	r3, [r7, #8]
 800df24:	2b00      	cmp	r3, #0
 800df26:	d1ef      	bne.n	800df08 <tcp_close_shutdown+0x130>
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	2200      	movs	r2, #0
 800df2c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800df2e:	6878      	ldr	r0, [r7, #4]
 800df30:	f7ff fea0 	bl	800dc74 <tcp_free>
      break;
 800df34:	e01a      	b.n	800df6c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800df36:	6878      	ldr	r0, [r7, #4]
 800df38:	f7ff ff14 	bl	800dd64 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800df3c:	6879      	ldr	r1, [r7, #4]
 800df3e:	4816      	ldr	r0, [pc, #88]	; (800df98 <tcp_close_shutdown+0x1c0>)
 800df40:	f001 f8a8 	bl	800f094 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800df44:	6878      	ldr	r0, [r7, #4]
 800df46:	f7ff feb1 	bl	800dcac <tcp_free_listen>
      break;
 800df4a:	e00f      	b.n	800df6c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800df4c:	6879      	ldr	r1, [r7, #4]
 800df4e:	480e      	ldr	r0, [pc, #56]	; (800df88 <tcp_close_shutdown+0x1b0>)
 800df50:	f001 f8a0 	bl	800f094 <tcp_pcb_remove>
 800df54:	4b0d      	ldr	r3, [pc, #52]	; (800df8c <tcp_close_shutdown+0x1b4>)
 800df56:	2201      	movs	r2, #1
 800df58:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800df5a:	6878      	ldr	r0, [r7, #4]
 800df5c:	f7ff fe8a 	bl	800dc74 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800df60:	e004      	b.n	800df6c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800df62:	6878      	ldr	r0, [r7, #4]
 800df64:	f000 f81a 	bl	800df9c <tcp_close_shutdown_fin>
 800df68:	4603      	mov	r3, r0
 800df6a:	e000      	b.n	800df6e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800df6c:	2300      	movs	r3, #0
}
 800df6e:	4618      	mov	r0, r3
 800df70:	3710      	adds	r7, #16
 800df72:	46bd      	mov	sp, r7
 800df74:	bdb0      	pop	{r4, r5, r7, pc}
 800df76:	bf00      	nop
 800df78:	0801a750 	.word	0x0801a750
 800df7c:	0801a824 	.word	0x0801a824
 800df80:	0801a794 	.word	0x0801a794
 800df84:	0801a844 	.word	0x0801a844
 800df88:	2000c898 	.word	0x2000c898
 800df8c:	2000c8a0 	.word	0x2000c8a0
 800df90:	2000c8d8 	.word	0x2000c8d8
 800df94:	2000c890 	.word	0x2000c890
 800df98:	2000c894 	.word	0x2000c894

0800df9c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800df9c:	b580      	push	{r7, lr}
 800df9e:	b084      	sub	sp, #16
 800dfa0:	af00      	add	r7, sp, #0
 800dfa2:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d106      	bne.n	800dfb8 <tcp_close_shutdown_fin+0x1c>
 800dfaa:	4b2e      	ldr	r3, [pc, #184]	; (800e064 <tcp_close_shutdown_fin+0xc8>)
 800dfac:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800dfb0:	492d      	ldr	r1, [pc, #180]	; (800e068 <tcp_close_shutdown_fin+0xcc>)
 800dfb2:	482e      	ldr	r0, [pc, #184]	; (800e06c <tcp_close_shutdown_fin+0xd0>)
 800dfb4:	f00a fd72 	bl	8018a9c <iprintf>

  switch (pcb->state) {
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	7d1b      	ldrb	r3, [r3, #20]
 800dfbc:	2b07      	cmp	r3, #7
 800dfbe:	d020      	beq.n	800e002 <tcp_close_shutdown_fin+0x66>
 800dfc0:	2b07      	cmp	r3, #7
 800dfc2:	dc2b      	bgt.n	800e01c <tcp_close_shutdown_fin+0x80>
 800dfc4:	2b03      	cmp	r3, #3
 800dfc6:	d002      	beq.n	800dfce <tcp_close_shutdown_fin+0x32>
 800dfc8:	2b04      	cmp	r3, #4
 800dfca:	d00d      	beq.n	800dfe8 <tcp_close_shutdown_fin+0x4c>
 800dfcc:	e026      	b.n	800e01c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800dfce:	6878      	ldr	r0, [r7, #4]
 800dfd0:	f003 fee6 	bl	8011da0 <tcp_send_fin>
 800dfd4:	4603      	mov	r3, r0
 800dfd6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800dfd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d11f      	bne.n	800e020 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	2205      	movs	r2, #5
 800dfe4:	751a      	strb	r2, [r3, #20]
      }
      break;
 800dfe6:	e01b      	b.n	800e020 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800dfe8:	6878      	ldr	r0, [r7, #4]
 800dfea:	f003 fed9 	bl	8011da0 <tcp_send_fin>
 800dfee:	4603      	mov	r3, r0
 800dff0:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800dff2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d114      	bne.n	800e024 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	2205      	movs	r2, #5
 800dffe:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e000:	e010      	b.n	800e024 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800e002:	6878      	ldr	r0, [r7, #4]
 800e004:	f003 fecc 	bl	8011da0 <tcp_send_fin>
 800e008:	4603      	mov	r3, r0
 800e00a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e00c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e010:	2b00      	cmp	r3, #0
 800e012:	d109      	bne.n	800e028 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	2209      	movs	r2, #9
 800e018:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e01a:	e005      	b.n	800e028 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800e01c:	2300      	movs	r3, #0
 800e01e:	e01c      	b.n	800e05a <tcp_close_shutdown_fin+0xbe>
      break;
 800e020:	bf00      	nop
 800e022:	e002      	b.n	800e02a <tcp_close_shutdown_fin+0x8e>
      break;
 800e024:	bf00      	nop
 800e026:	e000      	b.n	800e02a <tcp_close_shutdown_fin+0x8e>
      break;
 800e028:	bf00      	nop
  }

  if (err == ERR_OK) {
 800e02a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d103      	bne.n	800e03a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800e032:	6878      	ldr	r0, [r7, #4]
 800e034:	f003 fff2 	bl	801201c <tcp_output>
 800e038:	e00d      	b.n	800e056 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800e03a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e03e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e042:	d108      	bne.n	800e056 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	8b5b      	ldrh	r3, [r3, #26]
 800e048:	f043 0308 	orr.w	r3, r3, #8
 800e04c:	b29a      	uxth	r2, r3
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800e052:	2300      	movs	r3, #0
 800e054:	e001      	b.n	800e05a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800e056:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e05a:	4618      	mov	r0, r3
 800e05c:	3710      	adds	r7, #16
 800e05e:	46bd      	mov	sp, r7
 800e060:	bd80      	pop	{r7, pc}
 800e062:	bf00      	nop
 800e064:	0801a750 	.word	0x0801a750
 800e068:	0801a800 	.word	0x0801a800
 800e06c:	0801a794 	.word	0x0801a794

0800e070 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800e070:	b580      	push	{r7, lr}
 800e072:	b082      	sub	sp, #8
 800e074:	af00      	add	r7, sp, #0
 800e076:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d109      	bne.n	800e092 <tcp_close+0x22>
 800e07e:	4b0f      	ldr	r3, [pc, #60]	; (800e0bc <tcp_close+0x4c>)
 800e080:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800e084:	490e      	ldr	r1, [pc, #56]	; (800e0c0 <tcp_close+0x50>)
 800e086:	480f      	ldr	r0, [pc, #60]	; (800e0c4 <tcp_close+0x54>)
 800e088:	f00a fd08 	bl	8018a9c <iprintf>
 800e08c:	f06f 030f 	mvn.w	r3, #15
 800e090:	e00f      	b.n	800e0b2 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	7d1b      	ldrb	r3, [r3, #20]
 800e096:	2b01      	cmp	r3, #1
 800e098:	d006      	beq.n	800e0a8 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	8b5b      	ldrh	r3, [r3, #26]
 800e09e:	f043 0310 	orr.w	r3, r3, #16
 800e0a2:	b29a      	uxth	r2, r3
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800e0a8:	2101      	movs	r1, #1
 800e0aa:	6878      	ldr	r0, [r7, #4]
 800e0ac:	f7ff fe94 	bl	800ddd8 <tcp_close_shutdown>
 800e0b0:	4603      	mov	r3, r0
}
 800e0b2:	4618      	mov	r0, r3
 800e0b4:	3708      	adds	r7, #8
 800e0b6:	46bd      	mov	sp, r7
 800e0b8:	bd80      	pop	{r7, pc}
 800e0ba:	bf00      	nop
 800e0bc:	0801a750 	.word	0x0801a750
 800e0c0:	0801a860 	.word	0x0801a860
 800e0c4:	0801a794 	.word	0x0801a794

0800e0c8 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800e0c8:	b580      	push	{r7, lr}
 800e0ca:	b08e      	sub	sp, #56	; 0x38
 800e0cc:	af04      	add	r7, sp, #16
 800e0ce:	6078      	str	r0, [r7, #4]
 800e0d0:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d107      	bne.n	800e0e8 <tcp_abandon+0x20>
 800e0d8:	4b52      	ldr	r3, [pc, #328]	; (800e224 <tcp_abandon+0x15c>)
 800e0da:	f240 223d 	movw	r2, #573	; 0x23d
 800e0de:	4952      	ldr	r1, [pc, #328]	; (800e228 <tcp_abandon+0x160>)
 800e0e0:	4852      	ldr	r0, [pc, #328]	; (800e22c <tcp_abandon+0x164>)
 800e0e2:	f00a fcdb 	bl	8018a9c <iprintf>
 800e0e6:	e099      	b.n	800e21c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	7d1b      	ldrb	r3, [r3, #20]
 800e0ec:	2b01      	cmp	r3, #1
 800e0ee:	d106      	bne.n	800e0fe <tcp_abandon+0x36>
 800e0f0:	4b4c      	ldr	r3, [pc, #304]	; (800e224 <tcp_abandon+0x15c>)
 800e0f2:	f44f 7210 	mov.w	r2, #576	; 0x240
 800e0f6:	494e      	ldr	r1, [pc, #312]	; (800e230 <tcp_abandon+0x168>)
 800e0f8:	484c      	ldr	r0, [pc, #304]	; (800e22c <tcp_abandon+0x164>)
 800e0fa:	f00a fccf 	bl	8018a9c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	7d1b      	ldrb	r3, [r3, #20]
 800e102:	2b0a      	cmp	r3, #10
 800e104:	d107      	bne.n	800e116 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800e106:	6879      	ldr	r1, [r7, #4]
 800e108:	484a      	ldr	r0, [pc, #296]	; (800e234 <tcp_abandon+0x16c>)
 800e10a:	f000 ffc3 	bl	800f094 <tcp_pcb_remove>
    tcp_free(pcb);
 800e10e:	6878      	ldr	r0, [r7, #4]
 800e110:	f7ff fdb0 	bl	800dc74 <tcp_free>
 800e114:	e082      	b.n	800e21c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800e116:	2300      	movs	r3, #0
 800e118:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800e11a:	2300      	movs	r3, #0
 800e11c:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e122:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e128:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e130:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	691b      	ldr	r3, [r3, #16]
 800e136:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	7d1b      	ldrb	r3, [r3, #20]
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d126      	bne.n	800e18e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	8adb      	ldrh	r3, [r3, #22]
 800e144:	2b00      	cmp	r3, #0
 800e146:	d02e      	beq.n	800e1a6 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800e148:	4b3b      	ldr	r3, [pc, #236]	; (800e238 <tcp_abandon+0x170>)
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	687a      	ldr	r2, [r7, #4]
 800e14e:	429a      	cmp	r2, r3
 800e150:	d105      	bne.n	800e15e <tcp_abandon+0x96>
 800e152:	4b39      	ldr	r3, [pc, #228]	; (800e238 <tcp_abandon+0x170>)
 800e154:	681b      	ldr	r3, [r3, #0]
 800e156:	68db      	ldr	r3, [r3, #12]
 800e158:	4a37      	ldr	r2, [pc, #220]	; (800e238 <tcp_abandon+0x170>)
 800e15a:	6013      	str	r3, [r2, #0]
 800e15c:	e013      	b.n	800e186 <tcp_abandon+0xbe>
 800e15e:	4b36      	ldr	r3, [pc, #216]	; (800e238 <tcp_abandon+0x170>)
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	61fb      	str	r3, [r7, #28]
 800e164:	e00c      	b.n	800e180 <tcp_abandon+0xb8>
 800e166:	69fb      	ldr	r3, [r7, #28]
 800e168:	68db      	ldr	r3, [r3, #12]
 800e16a:	687a      	ldr	r2, [r7, #4]
 800e16c:	429a      	cmp	r2, r3
 800e16e:	d104      	bne.n	800e17a <tcp_abandon+0xb2>
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	68da      	ldr	r2, [r3, #12]
 800e174:	69fb      	ldr	r3, [r7, #28]
 800e176:	60da      	str	r2, [r3, #12]
 800e178:	e005      	b.n	800e186 <tcp_abandon+0xbe>
 800e17a:	69fb      	ldr	r3, [r7, #28]
 800e17c:	68db      	ldr	r3, [r3, #12]
 800e17e:	61fb      	str	r3, [r7, #28]
 800e180:	69fb      	ldr	r3, [r7, #28]
 800e182:	2b00      	cmp	r3, #0
 800e184:	d1ef      	bne.n	800e166 <tcp_abandon+0x9e>
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	2200      	movs	r2, #0
 800e18a:	60da      	str	r2, [r3, #12]
 800e18c:	e00b      	b.n	800e1a6 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800e18e:	683b      	ldr	r3, [r7, #0]
 800e190:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	8adb      	ldrh	r3, [r3, #22]
 800e196:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800e198:	6879      	ldr	r1, [r7, #4]
 800e19a:	4828      	ldr	r0, [pc, #160]	; (800e23c <tcp_abandon+0x174>)
 800e19c:	f000 ff7a 	bl	800f094 <tcp_pcb_remove>
 800e1a0:	4b27      	ldr	r3, [pc, #156]	; (800e240 <tcp_abandon+0x178>)
 800e1a2:	2201      	movs	r2, #1
 800e1a4:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d004      	beq.n	800e1b8 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e1b2:	4618      	mov	r0, r3
 800e1b4:	f000 fd1c 	bl	800ebf0 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d004      	beq.n	800e1ca <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e1c4:	4618      	mov	r0, r3
 800e1c6:	f000 fd13 	bl	800ebf0 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d004      	beq.n	800e1dc <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e1d6:	4618      	mov	r0, r3
 800e1d8:	f000 fd0a 	bl	800ebf0 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800e1dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d00e      	beq.n	800e200 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800e1e2:	6879      	ldr	r1, [r7, #4]
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	3304      	adds	r3, #4
 800e1e8:	687a      	ldr	r2, [r7, #4]
 800e1ea:	8b12      	ldrh	r2, [r2, #24]
 800e1ec:	9202      	str	r2, [sp, #8]
 800e1ee:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e1f0:	9201      	str	r2, [sp, #4]
 800e1f2:	9300      	str	r3, [sp, #0]
 800e1f4:	460b      	mov	r3, r1
 800e1f6:	697a      	ldr	r2, [r7, #20]
 800e1f8:	69b9      	ldr	r1, [r7, #24]
 800e1fa:	6878      	ldr	r0, [r7, #4]
 800e1fc:	f004 fcc2 	bl	8012b84 <tcp_rst>
    }
    last_state = pcb->state;
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	7d1b      	ldrb	r3, [r3, #20]
 800e204:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800e206:	6878      	ldr	r0, [r7, #4]
 800e208:	f7ff fd34 	bl	800dc74 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800e20c:	693b      	ldr	r3, [r7, #16]
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d004      	beq.n	800e21c <tcp_abandon+0x154>
 800e212:	693b      	ldr	r3, [r7, #16]
 800e214:	f06f 010c 	mvn.w	r1, #12
 800e218:	68f8      	ldr	r0, [r7, #12]
 800e21a:	4798      	blx	r3
  }
}
 800e21c:	3728      	adds	r7, #40	; 0x28
 800e21e:	46bd      	mov	sp, r7
 800e220:	bd80      	pop	{r7, pc}
 800e222:	bf00      	nop
 800e224:	0801a750 	.word	0x0801a750
 800e228:	0801a894 	.word	0x0801a894
 800e22c:	0801a794 	.word	0x0801a794
 800e230:	0801a8b0 	.word	0x0801a8b0
 800e234:	2000c89c 	.word	0x2000c89c
 800e238:	2000c890 	.word	0x2000c890
 800e23c:	2000c898 	.word	0x2000c898
 800e240:	2000c8a0 	.word	0x2000c8a0

0800e244 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800e244:	b580      	push	{r7, lr}
 800e246:	b082      	sub	sp, #8
 800e248:	af00      	add	r7, sp, #0
 800e24a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800e24c:	2101      	movs	r1, #1
 800e24e:	6878      	ldr	r0, [r7, #4]
 800e250:	f7ff ff3a 	bl	800e0c8 <tcp_abandon>
}
 800e254:	bf00      	nop
 800e256:	3708      	adds	r7, #8
 800e258:	46bd      	mov	sp, r7
 800e25a:	bd80      	pop	{r7, pc}

0800e25c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800e25c:	b580      	push	{r7, lr}
 800e25e:	b084      	sub	sp, #16
 800e260:	af00      	add	r7, sp, #0
 800e262:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	2b00      	cmp	r3, #0
 800e268:	d106      	bne.n	800e278 <tcp_update_rcv_ann_wnd+0x1c>
 800e26a:	4b25      	ldr	r3, [pc, #148]	; (800e300 <tcp_update_rcv_ann_wnd+0xa4>)
 800e26c:	f240 32a6 	movw	r2, #934	; 0x3a6
 800e270:	4924      	ldr	r1, [pc, #144]	; (800e304 <tcp_update_rcv_ann_wnd+0xa8>)
 800e272:	4825      	ldr	r0, [pc, #148]	; (800e308 <tcp_update_rcv_ann_wnd+0xac>)
 800e274:	f00a fc12 	bl	8018a9c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e27c:	687a      	ldr	r2, [r7, #4]
 800e27e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800e280:	4413      	add	r3, r2
 800e282:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e288:	687a      	ldr	r2, [r7, #4]
 800e28a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800e28c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800e290:	bf28      	it	cs
 800e292:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800e296:	b292      	uxth	r2, r2
 800e298:	4413      	add	r3, r2
 800e29a:	68fa      	ldr	r2, [r7, #12]
 800e29c:	1ad3      	subs	r3, r2, r3
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	db08      	blt.n	800e2b4 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2ae:	68fa      	ldr	r2, [r7, #12]
 800e2b0:	1ad3      	subs	r3, r2, r3
 800e2b2:	e020      	b.n	800e2f6 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2bc:	1ad3      	subs	r3, r2, r3
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	dd03      	ble.n	800e2ca <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	2200      	movs	r2, #0
 800e2c6:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e2c8:	e014      	b.n	800e2f4 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2d2:	1ad3      	subs	r3, r2, r3
 800e2d4:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800e2d6:	68bb      	ldr	r3, [r7, #8]
 800e2d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e2dc:	d306      	bcc.n	800e2ec <tcp_update_rcv_ann_wnd+0x90>
 800e2de:	4b08      	ldr	r3, [pc, #32]	; (800e300 <tcp_update_rcv_ann_wnd+0xa4>)
 800e2e0:	f240 32b6 	movw	r2, #950	; 0x3b6
 800e2e4:	4909      	ldr	r1, [pc, #36]	; (800e30c <tcp_update_rcv_ann_wnd+0xb0>)
 800e2e6:	4808      	ldr	r0, [pc, #32]	; (800e308 <tcp_update_rcv_ann_wnd+0xac>)
 800e2e8:	f00a fbd8 	bl	8018a9c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800e2ec:	68bb      	ldr	r3, [r7, #8]
 800e2ee:	b29a      	uxth	r2, r3
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800e2f4:	2300      	movs	r3, #0
  }
}
 800e2f6:	4618      	mov	r0, r3
 800e2f8:	3710      	adds	r7, #16
 800e2fa:	46bd      	mov	sp, r7
 800e2fc:	bd80      	pop	{r7, pc}
 800e2fe:	bf00      	nop
 800e300:	0801a750 	.word	0x0801a750
 800e304:	0801a9ac 	.word	0x0801a9ac
 800e308:	0801a794 	.word	0x0801a794
 800e30c:	0801a9d0 	.word	0x0801a9d0

0800e310 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800e310:	b580      	push	{r7, lr}
 800e312:	b084      	sub	sp, #16
 800e314:	af00      	add	r7, sp, #0
 800e316:	6078      	str	r0, [r7, #4]
 800e318:	460b      	mov	r3, r1
 800e31a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d107      	bne.n	800e332 <tcp_recved+0x22>
 800e322:	4b1f      	ldr	r3, [pc, #124]	; (800e3a0 <tcp_recved+0x90>)
 800e324:	f240 32cf 	movw	r2, #975	; 0x3cf
 800e328:	491e      	ldr	r1, [pc, #120]	; (800e3a4 <tcp_recved+0x94>)
 800e32a:	481f      	ldr	r0, [pc, #124]	; (800e3a8 <tcp_recved+0x98>)
 800e32c:	f00a fbb6 	bl	8018a9c <iprintf>
 800e330:	e032      	b.n	800e398 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	7d1b      	ldrb	r3, [r3, #20]
 800e336:	2b01      	cmp	r3, #1
 800e338:	d106      	bne.n	800e348 <tcp_recved+0x38>
 800e33a:	4b19      	ldr	r3, [pc, #100]	; (800e3a0 <tcp_recved+0x90>)
 800e33c:	f240 32d2 	movw	r2, #978	; 0x3d2
 800e340:	491a      	ldr	r1, [pc, #104]	; (800e3ac <tcp_recved+0x9c>)
 800e342:	4819      	ldr	r0, [pc, #100]	; (800e3a8 <tcp_recved+0x98>)
 800e344:	f00a fbaa 	bl	8018a9c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e34c:	887b      	ldrh	r3, [r7, #2]
 800e34e:	4413      	add	r3, r2
 800e350:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800e352:	89fb      	ldrh	r3, [r7, #14]
 800e354:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e358:	d804      	bhi.n	800e364 <tcp_recved+0x54>
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e35e:	89fa      	ldrh	r2, [r7, #14]
 800e360:	429a      	cmp	r2, r3
 800e362:	d204      	bcs.n	800e36e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800e36a:	851a      	strh	r2, [r3, #40]	; 0x28
 800e36c:	e002      	b.n	800e374 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	89fa      	ldrh	r2, [r7, #14]
 800e372:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800e374:	6878      	ldr	r0, [r7, #4]
 800e376:	f7ff ff71 	bl	800e25c <tcp_update_rcv_ann_wnd>
 800e37a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800e37c:	68bb      	ldr	r3, [r7, #8]
 800e37e:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800e382:	d309      	bcc.n	800e398 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	8b5b      	ldrh	r3, [r3, #26]
 800e388:	f043 0302 	orr.w	r3, r3, #2
 800e38c:	b29a      	uxth	r2, r3
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e392:	6878      	ldr	r0, [r7, #4]
 800e394:	f003 fe42 	bl	801201c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800e398:	3710      	adds	r7, #16
 800e39a:	46bd      	mov	sp, r7
 800e39c:	bd80      	pop	{r7, pc}
 800e39e:	bf00      	nop
 800e3a0:	0801a750 	.word	0x0801a750
 800e3a4:	0801a9ec 	.word	0x0801a9ec
 800e3a8:	0801a794 	.word	0x0801a794
 800e3ac:	0801aa04 	.word	0x0801aa04

0800e3b0 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800e3b0:	b5b0      	push	{r4, r5, r7, lr}
 800e3b2:	b090      	sub	sp, #64	; 0x40
 800e3b4:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800e3b6:	2300      	movs	r3, #0
 800e3b8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800e3bc:	4b94      	ldr	r3, [pc, #592]	; (800e610 <tcp_slowtmr+0x260>)
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	3301      	adds	r3, #1
 800e3c2:	4a93      	ldr	r2, [pc, #588]	; (800e610 <tcp_slowtmr+0x260>)
 800e3c4:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800e3c6:	4b93      	ldr	r3, [pc, #588]	; (800e614 <tcp_slowtmr+0x264>)
 800e3c8:	781b      	ldrb	r3, [r3, #0]
 800e3ca:	3301      	adds	r3, #1
 800e3cc:	b2da      	uxtb	r2, r3
 800e3ce:	4b91      	ldr	r3, [pc, #580]	; (800e614 <tcp_slowtmr+0x264>)
 800e3d0:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800e3d2:	2300      	movs	r3, #0
 800e3d4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800e3d6:	4b90      	ldr	r3, [pc, #576]	; (800e618 <tcp_slowtmr+0x268>)
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800e3dc:	e29f      	b.n	800e91e <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800e3de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3e0:	7d1b      	ldrb	r3, [r3, #20]
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d106      	bne.n	800e3f4 <tcp_slowtmr+0x44>
 800e3e6:	4b8d      	ldr	r3, [pc, #564]	; (800e61c <tcp_slowtmr+0x26c>)
 800e3e8:	f240 42be 	movw	r2, #1214	; 0x4be
 800e3ec:	498c      	ldr	r1, [pc, #560]	; (800e620 <tcp_slowtmr+0x270>)
 800e3ee:	488d      	ldr	r0, [pc, #564]	; (800e624 <tcp_slowtmr+0x274>)
 800e3f0:	f00a fb54 	bl	8018a9c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800e3f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3f6:	7d1b      	ldrb	r3, [r3, #20]
 800e3f8:	2b01      	cmp	r3, #1
 800e3fa:	d106      	bne.n	800e40a <tcp_slowtmr+0x5a>
 800e3fc:	4b87      	ldr	r3, [pc, #540]	; (800e61c <tcp_slowtmr+0x26c>)
 800e3fe:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800e402:	4989      	ldr	r1, [pc, #548]	; (800e628 <tcp_slowtmr+0x278>)
 800e404:	4887      	ldr	r0, [pc, #540]	; (800e624 <tcp_slowtmr+0x274>)
 800e406:	f00a fb49 	bl	8018a9c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800e40a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e40c:	7d1b      	ldrb	r3, [r3, #20]
 800e40e:	2b0a      	cmp	r3, #10
 800e410:	d106      	bne.n	800e420 <tcp_slowtmr+0x70>
 800e412:	4b82      	ldr	r3, [pc, #520]	; (800e61c <tcp_slowtmr+0x26c>)
 800e414:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800e418:	4984      	ldr	r1, [pc, #528]	; (800e62c <tcp_slowtmr+0x27c>)
 800e41a:	4882      	ldr	r0, [pc, #520]	; (800e624 <tcp_slowtmr+0x274>)
 800e41c:	f00a fb3e 	bl	8018a9c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800e420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e422:	7f9a      	ldrb	r2, [r3, #30]
 800e424:	4b7b      	ldr	r3, [pc, #492]	; (800e614 <tcp_slowtmr+0x264>)
 800e426:	781b      	ldrb	r3, [r3, #0]
 800e428:	429a      	cmp	r2, r3
 800e42a:	d105      	bne.n	800e438 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800e42c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e42e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e432:	68db      	ldr	r3, [r3, #12]
 800e434:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800e436:	e272      	b.n	800e91e <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800e438:	4b76      	ldr	r3, [pc, #472]	; (800e614 <tcp_slowtmr+0x264>)
 800e43a:	781a      	ldrb	r2, [r3, #0]
 800e43c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e43e:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800e440:	2300      	movs	r3, #0
 800e442:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800e446:	2300      	movs	r3, #0
 800e448:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800e44c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e44e:	7d1b      	ldrb	r3, [r3, #20]
 800e450:	2b02      	cmp	r3, #2
 800e452:	d10a      	bne.n	800e46a <tcp_slowtmr+0xba>
 800e454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e456:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e45a:	2b05      	cmp	r3, #5
 800e45c:	d905      	bls.n	800e46a <tcp_slowtmr+0xba>
      ++pcb_remove;
 800e45e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e462:	3301      	adds	r3, #1
 800e464:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e468:	e11e      	b.n	800e6a8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800e46a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e46c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e470:	2b0b      	cmp	r3, #11
 800e472:	d905      	bls.n	800e480 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800e474:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e478:	3301      	adds	r3, #1
 800e47a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e47e:	e113      	b.n	800e6a8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800e480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e482:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e486:	2b00      	cmp	r3, #0
 800e488:	d075      	beq.n	800e576 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800e48a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e48c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d006      	beq.n	800e4a0 <tcp_slowtmr+0xf0>
 800e492:	4b62      	ldr	r3, [pc, #392]	; (800e61c <tcp_slowtmr+0x26c>)
 800e494:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800e498:	4965      	ldr	r1, [pc, #404]	; (800e630 <tcp_slowtmr+0x280>)
 800e49a:	4862      	ldr	r0, [pc, #392]	; (800e624 <tcp_slowtmr+0x274>)
 800e49c:	f00a fafe 	bl	8018a9c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800e4a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d106      	bne.n	800e4b6 <tcp_slowtmr+0x106>
 800e4a8:	4b5c      	ldr	r3, [pc, #368]	; (800e61c <tcp_slowtmr+0x26c>)
 800e4aa:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800e4ae:	4961      	ldr	r1, [pc, #388]	; (800e634 <tcp_slowtmr+0x284>)
 800e4b0:	485c      	ldr	r0, [pc, #368]	; (800e624 <tcp_slowtmr+0x274>)
 800e4b2:	f00a faf3 	bl	8018a9c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800e4b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4b8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800e4bc:	2b0b      	cmp	r3, #11
 800e4be:	d905      	bls.n	800e4cc <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800e4c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e4c4:	3301      	adds	r3, #1
 800e4c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e4ca:	e0ed      	b.n	800e6a8 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800e4cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4ce:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e4d2:	3b01      	subs	r3, #1
 800e4d4:	4a58      	ldr	r2, [pc, #352]	; (800e638 <tcp_slowtmr+0x288>)
 800e4d6:	5cd3      	ldrb	r3, [r2, r3]
 800e4d8:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800e4da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4dc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e4e0:	7c7a      	ldrb	r2, [r7, #17]
 800e4e2:	429a      	cmp	r2, r3
 800e4e4:	d907      	bls.n	800e4f6 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800e4e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4e8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e4ec:	3301      	adds	r3, #1
 800e4ee:	b2da      	uxtb	r2, r3
 800e4f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4f2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800e4f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4f8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e4fc:	7c7a      	ldrb	r2, [r7, #17]
 800e4fe:	429a      	cmp	r2, r3
 800e500:	f200 80d2 	bhi.w	800e6a8 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800e504:	2301      	movs	r3, #1
 800e506:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800e508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e50a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d108      	bne.n	800e524 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800e512:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e514:	f004 fc2a 	bl	8012d6c <tcp_zero_window_probe>
 800e518:	4603      	mov	r3, r0
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d014      	beq.n	800e548 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800e51e:	2300      	movs	r3, #0
 800e520:	623b      	str	r3, [r7, #32]
 800e522:	e011      	b.n	800e548 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800e524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e526:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e52a:	4619      	mov	r1, r3
 800e52c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e52e:	f003 faef 	bl	8011b10 <tcp_split_unsent_seg>
 800e532:	4603      	mov	r3, r0
 800e534:	2b00      	cmp	r3, #0
 800e536:	d107      	bne.n	800e548 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800e538:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e53a:	f003 fd6f 	bl	801201c <tcp_output>
 800e53e:	4603      	mov	r3, r0
 800e540:	2b00      	cmp	r3, #0
 800e542:	d101      	bne.n	800e548 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800e544:	2300      	movs	r3, #0
 800e546:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800e548:	6a3b      	ldr	r3, [r7, #32]
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	f000 80ac 	beq.w	800e6a8 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800e550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e552:	2200      	movs	r2, #0
 800e554:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800e558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e55a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e55e:	2b06      	cmp	r3, #6
 800e560:	f200 80a2 	bhi.w	800e6a8 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800e564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e566:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e56a:	3301      	adds	r3, #1
 800e56c:	b2da      	uxtb	r2, r3
 800e56e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e570:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800e574:	e098      	b.n	800e6a8 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800e576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e578:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	db0f      	blt.n	800e5a0 <tcp_slowtmr+0x1f0>
 800e580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e582:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e586:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800e58a:	4293      	cmp	r3, r2
 800e58c:	d008      	beq.n	800e5a0 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800e58e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e590:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e594:	b29b      	uxth	r3, r3
 800e596:	3301      	adds	r3, #1
 800e598:	b29b      	uxth	r3, r3
 800e59a:	b21a      	sxth	r2, r3
 800e59c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e59e:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800e5a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5a2:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800e5a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5a8:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800e5ac:	429a      	cmp	r2, r3
 800e5ae:	db7b      	blt.n	800e6a8 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800e5b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e5b2:	f004 f825 	bl	8012600 <tcp_rexmit_rto_prepare>
 800e5b6:	4603      	mov	r3, r0
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d007      	beq.n	800e5cc <tcp_slowtmr+0x21c>
 800e5bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d171      	bne.n	800e6a8 <tcp_slowtmr+0x2f8>
 800e5c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d06d      	beq.n	800e6a8 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800e5cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5ce:	7d1b      	ldrb	r3, [r3, #20]
 800e5d0:	2b02      	cmp	r3, #2
 800e5d2:	d03a      	beq.n	800e64a <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800e5d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5d6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e5da:	2b0c      	cmp	r3, #12
 800e5dc:	bf28      	it	cs
 800e5de:	230c      	movcs	r3, #12
 800e5e0:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800e5e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5e4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e5e8:	10db      	asrs	r3, r3, #3
 800e5ea:	b21b      	sxth	r3, r3
 800e5ec:	461a      	mov	r2, r3
 800e5ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5f0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e5f4:	4413      	add	r3, r2
 800e5f6:	7efa      	ldrb	r2, [r7, #27]
 800e5f8:	4910      	ldr	r1, [pc, #64]	; (800e63c <tcp_slowtmr+0x28c>)
 800e5fa:	5c8a      	ldrb	r2, [r1, r2]
 800e5fc:	4093      	lsls	r3, r2
 800e5fe:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800e600:	697b      	ldr	r3, [r7, #20]
 800e602:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800e606:	4293      	cmp	r3, r2
 800e608:	dc1a      	bgt.n	800e640 <tcp_slowtmr+0x290>
 800e60a:	697b      	ldr	r3, [r7, #20]
 800e60c:	b21a      	sxth	r2, r3
 800e60e:	e019      	b.n	800e644 <tcp_slowtmr+0x294>
 800e610:	2000c88c 	.word	0x2000c88c
 800e614:	2000c8a2 	.word	0x2000c8a2
 800e618:	2000c898 	.word	0x2000c898
 800e61c:	0801a750 	.word	0x0801a750
 800e620:	0801aa94 	.word	0x0801aa94
 800e624:	0801a794 	.word	0x0801a794
 800e628:	0801aac0 	.word	0x0801aac0
 800e62c:	0801aaec 	.word	0x0801aaec
 800e630:	0801ab1c 	.word	0x0801ab1c
 800e634:	0801ab50 	.word	0x0801ab50
 800e638:	0801cb74 	.word	0x0801cb74
 800e63c:	0801cb64 	.word	0x0801cb64
 800e640:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800e644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e646:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800e64a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e64c:	2200      	movs	r2, #0
 800e64e:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800e650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e652:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e658:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e65c:	4293      	cmp	r3, r2
 800e65e:	bf28      	it	cs
 800e660:	4613      	movcs	r3, r2
 800e662:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800e664:	8a7b      	ldrh	r3, [r7, #18]
 800e666:	085b      	lsrs	r3, r3, #1
 800e668:	b29a      	uxth	r2, r3
 800e66a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e66c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800e670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e672:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800e676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e678:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e67a:	005b      	lsls	r3, r3, #1
 800e67c:	b29b      	uxth	r3, r3
 800e67e:	429a      	cmp	r2, r3
 800e680:	d206      	bcs.n	800e690 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800e682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e684:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e686:	005b      	lsls	r3, r3, #1
 800e688:	b29a      	uxth	r2, r3
 800e68a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e68c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800e690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e692:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800e694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e696:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800e69a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e69c:	2200      	movs	r2, #0
 800e69e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800e6a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e6a4:	f004 f81c 	bl	80126e0 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800e6a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6aa:	7d1b      	ldrb	r3, [r3, #20]
 800e6ac:	2b06      	cmp	r3, #6
 800e6ae:	d111      	bne.n	800e6d4 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800e6b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6b2:	8b5b      	ldrh	r3, [r3, #26]
 800e6b4:	f003 0310 	and.w	r3, r3, #16
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d00b      	beq.n	800e6d4 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e6bc:	4b9d      	ldr	r3, [pc, #628]	; (800e934 <tcp_slowtmr+0x584>)
 800e6be:	681a      	ldr	r2, [r3, #0]
 800e6c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6c2:	6a1b      	ldr	r3, [r3, #32]
 800e6c4:	1ad3      	subs	r3, r2, r3
 800e6c6:	2b28      	cmp	r3, #40	; 0x28
 800e6c8:	d904      	bls.n	800e6d4 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800e6ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e6ce:	3301      	adds	r3, #1
 800e6d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e6d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6d6:	7a5b      	ldrb	r3, [r3, #9]
 800e6d8:	f003 0308 	and.w	r3, r3, #8
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d04c      	beq.n	800e77a <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800e6e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6e2:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e6e4:	2b04      	cmp	r3, #4
 800e6e6:	d003      	beq.n	800e6f0 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800e6e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6ea:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800e6ec:	2b07      	cmp	r3, #7
 800e6ee:	d144      	bne.n	800e77a <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e6f0:	4b90      	ldr	r3, [pc, #576]	; (800e934 <tcp_slowtmr+0x584>)
 800e6f2:	681a      	ldr	r2, [r3, #0]
 800e6f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6f6:	6a1b      	ldr	r3, [r3, #32]
 800e6f8:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800e6fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e700:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800e704:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800e708:	498b      	ldr	r1, [pc, #556]	; (800e938 <tcp_slowtmr+0x588>)
 800e70a:	fba1 1303 	umull	r1, r3, r1, r3
 800e70e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e710:	429a      	cmp	r2, r3
 800e712:	d90a      	bls.n	800e72a <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800e714:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e718:	3301      	adds	r3, #1
 800e71a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800e71e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e722:	3301      	adds	r3, #1
 800e724:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e728:	e027      	b.n	800e77a <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e72a:	4b82      	ldr	r3, [pc, #520]	; (800e934 <tcp_slowtmr+0x584>)
 800e72c:	681a      	ldr	r2, [r3, #0]
 800e72e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e730:	6a1b      	ldr	r3, [r3, #32]
 800e732:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800e734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e736:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800e73a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e73c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800e740:	4618      	mov	r0, r3
 800e742:	4b7e      	ldr	r3, [pc, #504]	; (800e93c <tcp_slowtmr+0x58c>)
 800e744:	fb00 f303 	mul.w	r3, r0, r3
 800e748:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800e74a:	497b      	ldr	r1, [pc, #492]	; (800e938 <tcp_slowtmr+0x588>)
 800e74c:	fba1 1303 	umull	r1, r3, r1, r3
 800e750:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e752:	429a      	cmp	r2, r3
 800e754:	d911      	bls.n	800e77a <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800e756:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e758:	f004 fac8 	bl	8012cec <tcp_keepalive>
 800e75c:	4603      	mov	r3, r0
 800e75e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800e762:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800e766:	2b00      	cmp	r3, #0
 800e768:	d107      	bne.n	800e77a <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800e76a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e76c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800e770:	3301      	adds	r3, #1
 800e772:	b2da      	uxtb	r2, r3
 800e774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e776:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800e77a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e77c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d011      	beq.n	800e7a6 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800e782:	4b6c      	ldr	r3, [pc, #432]	; (800e934 <tcp_slowtmr+0x584>)
 800e784:	681a      	ldr	r2, [r3, #0]
 800e786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e788:	6a1b      	ldr	r3, [r3, #32]
 800e78a:	1ad2      	subs	r2, r2, r3
 800e78c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e78e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800e792:	4619      	mov	r1, r3
 800e794:	460b      	mov	r3, r1
 800e796:	005b      	lsls	r3, r3, #1
 800e798:	440b      	add	r3, r1
 800e79a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800e79c:	429a      	cmp	r2, r3
 800e79e:	d302      	bcc.n	800e7a6 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800e7a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e7a2:	f000 fddb 	bl	800f35c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800e7a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7a8:	7d1b      	ldrb	r3, [r3, #20]
 800e7aa:	2b03      	cmp	r3, #3
 800e7ac:	d10b      	bne.n	800e7c6 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e7ae:	4b61      	ldr	r3, [pc, #388]	; (800e934 <tcp_slowtmr+0x584>)
 800e7b0:	681a      	ldr	r2, [r3, #0]
 800e7b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7b4:	6a1b      	ldr	r3, [r3, #32]
 800e7b6:	1ad3      	subs	r3, r2, r3
 800e7b8:	2b28      	cmp	r3, #40	; 0x28
 800e7ba:	d904      	bls.n	800e7c6 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800e7bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e7c0:	3301      	adds	r3, #1
 800e7c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800e7c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7c8:	7d1b      	ldrb	r3, [r3, #20]
 800e7ca:	2b09      	cmp	r3, #9
 800e7cc:	d10b      	bne.n	800e7e6 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e7ce:	4b59      	ldr	r3, [pc, #356]	; (800e934 <tcp_slowtmr+0x584>)
 800e7d0:	681a      	ldr	r2, [r3, #0]
 800e7d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7d4:	6a1b      	ldr	r3, [r3, #32]
 800e7d6:	1ad3      	subs	r3, r2, r3
 800e7d8:	2bf0      	cmp	r3, #240	; 0xf0
 800e7da:	d904      	bls.n	800e7e6 <tcp_slowtmr+0x436>
        ++pcb_remove;
 800e7dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e7e0:	3301      	adds	r3, #1
 800e7e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800e7e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d060      	beq.n	800e8b0 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800e7ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e7f4:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800e7f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e7f8:	f000 fbfc 	bl	800eff4 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800e7fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d010      	beq.n	800e824 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800e802:	4b4f      	ldr	r3, [pc, #316]	; (800e940 <tcp_slowtmr+0x590>)
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e808:	429a      	cmp	r2, r3
 800e80a:	d106      	bne.n	800e81a <tcp_slowtmr+0x46a>
 800e80c:	4b4d      	ldr	r3, [pc, #308]	; (800e944 <tcp_slowtmr+0x594>)
 800e80e:	f240 526d 	movw	r2, #1389	; 0x56d
 800e812:	494d      	ldr	r1, [pc, #308]	; (800e948 <tcp_slowtmr+0x598>)
 800e814:	484d      	ldr	r0, [pc, #308]	; (800e94c <tcp_slowtmr+0x59c>)
 800e816:	f00a f941 	bl	8018a9c <iprintf>
        prev->next = pcb->next;
 800e81a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e81c:	68da      	ldr	r2, [r3, #12]
 800e81e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e820:	60da      	str	r2, [r3, #12]
 800e822:	e00f      	b.n	800e844 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800e824:	4b46      	ldr	r3, [pc, #280]	; (800e940 <tcp_slowtmr+0x590>)
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e82a:	429a      	cmp	r2, r3
 800e82c:	d006      	beq.n	800e83c <tcp_slowtmr+0x48c>
 800e82e:	4b45      	ldr	r3, [pc, #276]	; (800e944 <tcp_slowtmr+0x594>)
 800e830:	f240 5271 	movw	r2, #1393	; 0x571
 800e834:	4946      	ldr	r1, [pc, #280]	; (800e950 <tcp_slowtmr+0x5a0>)
 800e836:	4845      	ldr	r0, [pc, #276]	; (800e94c <tcp_slowtmr+0x59c>)
 800e838:	f00a f930 	bl	8018a9c <iprintf>
        tcp_active_pcbs = pcb->next;
 800e83c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e83e:	68db      	ldr	r3, [r3, #12]
 800e840:	4a3f      	ldr	r2, [pc, #252]	; (800e940 <tcp_slowtmr+0x590>)
 800e842:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800e844:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d013      	beq.n	800e874 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e84c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e84e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800e850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e852:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800e854:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800e856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e858:	3304      	adds	r3, #4
 800e85a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e85c:	8ad2      	ldrh	r2, [r2, #22]
 800e85e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e860:	8b09      	ldrh	r1, [r1, #24]
 800e862:	9102      	str	r1, [sp, #8]
 800e864:	9201      	str	r2, [sp, #4]
 800e866:	9300      	str	r3, [sp, #0]
 800e868:	462b      	mov	r3, r5
 800e86a:	4622      	mov	r2, r4
 800e86c:	4601      	mov	r1, r0
 800e86e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e870:	f004 f988 	bl	8012b84 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800e874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e876:	691b      	ldr	r3, [r3, #16]
 800e878:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800e87a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e87c:	7d1b      	ldrb	r3, [r3, #20]
 800e87e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800e880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e882:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800e884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e886:	68db      	ldr	r3, [r3, #12]
 800e888:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800e88a:	6838      	ldr	r0, [r7, #0]
 800e88c:	f7ff f9f2 	bl	800dc74 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800e890:	4b30      	ldr	r3, [pc, #192]	; (800e954 <tcp_slowtmr+0x5a4>)
 800e892:	2200      	movs	r2, #0
 800e894:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d004      	beq.n	800e8a6 <tcp_slowtmr+0x4f6>
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	f06f 010c 	mvn.w	r1, #12
 800e8a2:	68b8      	ldr	r0, [r7, #8]
 800e8a4:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800e8a6:	4b2b      	ldr	r3, [pc, #172]	; (800e954 <tcp_slowtmr+0x5a4>)
 800e8a8:	781b      	ldrb	r3, [r3, #0]
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d037      	beq.n	800e91e <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800e8ae:	e590      	b.n	800e3d2 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800e8b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8b2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e8b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8b6:	68db      	ldr	r3, [r3, #12]
 800e8b8:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800e8ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8bc:	7f1b      	ldrb	r3, [r3, #28]
 800e8be:	3301      	adds	r3, #1
 800e8c0:	b2da      	uxtb	r2, r3
 800e8c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8c4:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800e8c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8c8:	7f1a      	ldrb	r2, [r3, #28]
 800e8ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8cc:	7f5b      	ldrb	r3, [r3, #29]
 800e8ce:	429a      	cmp	r2, r3
 800e8d0:	d325      	bcc.n	800e91e <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800e8d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8d4:	2200      	movs	r2, #0
 800e8d6:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800e8d8:	4b1e      	ldr	r3, [pc, #120]	; (800e954 <tcp_slowtmr+0x5a4>)
 800e8da:	2200      	movs	r2, #0
 800e8dc:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800e8de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d00b      	beq.n	800e900 <tcp_slowtmr+0x550>
 800e8e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e8ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e8f0:	6912      	ldr	r2, [r2, #16]
 800e8f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e8f4:	4610      	mov	r0, r2
 800e8f6:	4798      	blx	r3
 800e8f8:	4603      	mov	r3, r0
 800e8fa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800e8fe:	e002      	b.n	800e906 <tcp_slowtmr+0x556>
 800e900:	2300      	movs	r3, #0
 800e902:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800e906:	4b13      	ldr	r3, [pc, #76]	; (800e954 <tcp_slowtmr+0x5a4>)
 800e908:	781b      	ldrb	r3, [r3, #0]
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d000      	beq.n	800e910 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800e90e:	e560      	b.n	800e3d2 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800e910:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800e914:	2b00      	cmp	r3, #0
 800e916:	d102      	bne.n	800e91e <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800e918:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e91a:	f003 fb7f 	bl	801201c <tcp_output>
  while (pcb != NULL) {
 800e91e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e920:	2b00      	cmp	r3, #0
 800e922:	f47f ad5c 	bne.w	800e3de <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800e926:	2300      	movs	r3, #0
 800e928:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800e92a:	4b0b      	ldr	r3, [pc, #44]	; (800e958 <tcp_slowtmr+0x5a8>)
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800e930:	e067      	b.n	800ea02 <tcp_slowtmr+0x652>
 800e932:	bf00      	nop
 800e934:	2000c88c 	.word	0x2000c88c
 800e938:	10624dd3 	.word	0x10624dd3
 800e93c:	000124f8 	.word	0x000124f8
 800e940:	2000c898 	.word	0x2000c898
 800e944:	0801a750 	.word	0x0801a750
 800e948:	0801ab88 	.word	0x0801ab88
 800e94c:	0801a794 	.word	0x0801a794
 800e950:	0801abb4 	.word	0x0801abb4
 800e954:	2000c8a0 	.word	0x2000c8a0
 800e958:	2000c89c 	.word	0x2000c89c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e95c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e95e:	7d1b      	ldrb	r3, [r3, #20]
 800e960:	2b0a      	cmp	r3, #10
 800e962:	d006      	beq.n	800e972 <tcp_slowtmr+0x5c2>
 800e964:	4b2b      	ldr	r3, [pc, #172]	; (800ea14 <tcp_slowtmr+0x664>)
 800e966:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800e96a:	492b      	ldr	r1, [pc, #172]	; (800ea18 <tcp_slowtmr+0x668>)
 800e96c:	482b      	ldr	r0, [pc, #172]	; (800ea1c <tcp_slowtmr+0x66c>)
 800e96e:	f00a f895 	bl	8018a9c <iprintf>
    pcb_remove = 0;
 800e972:	2300      	movs	r3, #0
 800e974:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e978:	4b29      	ldr	r3, [pc, #164]	; (800ea20 <tcp_slowtmr+0x670>)
 800e97a:	681a      	ldr	r2, [r3, #0]
 800e97c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e97e:	6a1b      	ldr	r3, [r3, #32]
 800e980:	1ad3      	subs	r3, r2, r3
 800e982:	2bf0      	cmp	r3, #240	; 0xf0
 800e984:	d904      	bls.n	800e990 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800e986:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e98a:	3301      	adds	r3, #1
 800e98c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800e990:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e994:	2b00      	cmp	r3, #0
 800e996:	d02f      	beq.n	800e9f8 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800e998:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e99a:	f000 fb2b 	bl	800eff4 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800e99e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d010      	beq.n	800e9c6 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800e9a4:	4b1f      	ldr	r3, [pc, #124]	; (800ea24 <tcp_slowtmr+0x674>)
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e9aa:	429a      	cmp	r2, r3
 800e9ac:	d106      	bne.n	800e9bc <tcp_slowtmr+0x60c>
 800e9ae:	4b19      	ldr	r3, [pc, #100]	; (800ea14 <tcp_slowtmr+0x664>)
 800e9b0:	f240 52af 	movw	r2, #1455	; 0x5af
 800e9b4:	491c      	ldr	r1, [pc, #112]	; (800ea28 <tcp_slowtmr+0x678>)
 800e9b6:	4819      	ldr	r0, [pc, #100]	; (800ea1c <tcp_slowtmr+0x66c>)
 800e9b8:	f00a f870 	bl	8018a9c <iprintf>
        prev->next = pcb->next;
 800e9bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9be:	68da      	ldr	r2, [r3, #12]
 800e9c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9c2:	60da      	str	r2, [r3, #12]
 800e9c4:	e00f      	b.n	800e9e6 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800e9c6:	4b17      	ldr	r3, [pc, #92]	; (800ea24 <tcp_slowtmr+0x674>)
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e9cc:	429a      	cmp	r2, r3
 800e9ce:	d006      	beq.n	800e9de <tcp_slowtmr+0x62e>
 800e9d0:	4b10      	ldr	r3, [pc, #64]	; (800ea14 <tcp_slowtmr+0x664>)
 800e9d2:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800e9d6:	4915      	ldr	r1, [pc, #84]	; (800ea2c <tcp_slowtmr+0x67c>)
 800e9d8:	4810      	ldr	r0, [pc, #64]	; (800ea1c <tcp_slowtmr+0x66c>)
 800e9da:	f00a f85f 	bl	8018a9c <iprintf>
        tcp_tw_pcbs = pcb->next;
 800e9de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9e0:	68db      	ldr	r3, [r3, #12]
 800e9e2:	4a10      	ldr	r2, [pc, #64]	; (800ea24 <tcp_slowtmr+0x674>)
 800e9e4:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800e9e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9e8:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800e9ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9ec:	68db      	ldr	r3, [r3, #12]
 800e9ee:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800e9f0:	69f8      	ldr	r0, [r7, #28]
 800e9f2:	f7ff f93f 	bl	800dc74 <tcp_free>
 800e9f6:	e004      	b.n	800ea02 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800e9f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9fa:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e9fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9fe:	68db      	ldr	r3, [r3, #12]
 800ea00:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800ea02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d1a9      	bne.n	800e95c <tcp_slowtmr+0x5ac>
    }
  }
}
 800ea08:	bf00      	nop
 800ea0a:	bf00      	nop
 800ea0c:	3730      	adds	r7, #48	; 0x30
 800ea0e:	46bd      	mov	sp, r7
 800ea10:	bdb0      	pop	{r4, r5, r7, pc}
 800ea12:	bf00      	nop
 800ea14:	0801a750 	.word	0x0801a750
 800ea18:	0801abe0 	.word	0x0801abe0
 800ea1c:	0801a794 	.word	0x0801a794
 800ea20:	2000c88c 	.word	0x2000c88c
 800ea24:	2000c89c 	.word	0x2000c89c
 800ea28:	0801ac10 	.word	0x0801ac10
 800ea2c:	0801ac38 	.word	0x0801ac38

0800ea30 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800ea30:	b580      	push	{r7, lr}
 800ea32:	b082      	sub	sp, #8
 800ea34:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800ea36:	4b2d      	ldr	r3, [pc, #180]	; (800eaec <tcp_fasttmr+0xbc>)
 800ea38:	781b      	ldrb	r3, [r3, #0]
 800ea3a:	3301      	adds	r3, #1
 800ea3c:	b2da      	uxtb	r2, r3
 800ea3e:	4b2b      	ldr	r3, [pc, #172]	; (800eaec <tcp_fasttmr+0xbc>)
 800ea40:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800ea42:	4b2b      	ldr	r3, [pc, #172]	; (800eaf0 <tcp_fasttmr+0xc0>)
 800ea44:	681b      	ldr	r3, [r3, #0]
 800ea46:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800ea48:	e048      	b.n	800eadc <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	7f9a      	ldrb	r2, [r3, #30]
 800ea4e:	4b27      	ldr	r3, [pc, #156]	; (800eaec <tcp_fasttmr+0xbc>)
 800ea50:	781b      	ldrb	r3, [r3, #0]
 800ea52:	429a      	cmp	r2, r3
 800ea54:	d03f      	beq.n	800ead6 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800ea56:	4b25      	ldr	r3, [pc, #148]	; (800eaec <tcp_fasttmr+0xbc>)
 800ea58:	781a      	ldrb	r2, [r3, #0]
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	8b5b      	ldrh	r3, [r3, #26]
 800ea62:	f003 0301 	and.w	r3, r3, #1
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d010      	beq.n	800ea8c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	8b5b      	ldrh	r3, [r3, #26]
 800ea6e:	f043 0302 	orr.w	r3, r3, #2
 800ea72:	b29a      	uxth	r2, r3
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800ea78:	6878      	ldr	r0, [r7, #4]
 800ea7a:	f003 facf 	bl	801201c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	8b5b      	ldrh	r3, [r3, #26]
 800ea82:	f023 0303 	bic.w	r3, r3, #3
 800ea86:	b29a      	uxth	r2, r3
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	8b5b      	ldrh	r3, [r3, #26]
 800ea90:	f003 0308 	and.w	r3, r3, #8
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d009      	beq.n	800eaac <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	8b5b      	ldrh	r3, [r3, #26]
 800ea9c:	f023 0308 	bic.w	r3, r3, #8
 800eaa0:	b29a      	uxth	r2, r3
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800eaa6:	6878      	ldr	r0, [r7, #4]
 800eaa8:	f7ff fa78 	bl	800df9c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	68db      	ldr	r3, [r3, #12]
 800eab0:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d00a      	beq.n	800ead0 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800eaba:	4b0e      	ldr	r3, [pc, #56]	; (800eaf4 <tcp_fasttmr+0xc4>)
 800eabc:	2200      	movs	r2, #0
 800eabe:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800eac0:	6878      	ldr	r0, [r7, #4]
 800eac2:	f000 f819 	bl	800eaf8 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800eac6:	4b0b      	ldr	r3, [pc, #44]	; (800eaf4 <tcp_fasttmr+0xc4>)
 800eac8:	781b      	ldrb	r3, [r3, #0]
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d000      	beq.n	800ead0 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800eace:	e7b8      	b.n	800ea42 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800ead0:	683b      	ldr	r3, [r7, #0]
 800ead2:	607b      	str	r3, [r7, #4]
 800ead4:	e002      	b.n	800eadc <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	68db      	ldr	r3, [r3, #12]
 800eada:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d1b3      	bne.n	800ea4a <tcp_fasttmr+0x1a>
    }
  }
}
 800eae2:	bf00      	nop
 800eae4:	bf00      	nop
 800eae6:	3708      	adds	r7, #8
 800eae8:	46bd      	mov	sp, r7
 800eaea:	bd80      	pop	{r7, pc}
 800eaec:	2000c8a2 	.word	0x2000c8a2
 800eaf0:	2000c898 	.word	0x2000c898
 800eaf4:	2000c8a0 	.word	0x2000c8a0

0800eaf8 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800eaf8:	b590      	push	{r4, r7, lr}
 800eafa:	b085      	sub	sp, #20
 800eafc:	af00      	add	r7, sp, #0
 800eafe:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d109      	bne.n	800eb1a <tcp_process_refused_data+0x22>
 800eb06:	4b37      	ldr	r3, [pc, #220]	; (800ebe4 <tcp_process_refused_data+0xec>)
 800eb08:	f240 6209 	movw	r2, #1545	; 0x609
 800eb0c:	4936      	ldr	r1, [pc, #216]	; (800ebe8 <tcp_process_refused_data+0xf0>)
 800eb0e:	4837      	ldr	r0, [pc, #220]	; (800ebec <tcp_process_refused_data+0xf4>)
 800eb10:	f009 ffc4 	bl	8018a9c <iprintf>
 800eb14:	f06f 030f 	mvn.w	r3, #15
 800eb18:	e060      	b.n	800ebdc <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800eb1e:	7b5b      	ldrb	r3, [r3, #13]
 800eb20:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800eb26:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	2200      	movs	r2, #0
 800eb2c:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d00b      	beq.n	800eb50 <tcp_process_refused_data+0x58>
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	6918      	ldr	r0, [r3, #16]
 800eb42:	2300      	movs	r3, #0
 800eb44:	68ba      	ldr	r2, [r7, #8]
 800eb46:	6879      	ldr	r1, [r7, #4]
 800eb48:	47a0      	blx	r4
 800eb4a:	4603      	mov	r3, r0
 800eb4c:	73fb      	strb	r3, [r7, #15]
 800eb4e:	e007      	b.n	800eb60 <tcp_process_refused_data+0x68>
 800eb50:	2300      	movs	r3, #0
 800eb52:	68ba      	ldr	r2, [r7, #8]
 800eb54:	6879      	ldr	r1, [r7, #4]
 800eb56:	2000      	movs	r0, #0
 800eb58:	f000 f8a4 	bl	800eca4 <tcp_recv_null>
 800eb5c:	4603      	mov	r3, r0
 800eb5e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800eb60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d12a      	bne.n	800ebbe <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800eb68:	7bbb      	ldrb	r3, [r7, #14]
 800eb6a:	f003 0320 	and.w	r3, r3, #32
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d033      	beq.n	800ebda <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800eb76:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800eb7a:	d005      	beq.n	800eb88 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800eb80:	3301      	adds	r3, #1
 800eb82:	b29a      	uxth	r2, r3
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d00b      	beq.n	800ebaa <tcp_process_refused_data+0xb2>
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	6918      	ldr	r0, [r3, #16]
 800eb9c:	2300      	movs	r3, #0
 800eb9e:	2200      	movs	r2, #0
 800eba0:	6879      	ldr	r1, [r7, #4]
 800eba2:	47a0      	blx	r4
 800eba4:	4603      	mov	r3, r0
 800eba6:	73fb      	strb	r3, [r7, #15]
 800eba8:	e001      	b.n	800ebae <tcp_process_refused_data+0xb6>
 800ebaa:	2300      	movs	r3, #0
 800ebac:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800ebae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ebb2:	f113 0f0d 	cmn.w	r3, #13
 800ebb6:	d110      	bne.n	800ebda <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800ebb8:	f06f 030c 	mvn.w	r3, #12
 800ebbc:	e00e      	b.n	800ebdc <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800ebbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ebc2:	f113 0f0d 	cmn.w	r3, #13
 800ebc6:	d102      	bne.n	800ebce <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800ebc8:	f06f 030c 	mvn.w	r3, #12
 800ebcc:	e006      	b.n	800ebdc <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	68ba      	ldr	r2, [r7, #8]
 800ebd2:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800ebd4:	f06f 0304 	mvn.w	r3, #4
 800ebd8:	e000      	b.n	800ebdc <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800ebda:	2300      	movs	r3, #0
}
 800ebdc:	4618      	mov	r0, r3
 800ebde:	3714      	adds	r7, #20
 800ebe0:	46bd      	mov	sp, r7
 800ebe2:	bd90      	pop	{r4, r7, pc}
 800ebe4:	0801a750 	.word	0x0801a750
 800ebe8:	0801ac60 	.word	0x0801ac60
 800ebec:	0801a794 	.word	0x0801a794

0800ebf0 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800ebf0:	b580      	push	{r7, lr}
 800ebf2:	b084      	sub	sp, #16
 800ebf4:	af00      	add	r7, sp, #0
 800ebf6:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800ebf8:	e007      	b.n	800ec0a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800ec00:	6878      	ldr	r0, [r7, #4]
 800ec02:	f000 f80a 	bl	800ec1a <tcp_seg_free>
    seg = next;
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	d1f4      	bne.n	800ebfa <tcp_segs_free+0xa>
  }
}
 800ec10:	bf00      	nop
 800ec12:	bf00      	nop
 800ec14:	3710      	adds	r7, #16
 800ec16:	46bd      	mov	sp, r7
 800ec18:	bd80      	pop	{r7, pc}

0800ec1a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800ec1a:	b580      	push	{r7, lr}
 800ec1c:	b082      	sub	sp, #8
 800ec1e:	af00      	add	r7, sp, #0
 800ec20:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d00c      	beq.n	800ec42 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	685b      	ldr	r3, [r3, #4]
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d004      	beq.n	800ec3a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	685b      	ldr	r3, [r3, #4]
 800ec34:	4618      	mov	r0, r3
 800ec36:	f7fe fd61 	bl	800d6fc <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800ec3a:	6879      	ldr	r1, [r7, #4]
 800ec3c:	2003      	movs	r0, #3
 800ec3e:	f7fd ff15 	bl	800ca6c <memp_free>
  }
}
 800ec42:	bf00      	nop
 800ec44:	3708      	adds	r7, #8
 800ec46:	46bd      	mov	sp, r7
 800ec48:	bd80      	pop	{r7, pc}
	...

0800ec4c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800ec4c:	b580      	push	{r7, lr}
 800ec4e:	b084      	sub	sp, #16
 800ec50:	af00      	add	r7, sp, #0
 800ec52:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d106      	bne.n	800ec68 <tcp_seg_copy+0x1c>
 800ec5a:	4b0f      	ldr	r3, [pc, #60]	; (800ec98 <tcp_seg_copy+0x4c>)
 800ec5c:	f240 6282 	movw	r2, #1666	; 0x682
 800ec60:	490e      	ldr	r1, [pc, #56]	; (800ec9c <tcp_seg_copy+0x50>)
 800ec62:	480f      	ldr	r0, [pc, #60]	; (800eca0 <tcp_seg_copy+0x54>)
 800ec64:	f009 ff1a 	bl	8018a9c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800ec68:	2003      	movs	r0, #3
 800ec6a:	f7fd fe89 	bl	800c980 <memp_malloc>
 800ec6e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800ec70:	68fb      	ldr	r3, [r7, #12]
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d101      	bne.n	800ec7a <tcp_seg_copy+0x2e>
    return NULL;
 800ec76:	2300      	movs	r3, #0
 800ec78:	e00a      	b.n	800ec90 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800ec7a:	2210      	movs	r2, #16
 800ec7c:	6879      	ldr	r1, [r7, #4]
 800ec7e:	68f8      	ldr	r0, [r7, #12]
 800ec80:	f009 fef6 	bl	8018a70 <memcpy>
  pbuf_ref(cseg->p);
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	685b      	ldr	r3, [r3, #4]
 800ec88:	4618      	mov	r0, r3
 800ec8a:	f7fe fddd 	bl	800d848 <pbuf_ref>
  return cseg;
 800ec8e:	68fb      	ldr	r3, [r7, #12]
}
 800ec90:	4618      	mov	r0, r3
 800ec92:	3710      	adds	r7, #16
 800ec94:	46bd      	mov	sp, r7
 800ec96:	bd80      	pop	{r7, pc}
 800ec98:	0801a750 	.word	0x0801a750
 800ec9c:	0801aca4 	.word	0x0801aca4
 800eca0:	0801a794 	.word	0x0801a794

0800eca4 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800eca4:	b580      	push	{r7, lr}
 800eca6:	b084      	sub	sp, #16
 800eca8:	af00      	add	r7, sp, #0
 800ecaa:	60f8      	str	r0, [r7, #12]
 800ecac:	60b9      	str	r1, [r7, #8]
 800ecae:	607a      	str	r2, [r7, #4]
 800ecb0:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800ecb2:	68bb      	ldr	r3, [r7, #8]
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d109      	bne.n	800eccc <tcp_recv_null+0x28>
 800ecb8:	4b12      	ldr	r3, [pc, #72]	; (800ed04 <tcp_recv_null+0x60>)
 800ecba:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800ecbe:	4912      	ldr	r1, [pc, #72]	; (800ed08 <tcp_recv_null+0x64>)
 800ecc0:	4812      	ldr	r0, [pc, #72]	; (800ed0c <tcp_recv_null+0x68>)
 800ecc2:	f009 feeb 	bl	8018a9c <iprintf>
 800ecc6:	f06f 030f 	mvn.w	r3, #15
 800ecca:	e016      	b.n	800ecfa <tcp_recv_null+0x56>

  if (p != NULL) {
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d009      	beq.n	800ece6 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	891b      	ldrh	r3, [r3, #8]
 800ecd6:	4619      	mov	r1, r3
 800ecd8:	68b8      	ldr	r0, [r7, #8]
 800ecda:	f7ff fb19 	bl	800e310 <tcp_recved>
    pbuf_free(p);
 800ecde:	6878      	ldr	r0, [r7, #4]
 800ece0:	f7fe fd0c 	bl	800d6fc <pbuf_free>
 800ece4:	e008      	b.n	800ecf8 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800ece6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	d104      	bne.n	800ecf8 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800ecee:	68b8      	ldr	r0, [r7, #8]
 800ecf0:	f7ff f9be 	bl	800e070 <tcp_close>
 800ecf4:	4603      	mov	r3, r0
 800ecf6:	e000      	b.n	800ecfa <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800ecf8:	2300      	movs	r3, #0
}
 800ecfa:	4618      	mov	r0, r3
 800ecfc:	3710      	adds	r7, #16
 800ecfe:	46bd      	mov	sp, r7
 800ed00:	bd80      	pop	{r7, pc}
 800ed02:	bf00      	nop
 800ed04:	0801a750 	.word	0x0801a750
 800ed08:	0801acc0 	.word	0x0801acc0
 800ed0c:	0801a794 	.word	0x0801a794

0800ed10 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800ed10:	b580      	push	{r7, lr}
 800ed12:	b086      	sub	sp, #24
 800ed14:	af00      	add	r7, sp, #0
 800ed16:	4603      	mov	r3, r0
 800ed18:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800ed1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	db01      	blt.n	800ed26 <tcp_kill_prio+0x16>
 800ed22:	79fb      	ldrb	r3, [r7, #7]
 800ed24:	e000      	b.n	800ed28 <tcp_kill_prio+0x18>
 800ed26:	237f      	movs	r3, #127	; 0x7f
 800ed28:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800ed2a:	7afb      	ldrb	r3, [r7, #11]
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d034      	beq.n	800ed9a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800ed30:	7afb      	ldrb	r3, [r7, #11]
 800ed32:	3b01      	subs	r3, #1
 800ed34:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800ed36:	2300      	movs	r3, #0
 800ed38:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800ed3a:	2300      	movs	r3, #0
 800ed3c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ed3e:	4b19      	ldr	r3, [pc, #100]	; (800eda4 <tcp_kill_prio+0x94>)
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	617b      	str	r3, [r7, #20]
 800ed44:	e01f      	b.n	800ed86 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800ed46:	697b      	ldr	r3, [r7, #20]
 800ed48:	7d5b      	ldrb	r3, [r3, #21]
 800ed4a:	7afa      	ldrb	r2, [r7, #11]
 800ed4c:	429a      	cmp	r2, r3
 800ed4e:	d80c      	bhi.n	800ed6a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800ed50:	697b      	ldr	r3, [r7, #20]
 800ed52:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800ed54:	7afa      	ldrb	r2, [r7, #11]
 800ed56:	429a      	cmp	r2, r3
 800ed58:	d112      	bne.n	800ed80 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800ed5a:	4b13      	ldr	r3, [pc, #76]	; (800eda8 <tcp_kill_prio+0x98>)
 800ed5c:	681a      	ldr	r2, [r3, #0]
 800ed5e:	697b      	ldr	r3, [r7, #20]
 800ed60:	6a1b      	ldr	r3, [r3, #32]
 800ed62:	1ad3      	subs	r3, r2, r3
 800ed64:	68fa      	ldr	r2, [r7, #12]
 800ed66:	429a      	cmp	r2, r3
 800ed68:	d80a      	bhi.n	800ed80 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800ed6a:	4b0f      	ldr	r3, [pc, #60]	; (800eda8 <tcp_kill_prio+0x98>)
 800ed6c:	681a      	ldr	r2, [r3, #0]
 800ed6e:	697b      	ldr	r3, [r7, #20]
 800ed70:	6a1b      	ldr	r3, [r3, #32]
 800ed72:	1ad3      	subs	r3, r2, r3
 800ed74:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800ed76:	697b      	ldr	r3, [r7, #20]
 800ed78:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800ed7a:	697b      	ldr	r3, [r7, #20]
 800ed7c:	7d5b      	ldrb	r3, [r3, #21]
 800ed7e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ed80:	697b      	ldr	r3, [r7, #20]
 800ed82:	68db      	ldr	r3, [r3, #12]
 800ed84:	617b      	str	r3, [r7, #20]
 800ed86:	697b      	ldr	r3, [r7, #20]
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d1dc      	bne.n	800ed46 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800ed8c:	693b      	ldr	r3, [r7, #16]
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d004      	beq.n	800ed9c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800ed92:	6938      	ldr	r0, [r7, #16]
 800ed94:	f7ff fa56 	bl	800e244 <tcp_abort>
 800ed98:	e000      	b.n	800ed9c <tcp_kill_prio+0x8c>
    return;
 800ed9a:	bf00      	nop
  }
}
 800ed9c:	3718      	adds	r7, #24
 800ed9e:	46bd      	mov	sp, r7
 800eda0:	bd80      	pop	{r7, pc}
 800eda2:	bf00      	nop
 800eda4:	2000c898 	.word	0x2000c898
 800eda8:	2000c88c 	.word	0x2000c88c

0800edac <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800edac:	b580      	push	{r7, lr}
 800edae:	b086      	sub	sp, #24
 800edb0:	af00      	add	r7, sp, #0
 800edb2:	4603      	mov	r3, r0
 800edb4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800edb6:	79fb      	ldrb	r3, [r7, #7]
 800edb8:	2b08      	cmp	r3, #8
 800edba:	d009      	beq.n	800edd0 <tcp_kill_state+0x24>
 800edbc:	79fb      	ldrb	r3, [r7, #7]
 800edbe:	2b09      	cmp	r3, #9
 800edc0:	d006      	beq.n	800edd0 <tcp_kill_state+0x24>
 800edc2:	4b1a      	ldr	r3, [pc, #104]	; (800ee2c <tcp_kill_state+0x80>)
 800edc4:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800edc8:	4919      	ldr	r1, [pc, #100]	; (800ee30 <tcp_kill_state+0x84>)
 800edca:	481a      	ldr	r0, [pc, #104]	; (800ee34 <tcp_kill_state+0x88>)
 800edcc:	f009 fe66 	bl	8018a9c <iprintf>

  inactivity = 0;
 800edd0:	2300      	movs	r3, #0
 800edd2:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800edd4:	2300      	movs	r3, #0
 800edd6:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800edd8:	4b17      	ldr	r3, [pc, #92]	; (800ee38 <tcp_kill_state+0x8c>)
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	617b      	str	r3, [r7, #20]
 800edde:	e017      	b.n	800ee10 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800ede0:	697b      	ldr	r3, [r7, #20]
 800ede2:	7d1b      	ldrb	r3, [r3, #20]
 800ede4:	79fa      	ldrb	r2, [r7, #7]
 800ede6:	429a      	cmp	r2, r3
 800ede8:	d10f      	bne.n	800ee0a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800edea:	4b14      	ldr	r3, [pc, #80]	; (800ee3c <tcp_kill_state+0x90>)
 800edec:	681a      	ldr	r2, [r3, #0]
 800edee:	697b      	ldr	r3, [r7, #20]
 800edf0:	6a1b      	ldr	r3, [r3, #32]
 800edf2:	1ad3      	subs	r3, r2, r3
 800edf4:	68fa      	ldr	r2, [r7, #12]
 800edf6:	429a      	cmp	r2, r3
 800edf8:	d807      	bhi.n	800ee0a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800edfa:	4b10      	ldr	r3, [pc, #64]	; (800ee3c <tcp_kill_state+0x90>)
 800edfc:	681a      	ldr	r2, [r3, #0]
 800edfe:	697b      	ldr	r3, [r7, #20]
 800ee00:	6a1b      	ldr	r3, [r3, #32]
 800ee02:	1ad3      	subs	r3, r2, r3
 800ee04:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800ee06:	697b      	ldr	r3, [r7, #20]
 800ee08:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ee0a:	697b      	ldr	r3, [r7, #20]
 800ee0c:	68db      	ldr	r3, [r3, #12]
 800ee0e:	617b      	str	r3, [r7, #20]
 800ee10:	697b      	ldr	r3, [r7, #20]
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d1e4      	bne.n	800ede0 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800ee16:	693b      	ldr	r3, [r7, #16]
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d003      	beq.n	800ee24 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800ee1c:	2100      	movs	r1, #0
 800ee1e:	6938      	ldr	r0, [r7, #16]
 800ee20:	f7ff f952 	bl	800e0c8 <tcp_abandon>
  }
}
 800ee24:	bf00      	nop
 800ee26:	3718      	adds	r7, #24
 800ee28:	46bd      	mov	sp, r7
 800ee2a:	bd80      	pop	{r7, pc}
 800ee2c:	0801a750 	.word	0x0801a750
 800ee30:	0801acdc 	.word	0x0801acdc
 800ee34:	0801a794 	.word	0x0801a794
 800ee38:	2000c898 	.word	0x2000c898
 800ee3c:	2000c88c 	.word	0x2000c88c

0800ee40 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800ee40:	b580      	push	{r7, lr}
 800ee42:	b084      	sub	sp, #16
 800ee44:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800ee46:	2300      	movs	r3, #0
 800ee48:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800ee4a:	2300      	movs	r3, #0
 800ee4c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ee4e:	4b12      	ldr	r3, [pc, #72]	; (800ee98 <tcp_kill_timewait+0x58>)
 800ee50:	681b      	ldr	r3, [r3, #0]
 800ee52:	60fb      	str	r3, [r7, #12]
 800ee54:	e012      	b.n	800ee7c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ee56:	4b11      	ldr	r3, [pc, #68]	; (800ee9c <tcp_kill_timewait+0x5c>)
 800ee58:	681a      	ldr	r2, [r3, #0]
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	6a1b      	ldr	r3, [r3, #32]
 800ee5e:	1ad3      	subs	r3, r2, r3
 800ee60:	687a      	ldr	r2, [r7, #4]
 800ee62:	429a      	cmp	r2, r3
 800ee64:	d807      	bhi.n	800ee76 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800ee66:	4b0d      	ldr	r3, [pc, #52]	; (800ee9c <tcp_kill_timewait+0x5c>)
 800ee68:	681a      	ldr	r2, [r3, #0]
 800ee6a:	68fb      	ldr	r3, [r7, #12]
 800ee6c:	6a1b      	ldr	r3, [r3, #32]
 800ee6e:	1ad3      	subs	r3, r2, r3
 800ee70:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ee76:	68fb      	ldr	r3, [r7, #12]
 800ee78:	68db      	ldr	r3, [r3, #12]
 800ee7a:	60fb      	str	r3, [r7, #12]
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d1e9      	bne.n	800ee56 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800ee82:	68bb      	ldr	r3, [r7, #8]
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d002      	beq.n	800ee8e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800ee88:	68b8      	ldr	r0, [r7, #8]
 800ee8a:	f7ff f9db 	bl	800e244 <tcp_abort>
  }
}
 800ee8e:	bf00      	nop
 800ee90:	3710      	adds	r7, #16
 800ee92:	46bd      	mov	sp, r7
 800ee94:	bd80      	pop	{r7, pc}
 800ee96:	bf00      	nop
 800ee98:	2000c89c 	.word	0x2000c89c
 800ee9c:	2000c88c 	.word	0x2000c88c

0800eea0 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800eea0:	b580      	push	{r7, lr}
 800eea2:	b082      	sub	sp, #8
 800eea4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800eea6:	4b10      	ldr	r3, [pc, #64]	; (800eee8 <tcp_handle_closepend+0x48>)
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800eeac:	e014      	b.n	800eed8 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	68db      	ldr	r3, [r3, #12]
 800eeb2:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	8b5b      	ldrh	r3, [r3, #26]
 800eeb8:	f003 0308 	and.w	r3, r3, #8
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	d009      	beq.n	800eed4 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	8b5b      	ldrh	r3, [r3, #26]
 800eec4:	f023 0308 	bic.w	r3, r3, #8
 800eec8:	b29a      	uxth	r2, r3
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800eece:	6878      	ldr	r0, [r7, #4]
 800eed0:	f7ff f864 	bl	800df9c <tcp_close_shutdown_fin>
    }
    pcb = next;
 800eed4:	683b      	ldr	r3, [r7, #0]
 800eed6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d1e7      	bne.n	800eeae <tcp_handle_closepend+0xe>
  }
}
 800eede:	bf00      	nop
 800eee0:	bf00      	nop
 800eee2:	3708      	adds	r7, #8
 800eee4:	46bd      	mov	sp, r7
 800eee6:	bd80      	pop	{r7, pc}
 800eee8:	2000c898 	.word	0x2000c898

0800eeec <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800eeec:	b580      	push	{r7, lr}
 800eeee:	b084      	sub	sp, #16
 800eef0:	af00      	add	r7, sp, #0
 800eef2:	4603      	mov	r3, r0
 800eef4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800eef6:	2001      	movs	r0, #1
 800eef8:	f7fd fd42 	bl	800c980 <memp_malloc>
 800eefc:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800eefe:	68fb      	ldr	r3, [r7, #12]
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d126      	bne.n	800ef52 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800ef04:	f7ff ffcc 	bl	800eea0 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800ef08:	f7ff ff9a 	bl	800ee40 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ef0c:	2001      	movs	r0, #1
 800ef0e:	f7fd fd37 	bl	800c980 <memp_malloc>
 800ef12:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800ef14:	68fb      	ldr	r3, [r7, #12]
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d11b      	bne.n	800ef52 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800ef1a:	2009      	movs	r0, #9
 800ef1c:	f7ff ff46 	bl	800edac <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ef20:	2001      	movs	r0, #1
 800ef22:	f7fd fd2d 	bl	800c980 <memp_malloc>
 800ef26:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800ef28:	68fb      	ldr	r3, [r7, #12]
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d111      	bne.n	800ef52 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800ef2e:	2008      	movs	r0, #8
 800ef30:	f7ff ff3c 	bl	800edac <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ef34:	2001      	movs	r0, #1
 800ef36:	f7fd fd23 	bl	800c980 <memp_malloc>
 800ef3a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800ef3c:	68fb      	ldr	r3, [r7, #12]
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	d107      	bne.n	800ef52 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800ef42:	79fb      	ldrb	r3, [r7, #7]
 800ef44:	4618      	mov	r0, r3
 800ef46:	f7ff fee3 	bl	800ed10 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ef4a:	2001      	movs	r0, #1
 800ef4c:	f7fd fd18 	bl	800c980 <memp_malloc>
 800ef50:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800ef52:	68fb      	ldr	r3, [r7, #12]
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d03f      	beq.n	800efd8 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800ef58:	229c      	movs	r2, #156	; 0x9c
 800ef5a:	2100      	movs	r1, #0
 800ef5c:	68f8      	ldr	r0, [r7, #12]
 800ef5e:	f009 fd95 	bl	8018a8c <memset>
    pcb->prio = prio;
 800ef62:	68fb      	ldr	r3, [r7, #12]
 800ef64:	79fa      	ldrb	r2, [r7, #7]
 800ef66:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800ef6e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800ef78:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800ef7e:	68fb      	ldr	r3, [r7, #12]
 800ef80:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800ef82:	68fb      	ldr	r3, [r7, #12]
 800ef84:	22ff      	movs	r2, #255	; 0xff
 800ef86:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800ef88:	68fb      	ldr	r3, [r7, #12]
 800ef8a:	f44f 7206 	mov.w	r2, #536	; 0x218
 800ef8e:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	2206      	movs	r2, #6
 800ef94:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	2206      	movs	r2, #6
 800ef9c:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800ef9e:	68fb      	ldr	r3, [r7, #12]
 800efa0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800efa4:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800efa6:	68fb      	ldr	r3, [r7, #12]
 800efa8:	2201      	movs	r2, #1
 800efaa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800efae:	4b0d      	ldr	r3, [pc, #52]	; (800efe4 <tcp_alloc+0xf8>)
 800efb0:	681a      	ldr	r2, [r3, #0]
 800efb2:	68fb      	ldr	r3, [r7, #12]
 800efb4:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800efb6:	4b0c      	ldr	r3, [pc, #48]	; (800efe8 <tcp_alloc+0xfc>)
 800efb8:	781a      	ldrb	r2, [r3, #0]
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800efc4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800efc8:	68fb      	ldr	r3, [r7, #12]
 800efca:	4a08      	ldr	r2, [pc, #32]	; (800efec <tcp_alloc+0x100>)
 800efcc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	4a07      	ldr	r2, [pc, #28]	; (800eff0 <tcp_alloc+0x104>)
 800efd4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800efd8:	68fb      	ldr	r3, [r7, #12]
}
 800efda:	4618      	mov	r0, r3
 800efdc:	3710      	adds	r7, #16
 800efde:	46bd      	mov	sp, r7
 800efe0:	bd80      	pop	{r7, pc}
 800efe2:	bf00      	nop
 800efe4:	2000c88c 	.word	0x2000c88c
 800efe8:	2000c8a2 	.word	0x2000c8a2
 800efec:	0800eca5 	.word	0x0800eca5
 800eff0:	006ddd00 	.word	0x006ddd00

0800eff4 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800eff4:	b580      	push	{r7, lr}
 800eff6:	b082      	sub	sp, #8
 800eff8:	af00      	add	r7, sp, #0
 800effa:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	2b00      	cmp	r3, #0
 800f000:	d107      	bne.n	800f012 <tcp_pcb_purge+0x1e>
 800f002:	4b21      	ldr	r3, [pc, #132]	; (800f088 <tcp_pcb_purge+0x94>)
 800f004:	f640 0251 	movw	r2, #2129	; 0x851
 800f008:	4920      	ldr	r1, [pc, #128]	; (800f08c <tcp_pcb_purge+0x98>)
 800f00a:	4821      	ldr	r0, [pc, #132]	; (800f090 <tcp_pcb_purge+0x9c>)
 800f00c:	f009 fd46 	bl	8018a9c <iprintf>
 800f010:	e037      	b.n	800f082 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	7d1b      	ldrb	r3, [r3, #20]
 800f016:	2b00      	cmp	r3, #0
 800f018:	d033      	beq.n	800f082 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800f01e:	2b0a      	cmp	r3, #10
 800f020:	d02f      	beq.n	800f082 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800f026:	2b01      	cmp	r3, #1
 800f028:	d02b      	beq.n	800f082 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d007      	beq.n	800f042 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f036:	4618      	mov	r0, r3
 800f038:	f7fe fb60 	bl	800d6fc <pbuf_free>
      pcb->refused_data = NULL;
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	2200      	movs	r2, #0
 800f040:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f046:	2b00      	cmp	r3, #0
 800f048:	d002      	beq.n	800f050 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800f04a:	6878      	ldr	r0, [r7, #4]
 800f04c:	f000 f986 	bl	800f35c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f056:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f05c:	4618      	mov	r0, r3
 800f05e:	f7ff fdc7 	bl	800ebf0 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f066:	4618      	mov	r0, r3
 800f068:	f7ff fdc2 	bl	800ebf0 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	2200      	movs	r2, #0
 800f070:	66da      	str	r2, [r3, #108]	; 0x6c
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	2200      	movs	r2, #0
 800f07e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800f082:	3708      	adds	r7, #8
 800f084:	46bd      	mov	sp, r7
 800f086:	bd80      	pop	{r7, pc}
 800f088:	0801a750 	.word	0x0801a750
 800f08c:	0801ad9c 	.word	0x0801ad9c
 800f090:	0801a794 	.word	0x0801a794

0800f094 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800f094:	b580      	push	{r7, lr}
 800f096:	b084      	sub	sp, #16
 800f098:	af00      	add	r7, sp, #0
 800f09a:	6078      	str	r0, [r7, #4]
 800f09c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800f09e:	683b      	ldr	r3, [r7, #0]
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d106      	bne.n	800f0b2 <tcp_pcb_remove+0x1e>
 800f0a4:	4b3e      	ldr	r3, [pc, #248]	; (800f1a0 <tcp_pcb_remove+0x10c>)
 800f0a6:	f640 0283 	movw	r2, #2179	; 0x883
 800f0aa:	493e      	ldr	r1, [pc, #248]	; (800f1a4 <tcp_pcb_remove+0x110>)
 800f0ac:	483e      	ldr	r0, [pc, #248]	; (800f1a8 <tcp_pcb_remove+0x114>)
 800f0ae:	f009 fcf5 	bl	8018a9c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d106      	bne.n	800f0c6 <tcp_pcb_remove+0x32>
 800f0b8:	4b39      	ldr	r3, [pc, #228]	; (800f1a0 <tcp_pcb_remove+0x10c>)
 800f0ba:	f640 0284 	movw	r2, #2180	; 0x884
 800f0be:	493b      	ldr	r1, [pc, #236]	; (800f1ac <tcp_pcb_remove+0x118>)
 800f0c0:	4839      	ldr	r0, [pc, #228]	; (800f1a8 <tcp_pcb_remove+0x114>)
 800f0c2:	f009 fceb 	bl	8018a9c <iprintf>

  TCP_RMV(pcblist, pcb);
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	683a      	ldr	r2, [r7, #0]
 800f0cc:	429a      	cmp	r2, r3
 800f0ce:	d105      	bne.n	800f0dc <tcp_pcb_remove+0x48>
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	681b      	ldr	r3, [r3, #0]
 800f0d4:	68da      	ldr	r2, [r3, #12]
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	601a      	str	r2, [r3, #0]
 800f0da:	e013      	b.n	800f104 <tcp_pcb_remove+0x70>
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	60fb      	str	r3, [r7, #12]
 800f0e2:	e00c      	b.n	800f0fe <tcp_pcb_remove+0x6a>
 800f0e4:	68fb      	ldr	r3, [r7, #12]
 800f0e6:	68db      	ldr	r3, [r3, #12]
 800f0e8:	683a      	ldr	r2, [r7, #0]
 800f0ea:	429a      	cmp	r2, r3
 800f0ec:	d104      	bne.n	800f0f8 <tcp_pcb_remove+0x64>
 800f0ee:	683b      	ldr	r3, [r7, #0]
 800f0f0:	68da      	ldr	r2, [r3, #12]
 800f0f2:	68fb      	ldr	r3, [r7, #12]
 800f0f4:	60da      	str	r2, [r3, #12]
 800f0f6:	e005      	b.n	800f104 <tcp_pcb_remove+0x70>
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	68db      	ldr	r3, [r3, #12]
 800f0fc:	60fb      	str	r3, [r7, #12]
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	2b00      	cmp	r3, #0
 800f102:	d1ef      	bne.n	800f0e4 <tcp_pcb_remove+0x50>
 800f104:	683b      	ldr	r3, [r7, #0]
 800f106:	2200      	movs	r2, #0
 800f108:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800f10a:	6838      	ldr	r0, [r7, #0]
 800f10c:	f7ff ff72 	bl	800eff4 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800f110:	683b      	ldr	r3, [r7, #0]
 800f112:	7d1b      	ldrb	r3, [r3, #20]
 800f114:	2b0a      	cmp	r3, #10
 800f116:	d013      	beq.n	800f140 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800f118:	683b      	ldr	r3, [r7, #0]
 800f11a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800f11c:	2b01      	cmp	r3, #1
 800f11e:	d00f      	beq.n	800f140 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800f120:	683b      	ldr	r3, [r7, #0]
 800f122:	8b5b      	ldrh	r3, [r3, #26]
 800f124:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d009      	beq.n	800f140 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800f12c:	683b      	ldr	r3, [r7, #0]
 800f12e:	8b5b      	ldrh	r3, [r3, #26]
 800f130:	f043 0302 	orr.w	r3, r3, #2
 800f134:	b29a      	uxth	r2, r3
 800f136:	683b      	ldr	r3, [r7, #0]
 800f138:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f13a:	6838      	ldr	r0, [r7, #0]
 800f13c:	f002 ff6e 	bl	801201c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800f140:	683b      	ldr	r3, [r7, #0]
 800f142:	7d1b      	ldrb	r3, [r3, #20]
 800f144:	2b01      	cmp	r3, #1
 800f146:	d020      	beq.n	800f18a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800f148:	683b      	ldr	r3, [r7, #0]
 800f14a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	d006      	beq.n	800f15e <tcp_pcb_remove+0xca>
 800f150:	4b13      	ldr	r3, [pc, #76]	; (800f1a0 <tcp_pcb_remove+0x10c>)
 800f152:	f640 0293 	movw	r2, #2195	; 0x893
 800f156:	4916      	ldr	r1, [pc, #88]	; (800f1b0 <tcp_pcb_remove+0x11c>)
 800f158:	4813      	ldr	r0, [pc, #76]	; (800f1a8 <tcp_pcb_remove+0x114>)
 800f15a:	f009 fc9f 	bl	8018a9c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800f15e:	683b      	ldr	r3, [r7, #0]
 800f160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f162:	2b00      	cmp	r3, #0
 800f164:	d006      	beq.n	800f174 <tcp_pcb_remove+0xe0>
 800f166:	4b0e      	ldr	r3, [pc, #56]	; (800f1a0 <tcp_pcb_remove+0x10c>)
 800f168:	f640 0294 	movw	r2, #2196	; 0x894
 800f16c:	4911      	ldr	r1, [pc, #68]	; (800f1b4 <tcp_pcb_remove+0x120>)
 800f16e:	480e      	ldr	r0, [pc, #56]	; (800f1a8 <tcp_pcb_remove+0x114>)
 800f170:	f009 fc94 	bl	8018a9c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800f174:	683b      	ldr	r3, [r7, #0]
 800f176:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d006      	beq.n	800f18a <tcp_pcb_remove+0xf6>
 800f17c:	4b08      	ldr	r3, [pc, #32]	; (800f1a0 <tcp_pcb_remove+0x10c>)
 800f17e:	f640 0296 	movw	r2, #2198	; 0x896
 800f182:	490d      	ldr	r1, [pc, #52]	; (800f1b8 <tcp_pcb_remove+0x124>)
 800f184:	4808      	ldr	r0, [pc, #32]	; (800f1a8 <tcp_pcb_remove+0x114>)
 800f186:	f009 fc89 	bl	8018a9c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800f18a:	683b      	ldr	r3, [r7, #0]
 800f18c:	2200      	movs	r2, #0
 800f18e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800f190:	683b      	ldr	r3, [r7, #0]
 800f192:	2200      	movs	r2, #0
 800f194:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800f196:	bf00      	nop
 800f198:	3710      	adds	r7, #16
 800f19a:	46bd      	mov	sp, r7
 800f19c:	bd80      	pop	{r7, pc}
 800f19e:	bf00      	nop
 800f1a0:	0801a750 	.word	0x0801a750
 800f1a4:	0801adb8 	.word	0x0801adb8
 800f1a8:	0801a794 	.word	0x0801a794
 800f1ac:	0801add4 	.word	0x0801add4
 800f1b0:	0801adf4 	.word	0x0801adf4
 800f1b4:	0801ae0c 	.word	0x0801ae0c
 800f1b8:	0801ae28 	.word	0x0801ae28

0800f1bc <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800f1bc:	b580      	push	{r7, lr}
 800f1be:	b082      	sub	sp, #8
 800f1c0:	af00      	add	r7, sp, #0
 800f1c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d106      	bne.n	800f1d8 <tcp_next_iss+0x1c>
 800f1ca:	4b0a      	ldr	r3, [pc, #40]	; (800f1f4 <tcp_next_iss+0x38>)
 800f1cc:	f640 02af 	movw	r2, #2223	; 0x8af
 800f1d0:	4909      	ldr	r1, [pc, #36]	; (800f1f8 <tcp_next_iss+0x3c>)
 800f1d2:	480a      	ldr	r0, [pc, #40]	; (800f1fc <tcp_next_iss+0x40>)
 800f1d4:	f009 fc62 	bl	8018a9c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800f1d8:	4b09      	ldr	r3, [pc, #36]	; (800f200 <tcp_next_iss+0x44>)
 800f1da:	681a      	ldr	r2, [r3, #0]
 800f1dc:	4b09      	ldr	r3, [pc, #36]	; (800f204 <tcp_next_iss+0x48>)
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	4413      	add	r3, r2
 800f1e2:	4a07      	ldr	r2, [pc, #28]	; (800f200 <tcp_next_iss+0x44>)
 800f1e4:	6013      	str	r3, [r2, #0]
  return iss;
 800f1e6:	4b06      	ldr	r3, [pc, #24]	; (800f200 <tcp_next_iss+0x44>)
 800f1e8:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800f1ea:	4618      	mov	r0, r3
 800f1ec:	3708      	adds	r7, #8
 800f1ee:	46bd      	mov	sp, r7
 800f1f0:	bd80      	pop	{r7, pc}
 800f1f2:	bf00      	nop
 800f1f4:	0801a750 	.word	0x0801a750
 800f1f8:	0801ae40 	.word	0x0801ae40
 800f1fc:	0801a794 	.word	0x0801a794
 800f200:	200000a0 	.word	0x200000a0
 800f204:	2000c88c 	.word	0x2000c88c

0800f208 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800f208:	b580      	push	{r7, lr}
 800f20a:	b086      	sub	sp, #24
 800f20c:	af00      	add	r7, sp, #0
 800f20e:	4603      	mov	r3, r0
 800f210:	60b9      	str	r1, [r7, #8]
 800f212:	607a      	str	r2, [r7, #4]
 800f214:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d106      	bne.n	800f22a <tcp_eff_send_mss_netif+0x22>
 800f21c:	4b14      	ldr	r3, [pc, #80]	; (800f270 <tcp_eff_send_mss_netif+0x68>)
 800f21e:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800f222:	4914      	ldr	r1, [pc, #80]	; (800f274 <tcp_eff_send_mss_netif+0x6c>)
 800f224:	4814      	ldr	r0, [pc, #80]	; (800f278 <tcp_eff_send_mss_netif+0x70>)
 800f226:	f009 fc39 	bl	8018a9c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800f22a:	68bb      	ldr	r3, [r7, #8]
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d101      	bne.n	800f234 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800f230:	89fb      	ldrh	r3, [r7, #14]
 800f232:	e019      	b.n	800f268 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800f234:	68bb      	ldr	r3, [r7, #8]
 800f236:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f238:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800f23a:	8afb      	ldrh	r3, [r7, #22]
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d012      	beq.n	800f266 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800f240:	2328      	movs	r3, #40	; 0x28
 800f242:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800f244:	8afa      	ldrh	r2, [r7, #22]
 800f246:	8abb      	ldrh	r3, [r7, #20]
 800f248:	429a      	cmp	r2, r3
 800f24a:	d904      	bls.n	800f256 <tcp_eff_send_mss_netif+0x4e>
 800f24c:	8afa      	ldrh	r2, [r7, #22]
 800f24e:	8abb      	ldrh	r3, [r7, #20]
 800f250:	1ad3      	subs	r3, r2, r3
 800f252:	b29b      	uxth	r3, r3
 800f254:	e000      	b.n	800f258 <tcp_eff_send_mss_netif+0x50>
 800f256:	2300      	movs	r3, #0
 800f258:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800f25a:	8a7a      	ldrh	r2, [r7, #18]
 800f25c:	89fb      	ldrh	r3, [r7, #14]
 800f25e:	4293      	cmp	r3, r2
 800f260:	bf28      	it	cs
 800f262:	4613      	movcs	r3, r2
 800f264:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800f266:	89fb      	ldrh	r3, [r7, #14]
}
 800f268:	4618      	mov	r0, r3
 800f26a:	3718      	adds	r7, #24
 800f26c:	46bd      	mov	sp, r7
 800f26e:	bd80      	pop	{r7, pc}
 800f270:	0801a750 	.word	0x0801a750
 800f274:	0801ae5c 	.word	0x0801ae5c
 800f278:	0801a794 	.word	0x0801a794

0800f27c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800f27c:	b580      	push	{r7, lr}
 800f27e:	b084      	sub	sp, #16
 800f280:	af00      	add	r7, sp, #0
 800f282:	6078      	str	r0, [r7, #4]
 800f284:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800f286:	683b      	ldr	r3, [r7, #0]
 800f288:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d119      	bne.n	800f2c4 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800f290:	4b10      	ldr	r3, [pc, #64]	; (800f2d4 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800f292:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800f296:	4910      	ldr	r1, [pc, #64]	; (800f2d8 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800f298:	4810      	ldr	r0, [pc, #64]	; (800f2dc <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800f29a:	f009 fbff 	bl	8018a9c <iprintf>

  while (pcb != NULL) {
 800f29e:	e011      	b.n	800f2c4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800f2a0:	68fb      	ldr	r3, [r7, #12]
 800f2a2:	681a      	ldr	r2, [r3, #0]
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	681b      	ldr	r3, [r3, #0]
 800f2a8:	429a      	cmp	r2, r3
 800f2aa:	d108      	bne.n	800f2be <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800f2ac:	68fb      	ldr	r3, [r7, #12]
 800f2ae:	68db      	ldr	r3, [r3, #12]
 800f2b0:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800f2b2:	68f8      	ldr	r0, [r7, #12]
 800f2b4:	f7fe ffc6 	bl	800e244 <tcp_abort>
      pcb = next;
 800f2b8:	68bb      	ldr	r3, [r7, #8]
 800f2ba:	60fb      	str	r3, [r7, #12]
 800f2bc:	e002      	b.n	800f2c4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800f2be:	68fb      	ldr	r3, [r7, #12]
 800f2c0:	68db      	ldr	r3, [r3, #12]
 800f2c2:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800f2c4:	68fb      	ldr	r3, [r7, #12]
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d1ea      	bne.n	800f2a0 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800f2ca:	bf00      	nop
 800f2cc:	bf00      	nop
 800f2ce:	3710      	adds	r7, #16
 800f2d0:	46bd      	mov	sp, r7
 800f2d2:	bd80      	pop	{r7, pc}
 800f2d4:	0801a750 	.word	0x0801a750
 800f2d8:	0801ae84 	.word	0x0801ae84
 800f2dc:	0801a794 	.word	0x0801a794

0800f2e0 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800f2e0:	b580      	push	{r7, lr}
 800f2e2:	b084      	sub	sp, #16
 800f2e4:	af00      	add	r7, sp, #0
 800f2e6:	6078      	str	r0, [r7, #4]
 800f2e8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d02a      	beq.n	800f346 <tcp_netif_ip_addr_changed+0x66>
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	d026      	beq.n	800f346 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800f2f8:	4b15      	ldr	r3, [pc, #84]	; (800f350 <tcp_netif_ip_addr_changed+0x70>)
 800f2fa:	681b      	ldr	r3, [r3, #0]
 800f2fc:	4619      	mov	r1, r3
 800f2fe:	6878      	ldr	r0, [r7, #4]
 800f300:	f7ff ffbc 	bl	800f27c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800f304:	4b13      	ldr	r3, [pc, #76]	; (800f354 <tcp_netif_ip_addr_changed+0x74>)
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	4619      	mov	r1, r3
 800f30a:	6878      	ldr	r0, [r7, #4]
 800f30c:	f7ff ffb6 	bl	800f27c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800f310:	683b      	ldr	r3, [r7, #0]
 800f312:	2b00      	cmp	r3, #0
 800f314:	d017      	beq.n	800f346 <tcp_netif_ip_addr_changed+0x66>
 800f316:	683b      	ldr	r3, [r7, #0]
 800f318:	681b      	ldr	r3, [r3, #0]
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d013      	beq.n	800f346 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f31e:	4b0e      	ldr	r3, [pc, #56]	; (800f358 <tcp_netif_ip_addr_changed+0x78>)
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	60fb      	str	r3, [r7, #12]
 800f324:	e00c      	b.n	800f340 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800f326:	68fb      	ldr	r3, [r7, #12]
 800f328:	681a      	ldr	r2, [r3, #0]
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	681b      	ldr	r3, [r3, #0]
 800f32e:	429a      	cmp	r2, r3
 800f330:	d103      	bne.n	800f33a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800f332:	683b      	ldr	r3, [r7, #0]
 800f334:	681a      	ldr	r2, [r3, #0]
 800f336:	68fb      	ldr	r3, [r7, #12]
 800f338:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f33a:	68fb      	ldr	r3, [r7, #12]
 800f33c:	68db      	ldr	r3, [r3, #12]
 800f33e:	60fb      	str	r3, [r7, #12]
 800f340:	68fb      	ldr	r3, [r7, #12]
 800f342:	2b00      	cmp	r3, #0
 800f344:	d1ef      	bne.n	800f326 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800f346:	bf00      	nop
 800f348:	3710      	adds	r7, #16
 800f34a:	46bd      	mov	sp, r7
 800f34c:	bd80      	pop	{r7, pc}
 800f34e:	bf00      	nop
 800f350:	2000c898 	.word	0x2000c898
 800f354:	2000c890 	.word	0x2000c890
 800f358:	2000c894 	.word	0x2000c894

0800f35c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800f35c:	b580      	push	{r7, lr}
 800f35e:	b082      	sub	sp, #8
 800f360:	af00      	add	r7, sp, #0
 800f362:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f368:	2b00      	cmp	r3, #0
 800f36a:	d007      	beq.n	800f37c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f370:	4618      	mov	r0, r3
 800f372:	f7ff fc3d 	bl	800ebf0 <tcp_segs_free>
    pcb->ooseq = NULL;
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	2200      	movs	r2, #0
 800f37a:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800f37c:	bf00      	nop
 800f37e:	3708      	adds	r7, #8
 800f380:	46bd      	mov	sp, r7
 800f382:	bd80      	pop	{r7, pc}

0800f384 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800f384:	b590      	push	{r4, r7, lr}
 800f386:	b08d      	sub	sp, #52	; 0x34
 800f388:	af04      	add	r7, sp, #16
 800f38a:	6078      	str	r0, [r7, #4]
 800f38c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	2b00      	cmp	r3, #0
 800f392:	d105      	bne.n	800f3a0 <tcp_input+0x1c>
 800f394:	4b9b      	ldr	r3, [pc, #620]	; (800f604 <tcp_input+0x280>)
 800f396:	2283      	movs	r2, #131	; 0x83
 800f398:	499b      	ldr	r1, [pc, #620]	; (800f608 <tcp_input+0x284>)
 800f39a:	489c      	ldr	r0, [pc, #624]	; (800f60c <tcp_input+0x288>)
 800f39c:	f009 fb7e 	bl	8018a9c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	685b      	ldr	r3, [r3, #4]
 800f3a4:	4a9a      	ldr	r2, [pc, #616]	; (800f610 <tcp_input+0x28c>)
 800f3a6:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	895b      	ldrh	r3, [r3, #10]
 800f3ac:	2b13      	cmp	r3, #19
 800f3ae:	f240 83d1 	bls.w	800fb54 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f3b2:	4b98      	ldr	r3, [pc, #608]	; (800f614 <tcp_input+0x290>)
 800f3b4:	695b      	ldr	r3, [r3, #20]
 800f3b6:	4a97      	ldr	r2, [pc, #604]	; (800f614 <tcp_input+0x290>)
 800f3b8:	6812      	ldr	r2, [r2, #0]
 800f3ba:	4611      	mov	r1, r2
 800f3bc:	4618      	mov	r0, r3
 800f3be:	f007 fde7 	bl	8016f90 <ip4_addr_isbroadcast_u32>
 800f3c2:	4603      	mov	r3, r0
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	f040 83c7 	bne.w	800fb58 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800f3ca:	4b92      	ldr	r3, [pc, #584]	; (800f614 <tcp_input+0x290>)
 800f3cc:	695b      	ldr	r3, [r3, #20]
 800f3ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f3d2:	2be0      	cmp	r3, #224	; 0xe0
 800f3d4:	f000 83c0 	beq.w	800fb58 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800f3d8:	4b8d      	ldr	r3, [pc, #564]	; (800f610 <tcp_input+0x28c>)
 800f3da:	681b      	ldr	r3, [r3, #0]
 800f3dc:	899b      	ldrh	r3, [r3, #12]
 800f3de:	b29b      	uxth	r3, r3
 800f3e0:	4618      	mov	r0, r3
 800f3e2:	f7fc fd3d 	bl	800be60 <lwip_htons>
 800f3e6:	4603      	mov	r3, r0
 800f3e8:	0b1b      	lsrs	r3, r3, #12
 800f3ea:	b29b      	uxth	r3, r3
 800f3ec:	b2db      	uxtb	r3, r3
 800f3ee:	009b      	lsls	r3, r3, #2
 800f3f0:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800f3f2:	7cbb      	ldrb	r3, [r7, #18]
 800f3f4:	2b13      	cmp	r3, #19
 800f3f6:	f240 83b1 	bls.w	800fb5c <tcp_input+0x7d8>
 800f3fa:	7cbb      	ldrb	r3, [r7, #18]
 800f3fc:	b29a      	uxth	r2, r3
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	891b      	ldrh	r3, [r3, #8]
 800f402:	429a      	cmp	r2, r3
 800f404:	f200 83aa 	bhi.w	800fb5c <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800f408:	7cbb      	ldrb	r3, [r7, #18]
 800f40a:	b29b      	uxth	r3, r3
 800f40c:	3b14      	subs	r3, #20
 800f40e:	b29a      	uxth	r2, r3
 800f410:	4b81      	ldr	r3, [pc, #516]	; (800f618 <tcp_input+0x294>)
 800f412:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800f414:	4b81      	ldr	r3, [pc, #516]	; (800f61c <tcp_input+0x298>)
 800f416:	2200      	movs	r2, #0
 800f418:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	895a      	ldrh	r2, [r3, #10]
 800f41e:	7cbb      	ldrb	r3, [r7, #18]
 800f420:	b29b      	uxth	r3, r3
 800f422:	429a      	cmp	r2, r3
 800f424:	d309      	bcc.n	800f43a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800f426:	4b7c      	ldr	r3, [pc, #496]	; (800f618 <tcp_input+0x294>)
 800f428:	881a      	ldrh	r2, [r3, #0]
 800f42a:	4b7d      	ldr	r3, [pc, #500]	; (800f620 <tcp_input+0x29c>)
 800f42c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800f42e:	7cbb      	ldrb	r3, [r7, #18]
 800f430:	4619      	mov	r1, r3
 800f432:	6878      	ldr	r0, [r7, #4]
 800f434:	f7fe f8dc 	bl	800d5f0 <pbuf_remove_header>
 800f438:	e04e      	b.n	800f4d8 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	681b      	ldr	r3, [r3, #0]
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d105      	bne.n	800f44e <tcp_input+0xca>
 800f442:	4b70      	ldr	r3, [pc, #448]	; (800f604 <tcp_input+0x280>)
 800f444:	22c2      	movs	r2, #194	; 0xc2
 800f446:	4977      	ldr	r1, [pc, #476]	; (800f624 <tcp_input+0x2a0>)
 800f448:	4870      	ldr	r0, [pc, #448]	; (800f60c <tcp_input+0x288>)
 800f44a:	f009 fb27 	bl	8018a9c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800f44e:	2114      	movs	r1, #20
 800f450:	6878      	ldr	r0, [r7, #4]
 800f452:	f7fe f8cd 	bl	800d5f0 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	895a      	ldrh	r2, [r3, #10]
 800f45a:	4b71      	ldr	r3, [pc, #452]	; (800f620 <tcp_input+0x29c>)
 800f45c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800f45e:	4b6e      	ldr	r3, [pc, #440]	; (800f618 <tcp_input+0x294>)
 800f460:	881a      	ldrh	r2, [r3, #0]
 800f462:	4b6f      	ldr	r3, [pc, #444]	; (800f620 <tcp_input+0x29c>)
 800f464:	881b      	ldrh	r3, [r3, #0]
 800f466:	1ad3      	subs	r3, r2, r3
 800f468:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800f46a:	4b6d      	ldr	r3, [pc, #436]	; (800f620 <tcp_input+0x29c>)
 800f46c:	881b      	ldrh	r3, [r3, #0]
 800f46e:	4619      	mov	r1, r3
 800f470:	6878      	ldr	r0, [r7, #4]
 800f472:	f7fe f8bd 	bl	800d5f0 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	895b      	ldrh	r3, [r3, #10]
 800f47c:	8a3a      	ldrh	r2, [r7, #16]
 800f47e:	429a      	cmp	r2, r3
 800f480:	f200 836e 	bhi.w	800fb60 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	681b      	ldr	r3, [r3, #0]
 800f488:	685b      	ldr	r3, [r3, #4]
 800f48a:	4a64      	ldr	r2, [pc, #400]	; (800f61c <tcp_input+0x298>)
 800f48c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	8a3a      	ldrh	r2, [r7, #16]
 800f494:	4611      	mov	r1, r2
 800f496:	4618      	mov	r0, r3
 800f498:	f7fe f8aa 	bl	800d5f0 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	891a      	ldrh	r2, [r3, #8]
 800f4a0:	8a3b      	ldrh	r3, [r7, #16]
 800f4a2:	1ad3      	subs	r3, r2, r3
 800f4a4:	b29a      	uxth	r2, r3
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	895b      	ldrh	r3, [r3, #10]
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d005      	beq.n	800f4be <tcp_input+0x13a>
 800f4b2:	4b54      	ldr	r3, [pc, #336]	; (800f604 <tcp_input+0x280>)
 800f4b4:	22df      	movs	r2, #223	; 0xdf
 800f4b6:	495c      	ldr	r1, [pc, #368]	; (800f628 <tcp_input+0x2a4>)
 800f4b8:	4854      	ldr	r0, [pc, #336]	; (800f60c <tcp_input+0x288>)
 800f4ba:	f009 faef 	bl	8018a9c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	891a      	ldrh	r2, [r3, #8]
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	681b      	ldr	r3, [r3, #0]
 800f4c6:	891b      	ldrh	r3, [r3, #8]
 800f4c8:	429a      	cmp	r2, r3
 800f4ca:	d005      	beq.n	800f4d8 <tcp_input+0x154>
 800f4cc:	4b4d      	ldr	r3, [pc, #308]	; (800f604 <tcp_input+0x280>)
 800f4ce:	22e0      	movs	r2, #224	; 0xe0
 800f4d0:	4956      	ldr	r1, [pc, #344]	; (800f62c <tcp_input+0x2a8>)
 800f4d2:	484e      	ldr	r0, [pc, #312]	; (800f60c <tcp_input+0x288>)
 800f4d4:	f009 fae2 	bl	8018a9c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800f4d8:	4b4d      	ldr	r3, [pc, #308]	; (800f610 <tcp_input+0x28c>)
 800f4da:	681b      	ldr	r3, [r3, #0]
 800f4dc:	881b      	ldrh	r3, [r3, #0]
 800f4de:	b29b      	uxth	r3, r3
 800f4e0:	4a4b      	ldr	r2, [pc, #300]	; (800f610 <tcp_input+0x28c>)
 800f4e2:	6814      	ldr	r4, [r2, #0]
 800f4e4:	4618      	mov	r0, r3
 800f4e6:	f7fc fcbb 	bl	800be60 <lwip_htons>
 800f4ea:	4603      	mov	r3, r0
 800f4ec:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800f4ee:	4b48      	ldr	r3, [pc, #288]	; (800f610 <tcp_input+0x28c>)
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	885b      	ldrh	r3, [r3, #2]
 800f4f4:	b29b      	uxth	r3, r3
 800f4f6:	4a46      	ldr	r2, [pc, #280]	; (800f610 <tcp_input+0x28c>)
 800f4f8:	6814      	ldr	r4, [r2, #0]
 800f4fa:	4618      	mov	r0, r3
 800f4fc:	f7fc fcb0 	bl	800be60 <lwip_htons>
 800f500:	4603      	mov	r3, r0
 800f502:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800f504:	4b42      	ldr	r3, [pc, #264]	; (800f610 <tcp_input+0x28c>)
 800f506:	681b      	ldr	r3, [r3, #0]
 800f508:	685b      	ldr	r3, [r3, #4]
 800f50a:	4a41      	ldr	r2, [pc, #260]	; (800f610 <tcp_input+0x28c>)
 800f50c:	6814      	ldr	r4, [r2, #0]
 800f50e:	4618      	mov	r0, r3
 800f510:	f7fc fcbb 	bl	800be8a <lwip_htonl>
 800f514:	4603      	mov	r3, r0
 800f516:	6063      	str	r3, [r4, #4]
 800f518:	6863      	ldr	r3, [r4, #4]
 800f51a:	4a45      	ldr	r2, [pc, #276]	; (800f630 <tcp_input+0x2ac>)
 800f51c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800f51e:	4b3c      	ldr	r3, [pc, #240]	; (800f610 <tcp_input+0x28c>)
 800f520:	681b      	ldr	r3, [r3, #0]
 800f522:	689b      	ldr	r3, [r3, #8]
 800f524:	4a3a      	ldr	r2, [pc, #232]	; (800f610 <tcp_input+0x28c>)
 800f526:	6814      	ldr	r4, [r2, #0]
 800f528:	4618      	mov	r0, r3
 800f52a:	f7fc fcae 	bl	800be8a <lwip_htonl>
 800f52e:	4603      	mov	r3, r0
 800f530:	60a3      	str	r3, [r4, #8]
 800f532:	68a3      	ldr	r3, [r4, #8]
 800f534:	4a3f      	ldr	r2, [pc, #252]	; (800f634 <tcp_input+0x2b0>)
 800f536:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800f538:	4b35      	ldr	r3, [pc, #212]	; (800f610 <tcp_input+0x28c>)
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	89db      	ldrh	r3, [r3, #14]
 800f53e:	b29b      	uxth	r3, r3
 800f540:	4a33      	ldr	r2, [pc, #204]	; (800f610 <tcp_input+0x28c>)
 800f542:	6814      	ldr	r4, [r2, #0]
 800f544:	4618      	mov	r0, r3
 800f546:	f7fc fc8b 	bl	800be60 <lwip_htons>
 800f54a:	4603      	mov	r3, r0
 800f54c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800f54e:	4b30      	ldr	r3, [pc, #192]	; (800f610 <tcp_input+0x28c>)
 800f550:	681b      	ldr	r3, [r3, #0]
 800f552:	899b      	ldrh	r3, [r3, #12]
 800f554:	b29b      	uxth	r3, r3
 800f556:	4618      	mov	r0, r3
 800f558:	f7fc fc82 	bl	800be60 <lwip_htons>
 800f55c:	4603      	mov	r3, r0
 800f55e:	b2db      	uxtb	r3, r3
 800f560:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f564:	b2da      	uxtb	r2, r3
 800f566:	4b34      	ldr	r3, [pc, #208]	; (800f638 <tcp_input+0x2b4>)
 800f568:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	891a      	ldrh	r2, [r3, #8]
 800f56e:	4b33      	ldr	r3, [pc, #204]	; (800f63c <tcp_input+0x2b8>)
 800f570:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800f572:	4b31      	ldr	r3, [pc, #196]	; (800f638 <tcp_input+0x2b4>)
 800f574:	781b      	ldrb	r3, [r3, #0]
 800f576:	f003 0303 	and.w	r3, r3, #3
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d00c      	beq.n	800f598 <tcp_input+0x214>
    tcplen++;
 800f57e:	4b2f      	ldr	r3, [pc, #188]	; (800f63c <tcp_input+0x2b8>)
 800f580:	881b      	ldrh	r3, [r3, #0]
 800f582:	3301      	adds	r3, #1
 800f584:	b29a      	uxth	r2, r3
 800f586:	4b2d      	ldr	r3, [pc, #180]	; (800f63c <tcp_input+0x2b8>)
 800f588:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	891a      	ldrh	r2, [r3, #8]
 800f58e:	4b2b      	ldr	r3, [pc, #172]	; (800f63c <tcp_input+0x2b8>)
 800f590:	881b      	ldrh	r3, [r3, #0]
 800f592:	429a      	cmp	r2, r3
 800f594:	f200 82e6 	bhi.w	800fb64 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800f598:	2300      	movs	r3, #0
 800f59a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f59c:	4b28      	ldr	r3, [pc, #160]	; (800f640 <tcp_input+0x2bc>)
 800f59e:	681b      	ldr	r3, [r3, #0]
 800f5a0:	61fb      	str	r3, [r7, #28]
 800f5a2:	e09d      	b.n	800f6e0 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800f5a4:	69fb      	ldr	r3, [r7, #28]
 800f5a6:	7d1b      	ldrb	r3, [r3, #20]
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d105      	bne.n	800f5b8 <tcp_input+0x234>
 800f5ac:	4b15      	ldr	r3, [pc, #84]	; (800f604 <tcp_input+0x280>)
 800f5ae:	22fb      	movs	r2, #251	; 0xfb
 800f5b0:	4924      	ldr	r1, [pc, #144]	; (800f644 <tcp_input+0x2c0>)
 800f5b2:	4816      	ldr	r0, [pc, #88]	; (800f60c <tcp_input+0x288>)
 800f5b4:	f009 fa72 	bl	8018a9c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800f5b8:	69fb      	ldr	r3, [r7, #28]
 800f5ba:	7d1b      	ldrb	r3, [r3, #20]
 800f5bc:	2b0a      	cmp	r3, #10
 800f5be:	d105      	bne.n	800f5cc <tcp_input+0x248>
 800f5c0:	4b10      	ldr	r3, [pc, #64]	; (800f604 <tcp_input+0x280>)
 800f5c2:	22fc      	movs	r2, #252	; 0xfc
 800f5c4:	4920      	ldr	r1, [pc, #128]	; (800f648 <tcp_input+0x2c4>)
 800f5c6:	4811      	ldr	r0, [pc, #68]	; (800f60c <tcp_input+0x288>)
 800f5c8:	f009 fa68 	bl	8018a9c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800f5cc:	69fb      	ldr	r3, [r7, #28]
 800f5ce:	7d1b      	ldrb	r3, [r3, #20]
 800f5d0:	2b01      	cmp	r3, #1
 800f5d2:	d105      	bne.n	800f5e0 <tcp_input+0x25c>
 800f5d4:	4b0b      	ldr	r3, [pc, #44]	; (800f604 <tcp_input+0x280>)
 800f5d6:	22fd      	movs	r2, #253	; 0xfd
 800f5d8:	491c      	ldr	r1, [pc, #112]	; (800f64c <tcp_input+0x2c8>)
 800f5da:	480c      	ldr	r0, [pc, #48]	; (800f60c <tcp_input+0x288>)
 800f5dc:	f009 fa5e 	bl	8018a9c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f5e0:	69fb      	ldr	r3, [r7, #28]
 800f5e2:	7a1b      	ldrb	r3, [r3, #8]
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	d033      	beq.n	800f650 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f5e8:	69fb      	ldr	r3, [r7, #28]
 800f5ea:	7a1a      	ldrb	r2, [r3, #8]
 800f5ec:	4b09      	ldr	r3, [pc, #36]	; (800f614 <tcp_input+0x290>)
 800f5ee:	685b      	ldr	r3, [r3, #4]
 800f5f0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f5f4:	3301      	adds	r3, #1
 800f5f6:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f5f8:	429a      	cmp	r2, r3
 800f5fa:	d029      	beq.n	800f650 <tcp_input+0x2cc>
      prev = pcb;
 800f5fc:	69fb      	ldr	r3, [r7, #28]
 800f5fe:	61bb      	str	r3, [r7, #24]
      continue;
 800f600:	e06b      	b.n	800f6da <tcp_input+0x356>
 800f602:	bf00      	nop
 800f604:	0801aeb8 	.word	0x0801aeb8
 800f608:	0801aeec 	.word	0x0801aeec
 800f60c:	0801af04 	.word	0x0801af04
 800f610:	2000c8b4 	.word	0x2000c8b4
 800f614:	2000976c 	.word	0x2000976c
 800f618:	2000c8b8 	.word	0x2000c8b8
 800f61c:	2000c8bc 	.word	0x2000c8bc
 800f620:	2000c8ba 	.word	0x2000c8ba
 800f624:	0801af2c 	.word	0x0801af2c
 800f628:	0801af3c 	.word	0x0801af3c
 800f62c:	0801af48 	.word	0x0801af48
 800f630:	2000c8c4 	.word	0x2000c8c4
 800f634:	2000c8c8 	.word	0x2000c8c8
 800f638:	2000c8d0 	.word	0x2000c8d0
 800f63c:	2000c8ce 	.word	0x2000c8ce
 800f640:	2000c898 	.word	0x2000c898
 800f644:	0801af68 	.word	0x0801af68
 800f648:	0801af90 	.word	0x0801af90
 800f64c:	0801afbc 	.word	0x0801afbc
    }

    if (pcb->remote_port == tcphdr->src &&
 800f650:	69fb      	ldr	r3, [r7, #28]
 800f652:	8b1a      	ldrh	r2, [r3, #24]
 800f654:	4b72      	ldr	r3, [pc, #456]	; (800f820 <tcp_input+0x49c>)
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	881b      	ldrh	r3, [r3, #0]
 800f65a:	b29b      	uxth	r3, r3
 800f65c:	429a      	cmp	r2, r3
 800f65e:	d13a      	bne.n	800f6d6 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800f660:	69fb      	ldr	r3, [r7, #28]
 800f662:	8ada      	ldrh	r2, [r3, #22]
 800f664:	4b6e      	ldr	r3, [pc, #440]	; (800f820 <tcp_input+0x49c>)
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	885b      	ldrh	r3, [r3, #2]
 800f66a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800f66c:	429a      	cmp	r2, r3
 800f66e:	d132      	bne.n	800f6d6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f670:	69fb      	ldr	r3, [r7, #28]
 800f672:	685a      	ldr	r2, [r3, #4]
 800f674:	4b6b      	ldr	r3, [pc, #428]	; (800f824 <tcp_input+0x4a0>)
 800f676:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800f678:	429a      	cmp	r2, r3
 800f67a:	d12c      	bne.n	800f6d6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f67c:	69fb      	ldr	r3, [r7, #28]
 800f67e:	681a      	ldr	r2, [r3, #0]
 800f680:	4b68      	ldr	r3, [pc, #416]	; (800f824 <tcp_input+0x4a0>)
 800f682:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f684:	429a      	cmp	r2, r3
 800f686:	d126      	bne.n	800f6d6 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800f688:	69fb      	ldr	r3, [r7, #28]
 800f68a:	68db      	ldr	r3, [r3, #12]
 800f68c:	69fa      	ldr	r2, [r7, #28]
 800f68e:	429a      	cmp	r2, r3
 800f690:	d106      	bne.n	800f6a0 <tcp_input+0x31c>
 800f692:	4b65      	ldr	r3, [pc, #404]	; (800f828 <tcp_input+0x4a4>)
 800f694:	f240 120d 	movw	r2, #269	; 0x10d
 800f698:	4964      	ldr	r1, [pc, #400]	; (800f82c <tcp_input+0x4a8>)
 800f69a:	4865      	ldr	r0, [pc, #404]	; (800f830 <tcp_input+0x4ac>)
 800f69c:	f009 f9fe 	bl	8018a9c <iprintf>
      if (prev != NULL) {
 800f6a0:	69bb      	ldr	r3, [r7, #24]
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d00a      	beq.n	800f6bc <tcp_input+0x338>
        prev->next = pcb->next;
 800f6a6:	69fb      	ldr	r3, [r7, #28]
 800f6a8:	68da      	ldr	r2, [r3, #12]
 800f6aa:	69bb      	ldr	r3, [r7, #24]
 800f6ac:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800f6ae:	4b61      	ldr	r3, [pc, #388]	; (800f834 <tcp_input+0x4b0>)
 800f6b0:	681a      	ldr	r2, [r3, #0]
 800f6b2:	69fb      	ldr	r3, [r7, #28]
 800f6b4:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800f6b6:	4a5f      	ldr	r2, [pc, #380]	; (800f834 <tcp_input+0x4b0>)
 800f6b8:	69fb      	ldr	r3, [r7, #28]
 800f6ba:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800f6bc:	69fb      	ldr	r3, [r7, #28]
 800f6be:	68db      	ldr	r3, [r3, #12]
 800f6c0:	69fa      	ldr	r2, [r7, #28]
 800f6c2:	429a      	cmp	r2, r3
 800f6c4:	d111      	bne.n	800f6ea <tcp_input+0x366>
 800f6c6:	4b58      	ldr	r3, [pc, #352]	; (800f828 <tcp_input+0x4a4>)
 800f6c8:	f240 1215 	movw	r2, #277	; 0x115
 800f6cc:	495a      	ldr	r1, [pc, #360]	; (800f838 <tcp_input+0x4b4>)
 800f6ce:	4858      	ldr	r0, [pc, #352]	; (800f830 <tcp_input+0x4ac>)
 800f6d0:	f009 f9e4 	bl	8018a9c <iprintf>
      break;
 800f6d4:	e009      	b.n	800f6ea <tcp_input+0x366>
    }
    prev = pcb;
 800f6d6:	69fb      	ldr	r3, [r7, #28]
 800f6d8:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f6da:	69fb      	ldr	r3, [r7, #28]
 800f6dc:	68db      	ldr	r3, [r3, #12]
 800f6de:	61fb      	str	r3, [r7, #28]
 800f6e0:	69fb      	ldr	r3, [r7, #28]
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	f47f af5e 	bne.w	800f5a4 <tcp_input+0x220>
 800f6e8:	e000      	b.n	800f6ec <tcp_input+0x368>
      break;
 800f6ea:	bf00      	nop
  }

  if (pcb == NULL) {
 800f6ec:	69fb      	ldr	r3, [r7, #28]
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	f040 80aa 	bne.w	800f848 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f6f4:	4b51      	ldr	r3, [pc, #324]	; (800f83c <tcp_input+0x4b8>)
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	61fb      	str	r3, [r7, #28]
 800f6fa:	e03f      	b.n	800f77c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f6fc:	69fb      	ldr	r3, [r7, #28]
 800f6fe:	7d1b      	ldrb	r3, [r3, #20]
 800f700:	2b0a      	cmp	r3, #10
 800f702:	d006      	beq.n	800f712 <tcp_input+0x38e>
 800f704:	4b48      	ldr	r3, [pc, #288]	; (800f828 <tcp_input+0x4a4>)
 800f706:	f240 121f 	movw	r2, #287	; 0x11f
 800f70a:	494d      	ldr	r1, [pc, #308]	; (800f840 <tcp_input+0x4bc>)
 800f70c:	4848      	ldr	r0, [pc, #288]	; (800f830 <tcp_input+0x4ac>)
 800f70e:	f009 f9c5 	bl	8018a9c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f712:	69fb      	ldr	r3, [r7, #28]
 800f714:	7a1b      	ldrb	r3, [r3, #8]
 800f716:	2b00      	cmp	r3, #0
 800f718:	d009      	beq.n	800f72e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f71a:	69fb      	ldr	r3, [r7, #28]
 800f71c:	7a1a      	ldrb	r2, [r3, #8]
 800f71e:	4b41      	ldr	r3, [pc, #260]	; (800f824 <tcp_input+0x4a0>)
 800f720:	685b      	ldr	r3, [r3, #4]
 800f722:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f726:	3301      	adds	r3, #1
 800f728:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f72a:	429a      	cmp	r2, r3
 800f72c:	d122      	bne.n	800f774 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800f72e:	69fb      	ldr	r3, [r7, #28]
 800f730:	8b1a      	ldrh	r2, [r3, #24]
 800f732:	4b3b      	ldr	r3, [pc, #236]	; (800f820 <tcp_input+0x49c>)
 800f734:	681b      	ldr	r3, [r3, #0]
 800f736:	881b      	ldrh	r3, [r3, #0]
 800f738:	b29b      	uxth	r3, r3
 800f73a:	429a      	cmp	r2, r3
 800f73c:	d11b      	bne.n	800f776 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800f73e:	69fb      	ldr	r3, [r7, #28]
 800f740:	8ada      	ldrh	r2, [r3, #22]
 800f742:	4b37      	ldr	r3, [pc, #220]	; (800f820 <tcp_input+0x49c>)
 800f744:	681b      	ldr	r3, [r3, #0]
 800f746:	885b      	ldrh	r3, [r3, #2]
 800f748:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800f74a:	429a      	cmp	r2, r3
 800f74c:	d113      	bne.n	800f776 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f74e:	69fb      	ldr	r3, [r7, #28]
 800f750:	685a      	ldr	r2, [r3, #4]
 800f752:	4b34      	ldr	r3, [pc, #208]	; (800f824 <tcp_input+0x4a0>)
 800f754:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800f756:	429a      	cmp	r2, r3
 800f758:	d10d      	bne.n	800f776 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f75a:	69fb      	ldr	r3, [r7, #28]
 800f75c:	681a      	ldr	r2, [r3, #0]
 800f75e:	4b31      	ldr	r3, [pc, #196]	; (800f824 <tcp_input+0x4a0>)
 800f760:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f762:	429a      	cmp	r2, r3
 800f764:	d107      	bne.n	800f776 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800f766:	69f8      	ldr	r0, [r7, #28]
 800f768:	f000 fb56 	bl	800fe18 <tcp_timewait_input>
        }
        pbuf_free(p);
 800f76c:	6878      	ldr	r0, [r7, #4]
 800f76e:	f7fd ffc5 	bl	800d6fc <pbuf_free>
        return;
 800f772:	e1fd      	b.n	800fb70 <tcp_input+0x7ec>
        continue;
 800f774:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f776:	69fb      	ldr	r3, [r7, #28]
 800f778:	68db      	ldr	r3, [r3, #12]
 800f77a:	61fb      	str	r3, [r7, #28]
 800f77c:	69fb      	ldr	r3, [r7, #28]
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d1bc      	bne.n	800f6fc <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800f782:	2300      	movs	r3, #0
 800f784:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f786:	4b2f      	ldr	r3, [pc, #188]	; (800f844 <tcp_input+0x4c0>)
 800f788:	681b      	ldr	r3, [r3, #0]
 800f78a:	617b      	str	r3, [r7, #20]
 800f78c:	e02a      	b.n	800f7e4 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f78e:	697b      	ldr	r3, [r7, #20]
 800f790:	7a1b      	ldrb	r3, [r3, #8]
 800f792:	2b00      	cmp	r3, #0
 800f794:	d00c      	beq.n	800f7b0 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f796:	697b      	ldr	r3, [r7, #20]
 800f798:	7a1a      	ldrb	r2, [r3, #8]
 800f79a:	4b22      	ldr	r3, [pc, #136]	; (800f824 <tcp_input+0x4a0>)
 800f79c:	685b      	ldr	r3, [r3, #4]
 800f79e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f7a2:	3301      	adds	r3, #1
 800f7a4:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f7a6:	429a      	cmp	r2, r3
 800f7a8:	d002      	beq.n	800f7b0 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800f7aa:	697b      	ldr	r3, [r7, #20]
 800f7ac:	61bb      	str	r3, [r7, #24]
        continue;
 800f7ae:	e016      	b.n	800f7de <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800f7b0:	697b      	ldr	r3, [r7, #20]
 800f7b2:	8ada      	ldrh	r2, [r3, #22]
 800f7b4:	4b1a      	ldr	r3, [pc, #104]	; (800f820 <tcp_input+0x49c>)
 800f7b6:	681b      	ldr	r3, [r3, #0]
 800f7b8:	885b      	ldrh	r3, [r3, #2]
 800f7ba:	b29b      	uxth	r3, r3
 800f7bc:	429a      	cmp	r2, r3
 800f7be:	d10c      	bne.n	800f7da <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800f7c0:	697b      	ldr	r3, [r7, #20]
 800f7c2:	681a      	ldr	r2, [r3, #0]
 800f7c4:	4b17      	ldr	r3, [pc, #92]	; (800f824 <tcp_input+0x4a0>)
 800f7c6:	695b      	ldr	r3, [r3, #20]
 800f7c8:	429a      	cmp	r2, r3
 800f7ca:	d00f      	beq.n	800f7ec <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800f7cc:	697b      	ldr	r3, [r7, #20]
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d00d      	beq.n	800f7ee <tcp_input+0x46a>
 800f7d2:	697b      	ldr	r3, [r7, #20]
 800f7d4:	681b      	ldr	r3, [r3, #0]
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d009      	beq.n	800f7ee <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800f7da:	697b      	ldr	r3, [r7, #20]
 800f7dc:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f7de:	697b      	ldr	r3, [r7, #20]
 800f7e0:	68db      	ldr	r3, [r3, #12]
 800f7e2:	617b      	str	r3, [r7, #20]
 800f7e4:	697b      	ldr	r3, [r7, #20]
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	d1d1      	bne.n	800f78e <tcp_input+0x40a>
 800f7ea:	e000      	b.n	800f7ee <tcp_input+0x46a>
            break;
 800f7ec:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800f7ee:	697b      	ldr	r3, [r7, #20]
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d029      	beq.n	800f848 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800f7f4:	69bb      	ldr	r3, [r7, #24]
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d00a      	beq.n	800f810 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800f7fa:	697b      	ldr	r3, [r7, #20]
 800f7fc:	68da      	ldr	r2, [r3, #12]
 800f7fe:	69bb      	ldr	r3, [r7, #24]
 800f800:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800f802:	4b10      	ldr	r3, [pc, #64]	; (800f844 <tcp_input+0x4c0>)
 800f804:	681a      	ldr	r2, [r3, #0]
 800f806:	697b      	ldr	r3, [r7, #20]
 800f808:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800f80a:	4a0e      	ldr	r2, [pc, #56]	; (800f844 <tcp_input+0x4c0>)
 800f80c:	697b      	ldr	r3, [r7, #20]
 800f80e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800f810:	6978      	ldr	r0, [r7, #20]
 800f812:	f000 fa03 	bl	800fc1c <tcp_listen_input>
      }
      pbuf_free(p);
 800f816:	6878      	ldr	r0, [r7, #4]
 800f818:	f7fd ff70 	bl	800d6fc <pbuf_free>
      return;
 800f81c:	e1a8      	b.n	800fb70 <tcp_input+0x7ec>
 800f81e:	bf00      	nop
 800f820:	2000c8b4 	.word	0x2000c8b4
 800f824:	2000976c 	.word	0x2000976c
 800f828:	0801aeb8 	.word	0x0801aeb8
 800f82c:	0801afe4 	.word	0x0801afe4
 800f830:	0801af04 	.word	0x0801af04
 800f834:	2000c898 	.word	0x2000c898
 800f838:	0801b010 	.word	0x0801b010
 800f83c:	2000c89c 	.word	0x2000c89c
 800f840:	0801b03c 	.word	0x0801b03c
 800f844:	2000c894 	.word	0x2000c894
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800f848:	69fb      	ldr	r3, [r7, #28]
 800f84a:	2b00      	cmp	r3, #0
 800f84c:	f000 8158 	beq.w	800fb00 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800f850:	4b95      	ldr	r3, [pc, #596]	; (800faa8 <tcp_input+0x724>)
 800f852:	2200      	movs	r2, #0
 800f854:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	891a      	ldrh	r2, [r3, #8]
 800f85a:	4b93      	ldr	r3, [pc, #588]	; (800faa8 <tcp_input+0x724>)
 800f85c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800f85e:	4a92      	ldr	r2, [pc, #584]	; (800faa8 <tcp_input+0x724>)
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800f864:	4b91      	ldr	r3, [pc, #580]	; (800faac <tcp_input+0x728>)
 800f866:	681b      	ldr	r3, [r3, #0]
 800f868:	4a8f      	ldr	r2, [pc, #572]	; (800faa8 <tcp_input+0x724>)
 800f86a:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800f86c:	4b90      	ldr	r3, [pc, #576]	; (800fab0 <tcp_input+0x72c>)
 800f86e:	2200      	movs	r2, #0
 800f870:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800f872:	4b90      	ldr	r3, [pc, #576]	; (800fab4 <tcp_input+0x730>)
 800f874:	2200      	movs	r2, #0
 800f876:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800f878:	4b8f      	ldr	r3, [pc, #572]	; (800fab8 <tcp_input+0x734>)
 800f87a:	2200      	movs	r2, #0
 800f87c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800f87e:	4b8f      	ldr	r3, [pc, #572]	; (800fabc <tcp_input+0x738>)
 800f880:	781b      	ldrb	r3, [r3, #0]
 800f882:	f003 0308 	and.w	r3, r3, #8
 800f886:	2b00      	cmp	r3, #0
 800f888:	d006      	beq.n	800f898 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	7b5b      	ldrb	r3, [r3, #13]
 800f88e:	f043 0301 	orr.w	r3, r3, #1
 800f892:	b2da      	uxtb	r2, r3
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800f898:	69fb      	ldr	r3, [r7, #28]
 800f89a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	d017      	beq.n	800f8d0 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f8a0:	69f8      	ldr	r0, [r7, #28]
 800f8a2:	f7ff f929 	bl	800eaf8 <tcp_process_refused_data>
 800f8a6:	4603      	mov	r3, r0
 800f8a8:	f113 0f0d 	cmn.w	r3, #13
 800f8ac:	d007      	beq.n	800f8be <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f8ae:	69fb      	ldr	r3, [r7, #28]
 800f8b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d00c      	beq.n	800f8d0 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f8b6:	4b82      	ldr	r3, [pc, #520]	; (800fac0 <tcp_input+0x73c>)
 800f8b8:	881b      	ldrh	r3, [r3, #0]
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d008      	beq.n	800f8d0 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800f8be:	69fb      	ldr	r3, [r7, #28]
 800f8c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	f040 80e3 	bne.w	800fa8e <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800f8c8:	69f8      	ldr	r0, [r7, #28]
 800f8ca:	f003 f9ad 	bl	8012c28 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800f8ce:	e0de      	b.n	800fa8e <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800f8d0:	4a7c      	ldr	r2, [pc, #496]	; (800fac4 <tcp_input+0x740>)
 800f8d2:	69fb      	ldr	r3, [r7, #28]
 800f8d4:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800f8d6:	69f8      	ldr	r0, [r7, #28]
 800f8d8:	f000 fb18 	bl	800ff0c <tcp_process>
 800f8dc:	4603      	mov	r3, r0
 800f8de:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800f8e0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f8e4:	f113 0f0d 	cmn.w	r3, #13
 800f8e8:	f000 80d3 	beq.w	800fa92 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800f8ec:	4b71      	ldr	r3, [pc, #452]	; (800fab4 <tcp_input+0x730>)
 800f8ee:	781b      	ldrb	r3, [r3, #0]
 800f8f0:	f003 0308 	and.w	r3, r3, #8
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d015      	beq.n	800f924 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800f8f8:	69fb      	ldr	r3, [r7, #28]
 800f8fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	d008      	beq.n	800f914 <tcp_input+0x590>
 800f902:	69fb      	ldr	r3, [r7, #28]
 800f904:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f908:	69fa      	ldr	r2, [r7, #28]
 800f90a:	6912      	ldr	r2, [r2, #16]
 800f90c:	f06f 010d 	mvn.w	r1, #13
 800f910:	4610      	mov	r0, r2
 800f912:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800f914:	69f9      	ldr	r1, [r7, #28]
 800f916:	486c      	ldr	r0, [pc, #432]	; (800fac8 <tcp_input+0x744>)
 800f918:	f7ff fbbc 	bl	800f094 <tcp_pcb_remove>
        tcp_free(pcb);
 800f91c:	69f8      	ldr	r0, [r7, #28]
 800f91e:	f7fe f9a9 	bl	800dc74 <tcp_free>
 800f922:	e0da      	b.n	800fada <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800f924:	2300      	movs	r3, #0
 800f926:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800f928:	4b63      	ldr	r3, [pc, #396]	; (800fab8 <tcp_input+0x734>)
 800f92a:	881b      	ldrh	r3, [r3, #0]
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d01d      	beq.n	800f96c <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800f930:	4b61      	ldr	r3, [pc, #388]	; (800fab8 <tcp_input+0x734>)
 800f932:	881b      	ldrh	r3, [r3, #0]
 800f934:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800f936:	69fb      	ldr	r3, [r7, #28]
 800f938:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d00a      	beq.n	800f956 <tcp_input+0x5d2>
 800f940:	69fb      	ldr	r3, [r7, #28]
 800f942:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f946:	69fa      	ldr	r2, [r7, #28]
 800f948:	6910      	ldr	r0, [r2, #16]
 800f94a:	89fa      	ldrh	r2, [r7, #14]
 800f94c:	69f9      	ldr	r1, [r7, #28]
 800f94e:	4798      	blx	r3
 800f950:	4603      	mov	r3, r0
 800f952:	74fb      	strb	r3, [r7, #19]
 800f954:	e001      	b.n	800f95a <tcp_input+0x5d6>
 800f956:	2300      	movs	r3, #0
 800f958:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800f95a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f95e:	f113 0f0d 	cmn.w	r3, #13
 800f962:	f000 8098 	beq.w	800fa96 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800f966:	4b54      	ldr	r3, [pc, #336]	; (800fab8 <tcp_input+0x734>)
 800f968:	2200      	movs	r2, #0
 800f96a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800f96c:	69f8      	ldr	r0, [r7, #28]
 800f96e:	f000 f915 	bl	800fb9c <tcp_input_delayed_close>
 800f972:	4603      	mov	r3, r0
 800f974:	2b00      	cmp	r3, #0
 800f976:	f040 8090 	bne.w	800fa9a <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800f97a:	4b4d      	ldr	r3, [pc, #308]	; (800fab0 <tcp_input+0x72c>)
 800f97c:	681b      	ldr	r3, [r3, #0]
 800f97e:	2b00      	cmp	r3, #0
 800f980:	d041      	beq.n	800fa06 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800f982:	69fb      	ldr	r3, [r7, #28]
 800f984:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f986:	2b00      	cmp	r3, #0
 800f988:	d006      	beq.n	800f998 <tcp_input+0x614>
 800f98a:	4b50      	ldr	r3, [pc, #320]	; (800facc <tcp_input+0x748>)
 800f98c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800f990:	494f      	ldr	r1, [pc, #316]	; (800fad0 <tcp_input+0x74c>)
 800f992:	4850      	ldr	r0, [pc, #320]	; (800fad4 <tcp_input+0x750>)
 800f994:	f009 f882 	bl	8018a9c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800f998:	69fb      	ldr	r3, [r7, #28]
 800f99a:	8b5b      	ldrh	r3, [r3, #26]
 800f99c:	f003 0310 	and.w	r3, r3, #16
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	d008      	beq.n	800f9b6 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800f9a4:	4b42      	ldr	r3, [pc, #264]	; (800fab0 <tcp_input+0x72c>)
 800f9a6:	681b      	ldr	r3, [r3, #0]
 800f9a8:	4618      	mov	r0, r3
 800f9aa:	f7fd fea7 	bl	800d6fc <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800f9ae:	69f8      	ldr	r0, [r7, #28]
 800f9b0:	f7fe fc48 	bl	800e244 <tcp_abort>
            goto aborted;
 800f9b4:	e091      	b.n	800fada <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800f9b6:	69fb      	ldr	r3, [r7, #28]
 800f9b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	d00c      	beq.n	800f9da <tcp_input+0x656>
 800f9c0:	69fb      	ldr	r3, [r7, #28]
 800f9c2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f9c6:	69fb      	ldr	r3, [r7, #28]
 800f9c8:	6918      	ldr	r0, [r3, #16]
 800f9ca:	4b39      	ldr	r3, [pc, #228]	; (800fab0 <tcp_input+0x72c>)
 800f9cc:	681a      	ldr	r2, [r3, #0]
 800f9ce:	2300      	movs	r3, #0
 800f9d0:	69f9      	ldr	r1, [r7, #28]
 800f9d2:	47a0      	blx	r4
 800f9d4:	4603      	mov	r3, r0
 800f9d6:	74fb      	strb	r3, [r7, #19]
 800f9d8:	e008      	b.n	800f9ec <tcp_input+0x668>
 800f9da:	4b35      	ldr	r3, [pc, #212]	; (800fab0 <tcp_input+0x72c>)
 800f9dc:	681a      	ldr	r2, [r3, #0]
 800f9de:	2300      	movs	r3, #0
 800f9e0:	69f9      	ldr	r1, [r7, #28]
 800f9e2:	2000      	movs	r0, #0
 800f9e4:	f7ff f95e 	bl	800eca4 <tcp_recv_null>
 800f9e8:	4603      	mov	r3, r0
 800f9ea:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800f9ec:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f9f0:	f113 0f0d 	cmn.w	r3, #13
 800f9f4:	d053      	beq.n	800fa9e <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800f9f6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d003      	beq.n	800fa06 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800f9fe:	4b2c      	ldr	r3, [pc, #176]	; (800fab0 <tcp_input+0x72c>)
 800fa00:	681a      	ldr	r2, [r3, #0]
 800fa02:	69fb      	ldr	r3, [r7, #28]
 800fa04:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800fa06:	4b2b      	ldr	r3, [pc, #172]	; (800fab4 <tcp_input+0x730>)
 800fa08:	781b      	ldrb	r3, [r3, #0]
 800fa0a:	f003 0320 	and.w	r3, r3, #32
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d030      	beq.n	800fa74 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800fa12:	69fb      	ldr	r3, [r7, #28]
 800fa14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d009      	beq.n	800fa2e <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800fa1a:	69fb      	ldr	r3, [r7, #28]
 800fa1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fa1e:	7b5a      	ldrb	r2, [r3, #13]
 800fa20:	69fb      	ldr	r3, [r7, #28]
 800fa22:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fa24:	f042 0220 	orr.w	r2, r2, #32
 800fa28:	b2d2      	uxtb	r2, r2
 800fa2a:	735a      	strb	r2, [r3, #13]
 800fa2c:	e022      	b.n	800fa74 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800fa2e:	69fb      	ldr	r3, [r7, #28]
 800fa30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fa32:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800fa36:	d005      	beq.n	800fa44 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800fa38:	69fb      	ldr	r3, [r7, #28]
 800fa3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fa3c:	3301      	adds	r3, #1
 800fa3e:	b29a      	uxth	r2, r3
 800fa40:	69fb      	ldr	r3, [r7, #28]
 800fa42:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800fa44:	69fb      	ldr	r3, [r7, #28]
 800fa46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	d00b      	beq.n	800fa66 <tcp_input+0x6e2>
 800fa4e:	69fb      	ldr	r3, [r7, #28]
 800fa50:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800fa54:	69fb      	ldr	r3, [r7, #28]
 800fa56:	6918      	ldr	r0, [r3, #16]
 800fa58:	2300      	movs	r3, #0
 800fa5a:	2200      	movs	r2, #0
 800fa5c:	69f9      	ldr	r1, [r7, #28]
 800fa5e:	47a0      	blx	r4
 800fa60:	4603      	mov	r3, r0
 800fa62:	74fb      	strb	r3, [r7, #19]
 800fa64:	e001      	b.n	800fa6a <tcp_input+0x6e6>
 800fa66:	2300      	movs	r3, #0
 800fa68:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800fa6a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fa6e:	f113 0f0d 	cmn.w	r3, #13
 800fa72:	d016      	beq.n	800faa2 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800fa74:	4b13      	ldr	r3, [pc, #76]	; (800fac4 <tcp_input+0x740>)
 800fa76:	2200      	movs	r2, #0
 800fa78:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800fa7a:	69f8      	ldr	r0, [r7, #28]
 800fa7c:	f000 f88e 	bl	800fb9c <tcp_input_delayed_close>
 800fa80:	4603      	mov	r3, r0
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	d128      	bne.n	800fad8 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800fa86:	69f8      	ldr	r0, [r7, #28]
 800fa88:	f002 fac8 	bl	801201c <tcp_output>
 800fa8c:	e025      	b.n	800fada <tcp_input+0x756>
        goto aborted;
 800fa8e:	bf00      	nop
 800fa90:	e023      	b.n	800fada <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800fa92:	bf00      	nop
 800fa94:	e021      	b.n	800fada <tcp_input+0x756>
              goto aborted;
 800fa96:	bf00      	nop
 800fa98:	e01f      	b.n	800fada <tcp_input+0x756>
          goto aborted;
 800fa9a:	bf00      	nop
 800fa9c:	e01d      	b.n	800fada <tcp_input+0x756>
            goto aborted;
 800fa9e:	bf00      	nop
 800faa0:	e01b      	b.n	800fada <tcp_input+0x756>
              goto aborted;
 800faa2:	bf00      	nop
 800faa4:	e019      	b.n	800fada <tcp_input+0x756>
 800faa6:	bf00      	nop
 800faa8:	2000c8a4 	.word	0x2000c8a4
 800faac:	2000c8b4 	.word	0x2000c8b4
 800fab0:	2000c8d4 	.word	0x2000c8d4
 800fab4:	2000c8d1 	.word	0x2000c8d1
 800fab8:	2000c8cc 	.word	0x2000c8cc
 800fabc:	2000c8d0 	.word	0x2000c8d0
 800fac0:	2000c8ce 	.word	0x2000c8ce
 800fac4:	2000c8d8 	.word	0x2000c8d8
 800fac8:	2000c898 	.word	0x2000c898
 800facc:	0801aeb8 	.word	0x0801aeb8
 800fad0:	0801b06c 	.word	0x0801b06c
 800fad4:	0801af04 	.word	0x0801af04
          goto aborted;
 800fad8:	bf00      	nop
    tcp_input_pcb = NULL;
 800fada:	4b27      	ldr	r3, [pc, #156]	; (800fb78 <tcp_input+0x7f4>)
 800fadc:	2200      	movs	r2, #0
 800fade:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800fae0:	4b26      	ldr	r3, [pc, #152]	; (800fb7c <tcp_input+0x7f8>)
 800fae2:	2200      	movs	r2, #0
 800fae4:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800fae6:	4b26      	ldr	r3, [pc, #152]	; (800fb80 <tcp_input+0x7fc>)
 800fae8:	685b      	ldr	r3, [r3, #4]
 800faea:	2b00      	cmp	r3, #0
 800faec:	d03f      	beq.n	800fb6e <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800faee:	4b24      	ldr	r3, [pc, #144]	; (800fb80 <tcp_input+0x7fc>)
 800faf0:	685b      	ldr	r3, [r3, #4]
 800faf2:	4618      	mov	r0, r3
 800faf4:	f7fd fe02 	bl	800d6fc <pbuf_free>
      inseg.p = NULL;
 800faf8:	4b21      	ldr	r3, [pc, #132]	; (800fb80 <tcp_input+0x7fc>)
 800fafa:	2200      	movs	r2, #0
 800fafc:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800fafe:	e036      	b.n	800fb6e <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800fb00:	4b20      	ldr	r3, [pc, #128]	; (800fb84 <tcp_input+0x800>)
 800fb02:	681b      	ldr	r3, [r3, #0]
 800fb04:	899b      	ldrh	r3, [r3, #12]
 800fb06:	b29b      	uxth	r3, r3
 800fb08:	4618      	mov	r0, r3
 800fb0a:	f7fc f9a9 	bl	800be60 <lwip_htons>
 800fb0e:	4603      	mov	r3, r0
 800fb10:	b2db      	uxtb	r3, r3
 800fb12:	f003 0304 	and.w	r3, r3, #4
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	d118      	bne.n	800fb4c <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fb1a:	4b1b      	ldr	r3, [pc, #108]	; (800fb88 <tcp_input+0x804>)
 800fb1c:	6819      	ldr	r1, [r3, #0]
 800fb1e:	4b1b      	ldr	r3, [pc, #108]	; (800fb8c <tcp_input+0x808>)
 800fb20:	881b      	ldrh	r3, [r3, #0]
 800fb22:	461a      	mov	r2, r3
 800fb24:	4b1a      	ldr	r3, [pc, #104]	; (800fb90 <tcp_input+0x80c>)
 800fb26:	681b      	ldr	r3, [r3, #0]
 800fb28:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fb2a:	4b16      	ldr	r3, [pc, #88]	; (800fb84 <tcp_input+0x800>)
 800fb2c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fb2e:	885b      	ldrh	r3, [r3, #2]
 800fb30:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fb32:	4a14      	ldr	r2, [pc, #80]	; (800fb84 <tcp_input+0x800>)
 800fb34:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fb36:	8812      	ldrh	r2, [r2, #0]
 800fb38:	b292      	uxth	r2, r2
 800fb3a:	9202      	str	r2, [sp, #8]
 800fb3c:	9301      	str	r3, [sp, #4]
 800fb3e:	4b15      	ldr	r3, [pc, #84]	; (800fb94 <tcp_input+0x810>)
 800fb40:	9300      	str	r3, [sp, #0]
 800fb42:	4b15      	ldr	r3, [pc, #84]	; (800fb98 <tcp_input+0x814>)
 800fb44:	4602      	mov	r2, r0
 800fb46:	2000      	movs	r0, #0
 800fb48:	f003 f81c 	bl	8012b84 <tcp_rst>
    pbuf_free(p);
 800fb4c:	6878      	ldr	r0, [r7, #4]
 800fb4e:	f7fd fdd5 	bl	800d6fc <pbuf_free>
  return;
 800fb52:	e00c      	b.n	800fb6e <tcp_input+0x7ea>
    goto dropped;
 800fb54:	bf00      	nop
 800fb56:	e006      	b.n	800fb66 <tcp_input+0x7e2>
    goto dropped;
 800fb58:	bf00      	nop
 800fb5a:	e004      	b.n	800fb66 <tcp_input+0x7e2>
    goto dropped;
 800fb5c:	bf00      	nop
 800fb5e:	e002      	b.n	800fb66 <tcp_input+0x7e2>
      goto dropped;
 800fb60:	bf00      	nop
 800fb62:	e000      	b.n	800fb66 <tcp_input+0x7e2>
      goto dropped;
 800fb64:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800fb66:	6878      	ldr	r0, [r7, #4]
 800fb68:	f7fd fdc8 	bl	800d6fc <pbuf_free>
 800fb6c:	e000      	b.n	800fb70 <tcp_input+0x7ec>
  return;
 800fb6e:	bf00      	nop
}
 800fb70:	3724      	adds	r7, #36	; 0x24
 800fb72:	46bd      	mov	sp, r7
 800fb74:	bd90      	pop	{r4, r7, pc}
 800fb76:	bf00      	nop
 800fb78:	2000c8d8 	.word	0x2000c8d8
 800fb7c:	2000c8d4 	.word	0x2000c8d4
 800fb80:	2000c8a4 	.word	0x2000c8a4
 800fb84:	2000c8b4 	.word	0x2000c8b4
 800fb88:	2000c8c8 	.word	0x2000c8c8
 800fb8c:	2000c8ce 	.word	0x2000c8ce
 800fb90:	2000c8c4 	.word	0x2000c8c4
 800fb94:	2000977c 	.word	0x2000977c
 800fb98:	20009780 	.word	0x20009780

0800fb9c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800fb9c:	b580      	push	{r7, lr}
 800fb9e:	b082      	sub	sp, #8
 800fba0:	af00      	add	r7, sp, #0
 800fba2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d106      	bne.n	800fbb8 <tcp_input_delayed_close+0x1c>
 800fbaa:	4b17      	ldr	r3, [pc, #92]	; (800fc08 <tcp_input_delayed_close+0x6c>)
 800fbac:	f240 225a 	movw	r2, #602	; 0x25a
 800fbb0:	4916      	ldr	r1, [pc, #88]	; (800fc0c <tcp_input_delayed_close+0x70>)
 800fbb2:	4817      	ldr	r0, [pc, #92]	; (800fc10 <tcp_input_delayed_close+0x74>)
 800fbb4:	f008 ff72 	bl	8018a9c <iprintf>

  if (recv_flags & TF_CLOSED) {
 800fbb8:	4b16      	ldr	r3, [pc, #88]	; (800fc14 <tcp_input_delayed_close+0x78>)
 800fbba:	781b      	ldrb	r3, [r3, #0]
 800fbbc:	f003 0310 	and.w	r3, r3, #16
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	d01c      	beq.n	800fbfe <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	8b5b      	ldrh	r3, [r3, #26]
 800fbc8:	f003 0310 	and.w	r3, r3, #16
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	d10d      	bne.n	800fbec <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	d008      	beq.n	800fbec <tcp_input_delayed_close+0x50>
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fbe0:	687a      	ldr	r2, [r7, #4]
 800fbe2:	6912      	ldr	r2, [r2, #16]
 800fbe4:	f06f 010e 	mvn.w	r1, #14
 800fbe8:	4610      	mov	r0, r2
 800fbea:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800fbec:	6879      	ldr	r1, [r7, #4]
 800fbee:	480a      	ldr	r0, [pc, #40]	; (800fc18 <tcp_input_delayed_close+0x7c>)
 800fbf0:	f7ff fa50 	bl	800f094 <tcp_pcb_remove>
    tcp_free(pcb);
 800fbf4:	6878      	ldr	r0, [r7, #4]
 800fbf6:	f7fe f83d 	bl	800dc74 <tcp_free>
    return 1;
 800fbfa:	2301      	movs	r3, #1
 800fbfc:	e000      	b.n	800fc00 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800fbfe:	2300      	movs	r3, #0
}
 800fc00:	4618      	mov	r0, r3
 800fc02:	3708      	adds	r7, #8
 800fc04:	46bd      	mov	sp, r7
 800fc06:	bd80      	pop	{r7, pc}
 800fc08:	0801aeb8 	.word	0x0801aeb8
 800fc0c:	0801b088 	.word	0x0801b088
 800fc10:	0801af04 	.word	0x0801af04
 800fc14:	2000c8d1 	.word	0x2000c8d1
 800fc18:	2000c898 	.word	0x2000c898

0800fc1c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800fc1c:	b590      	push	{r4, r7, lr}
 800fc1e:	b08b      	sub	sp, #44	; 0x2c
 800fc20:	af04      	add	r7, sp, #16
 800fc22:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800fc24:	4b6f      	ldr	r3, [pc, #444]	; (800fde4 <tcp_listen_input+0x1c8>)
 800fc26:	781b      	ldrb	r3, [r3, #0]
 800fc28:	f003 0304 	and.w	r3, r3, #4
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	f040 80d2 	bne.w	800fdd6 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	2b00      	cmp	r3, #0
 800fc36:	d106      	bne.n	800fc46 <tcp_listen_input+0x2a>
 800fc38:	4b6b      	ldr	r3, [pc, #428]	; (800fde8 <tcp_listen_input+0x1cc>)
 800fc3a:	f240 2281 	movw	r2, #641	; 0x281
 800fc3e:	496b      	ldr	r1, [pc, #428]	; (800fdec <tcp_listen_input+0x1d0>)
 800fc40:	486b      	ldr	r0, [pc, #428]	; (800fdf0 <tcp_listen_input+0x1d4>)
 800fc42:	f008 ff2b 	bl	8018a9c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800fc46:	4b67      	ldr	r3, [pc, #412]	; (800fde4 <tcp_listen_input+0x1c8>)
 800fc48:	781b      	ldrb	r3, [r3, #0]
 800fc4a:	f003 0310 	and.w	r3, r3, #16
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	d019      	beq.n	800fc86 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fc52:	4b68      	ldr	r3, [pc, #416]	; (800fdf4 <tcp_listen_input+0x1d8>)
 800fc54:	6819      	ldr	r1, [r3, #0]
 800fc56:	4b68      	ldr	r3, [pc, #416]	; (800fdf8 <tcp_listen_input+0x1dc>)
 800fc58:	881b      	ldrh	r3, [r3, #0]
 800fc5a:	461a      	mov	r2, r3
 800fc5c:	4b67      	ldr	r3, [pc, #412]	; (800fdfc <tcp_listen_input+0x1e0>)
 800fc5e:	681b      	ldr	r3, [r3, #0]
 800fc60:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fc62:	4b67      	ldr	r3, [pc, #412]	; (800fe00 <tcp_listen_input+0x1e4>)
 800fc64:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fc66:	885b      	ldrh	r3, [r3, #2]
 800fc68:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fc6a:	4a65      	ldr	r2, [pc, #404]	; (800fe00 <tcp_listen_input+0x1e4>)
 800fc6c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fc6e:	8812      	ldrh	r2, [r2, #0]
 800fc70:	b292      	uxth	r2, r2
 800fc72:	9202      	str	r2, [sp, #8]
 800fc74:	9301      	str	r3, [sp, #4]
 800fc76:	4b63      	ldr	r3, [pc, #396]	; (800fe04 <tcp_listen_input+0x1e8>)
 800fc78:	9300      	str	r3, [sp, #0]
 800fc7a:	4b63      	ldr	r3, [pc, #396]	; (800fe08 <tcp_listen_input+0x1ec>)
 800fc7c:	4602      	mov	r2, r0
 800fc7e:	6878      	ldr	r0, [r7, #4]
 800fc80:	f002 ff80 	bl	8012b84 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800fc84:	e0a9      	b.n	800fdda <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800fc86:	4b57      	ldr	r3, [pc, #348]	; (800fde4 <tcp_listen_input+0x1c8>)
 800fc88:	781b      	ldrb	r3, [r3, #0]
 800fc8a:	f003 0302 	and.w	r3, r3, #2
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	f000 80a3 	beq.w	800fdda <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	7d5b      	ldrb	r3, [r3, #21]
 800fc98:	4618      	mov	r0, r3
 800fc9a:	f7ff f927 	bl	800eeec <tcp_alloc>
 800fc9e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800fca0:	697b      	ldr	r3, [r7, #20]
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d111      	bne.n	800fcca <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	699b      	ldr	r3, [r3, #24]
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d00a      	beq.n	800fcc4 <tcp_listen_input+0xa8>
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	699b      	ldr	r3, [r3, #24]
 800fcb2:	687a      	ldr	r2, [r7, #4]
 800fcb4:	6910      	ldr	r0, [r2, #16]
 800fcb6:	f04f 32ff 	mov.w	r2, #4294967295
 800fcba:	2100      	movs	r1, #0
 800fcbc:	4798      	blx	r3
 800fcbe:	4603      	mov	r3, r0
 800fcc0:	73bb      	strb	r3, [r7, #14]
      return;
 800fcc2:	e08b      	b.n	800fddc <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800fcc4:	23f0      	movs	r3, #240	; 0xf0
 800fcc6:	73bb      	strb	r3, [r7, #14]
      return;
 800fcc8:	e088      	b.n	800fddc <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800fcca:	4b50      	ldr	r3, [pc, #320]	; (800fe0c <tcp_listen_input+0x1f0>)
 800fccc:	695a      	ldr	r2, [r3, #20]
 800fcce:	697b      	ldr	r3, [r7, #20]
 800fcd0:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800fcd2:	4b4e      	ldr	r3, [pc, #312]	; (800fe0c <tcp_listen_input+0x1f0>)
 800fcd4:	691a      	ldr	r2, [r3, #16]
 800fcd6:	697b      	ldr	r3, [r7, #20]
 800fcd8:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	8ada      	ldrh	r2, [r3, #22]
 800fcde:	697b      	ldr	r3, [r7, #20]
 800fce0:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800fce2:	4b47      	ldr	r3, [pc, #284]	; (800fe00 <tcp_listen_input+0x1e4>)
 800fce4:	681b      	ldr	r3, [r3, #0]
 800fce6:	881b      	ldrh	r3, [r3, #0]
 800fce8:	b29a      	uxth	r2, r3
 800fcea:	697b      	ldr	r3, [r7, #20]
 800fcec:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800fcee:	697b      	ldr	r3, [r7, #20]
 800fcf0:	2203      	movs	r2, #3
 800fcf2:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800fcf4:	4b41      	ldr	r3, [pc, #260]	; (800fdfc <tcp_listen_input+0x1e0>)
 800fcf6:	681b      	ldr	r3, [r3, #0]
 800fcf8:	1c5a      	adds	r2, r3, #1
 800fcfa:	697b      	ldr	r3, [r7, #20]
 800fcfc:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800fcfe:	697b      	ldr	r3, [r7, #20]
 800fd00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fd02:	697b      	ldr	r3, [r7, #20]
 800fd04:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800fd06:	6978      	ldr	r0, [r7, #20]
 800fd08:	f7ff fa58 	bl	800f1bc <tcp_next_iss>
 800fd0c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800fd0e:	697b      	ldr	r3, [r7, #20]
 800fd10:	693a      	ldr	r2, [r7, #16]
 800fd12:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800fd14:	697b      	ldr	r3, [r7, #20]
 800fd16:	693a      	ldr	r2, [r7, #16]
 800fd18:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800fd1a:	697b      	ldr	r3, [r7, #20]
 800fd1c:	693a      	ldr	r2, [r7, #16]
 800fd1e:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800fd20:	697b      	ldr	r3, [r7, #20]
 800fd22:	693a      	ldr	r2, [r7, #16]
 800fd24:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800fd26:	4b35      	ldr	r3, [pc, #212]	; (800fdfc <tcp_listen_input+0x1e0>)
 800fd28:	681b      	ldr	r3, [r3, #0]
 800fd2a:	1e5a      	subs	r2, r3, #1
 800fd2c:	697b      	ldr	r3, [r7, #20]
 800fd2e:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	691a      	ldr	r2, [r3, #16]
 800fd34:	697b      	ldr	r3, [r7, #20]
 800fd36:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800fd38:	697b      	ldr	r3, [r7, #20]
 800fd3a:	687a      	ldr	r2, [r7, #4]
 800fd3c:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	7a5b      	ldrb	r3, [r3, #9]
 800fd42:	f003 030c 	and.w	r3, r3, #12
 800fd46:	b2da      	uxtb	r2, r3
 800fd48:	697b      	ldr	r3, [r7, #20]
 800fd4a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	7a1a      	ldrb	r2, [r3, #8]
 800fd50:	697b      	ldr	r3, [r7, #20]
 800fd52:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800fd54:	4b2e      	ldr	r3, [pc, #184]	; (800fe10 <tcp_listen_input+0x1f4>)
 800fd56:	681a      	ldr	r2, [r3, #0]
 800fd58:	697b      	ldr	r3, [r7, #20]
 800fd5a:	60da      	str	r2, [r3, #12]
 800fd5c:	4a2c      	ldr	r2, [pc, #176]	; (800fe10 <tcp_listen_input+0x1f4>)
 800fd5e:	697b      	ldr	r3, [r7, #20]
 800fd60:	6013      	str	r3, [r2, #0]
 800fd62:	f003 f8d1 	bl	8012f08 <tcp_timer_needed>
 800fd66:	4b2b      	ldr	r3, [pc, #172]	; (800fe14 <tcp_listen_input+0x1f8>)
 800fd68:	2201      	movs	r2, #1
 800fd6a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800fd6c:	6978      	ldr	r0, [r7, #20]
 800fd6e:	f001 fd8f 	bl	8011890 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800fd72:	4b23      	ldr	r3, [pc, #140]	; (800fe00 <tcp_listen_input+0x1e4>)
 800fd74:	681b      	ldr	r3, [r3, #0]
 800fd76:	89db      	ldrh	r3, [r3, #14]
 800fd78:	b29a      	uxth	r2, r3
 800fd7a:	697b      	ldr	r3, [r7, #20]
 800fd7c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800fd80:	697b      	ldr	r3, [r7, #20]
 800fd82:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800fd86:	697b      	ldr	r3, [r7, #20]
 800fd88:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800fd8c:	697b      	ldr	r3, [r7, #20]
 800fd8e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800fd90:	697b      	ldr	r3, [r7, #20]
 800fd92:	3304      	adds	r3, #4
 800fd94:	4618      	mov	r0, r3
 800fd96:	f006 fe47 	bl	8016a28 <ip4_route>
 800fd9a:	4601      	mov	r1, r0
 800fd9c:	697b      	ldr	r3, [r7, #20]
 800fd9e:	3304      	adds	r3, #4
 800fda0:	461a      	mov	r2, r3
 800fda2:	4620      	mov	r0, r4
 800fda4:	f7ff fa30 	bl	800f208 <tcp_eff_send_mss_netif>
 800fda8:	4603      	mov	r3, r0
 800fdaa:	461a      	mov	r2, r3
 800fdac:	697b      	ldr	r3, [r7, #20]
 800fdae:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800fdb0:	2112      	movs	r1, #18
 800fdb2:	6978      	ldr	r0, [r7, #20]
 800fdb4:	f002 f844 	bl	8011e40 <tcp_enqueue_flags>
 800fdb8:	4603      	mov	r3, r0
 800fdba:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800fdbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	d004      	beq.n	800fdce <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800fdc4:	2100      	movs	r1, #0
 800fdc6:	6978      	ldr	r0, [r7, #20]
 800fdc8:	f7fe f97e 	bl	800e0c8 <tcp_abandon>
      return;
 800fdcc:	e006      	b.n	800fddc <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800fdce:	6978      	ldr	r0, [r7, #20]
 800fdd0:	f002 f924 	bl	801201c <tcp_output>
  return;
 800fdd4:	e001      	b.n	800fdda <tcp_listen_input+0x1be>
    return;
 800fdd6:	bf00      	nop
 800fdd8:	e000      	b.n	800fddc <tcp_listen_input+0x1c0>
  return;
 800fdda:	bf00      	nop
}
 800fddc:	371c      	adds	r7, #28
 800fdde:	46bd      	mov	sp, r7
 800fde0:	bd90      	pop	{r4, r7, pc}
 800fde2:	bf00      	nop
 800fde4:	2000c8d0 	.word	0x2000c8d0
 800fde8:	0801aeb8 	.word	0x0801aeb8
 800fdec:	0801b0b0 	.word	0x0801b0b0
 800fdf0:	0801af04 	.word	0x0801af04
 800fdf4:	2000c8c8 	.word	0x2000c8c8
 800fdf8:	2000c8ce 	.word	0x2000c8ce
 800fdfc:	2000c8c4 	.word	0x2000c8c4
 800fe00:	2000c8b4 	.word	0x2000c8b4
 800fe04:	2000977c 	.word	0x2000977c
 800fe08:	20009780 	.word	0x20009780
 800fe0c:	2000976c 	.word	0x2000976c
 800fe10:	2000c898 	.word	0x2000c898
 800fe14:	2000c8a0 	.word	0x2000c8a0

0800fe18 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800fe18:	b580      	push	{r7, lr}
 800fe1a:	b086      	sub	sp, #24
 800fe1c:	af04      	add	r7, sp, #16
 800fe1e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800fe20:	4b2f      	ldr	r3, [pc, #188]	; (800fee0 <tcp_timewait_input+0xc8>)
 800fe22:	781b      	ldrb	r3, [r3, #0]
 800fe24:	f003 0304 	and.w	r3, r3, #4
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	d153      	bne.n	800fed4 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	d106      	bne.n	800fe40 <tcp_timewait_input+0x28>
 800fe32:	4b2c      	ldr	r3, [pc, #176]	; (800fee4 <tcp_timewait_input+0xcc>)
 800fe34:	f240 22ee 	movw	r2, #750	; 0x2ee
 800fe38:	492b      	ldr	r1, [pc, #172]	; (800fee8 <tcp_timewait_input+0xd0>)
 800fe3a:	482c      	ldr	r0, [pc, #176]	; (800feec <tcp_timewait_input+0xd4>)
 800fe3c:	f008 fe2e 	bl	8018a9c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800fe40:	4b27      	ldr	r3, [pc, #156]	; (800fee0 <tcp_timewait_input+0xc8>)
 800fe42:	781b      	ldrb	r3, [r3, #0]
 800fe44:	f003 0302 	and.w	r3, r3, #2
 800fe48:	2b00      	cmp	r3, #0
 800fe4a:	d02a      	beq.n	800fea2 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800fe4c:	4b28      	ldr	r3, [pc, #160]	; (800fef0 <tcp_timewait_input+0xd8>)
 800fe4e:	681a      	ldr	r2, [r3, #0]
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe54:	1ad3      	subs	r3, r2, r3
 800fe56:	2b00      	cmp	r3, #0
 800fe58:	db2d      	blt.n	800feb6 <tcp_timewait_input+0x9e>
 800fe5a:	4b25      	ldr	r3, [pc, #148]	; (800fef0 <tcp_timewait_input+0xd8>)
 800fe5c:	681a      	ldr	r2, [r3, #0]
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe62:	6879      	ldr	r1, [r7, #4]
 800fe64:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fe66:	440b      	add	r3, r1
 800fe68:	1ad3      	subs	r3, r2, r3
 800fe6a:	2b00      	cmp	r3, #0
 800fe6c:	dc23      	bgt.n	800feb6 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fe6e:	4b21      	ldr	r3, [pc, #132]	; (800fef4 <tcp_timewait_input+0xdc>)
 800fe70:	6819      	ldr	r1, [r3, #0]
 800fe72:	4b21      	ldr	r3, [pc, #132]	; (800fef8 <tcp_timewait_input+0xe0>)
 800fe74:	881b      	ldrh	r3, [r3, #0]
 800fe76:	461a      	mov	r2, r3
 800fe78:	4b1d      	ldr	r3, [pc, #116]	; (800fef0 <tcp_timewait_input+0xd8>)
 800fe7a:	681b      	ldr	r3, [r3, #0]
 800fe7c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fe7e:	4b1f      	ldr	r3, [pc, #124]	; (800fefc <tcp_timewait_input+0xe4>)
 800fe80:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fe82:	885b      	ldrh	r3, [r3, #2]
 800fe84:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fe86:	4a1d      	ldr	r2, [pc, #116]	; (800fefc <tcp_timewait_input+0xe4>)
 800fe88:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fe8a:	8812      	ldrh	r2, [r2, #0]
 800fe8c:	b292      	uxth	r2, r2
 800fe8e:	9202      	str	r2, [sp, #8]
 800fe90:	9301      	str	r3, [sp, #4]
 800fe92:	4b1b      	ldr	r3, [pc, #108]	; (800ff00 <tcp_timewait_input+0xe8>)
 800fe94:	9300      	str	r3, [sp, #0]
 800fe96:	4b1b      	ldr	r3, [pc, #108]	; (800ff04 <tcp_timewait_input+0xec>)
 800fe98:	4602      	mov	r2, r0
 800fe9a:	6878      	ldr	r0, [r7, #4]
 800fe9c:	f002 fe72 	bl	8012b84 <tcp_rst>
      return;
 800fea0:	e01b      	b.n	800feda <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800fea2:	4b0f      	ldr	r3, [pc, #60]	; (800fee0 <tcp_timewait_input+0xc8>)
 800fea4:	781b      	ldrb	r3, [r3, #0]
 800fea6:	f003 0301 	and.w	r3, r3, #1
 800feaa:	2b00      	cmp	r3, #0
 800feac:	d003      	beq.n	800feb6 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800feae:	4b16      	ldr	r3, [pc, #88]	; (800ff08 <tcp_timewait_input+0xf0>)
 800feb0:	681a      	ldr	r2, [r3, #0]
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800feb6:	4b10      	ldr	r3, [pc, #64]	; (800fef8 <tcp_timewait_input+0xe0>)
 800feb8:	881b      	ldrh	r3, [r3, #0]
 800feba:	2b00      	cmp	r3, #0
 800febc:	d00c      	beq.n	800fed8 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	8b5b      	ldrh	r3, [r3, #26]
 800fec2:	f043 0302 	orr.w	r3, r3, #2
 800fec6:	b29a      	uxth	r2, r3
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800fecc:	6878      	ldr	r0, [r7, #4]
 800fece:	f002 f8a5 	bl	801201c <tcp_output>
  }
  return;
 800fed2:	e001      	b.n	800fed8 <tcp_timewait_input+0xc0>
    return;
 800fed4:	bf00      	nop
 800fed6:	e000      	b.n	800feda <tcp_timewait_input+0xc2>
  return;
 800fed8:	bf00      	nop
}
 800feda:	3708      	adds	r7, #8
 800fedc:	46bd      	mov	sp, r7
 800fede:	bd80      	pop	{r7, pc}
 800fee0:	2000c8d0 	.word	0x2000c8d0
 800fee4:	0801aeb8 	.word	0x0801aeb8
 800fee8:	0801b0d0 	.word	0x0801b0d0
 800feec:	0801af04 	.word	0x0801af04
 800fef0:	2000c8c4 	.word	0x2000c8c4
 800fef4:	2000c8c8 	.word	0x2000c8c8
 800fef8:	2000c8ce 	.word	0x2000c8ce
 800fefc:	2000c8b4 	.word	0x2000c8b4
 800ff00:	2000977c 	.word	0x2000977c
 800ff04:	20009780 	.word	0x20009780
 800ff08:	2000c88c 	.word	0x2000c88c

0800ff0c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800ff0c:	b590      	push	{r4, r7, lr}
 800ff0e:	b08d      	sub	sp, #52	; 0x34
 800ff10:	af04      	add	r7, sp, #16
 800ff12:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800ff14:	2300      	movs	r3, #0
 800ff16:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800ff18:	2300      	movs	r3, #0
 800ff1a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d106      	bne.n	800ff30 <tcp_process+0x24>
 800ff22:	4b9d      	ldr	r3, [pc, #628]	; (8010198 <tcp_process+0x28c>)
 800ff24:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800ff28:	499c      	ldr	r1, [pc, #624]	; (801019c <tcp_process+0x290>)
 800ff2a:	489d      	ldr	r0, [pc, #628]	; (80101a0 <tcp_process+0x294>)
 800ff2c:	f008 fdb6 	bl	8018a9c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800ff30:	4b9c      	ldr	r3, [pc, #624]	; (80101a4 <tcp_process+0x298>)
 800ff32:	781b      	ldrb	r3, [r3, #0]
 800ff34:	f003 0304 	and.w	r3, r3, #4
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	d04e      	beq.n	800ffda <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	7d1b      	ldrb	r3, [r3, #20]
 800ff40:	2b02      	cmp	r3, #2
 800ff42:	d108      	bne.n	800ff56 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ff48:	4b97      	ldr	r3, [pc, #604]	; (80101a8 <tcp_process+0x29c>)
 800ff4a:	681b      	ldr	r3, [r3, #0]
 800ff4c:	429a      	cmp	r2, r3
 800ff4e:	d123      	bne.n	800ff98 <tcp_process+0x8c>
        acceptable = 1;
 800ff50:	2301      	movs	r3, #1
 800ff52:	76fb      	strb	r3, [r7, #27]
 800ff54:	e020      	b.n	800ff98 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ff5a:	4b94      	ldr	r3, [pc, #592]	; (80101ac <tcp_process+0x2a0>)
 800ff5c:	681b      	ldr	r3, [r3, #0]
 800ff5e:	429a      	cmp	r2, r3
 800ff60:	d102      	bne.n	800ff68 <tcp_process+0x5c>
        acceptable = 1;
 800ff62:	2301      	movs	r3, #1
 800ff64:	76fb      	strb	r3, [r7, #27]
 800ff66:	e017      	b.n	800ff98 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ff68:	4b90      	ldr	r3, [pc, #576]	; (80101ac <tcp_process+0x2a0>)
 800ff6a:	681a      	ldr	r2, [r3, #0]
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff70:	1ad3      	subs	r3, r2, r3
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	db10      	blt.n	800ff98 <tcp_process+0x8c>
 800ff76:	4b8d      	ldr	r3, [pc, #564]	; (80101ac <tcp_process+0x2a0>)
 800ff78:	681a      	ldr	r2, [r3, #0]
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff7e:	6879      	ldr	r1, [r7, #4]
 800ff80:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ff82:	440b      	add	r3, r1
 800ff84:	1ad3      	subs	r3, r2, r3
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	dc06      	bgt.n	800ff98 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	8b5b      	ldrh	r3, [r3, #26]
 800ff8e:	f043 0302 	orr.w	r3, r3, #2
 800ff92:	b29a      	uxth	r2, r3
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800ff98:	7efb      	ldrb	r3, [r7, #27]
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	d01b      	beq.n	800ffd6 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	7d1b      	ldrb	r3, [r3, #20]
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	d106      	bne.n	800ffb4 <tcp_process+0xa8>
 800ffa6:	4b7c      	ldr	r3, [pc, #496]	; (8010198 <tcp_process+0x28c>)
 800ffa8:	f44f 724e 	mov.w	r2, #824	; 0x338
 800ffac:	4980      	ldr	r1, [pc, #512]	; (80101b0 <tcp_process+0x2a4>)
 800ffae:	487c      	ldr	r0, [pc, #496]	; (80101a0 <tcp_process+0x294>)
 800ffb0:	f008 fd74 	bl	8018a9c <iprintf>
      recv_flags |= TF_RESET;
 800ffb4:	4b7f      	ldr	r3, [pc, #508]	; (80101b4 <tcp_process+0x2a8>)
 800ffb6:	781b      	ldrb	r3, [r3, #0]
 800ffb8:	f043 0308 	orr.w	r3, r3, #8
 800ffbc:	b2da      	uxtb	r2, r3
 800ffbe:	4b7d      	ldr	r3, [pc, #500]	; (80101b4 <tcp_process+0x2a8>)
 800ffc0:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	8b5b      	ldrh	r3, [r3, #26]
 800ffc6:	f023 0301 	bic.w	r3, r3, #1
 800ffca:	b29a      	uxth	r2, r3
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800ffd0:	f06f 030d 	mvn.w	r3, #13
 800ffd4:	e37a      	b.n	80106cc <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800ffd6:	2300      	movs	r3, #0
 800ffd8:	e378      	b.n	80106cc <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800ffda:	4b72      	ldr	r3, [pc, #456]	; (80101a4 <tcp_process+0x298>)
 800ffdc:	781b      	ldrb	r3, [r3, #0]
 800ffde:	f003 0302 	and.w	r3, r3, #2
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d010      	beq.n	8010008 <tcp_process+0xfc>
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	7d1b      	ldrb	r3, [r3, #20]
 800ffea:	2b02      	cmp	r3, #2
 800ffec:	d00c      	beq.n	8010008 <tcp_process+0xfc>
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	7d1b      	ldrb	r3, [r3, #20]
 800fff2:	2b03      	cmp	r3, #3
 800fff4:	d008      	beq.n	8010008 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	8b5b      	ldrh	r3, [r3, #26]
 800fffa:	f043 0302 	orr.w	r3, r3, #2
 800fffe:	b29a      	uxth	r2, r3
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8010004:	2300      	movs	r3, #0
 8010006:	e361      	b.n	80106cc <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	8b5b      	ldrh	r3, [r3, #26]
 801000c:	f003 0310 	and.w	r3, r3, #16
 8010010:	2b00      	cmp	r3, #0
 8010012:	d103      	bne.n	801001c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8010014:	4b68      	ldr	r3, [pc, #416]	; (80101b8 <tcp_process+0x2ac>)
 8010016:	681a      	ldr	r2, [r3, #0]
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	2200      	movs	r2, #0
 8010020:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	2200      	movs	r2, #0
 8010028:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 801002c:	6878      	ldr	r0, [r7, #4]
 801002e:	f001 fc2f 	bl	8011890 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	7d1b      	ldrb	r3, [r3, #20]
 8010036:	3b02      	subs	r3, #2
 8010038:	2b07      	cmp	r3, #7
 801003a:	f200 8337 	bhi.w	80106ac <tcp_process+0x7a0>
 801003e:	a201      	add	r2, pc, #4	; (adr r2, 8010044 <tcp_process+0x138>)
 8010040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010044:	08010065 	.word	0x08010065
 8010048:	08010295 	.word	0x08010295
 801004c:	0801040d 	.word	0x0801040d
 8010050:	08010437 	.word	0x08010437
 8010054:	0801055b 	.word	0x0801055b
 8010058:	0801040d 	.word	0x0801040d
 801005c:	080105e7 	.word	0x080105e7
 8010060:	08010677 	.word	0x08010677
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8010064:	4b4f      	ldr	r3, [pc, #316]	; (80101a4 <tcp_process+0x298>)
 8010066:	781b      	ldrb	r3, [r3, #0]
 8010068:	f003 0310 	and.w	r3, r3, #16
 801006c:	2b00      	cmp	r3, #0
 801006e:	f000 80e4 	beq.w	801023a <tcp_process+0x32e>
 8010072:	4b4c      	ldr	r3, [pc, #304]	; (80101a4 <tcp_process+0x298>)
 8010074:	781b      	ldrb	r3, [r3, #0]
 8010076:	f003 0302 	and.w	r3, r3, #2
 801007a:	2b00      	cmp	r3, #0
 801007c:	f000 80dd 	beq.w	801023a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010084:	1c5a      	adds	r2, r3, #1
 8010086:	4b48      	ldr	r3, [pc, #288]	; (80101a8 <tcp_process+0x29c>)
 8010088:	681b      	ldr	r3, [r3, #0]
 801008a:	429a      	cmp	r2, r3
 801008c:	f040 80d5 	bne.w	801023a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8010090:	4b46      	ldr	r3, [pc, #280]	; (80101ac <tcp_process+0x2a0>)
 8010092:	681b      	ldr	r3, [r3, #0]
 8010094:	1c5a      	adds	r2, r3, #1
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 80100a2:	4b41      	ldr	r3, [pc, #260]	; (80101a8 <tcp_process+0x29c>)
 80100a4:	681a      	ldr	r2, [r3, #0]
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 80100aa:	4b44      	ldr	r3, [pc, #272]	; (80101bc <tcp_process+0x2b0>)
 80100ac:	681b      	ldr	r3, [r3, #0]
 80100ae:	89db      	ldrh	r3, [r3, #14]
 80100b0:	b29a      	uxth	r2, r3
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80100c4:	4b39      	ldr	r3, [pc, #228]	; (80101ac <tcp_process+0x2a0>)
 80100c6:	681b      	ldr	r3, [r3, #0]
 80100c8:	1e5a      	subs	r2, r3, #1
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	2204      	movs	r2, #4
 80100d2:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	3304      	adds	r3, #4
 80100dc:	4618      	mov	r0, r3
 80100de:	f006 fca3 	bl	8016a28 <ip4_route>
 80100e2:	4601      	mov	r1, r0
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	3304      	adds	r3, #4
 80100e8:	461a      	mov	r2, r3
 80100ea:	4620      	mov	r0, r4
 80100ec:	f7ff f88c 	bl	800f208 <tcp_eff_send_mss_netif>
 80100f0:	4603      	mov	r3, r0
 80100f2:	461a      	mov	r2, r3
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80100fc:	009a      	lsls	r2, r3, #2
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010102:	005b      	lsls	r3, r3, #1
 8010104:	f241 111c 	movw	r1, #4380	; 0x111c
 8010108:	428b      	cmp	r3, r1
 801010a:	bf38      	it	cc
 801010c:	460b      	movcc	r3, r1
 801010e:	429a      	cmp	r2, r3
 8010110:	d204      	bcs.n	801011c <tcp_process+0x210>
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010116:	009b      	lsls	r3, r3, #2
 8010118:	b29b      	uxth	r3, r3
 801011a:	e00d      	b.n	8010138 <tcp_process+0x22c>
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010120:	005b      	lsls	r3, r3, #1
 8010122:	f241 121c 	movw	r2, #4380	; 0x111c
 8010126:	4293      	cmp	r3, r2
 8010128:	d904      	bls.n	8010134 <tcp_process+0x228>
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801012e:	005b      	lsls	r3, r3, #1
 8010130:	b29b      	uxth	r3, r3
 8010132:	e001      	b.n	8010138 <tcp_process+0x22c>
 8010134:	f241 131c 	movw	r3, #4380	; 0x111c
 8010138:	687a      	ldr	r2, [r7, #4]
 801013a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010144:	2b00      	cmp	r3, #0
 8010146:	d106      	bne.n	8010156 <tcp_process+0x24a>
 8010148:	4b13      	ldr	r3, [pc, #76]	; (8010198 <tcp_process+0x28c>)
 801014a:	f44f 725b 	mov.w	r2, #876	; 0x36c
 801014e:	491c      	ldr	r1, [pc, #112]	; (80101c0 <tcp_process+0x2b4>)
 8010150:	4813      	ldr	r0, [pc, #76]	; (80101a0 <tcp_process+0x294>)
 8010152:	f008 fca3 	bl	8018a9c <iprintf>
        --pcb->snd_queuelen;
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801015c:	3b01      	subs	r3, #1
 801015e:	b29a      	uxth	r2, r3
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801016a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 801016c:	69fb      	ldr	r3, [r7, #28]
 801016e:	2b00      	cmp	r3, #0
 8010170:	d12a      	bne.n	80101c8 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010176:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8010178:	69fb      	ldr	r3, [r7, #28]
 801017a:	2b00      	cmp	r3, #0
 801017c:	d106      	bne.n	801018c <tcp_process+0x280>
 801017e:	4b06      	ldr	r3, [pc, #24]	; (8010198 <tcp_process+0x28c>)
 8010180:	f44f 725d 	mov.w	r2, #884	; 0x374
 8010184:	490f      	ldr	r1, [pc, #60]	; (80101c4 <tcp_process+0x2b8>)
 8010186:	4806      	ldr	r0, [pc, #24]	; (80101a0 <tcp_process+0x294>)
 8010188:	f008 fc88 	bl	8018a9c <iprintf>
          pcb->unsent = rseg->next;
 801018c:	69fb      	ldr	r3, [r7, #28]
 801018e:	681a      	ldr	r2, [r3, #0]
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	66da      	str	r2, [r3, #108]	; 0x6c
 8010194:	e01c      	b.n	80101d0 <tcp_process+0x2c4>
 8010196:	bf00      	nop
 8010198:	0801aeb8 	.word	0x0801aeb8
 801019c:	0801b0f0 	.word	0x0801b0f0
 80101a0:	0801af04 	.word	0x0801af04
 80101a4:	2000c8d0 	.word	0x2000c8d0
 80101a8:	2000c8c8 	.word	0x2000c8c8
 80101ac:	2000c8c4 	.word	0x2000c8c4
 80101b0:	0801b10c 	.word	0x0801b10c
 80101b4:	2000c8d1 	.word	0x2000c8d1
 80101b8:	2000c88c 	.word	0x2000c88c
 80101bc:	2000c8b4 	.word	0x2000c8b4
 80101c0:	0801b12c 	.word	0x0801b12c
 80101c4:	0801b144 	.word	0x0801b144
        } else {
          pcb->unacked = rseg->next;
 80101c8:	69fb      	ldr	r3, [r7, #28]
 80101ca:	681a      	ldr	r2, [r3, #0]
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 80101d0:	69f8      	ldr	r0, [r7, #28]
 80101d2:	f7fe fd22 	bl	800ec1a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d104      	bne.n	80101e8 <tcp_process+0x2dc>
          pcb->rtime = -1;
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80101e4:	861a      	strh	r2, [r3, #48]	; 0x30
 80101e6:	e006      	b.n	80101f6 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	2200      	movs	r2, #0
 80101ec:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	2200      	movs	r2, #0
 80101f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	d00a      	beq.n	8010216 <tcp_process+0x30a>
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010206:	687a      	ldr	r2, [r7, #4]
 8010208:	6910      	ldr	r0, [r2, #16]
 801020a:	2200      	movs	r2, #0
 801020c:	6879      	ldr	r1, [r7, #4]
 801020e:	4798      	blx	r3
 8010210:	4603      	mov	r3, r0
 8010212:	76bb      	strb	r3, [r7, #26]
 8010214:	e001      	b.n	801021a <tcp_process+0x30e>
 8010216:	2300      	movs	r3, #0
 8010218:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 801021a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801021e:	f113 0f0d 	cmn.w	r3, #13
 8010222:	d102      	bne.n	801022a <tcp_process+0x31e>
          return ERR_ABRT;
 8010224:	f06f 030c 	mvn.w	r3, #12
 8010228:	e250      	b.n	80106cc <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	8b5b      	ldrh	r3, [r3, #26]
 801022e:	f043 0302 	orr.w	r3, r3, #2
 8010232:	b29a      	uxth	r2, r3
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8010238:	e23a      	b.n	80106b0 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 801023a:	4b98      	ldr	r3, [pc, #608]	; (801049c <tcp_process+0x590>)
 801023c:	781b      	ldrb	r3, [r3, #0]
 801023e:	f003 0310 	and.w	r3, r3, #16
 8010242:	2b00      	cmp	r3, #0
 8010244:	f000 8234 	beq.w	80106b0 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010248:	4b95      	ldr	r3, [pc, #596]	; (80104a0 <tcp_process+0x594>)
 801024a:	6819      	ldr	r1, [r3, #0]
 801024c:	4b95      	ldr	r3, [pc, #596]	; (80104a4 <tcp_process+0x598>)
 801024e:	881b      	ldrh	r3, [r3, #0]
 8010250:	461a      	mov	r2, r3
 8010252:	4b95      	ldr	r3, [pc, #596]	; (80104a8 <tcp_process+0x59c>)
 8010254:	681b      	ldr	r3, [r3, #0]
 8010256:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010258:	4b94      	ldr	r3, [pc, #592]	; (80104ac <tcp_process+0x5a0>)
 801025a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801025c:	885b      	ldrh	r3, [r3, #2]
 801025e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010260:	4a92      	ldr	r2, [pc, #584]	; (80104ac <tcp_process+0x5a0>)
 8010262:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010264:	8812      	ldrh	r2, [r2, #0]
 8010266:	b292      	uxth	r2, r2
 8010268:	9202      	str	r2, [sp, #8]
 801026a:	9301      	str	r3, [sp, #4]
 801026c:	4b90      	ldr	r3, [pc, #576]	; (80104b0 <tcp_process+0x5a4>)
 801026e:	9300      	str	r3, [sp, #0]
 8010270:	4b90      	ldr	r3, [pc, #576]	; (80104b4 <tcp_process+0x5a8>)
 8010272:	4602      	mov	r2, r0
 8010274:	6878      	ldr	r0, [r7, #4]
 8010276:	f002 fc85 	bl	8012b84 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010280:	2b05      	cmp	r3, #5
 8010282:	f200 8215 	bhi.w	80106b0 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	2200      	movs	r2, #0
 801028a:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 801028c:	6878      	ldr	r0, [r7, #4]
 801028e:	f002 fa4f 	bl	8012730 <tcp_rexmit_rto>
      break;
 8010292:	e20d      	b.n	80106b0 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8010294:	4b81      	ldr	r3, [pc, #516]	; (801049c <tcp_process+0x590>)
 8010296:	781b      	ldrb	r3, [r3, #0]
 8010298:	f003 0310 	and.w	r3, r3, #16
 801029c:	2b00      	cmp	r3, #0
 801029e:	f000 80a1 	beq.w	80103e4 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80102a2:	4b7f      	ldr	r3, [pc, #508]	; (80104a0 <tcp_process+0x594>)
 80102a4:	681a      	ldr	r2, [r3, #0]
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80102aa:	1ad3      	subs	r3, r2, r3
 80102ac:	3b01      	subs	r3, #1
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	db7e      	blt.n	80103b0 <tcp_process+0x4a4>
 80102b2:	4b7b      	ldr	r3, [pc, #492]	; (80104a0 <tcp_process+0x594>)
 80102b4:	681a      	ldr	r2, [r3, #0]
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80102ba:	1ad3      	subs	r3, r2, r3
 80102bc:	2b00      	cmp	r3, #0
 80102be:	dc77      	bgt.n	80103b0 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	2204      	movs	r2, #4
 80102c4:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	d102      	bne.n	80102d4 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80102ce:	23fa      	movs	r3, #250	; 0xfa
 80102d0:	76bb      	strb	r3, [r7, #26]
 80102d2:	e01d      	b.n	8010310 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80102d8:	699b      	ldr	r3, [r3, #24]
 80102da:	2b00      	cmp	r3, #0
 80102dc:	d106      	bne.n	80102ec <tcp_process+0x3e0>
 80102de:	4b76      	ldr	r3, [pc, #472]	; (80104b8 <tcp_process+0x5ac>)
 80102e0:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 80102e4:	4975      	ldr	r1, [pc, #468]	; (80104bc <tcp_process+0x5b0>)
 80102e6:	4876      	ldr	r0, [pc, #472]	; (80104c0 <tcp_process+0x5b4>)
 80102e8:	f008 fbd8 	bl	8018a9c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80102f0:	699b      	ldr	r3, [r3, #24]
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d00a      	beq.n	801030c <tcp_process+0x400>
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80102fa:	699b      	ldr	r3, [r3, #24]
 80102fc:	687a      	ldr	r2, [r7, #4]
 80102fe:	6910      	ldr	r0, [r2, #16]
 8010300:	2200      	movs	r2, #0
 8010302:	6879      	ldr	r1, [r7, #4]
 8010304:	4798      	blx	r3
 8010306:	4603      	mov	r3, r0
 8010308:	76bb      	strb	r3, [r7, #26]
 801030a:	e001      	b.n	8010310 <tcp_process+0x404>
 801030c:	23f0      	movs	r3, #240	; 0xf0
 801030e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8010310:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010314:	2b00      	cmp	r3, #0
 8010316:	d00a      	beq.n	801032e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8010318:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801031c:	f113 0f0d 	cmn.w	r3, #13
 8010320:	d002      	beq.n	8010328 <tcp_process+0x41c>
              tcp_abort(pcb);
 8010322:	6878      	ldr	r0, [r7, #4]
 8010324:	f7fd ff8e 	bl	800e244 <tcp_abort>
            }
            return ERR_ABRT;
 8010328:	f06f 030c 	mvn.w	r3, #12
 801032c:	e1ce      	b.n	80106cc <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 801032e:	6878      	ldr	r0, [r7, #4]
 8010330:	f000 fae0 	bl	80108f4 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8010334:	4b63      	ldr	r3, [pc, #396]	; (80104c4 <tcp_process+0x5b8>)
 8010336:	881b      	ldrh	r3, [r3, #0]
 8010338:	2b00      	cmp	r3, #0
 801033a:	d005      	beq.n	8010348 <tcp_process+0x43c>
            recv_acked--;
 801033c:	4b61      	ldr	r3, [pc, #388]	; (80104c4 <tcp_process+0x5b8>)
 801033e:	881b      	ldrh	r3, [r3, #0]
 8010340:	3b01      	subs	r3, #1
 8010342:	b29a      	uxth	r2, r3
 8010344:	4b5f      	ldr	r3, [pc, #380]	; (80104c4 <tcp_process+0x5b8>)
 8010346:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801034c:	009a      	lsls	r2, r3, #2
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010352:	005b      	lsls	r3, r3, #1
 8010354:	f241 111c 	movw	r1, #4380	; 0x111c
 8010358:	428b      	cmp	r3, r1
 801035a:	bf38      	it	cc
 801035c:	460b      	movcc	r3, r1
 801035e:	429a      	cmp	r2, r3
 8010360:	d204      	bcs.n	801036c <tcp_process+0x460>
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010366:	009b      	lsls	r3, r3, #2
 8010368:	b29b      	uxth	r3, r3
 801036a:	e00d      	b.n	8010388 <tcp_process+0x47c>
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010370:	005b      	lsls	r3, r3, #1
 8010372:	f241 121c 	movw	r2, #4380	; 0x111c
 8010376:	4293      	cmp	r3, r2
 8010378:	d904      	bls.n	8010384 <tcp_process+0x478>
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801037e:	005b      	lsls	r3, r3, #1
 8010380:	b29b      	uxth	r3, r3
 8010382:	e001      	b.n	8010388 <tcp_process+0x47c>
 8010384:	f241 131c 	movw	r3, #4380	; 0x111c
 8010388:	687a      	ldr	r2, [r7, #4]
 801038a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 801038e:	4b4e      	ldr	r3, [pc, #312]	; (80104c8 <tcp_process+0x5bc>)
 8010390:	781b      	ldrb	r3, [r3, #0]
 8010392:	f003 0320 	and.w	r3, r3, #32
 8010396:	2b00      	cmp	r3, #0
 8010398:	d037      	beq.n	801040a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	8b5b      	ldrh	r3, [r3, #26]
 801039e:	f043 0302 	orr.w	r3, r3, #2
 80103a2:	b29a      	uxth	r2, r3
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	2207      	movs	r2, #7
 80103ac:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 80103ae:	e02c      	b.n	801040a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80103b0:	4b3b      	ldr	r3, [pc, #236]	; (80104a0 <tcp_process+0x594>)
 80103b2:	6819      	ldr	r1, [r3, #0]
 80103b4:	4b3b      	ldr	r3, [pc, #236]	; (80104a4 <tcp_process+0x598>)
 80103b6:	881b      	ldrh	r3, [r3, #0]
 80103b8:	461a      	mov	r2, r3
 80103ba:	4b3b      	ldr	r3, [pc, #236]	; (80104a8 <tcp_process+0x59c>)
 80103bc:	681b      	ldr	r3, [r3, #0]
 80103be:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80103c0:	4b3a      	ldr	r3, [pc, #232]	; (80104ac <tcp_process+0x5a0>)
 80103c2:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80103c4:	885b      	ldrh	r3, [r3, #2]
 80103c6:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80103c8:	4a38      	ldr	r2, [pc, #224]	; (80104ac <tcp_process+0x5a0>)
 80103ca:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80103cc:	8812      	ldrh	r2, [r2, #0]
 80103ce:	b292      	uxth	r2, r2
 80103d0:	9202      	str	r2, [sp, #8]
 80103d2:	9301      	str	r3, [sp, #4]
 80103d4:	4b36      	ldr	r3, [pc, #216]	; (80104b0 <tcp_process+0x5a4>)
 80103d6:	9300      	str	r3, [sp, #0]
 80103d8:	4b36      	ldr	r3, [pc, #216]	; (80104b4 <tcp_process+0x5a8>)
 80103da:	4602      	mov	r2, r0
 80103dc:	6878      	ldr	r0, [r7, #4]
 80103de:	f002 fbd1 	bl	8012b84 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80103e2:	e167      	b.n	80106b4 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80103e4:	4b2d      	ldr	r3, [pc, #180]	; (801049c <tcp_process+0x590>)
 80103e6:	781b      	ldrb	r3, [r3, #0]
 80103e8:	f003 0302 	and.w	r3, r3, #2
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	f000 8161 	beq.w	80106b4 <tcp_process+0x7a8>
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80103f6:	1e5a      	subs	r2, r3, #1
 80103f8:	4b2b      	ldr	r3, [pc, #172]	; (80104a8 <tcp_process+0x59c>)
 80103fa:	681b      	ldr	r3, [r3, #0]
 80103fc:	429a      	cmp	r2, r3
 80103fe:	f040 8159 	bne.w	80106b4 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8010402:	6878      	ldr	r0, [r7, #4]
 8010404:	f002 f9b6 	bl	8012774 <tcp_rexmit>
      break;
 8010408:	e154      	b.n	80106b4 <tcp_process+0x7a8>
 801040a:	e153      	b.n	80106b4 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 801040c:	6878      	ldr	r0, [r7, #4]
 801040e:	f000 fa71 	bl	80108f4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8010412:	4b2d      	ldr	r3, [pc, #180]	; (80104c8 <tcp_process+0x5bc>)
 8010414:	781b      	ldrb	r3, [r3, #0]
 8010416:	f003 0320 	and.w	r3, r3, #32
 801041a:	2b00      	cmp	r3, #0
 801041c:	f000 814c 	beq.w	80106b8 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	8b5b      	ldrh	r3, [r3, #26]
 8010424:	f043 0302 	orr.w	r3, r3, #2
 8010428:	b29a      	uxth	r2, r3
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	2207      	movs	r2, #7
 8010432:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010434:	e140      	b.n	80106b8 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8010436:	6878      	ldr	r0, [r7, #4]
 8010438:	f000 fa5c 	bl	80108f4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801043c:	4b22      	ldr	r3, [pc, #136]	; (80104c8 <tcp_process+0x5bc>)
 801043e:	781b      	ldrb	r3, [r3, #0]
 8010440:	f003 0320 	and.w	r3, r3, #32
 8010444:	2b00      	cmp	r3, #0
 8010446:	d071      	beq.n	801052c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010448:	4b14      	ldr	r3, [pc, #80]	; (801049c <tcp_process+0x590>)
 801044a:	781b      	ldrb	r3, [r3, #0]
 801044c:	f003 0310 	and.w	r3, r3, #16
 8010450:	2b00      	cmp	r3, #0
 8010452:	d060      	beq.n	8010516 <tcp_process+0x60a>
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010458:	4b11      	ldr	r3, [pc, #68]	; (80104a0 <tcp_process+0x594>)
 801045a:	681b      	ldr	r3, [r3, #0]
 801045c:	429a      	cmp	r2, r3
 801045e:	d15a      	bne.n	8010516 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010464:	2b00      	cmp	r3, #0
 8010466:	d156      	bne.n	8010516 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	8b5b      	ldrh	r3, [r3, #26]
 801046c:	f043 0302 	orr.w	r3, r3, #2
 8010470:	b29a      	uxth	r2, r3
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8010476:	6878      	ldr	r0, [r7, #4]
 8010478:	f7fe fdbc 	bl	800eff4 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 801047c:	4b13      	ldr	r3, [pc, #76]	; (80104cc <tcp_process+0x5c0>)
 801047e:	681b      	ldr	r3, [r3, #0]
 8010480:	687a      	ldr	r2, [r7, #4]
 8010482:	429a      	cmp	r2, r3
 8010484:	d105      	bne.n	8010492 <tcp_process+0x586>
 8010486:	4b11      	ldr	r3, [pc, #68]	; (80104cc <tcp_process+0x5c0>)
 8010488:	681b      	ldr	r3, [r3, #0]
 801048a:	68db      	ldr	r3, [r3, #12]
 801048c:	4a0f      	ldr	r2, [pc, #60]	; (80104cc <tcp_process+0x5c0>)
 801048e:	6013      	str	r3, [r2, #0]
 8010490:	e02e      	b.n	80104f0 <tcp_process+0x5e4>
 8010492:	4b0e      	ldr	r3, [pc, #56]	; (80104cc <tcp_process+0x5c0>)
 8010494:	681b      	ldr	r3, [r3, #0]
 8010496:	617b      	str	r3, [r7, #20]
 8010498:	e027      	b.n	80104ea <tcp_process+0x5de>
 801049a:	bf00      	nop
 801049c:	2000c8d0 	.word	0x2000c8d0
 80104a0:	2000c8c8 	.word	0x2000c8c8
 80104a4:	2000c8ce 	.word	0x2000c8ce
 80104a8:	2000c8c4 	.word	0x2000c8c4
 80104ac:	2000c8b4 	.word	0x2000c8b4
 80104b0:	2000977c 	.word	0x2000977c
 80104b4:	20009780 	.word	0x20009780
 80104b8:	0801aeb8 	.word	0x0801aeb8
 80104bc:	0801b158 	.word	0x0801b158
 80104c0:	0801af04 	.word	0x0801af04
 80104c4:	2000c8cc 	.word	0x2000c8cc
 80104c8:	2000c8d1 	.word	0x2000c8d1
 80104cc:	2000c898 	.word	0x2000c898
 80104d0:	697b      	ldr	r3, [r7, #20]
 80104d2:	68db      	ldr	r3, [r3, #12]
 80104d4:	687a      	ldr	r2, [r7, #4]
 80104d6:	429a      	cmp	r2, r3
 80104d8:	d104      	bne.n	80104e4 <tcp_process+0x5d8>
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	68da      	ldr	r2, [r3, #12]
 80104de:	697b      	ldr	r3, [r7, #20]
 80104e0:	60da      	str	r2, [r3, #12]
 80104e2:	e005      	b.n	80104f0 <tcp_process+0x5e4>
 80104e4:	697b      	ldr	r3, [r7, #20]
 80104e6:	68db      	ldr	r3, [r3, #12]
 80104e8:	617b      	str	r3, [r7, #20]
 80104ea:	697b      	ldr	r3, [r7, #20]
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	d1ef      	bne.n	80104d0 <tcp_process+0x5c4>
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	2200      	movs	r2, #0
 80104f4:	60da      	str	r2, [r3, #12]
 80104f6:	4b77      	ldr	r3, [pc, #476]	; (80106d4 <tcp_process+0x7c8>)
 80104f8:	2201      	movs	r2, #1
 80104fa:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	220a      	movs	r2, #10
 8010500:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8010502:	4b75      	ldr	r3, [pc, #468]	; (80106d8 <tcp_process+0x7cc>)
 8010504:	681a      	ldr	r2, [r3, #0]
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	60da      	str	r2, [r3, #12]
 801050a:	4a73      	ldr	r2, [pc, #460]	; (80106d8 <tcp_process+0x7cc>)
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	6013      	str	r3, [r2, #0]
 8010510:	f002 fcfa 	bl	8012f08 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8010514:	e0d2      	b.n	80106bc <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	8b5b      	ldrh	r3, [r3, #26]
 801051a:	f043 0302 	orr.w	r3, r3, #2
 801051e:	b29a      	uxth	r2, r3
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	2208      	movs	r2, #8
 8010528:	751a      	strb	r2, [r3, #20]
      break;
 801052a:	e0c7      	b.n	80106bc <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801052c:	4b6b      	ldr	r3, [pc, #428]	; (80106dc <tcp_process+0x7d0>)
 801052e:	781b      	ldrb	r3, [r3, #0]
 8010530:	f003 0310 	and.w	r3, r3, #16
 8010534:	2b00      	cmp	r3, #0
 8010536:	f000 80c1 	beq.w	80106bc <tcp_process+0x7b0>
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801053e:	4b68      	ldr	r3, [pc, #416]	; (80106e0 <tcp_process+0x7d4>)
 8010540:	681b      	ldr	r3, [r3, #0]
 8010542:	429a      	cmp	r2, r3
 8010544:	f040 80ba 	bne.w	80106bc <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801054c:	2b00      	cmp	r3, #0
 801054e:	f040 80b5 	bne.w	80106bc <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	2206      	movs	r2, #6
 8010556:	751a      	strb	r2, [r3, #20]
      break;
 8010558:	e0b0      	b.n	80106bc <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801055a:	6878      	ldr	r0, [r7, #4]
 801055c:	f000 f9ca 	bl	80108f4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8010560:	4b60      	ldr	r3, [pc, #384]	; (80106e4 <tcp_process+0x7d8>)
 8010562:	781b      	ldrb	r3, [r3, #0]
 8010564:	f003 0320 	and.w	r3, r3, #32
 8010568:	2b00      	cmp	r3, #0
 801056a:	f000 80a9 	beq.w	80106c0 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	8b5b      	ldrh	r3, [r3, #26]
 8010572:	f043 0302 	orr.w	r3, r3, #2
 8010576:	b29a      	uxth	r2, r3
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 801057c:	6878      	ldr	r0, [r7, #4]
 801057e:	f7fe fd39 	bl	800eff4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8010582:	4b59      	ldr	r3, [pc, #356]	; (80106e8 <tcp_process+0x7dc>)
 8010584:	681b      	ldr	r3, [r3, #0]
 8010586:	687a      	ldr	r2, [r7, #4]
 8010588:	429a      	cmp	r2, r3
 801058a:	d105      	bne.n	8010598 <tcp_process+0x68c>
 801058c:	4b56      	ldr	r3, [pc, #344]	; (80106e8 <tcp_process+0x7dc>)
 801058e:	681b      	ldr	r3, [r3, #0]
 8010590:	68db      	ldr	r3, [r3, #12]
 8010592:	4a55      	ldr	r2, [pc, #340]	; (80106e8 <tcp_process+0x7dc>)
 8010594:	6013      	str	r3, [r2, #0]
 8010596:	e013      	b.n	80105c0 <tcp_process+0x6b4>
 8010598:	4b53      	ldr	r3, [pc, #332]	; (80106e8 <tcp_process+0x7dc>)
 801059a:	681b      	ldr	r3, [r3, #0]
 801059c:	613b      	str	r3, [r7, #16]
 801059e:	e00c      	b.n	80105ba <tcp_process+0x6ae>
 80105a0:	693b      	ldr	r3, [r7, #16]
 80105a2:	68db      	ldr	r3, [r3, #12]
 80105a4:	687a      	ldr	r2, [r7, #4]
 80105a6:	429a      	cmp	r2, r3
 80105a8:	d104      	bne.n	80105b4 <tcp_process+0x6a8>
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	68da      	ldr	r2, [r3, #12]
 80105ae:	693b      	ldr	r3, [r7, #16]
 80105b0:	60da      	str	r2, [r3, #12]
 80105b2:	e005      	b.n	80105c0 <tcp_process+0x6b4>
 80105b4:	693b      	ldr	r3, [r7, #16]
 80105b6:	68db      	ldr	r3, [r3, #12]
 80105b8:	613b      	str	r3, [r7, #16]
 80105ba:	693b      	ldr	r3, [r7, #16]
 80105bc:	2b00      	cmp	r3, #0
 80105be:	d1ef      	bne.n	80105a0 <tcp_process+0x694>
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	2200      	movs	r2, #0
 80105c4:	60da      	str	r2, [r3, #12]
 80105c6:	4b43      	ldr	r3, [pc, #268]	; (80106d4 <tcp_process+0x7c8>)
 80105c8:	2201      	movs	r2, #1
 80105ca:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	220a      	movs	r2, #10
 80105d0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80105d2:	4b41      	ldr	r3, [pc, #260]	; (80106d8 <tcp_process+0x7cc>)
 80105d4:	681a      	ldr	r2, [r3, #0]
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	60da      	str	r2, [r3, #12]
 80105da:	4a3f      	ldr	r2, [pc, #252]	; (80106d8 <tcp_process+0x7cc>)
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	6013      	str	r3, [r2, #0]
 80105e0:	f002 fc92 	bl	8012f08 <tcp_timer_needed>
      }
      break;
 80105e4:	e06c      	b.n	80106c0 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80105e6:	6878      	ldr	r0, [r7, #4]
 80105e8:	f000 f984 	bl	80108f4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80105ec:	4b3b      	ldr	r3, [pc, #236]	; (80106dc <tcp_process+0x7d0>)
 80105ee:	781b      	ldrb	r3, [r3, #0]
 80105f0:	f003 0310 	and.w	r3, r3, #16
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	d065      	beq.n	80106c4 <tcp_process+0x7b8>
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80105fc:	4b38      	ldr	r3, [pc, #224]	; (80106e0 <tcp_process+0x7d4>)
 80105fe:	681b      	ldr	r3, [r3, #0]
 8010600:	429a      	cmp	r2, r3
 8010602:	d15f      	bne.n	80106c4 <tcp_process+0x7b8>
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010608:	2b00      	cmp	r3, #0
 801060a:	d15b      	bne.n	80106c4 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 801060c:	6878      	ldr	r0, [r7, #4]
 801060e:	f7fe fcf1 	bl	800eff4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8010612:	4b35      	ldr	r3, [pc, #212]	; (80106e8 <tcp_process+0x7dc>)
 8010614:	681b      	ldr	r3, [r3, #0]
 8010616:	687a      	ldr	r2, [r7, #4]
 8010618:	429a      	cmp	r2, r3
 801061a:	d105      	bne.n	8010628 <tcp_process+0x71c>
 801061c:	4b32      	ldr	r3, [pc, #200]	; (80106e8 <tcp_process+0x7dc>)
 801061e:	681b      	ldr	r3, [r3, #0]
 8010620:	68db      	ldr	r3, [r3, #12]
 8010622:	4a31      	ldr	r2, [pc, #196]	; (80106e8 <tcp_process+0x7dc>)
 8010624:	6013      	str	r3, [r2, #0]
 8010626:	e013      	b.n	8010650 <tcp_process+0x744>
 8010628:	4b2f      	ldr	r3, [pc, #188]	; (80106e8 <tcp_process+0x7dc>)
 801062a:	681b      	ldr	r3, [r3, #0]
 801062c:	60fb      	str	r3, [r7, #12]
 801062e:	e00c      	b.n	801064a <tcp_process+0x73e>
 8010630:	68fb      	ldr	r3, [r7, #12]
 8010632:	68db      	ldr	r3, [r3, #12]
 8010634:	687a      	ldr	r2, [r7, #4]
 8010636:	429a      	cmp	r2, r3
 8010638:	d104      	bne.n	8010644 <tcp_process+0x738>
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	68da      	ldr	r2, [r3, #12]
 801063e:	68fb      	ldr	r3, [r7, #12]
 8010640:	60da      	str	r2, [r3, #12]
 8010642:	e005      	b.n	8010650 <tcp_process+0x744>
 8010644:	68fb      	ldr	r3, [r7, #12]
 8010646:	68db      	ldr	r3, [r3, #12]
 8010648:	60fb      	str	r3, [r7, #12]
 801064a:	68fb      	ldr	r3, [r7, #12]
 801064c:	2b00      	cmp	r3, #0
 801064e:	d1ef      	bne.n	8010630 <tcp_process+0x724>
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	2200      	movs	r2, #0
 8010654:	60da      	str	r2, [r3, #12]
 8010656:	4b1f      	ldr	r3, [pc, #124]	; (80106d4 <tcp_process+0x7c8>)
 8010658:	2201      	movs	r2, #1
 801065a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	220a      	movs	r2, #10
 8010660:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8010662:	4b1d      	ldr	r3, [pc, #116]	; (80106d8 <tcp_process+0x7cc>)
 8010664:	681a      	ldr	r2, [r3, #0]
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	60da      	str	r2, [r3, #12]
 801066a:	4a1b      	ldr	r2, [pc, #108]	; (80106d8 <tcp_process+0x7cc>)
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	6013      	str	r3, [r2, #0]
 8010670:	f002 fc4a 	bl	8012f08 <tcp_timer_needed>
      }
      break;
 8010674:	e026      	b.n	80106c4 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8010676:	6878      	ldr	r0, [r7, #4]
 8010678:	f000 f93c 	bl	80108f4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801067c:	4b17      	ldr	r3, [pc, #92]	; (80106dc <tcp_process+0x7d0>)
 801067e:	781b      	ldrb	r3, [r3, #0]
 8010680:	f003 0310 	and.w	r3, r3, #16
 8010684:	2b00      	cmp	r3, #0
 8010686:	d01f      	beq.n	80106c8 <tcp_process+0x7bc>
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801068c:	4b14      	ldr	r3, [pc, #80]	; (80106e0 <tcp_process+0x7d4>)
 801068e:	681b      	ldr	r3, [r3, #0]
 8010690:	429a      	cmp	r2, r3
 8010692:	d119      	bne.n	80106c8 <tcp_process+0x7bc>
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010698:	2b00      	cmp	r3, #0
 801069a:	d115      	bne.n	80106c8 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 801069c:	4b11      	ldr	r3, [pc, #68]	; (80106e4 <tcp_process+0x7d8>)
 801069e:	781b      	ldrb	r3, [r3, #0]
 80106a0:	f043 0310 	orr.w	r3, r3, #16
 80106a4:	b2da      	uxtb	r2, r3
 80106a6:	4b0f      	ldr	r3, [pc, #60]	; (80106e4 <tcp_process+0x7d8>)
 80106a8:	701a      	strb	r2, [r3, #0]
      }
      break;
 80106aa:	e00d      	b.n	80106c8 <tcp_process+0x7bc>
    default:
      break;
 80106ac:	bf00      	nop
 80106ae:	e00c      	b.n	80106ca <tcp_process+0x7be>
      break;
 80106b0:	bf00      	nop
 80106b2:	e00a      	b.n	80106ca <tcp_process+0x7be>
      break;
 80106b4:	bf00      	nop
 80106b6:	e008      	b.n	80106ca <tcp_process+0x7be>
      break;
 80106b8:	bf00      	nop
 80106ba:	e006      	b.n	80106ca <tcp_process+0x7be>
      break;
 80106bc:	bf00      	nop
 80106be:	e004      	b.n	80106ca <tcp_process+0x7be>
      break;
 80106c0:	bf00      	nop
 80106c2:	e002      	b.n	80106ca <tcp_process+0x7be>
      break;
 80106c4:	bf00      	nop
 80106c6:	e000      	b.n	80106ca <tcp_process+0x7be>
      break;
 80106c8:	bf00      	nop
  }
  return ERR_OK;
 80106ca:	2300      	movs	r3, #0
}
 80106cc:	4618      	mov	r0, r3
 80106ce:	3724      	adds	r7, #36	; 0x24
 80106d0:	46bd      	mov	sp, r7
 80106d2:	bd90      	pop	{r4, r7, pc}
 80106d4:	2000c8a0 	.word	0x2000c8a0
 80106d8:	2000c89c 	.word	0x2000c89c
 80106dc:	2000c8d0 	.word	0x2000c8d0
 80106e0:	2000c8c8 	.word	0x2000c8c8
 80106e4:	2000c8d1 	.word	0x2000c8d1
 80106e8:	2000c898 	.word	0x2000c898

080106ec <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80106ec:	b590      	push	{r4, r7, lr}
 80106ee:	b085      	sub	sp, #20
 80106f0:	af00      	add	r7, sp, #0
 80106f2:	6078      	str	r0, [r7, #4]
 80106f4:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d106      	bne.n	801070a <tcp_oos_insert_segment+0x1e>
 80106fc:	4b3b      	ldr	r3, [pc, #236]	; (80107ec <tcp_oos_insert_segment+0x100>)
 80106fe:	f240 421f 	movw	r2, #1055	; 0x41f
 8010702:	493b      	ldr	r1, [pc, #236]	; (80107f0 <tcp_oos_insert_segment+0x104>)
 8010704:	483b      	ldr	r0, [pc, #236]	; (80107f4 <tcp_oos_insert_segment+0x108>)
 8010706:	f008 f9c9 	bl	8018a9c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	68db      	ldr	r3, [r3, #12]
 801070e:	899b      	ldrh	r3, [r3, #12]
 8010710:	b29b      	uxth	r3, r3
 8010712:	4618      	mov	r0, r3
 8010714:	f7fb fba4 	bl	800be60 <lwip_htons>
 8010718:	4603      	mov	r3, r0
 801071a:	b2db      	uxtb	r3, r3
 801071c:	f003 0301 	and.w	r3, r3, #1
 8010720:	2b00      	cmp	r3, #0
 8010722:	d028      	beq.n	8010776 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8010724:	6838      	ldr	r0, [r7, #0]
 8010726:	f7fe fa63 	bl	800ebf0 <tcp_segs_free>
    next = NULL;
 801072a:	2300      	movs	r3, #0
 801072c:	603b      	str	r3, [r7, #0]
 801072e:	e056      	b.n	80107de <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8010730:	683b      	ldr	r3, [r7, #0]
 8010732:	68db      	ldr	r3, [r3, #12]
 8010734:	899b      	ldrh	r3, [r3, #12]
 8010736:	b29b      	uxth	r3, r3
 8010738:	4618      	mov	r0, r3
 801073a:	f7fb fb91 	bl	800be60 <lwip_htons>
 801073e:	4603      	mov	r3, r0
 8010740:	b2db      	uxtb	r3, r3
 8010742:	f003 0301 	and.w	r3, r3, #1
 8010746:	2b00      	cmp	r3, #0
 8010748:	d00d      	beq.n	8010766 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	68db      	ldr	r3, [r3, #12]
 801074e:	899b      	ldrh	r3, [r3, #12]
 8010750:	b29c      	uxth	r4, r3
 8010752:	2001      	movs	r0, #1
 8010754:	f7fb fb84 	bl	800be60 <lwip_htons>
 8010758:	4603      	mov	r3, r0
 801075a:	461a      	mov	r2, r3
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	68db      	ldr	r3, [r3, #12]
 8010760:	4322      	orrs	r2, r4
 8010762:	b292      	uxth	r2, r2
 8010764:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8010766:	683b      	ldr	r3, [r7, #0]
 8010768:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801076a:	683b      	ldr	r3, [r7, #0]
 801076c:	681b      	ldr	r3, [r3, #0]
 801076e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8010770:	68f8      	ldr	r0, [r7, #12]
 8010772:	f7fe fa52 	bl	800ec1a <tcp_seg_free>
    while (next &&
 8010776:	683b      	ldr	r3, [r7, #0]
 8010778:	2b00      	cmp	r3, #0
 801077a:	d00e      	beq.n	801079a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	891b      	ldrh	r3, [r3, #8]
 8010780:	461a      	mov	r2, r3
 8010782:	4b1d      	ldr	r3, [pc, #116]	; (80107f8 <tcp_oos_insert_segment+0x10c>)
 8010784:	681b      	ldr	r3, [r3, #0]
 8010786:	441a      	add	r2, r3
 8010788:	683b      	ldr	r3, [r7, #0]
 801078a:	68db      	ldr	r3, [r3, #12]
 801078c:	685b      	ldr	r3, [r3, #4]
 801078e:	6839      	ldr	r1, [r7, #0]
 8010790:	8909      	ldrh	r1, [r1, #8]
 8010792:	440b      	add	r3, r1
 8010794:	1ad3      	subs	r3, r2, r3
    while (next &&
 8010796:	2b00      	cmp	r3, #0
 8010798:	daca      	bge.n	8010730 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801079a:	683b      	ldr	r3, [r7, #0]
 801079c:	2b00      	cmp	r3, #0
 801079e:	d01e      	beq.n	80107de <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	891b      	ldrh	r3, [r3, #8]
 80107a4:	461a      	mov	r2, r3
 80107a6:	4b14      	ldr	r3, [pc, #80]	; (80107f8 <tcp_oos_insert_segment+0x10c>)
 80107a8:	681b      	ldr	r3, [r3, #0]
 80107aa:	441a      	add	r2, r3
 80107ac:	683b      	ldr	r3, [r7, #0]
 80107ae:	68db      	ldr	r3, [r3, #12]
 80107b0:	685b      	ldr	r3, [r3, #4]
 80107b2:	1ad3      	subs	r3, r2, r3
    if (next &&
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	dd12      	ble.n	80107de <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80107b8:	683b      	ldr	r3, [r7, #0]
 80107ba:	68db      	ldr	r3, [r3, #12]
 80107bc:	685b      	ldr	r3, [r3, #4]
 80107be:	b29a      	uxth	r2, r3
 80107c0:	4b0d      	ldr	r3, [pc, #52]	; (80107f8 <tcp_oos_insert_segment+0x10c>)
 80107c2:	681b      	ldr	r3, [r3, #0]
 80107c4:	b29b      	uxth	r3, r3
 80107c6:	1ad3      	subs	r3, r2, r3
 80107c8:	b29a      	uxth	r2, r3
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	685a      	ldr	r2, [r3, #4]
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	891b      	ldrh	r3, [r3, #8]
 80107d6:	4619      	mov	r1, r3
 80107d8:	4610      	mov	r0, r2
 80107da:	f7fc fe09 	bl	800d3f0 <pbuf_realloc>
    }
  }
  cseg->next = next;
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	683a      	ldr	r2, [r7, #0]
 80107e2:	601a      	str	r2, [r3, #0]
}
 80107e4:	bf00      	nop
 80107e6:	3714      	adds	r7, #20
 80107e8:	46bd      	mov	sp, r7
 80107ea:	bd90      	pop	{r4, r7, pc}
 80107ec:	0801aeb8 	.word	0x0801aeb8
 80107f0:	0801b178 	.word	0x0801b178
 80107f4:	0801af04 	.word	0x0801af04
 80107f8:	2000c8c4 	.word	0x2000c8c4

080107fc <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80107fc:	b5b0      	push	{r4, r5, r7, lr}
 80107fe:	b086      	sub	sp, #24
 8010800:	af00      	add	r7, sp, #0
 8010802:	60f8      	str	r0, [r7, #12]
 8010804:	60b9      	str	r1, [r7, #8]
 8010806:	607a      	str	r2, [r7, #4]
 8010808:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801080a:	e03e      	b.n	801088a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 801080c:	68bb      	ldr	r3, [r7, #8]
 801080e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8010810:	68bb      	ldr	r3, [r7, #8]
 8010812:	681b      	ldr	r3, [r3, #0]
 8010814:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8010816:	697b      	ldr	r3, [r7, #20]
 8010818:	685b      	ldr	r3, [r3, #4]
 801081a:	4618      	mov	r0, r3
 801081c:	f7fc fffc 	bl	800d818 <pbuf_clen>
 8010820:	4603      	mov	r3, r0
 8010822:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8010824:	68fb      	ldr	r3, [r7, #12]
 8010826:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801082a:	8a7a      	ldrh	r2, [r7, #18]
 801082c:	429a      	cmp	r2, r3
 801082e:	d906      	bls.n	801083e <tcp_free_acked_segments+0x42>
 8010830:	4b2a      	ldr	r3, [pc, #168]	; (80108dc <tcp_free_acked_segments+0xe0>)
 8010832:	f240 4257 	movw	r2, #1111	; 0x457
 8010836:	492a      	ldr	r1, [pc, #168]	; (80108e0 <tcp_free_acked_segments+0xe4>)
 8010838:	482a      	ldr	r0, [pc, #168]	; (80108e4 <tcp_free_acked_segments+0xe8>)
 801083a:	f008 f92f 	bl	8018a9c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801083e:	68fb      	ldr	r3, [r7, #12]
 8010840:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8010844:	8a7b      	ldrh	r3, [r7, #18]
 8010846:	1ad3      	subs	r3, r2, r3
 8010848:	b29a      	uxth	r2, r3
 801084a:	68fb      	ldr	r3, [r7, #12]
 801084c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8010850:	697b      	ldr	r3, [r7, #20]
 8010852:	891a      	ldrh	r2, [r3, #8]
 8010854:	4b24      	ldr	r3, [pc, #144]	; (80108e8 <tcp_free_acked_segments+0xec>)
 8010856:	881b      	ldrh	r3, [r3, #0]
 8010858:	4413      	add	r3, r2
 801085a:	b29a      	uxth	r2, r3
 801085c:	4b22      	ldr	r3, [pc, #136]	; (80108e8 <tcp_free_acked_segments+0xec>)
 801085e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8010860:	6978      	ldr	r0, [r7, #20]
 8010862:	f7fe f9da 	bl	800ec1a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8010866:	68fb      	ldr	r3, [r7, #12]
 8010868:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801086c:	2b00      	cmp	r3, #0
 801086e:	d00c      	beq.n	801088a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8010870:	68bb      	ldr	r3, [r7, #8]
 8010872:	2b00      	cmp	r3, #0
 8010874:	d109      	bne.n	801088a <tcp_free_acked_segments+0x8e>
 8010876:	683b      	ldr	r3, [r7, #0]
 8010878:	2b00      	cmp	r3, #0
 801087a:	d106      	bne.n	801088a <tcp_free_acked_segments+0x8e>
 801087c:	4b17      	ldr	r3, [pc, #92]	; (80108dc <tcp_free_acked_segments+0xe0>)
 801087e:	f240 4261 	movw	r2, #1121	; 0x461
 8010882:	491a      	ldr	r1, [pc, #104]	; (80108ec <tcp_free_acked_segments+0xf0>)
 8010884:	4817      	ldr	r0, [pc, #92]	; (80108e4 <tcp_free_acked_segments+0xe8>)
 8010886:	f008 f909 	bl	8018a9c <iprintf>
  while (seg_list != NULL &&
 801088a:	68bb      	ldr	r3, [r7, #8]
 801088c:	2b00      	cmp	r3, #0
 801088e:	d020      	beq.n	80108d2 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8010890:	68bb      	ldr	r3, [r7, #8]
 8010892:	68db      	ldr	r3, [r3, #12]
 8010894:	685b      	ldr	r3, [r3, #4]
 8010896:	4618      	mov	r0, r3
 8010898:	f7fb faf7 	bl	800be8a <lwip_htonl>
 801089c:	4604      	mov	r4, r0
 801089e:	68bb      	ldr	r3, [r7, #8]
 80108a0:	891b      	ldrh	r3, [r3, #8]
 80108a2:	461d      	mov	r5, r3
 80108a4:	68bb      	ldr	r3, [r7, #8]
 80108a6:	68db      	ldr	r3, [r3, #12]
 80108a8:	899b      	ldrh	r3, [r3, #12]
 80108aa:	b29b      	uxth	r3, r3
 80108ac:	4618      	mov	r0, r3
 80108ae:	f7fb fad7 	bl	800be60 <lwip_htons>
 80108b2:	4603      	mov	r3, r0
 80108b4:	b2db      	uxtb	r3, r3
 80108b6:	f003 0303 	and.w	r3, r3, #3
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	d001      	beq.n	80108c2 <tcp_free_acked_segments+0xc6>
 80108be:	2301      	movs	r3, #1
 80108c0:	e000      	b.n	80108c4 <tcp_free_acked_segments+0xc8>
 80108c2:	2300      	movs	r3, #0
 80108c4:	442b      	add	r3, r5
 80108c6:	18e2      	adds	r2, r4, r3
 80108c8:	4b09      	ldr	r3, [pc, #36]	; (80108f0 <tcp_free_acked_segments+0xf4>)
 80108ca:	681b      	ldr	r3, [r3, #0]
 80108cc:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	dd9c      	ble.n	801080c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80108d2:	68bb      	ldr	r3, [r7, #8]
}
 80108d4:	4618      	mov	r0, r3
 80108d6:	3718      	adds	r7, #24
 80108d8:	46bd      	mov	sp, r7
 80108da:	bdb0      	pop	{r4, r5, r7, pc}
 80108dc:	0801aeb8 	.word	0x0801aeb8
 80108e0:	0801b1a0 	.word	0x0801b1a0
 80108e4:	0801af04 	.word	0x0801af04
 80108e8:	2000c8cc 	.word	0x2000c8cc
 80108ec:	0801b1c8 	.word	0x0801b1c8
 80108f0:	2000c8c8 	.word	0x2000c8c8

080108f4 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80108f4:	b5b0      	push	{r4, r5, r7, lr}
 80108f6:	b094      	sub	sp, #80	; 0x50
 80108f8:	af00      	add	r7, sp, #0
 80108fa:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80108fc:	2300      	movs	r3, #0
 80108fe:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	2b00      	cmp	r3, #0
 8010904:	d106      	bne.n	8010914 <tcp_receive+0x20>
 8010906:	4b91      	ldr	r3, [pc, #580]	; (8010b4c <tcp_receive+0x258>)
 8010908:	f240 427b 	movw	r2, #1147	; 0x47b
 801090c:	4990      	ldr	r1, [pc, #576]	; (8010b50 <tcp_receive+0x25c>)
 801090e:	4891      	ldr	r0, [pc, #580]	; (8010b54 <tcp_receive+0x260>)
 8010910:	f008 f8c4 	bl	8018a9c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	7d1b      	ldrb	r3, [r3, #20]
 8010918:	2b03      	cmp	r3, #3
 801091a:	d806      	bhi.n	801092a <tcp_receive+0x36>
 801091c:	4b8b      	ldr	r3, [pc, #556]	; (8010b4c <tcp_receive+0x258>)
 801091e:	f240 427c 	movw	r2, #1148	; 0x47c
 8010922:	498d      	ldr	r1, [pc, #564]	; (8010b58 <tcp_receive+0x264>)
 8010924:	488b      	ldr	r0, [pc, #556]	; (8010b54 <tcp_receive+0x260>)
 8010926:	f008 f8b9 	bl	8018a9c <iprintf>

  if (flags & TCP_ACK) {
 801092a:	4b8c      	ldr	r3, [pc, #560]	; (8010b5c <tcp_receive+0x268>)
 801092c:	781b      	ldrb	r3, [r3, #0]
 801092e:	f003 0310 	and.w	r3, r3, #16
 8010932:	2b00      	cmp	r3, #0
 8010934:	f000 8264 	beq.w	8010e00 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801093e:	461a      	mov	r2, r3
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010944:	4413      	add	r3, r2
 8010946:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801094c:	4b84      	ldr	r3, [pc, #528]	; (8010b60 <tcp_receive+0x26c>)
 801094e:	681b      	ldr	r3, [r3, #0]
 8010950:	1ad3      	subs	r3, r2, r3
 8010952:	2b00      	cmp	r3, #0
 8010954:	db1b      	blt.n	801098e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801095a:	4b81      	ldr	r3, [pc, #516]	; (8010b60 <tcp_receive+0x26c>)
 801095c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801095e:	429a      	cmp	r2, r3
 8010960:	d106      	bne.n	8010970 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010966:	4b7f      	ldr	r3, [pc, #508]	; (8010b64 <tcp_receive+0x270>)
 8010968:	681b      	ldr	r3, [r3, #0]
 801096a:	1ad3      	subs	r3, r2, r3
 801096c:	2b00      	cmp	r3, #0
 801096e:	db0e      	blt.n	801098e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010974:	4b7b      	ldr	r3, [pc, #492]	; (8010b64 <tcp_receive+0x270>)
 8010976:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010978:	429a      	cmp	r2, r3
 801097a:	d125      	bne.n	80109c8 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801097c:	4b7a      	ldr	r3, [pc, #488]	; (8010b68 <tcp_receive+0x274>)
 801097e:	681b      	ldr	r3, [r3, #0]
 8010980:	89db      	ldrh	r3, [r3, #14]
 8010982:	b29a      	uxth	r2, r3
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801098a:	429a      	cmp	r2, r3
 801098c:	d91c      	bls.n	80109c8 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801098e:	4b76      	ldr	r3, [pc, #472]	; (8010b68 <tcp_receive+0x274>)
 8010990:	681b      	ldr	r3, [r3, #0]
 8010992:	89db      	ldrh	r3, [r3, #14]
 8010994:	b29a      	uxth	r2, r3
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80109a8:	429a      	cmp	r2, r3
 80109aa:	d205      	bcs.n	80109b8 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 80109b8:	4b69      	ldr	r3, [pc, #420]	; (8010b60 <tcp_receive+0x26c>)
 80109ba:	681a      	ldr	r2, [r3, #0]
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 80109c0:	4b68      	ldr	r3, [pc, #416]	; (8010b64 <tcp_receive+0x270>)
 80109c2:	681a      	ldr	r2, [r3, #0]
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80109c8:	4b66      	ldr	r3, [pc, #408]	; (8010b64 <tcp_receive+0x270>)
 80109ca:	681a      	ldr	r2, [r3, #0]
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80109d0:	1ad3      	subs	r3, r2, r3
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	dc58      	bgt.n	8010a88 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80109d6:	4b65      	ldr	r3, [pc, #404]	; (8010b6c <tcp_receive+0x278>)
 80109d8:	881b      	ldrh	r3, [r3, #0]
 80109da:	2b00      	cmp	r3, #0
 80109dc:	d14b      	bne.n	8010a76 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80109e2:	687a      	ldr	r2, [r7, #4]
 80109e4:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 80109e8:	4413      	add	r3, r2
 80109ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80109ec:	429a      	cmp	r2, r3
 80109ee:	d142      	bne.n	8010a76 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80109f6:	2b00      	cmp	r3, #0
 80109f8:	db3d      	blt.n	8010a76 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80109fe:	4b59      	ldr	r3, [pc, #356]	; (8010b64 <tcp_receive+0x270>)
 8010a00:	681b      	ldr	r3, [r3, #0]
 8010a02:	429a      	cmp	r2, r3
 8010a04:	d137      	bne.n	8010a76 <tcp_receive+0x182>
              found_dupack = 1;
 8010a06:	2301      	movs	r3, #1
 8010a08:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010a10:	2bff      	cmp	r3, #255	; 0xff
 8010a12:	d007      	beq.n	8010a24 <tcp_receive+0x130>
                ++pcb->dupacks;
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010a1a:	3301      	adds	r3, #1
 8010a1c:	b2da      	uxtb	r2, r3
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010a2a:	2b03      	cmp	r3, #3
 8010a2c:	d91b      	bls.n	8010a66 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010a38:	4413      	add	r3, r2
 8010a3a:	b29a      	uxth	r2, r3
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010a42:	429a      	cmp	r2, r3
 8010a44:	d30a      	bcc.n	8010a5c <tcp_receive+0x168>
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010a50:	4413      	add	r3, r2
 8010a52:	b29a      	uxth	r2, r3
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010a5a:	e004      	b.n	8010a66 <tcp_receive+0x172>
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010a62:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010a6c:	2b02      	cmp	r3, #2
 8010a6e:	d902      	bls.n	8010a76 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8010a70:	6878      	ldr	r0, [r7, #4]
 8010a72:	f001 feeb 	bl	801284c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8010a76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	f040 8161 	bne.w	8010d40 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	2200      	movs	r2, #0
 8010a82:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8010a86:	e15b      	b.n	8010d40 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010a88:	4b36      	ldr	r3, [pc, #216]	; (8010b64 <tcp_receive+0x270>)
 8010a8a:	681a      	ldr	r2, [r3, #0]
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010a90:	1ad3      	subs	r3, r2, r3
 8010a92:	3b01      	subs	r3, #1
 8010a94:	2b00      	cmp	r3, #0
 8010a96:	f2c0 814e 	blt.w	8010d36 <tcp_receive+0x442>
 8010a9a:	4b32      	ldr	r3, [pc, #200]	; (8010b64 <tcp_receive+0x270>)
 8010a9c:	681a      	ldr	r2, [r3, #0]
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010aa2:	1ad3      	subs	r3, r2, r3
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	f300 8146 	bgt.w	8010d36 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	8b5b      	ldrh	r3, [r3, #26]
 8010aae:	f003 0304 	and.w	r3, r3, #4
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	d010      	beq.n	8010ad8 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	8b5b      	ldrh	r3, [r3, #26]
 8010aba:	f023 0304 	bic.w	r3, r3, #4
 8010abe:	b29a      	uxth	r2, r3
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	2200      	movs	r2, #0
 8010ad4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	2200      	movs	r2, #0
 8010adc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010ae6:	10db      	asrs	r3, r3, #3
 8010ae8:	b21b      	sxth	r3, r3
 8010aea:	b29a      	uxth	r2, r3
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010af2:	b29b      	uxth	r3, r3
 8010af4:	4413      	add	r3, r2
 8010af6:	b29b      	uxth	r3, r3
 8010af8:	b21a      	sxth	r2, r3
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8010b00:	4b18      	ldr	r3, [pc, #96]	; (8010b64 <tcp_receive+0x270>)
 8010b02:	681b      	ldr	r3, [r3, #0]
 8010b04:	b29a      	uxth	r2, r3
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010b0a:	b29b      	uxth	r3, r3
 8010b0c:	1ad3      	subs	r3, r2, r3
 8010b0e:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	2200      	movs	r2, #0
 8010b14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8010b18:	4b12      	ldr	r3, [pc, #72]	; (8010b64 <tcp_receive+0x270>)
 8010b1a:	681a      	ldr	r2, [r3, #0]
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	7d1b      	ldrb	r3, [r3, #20]
 8010b24:	2b03      	cmp	r3, #3
 8010b26:	f240 8097 	bls.w	8010c58 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8010b36:	429a      	cmp	r2, r3
 8010b38:	d245      	bcs.n	8010bc6 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	8b5b      	ldrh	r3, [r3, #26]
 8010b3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010b42:	2b00      	cmp	r3, #0
 8010b44:	d014      	beq.n	8010b70 <tcp_receive+0x27c>
 8010b46:	2301      	movs	r3, #1
 8010b48:	e013      	b.n	8010b72 <tcp_receive+0x27e>
 8010b4a:	bf00      	nop
 8010b4c:	0801aeb8 	.word	0x0801aeb8
 8010b50:	0801b1e8 	.word	0x0801b1e8
 8010b54:	0801af04 	.word	0x0801af04
 8010b58:	0801b204 	.word	0x0801b204
 8010b5c:	2000c8d0 	.word	0x2000c8d0
 8010b60:	2000c8c4 	.word	0x2000c8c4
 8010b64:	2000c8c8 	.word	0x2000c8c8
 8010b68:	2000c8b4 	.word	0x2000c8b4
 8010b6c:	2000c8ce 	.word	0x2000c8ce
 8010b70:	2302      	movs	r3, #2
 8010b72:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8010b76:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8010b7a:	b29a      	uxth	r2, r3
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010b80:	fb12 f303 	smulbb	r3, r2, r3
 8010b84:	b29b      	uxth	r3, r3
 8010b86:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010b88:	4293      	cmp	r3, r2
 8010b8a:	bf28      	it	cs
 8010b8c:	4613      	movcs	r3, r2
 8010b8e:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010b96:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010b98:	4413      	add	r3, r2
 8010b9a:	b29a      	uxth	r2, r3
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010ba2:	429a      	cmp	r2, r3
 8010ba4:	d309      	bcc.n	8010bba <tcp_receive+0x2c6>
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010bac:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010bae:	4413      	add	r3, r2
 8010bb0:	b29a      	uxth	r2, r3
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010bb8:	e04e      	b.n	8010c58 <tcp_receive+0x364>
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010bc0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010bc4:	e048      	b.n	8010c58 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010bcc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010bce:	4413      	add	r3, r2
 8010bd0:	b29a      	uxth	r2, r3
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010bd8:	429a      	cmp	r2, r3
 8010bda:	d309      	bcc.n	8010bf0 <tcp_receive+0x2fc>
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010be2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010be4:	4413      	add	r3, r2
 8010be6:	b29a      	uxth	r2, r3
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8010bee:	e004      	b.n	8010bfa <tcp_receive+0x306>
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010bf6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010c06:	429a      	cmp	r2, r3
 8010c08:	d326      	bcc.n	8010c58 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010c16:	1ad3      	subs	r3, r2, r3
 8010c18:	b29a      	uxth	r2, r3
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010c2a:	4413      	add	r3, r2
 8010c2c:	b29a      	uxth	r2, r3
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010c34:	429a      	cmp	r2, r3
 8010c36:	d30a      	bcc.n	8010c4e <tcp_receive+0x35a>
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010c42:	4413      	add	r3, r2
 8010c44:	b29a      	uxth	r2, r3
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010c4c:	e004      	b.n	8010c58 <tcp_receive+0x364>
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010c54:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010c60:	4a98      	ldr	r2, [pc, #608]	; (8010ec4 <tcp_receive+0x5d0>)
 8010c62:	6878      	ldr	r0, [r7, #4]
 8010c64:	f7ff fdca 	bl	80107fc <tcp_free_acked_segments>
 8010c68:	4602      	mov	r2, r0
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010c76:	4a94      	ldr	r2, [pc, #592]	; (8010ec8 <tcp_receive+0x5d4>)
 8010c78:	6878      	ldr	r0, [r7, #4]
 8010c7a:	f7ff fdbf 	bl	80107fc <tcp_free_acked_segments>
 8010c7e:	4602      	mov	r2, r0
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010c88:	2b00      	cmp	r3, #0
 8010c8a:	d104      	bne.n	8010c96 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010c92:	861a      	strh	r2, [r3, #48]	; 0x30
 8010c94:	e002      	b.n	8010c9c <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	2200      	movs	r2, #0
 8010c9a:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	2200      	movs	r2, #0
 8010ca0:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	d103      	bne.n	8010cb2 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	2200      	movs	r2, #0
 8010cae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8010cb8:	4b84      	ldr	r3, [pc, #528]	; (8010ecc <tcp_receive+0x5d8>)
 8010cba:	881b      	ldrh	r3, [r3, #0]
 8010cbc:	4413      	add	r3, r2
 8010cbe:	b29a      	uxth	r2, r3
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	8b5b      	ldrh	r3, [r3, #26]
 8010cca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	d035      	beq.n	8010d3e <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	d118      	bne.n	8010d0c <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010cde:	2b00      	cmp	r3, #0
 8010ce0:	d00c      	beq.n	8010cfc <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010cea:	68db      	ldr	r3, [r3, #12]
 8010cec:	685b      	ldr	r3, [r3, #4]
 8010cee:	4618      	mov	r0, r3
 8010cf0:	f7fb f8cb 	bl	800be8a <lwip_htonl>
 8010cf4:	4603      	mov	r3, r0
 8010cf6:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	dc20      	bgt.n	8010d3e <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	8b5b      	ldrh	r3, [r3, #26]
 8010d00:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010d04:	b29a      	uxth	r2, r3
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010d0a:	e018      	b.n	8010d3e <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010d14:	68db      	ldr	r3, [r3, #12]
 8010d16:	685b      	ldr	r3, [r3, #4]
 8010d18:	4618      	mov	r0, r3
 8010d1a:	f7fb f8b6 	bl	800be8a <lwip_htonl>
 8010d1e:	4603      	mov	r3, r0
 8010d20:	1ae3      	subs	r3, r4, r3
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	dc0b      	bgt.n	8010d3e <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	8b5b      	ldrh	r3, [r3, #26]
 8010d2a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010d2e:	b29a      	uxth	r2, r3
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010d34:	e003      	b.n	8010d3e <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8010d36:	6878      	ldr	r0, [r7, #4]
 8010d38:	f001 ff76 	bl	8012c28 <tcp_send_empty_ack>
 8010d3c:	e000      	b.n	8010d40 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010d3e:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	d05b      	beq.n	8010e00 <tcp_receive+0x50c>
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010d4c:	4b60      	ldr	r3, [pc, #384]	; (8010ed0 <tcp_receive+0x5dc>)
 8010d4e:	681b      	ldr	r3, [r3, #0]
 8010d50:	1ad3      	subs	r3, r2, r3
 8010d52:	2b00      	cmp	r3, #0
 8010d54:	da54      	bge.n	8010e00 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8010d56:	4b5f      	ldr	r3, [pc, #380]	; (8010ed4 <tcp_receive+0x5e0>)
 8010d58:	681b      	ldr	r3, [r3, #0]
 8010d5a:	b29a      	uxth	r2, r3
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d60:	b29b      	uxth	r3, r3
 8010d62:	1ad3      	subs	r3, r2, r3
 8010d64:	b29b      	uxth	r3, r3
 8010d66:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8010d6a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010d74:	10db      	asrs	r3, r3, #3
 8010d76:	b21b      	sxth	r3, r3
 8010d78:	b29b      	uxth	r3, r3
 8010d7a:	1ad3      	subs	r3, r2, r3
 8010d7c:	b29b      	uxth	r3, r3
 8010d7e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010d88:	b29a      	uxth	r2, r3
 8010d8a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010d8e:	4413      	add	r3, r2
 8010d90:	b29b      	uxth	r3, r3
 8010d92:	b21a      	sxth	r2, r3
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8010d98:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	da05      	bge.n	8010dac <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8010da0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010da4:	425b      	negs	r3, r3
 8010da6:	b29b      	uxth	r3, r3
 8010da8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8010dac:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010db6:	109b      	asrs	r3, r3, #2
 8010db8:	b21b      	sxth	r3, r3
 8010dba:	b29b      	uxth	r3, r3
 8010dbc:	1ad3      	subs	r3, r2, r3
 8010dbe:	b29b      	uxth	r3, r3
 8010dc0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010dca:	b29a      	uxth	r2, r3
 8010dcc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010dd0:	4413      	add	r3, r2
 8010dd2:	b29b      	uxth	r3, r3
 8010dd4:	b21a      	sxth	r2, r3
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010de0:	10db      	asrs	r3, r3, #3
 8010de2:	b21b      	sxth	r3, r3
 8010de4:	b29a      	uxth	r2, r3
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010dec:	b29b      	uxth	r3, r3
 8010dee:	4413      	add	r3, r2
 8010df0:	b29b      	uxth	r3, r3
 8010df2:	b21a      	sxth	r2, r3
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	2200      	movs	r2, #0
 8010dfe:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8010e00:	4b35      	ldr	r3, [pc, #212]	; (8010ed8 <tcp_receive+0x5e4>)
 8010e02:	881b      	ldrh	r3, [r3, #0]
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	f000 84e2 	beq.w	80117ce <tcp_receive+0xeda>
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	7d1b      	ldrb	r3, [r3, #20]
 8010e0e:	2b06      	cmp	r3, #6
 8010e10:	f200 84dd 	bhi.w	80117ce <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010e18:	4b30      	ldr	r3, [pc, #192]	; (8010edc <tcp_receive+0x5e8>)
 8010e1a:	681b      	ldr	r3, [r3, #0]
 8010e1c:	1ad3      	subs	r3, r2, r3
 8010e1e:	3b01      	subs	r3, #1
 8010e20:	2b00      	cmp	r3, #0
 8010e22:	f2c0 808f 	blt.w	8010f44 <tcp_receive+0x650>
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010e2a:	4b2b      	ldr	r3, [pc, #172]	; (8010ed8 <tcp_receive+0x5e4>)
 8010e2c:	881b      	ldrh	r3, [r3, #0]
 8010e2e:	4619      	mov	r1, r3
 8010e30:	4b2a      	ldr	r3, [pc, #168]	; (8010edc <tcp_receive+0x5e8>)
 8010e32:	681b      	ldr	r3, [r3, #0]
 8010e34:	440b      	add	r3, r1
 8010e36:	1ad3      	subs	r3, r2, r3
 8010e38:	3301      	adds	r3, #1
 8010e3a:	2b00      	cmp	r3, #0
 8010e3c:	f300 8082 	bgt.w	8010f44 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8010e40:	4b27      	ldr	r3, [pc, #156]	; (8010ee0 <tcp_receive+0x5ec>)
 8010e42:	685b      	ldr	r3, [r3, #4]
 8010e44:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010e4a:	4b24      	ldr	r3, [pc, #144]	; (8010edc <tcp_receive+0x5e8>)
 8010e4c:	681b      	ldr	r3, [r3, #0]
 8010e4e:	1ad3      	subs	r3, r2, r3
 8010e50:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8010e52:	4b23      	ldr	r3, [pc, #140]	; (8010ee0 <tcp_receive+0x5ec>)
 8010e54:	685b      	ldr	r3, [r3, #4]
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	d106      	bne.n	8010e68 <tcp_receive+0x574>
 8010e5a:	4b22      	ldr	r3, [pc, #136]	; (8010ee4 <tcp_receive+0x5f0>)
 8010e5c:	f240 5294 	movw	r2, #1428	; 0x594
 8010e60:	4921      	ldr	r1, [pc, #132]	; (8010ee8 <tcp_receive+0x5f4>)
 8010e62:	4822      	ldr	r0, [pc, #136]	; (8010eec <tcp_receive+0x5f8>)
 8010e64:	f007 fe1a 	bl	8018a9c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8010e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e6a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8010e6e:	4293      	cmp	r3, r2
 8010e70:	d906      	bls.n	8010e80 <tcp_receive+0x58c>
 8010e72:	4b1c      	ldr	r3, [pc, #112]	; (8010ee4 <tcp_receive+0x5f0>)
 8010e74:	f240 5295 	movw	r2, #1429	; 0x595
 8010e78:	491d      	ldr	r1, [pc, #116]	; (8010ef0 <tcp_receive+0x5fc>)
 8010e7a:	481c      	ldr	r0, [pc, #112]	; (8010eec <tcp_receive+0x5f8>)
 8010e7c:	f007 fe0e 	bl	8018a9c <iprintf>
      off = (u16_t)off32;
 8010e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e82:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8010e86:	4b16      	ldr	r3, [pc, #88]	; (8010ee0 <tcp_receive+0x5ec>)
 8010e88:	685b      	ldr	r3, [r3, #4]
 8010e8a:	891b      	ldrh	r3, [r3, #8]
 8010e8c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010e90:	429a      	cmp	r2, r3
 8010e92:	d906      	bls.n	8010ea2 <tcp_receive+0x5ae>
 8010e94:	4b13      	ldr	r3, [pc, #76]	; (8010ee4 <tcp_receive+0x5f0>)
 8010e96:	f240 5297 	movw	r2, #1431	; 0x597
 8010e9a:	4916      	ldr	r1, [pc, #88]	; (8010ef4 <tcp_receive+0x600>)
 8010e9c:	4813      	ldr	r0, [pc, #76]	; (8010eec <tcp_receive+0x5f8>)
 8010e9e:	f007 fdfd 	bl	8018a9c <iprintf>
      inseg.len -= off;
 8010ea2:	4b0f      	ldr	r3, [pc, #60]	; (8010ee0 <tcp_receive+0x5ec>)
 8010ea4:	891a      	ldrh	r2, [r3, #8]
 8010ea6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010eaa:	1ad3      	subs	r3, r2, r3
 8010eac:	b29a      	uxth	r2, r3
 8010eae:	4b0c      	ldr	r3, [pc, #48]	; (8010ee0 <tcp_receive+0x5ec>)
 8010eb0:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8010eb2:	4b0b      	ldr	r3, [pc, #44]	; (8010ee0 <tcp_receive+0x5ec>)
 8010eb4:	685b      	ldr	r3, [r3, #4]
 8010eb6:	891a      	ldrh	r2, [r3, #8]
 8010eb8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010ebc:	1ad3      	subs	r3, r2, r3
 8010ebe:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8010ec0:	e02a      	b.n	8010f18 <tcp_receive+0x624>
 8010ec2:	bf00      	nop
 8010ec4:	0801b220 	.word	0x0801b220
 8010ec8:	0801b228 	.word	0x0801b228
 8010ecc:	2000c8cc 	.word	0x2000c8cc
 8010ed0:	2000c8c8 	.word	0x2000c8c8
 8010ed4:	2000c88c 	.word	0x2000c88c
 8010ed8:	2000c8ce 	.word	0x2000c8ce
 8010edc:	2000c8c4 	.word	0x2000c8c4
 8010ee0:	2000c8a4 	.word	0x2000c8a4
 8010ee4:	0801aeb8 	.word	0x0801aeb8
 8010ee8:	0801b230 	.word	0x0801b230
 8010eec:	0801af04 	.word	0x0801af04
 8010ef0:	0801b240 	.word	0x0801b240
 8010ef4:	0801b250 	.word	0x0801b250
        off -= p->len;
 8010ef8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010efa:	895b      	ldrh	r3, [r3, #10]
 8010efc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010f00:	1ad3      	subs	r3, r2, r3
 8010f02:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8010f06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010f08:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010f0a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8010f0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010f0e:	2200      	movs	r2, #0
 8010f10:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8010f12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010f14:	681b      	ldr	r3, [r3, #0]
 8010f16:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8010f18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010f1a:	895b      	ldrh	r3, [r3, #10]
 8010f1c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010f20:	429a      	cmp	r2, r3
 8010f22:	d8e9      	bhi.n	8010ef8 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8010f24:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010f28:	4619      	mov	r1, r3
 8010f2a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8010f2c:	f7fc fb60 	bl	800d5f0 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f34:	4a91      	ldr	r2, [pc, #580]	; (801117c <tcp_receive+0x888>)
 8010f36:	6013      	str	r3, [r2, #0]
 8010f38:	4b91      	ldr	r3, [pc, #580]	; (8011180 <tcp_receive+0x88c>)
 8010f3a:	68db      	ldr	r3, [r3, #12]
 8010f3c:	4a8f      	ldr	r2, [pc, #572]	; (801117c <tcp_receive+0x888>)
 8010f3e:	6812      	ldr	r2, [r2, #0]
 8010f40:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010f42:	e00d      	b.n	8010f60 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8010f44:	4b8d      	ldr	r3, [pc, #564]	; (801117c <tcp_receive+0x888>)
 8010f46:	681a      	ldr	r2, [r3, #0]
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f4c:	1ad3      	subs	r3, r2, r3
 8010f4e:	2b00      	cmp	r3, #0
 8010f50:	da06      	bge.n	8010f60 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	8b5b      	ldrh	r3, [r3, #26]
 8010f56:	f043 0302 	orr.w	r3, r3, #2
 8010f5a:	b29a      	uxth	r2, r3
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010f60:	4b86      	ldr	r3, [pc, #536]	; (801117c <tcp_receive+0x888>)
 8010f62:	681a      	ldr	r2, [r3, #0]
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f68:	1ad3      	subs	r3, r2, r3
 8010f6a:	2b00      	cmp	r3, #0
 8010f6c:	f2c0 842a 	blt.w	80117c4 <tcp_receive+0xed0>
 8010f70:	4b82      	ldr	r3, [pc, #520]	; (801117c <tcp_receive+0x888>)
 8010f72:	681a      	ldr	r2, [r3, #0]
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f78:	6879      	ldr	r1, [r7, #4]
 8010f7a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010f7c:	440b      	add	r3, r1
 8010f7e:	1ad3      	subs	r3, r2, r3
 8010f80:	3301      	adds	r3, #1
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	f300 841e 	bgt.w	80117c4 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010f8c:	4b7b      	ldr	r3, [pc, #492]	; (801117c <tcp_receive+0x888>)
 8010f8e:	681b      	ldr	r3, [r3, #0]
 8010f90:	429a      	cmp	r2, r3
 8010f92:	f040 829a 	bne.w	80114ca <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8010f96:	4b7a      	ldr	r3, [pc, #488]	; (8011180 <tcp_receive+0x88c>)
 8010f98:	891c      	ldrh	r4, [r3, #8]
 8010f9a:	4b79      	ldr	r3, [pc, #484]	; (8011180 <tcp_receive+0x88c>)
 8010f9c:	68db      	ldr	r3, [r3, #12]
 8010f9e:	899b      	ldrh	r3, [r3, #12]
 8010fa0:	b29b      	uxth	r3, r3
 8010fa2:	4618      	mov	r0, r3
 8010fa4:	f7fa ff5c 	bl	800be60 <lwip_htons>
 8010fa8:	4603      	mov	r3, r0
 8010faa:	b2db      	uxtb	r3, r3
 8010fac:	f003 0303 	and.w	r3, r3, #3
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	d001      	beq.n	8010fb8 <tcp_receive+0x6c4>
 8010fb4:	2301      	movs	r3, #1
 8010fb6:	e000      	b.n	8010fba <tcp_receive+0x6c6>
 8010fb8:	2300      	movs	r3, #0
 8010fba:	4423      	add	r3, r4
 8010fbc:	b29a      	uxth	r2, r3
 8010fbe:	4b71      	ldr	r3, [pc, #452]	; (8011184 <tcp_receive+0x890>)
 8010fc0:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010fc6:	4b6f      	ldr	r3, [pc, #444]	; (8011184 <tcp_receive+0x890>)
 8010fc8:	881b      	ldrh	r3, [r3, #0]
 8010fca:	429a      	cmp	r2, r3
 8010fcc:	d275      	bcs.n	80110ba <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010fce:	4b6c      	ldr	r3, [pc, #432]	; (8011180 <tcp_receive+0x88c>)
 8010fd0:	68db      	ldr	r3, [r3, #12]
 8010fd2:	899b      	ldrh	r3, [r3, #12]
 8010fd4:	b29b      	uxth	r3, r3
 8010fd6:	4618      	mov	r0, r3
 8010fd8:	f7fa ff42 	bl	800be60 <lwip_htons>
 8010fdc:	4603      	mov	r3, r0
 8010fde:	b2db      	uxtb	r3, r3
 8010fe0:	f003 0301 	and.w	r3, r3, #1
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	d01f      	beq.n	8011028 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8010fe8:	4b65      	ldr	r3, [pc, #404]	; (8011180 <tcp_receive+0x88c>)
 8010fea:	68db      	ldr	r3, [r3, #12]
 8010fec:	899b      	ldrh	r3, [r3, #12]
 8010fee:	b29b      	uxth	r3, r3
 8010ff0:	b21b      	sxth	r3, r3
 8010ff2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8010ff6:	b21c      	sxth	r4, r3
 8010ff8:	4b61      	ldr	r3, [pc, #388]	; (8011180 <tcp_receive+0x88c>)
 8010ffa:	68db      	ldr	r3, [r3, #12]
 8010ffc:	899b      	ldrh	r3, [r3, #12]
 8010ffe:	b29b      	uxth	r3, r3
 8011000:	4618      	mov	r0, r3
 8011002:	f7fa ff2d 	bl	800be60 <lwip_htons>
 8011006:	4603      	mov	r3, r0
 8011008:	b2db      	uxtb	r3, r3
 801100a:	b29b      	uxth	r3, r3
 801100c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8011010:	b29b      	uxth	r3, r3
 8011012:	4618      	mov	r0, r3
 8011014:	f7fa ff24 	bl	800be60 <lwip_htons>
 8011018:	4603      	mov	r3, r0
 801101a:	b21b      	sxth	r3, r3
 801101c:	4323      	orrs	r3, r4
 801101e:	b21a      	sxth	r2, r3
 8011020:	4b57      	ldr	r3, [pc, #348]	; (8011180 <tcp_receive+0x88c>)
 8011022:	68db      	ldr	r3, [r3, #12]
 8011024:	b292      	uxth	r2, r2
 8011026:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801102c:	4b54      	ldr	r3, [pc, #336]	; (8011180 <tcp_receive+0x88c>)
 801102e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8011030:	4b53      	ldr	r3, [pc, #332]	; (8011180 <tcp_receive+0x88c>)
 8011032:	68db      	ldr	r3, [r3, #12]
 8011034:	899b      	ldrh	r3, [r3, #12]
 8011036:	b29b      	uxth	r3, r3
 8011038:	4618      	mov	r0, r3
 801103a:	f7fa ff11 	bl	800be60 <lwip_htons>
 801103e:	4603      	mov	r3, r0
 8011040:	b2db      	uxtb	r3, r3
 8011042:	f003 0302 	and.w	r3, r3, #2
 8011046:	2b00      	cmp	r3, #0
 8011048:	d005      	beq.n	8011056 <tcp_receive+0x762>
            inseg.len -= 1;
 801104a:	4b4d      	ldr	r3, [pc, #308]	; (8011180 <tcp_receive+0x88c>)
 801104c:	891b      	ldrh	r3, [r3, #8]
 801104e:	3b01      	subs	r3, #1
 8011050:	b29a      	uxth	r2, r3
 8011052:	4b4b      	ldr	r3, [pc, #300]	; (8011180 <tcp_receive+0x88c>)
 8011054:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8011056:	4b4a      	ldr	r3, [pc, #296]	; (8011180 <tcp_receive+0x88c>)
 8011058:	685b      	ldr	r3, [r3, #4]
 801105a:	4a49      	ldr	r2, [pc, #292]	; (8011180 <tcp_receive+0x88c>)
 801105c:	8912      	ldrh	r2, [r2, #8]
 801105e:	4611      	mov	r1, r2
 8011060:	4618      	mov	r0, r3
 8011062:	f7fc f9c5 	bl	800d3f0 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8011066:	4b46      	ldr	r3, [pc, #280]	; (8011180 <tcp_receive+0x88c>)
 8011068:	891c      	ldrh	r4, [r3, #8]
 801106a:	4b45      	ldr	r3, [pc, #276]	; (8011180 <tcp_receive+0x88c>)
 801106c:	68db      	ldr	r3, [r3, #12]
 801106e:	899b      	ldrh	r3, [r3, #12]
 8011070:	b29b      	uxth	r3, r3
 8011072:	4618      	mov	r0, r3
 8011074:	f7fa fef4 	bl	800be60 <lwip_htons>
 8011078:	4603      	mov	r3, r0
 801107a:	b2db      	uxtb	r3, r3
 801107c:	f003 0303 	and.w	r3, r3, #3
 8011080:	2b00      	cmp	r3, #0
 8011082:	d001      	beq.n	8011088 <tcp_receive+0x794>
 8011084:	2301      	movs	r3, #1
 8011086:	e000      	b.n	801108a <tcp_receive+0x796>
 8011088:	2300      	movs	r3, #0
 801108a:	4423      	add	r3, r4
 801108c:	b29a      	uxth	r2, r3
 801108e:	4b3d      	ldr	r3, [pc, #244]	; (8011184 <tcp_receive+0x890>)
 8011090:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8011092:	4b3c      	ldr	r3, [pc, #240]	; (8011184 <tcp_receive+0x890>)
 8011094:	881b      	ldrh	r3, [r3, #0]
 8011096:	461a      	mov	r2, r3
 8011098:	4b38      	ldr	r3, [pc, #224]	; (801117c <tcp_receive+0x888>)
 801109a:	681b      	ldr	r3, [r3, #0]
 801109c:	441a      	add	r2, r3
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80110a2:	6879      	ldr	r1, [r7, #4]
 80110a4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80110a6:	440b      	add	r3, r1
 80110a8:	429a      	cmp	r2, r3
 80110aa:	d006      	beq.n	80110ba <tcp_receive+0x7c6>
 80110ac:	4b36      	ldr	r3, [pc, #216]	; (8011188 <tcp_receive+0x894>)
 80110ae:	f240 52cb 	movw	r2, #1483	; 0x5cb
 80110b2:	4936      	ldr	r1, [pc, #216]	; (801118c <tcp_receive+0x898>)
 80110b4:	4836      	ldr	r0, [pc, #216]	; (8011190 <tcp_receive+0x89c>)
 80110b6:	f007 fcf1 	bl	8018a9c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80110be:	2b00      	cmp	r3, #0
 80110c0:	f000 80e7 	beq.w	8011292 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80110c4:	4b2e      	ldr	r3, [pc, #184]	; (8011180 <tcp_receive+0x88c>)
 80110c6:	68db      	ldr	r3, [r3, #12]
 80110c8:	899b      	ldrh	r3, [r3, #12]
 80110ca:	b29b      	uxth	r3, r3
 80110cc:	4618      	mov	r0, r3
 80110ce:	f7fa fec7 	bl	800be60 <lwip_htons>
 80110d2:	4603      	mov	r3, r0
 80110d4:	b2db      	uxtb	r3, r3
 80110d6:	f003 0301 	and.w	r3, r3, #1
 80110da:	2b00      	cmp	r3, #0
 80110dc:	d010      	beq.n	8011100 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80110de:	e00a      	b.n	80110f6 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80110e4:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80110ea:	681a      	ldr	r2, [r3, #0]
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 80110f0:	68f8      	ldr	r0, [r7, #12]
 80110f2:	f7fd fd92 	bl	800ec1a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80110fa:	2b00      	cmp	r3, #0
 80110fc:	d1f0      	bne.n	80110e0 <tcp_receive+0x7ec>
 80110fe:	e0c8      	b.n	8011292 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011104:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8011106:	e052      	b.n	80111ae <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8011108:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801110a:	68db      	ldr	r3, [r3, #12]
 801110c:	899b      	ldrh	r3, [r3, #12]
 801110e:	b29b      	uxth	r3, r3
 8011110:	4618      	mov	r0, r3
 8011112:	f7fa fea5 	bl	800be60 <lwip_htons>
 8011116:	4603      	mov	r3, r0
 8011118:	b2db      	uxtb	r3, r3
 801111a:	f003 0301 	and.w	r3, r3, #1
 801111e:	2b00      	cmp	r3, #0
 8011120:	d03d      	beq.n	801119e <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8011122:	4b17      	ldr	r3, [pc, #92]	; (8011180 <tcp_receive+0x88c>)
 8011124:	68db      	ldr	r3, [r3, #12]
 8011126:	899b      	ldrh	r3, [r3, #12]
 8011128:	b29b      	uxth	r3, r3
 801112a:	4618      	mov	r0, r3
 801112c:	f7fa fe98 	bl	800be60 <lwip_htons>
 8011130:	4603      	mov	r3, r0
 8011132:	b2db      	uxtb	r3, r3
 8011134:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8011138:	2b00      	cmp	r3, #0
 801113a:	d130      	bne.n	801119e <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801113c:	4b10      	ldr	r3, [pc, #64]	; (8011180 <tcp_receive+0x88c>)
 801113e:	68db      	ldr	r3, [r3, #12]
 8011140:	899b      	ldrh	r3, [r3, #12]
 8011142:	b29c      	uxth	r4, r3
 8011144:	2001      	movs	r0, #1
 8011146:	f7fa fe8b 	bl	800be60 <lwip_htons>
 801114a:	4603      	mov	r3, r0
 801114c:	461a      	mov	r2, r3
 801114e:	4b0c      	ldr	r3, [pc, #48]	; (8011180 <tcp_receive+0x88c>)
 8011150:	68db      	ldr	r3, [r3, #12]
 8011152:	4322      	orrs	r2, r4
 8011154:	b292      	uxth	r2, r2
 8011156:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8011158:	4b09      	ldr	r3, [pc, #36]	; (8011180 <tcp_receive+0x88c>)
 801115a:	891c      	ldrh	r4, [r3, #8]
 801115c:	4b08      	ldr	r3, [pc, #32]	; (8011180 <tcp_receive+0x88c>)
 801115e:	68db      	ldr	r3, [r3, #12]
 8011160:	899b      	ldrh	r3, [r3, #12]
 8011162:	b29b      	uxth	r3, r3
 8011164:	4618      	mov	r0, r3
 8011166:	f7fa fe7b 	bl	800be60 <lwip_htons>
 801116a:	4603      	mov	r3, r0
 801116c:	b2db      	uxtb	r3, r3
 801116e:	f003 0303 	and.w	r3, r3, #3
 8011172:	2b00      	cmp	r3, #0
 8011174:	d00e      	beq.n	8011194 <tcp_receive+0x8a0>
 8011176:	2301      	movs	r3, #1
 8011178:	e00d      	b.n	8011196 <tcp_receive+0x8a2>
 801117a:	bf00      	nop
 801117c:	2000c8c4 	.word	0x2000c8c4
 8011180:	2000c8a4 	.word	0x2000c8a4
 8011184:	2000c8ce 	.word	0x2000c8ce
 8011188:	0801aeb8 	.word	0x0801aeb8
 801118c:	0801b260 	.word	0x0801b260
 8011190:	0801af04 	.word	0x0801af04
 8011194:	2300      	movs	r3, #0
 8011196:	4423      	add	r3, r4
 8011198:	b29a      	uxth	r2, r3
 801119a:	4b98      	ldr	r3, [pc, #608]	; (80113fc <tcp_receive+0xb08>)
 801119c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801119e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80111a0:	613b      	str	r3, [r7, #16]
              next = next->next;
 80111a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80111a4:	681b      	ldr	r3, [r3, #0]
 80111a6:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 80111a8:	6938      	ldr	r0, [r7, #16]
 80111aa:	f7fd fd36 	bl	800ec1a <tcp_seg_free>
            while (next &&
 80111ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80111b0:	2b00      	cmp	r3, #0
 80111b2:	d00e      	beq.n	80111d2 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80111b4:	4b91      	ldr	r3, [pc, #580]	; (80113fc <tcp_receive+0xb08>)
 80111b6:	881b      	ldrh	r3, [r3, #0]
 80111b8:	461a      	mov	r2, r3
 80111ba:	4b91      	ldr	r3, [pc, #580]	; (8011400 <tcp_receive+0xb0c>)
 80111bc:	681b      	ldr	r3, [r3, #0]
 80111be:	441a      	add	r2, r3
 80111c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80111c2:	68db      	ldr	r3, [r3, #12]
 80111c4:	685b      	ldr	r3, [r3, #4]
 80111c6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80111c8:	8909      	ldrh	r1, [r1, #8]
 80111ca:	440b      	add	r3, r1
 80111cc:	1ad3      	subs	r3, r2, r3
            while (next &&
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	da9a      	bge.n	8011108 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80111d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80111d4:	2b00      	cmp	r3, #0
 80111d6:	d059      	beq.n	801128c <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 80111d8:	4b88      	ldr	r3, [pc, #544]	; (80113fc <tcp_receive+0xb08>)
 80111da:	881b      	ldrh	r3, [r3, #0]
 80111dc:	461a      	mov	r2, r3
 80111de:	4b88      	ldr	r3, [pc, #544]	; (8011400 <tcp_receive+0xb0c>)
 80111e0:	681b      	ldr	r3, [r3, #0]
 80111e2:	441a      	add	r2, r3
 80111e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80111e6:	68db      	ldr	r3, [r3, #12]
 80111e8:	685b      	ldr	r3, [r3, #4]
 80111ea:	1ad3      	subs	r3, r2, r3
            if (next &&
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	dd4d      	ble.n	801128c <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80111f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80111f2:	68db      	ldr	r3, [r3, #12]
 80111f4:	685b      	ldr	r3, [r3, #4]
 80111f6:	b29a      	uxth	r2, r3
 80111f8:	4b81      	ldr	r3, [pc, #516]	; (8011400 <tcp_receive+0xb0c>)
 80111fa:	681b      	ldr	r3, [r3, #0]
 80111fc:	b29b      	uxth	r3, r3
 80111fe:	1ad3      	subs	r3, r2, r3
 8011200:	b29a      	uxth	r2, r3
 8011202:	4b80      	ldr	r3, [pc, #512]	; (8011404 <tcp_receive+0xb10>)
 8011204:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8011206:	4b7f      	ldr	r3, [pc, #508]	; (8011404 <tcp_receive+0xb10>)
 8011208:	68db      	ldr	r3, [r3, #12]
 801120a:	899b      	ldrh	r3, [r3, #12]
 801120c:	b29b      	uxth	r3, r3
 801120e:	4618      	mov	r0, r3
 8011210:	f7fa fe26 	bl	800be60 <lwip_htons>
 8011214:	4603      	mov	r3, r0
 8011216:	b2db      	uxtb	r3, r3
 8011218:	f003 0302 	and.w	r3, r3, #2
 801121c:	2b00      	cmp	r3, #0
 801121e:	d005      	beq.n	801122c <tcp_receive+0x938>
                inseg.len -= 1;
 8011220:	4b78      	ldr	r3, [pc, #480]	; (8011404 <tcp_receive+0xb10>)
 8011222:	891b      	ldrh	r3, [r3, #8]
 8011224:	3b01      	subs	r3, #1
 8011226:	b29a      	uxth	r2, r3
 8011228:	4b76      	ldr	r3, [pc, #472]	; (8011404 <tcp_receive+0xb10>)
 801122a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 801122c:	4b75      	ldr	r3, [pc, #468]	; (8011404 <tcp_receive+0xb10>)
 801122e:	685b      	ldr	r3, [r3, #4]
 8011230:	4a74      	ldr	r2, [pc, #464]	; (8011404 <tcp_receive+0xb10>)
 8011232:	8912      	ldrh	r2, [r2, #8]
 8011234:	4611      	mov	r1, r2
 8011236:	4618      	mov	r0, r3
 8011238:	f7fc f8da 	bl	800d3f0 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801123c:	4b71      	ldr	r3, [pc, #452]	; (8011404 <tcp_receive+0xb10>)
 801123e:	891c      	ldrh	r4, [r3, #8]
 8011240:	4b70      	ldr	r3, [pc, #448]	; (8011404 <tcp_receive+0xb10>)
 8011242:	68db      	ldr	r3, [r3, #12]
 8011244:	899b      	ldrh	r3, [r3, #12]
 8011246:	b29b      	uxth	r3, r3
 8011248:	4618      	mov	r0, r3
 801124a:	f7fa fe09 	bl	800be60 <lwip_htons>
 801124e:	4603      	mov	r3, r0
 8011250:	b2db      	uxtb	r3, r3
 8011252:	f003 0303 	and.w	r3, r3, #3
 8011256:	2b00      	cmp	r3, #0
 8011258:	d001      	beq.n	801125e <tcp_receive+0x96a>
 801125a:	2301      	movs	r3, #1
 801125c:	e000      	b.n	8011260 <tcp_receive+0x96c>
 801125e:	2300      	movs	r3, #0
 8011260:	4423      	add	r3, r4
 8011262:	b29a      	uxth	r2, r3
 8011264:	4b65      	ldr	r3, [pc, #404]	; (80113fc <tcp_receive+0xb08>)
 8011266:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8011268:	4b64      	ldr	r3, [pc, #400]	; (80113fc <tcp_receive+0xb08>)
 801126a:	881b      	ldrh	r3, [r3, #0]
 801126c:	461a      	mov	r2, r3
 801126e:	4b64      	ldr	r3, [pc, #400]	; (8011400 <tcp_receive+0xb0c>)
 8011270:	681b      	ldr	r3, [r3, #0]
 8011272:	441a      	add	r2, r3
 8011274:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011276:	68db      	ldr	r3, [r3, #12]
 8011278:	685b      	ldr	r3, [r3, #4]
 801127a:	429a      	cmp	r2, r3
 801127c:	d006      	beq.n	801128c <tcp_receive+0x998>
 801127e:	4b62      	ldr	r3, [pc, #392]	; (8011408 <tcp_receive+0xb14>)
 8011280:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8011284:	4961      	ldr	r1, [pc, #388]	; (801140c <tcp_receive+0xb18>)
 8011286:	4862      	ldr	r0, [pc, #392]	; (8011410 <tcp_receive+0xb1c>)
 8011288:	f007 fc08 	bl	8018a9c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011290:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8011292:	4b5a      	ldr	r3, [pc, #360]	; (80113fc <tcp_receive+0xb08>)
 8011294:	881b      	ldrh	r3, [r3, #0]
 8011296:	461a      	mov	r2, r3
 8011298:	4b59      	ldr	r3, [pc, #356]	; (8011400 <tcp_receive+0xb0c>)
 801129a:	681b      	ldr	r3, [r3, #0]
 801129c:	441a      	add	r2, r3
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80112a6:	4b55      	ldr	r3, [pc, #340]	; (80113fc <tcp_receive+0xb08>)
 80112a8:	881b      	ldrh	r3, [r3, #0]
 80112aa:	429a      	cmp	r2, r3
 80112ac:	d206      	bcs.n	80112bc <tcp_receive+0x9c8>
 80112ae:	4b56      	ldr	r3, [pc, #344]	; (8011408 <tcp_receive+0xb14>)
 80112b0:	f240 6207 	movw	r2, #1543	; 0x607
 80112b4:	4957      	ldr	r1, [pc, #348]	; (8011414 <tcp_receive+0xb20>)
 80112b6:	4856      	ldr	r0, [pc, #344]	; (8011410 <tcp_receive+0xb1c>)
 80112b8:	f007 fbf0 	bl	8018a9c <iprintf>
        pcb->rcv_wnd -= tcplen;
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80112c0:	4b4e      	ldr	r3, [pc, #312]	; (80113fc <tcp_receive+0xb08>)
 80112c2:	881b      	ldrh	r3, [r3, #0]
 80112c4:	1ad3      	subs	r3, r2, r3
 80112c6:	b29a      	uxth	r2, r3
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80112cc:	6878      	ldr	r0, [r7, #4]
 80112ce:	f7fc ffc5 	bl	800e25c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80112d2:	4b4c      	ldr	r3, [pc, #304]	; (8011404 <tcp_receive+0xb10>)
 80112d4:	685b      	ldr	r3, [r3, #4]
 80112d6:	891b      	ldrh	r3, [r3, #8]
 80112d8:	2b00      	cmp	r3, #0
 80112da:	d006      	beq.n	80112ea <tcp_receive+0x9f6>
          recv_data = inseg.p;
 80112dc:	4b49      	ldr	r3, [pc, #292]	; (8011404 <tcp_receive+0xb10>)
 80112de:	685b      	ldr	r3, [r3, #4]
 80112e0:	4a4d      	ldr	r2, [pc, #308]	; (8011418 <tcp_receive+0xb24>)
 80112e2:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80112e4:	4b47      	ldr	r3, [pc, #284]	; (8011404 <tcp_receive+0xb10>)
 80112e6:	2200      	movs	r2, #0
 80112e8:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80112ea:	4b46      	ldr	r3, [pc, #280]	; (8011404 <tcp_receive+0xb10>)
 80112ec:	68db      	ldr	r3, [r3, #12]
 80112ee:	899b      	ldrh	r3, [r3, #12]
 80112f0:	b29b      	uxth	r3, r3
 80112f2:	4618      	mov	r0, r3
 80112f4:	f7fa fdb4 	bl	800be60 <lwip_htons>
 80112f8:	4603      	mov	r3, r0
 80112fa:	b2db      	uxtb	r3, r3
 80112fc:	f003 0301 	and.w	r3, r3, #1
 8011300:	2b00      	cmp	r3, #0
 8011302:	f000 80b8 	beq.w	8011476 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8011306:	4b45      	ldr	r3, [pc, #276]	; (801141c <tcp_receive+0xb28>)
 8011308:	781b      	ldrb	r3, [r3, #0]
 801130a:	f043 0320 	orr.w	r3, r3, #32
 801130e:	b2da      	uxtb	r2, r3
 8011310:	4b42      	ldr	r3, [pc, #264]	; (801141c <tcp_receive+0xb28>)
 8011312:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8011314:	e0af      	b.n	8011476 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801131a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011320:	68db      	ldr	r3, [r3, #12]
 8011322:	685b      	ldr	r3, [r3, #4]
 8011324:	4a36      	ldr	r2, [pc, #216]	; (8011400 <tcp_receive+0xb0c>)
 8011326:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8011328:	68bb      	ldr	r3, [r7, #8]
 801132a:	891b      	ldrh	r3, [r3, #8]
 801132c:	461c      	mov	r4, r3
 801132e:	68bb      	ldr	r3, [r7, #8]
 8011330:	68db      	ldr	r3, [r3, #12]
 8011332:	899b      	ldrh	r3, [r3, #12]
 8011334:	b29b      	uxth	r3, r3
 8011336:	4618      	mov	r0, r3
 8011338:	f7fa fd92 	bl	800be60 <lwip_htons>
 801133c:	4603      	mov	r3, r0
 801133e:	b2db      	uxtb	r3, r3
 8011340:	f003 0303 	and.w	r3, r3, #3
 8011344:	2b00      	cmp	r3, #0
 8011346:	d001      	beq.n	801134c <tcp_receive+0xa58>
 8011348:	2301      	movs	r3, #1
 801134a:	e000      	b.n	801134e <tcp_receive+0xa5a>
 801134c:	2300      	movs	r3, #0
 801134e:	191a      	adds	r2, r3, r4
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011354:	441a      	add	r2, r3
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801135e:	461c      	mov	r4, r3
 8011360:	68bb      	ldr	r3, [r7, #8]
 8011362:	891b      	ldrh	r3, [r3, #8]
 8011364:	461d      	mov	r5, r3
 8011366:	68bb      	ldr	r3, [r7, #8]
 8011368:	68db      	ldr	r3, [r3, #12]
 801136a:	899b      	ldrh	r3, [r3, #12]
 801136c:	b29b      	uxth	r3, r3
 801136e:	4618      	mov	r0, r3
 8011370:	f7fa fd76 	bl	800be60 <lwip_htons>
 8011374:	4603      	mov	r3, r0
 8011376:	b2db      	uxtb	r3, r3
 8011378:	f003 0303 	and.w	r3, r3, #3
 801137c:	2b00      	cmp	r3, #0
 801137e:	d001      	beq.n	8011384 <tcp_receive+0xa90>
 8011380:	2301      	movs	r3, #1
 8011382:	e000      	b.n	8011386 <tcp_receive+0xa92>
 8011384:	2300      	movs	r3, #0
 8011386:	442b      	add	r3, r5
 8011388:	429c      	cmp	r4, r3
 801138a:	d206      	bcs.n	801139a <tcp_receive+0xaa6>
 801138c:	4b1e      	ldr	r3, [pc, #120]	; (8011408 <tcp_receive+0xb14>)
 801138e:	f240 622b 	movw	r2, #1579	; 0x62b
 8011392:	4923      	ldr	r1, [pc, #140]	; (8011420 <tcp_receive+0xb2c>)
 8011394:	481e      	ldr	r0, [pc, #120]	; (8011410 <tcp_receive+0xb1c>)
 8011396:	f007 fb81 	bl	8018a9c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801139a:	68bb      	ldr	r3, [r7, #8]
 801139c:	891b      	ldrh	r3, [r3, #8]
 801139e:	461c      	mov	r4, r3
 80113a0:	68bb      	ldr	r3, [r7, #8]
 80113a2:	68db      	ldr	r3, [r3, #12]
 80113a4:	899b      	ldrh	r3, [r3, #12]
 80113a6:	b29b      	uxth	r3, r3
 80113a8:	4618      	mov	r0, r3
 80113aa:	f7fa fd59 	bl	800be60 <lwip_htons>
 80113ae:	4603      	mov	r3, r0
 80113b0:	b2db      	uxtb	r3, r3
 80113b2:	f003 0303 	and.w	r3, r3, #3
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	d001      	beq.n	80113be <tcp_receive+0xaca>
 80113ba:	2301      	movs	r3, #1
 80113bc:	e000      	b.n	80113c0 <tcp_receive+0xacc>
 80113be:	2300      	movs	r3, #0
 80113c0:	1919      	adds	r1, r3, r4
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80113c6:	b28b      	uxth	r3, r1
 80113c8:	1ad3      	subs	r3, r2, r3
 80113ca:	b29a      	uxth	r2, r3
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80113d0:	6878      	ldr	r0, [r7, #4]
 80113d2:	f7fc ff43 	bl	800e25c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80113d6:	68bb      	ldr	r3, [r7, #8]
 80113d8:	685b      	ldr	r3, [r3, #4]
 80113da:	891b      	ldrh	r3, [r3, #8]
 80113dc:	2b00      	cmp	r3, #0
 80113de:	d028      	beq.n	8011432 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80113e0:	4b0d      	ldr	r3, [pc, #52]	; (8011418 <tcp_receive+0xb24>)
 80113e2:	681b      	ldr	r3, [r3, #0]
 80113e4:	2b00      	cmp	r3, #0
 80113e6:	d01d      	beq.n	8011424 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 80113e8:	4b0b      	ldr	r3, [pc, #44]	; (8011418 <tcp_receive+0xb24>)
 80113ea:	681a      	ldr	r2, [r3, #0]
 80113ec:	68bb      	ldr	r3, [r7, #8]
 80113ee:	685b      	ldr	r3, [r3, #4]
 80113f0:	4619      	mov	r1, r3
 80113f2:	4610      	mov	r0, r2
 80113f4:	f7fc fa50 	bl	800d898 <pbuf_cat>
 80113f8:	e018      	b.n	801142c <tcp_receive+0xb38>
 80113fa:	bf00      	nop
 80113fc:	2000c8ce 	.word	0x2000c8ce
 8011400:	2000c8c4 	.word	0x2000c8c4
 8011404:	2000c8a4 	.word	0x2000c8a4
 8011408:	0801aeb8 	.word	0x0801aeb8
 801140c:	0801b298 	.word	0x0801b298
 8011410:	0801af04 	.word	0x0801af04
 8011414:	0801b2d4 	.word	0x0801b2d4
 8011418:	2000c8d4 	.word	0x2000c8d4
 801141c:	2000c8d1 	.word	0x2000c8d1
 8011420:	0801b2f4 	.word	0x0801b2f4
            } else {
              recv_data = cseg->p;
 8011424:	68bb      	ldr	r3, [r7, #8]
 8011426:	685b      	ldr	r3, [r3, #4]
 8011428:	4a70      	ldr	r2, [pc, #448]	; (80115ec <tcp_receive+0xcf8>)
 801142a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 801142c:	68bb      	ldr	r3, [r7, #8]
 801142e:	2200      	movs	r2, #0
 8011430:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8011432:	68bb      	ldr	r3, [r7, #8]
 8011434:	68db      	ldr	r3, [r3, #12]
 8011436:	899b      	ldrh	r3, [r3, #12]
 8011438:	b29b      	uxth	r3, r3
 801143a:	4618      	mov	r0, r3
 801143c:	f7fa fd10 	bl	800be60 <lwip_htons>
 8011440:	4603      	mov	r3, r0
 8011442:	b2db      	uxtb	r3, r3
 8011444:	f003 0301 	and.w	r3, r3, #1
 8011448:	2b00      	cmp	r3, #0
 801144a:	d00d      	beq.n	8011468 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 801144c:	4b68      	ldr	r3, [pc, #416]	; (80115f0 <tcp_receive+0xcfc>)
 801144e:	781b      	ldrb	r3, [r3, #0]
 8011450:	f043 0320 	orr.w	r3, r3, #32
 8011454:	b2da      	uxtb	r2, r3
 8011456:	4b66      	ldr	r3, [pc, #408]	; (80115f0 <tcp_receive+0xcfc>)
 8011458:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	7d1b      	ldrb	r3, [r3, #20]
 801145e:	2b04      	cmp	r3, #4
 8011460:	d102      	bne.n	8011468 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	2207      	movs	r2, #7
 8011466:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8011468:	68bb      	ldr	r3, [r7, #8]
 801146a:	681a      	ldr	r2, [r3, #0]
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8011470:	68b8      	ldr	r0, [r7, #8]
 8011472:	f7fd fbd2 	bl	800ec1a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801147a:	2b00      	cmp	r3, #0
 801147c:	d008      	beq.n	8011490 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011482:	68db      	ldr	r3, [r3, #12]
 8011484:	685a      	ldr	r2, [r3, #4]
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 801148a:	429a      	cmp	r2, r3
 801148c:	f43f af43 	beq.w	8011316 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	8b5b      	ldrh	r3, [r3, #26]
 8011494:	f003 0301 	and.w	r3, r3, #1
 8011498:	2b00      	cmp	r3, #0
 801149a:	d00e      	beq.n	80114ba <tcp_receive+0xbc6>
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	8b5b      	ldrh	r3, [r3, #26]
 80114a0:	f023 0301 	bic.w	r3, r3, #1
 80114a4:	b29a      	uxth	r2, r3
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	835a      	strh	r2, [r3, #26]
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	8b5b      	ldrh	r3, [r3, #26]
 80114ae:	f043 0302 	orr.w	r3, r3, #2
 80114b2:	b29a      	uxth	r2, r3
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80114b8:	e188      	b.n	80117cc <tcp_receive+0xed8>
        tcp_ack(pcb);
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	8b5b      	ldrh	r3, [r3, #26]
 80114be:	f043 0301 	orr.w	r3, r3, #1
 80114c2:	b29a      	uxth	r2, r3
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80114c8:	e180      	b.n	80117cc <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80114ce:	2b00      	cmp	r3, #0
 80114d0:	d106      	bne.n	80114e0 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80114d2:	4848      	ldr	r0, [pc, #288]	; (80115f4 <tcp_receive+0xd00>)
 80114d4:	f7fd fbba 	bl	800ec4c <tcp_seg_copy>
 80114d8:	4602      	mov	r2, r0
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	675a      	str	r2, [r3, #116]	; 0x74
 80114de:	e16d      	b.n	80117bc <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 80114e0:	2300      	movs	r3, #0
 80114e2:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80114e8:	63bb      	str	r3, [r7, #56]	; 0x38
 80114ea:	e157      	b.n	801179c <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 80114ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114ee:	68db      	ldr	r3, [r3, #12]
 80114f0:	685a      	ldr	r2, [r3, #4]
 80114f2:	4b41      	ldr	r3, [pc, #260]	; (80115f8 <tcp_receive+0xd04>)
 80114f4:	681b      	ldr	r3, [r3, #0]
 80114f6:	429a      	cmp	r2, r3
 80114f8:	d11d      	bne.n	8011536 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80114fa:	4b3e      	ldr	r3, [pc, #248]	; (80115f4 <tcp_receive+0xd00>)
 80114fc:	891a      	ldrh	r2, [r3, #8]
 80114fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011500:	891b      	ldrh	r3, [r3, #8]
 8011502:	429a      	cmp	r2, r3
 8011504:	f240 814f 	bls.w	80117a6 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011508:	483a      	ldr	r0, [pc, #232]	; (80115f4 <tcp_receive+0xd00>)
 801150a:	f7fd fb9f 	bl	800ec4c <tcp_seg_copy>
 801150e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8011510:	697b      	ldr	r3, [r7, #20]
 8011512:	2b00      	cmp	r3, #0
 8011514:	f000 8149 	beq.w	80117aa <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8011518:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801151a:	2b00      	cmp	r3, #0
 801151c:	d003      	beq.n	8011526 <tcp_receive+0xc32>
                    prev->next = cseg;
 801151e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011520:	697a      	ldr	r2, [r7, #20]
 8011522:	601a      	str	r2, [r3, #0]
 8011524:	e002      	b.n	801152c <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	697a      	ldr	r2, [r7, #20]
 801152a:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 801152c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801152e:	6978      	ldr	r0, [r7, #20]
 8011530:	f7ff f8dc 	bl	80106ec <tcp_oos_insert_segment>
                }
                break;
 8011534:	e139      	b.n	80117aa <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8011536:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011538:	2b00      	cmp	r3, #0
 801153a:	d117      	bne.n	801156c <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801153c:	4b2e      	ldr	r3, [pc, #184]	; (80115f8 <tcp_receive+0xd04>)
 801153e:	681a      	ldr	r2, [r3, #0]
 8011540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011542:	68db      	ldr	r3, [r3, #12]
 8011544:	685b      	ldr	r3, [r3, #4]
 8011546:	1ad3      	subs	r3, r2, r3
 8011548:	2b00      	cmp	r3, #0
 801154a:	da57      	bge.n	80115fc <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801154c:	4829      	ldr	r0, [pc, #164]	; (80115f4 <tcp_receive+0xd00>)
 801154e:	f7fd fb7d 	bl	800ec4c <tcp_seg_copy>
 8011552:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8011554:	69bb      	ldr	r3, [r7, #24]
 8011556:	2b00      	cmp	r3, #0
 8011558:	f000 8129 	beq.w	80117ae <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	69ba      	ldr	r2, [r7, #24]
 8011560:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8011562:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011564:	69b8      	ldr	r0, [r7, #24]
 8011566:	f7ff f8c1 	bl	80106ec <tcp_oos_insert_segment>
                  }
                  break;
 801156a:	e120      	b.n	80117ae <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801156c:	4b22      	ldr	r3, [pc, #136]	; (80115f8 <tcp_receive+0xd04>)
 801156e:	681a      	ldr	r2, [r3, #0]
 8011570:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011572:	68db      	ldr	r3, [r3, #12]
 8011574:	685b      	ldr	r3, [r3, #4]
 8011576:	1ad3      	subs	r3, r2, r3
 8011578:	3b01      	subs	r3, #1
 801157a:	2b00      	cmp	r3, #0
 801157c:	db3e      	blt.n	80115fc <tcp_receive+0xd08>
 801157e:	4b1e      	ldr	r3, [pc, #120]	; (80115f8 <tcp_receive+0xd04>)
 8011580:	681a      	ldr	r2, [r3, #0]
 8011582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011584:	68db      	ldr	r3, [r3, #12]
 8011586:	685b      	ldr	r3, [r3, #4]
 8011588:	1ad3      	subs	r3, r2, r3
 801158a:	3301      	adds	r3, #1
 801158c:	2b00      	cmp	r3, #0
 801158e:	dc35      	bgt.n	80115fc <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011590:	4818      	ldr	r0, [pc, #96]	; (80115f4 <tcp_receive+0xd00>)
 8011592:	f7fd fb5b 	bl	800ec4c <tcp_seg_copy>
 8011596:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8011598:	69fb      	ldr	r3, [r7, #28]
 801159a:	2b00      	cmp	r3, #0
 801159c:	f000 8109 	beq.w	80117b2 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80115a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80115a2:	68db      	ldr	r3, [r3, #12]
 80115a4:	685b      	ldr	r3, [r3, #4]
 80115a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80115a8:	8912      	ldrh	r2, [r2, #8]
 80115aa:	441a      	add	r2, r3
 80115ac:	4b12      	ldr	r3, [pc, #72]	; (80115f8 <tcp_receive+0xd04>)
 80115ae:	681b      	ldr	r3, [r3, #0]
 80115b0:	1ad3      	subs	r3, r2, r3
 80115b2:	2b00      	cmp	r3, #0
 80115b4:	dd12      	ble.n	80115dc <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80115b6:	4b10      	ldr	r3, [pc, #64]	; (80115f8 <tcp_receive+0xd04>)
 80115b8:	681b      	ldr	r3, [r3, #0]
 80115ba:	b29a      	uxth	r2, r3
 80115bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80115be:	68db      	ldr	r3, [r3, #12]
 80115c0:	685b      	ldr	r3, [r3, #4]
 80115c2:	b29b      	uxth	r3, r3
 80115c4:	1ad3      	subs	r3, r2, r3
 80115c6:	b29a      	uxth	r2, r3
 80115c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80115ca:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80115cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80115ce:	685a      	ldr	r2, [r3, #4]
 80115d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80115d2:	891b      	ldrh	r3, [r3, #8]
 80115d4:	4619      	mov	r1, r3
 80115d6:	4610      	mov	r0, r2
 80115d8:	f7fb ff0a 	bl	800d3f0 <pbuf_realloc>
                    }
                    prev->next = cseg;
 80115dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80115de:	69fa      	ldr	r2, [r7, #28]
 80115e0:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80115e2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80115e4:	69f8      	ldr	r0, [r7, #28]
 80115e6:	f7ff f881 	bl	80106ec <tcp_oos_insert_segment>
                  }
                  break;
 80115ea:	e0e2      	b.n	80117b2 <tcp_receive+0xebe>
 80115ec:	2000c8d4 	.word	0x2000c8d4
 80115f0:	2000c8d1 	.word	0x2000c8d1
 80115f4:	2000c8a4 	.word	0x2000c8a4
 80115f8:	2000c8c4 	.word	0x2000c8c4
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80115fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115fe:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8011600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011602:	681b      	ldr	r3, [r3, #0]
 8011604:	2b00      	cmp	r3, #0
 8011606:	f040 80c6 	bne.w	8011796 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801160a:	4b80      	ldr	r3, [pc, #512]	; (801180c <tcp_receive+0xf18>)
 801160c:	681a      	ldr	r2, [r3, #0]
 801160e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011610:	68db      	ldr	r3, [r3, #12]
 8011612:	685b      	ldr	r3, [r3, #4]
 8011614:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8011616:	2b00      	cmp	r3, #0
 8011618:	f340 80bd 	ble.w	8011796 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801161c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801161e:	68db      	ldr	r3, [r3, #12]
 8011620:	899b      	ldrh	r3, [r3, #12]
 8011622:	b29b      	uxth	r3, r3
 8011624:	4618      	mov	r0, r3
 8011626:	f7fa fc1b 	bl	800be60 <lwip_htons>
 801162a:	4603      	mov	r3, r0
 801162c:	b2db      	uxtb	r3, r3
 801162e:	f003 0301 	and.w	r3, r3, #1
 8011632:	2b00      	cmp	r3, #0
 8011634:	f040 80bf 	bne.w	80117b6 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8011638:	4875      	ldr	r0, [pc, #468]	; (8011810 <tcp_receive+0xf1c>)
 801163a:	f7fd fb07 	bl	800ec4c <tcp_seg_copy>
 801163e:	4602      	mov	r2, r0
 8011640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011642:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8011644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011646:	681b      	ldr	r3, [r3, #0]
 8011648:	2b00      	cmp	r3, #0
 801164a:	f000 80b6 	beq.w	80117ba <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801164e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011650:	68db      	ldr	r3, [r3, #12]
 8011652:	685b      	ldr	r3, [r3, #4]
 8011654:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011656:	8912      	ldrh	r2, [r2, #8]
 8011658:	441a      	add	r2, r3
 801165a:	4b6c      	ldr	r3, [pc, #432]	; (801180c <tcp_receive+0xf18>)
 801165c:	681b      	ldr	r3, [r3, #0]
 801165e:	1ad3      	subs	r3, r2, r3
 8011660:	2b00      	cmp	r3, #0
 8011662:	dd12      	ble.n	801168a <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8011664:	4b69      	ldr	r3, [pc, #420]	; (801180c <tcp_receive+0xf18>)
 8011666:	681b      	ldr	r3, [r3, #0]
 8011668:	b29a      	uxth	r2, r3
 801166a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801166c:	68db      	ldr	r3, [r3, #12]
 801166e:	685b      	ldr	r3, [r3, #4]
 8011670:	b29b      	uxth	r3, r3
 8011672:	1ad3      	subs	r3, r2, r3
 8011674:	b29a      	uxth	r2, r3
 8011676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011678:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801167a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801167c:	685a      	ldr	r2, [r3, #4]
 801167e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011680:	891b      	ldrh	r3, [r3, #8]
 8011682:	4619      	mov	r1, r3
 8011684:	4610      	mov	r0, r2
 8011686:	f7fb feb3 	bl	800d3f0 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801168a:	4b62      	ldr	r3, [pc, #392]	; (8011814 <tcp_receive+0xf20>)
 801168c:	881b      	ldrh	r3, [r3, #0]
 801168e:	461a      	mov	r2, r3
 8011690:	4b5e      	ldr	r3, [pc, #376]	; (801180c <tcp_receive+0xf18>)
 8011692:	681b      	ldr	r3, [r3, #0]
 8011694:	441a      	add	r2, r3
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801169a:	6879      	ldr	r1, [r7, #4]
 801169c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801169e:	440b      	add	r3, r1
 80116a0:	1ad3      	subs	r3, r2, r3
 80116a2:	2b00      	cmp	r3, #0
 80116a4:	f340 8089 	ble.w	80117ba <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80116a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116aa:	681b      	ldr	r3, [r3, #0]
 80116ac:	68db      	ldr	r3, [r3, #12]
 80116ae:	899b      	ldrh	r3, [r3, #12]
 80116b0:	b29b      	uxth	r3, r3
 80116b2:	4618      	mov	r0, r3
 80116b4:	f7fa fbd4 	bl	800be60 <lwip_htons>
 80116b8:	4603      	mov	r3, r0
 80116ba:	b2db      	uxtb	r3, r3
 80116bc:	f003 0301 	and.w	r3, r3, #1
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	d022      	beq.n	801170a <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80116c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116c6:	681b      	ldr	r3, [r3, #0]
 80116c8:	68db      	ldr	r3, [r3, #12]
 80116ca:	899b      	ldrh	r3, [r3, #12]
 80116cc:	b29b      	uxth	r3, r3
 80116ce:	b21b      	sxth	r3, r3
 80116d0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80116d4:	b21c      	sxth	r4, r3
 80116d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116d8:	681b      	ldr	r3, [r3, #0]
 80116da:	68db      	ldr	r3, [r3, #12]
 80116dc:	899b      	ldrh	r3, [r3, #12]
 80116de:	b29b      	uxth	r3, r3
 80116e0:	4618      	mov	r0, r3
 80116e2:	f7fa fbbd 	bl	800be60 <lwip_htons>
 80116e6:	4603      	mov	r3, r0
 80116e8:	b2db      	uxtb	r3, r3
 80116ea:	b29b      	uxth	r3, r3
 80116ec:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80116f0:	b29b      	uxth	r3, r3
 80116f2:	4618      	mov	r0, r3
 80116f4:	f7fa fbb4 	bl	800be60 <lwip_htons>
 80116f8:	4603      	mov	r3, r0
 80116fa:	b21b      	sxth	r3, r3
 80116fc:	4323      	orrs	r3, r4
 80116fe:	b21a      	sxth	r2, r3
 8011700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011702:	681b      	ldr	r3, [r3, #0]
 8011704:	68db      	ldr	r3, [r3, #12]
 8011706:	b292      	uxth	r2, r2
 8011708:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801170e:	b29a      	uxth	r2, r3
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011714:	4413      	add	r3, r2
 8011716:	b299      	uxth	r1, r3
 8011718:	4b3c      	ldr	r3, [pc, #240]	; (801180c <tcp_receive+0xf18>)
 801171a:	681b      	ldr	r3, [r3, #0]
 801171c:	b29a      	uxth	r2, r3
 801171e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011720:	681b      	ldr	r3, [r3, #0]
 8011722:	1a8a      	subs	r2, r1, r2
 8011724:	b292      	uxth	r2, r2
 8011726:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8011728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801172a:	681b      	ldr	r3, [r3, #0]
 801172c:	685a      	ldr	r2, [r3, #4]
 801172e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011730:	681b      	ldr	r3, [r3, #0]
 8011732:	891b      	ldrh	r3, [r3, #8]
 8011734:	4619      	mov	r1, r3
 8011736:	4610      	mov	r0, r2
 8011738:	f7fb fe5a 	bl	800d3f0 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801173c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801173e:	681b      	ldr	r3, [r3, #0]
 8011740:	891c      	ldrh	r4, [r3, #8]
 8011742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011744:	681b      	ldr	r3, [r3, #0]
 8011746:	68db      	ldr	r3, [r3, #12]
 8011748:	899b      	ldrh	r3, [r3, #12]
 801174a:	b29b      	uxth	r3, r3
 801174c:	4618      	mov	r0, r3
 801174e:	f7fa fb87 	bl	800be60 <lwip_htons>
 8011752:	4603      	mov	r3, r0
 8011754:	b2db      	uxtb	r3, r3
 8011756:	f003 0303 	and.w	r3, r3, #3
 801175a:	2b00      	cmp	r3, #0
 801175c:	d001      	beq.n	8011762 <tcp_receive+0xe6e>
 801175e:	2301      	movs	r3, #1
 8011760:	e000      	b.n	8011764 <tcp_receive+0xe70>
 8011762:	2300      	movs	r3, #0
 8011764:	4423      	add	r3, r4
 8011766:	b29a      	uxth	r2, r3
 8011768:	4b2a      	ldr	r3, [pc, #168]	; (8011814 <tcp_receive+0xf20>)
 801176a:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801176c:	4b29      	ldr	r3, [pc, #164]	; (8011814 <tcp_receive+0xf20>)
 801176e:	881b      	ldrh	r3, [r3, #0]
 8011770:	461a      	mov	r2, r3
 8011772:	4b26      	ldr	r3, [pc, #152]	; (801180c <tcp_receive+0xf18>)
 8011774:	681b      	ldr	r3, [r3, #0]
 8011776:	441a      	add	r2, r3
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801177c:	6879      	ldr	r1, [r7, #4]
 801177e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011780:	440b      	add	r3, r1
 8011782:	429a      	cmp	r2, r3
 8011784:	d019      	beq.n	80117ba <tcp_receive+0xec6>
 8011786:	4b24      	ldr	r3, [pc, #144]	; (8011818 <tcp_receive+0xf24>)
 8011788:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 801178c:	4923      	ldr	r1, [pc, #140]	; (801181c <tcp_receive+0xf28>)
 801178e:	4824      	ldr	r0, [pc, #144]	; (8011820 <tcp_receive+0xf2c>)
 8011790:	f007 f984 	bl	8018a9c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8011794:	e011      	b.n	80117ba <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8011796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011798:	681b      	ldr	r3, [r3, #0]
 801179a:	63bb      	str	r3, [r7, #56]	; 0x38
 801179c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801179e:	2b00      	cmp	r3, #0
 80117a0:	f47f aea4 	bne.w	80114ec <tcp_receive+0xbf8>
 80117a4:	e00a      	b.n	80117bc <tcp_receive+0xec8>
                break;
 80117a6:	bf00      	nop
 80117a8:	e008      	b.n	80117bc <tcp_receive+0xec8>
                break;
 80117aa:	bf00      	nop
 80117ac:	e006      	b.n	80117bc <tcp_receive+0xec8>
                  break;
 80117ae:	bf00      	nop
 80117b0:	e004      	b.n	80117bc <tcp_receive+0xec8>
                  break;
 80117b2:	bf00      	nop
 80117b4:	e002      	b.n	80117bc <tcp_receive+0xec8>
                  break;
 80117b6:	bf00      	nop
 80117b8:	e000      	b.n	80117bc <tcp_receive+0xec8>
                break;
 80117ba:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80117bc:	6878      	ldr	r0, [r7, #4]
 80117be:	f001 fa33 	bl	8012c28 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 80117c2:	e003      	b.n	80117cc <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80117c4:	6878      	ldr	r0, [r7, #4]
 80117c6:	f001 fa2f 	bl	8012c28 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80117ca:	e01a      	b.n	8011802 <tcp_receive+0xf0e>
 80117cc:	e019      	b.n	8011802 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80117ce:	4b0f      	ldr	r3, [pc, #60]	; (801180c <tcp_receive+0xf18>)
 80117d0:	681a      	ldr	r2, [r3, #0]
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80117d6:	1ad3      	subs	r3, r2, r3
 80117d8:	2b00      	cmp	r3, #0
 80117da:	db0a      	blt.n	80117f2 <tcp_receive+0xefe>
 80117dc:	4b0b      	ldr	r3, [pc, #44]	; (801180c <tcp_receive+0xf18>)
 80117de:	681a      	ldr	r2, [r3, #0]
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80117e4:	6879      	ldr	r1, [r7, #4]
 80117e6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80117e8:	440b      	add	r3, r1
 80117ea:	1ad3      	subs	r3, r2, r3
 80117ec:	3301      	adds	r3, #1
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	dd07      	ble.n	8011802 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	8b5b      	ldrh	r3, [r3, #26]
 80117f6:	f043 0302 	orr.w	r3, r3, #2
 80117fa:	b29a      	uxth	r2, r3
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8011800:	e7ff      	b.n	8011802 <tcp_receive+0xf0e>
 8011802:	bf00      	nop
 8011804:	3750      	adds	r7, #80	; 0x50
 8011806:	46bd      	mov	sp, r7
 8011808:	bdb0      	pop	{r4, r5, r7, pc}
 801180a:	bf00      	nop
 801180c:	2000c8c4 	.word	0x2000c8c4
 8011810:	2000c8a4 	.word	0x2000c8a4
 8011814:	2000c8ce 	.word	0x2000c8ce
 8011818:	0801aeb8 	.word	0x0801aeb8
 801181c:	0801b260 	.word	0x0801b260
 8011820:	0801af04 	.word	0x0801af04

08011824 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8011824:	b480      	push	{r7}
 8011826:	b083      	sub	sp, #12
 8011828:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801182a:	4b15      	ldr	r3, [pc, #84]	; (8011880 <tcp_get_next_optbyte+0x5c>)
 801182c:	881b      	ldrh	r3, [r3, #0]
 801182e:	1c5a      	adds	r2, r3, #1
 8011830:	b291      	uxth	r1, r2
 8011832:	4a13      	ldr	r2, [pc, #76]	; (8011880 <tcp_get_next_optbyte+0x5c>)
 8011834:	8011      	strh	r1, [r2, #0]
 8011836:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8011838:	4b12      	ldr	r3, [pc, #72]	; (8011884 <tcp_get_next_optbyte+0x60>)
 801183a:	681b      	ldr	r3, [r3, #0]
 801183c:	2b00      	cmp	r3, #0
 801183e:	d004      	beq.n	801184a <tcp_get_next_optbyte+0x26>
 8011840:	4b11      	ldr	r3, [pc, #68]	; (8011888 <tcp_get_next_optbyte+0x64>)
 8011842:	881b      	ldrh	r3, [r3, #0]
 8011844:	88fa      	ldrh	r2, [r7, #6]
 8011846:	429a      	cmp	r2, r3
 8011848:	d208      	bcs.n	801185c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801184a:	4b10      	ldr	r3, [pc, #64]	; (801188c <tcp_get_next_optbyte+0x68>)
 801184c:	681b      	ldr	r3, [r3, #0]
 801184e:	3314      	adds	r3, #20
 8011850:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8011852:	88fb      	ldrh	r3, [r7, #6]
 8011854:	683a      	ldr	r2, [r7, #0]
 8011856:	4413      	add	r3, r2
 8011858:	781b      	ldrb	r3, [r3, #0]
 801185a:	e00b      	b.n	8011874 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801185c:	88fb      	ldrh	r3, [r7, #6]
 801185e:	b2da      	uxtb	r2, r3
 8011860:	4b09      	ldr	r3, [pc, #36]	; (8011888 <tcp_get_next_optbyte+0x64>)
 8011862:	881b      	ldrh	r3, [r3, #0]
 8011864:	b2db      	uxtb	r3, r3
 8011866:	1ad3      	subs	r3, r2, r3
 8011868:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801186a:	4b06      	ldr	r3, [pc, #24]	; (8011884 <tcp_get_next_optbyte+0x60>)
 801186c:	681a      	ldr	r2, [r3, #0]
 801186e:	797b      	ldrb	r3, [r7, #5]
 8011870:	4413      	add	r3, r2
 8011872:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011874:	4618      	mov	r0, r3
 8011876:	370c      	adds	r7, #12
 8011878:	46bd      	mov	sp, r7
 801187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801187e:	4770      	bx	lr
 8011880:	2000c8c0 	.word	0x2000c8c0
 8011884:	2000c8bc 	.word	0x2000c8bc
 8011888:	2000c8ba 	.word	0x2000c8ba
 801188c:	2000c8b4 	.word	0x2000c8b4

08011890 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8011890:	b580      	push	{r7, lr}
 8011892:	b084      	sub	sp, #16
 8011894:	af00      	add	r7, sp, #0
 8011896:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	2b00      	cmp	r3, #0
 801189c:	d106      	bne.n	80118ac <tcp_parseopt+0x1c>
 801189e:	4b32      	ldr	r3, [pc, #200]	; (8011968 <tcp_parseopt+0xd8>)
 80118a0:	f240 727d 	movw	r2, #1917	; 0x77d
 80118a4:	4931      	ldr	r1, [pc, #196]	; (801196c <tcp_parseopt+0xdc>)
 80118a6:	4832      	ldr	r0, [pc, #200]	; (8011970 <tcp_parseopt+0xe0>)
 80118a8:	f007 f8f8 	bl	8018a9c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80118ac:	4b31      	ldr	r3, [pc, #196]	; (8011974 <tcp_parseopt+0xe4>)
 80118ae:	881b      	ldrh	r3, [r3, #0]
 80118b0:	2b00      	cmp	r3, #0
 80118b2:	d055      	beq.n	8011960 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80118b4:	4b30      	ldr	r3, [pc, #192]	; (8011978 <tcp_parseopt+0xe8>)
 80118b6:	2200      	movs	r2, #0
 80118b8:	801a      	strh	r2, [r3, #0]
 80118ba:	e045      	b.n	8011948 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 80118bc:	f7ff ffb2 	bl	8011824 <tcp_get_next_optbyte>
 80118c0:	4603      	mov	r3, r0
 80118c2:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80118c4:	7bfb      	ldrb	r3, [r7, #15]
 80118c6:	2b02      	cmp	r3, #2
 80118c8:	d006      	beq.n	80118d8 <tcp_parseopt+0x48>
 80118ca:	2b02      	cmp	r3, #2
 80118cc:	dc2b      	bgt.n	8011926 <tcp_parseopt+0x96>
 80118ce:	2b00      	cmp	r3, #0
 80118d0:	d041      	beq.n	8011956 <tcp_parseopt+0xc6>
 80118d2:	2b01      	cmp	r3, #1
 80118d4:	d127      	bne.n	8011926 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 80118d6:	e037      	b.n	8011948 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80118d8:	f7ff ffa4 	bl	8011824 <tcp_get_next_optbyte>
 80118dc:	4603      	mov	r3, r0
 80118de:	2b04      	cmp	r3, #4
 80118e0:	d13b      	bne.n	801195a <tcp_parseopt+0xca>
 80118e2:	4b25      	ldr	r3, [pc, #148]	; (8011978 <tcp_parseopt+0xe8>)
 80118e4:	881b      	ldrh	r3, [r3, #0]
 80118e6:	3301      	adds	r3, #1
 80118e8:	4a22      	ldr	r2, [pc, #136]	; (8011974 <tcp_parseopt+0xe4>)
 80118ea:	8812      	ldrh	r2, [r2, #0]
 80118ec:	4293      	cmp	r3, r2
 80118ee:	da34      	bge.n	801195a <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80118f0:	f7ff ff98 	bl	8011824 <tcp_get_next_optbyte>
 80118f4:	4603      	mov	r3, r0
 80118f6:	b29b      	uxth	r3, r3
 80118f8:	021b      	lsls	r3, r3, #8
 80118fa:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80118fc:	f7ff ff92 	bl	8011824 <tcp_get_next_optbyte>
 8011900:	4603      	mov	r3, r0
 8011902:	b29a      	uxth	r2, r3
 8011904:	89bb      	ldrh	r3, [r7, #12]
 8011906:	4313      	orrs	r3, r2
 8011908:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801190a:	89bb      	ldrh	r3, [r7, #12]
 801190c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8011910:	d804      	bhi.n	801191c <tcp_parseopt+0x8c>
 8011912:	89bb      	ldrh	r3, [r7, #12]
 8011914:	2b00      	cmp	r3, #0
 8011916:	d001      	beq.n	801191c <tcp_parseopt+0x8c>
 8011918:	89ba      	ldrh	r2, [r7, #12]
 801191a:	e001      	b.n	8011920 <tcp_parseopt+0x90>
 801191c:	f44f 7206 	mov.w	r2, #536	; 0x218
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8011924:	e010      	b.n	8011948 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8011926:	f7ff ff7d 	bl	8011824 <tcp_get_next_optbyte>
 801192a:	4603      	mov	r3, r0
 801192c:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801192e:	7afb      	ldrb	r3, [r7, #11]
 8011930:	2b01      	cmp	r3, #1
 8011932:	d914      	bls.n	801195e <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8011934:	7afb      	ldrb	r3, [r7, #11]
 8011936:	b29a      	uxth	r2, r3
 8011938:	4b0f      	ldr	r3, [pc, #60]	; (8011978 <tcp_parseopt+0xe8>)
 801193a:	881b      	ldrh	r3, [r3, #0]
 801193c:	4413      	add	r3, r2
 801193e:	b29b      	uxth	r3, r3
 8011940:	3b02      	subs	r3, #2
 8011942:	b29a      	uxth	r2, r3
 8011944:	4b0c      	ldr	r3, [pc, #48]	; (8011978 <tcp_parseopt+0xe8>)
 8011946:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011948:	4b0b      	ldr	r3, [pc, #44]	; (8011978 <tcp_parseopt+0xe8>)
 801194a:	881a      	ldrh	r2, [r3, #0]
 801194c:	4b09      	ldr	r3, [pc, #36]	; (8011974 <tcp_parseopt+0xe4>)
 801194e:	881b      	ldrh	r3, [r3, #0]
 8011950:	429a      	cmp	r2, r3
 8011952:	d3b3      	bcc.n	80118bc <tcp_parseopt+0x2c>
 8011954:	e004      	b.n	8011960 <tcp_parseopt+0xd0>
          return;
 8011956:	bf00      	nop
 8011958:	e002      	b.n	8011960 <tcp_parseopt+0xd0>
            return;
 801195a:	bf00      	nop
 801195c:	e000      	b.n	8011960 <tcp_parseopt+0xd0>
            return;
 801195e:	bf00      	nop
      }
    }
  }
}
 8011960:	3710      	adds	r7, #16
 8011962:	46bd      	mov	sp, r7
 8011964:	bd80      	pop	{r7, pc}
 8011966:	bf00      	nop
 8011968:	0801aeb8 	.word	0x0801aeb8
 801196c:	0801b31c 	.word	0x0801b31c
 8011970:	0801af04 	.word	0x0801af04
 8011974:	2000c8b8 	.word	0x2000c8b8
 8011978:	2000c8c0 	.word	0x2000c8c0

0801197c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 801197c:	b480      	push	{r7}
 801197e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8011980:	4b05      	ldr	r3, [pc, #20]	; (8011998 <tcp_trigger_input_pcb_close+0x1c>)
 8011982:	781b      	ldrb	r3, [r3, #0]
 8011984:	f043 0310 	orr.w	r3, r3, #16
 8011988:	b2da      	uxtb	r2, r3
 801198a:	4b03      	ldr	r3, [pc, #12]	; (8011998 <tcp_trigger_input_pcb_close+0x1c>)
 801198c:	701a      	strb	r2, [r3, #0]
}
 801198e:	bf00      	nop
 8011990:	46bd      	mov	sp, r7
 8011992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011996:	4770      	bx	lr
 8011998:	2000c8d1 	.word	0x2000c8d1

0801199c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 801199c:	b580      	push	{r7, lr}
 801199e:	b084      	sub	sp, #16
 80119a0:	af00      	add	r7, sp, #0
 80119a2:	60f8      	str	r0, [r7, #12]
 80119a4:	60b9      	str	r1, [r7, #8]
 80119a6:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80119a8:	68fb      	ldr	r3, [r7, #12]
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	d00a      	beq.n	80119c4 <tcp_route+0x28>
 80119ae:	68fb      	ldr	r3, [r7, #12]
 80119b0:	7a1b      	ldrb	r3, [r3, #8]
 80119b2:	2b00      	cmp	r3, #0
 80119b4:	d006      	beq.n	80119c4 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80119b6:	68fb      	ldr	r3, [r7, #12]
 80119b8:	7a1b      	ldrb	r3, [r3, #8]
 80119ba:	4618      	mov	r0, r3
 80119bc:	f7fb fb10 	bl	800cfe0 <netif_get_by_index>
 80119c0:	4603      	mov	r3, r0
 80119c2:	e003      	b.n	80119cc <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80119c4:	6878      	ldr	r0, [r7, #4]
 80119c6:	f005 f82f 	bl	8016a28 <ip4_route>
 80119ca:	4603      	mov	r3, r0
  }
}
 80119cc:	4618      	mov	r0, r3
 80119ce:	3710      	adds	r7, #16
 80119d0:	46bd      	mov	sp, r7
 80119d2:	bd80      	pop	{r7, pc}

080119d4 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80119d4:	b590      	push	{r4, r7, lr}
 80119d6:	b087      	sub	sp, #28
 80119d8:	af00      	add	r7, sp, #0
 80119da:	60f8      	str	r0, [r7, #12]
 80119dc:	60b9      	str	r1, [r7, #8]
 80119de:	603b      	str	r3, [r7, #0]
 80119e0:	4613      	mov	r3, r2
 80119e2:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80119e4:	68fb      	ldr	r3, [r7, #12]
 80119e6:	2b00      	cmp	r3, #0
 80119e8:	d105      	bne.n	80119f6 <tcp_create_segment+0x22>
 80119ea:	4b44      	ldr	r3, [pc, #272]	; (8011afc <tcp_create_segment+0x128>)
 80119ec:	22a3      	movs	r2, #163	; 0xa3
 80119ee:	4944      	ldr	r1, [pc, #272]	; (8011b00 <tcp_create_segment+0x12c>)
 80119f0:	4844      	ldr	r0, [pc, #272]	; (8011b04 <tcp_create_segment+0x130>)
 80119f2:	f007 f853 	bl	8018a9c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80119f6:	68bb      	ldr	r3, [r7, #8]
 80119f8:	2b00      	cmp	r3, #0
 80119fa:	d105      	bne.n	8011a08 <tcp_create_segment+0x34>
 80119fc:	4b3f      	ldr	r3, [pc, #252]	; (8011afc <tcp_create_segment+0x128>)
 80119fe:	22a4      	movs	r2, #164	; 0xa4
 8011a00:	4941      	ldr	r1, [pc, #260]	; (8011b08 <tcp_create_segment+0x134>)
 8011a02:	4840      	ldr	r0, [pc, #256]	; (8011b04 <tcp_create_segment+0x130>)
 8011a04:	f007 f84a 	bl	8018a9c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011a08:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011a0c:	009b      	lsls	r3, r3, #2
 8011a0e:	b2db      	uxtb	r3, r3
 8011a10:	f003 0304 	and.w	r3, r3, #4
 8011a14:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8011a16:	2003      	movs	r0, #3
 8011a18:	f7fa ffb2 	bl	800c980 <memp_malloc>
 8011a1c:	6138      	str	r0, [r7, #16]
 8011a1e:	693b      	ldr	r3, [r7, #16]
 8011a20:	2b00      	cmp	r3, #0
 8011a22:	d104      	bne.n	8011a2e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8011a24:	68b8      	ldr	r0, [r7, #8]
 8011a26:	f7fb fe69 	bl	800d6fc <pbuf_free>
    return NULL;
 8011a2a:	2300      	movs	r3, #0
 8011a2c:	e061      	b.n	8011af2 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8011a2e:	693b      	ldr	r3, [r7, #16]
 8011a30:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8011a34:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8011a36:	693b      	ldr	r3, [r7, #16]
 8011a38:	2200      	movs	r2, #0
 8011a3a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8011a3c:	693b      	ldr	r3, [r7, #16]
 8011a3e:	68ba      	ldr	r2, [r7, #8]
 8011a40:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8011a42:	68bb      	ldr	r3, [r7, #8]
 8011a44:	891a      	ldrh	r2, [r3, #8]
 8011a46:	7dfb      	ldrb	r3, [r7, #23]
 8011a48:	b29b      	uxth	r3, r3
 8011a4a:	429a      	cmp	r2, r3
 8011a4c:	d205      	bcs.n	8011a5a <tcp_create_segment+0x86>
 8011a4e:	4b2b      	ldr	r3, [pc, #172]	; (8011afc <tcp_create_segment+0x128>)
 8011a50:	22b0      	movs	r2, #176	; 0xb0
 8011a52:	492e      	ldr	r1, [pc, #184]	; (8011b0c <tcp_create_segment+0x138>)
 8011a54:	482b      	ldr	r0, [pc, #172]	; (8011b04 <tcp_create_segment+0x130>)
 8011a56:	f007 f821 	bl	8018a9c <iprintf>
  seg->len = p->tot_len - optlen;
 8011a5a:	68bb      	ldr	r3, [r7, #8]
 8011a5c:	891a      	ldrh	r2, [r3, #8]
 8011a5e:	7dfb      	ldrb	r3, [r7, #23]
 8011a60:	b29b      	uxth	r3, r3
 8011a62:	1ad3      	subs	r3, r2, r3
 8011a64:	b29a      	uxth	r2, r3
 8011a66:	693b      	ldr	r3, [r7, #16]
 8011a68:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8011a6a:	2114      	movs	r1, #20
 8011a6c:	68b8      	ldr	r0, [r7, #8]
 8011a6e:	f7fb fdaf 	bl	800d5d0 <pbuf_add_header>
 8011a72:	4603      	mov	r3, r0
 8011a74:	2b00      	cmp	r3, #0
 8011a76:	d004      	beq.n	8011a82 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8011a78:	6938      	ldr	r0, [r7, #16]
 8011a7a:	f7fd f8ce 	bl	800ec1a <tcp_seg_free>
    return NULL;
 8011a7e:	2300      	movs	r3, #0
 8011a80:	e037      	b.n	8011af2 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8011a82:	693b      	ldr	r3, [r7, #16]
 8011a84:	685b      	ldr	r3, [r3, #4]
 8011a86:	685a      	ldr	r2, [r3, #4]
 8011a88:	693b      	ldr	r3, [r7, #16]
 8011a8a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8011a8c:	68fb      	ldr	r3, [r7, #12]
 8011a8e:	8ada      	ldrh	r2, [r3, #22]
 8011a90:	693b      	ldr	r3, [r7, #16]
 8011a92:	68dc      	ldr	r4, [r3, #12]
 8011a94:	4610      	mov	r0, r2
 8011a96:	f7fa f9e3 	bl	800be60 <lwip_htons>
 8011a9a:	4603      	mov	r3, r0
 8011a9c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8011a9e:	68fb      	ldr	r3, [r7, #12]
 8011aa0:	8b1a      	ldrh	r2, [r3, #24]
 8011aa2:	693b      	ldr	r3, [r7, #16]
 8011aa4:	68dc      	ldr	r4, [r3, #12]
 8011aa6:	4610      	mov	r0, r2
 8011aa8:	f7fa f9da 	bl	800be60 <lwip_htons>
 8011aac:	4603      	mov	r3, r0
 8011aae:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8011ab0:	693b      	ldr	r3, [r7, #16]
 8011ab2:	68dc      	ldr	r4, [r3, #12]
 8011ab4:	6838      	ldr	r0, [r7, #0]
 8011ab6:	f7fa f9e8 	bl	800be8a <lwip_htonl>
 8011aba:	4603      	mov	r3, r0
 8011abc:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8011abe:	7dfb      	ldrb	r3, [r7, #23]
 8011ac0:	089b      	lsrs	r3, r3, #2
 8011ac2:	b2db      	uxtb	r3, r3
 8011ac4:	b29b      	uxth	r3, r3
 8011ac6:	3305      	adds	r3, #5
 8011ac8:	b29b      	uxth	r3, r3
 8011aca:	031b      	lsls	r3, r3, #12
 8011acc:	b29a      	uxth	r2, r3
 8011ace:	79fb      	ldrb	r3, [r7, #7]
 8011ad0:	b29b      	uxth	r3, r3
 8011ad2:	4313      	orrs	r3, r2
 8011ad4:	b29a      	uxth	r2, r3
 8011ad6:	693b      	ldr	r3, [r7, #16]
 8011ad8:	68dc      	ldr	r4, [r3, #12]
 8011ada:	4610      	mov	r0, r2
 8011adc:	f7fa f9c0 	bl	800be60 <lwip_htons>
 8011ae0:	4603      	mov	r3, r0
 8011ae2:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8011ae4:	693b      	ldr	r3, [r7, #16]
 8011ae6:	68db      	ldr	r3, [r3, #12]
 8011ae8:	2200      	movs	r2, #0
 8011aea:	749a      	strb	r2, [r3, #18]
 8011aec:	2200      	movs	r2, #0
 8011aee:	74da      	strb	r2, [r3, #19]
  return seg;
 8011af0:	693b      	ldr	r3, [r7, #16]
}
 8011af2:	4618      	mov	r0, r3
 8011af4:	371c      	adds	r7, #28
 8011af6:	46bd      	mov	sp, r7
 8011af8:	bd90      	pop	{r4, r7, pc}
 8011afa:	bf00      	nop
 8011afc:	0801b338 	.word	0x0801b338
 8011b00:	0801b36c 	.word	0x0801b36c
 8011b04:	0801b38c 	.word	0x0801b38c
 8011b08:	0801b3b4 	.word	0x0801b3b4
 8011b0c:	0801b3d8 	.word	0x0801b3d8

08011b10 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8011b10:	b590      	push	{r4, r7, lr}
 8011b12:	b08b      	sub	sp, #44	; 0x2c
 8011b14:	af02      	add	r7, sp, #8
 8011b16:	6078      	str	r0, [r7, #4]
 8011b18:	460b      	mov	r3, r1
 8011b1a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8011b1c:	2300      	movs	r3, #0
 8011b1e:	61fb      	str	r3, [r7, #28]
 8011b20:	2300      	movs	r3, #0
 8011b22:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8011b24:	2300      	movs	r3, #0
 8011b26:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	d106      	bne.n	8011b3c <tcp_split_unsent_seg+0x2c>
 8011b2e:	4b95      	ldr	r3, [pc, #596]	; (8011d84 <tcp_split_unsent_seg+0x274>)
 8011b30:	f240 324b 	movw	r2, #843	; 0x34b
 8011b34:	4994      	ldr	r1, [pc, #592]	; (8011d88 <tcp_split_unsent_seg+0x278>)
 8011b36:	4895      	ldr	r0, [pc, #596]	; (8011d8c <tcp_split_unsent_seg+0x27c>)
 8011b38:	f006 ffb0 	bl	8018a9c <iprintf>

  useg = pcb->unsent;
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011b40:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8011b42:	697b      	ldr	r3, [r7, #20]
 8011b44:	2b00      	cmp	r3, #0
 8011b46:	d102      	bne.n	8011b4e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8011b48:	f04f 33ff 	mov.w	r3, #4294967295
 8011b4c:	e116      	b.n	8011d7c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8011b4e:	887b      	ldrh	r3, [r7, #2]
 8011b50:	2b00      	cmp	r3, #0
 8011b52:	d109      	bne.n	8011b68 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8011b54:	4b8b      	ldr	r3, [pc, #556]	; (8011d84 <tcp_split_unsent_seg+0x274>)
 8011b56:	f240 3253 	movw	r2, #851	; 0x353
 8011b5a:	498d      	ldr	r1, [pc, #564]	; (8011d90 <tcp_split_unsent_seg+0x280>)
 8011b5c:	488b      	ldr	r0, [pc, #556]	; (8011d8c <tcp_split_unsent_seg+0x27c>)
 8011b5e:	f006 ff9d 	bl	8018a9c <iprintf>
    return ERR_VAL;
 8011b62:	f06f 0305 	mvn.w	r3, #5
 8011b66:	e109      	b.n	8011d7c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8011b68:	697b      	ldr	r3, [r7, #20]
 8011b6a:	891b      	ldrh	r3, [r3, #8]
 8011b6c:	887a      	ldrh	r2, [r7, #2]
 8011b6e:	429a      	cmp	r2, r3
 8011b70:	d301      	bcc.n	8011b76 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8011b72:	2300      	movs	r3, #0
 8011b74:	e102      	b.n	8011d7c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011b7a:	887a      	ldrh	r2, [r7, #2]
 8011b7c:	429a      	cmp	r2, r3
 8011b7e:	d906      	bls.n	8011b8e <tcp_split_unsent_seg+0x7e>
 8011b80:	4b80      	ldr	r3, [pc, #512]	; (8011d84 <tcp_split_unsent_seg+0x274>)
 8011b82:	f240 325b 	movw	r2, #859	; 0x35b
 8011b86:	4983      	ldr	r1, [pc, #524]	; (8011d94 <tcp_split_unsent_seg+0x284>)
 8011b88:	4880      	ldr	r0, [pc, #512]	; (8011d8c <tcp_split_unsent_seg+0x27c>)
 8011b8a:	f006 ff87 	bl	8018a9c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8011b8e:	697b      	ldr	r3, [r7, #20]
 8011b90:	891b      	ldrh	r3, [r3, #8]
 8011b92:	2b00      	cmp	r3, #0
 8011b94:	d106      	bne.n	8011ba4 <tcp_split_unsent_seg+0x94>
 8011b96:	4b7b      	ldr	r3, [pc, #492]	; (8011d84 <tcp_split_unsent_seg+0x274>)
 8011b98:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8011b9c:	497e      	ldr	r1, [pc, #504]	; (8011d98 <tcp_split_unsent_seg+0x288>)
 8011b9e:	487b      	ldr	r0, [pc, #492]	; (8011d8c <tcp_split_unsent_seg+0x27c>)
 8011ba0:	f006 ff7c 	bl	8018a9c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8011ba4:	697b      	ldr	r3, [r7, #20]
 8011ba6:	7a9b      	ldrb	r3, [r3, #10]
 8011ba8:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8011baa:	7bfb      	ldrb	r3, [r7, #15]
 8011bac:	009b      	lsls	r3, r3, #2
 8011bae:	b2db      	uxtb	r3, r3
 8011bb0:	f003 0304 	and.w	r3, r3, #4
 8011bb4:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8011bb6:	697b      	ldr	r3, [r7, #20]
 8011bb8:	891a      	ldrh	r2, [r3, #8]
 8011bba:	887b      	ldrh	r3, [r7, #2]
 8011bbc:	1ad3      	subs	r3, r2, r3
 8011bbe:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8011bc0:	7bbb      	ldrb	r3, [r7, #14]
 8011bc2:	b29a      	uxth	r2, r3
 8011bc4:	89bb      	ldrh	r3, [r7, #12]
 8011bc6:	4413      	add	r3, r2
 8011bc8:	b29b      	uxth	r3, r3
 8011bca:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011bce:	4619      	mov	r1, r3
 8011bd0:	2036      	movs	r0, #54	; 0x36
 8011bd2:	f7fb faaf 	bl	800d134 <pbuf_alloc>
 8011bd6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011bd8:	693b      	ldr	r3, [r7, #16]
 8011bda:	2b00      	cmp	r3, #0
 8011bdc:	f000 80b7 	beq.w	8011d4e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8011be0:	697b      	ldr	r3, [r7, #20]
 8011be2:	685b      	ldr	r3, [r3, #4]
 8011be4:	891a      	ldrh	r2, [r3, #8]
 8011be6:	697b      	ldr	r3, [r7, #20]
 8011be8:	891b      	ldrh	r3, [r3, #8]
 8011bea:	1ad3      	subs	r3, r2, r3
 8011bec:	b29a      	uxth	r2, r3
 8011bee:	887b      	ldrh	r3, [r7, #2]
 8011bf0:	4413      	add	r3, r2
 8011bf2:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8011bf4:	697b      	ldr	r3, [r7, #20]
 8011bf6:	6858      	ldr	r0, [r3, #4]
 8011bf8:	693b      	ldr	r3, [r7, #16]
 8011bfa:	685a      	ldr	r2, [r3, #4]
 8011bfc:	7bbb      	ldrb	r3, [r7, #14]
 8011bfe:	18d1      	adds	r1, r2, r3
 8011c00:	897b      	ldrh	r3, [r7, #10]
 8011c02:	89ba      	ldrh	r2, [r7, #12]
 8011c04:	f7fb ff80 	bl	800db08 <pbuf_copy_partial>
 8011c08:	4603      	mov	r3, r0
 8011c0a:	461a      	mov	r2, r3
 8011c0c:	89bb      	ldrh	r3, [r7, #12]
 8011c0e:	4293      	cmp	r3, r2
 8011c10:	f040 809f 	bne.w	8011d52 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8011c14:	697b      	ldr	r3, [r7, #20]
 8011c16:	68db      	ldr	r3, [r3, #12]
 8011c18:	899b      	ldrh	r3, [r3, #12]
 8011c1a:	b29b      	uxth	r3, r3
 8011c1c:	4618      	mov	r0, r3
 8011c1e:	f7fa f91f 	bl	800be60 <lwip_htons>
 8011c22:	4603      	mov	r3, r0
 8011c24:	b2db      	uxtb	r3, r3
 8011c26:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011c2a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8011c2c:	2300      	movs	r3, #0
 8011c2e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8011c30:	7efb      	ldrb	r3, [r7, #27]
 8011c32:	f003 0308 	and.w	r3, r3, #8
 8011c36:	2b00      	cmp	r3, #0
 8011c38:	d007      	beq.n	8011c4a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8011c3a:	7efb      	ldrb	r3, [r7, #27]
 8011c3c:	f023 0308 	bic.w	r3, r3, #8
 8011c40:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8011c42:	7ebb      	ldrb	r3, [r7, #26]
 8011c44:	f043 0308 	orr.w	r3, r3, #8
 8011c48:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8011c4a:	7efb      	ldrb	r3, [r7, #27]
 8011c4c:	f003 0301 	and.w	r3, r3, #1
 8011c50:	2b00      	cmp	r3, #0
 8011c52:	d007      	beq.n	8011c64 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8011c54:	7efb      	ldrb	r3, [r7, #27]
 8011c56:	f023 0301 	bic.w	r3, r3, #1
 8011c5a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8011c5c:	7ebb      	ldrb	r3, [r7, #26]
 8011c5e:	f043 0301 	orr.w	r3, r3, #1
 8011c62:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8011c64:	697b      	ldr	r3, [r7, #20]
 8011c66:	68db      	ldr	r3, [r3, #12]
 8011c68:	685b      	ldr	r3, [r3, #4]
 8011c6a:	4618      	mov	r0, r3
 8011c6c:	f7fa f90d 	bl	800be8a <lwip_htonl>
 8011c70:	4602      	mov	r2, r0
 8011c72:	887b      	ldrh	r3, [r7, #2]
 8011c74:	18d1      	adds	r1, r2, r3
 8011c76:	7eba      	ldrb	r2, [r7, #26]
 8011c78:	7bfb      	ldrb	r3, [r7, #15]
 8011c7a:	9300      	str	r3, [sp, #0]
 8011c7c:	460b      	mov	r3, r1
 8011c7e:	6939      	ldr	r1, [r7, #16]
 8011c80:	6878      	ldr	r0, [r7, #4]
 8011c82:	f7ff fea7 	bl	80119d4 <tcp_create_segment>
 8011c86:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8011c88:	69fb      	ldr	r3, [r7, #28]
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	d063      	beq.n	8011d56 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8011c8e:	697b      	ldr	r3, [r7, #20]
 8011c90:	685b      	ldr	r3, [r3, #4]
 8011c92:	4618      	mov	r0, r3
 8011c94:	f7fb fdc0 	bl	800d818 <pbuf_clen>
 8011c98:	4603      	mov	r3, r0
 8011c9a:	461a      	mov	r2, r3
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011ca2:	1a9b      	subs	r3, r3, r2
 8011ca4:	b29a      	uxth	r2, r3
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8011cac:	697b      	ldr	r3, [r7, #20]
 8011cae:	6858      	ldr	r0, [r3, #4]
 8011cb0:	697b      	ldr	r3, [r7, #20]
 8011cb2:	685b      	ldr	r3, [r3, #4]
 8011cb4:	891a      	ldrh	r2, [r3, #8]
 8011cb6:	89bb      	ldrh	r3, [r7, #12]
 8011cb8:	1ad3      	subs	r3, r2, r3
 8011cba:	b29b      	uxth	r3, r3
 8011cbc:	4619      	mov	r1, r3
 8011cbe:	f7fb fb97 	bl	800d3f0 <pbuf_realloc>
  useg->len -= remainder;
 8011cc2:	697b      	ldr	r3, [r7, #20]
 8011cc4:	891a      	ldrh	r2, [r3, #8]
 8011cc6:	89bb      	ldrh	r3, [r7, #12]
 8011cc8:	1ad3      	subs	r3, r2, r3
 8011cca:	b29a      	uxth	r2, r3
 8011ccc:	697b      	ldr	r3, [r7, #20]
 8011cce:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8011cd0:	697b      	ldr	r3, [r7, #20]
 8011cd2:	68db      	ldr	r3, [r3, #12]
 8011cd4:	899b      	ldrh	r3, [r3, #12]
 8011cd6:	b29c      	uxth	r4, r3
 8011cd8:	7efb      	ldrb	r3, [r7, #27]
 8011cda:	b29b      	uxth	r3, r3
 8011cdc:	4618      	mov	r0, r3
 8011cde:	f7fa f8bf 	bl	800be60 <lwip_htons>
 8011ce2:	4603      	mov	r3, r0
 8011ce4:	461a      	mov	r2, r3
 8011ce6:	697b      	ldr	r3, [r7, #20]
 8011ce8:	68db      	ldr	r3, [r3, #12]
 8011cea:	4322      	orrs	r2, r4
 8011cec:	b292      	uxth	r2, r2
 8011cee:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8011cf0:	697b      	ldr	r3, [r7, #20]
 8011cf2:	685b      	ldr	r3, [r3, #4]
 8011cf4:	4618      	mov	r0, r3
 8011cf6:	f7fb fd8f 	bl	800d818 <pbuf_clen>
 8011cfa:	4603      	mov	r3, r0
 8011cfc:	461a      	mov	r2, r3
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011d04:	4413      	add	r3, r2
 8011d06:	b29a      	uxth	r2, r3
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8011d0e:	69fb      	ldr	r3, [r7, #28]
 8011d10:	685b      	ldr	r3, [r3, #4]
 8011d12:	4618      	mov	r0, r3
 8011d14:	f7fb fd80 	bl	800d818 <pbuf_clen>
 8011d18:	4603      	mov	r3, r0
 8011d1a:	461a      	mov	r2, r3
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011d22:	4413      	add	r3, r2
 8011d24:	b29a      	uxth	r2, r3
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8011d2c:	697b      	ldr	r3, [r7, #20]
 8011d2e:	681a      	ldr	r2, [r3, #0]
 8011d30:	69fb      	ldr	r3, [r7, #28]
 8011d32:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8011d34:	697b      	ldr	r3, [r7, #20]
 8011d36:	69fa      	ldr	r2, [r7, #28]
 8011d38:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8011d3a:	69fb      	ldr	r3, [r7, #28]
 8011d3c:	681b      	ldr	r3, [r3, #0]
 8011d3e:	2b00      	cmp	r3, #0
 8011d40:	d103      	bne.n	8011d4a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	2200      	movs	r2, #0
 8011d46:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8011d4a:	2300      	movs	r3, #0
 8011d4c:	e016      	b.n	8011d7c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8011d4e:	bf00      	nop
 8011d50:	e002      	b.n	8011d58 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8011d52:	bf00      	nop
 8011d54:	e000      	b.n	8011d58 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8011d56:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8011d58:	69fb      	ldr	r3, [r7, #28]
 8011d5a:	2b00      	cmp	r3, #0
 8011d5c:	d006      	beq.n	8011d6c <tcp_split_unsent_seg+0x25c>
 8011d5e:	4b09      	ldr	r3, [pc, #36]	; (8011d84 <tcp_split_unsent_seg+0x274>)
 8011d60:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8011d64:	490d      	ldr	r1, [pc, #52]	; (8011d9c <tcp_split_unsent_seg+0x28c>)
 8011d66:	4809      	ldr	r0, [pc, #36]	; (8011d8c <tcp_split_unsent_seg+0x27c>)
 8011d68:	f006 fe98 	bl	8018a9c <iprintf>
  if (p != NULL) {
 8011d6c:	693b      	ldr	r3, [r7, #16]
 8011d6e:	2b00      	cmp	r3, #0
 8011d70:	d002      	beq.n	8011d78 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8011d72:	6938      	ldr	r0, [r7, #16]
 8011d74:	f7fb fcc2 	bl	800d6fc <pbuf_free>
  }

  return ERR_MEM;
 8011d78:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011d7c:	4618      	mov	r0, r3
 8011d7e:	3724      	adds	r7, #36	; 0x24
 8011d80:	46bd      	mov	sp, r7
 8011d82:	bd90      	pop	{r4, r7, pc}
 8011d84:	0801b338 	.word	0x0801b338
 8011d88:	0801b6cc 	.word	0x0801b6cc
 8011d8c:	0801b38c 	.word	0x0801b38c
 8011d90:	0801b6f0 	.word	0x0801b6f0
 8011d94:	0801b714 	.word	0x0801b714
 8011d98:	0801b724 	.word	0x0801b724
 8011d9c:	0801b734 	.word	0x0801b734

08011da0 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8011da0:	b590      	push	{r4, r7, lr}
 8011da2:	b085      	sub	sp, #20
 8011da4:	af00      	add	r7, sp, #0
 8011da6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	2b00      	cmp	r3, #0
 8011dac:	d106      	bne.n	8011dbc <tcp_send_fin+0x1c>
 8011dae:	4b21      	ldr	r3, [pc, #132]	; (8011e34 <tcp_send_fin+0x94>)
 8011db0:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8011db4:	4920      	ldr	r1, [pc, #128]	; (8011e38 <tcp_send_fin+0x98>)
 8011db6:	4821      	ldr	r0, [pc, #132]	; (8011e3c <tcp_send_fin+0x9c>)
 8011db8:	f006 fe70 	bl	8018a9c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011dc0:	2b00      	cmp	r3, #0
 8011dc2:	d02e      	beq.n	8011e22 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011dc8:	60fb      	str	r3, [r7, #12]
 8011dca:	e002      	b.n	8011dd2 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8011dcc:	68fb      	ldr	r3, [r7, #12]
 8011dce:	681b      	ldr	r3, [r3, #0]
 8011dd0:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011dd2:	68fb      	ldr	r3, [r7, #12]
 8011dd4:	681b      	ldr	r3, [r3, #0]
 8011dd6:	2b00      	cmp	r3, #0
 8011dd8:	d1f8      	bne.n	8011dcc <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8011dda:	68fb      	ldr	r3, [r7, #12]
 8011ddc:	68db      	ldr	r3, [r3, #12]
 8011dde:	899b      	ldrh	r3, [r3, #12]
 8011de0:	b29b      	uxth	r3, r3
 8011de2:	4618      	mov	r0, r3
 8011de4:	f7fa f83c 	bl	800be60 <lwip_htons>
 8011de8:	4603      	mov	r3, r0
 8011dea:	b2db      	uxtb	r3, r3
 8011dec:	f003 0307 	and.w	r3, r3, #7
 8011df0:	2b00      	cmp	r3, #0
 8011df2:	d116      	bne.n	8011e22 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8011df4:	68fb      	ldr	r3, [r7, #12]
 8011df6:	68db      	ldr	r3, [r3, #12]
 8011df8:	899b      	ldrh	r3, [r3, #12]
 8011dfa:	b29c      	uxth	r4, r3
 8011dfc:	2001      	movs	r0, #1
 8011dfe:	f7fa f82f 	bl	800be60 <lwip_htons>
 8011e02:	4603      	mov	r3, r0
 8011e04:	461a      	mov	r2, r3
 8011e06:	68fb      	ldr	r3, [r7, #12]
 8011e08:	68db      	ldr	r3, [r3, #12]
 8011e0a:	4322      	orrs	r2, r4
 8011e0c:	b292      	uxth	r2, r2
 8011e0e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	8b5b      	ldrh	r3, [r3, #26]
 8011e14:	f043 0320 	orr.w	r3, r3, #32
 8011e18:	b29a      	uxth	r2, r3
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8011e1e:	2300      	movs	r3, #0
 8011e20:	e004      	b.n	8011e2c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8011e22:	2101      	movs	r1, #1
 8011e24:	6878      	ldr	r0, [r7, #4]
 8011e26:	f000 f80b 	bl	8011e40 <tcp_enqueue_flags>
 8011e2a:	4603      	mov	r3, r0
}
 8011e2c:	4618      	mov	r0, r3
 8011e2e:	3714      	adds	r7, #20
 8011e30:	46bd      	mov	sp, r7
 8011e32:	bd90      	pop	{r4, r7, pc}
 8011e34:	0801b338 	.word	0x0801b338
 8011e38:	0801b740 	.word	0x0801b740
 8011e3c:	0801b38c 	.word	0x0801b38c

08011e40 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8011e40:	b580      	push	{r7, lr}
 8011e42:	b08a      	sub	sp, #40	; 0x28
 8011e44:	af02      	add	r7, sp, #8
 8011e46:	6078      	str	r0, [r7, #4]
 8011e48:	460b      	mov	r3, r1
 8011e4a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8011e4c:	2300      	movs	r3, #0
 8011e4e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8011e50:	2300      	movs	r3, #0
 8011e52:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8011e54:	78fb      	ldrb	r3, [r7, #3]
 8011e56:	f003 0303 	and.w	r3, r3, #3
 8011e5a:	2b00      	cmp	r3, #0
 8011e5c:	d106      	bne.n	8011e6c <tcp_enqueue_flags+0x2c>
 8011e5e:	4b67      	ldr	r3, [pc, #412]	; (8011ffc <tcp_enqueue_flags+0x1bc>)
 8011e60:	f240 4211 	movw	r2, #1041	; 0x411
 8011e64:	4966      	ldr	r1, [pc, #408]	; (8012000 <tcp_enqueue_flags+0x1c0>)
 8011e66:	4867      	ldr	r0, [pc, #412]	; (8012004 <tcp_enqueue_flags+0x1c4>)
 8011e68:	f006 fe18 	bl	8018a9c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	2b00      	cmp	r3, #0
 8011e70:	d106      	bne.n	8011e80 <tcp_enqueue_flags+0x40>
 8011e72:	4b62      	ldr	r3, [pc, #392]	; (8011ffc <tcp_enqueue_flags+0x1bc>)
 8011e74:	f240 4213 	movw	r2, #1043	; 0x413
 8011e78:	4963      	ldr	r1, [pc, #396]	; (8012008 <tcp_enqueue_flags+0x1c8>)
 8011e7a:	4862      	ldr	r0, [pc, #392]	; (8012004 <tcp_enqueue_flags+0x1c4>)
 8011e7c:	f006 fe0e 	bl	8018a9c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8011e80:	78fb      	ldrb	r3, [r7, #3]
 8011e82:	f003 0302 	and.w	r3, r3, #2
 8011e86:	2b00      	cmp	r3, #0
 8011e88:	d001      	beq.n	8011e8e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8011e8a:	2301      	movs	r3, #1
 8011e8c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011e8e:	7ffb      	ldrb	r3, [r7, #31]
 8011e90:	009b      	lsls	r3, r3, #2
 8011e92:	b2db      	uxtb	r3, r3
 8011e94:	f003 0304 	and.w	r3, r3, #4
 8011e98:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8011e9a:	7dfb      	ldrb	r3, [r7, #23]
 8011e9c:	b29b      	uxth	r3, r3
 8011e9e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011ea2:	4619      	mov	r1, r3
 8011ea4:	2036      	movs	r0, #54	; 0x36
 8011ea6:	f7fb f945 	bl	800d134 <pbuf_alloc>
 8011eaa:	6138      	str	r0, [r7, #16]
 8011eac:	693b      	ldr	r3, [r7, #16]
 8011eae:	2b00      	cmp	r3, #0
 8011eb0:	d109      	bne.n	8011ec6 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	8b5b      	ldrh	r3, [r3, #26]
 8011eb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011eba:	b29a      	uxth	r2, r3
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8011ec0:	f04f 33ff 	mov.w	r3, #4294967295
 8011ec4:	e095      	b.n	8011ff2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8011ec6:	693b      	ldr	r3, [r7, #16]
 8011ec8:	895a      	ldrh	r2, [r3, #10]
 8011eca:	7dfb      	ldrb	r3, [r7, #23]
 8011ecc:	b29b      	uxth	r3, r3
 8011ece:	429a      	cmp	r2, r3
 8011ed0:	d206      	bcs.n	8011ee0 <tcp_enqueue_flags+0xa0>
 8011ed2:	4b4a      	ldr	r3, [pc, #296]	; (8011ffc <tcp_enqueue_flags+0x1bc>)
 8011ed4:	f240 4239 	movw	r2, #1081	; 0x439
 8011ed8:	494c      	ldr	r1, [pc, #304]	; (801200c <tcp_enqueue_flags+0x1cc>)
 8011eda:	484a      	ldr	r0, [pc, #296]	; (8012004 <tcp_enqueue_flags+0x1c4>)
 8011edc:	f006 fdde 	bl	8018a9c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8011ee4:	78fa      	ldrb	r2, [r7, #3]
 8011ee6:	7ffb      	ldrb	r3, [r7, #31]
 8011ee8:	9300      	str	r3, [sp, #0]
 8011eea:	460b      	mov	r3, r1
 8011eec:	6939      	ldr	r1, [r7, #16]
 8011eee:	6878      	ldr	r0, [r7, #4]
 8011ef0:	f7ff fd70 	bl	80119d4 <tcp_create_segment>
 8011ef4:	60f8      	str	r0, [r7, #12]
 8011ef6:	68fb      	ldr	r3, [r7, #12]
 8011ef8:	2b00      	cmp	r3, #0
 8011efa:	d109      	bne.n	8011f10 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	8b5b      	ldrh	r3, [r3, #26]
 8011f00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011f04:	b29a      	uxth	r2, r3
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8011f0a:	f04f 33ff 	mov.w	r3, #4294967295
 8011f0e:	e070      	b.n	8011ff2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8011f10:	68fb      	ldr	r3, [r7, #12]
 8011f12:	68db      	ldr	r3, [r3, #12]
 8011f14:	f003 0303 	and.w	r3, r3, #3
 8011f18:	2b00      	cmp	r3, #0
 8011f1a:	d006      	beq.n	8011f2a <tcp_enqueue_flags+0xea>
 8011f1c:	4b37      	ldr	r3, [pc, #220]	; (8011ffc <tcp_enqueue_flags+0x1bc>)
 8011f1e:	f240 4242 	movw	r2, #1090	; 0x442
 8011f22:	493b      	ldr	r1, [pc, #236]	; (8012010 <tcp_enqueue_flags+0x1d0>)
 8011f24:	4837      	ldr	r0, [pc, #220]	; (8012004 <tcp_enqueue_flags+0x1c4>)
 8011f26:	f006 fdb9 	bl	8018a9c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8011f2a:	68fb      	ldr	r3, [r7, #12]
 8011f2c:	891b      	ldrh	r3, [r3, #8]
 8011f2e:	2b00      	cmp	r3, #0
 8011f30:	d006      	beq.n	8011f40 <tcp_enqueue_flags+0x100>
 8011f32:	4b32      	ldr	r3, [pc, #200]	; (8011ffc <tcp_enqueue_flags+0x1bc>)
 8011f34:	f240 4243 	movw	r2, #1091	; 0x443
 8011f38:	4936      	ldr	r1, [pc, #216]	; (8012014 <tcp_enqueue_flags+0x1d4>)
 8011f3a:	4832      	ldr	r0, [pc, #200]	; (8012004 <tcp_enqueue_flags+0x1c4>)
 8011f3c:	f006 fdae 	bl	8018a9c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011f44:	2b00      	cmp	r3, #0
 8011f46:	d103      	bne.n	8011f50 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	68fa      	ldr	r2, [r7, #12]
 8011f4c:	66da      	str	r2, [r3, #108]	; 0x6c
 8011f4e:	e00d      	b.n	8011f6c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8011f50:	687b      	ldr	r3, [r7, #4]
 8011f52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011f54:	61bb      	str	r3, [r7, #24]
 8011f56:	e002      	b.n	8011f5e <tcp_enqueue_flags+0x11e>
 8011f58:	69bb      	ldr	r3, [r7, #24]
 8011f5a:	681b      	ldr	r3, [r3, #0]
 8011f5c:	61bb      	str	r3, [r7, #24]
 8011f5e:	69bb      	ldr	r3, [r7, #24]
 8011f60:	681b      	ldr	r3, [r3, #0]
 8011f62:	2b00      	cmp	r3, #0
 8011f64:	d1f8      	bne.n	8011f58 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8011f66:	69bb      	ldr	r3, [r7, #24]
 8011f68:	68fa      	ldr	r2, [r7, #12]
 8011f6a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	2200      	movs	r2, #0
 8011f70:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8011f74:	78fb      	ldrb	r3, [r7, #3]
 8011f76:	f003 0302 	and.w	r3, r3, #2
 8011f7a:	2b00      	cmp	r3, #0
 8011f7c:	d104      	bne.n	8011f88 <tcp_enqueue_flags+0x148>
 8011f7e:	78fb      	ldrb	r3, [r7, #3]
 8011f80:	f003 0301 	and.w	r3, r3, #1
 8011f84:	2b00      	cmp	r3, #0
 8011f86:	d004      	beq.n	8011f92 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011f8c:	1c5a      	adds	r2, r3, #1
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8011f92:	78fb      	ldrb	r3, [r7, #3]
 8011f94:	f003 0301 	and.w	r3, r3, #1
 8011f98:	2b00      	cmp	r3, #0
 8011f9a:	d006      	beq.n	8011faa <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	8b5b      	ldrh	r3, [r3, #26]
 8011fa0:	f043 0320 	orr.w	r3, r3, #32
 8011fa4:	b29a      	uxth	r2, r3
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8011faa:	68fb      	ldr	r3, [r7, #12]
 8011fac:	685b      	ldr	r3, [r3, #4]
 8011fae:	4618      	mov	r0, r3
 8011fb0:	f7fb fc32 	bl	800d818 <pbuf_clen>
 8011fb4:	4603      	mov	r3, r0
 8011fb6:	461a      	mov	r2, r3
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011fbe:	4413      	add	r3, r2
 8011fc0:	b29a      	uxth	r2, r3
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011fce:	2b00      	cmp	r3, #0
 8011fd0:	d00e      	beq.n	8011ff0 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011fd6:	2b00      	cmp	r3, #0
 8011fd8:	d10a      	bne.n	8011ff0 <tcp_enqueue_flags+0x1b0>
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011fde:	2b00      	cmp	r3, #0
 8011fe0:	d106      	bne.n	8011ff0 <tcp_enqueue_flags+0x1b0>
 8011fe2:	4b06      	ldr	r3, [pc, #24]	; (8011ffc <tcp_enqueue_flags+0x1bc>)
 8011fe4:	f240 4265 	movw	r2, #1125	; 0x465
 8011fe8:	490b      	ldr	r1, [pc, #44]	; (8012018 <tcp_enqueue_flags+0x1d8>)
 8011fea:	4806      	ldr	r0, [pc, #24]	; (8012004 <tcp_enqueue_flags+0x1c4>)
 8011fec:	f006 fd56 	bl	8018a9c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8011ff0:	2300      	movs	r3, #0
}
 8011ff2:	4618      	mov	r0, r3
 8011ff4:	3720      	adds	r7, #32
 8011ff6:	46bd      	mov	sp, r7
 8011ff8:	bd80      	pop	{r7, pc}
 8011ffa:	bf00      	nop
 8011ffc:	0801b338 	.word	0x0801b338
 8012000:	0801b75c 	.word	0x0801b75c
 8012004:	0801b38c 	.word	0x0801b38c
 8012008:	0801b7b4 	.word	0x0801b7b4
 801200c:	0801b7d4 	.word	0x0801b7d4
 8012010:	0801b810 	.word	0x0801b810
 8012014:	0801b828 	.word	0x0801b828
 8012018:	0801b854 	.word	0x0801b854

0801201c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801201c:	b5b0      	push	{r4, r5, r7, lr}
 801201e:	b08a      	sub	sp, #40	; 0x28
 8012020:	af00      	add	r7, sp, #0
 8012022:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8012024:	687b      	ldr	r3, [r7, #4]
 8012026:	2b00      	cmp	r3, #0
 8012028:	d106      	bne.n	8012038 <tcp_output+0x1c>
 801202a:	4b8a      	ldr	r3, [pc, #552]	; (8012254 <tcp_output+0x238>)
 801202c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8012030:	4989      	ldr	r1, [pc, #548]	; (8012258 <tcp_output+0x23c>)
 8012032:	488a      	ldr	r0, [pc, #552]	; (801225c <tcp_output+0x240>)
 8012034:	f006 fd32 	bl	8018a9c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	7d1b      	ldrb	r3, [r3, #20]
 801203c:	2b01      	cmp	r3, #1
 801203e:	d106      	bne.n	801204e <tcp_output+0x32>
 8012040:	4b84      	ldr	r3, [pc, #528]	; (8012254 <tcp_output+0x238>)
 8012042:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8012046:	4986      	ldr	r1, [pc, #536]	; (8012260 <tcp_output+0x244>)
 8012048:	4884      	ldr	r0, [pc, #528]	; (801225c <tcp_output+0x240>)
 801204a:	f006 fd27 	bl	8018a9c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801204e:	4b85      	ldr	r3, [pc, #532]	; (8012264 <tcp_output+0x248>)
 8012050:	681b      	ldr	r3, [r3, #0]
 8012052:	687a      	ldr	r2, [r7, #4]
 8012054:	429a      	cmp	r2, r3
 8012056:	d101      	bne.n	801205c <tcp_output+0x40>
    return ERR_OK;
 8012058:	2300      	movs	r3, #0
 801205a:	e1ce      	b.n	80123fa <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012068:	4293      	cmp	r3, r2
 801206a:	bf28      	it	cs
 801206c:	4613      	movcs	r3, r2
 801206e:	b29b      	uxth	r3, r3
 8012070:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012076:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8012078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801207a:	2b00      	cmp	r3, #0
 801207c:	d10b      	bne.n	8012096 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801207e:	687b      	ldr	r3, [r7, #4]
 8012080:	8b5b      	ldrh	r3, [r3, #26]
 8012082:	f003 0302 	and.w	r3, r3, #2
 8012086:	2b00      	cmp	r3, #0
 8012088:	f000 81aa 	beq.w	80123e0 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 801208c:	6878      	ldr	r0, [r7, #4]
 801208e:	f000 fdcb 	bl	8012c28 <tcp_send_empty_ack>
 8012092:	4603      	mov	r3, r0
 8012094:	e1b1      	b.n	80123fa <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8012096:	6879      	ldr	r1, [r7, #4]
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	3304      	adds	r3, #4
 801209c:	461a      	mov	r2, r3
 801209e:	6878      	ldr	r0, [r7, #4]
 80120a0:	f7ff fc7c 	bl	801199c <tcp_route>
 80120a4:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80120a6:	697b      	ldr	r3, [r7, #20]
 80120a8:	2b00      	cmp	r3, #0
 80120aa:	d102      	bne.n	80120b2 <tcp_output+0x96>
    return ERR_RTE;
 80120ac:	f06f 0303 	mvn.w	r3, #3
 80120b0:	e1a3      	b.n	80123fa <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	2b00      	cmp	r3, #0
 80120b6:	d003      	beq.n	80120c0 <tcp_output+0xa4>
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	681b      	ldr	r3, [r3, #0]
 80120bc:	2b00      	cmp	r3, #0
 80120be:	d111      	bne.n	80120e4 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80120c0:	697b      	ldr	r3, [r7, #20]
 80120c2:	2b00      	cmp	r3, #0
 80120c4:	d002      	beq.n	80120cc <tcp_output+0xb0>
 80120c6:	697b      	ldr	r3, [r7, #20]
 80120c8:	3304      	adds	r3, #4
 80120ca:	e000      	b.n	80120ce <tcp_output+0xb2>
 80120cc:	2300      	movs	r3, #0
 80120ce:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80120d0:	693b      	ldr	r3, [r7, #16]
 80120d2:	2b00      	cmp	r3, #0
 80120d4:	d102      	bne.n	80120dc <tcp_output+0xc0>
      return ERR_RTE;
 80120d6:	f06f 0303 	mvn.w	r3, #3
 80120da:	e18e      	b.n	80123fa <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80120dc:	693b      	ldr	r3, [r7, #16]
 80120de:	681a      	ldr	r2, [r3, #0]
 80120e0:	687b      	ldr	r3, [r7, #4]
 80120e2:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80120e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120e6:	68db      	ldr	r3, [r3, #12]
 80120e8:	685b      	ldr	r3, [r3, #4]
 80120ea:	4618      	mov	r0, r3
 80120ec:	f7f9 fecd 	bl	800be8a <lwip_htonl>
 80120f0:	4602      	mov	r2, r0
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80120f6:	1ad3      	subs	r3, r2, r3
 80120f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80120fa:	8912      	ldrh	r2, [r2, #8]
 80120fc:	4413      	add	r3, r2
 80120fe:	69ba      	ldr	r2, [r7, #24]
 8012100:	429a      	cmp	r2, r3
 8012102:	d227      	bcs.n	8012154 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801210a:	461a      	mov	r2, r3
 801210c:	69bb      	ldr	r3, [r7, #24]
 801210e:	4293      	cmp	r3, r2
 8012110:	d114      	bne.n	801213c <tcp_output+0x120>
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012116:	2b00      	cmp	r3, #0
 8012118:	d110      	bne.n	801213c <tcp_output+0x120>
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8012120:	2b00      	cmp	r3, #0
 8012122:	d10b      	bne.n	801213c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	2200      	movs	r2, #0
 8012128:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	2201      	movs	r2, #1
 8012130:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	2200      	movs	r2, #0
 8012138:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	8b5b      	ldrh	r3, [r3, #26]
 8012140:	f003 0302 	and.w	r3, r3, #2
 8012144:	2b00      	cmp	r3, #0
 8012146:	f000 814d 	beq.w	80123e4 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801214a:	6878      	ldr	r0, [r7, #4]
 801214c:	f000 fd6c 	bl	8012c28 <tcp_send_empty_ack>
 8012150:	4603      	mov	r3, r0
 8012152:	e152      	b.n	80123fa <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	2200      	movs	r2, #0
 8012158:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012160:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8012162:	6a3b      	ldr	r3, [r7, #32]
 8012164:	2b00      	cmp	r3, #0
 8012166:	f000 811c 	beq.w	80123a2 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801216a:	e002      	b.n	8012172 <tcp_output+0x156>
 801216c:	6a3b      	ldr	r3, [r7, #32]
 801216e:	681b      	ldr	r3, [r3, #0]
 8012170:	623b      	str	r3, [r7, #32]
 8012172:	6a3b      	ldr	r3, [r7, #32]
 8012174:	681b      	ldr	r3, [r3, #0]
 8012176:	2b00      	cmp	r3, #0
 8012178:	d1f8      	bne.n	801216c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801217a:	e112      	b.n	80123a2 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801217c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801217e:	68db      	ldr	r3, [r3, #12]
 8012180:	899b      	ldrh	r3, [r3, #12]
 8012182:	b29b      	uxth	r3, r3
 8012184:	4618      	mov	r0, r3
 8012186:	f7f9 fe6b 	bl	800be60 <lwip_htons>
 801218a:	4603      	mov	r3, r0
 801218c:	b2db      	uxtb	r3, r3
 801218e:	f003 0304 	and.w	r3, r3, #4
 8012192:	2b00      	cmp	r3, #0
 8012194:	d006      	beq.n	80121a4 <tcp_output+0x188>
 8012196:	4b2f      	ldr	r3, [pc, #188]	; (8012254 <tcp_output+0x238>)
 8012198:	f240 5236 	movw	r2, #1334	; 0x536
 801219c:	4932      	ldr	r1, [pc, #200]	; (8012268 <tcp_output+0x24c>)
 801219e:	482f      	ldr	r0, [pc, #188]	; (801225c <tcp_output+0x240>)
 80121a0:	f006 fc7c 	bl	8018a9c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80121a8:	2b00      	cmp	r3, #0
 80121aa:	d01f      	beq.n	80121ec <tcp_output+0x1d0>
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	8b5b      	ldrh	r3, [r3, #26]
 80121b0:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80121b4:	2b00      	cmp	r3, #0
 80121b6:	d119      	bne.n	80121ec <tcp_output+0x1d0>
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80121bc:	2b00      	cmp	r3, #0
 80121be:	d00b      	beq.n	80121d8 <tcp_output+0x1bc>
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80121c4:	681b      	ldr	r3, [r3, #0]
 80121c6:	2b00      	cmp	r3, #0
 80121c8:	d110      	bne.n	80121ec <tcp_output+0x1d0>
 80121ca:	687b      	ldr	r3, [r7, #4]
 80121cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80121ce:	891a      	ldrh	r2, [r3, #8]
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80121d4:	429a      	cmp	r2, r3
 80121d6:	d209      	bcs.n	80121ec <tcp_output+0x1d0>
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80121de:	2b00      	cmp	r3, #0
 80121e0:	d004      	beq.n	80121ec <tcp_output+0x1d0>
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80121e8:	2b08      	cmp	r3, #8
 80121ea:	d901      	bls.n	80121f0 <tcp_output+0x1d4>
 80121ec:	2301      	movs	r3, #1
 80121ee:	e000      	b.n	80121f2 <tcp_output+0x1d6>
 80121f0:	2300      	movs	r3, #0
 80121f2:	2b00      	cmp	r3, #0
 80121f4:	d106      	bne.n	8012204 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80121f6:	687b      	ldr	r3, [r7, #4]
 80121f8:	8b5b      	ldrh	r3, [r3, #26]
 80121fa:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80121fe:	2b00      	cmp	r3, #0
 8012200:	f000 80e4 	beq.w	80123cc <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8012204:	687b      	ldr	r3, [r7, #4]
 8012206:	7d1b      	ldrb	r3, [r3, #20]
 8012208:	2b02      	cmp	r3, #2
 801220a:	d00d      	beq.n	8012228 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801220c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801220e:	68db      	ldr	r3, [r3, #12]
 8012210:	899b      	ldrh	r3, [r3, #12]
 8012212:	b29c      	uxth	r4, r3
 8012214:	2010      	movs	r0, #16
 8012216:	f7f9 fe23 	bl	800be60 <lwip_htons>
 801221a:	4603      	mov	r3, r0
 801221c:	461a      	mov	r2, r3
 801221e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012220:	68db      	ldr	r3, [r3, #12]
 8012222:	4322      	orrs	r2, r4
 8012224:	b292      	uxth	r2, r2
 8012226:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8012228:	697a      	ldr	r2, [r7, #20]
 801222a:	6879      	ldr	r1, [r7, #4]
 801222c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801222e:	f000 f909 	bl	8012444 <tcp_output_segment>
 8012232:	4603      	mov	r3, r0
 8012234:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8012236:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801223a:	2b00      	cmp	r3, #0
 801223c:	d016      	beq.n	801226c <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801223e:	687b      	ldr	r3, [r7, #4]
 8012240:	8b5b      	ldrh	r3, [r3, #26]
 8012242:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012246:	b29a      	uxth	r2, r3
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	835a      	strh	r2, [r3, #26]
      return err;
 801224c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012250:	e0d3      	b.n	80123fa <tcp_output+0x3de>
 8012252:	bf00      	nop
 8012254:	0801b338 	.word	0x0801b338
 8012258:	0801b87c 	.word	0x0801b87c
 801225c:	0801b38c 	.word	0x0801b38c
 8012260:	0801b894 	.word	0x0801b894
 8012264:	2000c8d8 	.word	0x2000c8d8
 8012268:	0801b8bc 	.word	0x0801b8bc
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801226c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801226e:	681a      	ldr	r2, [r3, #0]
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	7d1b      	ldrb	r3, [r3, #20]
 8012278:	2b02      	cmp	r3, #2
 801227a:	d006      	beq.n	801228a <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801227c:	687b      	ldr	r3, [r7, #4]
 801227e:	8b5b      	ldrh	r3, [r3, #26]
 8012280:	f023 0303 	bic.w	r3, r3, #3
 8012284:	b29a      	uxth	r2, r3
 8012286:	687b      	ldr	r3, [r7, #4]
 8012288:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801228a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801228c:	68db      	ldr	r3, [r3, #12]
 801228e:	685b      	ldr	r3, [r3, #4]
 8012290:	4618      	mov	r0, r3
 8012292:	f7f9 fdfa 	bl	800be8a <lwip_htonl>
 8012296:	4604      	mov	r4, r0
 8012298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801229a:	891b      	ldrh	r3, [r3, #8]
 801229c:	461d      	mov	r5, r3
 801229e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122a0:	68db      	ldr	r3, [r3, #12]
 80122a2:	899b      	ldrh	r3, [r3, #12]
 80122a4:	b29b      	uxth	r3, r3
 80122a6:	4618      	mov	r0, r3
 80122a8:	f7f9 fdda 	bl	800be60 <lwip_htons>
 80122ac:	4603      	mov	r3, r0
 80122ae:	b2db      	uxtb	r3, r3
 80122b0:	f003 0303 	and.w	r3, r3, #3
 80122b4:	2b00      	cmp	r3, #0
 80122b6:	d001      	beq.n	80122bc <tcp_output+0x2a0>
 80122b8:	2301      	movs	r3, #1
 80122ba:	e000      	b.n	80122be <tcp_output+0x2a2>
 80122bc:	2300      	movs	r3, #0
 80122be:	442b      	add	r3, r5
 80122c0:	4423      	add	r3, r4
 80122c2:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80122c8:	68bb      	ldr	r3, [r7, #8]
 80122ca:	1ad3      	subs	r3, r2, r3
 80122cc:	2b00      	cmp	r3, #0
 80122ce:	da02      	bge.n	80122d6 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	68ba      	ldr	r2, [r7, #8]
 80122d4:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80122d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122d8:	891b      	ldrh	r3, [r3, #8]
 80122da:	461c      	mov	r4, r3
 80122dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122de:	68db      	ldr	r3, [r3, #12]
 80122e0:	899b      	ldrh	r3, [r3, #12]
 80122e2:	b29b      	uxth	r3, r3
 80122e4:	4618      	mov	r0, r3
 80122e6:	f7f9 fdbb 	bl	800be60 <lwip_htons>
 80122ea:	4603      	mov	r3, r0
 80122ec:	b2db      	uxtb	r3, r3
 80122ee:	f003 0303 	and.w	r3, r3, #3
 80122f2:	2b00      	cmp	r3, #0
 80122f4:	d001      	beq.n	80122fa <tcp_output+0x2de>
 80122f6:	2301      	movs	r3, #1
 80122f8:	e000      	b.n	80122fc <tcp_output+0x2e0>
 80122fa:	2300      	movs	r3, #0
 80122fc:	4423      	add	r3, r4
 80122fe:	2b00      	cmp	r3, #0
 8012300:	d049      	beq.n	8012396 <tcp_output+0x37a>
      seg->next = NULL;
 8012302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012304:	2200      	movs	r2, #0
 8012306:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801230c:	2b00      	cmp	r3, #0
 801230e:	d105      	bne.n	801231c <tcp_output+0x300>
        pcb->unacked = seg;
 8012310:	687b      	ldr	r3, [r7, #4]
 8012312:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012314:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8012316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012318:	623b      	str	r3, [r7, #32]
 801231a:	e03f      	b.n	801239c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801231c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801231e:	68db      	ldr	r3, [r3, #12]
 8012320:	685b      	ldr	r3, [r3, #4]
 8012322:	4618      	mov	r0, r3
 8012324:	f7f9 fdb1 	bl	800be8a <lwip_htonl>
 8012328:	4604      	mov	r4, r0
 801232a:	6a3b      	ldr	r3, [r7, #32]
 801232c:	68db      	ldr	r3, [r3, #12]
 801232e:	685b      	ldr	r3, [r3, #4]
 8012330:	4618      	mov	r0, r3
 8012332:	f7f9 fdaa 	bl	800be8a <lwip_htonl>
 8012336:	4603      	mov	r3, r0
 8012338:	1ae3      	subs	r3, r4, r3
 801233a:	2b00      	cmp	r3, #0
 801233c:	da24      	bge.n	8012388 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	3370      	adds	r3, #112	; 0x70
 8012342:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012344:	e002      	b.n	801234c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8012346:	69fb      	ldr	r3, [r7, #28]
 8012348:	681b      	ldr	r3, [r3, #0]
 801234a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801234c:	69fb      	ldr	r3, [r7, #28]
 801234e:	681b      	ldr	r3, [r3, #0]
 8012350:	2b00      	cmp	r3, #0
 8012352:	d011      	beq.n	8012378 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012354:	69fb      	ldr	r3, [r7, #28]
 8012356:	681b      	ldr	r3, [r3, #0]
 8012358:	68db      	ldr	r3, [r3, #12]
 801235a:	685b      	ldr	r3, [r3, #4]
 801235c:	4618      	mov	r0, r3
 801235e:	f7f9 fd94 	bl	800be8a <lwip_htonl>
 8012362:	4604      	mov	r4, r0
 8012364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012366:	68db      	ldr	r3, [r3, #12]
 8012368:	685b      	ldr	r3, [r3, #4]
 801236a:	4618      	mov	r0, r3
 801236c:	f7f9 fd8d 	bl	800be8a <lwip_htonl>
 8012370:	4603      	mov	r3, r0
 8012372:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8012374:	2b00      	cmp	r3, #0
 8012376:	dbe6      	blt.n	8012346 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8012378:	69fb      	ldr	r3, [r7, #28]
 801237a:	681a      	ldr	r2, [r3, #0]
 801237c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801237e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8012380:	69fb      	ldr	r3, [r7, #28]
 8012382:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012384:	601a      	str	r2, [r3, #0]
 8012386:	e009      	b.n	801239c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8012388:	6a3b      	ldr	r3, [r7, #32]
 801238a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801238c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801238e:	6a3b      	ldr	r3, [r7, #32]
 8012390:	681b      	ldr	r3, [r3, #0]
 8012392:	623b      	str	r3, [r7, #32]
 8012394:	e002      	b.n	801239c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8012396:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012398:	f7fc fc3f 	bl	800ec1a <tcp_seg_free>
    }
    seg = pcb->unsent;
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80123a0:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 80123a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123a4:	2b00      	cmp	r3, #0
 80123a6:	d012      	beq.n	80123ce <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80123a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123aa:	68db      	ldr	r3, [r3, #12]
 80123ac:	685b      	ldr	r3, [r3, #4]
 80123ae:	4618      	mov	r0, r3
 80123b0:	f7f9 fd6b 	bl	800be8a <lwip_htonl>
 80123b4:	4602      	mov	r2, r0
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80123ba:	1ad3      	subs	r3, r2, r3
 80123bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80123be:	8912      	ldrh	r2, [r2, #8]
 80123c0:	4413      	add	r3, r2
  while (seg != NULL &&
 80123c2:	69ba      	ldr	r2, [r7, #24]
 80123c4:	429a      	cmp	r2, r3
 80123c6:	f4bf aed9 	bcs.w	801217c <tcp_output+0x160>
 80123ca:	e000      	b.n	80123ce <tcp_output+0x3b2>
      break;
 80123cc:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80123d2:	2b00      	cmp	r3, #0
 80123d4:	d108      	bne.n	80123e8 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80123d6:	687b      	ldr	r3, [r7, #4]
 80123d8:	2200      	movs	r2, #0
 80123da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80123de:	e004      	b.n	80123ea <tcp_output+0x3ce>
    goto output_done;
 80123e0:	bf00      	nop
 80123e2:	e002      	b.n	80123ea <tcp_output+0x3ce>
    goto output_done;
 80123e4:	bf00      	nop
 80123e6:	e000      	b.n	80123ea <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80123e8:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	8b5b      	ldrh	r3, [r3, #26]
 80123ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80123f2:	b29a      	uxth	r2, r3
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80123f8:	2300      	movs	r3, #0
}
 80123fa:	4618      	mov	r0, r3
 80123fc:	3728      	adds	r7, #40	; 0x28
 80123fe:	46bd      	mov	sp, r7
 8012400:	bdb0      	pop	{r4, r5, r7, pc}
 8012402:	bf00      	nop

08012404 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8012404:	b580      	push	{r7, lr}
 8012406:	b082      	sub	sp, #8
 8012408:	af00      	add	r7, sp, #0
 801240a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	2b00      	cmp	r3, #0
 8012410:	d106      	bne.n	8012420 <tcp_output_segment_busy+0x1c>
 8012412:	4b09      	ldr	r3, [pc, #36]	; (8012438 <tcp_output_segment_busy+0x34>)
 8012414:	f240 529a 	movw	r2, #1434	; 0x59a
 8012418:	4908      	ldr	r1, [pc, #32]	; (801243c <tcp_output_segment_busy+0x38>)
 801241a:	4809      	ldr	r0, [pc, #36]	; (8012440 <tcp_output_segment_busy+0x3c>)
 801241c:	f006 fb3e 	bl	8018a9c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	685b      	ldr	r3, [r3, #4]
 8012424:	7b9b      	ldrb	r3, [r3, #14]
 8012426:	2b01      	cmp	r3, #1
 8012428:	d001      	beq.n	801242e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801242a:	2301      	movs	r3, #1
 801242c:	e000      	b.n	8012430 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801242e:	2300      	movs	r3, #0
}
 8012430:	4618      	mov	r0, r3
 8012432:	3708      	adds	r7, #8
 8012434:	46bd      	mov	sp, r7
 8012436:	bd80      	pop	{r7, pc}
 8012438:	0801b338 	.word	0x0801b338
 801243c:	0801b8d4 	.word	0x0801b8d4
 8012440:	0801b38c 	.word	0x0801b38c

08012444 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8012444:	b5b0      	push	{r4, r5, r7, lr}
 8012446:	b08c      	sub	sp, #48	; 0x30
 8012448:	af04      	add	r7, sp, #16
 801244a:	60f8      	str	r0, [r7, #12]
 801244c:	60b9      	str	r1, [r7, #8]
 801244e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8012450:	68fb      	ldr	r3, [r7, #12]
 8012452:	2b00      	cmp	r3, #0
 8012454:	d106      	bne.n	8012464 <tcp_output_segment+0x20>
 8012456:	4b63      	ldr	r3, [pc, #396]	; (80125e4 <tcp_output_segment+0x1a0>)
 8012458:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 801245c:	4962      	ldr	r1, [pc, #392]	; (80125e8 <tcp_output_segment+0x1a4>)
 801245e:	4863      	ldr	r0, [pc, #396]	; (80125ec <tcp_output_segment+0x1a8>)
 8012460:	f006 fb1c 	bl	8018a9c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8012464:	68bb      	ldr	r3, [r7, #8]
 8012466:	2b00      	cmp	r3, #0
 8012468:	d106      	bne.n	8012478 <tcp_output_segment+0x34>
 801246a:	4b5e      	ldr	r3, [pc, #376]	; (80125e4 <tcp_output_segment+0x1a0>)
 801246c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8012470:	495f      	ldr	r1, [pc, #380]	; (80125f0 <tcp_output_segment+0x1ac>)
 8012472:	485e      	ldr	r0, [pc, #376]	; (80125ec <tcp_output_segment+0x1a8>)
 8012474:	f006 fb12 	bl	8018a9c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	2b00      	cmp	r3, #0
 801247c:	d106      	bne.n	801248c <tcp_output_segment+0x48>
 801247e:	4b59      	ldr	r3, [pc, #356]	; (80125e4 <tcp_output_segment+0x1a0>)
 8012480:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8012484:	495b      	ldr	r1, [pc, #364]	; (80125f4 <tcp_output_segment+0x1b0>)
 8012486:	4859      	ldr	r0, [pc, #356]	; (80125ec <tcp_output_segment+0x1a8>)
 8012488:	f006 fb08 	bl	8018a9c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801248c:	68f8      	ldr	r0, [r7, #12]
 801248e:	f7ff ffb9 	bl	8012404 <tcp_output_segment_busy>
 8012492:	4603      	mov	r3, r0
 8012494:	2b00      	cmp	r3, #0
 8012496:	d001      	beq.n	801249c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8012498:	2300      	movs	r3, #0
 801249a:	e09f      	b.n	80125dc <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801249c:	68bb      	ldr	r3, [r7, #8]
 801249e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80124a0:	68fb      	ldr	r3, [r7, #12]
 80124a2:	68dc      	ldr	r4, [r3, #12]
 80124a4:	4610      	mov	r0, r2
 80124a6:	f7f9 fcf0 	bl	800be8a <lwip_htonl>
 80124aa:	4603      	mov	r3, r0
 80124ac:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80124ae:	68bb      	ldr	r3, [r7, #8]
 80124b0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80124b2:	68fb      	ldr	r3, [r7, #12]
 80124b4:	68dc      	ldr	r4, [r3, #12]
 80124b6:	4610      	mov	r0, r2
 80124b8:	f7f9 fcd2 	bl	800be60 <lwip_htons>
 80124bc:	4603      	mov	r3, r0
 80124be:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80124c0:	68bb      	ldr	r3, [r7, #8]
 80124c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80124c4:	68ba      	ldr	r2, [r7, #8]
 80124c6:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80124c8:	441a      	add	r2, r3
 80124ca:	68bb      	ldr	r3, [r7, #8]
 80124cc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80124ce:	68fb      	ldr	r3, [r7, #12]
 80124d0:	68db      	ldr	r3, [r3, #12]
 80124d2:	3314      	adds	r3, #20
 80124d4:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80124d6:	68fb      	ldr	r3, [r7, #12]
 80124d8:	7a9b      	ldrb	r3, [r3, #10]
 80124da:	f003 0301 	and.w	r3, r3, #1
 80124de:	2b00      	cmp	r3, #0
 80124e0:	d015      	beq.n	801250e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80124e2:	68bb      	ldr	r3, [r7, #8]
 80124e4:	3304      	adds	r3, #4
 80124e6:	461a      	mov	r2, r3
 80124e8:	6879      	ldr	r1, [r7, #4]
 80124ea:	f44f 7006 	mov.w	r0, #536	; 0x218
 80124ee:	f7fc fe8b 	bl	800f208 <tcp_eff_send_mss_netif>
 80124f2:	4603      	mov	r3, r0
 80124f4:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80124f6:	8b7b      	ldrh	r3, [r7, #26]
 80124f8:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 80124fc:	4618      	mov	r0, r3
 80124fe:	f7f9 fcc4 	bl	800be8a <lwip_htonl>
 8012502:	4602      	mov	r2, r0
 8012504:	69fb      	ldr	r3, [r7, #28]
 8012506:	601a      	str	r2, [r3, #0]
    opts += 1;
 8012508:	69fb      	ldr	r3, [r7, #28]
 801250a:	3304      	adds	r3, #4
 801250c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801250e:	68bb      	ldr	r3, [r7, #8]
 8012510:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8012514:	2b00      	cmp	r3, #0
 8012516:	da02      	bge.n	801251e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8012518:	68bb      	ldr	r3, [r7, #8]
 801251a:	2200      	movs	r2, #0
 801251c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801251e:	68bb      	ldr	r3, [r7, #8]
 8012520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012522:	2b00      	cmp	r3, #0
 8012524:	d10c      	bne.n	8012540 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8012526:	4b34      	ldr	r3, [pc, #208]	; (80125f8 <tcp_output_segment+0x1b4>)
 8012528:	681a      	ldr	r2, [r3, #0]
 801252a:	68bb      	ldr	r3, [r7, #8]
 801252c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801252e:	68fb      	ldr	r3, [r7, #12]
 8012530:	68db      	ldr	r3, [r3, #12]
 8012532:	685b      	ldr	r3, [r3, #4]
 8012534:	4618      	mov	r0, r3
 8012536:	f7f9 fca8 	bl	800be8a <lwip_htonl>
 801253a:	4602      	mov	r2, r0
 801253c:	68bb      	ldr	r3, [r7, #8]
 801253e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8012540:	68fb      	ldr	r3, [r7, #12]
 8012542:	68da      	ldr	r2, [r3, #12]
 8012544:	68fb      	ldr	r3, [r7, #12]
 8012546:	685b      	ldr	r3, [r3, #4]
 8012548:	685b      	ldr	r3, [r3, #4]
 801254a:	1ad3      	subs	r3, r2, r3
 801254c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801254e:	68fb      	ldr	r3, [r7, #12]
 8012550:	685b      	ldr	r3, [r3, #4]
 8012552:	8959      	ldrh	r1, [r3, #10]
 8012554:	68fb      	ldr	r3, [r7, #12]
 8012556:	685b      	ldr	r3, [r3, #4]
 8012558:	8b3a      	ldrh	r2, [r7, #24]
 801255a:	1a8a      	subs	r2, r1, r2
 801255c:	b292      	uxth	r2, r2
 801255e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8012560:	68fb      	ldr	r3, [r7, #12]
 8012562:	685b      	ldr	r3, [r3, #4]
 8012564:	8919      	ldrh	r1, [r3, #8]
 8012566:	68fb      	ldr	r3, [r7, #12]
 8012568:	685b      	ldr	r3, [r3, #4]
 801256a:	8b3a      	ldrh	r2, [r7, #24]
 801256c:	1a8a      	subs	r2, r1, r2
 801256e:	b292      	uxth	r2, r2
 8012570:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8012572:	68fb      	ldr	r3, [r7, #12]
 8012574:	685b      	ldr	r3, [r3, #4]
 8012576:	68fa      	ldr	r2, [r7, #12]
 8012578:	68d2      	ldr	r2, [r2, #12]
 801257a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801257c:	68fb      	ldr	r3, [r7, #12]
 801257e:	68db      	ldr	r3, [r3, #12]
 8012580:	2200      	movs	r2, #0
 8012582:	741a      	strb	r2, [r3, #16]
 8012584:	2200      	movs	r2, #0
 8012586:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8012588:	68fb      	ldr	r3, [r7, #12]
 801258a:	68db      	ldr	r3, [r3, #12]
 801258c:	f103 0214 	add.w	r2, r3, #20
 8012590:	68fb      	ldr	r3, [r7, #12]
 8012592:	7a9b      	ldrb	r3, [r3, #10]
 8012594:	009b      	lsls	r3, r3, #2
 8012596:	f003 0304 	and.w	r3, r3, #4
 801259a:	4413      	add	r3, r2
 801259c:	69fa      	ldr	r2, [r7, #28]
 801259e:	429a      	cmp	r2, r3
 80125a0:	d006      	beq.n	80125b0 <tcp_output_segment+0x16c>
 80125a2:	4b10      	ldr	r3, [pc, #64]	; (80125e4 <tcp_output_segment+0x1a0>)
 80125a4:	f240 621c 	movw	r2, #1564	; 0x61c
 80125a8:	4914      	ldr	r1, [pc, #80]	; (80125fc <tcp_output_segment+0x1b8>)
 80125aa:	4810      	ldr	r0, [pc, #64]	; (80125ec <tcp_output_segment+0x1a8>)
 80125ac:	f006 fa76 	bl	8018a9c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80125b0:	68fb      	ldr	r3, [r7, #12]
 80125b2:	6858      	ldr	r0, [r3, #4]
 80125b4:	68b9      	ldr	r1, [r7, #8]
 80125b6:	68bb      	ldr	r3, [r7, #8]
 80125b8:	1d1c      	adds	r4, r3, #4
 80125ba:	68bb      	ldr	r3, [r7, #8]
 80125bc:	7add      	ldrb	r5, [r3, #11]
 80125be:	68bb      	ldr	r3, [r7, #8]
 80125c0:	7a9b      	ldrb	r3, [r3, #10]
 80125c2:	687a      	ldr	r2, [r7, #4]
 80125c4:	9202      	str	r2, [sp, #8]
 80125c6:	2206      	movs	r2, #6
 80125c8:	9201      	str	r2, [sp, #4]
 80125ca:	9300      	str	r3, [sp, #0]
 80125cc:	462b      	mov	r3, r5
 80125ce:	4622      	mov	r2, r4
 80125d0:	f004 fc06 	bl	8016de0 <ip4_output_if>
 80125d4:	4603      	mov	r3, r0
 80125d6:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 80125d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80125dc:	4618      	mov	r0, r3
 80125de:	3720      	adds	r7, #32
 80125e0:	46bd      	mov	sp, r7
 80125e2:	bdb0      	pop	{r4, r5, r7, pc}
 80125e4:	0801b338 	.word	0x0801b338
 80125e8:	0801b8fc 	.word	0x0801b8fc
 80125ec:	0801b38c 	.word	0x0801b38c
 80125f0:	0801b91c 	.word	0x0801b91c
 80125f4:	0801b93c 	.word	0x0801b93c
 80125f8:	2000c88c 	.word	0x2000c88c
 80125fc:	0801b960 	.word	0x0801b960

08012600 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8012600:	b5b0      	push	{r4, r5, r7, lr}
 8012602:	b084      	sub	sp, #16
 8012604:	af00      	add	r7, sp, #0
 8012606:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	2b00      	cmp	r3, #0
 801260c:	d106      	bne.n	801261c <tcp_rexmit_rto_prepare+0x1c>
 801260e:	4b31      	ldr	r3, [pc, #196]	; (80126d4 <tcp_rexmit_rto_prepare+0xd4>)
 8012610:	f240 6263 	movw	r2, #1635	; 0x663
 8012614:	4930      	ldr	r1, [pc, #192]	; (80126d8 <tcp_rexmit_rto_prepare+0xd8>)
 8012616:	4831      	ldr	r0, [pc, #196]	; (80126dc <tcp_rexmit_rto_prepare+0xdc>)
 8012618:	f006 fa40 	bl	8018a9c <iprintf>

  if (pcb->unacked == NULL) {
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012620:	2b00      	cmp	r3, #0
 8012622:	d102      	bne.n	801262a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8012624:	f06f 0305 	mvn.w	r3, #5
 8012628:	e050      	b.n	80126cc <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801262e:	60fb      	str	r3, [r7, #12]
 8012630:	e00b      	b.n	801264a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8012632:	68f8      	ldr	r0, [r7, #12]
 8012634:	f7ff fee6 	bl	8012404 <tcp_output_segment_busy>
 8012638:	4603      	mov	r3, r0
 801263a:	2b00      	cmp	r3, #0
 801263c:	d002      	beq.n	8012644 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801263e:	f06f 0305 	mvn.w	r3, #5
 8012642:	e043      	b.n	80126cc <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8012644:	68fb      	ldr	r3, [r7, #12]
 8012646:	681b      	ldr	r3, [r3, #0]
 8012648:	60fb      	str	r3, [r7, #12]
 801264a:	68fb      	ldr	r3, [r7, #12]
 801264c:	681b      	ldr	r3, [r3, #0]
 801264e:	2b00      	cmp	r3, #0
 8012650:	d1ef      	bne.n	8012632 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8012652:	68f8      	ldr	r0, [r7, #12]
 8012654:	f7ff fed6 	bl	8012404 <tcp_output_segment_busy>
 8012658:	4603      	mov	r3, r0
 801265a:	2b00      	cmp	r3, #0
 801265c:	d002      	beq.n	8012664 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801265e:	f06f 0305 	mvn.w	r3, #5
 8012662:	e033      	b.n	80126cc <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8012668:	68fb      	ldr	r3, [r7, #12]
 801266a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	2200      	movs	r2, #0
 8012678:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	8b5b      	ldrh	r3, [r3, #26]
 801267e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8012682:	b29a      	uxth	r2, r3
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8012688:	68fb      	ldr	r3, [r7, #12]
 801268a:	68db      	ldr	r3, [r3, #12]
 801268c:	685b      	ldr	r3, [r3, #4]
 801268e:	4618      	mov	r0, r3
 8012690:	f7f9 fbfb 	bl	800be8a <lwip_htonl>
 8012694:	4604      	mov	r4, r0
 8012696:	68fb      	ldr	r3, [r7, #12]
 8012698:	891b      	ldrh	r3, [r3, #8]
 801269a:	461d      	mov	r5, r3
 801269c:	68fb      	ldr	r3, [r7, #12]
 801269e:	68db      	ldr	r3, [r3, #12]
 80126a0:	899b      	ldrh	r3, [r3, #12]
 80126a2:	b29b      	uxth	r3, r3
 80126a4:	4618      	mov	r0, r3
 80126a6:	f7f9 fbdb 	bl	800be60 <lwip_htons>
 80126aa:	4603      	mov	r3, r0
 80126ac:	b2db      	uxtb	r3, r3
 80126ae:	f003 0303 	and.w	r3, r3, #3
 80126b2:	2b00      	cmp	r3, #0
 80126b4:	d001      	beq.n	80126ba <tcp_rexmit_rto_prepare+0xba>
 80126b6:	2301      	movs	r3, #1
 80126b8:	e000      	b.n	80126bc <tcp_rexmit_rto_prepare+0xbc>
 80126ba:	2300      	movs	r3, #0
 80126bc:	442b      	add	r3, r5
 80126be:	18e2      	adds	r2, r4, r3
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	2200      	movs	r2, #0
 80126c8:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 80126ca:	2300      	movs	r3, #0
}
 80126cc:	4618      	mov	r0, r3
 80126ce:	3710      	adds	r7, #16
 80126d0:	46bd      	mov	sp, r7
 80126d2:	bdb0      	pop	{r4, r5, r7, pc}
 80126d4:	0801b338 	.word	0x0801b338
 80126d8:	0801b974 	.word	0x0801b974
 80126dc:	0801b38c 	.word	0x0801b38c

080126e0 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80126e0:	b580      	push	{r7, lr}
 80126e2:	b082      	sub	sp, #8
 80126e4:	af00      	add	r7, sp, #0
 80126e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	2b00      	cmp	r3, #0
 80126ec:	d106      	bne.n	80126fc <tcp_rexmit_rto_commit+0x1c>
 80126ee:	4b0d      	ldr	r3, [pc, #52]	; (8012724 <tcp_rexmit_rto_commit+0x44>)
 80126f0:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80126f4:	490c      	ldr	r1, [pc, #48]	; (8012728 <tcp_rexmit_rto_commit+0x48>)
 80126f6:	480d      	ldr	r0, [pc, #52]	; (801272c <tcp_rexmit_rto_commit+0x4c>)
 80126f8:	f006 f9d0 	bl	8018a9c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012702:	2bff      	cmp	r3, #255	; 0xff
 8012704:	d007      	beq.n	8012716 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801270c:	3301      	adds	r3, #1
 801270e:	b2da      	uxtb	r2, r3
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8012716:	6878      	ldr	r0, [r7, #4]
 8012718:	f7ff fc80 	bl	801201c <tcp_output>
}
 801271c:	bf00      	nop
 801271e:	3708      	adds	r7, #8
 8012720:	46bd      	mov	sp, r7
 8012722:	bd80      	pop	{r7, pc}
 8012724:	0801b338 	.word	0x0801b338
 8012728:	0801b998 	.word	0x0801b998
 801272c:	0801b38c 	.word	0x0801b38c

08012730 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8012730:	b580      	push	{r7, lr}
 8012732:	b082      	sub	sp, #8
 8012734:	af00      	add	r7, sp, #0
 8012736:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	2b00      	cmp	r3, #0
 801273c:	d106      	bne.n	801274c <tcp_rexmit_rto+0x1c>
 801273e:	4b0a      	ldr	r3, [pc, #40]	; (8012768 <tcp_rexmit_rto+0x38>)
 8012740:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8012744:	4909      	ldr	r1, [pc, #36]	; (801276c <tcp_rexmit_rto+0x3c>)
 8012746:	480a      	ldr	r0, [pc, #40]	; (8012770 <tcp_rexmit_rto+0x40>)
 8012748:	f006 f9a8 	bl	8018a9c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801274c:	6878      	ldr	r0, [r7, #4]
 801274e:	f7ff ff57 	bl	8012600 <tcp_rexmit_rto_prepare>
 8012752:	4603      	mov	r3, r0
 8012754:	2b00      	cmp	r3, #0
 8012756:	d102      	bne.n	801275e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8012758:	6878      	ldr	r0, [r7, #4]
 801275a:	f7ff ffc1 	bl	80126e0 <tcp_rexmit_rto_commit>
  }
}
 801275e:	bf00      	nop
 8012760:	3708      	adds	r7, #8
 8012762:	46bd      	mov	sp, r7
 8012764:	bd80      	pop	{r7, pc}
 8012766:	bf00      	nop
 8012768:	0801b338 	.word	0x0801b338
 801276c:	0801b9bc 	.word	0x0801b9bc
 8012770:	0801b38c 	.word	0x0801b38c

08012774 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8012774:	b590      	push	{r4, r7, lr}
 8012776:	b085      	sub	sp, #20
 8012778:	af00      	add	r7, sp, #0
 801277a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801277c:	687b      	ldr	r3, [r7, #4]
 801277e:	2b00      	cmp	r3, #0
 8012780:	d106      	bne.n	8012790 <tcp_rexmit+0x1c>
 8012782:	4b2f      	ldr	r3, [pc, #188]	; (8012840 <tcp_rexmit+0xcc>)
 8012784:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8012788:	492e      	ldr	r1, [pc, #184]	; (8012844 <tcp_rexmit+0xd0>)
 801278a:	482f      	ldr	r0, [pc, #188]	; (8012848 <tcp_rexmit+0xd4>)
 801278c:	f006 f986 	bl	8018a9c <iprintf>

  if (pcb->unacked == NULL) {
 8012790:	687b      	ldr	r3, [r7, #4]
 8012792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012794:	2b00      	cmp	r3, #0
 8012796:	d102      	bne.n	801279e <tcp_rexmit+0x2a>
    return ERR_VAL;
 8012798:	f06f 0305 	mvn.w	r3, #5
 801279c:	e04c      	b.n	8012838 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80127a2:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80127a4:	68b8      	ldr	r0, [r7, #8]
 80127a6:	f7ff fe2d 	bl	8012404 <tcp_output_segment_busy>
 80127aa:	4603      	mov	r3, r0
 80127ac:	2b00      	cmp	r3, #0
 80127ae:	d002      	beq.n	80127b6 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80127b0:	f06f 0305 	mvn.w	r3, #5
 80127b4:	e040      	b.n	8012838 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80127b6:	68bb      	ldr	r3, [r7, #8]
 80127b8:	681a      	ldr	r2, [r3, #0]
 80127ba:	687b      	ldr	r3, [r7, #4]
 80127bc:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	336c      	adds	r3, #108	; 0x6c
 80127c2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80127c4:	e002      	b.n	80127cc <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80127c6:	68fb      	ldr	r3, [r7, #12]
 80127c8:	681b      	ldr	r3, [r3, #0]
 80127ca:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80127cc:	68fb      	ldr	r3, [r7, #12]
 80127ce:	681b      	ldr	r3, [r3, #0]
 80127d0:	2b00      	cmp	r3, #0
 80127d2:	d011      	beq.n	80127f8 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80127d4:	68fb      	ldr	r3, [r7, #12]
 80127d6:	681b      	ldr	r3, [r3, #0]
 80127d8:	68db      	ldr	r3, [r3, #12]
 80127da:	685b      	ldr	r3, [r3, #4]
 80127dc:	4618      	mov	r0, r3
 80127de:	f7f9 fb54 	bl	800be8a <lwip_htonl>
 80127e2:	4604      	mov	r4, r0
 80127e4:	68bb      	ldr	r3, [r7, #8]
 80127e6:	68db      	ldr	r3, [r3, #12]
 80127e8:	685b      	ldr	r3, [r3, #4]
 80127ea:	4618      	mov	r0, r3
 80127ec:	f7f9 fb4d 	bl	800be8a <lwip_htonl>
 80127f0:	4603      	mov	r3, r0
 80127f2:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80127f4:	2b00      	cmp	r3, #0
 80127f6:	dbe6      	blt.n	80127c6 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80127f8:	68fb      	ldr	r3, [r7, #12]
 80127fa:	681a      	ldr	r2, [r3, #0]
 80127fc:	68bb      	ldr	r3, [r7, #8]
 80127fe:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8012800:	68fb      	ldr	r3, [r7, #12]
 8012802:	68ba      	ldr	r2, [r7, #8]
 8012804:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8012806:	68bb      	ldr	r3, [r7, #8]
 8012808:	681b      	ldr	r3, [r3, #0]
 801280a:	2b00      	cmp	r3, #0
 801280c:	d103      	bne.n	8012816 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801280e:	687b      	ldr	r3, [r7, #4]
 8012810:	2200      	movs	r2, #0
 8012812:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8012816:	687b      	ldr	r3, [r7, #4]
 8012818:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801281c:	2bff      	cmp	r3, #255	; 0xff
 801281e:	d007      	beq.n	8012830 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8012820:	687b      	ldr	r3, [r7, #4]
 8012822:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012826:	3301      	adds	r3, #1
 8012828:	b2da      	uxtb	r2, r3
 801282a:	687b      	ldr	r3, [r7, #4]
 801282c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8012830:	687b      	ldr	r3, [r7, #4]
 8012832:	2200      	movs	r2, #0
 8012834:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8012836:	2300      	movs	r3, #0
}
 8012838:	4618      	mov	r0, r3
 801283a:	3714      	adds	r7, #20
 801283c:	46bd      	mov	sp, r7
 801283e:	bd90      	pop	{r4, r7, pc}
 8012840:	0801b338 	.word	0x0801b338
 8012844:	0801b9d8 	.word	0x0801b9d8
 8012848:	0801b38c 	.word	0x0801b38c

0801284c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801284c:	b580      	push	{r7, lr}
 801284e:	b082      	sub	sp, #8
 8012850:	af00      	add	r7, sp, #0
 8012852:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	2b00      	cmp	r3, #0
 8012858:	d106      	bne.n	8012868 <tcp_rexmit_fast+0x1c>
 801285a:	4b2a      	ldr	r3, [pc, #168]	; (8012904 <tcp_rexmit_fast+0xb8>)
 801285c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8012860:	4929      	ldr	r1, [pc, #164]	; (8012908 <tcp_rexmit_fast+0xbc>)
 8012862:	482a      	ldr	r0, [pc, #168]	; (801290c <tcp_rexmit_fast+0xc0>)
 8012864:	f006 f91a 	bl	8018a9c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801286c:	2b00      	cmp	r3, #0
 801286e:	d044      	beq.n	80128fa <tcp_rexmit_fast+0xae>
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	8b5b      	ldrh	r3, [r3, #26]
 8012874:	f003 0304 	and.w	r3, r3, #4
 8012878:	2b00      	cmp	r3, #0
 801287a:	d13e      	bne.n	80128fa <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801287c:	6878      	ldr	r0, [r7, #4]
 801287e:	f7ff ff79 	bl	8012774 <tcp_rexmit>
 8012882:	4603      	mov	r3, r0
 8012884:	2b00      	cmp	r3, #0
 8012886:	d138      	bne.n	80128fa <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801288e:	687b      	ldr	r3, [r7, #4]
 8012890:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012894:	4293      	cmp	r3, r2
 8012896:	bf28      	it	cs
 8012898:	4613      	movcs	r3, r2
 801289a:	b29b      	uxth	r3, r3
 801289c:	0fda      	lsrs	r2, r3, #31
 801289e:	4413      	add	r3, r2
 80128a0:	105b      	asrs	r3, r3, #1
 80128a2:	b29a      	uxth	r2, r3
 80128a4:	687b      	ldr	r3, [r7, #4]
 80128a6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80128b0:	461a      	mov	r2, r3
 80128b2:	687b      	ldr	r3, [r7, #4]
 80128b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80128b6:	005b      	lsls	r3, r3, #1
 80128b8:	429a      	cmp	r2, r3
 80128ba:	d206      	bcs.n	80128ca <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80128bc:	687b      	ldr	r3, [r7, #4]
 80128be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80128c0:	005b      	lsls	r3, r3, #1
 80128c2:	b29a      	uxth	r2, r3
 80128c4:	687b      	ldr	r3, [r7, #4]
 80128c6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80128ca:	687b      	ldr	r3, [r7, #4]
 80128cc:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80128d4:	4619      	mov	r1, r3
 80128d6:	0049      	lsls	r1, r1, #1
 80128d8:	440b      	add	r3, r1
 80128da:	b29b      	uxth	r3, r3
 80128dc:	4413      	add	r3, r2
 80128de:	b29a      	uxth	r2, r3
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 80128e6:	687b      	ldr	r3, [r7, #4]
 80128e8:	8b5b      	ldrh	r3, [r3, #26]
 80128ea:	f043 0304 	orr.w	r3, r3, #4
 80128ee:	b29a      	uxth	r2, r3
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	2200      	movs	r2, #0
 80128f8:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 80128fa:	bf00      	nop
 80128fc:	3708      	adds	r7, #8
 80128fe:	46bd      	mov	sp, r7
 8012900:	bd80      	pop	{r7, pc}
 8012902:	bf00      	nop
 8012904:	0801b338 	.word	0x0801b338
 8012908:	0801b9f0 	.word	0x0801b9f0
 801290c:	0801b38c 	.word	0x0801b38c

08012910 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8012910:	b580      	push	{r7, lr}
 8012912:	b086      	sub	sp, #24
 8012914:	af00      	add	r7, sp, #0
 8012916:	60f8      	str	r0, [r7, #12]
 8012918:	607b      	str	r3, [r7, #4]
 801291a:	460b      	mov	r3, r1
 801291c:	817b      	strh	r3, [r7, #10]
 801291e:	4613      	mov	r3, r2
 8012920:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8012922:	897a      	ldrh	r2, [r7, #10]
 8012924:	893b      	ldrh	r3, [r7, #8]
 8012926:	4413      	add	r3, r2
 8012928:	b29b      	uxth	r3, r3
 801292a:	3314      	adds	r3, #20
 801292c:	b29b      	uxth	r3, r3
 801292e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012932:	4619      	mov	r1, r3
 8012934:	2022      	movs	r0, #34	; 0x22
 8012936:	f7fa fbfd 	bl	800d134 <pbuf_alloc>
 801293a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801293c:	697b      	ldr	r3, [r7, #20]
 801293e:	2b00      	cmp	r3, #0
 8012940:	d04d      	beq.n	80129de <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8012942:	897b      	ldrh	r3, [r7, #10]
 8012944:	3313      	adds	r3, #19
 8012946:	697a      	ldr	r2, [r7, #20]
 8012948:	8952      	ldrh	r2, [r2, #10]
 801294a:	4293      	cmp	r3, r2
 801294c:	db06      	blt.n	801295c <tcp_output_alloc_header_common+0x4c>
 801294e:	4b26      	ldr	r3, [pc, #152]	; (80129e8 <tcp_output_alloc_header_common+0xd8>)
 8012950:	f240 7223 	movw	r2, #1827	; 0x723
 8012954:	4925      	ldr	r1, [pc, #148]	; (80129ec <tcp_output_alloc_header_common+0xdc>)
 8012956:	4826      	ldr	r0, [pc, #152]	; (80129f0 <tcp_output_alloc_header_common+0xe0>)
 8012958:	f006 f8a0 	bl	8018a9c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801295c:	697b      	ldr	r3, [r7, #20]
 801295e:	685b      	ldr	r3, [r3, #4]
 8012960:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8012962:	8c3b      	ldrh	r3, [r7, #32]
 8012964:	4618      	mov	r0, r3
 8012966:	f7f9 fa7b 	bl	800be60 <lwip_htons>
 801296a:	4603      	mov	r3, r0
 801296c:	461a      	mov	r2, r3
 801296e:	693b      	ldr	r3, [r7, #16]
 8012970:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8012972:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012974:	4618      	mov	r0, r3
 8012976:	f7f9 fa73 	bl	800be60 <lwip_htons>
 801297a:	4603      	mov	r3, r0
 801297c:	461a      	mov	r2, r3
 801297e:	693b      	ldr	r3, [r7, #16]
 8012980:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8012982:	693b      	ldr	r3, [r7, #16]
 8012984:	687a      	ldr	r2, [r7, #4]
 8012986:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8012988:	68f8      	ldr	r0, [r7, #12]
 801298a:	f7f9 fa7e 	bl	800be8a <lwip_htonl>
 801298e:	4602      	mov	r2, r0
 8012990:	693b      	ldr	r3, [r7, #16]
 8012992:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8012994:	897b      	ldrh	r3, [r7, #10]
 8012996:	089b      	lsrs	r3, r3, #2
 8012998:	b29b      	uxth	r3, r3
 801299a:	3305      	adds	r3, #5
 801299c:	b29b      	uxth	r3, r3
 801299e:	031b      	lsls	r3, r3, #12
 80129a0:	b29a      	uxth	r2, r3
 80129a2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80129a6:	b29b      	uxth	r3, r3
 80129a8:	4313      	orrs	r3, r2
 80129aa:	b29b      	uxth	r3, r3
 80129ac:	4618      	mov	r0, r3
 80129ae:	f7f9 fa57 	bl	800be60 <lwip_htons>
 80129b2:	4603      	mov	r3, r0
 80129b4:	461a      	mov	r2, r3
 80129b6:	693b      	ldr	r3, [r7, #16]
 80129b8:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80129ba:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80129bc:	4618      	mov	r0, r3
 80129be:	f7f9 fa4f 	bl	800be60 <lwip_htons>
 80129c2:	4603      	mov	r3, r0
 80129c4:	461a      	mov	r2, r3
 80129c6:	693b      	ldr	r3, [r7, #16]
 80129c8:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80129ca:	693b      	ldr	r3, [r7, #16]
 80129cc:	2200      	movs	r2, #0
 80129ce:	741a      	strb	r2, [r3, #16]
 80129d0:	2200      	movs	r2, #0
 80129d2:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80129d4:	693b      	ldr	r3, [r7, #16]
 80129d6:	2200      	movs	r2, #0
 80129d8:	749a      	strb	r2, [r3, #18]
 80129da:	2200      	movs	r2, #0
 80129dc:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80129de:	697b      	ldr	r3, [r7, #20]
}
 80129e0:	4618      	mov	r0, r3
 80129e2:	3718      	adds	r7, #24
 80129e4:	46bd      	mov	sp, r7
 80129e6:	bd80      	pop	{r7, pc}
 80129e8:	0801b338 	.word	0x0801b338
 80129ec:	0801ba10 	.word	0x0801ba10
 80129f0:	0801b38c 	.word	0x0801b38c

080129f4 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80129f4:	b5b0      	push	{r4, r5, r7, lr}
 80129f6:	b08a      	sub	sp, #40	; 0x28
 80129f8:	af04      	add	r7, sp, #16
 80129fa:	60f8      	str	r0, [r7, #12]
 80129fc:	607b      	str	r3, [r7, #4]
 80129fe:	460b      	mov	r3, r1
 8012a00:	817b      	strh	r3, [r7, #10]
 8012a02:	4613      	mov	r3, r2
 8012a04:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8012a06:	68fb      	ldr	r3, [r7, #12]
 8012a08:	2b00      	cmp	r3, #0
 8012a0a:	d106      	bne.n	8012a1a <tcp_output_alloc_header+0x26>
 8012a0c:	4b15      	ldr	r3, [pc, #84]	; (8012a64 <tcp_output_alloc_header+0x70>)
 8012a0e:	f240 7242 	movw	r2, #1858	; 0x742
 8012a12:	4915      	ldr	r1, [pc, #84]	; (8012a68 <tcp_output_alloc_header+0x74>)
 8012a14:	4815      	ldr	r0, [pc, #84]	; (8012a6c <tcp_output_alloc_header+0x78>)
 8012a16:	f006 f841 	bl	8018a9c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8012a1a:	68fb      	ldr	r3, [r7, #12]
 8012a1c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8012a1e:	68fb      	ldr	r3, [r7, #12]
 8012a20:	8adb      	ldrh	r3, [r3, #22]
 8012a22:	68fa      	ldr	r2, [r7, #12]
 8012a24:	8b12      	ldrh	r2, [r2, #24]
 8012a26:	68f9      	ldr	r1, [r7, #12]
 8012a28:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8012a2a:	893d      	ldrh	r5, [r7, #8]
 8012a2c:	897c      	ldrh	r4, [r7, #10]
 8012a2e:	9103      	str	r1, [sp, #12]
 8012a30:	2110      	movs	r1, #16
 8012a32:	9102      	str	r1, [sp, #8]
 8012a34:	9201      	str	r2, [sp, #4]
 8012a36:	9300      	str	r3, [sp, #0]
 8012a38:	687b      	ldr	r3, [r7, #4]
 8012a3a:	462a      	mov	r2, r5
 8012a3c:	4621      	mov	r1, r4
 8012a3e:	f7ff ff67 	bl	8012910 <tcp_output_alloc_header_common>
 8012a42:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8012a44:	697b      	ldr	r3, [r7, #20]
 8012a46:	2b00      	cmp	r3, #0
 8012a48:	d006      	beq.n	8012a58 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012a4a:	68fb      	ldr	r3, [r7, #12]
 8012a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a4e:	68fa      	ldr	r2, [r7, #12]
 8012a50:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8012a52:	441a      	add	r2, r3
 8012a54:	68fb      	ldr	r3, [r7, #12]
 8012a56:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8012a58:	697b      	ldr	r3, [r7, #20]
}
 8012a5a:	4618      	mov	r0, r3
 8012a5c:	3718      	adds	r7, #24
 8012a5e:	46bd      	mov	sp, r7
 8012a60:	bdb0      	pop	{r4, r5, r7, pc}
 8012a62:	bf00      	nop
 8012a64:	0801b338 	.word	0x0801b338
 8012a68:	0801ba40 	.word	0x0801ba40
 8012a6c:	0801b38c 	.word	0x0801b38c

08012a70 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8012a70:	b580      	push	{r7, lr}
 8012a72:	b088      	sub	sp, #32
 8012a74:	af00      	add	r7, sp, #0
 8012a76:	60f8      	str	r0, [r7, #12]
 8012a78:	60b9      	str	r1, [r7, #8]
 8012a7a:	4611      	mov	r1, r2
 8012a7c:	461a      	mov	r2, r3
 8012a7e:	460b      	mov	r3, r1
 8012a80:	71fb      	strb	r3, [r7, #7]
 8012a82:	4613      	mov	r3, r2
 8012a84:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8012a86:	2300      	movs	r3, #0
 8012a88:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8012a8a:	68bb      	ldr	r3, [r7, #8]
 8012a8c:	2b00      	cmp	r3, #0
 8012a8e:	d106      	bne.n	8012a9e <tcp_output_fill_options+0x2e>
 8012a90:	4b13      	ldr	r3, [pc, #76]	; (8012ae0 <tcp_output_fill_options+0x70>)
 8012a92:	f240 7256 	movw	r2, #1878	; 0x756
 8012a96:	4913      	ldr	r1, [pc, #76]	; (8012ae4 <tcp_output_fill_options+0x74>)
 8012a98:	4813      	ldr	r0, [pc, #76]	; (8012ae8 <tcp_output_fill_options+0x78>)
 8012a9a:	f005 ffff 	bl	8018a9c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8012a9e:	68bb      	ldr	r3, [r7, #8]
 8012aa0:	685b      	ldr	r3, [r3, #4]
 8012aa2:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8012aa4:	69bb      	ldr	r3, [r7, #24]
 8012aa6:	3314      	adds	r3, #20
 8012aa8:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8012aaa:	69bb      	ldr	r3, [r7, #24]
 8012aac:	f103 0214 	add.w	r2, r3, #20
 8012ab0:	8bfb      	ldrh	r3, [r7, #30]
 8012ab2:	009b      	lsls	r3, r3, #2
 8012ab4:	4619      	mov	r1, r3
 8012ab6:	79fb      	ldrb	r3, [r7, #7]
 8012ab8:	009b      	lsls	r3, r3, #2
 8012aba:	f003 0304 	and.w	r3, r3, #4
 8012abe:	440b      	add	r3, r1
 8012ac0:	4413      	add	r3, r2
 8012ac2:	697a      	ldr	r2, [r7, #20]
 8012ac4:	429a      	cmp	r2, r3
 8012ac6:	d006      	beq.n	8012ad6 <tcp_output_fill_options+0x66>
 8012ac8:	4b05      	ldr	r3, [pc, #20]	; (8012ae0 <tcp_output_fill_options+0x70>)
 8012aca:	f240 7275 	movw	r2, #1909	; 0x775
 8012ace:	4907      	ldr	r1, [pc, #28]	; (8012aec <tcp_output_fill_options+0x7c>)
 8012ad0:	4805      	ldr	r0, [pc, #20]	; (8012ae8 <tcp_output_fill_options+0x78>)
 8012ad2:	f005 ffe3 	bl	8018a9c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8012ad6:	bf00      	nop
 8012ad8:	3720      	adds	r7, #32
 8012ada:	46bd      	mov	sp, r7
 8012adc:	bd80      	pop	{r7, pc}
 8012ade:	bf00      	nop
 8012ae0:	0801b338 	.word	0x0801b338
 8012ae4:	0801ba68 	.word	0x0801ba68
 8012ae8:	0801b38c 	.word	0x0801b38c
 8012aec:	0801b960 	.word	0x0801b960

08012af0 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8012af0:	b580      	push	{r7, lr}
 8012af2:	b08a      	sub	sp, #40	; 0x28
 8012af4:	af04      	add	r7, sp, #16
 8012af6:	60f8      	str	r0, [r7, #12]
 8012af8:	60b9      	str	r1, [r7, #8]
 8012afa:	607a      	str	r2, [r7, #4]
 8012afc:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8012afe:	68bb      	ldr	r3, [r7, #8]
 8012b00:	2b00      	cmp	r3, #0
 8012b02:	d106      	bne.n	8012b12 <tcp_output_control_segment+0x22>
 8012b04:	4b1c      	ldr	r3, [pc, #112]	; (8012b78 <tcp_output_control_segment+0x88>)
 8012b06:	f240 7287 	movw	r2, #1927	; 0x787
 8012b0a:	491c      	ldr	r1, [pc, #112]	; (8012b7c <tcp_output_control_segment+0x8c>)
 8012b0c:	481c      	ldr	r0, [pc, #112]	; (8012b80 <tcp_output_control_segment+0x90>)
 8012b0e:	f005 ffc5 	bl	8018a9c <iprintf>

  netif = tcp_route(pcb, src, dst);
 8012b12:	683a      	ldr	r2, [r7, #0]
 8012b14:	6879      	ldr	r1, [r7, #4]
 8012b16:	68f8      	ldr	r0, [r7, #12]
 8012b18:	f7fe ff40 	bl	801199c <tcp_route>
 8012b1c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8012b1e:	693b      	ldr	r3, [r7, #16]
 8012b20:	2b00      	cmp	r3, #0
 8012b22:	d102      	bne.n	8012b2a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8012b24:	23fc      	movs	r3, #252	; 0xfc
 8012b26:	75fb      	strb	r3, [r7, #23]
 8012b28:	e01c      	b.n	8012b64 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8012b2a:	68fb      	ldr	r3, [r7, #12]
 8012b2c:	2b00      	cmp	r3, #0
 8012b2e:	d006      	beq.n	8012b3e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8012b30:	68fb      	ldr	r3, [r7, #12]
 8012b32:	7adb      	ldrb	r3, [r3, #11]
 8012b34:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8012b36:	68fb      	ldr	r3, [r7, #12]
 8012b38:	7a9b      	ldrb	r3, [r3, #10]
 8012b3a:	757b      	strb	r3, [r7, #21]
 8012b3c:	e003      	b.n	8012b46 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8012b3e:	23ff      	movs	r3, #255	; 0xff
 8012b40:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8012b42:	2300      	movs	r3, #0
 8012b44:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8012b46:	7dba      	ldrb	r2, [r7, #22]
 8012b48:	693b      	ldr	r3, [r7, #16]
 8012b4a:	9302      	str	r3, [sp, #8]
 8012b4c:	2306      	movs	r3, #6
 8012b4e:	9301      	str	r3, [sp, #4]
 8012b50:	7d7b      	ldrb	r3, [r7, #21]
 8012b52:	9300      	str	r3, [sp, #0]
 8012b54:	4613      	mov	r3, r2
 8012b56:	683a      	ldr	r2, [r7, #0]
 8012b58:	6879      	ldr	r1, [r7, #4]
 8012b5a:	68b8      	ldr	r0, [r7, #8]
 8012b5c:	f004 f940 	bl	8016de0 <ip4_output_if>
 8012b60:	4603      	mov	r3, r0
 8012b62:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8012b64:	68b8      	ldr	r0, [r7, #8]
 8012b66:	f7fa fdc9 	bl	800d6fc <pbuf_free>
  return err;
 8012b6a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012b6e:	4618      	mov	r0, r3
 8012b70:	3718      	adds	r7, #24
 8012b72:	46bd      	mov	sp, r7
 8012b74:	bd80      	pop	{r7, pc}
 8012b76:	bf00      	nop
 8012b78:	0801b338 	.word	0x0801b338
 8012b7c:	0801ba90 	.word	0x0801ba90
 8012b80:	0801b38c 	.word	0x0801b38c

08012b84 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8012b84:	b590      	push	{r4, r7, lr}
 8012b86:	b08b      	sub	sp, #44	; 0x2c
 8012b88:	af04      	add	r7, sp, #16
 8012b8a:	60f8      	str	r0, [r7, #12]
 8012b8c:	60b9      	str	r1, [r7, #8]
 8012b8e:	607a      	str	r2, [r7, #4]
 8012b90:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8012b92:	683b      	ldr	r3, [r7, #0]
 8012b94:	2b00      	cmp	r3, #0
 8012b96:	d106      	bne.n	8012ba6 <tcp_rst+0x22>
 8012b98:	4b1f      	ldr	r3, [pc, #124]	; (8012c18 <tcp_rst+0x94>)
 8012b9a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8012b9e:	491f      	ldr	r1, [pc, #124]	; (8012c1c <tcp_rst+0x98>)
 8012ba0:	481f      	ldr	r0, [pc, #124]	; (8012c20 <tcp_rst+0x9c>)
 8012ba2:	f005 ff7b 	bl	8018a9c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8012ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ba8:	2b00      	cmp	r3, #0
 8012baa:	d106      	bne.n	8012bba <tcp_rst+0x36>
 8012bac:	4b1a      	ldr	r3, [pc, #104]	; (8012c18 <tcp_rst+0x94>)
 8012bae:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8012bb2:	491c      	ldr	r1, [pc, #112]	; (8012c24 <tcp_rst+0xa0>)
 8012bb4:	481a      	ldr	r0, [pc, #104]	; (8012c20 <tcp_rst+0x9c>)
 8012bb6:	f005 ff71 	bl	8018a9c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012bba:	2300      	movs	r3, #0
 8012bbc:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8012bbe:	f246 0308 	movw	r3, #24584	; 0x6008
 8012bc2:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8012bc4:	7dfb      	ldrb	r3, [r7, #23]
 8012bc6:	b29c      	uxth	r4, r3
 8012bc8:	68b8      	ldr	r0, [r7, #8]
 8012bca:	f7f9 f95e 	bl	800be8a <lwip_htonl>
 8012bce:	4602      	mov	r2, r0
 8012bd0:	8abb      	ldrh	r3, [r7, #20]
 8012bd2:	9303      	str	r3, [sp, #12]
 8012bd4:	2314      	movs	r3, #20
 8012bd6:	9302      	str	r3, [sp, #8]
 8012bd8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8012bda:	9301      	str	r3, [sp, #4]
 8012bdc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8012bde:	9300      	str	r3, [sp, #0]
 8012be0:	4613      	mov	r3, r2
 8012be2:	2200      	movs	r2, #0
 8012be4:	4621      	mov	r1, r4
 8012be6:	6878      	ldr	r0, [r7, #4]
 8012be8:	f7ff fe92 	bl	8012910 <tcp_output_alloc_header_common>
 8012bec:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8012bee:	693b      	ldr	r3, [r7, #16]
 8012bf0:	2b00      	cmp	r3, #0
 8012bf2:	d00c      	beq.n	8012c0e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012bf4:	7dfb      	ldrb	r3, [r7, #23]
 8012bf6:	2200      	movs	r2, #0
 8012bf8:	6939      	ldr	r1, [r7, #16]
 8012bfa:	68f8      	ldr	r0, [r7, #12]
 8012bfc:	f7ff ff38 	bl	8012a70 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8012c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c02:	683a      	ldr	r2, [r7, #0]
 8012c04:	6939      	ldr	r1, [r7, #16]
 8012c06:	68f8      	ldr	r0, [r7, #12]
 8012c08:	f7ff ff72 	bl	8012af0 <tcp_output_control_segment>
 8012c0c:	e000      	b.n	8012c10 <tcp_rst+0x8c>
    return;
 8012c0e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8012c10:	371c      	adds	r7, #28
 8012c12:	46bd      	mov	sp, r7
 8012c14:	bd90      	pop	{r4, r7, pc}
 8012c16:	bf00      	nop
 8012c18:	0801b338 	.word	0x0801b338
 8012c1c:	0801babc 	.word	0x0801babc
 8012c20:	0801b38c 	.word	0x0801b38c
 8012c24:	0801bad8 	.word	0x0801bad8

08012c28 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8012c28:	b590      	push	{r4, r7, lr}
 8012c2a:	b087      	sub	sp, #28
 8012c2c:	af00      	add	r7, sp, #0
 8012c2e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8012c30:	2300      	movs	r3, #0
 8012c32:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8012c34:	2300      	movs	r3, #0
 8012c36:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	2b00      	cmp	r3, #0
 8012c3c:	d106      	bne.n	8012c4c <tcp_send_empty_ack+0x24>
 8012c3e:	4b28      	ldr	r3, [pc, #160]	; (8012ce0 <tcp_send_empty_ack+0xb8>)
 8012c40:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8012c44:	4927      	ldr	r1, [pc, #156]	; (8012ce4 <tcp_send_empty_ack+0xbc>)
 8012c46:	4828      	ldr	r0, [pc, #160]	; (8012ce8 <tcp_send_empty_ack+0xc0>)
 8012c48:	f005 ff28 	bl	8018a9c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012c4c:	7dfb      	ldrb	r3, [r7, #23]
 8012c4e:	009b      	lsls	r3, r3, #2
 8012c50:	b2db      	uxtb	r3, r3
 8012c52:	f003 0304 	and.w	r3, r3, #4
 8012c56:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8012c58:	7d7b      	ldrb	r3, [r7, #21]
 8012c5a:	b29c      	uxth	r4, r3
 8012c5c:	687b      	ldr	r3, [r7, #4]
 8012c5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012c60:	4618      	mov	r0, r3
 8012c62:	f7f9 f912 	bl	800be8a <lwip_htonl>
 8012c66:	4603      	mov	r3, r0
 8012c68:	2200      	movs	r2, #0
 8012c6a:	4621      	mov	r1, r4
 8012c6c:	6878      	ldr	r0, [r7, #4]
 8012c6e:	f7ff fec1 	bl	80129f4 <tcp_output_alloc_header>
 8012c72:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012c74:	693b      	ldr	r3, [r7, #16]
 8012c76:	2b00      	cmp	r3, #0
 8012c78:	d109      	bne.n	8012c8e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012c7a:	687b      	ldr	r3, [r7, #4]
 8012c7c:	8b5b      	ldrh	r3, [r3, #26]
 8012c7e:	f043 0303 	orr.w	r3, r3, #3
 8012c82:	b29a      	uxth	r2, r3
 8012c84:	687b      	ldr	r3, [r7, #4]
 8012c86:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8012c88:	f06f 0301 	mvn.w	r3, #1
 8012c8c:	e023      	b.n	8012cd6 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8012c8e:	7dbb      	ldrb	r3, [r7, #22]
 8012c90:	7dfa      	ldrb	r2, [r7, #23]
 8012c92:	6939      	ldr	r1, [r7, #16]
 8012c94:	6878      	ldr	r0, [r7, #4]
 8012c96:	f7ff feeb 	bl	8012a70 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8012c9a:	687a      	ldr	r2, [r7, #4]
 8012c9c:	687b      	ldr	r3, [r7, #4]
 8012c9e:	3304      	adds	r3, #4
 8012ca0:	6939      	ldr	r1, [r7, #16]
 8012ca2:	6878      	ldr	r0, [r7, #4]
 8012ca4:	f7ff ff24 	bl	8012af0 <tcp_output_control_segment>
 8012ca8:	4603      	mov	r3, r0
 8012caa:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8012cac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012cb0:	2b00      	cmp	r3, #0
 8012cb2:	d007      	beq.n	8012cc4 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	8b5b      	ldrh	r3, [r3, #26]
 8012cb8:	f043 0303 	orr.w	r3, r3, #3
 8012cbc:	b29a      	uxth	r2, r3
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	835a      	strh	r2, [r3, #26]
 8012cc2:	e006      	b.n	8012cd2 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012cc4:	687b      	ldr	r3, [r7, #4]
 8012cc6:	8b5b      	ldrh	r3, [r3, #26]
 8012cc8:	f023 0303 	bic.w	r3, r3, #3
 8012ccc:	b29a      	uxth	r2, r3
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8012cd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012cd6:	4618      	mov	r0, r3
 8012cd8:	371c      	adds	r7, #28
 8012cda:	46bd      	mov	sp, r7
 8012cdc:	bd90      	pop	{r4, r7, pc}
 8012cde:	bf00      	nop
 8012ce0:	0801b338 	.word	0x0801b338
 8012ce4:	0801baf4 	.word	0x0801baf4
 8012ce8:	0801b38c 	.word	0x0801b38c

08012cec <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8012cec:	b590      	push	{r4, r7, lr}
 8012cee:	b087      	sub	sp, #28
 8012cf0:	af00      	add	r7, sp, #0
 8012cf2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012cf4:	2300      	movs	r3, #0
 8012cf6:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8012cf8:	687b      	ldr	r3, [r7, #4]
 8012cfa:	2b00      	cmp	r3, #0
 8012cfc:	d106      	bne.n	8012d0c <tcp_keepalive+0x20>
 8012cfe:	4b18      	ldr	r3, [pc, #96]	; (8012d60 <tcp_keepalive+0x74>)
 8012d00:	f640 0224 	movw	r2, #2084	; 0x824
 8012d04:	4917      	ldr	r1, [pc, #92]	; (8012d64 <tcp_keepalive+0x78>)
 8012d06:	4818      	ldr	r0, [pc, #96]	; (8012d68 <tcp_keepalive+0x7c>)
 8012d08:	f005 fec8 	bl	8018a9c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8012d0c:	7dfb      	ldrb	r3, [r7, #23]
 8012d0e:	b29c      	uxth	r4, r3
 8012d10:	687b      	ldr	r3, [r7, #4]
 8012d12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012d14:	3b01      	subs	r3, #1
 8012d16:	4618      	mov	r0, r3
 8012d18:	f7f9 f8b7 	bl	800be8a <lwip_htonl>
 8012d1c:	4603      	mov	r3, r0
 8012d1e:	2200      	movs	r2, #0
 8012d20:	4621      	mov	r1, r4
 8012d22:	6878      	ldr	r0, [r7, #4]
 8012d24:	f7ff fe66 	bl	80129f4 <tcp_output_alloc_header>
 8012d28:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012d2a:	693b      	ldr	r3, [r7, #16]
 8012d2c:	2b00      	cmp	r3, #0
 8012d2e:	d102      	bne.n	8012d36 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8012d30:	f04f 33ff 	mov.w	r3, #4294967295
 8012d34:	e010      	b.n	8012d58 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012d36:	7dfb      	ldrb	r3, [r7, #23]
 8012d38:	2200      	movs	r2, #0
 8012d3a:	6939      	ldr	r1, [r7, #16]
 8012d3c:	6878      	ldr	r0, [r7, #4]
 8012d3e:	f7ff fe97 	bl	8012a70 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8012d42:	687a      	ldr	r2, [r7, #4]
 8012d44:	687b      	ldr	r3, [r7, #4]
 8012d46:	3304      	adds	r3, #4
 8012d48:	6939      	ldr	r1, [r7, #16]
 8012d4a:	6878      	ldr	r0, [r7, #4]
 8012d4c:	f7ff fed0 	bl	8012af0 <tcp_output_control_segment>
 8012d50:	4603      	mov	r3, r0
 8012d52:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8012d54:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012d58:	4618      	mov	r0, r3
 8012d5a:	371c      	adds	r7, #28
 8012d5c:	46bd      	mov	sp, r7
 8012d5e:	bd90      	pop	{r4, r7, pc}
 8012d60:	0801b338 	.word	0x0801b338
 8012d64:	0801bb14 	.word	0x0801bb14
 8012d68:	0801b38c 	.word	0x0801b38c

08012d6c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8012d6c:	b590      	push	{r4, r7, lr}
 8012d6e:	b08b      	sub	sp, #44	; 0x2c
 8012d70:	af00      	add	r7, sp, #0
 8012d72:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012d74:	2300      	movs	r3, #0
 8012d76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8012d7a:	687b      	ldr	r3, [r7, #4]
 8012d7c:	2b00      	cmp	r3, #0
 8012d7e:	d106      	bne.n	8012d8e <tcp_zero_window_probe+0x22>
 8012d80:	4b4c      	ldr	r3, [pc, #304]	; (8012eb4 <tcp_zero_window_probe+0x148>)
 8012d82:	f640 024f 	movw	r2, #2127	; 0x84f
 8012d86:	494c      	ldr	r1, [pc, #304]	; (8012eb8 <tcp_zero_window_probe+0x14c>)
 8012d88:	484c      	ldr	r0, [pc, #304]	; (8012ebc <tcp_zero_window_probe+0x150>)
 8012d8a:	f005 fe87 	bl	8018a9c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8012d8e:	687b      	ldr	r3, [r7, #4]
 8012d90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012d92:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8012d94:	6a3b      	ldr	r3, [r7, #32]
 8012d96:	2b00      	cmp	r3, #0
 8012d98:	d101      	bne.n	8012d9e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8012d9a:	2300      	movs	r3, #0
 8012d9c:	e086      	b.n	8012eac <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8012d9e:	687b      	ldr	r3, [r7, #4]
 8012da0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8012da4:	2bff      	cmp	r3, #255	; 0xff
 8012da6:	d007      	beq.n	8012db8 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8012dae:	3301      	adds	r3, #1
 8012db0:	b2da      	uxtb	r2, r3
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8012db8:	6a3b      	ldr	r3, [r7, #32]
 8012dba:	68db      	ldr	r3, [r3, #12]
 8012dbc:	899b      	ldrh	r3, [r3, #12]
 8012dbe:	b29b      	uxth	r3, r3
 8012dc0:	4618      	mov	r0, r3
 8012dc2:	f7f9 f84d 	bl	800be60 <lwip_htons>
 8012dc6:	4603      	mov	r3, r0
 8012dc8:	b2db      	uxtb	r3, r3
 8012dca:	f003 0301 	and.w	r3, r3, #1
 8012dce:	2b00      	cmp	r3, #0
 8012dd0:	d005      	beq.n	8012dde <tcp_zero_window_probe+0x72>
 8012dd2:	6a3b      	ldr	r3, [r7, #32]
 8012dd4:	891b      	ldrh	r3, [r3, #8]
 8012dd6:	2b00      	cmp	r3, #0
 8012dd8:	d101      	bne.n	8012dde <tcp_zero_window_probe+0x72>
 8012dda:	2301      	movs	r3, #1
 8012ddc:	e000      	b.n	8012de0 <tcp_zero_window_probe+0x74>
 8012dde:	2300      	movs	r3, #0
 8012de0:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8012de2:	7ffb      	ldrb	r3, [r7, #31]
 8012de4:	2b00      	cmp	r3, #0
 8012de6:	bf0c      	ite	eq
 8012de8:	2301      	moveq	r3, #1
 8012dea:	2300      	movne	r3, #0
 8012dec:	b2db      	uxtb	r3, r3
 8012dee:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8012df0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012df4:	b299      	uxth	r1, r3
 8012df6:	6a3b      	ldr	r3, [r7, #32]
 8012df8:	68db      	ldr	r3, [r3, #12]
 8012dfa:	685b      	ldr	r3, [r3, #4]
 8012dfc:	8bba      	ldrh	r2, [r7, #28]
 8012dfe:	6878      	ldr	r0, [r7, #4]
 8012e00:	f7ff fdf8 	bl	80129f4 <tcp_output_alloc_header>
 8012e04:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8012e06:	69bb      	ldr	r3, [r7, #24]
 8012e08:	2b00      	cmp	r3, #0
 8012e0a:	d102      	bne.n	8012e12 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8012e0c:	f04f 33ff 	mov.w	r3, #4294967295
 8012e10:	e04c      	b.n	8012eac <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8012e12:	69bb      	ldr	r3, [r7, #24]
 8012e14:	685b      	ldr	r3, [r3, #4]
 8012e16:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8012e18:	7ffb      	ldrb	r3, [r7, #31]
 8012e1a:	2b00      	cmp	r3, #0
 8012e1c:	d011      	beq.n	8012e42 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8012e1e:	697b      	ldr	r3, [r7, #20]
 8012e20:	899b      	ldrh	r3, [r3, #12]
 8012e22:	b29b      	uxth	r3, r3
 8012e24:	b21b      	sxth	r3, r3
 8012e26:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012e2a:	b21c      	sxth	r4, r3
 8012e2c:	2011      	movs	r0, #17
 8012e2e:	f7f9 f817 	bl	800be60 <lwip_htons>
 8012e32:	4603      	mov	r3, r0
 8012e34:	b21b      	sxth	r3, r3
 8012e36:	4323      	orrs	r3, r4
 8012e38:	b21b      	sxth	r3, r3
 8012e3a:	b29a      	uxth	r2, r3
 8012e3c:	697b      	ldr	r3, [r7, #20]
 8012e3e:	819a      	strh	r2, [r3, #12]
 8012e40:	e010      	b.n	8012e64 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8012e42:	69bb      	ldr	r3, [r7, #24]
 8012e44:	685b      	ldr	r3, [r3, #4]
 8012e46:	3314      	adds	r3, #20
 8012e48:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8012e4a:	6a3b      	ldr	r3, [r7, #32]
 8012e4c:	6858      	ldr	r0, [r3, #4]
 8012e4e:	6a3b      	ldr	r3, [r7, #32]
 8012e50:	685b      	ldr	r3, [r3, #4]
 8012e52:	891a      	ldrh	r2, [r3, #8]
 8012e54:	6a3b      	ldr	r3, [r7, #32]
 8012e56:	891b      	ldrh	r3, [r3, #8]
 8012e58:	1ad3      	subs	r3, r2, r3
 8012e5a:	b29b      	uxth	r3, r3
 8012e5c:	2201      	movs	r2, #1
 8012e5e:	6939      	ldr	r1, [r7, #16]
 8012e60:	f7fa fe52 	bl	800db08 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8012e64:	6a3b      	ldr	r3, [r7, #32]
 8012e66:	68db      	ldr	r3, [r3, #12]
 8012e68:	685b      	ldr	r3, [r3, #4]
 8012e6a:	4618      	mov	r0, r3
 8012e6c:	f7f9 f80d 	bl	800be8a <lwip_htonl>
 8012e70:	4603      	mov	r3, r0
 8012e72:	3301      	adds	r3, #1
 8012e74:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012e76:	687b      	ldr	r3, [r7, #4]
 8012e78:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012e7a:	68fb      	ldr	r3, [r7, #12]
 8012e7c:	1ad3      	subs	r3, r2, r3
 8012e7e:	2b00      	cmp	r3, #0
 8012e80:	da02      	bge.n	8012e88 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8012e82:	687b      	ldr	r3, [r7, #4]
 8012e84:	68fa      	ldr	r2, [r7, #12]
 8012e86:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012e88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012e8c:	2200      	movs	r2, #0
 8012e8e:	69b9      	ldr	r1, [r7, #24]
 8012e90:	6878      	ldr	r0, [r7, #4]
 8012e92:	f7ff fded 	bl	8012a70 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8012e96:	687a      	ldr	r2, [r7, #4]
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	3304      	adds	r3, #4
 8012e9c:	69b9      	ldr	r1, [r7, #24]
 8012e9e:	6878      	ldr	r0, [r7, #4]
 8012ea0:	f7ff fe26 	bl	8012af0 <tcp_output_control_segment>
 8012ea4:	4603      	mov	r3, r0
 8012ea6:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8012ea8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8012eac:	4618      	mov	r0, r3
 8012eae:	372c      	adds	r7, #44	; 0x2c
 8012eb0:	46bd      	mov	sp, r7
 8012eb2:	bd90      	pop	{r4, r7, pc}
 8012eb4:	0801b338 	.word	0x0801b338
 8012eb8:	0801bb30 	.word	0x0801bb30
 8012ebc:	0801b38c 	.word	0x0801b38c

08012ec0 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8012ec0:	b580      	push	{r7, lr}
 8012ec2:	b082      	sub	sp, #8
 8012ec4:	af00      	add	r7, sp, #0
 8012ec6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8012ec8:	f7fa ff0c 	bl	800dce4 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8012ecc:	4b0a      	ldr	r3, [pc, #40]	; (8012ef8 <tcpip_tcp_timer+0x38>)
 8012ece:	681b      	ldr	r3, [r3, #0]
 8012ed0:	2b00      	cmp	r3, #0
 8012ed2:	d103      	bne.n	8012edc <tcpip_tcp_timer+0x1c>
 8012ed4:	4b09      	ldr	r3, [pc, #36]	; (8012efc <tcpip_tcp_timer+0x3c>)
 8012ed6:	681b      	ldr	r3, [r3, #0]
 8012ed8:	2b00      	cmp	r3, #0
 8012eda:	d005      	beq.n	8012ee8 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8012edc:	2200      	movs	r2, #0
 8012ede:	4908      	ldr	r1, [pc, #32]	; (8012f00 <tcpip_tcp_timer+0x40>)
 8012ee0:	20fa      	movs	r0, #250	; 0xfa
 8012ee2:	f000 f8f3 	bl	80130cc <sys_timeout>
 8012ee6:	e003      	b.n	8012ef0 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8012ee8:	4b06      	ldr	r3, [pc, #24]	; (8012f04 <tcpip_tcp_timer+0x44>)
 8012eea:	2200      	movs	r2, #0
 8012eec:	601a      	str	r2, [r3, #0]
  }
}
 8012eee:	bf00      	nop
 8012ef0:	bf00      	nop
 8012ef2:	3708      	adds	r7, #8
 8012ef4:	46bd      	mov	sp, r7
 8012ef6:	bd80      	pop	{r7, pc}
 8012ef8:	2000c898 	.word	0x2000c898
 8012efc:	2000c89c 	.word	0x2000c89c
 8012f00:	08012ec1 	.word	0x08012ec1
 8012f04:	2000c8e4 	.word	0x2000c8e4

08012f08 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8012f08:	b580      	push	{r7, lr}
 8012f0a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8012f0c:	4b0a      	ldr	r3, [pc, #40]	; (8012f38 <tcp_timer_needed+0x30>)
 8012f0e:	681b      	ldr	r3, [r3, #0]
 8012f10:	2b00      	cmp	r3, #0
 8012f12:	d10f      	bne.n	8012f34 <tcp_timer_needed+0x2c>
 8012f14:	4b09      	ldr	r3, [pc, #36]	; (8012f3c <tcp_timer_needed+0x34>)
 8012f16:	681b      	ldr	r3, [r3, #0]
 8012f18:	2b00      	cmp	r3, #0
 8012f1a:	d103      	bne.n	8012f24 <tcp_timer_needed+0x1c>
 8012f1c:	4b08      	ldr	r3, [pc, #32]	; (8012f40 <tcp_timer_needed+0x38>)
 8012f1e:	681b      	ldr	r3, [r3, #0]
 8012f20:	2b00      	cmp	r3, #0
 8012f22:	d007      	beq.n	8012f34 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8012f24:	4b04      	ldr	r3, [pc, #16]	; (8012f38 <tcp_timer_needed+0x30>)
 8012f26:	2201      	movs	r2, #1
 8012f28:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8012f2a:	2200      	movs	r2, #0
 8012f2c:	4905      	ldr	r1, [pc, #20]	; (8012f44 <tcp_timer_needed+0x3c>)
 8012f2e:	20fa      	movs	r0, #250	; 0xfa
 8012f30:	f000 f8cc 	bl	80130cc <sys_timeout>
  }
}
 8012f34:	bf00      	nop
 8012f36:	bd80      	pop	{r7, pc}
 8012f38:	2000c8e4 	.word	0x2000c8e4
 8012f3c:	2000c898 	.word	0x2000c898
 8012f40:	2000c89c 	.word	0x2000c89c
 8012f44:	08012ec1 	.word	0x08012ec1

08012f48 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8012f48:	b580      	push	{r7, lr}
 8012f4a:	b086      	sub	sp, #24
 8012f4c:	af00      	add	r7, sp, #0
 8012f4e:	60f8      	str	r0, [r7, #12]
 8012f50:	60b9      	str	r1, [r7, #8]
 8012f52:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8012f54:	200a      	movs	r0, #10
 8012f56:	f7f9 fd13 	bl	800c980 <memp_malloc>
 8012f5a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8012f5c:	693b      	ldr	r3, [r7, #16]
 8012f5e:	2b00      	cmp	r3, #0
 8012f60:	d109      	bne.n	8012f76 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8012f62:	693b      	ldr	r3, [r7, #16]
 8012f64:	2b00      	cmp	r3, #0
 8012f66:	d151      	bne.n	801300c <sys_timeout_abs+0xc4>
 8012f68:	4b2a      	ldr	r3, [pc, #168]	; (8013014 <sys_timeout_abs+0xcc>)
 8012f6a:	22be      	movs	r2, #190	; 0xbe
 8012f6c:	492a      	ldr	r1, [pc, #168]	; (8013018 <sys_timeout_abs+0xd0>)
 8012f6e:	482b      	ldr	r0, [pc, #172]	; (801301c <sys_timeout_abs+0xd4>)
 8012f70:	f005 fd94 	bl	8018a9c <iprintf>
    return;
 8012f74:	e04a      	b.n	801300c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8012f76:	693b      	ldr	r3, [r7, #16]
 8012f78:	2200      	movs	r2, #0
 8012f7a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8012f7c:	693b      	ldr	r3, [r7, #16]
 8012f7e:	68ba      	ldr	r2, [r7, #8]
 8012f80:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8012f82:	693b      	ldr	r3, [r7, #16]
 8012f84:	687a      	ldr	r2, [r7, #4]
 8012f86:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8012f88:	693b      	ldr	r3, [r7, #16]
 8012f8a:	68fa      	ldr	r2, [r7, #12]
 8012f8c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8012f8e:	4b24      	ldr	r3, [pc, #144]	; (8013020 <sys_timeout_abs+0xd8>)
 8012f90:	681b      	ldr	r3, [r3, #0]
 8012f92:	2b00      	cmp	r3, #0
 8012f94:	d103      	bne.n	8012f9e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8012f96:	4a22      	ldr	r2, [pc, #136]	; (8013020 <sys_timeout_abs+0xd8>)
 8012f98:	693b      	ldr	r3, [r7, #16]
 8012f9a:	6013      	str	r3, [r2, #0]
    return;
 8012f9c:	e037      	b.n	801300e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8012f9e:	693b      	ldr	r3, [r7, #16]
 8012fa0:	685a      	ldr	r2, [r3, #4]
 8012fa2:	4b1f      	ldr	r3, [pc, #124]	; (8013020 <sys_timeout_abs+0xd8>)
 8012fa4:	681b      	ldr	r3, [r3, #0]
 8012fa6:	685b      	ldr	r3, [r3, #4]
 8012fa8:	1ad3      	subs	r3, r2, r3
 8012faa:	0fdb      	lsrs	r3, r3, #31
 8012fac:	f003 0301 	and.w	r3, r3, #1
 8012fb0:	b2db      	uxtb	r3, r3
 8012fb2:	2b00      	cmp	r3, #0
 8012fb4:	d007      	beq.n	8012fc6 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8012fb6:	4b1a      	ldr	r3, [pc, #104]	; (8013020 <sys_timeout_abs+0xd8>)
 8012fb8:	681a      	ldr	r2, [r3, #0]
 8012fba:	693b      	ldr	r3, [r7, #16]
 8012fbc:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8012fbe:	4a18      	ldr	r2, [pc, #96]	; (8013020 <sys_timeout_abs+0xd8>)
 8012fc0:	693b      	ldr	r3, [r7, #16]
 8012fc2:	6013      	str	r3, [r2, #0]
 8012fc4:	e023      	b.n	801300e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8012fc6:	4b16      	ldr	r3, [pc, #88]	; (8013020 <sys_timeout_abs+0xd8>)
 8012fc8:	681b      	ldr	r3, [r3, #0]
 8012fca:	617b      	str	r3, [r7, #20]
 8012fcc:	e01a      	b.n	8013004 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8012fce:	697b      	ldr	r3, [r7, #20]
 8012fd0:	681b      	ldr	r3, [r3, #0]
 8012fd2:	2b00      	cmp	r3, #0
 8012fd4:	d00b      	beq.n	8012fee <sys_timeout_abs+0xa6>
 8012fd6:	693b      	ldr	r3, [r7, #16]
 8012fd8:	685a      	ldr	r2, [r3, #4]
 8012fda:	697b      	ldr	r3, [r7, #20]
 8012fdc:	681b      	ldr	r3, [r3, #0]
 8012fde:	685b      	ldr	r3, [r3, #4]
 8012fe0:	1ad3      	subs	r3, r2, r3
 8012fe2:	0fdb      	lsrs	r3, r3, #31
 8012fe4:	f003 0301 	and.w	r3, r3, #1
 8012fe8:	b2db      	uxtb	r3, r3
 8012fea:	2b00      	cmp	r3, #0
 8012fec:	d007      	beq.n	8012ffe <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8012fee:	697b      	ldr	r3, [r7, #20]
 8012ff0:	681a      	ldr	r2, [r3, #0]
 8012ff2:	693b      	ldr	r3, [r7, #16]
 8012ff4:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8012ff6:	697b      	ldr	r3, [r7, #20]
 8012ff8:	693a      	ldr	r2, [r7, #16]
 8012ffa:	601a      	str	r2, [r3, #0]
        break;
 8012ffc:	e007      	b.n	801300e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8012ffe:	697b      	ldr	r3, [r7, #20]
 8013000:	681b      	ldr	r3, [r3, #0]
 8013002:	617b      	str	r3, [r7, #20]
 8013004:	697b      	ldr	r3, [r7, #20]
 8013006:	2b00      	cmp	r3, #0
 8013008:	d1e1      	bne.n	8012fce <sys_timeout_abs+0x86>
 801300a:	e000      	b.n	801300e <sys_timeout_abs+0xc6>
    return;
 801300c:	bf00      	nop
      }
    }
  }
}
 801300e:	3718      	adds	r7, #24
 8013010:	46bd      	mov	sp, r7
 8013012:	bd80      	pop	{r7, pc}
 8013014:	0801bb54 	.word	0x0801bb54
 8013018:	0801bb88 	.word	0x0801bb88
 801301c:	0801bbc8 	.word	0x0801bbc8
 8013020:	2000c8dc 	.word	0x2000c8dc

08013024 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8013024:	b580      	push	{r7, lr}
 8013026:	b086      	sub	sp, #24
 8013028:	af00      	add	r7, sp, #0
 801302a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801302c:	687b      	ldr	r3, [r7, #4]
 801302e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8013030:	697b      	ldr	r3, [r7, #20]
 8013032:	685b      	ldr	r3, [r3, #4]
 8013034:	4798      	blx	r3

  now = sys_now();
 8013036:	f7f2 ff5f 	bl	8005ef8 <sys_now>
 801303a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801303c:	697b      	ldr	r3, [r7, #20]
 801303e:	681a      	ldr	r2, [r3, #0]
 8013040:	4b0f      	ldr	r3, [pc, #60]	; (8013080 <lwip_cyclic_timer+0x5c>)
 8013042:	681b      	ldr	r3, [r3, #0]
 8013044:	4413      	add	r3, r2
 8013046:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8013048:	68fa      	ldr	r2, [r7, #12]
 801304a:	693b      	ldr	r3, [r7, #16]
 801304c:	1ad3      	subs	r3, r2, r3
 801304e:	0fdb      	lsrs	r3, r3, #31
 8013050:	f003 0301 	and.w	r3, r3, #1
 8013054:	b2db      	uxtb	r3, r3
 8013056:	2b00      	cmp	r3, #0
 8013058:	d009      	beq.n	801306e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801305a:	697b      	ldr	r3, [r7, #20]
 801305c:	681a      	ldr	r2, [r3, #0]
 801305e:	693b      	ldr	r3, [r7, #16]
 8013060:	4413      	add	r3, r2
 8013062:	687a      	ldr	r2, [r7, #4]
 8013064:	4907      	ldr	r1, [pc, #28]	; (8013084 <lwip_cyclic_timer+0x60>)
 8013066:	4618      	mov	r0, r3
 8013068:	f7ff ff6e 	bl	8012f48 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801306c:	e004      	b.n	8013078 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801306e:	687a      	ldr	r2, [r7, #4]
 8013070:	4904      	ldr	r1, [pc, #16]	; (8013084 <lwip_cyclic_timer+0x60>)
 8013072:	68f8      	ldr	r0, [r7, #12]
 8013074:	f7ff ff68 	bl	8012f48 <sys_timeout_abs>
}
 8013078:	bf00      	nop
 801307a:	3718      	adds	r7, #24
 801307c:	46bd      	mov	sp, r7
 801307e:	bd80      	pop	{r7, pc}
 8013080:	2000c8e0 	.word	0x2000c8e0
 8013084:	08013025 	.word	0x08013025

08013088 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8013088:	b580      	push	{r7, lr}
 801308a:	b082      	sub	sp, #8
 801308c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801308e:	2301      	movs	r3, #1
 8013090:	607b      	str	r3, [r7, #4]
 8013092:	e00e      	b.n	80130b2 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8013094:	4a0b      	ldr	r2, [pc, #44]	; (80130c4 <sys_timeouts_init+0x3c>)
 8013096:	687b      	ldr	r3, [r7, #4]
 8013098:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801309c:	687b      	ldr	r3, [r7, #4]
 801309e:	00db      	lsls	r3, r3, #3
 80130a0:	4a08      	ldr	r2, [pc, #32]	; (80130c4 <sys_timeouts_init+0x3c>)
 80130a2:	4413      	add	r3, r2
 80130a4:	461a      	mov	r2, r3
 80130a6:	4908      	ldr	r1, [pc, #32]	; (80130c8 <sys_timeouts_init+0x40>)
 80130a8:	f000 f810 	bl	80130cc <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80130ac:	687b      	ldr	r3, [r7, #4]
 80130ae:	3301      	adds	r3, #1
 80130b0:	607b      	str	r3, [r7, #4]
 80130b2:	687b      	ldr	r3, [r7, #4]
 80130b4:	2b04      	cmp	r3, #4
 80130b6:	d9ed      	bls.n	8013094 <sys_timeouts_init+0xc>
  }
}
 80130b8:	bf00      	nop
 80130ba:	bf00      	nop
 80130bc:	3708      	adds	r7, #8
 80130be:	46bd      	mov	sp, r7
 80130c0:	bd80      	pop	{r7, pc}
 80130c2:	bf00      	nop
 80130c4:	0801cb8c 	.word	0x0801cb8c
 80130c8:	08013025 	.word	0x08013025

080130cc <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80130cc:	b580      	push	{r7, lr}
 80130ce:	b086      	sub	sp, #24
 80130d0:	af00      	add	r7, sp, #0
 80130d2:	60f8      	str	r0, [r7, #12]
 80130d4:	60b9      	str	r1, [r7, #8]
 80130d6:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80130d8:	68fb      	ldr	r3, [r7, #12]
 80130da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80130de:	d306      	bcc.n	80130ee <sys_timeout+0x22>
 80130e0:	4b0a      	ldr	r3, [pc, #40]	; (801310c <sys_timeout+0x40>)
 80130e2:	f240 1229 	movw	r2, #297	; 0x129
 80130e6:	490a      	ldr	r1, [pc, #40]	; (8013110 <sys_timeout+0x44>)
 80130e8:	480a      	ldr	r0, [pc, #40]	; (8013114 <sys_timeout+0x48>)
 80130ea:	f005 fcd7 	bl	8018a9c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80130ee:	f7f2 ff03 	bl	8005ef8 <sys_now>
 80130f2:	4602      	mov	r2, r0
 80130f4:	68fb      	ldr	r3, [r7, #12]
 80130f6:	4413      	add	r3, r2
 80130f8:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80130fa:	687a      	ldr	r2, [r7, #4]
 80130fc:	68b9      	ldr	r1, [r7, #8]
 80130fe:	6978      	ldr	r0, [r7, #20]
 8013100:	f7ff ff22 	bl	8012f48 <sys_timeout_abs>
#endif
}
 8013104:	bf00      	nop
 8013106:	3718      	adds	r7, #24
 8013108:	46bd      	mov	sp, r7
 801310a:	bd80      	pop	{r7, pc}
 801310c:	0801bb54 	.word	0x0801bb54
 8013110:	0801bbf0 	.word	0x0801bbf0
 8013114:	0801bbc8 	.word	0x0801bbc8

08013118 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8013118:	b580      	push	{r7, lr}
 801311a:	b084      	sub	sp, #16
 801311c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801311e:	f7f2 feeb 	bl	8005ef8 <sys_now>
 8013122:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8013124:	4b17      	ldr	r3, [pc, #92]	; (8013184 <sys_check_timeouts+0x6c>)
 8013126:	681b      	ldr	r3, [r3, #0]
 8013128:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801312a:	68bb      	ldr	r3, [r7, #8]
 801312c:	2b00      	cmp	r3, #0
 801312e:	d022      	beq.n	8013176 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8013130:	68bb      	ldr	r3, [r7, #8]
 8013132:	685b      	ldr	r3, [r3, #4]
 8013134:	68fa      	ldr	r2, [r7, #12]
 8013136:	1ad3      	subs	r3, r2, r3
 8013138:	0fdb      	lsrs	r3, r3, #31
 801313a:	f003 0301 	and.w	r3, r3, #1
 801313e:	b2db      	uxtb	r3, r3
 8013140:	2b00      	cmp	r3, #0
 8013142:	d11a      	bne.n	801317a <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8013144:	68bb      	ldr	r3, [r7, #8]
 8013146:	681b      	ldr	r3, [r3, #0]
 8013148:	4a0e      	ldr	r2, [pc, #56]	; (8013184 <sys_check_timeouts+0x6c>)
 801314a:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801314c:	68bb      	ldr	r3, [r7, #8]
 801314e:	689b      	ldr	r3, [r3, #8]
 8013150:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8013152:	68bb      	ldr	r3, [r7, #8]
 8013154:	68db      	ldr	r3, [r3, #12]
 8013156:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8013158:	68bb      	ldr	r3, [r7, #8]
 801315a:	685b      	ldr	r3, [r3, #4]
 801315c:	4a0a      	ldr	r2, [pc, #40]	; (8013188 <sys_check_timeouts+0x70>)
 801315e:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8013160:	68b9      	ldr	r1, [r7, #8]
 8013162:	200a      	movs	r0, #10
 8013164:	f7f9 fc82 	bl	800ca6c <memp_free>
    if (handler != NULL) {
 8013168:	687b      	ldr	r3, [r7, #4]
 801316a:	2b00      	cmp	r3, #0
 801316c:	d0da      	beq.n	8013124 <sys_check_timeouts+0xc>
      handler(arg);
 801316e:	687b      	ldr	r3, [r7, #4]
 8013170:	6838      	ldr	r0, [r7, #0]
 8013172:	4798      	blx	r3
  do {
 8013174:	e7d6      	b.n	8013124 <sys_check_timeouts+0xc>
      return;
 8013176:	bf00      	nop
 8013178:	e000      	b.n	801317c <sys_check_timeouts+0x64>
      return;
 801317a:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801317c:	3710      	adds	r7, #16
 801317e:	46bd      	mov	sp, r7
 8013180:	bd80      	pop	{r7, pc}
 8013182:	bf00      	nop
 8013184:	2000c8dc 	.word	0x2000c8dc
 8013188:	2000c8e0 	.word	0x2000c8e0

0801318c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801318c:	b580      	push	{r7, lr}
 801318e:	b082      	sub	sp, #8
 8013190:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8013192:	4b16      	ldr	r3, [pc, #88]	; (80131ec <sys_timeouts_sleeptime+0x60>)
 8013194:	681b      	ldr	r3, [r3, #0]
 8013196:	2b00      	cmp	r3, #0
 8013198:	d102      	bne.n	80131a0 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801319a:	f04f 33ff 	mov.w	r3, #4294967295
 801319e:	e020      	b.n	80131e2 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 80131a0:	f7f2 feaa 	bl	8005ef8 <sys_now>
 80131a4:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 80131a6:	4b11      	ldr	r3, [pc, #68]	; (80131ec <sys_timeouts_sleeptime+0x60>)
 80131a8:	681b      	ldr	r3, [r3, #0]
 80131aa:	685a      	ldr	r2, [r3, #4]
 80131ac:	687b      	ldr	r3, [r7, #4]
 80131ae:	1ad3      	subs	r3, r2, r3
 80131b0:	0fdb      	lsrs	r3, r3, #31
 80131b2:	f003 0301 	and.w	r3, r3, #1
 80131b6:	b2db      	uxtb	r3, r3
 80131b8:	2b00      	cmp	r3, #0
 80131ba:	d001      	beq.n	80131c0 <sys_timeouts_sleeptime+0x34>
    return 0;
 80131bc:	2300      	movs	r3, #0
 80131be:	e010      	b.n	80131e2 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 80131c0:	4b0a      	ldr	r3, [pc, #40]	; (80131ec <sys_timeouts_sleeptime+0x60>)
 80131c2:	681b      	ldr	r3, [r3, #0]
 80131c4:	685a      	ldr	r2, [r3, #4]
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	1ad3      	subs	r3, r2, r3
 80131ca:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 80131cc:	683b      	ldr	r3, [r7, #0]
 80131ce:	2b00      	cmp	r3, #0
 80131d0:	da06      	bge.n	80131e0 <sys_timeouts_sleeptime+0x54>
 80131d2:	4b07      	ldr	r3, [pc, #28]	; (80131f0 <sys_timeouts_sleeptime+0x64>)
 80131d4:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80131d8:	4906      	ldr	r1, [pc, #24]	; (80131f4 <sys_timeouts_sleeptime+0x68>)
 80131da:	4807      	ldr	r0, [pc, #28]	; (80131f8 <sys_timeouts_sleeptime+0x6c>)
 80131dc:	f005 fc5e 	bl	8018a9c <iprintf>
    return ret;
 80131e0:	683b      	ldr	r3, [r7, #0]
  }
}
 80131e2:	4618      	mov	r0, r3
 80131e4:	3708      	adds	r7, #8
 80131e6:	46bd      	mov	sp, r7
 80131e8:	bd80      	pop	{r7, pc}
 80131ea:	bf00      	nop
 80131ec:	2000c8dc 	.word	0x2000c8dc
 80131f0:	0801bb54 	.word	0x0801bb54
 80131f4:	0801bc28 	.word	0x0801bc28
 80131f8:	0801bbc8 	.word	0x0801bbc8

080131fc <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80131fc:	b580      	push	{r7, lr}
 80131fe:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8013200:	f005 fc64 	bl	8018acc <rand>
 8013204:	4603      	mov	r3, r0
 8013206:	b29b      	uxth	r3, r3
 8013208:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801320c:	b29b      	uxth	r3, r3
 801320e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8013212:	b29a      	uxth	r2, r3
 8013214:	4b01      	ldr	r3, [pc, #4]	; (801321c <udp_init+0x20>)
 8013216:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8013218:	bf00      	nop
 801321a:	bd80      	pop	{r7, pc}
 801321c:	200000a4 	.word	0x200000a4

08013220 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8013220:	b480      	push	{r7}
 8013222:	b083      	sub	sp, #12
 8013224:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8013226:	2300      	movs	r3, #0
 8013228:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801322a:	4b17      	ldr	r3, [pc, #92]	; (8013288 <udp_new_port+0x68>)
 801322c:	881b      	ldrh	r3, [r3, #0]
 801322e:	1c5a      	adds	r2, r3, #1
 8013230:	b291      	uxth	r1, r2
 8013232:	4a15      	ldr	r2, [pc, #84]	; (8013288 <udp_new_port+0x68>)
 8013234:	8011      	strh	r1, [r2, #0]
 8013236:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801323a:	4293      	cmp	r3, r2
 801323c:	d103      	bne.n	8013246 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801323e:	4b12      	ldr	r3, [pc, #72]	; (8013288 <udp_new_port+0x68>)
 8013240:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8013244:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013246:	4b11      	ldr	r3, [pc, #68]	; (801328c <udp_new_port+0x6c>)
 8013248:	681b      	ldr	r3, [r3, #0]
 801324a:	603b      	str	r3, [r7, #0]
 801324c:	e011      	b.n	8013272 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801324e:	683b      	ldr	r3, [r7, #0]
 8013250:	8a5a      	ldrh	r2, [r3, #18]
 8013252:	4b0d      	ldr	r3, [pc, #52]	; (8013288 <udp_new_port+0x68>)
 8013254:	881b      	ldrh	r3, [r3, #0]
 8013256:	429a      	cmp	r2, r3
 8013258:	d108      	bne.n	801326c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801325a:	88fb      	ldrh	r3, [r7, #6]
 801325c:	3301      	adds	r3, #1
 801325e:	80fb      	strh	r3, [r7, #6]
 8013260:	88fb      	ldrh	r3, [r7, #6]
 8013262:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8013266:	d3e0      	bcc.n	801322a <udp_new_port+0xa>
        return 0;
 8013268:	2300      	movs	r3, #0
 801326a:	e007      	b.n	801327c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801326c:	683b      	ldr	r3, [r7, #0]
 801326e:	68db      	ldr	r3, [r3, #12]
 8013270:	603b      	str	r3, [r7, #0]
 8013272:	683b      	ldr	r3, [r7, #0]
 8013274:	2b00      	cmp	r3, #0
 8013276:	d1ea      	bne.n	801324e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8013278:	4b03      	ldr	r3, [pc, #12]	; (8013288 <udp_new_port+0x68>)
 801327a:	881b      	ldrh	r3, [r3, #0]
}
 801327c:	4618      	mov	r0, r3
 801327e:	370c      	adds	r7, #12
 8013280:	46bd      	mov	sp, r7
 8013282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013286:	4770      	bx	lr
 8013288:	200000a4 	.word	0x200000a4
 801328c:	2000c8e8 	.word	0x2000c8e8

08013290 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8013290:	b580      	push	{r7, lr}
 8013292:	b084      	sub	sp, #16
 8013294:	af00      	add	r7, sp, #0
 8013296:	60f8      	str	r0, [r7, #12]
 8013298:	60b9      	str	r1, [r7, #8]
 801329a:	4613      	mov	r3, r2
 801329c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801329e:	68fb      	ldr	r3, [r7, #12]
 80132a0:	2b00      	cmp	r3, #0
 80132a2:	d105      	bne.n	80132b0 <udp_input_local_match+0x20>
 80132a4:	4b27      	ldr	r3, [pc, #156]	; (8013344 <udp_input_local_match+0xb4>)
 80132a6:	2287      	movs	r2, #135	; 0x87
 80132a8:	4927      	ldr	r1, [pc, #156]	; (8013348 <udp_input_local_match+0xb8>)
 80132aa:	4828      	ldr	r0, [pc, #160]	; (801334c <udp_input_local_match+0xbc>)
 80132ac:	f005 fbf6 	bl	8018a9c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80132b0:	68bb      	ldr	r3, [r7, #8]
 80132b2:	2b00      	cmp	r3, #0
 80132b4:	d105      	bne.n	80132c2 <udp_input_local_match+0x32>
 80132b6:	4b23      	ldr	r3, [pc, #140]	; (8013344 <udp_input_local_match+0xb4>)
 80132b8:	2288      	movs	r2, #136	; 0x88
 80132ba:	4925      	ldr	r1, [pc, #148]	; (8013350 <udp_input_local_match+0xc0>)
 80132bc:	4823      	ldr	r0, [pc, #140]	; (801334c <udp_input_local_match+0xbc>)
 80132be:	f005 fbed 	bl	8018a9c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80132c2:	68fb      	ldr	r3, [r7, #12]
 80132c4:	7a1b      	ldrb	r3, [r3, #8]
 80132c6:	2b00      	cmp	r3, #0
 80132c8:	d00b      	beq.n	80132e2 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80132ca:	68fb      	ldr	r3, [r7, #12]
 80132cc:	7a1a      	ldrb	r2, [r3, #8]
 80132ce:	4b21      	ldr	r3, [pc, #132]	; (8013354 <udp_input_local_match+0xc4>)
 80132d0:	685b      	ldr	r3, [r3, #4]
 80132d2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80132d6:	3301      	adds	r3, #1
 80132d8:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80132da:	429a      	cmp	r2, r3
 80132dc:	d001      	beq.n	80132e2 <udp_input_local_match+0x52>
    return 0;
 80132de:	2300      	movs	r3, #0
 80132e0:	e02b      	b.n	801333a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80132e2:	79fb      	ldrb	r3, [r7, #7]
 80132e4:	2b00      	cmp	r3, #0
 80132e6:	d018      	beq.n	801331a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80132e8:	68fb      	ldr	r3, [r7, #12]
 80132ea:	2b00      	cmp	r3, #0
 80132ec:	d013      	beq.n	8013316 <udp_input_local_match+0x86>
 80132ee:	68fb      	ldr	r3, [r7, #12]
 80132f0:	681b      	ldr	r3, [r3, #0]
 80132f2:	2b00      	cmp	r3, #0
 80132f4:	d00f      	beq.n	8013316 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80132f6:	4b17      	ldr	r3, [pc, #92]	; (8013354 <udp_input_local_match+0xc4>)
 80132f8:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80132fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80132fe:	d00a      	beq.n	8013316 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8013300:	68fb      	ldr	r3, [r7, #12]
 8013302:	681a      	ldr	r2, [r3, #0]
 8013304:	4b13      	ldr	r3, [pc, #76]	; (8013354 <udp_input_local_match+0xc4>)
 8013306:	695b      	ldr	r3, [r3, #20]
 8013308:	405a      	eors	r2, r3
 801330a:	68bb      	ldr	r3, [r7, #8]
 801330c:	3308      	adds	r3, #8
 801330e:	681b      	ldr	r3, [r3, #0]
 8013310:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8013312:	2b00      	cmp	r3, #0
 8013314:	d110      	bne.n	8013338 <udp_input_local_match+0xa8>
          return 1;
 8013316:	2301      	movs	r3, #1
 8013318:	e00f      	b.n	801333a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801331a:	68fb      	ldr	r3, [r7, #12]
 801331c:	2b00      	cmp	r3, #0
 801331e:	d009      	beq.n	8013334 <udp_input_local_match+0xa4>
 8013320:	68fb      	ldr	r3, [r7, #12]
 8013322:	681b      	ldr	r3, [r3, #0]
 8013324:	2b00      	cmp	r3, #0
 8013326:	d005      	beq.n	8013334 <udp_input_local_match+0xa4>
 8013328:	68fb      	ldr	r3, [r7, #12]
 801332a:	681a      	ldr	r2, [r3, #0]
 801332c:	4b09      	ldr	r3, [pc, #36]	; (8013354 <udp_input_local_match+0xc4>)
 801332e:	695b      	ldr	r3, [r3, #20]
 8013330:	429a      	cmp	r2, r3
 8013332:	d101      	bne.n	8013338 <udp_input_local_match+0xa8>
        return 1;
 8013334:	2301      	movs	r3, #1
 8013336:	e000      	b.n	801333a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8013338:	2300      	movs	r3, #0
}
 801333a:	4618      	mov	r0, r3
 801333c:	3710      	adds	r7, #16
 801333e:	46bd      	mov	sp, r7
 8013340:	bd80      	pop	{r7, pc}
 8013342:	bf00      	nop
 8013344:	0801bc3c 	.word	0x0801bc3c
 8013348:	0801bc6c 	.word	0x0801bc6c
 801334c:	0801bc90 	.word	0x0801bc90
 8013350:	0801bcb8 	.word	0x0801bcb8
 8013354:	2000976c 	.word	0x2000976c

08013358 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8013358:	b590      	push	{r4, r7, lr}
 801335a:	b08d      	sub	sp, #52	; 0x34
 801335c:	af02      	add	r7, sp, #8
 801335e:	6078      	str	r0, [r7, #4]
 8013360:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8013362:	2300      	movs	r3, #0
 8013364:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8013366:	687b      	ldr	r3, [r7, #4]
 8013368:	2b00      	cmp	r3, #0
 801336a:	d105      	bne.n	8013378 <udp_input+0x20>
 801336c:	4b7c      	ldr	r3, [pc, #496]	; (8013560 <udp_input+0x208>)
 801336e:	22cf      	movs	r2, #207	; 0xcf
 8013370:	497c      	ldr	r1, [pc, #496]	; (8013564 <udp_input+0x20c>)
 8013372:	487d      	ldr	r0, [pc, #500]	; (8013568 <udp_input+0x210>)
 8013374:	f005 fb92 	bl	8018a9c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8013378:	683b      	ldr	r3, [r7, #0]
 801337a:	2b00      	cmp	r3, #0
 801337c:	d105      	bne.n	801338a <udp_input+0x32>
 801337e:	4b78      	ldr	r3, [pc, #480]	; (8013560 <udp_input+0x208>)
 8013380:	22d0      	movs	r2, #208	; 0xd0
 8013382:	497a      	ldr	r1, [pc, #488]	; (801356c <udp_input+0x214>)
 8013384:	4878      	ldr	r0, [pc, #480]	; (8013568 <udp_input+0x210>)
 8013386:	f005 fb89 	bl	8018a9c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801338a:	687b      	ldr	r3, [r7, #4]
 801338c:	895b      	ldrh	r3, [r3, #10]
 801338e:	2b07      	cmp	r3, #7
 8013390:	d803      	bhi.n	801339a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8013392:	6878      	ldr	r0, [r7, #4]
 8013394:	f7fa f9b2 	bl	800d6fc <pbuf_free>
    goto end;
 8013398:	e0de      	b.n	8013558 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801339a:	687b      	ldr	r3, [r7, #4]
 801339c:	685b      	ldr	r3, [r3, #4]
 801339e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80133a0:	4b73      	ldr	r3, [pc, #460]	; (8013570 <udp_input+0x218>)
 80133a2:	695b      	ldr	r3, [r3, #20]
 80133a4:	4a72      	ldr	r2, [pc, #456]	; (8013570 <udp_input+0x218>)
 80133a6:	6812      	ldr	r2, [r2, #0]
 80133a8:	4611      	mov	r1, r2
 80133aa:	4618      	mov	r0, r3
 80133ac:	f003 fdf0 	bl	8016f90 <ip4_addr_isbroadcast_u32>
 80133b0:	4603      	mov	r3, r0
 80133b2:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80133b4:	697b      	ldr	r3, [r7, #20]
 80133b6:	881b      	ldrh	r3, [r3, #0]
 80133b8:	b29b      	uxth	r3, r3
 80133ba:	4618      	mov	r0, r3
 80133bc:	f7f8 fd50 	bl	800be60 <lwip_htons>
 80133c0:	4603      	mov	r3, r0
 80133c2:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80133c4:	697b      	ldr	r3, [r7, #20]
 80133c6:	885b      	ldrh	r3, [r3, #2]
 80133c8:	b29b      	uxth	r3, r3
 80133ca:	4618      	mov	r0, r3
 80133cc:	f7f8 fd48 	bl	800be60 <lwip_htons>
 80133d0:	4603      	mov	r3, r0
 80133d2:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80133d4:	2300      	movs	r3, #0
 80133d6:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 80133d8:	2300      	movs	r3, #0
 80133da:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80133dc:	2300      	movs	r3, #0
 80133de:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80133e0:	4b64      	ldr	r3, [pc, #400]	; (8013574 <udp_input+0x21c>)
 80133e2:	681b      	ldr	r3, [r3, #0]
 80133e4:	627b      	str	r3, [r7, #36]	; 0x24
 80133e6:	e054      	b.n	8013492 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80133e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133ea:	8a5b      	ldrh	r3, [r3, #18]
 80133ec:	89fa      	ldrh	r2, [r7, #14]
 80133ee:	429a      	cmp	r2, r3
 80133f0:	d14a      	bne.n	8013488 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80133f2:	7cfb      	ldrb	r3, [r7, #19]
 80133f4:	461a      	mov	r2, r3
 80133f6:	6839      	ldr	r1, [r7, #0]
 80133f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80133fa:	f7ff ff49 	bl	8013290 <udp_input_local_match>
 80133fe:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8013400:	2b00      	cmp	r3, #0
 8013402:	d041      	beq.n	8013488 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8013404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013406:	7c1b      	ldrb	r3, [r3, #16]
 8013408:	f003 0304 	and.w	r3, r3, #4
 801340c:	2b00      	cmp	r3, #0
 801340e:	d11d      	bne.n	801344c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8013410:	69fb      	ldr	r3, [r7, #28]
 8013412:	2b00      	cmp	r3, #0
 8013414:	d102      	bne.n	801341c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8013416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013418:	61fb      	str	r3, [r7, #28]
 801341a:	e017      	b.n	801344c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801341c:	7cfb      	ldrb	r3, [r7, #19]
 801341e:	2b00      	cmp	r3, #0
 8013420:	d014      	beq.n	801344c <udp_input+0xf4>
 8013422:	4b53      	ldr	r3, [pc, #332]	; (8013570 <udp_input+0x218>)
 8013424:	695b      	ldr	r3, [r3, #20]
 8013426:	f1b3 3fff 	cmp.w	r3, #4294967295
 801342a:	d10f      	bne.n	801344c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801342c:	69fb      	ldr	r3, [r7, #28]
 801342e:	681a      	ldr	r2, [r3, #0]
 8013430:	683b      	ldr	r3, [r7, #0]
 8013432:	3304      	adds	r3, #4
 8013434:	681b      	ldr	r3, [r3, #0]
 8013436:	429a      	cmp	r2, r3
 8013438:	d008      	beq.n	801344c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801343a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801343c:	681a      	ldr	r2, [r3, #0]
 801343e:	683b      	ldr	r3, [r7, #0]
 8013440:	3304      	adds	r3, #4
 8013442:	681b      	ldr	r3, [r3, #0]
 8013444:	429a      	cmp	r2, r3
 8013446:	d101      	bne.n	801344c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8013448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801344a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801344c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801344e:	8a9b      	ldrh	r3, [r3, #20]
 8013450:	8a3a      	ldrh	r2, [r7, #16]
 8013452:	429a      	cmp	r2, r3
 8013454:	d118      	bne.n	8013488 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013458:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801345a:	2b00      	cmp	r3, #0
 801345c:	d005      	beq.n	801346a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801345e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013460:	685a      	ldr	r2, [r3, #4]
 8013462:	4b43      	ldr	r3, [pc, #268]	; (8013570 <udp_input+0x218>)
 8013464:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013466:	429a      	cmp	r2, r3
 8013468:	d10e      	bne.n	8013488 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801346a:	6a3b      	ldr	r3, [r7, #32]
 801346c:	2b00      	cmp	r3, #0
 801346e:	d014      	beq.n	801349a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8013470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013472:	68da      	ldr	r2, [r3, #12]
 8013474:	6a3b      	ldr	r3, [r7, #32]
 8013476:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8013478:	4b3e      	ldr	r3, [pc, #248]	; (8013574 <udp_input+0x21c>)
 801347a:	681a      	ldr	r2, [r3, #0]
 801347c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801347e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8013480:	4a3c      	ldr	r2, [pc, #240]	; (8013574 <udp_input+0x21c>)
 8013482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013484:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8013486:	e008      	b.n	801349a <udp_input+0x142>
      }
    }

    prev = pcb;
 8013488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801348a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801348c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801348e:	68db      	ldr	r3, [r3, #12]
 8013490:	627b      	str	r3, [r7, #36]	; 0x24
 8013492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013494:	2b00      	cmp	r3, #0
 8013496:	d1a7      	bne.n	80133e8 <udp_input+0x90>
 8013498:	e000      	b.n	801349c <udp_input+0x144>
        break;
 801349a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801349c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801349e:	2b00      	cmp	r3, #0
 80134a0:	d101      	bne.n	80134a6 <udp_input+0x14e>
    pcb = uncon_pcb;
 80134a2:	69fb      	ldr	r3, [r7, #28]
 80134a4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80134a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134a8:	2b00      	cmp	r3, #0
 80134aa:	d002      	beq.n	80134b2 <udp_input+0x15a>
    for_us = 1;
 80134ac:	2301      	movs	r3, #1
 80134ae:	76fb      	strb	r3, [r7, #27]
 80134b0:	e00a      	b.n	80134c8 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80134b2:	683b      	ldr	r3, [r7, #0]
 80134b4:	3304      	adds	r3, #4
 80134b6:	681a      	ldr	r2, [r3, #0]
 80134b8:	4b2d      	ldr	r3, [pc, #180]	; (8013570 <udp_input+0x218>)
 80134ba:	695b      	ldr	r3, [r3, #20]
 80134bc:	429a      	cmp	r2, r3
 80134be:	bf0c      	ite	eq
 80134c0:	2301      	moveq	r3, #1
 80134c2:	2300      	movne	r3, #0
 80134c4:	b2db      	uxtb	r3, r3
 80134c6:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80134c8:	7efb      	ldrb	r3, [r7, #27]
 80134ca:	2b00      	cmp	r3, #0
 80134cc:	d041      	beq.n	8013552 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80134ce:	2108      	movs	r1, #8
 80134d0:	6878      	ldr	r0, [r7, #4]
 80134d2:	f7fa f88d 	bl	800d5f0 <pbuf_remove_header>
 80134d6:	4603      	mov	r3, r0
 80134d8:	2b00      	cmp	r3, #0
 80134da:	d00a      	beq.n	80134f2 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80134dc:	4b20      	ldr	r3, [pc, #128]	; (8013560 <udp_input+0x208>)
 80134de:	f44f 72b8 	mov.w	r2, #368	; 0x170
 80134e2:	4925      	ldr	r1, [pc, #148]	; (8013578 <udp_input+0x220>)
 80134e4:	4820      	ldr	r0, [pc, #128]	; (8013568 <udp_input+0x210>)
 80134e6:	f005 fad9 	bl	8018a9c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80134ea:	6878      	ldr	r0, [r7, #4]
 80134ec:	f7fa f906 	bl	800d6fc <pbuf_free>
      goto end;
 80134f0:	e032      	b.n	8013558 <udp_input+0x200>
    }

    if (pcb != NULL) {
 80134f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134f4:	2b00      	cmp	r3, #0
 80134f6:	d012      	beq.n	801351e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80134f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134fa:	699b      	ldr	r3, [r3, #24]
 80134fc:	2b00      	cmp	r3, #0
 80134fe:	d00a      	beq.n	8013516 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8013500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013502:	699c      	ldr	r4, [r3, #24]
 8013504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013506:	69d8      	ldr	r0, [r3, #28]
 8013508:	8a3b      	ldrh	r3, [r7, #16]
 801350a:	9300      	str	r3, [sp, #0]
 801350c:	4b1b      	ldr	r3, [pc, #108]	; (801357c <udp_input+0x224>)
 801350e:	687a      	ldr	r2, [r7, #4]
 8013510:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013512:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8013514:	e021      	b.n	801355a <udp_input+0x202>
        pbuf_free(p);
 8013516:	6878      	ldr	r0, [r7, #4]
 8013518:	f7fa f8f0 	bl	800d6fc <pbuf_free>
        goto end;
 801351c:	e01c      	b.n	8013558 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801351e:	7cfb      	ldrb	r3, [r7, #19]
 8013520:	2b00      	cmp	r3, #0
 8013522:	d112      	bne.n	801354a <udp_input+0x1f2>
 8013524:	4b12      	ldr	r3, [pc, #72]	; (8013570 <udp_input+0x218>)
 8013526:	695b      	ldr	r3, [r3, #20]
 8013528:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801352c:	2be0      	cmp	r3, #224	; 0xe0
 801352e:	d00c      	beq.n	801354a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8013530:	4b0f      	ldr	r3, [pc, #60]	; (8013570 <udp_input+0x218>)
 8013532:	899b      	ldrh	r3, [r3, #12]
 8013534:	3308      	adds	r3, #8
 8013536:	b29b      	uxth	r3, r3
 8013538:	b21b      	sxth	r3, r3
 801353a:	4619      	mov	r1, r3
 801353c:	6878      	ldr	r0, [r7, #4]
 801353e:	f7fa f8ca 	bl	800d6d6 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8013542:	2103      	movs	r1, #3
 8013544:	6878      	ldr	r0, [r7, #4]
 8013546:	f003 f9db 	bl	8016900 <icmp_dest_unreach>
      pbuf_free(p);
 801354a:	6878      	ldr	r0, [r7, #4]
 801354c:	f7fa f8d6 	bl	800d6fc <pbuf_free>
  return;
 8013550:	e003      	b.n	801355a <udp_input+0x202>
    pbuf_free(p);
 8013552:	6878      	ldr	r0, [r7, #4]
 8013554:	f7fa f8d2 	bl	800d6fc <pbuf_free>
  return;
 8013558:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801355a:	372c      	adds	r7, #44	; 0x2c
 801355c:	46bd      	mov	sp, r7
 801355e:	bd90      	pop	{r4, r7, pc}
 8013560:	0801bc3c 	.word	0x0801bc3c
 8013564:	0801bce0 	.word	0x0801bce0
 8013568:	0801bc90 	.word	0x0801bc90
 801356c:	0801bcf8 	.word	0x0801bcf8
 8013570:	2000976c 	.word	0x2000976c
 8013574:	2000c8e8 	.word	0x2000c8e8
 8013578:	0801bd14 	.word	0x0801bd14
 801357c:	2000977c 	.word	0x2000977c

08013580 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8013580:	b580      	push	{r7, lr}
 8013582:	b088      	sub	sp, #32
 8013584:	af02      	add	r7, sp, #8
 8013586:	60f8      	str	r0, [r7, #12]
 8013588:	60b9      	str	r1, [r7, #8]
 801358a:	607a      	str	r2, [r7, #4]
 801358c:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801358e:	68fb      	ldr	r3, [r7, #12]
 8013590:	2b00      	cmp	r3, #0
 8013592:	d109      	bne.n	80135a8 <udp_sendto_if+0x28>
 8013594:	4b2e      	ldr	r3, [pc, #184]	; (8013650 <udp_sendto_if+0xd0>)
 8013596:	f44f 7220 	mov.w	r2, #640	; 0x280
 801359a:	492e      	ldr	r1, [pc, #184]	; (8013654 <udp_sendto_if+0xd4>)
 801359c:	482e      	ldr	r0, [pc, #184]	; (8013658 <udp_sendto_if+0xd8>)
 801359e:	f005 fa7d 	bl	8018a9c <iprintf>
 80135a2:	f06f 030f 	mvn.w	r3, #15
 80135a6:	e04f      	b.n	8013648 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 80135a8:	68bb      	ldr	r3, [r7, #8]
 80135aa:	2b00      	cmp	r3, #0
 80135ac:	d109      	bne.n	80135c2 <udp_sendto_if+0x42>
 80135ae:	4b28      	ldr	r3, [pc, #160]	; (8013650 <udp_sendto_if+0xd0>)
 80135b0:	f240 2281 	movw	r2, #641	; 0x281
 80135b4:	4929      	ldr	r1, [pc, #164]	; (801365c <udp_sendto_if+0xdc>)
 80135b6:	4828      	ldr	r0, [pc, #160]	; (8013658 <udp_sendto_if+0xd8>)
 80135b8:	f005 fa70 	bl	8018a9c <iprintf>
 80135bc:	f06f 030f 	mvn.w	r3, #15
 80135c0:	e042      	b.n	8013648 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80135c2:	687b      	ldr	r3, [r7, #4]
 80135c4:	2b00      	cmp	r3, #0
 80135c6:	d109      	bne.n	80135dc <udp_sendto_if+0x5c>
 80135c8:	4b21      	ldr	r3, [pc, #132]	; (8013650 <udp_sendto_if+0xd0>)
 80135ca:	f240 2282 	movw	r2, #642	; 0x282
 80135ce:	4924      	ldr	r1, [pc, #144]	; (8013660 <udp_sendto_if+0xe0>)
 80135d0:	4821      	ldr	r0, [pc, #132]	; (8013658 <udp_sendto_if+0xd8>)
 80135d2:	f005 fa63 	bl	8018a9c <iprintf>
 80135d6:	f06f 030f 	mvn.w	r3, #15
 80135da:	e035      	b.n	8013648 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 80135dc:	6a3b      	ldr	r3, [r7, #32]
 80135de:	2b00      	cmp	r3, #0
 80135e0:	d109      	bne.n	80135f6 <udp_sendto_if+0x76>
 80135e2:	4b1b      	ldr	r3, [pc, #108]	; (8013650 <udp_sendto_if+0xd0>)
 80135e4:	f240 2283 	movw	r2, #643	; 0x283
 80135e8:	491e      	ldr	r1, [pc, #120]	; (8013664 <udp_sendto_if+0xe4>)
 80135ea:	481b      	ldr	r0, [pc, #108]	; (8013658 <udp_sendto_if+0xd8>)
 80135ec:	f005 fa56 	bl	8018a9c <iprintf>
 80135f0:	f06f 030f 	mvn.w	r3, #15
 80135f4:	e028      	b.n	8013648 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80135f6:	68fb      	ldr	r3, [r7, #12]
 80135f8:	2b00      	cmp	r3, #0
 80135fa:	d009      	beq.n	8013610 <udp_sendto_if+0x90>
 80135fc:	68fb      	ldr	r3, [r7, #12]
 80135fe:	681b      	ldr	r3, [r3, #0]
 8013600:	2b00      	cmp	r3, #0
 8013602:	d005      	beq.n	8013610 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8013604:	68fb      	ldr	r3, [r7, #12]
 8013606:	681b      	ldr	r3, [r3, #0]
 8013608:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801360c:	2be0      	cmp	r3, #224	; 0xe0
 801360e:	d103      	bne.n	8013618 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8013610:	6a3b      	ldr	r3, [r7, #32]
 8013612:	3304      	adds	r3, #4
 8013614:	617b      	str	r3, [r7, #20]
 8013616:	e00b      	b.n	8013630 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8013618:	68fb      	ldr	r3, [r7, #12]
 801361a:	681a      	ldr	r2, [r3, #0]
 801361c:	6a3b      	ldr	r3, [r7, #32]
 801361e:	3304      	adds	r3, #4
 8013620:	681b      	ldr	r3, [r3, #0]
 8013622:	429a      	cmp	r2, r3
 8013624:	d002      	beq.n	801362c <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8013626:	f06f 0303 	mvn.w	r3, #3
 801362a:	e00d      	b.n	8013648 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 801362c:	68fb      	ldr	r3, [r7, #12]
 801362e:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8013630:	887a      	ldrh	r2, [r7, #2]
 8013632:	697b      	ldr	r3, [r7, #20]
 8013634:	9301      	str	r3, [sp, #4]
 8013636:	6a3b      	ldr	r3, [r7, #32]
 8013638:	9300      	str	r3, [sp, #0]
 801363a:	4613      	mov	r3, r2
 801363c:	687a      	ldr	r2, [r7, #4]
 801363e:	68b9      	ldr	r1, [r7, #8]
 8013640:	68f8      	ldr	r0, [r7, #12]
 8013642:	f000 f811 	bl	8013668 <udp_sendto_if_src>
 8013646:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8013648:	4618      	mov	r0, r3
 801364a:	3718      	adds	r7, #24
 801364c:	46bd      	mov	sp, r7
 801364e:	bd80      	pop	{r7, pc}
 8013650:	0801bc3c 	.word	0x0801bc3c
 8013654:	0801bdb0 	.word	0x0801bdb0
 8013658:	0801bc90 	.word	0x0801bc90
 801365c:	0801bdcc 	.word	0x0801bdcc
 8013660:	0801bde8 	.word	0x0801bde8
 8013664:	0801be08 	.word	0x0801be08

08013668 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8013668:	b580      	push	{r7, lr}
 801366a:	b08c      	sub	sp, #48	; 0x30
 801366c:	af04      	add	r7, sp, #16
 801366e:	60f8      	str	r0, [r7, #12]
 8013670:	60b9      	str	r1, [r7, #8]
 8013672:	607a      	str	r2, [r7, #4]
 8013674:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8013676:	68fb      	ldr	r3, [r7, #12]
 8013678:	2b00      	cmp	r3, #0
 801367a:	d109      	bne.n	8013690 <udp_sendto_if_src+0x28>
 801367c:	4b65      	ldr	r3, [pc, #404]	; (8013814 <udp_sendto_if_src+0x1ac>)
 801367e:	f240 22d1 	movw	r2, #721	; 0x2d1
 8013682:	4965      	ldr	r1, [pc, #404]	; (8013818 <udp_sendto_if_src+0x1b0>)
 8013684:	4865      	ldr	r0, [pc, #404]	; (801381c <udp_sendto_if_src+0x1b4>)
 8013686:	f005 fa09 	bl	8018a9c <iprintf>
 801368a:	f06f 030f 	mvn.w	r3, #15
 801368e:	e0bc      	b.n	801380a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8013690:	68bb      	ldr	r3, [r7, #8]
 8013692:	2b00      	cmp	r3, #0
 8013694:	d109      	bne.n	80136aa <udp_sendto_if_src+0x42>
 8013696:	4b5f      	ldr	r3, [pc, #380]	; (8013814 <udp_sendto_if_src+0x1ac>)
 8013698:	f240 22d2 	movw	r2, #722	; 0x2d2
 801369c:	4960      	ldr	r1, [pc, #384]	; (8013820 <udp_sendto_if_src+0x1b8>)
 801369e:	485f      	ldr	r0, [pc, #380]	; (801381c <udp_sendto_if_src+0x1b4>)
 80136a0:	f005 f9fc 	bl	8018a9c <iprintf>
 80136a4:	f06f 030f 	mvn.w	r3, #15
 80136a8:	e0af      	b.n	801380a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80136aa:	687b      	ldr	r3, [r7, #4]
 80136ac:	2b00      	cmp	r3, #0
 80136ae:	d109      	bne.n	80136c4 <udp_sendto_if_src+0x5c>
 80136b0:	4b58      	ldr	r3, [pc, #352]	; (8013814 <udp_sendto_if_src+0x1ac>)
 80136b2:	f240 22d3 	movw	r2, #723	; 0x2d3
 80136b6:	495b      	ldr	r1, [pc, #364]	; (8013824 <udp_sendto_if_src+0x1bc>)
 80136b8:	4858      	ldr	r0, [pc, #352]	; (801381c <udp_sendto_if_src+0x1b4>)
 80136ba:	f005 f9ef 	bl	8018a9c <iprintf>
 80136be:	f06f 030f 	mvn.w	r3, #15
 80136c2:	e0a2      	b.n	801380a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 80136c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136c6:	2b00      	cmp	r3, #0
 80136c8:	d109      	bne.n	80136de <udp_sendto_if_src+0x76>
 80136ca:	4b52      	ldr	r3, [pc, #328]	; (8013814 <udp_sendto_if_src+0x1ac>)
 80136cc:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 80136d0:	4955      	ldr	r1, [pc, #340]	; (8013828 <udp_sendto_if_src+0x1c0>)
 80136d2:	4852      	ldr	r0, [pc, #328]	; (801381c <udp_sendto_if_src+0x1b4>)
 80136d4:	f005 f9e2 	bl	8018a9c <iprintf>
 80136d8:	f06f 030f 	mvn.w	r3, #15
 80136dc:	e095      	b.n	801380a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 80136de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136e0:	2b00      	cmp	r3, #0
 80136e2:	d109      	bne.n	80136f8 <udp_sendto_if_src+0x90>
 80136e4:	4b4b      	ldr	r3, [pc, #300]	; (8013814 <udp_sendto_if_src+0x1ac>)
 80136e6:	f240 22d5 	movw	r2, #725	; 0x2d5
 80136ea:	4950      	ldr	r1, [pc, #320]	; (801382c <udp_sendto_if_src+0x1c4>)
 80136ec:	484b      	ldr	r0, [pc, #300]	; (801381c <udp_sendto_if_src+0x1b4>)
 80136ee:	f005 f9d5 	bl	8018a9c <iprintf>
 80136f2:	f06f 030f 	mvn.w	r3, #15
 80136f6:	e088      	b.n	801380a <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 80136f8:	68fb      	ldr	r3, [r7, #12]
 80136fa:	8a5b      	ldrh	r3, [r3, #18]
 80136fc:	2b00      	cmp	r3, #0
 80136fe:	d10f      	bne.n	8013720 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8013700:	68f9      	ldr	r1, [r7, #12]
 8013702:	68fb      	ldr	r3, [r7, #12]
 8013704:	8a5b      	ldrh	r3, [r3, #18]
 8013706:	461a      	mov	r2, r3
 8013708:	68f8      	ldr	r0, [r7, #12]
 801370a:	f000 f893 	bl	8013834 <udp_bind>
 801370e:	4603      	mov	r3, r0
 8013710:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8013712:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8013716:	2b00      	cmp	r3, #0
 8013718:	d002      	beq.n	8013720 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801371a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801371e:	e074      	b.n	801380a <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8013720:	68bb      	ldr	r3, [r7, #8]
 8013722:	891b      	ldrh	r3, [r3, #8]
 8013724:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8013728:	4293      	cmp	r3, r2
 801372a:	d902      	bls.n	8013732 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 801372c:	f04f 33ff 	mov.w	r3, #4294967295
 8013730:	e06b      	b.n	801380a <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8013732:	2108      	movs	r1, #8
 8013734:	68b8      	ldr	r0, [r7, #8]
 8013736:	f7f9 ff4b 	bl	800d5d0 <pbuf_add_header>
 801373a:	4603      	mov	r3, r0
 801373c:	2b00      	cmp	r3, #0
 801373e:	d015      	beq.n	801376c <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8013740:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013744:	2108      	movs	r1, #8
 8013746:	2022      	movs	r0, #34	; 0x22
 8013748:	f7f9 fcf4 	bl	800d134 <pbuf_alloc>
 801374c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801374e:	69fb      	ldr	r3, [r7, #28]
 8013750:	2b00      	cmp	r3, #0
 8013752:	d102      	bne.n	801375a <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8013754:	f04f 33ff 	mov.w	r3, #4294967295
 8013758:	e057      	b.n	801380a <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 801375a:	68bb      	ldr	r3, [r7, #8]
 801375c:	891b      	ldrh	r3, [r3, #8]
 801375e:	2b00      	cmp	r3, #0
 8013760:	d006      	beq.n	8013770 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8013762:	68b9      	ldr	r1, [r7, #8]
 8013764:	69f8      	ldr	r0, [r7, #28]
 8013766:	f7fa f8ed 	bl	800d944 <pbuf_chain>
 801376a:	e001      	b.n	8013770 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801376c:	68bb      	ldr	r3, [r7, #8]
 801376e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8013770:	69fb      	ldr	r3, [r7, #28]
 8013772:	895b      	ldrh	r3, [r3, #10]
 8013774:	2b07      	cmp	r3, #7
 8013776:	d806      	bhi.n	8013786 <udp_sendto_if_src+0x11e>
 8013778:	4b26      	ldr	r3, [pc, #152]	; (8013814 <udp_sendto_if_src+0x1ac>)
 801377a:	f240 320d 	movw	r2, #781	; 0x30d
 801377e:	492c      	ldr	r1, [pc, #176]	; (8013830 <udp_sendto_if_src+0x1c8>)
 8013780:	4826      	ldr	r0, [pc, #152]	; (801381c <udp_sendto_if_src+0x1b4>)
 8013782:	f005 f98b 	bl	8018a9c <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8013786:	69fb      	ldr	r3, [r7, #28]
 8013788:	685b      	ldr	r3, [r3, #4]
 801378a:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801378c:	68fb      	ldr	r3, [r7, #12]
 801378e:	8a5b      	ldrh	r3, [r3, #18]
 8013790:	4618      	mov	r0, r3
 8013792:	f7f8 fb65 	bl	800be60 <lwip_htons>
 8013796:	4603      	mov	r3, r0
 8013798:	461a      	mov	r2, r3
 801379a:	697b      	ldr	r3, [r7, #20]
 801379c:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801379e:	887b      	ldrh	r3, [r7, #2]
 80137a0:	4618      	mov	r0, r3
 80137a2:	f7f8 fb5d 	bl	800be60 <lwip_htons>
 80137a6:	4603      	mov	r3, r0
 80137a8:	461a      	mov	r2, r3
 80137aa:	697b      	ldr	r3, [r7, #20]
 80137ac:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 80137ae:	697b      	ldr	r3, [r7, #20]
 80137b0:	2200      	movs	r2, #0
 80137b2:	719a      	strb	r2, [r3, #6]
 80137b4:	2200      	movs	r2, #0
 80137b6:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 80137b8:	69fb      	ldr	r3, [r7, #28]
 80137ba:	891b      	ldrh	r3, [r3, #8]
 80137bc:	4618      	mov	r0, r3
 80137be:	f7f8 fb4f 	bl	800be60 <lwip_htons>
 80137c2:	4603      	mov	r3, r0
 80137c4:	461a      	mov	r2, r3
 80137c6:	697b      	ldr	r3, [r7, #20]
 80137c8:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 80137ca:	2311      	movs	r3, #17
 80137cc:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 80137ce:	68fb      	ldr	r3, [r7, #12]
 80137d0:	7adb      	ldrb	r3, [r3, #11]
 80137d2:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 80137d4:	68fb      	ldr	r3, [r7, #12]
 80137d6:	7a9b      	ldrb	r3, [r3, #10]
 80137d8:	7cb9      	ldrb	r1, [r7, #18]
 80137da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80137dc:	9202      	str	r2, [sp, #8]
 80137de:	7cfa      	ldrb	r2, [r7, #19]
 80137e0:	9201      	str	r2, [sp, #4]
 80137e2:	9300      	str	r3, [sp, #0]
 80137e4:	460b      	mov	r3, r1
 80137e6:	687a      	ldr	r2, [r7, #4]
 80137e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80137ea:	69f8      	ldr	r0, [r7, #28]
 80137ec:	f003 fb22 	bl	8016e34 <ip4_output_if_src>
 80137f0:	4603      	mov	r3, r0
 80137f2:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 80137f4:	69fa      	ldr	r2, [r7, #28]
 80137f6:	68bb      	ldr	r3, [r7, #8]
 80137f8:	429a      	cmp	r2, r3
 80137fa:	d004      	beq.n	8013806 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 80137fc:	69f8      	ldr	r0, [r7, #28]
 80137fe:	f7f9 ff7d 	bl	800d6fc <pbuf_free>
    q = NULL;
 8013802:	2300      	movs	r3, #0
 8013804:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8013806:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801380a:	4618      	mov	r0, r3
 801380c:	3720      	adds	r7, #32
 801380e:	46bd      	mov	sp, r7
 8013810:	bd80      	pop	{r7, pc}
 8013812:	bf00      	nop
 8013814:	0801bc3c 	.word	0x0801bc3c
 8013818:	0801be28 	.word	0x0801be28
 801381c:	0801bc90 	.word	0x0801bc90
 8013820:	0801be48 	.word	0x0801be48
 8013824:	0801be68 	.word	0x0801be68
 8013828:	0801be8c 	.word	0x0801be8c
 801382c:	0801beb0 	.word	0x0801beb0
 8013830:	0801bed4 	.word	0x0801bed4

08013834 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8013834:	b580      	push	{r7, lr}
 8013836:	b086      	sub	sp, #24
 8013838:	af00      	add	r7, sp, #0
 801383a:	60f8      	str	r0, [r7, #12]
 801383c:	60b9      	str	r1, [r7, #8]
 801383e:	4613      	mov	r3, r2
 8013840:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8013842:	68bb      	ldr	r3, [r7, #8]
 8013844:	2b00      	cmp	r3, #0
 8013846:	d101      	bne.n	801384c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8013848:	4b39      	ldr	r3, [pc, #228]	; (8013930 <udp_bind+0xfc>)
 801384a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801384c:	68fb      	ldr	r3, [r7, #12]
 801384e:	2b00      	cmp	r3, #0
 8013850:	d109      	bne.n	8013866 <udp_bind+0x32>
 8013852:	4b38      	ldr	r3, [pc, #224]	; (8013934 <udp_bind+0x100>)
 8013854:	f240 32b7 	movw	r2, #951	; 0x3b7
 8013858:	4937      	ldr	r1, [pc, #220]	; (8013938 <udp_bind+0x104>)
 801385a:	4838      	ldr	r0, [pc, #224]	; (801393c <udp_bind+0x108>)
 801385c:	f005 f91e 	bl	8018a9c <iprintf>
 8013860:	f06f 030f 	mvn.w	r3, #15
 8013864:	e060      	b.n	8013928 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8013866:	2300      	movs	r3, #0
 8013868:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801386a:	4b35      	ldr	r3, [pc, #212]	; (8013940 <udp_bind+0x10c>)
 801386c:	681b      	ldr	r3, [r3, #0]
 801386e:	617b      	str	r3, [r7, #20]
 8013870:	e009      	b.n	8013886 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8013872:	68fa      	ldr	r2, [r7, #12]
 8013874:	697b      	ldr	r3, [r7, #20]
 8013876:	429a      	cmp	r2, r3
 8013878:	d102      	bne.n	8013880 <udp_bind+0x4c>
      rebind = 1;
 801387a:	2301      	movs	r3, #1
 801387c:	74fb      	strb	r3, [r7, #19]
      break;
 801387e:	e005      	b.n	801388c <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013880:	697b      	ldr	r3, [r7, #20]
 8013882:	68db      	ldr	r3, [r3, #12]
 8013884:	617b      	str	r3, [r7, #20]
 8013886:	697b      	ldr	r3, [r7, #20]
 8013888:	2b00      	cmp	r3, #0
 801388a:	d1f2      	bne.n	8013872 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801388c:	88fb      	ldrh	r3, [r7, #6]
 801388e:	2b00      	cmp	r3, #0
 8013890:	d109      	bne.n	80138a6 <udp_bind+0x72>
    port = udp_new_port();
 8013892:	f7ff fcc5 	bl	8013220 <udp_new_port>
 8013896:	4603      	mov	r3, r0
 8013898:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801389a:	88fb      	ldrh	r3, [r7, #6]
 801389c:	2b00      	cmp	r3, #0
 801389e:	d12c      	bne.n	80138fa <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 80138a0:	f06f 0307 	mvn.w	r3, #7
 80138a4:	e040      	b.n	8013928 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80138a6:	4b26      	ldr	r3, [pc, #152]	; (8013940 <udp_bind+0x10c>)
 80138a8:	681b      	ldr	r3, [r3, #0]
 80138aa:	617b      	str	r3, [r7, #20]
 80138ac:	e022      	b.n	80138f4 <udp_bind+0xc0>
      if (pcb != ipcb) {
 80138ae:	68fa      	ldr	r2, [r7, #12]
 80138b0:	697b      	ldr	r3, [r7, #20]
 80138b2:	429a      	cmp	r2, r3
 80138b4:	d01b      	beq.n	80138ee <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 80138b6:	697b      	ldr	r3, [r7, #20]
 80138b8:	8a5b      	ldrh	r3, [r3, #18]
 80138ba:	88fa      	ldrh	r2, [r7, #6]
 80138bc:	429a      	cmp	r2, r3
 80138be:	d116      	bne.n	80138ee <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80138c0:	697b      	ldr	r3, [r7, #20]
 80138c2:	681a      	ldr	r2, [r3, #0]
 80138c4:	68bb      	ldr	r3, [r7, #8]
 80138c6:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 80138c8:	429a      	cmp	r2, r3
 80138ca:	d00d      	beq.n	80138e8 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80138cc:	68bb      	ldr	r3, [r7, #8]
 80138ce:	2b00      	cmp	r3, #0
 80138d0:	d00a      	beq.n	80138e8 <udp_bind+0xb4>
 80138d2:	68bb      	ldr	r3, [r7, #8]
 80138d4:	681b      	ldr	r3, [r3, #0]
 80138d6:	2b00      	cmp	r3, #0
 80138d8:	d006      	beq.n	80138e8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80138da:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80138dc:	2b00      	cmp	r3, #0
 80138de:	d003      	beq.n	80138e8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80138e0:	697b      	ldr	r3, [r7, #20]
 80138e2:	681b      	ldr	r3, [r3, #0]
 80138e4:	2b00      	cmp	r3, #0
 80138e6:	d102      	bne.n	80138ee <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 80138e8:	f06f 0307 	mvn.w	r3, #7
 80138ec:	e01c      	b.n	8013928 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80138ee:	697b      	ldr	r3, [r7, #20]
 80138f0:	68db      	ldr	r3, [r3, #12]
 80138f2:	617b      	str	r3, [r7, #20]
 80138f4:	697b      	ldr	r3, [r7, #20]
 80138f6:	2b00      	cmp	r3, #0
 80138f8:	d1d9      	bne.n	80138ae <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80138fa:	68bb      	ldr	r3, [r7, #8]
 80138fc:	2b00      	cmp	r3, #0
 80138fe:	d002      	beq.n	8013906 <udp_bind+0xd2>
 8013900:	68bb      	ldr	r3, [r7, #8]
 8013902:	681b      	ldr	r3, [r3, #0]
 8013904:	e000      	b.n	8013908 <udp_bind+0xd4>
 8013906:	2300      	movs	r3, #0
 8013908:	68fa      	ldr	r2, [r7, #12]
 801390a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801390c:	68fb      	ldr	r3, [r7, #12]
 801390e:	88fa      	ldrh	r2, [r7, #6]
 8013910:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8013912:	7cfb      	ldrb	r3, [r7, #19]
 8013914:	2b00      	cmp	r3, #0
 8013916:	d106      	bne.n	8013926 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8013918:	4b09      	ldr	r3, [pc, #36]	; (8013940 <udp_bind+0x10c>)
 801391a:	681a      	ldr	r2, [r3, #0]
 801391c:	68fb      	ldr	r3, [r7, #12]
 801391e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8013920:	4a07      	ldr	r2, [pc, #28]	; (8013940 <udp_bind+0x10c>)
 8013922:	68fb      	ldr	r3, [r7, #12]
 8013924:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8013926:	2300      	movs	r3, #0
}
 8013928:	4618      	mov	r0, r3
 801392a:	3718      	adds	r7, #24
 801392c:	46bd      	mov	sp, r7
 801392e:	bd80      	pop	{r7, pc}
 8013930:	0801cbb4 	.word	0x0801cbb4
 8013934:	0801bc3c 	.word	0x0801bc3c
 8013938:	0801bf04 	.word	0x0801bf04
 801393c:	0801bc90 	.word	0x0801bc90
 8013940:	2000c8e8 	.word	0x2000c8e8

08013944 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8013944:	b580      	push	{r7, lr}
 8013946:	b086      	sub	sp, #24
 8013948:	af00      	add	r7, sp, #0
 801394a:	60f8      	str	r0, [r7, #12]
 801394c:	60b9      	str	r1, [r7, #8]
 801394e:	4613      	mov	r3, r2
 8013950:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8013952:	68fb      	ldr	r3, [r7, #12]
 8013954:	2b00      	cmp	r3, #0
 8013956:	d109      	bne.n	801396c <udp_connect+0x28>
 8013958:	4b2c      	ldr	r3, [pc, #176]	; (8013a0c <udp_connect+0xc8>)
 801395a:	f240 4235 	movw	r2, #1077	; 0x435
 801395e:	492c      	ldr	r1, [pc, #176]	; (8013a10 <udp_connect+0xcc>)
 8013960:	482c      	ldr	r0, [pc, #176]	; (8013a14 <udp_connect+0xd0>)
 8013962:	f005 f89b 	bl	8018a9c <iprintf>
 8013966:	f06f 030f 	mvn.w	r3, #15
 801396a:	e04b      	b.n	8013a04 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801396c:	68bb      	ldr	r3, [r7, #8]
 801396e:	2b00      	cmp	r3, #0
 8013970:	d109      	bne.n	8013986 <udp_connect+0x42>
 8013972:	4b26      	ldr	r3, [pc, #152]	; (8013a0c <udp_connect+0xc8>)
 8013974:	f240 4236 	movw	r2, #1078	; 0x436
 8013978:	4927      	ldr	r1, [pc, #156]	; (8013a18 <udp_connect+0xd4>)
 801397a:	4826      	ldr	r0, [pc, #152]	; (8013a14 <udp_connect+0xd0>)
 801397c:	f005 f88e 	bl	8018a9c <iprintf>
 8013980:	f06f 030f 	mvn.w	r3, #15
 8013984:	e03e      	b.n	8013a04 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8013986:	68fb      	ldr	r3, [r7, #12]
 8013988:	8a5b      	ldrh	r3, [r3, #18]
 801398a:	2b00      	cmp	r3, #0
 801398c:	d10f      	bne.n	80139ae <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801398e:	68f9      	ldr	r1, [r7, #12]
 8013990:	68fb      	ldr	r3, [r7, #12]
 8013992:	8a5b      	ldrh	r3, [r3, #18]
 8013994:	461a      	mov	r2, r3
 8013996:	68f8      	ldr	r0, [r7, #12]
 8013998:	f7ff ff4c 	bl	8013834 <udp_bind>
 801399c:	4603      	mov	r3, r0
 801399e:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 80139a0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80139a4:	2b00      	cmp	r3, #0
 80139a6:	d002      	beq.n	80139ae <udp_connect+0x6a>
      return err;
 80139a8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80139ac:	e02a      	b.n	8013a04 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 80139ae:	68bb      	ldr	r3, [r7, #8]
 80139b0:	2b00      	cmp	r3, #0
 80139b2:	d002      	beq.n	80139ba <udp_connect+0x76>
 80139b4:	68bb      	ldr	r3, [r7, #8]
 80139b6:	681b      	ldr	r3, [r3, #0]
 80139b8:	e000      	b.n	80139bc <udp_connect+0x78>
 80139ba:	2300      	movs	r3, #0
 80139bc:	68fa      	ldr	r2, [r7, #12]
 80139be:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 80139c0:	68fb      	ldr	r3, [r7, #12]
 80139c2:	88fa      	ldrh	r2, [r7, #6]
 80139c4:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 80139c6:	68fb      	ldr	r3, [r7, #12]
 80139c8:	7c1b      	ldrb	r3, [r3, #16]
 80139ca:	f043 0304 	orr.w	r3, r3, #4
 80139ce:	b2da      	uxtb	r2, r3
 80139d0:	68fb      	ldr	r3, [r7, #12]
 80139d2:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80139d4:	4b11      	ldr	r3, [pc, #68]	; (8013a1c <udp_connect+0xd8>)
 80139d6:	681b      	ldr	r3, [r3, #0]
 80139d8:	617b      	str	r3, [r7, #20]
 80139da:	e008      	b.n	80139ee <udp_connect+0xaa>
    if (pcb == ipcb) {
 80139dc:	68fa      	ldr	r2, [r7, #12]
 80139de:	697b      	ldr	r3, [r7, #20]
 80139e0:	429a      	cmp	r2, r3
 80139e2:	d101      	bne.n	80139e8 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 80139e4:	2300      	movs	r3, #0
 80139e6:	e00d      	b.n	8013a04 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80139e8:	697b      	ldr	r3, [r7, #20]
 80139ea:	68db      	ldr	r3, [r3, #12]
 80139ec:	617b      	str	r3, [r7, #20]
 80139ee:	697b      	ldr	r3, [r7, #20]
 80139f0:	2b00      	cmp	r3, #0
 80139f2:	d1f3      	bne.n	80139dc <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 80139f4:	4b09      	ldr	r3, [pc, #36]	; (8013a1c <udp_connect+0xd8>)
 80139f6:	681a      	ldr	r2, [r3, #0]
 80139f8:	68fb      	ldr	r3, [r7, #12]
 80139fa:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 80139fc:	4a07      	ldr	r2, [pc, #28]	; (8013a1c <udp_connect+0xd8>)
 80139fe:	68fb      	ldr	r3, [r7, #12]
 8013a00:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8013a02:	2300      	movs	r3, #0
}
 8013a04:	4618      	mov	r0, r3
 8013a06:	3718      	adds	r7, #24
 8013a08:	46bd      	mov	sp, r7
 8013a0a:	bd80      	pop	{r7, pc}
 8013a0c:	0801bc3c 	.word	0x0801bc3c
 8013a10:	0801bf1c 	.word	0x0801bf1c
 8013a14:	0801bc90 	.word	0x0801bc90
 8013a18:	0801bf38 	.word	0x0801bf38
 8013a1c:	2000c8e8 	.word	0x2000c8e8

08013a20 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8013a20:	b580      	push	{r7, lr}
 8013a22:	b084      	sub	sp, #16
 8013a24:	af00      	add	r7, sp, #0
 8013a26:	60f8      	str	r0, [r7, #12]
 8013a28:	60b9      	str	r1, [r7, #8]
 8013a2a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8013a2c:	68fb      	ldr	r3, [r7, #12]
 8013a2e:	2b00      	cmp	r3, #0
 8013a30:	d107      	bne.n	8013a42 <udp_recv+0x22>
 8013a32:	4b08      	ldr	r3, [pc, #32]	; (8013a54 <udp_recv+0x34>)
 8013a34:	f240 428a 	movw	r2, #1162	; 0x48a
 8013a38:	4907      	ldr	r1, [pc, #28]	; (8013a58 <udp_recv+0x38>)
 8013a3a:	4808      	ldr	r0, [pc, #32]	; (8013a5c <udp_recv+0x3c>)
 8013a3c:	f005 f82e 	bl	8018a9c <iprintf>
 8013a40:	e005      	b.n	8013a4e <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8013a42:	68fb      	ldr	r3, [r7, #12]
 8013a44:	68ba      	ldr	r2, [r7, #8]
 8013a46:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8013a48:	68fb      	ldr	r3, [r7, #12]
 8013a4a:	687a      	ldr	r2, [r7, #4]
 8013a4c:	61da      	str	r2, [r3, #28]
}
 8013a4e:	3710      	adds	r7, #16
 8013a50:	46bd      	mov	sp, r7
 8013a52:	bd80      	pop	{r7, pc}
 8013a54:	0801bc3c 	.word	0x0801bc3c
 8013a58:	0801bf70 	.word	0x0801bf70
 8013a5c:	0801bc90 	.word	0x0801bc90

08013a60 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8013a60:	b580      	push	{r7, lr}
 8013a62:	b084      	sub	sp, #16
 8013a64:	af00      	add	r7, sp, #0
 8013a66:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8013a68:	687b      	ldr	r3, [r7, #4]
 8013a6a:	2b00      	cmp	r3, #0
 8013a6c:	d107      	bne.n	8013a7e <udp_remove+0x1e>
 8013a6e:	4b19      	ldr	r3, [pc, #100]	; (8013ad4 <udp_remove+0x74>)
 8013a70:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8013a74:	4918      	ldr	r1, [pc, #96]	; (8013ad8 <udp_remove+0x78>)
 8013a76:	4819      	ldr	r0, [pc, #100]	; (8013adc <udp_remove+0x7c>)
 8013a78:	f005 f810 	bl	8018a9c <iprintf>
 8013a7c:	e026      	b.n	8013acc <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8013a7e:	4b18      	ldr	r3, [pc, #96]	; (8013ae0 <udp_remove+0x80>)
 8013a80:	681b      	ldr	r3, [r3, #0]
 8013a82:	687a      	ldr	r2, [r7, #4]
 8013a84:	429a      	cmp	r2, r3
 8013a86:	d105      	bne.n	8013a94 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8013a88:	4b15      	ldr	r3, [pc, #84]	; (8013ae0 <udp_remove+0x80>)
 8013a8a:	681b      	ldr	r3, [r3, #0]
 8013a8c:	68db      	ldr	r3, [r3, #12]
 8013a8e:	4a14      	ldr	r2, [pc, #80]	; (8013ae0 <udp_remove+0x80>)
 8013a90:	6013      	str	r3, [r2, #0]
 8013a92:	e017      	b.n	8013ac4 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8013a94:	4b12      	ldr	r3, [pc, #72]	; (8013ae0 <udp_remove+0x80>)
 8013a96:	681b      	ldr	r3, [r3, #0]
 8013a98:	60fb      	str	r3, [r7, #12]
 8013a9a:	e010      	b.n	8013abe <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8013a9c:	68fb      	ldr	r3, [r7, #12]
 8013a9e:	68db      	ldr	r3, [r3, #12]
 8013aa0:	2b00      	cmp	r3, #0
 8013aa2:	d009      	beq.n	8013ab8 <udp_remove+0x58>
 8013aa4:	68fb      	ldr	r3, [r7, #12]
 8013aa6:	68db      	ldr	r3, [r3, #12]
 8013aa8:	687a      	ldr	r2, [r7, #4]
 8013aaa:	429a      	cmp	r2, r3
 8013aac:	d104      	bne.n	8013ab8 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8013aae:	687b      	ldr	r3, [r7, #4]
 8013ab0:	68da      	ldr	r2, [r3, #12]
 8013ab2:	68fb      	ldr	r3, [r7, #12]
 8013ab4:	60da      	str	r2, [r3, #12]
        break;
 8013ab6:	e005      	b.n	8013ac4 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8013ab8:	68fb      	ldr	r3, [r7, #12]
 8013aba:	68db      	ldr	r3, [r3, #12]
 8013abc:	60fb      	str	r3, [r7, #12]
 8013abe:	68fb      	ldr	r3, [r7, #12]
 8013ac0:	2b00      	cmp	r3, #0
 8013ac2:	d1eb      	bne.n	8013a9c <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8013ac4:	6879      	ldr	r1, [r7, #4]
 8013ac6:	2000      	movs	r0, #0
 8013ac8:	f7f8 ffd0 	bl	800ca6c <memp_free>
}
 8013acc:	3710      	adds	r7, #16
 8013ace:	46bd      	mov	sp, r7
 8013ad0:	bd80      	pop	{r7, pc}
 8013ad2:	bf00      	nop
 8013ad4:	0801bc3c 	.word	0x0801bc3c
 8013ad8:	0801bf88 	.word	0x0801bf88
 8013adc:	0801bc90 	.word	0x0801bc90
 8013ae0:	2000c8e8 	.word	0x2000c8e8

08013ae4 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8013ae4:	b580      	push	{r7, lr}
 8013ae6:	b082      	sub	sp, #8
 8013ae8:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8013aea:	2000      	movs	r0, #0
 8013aec:	f7f8 ff48 	bl	800c980 <memp_malloc>
 8013af0:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8013af2:	687b      	ldr	r3, [r7, #4]
 8013af4:	2b00      	cmp	r3, #0
 8013af6:	d007      	beq.n	8013b08 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8013af8:	2220      	movs	r2, #32
 8013afa:	2100      	movs	r1, #0
 8013afc:	6878      	ldr	r0, [r7, #4]
 8013afe:	f004 ffc5 	bl	8018a8c <memset>
    pcb->ttl = UDP_TTL;
 8013b02:	687b      	ldr	r3, [r7, #4]
 8013b04:	22ff      	movs	r2, #255	; 0xff
 8013b06:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8013b08:	687b      	ldr	r3, [r7, #4]
}
 8013b0a:	4618      	mov	r0, r3
 8013b0c:	3708      	adds	r7, #8
 8013b0e:	46bd      	mov	sp, r7
 8013b10:	bd80      	pop	{r7, pc}
	...

08013b14 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8013b14:	b480      	push	{r7}
 8013b16:	b085      	sub	sp, #20
 8013b18:	af00      	add	r7, sp, #0
 8013b1a:	6078      	str	r0, [r7, #4]
 8013b1c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8013b1e:	687b      	ldr	r3, [r7, #4]
 8013b20:	2b00      	cmp	r3, #0
 8013b22:	d01e      	beq.n	8013b62 <udp_netif_ip_addr_changed+0x4e>
 8013b24:	687b      	ldr	r3, [r7, #4]
 8013b26:	681b      	ldr	r3, [r3, #0]
 8013b28:	2b00      	cmp	r3, #0
 8013b2a:	d01a      	beq.n	8013b62 <udp_netif_ip_addr_changed+0x4e>
 8013b2c:	683b      	ldr	r3, [r7, #0]
 8013b2e:	2b00      	cmp	r3, #0
 8013b30:	d017      	beq.n	8013b62 <udp_netif_ip_addr_changed+0x4e>
 8013b32:	683b      	ldr	r3, [r7, #0]
 8013b34:	681b      	ldr	r3, [r3, #0]
 8013b36:	2b00      	cmp	r3, #0
 8013b38:	d013      	beq.n	8013b62 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8013b3a:	4b0d      	ldr	r3, [pc, #52]	; (8013b70 <udp_netif_ip_addr_changed+0x5c>)
 8013b3c:	681b      	ldr	r3, [r3, #0]
 8013b3e:	60fb      	str	r3, [r7, #12]
 8013b40:	e00c      	b.n	8013b5c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8013b42:	68fb      	ldr	r3, [r7, #12]
 8013b44:	681a      	ldr	r2, [r3, #0]
 8013b46:	687b      	ldr	r3, [r7, #4]
 8013b48:	681b      	ldr	r3, [r3, #0]
 8013b4a:	429a      	cmp	r2, r3
 8013b4c:	d103      	bne.n	8013b56 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8013b4e:	683b      	ldr	r3, [r7, #0]
 8013b50:	681a      	ldr	r2, [r3, #0]
 8013b52:	68fb      	ldr	r3, [r7, #12]
 8013b54:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8013b56:	68fb      	ldr	r3, [r7, #12]
 8013b58:	68db      	ldr	r3, [r3, #12]
 8013b5a:	60fb      	str	r3, [r7, #12]
 8013b5c:	68fb      	ldr	r3, [r7, #12]
 8013b5e:	2b00      	cmp	r3, #0
 8013b60:	d1ef      	bne.n	8013b42 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8013b62:	bf00      	nop
 8013b64:	3714      	adds	r7, #20
 8013b66:	46bd      	mov	sp, r7
 8013b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b6c:	4770      	bx	lr
 8013b6e:	bf00      	nop
 8013b70:	2000c8e8 	.word	0x2000c8e8

08013b74 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8013b74:	b580      	push	{r7, lr}
 8013b76:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8013b78:	4b20      	ldr	r3, [pc, #128]	; (8013bfc <dhcp_inc_pcb_refcount+0x88>)
 8013b7a:	781b      	ldrb	r3, [r3, #0]
 8013b7c:	2b00      	cmp	r3, #0
 8013b7e:	d133      	bne.n	8013be8 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8013b80:	4b1f      	ldr	r3, [pc, #124]	; (8013c00 <dhcp_inc_pcb_refcount+0x8c>)
 8013b82:	681b      	ldr	r3, [r3, #0]
 8013b84:	2b00      	cmp	r3, #0
 8013b86:	d005      	beq.n	8013b94 <dhcp_inc_pcb_refcount+0x20>
 8013b88:	4b1e      	ldr	r3, [pc, #120]	; (8013c04 <dhcp_inc_pcb_refcount+0x90>)
 8013b8a:	22e5      	movs	r2, #229	; 0xe5
 8013b8c:	491e      	ldr	r1, [pc, #120]	; (8013c08 <dhcp_inc_pcb_refcount+0x94>)
 8013b8e:	481f      	ldr	r0, [pc, #124]	; (8013c0c <dhcp_inc_pcb_refcount+0x98>)
 8013b90:	f004 ff84 	bl	8018a9c <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8013b94:	f7ff ffa6 	bl	8013ae4 <udp_new>
 8013b98:	4603      	mov	r3, r0
 8013b9a:	4a19      	ldr	r2, [pc, #100]	; (8013c00 <dhcp_inc_pcb_refcount+0x8c>)
 8013b9c:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 8013b9e:	4b18      	ldr	r3, [pc, #96]	; (8013c00 <dhcp_inc_pcb_refcount+0x8c>)
 8013ba0:	681b      	ldr	r3, [r3, #0]
 8013ba2:	2b00      	cmp	r3, #0
 8013ba4:	d102      	bne.n	8013bac <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 8013ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8013baa:	e024      	b.n	8013bf6 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8013bac:	4b14      	ldr	r3, [pc, #80]	; (8013c00 <dhcp_inc_pcb_refcount+0x8c>)
 8013bae:	681b      	ldr	r3, [r3, #0]
 8013bb0:	7a5a      	ldrb	r2, [r3, #9]
 8013bb2:	4b13      	ldr	r3, [pc, #76]	; (8013c00 <dhcp_inc_pcb_refcount+0x8c>)
 8013bb4:	681b      	ldr	r3, [r3, #0]
 8013bb6:	f042 0220 	orr.w	r2, r2, #32
 8013bba:	b2d2      	uxtb	r2, r2
 8013bbc:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8013bbe:	4b10      	ldr	r3, [pc, #64]	; (8013c00 <dhcp_inc_pcb_refcount+0x8c>)
 8013bc0:	681b      	ldr	r3, [r3, #0]
 8013bc2:	2244      	movs	r2, #68	; 0x44
 8013bc4:	4912      	ldr	r1, [pc, #72]	; (8013c10 <dhcp_inc_pcb_refcount+0x9c>)
 8013bc6:	4618      	mov	r0, r3
 8013bc8:	f7ff fe34 	bl	8013834 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8013bcc:	4b0c      	ldr	r3, [pc, #48]	; (8013c00 <dhcp_inc_pcb_refcount+0x8c>)
 8013bce:	681b      	ldr	r3, [r3, #0]
 8013bd0:	2243      	movs	r2, #67	; 0x43
 8013bd2:	490f      	ldr	r1, [pc, #60]	; (8013c10 <dhcp_inc_pcb_refcount+0x9c>)
 8013bd4:	4618      	mov	r0, r3
 8013bd6:	f7ff feb5 	bl	8013944 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8013bda:	4b09      	ldr	r3, [pc, #36]	; (8013c00 <dhcp_inc_pcb_refcount+0x8c>)
 8013bdc:	681b      	ldr	r3, [r3, #0]
 8013bde:	2200      	movs	r2, #0
 8013be0:	490c      	ldr	r1, [pc, #48]	; (8013c14 <dhcp_inc_pcb_refcount+0xa0>)
 8013be2:	4618      	mov	r0, r3
 8013be4:	f7ff ff1c 	bl	8013a20 <udp_recv>
  }

  dhcp_pcb_refcount++;
 8013be8:	4b04      	ldr	r3, [pc, #16]	; (8013bfc <dhcp_inc_pcb_refcount+0x88>)
 8013bea:	781b      	ldrb	r3, [r3, #0]
 8013bec:	3301      	adds	r3, #1
 8013bee:	b2da      	uxtb	r2, r3
 8013bf0:	4b02      	ldr	r3, [pc, #8]	; (8013bfc <dhcp_inc_pcb_refcount+0x88>)
 8013bf2:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8013bf4:	2300      	movs	r3, #0
}
 8013bf6:	4618      	mov	r0, r3
 8013bf8:	bd80      	pop	{r7, pc}
 8013bfa:	bf00      	nop
 8013bfc:	2000c918 	.word	0x2000c918
 8013c00:	2000c914 	.word	0x2000c914
 8013c04:	0801bfa0 	.word	0x0801bfa0
 8013c08:	0801bfd8 	.word	0x0801bfd8
 8013c0c:	0801c000 	.word	0x0801c000
 8013c10:	0801cbb4 	.word	0x0801cbb4
 8013c14:	08015431 	.word	0x08015431

08013c18 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8013c18:	b580      	push	{r7, lr}
 8013c1a:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8013c1c:	4b0e      	ldr	r3, [pc, #56]	; (8013c58 <dhcp_dec_pcb_refcount+0x40>)
 8013c1e:	781b      	ldrb	r3, [r3, #0]
 8013c20:	2b00      	cmp	r3, #0
 8013c22:	d105      	bne.n	8013c30 <dhcp_dec_pcb_refcount+0x18>
 8013c24:	4b0d      	ldr	r3, [pc, #52]	; (8013c5c <dhcp_dec_pcb_refcount+0x44>)
 8013c26:	22ff      	movs	r2, #255	; 0xff
 8013c28:	490d      	ldr	r1, [pc, #52]	; (8013c60 <dhcp_dec_pcb_refcount+0x48>)
 8013c2a:	480e      	ldr	r0, [pc, #56]	; (8013c64 <dhcp_dec_pcb_refcount+0x4c>)
 8013c2c:	f004 ff36 	bl	8018a9c <iprintf>
  dhcp_pcb_refcount--;
 8013c30:	4b09      	ldr	r3, [pc, #36]	; (8013c58 <dhcp_dec_pcb_refcount+0x40>)
 8013c32:	781b      	ldrb	r3, [r3, #0]
 8013c34:	3b01      	subs	r3, #1
 8013c36:	b2da      	uxtb	r2, r3
 8013c38:	4b07      	ldr	r3, [pc, #28]	; (8013c58 <dhcp_dec_pcb_refcount+0x40>)
 8013c3a:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8013c3c:	4b06      	ldr	r3, [pc, #24]	; (8013c58 <dhcp_dec_pcb_refcount+0x40>)
 8013c3e:	781b      	ldrb	r3, [r3, #0]
 8013c40:	2b00      	cmp	r3, #0
 8013c42:	d107      	bne.n	8013c54 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8013c44:	4b08      	ldr	r3, [pc, #32]	; (8013c68 <dhcp_dec_pcb_refcount+0x50>)
 8013c46:	681b      	ldr	r3, [r3, #0]
 8013c48:	4618      	mov	r0, r3
 8013c4a:	f7ff ff09 	bl	8013a60 <udp_remove>
    dhcp_pcb = NULL;
 8013c4e:	4b06      	ldr	r3, [pc, #24]	; (8013c68 <dhcp_dec_pcb_refcount+0x50>)
 8013c50:	2200      	movs	r2, #0
 8013c52:	601a      	str	r2, [r3, #0]
  }
}
 8013c54:	bf00      	nop
 8013c56:	bd80      	pop	{r7, pc}
 8013c58:	2000c918 	.word	0x2000c918
 8013c5c:	0801bfa0 	.word	0x0801bfa0
 8013c60:	0801c028 	.word	0x0801c028
 8013c64:	0801c000 	.word	0x0801c000
 8013c68:	2000c914 	.word	0x2000c914

08013c6c <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8013c6c:	b580      	push	{r7, lr}
 8013c6e:	b084      	sub	sp, #16
 8013c70:	af00      	add	r7, sp, #0
 8013c72:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013c74:	687b      	ldr	r3, [r7, #4]
 8013c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013c78:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8013c7a:	210c      	movs	r1, #12
 8013c7c:	68f8      	ldr	r0, [r7, #12]
 8013c7e:	f001 f819 	bl	8014cb4 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8013c82:	4b06      	ldr	r3, [pc, #24]	; (8013c9c <dhcp_handle_nak+0x30>)
 8013c84:	4a05      	ldr	r2, [pc, #20]	; (8013c9c <dhcp_handle_nak+0x30>)
 8013c86:	4905      	ldr	r1, [pc, #20]	; (8013c9c <dhcp_handle_nak+0x30>)
 8013c88:	6878      	ldr	r0, [r7, #4]
 8013c8a:	f7f9 f891 	bl	800cdb0 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 8013c8e:	6878      	ldr	r0, [r7, #4]
 8013c90:	f000 fc0c 	bl	80144ac <dhcp_discover>
}
 8013c94:	bf00      	nop
 8013c96:	3710      	adds	r7, #16
 8013c98:	46bd      	mov	sp, r7
 8013c9a:	bd80      	pop	{r7, pc}
 8013c9c:	0801cbb4 	.word	0x0801cbb4

08013ca0 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8013ca0:	b580      	push	{r7, lr}
 8013ca2:	b084      	sub	sp, #16
 8013ca4:	af00      	add	r7, sp, #0
 8013ca6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013ca8:	687b      	ldr	r3, [r7, #4]
 8013caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013cac:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8013cae:	2108      	movs	r1, #8
 8013cb0:	68f8      	ldr	r0, [r7, #12]
 8013cb2:	f000 ffff 	bl	8014cb4 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8013cb6:	68fb      	ldr	r3, [r7, #12]
 8013cb8:	331c      	adds	r3, #28
 8013cba:	2200      	movs	r2, #0
 8013cbc:	4619      	mov	r1, r3
 8013cbe:	6878      	ldr	r0, [r7, #4]
 8013cc0:	f002 fb00 	bl	80162c4 <etharp_query>
 8013cc4:	4603      	mov	r3, r0
 8013cc6:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8013cc8:	68fb      	ldr	r3, [r7, #12]
 8013cca:	799b      	ldrb	r3, [r3, #6]
 8013ccc:	2bff      	cmp	r3, #255	; 0xff
 8013cce:	d005      	beq.n	8013cdc <dhcp_check+0x3c>
    dhcp->tries++;
 8013cd0:	68fb      	ldr	r3, [r7, #12]
 8013cd2:	799b      	ldrb	r3, [r3, #6]
 8013cd4:	3301      	adds	r3, #1
 8013cd6:	b2da      	uxtb	r2, r3
 8013cd8:	68fb      	ldr	r3, [r7, #12]
 8013cda:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 8013cdc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8013ce0:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8013ce2:	893b      	ldrh	r3, [r7, #8]
 8013ce4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8013ce8:	4a06      	ldr	r2, [pc, #24]	; (8013d04 <dhcp_check+0x64>)
 8013cea:	fb82 1203 	smull	r1, r2, r2, r3
 8013cee:	1152      	asrs	r2, r2, #5
 8013cf0:	17db      	asrs	r3, r3, #31
 8013cf2:	1ad3      	subs	r3, r2, r3
 8013cf4:	b29a      	uxth	r2, r3
 8013cf6:	68fb      	ldr	r3, [r7, #12]
 8013cf8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 8013cfa:	bf00      	nop
 8013cfc:	3710      	adds	r7, #16
 8013cfe:	46bd      	mov	sp, r7
 8013d00:	bd80      	pop	{r7, pc}
 8013d02:	bf00      	nop
 8013d04:	10624dd3 	.word	0x10624dd3

08013d08 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 8013d08:	b580      	push	{r7, lr}
 8013d0a:	b084      	sub	sp, #16
 8013d0c:	af00      	add	r7, sp, #0
 8013d0e:	6078      	str	r0, [r7, #4]
 8013d10:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013d12:	687b      	ldr	r3, [r7, #4]
 8013d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d16:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8013d18:	4b0c      	ldr	r3, [pc, #48]	; (8013d4c <dhcp_handle_offer+0x44>)
 8013d1a:	789b      	ldrb	r3, [r3, #2]
 8013d1c:	2b00      	cmp	r3, #0
 8013d1e:	d011      	beq.n	8013d44 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 8013d20:	68fb      	ldr	r3, [r7, #12]
 8013d22:	2200      	movs	r2, #0
 8013d24:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8013d26:	4b0a      	ldr	r3, [pc, #40]	; (8013d50 <dhcp_handle_offer+0x48>)
 8013d28:	689b      	ldr	r3, [r3, #8]
 8013d2a:	4618      	mov	r0, r3
 8013d2c:	f7f8 f8ad 	bl	800be8a <lwip_htonl>
 8013d30:	4602      	mov	r2, r0
 8013d32:	68fb      	ldr	r3, [r7, #12]
 8013d34:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8013d36:	683b      	ldr	r3, [r7, #0]
 8013d38:	691a      	ldr	r2, [r3, #16]
 8013d3a:	68fb      	ldr	r3, [r7, #12]
 8013d3c:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 8013d3e:	6878      	ldr	r0, [r7, #4]
 8013d40:	f000 f808 	bl	8013d54 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8013d44:	bf00      	nop
 8013d46:	3710      	adds	r7, #16
 8013d48:	46bd      	mov	sp, r7
 8013d4a:	bd80      	pop	{r7, pc}
 8013d4c:	2000c90c 	.word	0x2000c90c
 8013d50:	2000c8ec 	.word	0x2000c8ec

08013d54 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8013d54:	b5b0      	push	{r4, r5, r7, lr}
 8013d56:	b08a      	sub	sp, #40	; 0x28
 8013d58:	af02      	add	r7, sp, #8
 8013d5a:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	2b00      	cmp	r3, #0
 8013d60:	d109      	bne.n	8013d76 <dhcp_select+0x22>
 8013d62:	4b71      	ldr	r3, [pc, #452]	; (8013f28 <dhcp_select+0x1d4>)
 8013d64:	f240 1277 	movw	r2, #375	; 0x177
 8013d68:	4970      	ldr	r1, [pc, #448]	; (8013f2c <dhcp_select+0x1d8>)
 8013d6a:	4871      	ldr	r0, [pc, #452]	; (8013f30 <dhcp_select+0x1dc>)
 8013d6c:	f004 fe96 	bl	8018a9c <iprintf>
 8013d70:	f06f 030f 	mvn.w	r3, #15
 8013d74:	e0d3      	b.n	8013f1e <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 8013d76:	687b      	ldr	r3, [r7, #4]
 8013d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d7a:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8013d7c:	69bb      	ldr	r3, [r7, #24]
 8013d7e:	2b00      	cmp	r3, #0
 8013d80:	d109      	bne.n	8013d96 <dhcp_select+0x42>
 8013d82:	4b69      	ldr	r3, [pc, #420]	; (8013f28 <dhcp_select+0x1d4>)
 8013d84:	f240 1279 	movw	r2, #377	; 0x179
 8013d88:	496a      	ldr	r1, [pc, #424]	; (8013f34 <dhcp_select+0x1e0>)
 8013d8a:	4869      	ldr	r0, [pc, #420]	; (8013f30 <dhcp_select+0x1dc>)
 8013d8c:	f004 fe86 	bl	8018a9c <iprintf>
 8013d90:	f06f 0305 	mvn.w	r3, #5
 8013d94:	e0c3      	b.n	8013f1e <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8013d96:	2101      	movs	r1, #1
 8013d98:	69b8      	ldr	r0, [r7, #24]
 8013d9a:	f000 ff8b 	bl	8014cb4 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8013d9e:	f107 030c 	add.w	r3, r7, #12
 8013da2:	2203      	movs	r2, #3
 8013da4:	69b9      	ldr	r1, [r7, #24]
 8013da6:	6878      	ldr	r0, [r7, #4]
 8013da8:	f001 fc10 	bl	80155cc <dhcp_create_msg>
 8013dac:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8013dae:	697b      	ldr	r3, [r7, #20]
 8013db0:	2b00      	cmp	r3, #0
 8013db2:	f000 8085 	beq.w	8013ec0 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8013db6:	697b      	ldr	r3, [r7, #20]
 8013db8:	685b      	ldr	r3, [r3, #4]
 8013dba:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8013dbc:	89b8      	ldrh	r0, [r7, #12]
 8013dbe:	693b      	ldr	r3, [r7, #16]
 8013dc0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013dc4:	2302      	movs	r3, #2
 8013dc6:	2239      	movs	r2, #57	; 0x39
 8013dc8:	f000 ff8e 	bl	8014ce8 <dhcp_option>
 8013dcc:	4603      	mov	r3, r0
 8013dce:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8013dd0:	89b8      	ldrh	r0, [r7, #12]
 8013dd2:	693b      	ldr	r3, [r7, #16]
 8013dd4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013dd8:	687b      	ldr	r3, [r7, #4]
 8013dda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013ddc:	461a      	mov	r2, r3
 8013dde:	f000 ffdd 	bl	8014d9c <dhcp_option_short>
 8013de2:	4603      	mov	r3, r0
 8013de4:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8013de6:	89b8      	ldrh	r0, [r7, #12]
 8013de8:	693b      	ldr	r3, [r7, #16]
 8013dea:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013dee:	2304      	movs	r3, #4
 8013df0:	2232      	movs	r2, #50	; 0x32
 8013df2:	f000 ff79 	bl	8014ce8 <dhcp_option>
 8013df6:	4603      	mov	r3, r0
 8013df8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8013dfa:	89bc      	ldrh	r4, [r7, #12]
 8013dfc:	693b      	ldr	r3, [r7, #16]
 8013dfe:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8013e02:	69bb      	ldr	r3, [r7, #24]
 8013e04:	69db      	ldr	r3, [r3, #28]
 8013e06:	4618      	mov	r0, r3
 8013e08:	f7f8 f83f 	bl	800be8a <lwip_htonl>
 8013e0c:	4603      	mov	r3, r0
 8013e0e:	461a      	mov	r2, r3
 8013e10:	4629      	mov	r1, r5
 8013e12:	4620      	mov	r0, r4
 8013e14:	f000 fff4 	bl	8014e00 <dhcp_option_long>
 8013e18:	4603      	mov	r3, r0
 8013e1a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8013e1c:	89b8      	ldrh	r0, [r7, #12]
 8013e1e:	693b      	ldr	r3, [r7, #16]
 8013e20:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013e24:	2304      	movs	r3, #4
 8013e26:	2236      	movs	r2, #54	; 0x36
 8013e28:	f000 ff5e 	bl	8014ce8 <dhcp_option>
 8013e2c:	4603      	mov	r3, r0
 8013e2e:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8013e30:	89bc      	ldrh	r4, [r7, #12]
 8013e32:	693b      	ldr	r3, [r7, #16]
 8013e34:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8013e38:	69bb      	ldr	r3, [r7, #24]
 8013e3a:	699b      	ldr	r3, [r3, #24]
 8013e3c:	4618      	mov	r0, r3
 8013e3e:	f7f8 f824 	bl	800be8a <lwip_htonl>
 8013e42:	4603      	mov	r3, r0
 8013e44:	461a      	mov	r2, r3
 8013e46:	4629      	mov	r1, r5
 8013e48:	4620      	mov	r0, r4
 8013e4a:	f000 ffd9 	bl	8014e00 <dhcp_option_long>
 8013e4e:	4603      	mov	r3, r0
 8013e50:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8013e52:	89b8      	ldrh	r0, [r7, #12]
 8013e54:	693b      	ldr	r3, [r7, #16]
 8013e56:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013e5a:	2303      	movs	r3, #3
 8013e5c:	2237      	movs	r2, #55	; 0x37
 8013e5e:	f000 ff43 	bl	8014ce8 <dhcp_option>
 8013e62:	4603      	mov	r3, r0
 8013e64:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013e66:	2300      	movs	r3, #0
 8013e68:	77bb      	strb	r3, [r7, #30]
 8013e6a:	e00e      	b.n	8013e8a <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8013e6c:	89b8      	ldrh	r0, [r7, #12]
 8013e6e:	693b      	ldr	r3, [r7, #16]
 8013e70:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013e74:	7fbb      	ldrb	r3, [r7, #30]
 8013e76:	4a30      	ldr	r2, [pc, #192]	; (8013f38 <dhcp_select+0x1e4>)
 8013e78:	5cd3      	ldrb	r3, [r2, r3]
 8013e7a:	461a      	mov	r2, r3
 8013e7c:	f000 ff68 	bl	8014d50 <dhcp_option_byte>
 8013e80:	4603      	mov	r3, r0
 8013e82:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013e84:	7fbb      	ldrb	r3, [r7, #30]
 8013e86:	3301      	adds	r3, #1
 8013e88:	77bb      	strb	r3, [r7, #30]
 8013e8a:	7fbb      	ldrb	r3, [r7, #30]
 8013e8c:	2b02      	cmp	r3, #2
 8013e8e:	d9ed      	bls.n	8013e6c <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8013e90:	89b8      	ldrh	r0, [r7, #12]
 8013e92:	693b      	ldr	r3, [r7, #16]
 8013e94:	33f0      	adds	r3, #240	; 0xf0
 8013e96:	697a      	ldr	r2, [r7, #20]
 8013e98:	4619      	mov	r1, r3
 8013e9a:	f001 fc6d 	bl	8015778 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8013e9e:	4b27      	ldr	r3, [pc, #156]	; (8013f3c <dhcp_select+0x1e8>)
 8013ea0:	6818      	ldr	r0, [r3, #0]
 8013ea2:	4b27      	ldr	r3, [pc, #156]	; (8013f40 <dhcp_select+0x1ec>)
 8013ea4:	9301      	str	r3, [sp, #4]
 8013ea6:	687b      	ldr	r3, [r7, #4]
 8013ea8:	9300      	str	r3, [sp, #0]
 8013eaa:	2343      	movs	r3, #67	; 0x43
 8013eac:	4a25      	ldr	r2, [pc, #148]	; (8013f44 <dhcp_select+0x1f0>)
 8013eae:	6979      	ldr	r1, [r7, #20]
 8013eb0:	f7ff fbda 	bl	8013668 <udp_sendto_if_src>
 8013eb4:	4603      	mov	r3, r0
 8013eb6:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8013eb8:	6978      	ldr	r0, [r7, #20]
 8013eba:	f7f9 fc1f 	bl	800d6fc <pbuf_free>
 8013ebe:	e001      	b.n	8013ec4 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8013ec0:	23ff      	movs	r3, #255	; 0xff
 8013ec2:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8013ec4:	69bb      	ldr	r3, [r7, #24]
 8013ec6:	799b      	ldrb	r3, [r3, #6]
 8013ec8:	2bff      	cmp	r3, #255	; 0xff
 8013eca:	d005      	beq.n	8013ed8 <dhcp_select+0x184>
    dhcp->tries++;
 8013ecc:	69bb      	ldr	r3, [r7, #24]
 8013ece:	799b      	ldrb	r3, [r3, #6]
 8013ed0:	3301      	adds	r3, #1
 8013ed2:	b2da      	uxtb	r2, r3
 8013ed4:	69bb      	ldr	r3, [r7, #24]
 8013ed6:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8013ed8:	69bb      	ldr	r3, [r7, #24]
 8013eda:	799b      	ldrb	r3, [r3, #6]
 8013edc:	2b05      	cmp	r3, #5
 8013ede:	d80d      	bhi.n	8013efc <dhcp_select+0x1a8>
 8013ee0:	69bb      	ldr	r3, [r7, #24]
 8013ee2:	799b      	ldrb	r3, [r3, #6]
 8013ee4:	461a      	mov	r2, r3
 8013ee6:	2301      	movs	r3, #1
 8013ee8:	4093      	lsls	r3, r2
 8013eea:	b29b      	uxth	r3, r3
 8013eec:	461a      	mov	r2, r3
 8013eee:	0152      	lsls	r2, r2, #5
 8013ef0:	1ad2      	subs	r2, r2, r3
 8013ef2:	0092      	lsls	r2, r2, #2
 8013ef4:	4413      	add	r3, r2
 8013ef6:	00db      	lsls	r3, r3, #3
 8013ef8:	b29b      	uxth	r3, r3
 8013efa:	e001      	b.n	8013f00 <dhcp_select+0x1ac>
 8013efc:	f64e 2360 	movw	r3, #60000	; 0xea60
 8013f00:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8013f02:	89fb      	ldrh	r3, [r7, #14]
 8013f04:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8013f08:	4a0f      	ldr	r2, [pc, #60]	; (8013f48 <dhcp_select+0x1f4>)
 8013f0a:	fb82 1203 	smull	r1, r2, r2, r3
 8013f0e:	1152      	asrs	r2, r2, #5
 8013f10:	17db      	asrs	r3, r3, #31
 8013f12:	1ad3      	subs	r3, r2, r3
 8013f14:	b29a      	uxth	r2, r3
 8013f16:	69bb      	ldr	r3, [r7, #24]
 8013f18:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8013f1a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013f1e:	4618      	mov	r0, r3
 8013f20:	3720      	adds	r7, #32
 8013f22:	46bd      	mov	sp, r7
 8013f24:	bdb0      	pop	{r4, r5, r7, pc}
 8013f26:	bf00      	nop
 8013f28:	0801bfa0 	.word	0x0801bfa0
 8013f2c:	0801c04c 	.word	0x0801c04c
 8013f30:	0801c000 	.word	0x0801c000
 8013f34:	0801c068 	.word	0x0801c068
 8013f38:	200000a8 	.word	0x200000a8
 8013f3c:	2000c914 	.word	0x2000c914
 8013f40:	0801cbb4 	.word	0x0801cbb4
 8013f44:	0801cbb8 	.word	0x0801cbb8
 8013f48:	10624dd3 	.word	0x10624dd3

08013f4c <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8013f4c:	b580      	push	{r7, lr}
 8013f4e:	b082      	sub	sp, #8
 8013f50:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 8013f52:	4b27      	ldr	r3, [pc, #156]	; (8013ff0 <dhcp_coarse_tmr+0xa4>)
 8013f54:	681b      	ldr	r3, [r3, #0]
 8013f56:	607b      	str	r3, [r7, #4]
 8013f58:	e042      	b.n	8013fe0 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8013f5a:	687b      	ldr	r3, [r7, #4]
 8013f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f5e:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8013f60:	683b      	ldr	r3, [r7, #0]
 8013f62:	2b00      	cmp	r3, #0
 8013f64:	d039      	beq.n	8013fda <dhcp_coarse_tmr+0x8e>
 8013f66:	683b      	ldr	r3, [r7, #0]
 8013f68:	795b      	ldrb	r3, [r3, #5]
 8013f6a:	2b00      	cmp	r3, #0
 8013f6c:	d035      	beq.n	8013fda <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8013f6e:	683b      	ldr	r3, [r7, #0]
 8013f70:	8a9b      	ldrh	r3, [r3, #20]
 8013f72:	2b00      	cmp	r3, #0
 8013f74:	d012      	beq.n	8013f9c <dhcp_coarse_tmr+0x50>
 8013f76:	683b      	ldr	r3, [r7, #0]
 8013f78:	8a5b      	ldrh	r3, [r3, #18]
 8013f7a:	3301      	adds	r3, #1
 8013f7c:	b29a      	uxth	r2, r3
 8013f7e:	683b      	ldr	r3, [r7, #0]
 8013f80:	825a      	strh	r2, [r3, #18]
 8013f82:	683b      	ldr	r3, [r7, #0]
 8013f84:	8a5a      	ldrh	r2, [r3, #18]
 8013f86:	683b      	ldr	r3, [r7, #0]
 8013f88:	8a9b      	ldrh	r3, [r3, #20]
 8013f8a:	429a      	cmp	r2, r3
 8013f8c:	d106      	bne.n	8013f9c <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 8013f8e:	6878      	ldr	r0, [r7, #4]
 8013f90:	f000 fdf6 	bl	8014b80 <dhcp_release_and_stop>
        dhcp_start(netif);
 8013f94:	6878      	ldr	r0, [r7, #4]
 8013f96:	f000 f969 	bl	801426c <dhcp_start>
 8013f9a:	e01e      	b.n	8013fda <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8013f9c:	683b      	ldr	r3, [r7, #0]
 8013f9e:	8a1b      	ldrh	r3, [r3, #16]
 8013fa0:	2b00      	cmp	r3, #0
 8013fa2:	d00b      	beq.n	8013fbc <dhcp_coarse_tmr+0x70>
 8013fa4:	683b      	ldr	r3, [r7, #0]
 8013fa6:	8a1b      	ldrh	r3, [r3, #16]
 8013fa8:	1e5a      	subs	r2, r3, #1
 8013faa:	b291      	uxth	r1, r2
 8013fac:	683a      	ldr	r2, [r7, #0]
 8013fae:	8211      	strh	r1, [r2, #16]
 8013fb0:	2b01      	cmp	r3, #1
 8013fb2:	d103      	bne.n	8013fbc <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8013fb4:	6878      	ldr	r0, [r7, #4]
 8013fb6:	f000 f8c6 	bl	8014146 <dhcp_t2_timeout>
 8013fba:	e00e      	b.n	8013fda <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8013fbc:	683b      	ldr	r3, [r7, #0]
 8013fbe:	89db      	ldrh	r3, [r3, #14]
 8013fc0:	2b00      	cmp	r3, #0
 8013fc2:	d00a      	beq.n	8013fda <dhcp_coarse_tmr+0x8e>
 8013fc4:	683b      	ldr	r3, [r7, #0]
 8013fc6:	89db      	ldrh	r3, [r3, #14]
 8013fc8:	1e5a      	subs	r2, r3, #1
 8013fca:	b291      	uxth	r1, r2
 8013fcc:	683a      	ldr	r2, [r7, #0]
 8013fce:	81d1      	strh	r1, [r2, #14]
 8013fd0:	2b01      	cmp	r3, #1
 8013fd2:	d102      	bne.n	8013fda <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8013fd4:	6878      	ldr	r0, [r7, #4]
 8013fd6:	f000 f888 	bl	80140ea <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 8013fda:	687b      	ldr	r3, [r7, #4]
 8013fdc:	681b      	ldr	r3, [r3, #0]
 8013fde:	607b      	str	r3, [r7, #4]
 8013fe0:	687b      	ldr	r3, [r7, #4]
 8013fe2:	2b00      	cmp	r3, #0
 8013fe4:	d1b9      	bne.n	8013f5a <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 8013fe6:	bf00      	nop
 8013fe8:	bf00      	nop
 8013fea:	3708      	adds	r7, #8
 8013fec:	46bd      	mov	sp, r7
 8013fee:	bd80      	pop	{r7, pc}
 8013ff0:	2000c880 	.word	0x2000c880

08013ff4 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8013ff4:	b580      	push	{r7, lr}
 8013ff6:	b082      	sub	sp, #8
 8013ff8:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 8013ffa:	4b16      	ldr	r3, [pc, #88]	; (8014054 <dhcp_fine_tmr+0x60>)
 8013ffc:	681b      	ldr	r3, [r3, #0]
 8013ffe:	607b      	str	r3, [r7, #4]
 8014000:	e020      	b.n	8014044 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8014002:	687b      	ldr	r3, [r7, #4]
 8014004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014006:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8014008:	683b      	ldr	r3, [r7, #0]
 801400a:	2b00      	cmp	r3, #0
 801400c:	d017      	beq.n	801403e <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 801400e:	683b      	ldr	r3, [r7, #0]
 8014010:	891b      	ldrh	r3, [r3, #8]
 8014012:	2b01      	cmp	r3, #1
 8014014:	d906      	bls.n	8014024 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 8014016:	683b      	ldr	r3, [r7, #0]
 8014018:	891b      	ldrh	r3, [r3, #8]
 801401a:	3b01      	subs	r3, #1
 801401c:	b29a      	uxth	r2, r3
 801401e:	683b      	ldr	r3, [r7, #0]
 8014020:	811a      	strh	r2, [r3, #8]
 8014022:	e00c      	b.n	801403e <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8014024:	683b      	ldr	r3, [r7, #0]
 8014026:	891b      	ldrh	r3, [r3, #8]
 8014028:	2b01      	cmp	r3, #1
 801402a:	d108      	bne.n	801403e <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 801402c:	683b      	ldr	r3, [r7, #0]
 801402e:	891b      	ldrh	r3, [r3, #8]
 8014030:	3b01      	subs	r3, #1
 8014032:	b29a      	uxth	r2, r3
 8014034:	683b      	ldr	r3, [r7, #0]
 8014036:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8014038:	6878      	ldr	r0, [r7, #4]
 801403a:	f000 f80d 	bl	8014058 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 801403e:	687b      	ldr	r3, [r7, #4]
 8014040:	681b      	ldr	r3, [r3, #0]
 8014042:	607b      	str	r3, [r7, #4]
 8014044:	687b      	ldr	r3, [r7, #4]
 8014046:	2b00      	cmp	r3, #0
 8014048:	d1db      	bne.n	8014002 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 801404a:	bf00      	nop
 801404c:	bf00      	nop
 801404e:	3708      	adds	r7, #8
 8014050:	46bd      	mov	sp, r7
 8014052:	bd80      	pop	{r7, pc}
 8014054:	2000c880 	.word	0x2000c880

08014058 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8014058:	b580      	push	{r7, lr}
 801405a:	b084      	sub	sp, #16
 801405c:	af00      	add	r7, sp, #0
 801405e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014060:	687b      	ldr	r3, [r7, #4]
 8014062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014064:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8014066:	68fb      	ldr	r3, [r7, #12]
 8014068:	795b      	ldrb	r3, [r3, #5]
 801406a:	2b0c      	cmp	r3, #12
 801406c:	d003      	beq.n	8014076 <dhcp_timeout+0x1e>
 801406e:	68fb      	ldr	r3, [r7, #12]
 8014070:	795b      	ldrb	r3, [r3, #5]
 8014072:	2b06      	cmp	r3, #6
 8014074:	d103      	bne.n	801407e <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 8014076:	6878      	ldr	r0, [r7, #4]
 8014078:	f000 fa18 	bl	80144ac <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 801407c:	e031      	b.n	80140e2 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 801407e:	68fb      	ldr	r3, [r7, #12]
 8014080:	795b      	ldrb	r3, [r3, #5]
 8014082:	2b01      	cmp	r3, #1
 8014084:	d10e      	bne.n	80140a4 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 8014086:	68fb      	ldr	r3, [r7, #12]
 8014088:	799b      	ldrb	r3, [r3, #6]
 801408a:	2b05      	cmp	r3, #5
 801408c:	d803      	bhi.n	8014096 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 801408e:	6878      	ldr	r0, [r7, #4]
 8014090:	f7ff fe60 	bl	8013d54 <dhcp_select>
}
 8014094:	e025      	b.n	80140e2 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 8014096:	6878      	ldr	r0, [r7, #4]
 8014098:	f000 fd72 	bl	8014b80 <dhcp_release_and_stop>
      dhcp_start(netif);
 801409c:	6878      	ldr	r0, [r7, #4]
 801409e:	f000 f8e5 	bl	801426c <dhcp_start>
}
 80140a2:	e01e      	b.n	80140e2 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 80140a4:	68fb      	ldr	r3, [r7, #12]
 80140a6:	795b      	ldrb	r3, [r3, #5]
 80140a8:	2b08      	cmp	r3, #8
 80140aa:	d10b      	bne.n	80140c4 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 80140ac:	68fb      	ldr	r3, [r7, #12]
 80140ae:	799b      	ldrb	r3, [r3, #6]
 80140b0:	2b01      	cmp	r3, #1
 80140b2:	d803      	bhi.n	80140bc <dhcp_timeout+0x64>
      dhcp_check(netif);
 80140b4:	6878      	ldr	r0, [r7, #4]
 80140b6:	f7ff fdf3 	bl	8013ca0 <dhcp_check>
}
 80140ba:	e012      	b.n	80140e2 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 80140bc:	6878      	ldr	r0, [r7, #4]
 80140be:	f000 fa97 	bl	80145f0 <dhcp_bind>
}
 80140c2:	e00e      	b.n	80140e2 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 80140c4:	68fb      	ldr	r3, [r7, #12]
 80140c6:	795b      	ldrb	r3, [r3, #5]
 80140c8:	2b03      	cmp	r3, #3
 80140ca:	d10a      	bne.n	80140e2 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 80140cc:	68fb      	ldr	r3, [r7, #12]
 80140ce:	799b      	ldrb	r3, [r3, #6]
 80140d0:	2b01      	cmp	r3, #1
 80140d2:	d803      	bhi.n	80140dc <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 80140d4:	6878      	ldr	r0, [r7, #4]
 80140d6:	f000 fc9d 	bl	8014a14 <dhcp_reboot>
}
 80140da:	e002      	b.n	80140e2 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 80140dc:	6878      	ldr	r0, [r7, #4]
 80140de:	f000 f9e5 	bl	80144ac <dhcp_discover>
}
 80140e2:	bf00      	nop
 80140e4:	3710      	adds	r7, #16
 80140e6:	46bd      	mov	sp, r7
 80140e8:	bd80      	pop	{r7, pc}

080140ea <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 80140ea:	b580      	push	{r7, lr}
 80140ec:	b084      	sub	sp, #16
 80140ee:	af00      	add	r7, sp, #0
 80140f0:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80140f2:	687b      	ldr	r3, [r7, #4]
 80140f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80140f6:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80140f8:	68fb      	ldr	r3, [r7, #12]
 80140fa:	795b      	ldrb	r3, [r3, #5]
 80140fc:	2b01      	cmp	r3, #1
 80140fe:	d007      	beq.n	8014110 <dhcp_t1_timeout+0x26>
 8014100:	68fb      	ldr	r3, [r7, #12]
 8014102:	795b      	ldrb	r3, [r3, #5]
 8014104:	2b0a      	cmp	r3, #10
 8014106:	d003      	beq.n	8014110 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8014108:	68fb      	ldr	r3, [r7, #12]
 801410a:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801410c:	2b05      	cmp	r3, #5
 801410e:	d116      	bne.n	801413e <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8014110:	6878      	ldr	r0, [r7, #4]
 8014112:	f000 fb47 	bl	80147a4 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8014116:	68fb      	ldr	r3, [r7, #12]
 8014118:	899b      	ldrh	r3, [r3, #12]
 801411a:	461a      	mov	r2, r3
 801411c:	68fb      	ldr	r3, [r7, #12]
 801411e:	8a5b      	ldrh	r3, [r3, #18]
 8014120:	1ad3      	subs	r3, r2, r3
 8014122:	2b01      	cmp	r3, #1
 8014124:	dd0b      	ble.n	801413e <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8014126:	68fb      	ldr	r3, [r7, #12]
 8014128:	899b      	ldrh	r3, [r3, #12]
 801412a:	461a      	mov	r2, r3
 801412c:	68fb      	ldr	r3, [r7, #12]
 801412e:	8a5b      	ldrh	r3, [r3, #18]
 8014130:	1ad3      	subs	r3, r2, r3
 8014132:	0fda      	lsrs	r2, r3, #31
 8014134:	4413      	add	r3, r2
 8014136:	105b      	asrs	r3, r3, #1
 8014138:	b29a      	uxth	r2, r3
 801413a:	68fb      	ldr	r3, [r7, #12]
 801413c:	81da      	strh	r2, [r3, #14]
    }
  }
}
 801413e:	bf00      	nop
 8014140:	3710      	adds	r7, #16
 8014142:	46bd      	mov	sp, r7
 8014144:	bd80      	pop	{r7, pc}

08014146 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8014146:	b580      	push	{r7, lr}
 8014148:	b084      	sub	sp, #16
 801414a:	af00      	add	r7, sp, #0
 801414c:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801414e:	687b      	ldr	r3, [r7, #4]
 8014150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014152:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8014154:	68fb      	ldr	r3, [r7, #12]
 8014156:	795b      	ldrb	r3, [r3, #5]
 8014158:	2b01      	cmp	r3, #1
 801415a:	d00b      	beq.n	8014174 <dhcp_t2_timeout+0x2e>
 801415c:	68fb      	ldr	r3, [r7, #12]
 801415e:	795b      	ldrb	r3, [r3, #5]
 8014160:	2b0a      	cmp	r3, #10
 8014162:	d007      	beq.n	8014174 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8014164:	68fb      	ldr	r3, [r7, #12]
 8014166:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8014168:	2b05      	cmp	r3, #5
 801416a:	d003      	beq.n	8014174 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 801416c:	68fb      	ldr	r3, [r7, #12]
 801416e:	795b      	ldrb	r3, [r3, #5]
 8014170:	2b04      	cmp	r3, #4
 8014172:	d116      	bne.n	80141a2 <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8014174:	6878      	ldr	r0, [r7, #4]
 8014176:	f000 fbb1 	bl	80148dc <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801417a:	68fb      	ldr	r3, [r7, #12]
 801417c:	8a9b      	ldrh	r3, [r3, #20]
 801417e:	461a      	mov	r2, r3
 8014180:	68fb      	ldr	r3, [r7, #12]
 8014182:	8a5b      	ldrh	r3, [r3, #18]
 8014184:	1ad3      	subs	r3, r2, r3
 8014186:	2b01      	cmp	r3, #1
 8014188:	dd0b      	ble.n	80141a2 <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 801418a:	68fb      	ldr	r3, [r7, #12]
 801418c:	8a9b      	ldrh	r3, [r3, #20]
 801418e:	461a      	mov	r2, r3
 8014190:	68fb      	ldr	r3, [r7, #12]
 8014192:	8a5b      	ldrh	r3, [r3, #18]
 8014194:	1ad3      	subs	r3, r2, r3
 8014196:	0fda      	lsrs	r2, r3, #31
 8014198:	4413      	add	r3, r2
 801419a:	105b      	asrs	r3, r3, #1
 801419c:	b29a      	uxth	r2, r3
 801419e:	68fb      	ldr	r3, [r7, #12]
 80141a0:	821a      	strh	r2, [r3, #16]
    }
  }
}
 80141a2:	bf00      	nop
 80141a4:	3710      	adds	r7, #16
 80141a6:	46bd      	mov	sp, r7
 80141a8:	bd80      	pop	{r7, pc}
	...

080141ac <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 80141ac:	b580      	push	{r7, lr}
 80141ae:	b084      	sub	sp, #16
 80141b0:	af00      	add	r7, sp, #0
 80141b2:	6078      	str	r0, [r7, #4]
 80141b4:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80141b6:	687b      	ldr	r3, [r7, #4]
 80141b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80141ba:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 80141bc:	68fb      	ldr	r3, [r7, #12]
 80141be:	2200      	movs	r2, #0
 80141c0:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 80141c2:	68fb      	ldr	r3, [r7, #12]
 80141c4:	2200      	movs	r2, #0
 80141c6:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 80141c8:	4b26      	ldr	r3, [pc, #152]	; (8014264 <dhcp_handle_ack+0xb8>)
 80141ca:	78db      	ldrb	r3, [r3, #3]
 80141cc:	2b00      	cmp	r3, #0
 80141ce:	d003      	beq.n	80141d8 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 80141d0:	4b25      	ldr	r3, [pc, #148]	; (8014268 <dhcp_handle_ack+0xbc>)
 80141d2:	68da      	ldr	r2, [r3, #12]
 80141d4:	68fb      	ldr	r3, [r7, #12]
 80141d6:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 80141d8:	4b22      	ldr	r3, [pc, #136]	; (8014264 <dhcp_handle_ack+0xb8>)
 80141da:	791b      	ldrb	r3, [r3, #4]
 80141dc:	2b00      	cmp	r3, #0
 80141de:	d004      	beq.n	80141ea <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 80141e0:	4b21      	ldr	r3, [pc, #132]	; (8014268 <dhcp_handle_ack+0xbc>)
 80141e2:	691a      	ldr	r2, [r3, #16]
 80141e4:	68fb      	ldr	r3, [r7, #12]
 80141e6:	62da      	str	r2, [r3, #44]	; 0x2c
 80141e8:	e004      	b.n	80141f4 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 80141ea:	68fb      	ldr	r3, [r7, #12]
 80141ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80141ee:	085a      	lsrs	r2, r3, #1
 80141f0:	68fb      	ldr	r3, [r7, #12]
 80141f2:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 80141f4:	4b1b      	ldr	r3, [pc, #108]	; (8014264 <dhcp_handle_ack+0xb8>)
 80141f6:	795b      	ldrb	r3, [r3, #5]
 80141f8:	2b00      	cmp	r3, #0
 80141fa:	d004      	beq.n	8014206 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 80141fc:	4b1a      	ldr	r3, [pc, #104]	; (8014268 <dhcp_handle_ack+0xbc>)
 80141fe:	695a      	ldr	r2, [r3, #20]
 8014200:	68fb      	ldr	r3, [r7, #12]
 8014202:	631a      	str	r2, [r3, #48]	; 0x30
 8014204:	e007      	b.n	8014216 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8014206:	68fb      	ldr	r3, [r7, #12]
 8014208:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801420a:	4613      	mov	r3, r2
 801420c:	00db      	lsls	r3, r3, #3
 801420e:	1a9b      	subs	r3, r3, r2
 8014210:	08da      	lsrs	r2, r3, #3
 8014212:	68fb      	ldr	r3, [r7, #12]
 8014214:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8014216:	683b      	ldr	r3, [r7, #0]
 8014218:	691a      	ldr	r2, [r3, #16]
 801421a:	68fb      	ldr	r3, [r7, #12]
 801421c:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 801421e:	4b11      	ldr	r3, [pc, #68]	; (8014264 <dhcp_handle_ack+0xb8>)
 8014220:	799b      	ldrb	r3, [r3, #6]
 8014222:	2b00      	cmp	r3, #0
 8014224:	d00b      	beq.n	801423e <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8014226:	4b10      	ldr	r3, [pc, #64]	; (8014268 <dhcp_handle_ack+0xbc>)
 8014228:	699b      	ldr	r3, [r3, #24]
 801422a:	4618      	mov	r0, r3
 801422c:	f7f7 fe2d 	bl	800be8a <lwip_htonl>
 8014230:	4602      	mov	r2, r0
 8014232:	68fb      	ldr	r3, [r7, #12]
 8014234:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 8014236:	68fb      	ldr	r3, [r7, #12]
 8014238:	2201      	movs	r2, #1
 801423a:	71da      	strb	r2, [r3, #7]
 801423c:	e002      	b.n	8014244 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 801423e:	68fb      	ldr	r3, [r7, #12]
 8014240:	2200      	movs	r2, #0
 8014242:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8014244:	4b07      	ldr	r3, [pc, #28]	; (8014264 <dhcp_handle_ack+0xb8>)
 8014246:	79db      	ldrb	r3, [r3, #7]
 8014248:	2b00      	cmp	r3, #0
 801424a:	d007      	beq.n	801425c <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 801424c:	4b06      	ldr	r3, [pc, #24]	; (8014268 <dhcp_handle_ack+0xbc>)
 801424e:	69db      	ldr	r3, [r3, #28]
 8014250:	4618      	mov	r0, r3
 8014252:	f7f7 fe1a 	bl	800be8a <lwip_htonl>
 8014256:	4602      	mov	r2, r0
 8014258:	68fb      	ldr	r3, [r7, #12]
 801425a:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 801425c:	bf00      	nop
 801425e:	3710      	adds	r7, #16
 8014260:	46bd      	mov	sp, r7
 8014262:	bd80      	pop	{r7, pc}
 8014264:	2000c90c 	.word	0x2000c90c
 8014268:	2000c8ec 	.word	0x2000c8ec

0801426c <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 801426c:	b580      	push	{r7, lr}
 801426e:	b084      	sub	sp, #16
 8014270:	af00      	add	r7, sp, #0
 8014272:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8014274:	687b      	ldr	r3, [r7, #4]
 8014276:	2b00      	cmp	r3, #0
 8014278:	d109      	bne.n	801428e <dhcp_start+0x22>
 801427a:	4b37      	ldr	r3, [pc, #220]	; (8014358 <dhcp_start+0xec>)
 801427c:	f240 22e7 	movw	r2, #743	; 0x2e7
 8014280:	4936      	ldr	r1, [pc, #216]	; (801435c <dhcp_start+0xf0>)
 8014282:	4837      	ldr	r0, [pc, #220]	; (8014360 <dhcp_start+0xf4>)
 8014284:	f004 fc0a 	bl	8018a9c <iprintf>
 8014288:	f06f 030f 	mvn.w	r3, #15
 801428c:	e060      	b.n	8014350 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 801428e:	687b      	ldr	r3, [r7, #4]
 8014290:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8014294:	f003 0301 	and.w	r3, r3, #1
 8014298:	2b00      	cmp	r3, #0
 801429a:	d109      	bne.n	80142b0 <dhcp_start+0x44>
 801429c:	4b2e      	ldr	r3, [pc, #184]	; (8014358 <dhcp_start+0xec>)
 801429e:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 80142a2:	4930      	ldr	r1, [pc, #192]	; (8014364 <dhcp_start+0xf8>)
 80142a4:	482e      	ldr	r0, [pc, #184]	; (8014360 <dhcp_start+0xf4>)
 80142a6:	f004 fbf9 	bl	8018a9c <iprintf>
 80142aa:	f06f 030f 	mvn.w	r3, #15
 80142ae:	e04f      	b.n	8014350 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 80142b0:	687b      	ldr	r3, [r7, #4]
 80142b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80142b4:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 80142b6:	687b      	ldr	r3, [r7, #4]
 80142b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80142ba:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 80142be:	d202      	bcs.n	80142c6 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 80142c0:	f04f 33ff 	mov.w	r3, #4294967295
 80142c4:	e044      	b.n	8014350 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 80142c6:	68fb      	ldr	r3, [r7, #12]
 80142c8:	2b00      	cmp	r3, #0
 80142ca:	d10d      	bne.n	80142e8 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 80142cc:	2034      	movs	r0, #52	; 0x34
 80142ce:	f7f8 f9b3 	bl	800c638 <mem_malloc>
 80142d2:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 80142d4:	68fb      	ldr	r3, [r7, #12]
 80142d6:	2b00      	cmp	r3, #0
 80142d8:	d102      	bne.n	80142e0 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 80142da:	f04f 33ff 	mov.w	r3, #4294967295
 80142de:	e037      	b.n	8014350 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 80142e0:	687b      	ldr	r3, [r7, #4]
 80142e2:	68fa      	ldr	r2, [r7, #12]
 80142e4:	625a      	str	r2, [r3, #36]	; 0x24
 80142e6:	e005      	b.n	80142f4 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 80142e8:	68fb      	ldr	r3, [r7, #12]
 80142ea:	791b      	ldrb	r3, [r3, #4]
 80142ec:	2b00      	cmp	r3, #0
 80142ee:	d001      	beq.n	80142f4 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 80142f0:	f7ff fc92 	bl	8013c18 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 80142f4:	2234      	movs	r2, #52	; 0x34
 80142f6:	2100      	movs	r1, #0
 80142f8:	68f8      	ldr	r0, [r7, #12]
 80142fa:	f004 fbc7 	bl	8018a8c <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 80142fe:	f7ff fc39 	bl	8013b74 <dhcp_inc_pcb_refcount>
 8014302:	4603      	mov	r3, r0
 8014304:	2b00      	cmp	r3, #0
 8014306:	d002      	beq.n	801430e <dhcp_start+0xa2>
    return ERR_MEM;
 8014308:	f04f 33ff 	mov.w	r3, #4294967295
 801430c:	e020      	b.n	8014350 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 801430e:	68fb      	ldr	r3, [r7, #12]
 8014310:	2201      	movs	r2, #1
 8014312:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8014314:	687b      	ldr	r3, [r7, #4]
 8014316:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801431a:	f003 0304 	and.w	r3, r3, #4
 801431e:	2b00      	cmp	r3, #0
 8014320:	d105      	bne.n	801432e <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 8014322:	2102      	movs	r1, #2
 8014324:	68f8      	ldr	r0, [r7, #12]
 8014326:	f000 fcc5 	bl	8014cb4 <dhcp_set_state>
    return ERR_OK;
 801432a:	2300      	movs	r3, #0
 801432c:	e010      	b.n	8014350 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 801432e:	6878      	ldr	r0, [r7, #4]
 8014330:	f000 f8bc 	bl	80144ac <dhcp_discover>
 8014334:	4603      	mov	r3, r0
 8014336:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8014338:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801433c:	2b00      	cmp	r3, #0
 801433e:	d005      	beq.n	801434c <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8014340:	6878      	ldr	r0, [r7, #4]
 8014342:	f000 fc1d 	bl	8014b80 <dhcp_release_and_stop>
    return ERR_MEM;
 8014346:	f04f 33ff 	mov.w	r3, #4294967295
 801434a:	e001      	b.n	8014350 <dhcp_start+0xe4>
  }
  return result;
 801434c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8014350:	4618      	mov	r0, r3
 8014352:	3710      	adds	r7, #16
 8014354:	46bd      	mov	sp, r7
 8014356:	bd80      	pop	{r7, pc}
 8014358:	0801bfa0 	.word	0x0801bfa0
 801435c:	0801c084 	.word	0x0801c084
 8014360:	0801c000 	.word	0x0801c000
 8014364:	0801c0c8 	.word	0x0801c0c8

08014368 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8014368:	b580      	push	{r7, lr}
 801436a:	b084      	sub	sp, #16
 801436c:	af00      	add	r7, sp, #0
 801436e:	6078      	str	r0, [r7, #4]
 8014370:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8014372:	687b      	ldr	r3, [r7, #4]
 8014374:	2b00      	cmp	r3, #0
 8014376:	d107      	bne.n	8014388 <dhcp_arp_reply+0x20>
 8014378:	4b0e      	ldr	r3, [pc, #56]	; (80143b4 <dhcp_arp_reply+0x4c>)
 801437a:	f240 328b 	movw	r2, #907	; 0x38b
 801437e:	490e      	ldr	r1, [pc, #56]	; (80143b8 <dhcp_arp_reply+0x50>)
 8014380:	480e      	ldr	r0, [pc, #56]	; (80143bc <dhcp_arp_reply+0x54>)
 8014382:	f004 fb8b 	bl	8018a9c <iprintf>
 8014386:	e012      	b.n	80143ae <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8014388:	687b      	ldr	r3, [r7, #4]
 801438a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801438c:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 801438e:	68fb      	ldr	r3, [r7, #12]
 8014390:	2b00      	cmp	r3, #0
 8014392:	d00c      	beq.n	80143ae <dhcp_arp_reply+0x46>
 8014394:	68fb      	ldr	r3, [r7, #12]
 8014396:	795b      	ldrb	r3, [r3, #5]
 8014398:	2b08      	cmp	r3, #8
 801439a:	d108      	bne.n	80143ae <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 801439c:	683b      	ldr	r3, [r7, #0]
 801439e:	681a      	ldr	r2, [r3, #0]
 80143a0:	68fb      	ldr	r3, [r7, #12]
 80143a2:	69db      	ldr	r3, [r3, #28]
 80143a4:	429a      	cmp	r2, r3
 80143a6:	d102      	bne.n	80143ae <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 80143a8:	6878      	ldr	r0, [r7, #4]
 80143aa:	f000 f809 	bl	80143c0 <dhcp_decline>
    }
  }
}
 80143ae:	3710      	adds	r7, #16
 80143b0:	46bd      	mov	sp, r7
 80143b2:	bd80      	pop	{r7, pc}
 80143b4:	0801bfa0 	.word	0x0801bfa0
 80143b8:	0801c084 	.word	0x0801c084
 80143bc:	0801c000 	.word	0x0801c000

080143c0 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 80143c0:	b5b0      	push	{r4, r5, r7, lr}
 80143c2:	b08a      	sub	sp, #40	; 0x28
 80143c4:	af02      	add	r7, sp, #8
 80143c6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80143c8:	687b      	ldr	r3, [r7, #4]
 80143ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80143cc:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 80143ce:	210c      	movs	r1, #12
 80143d0:	69b8      	ldr	r0, [r7, #24]
 80143d2:	f000 fc6f 	bl	8014cb4 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 80143d6:	f107 030c 	add.w	r3, r7, #12
 80143da:	2204      	movs	r2, #4
 80143dc:	69b9      	ldr	r1, [r7, #24]
 80143de:	6878      	ldr	r0, [r7, #4]
 80143e0:	f001 f8f4 	bl	80155cc <dhcp_create_msg>
 80143e4:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80143e6:	697b      	ldr	r3, [r7, #20]
 80143e8:	2b00      	cmp	r3, #0
 80143ea:	d035      	beq.n	8014458 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80143ec:	697b      	ldr	r3, [r7, #20]
 80143ee:	685b      	ldr	r3, [r3, #4]
 80143f0:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80143f2:	89b8      	ldrh	r0, [r7, #12]
 80143f4:	693b      	ldr	r3, [r7, #16]
 80143f6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80143fa:	2304      	movs	r3, #4
 80143fc:	2232      	movs	r2, #50	; 0x32
 80143fe:	f000 fc73 	bl	8014ce8 <dhcp_option>
 8014402:	4603      	mov	r3, r0
 8014404:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8014406:	89bc      	ldrh	r4, [r7, #12]
 8014408:	693b      	ldr	r3, [r7, #16]
 801440a:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801440e:	69bb      	ldr	r3, [r7, #24]
 8014410:	69db      	ldr	r3, [r3, #28]
 8014412:	4618      	mov	r0, r3
 8014414:	f7f7 fd39 	bl	800be8a <lwip_htonl>
 8014418:	4603      	mov	r3, r0
 801441a:	461a      	mov	r2, r3
 801441c:	4629      	mov	r1, r5
 801441e:	4620      	mov	r0, r4
 8014420:	f000 fcee 	bl	8014e00 <dhcp_option_long>
 8014424:	4603      	mov	r3, r0
 8014426:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8014428:	89b8      	ldrh	r0, [r7, #12]
 801442a:	693b      	ldr	r3, [r7, #16]
 801442c:	33f0      	adds	r3, #240	; 0xf0
 801442e:	697a      	ldr	r2, [r7, #20]
 8014430:	4619      	mov	r1, r3
 8014432:	f001 f9a1 	bl	8015778 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8014436:	4b19      	ldr	r3, [pc, #100]	; (801449c <dhcp_decline+0xdc>)
 8014438:	6818      	ldr	r0, [r3, #0]
 801443a:	4b19      	ldr	r3, [pc, #100]	; (80144a0 <dhcp_decline+0xe0>)
 801443c:	9301      	str	r3, [sp, #4]
 801443e:	687b      	ldr	r3, [r7, #4]
 8014440:	9300      	str	r3, [sp, #0]
 8014442:	2343      	movs	r3, #67	; 0x43
 8014444:	4a17      	ldr	r2, [pc, #92]	; (80144a4 <dhcp_decline+0xe4>)
 8014446:	6979      	ldr	r1, [r7, #20]
 8014448:	f7ff f90e 	bl	8013668 <udp_sendto_if_src>
 801444c:	4603      	mov	r3, r0
 801444e:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8014450:	6978      	ldr	r0, [r7, #20]
 8014452:	f7f9 f953 	bl	800d6fc <pbuf_free>
 8014456:	e001      	b.n	801445c <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8014458:	23ff      	movs	r3, #255	; 0xff
 801445a:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801445c:	69bb      	ldr	r3, [r7, #24]
 801445e:	799b      	ldrb	r3, [r3, #6]
 8014460:	2bff      	cmp	r3, #255	; 0xff
 8014462:	d005      	beq.n	8014470 <dhcp_decline+0xb0>
    dhcp->tries++;
 8014464:	69bb      	ldr	r3, [r7, #24]
 8014466:	799b      	ldrb	r3, [r3, #6]
 8014468:	3301      	adds	r3, #1
 801446a:	b2da      	uxtb	r2, r3
 801446c:	69bb      	ldr	r3, [r7, #24]
 801446e:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8014470:	f242 7310 	movw	r3, #10000	; 0x2710
 8014474:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014476:	89fb      	ldrh	r3, [r7, #14]
 8014478:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801447c:	4a0a      	ldr	r2, [pc, #40]	; (80144a8 <dhcp_decline+0xe8>)
 801447e:	fb82 1203 	smull	r1, r2, r2, r3
 8014482:	1152      	asrs	r2, r2, #5
 8014484:	17db      	asrs	r3, r3, #31
 8014486:	1ad3      	subs	r3, r2, r3
 8014488:	b29a      	uxth	r2, r3
 801448a:	69bb      	ldr	r3, [r7, #24]
 801448c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801448e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014492:	4618      	mov	r0, r3
 8014494:	3720      	adds	r7, #32
 8014496:	46bd      	mov	sp, r7
 8014498:	bdb0      	pop	{r4, r5, r7, pc}
 801449a:	bf00      	nop
 801449c:	2000c914 	.word	0x2000c914
 80144a0:	0801cbb4 	.word	0x0801cbb4
 80144a4:	0801cbb8 	.word	0x0801cbb8
 80144a8:	10624dd3 	.word	0x10624dd3

080144ac <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 80144ac:	b580      	push	{r7, lr}
 80144ae:	b08a      	sub	sp, #40	; 0x28
 80144b0:	af02      	add	r7, sp, #8
 80144b2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80144b4:	687b      	ldr	r3, [r7, #4]
 80144b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80144b8:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 80144ba:	2300      	movs	r3, #0
 80144bc:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 80144be:	69bb      	ldr	r3, [r7, #24]
 80144c0:	2200      	movs	r2, #0
 80144c2:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 80144c4:	2106      	movs	r1, #6
 80144c6:	69b8      	ldr	r0, [r7, #24]
 80144c8:	f000 fbf4 	bl	8014cb4 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 80144cc:	f107 0308 	add.w	r3, r7, #8
 80144d0:	2201      	movs	r2, #1
 80144d2:	69b9      	ldr	r1, [r7, #24]
 80144d4:	6878      	ldr	r0, [r7, #4]
 80144d6:	f001 f879 	bl	80155cc <dhcp_create_msg>
 80144da:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 80144dc:	693b      	ldr	r3, [r7, #16]
 80144de:	2b00      	cmp	r3, #0
 80144e0:	d04b      	beq.n	801457a <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80144e2:	693b      	ldr	r3, [r7, #16]
 80144e4:	685b      	ldr	r3, [r3, #4]
 80144e6:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80144e8:	8938      	ldrh	r0, [r7, #8]
 80144ea:	68fb      	ldr	r3, [r7, #12]
 80144ec:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80144f0:	2302      	movs	r3, #2
 80144f2:	2239      	movs	r2, #57	; 0x39
 80144f4:	f000 fbf8 	bl	8014ce8 <dhcp_option>
 80144f8:	4603      	mov	r3, r0
 80144fa:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80144fc:	8938      	ldrh	r0, [r7, #8]
 80144fe:	68fb      	ldr	r3, [r7, #12]
 8014500:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014504:	687b      	ldr	r3, [r7, #4]
 8014506:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014508:	461a      	mov	r2, r3
 801450a:	f000 fc47 	bl	8014d9c <dhcp_option_short>
 801450e:	4603      	mov	r3, r0
 8014510:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8014512:	8938      	ldrh	r0, [r7, #8]
 8014514:	68fb      	ldr	r3, [r7, #12]
 8014516:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801451a:	2303      	movs	r3, #3
 801451c:	2237      	movs	r2, #55	; 0x37
 801451e:	f000 fbe3 	bl	8014ce8 <dhcp_option>
 8014522:	4603      	mov	r3, r0
 8014524:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014526:	2300      	movs	r3, #0
 8014528:	77fb      	strb	r3, [r7, #31]
 801452a:	e00e      	b.n	801454a <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801452c:	8938      	ldrh	r0, [r7, #8]
 801452e:	68fb      	ldr	r3, [r7, #12]
 8014530:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014534:	7ffb      	ldrb	r3, [r7, #31]
 8014536:	4a29      	ldr	r2, [pc, #164]	; (80145dc <dhcp_discover+0x130>)
 8014538:	5cd3      	ldrb	r3, [r2, r3]
 801453a:	461a      	mov	r2, r3
 801453c:	f000 fc08 	bl	8014d50 <dhcp_option_byte>
 8014540:	4603      	mov	r3, r0
 8014542:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014544:	7ffb      	ldrb	r3, [r7, #31]
 8014546:	3301      	adds	r3, #1
 8014548:	77fb      	strb	r3, [r7, #31]
 801454a:	7ffb      	ldrb	r3, [r7, #31]
 801454c:	2b02      	cmp	r3, #2
 801454e:	d9ed      	bls.n	801452c <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8014550:	8938      	ldrh	r0, [r7, #8]
 8014552:	68fb      	ldr	r3, [r7, #12]
 8014554:	33f0      	adds	r3, #240	; 0xf0
 8014556:	693a      	ldr	r2, [r7, #16]
 8014558:	4619      	mov	r1, r3
 801455a:	f001 f90d 	bl	8015778 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801455e:	4b20      	ldr	r3, [pc, #128]	; (80145e0 <dhcp_discover+0x134>)
 8014560:	6818      	ldr	r0, [r3, #0]
 8014562:	4b20      	ldr	r3, [pc, #128]	; (80145e4 <dhcp_discover+0x138>)
 8014564:	9301      	str	r3, [sp, #4]
 8014566:	687b      	ldr	r3, [r7, #4]
 8014568:	9300      	str	r3, [sp, #0]
 801456a:	2343      	movs	r3, #67	; 0x43
 801456c:	4a1e      	ldr	r2, [pc, #120]	; (80145e8 <dhcp_discover+0x13c>)
 801456e:	6939      	ldr	r1, [r7, #16]
 8014570:	f7ff f87a 	bl	8013668 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 8014574:	6938      	ldr	r0, [r7, #16]
 8014576:	f7f9 f8c1 	bl	800d6fc <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 801457a:	69bb      	ldr	r3, [r7, #24]
 801457c:	799b      	ldrb	r3, [r3, #6]
 801457e:	2bff      	cmp	r3, #255	; 0xff
 8014580:	d005      	beq.n	801458e <dhcp_discover+0xe2>
    dhcp->tries++;
 8014582:	69bb      	ldr	r3, [r7, #24]
 8014584:	799b      	ldrb	r3, [r3, #6]
 8014586:	3301      	adds	r3, #1
 8014588:	b2da      	uxtb	r2, r3
 801458a:	69bb      	ldr	r3, [r7, #24]
 801458c:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801458e:	69bb      	ldr	r3, [r7, #24]
 8014590:	799b      	ldrb	r3, [r3, #6]
 8014592:	2b05      	cmp	r3, #5
 8014594:	d80d      	bhi.n	80145b2 <dhcp_discover+0x106>
 8014596:	69bb      	ldr	r3, [r7, #24]
 8014598:	799b      	ldrb	r3, [r3, #6]
 801459a:	461a      	mov	r2, r3
 801459c:	2301      	movs	r3, #1
 801459e:	4093      	lsls	r3, r2
 80145a0:	b29b      	uxth	r3, r3
 80145a2:	461a      	mov	r2, r3
 80145a4:	0152      	lsls	r2, r2, #5
 80145a6:	1ad2      	subs	r2, r2, r3
 80145a8:	0092      	lsls	r2, r2, #2
 80145aa:	4413      	add	r3, r2
 80145ac:	00db      	lsls	r3, r3, #3
 80145ae:	b29b      	uxth	r3, r3
 80145b0:	e001      	b.n	80145b6 <dhcp_discover+0x10a>
 80145b2:	f64e 2360 	movw	r3, #60000	; 0xea60
 80145b6:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80145b8:	897b      	ldrh	r3, [r7, #10]
 80145ba:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80145be:	4a0b      	ldr	r2, [pc, #44]	; (80145ec <dhcp_discover+0x140>)
 80145c0:	fb82 1203 	smull	r1, r2, r2, r3
 80145c4:	1152      	asrs	r2, r2, #5
 80145c6:	17db      	asrs	r3, r3, #31
 80145c8:	1ad3      	subs	r3, r2, r3
 80145ca:	b29a      	uxth	r2, r3
 80145cc:	69bb      	ldr	r3, [r7, #24]
 80145ce:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80145d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80145d4:	4618      	mov	r0, r3
 80145d6:	3720      	adds	r7, #32
 80145d8:	46bd      	mov	sp, r7
 80145da:	bd80      	pop	{r7, pc}
 80145dc:	200000a8 	.word	0x200000a8
 80145e0:	2000c914 	.word	0x2000c914
 80145e4:	0801cbb4 	.word	0x0801cbb4
 80145e8:	0801cbb8 	.word	0x0801cbb8
 80145ec:	10624dd3 	.word	0x10624dd3

080145f0 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 80145f0:	b580      	push	{r7, lr}
 80145f2:	b088      	sub	sp, #32
 80145f4:	af00      	add	r7, sp, #0
 80145f6:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 80145f8:	687b      	ldr	r3, [r7, #4]
 80145fa:	2b00      	cmp	r3, #0
 80145fc:	d107      	bne.n	801460e <dhcp_bind+0x1e>
 80145fe:	4b64      	ldr	r3, [pc, #400]	; (8014790 <dhcp_bind+0x1a0>)
 8014600:	f240 4215 	movw	r2, #1045	; 0x415
 8014604:	4963      	ldr	r1, [pc, #396]	; (8014794 <dhcp_bind+0x1a4>)
 8014606:	4864      	ldr	r0, [pc, #400]	; (8014798 <dhcp_bind+0x1a8>)
 8014608:	f004 fa48 	bl	8018a9c <iprintf>
 801460c:	e0bc      	b.n	8014788 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 801460e:	687b      	ldr	r3, [r7, #4]
 8014610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014612:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8014614:	69bb      	ldr	r3, [r7, #24]
 8014616:	2b00      	cmp	r3, #0
 8014618:	d107      	bne.n	801462a <dhcp_bind+0x3a>
 801461a:	4b5d      	ldr	r3, [pc, #372]	; (8014790 <dhcp_bind+0x1a0>)
 801461c:	f240 4217 	movw	r2, #1047	; 0x417
 8014620:	495e      	ldr	r1, [pc, #376]	; (801479c <dhcp_bind+0x1ac>)
 8014622:	485d      	ldr	r0, [pc, #372]	; (8014798 <dhcp_bind+0x1a8>)
 8014624:	f004 fa3a 	bl	8018a9c <iprintf>
 8014628:	e0ae      	b.n	8014788 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 801462a:	69bb      	ldr	r3, [r7, #24]
 801462c:	2200      	movs	r2, #0
 801462e:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8014630:	69bb      	ldr	r3, [r7, #24]
 8014632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014638:	d019      	beq.n	801466e <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801463a:	69bb      	ldr	r3, [r7, #24]
 801463c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801463e:	331e      	adds	r3, #30
 8014640:	4a57      	ldr	r2, [pc, #348]	; (80147a0 <dhcp_bind+0x1b0>)
 8014642:	fba2 2303 	umull	r2, r3, r2, r3
 8014646:	095b      	lsrs	r3, r3, #5
 8014648:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801464a:	69fb      	ldr	r3, [r7, #28]
 801464c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014650:	d302      	bcc.n	8014658 <dhcp_bind+0x68>
      timeout = 0xffff;
 8014652:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014656:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 8014658:	69fb      	ldr	r3, [r7, #28]
 801465a:	b29a      	uxth	r2, r3
 801465c:	69bb      	ldr	r3, [r7, #24]
 801465e:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 8014660:	69bb      	ldr	r3, [r7, #24]
 8014662:	8a9b      	ldrh	r3, [r3, #20]
 8014664:	2b00      	cmp	r3, #0
 8014666:	d102      	bne.n	801466e <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 8014668:	69bb      	ldr	r3, [r7, #24]
 801466a:	2201      	movs	r2, #1
 801466c:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 801466e:	69bb      	ldr	r3, [r7, #24]
 8014670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014672:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014676:	d01d      	beq.n	80146b4 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8014678:	69bb      	ldr	r3, [r7, #24]
 801467a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801467c:	331e      	adds	r3, #30
 801467e:	4a48      	ldr	r2, [pc, #288]	; (80147a0 <dhcp_bind+0x1b0>)
 8014680:	fba2 2303 	umull	r2, r3, r2, r3
 8014684:	095b      	lsrs	r3, r3, #5
 8014686:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8014688:	69fb      	ldr	r3, [r7, #28]
 801468a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801468e:	d302      	bcc.n	8014696 <dhcp_bind+0xa6>
      timeout = 0xffff;
 8014690:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014694:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 8014696:	69fb      	ldr	r3, [r7, #28]
 8014698:	b29a      	uxth	r2, r3
 801469a:	69bb      	ldr	r3, [r7, #24]
 801469c:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 801469e:	69bb      	ldr	r3, [r7, #24]
 80146a0:	895b      	ldrh	r3, [r3, #10]
 80146a2:	2b00      	cmp	r3, #0
 80146a4:	d102      	bne.n	80146ac <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 80146a6:	69bb      	ldr	r3, [r7, #24]
 80146a8:	2201      	movs	r2, #1
 80146aa:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 80146ac:	69bb      	ldr	r3, [r7, #24]
 80146ae:	895a      	ldrh	r2, [r3, #10]
 80146b0:	69bb      	ldr	r3, [r7, #24]
 80146b2:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 80146b4:	69bb      	ldr	r3, [r7, #24]
 80146b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80146b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80146bc:	d01d      	beq.n	80146fa <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80146be:	69bb      	ldr	r3, [r7, #24]
 80146c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80146c2:	331e      	adds	r3, #30
 80146c4:	4a36      	ldr	r2, [pc, #216]	; (80147a0 <dhcp_bind+0x1b0>)
 80146c6:	fba2 2303 	umull	r2, r3, r2, r3
 80146ca:	095b      	lsrs	r3, r3, #5
 80146cc:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80146ce:	69fb      	ldr	r3, [r7, #28]
 80146d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80146d4:	d302      	bcc.n	80146dc <dhcp_bind+0xec>
      timeout = 0xffff;
 80146d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80146da:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 80146dc:	69fb      	ldr	r3, [r7, #28]
 80146de:	b29a      	uxth	r2, r3
 80146e0:	69bb      	ldr	r3, [r7, #24]
 80146e2:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 80146e4:	69bb      	ldr	r3, [r7, #24]
 80146e6:	899b      	ldrh	r3, [r3, #12]
 80146e8:	2b00      	cmp	r3, #0
 80146ea:	d102      	bne.n	80146f2 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 80146ec:	69bb      	ldr	r3, [r7, #24]
 80146ee:	2201      	movs	r2, #1
 80146f0:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 80146f2:	69bb      	ldr	r3, [r7, #24]
 80146f4:	899a      	ldrh	r2, [r3, #12]
 80146f6:	69bb      	ldr	r3, [r7, #24]
 80146f8:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 80146fa:	69bb      	ldr	r3, [r7, #24]
 80146fc:	895a      	ldrh	r2, [r3, #10]
 80146fe:	69bb      	ldr	r3, [r7, #24]
 8014700:	899b      	ldrh	r3, [r3, #12]
 8014702:	429a      	cmp	r2, r3
 8014704:	d306      	bcc.n	8014714 <dhcp_bind+0x124>
 8014706:	69bb      	ldr	r3, [r7, #24]
 8014708:	899b      	ldrh	r3, [r3, #12]
 801470a:	2b00      	cmp	r3, #0
 801470c:	d002      	beq.n	8014714 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 801470e:	69bb      	ldr	r3, [r7, #24]
 8014710:	2200      	movs	r2, #0
 8014712:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 8014714:	69bb      	ldr	r3, [r7, #24]
 8014716:	79db      	ldrb	r3, [r3, #7]
 8014718:	2b00      	cmp	r3, #0
 801471a:	d003      	beq.n	8014724 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 801471c:	69bb      	ldr	r3, [r7, #24]
 801471e:	6a1b      	ldr	r3, [r3, #32]
 8014720:	613b      	str	r3, [r7, #16]
 8014722:	e014      	b.n	801474e <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8014724:	69bb      	ldr	r3, [r7, #24]
 8014726:	331c      	adds	r3, #28
 8014728:	781b      	ldrb	r3, [r3, #0]
 801472a:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 801472c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014730:	2b00      	cmp	r3, #0
 8014732:	db02      	blt.n	801473a <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8014734:	23ff      	movs	r3, #255	; 0xff
 8014736:	613b      	str	r3, [r7, #16]
 8014738:	e009      	b.n	801474e <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 801473a:	7dfb      	ldrb	r3, [r7, #23]
 801473c:	2bbf      	cmp	r3, #191	; 0xbf
 801473e:	d903      	bls.n	8014748 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8014740:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8014744:	613b      	str	r3, [r7, #16]
 8014746:	e002      	b.n	801474e <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8014748:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801474c:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 801474e:	69bb      	ldr	r3, [r7, #24]
 8014750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014752:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 8014754:	68fb      	ldr	r3, [r7, #12]
 8014756:	2b00      	cmp	r3, #0
 8014758:	d108      	bne.n	801476c <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 801475a:	69bb      	ldr	r3, [r7, #24]
 801475c:	69da      	ldr	r2, [r3, #28]
 801475e:	693b      	ldr	r3, [r7, #16]
 8014760:	4013      	ands	r3, r2
 8014762:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8014764:	68fb      	ldr	r3, [r7, #12]
 8014766:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801476a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 801476c:	210a      	movs	r1, #10
 801476e:	69b8      	ldr	r0, [r7, #24]
 8014770:	f000 faa0 	bl	8014cb4 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8014774:	69bb      	ldr	r3, [r7, #24]
 8014776:	f103 011c 	add.w	r1, r3, #28
 801477a:	f107 030c 	add.w	r3, r7, #12
 801477e:	f107 0210 	add.w	r2, r7, #16
 8014782:	6878      	ldr	r0, [r7, #4]
 8014784:	f7f8 fb14 	bl	800cdb0 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8014788:	3720      	adds	r7, #32
 801478a:	46bd      	mov	sp, r7
 801478c:	bd80      	pop	{r7, pc}
 801478e:	bf00      	nop
 8014790:	0801bfa0 	.word	0x0801bfa0
 8014794:	0801c100 	.word	0x0801c100
 8014798:	0801c000 	.word	0x0801c000
 801479c:	0801c11c 	.word	0x0801c11c
 80147a0:	88888889 	.word	0x88888889

080147a4 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 80147a4:	b580      	push	{r7, lr}
 80147a6:	b08a      	sub	sp, #40	; 0x28
 80147a8:	af02      	add	r7, sp, #8
 80147aa:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80147ac:	687b      	ldr	r3, [r7, #4]
 80147ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80147b0:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 80147b2:	2105      	movs	r1, #5
 80147b4:	69b8      	ldr	r0, [r7, #24]
 80147b6:	f000 fa7d 	bl	8014cb4 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80147ba:	f107 030c 	add.w	r3, r7, #12
 80147be:	2203      	movs	r2, #3
 80147c0:	69b9      	ldr	r1, [r7, #24]
 80147c2:	6878      	ldr	r0, [r7, #4]
 80147c4:	f000 ff02 	bl	80155cc <dhcp_create_msg>
 80147c8:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80147ca:	697b      	ldr	r3, [r7, #20]
 80147cc:	2b00      	cmp	r3, #0
 80147ce:	d04e      	beq.n	801486e <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80147d0:	697b      	ldr	r3, [r7, #20]
 80147d2:	685b      	ldr	r3, [r3, #4]
 80147d4:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80147d6:	89b8      	ldrh	r0, [r7, #12]
 80147d8:	693b      	ldr	r3, [r7, #16]
 80147da:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80147de:	2302      	movs	r3, #2
 80147e0:	2239      	movs	r2, #57	; 0x39
 80147e2:	f000 fa81 	bl	8014ce8 <dhcp_option>
 80147e6:	4603      	mov	r3, r0
 80147e8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80147ea:	89b8      	ldrh	r0, [r7, #12]
 80147ec:	693b      	ldr	r3, [r7, #16]
 80147ee:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80147f2:	687b      	ldr	r3, [r7, #4]
 80147f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80147f6:	461a      	mov	r2, r3
 80147f8:	f000 fad0 	bl	8014d9c <dhcp_option_short>
 80147fc:	4603      	mov	r3, r0
 80147fe:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8014800:	89b8      	ldrh	r0, [r7, #12]
 8014802:	693b      	ldr	r3, [r7, #16]
 8014804:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014808:	2303      	movs	r3, #3
 801480a:	2237      	movs	r2, #55	; 0x37
 801480c:	f000 fa6c 	bl	8014ce8 <dhcp_option>
 8014810:	4603      	mov	r3, r0
 8014812:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014814:	2300      	movs	r3, #0
 8014816:	77bb      	strb	r3, [r7, #30]
 8014818:	e00e      	b.n	8014838 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801481a:	89b8      	ldrh	r0, [r7, #12]
 801481c:	693b      	ldr	r3, [r7, #16]
 801481e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014822:	7fbb      	ldrb	r3, [r7, #30]
 8014824:	4a2a      	ldr	r2, [pc, #168]	; (80148d0 <dhcp_renew+0x12c>)
 8014826:	5cd3      	ldrb	r3, [r2, r3]
 8014828:	461a      	mov	r2, r3
 801482a:	f000 fa91 	bl	8014d50 <dhcp_option_byte>
 801482e:	4603      	mov	r3, r0
 8014830:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014832:	7fbb      	ldrb	r3, [r7, #30]
 8014834:	3301      	adds	r3, #1
 8014836:	77bb      	strb	r3, [r7, #30]
 8014838:	7fbb      	ldrb	r3, [r7, #30]
 801483a:	2b02      	cmp	r3, #2
 801483c:	d9ed      	bls.n	801481a <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801483e:	89b8      	ldrh	r0, [r7, #12]
 8014840:	693b      	ldr	r3, [r7, #16]
 8014842:	33f0      	adds	r3, #240	; 0xf0
 8014844:	697a      	ldr	r2, [r7, #20]
 8014846:	4619      	mov	r1, r3
 8014848:	f000 ff96 	bl	8015778 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801484c:	4b21      	ldr	r3, [pc, #132]	; (80148d4 <dhcp_renew+0x130>)
 801484e:	6818      	ldr	r0, [r3, #0]
 8014850:	69bb      	ldr	r3, [r7, #24]
 8014852:	f103 0218 	add.w	r2, r3, #24
 8014856:	687b      	ldr	r3, [r7, #4]
 8014858:	9300      	str	r3, [sp, #0]
 801485a:	2343      	movs	r3, #67	; 0x43
 801485c:	6979      	ldr	r1, [r7, #20]
 801485e:	f7fe fe8f 	bl	8013580 <udp_sendto_if>
 8014862:	4603      	mov	r3, r0
 8014864:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8014866:	6978      	ldr	r0, [r7, #20]
 8014868:	f7f8 ff48 	bl	800d6fc <pbuf_free>
 801486c:	e001      	b.n	8014872 <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801486e:	23ff      	movs	r3, #255	; 0xff
 8014870:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8014872:	69bb      	ldr	r3, [r7, #24]
 8014874:	799b      	ldrb	r3, [r3, #6]
 8014876:	2bff      	cmp	r3, #255	; 0xff
 8014878:	d005      	beq.n	8014886 <dhcp_renew+0xe2>
    dhcp->tries++;
 801487a:	69bb      	ldr	r3, [r7, #24]
 801487c:	799b      	ldrb	r3, [r3, #6]
 801487e:	3301      	adds	r3, #1
 8014880:	b2da      	uxtb	r2, r3
 8014882:	69bb      	ldr	r3, [r7, #24]
 8014884:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8014886:	69bb      	ldr	r3, [r7, #24]
 8014888:	799b      	ldrb	r3, [r3, #6]
 801488a:	2b09      	cmp	r3, #9
 801488c:	d80a      	bhi.n	80148a4 <dhcp_renew+0x100>
 801488e:	69bb      	ldr	r3, [r7, #24]
 8014890:	799b      	ldrb	r3, [r3, #6]
 8014892:	b29b      	uxth	r3, r3
 8014894:	461a      	mov	r2, r3
 8014896:	0152      	lsls	r2, r2, #5
 8014898:	1ad2      	subs	r2, r2, r3
 801489a:	0092      	lsls	r2, r2, #2
 801489c:	4413      	add	r3, r2
 801489e:	011b      	lsls	r3, r3, #4
 80148a0:	b29b      	uxth	r3, r3
 80148a2:	e001      	b.n	80148a8 <dhcp_renew+0x104>
 80148a4:	f644 6320 	movw	r3, #20000	; 0x4e20
 80148a8:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80148aa:	89fb      	ldrh	r3, [r7, #14]
 80148ac:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80148b0:	4a09      	ldr	r2, [pc, #36]	; (80148d8 <dhcp_renew+0x134>)
 80148b2:	fb82 1203 	smull	r1, r2, r2, r3
 80148b6:	1152      	asrs	r2, r2, #5
 80148b8:	17db      	asrs	r3, r3, #31
 80148ba:	1ad3      	subs	r3, r2, r3
 80148bc:	b29a      	uxth	r2, r3
 80148be:	69bb      	ldr	r3, [r7, #24]
 80148c0:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80148c2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80148c6:	4618      	mov	r0, r3
 80148c8:	3720      	adds	r7, #32
 80148ca:	46bd      	mov	sp, r7
 80148cc:	bd80      	pop	{r7, pc}
 80148ce:	bf00      	nop
 80148d0:	200000a8 	.word	0x200000a8
 80148d4:	2000c914 	.word	0x2000c914
 80148d8:	10624dd3 	.word	0x10624dd3

080148dc <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 80148dc:	b580      	push	{r7, lr}
 80148de:	b08a      	sub	sp, #40	; 0x28
 80148e0:	af02      	add	r7, sp, #8
 80148e2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80148e4:	687b      	ldr	r3, [r7, #4]
 80148e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80148e8:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 80148ea:	2104      	movs	r1, #4
 80148ec:	69b8      	ldr	r0, [r7, #24]
 80148ee:	f000 f9e1 	bl	8014cb4 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80148f2:	f107 030c 	add.w	r3, r7, #12
 80148f6:	2203      	movs	r2, #3
 80148f8:	69b9      	ldr	r1, [r7, #24]
 80148fa:	6878      	ldr	r0, [r7, #4]
 80148fc:	f000 fe66 	bl	80155cc <dhcp_create_msg>
 8014900:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8014902:	697b      	ldr	r3, [r7, #20]
 8014904:	2b00      	cmp	r3, #0
 8014906:	d04c      	beq.n	80149a2 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014908:	697b      	ldr	r3, [r7, #20]
 801490a:	685b      	ldr	r3, [r3, #4]
 801490c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801490e:	89b8      	ldrh	r0, [r7, #12]
 8014910:	693b      	ldr	r3, [r7, #16]
 8014912:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014916:	2302      	movs	r3, #2
 8014918:	2239      	movs	r2, #57	; 0x39
 801491a:	f000 f9e5 	bl	8014ce8 <dhcp_option>
 801491e:	4603      	mov	r3, r0
 8014920:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8014922:	89b8      	ldrh	r0, [r7, #12]
 8014924:	693b      	ldr	r3, [r7, #16]
 8014926:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801492a:	687b      	ldr	r3, [r7, #4]
 801492c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801492e:	461a      	mov	r2, r3
 8014930:	f000 fa34 	bl	8014d9c <dhcp_option_short>
 8014934:	4603      	mov	r3, r0
 8014936:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8014938:	89b8      	ldrh	r0, [r7, #12]
 801493a:	693b      	ldr	r3, [r7, #16]
 801493c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014940:	2303      	movs	r3, #3
 8014942:	2237      	movs	r2, #55	; 0x37
 8014944:	f000 f9d0 	bl	8014ce8 <dhcp_option>
 8014948:	4603      	mov	r3, r0
 801494a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801494c:	2300      	movs	r3, #0
 801494e:	77bb      	strb	r3, [r7, #30]
 8014950:	e00e      	b.n	8014970 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8014952:	89b8      	ldrh	r0, [r7, #12]
 8014954:	693b      	ldr	r3, [r7, #16]
 8014956:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801495a:	7fbb      	ldrb	r3, [r7, #30]
 801495c:	4a29      	ldr	r2, [pc, #164]	; (8014a04 <dhcp_rebind+0x128>)
 801495e:	5cd3      	ldrb	r3, [r2, r3]
 8014960:	461a      	mov	r2, r3
 8014962:	f000 f9f5 	bl	8014d50 <dhcp_option_byte>
 8014966:	4603      	mov	r3, r0
 8014968:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801496a:	7fbb      	ldrb	r3, [r7, #30]
 801496c:	3301      	adds	r3, #1
 801496e:	77bb      	strb	r3, [r7, #30]
 8014970:	7fbb      	ldrb	r3, [r7, #30]
 8014972:	2b02      	cmp	r3, #2
 8014974:	d9ed      	bls.n	8014952 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8014976:	89b8      	ldrh	r0, [r7, #12]
 8014978:	693b      	ldr	r3, [r7, #16]
 801497a:	33f0      	adds	r3, #240	; 0xf0
 801497c:	697a      	ldr	r2, [r7, #20]
 801497e:	4619      	mov	r1, r3
 8014980:	f000 fefa 	bl	8015778 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8014984:	4b20      	ldr	r3, [pc, #128]	; (8014a08 <dhcp_rebind+0x12c>)
 8014986:	6818      	ldr	r0, [r3, #0]
 8014988:	687b      	ldr	r3, [r7, #4]
 801498a:	9300      	str	r3, [sp, #0]
 801498c:	2343      	movs	r3, #67	; 0x43
 801498e:	4a1f      	ldr	r2, [pc, #124]	; (8014a0c <dhcp_rebind+0x130>)
 8014990:	6979      	ldr	r1, [r7, #20]
 8014992:	f7fe fdf5 	bl	8013580 <udp_sendto_if>
 8014996:	4603      	mov	r3, r0
 8014998:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801499a:	6978      	ldr	r0, [r7, #20]
 801499c:	f7f8 feae 	bl	800d6fc <pbuf_free>
 80149a0:	e001      	b.n	80149a6 <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80149a2:	23ff      	movs	r3, #255	; 0xff
 80149a4:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80149a6:	69bb      	ldr	r3, [r7, #24]
 80149a8:	799b      	ldrb	r3, [r3, #6]
 80149aa:	2bff      	cmp	r3, #255	; 0xff
 80149ac:	d005      	beq.n	80149ba <dhcp_rebind+0xde>
    dhcp->tries++;
 80149ae:	69bb      	ldr	r3, [r7, #24]
 80149b0:	799b      	ldrb	r3, [r3, #6]
 80149b2:	3301      	adds	r3, #1
 80149b4:	b2da      	uxtb	r2, r3
 80149b6:	69bb      	ldr	r3, [r7, #24]
 80149b8:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80149ba:	69bb      	ldr	r3, [r7, #24]
 80149bc:	799b      	ldrb	r3, [r3, #6]
 80149be:	2b09      	cmp	r3, #9
 80149c0:	d80a      	bhi.n	80149d8 <dhcp_rebind+0xfc>
 80149c2:	69bb      	ldr	r3, [r7, #24]
 80149c4:	799b      	ldrb	r3, [r3, #6]
 80149c6:	b29b      	uxth	r3, r3
 80149c8:	461a      	mov	r2, r3
 80149ca:	0152      	lsls	r2, r2, #5
 80149cc:	1ad2      	subs	r2, r2, r3
 80149ce:	0092      	lsls	r2, r2, #2
 80149d0:	4413      	add	r3, r2
 80149d2:	00db      	lsls	r3, r3, #3
 80149d4:	b29b      	uxth	r3, r3
 80149d6:	e001      	b.n	80149dc <dhcp_rebind+0x100>
 80149d8:	f242 7310 	movw	r3, #10000	; 0x2710
 80149dc:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80149de:	89fb      	ldrh	r3, [r7, #14]
 80149e0:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80149e4:	4a0a      	ldr	r2, [pc, #40]	; (8014a10 <dhcp_rebind+0x134>)
 80149e6:	fb82 1203 	smull	r1, r2, r2, r3
 80149ea:	1152      	asrs	r2, r2, #5
 80149ec:	17db      	asrs	r3, r3, #31
 80149ee:	1ad3      	subs	r3, r2, r3
 80149f0:	b29a      	uxth	r2, r3
 80149f2:	69bb      	ldr	r3, [r7, #24]
 80149f4:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80149f6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80149fa:	4618      	mov	r0, r3
 80149fc:	3720      	adds	r7, #32
 80149fe:	46bd      	mov	sp, r7
 8014a00:	bd80      	pop	{r7, pc}
 8014a02:	bf00      	nop
 8014a04:	200000a8 	.word	0x200000a8
 8014a08:	2000c914 	.word	0x2000c914
 8014a0c:	0801cbb8 	.word	0x0801cbb8
 8014a10:	10624dd3 	.word	0x10624dd3

08014a14 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8014a14:	b5b0      	push	{r4, r5, r7, lr}
 8014a16:	b08a      	sub	sp, #40	; 0x28
 8014a18:	af02      	add	r7, sp, #8
 8014a1a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014a1c:	687b      	ldr	r3, [r7, #4]
 8014a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014a20:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8014a22:	2103      	movs	r1, #3
 8014a24:	69b8      	ldr	r0, [r7, #24]
 8014a26:	f000 f945 	bl	8014cb4 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8014a2a:	f107 030c 	add.w	r3, r7, #12
 8014a2e:	2203      	movs	r2, #3
 8014a30:	69b9      	ldr	r1, [r7, #24]
 8014a32:	6878      	ldr	r0, [r7, #4]
 8014a34:	f000 fdca 	bl	80155cc <dhcp_create_msg>
 8014a38:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8014a3a:	697b      	ldr	r3, [r7, #20]
 8014a3c:	2b00      	cmp	r3, #0
 8014a3e:	d066      	beq.n	8014b0e <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014a40:	697b      	ldr	r3, [r7, #20]
 8014a42:	685b      	ldr	r3, [r3, #4]
 8014a44:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8014a46:	89b8      	ldrh	r0, [r7, #12]
 8014a48:	693b      	ldr	r3, [r7, #16]
 8014a4a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014a4e:	2302      	movs	r3, #2
 8014a50:	2239      	movs	r2, #57	; 0x39
 8014a52:	f000 f949 	bl	8014ce8 <dhcp_option>
 8014a56:	4603      	mov	r3, r0
 8014a58:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8014a5a:	89b8      	ldrh	r0, [r7, #12]
 8014a5c:	693b      	ldr	r3, [r7, #16]
 8014a5e:	33f0      	adds	r3, #240	; 0xf0
 8014a60:	f44f 7210 	mov.w	r2, #576	; 0x240
 8014a64:	4619      	mov	r1, r3
 8014a66:	f000 f999 	bl	8014d9c <dhcp_option_short>
 8014a6a:	4603      	mov	r3, r0
 8014a6c:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8014a6e:	89b8      	ldrh	r0, [r7, #12]
 8014a70:	693b      	ldr	r3, [r7, #16]
 8014a72:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014a76:	2304      	movs	r3, #4
 8014a78:	2232      	movs	r2, #50	; 0x32
 8014a7a:	f000 f935 	bl	8014ce8 <dhcp_option>
 8014a7e:	4603      	mov	r3, r0
 8014a80:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8014a82:	89bc      	ldrh	r4, [r7, #12]
 8014a84:	693b      	ldr	r3, [r7, #16]
 8014a86:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8014a8a:	69bb      	ldr	r3, [r7, #24]
 8014a8c:	69db      	ldr	r3, [r3, #28]
 8014a8e:	4618      	mov	r0, r3
 8014a90:	f7f7 f9fb 	bl	800be8a <lwip_htonl>
 8014a94:	4603      	mov	r3, r0
 8014a96:	461a      	mov	r2, r3
 8014a98:	4629      	mov	r1, r5
 8014a9a:	4620      	mov	r0, r4
 8014a9c:	f000 f9b0 	bl	8014e00 <dhcp_option_long>
 8014aa0:	4603      	mov	r3, r0
 8014aa2:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8014aa4:	89b8      	ldrh	r0, [r7, #12]
 8014aa6:	693b      	ldr	r3, [r7, #16]
 8014aa8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014aac:	2303      	movs	r3, #3
 8014aae:	2237      	movs	r2, #55	; 0x37
 8014ab0:	f000 f91a 	bl	8014ce8 <dhcp_option>
 8014ab4:	4603      	mov	r3, r0
 8014ab6:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014ab8:	2300      	movs	r3, #0
 8014aba:	77bb      	strb	r3, [r7, #30]
 8014abc:	e00e      	b.n	8014adc <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8014abe:	89b8      	ldrh	r0, [r7, #12]
 8014ac0:	693b      	ldr	r3, [r7, #16]
 8014ac2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014ac6:	7fbb      	ldrb	r3, [r7, #30]
 8014ac8:	4a29      	ldr	r2, [pc, #164]	; (8014b70 <dhcp_reboot+0x15c>)
 8014aca:	5cd3      	ldrb	r3, [r2, r3]
 8014acc:	461a      	mov	r2, r3
 8014ace:	f000 f93f 	bl	8014d50 <dhcp_option_byte>
 8014ad2:	4603      	mov	r3, r0
 8014ad4:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014ad6:	7fbb      	ldrb	r3, [r7, #30]
 8014ad8:	3301      	adds	r3, #1
 8014ada:	77bb      	strb	r3, [r7, #30]
 8014adc:	7fbb      	ldrb	r3, [r7, #30]
 8014ade:	2b02      	cmp	r3, #2
 8014ae0:	d9ed      	bls.n	8014abe <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8014ae2:	89b8      	ldrh	r0, [r7, #12]
 8014ae4:	693b      	ldr	r3, [r7, #16]
 8014ae6:	33f0      	adds	r3, #240	; 0xf0
 8014ae8:	697a      	ldr	r2, [r7, #20]
 8014aea:	4619      	mov	r1, r3
 8014aec:	f000 fe44 	bl	8015778 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8014af0:	4b20      	ldr	r3, [pc, #128]	; (8014b74 <dhcp_reboot+0x160>)
 8014af2:	6818      	ldr	r0, [r3, #0]
 8014af4:	687b      	ldr	r3, [r7, #4]
 8014af6:	9300      	str	r3, [sp, #0]
 8014af8:	2343      	movs	r3, #67	; 0x43
 8014afa:	4a1f      	ldr	r2, [pc, #124]	; (8014b78 <dhcp_reboot+0x164>)
 8014afc:	6979      	ldr	r1, [r7, #20]
 8014afe:	f7fe fd3f 	bl	8013580 <udp_sendto_if>
 8014b02:	4603      	mov	r3, r0
 8014b04:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8014b06:	6978      	ldr	r0, [r7, #20]
 8014b08:	f7f8 fdf8 	bl	800d6fc <pbuf_free>
 8014b0c:	e001      	b.n	8014b12 <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8014b0e:	23ff      	movs	r3, #255	; 0xff
 8014b10:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8014b12:	69bb      	ldr	r3, [r7, #24]
 8014b14:	799b      	ldrb	r3, [r3, #6]
 8014b16:	2bff      	cmp	r3, #255	; 0xff
 8014b18:	d005      	beq.n	8014b26 <dhcp_reboot+0x112>
    dhcp->tries++;
 8014b1a:	69bb      	ldr	r3, [r7, #24]
 8014b1c:	799b      	ldrb	r3, [r3, #6]
 8014b1e:	3301      	adds	r3, #1
 8014b20:	b2da      	uxtb	r2, r3
 8014b22:	69bb      	ldr	r3, [r7, #24]
 8014b24:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8014b26:	69bb      	ldr	r3, [r7, #24]
 8014b28:	799b      	ldrb	r3, [r3, #6]
 8014b2a:	2b09      	cmp	r3, #9
 8014b2c:	d80a      	bhi.n	8014b44 <dhcp_reboot+0x130>
 8014b2e:	69bb      	ldr	r3, [r7, #24]
 8014b30:	799b      	ldrb	r3, [r3, #6]
 8014b32:	b29b      	uxth	r3, r3
 8014b34:	461a      	mov	r2, r3
 8014b36:	0152      	lsls	r2, r2, #5
 8014b38:	1ad2      	subs	r2, r2, r3
 8014b3a:	0092      	lsls	r2, r2, #2
 8014b3c:	4413      	add	r3, r2
 8014b3e:	00db      	lsls	r3, r3, #3
 8014b40:	b29b      	uxth	r3, r3
 8014b42:	e001      	b.n	8014b48 <dhcp_reboot+0x134>
 8014b44:	f242 7310 	movw	r3, #10000	; 0x2710
 8014b48:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014b4a:	89fb      	ldrh	r3, [r7, #14]
 8014b4c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8014b50:	4a0a      	ldr	r2, [pc, #40]	; (8014b7c <dhcp_reboot+0x168>)
 8014b52:	fb82 1203 	smull	r1, r2, r2, r3
 8014b56:	1152      	asrs	r2, r2, #5
 8014b58:	17db      	asrs	r3, r3, #31
 8014b5a:	1ad3      	subs	r3, r2, r3
 8014b5c:	b29a      	uxth	r2, r3
 8014b5e:	69bb      	ldr	r3, [r7, #24]
 8014b60:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8014b62:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014b66:	4618      	mov	r0, r3
 8014b68:	3720      	adds	r7, #32
 8014b6a:	46bd      	mov	sp, r7
 8014b6c:	bdb0      	pop	{r4, r5, r7, pc}
 8014b6e:	bf00      	nop
 8014b70:	200000a8 	.word	0x200000a8
 8014b74:	2000c914 	.word	0x2000c914
 8014b78:	0801cbb8 	.word	0x0801cbb8
 8014b7c:	10624dd3 	.word	0x10624dd3

08014b80 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8014b80:	b5b0      	push	{r4, r5, r7, lr}
 8014b82:	b08a      	sub	sp, #40	; 0x28
 8014b84:	af02      	add	r7, sp, #8
 8014b86:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014b88:	687b      	ldr	r3, [r7, #4]
 8014b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014b8c:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 8014b8e:	69fb      	ldr	r3, [r7, #28]
 8014b90:	2b00      	cmp	r3, #0
 8014b92:	f000 8084 	beq.w	8014c9e <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 8014b96:	69fb      	ldr	r3, [r7, #28]
 8014b98:	795b      	ldrb	r3, [r3, #5]
 8014b9a:	2b00      	cmp	r3, #0
 8014b9c:	f000 8081 	beq.w	8014ca2 <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8014ba0:	69fb      	ldr	r3, [r7, #28]
 8014ba2:	699b      	ldr	r3, [r3, #24]
 8014ba4:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8014ba6:	69fb      	ldr	r3, [r7, #28]
 8014ba8:	2200      	movs	r2, #0
 8014baa:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8014bac:	69fb      	ldr	r3, [r7, #28]
 8014bae:	2200      	movs	r2, #0
 8014bb0:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8014bb2:	69fb      	ldr	r3, [r7, #28]
 8014bb4:	2200      	movs	r2, #0
 8014bb6:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8014bb8:	69fb      	ldr	r3, [r7, #28]
 8014bba:	2200      	movs	r2, #0
 8014bbc:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8014bbe:	69fb      	ldr	r3, [r7, #28]
 8014bc0:	2200      	movs	r2, #0
 8014bc2:	631a      	str	r2, [r3, #48]	; 0x30
 8014bc4:	69fb      	ldr	r3, [r7, #28]
 8014bc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014bc8:	69fb      	ldr	r3, [r7, #28]
 8014bca:	62da      	str	r2, [r3, #44]	; 0x2c
 8014bcc:	69fb      	ldr	r3, [r7, #28]
 8014bce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014bd0:	69fb      	ldr	r3, [r7, #28]
 8014bd2:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8014bd4:	69fb      	ldr	r3, [r7, #28]
 8014bd6:	2200      	movs	r2, #0
 8014bd8:	829a      	strh	r2, [r3, #20]
 8014bda:	69fb      	ldr	r3, [r7, #28]
 8014bdc:	8a9a      	ldrh	r2, [r3, #20]
 8014bde:	69fb      	ldr	r3, [r7, #28]
 8014be0:	825a      	strh	r2, [r3, #18]
 8014be2:	69fb      	ldr	r3, [r7, #28]
 8014be4:	8a5a      	ldrh	r2, [r3, #18]
 8014be6:	69fb      	ldr	r3, [r7, #28]
 8014be8:	821a      	strh	r2, [r3, #16]
 8014bea:	69fb      	ldr	r3, [r7, #28]
 8014bec:	8a1a      	ldrh	r2, [r3, #16]
 8014bee:	69fb      	ldr	r3, [r7, #28]
 8014bf0:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 8014bf2:	6878      	ldr	r0, [r7, #4]
 8014bf4:	f000 fdee 	bl	80157d4 <dhcp_supplied_address>
 8014bf8:	4603      	mov	r3, r0
 8014bfa:	2b00      	cmp	r3, #0
 8014bfc:	d03b      	beq.n	8014c76 <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8014bfe:	f107 030e 	add.w	r3, r7, #14
 8014c02:	2207      	movs	r2, #7
 8014c04:	69f9      	ldr	r1, [r7, #28]
 8014c06:	6878      	ldr	r0, [r7, #4]
 8014c08:	f000 fce0 	bl	80155cc <dhcp_create_msg>
 8014c0c:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 8014c0e:	69bb      	ldr	r3, [r7, #24]
 8014c10:	2b00      	cmp	r3, #0
 8014c12:	d030      	beq.n	8014c76 <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014c14:	69bb      	ldr	r3, [r7, #24]
 8014c16:	685b      	ldr	r3, [r3, #4]
 8014c18:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8014c1a:	89f8      	ldrh	r0, [r7, #14]
 8014c1c:	697b      	ldr	r3, [r7, #20]
 8014c1e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014c22:	2304      	movs	r3, #4
 8014c24:	2236      	movs	r2, #54	; 0x36
 8014c26:	f000 f85f 	bl	8014ce8 <dhcp_option>
 8014c2a:	4603      	mov	r3, r0
 8014c2c:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8014c2e:	89fc      	ldrh	r4, [r7, #14]
 8014c30:	697b      	ldr	r3, [r7, #20]
 8014c32:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8014c36:	693b      	ldr	r3, [r7, #16]
 8014c38:	4618      	mov	r0, r3
 8014c3a:	f7f7 f926 	bl	800be8a <lwip_htonl>
 8014c3e:	4603      	mov	r3, r0
 8014c40:	461a      	mov	r2, r3
 8014c42:	4629      	mov	r1, r5
 8014c44:	4620      	mov	r0, r4
 8014c46:	f000 f8db 	bl	8014e00 <dhcp_option_long>
 8014c4a:	4603      	mov	r3, r0
 8014c4c:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8014c4e:	89f8      	ldrh	r0, [r7, #14]
 8014c50:	697b      	ldr	r3, [r7, #20]
 8014c52:	33f0      	adds	r3, #240	; 0xf0
 8014c54:	69ba      	ldr	r2, [r7, #24]
 8014c56:	4619      	mov	r1, r3
 8014c58:	f000 fd8e 	bl	8015778 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8014c5c:	4b13      	ldr	r3, [pc, #76]	; (8014cac <dhcp_release_and_stop+0x12c>)
 8014c5e:	6818      	ldr	r0, [r3, #0]
 8014c60:	f107 0210 	add.w	r2, r7, #16
 8014c64:	687b      	ldr	r3, [r7, #4]
 8014c66:	9300      	str	r3, [sp, #0]
 8014c68:	2343      	movs	r3, #67	; 0x43
 8014c6a:	69b9      	ldr	r1, [r7, #24]
 8014c6c:	f7fe fc88 	bl	8013580 <udp_sendto_if>
      pbuf_free(p_out);
 8014c70:	69b8      	ldr	r0, [r7, #24]
 8014c72:	f7f8 fd43 	bl	800d6fc <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8014c76:	4b0e      	ldr	r3, [pc, #56]	; (8014cb0 <dhcp_release_and_stop+0x130>)
 8014c78:	4a0d      	ldr	r2, [pc, #52]	; (8014cb0 <dhcp_release_and_stop+0x130>)
 8014c7a:	490d      	ldr	r1, [pc, #52]	; (8014cb0 <dhcp_release_and_stop+0x130>)
 8014c7c:	6878      	ldr	r0, [r7, #4]
 8014c7e:	f7f8 f897 	bl	800cdb0 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8014c82:	2100      	movs	r1, #0
 8014c84:	69f8      	ldr	r0, [r7, #28]
 8014c86:	f000 f815 	bl	8014cb4 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 8014c8a:	69fb      	ldr	r3, [r7, #28]
 8014c8c:	791b      	ldrb	r3, [r3, #4]
 8014c8e:	2b00      	cmp	r3, #0
 8014c90:	d008      	beq.n	8014ca4 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8014c92:	f7fe ffc1 	bl	8013c18 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8014c96:	69fb      	ldr	r3, [r7, #28]
 8014c98:	2200      	movs	r2, #0
 8014c9a:	711a      	strb	r2, [r3, #4]
 8014c9c:	e002      	b.n	8014ca4 <dhcp_release_and_stop+0x124>
    return;
 8014c9e:	bf00      	nop
 8014ca0:	e000      	b.n	8014ca4 <dhcp_release_and_stop+0x124>
    return;
 8014ca2:	bf00      	nop
  }
}
 8014ca4:	3720      	adds	r7, #32
 8014ca6:	46bd      	mov	sp, r7
 8014ca8:	bdb0      	pop	{r4, r5, r7, pc}
 8014caa:	bf00      	nop
 8014cac:	2000c914 	.word	0x2000c914
 8014cb0:	0801cbb4 	.word	0x0801cbb4

08014cb4 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8014cb4:	b480      	push	{r7}
 8014cb6:	b083      	sub	sp, #12
 8014cb8:	af00      	add	r7, sp, #0
 8014cba:	6078      	str	r0, [r7, #4]
 8014cbc:	460b      	mov	r3, r1
 8014cbe:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8014cc0:	687b      	ldr	r3, [r7, #4]
 8014cc2:	795b      	ldrb	r3, [r3, #5]
 8014cc4:	78fa      	ldrb	r2, [r7, #3]
 8014cc6:	429a      	cmp	r2, r3
 8014cc8:	d008      	beq.n	8014cdc <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8014cca:	687b      	ldr	r3, [r7, #4]
 8014ccc:	78fa      	ldrb	r2, [r7, #3]
 8014cce:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 8014cd0:	687b      	ldr	r3, [r7, #4]
 8014cd2:	2200      	movs	r2, #0
 8014cd4:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 8014cd6:	687b      	ldr	r3, [r7, #4]
 8014cd8:	2200      	movs	r2, #0
 8014cda:	811a      	strh	r2, [r3, #8]
  }
}
 8014cdc:	bf00      	nop
 8014cde:	370c      	adds	r7, #12
 8014ce0:	46bd      	mov	sp, r7
 8014ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ce6:	4770      	bx	lr

08014ce8 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8014ce8:	b580      	push	{r7, lr}
 8014cea:	b082      	sub	sp, #8
 8014cec:	af00      	add	r7, sp, #0
 8014cee:	6039      	str	r1, [r7, #0]
 8014cf0:	4611      	mov	r1, r2
 8014cf2:	461a      	mov	r2, r3
 8014cf4:	4603      	mov	r3, r0
 8014cf6:	80fb      	strh	r3, [r7, #6]
 8014cf8:	460b      	mov	r3, r1
 8014cfa:	717b      	strb	r3, [r7, #5]
 8014cfc:	4613      	mov	r3, r2
 8014cfe:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8014d00:	88fa      	ldrh	r2, [r7, #6]
 8014d02:	793b      	ldrb	r3, [r7, #4]
 8014d04:	4413      	add	r3, r2
 8014d06:	3302      	adds	r3, #2
 8014d08:	2b44      	cmp	r3, #68	; 0x44
 8014d0a:	d906      	bls.n	8014d1a <dhcp_option+0x32>
 8014d0c:	4b0d      	ldr	r3, [pc, #52]	; (8014d44 <dhcp_option+0x5c>)
 8014d0e:	f240 529a 	movw	r2, #1434	; 0x59a
 8014d12:	490d      	ldr	r1, [pc, #52]	; (8014d48 <dhcp_option+0x60>)
 8014d14:	480d      	ldr	r0, [pc, #52]	; (8014d4c <dhcp_option+0x64>)
 8014d16:	f003 fec1 	bl	8018a9c <iprintf>
  options[options_out_len++] = option_type;
 8014d1a:	88fb      	ldrh	r3, [r7, #6]
 8014d1c:	1c5a      	adds	r2, r3, #1
 8014d1e:	80fa      	strh	r2, [r7, #6]
 8014d20:	461a      	mov	r2, r3
 8014d22:	683b      	ldr	r3, [r7, #0]
 8014d24:	4413      	add	r3, r2
 8014d26:	797a      	ldrb	r2, [r7, #5]
 8014d28:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 8014d2a:	88fb      	ldrh	r3, [r7, #6]
 8014d2c:	1c5a      	adds	r2, r3, #1
 8014d2e:	80fa      	strh	r2, [r7, #6]
 8014d30:	461a      	mov	r2, r3
 8014d32:	683b      	ldr	r3, [r7, #0]
 8014d34:	4413      	add	r3, r2
 8014d36:	793a      	ldrb	r2, [r7, #4]
 8014d38:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8014d3a:	88fb      	ldrh	r3, [r7, #6]
}
 8014d3c:	4618      	mov	r0, r3
 8014d3e:	3708      	adds	r7, #8
 8014d40:	46bd      	mov	sp, r7
 8014d42:	bd80      	pop	{r7, pc}
 8014d44:	0801bfa0 	.word	0x0801bfa0
 8014d48:	0801c134 	.word	0x0801c134
 8014d4c:	0801c000 	.word	0x0801c000

08014d50 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8014d50:	b580      	push	{r7, lr}
 8014d52:	b082      	sub	sp, #8
 8014d54:	af00      	add	r7, sp, #0
 8014d56:	4603      	mov	r3, r0
 8014d58:	6039      	str	r1, [r7, #0]
 8014d5a:	80fb      	strh	r3, [r7, #6]
 8014d5c:	4613      	mov	r3, r2
 8014d5e:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8014d60:	88fb      	ldrh	r3, [r7, #6]
 8014d62:	2b43      	cmp	r3, #67	; 0x43
 8014d64:	d906      	bls.n	8014d74 <dhcp_option_byte+0x24>
 8014d66:	4b0a      	ldr	r3, [pc, #40]	; (8014d90 <dhcp_option_byte+0x40>)
 8014d68:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8014d6c:	4909      	ldr	r1, [pc, #36]	; (8014d94 <dhcp_option_byte+0x44>)
 8014d6e:	480a      	ldr	r0, [pc, #40]	; (8014d98 <dhcp_option_byte+0x48>)
 8014d70:	f003 fe94 	bl	8018a9c <iprintf>
  options[options_out_len++] = value;
 8014d74:	88fb      	ldrh	r3, [r7, #6]
 8014d76:	1c5a      	adds	r2, r3, #1
 8014d78:	80fa      	strh	r2, [r7, #6]
 8014d7a:	461a      	mov	r2, r3
 8014d7c:	683b      	ldr	r3, [r7, #0]
 8014d7e:	4413      	add	r3, r2
 8014d80:	797a      	ldrb	r2, [r7, #5]
 8014d82:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8014d84:	88fb      	ldrh	r3, [r7, #6]
}
 8014d86:	4618      	mov	r0, r3
 8014d88:	3708      	adds	r7, #8
 8014d8a:	46bd      	mov	sp, r7
 8014d8c:	bd80      	pop	{r7, pc}
 8014d8e:	bf00      	nop
 8014d90:	0801bfa0 	.word	0x0801bfa0
 8014d94:	0801c178 	.word	0x0801c178
 8014d98:	0801c000 	.word	0x0801c000

08014d9c <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8014d9c:	b580      	push	{r7, lr}
 8014d9e:	b082      	sub	sp, #8
 8014da0:	af00      	add	r7, sp, #0
 8014da2:	4603      	mov	r3, r0
 8014da4:	6039      	str	r1, [r7, #0]
 8014da6:	80fb      	strh	r3, [r7, #6]
 8014da8:	4613      	mov	r3, r2
 8014daa:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8014dac:	88fb      	ldrh	r3, [r7, #6]
 8014dae:	3302      	adds	r3, #2
 8014db0:	2b44      	cmp	r3, #68	; 0x44
 8014db2:	d906      	bls.n	8014dc2 <dhcp_option_short+0x26>
 8014db4:	4b0f      	ldr	r3, [pc, #60]	; (8014df4 <dhcp_option_short+0x58>)
 8014db6:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8014dba:	490f      	ldr	r1, [pc, #60]	; (8014df8 <dhcp_option_short+0x5c>)
 8014dbc:	480f      	ldr	r0, [pc, #60]	; (8014dfc <dhcp_option_short+0x60>)
 8014dbe:	f003 fe6d 	bl	8018a9c <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8014dc2:	88bb      	ldrh	r3, [r7, #4]
 8014dc4:	0a1b      	lsrs	r3, r3, #8
 8014dc6:	b29a      	uxth	r2, r3
 8014dc8:	88fb      	ldrh	r3, [r7, #6]
 8014dca:	1c59      	adds	r1, r3, #1
 8014dcc:	80f9      	strh	r1, [r7, #6]
 8014dce:	4619      	mov	r1, r3
 8014dd0:	683b      	ldr	r3, [r7, #0]
 8014dd2:	440b      	add	r3, r1
 8014dd4:	b2d2      	uxtb	r2, r2
 8014dd6:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8014dd8:	88fb      	ldrh	r3, [r7, #6]
 8014dda:	1c5a      	adds	r2, r3, #1
 8014ddc:	80fa      	strh	r2, [r7, #6]
 8014dde:	461a      	mov	r2, r3
 8014de0:	683b      	ldr	r3, [r7, #0]
 8014de2:	4413      	add	r3, r2
 8014de4:	88ba      	ldrh	r2, [r7, #4]
 8014de6:	b2d2      	uxtb	r2, r2
 8014de8:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8014dea:	88fb      	ldrh	r3, [r7, #6]
}
 8014dec:	4618      	mov	r0, r3
 8014dee:	3708      	adds	r7, #8
 8014df0:	46bd      	mov	sp, r7
 8014df2:	bd80      	pop	{r7, pc}
 8014df4:	0801bfa0 	.word	0x0801bfa0
 8014df8:	0801c1b0 	.word	0x0801c1b0
 8014dfc:	0801c000 	.word	0x0801c000

08014e00 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8014e00:	b580      	push	{r7, lr}
 8014e02:	b084      	sub	sp, #16
 8014e04:	af00      	add	r7, sp, #0
 8014e06:	4603      	mov	r3, r0
 8014e08:	60b9      	str	r1, [r7, #8]
 8014e0a:	607a      	str	r2, [r7, #4]
 8014e0c:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8014e0e:	89fb      	ldrh	r3, [r7, #14]
 8014e10:	3304      	adds	r3, #4
 8014e12:	2b44      	cmp	r3, #68	; 0x44
 8014e14:	d906      	bls.n	8014e24 <dhcp_option_long+0x24>
 8014e16:	4b19      	ldr	r3, [pc, #100]	; (8014e7c <dhcp_option_long+0x7c>)
 8014e18:	f240 52b7 	movw	r2, #1463	; 0x5b7
 8014e1c:	4918      	ldr	r1, [pc, #96]	; (8014e80 <dhcp_option_long+0x80>)
 8014e1e:	4819      	ldr	r0, [pc, #100]	; (8014e84 <dhcp_option_long+0x84>)
 8014e20:	f003 fe3c 	bl	8018a9c <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8014e24:	687b      	ldr	r3, [r7, #4]
 8014e26:	0e1a      	lsrs	r2, r3, #24
 8014e28:	89fb      	ldrh	r3, [r7, #14]
 8014e2a:	1c59      	adds	r1, r3, #1
 8014e2c:	81f9      	strh	r1, [r7, #14]
 8014e2e:	4619      	mov	r1, r3
 8014e30:	68bb      	ldr	r3, [r7, #8]
 8014e32:	440b      	add	r3, r1
 8014e34:	b2d2      	uxtb	r2, r2
 8014e36:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8014e38:	687b      	ldr	r3, [r7, #4]
 8014e3a:	0c1a      	lsrs	r2, r3, #16
 8014e3c:	89fb      	ldrh	r3, [r7, #14]
 8014e3e:	1c59      	adds	r1, r3, #1
 8014e40:	81f9      	strh	r1, [r7, #14]
 8014e42:	4619      	mov	r1, r3
 8014e44:	68bb      	ldr	r3, [r7, #8]
 8014e46:	440b      	add	r3, r1
 8014e48:	b2d2      	uxtb	r2, r2
 8014e4a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8014e4c:	687b      	ldr	r3, [r7, #4]
 8014e4e:	0a1a      	lsrs	r2, r3, #8
 8014e50:	89fb      	ldrh	r3, [r7, #14]
 8014e52:	1c59      	adds	r1, r3, #1
 8014e54:	81f9      	strh	r1, [r7, #14]
 8014e56:	4619      	mov	r1, r3
 8014e58:	68bb      	ldr	r3, [r7, #8]
 8014e5a:	440b      	add	r3, r1
 8014e5c:	b2d2      	uxtb	r2, r2
 8014e5e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8014e60:	89fb      	ldrh	r3, [r7, #14]
 8014e62:	1c5a      	adds	r2, r3, #1
 8014e64:	81fa      	strh	r2, [r7, #14]
 8014e66:	461a      	mov	r2, r3
 8014e68:	68bb      	ldr	r3, [r7, #8]
 8014e6a:	4413      	add	r3, r2
 8014e6c:	687a      	ldr	r2, [r7, #4]
 8014e6e:	b2d2      	uxtb	r2, r2
 8014e70:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8014e72:	89fb      	ldrh	r3, [r7, #14]
}
 8014e74:	4618      	mov	r0, r3
 8014e76:	3710      	adds	r7, #16
 8014e78:	46bd      	mov	sp, r7
 8014e7a:	bd80      	pop	{r7, pc}
 8014e7c:	0801bfa0 	.word	0x0801bfa0
 8014e80:	0801c1ec 	.word	0x0801c1ec
 8014e84:	0801c000 	.word	0x0801c000

08014e88 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8014e88:	b580      	push	{r7, lr}
 8014e8a:	b090      	sub	sp, #64	; 0x40
 8014e8c:	af00      	add	r7, sp, #0
 8014e8e:	6078      	str	r0, [r7, #4]
 8014e90:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8014e92:	2300      	movs	r3, #0
 8014e94:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 8014e96:	2300      	movs	r3, #0
 8014e98:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8014e9a:	2208      	movs	r2, #8
 8014e9c:	2100      	movs	r1, #0
 8014e9e:	48b5      	ldr	r0, [pc, #724]	; (8015174 <dhcp_parse_reply+0x2ec>)
 8014ea0:	f003 fdf4 	bl	8018a8c <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8014ea4:	687b      	ldr	r3, [r7, #4]
 8014ea6:	895b      	ldrh	r3, [r3, #10]
 8014ea8:	2b2b      	cmp	r3, #43	; 0x2b
 8014eaa:	d802      	bhi.n	8014eb2 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8014eac:	f06f 0301 	mvn.w	r3, #1
 8014eb0:	e2a7      	b.n	8015402 <dhcp_parse_reply+0x57a>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 8014eb2:	687b      	ldr	r3, [r7, #4]
 8014eb4:	685b      	ldr	r3, [r3, #4]
 8014eb6:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8014eb8:	23f0      	movs	r3, #240	; 0xf0
 8014eba:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8014ebc:	687b      	ldr	r3, [r7, #4]
 8014ebe:	891b      	ldrh	r3, [r3, #8]
 8014ec0:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 8014ec2:	687b      	ldr	r3, [r7, #4]
 8014ec4:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8014ec6:	e00c      	b.n	8014ee2 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8014ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014eca:	895b      	ldrh	r3, [r3, #10]
 8014ecc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8014ece:	1ad3      	subs	r3, r2, r3
 8014ed0:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8014ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ed4:	895b      	ldrh	r3, [r3, #10]
 8014ed6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8014ed8:	1ad3      	subs	r3, r2, r3
 8014eda:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 8014edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ede:	681b      	ldr	r3, [r3, #0]
 8014ee0:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8014ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ee4:	2b00      	cmp	r3, #0
 8014ee6:	d004      	beq.n	8014ef2 <dhcp_parse_reply+0x6a>
 8014ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014eea:	895b      	ldrh	r3, [r3, #10]
 8014eec:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8014eee:	429a      	cmp	r2, r3
 8014ef0:	d2ea      	bcs.n	8014ec8 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 8014ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ef4:	2b00      	cmp	r3, #0
 8014ef6:	d102      	bne.n	8014efe <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8014ef8:	f06f 0301 	mvn.w	r3, #1
 8014efc:	e281      	b.n	8015402 <dhcp_parse_reply+0x57a>
  }
  offset = options_idx;
 8014efe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8014f00:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 8014f02:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8014f04:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 8014f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f08:	685b      	ldr	r3, [r3, #4]
 8014f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8014f0c:	e239      	b.n	8015382 <dhcp_parse_reply+0x4fa>
    u8_t op = options[offset];
 8014f0e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014f10:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014f12:	4413      	add	r3, r2
 8014f14:	781b      	ldrb	r3, [r3, #0]
 8014f16:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 8014f18:	2300      	movs	r3, #0
 8014f1a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 8014f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8014f22:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8014f24:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014f26:	3302      	adds	r3, #2
 8014f28:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 8014f2a:	8bfa      	ldrh	r2, [r7, #30]
 8014f2c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014f2e:	429a      	cmp	r2, r3
 8014f30:	d202      	bcs.n	8014f38 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 8014f32:	f06f 0301 	mvn.w	r3, #1
 8014f36:	e264      	b.n	8015402 <dhcp_parse_reply+0x57a>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8014f38:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014f3a:	3301      	adds	r3, #1
 8014f3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014f3e:	8952      	ldrh	r2, [r2, #10]
 8014f40:	4293      	cmp	r3, r2
 8014f42:	da07      	bge.n	8014f54 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8014f44:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014f46:	3301      	adds	r3, #1
 8014f48:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014f4a:	4413      	add	r3, r2
 8014f4c:	781b      	ldrb	r3, [r3, #0]
 8014f4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014f52:	e00b      	b.n	8014f6c <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8014f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f56:	681b      	ldr	r3, [r3, #0]
 8014f58:	2b00      	cmp	r3, #0
 8014f5a:	d004      	beq.n	8014f66 <dhcp_parse_reply+0xde>
 8014f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f5e:	681b      	ldr	r3, [r3, #0]
 8014f60:	685b      	ldr	r3, [r3, #4]
 8014f62:	781b      	ldrb	r3, [r3, #0]
 8014f64:	e000      	b.n	8014f68 <dhcp_parse_reply+0xe0>
 8014f66:	2300      	movs	r3, #0
 8014f68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8014f6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014f70:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 8014f74:	7dfb      	ldrb	r3, [r7, #23]
 8014f76:	2b3b      	cmp	r3, #59	; 0x3b
 8014f78:	f200 812c 	bhi.w	80151d4 <dhcp_parse_reply+0x34c>
 8014f7c:	a201      	add	r2, pc, #4	; (adr r2, 8014f84 <dhcp_parse_reply+0xfc>)
 8014f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014f82:	bf00      	nop
 8014f84:	08015075 	.word	0x08015075
 8014f88:	08015085 	.word	0x08015085
 8014f8c:	080151d5 	.word	0x080151d5
 8014f90:	080150a7 	.word	0x080150a7
 8014f94:	080151d5 	.word	0x080151d5
 8014f98:	080151d5 	.word	0x080151d5
 8014f9c:	080151d5 	.word	0x080151d5
 8014fa0:	080151d5 	.word	0x080151d5
 8014fa4:	080151d5 	.word	0x080151d5
 8014fa8:	080151d5 	.word	0x080151d5
 8014fac:	080151d5 	.word	0x080151d5
 8014fb0:	080151d5 	.word	0x080151d5
 8014fb4:	080151d5 	.word	0x080151d5
 8014fb8:	080151d5 	.word	0x080151d5
 8014fbc:	080151d5 	.word	0x080151d5
 8014fc0:	080151d5 	.word	0x080151d5
 8014fc4:	080151d5 	.word	0x080151d5
 8014fc8:	080151d5 	.word	0x080151d5
 8014fcc:	080151d5 	.word	0x080151d5
 8014fd0:	080151d5 	.word	0x080151d5
 8014fd4:	080151d5 	.word	0x080151d5
 8014fd8:	080151d5 	.word	0x080151d5
 8014fdc:	080151d5 	.word	0x080151d5
 8014fe0:	080151d5 	.word	0x080151d5
 8014fe4:	080151d5 	.word	0x080151d5
 8014fe8:	080151d5 	.word	0x080151d5
 8014fec:	080151d5 	.word	0x080151d5
 8014ff0:	080151d5 	.word	0x080151d5
 8014ff4:	080151d5 	.word	0x080151d5
 8014ff8:	080151d5 	.word	0x080151d5
 8014ffc:	080151d5 	.word	0x080151d5
 8015000:	080151d5 	.word	0x080151d5
 8015004:	080151d5 	.word	0x080151d5
 8015008:	080151d5 	.word	0x080151d5
 801500c:	080151d5 	.word	0x080151d5
 8015010:	080151d5 	.word	0x080151d5
 8015014:	080151d5 	.word	0x080151d5
 8015018:	080151d5 	.word	0x080151d5
 801501c:	080151d5 	.word	0x080151d5
 8015020:	080151d5 	.word	0x080151d5
 8015024:	080151d5 	.word	0x080151d5
 8015028:	080151d5 	.word	0x080151d5
 801502c:	080151d5 	.word	0x080151d5
 8015030:	080151d5 	.word	0x080151d5
 8015034:	080151d5 	.word	0x080151d5
 8015038:	080151d5 	.word	0x080151d5
 801503c:	080151d5 	.word	0x080151d5
 8015040:	080151d5 	.word	0x080151d5
 8015044:	080151d5 	.word	0x080151d5
 8015048:	080151d5 	.word	0x080151d5
 801504c:	080151d5 	.word	0x080151d5
 8015050:	080150d3 	.word	0x080150d3
 8015054:	080150f5 	.word	0x080150f5
 8015058:	08015131 	.word	0x08015131
 801505c:	08015153 	.word	0x08015153
 8015060:	080151d5 	.word	0x080151d5
 8015064:	080151d5 	.word	0x080151d5
 8015068:	080151d5 	.word	0x080151d5
 801506c:	08015191 	.word	0x08015191
 8015070:	080151b3 	.word	0x080151b3
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8015074:	2300      	movs	r3, #0
 8015076:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801507a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801507e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 8015082:	e0ab      	b.n	80151dc <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8015084:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015088:	2b04      	cmp	r3, #4
 801508a:	d009      	beq.n	80150a0 <dhcp_parse_reply+0x218>
 801508c:	4b3a      	ldr	r3, [pc, #232]	; (8015178 <dhcp_parse_reply+0x2f0>)
 801508e:	f240 622e 	movw	r2, #1582	; 0x62e
 8015092:	493a      	ldr	r1, [pc, #232]	; (801517c <dhcp_parse_reply+0x2f4>)
 8015094:	483a      	ldr	r0, [pc, #232]	; (8015180 <dhcp_parse_reply+0x2f8>)
 8015096:	f003 fd01 	bl	8018a9c <iprintf>
 801509a:	f06f 0305 	mvn.w	r3, #5
 801509e:	e1b0      	b.n	8015402 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 80150a0:	2306      	movs	r3, #6
 80150a2:	623b      	str	r3, [r7, #32]
        break;
 80150a4:	e09a      	b.n	80151dc <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 80150a6:	2304      	movs	r3, #4
 80150a8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 80150ac:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80150b0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80150b4:	429a      	cmp	r2, r3
 80150b6:	d209      	bcs.n	80150cc <dhcp_parse_reply+0x244>
 80150b8:	4b2f      	ldr	r3, [pc, #188]	; (8015178 <dhcp_parse_reply+0x2f0>)
 80150ba:	f240 6233 	movw	r2, #1587	; 0x633
 80150be:	4931      	ldr	r1, [pc, #196]	; (8015184 <dhcp_parse_reply+0x2fc>)
 80150c0:	482f      	ldr	r0, [pc, #188]	; (8015180 <dhcp_parse_reply+0x2f8>)
 80150c2:	f003 fceb 	bl	8018a9c <iprintf>
 80150c6:	f06f 0305 	mvn.w	r3, #5
 80150ca:	e19a      	b.n	8015402 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 80150cc:	2307      	movs	r3, #7
 80150ce:	623b      	str	r3, [r7, #32]
        break;
 80150d0:	e084      	b.n	80151dc <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80150d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80150d6:	2b04      	cmp	r3, #4
 80150d8:	d009      	beq.n	80150ee <dhcp_parse_reply+0x266>
 80150da:	4b27      	ldr	r3, [pc, #156]	; (8015178 <dhcp_parse_reply+0x2f0>)
 80150dc:	f240 6241 	movw	r2, #1601	; 0x641
 80150e0:	4926      	ldr	r1, [pc, #152]	; (801517c <dhcp_parse_reply+0x2f4>)
 80150e2:	4827      	ldr	r0, [pc, #156]	; (8015180 <dhcp_parse_reply+0x2f8>)
 80150e4:	f003 fcda 	bl	8018a9c <iprintf>
 80150e8:	f06f 0305 	mvn.w	r3, #5
 80150ec:	e189      	b.n	8015402 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 80150ee:	2303      	movs	r3, #3
 80150f0:	623b      	str	r3, [r7, #32]
        break;
 80150f2:	e073      	b.n	80151dc <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80150f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80150f8:	2b01      	cmp	r3, #1
 80150fa:	d009      	beq.n	8015110 <dhcp_parse_reply+0x288>
 80150fc:	4b1e      	ldr	r3, [pc, #120]	; (8015178 <dhcp_parse_reply+0x2f0>)
 80150fe:	f240 624f 	movw	r2, #1615	; 0x64f
 8015102:	4921      	ldr	r1, [pc, #132]	; (8015188 <dhcp_parse_reply+0x300>)
 8015104:	481e      	ldr	r0, [pc, #120]	; (8015180 <dhcp_parse_reply+0x2f8>)
 8015106:	f003 fcc9 	bl	8018a9c <iprintf>
 801510a:	f06f 0305 	mvn.w	r3, #5
 801510e:	e178      	b.n	8015402 <dhcp_parse_reply+0x57a>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8015110:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8015112:	2bf0      	cmp	r3, #240	; 0xf0
 8015114:	d009      	beq.n	801512a <dhcp_parse_reply+0x2a2>
 8015116:	4b18      	ldr	r3, [pc, #96]	; (8015178 <dhcp_parse_reply+0x2f0>)
 8015118:	f240 6251 	movw	r2, #1617	; 0x651
 801511c:	491b      	ldr	r1, [pc, #108]	; (801518c <dhcp_parse_reply+0x304>)
 801511e:	4818      	ldr	r0, [pc, #96]	; (8015180 <dhcp_parse_reply+0x2f8>)
 8015120:	f003 fcbc 	bl	8018a9c <iprintf>
 8015124:	f06f 0305 	mvn.w	r3, #5
 8015128:	e16b      	b.n	8015402 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 801512a:	2300      	movs	r3, #0
 801512c:	623b      	str	r3, [r7, #32]
        break;
 801512e:	e055      	b.n	80151dc <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8015130:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015134:	2b01      	cmp	r3, #1
 8015136:	d009      	beq.n	801514c <dhcp_parse_reply+0x2c4>
 8015138:	4b0f      	ldr	r3, [pc, #60]	; (8015178 <dhcp_parse_reply+0x2f0>)
 801513a:	f240 6255 	movw	r2, #1621	; 0x655
 801513e:	4912      	ldr	r1, [pc, #72]	; (8015188 <dhcp_parse_reply+0x300>)
 8015140:	480f      	ldr	r0, [pc, #60]	; (8015180 <dhcp_parse_reply+0x2f8>)
 8015142:	f003 fcab 	bl	8018a9c <iprintf>
 8015146:	f06f 0305 	mvn.w	r3, #5
 801514a:	e15a      	b.n	8015402 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 801514c:	2301      	movs	r3, #1
 801514e:	623b      	str	r3, [r7, #32]
        break;
 8015150:	e044      	b.n	80151dc <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8015152:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015156:	2b04      	cmp	r3, #4
 8015158:	d009      	beq.n	801516e <dhcp_parse_reply+0x2e6>
 801515a:	4b07      	ldr	r3, [pc, #28]	; (8015178 <dhcp_parse_reply+0x2f0>)
 801515c:	f240 6259 	movw	r2, #1625	; 0x659
 8015160:	4906      	ldr	r1, [pc, #24]	; (801517c <dhcp_parse_reply+0x2f4>)
 8015162:	4807      	ldr	r0, [pc, #28]	; (8015180 <dhcp_parse_reply+0x2f8>)
 8015164:	f003 fc9a 	bl	8018a9c <iprintf>
 8015168:	f06f 0305 	mvn.w	r3, #5
 801516c:	e149      	b.n	8015402 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 801516e:	2302      	movs	r3, #2
 8015170:	623b      	str	r3, [r7, #32]
        break;
 8015172:	e033      	b.n	80151dc <dhcp_parse_reply+0x354>
 8015174:	2000c90c 	.word	0x2000c90c
 8015178:	0801bfa0 	.word	0x0801bfa0
 801517c:	0801c228 	.word	0x0801c228
 8015180:	0801c000 	.word	0x0801c000
 8015184:	0801c234 	.word	0x0801c234
 8015188:	0801c248 	.word	0x0801c248
 801518c:	0801c254 	.word	0x0801c254
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8015190:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015194:	2b04      	cmp	r3, #4
 8015196:	d009      	beq.n	80151ac <dhcp_parse_reply+0x324>
 8015198:	4b9c      	ldr	r3, [pc, #624]	; (801540c <dhcp_parse_reply+0x584>)
 801519a:	f240 625d 	movw	r2, #1629	; 0x65d
 801519e:	499c      	ldr	r1, [pc, #624]	; (8015410 <dhcp_parse_reply+0x588>)
 80151a0:	489c      	ldr	r0, [pc, #624]	; (8015414 <dhcp_parse_reply+0x58c>)
 80151a2:	f003 fc7b 	bl	8018a9c <iprintf>
 80151a6:	f06f 0305 	mvn.w	r3, #5
 80151aa:	e12a      	b.n	8015402 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T1;
 80151ac:	2304      	movs	r3, #4
 80151ae:	623b      	str	r3, [r7, #32]
        break;
 80151b0:	e014      	b.n	80151dc <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80151b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80151b6:	2b04      	cmp	r3, #4
 80151b8:	d009      	beq.n	80151ce <dhcp_parse_reply+0x346>
 80151ba:	4b94      	ldr	r3, [pc, #592]	; (801540c <dhcp_parse_reply+0x584>)
 80151bc:	f240 6261 	movw	r2, #1633	; 0x661
 80151c0:	4993      	ldr	r1, [pc, #588]	; (8015410 <dhcp_parse_reply+0x588>)
 80151c2:	4894      	ldr	r0, [pc, #592]	; (8015414 <dhcp_parse_reply+0x58c>)
 80151c4:	f003 fc6a 	bl	8018a9c <iprintf>
 80151c8:	f06f 0305 	mvn.w	r3, #5
 80151cc:	e119      	b.n	8015402 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T2;
 80151ce:	2305      	movs	r3, #5
 80151d0:	623b      	str	r3, [r7, #32]
        break;
 80151d2:	e003      	b.n	80151dc <dhcp_parse_reply+0x354>
      default:
        decode_len = 0;
 80151d4:	2300      	movs	r3, #0
 80151d6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 80151da:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 80151dc:	7dfb      	ldrb	r3, [r7, #23]
 80151de:	2b00      	cmp	r3, #0
 80151e0:	d103      	bne.n	80151ea <dhcp_parse_reply+0x362>
      offset++;
 80151e2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80151e4:	3301      	adds	r3, #1
 80151e6:	877b      	strh	r3, [r7, #58]	; 0x3a
 80151e8:	e0a1      	b.n	801532e <dhcp_parse_reply+0x4a6>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 80151ea:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80151ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80151f0:	4413      	add	r3, r2
 80151f2:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 80151f6:	4293      	cmp	r3, r2
 80151f8:	dd02      	ble.n	8015200 <dhcp_parse_reply+0x378>
        /* overflow */
        return ERR_BUF;
 80151fa:	f06f 0301 	mvn.w	r3, #1
 80151fe:	e100      	b.n	8015402 <dhcp_parse_reply+0x57a>
      }
      offset = (u16_t)(offset + len + 2);
 8015200:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015204:	b29a      	uxth	r2, r3
 8015206:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015208:	4413      	add	r3, r2
 801520a:	b29b      	uxth	r3, r3
 801520c:	3302      	adds	r3, #2
 801520e:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 8015210:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015214:	2b00      	cmp	r3, #0
 8015216:	f000 808a 	beq.w	801532e <dhcp_parse_reply+0x4a6>
        u32_t value = 0;
 801521a:	2300      	movs	r3, #0
 801521c:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 801521e:	6a3b      	ldr	r3, [r7, #32]
 8015220:	2b00      	cmp	r3, #0
 8015222:	db02      	blt.n	801522a <dhcp_parse_reply+0x3a2>
 8015224:	6a3b      	ldr	r3, [r7, #32]
 8015226:	2b07      	cmp	r3, #7
 8015228:	dd06      	ble.n	8015238 <dhcp_parse_reply+0x3b0>
 801522a:	4b78      	ldr	r3, [pc, #480]	; (801540c <dhcp_parse_reply+0x584>)
 801522c:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8015230:	4979      	ldr	r1, [pc, #484]	; (8015418 <dhcp_parse_reply+0x590>)
 8015232:	4878      	ldr	r0, [pc, #480]	; (8015414 <dhcp_parse_reply+0x58c>)
 8015234:	f003 fc32 	bl	8018a9c <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8015238:	4a78      	ldr	r2, [pc, #480]	; (801541c <dhcp_parse_reply+0x594>)
 801523a:	6a3b      	ldr	r3, [r7, #32]
 801523c:	4413      	add	r3, r2
 801523e:	781b      	ldrb	r3, [r3, #0]
 8015240:	2b00      	cmp	r3, #0
 8015242:	d174      	bne.n	801532e <dhcp_parse_reply+0x4a6>
          copy_len = LWIP_MIN(decode_len, 4);
 8015244:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015248:	2b04      	cmp	r3, #4
 801524a:	bf28      	it	cs
 801524c:	2304      	movcs	r3, #4
 801524e:	b2db      	uxtb	r3, r3
 8015250:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8015252:	8bfb      	ldrh	r3, [r7, #30]
 8015254:	8aba      	ldrh	r2, [r7, #20]
 8015256:	f107 0108 	add.w	r1, r7, #8
 801525a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801525c:	f7f8 fc54 	bl	800db08 <pbuf_copy_partial>
 8015260:	4603      	mov	r3, r0
 8015262:	461a      	mov	r2, r3
 8015264:	8abb      	ldrh	r3, [r7, #20]
 8015266:	4293      	cmp	r3, r2
 8015268:	d002      	beq.n	8015270 <dhcp_parse_reply+0x3e8>
            return ERR_BUF;
 801526a:	f06f 0301 	mvn.w	r3, #1
 801526e:	e0c8      	b.n	8015402 <dhcp_parse_reply+0x57a>
          }
          if (decode_len > 4) {
 8015270:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015274:	2b04      	cmp	r3, #4
 8015276:	d933      	bls.n	80152e0 <dhcp_parse_reply+0x458>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8015278:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801527c:	f003 0303 	and.w	r3, r3, #3
 8015280:	b2db      	uxtb	r3, r3
 8015282:	2b00      	cmp	r3, #0
 8015284:	d009      	beq.n	801529a <dhcp_parse_reply+0x412>
 8015286:	4b61      	ldr	r3, [pc, #388]	; (801540c <dhcp_parse_reply+0x584>)
 8015288:	f240 6281 	movw	r2, #1665	; 0x681
 801528c:	4964      	ldr	r1, [pc, #400]	; (8015420 <dhcp_parse_reply+0x598>)
 801528e:	4861      	ldr	r0, [pc, #388]	; (8015414 <dhcp_parse_reply+0x58c>)
 8015290:	f003 fc04 	bl	8018a9c <iprintf>
 8015294:	f06f 0305 	mvn.w	r3, #5
 8015298:	e0b3      	b.n	8015402 <dhcp_parse_reply+0x57a>
            dhcp_got_option(dhcp, decode_idx);
 801529a:	4a60      	ldr	r2, [pc, #384]	; (801541c <dhcp_parse_reply+0x594>)
 801529c:	6a3b      	ldr	r3, [r7, #32]
 801529e:	4413      	add	r3, r2
 80152a0:	2201      	movs	r2, #1
 80152a2:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 80152a4:	68bb      	ldr	r3, [r7, #8]
 80152a6:	4618      	mov	r0, r3
 80152a8:	f7f6 fdef 	bl	800be8a <lwip_htonl>
 80152ac:	4602      	mov	r2, r0
 80152ae:	495d      	ldr	r1, [pc, #372]	; (8015424 <dhcp_parse_reply+0x59c>)
 80152b0:	6a3b      	ldr	r3, [r7, #32]
 80152b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 80152b6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80152ba:	3b04      	subs	r3, #4
 80152bc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 80152c0:	8bfb      	ldrh	r3, [r7, #30]
 80152c2:	3304      	adds	r3, #4
 80152c4:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 80152c6:	8a7a      	ldrh	r2, [r7, #18]
 80152c8:	8bfb      	ldrh	r3, [r7, #30]
 80152ca:	429a      	cmp	r2, r3
 80152cc:	d202      	bcs.n	80152d4 <dhcp_parse_reply+0x44c>
              /* overflow */
              return ERR_BUF;
 80152ce:	f06f 0301 	mvn.w	r3, #1
 80152d2:	e096      	b.n	8015402 <dhcp_parse_reply+0x57a>
            }
            val_offset = next_val_offset;
 80152d4:	8a7b      	ldrh	r3, [r7, #18]
 80152d6:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 80152d8:	6a3b      	ldr	r3, [r7, #32]
 80152da:	3301      	adds	r3, #1
 80152dc:	623b      	str	r3, [r7, #32]
            goto decode_next;
 80152de:	e79e      	b.n	801521e <dhcp_parse_reply+0x396>
          } else if (decode_len == 4) {
 80152e0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80152e4:	2b04      	cmp	r3, #4
 80152e6:	d106      	bne.n	80152f6 <dhcp_parse_reply+0x46e>
            value = lwip_ntohl(value);
 80152e8:	68bb      	ldr	r3, [r7, #8]
 80152ea:	4618      	mov	r0, r3
 80152ec:	f7f6 fdcd 	bl	800be8a <lwip_htonl>
 80152f0:	4603      	mov	r3, r0
 80152f2:	60bb      	str	r3, [r7, #8]
 80152f4:	e011      	b.n	801531a <dhcp_parse_reply+0x492>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 80152f6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80152fa:	2b01      	cmp	r3, #1
 80152fc:	d009      	beq.n	8015312 <dhcp_parse_reply+0x48a>
 80152fe:	4b43      	ldr	r3, [pc, #268]	; (801540c <dhcp_parse_reply+0x584>)
 8015300:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8015304:	4948      	ldr	r1, [pc, #288]	; (8015428 <dhcp_parse_reply+0x5a0>)
 8015306:	4843      	ldr	r0, [pc, #268]	; (8015414 <dhcp_parse_reply+0x58c>)
 8015308:	f003 fbc8 	bl	8018a9c <iprintf>
 801530c:	f06f 0305 	mvn.w	r3, #5
 8015310:	e077      	b.n	8015402 <dhcp_parse_reply+0x57a>
            value = ((u8_t *)&value)[0];
 8015312:	f107 0308 	add.w	r3, r7, #8
 8015316:	781b      	ldrb	r3, [r3, #0]
 8015318:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 801531a:	4a40      	ldr	r2, [pc, #256]	; (801541c <dhcp_parse_reply+0x594>)
 801531c:	6a3b      	ldr	r3, [r7, #32]
 801531e:	4413      	add	r3, r2
 8015320:	2201      	movs	r2, #1
 8015322:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8015324:	68ba      	ldr	r2, [r7, #8]
 8015326:	493f      	ldr	r1, [pc, #252]	; (8015424 <dhcp_parse_reply+0x59c>)
 8015328:	6a3b      	ldr	r3, [r7, #32]
 801532a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 801532e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015330:	895b      	ldrh	r3, [r3, #10]
 8015332:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015334:	429a      	cmp	r2, r3
 8015336:	d324      	bcc.n	8015382 <dhcp_parse_reply+0x4fa>
      offset = (u16_t)(offset - q->len);
 8015338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801533a:	895b      	ldrh	r3, [r3, #10]
 801533c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801533e:	1ad3      	subs	r3, r2, r3
 8015340:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 8015342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015344:	895b      	ldrh	r3, [r3, #10]
 8015346:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8015348:	1ad3      	subs	r3, r2, r3
 801534a:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 801534c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801534e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8015350:	429a      	cmp	r2, r3
 8015352:	d213      	bcs.n	801537c <dhcp_parse_reply+0x4f4>
        q = q->next;
 8015354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015356:	681b      	ldr	r3, [r3, #0]
 8015358:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 801535a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801535c:	2b00      	cmp	r3, #0
 801535e:	d109      	bne.n	8015374 <dhcp_parse_reply+0x4ec>
 8015360:	4b2a      	ldr	r3, [pc, #168]	; (801540c <dhcp_parse_reply+0x584>)
 8015362:	f240 629d 	movw	r2, #1693	; 0x69d
 8015366:	4931      	ldr	r1, [pc, #196]	; (801542c <dhcp_parse_reply+0x5a4>)
 8015368:	482a      	ldr	r0, [pc, #168]	; (8015414 <dhcp_parse_reply+0x58c>)
 801536a:	f003 fb97 	bl	8018a9c <iprintf>
 801536e:	f06f 0305 	mvn.w	r3, #5
 8015372:	e046      	b.n	8015402 <dhcp_parse_reply+0x57a>
        options = (u8_t *)q->payload;
 8015374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015376:	685b      	ldr	r3, [r3, #4]
 8015378:	63fb      	str	r3, [r7, #60]	; 0x3c
 801537a:	e002      	b.n	8015382 <dhcp_parse_reply+0x4fa>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 801537c:	f06f 0301 	mvn.w	r3, #1
 8015380:	e03f      	b.n	8015402 <dhcp_parse_reply+0x57a>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8015382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015384:	2b00      	cmp	r3, #0
 8015386:	d00a      	beq.n	801539e <dhcp_parse_reply+0x516>
 8015388:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801538a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801538c:	429a      	cmp	r2, r3
 801538e:	d206      	bcs.n	801539e <dhcp_parse_reply+0x516>
 8015390:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015392:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015394:	4413      	add	r3, r2
 8015396:	781b      	ldrb	r3, [r3, #0]
 8015398:	2bff      	cmp	r3, #255	; 0xff
 801539a:	f47f adb8 	bne.w	8014f0e <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 801539e:	4b1f      	ldr	r3, [pc, #124]	; (801541c <dhcp_parse_reply+0x594>)
 80153a0:	781b      	ldrb	r3, [r3, #0]
 80153a2:	2b00      	cmp	r3, #0
 80153a4:	d018      	beq.n	80153d8 <dhcp_parse_reply+0x550>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80153a6:	4b1f      	ldr	r3, [pc, #124]	; (8015424 <dhcp_parse_reply+0x59c>)
 80153a8:	681b      	ldr	r3, [r3, #0]
 80153aa:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80153ac:	4b1b      	ldr	r3, [pc, #108]	; (801541c <dhcp_parse_reply+0x594>)
 80153ae:	2200      	movs	r2, #0
 80153b0:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 80153b2:	68fb      	ldr	r3, [r7, #12]
 80153b4:	2b01      	cmp	r3, #1
 80153b6:	d102      	bne.n	80153be <dhcp_parse_reply+0x536>
      parse_file_as_options = 1;
 80153b8:	2301      	movs	r3, #1
 80153ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80153bc:	e00c      	b.n	80153d8 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 80153be:	68fb      	ldr	r3, [r7, #12]
 80153c0:	2b02      	cmp	r3, #2
 80153c2:	d102      	bne.n	80153ca <dhcp_parse_reply+0x542>
      parse_sname_as_options = 1;
 80153c4:	2301      	movs	r3, #1
 80153c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80153c8:	e006      	b.n	80153d8 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 80153ca:	68fb      	ldr	r3, [r7, #12]
 80153cc:	2b03      	cmp	r3, #3
 80153ce:	d103      	bne.n	80153d8 <dhcp_parse_reply+0x550>
      parse_sname_as_options = 1;
 80153d0:	2301      	movs	r3, #1
 80153d2:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 80153d4:	2301      	movs	r3, #1
 80153d6:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 80153d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80153da:	2b00      	cmp	r3, #0
 80153dc:	d006      	beq.n	80153ec <dhcp_parse_reply+0x564>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 80153de:	2300      	movs	r3, #0
 80153e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 80153e2:	236c      	movs	r3, #108	; 0x6c
 80153e4:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 80153e6:	23ec      	movs	r3, #236	; 0xec
 80153e8:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 80153ea:	e56a      	b.n	8014ec2 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 80153ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80153ee:	2b00      	cmp	r3, #0
 80153f0:	d006      	beq.n	8015400 <dhcp_parse_reply+0x578>
    parse_sname_as_options = 0;
 80153f2:	2300      	movs	r3, #0
 80153f4:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 80153f6:	232c      	movs	r3, #44	; 0x2c
 80153f8:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 80153fa:	236c      	movs	r3, #108	; 0x6c
 80153fc:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 80153fe:	e560      	b.n	8014ec2 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 8015400:	2300      	movs	r3, #0
}
 8015402:	4618      	mov	r0, r3
 8015404:	3740      	adds	r7, #64	; 0x40
 8015406:	46bd      	mov	sp, r7
 8015408:	bd80      	pop	{r7, pc}
 801540a:	bf00      	nop
 801540c:	0801bfa0 	.word	0x0801bfa0
 8015410:	0801c228 	.word	0x0801c228
 8015414:	0801c000 	.word	0x0801c000
 8015418:	0801c26c 	.word	0x0801c26c
 801541c:	2000c90c 	.word	0x2000c90c
 8015420:	0801c280 	.word	0x0801c280
 8015424:	2000c8ec 	.word	0x2000c8ec
 8015428:	0801c298 	.word	0x0801c298
 801542c:	0801c2ac 	.word	0x0801c2ac

08015430 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8015430:	b580      	push	{r7, lr}
 8015432:	b08a      	sub	sp, #40	; 0x28
 8015434:	af00      	add	r7, sp, #0
 8015436:	60f8      	str	r0, [r7, #12]
 8015438:	60b9      	str	r1, [r7, #8]
 801543a:	607a      	str	r2, [r7, #4]
 801543c:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 801543e:	4b60      	ldr	r3, [pc, #384]	; (80155c0 <dhcp_recv+0x190>)
 8015440:	685b      	ldr	r3, [r3, #4]
 8015442:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015444:	6a3b      	ldr	r3, [r7, #32]
 8015446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015448:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 801544a:	687b      	ldr	r3, [r7, #4]
 801544c:	685b      	ldr	r3, [r3, #4]
 801544e:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8015450:	69fb      	ldr	r3, [r7, #28]
 8015452:	2b00      	cmp	r3, #0
 8015454:	f000 809d 	beq.w	8015592 <dhcp_recv+0x162>
 8015458:	69fb      	ldr	r3, [r7, #28]
 801545a:	791b      	ldrb	r3, [r3, #4]
 801545c:	2b00      	cmp	r3, #0
 801545e:	f000 8098 	beq.w	8015592 <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8015462:	687b      	ldr	r3, [r7, #4]
 8015464:	895b      	ldrh	r3, [r3, #10]
 8015466:	2b2b      	cmp	r3, #43	; 0x2b
 8015468:	f240 8095 	bls.w	8015596 <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 801546c:	69bb      	ldr	r3, [r7, #24]
 801546e:	781b      	ldrb	r3, [r3, #0]
 8015470:	2b02      	cmp	r3, #2
 8015472:	f040 8092 	bne.w	801559a <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8015476:	2300      	movs	r3, #0
 8015478:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801547c:	e012      	b.n	80154a4 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 801547e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015482:	6a3a      	ldr	r2, [r7, #32]
 8015484:	4413      	add	r3, r2
 8015486:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 801548a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801548e:	69b9      	ldr	r1, [r7, #24]
 8015490:	440b      	add	r3, r1
 8015492:	7f1b      	ldrb	r3, [r3, #28]
 8015494:	429a      	cmp	r2, r3
 8015496:	f040 8082 	bne.w	801559e <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801549a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801549e:	3301      	adds	r3, #1
 80154a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80154a4:	6a3b      	ldr	r3, [r7, #32]
 80154a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80154aa:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80154ae:	429a      	cmp	r2, r3
 80154b0:	d203      	bcs.n	80154ba <dhcp_recv+0x8a>
 80154b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80154b6:	2b05      	cmp	r3, #5
 80154b8:	d9e1      	bls.n	801547e <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 80154ba:	69bb      	ldr	r3, [r7, #24]
 80154bc:	685b      	ldr	r3, [r3, #4]
 80154be:	4618      	mov	r0, r3
 80154c0:	f7f6 fce3 	bl	800be8a <lwip_htonl>
 80154c4:	4602      	mov	r2, r0
 80154c6:	69fb      	ldr	r3, [r7, #28]
 80154c8:	681b      	ldr	r3, [r3, #0]
 80154ca:	429a      	cmp	r2, r3
 80154cc:	d169      	bne.n	80155a2 <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 80154ce:	69f9      	ldr	r1, [r7, #28]
 80154d0:	6878      	ldr	r0, [r7, #4]
 80154d2:	f7ff fcd9 	bl	8014e88 <dhcp_parse_reply>
 80154d6:	4603      	mov	r3, r0
 80154d8:	2b00      	cmp	r3, #0
 80154da:	d164      	bne.n	80155a6 <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 80154dc:	4b39      	ldr	r3, [pc, #228]	; (80155c4 <dhcp_recv+0x194>)
 80154de:	785b      	ldrb	r3, [r3, #1]
 80154e0:	2b00      	cmp	r3, #0
 80154e2:	d062      	beq.n	80155aa <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 80154e4:	687b      	ldr	r3, [r7, #4]
 80154e6:	685b      	ldr	r3, [r3, #4]
 80154e8:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 80154ea:	4b37      	ldr	r3, [pc, #220]	; (80155c8 <dhcp_recv+0x198>)
 80154ec:	685b      	ldr	r3, [r3, #4]
 80154ee:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 80154f0:	7cfb      	ldrb	r3, [r7, #19]
 80154f2:	2b05      	cmp	r3, #5
 80154f4:	d12a      	bne.n	801554c <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 80154f6:	69fb      	ldr	r3, [r7, #28]
 80154f8:	795b      	ldrb	r3, [r3, #5]
 80154fa:	2b01      	cmp	r3, #1
 80154fc:	d112      	bne.n	8015524 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 80154fe:	6979      	ldr	r1, [r7, #20]
 8015500:	6a38      	ldr	r0, [r7, #32]
 8015502:	f7fe fe53 	bl	80141ac <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8015506:	6a3b      	ldr	r3, [r7, #32]
 8015508:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801550c:	f003 0308 	and.w	r3, r3, #8
 8015510:	2b00      	cmp	r3, #0
 8015512:	d003      	beq.n	801551c <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8015514:	6a38      	ldr	r0, [r7, #32]
 8015516:	f7fe fbc3 	bl	8013ca0 <dhcp_check>
 801551a:	e049      	b.n	80155b0 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 801551c:	6a38      	ldr	r0, [r7, #32]
 801551e:	f7ff f867 	bl	80145f0 <dhcp_bind>
 8015522:	e045      	b.n	80155b0 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8015524:	69fb      	ldr	r3, [r7, #28]
 8015526:	795b      	ldrb	r3, [r3, #5]
 8015528:	2b03      	cmp	r3, #3
 801552a:	d007      	beq.n	801553c <dhcp_recv+0x10c>
 801552c:	69fb      	ldr	r3, [r7, #28]
 801552e:	795b      	ldrb	r3, [r3, #5]
 8015530:	2b04      	cmp	r3, #4
 8015532:	d003      	beq.n	801553c <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8015534:	69fb      	ldr	r3, [r7, #28]
 8015536:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8015538:	2b05      	cmp	r3, #5
 801553a:	d139      	bne.n	80155b0 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 801553c:	6979      	ldr	r1, [r7, #20]
 801553e:	6a38      	ldr	r0, [r7, #32]
 8015540:	f7fe fe34 	bl	80141ac <dhcp_handle_ack>
      dhcp_bind(netif);
 8015544:	6a38      	ldr	r0, [r7, #32]
 8015546:	f7ff f853 	bl	80145f0 <dhcp_bind>
 801554a:	e031      	b.n	80155b0 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 801554c:	7cfb      	ldrb	r3, [r7, #19]
 801554e:	2b06      	cmp	r3, #6
 8015550:	d113      	bne.n	801557a <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8015552:	69fb      	ldr	r3, [r7, #28]
 8015554:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 8015556:	2b03      	cmp	r3, #3
 8015558:	d00b      	beq.n	8015572 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801555a:	69fb      	ldr	r3, [r7, #28]
 801555c:	795b      	ldrb	r3, [r3, #5]
 801555e:	2b01      	cmp	r3, #1
 8015560:	d007      	beq.n	8015572 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8015562:	69fb      	ldr	r3, [r7, #28]
 8015564:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8015566:	2b04      	cmp	r3, #4
 8015568:	d003      	beq.n	8015572 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801556a:	69fb      	ldr	r3, [r7, #28]
 801556c:	795b      	ldrb	r3, [r3, #5]
 801556e:	2b05      	cmp	r3, #5
 8015570:	d103      	bne.n	801557a <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 8015572:	6a38      	ldr	r0, [r7, #32]
 8015574:	f7fe fb7a 	bl	8013c6c <dhcp_handle_nak>
 8015578:	e01a      	b.n	80155b0 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 801557a:	7cfb      	ldrb	r3, [r7, #19]
 801557c:	2b02      	cmp	r3, #2
 801557e:	d116      	bne.n	80155ae <dhcp_recv+0x17e>
 8015580:	69fb      	ldr	r3, [r7, #28]
 8015582:	795b      	ldrb	r3, [r3, #5]
 8015584:	2b06      	cmp	r3, #6
 8015586:	d112      	bne.n	80155ae <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 8015588:	6979      	ldr	r1, [r7, #20]
 801558a:	6a38      	ldr	r0, [r7, #32]
 801558c:	f7fe fbbc 	bl	8013d08 <dhcp_handle_offer>
 8015590:	e00e      	b.n	80155b0 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8015592:	bf00      	nop
 8015594:	e00c      	b.n	80155b0 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8015596:	bf00      	nop
 8015598:	e00a      	b.n	80155b0 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801559a:	bf00      	nop
 801559c:	e008      	b.n	80155b0 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 801559e:	bf00      	nop
 80155a0:	e006      	b.n	80155b0 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80155a2:	bf00      	nop
 80155a4:	e004      	b.n	80155b0 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80155a6:	bf00      	nop
 80155a8:	e002      	b.n	80155b0 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80155aa:	bf00      	nop
 80155ac:	e000      	b.n	80155b0 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 80155ae:	bf00      	nop
  pbuf_free(p);
 80155b0:	6878      	ldr	r0, [r7, #4]
 80155b2:	f7f8 f8a3 	bl	800d6fc <pbuf_free>
}
 80155b6:	bf00      	nop
 80155b8:	3728      	adds	r7, #40	; 0x28
 80155ba:	46bd      	mov	sp, r7
 80155bc:	bd80      	pop	{r7, pc}
 80155be:	bf00      	nop
 80155c0:	2000976c 	.word	0x2000976c
 80155c4:	2000c90c 	.word	0x2000c90c
 80155c8:	2000c8ec 	.word	0x2000c8ec

080155cc <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 80155cc:	b580      	push	{r7, lr}
 80155ce:	b088      	sub	sp, #32
 80155d0:	af00      	add	r7, sp, #0
 80155d2:	60f8      	str	r0, [r7, #12]
 80155d4:	60b9      	str	r1, [r7, #8]
 80155d6:	603b      	str	r3, [r7, #0]
 80155d8:	4613      	mov	r3, r2
 80155da:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 80155dc:	68fb      	ldr	r3, [r7, #12]
 80155de:	2b00      	cmp	r3, #0
 80155e0:	d108      	bne.n	80155f4 <dhcp_create_msg+0x28>
 80155e2:	4b5f      	ldr	r3, [pc, #380]	; (8015760 <dhcp_create_msg+0x194>)
 80155e4:	f240 7269 	movw	r2, #1897	; 0x769
 80155e8:	495e      	ldr	r1, [pc, #376]	; (8015764 <dhcp_create_msg+0x198>)
 80155ea:	485f      	ldr	r0, [pc, #380]	; (8015768 <dhcp_create_msg+0x19c>)
 80155ec:	f003 fa56 	bl	8018a9c <iprintf>
 80155f0:	2300      	movs	r3, #0
 80155f2:	e0b1      	b.n	8015758 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 80155f4:	68bb      	ldr	r3, [r7, #8]
 80155f6:	2b00      	cmp	r3, #0
 80155f8:	d108      	bne.n	801560c <dhcp_create_msg+0x40>
 80155fa:	4b59      	ldr	r3, [pc, #356]	; (8015760 <dhcp_create_msg+0x194>)
 80155fc:	f240 726a 	movw	r2, #1898	; 0x76a
 8015600:	495a      	ldr	r1, [pc, #360]	; (801576c <dhcp_create_msg+0x1a0>)
 8015602:	4859      	ldr	r0, [pc, #356]	; (8015768 <dhcp_create_msg+0x19c>)
 8015604:	f003 fa4a 	bl	8018a9c <iprintf>
 8015608:	2300      	movs	r3, #0
 801560a:	e0a5      	b.n	8015758 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 801560c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015610:	f44f 719a 	mov.w	r1, #308	; 0x134
 8015614:	2036      	movs	r0, #54	; 0x36
 8015616:	f7f7 fd8d 	bl	800d134 <pbuf_alloc>
 801561a:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 801561c:	69bb      	ldr	r3, [r7, #24]
 801561e:	2b00      	cmp	r3, #0
 8015620:	d101      	bne.n	8015626 <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 8015622:	2300      	movs	r3, #0
 8015624:	e098      	b.n	8015758 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8015626:	69bb      	ldr	r3, [r7, #24]
 8015628:	895b      	ldrh	r3, [r3, #10]
 801562a:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 801562e:	d206      	bcs.n	801563e <dhcp_create_msg+0x72>
 8015630:	4b4b      	ldr	r3, [pc, #300]	; (8015760 <dhcp_create_msg+0x194>)
 8015632:	f240 7271 	movw	r2, #1905	; 0x771
 8015636:	494e      	ldr	r1, [pc, #312]	; (8015770 <dhcp_create_msg+0x1a4>)
 8015638:	484b      	ldr	r0, [pc, #300]	; (8015768 <dhcp_create_msg+0x19c>)
 801563a:	f003 fa2f 	bl	8018a9c <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 801563e:	79fb      	ldrb	r3, [r7, #7]
 8015640:	2b03      	cmp	r3, #3
 8015642:	d103      	bne.n	801564c <dhcp_create_msg+0x80>
 8015644:	68bb      	ldr	r3, [r7, #8]
 8015646:	795b      	ldrb	r3, [r3, #5]
 8015648:	2b03      	cmp	r3, #3
 801564a:	d10d      	bne.n	8015668 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 801564c:	68bb      	ldr	r3, [r7, #8]
 801564e:	799b      	ldrb	r3, [r3, #6]
 8015650:	2b00      	cmp	r3, #0
 8015652:	d105      	bne.n	8015660 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8015654:	f003 fa3a 	bl	8018acc <rand>
 8015658:	4603      	mov	r3, r0
 801565a:	461a      	mov	r2, r3
 801565c:	4b45      	ldr	r3, [pc, #276]	; (8015774 <dhcp_create_msg+0x1a8>)
 801565e:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8015660:	4b44      	ldr	r3, [pc, #272]	; (8015774 <dhcp_create_msg+0x1a8>)
 8015662:	681a      	ldr	r2, [r3, #0]
 8015664:	68bb      	ldr	r3, [r7, #8]
 8015666:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8015668:	69bb      	ldr	r3, [r7, #24]
 801566a:	685b      	ldr	r3, [r3, #4]
 801566c:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 801566e:	f44f 729a 	mov.w	r2, #308	; 0x134
 8015672:	2100      	movs	r1, #0
 8015674:	6978      	ldr	r0, [r7, #20]
 8015676:	f003 fa09 	bl	8018a8c <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 801567a:	697b      	ldr	r3, [r7, #20]
 801567c:	2201      	movs	r2, #1
 801567e:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8015680:	697b      	ldr	r3, [r7, #20]
 8015682:	2201      	movs	r2, #1
 8015684:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 8015686:	68fb      	ldr	r3, [r7, #12]
 8015688:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 801568c:	697b      	ldr	r3, [r7, #20]
 801568e:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8015690:	68bb      	ldr	r3, [r7, #8]
 8015692:	681b      	ldr	r3, [r3, #0]
 8015694:	4618      	mov	r0, r3
 8015696:	f7f6 fbf8 	bl	800be8a <lwip_htonl>
 801569a:	4602      	mov	r2, r0
 801569c:	697b      	ldr	r3, [r7, #20]
 801569e:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 80156a0:	79fb      	ldrb	r3, [r7, #7]
 80156a2:	2b08      	cmp	r3, #8
 80156a4:	d010      	beq.n	80156c8 <dhcp_create_msg+0xfc>
 80156a6:	79fb      	ldrb	r3, [r7, #7]
 80156a8:	2b04      	cmp	r3, #4
 80156aa:	d00d      	beq.n	80156c8 <dhcp_create_msg+0xfc>
 80156ac:	79fb      	ldrb	r3, [r7, #7]
 80156ae:	2b07      	cmp	r3, #7
 80156b0:	d00a      	beq.n	80156c8 <dhcp_create_msg+0xfc>
 80156b2:	79fb      	ldrb	r3, [r7, #7]
 80156b4:	2b03      	cmp	r3, #3
 80156b6:	d10c      	bne.n	80156d2 <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 80156b8:	68bb      	ldr	r3, [r7, #8]
 80156ba:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 80156bc:	2b05      	cmp	r3, #5
 80156be:	d003      	beq.n	80156c8 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 80156c0:	68bb      	ldr	r3, [r7, #8]
 80156c2:	795b      	ldrb	r3, [r3, #5]
 80156c4:	2b04      	cmp	r3, #4
 80156c6:	d104      	bne.n	80156d2 <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 80156c8:	68fb      	ldr	r3, [r7, #12]
 80156ca:	3304      	adds	r3, #4
 80156cc:	681a      	ldr	r2, [r3, #0]
 80156ce:	697b      	ldr	r3, [r7, #20]
 80156d0:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80156d2:	2300      	movs	r3, #0
 80156d4:	83fb      	strh	r3, [r7, #30]
 80156d6:	e00c      	b.n	80156f2 <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 80156d8:	8bfa      	ldrh	r2, [r7, #30]
 80156da:	8bfb      	ldrh	r3, [r7, #30]
 80156dc:	68f9      	ldr	r1, [r7, #12]
 80156de:	440a      	add	r2, r1
 80156e0:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 80156e4:	697a      	ldr	r2, [r7, #20]
 80156e6:	4413      	add	r3, r2
 80156e8:	460a      	mov	r2, r1
 80156ea:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80156ec:	8bfb      	ldrh	r3, [r7, #30]
 80156ee:	3301      	adds	r3, #1
 80156f0:	83fb      	strh	r3, [r7, #30]
 80156f2:	8bfb      	ldrh	r3, [r7, #30]
 80156f4:	2b05      	cmp	r3, #5
 80156f6:	d9ef      	bls.n	80156d8 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 80156f8:	697b      	ldr	r3, [r7, #20]
 80156fa:	2200      	movs	r2, #0
 80156fc:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8015700:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8015704:	2200      	movs	r2, #0
 8015706:	f062 027d 	orn	r2, r2, #125	; 0x7d
 801570a:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 801570e:	2200      	movs	r2, #0
 8015710:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8015714:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8015718:	2200      	movs	r2, #0
 801571a:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 801571e:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8015722:	697b      	ldr	r3, [r7, #20]
 8015724:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015728:	2301      	movs	r3, #1
 801572a:	2235      	movs	r2, #53	; 0x35
 801572c:	2000      	movs	r0, #0
 801572e:	f7ff fadb 	bl	8014ce8 <dhcp_option>
 8015732:	4603      	mov	r3, r0
 8015734:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 8015736:	697b      	ldr	r3, [r7, #20]
 8015738:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801573c:	79fa      	ldrb	r2, [r7, #7]
 801573e:	8a7b      	ldrh	r3, [r7, #18]
 8015740:	4618      	mov	r0, r3
 8015742:	f7ff fb05 	bl	8014d50 <dhcp_option_byte>
 8015746:	4603      	mov	r3, r0
 8015748:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 801574a:	683b      	ldr	r3, [r7, #0]
 801574c:	2b00      	cmp	r3, #0
 801574e:	d002      	beq.n	8015756 <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 8015750:	683b      	ldr	r3, [r7, #0]
 8015752:	8a7a      	ldrh	r2, [r7, #18]
 8015754:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 8015756:	69bb      	ldr	r3, [r7, #24]
}
 8015758:	4618      	mov	r0, r3
 801575a:	3720      	adds	r7, #32
 801575c:	46bd      	mov	sp, r7
 801575e:	bd80      	pop	{r7, pc}
 8015760:	0801bfa0 	.word	0x0801bfa0
 8015764:	0801c2c0 	.word	0x0801c2c0
 8015768:	0801c000 	.word	0x0801c000
 801576c:	0801c2e0 	.word	0x0801c2e0
 8015770:	0801c300 	.word	0x0801c300
 8015774:	2000c91c 	.word	0x2000c91c

08015778 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 8015778:	b580      	push	{r7, lr}
 801577a:	b084      	sub	sp, #16
 801577c:	af00      	add	r7, sp, #0
 801577e:	4603      	mov	r3, r0
 8015780:	60b9      	str	r1, [r7, #8]
 8015782:	607a      	str	r2, [r7, #4]
 8015784:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 8015786:	89fb      	ldrh	r3, [r7, #14]
 8015788:	1c5a      	adds	r2, r3, #1
 801578a:	81fa      	strh	r2, [r7, #14]
 801578c:	461a      	mov	r2, r3
 801578e:	68bb      	ldr	r3, [r7, #8]
 8015790:	4413      	add	r3, r2
 8015792:	22ff      	movs	r2, #255	; 0xff
 8015794:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8015796:	e007      	b.n	80157a8 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8015798:	89fb      	ldrh	r3, [r7, #14]
 801579a:	1c5a      	adds	r2, r3, #1
 801579c:	81fa      	strh	r2, [r7, #14]
 801579e:	461a      	mov	r2, r3
 80157a0:	68bb      	ldr	r3, [r7, #8]
 80157a2:	4413      	add	r3, r2
 80157a4:	2200      	movs	r2, #0
 80157a6:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80157a8:	89fb      	ldrh	r3, [r7, #14]
 80157aa:	2b43      	cmp	r3, #67	; 0x43
 80157ac:	d904      	bls.n	80157b8 <dhcp_option_trailer+0x40>
 80157ae:	89fb      	ldrh	r3, [r7, #14]
 80157b0:	f003 0303 	and.w	r3, r3, #3
 80157b4:	2b00      	cmp	r3, #0
 80157b6:	d002      	beq.n	80157be <dhcp_option_trailer+0x46>
 80157b8:	89fb      	ldrh	r3, [r7, #14]
 80157ba:	2b43      	cmp	r3, #67	; 0x43
 80157bc:	d9ec      	bls.n	8015798 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 80157be:	89fb      	ldrh	r3, [r7, #14]
 80157c0:	33f0      	adds	r3, #240	; 0xf0
 80157c2:	b29b      	uxth	r3, r3
 80157c4:	4619      	mov	r1, r3
 80157c6:	6878      	ldr	r0, [r7, #4]
 80157c8:	f7f7 fe12 	bl	800d3f0 <pbuf_realloc>
}
 80157cc:	bf00      	nop
 80157ce:	3710      	adds	r7, #16
 80157d0:	46bd      	mov	sp, r7
 80157d2:	bd80      	pop	{r7, pc}

080157d4 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 80157d4:	b480      	push	{r7}
 80157d6:	b085      	sub	sp, #20
 80157d8:	af00      	add	r7, sp, #0
 80157da:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 80157dc:	687b      	ldr	r3, [r7, #4]
 80157de:	2b00      	cmp	r3, #0
 80157e0:	d017      	beq.n	8015812 <dhcp_supplied_address+0x3e>
 80157e2:	687b      	ldr	r3, [r7, #4]
 80157e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80157e6:	2b00      	cmp	r3, #0
 80157e8:	d013      	beq.n	8015812 <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80157ea:	687b      	ldr	r3, [r7, #4]
 80157ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80157ee:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 80157f0:	68fb      	ldr	r3, [r7, #12]
 80157f2:	795b      	ldrb	r3, [r3, #5]
 80157f4:	2b0a      	cmp	r3, #10
 80157f6:	d007      	beq.n	8015808 <dhcp_supplied_address+0x34>
 80157f8:	68fb      	ldr	r3, [r7, #12]
 80157fa:	795b      	ldrb	r3, [r3, #5]
 80157fc:	2b05      	cmp	r3, #5
 80157fe:	d003      	beq.n	8015808 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8015800:	68fb      	ldr	r3, [r7, #12]
 8015802:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8015804:	2b04      	cmp	r3, #4
 8015806:	d101      	bne.n	801580c <dhcp_supplied_address+0x38>
 8015808:	2301      	movs	r3, #1
 801580a:	e000      	b.n	801580e <dhcp_supplied_address+0x3a>
 801580c:	2300      	movs	r3, #0
 801580e:	b2db      	uxtb	r3, r3
 8015810:	e000      	b.n	8015814 <dhcp_supplied_address+0x40>
  }
  return 0;
 8015812:	2300      	movs	r3, #0
}
 8015814:	4618      	mov	r0, r3
 8015816:	3714      	adds	r7, #20
 8015818:	46bd      	mov	sp, r7
 801581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801581e:	4770      	bx	lr

08015820 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8015820:	b580      	push	{r7, lr}
 8015822:	b082      	sub	sp, #8
 8015824:	af00      	add	r7, sp, #0
 8015826:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8015828:	4915      	ldr	r1, [pc, #84]	; (8015880 <etharp_free_entry+0x60>)
 801582a:	687a      	ldr	r2, [r7, #4]
 801582c:	4613      	mov	r3, r2
 801582e:	005b      	lsls	r3, r3, #1
 8015830:	4413      	add	r3, r2
 8015832:	00db      	lsls	r3, r3, #3
 8015834:	440b      	add	r3, r1
 8015836:	681b      	ldr	r3, [r3, #0]
 8015838:	2b00      	cmp	r3, #0
 801583a:	d013      	beq.n	8015864 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801583c:	4910      	ldr	r1, [pc, #64]	; (8015880 <etharp_free_entry+0x60>)
 801583e:	687a      	ldr	r2, [r7, #4]
 8015840:	4613      	mov	r3, r2
 8015842:	005b      	lsls	r3, r3, #1
 8015844:	4413      	add	r3, r2
 8015846:	00db      	lsls	r3, r3, #3
 8015848:	440b      	add	r3, r1
 801584a:	681b      	ldr	r3, [r3, #0]
 801584c:	4618      	mov	r0, r3
 801584e:	f7f7 ff55 	bl	800d6fc <pbuf_free>
    arp_table[i].q = NULL;
 8015852:	490b      	ldr	r1, [pc, #44]	; (8015880 <etharp_free_entry+0x60>)
 8015854:	687a      	ldr	r2, [r7, #4]
 8015856:	4613      	mov	r3, r2
 8015858:	005b      	lsls	r3, r3, #1
 801585a:	4413      	add	r3, r2
 801585c:	00db      	lsls	r3, r3, #3
 801585e:	440b      	add	r3, r1
 8015860:	2200      	movs	r2, #0
 8015862:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8015864:	4906      	ldr	r1, [pc, #24]	; (8015880 <etharp_free_entry+0x60>)
 8015866:	687a      	ldr	r2, [r7, #4]
 8015868:	4613      	mov	r3, r2
 801586a:	005b      	lsls	r3, r3, #1
 801586c:	4413      	add	r3, r2
 801586e:	00db      	lsls	r3, r3, #3
 8015870:	440b      	add	r3, r1
 8015872:	3314      	adds	r3, #20
 8015874:	2200      	movs	r2, #0
 8015876:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8015878:	bf00      	nop
 801587a:	3708      	adds	r7, #8
 801587c:	46bd      	mov	sp, r7
 801587e:	bd80      	pop	{r7, pc}
 8015880:	2000c920 	.word	0x2000c920

08015884 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8015884:	b580      	push	{r7, lr}
 8015886:	b082      	sub	sp, #8
 8015888:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801588a:	2300      	movs	r3, #0
 801588c:	607b      	str	r3, [r7, #4]
 801588e:	e096      	b.n	80159be <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8015890:	494f      	ldr	r1, [pc, #316]	; (80159d0 <etharp_tmr+0x14c>)
 8015892:	687a      	ldr	r2, [r7, #4]
 8015894:	4613      	mov	r3, r2
 8015896:	005b      	lsls	r3, r3, #1
 8015898:	4413      	add	r3, r2
 801589a:	00db      	lsls	r3, r3, #3
 801589c:	440b      	add	r3, r1
 801589e:	3314      	adds	r3, #20
 80158a0:	781b      	ldrb	r3, [r3, #0]
 80158a2:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80158a4:	78fb      	ldrb	r3, [r7, #3]
 80158a6:	2b00      	cmp	r3, #0
 80158a8:	f000 8086 	beq.w	80159b8 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80158ac:	4948      	ldr	r1, [pc, #288]	; (80159d0 <etharp_tmr+0x14c>)
 80158ae:	687a      	ldr	r2, [r7, #4]
 80158b0:	4613      	mov	r3, r2
 80158b2:	005b      	lsls	r3, r3, #1
 80158b4:	4413      	add	r3, r2
 80158b6:	00db      	lsls	r3, r3, #3
 80158b8:	440b      	add	r3, r1
 80158ba:	3312      	adds	r3, #18
 80158bc:	881b      	ldrh	r3, [r3, #0]
 80158be:	3301      	adds	r3, #1
 80158c0:	b298      	uxth	r0, r3
 80158c2:	4943      	ldr	r1, [pc, #268]	; (80159d0 <etharp_tmr+0x14c>)
 80158c4:	687a      	ldr	r2, [r7, #4]
 80158c6:	4613      	mov	r3, r2
 80158c8:	005b      	lsls	r3, r3, #1
 80158ca:	4413      	add	r3, r2
 80158cc:	00db      	lsls	r3, r3, #3
 80158ce:	440b      	add	r3, r1
 80158d0:	3312      	adds	r3, #18
 80158d2:	4602      	mov	r2, r0
 80158d4:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80158d6:	493e      	ldr	r1, [pc, #248]	; (80159d0 <etharp_tmr+0x14c>)
 80158d8:	687a      	ldr	r2, [r7, #4]
 80158da:	4613      	mov	r3, r2
 80158dc:	005b      	lsls	r3, r3, #1
 80158de:	4413      	add	r3, r2
 80158e0:	00db      	lsls	r3, r3, #3
 80158e2:	440b      	add	r3, r1
 80158e4:	3312      	adds	r3, #18
 80158e6:	881b      	ldrh	r3, [r3, #0]
 80158e8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80158ec:	d215      	bcs.n	801591a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80158ee:	4938      	ldr	r1, [pc, #224]	; (80159d0 <etharp_tmr+0x14c>)
 80158f0:	687a      	ldr	r2, [r7, #4]
 80158f2:	4613      	mov	r3, r2
 80158f4:	005b      	lsls	r3, r3, #1
 80158f6:	4413      	add	r3, r2
 80158f8:	00db      	lsls	r3, r3, #3
 80158fa:	440b      	add	r3, r1
 80158fc:	3314      	adds	r3, #20
 80158fe:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8015900:	2b01      	cmp	r3, #1
 8015902:	d10e      	bne.n	8015922 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8015904:	4932      	ldr	r1, [pc, #200]	; (80159d0 <etharp_tmr+0x14c>)
 8015906:	687a      	ldr	r2, [r7, #4]
 8015908:	4613      	mov	r3, r2
 801590a:	005b      	lsls	r3, r3, #1
 801590c:	4413      	add	r3, r2
 801590e:	00db      	lsls	r3, r3, #3
 8015910:	440b      	add	r3, r1
 8015912:	3312      	adds	r3, #18
 8015914:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8015916:	2b04      	cmp	r3, #4
 8015918:	d903      	bls.n	8015922 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801591a:	6878      	ldr	r0, [r7, #4]
 801591c:	f7ff ff80 	bl	8015820 <etharp_free_entry>
 8015920:	e04a      	b.n	80159b8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8015922:	492b      	ldr	r1, [pc, #172]	; (80159d0 <etharp_tmr+0x14c>)
 8015924:	687a      	ldr	r2, [r7, #4]
 8015926:	4613      	mov	r3, r2
 8015928:	005b      	lsls	r3, r3, #1
 801592a:	4413      	add	r3, r2
 801592c:	00db      	lsls	r3, r3, #3
 801592e:	440b      	add	r3, r1
 8015930:	3314      	adds	r3, #20
 8015932:	781b      	ldrb	r3, [r3, #0]
 8015934:	2b03      	cmp	r3, #3
 8015936:	d10a      	bne.n	801594e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8015938:	4925      	ldr	r1, [pc, #148]	; (80159d0 <etharp_tmr+0x14c>)
 801593a:	687a      	ldr	r2, [r7, #4]
 801593c:	4613      	mov	r3, r2
 801593e:	005b      	lsls	r3, r3, #1
 8015940:	4413      	add	r3, r2
 8015942:	00db      	lsls	r3, r3, #3
 8015944:	440b      	add	r3, r1
 8015946:	3314      	adds	r3, #20
 8015948:	2204      	movs	r2, #4
 801594a:	701a      	strb	r2, [r3, #0]
 801594c:	e034      	b.n	80159b8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801594e:	4920      	ldr	r1, [pc, #128]	; (80159d0 <etharp_tmr+0x14c>)
 8015950:	687a      	ldr	r2, [r7, #4]
 8015952:	4613      	mov	r3, r2
 8015954:	005b      	lsls	r3, r3, #1
 8015956:	4413      	add	r3, r2
 8015958:	00db      	lsls	r3, r3, #3
 801595a:	440b      	add	r3, r1
 801595c:	3314      	adds	r3, #20
 801595e:	781b      	ldrb	r3, [r3, #0]
 8015960:	2b04      	cmp	r3, #4
 8015962:	d10a      	bne.n	801597a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8015964:	491a      	ldr	r1, [pc, #104]	; (80159d0 <etharp_tmr+0x14c>)
 8015966:	687a      	ldr	r2, [r7, #4]
 8015968:	4613      	mov	r3, r2
 801596a:	005b      	lsls	r3, r3, #1
 801596c:	4413      	add	r3, r2
 801596e:	00db      	lsls	r3, r3, #3
 8015970:	440b      	add	r3, r1
 8015972:	3314      	adds	r3, #20
 8015974:	2202      	movs	r2, #2
 8015976:	701a      	strb	r2, [r3, #0]
 8015978:	e01e      	b.n	80159b8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801597a:	4915      	ldr	r1, [pc, #84]	; (80159d0 <etharp_tmr+0x14c>)
 801597c:	687a      	ldr	r2, [r7, #4]
 801597e:	4613      	mov	r3, r2
 8015980:	005b      	lsls	r3, r3, #1
 8015982:	4413      	add	r3, r2
 8015984:	00db      	lsls	r3, r3, #3
 8015986:	440b      	add	r3, r1
 8015988:	3314      	adds	r3, #20
 801598a:	781b      	ldrb	r3, [r3, #0]
 801598c:	2b01      	cmp	r3, #1
 801598e:	d113      	bne.n	80159b8 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8015990:	490f      	ldr	r1, [pc, #60]	; (80159d0 <etharp_tmr+0x14c>)
 8015992:	687a      	ldr	r2, [r7, #4]
 8015994:	4613      	mov	r3, r2
 8015996:	005b      	lsls	r3, r3, #1
 8015998:	4413      	add	r3, r2
 801599a:	00db      	lsls	r3, r3, #3
 801599c:	440b      	add	r3, r1
 801599e:	3308      	adds	r3, #8
 80159a0:	6818      	ldr	r0, [r3, #0]
 80159a2:	687a      	ldr	r2, [r7, #4]
 80159a4:	4613      	mov	r3, r2
 80159a6:	005b      	lsls	r3, r3, #1
 80159a8:	4413      	add	r3, r2
 80159aa:	00db      	lsls	r3, r3, #3
 80159ac:	4a08      	ldr	r2, [pc, #32]	; (80159d0 <etharp_tmr+0x14c>)
 80159ae:	4413      	add	r3, r2
 80159b0:	3304      	adds	r3, #4
 80159b2:	4619      	mov	r1, r3
 80159b4:	f000 fe72 	bl	801669c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80159b8:	687b      	ldr	r3, [r7, #4]
 80159ba:	3301      	adds	r3, #1
 80159bc:	607b      	str	r3, [r7, #4]
 80159be:	687b      	ldr	r3, [r7, #4]
 80159c0:	2b09      	cmp	r3, #9
 80159c2:	f77f af65 	ble.w	8015890 <etharp_tmr+0xc>
      }
    }
  }
}
 80159c6:	bf00      	nop
 80159c8:	bf00      	nop
 80159ca:	3708      	adds	r7, #8
 80159cc:	46bd      	mov	sp, r7
 80159ce:	bd80      	pop	{r7, pc}
 80159d0:	2000c920 	.word	0x2000c920

080159d4 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80159d4:	b580      	push	{r7, lr}
 80159d6:	b08a      	sub	sp, #40	; 0x28
 80159d8:	af00      	add	r7, sp, #0
 80159da:	60f8      	str	r0, [r7, #12]
 80159dc:	460b      	mov	r3, r1
 80159de:	607a      	str	r2, [r7, #4]
 80159e0:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80159e2:	230a      	movs	r3, #10
 80159e4:	84fb      	strh	r3, [r7, #38]	; 0x26
 80159e6:	230a      	movs	r3, #10
 80159e8:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80159ea:	230a      	movs	r3, #10
 80159ec:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 80159ee:	2300      	movs	r3, #0
 80159f0:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80159f2:	230a      	movs	r3, #10
 80159f4:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80159f6:	2300      	movs	r3, #0
 80159f8:	83bb      	strh	r3, [r7, #28]
 80159fa:	2300      	movs	r3, #0
 80159fc:	837b      	strh	r3, [r7, #26]
 80159fe:	2300      	movs	r3, #0
 8015a00:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015a02:	2300      	movs	r3, #0
 8015a04:	843b      	strh	r3, [r7, #32]
 8015a06:	e0ae      	b.n	8015b66 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8015a08:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015a0c:	49a6      	ldr	r1, [pc, #664]	; (8015ca8 <etharp_find_entry+0x2d4>)
 8015a0e:	4613      	mov	r3, r2
 8015a10:	005b      	lsls	r3, r3, #1
 8015a12:	4413      	add	r3, r2
 8015a14:	00db      	lsls	r3, r3, #3
 8015a16:	440b      	add	r3, r1
 8015a18:	3314      	adds	r3, #20
 8015a1a:	781b      	ldrb	r3, [r3, #0]
 8015a1c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8015a1e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8015a22:	2b0a      	cmp	r3, #10
 8015a24:	d105      	bne.n	8015a32 <etharp_find_entry+0x5e>
 8015a26:	7dfb      	ldrb	r3, [r7, #23]
 8015a28:	2b00      	cmp	r3, #0
 8015a2a:	d102      	bne.n	8015a32 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8015a2c:	8c3b      	ldrh	r3, [r7, #32]
 8015a2e:	847b      	strh	r3, [r7, #34]	; 0x22
 8015a30:	e095      	b.n	8015b5e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8015a32:	7dfb      	ldrb	r3, [r7, #23]
 8015a34:	2b00      	cmp	r3, #0
 8015a36:	f000 8092 	beq.w	8015b5e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8015a3a:	7dfb      	ldrb	r3, [r7, #23]
 8015a3c:	2b01      	cmp	r3, #1
 8015a3e:	d009      	beq.n	8015a54 <etharp_find_entry+0x80>
 8015a40:	7dfb      	ldrb	r3, [r7, #23]
 8015a42:	2b01      	cmp	r3, #1
 8015a44:	d806      	bhi.n	8015a54 <etharp_find_entry+0x80>
 8015a46:	4b99      	ldr	r3, [pc, #612]	; (8015cac <etharp_find_entry+0x2d8>)
 8015a48:	f240 1223 	movw	r2, #291	; 0x123
 8015a4c:	4998      	ldr	r1, [pc, #608]	; (8015cb0 <etharp_find_entry+0x2dc>)
 8015a4e:	4899      	ldr	r0, [pc, #612]	; (8015cb4 <etharp_find_entry+0x2e0>)
 8015a50:	f003 f824 	bl	8018a9c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8015a54:	68fb      	ldr	r3, [r7, #12]
 8015a56:	2b00      	cmp	r3, #0
 8015a58:	d020      	beq.n	8015a9c <etharp_find_entry+0xc8>
 8015a5a:	68fb      	ldr	r3, [r7, #12]
 8015a5c:	6819      	ldr	r1, [r3, #0]
 8015a5e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015a62:	4891      	ldr	r0, [pc, #580]	; (8015ca8 <etharp_find_entry+0x2d4>)
 8015a64:	4613      	mov	r3, r2
 8015a66:	005b      	lsls	r3, r3, #1
 8015a68:	4413      	add	r3, r2
 8015a6a:	00db      	lsls	r3, r3, #3
 8015a6c:	4403      	add	r3, r0
 8015a6e:	3304      	adds	r3, #4
 8015a70:	681b      	ldr	r3, [r3, #0]
 8015a72:	4299      	cmp	r1, r3
 8015a74:	d112      	bne.n	8015a9c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8015a76:	687b      	ldr	r3, [r7, #4]
 8015a78:	2b00      	cmp	r3, #0
 8015a7a:	d00c      	beq.n	8015a96 <etharp_find_entry+0xc2>
 8015a7c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015a80:	4989      	ldr	r1, [pc, #548]	; (8015ca8 <etharp_find_entry+0x2d4>)
 8015a82:	4613      	mov	r3, r2
 8015a84:	005b      	lsls	r3, r3, #1
 8015a86:	4413      	add	r3, r2
 8015a88:	00db      	lsls	r3, r3, #3
 8015a8a:	440b      	add	r3, r1
 8015a8c:	3308      	adds	r3, #8
 8015a8e:	681b      	ldr	r3, [r3, #0]
 8015a90:	687a      	ldr	r2, [r7, #4]
 8015a92:	429a      	cmp	r2, r3
 8015a94:	d102      	bne.n	8015a9c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8015a96:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015a9a:	e100      	b.n	8015c9e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8015a9c:	7dfb      	ldrb	r3, [r7, #23]
 8015a9e:	2b01      	cmp	r3, #1
 8015aa0:	d140      	bne.n	8015b24 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8015aa2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015aa6:	4980      	ldr	r1, [pc, #512]	; (8015ca8 <etharp_find_entry+0x2d4>)
 8015aa8:	4613      	mov	r3, r2
 8015aaa:	005b      	lsls	r3, r3, #1
 8015aac:	4413      	add	r3, r2
 8015aae:	00db      	lsls	r3, r3, #3
 8015ab0:	440b      	add	r3, r1
 8015ab2:	681b      	ldr	r3, [r3, #0]
 8015ab4:	2b00      	cmp	r3, #0
 8015ab6:	d01a      	beq.n	8015aee <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8015ab8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015abc:	497a      	ldr	r1, [pc, #488]	; (8015ca8 <etharp_find_entry+0x2d4>)
 8015abe:	4613      	mov	r3, r2
 8015ac0:	005b      	lsls	r3, r3, #1
 8015ac2:	4413      	add	r3, r2
 8015ac4:	00db      	lsls	r3, r3, #3
 8015ac6:	440b      	add	r3, r1
 8015ac8:	3312      	adds	r3, #18
 8015aca:	881b      	ldrh	r3, [r3, #0]
 8015acc:	8bba      	ldrh	r2, [r7, #28]
 8015ace:	429a      	cmp	r2, r3
 8015ad0:	d845      	bhi.n	8015b5e <etharp_find_entry+0x18a>
            old_queue = i;
 8015ad2:	8c3b      	ldrh	r3, [r7, #32]
 8015ad4:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8015ad6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015ada:	4973      	ldr	r1, [pc, #460]	; (8015ca8 <etharp_find_entry+0x2d4>)
 8015adc:	4613      	mov	r3, r2
 8015ade:	005b      	lsls	r3, r3, #1
 8015ae0:	4413      	add	r3, r2
 8015ae2:	00db      	lsls	r3, r3, #3
 8015ae4:	440b      	add	r3, r1
 8015ae6:	3312      	adds	r3, #18
 8015ae8:	881b      	ldrh	r3, [r3, #0]
 8015aea:	83bb      	strh	r3, [r7, #28]
 8015aec:	e037      	b.n	8015b5e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8015aee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015af2:	496d      	ldr	r1, [pc, #436]	; (8015ca8 <etharp_find_entry+0x2d4>)
 8015af4:	4613      	mov	r3, r2
 8015af6:	005b      	lsls	r3, r3, #1
 8015af8:	4413      	add	r3, r2
 8015afa:	00db      	lsls	r3, r3, #3
 8015afc:	440b      	add	r3, r1
 8015afe:	3312      	adds	r3, #18
 8015b00:	881b      	ldrh	r3, [r3, #0]
 8015b02:	8b7a      	ldrh	r2, [r7, #26]
 8015b04:	429a      	cmp	r2, r3
 8015b06:	d82a      	bhi.n	8015b5e <etharp_find_entry+0x18a>
            old_pending = i;
 8015b08:	8c3b      	ldrh	r3, [r7, #32]
 8015b0a:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8015b0c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015b10:	4965      	ldr	r1, [pc, #404]	; (8015ca8 <etharp_find_entry+0x2d4>)
 8015b12:	4613      	mov	r3, r2
 8015b14:	005b      	lsls	r3, r3, #1
 8015b16:	4413      	add	r3, r2
 8015b18:	00db      	lsls	r3, r3, #3
 8015b1a:	440b      	add	r3, r1
 8015b1c:	3312      	adds	r3, #18
 8015b1e:	881b      	ldrh	r3, [r3, #0]
 8015b20:	837b      	strh	r3, [r7, #26]
 8015b22:	e01c      	b.n	8015b5e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8015b24:	7dfb      	ldrb	r3, [r7, #23]
 8015b26:	2b01      	cmp	r3, #1
 8015b28:	d919      	bls.n	8015b5e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8015b2a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015b2e:	495e      	ldr	r1, [pc, #376]	; (8015ca8 <etharp_find_entry+0x2d4>)
 8015b30:	4613      	mov	r3, r2
 8015b32:	005b      	lsls	r3, r3, #1
 8015b34:	4413      	add	r3, r2
 8015b36:	00db      	lsls	r3, r3, #3
 8015b38:	440b      	add	r3, r1
 8015b3a:	3312      	adds	r3, #18
 8015b3c:	881b      	ldrh	r3, [r3, #0]
 8015b3e:	8b3a      	ldrh	r2, [r7, #24]
 8015b40:	429a      	cmp	r2, r3
 8015b42:	d80c      	bhi.n	8015b5e <etharp_find_entry+0x18a>
            old_stable = i;
 8015b44:	8c3b      	ldrh	r3, [r7, #32]
 8015b46:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8015b48:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015b4c:	4956      	ldr	r1, [pc, #344]	; (8015ca8 <etharp_find_entry+0x2d4>)
 8015b4e:	4613      	mov	r3, r2
 8015b50:	005b      	lsls	r3, r3, #1
 8015b52:	4413      	add	r3, r2
 8015b54:	00db      	lsls	r3, r3, #3
 8015b56:	440b      	add	r3, r1
 8015b58:	3312      	adds	r3, #18
 8015b5a:	881b      	ldrh	r3, [r3, #0]
 8015b5c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015b5e:	8c3b      	ldrh	r3, [r7, #32]
 8015b60:	3301      	adds	r3, #1
 8015b62:	b29b      	uxth	r3, r3
 8015b64:	843b      	strh	r3, [r7, #32]
 8015b66:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015b6a:	2b09      	cmp	r3, #9
 8015b6c:	f77f af4c 	ble.w	8015a08 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8015b70:	7afb      	ldrb	r3, [r7, #11]
 8015b72:	f003 0302 	and.w	r3, r3, #2
 8015b76:	2b00      	cmp	r3, #0
 8015b78:	d108      	bne.n	8015b8c <etharp_find_entry+0x1b8>
 8015b7a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8015b7e:	2b0a      	cmp	r3, #10
 8015b80:	d107      	bne.n	8015b92 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8015b82:	7afb      	ldrb	r3, [r7, #11]
 8015b84:	f003 0301 	and.w	r3, r3, #1
 8015b88:	2b00      	cmp	r3, #0
 8015b8a:	d102      	bne.n	8015b92 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8015b8c:	f04f 33ff 	mov.w	r3, #4294967295
 8015b90:	e085      	b.n	8015c9e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8015b92:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8015b96:	2b09      	cmp	r3, #9
 8015b98:	dc02      	bgt.n	8015ba0 <etharp_find_entry+0x1cc>
    i = empty;
 8015b9a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015b9c:	843b      	strh	r3, [r7, #32]
 8015b9e:	e039      	b.n	8015c14 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8015ba0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8015ba4:	2b09      	cmp	r3, #9
 8015ba6:	dc14      	bgt.n	8015bd2 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8015ba8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015baa:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8015bac:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015bb0:	493d      	ldr	r1, [pc, #244]	; (8015ca8 <etharp_find_entry+0x2d4>)
 8015bb2:	4613      	mov	r3, r2
 8015bb4:	005b      	lsls	r3, r3, #1
 8015bb6:	4413      	add	r3, r2
 8015bb8:	00db      	lsls	r3, r3, #3
 8015bba:	440b      	add	r3, r1
 8015bbc:	681b      	ldr	r3, [r3, #0]
 8015bbe:	2b00      	cmp	r3, #0
 8015bc0:	d018      	beq.n	8015bf4 <etharp_find_entry+0x220>
 8015bc2:	4b3a      	ldr	r3, [pc, #232]	; (8015cac <etharp_find_entry+0x2d8>)
 8015bc4:	f240 126d 	movw	r2, #365	; 0x16d
 8015bc8:	493b      	ldr	r1, [pc, #236]	; (8015cb8 <etharp_find_entry+0x2e4>)
 8015bca:	483a      	ldr	r0, [pc, #232]	; (8015cb4 <etharp_find_entry+0x2e0>)
 8015bcc:	f002 ff66 	bl	8018a9c <iprintf>
 8015bd0:	e010      	b.n	8015bf4 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8015bd2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8015bd6:	2b09      	cmp	r3, #9
 8015bd8:	dc02      	bgt.n	8015be0 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8015bda:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8015bdc:	843b      	strh	r3, [r7, #32]
 8015bde:	e009      	b.n	8015bf4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8015be0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8015be4:	2b09      	cmp	r3, #9
 8015be6:	dc02      	bgt.n	8015bee <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8015be8:	8bfb      	ldrh	r3, [r7, #30]
 8015bea:	843b      	strh	r3, [r7, #32]
 8015bec:	e002      	b.n	8015bf4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8015bee:	f04f 33ff 	mov.w	r3, #4294967295
 8015bf2:	e054      	b.n	8015c9e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8015bf4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015bf8:	2b09      	cmp	r3, #9
 8015bfa:	dd06      	ble.n	8015c0a <etharp_find_entry+0x236>
 8015bfc:	4b2b      	ldr	r3, [pc, #172]	; (8015cac <etharp_find_entry+0x2d8>)
 8015bfe:	f240 127f 	movw	r2, #383	; 0x17f
 8015c02:	492e      	ldr	r1, [pc, #184]	; (8015cbc <etharp_find_entry+0x2e8>)
 8015c04:	482b      	ldr	r0, [pc, #172]	; (8015cb4 <etharp_find_entry+0x2e0>)
 8015c06:	f002 ff49 	bl	8018a9c <iprintf>
    etharp_free_entry(i);
 8015c0a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015c0e:	4618      	mov	r0, r3
 8015c10:	f7ff fe06 	bl	8015820 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8015c14:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015c18:	2b09      	cmp	r3, #9
 8015c1a:	dd06      	ble.n	8015c2a <etharp_find_entry+0x256>
 8015c1c:	4b23      	ldr	r3, [pc, #140]	; (8015cac <etharp_find_entry+0x2d8>)
 8015c1e:	f240 1283 	movw	r2, #387	; 0x183
 8015c22:	4926      	ldr	r1, [pc, #152]	; (8015cbc <etharp_find_entry+0x2e8>)
 8015c24:	4823      	ldr	r0, [pc, #140]	; (8015cb4 <etharp_find_entry+0x2e0>)
 8015c26:	f002 ff39 	bl	8018a9c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8015c2a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015c2e:	491e      	ldr	r1, [pc, #120]	; (8015ca8 <etharp_find_entry+0x2d4>)
 8015c30:	4613      	mov	r3, r2
 8015c32:	005b      	lsls	r3, r3, #1
 8015c34:	4413      	add	r3, r2
 8015c36:	00db      	lsls	r3, r3, #3
 8015c38:	440b      	add	r3, r1
 8015c3a:	3314      	adds	r3, #20
 8015c3c:	781b      	ldrb	r3, [r3, #0]
 8015c3e:	2b00      	cmp	r3, #0
 8015c40:	d006      	beq.n	8015c50 <etharp_find_entry+0x27c>
 8015c42:	4b1a      	ldr	r3, [pc, #104]	; (8015cac <etharp_find_entry+0x2d8>)
 8015c44:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8015c48:	491d      	ldr	r1, [pc, #116]	; (8015cc0 <etharp_find_entry+0x2ec>)
 8015c4a:	481a      	ldr	r0, [pc, #104]	; (8015cb4 <etharp_find_entry+0x2e0>)
 8015c4c:	f002 ff26 	bl	8018a9c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8015c50:	68fb      	ldr	r3, [r7, #12]
 8015c52:	2b00      	cmp	r3, #0
 8015c54:	d00b      	beq.n	8015c6e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8015c56:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015c5a:	68fb      	ldr	r3, [r7, #12]
 8015c5c:	6819      	ldr	r1, [r3, #0]
 8015c5e:	4812      	ldr	r0, [pc, #72]	; (8015ca8 <etharp_find_entry+0x2d4>)
 8015c60:	4613      	mov	r3, r2
 8015c62:	005b      	lsls	r3, r3, #1
 8015c64:	4413      	add	r3, r2
 8015c66:	00db      	lsls	r3, r3, #3
 8015c68:	4403      	add	r3, r0
 8015c6a:	3304      	adds	r3, #4
 8015c6c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8015c6e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015c72:	490d      	ldr	r1, [pc, #52]	; (8015ca8 <etharp_find_entry+0x2d4>)
 8015c74:	4613      	mov	r3, r2
 8015c76:	005b      	lsls	r3, r3, #1
 8015c78:	4413      	add	r3, r2
 8015c7a:	00db      	lsls	r3, r3, #3
 8015c7c:	440b      	add	r3, r1
 8015c7e:	3312      	adds	r3, #18
 8015c80:	2200      	movs	r2, #0
 8015c82:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8015c84:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015c88:	4907      	ldr	r1, [pc, #28]	; (8015ca8 <etharp_find_entry+0x2d4>)
 8015c8a:	4613      	mov	r3, r2
 8015c8c:	005b      	lsls	r3, r3, #1
 8015c8e:	4413      	add	r3, r2
 8015c90:	00db      	lsls	r3, r3, #3
 8015c92:	440b      	add	r3, r1
 8015c94:	3308      	adds	r3, #8
 8015c96:	687a      	ldr	r2, [r7, #4]
 8015c98:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8015c9a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8015c9e:	4618      	mov	r0, r3
 8015ca0:	3728      	adds	r7, #40	; 0x28
 8015ca2:	46bd      	mov	sp, r7
 8015ca4:	bd80      	pop	{r7, pc}
 8015ca6:	bf00      	nop
 8015ca8:	2000c920 	.word	0x2000c920
 8015cac:	0801c340 	.word	0x0801c340
 8015cb0:	0801c378 	.word	0x0801c378
 8015cb4:	0801c3b8 	.word	0x0801c3b8
 8015cb8:	0801c3e0 	.word	0x0801c3e0
 8015cbc:	0801c3f8 	.word	0x0801c3f8
 8015cc0:	0801c40c 	.word	0x0801c40c

08015cc4 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8015cc4:	b580      	push	{r7, lr}
 8015cc6:	b088      	sub	sp, #32
 8015cc8:	af02      	add	r7, sp, #8
 8015cca:	60f8      	str	r0, [r7, #12]
 8015ccc:	60b9      	str	r1, [r7, #8]
 8015cce:	607a      	str	r2, [r7, #4]
 8015cd0:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8015cd2:	68fb      	ldr	r3, [r7, #12]
 8015cd4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015cd8:	2b06      	cmp	r3, #6
 8015cda:	d006      	beq.n	8015cea <etharp_update_arp_entry+0x26>
 8015cdc:	4b48      	ldr	r3, [pc, #288]	; (8015e00 <etharp_update_arp_entry+0x13c>)
 8015cde:	f240 12a9 	movw	r2, #425	; 0x1a9
 8015ce2:	4948      	ldr	r1, [pc, #288]	; (8015e04 <etharp_update_arp_entry+0x140>)
 8015ce4:	4848      	ldr	r0, [pc, #288]	; (8015e08 <etharp_update_arp_entry+0x144>)
 8015ce6:	f002 fed9 	bl	8018a9c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8015cea:	68bb      	ldr	r3, [r7, #8]
 8015cec:	2b00      	cmp	r3, #0
 8015cee:	d012      	beq.n	8015d16 <etharp_update_arp_entry+0x52>
 8015cf0:	68bb      	ldr	r3, [r7, #8]
 8015cf2:	681b      	ldr	r3, [r3, #0]
 8015cf4:	2b00      	cmp	r3, #0
 8015cf6:	d00e      	beq.n	8015d16 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8015cf8:	68bb      	ldr	r3, [r7, #8]
 8015cfa:	681b      	ldr	r3, [r3, #0]
 8015cfc:	68f9      	ldr	r1, [r7, #12]
 8015cfe:	4618      	mov	r0, r3
 8015d00:	f001 f946 	bl	8016f90 <ip4_addr_isbroadcast_u32>
 8015d04:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8015d06:	2b00      	cmp	r3, #0
 8015d08:	d105      	bne.n	8015d16 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8015d0a:	68bb      	ldr	r3, [r7, #8]
 8015d0c:	681b      	ldr	r3, [r3, #0]
 8015d0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8015d12:	2be0      	cmp	r3, #224	; 0xe0
 8015d14:	d102      	bne.n	8015d1c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8015d16:	f06f 030f 	mvn.w	r3, #15
 8015d1a:	e06c      	b.n	8015df6 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8015d1c:	78fb      	ldrb	r3, [r7, #3]
 8015d1e:	68fa      	ldr	r2, [r7, #12]
 8015d20:	4619      	mov	r1, r3
 8015d22:	68b8      	ldr	r0, [r7, #8]
 8015d24:	f7ff fe56 	bl	80159d4 <etharp_find_entry>
 8015d28:	4603      	mov	r3, r0
 8015d2a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8015d2c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8015d30:	2b00      	cmp	r3, #0
 8015d32:	da02      	bge.n	8015d3a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8015d34:	8afb      	ldrh	r3, [r7, #22]
 8015d36:	b25b      	sxtb	r3, r3
 8015d38:	e05d      	b.n	8015df6 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8015d3a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015d3e:	4933      	ldr	r1, [pc, #204]	; (8015e0c <etharp_update_arp_entry+0x148>)
 8015d40:	4613      	mov	r3, r2
 8015d42:	005b      	lsls	r3, r3, #1
 8015d44:	4413      	add	r3, r2
 8015d46:	00db      	lsls	r3, r3, #3
 8015d48:	440b      	add	r3, r1
 8015d4a:	3314      	adds	r3, #20
 8015d4c:	2202      	movs	r2, #2
 8015d4e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8015d50:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015d54:	492d      	ldr	r1, [pc, #180]	; (8015e0c <etharp_update_arp_entry+0x148>)
 8015d56:	4613      	mov	r3, r2
 8015d58:	005b      	lsls	r3, r3, #1
 8015d5a:	4413      	add	r3, r2
 8015d5c:	00db      	lsls	r3, r3, #3
 8015d5e:	440b      	add	r3, r1
 8015d60:	3308      	adds	r3, #8
 8015d62:	68fa      	ldr	r2, [r7, #12]
 8015d64:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8015d66:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015d6a:	4613      	mov	r3, r2
 8015d6c:	005b      	lsls	r3, r3, #1
 8015d6e:	4413      	add	r3, r2
 8015d70:	00db      	lsls	r3, r3, #3
 8015d72:	3308      	adds	r3, #8
 8015d74:	4a25      	ldr	r2, [pc, #148]	; (8015e0c <etharp_update_arp_entry+0x148>)
 8015d76:	4413      	add	r3, r2
 8015d78:	3304      	adds	r3, #4
 8015d7a:	2206      	movs	r2, #6
 8015d7c:	6879      	ldr	r1, [r7, #4]
 8015d7e:	4618      	mov	r0, r3
 8015d80:	f002 fe76 	bl	8018a70 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8015d84:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015d88:	4920      	ldr	r1, [pc, #128]	; (8015e0c <etharp_update_arp_entry+0x148>)
 8015d8a:	4613      	mov	r3, r2
 8015d8c:	005b      	lsls	r3, r3, #1
 8015d8e:	4413      	add	r3, r2
 8015d90:	00db      	lsls	r3, r3, #3
 8015d92:	440b      	add	r3, r1
 8015d94:	3312      	adds	r3, #18
 8015d96:	2200      	movs	r2, #0
 8015d98:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8015d9a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015d9e:	491b      	ldr	r1, [pc, #108]	; (8015e0c <etharp_update_arp_entry+0x148>)
 8015da0:	4613      	mov	r3, r2
 8015da2:	005b      	lsls	r3, r3, #1
 8015da4:	4413      	add	r3, r2
 8015da6:	00db      	lsls	r3, r3, #3
 8015da8:	440b      	add	r3, r1
 8015daa:	681b      	ldr	r3, [r3, #0]
 8015dac:	2b00      	cmp	r3, #0
 8015dae:	d021      	beq.n	8015df4 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8015db0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015db4:	4915      	ldr	r1, [pc, #84]	; (8015e0c <etharp_update_arp_entry+0x148>)
 8015db6:	4613      	mov	r3, r2
 8015db8:	005b      	lsls	r3, r3, #1
 8015dba:	4413      	add	r3, r2
 8015dbc:	00db      	lsls	r3, r3, #3
 8015dbe:	440b      	add	r3, r1
 8015dc0:	681b      	ldr	r3, [r3, #0]
 8015dc2:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8015dc4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015dc8:	4910      	ldr	r1, [pc, #64]	; (8015e0c <etharp_update_arp_entry+0x148>)
 8015dca:	4613      	mov	r3, r2
 8015dcc:	005b      	lsls	r3, r3, #1
 8015dce:	4413      	add	r3, r2
 8015dd0:	00db      	lsls	r3, r3, #3
 8015dd2:	440b      	add	r3, r1
 8015dd4:	2200      	movs	r2, #0
 8015dd6:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8015dd8:	68fb      	ldr	r3, [r7, #12]
 8015dda:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8015dde:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015de2:	9300      	str	r3, [sp, #0]
 8015de4:	687b      	ldr	r3, [r7, #4]
 8015de6:	6939      	ldr	r1, [r7, #16]
 8015de8:	68f8      	ldr	r0, [r7, #12]
 8015dea:	f001 ffdf 	bl	8017dac <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8015dee:	6938      	ldr	r0, [r7, #16]
 8015df0:	f7f7 fc84 	bl	800d6fc <pbuf_free>
  }
  return ERR_OK;
 8015df4:	2300      	movs	r3, #0
}
 8015df6:	4618      	mov	r0, r3
 8015df8:	3718      	adds	r7, #24
 8015dfa:	46bd      	mov	sp, r7
 8015dfc:	bd80      	pop	{r7, pc}
 8015dfe:	bf00      	nop
 8015e00:	0801c340 	.word	0x0801c340
 8015e04:	0801c438 	.word	0x0801c438
 8015e08:	0801c3b8 	.word	0x0801c3b8
 8015e0c:	2000c920 	.word	0x2000c920

08015e10 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8015e10:	b580      	push	{r7, lr}
 8015e12:	b084      	sub	sp, #16
 8015e14:	af00      	add	r7, sp, #0
 8015e16:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015e18:	2300      	movs	r3, #0
 8015e1a:	60fb      	str	r3, [r7, #12]
 8015e1c:	e01e      	b.n	8015e5c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8015e1e:	4913      	ldr	r1, [pc, #76]	; (8015e6c <etharp_cleanup_netif+0x5c>)
 8015e20:	68fa      	ldr	r2, [r7, #12]
 8015e22:	4613      	mov	r3, r2
 8015e24:	005b      	lsls	r3, r3, #1
 8015e26:	4413      	add	r3, r2
 8015e28:	00db      	lsls	r3, r3, #3
 8015e2a:	440b      	add	r3, r1
 8015e2c:	3314      	adds	r3, #20
 8015e2e:	781b      	ldrb	r3, [r3, #0]
 8015e30:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8015e32:	7afb      	ldrb	r3, [r7, #11]
 8015e34:	2b00      	cmp	r3, #0
 8015e36:	d00e      	beq.n	8015e56 <etharp_cleanup_netif+0x46>
 8015e38:	490c      	ldr	r1, [pc, #48]	; (8015e6c <etharp_cleanup_netif+0x5c>)
 8015e3a:	68fa      	ldr	r2, [r7, #12]
 8015e3c:	4613      	mov	r3, r2
 8015e3e:	005b      	lsls	r3, r3, #1
 8015e40:	4413      	add	r3, r2
 8015e42:	00db      	lsls	r3, r3, #3
 8015e44:	440b      	add	r3, r1
 8015e46:	3308      	adds	r3, #8
 8015e48:	681b      	ldr	r3, [r3, #0]
 8015e4a:	687a      	ldr	r2, [r7, #4]
 8015e4c:	429a      	cmp	r2, r3
 8015e4e:	d102      	bne.n	8015e56 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8015e50:	68f8      	ldr	r0, [r7, #12]
 8015e52:	f7ff fce5 	bl	8015820 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015e56:	68fb      	ldr	r3, [r7, #12]
 8015e58:	3301      	adds	r3, #1
 8015e5a:	60fb      	str	r3, [r7, #12]
 8015e5c:	68fb      	ldr	r3, [r7, #12]
 8015e5e:	2b09      	cmp	r3, #9
 8015e60:	dddd      	ble.n	8015e1e <etharp_cleanup_netif+0xe>
    }
  }
}
 8015e62:	bf00      	nop
 8015e64:	bf00      	nop
 8015e66:	3710      	adds	r7, #16
 8015e68:	46bd      	mov	sp, r7
 8015e6a:	bd80      	pop	{r7, pc}
 8015e6c:	2000c920 	.word	0x2000c920

08015e70 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8015e70:	b5b0      	push	{r4, r5, r7, lr}
 8015e72:	b08a      	sub	sp, #40	; 0x28
 8015e74:	af04      	add	r7, sp, #16
 8015e76:	6078      	str	r0, [r7, #4]
 8015e78:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8015e7a:	683b      	ldr	r3, [r7, #0]
 8015e7c:	2b00      	cmp	r3, #0
 8015e7e:	d107      	bne.n	8015e90 <etharp_input+0x20>
 8015e80:	4b3f      	ldr	r3, [pc, #252]	; (8015f80 <etharp_input+0x110>)
 8015e82:	f240 228a 	movw	r2, #650	; 0x28a
 8015e86:	493f      	ldr	r1, [pc, #252]	; (8015f84 <etharp_input+0x114>)
 8015e88:	483f      	ldr	r0, [pc, #252]	; (8015f88 <etharp_input+0x118>)
 8015e8a:	f002 fe07 	bl	8018a9c <iprintf>
 8015e8e:	e074      	b.n	8015f7a <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8015e90:	687b      	ldr	r3, [r7, #4]
 8015e92:	685b      	ldr	r3, [r3, #4]
 8015e94:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8015e96:	693b      	ldr	r3, [r7, #16]
 8015e98:	881b      	ldrh	r3, [r3, #0]
 8015e9a:	b29b      	uxth	r3, r3
 8015e9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015ea0:	d10c      	bne.n	8015ebc <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8015ea2:	693b      	ldr	r3, [r7, #16]
 8015ea4:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8015ea6:	2b06      	cmp	r3, #6
 8015ea8:	d108      	bne.n	8015ebc <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8015eaa:	693b      	ldr	r3, [r7, #16]
 8015eac:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8015eae:	2b04      	cmp	r3, #4
 8015eb0:	d104      	bne.n	8015ebc <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8015eb2:	693b      	ldr	r3, [r7, #16]
 8015eb4:	885b      	ldrh	r3, [r3, #2]
 8015eb6:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8015eb8:	2b08      	cmp	r3, #8
 8015eba:	d003      	beq.n	8015ec4 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8015ebc:	6878      	ldr	r0, [r7, #4]
 8015ebe:	f7f7 fc1d 	bl	800d6fc <pbuf_free>
    return;
 8015ec2:	e05a      	b.n	8015f7a <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8015ec4:	693b      	ldr	r3, [r7, #16]
 8015ec6:	330e      	adds	r3, #14
 8015ec8:	681b      	ldr	r3, [r3, #0]
 8015eca:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8015ecc:	693b      	ldr	r3, [r7, #16]
 8015ece:	3318      	adds	r3, #24
 8015ed0:	681b      	ldr	r3, [r3, #0]
 8015ed2:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8015ed4:	683b      	ldr	r3, [r7, #0]
 8015ed6:	3304      	adds	r3, #4
 8015ed8:	681b      	ldr	r3, [r3, #0]
 8015eda:	2b00      	cmp	r3, #0
 8015edc:	d102      	bne.n	8015ee4 <etharp_input+0x74>
    for_us = 0;
 8015ede:	2300      	movs	r3, #0
 8015ee0:	75fb      	strb	r3, [r7, #23]
 8015ee2:	e009      	b.n	8015ef8 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8015ee4:	68ba      	ldr	r2, [r7, #8]
 8015ee6:	683b      	ldr	r3, [r7, #0]
 8015ee8:	3304      	adds	r3, #4
 8015eea:	681b      	ldr	r3, [r3, #0]
 8015eec:	429a      	cmp	r2, r3
 8015eee:	bf0c      	ite	eq
 8015ef0:	2301      	moveq	r3, #1
 8015ef2:	2300      	movne	r3, #0
 8015ef4:	b2db      	uxtb	r3, r3
 8015ef6:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8015ef8:	693b      	ldr	r3, [r7, #16]
 8015efa:	f103 0208 	add.w	r2, r3, #8
 8015efe:	7dfb      	ldrb	r3, [r7, #23]
 8015f00:	2b00      	cmp	r3, #0
 8015f02:	d001      	beq.n	8015f08 <etharp_input+0x98>
 8015f04:	2301      	movs	r3, #1
 8015f06:	e000      	b.n	8015f0a <etharp_input+0x9a>
 8015f08:	2302      	movs	r3, #2
 8015f0a:	f107 010c 	add.w	r1, r7, #12
 8015f0e:	6838      	ldr	r0, [r7, #0]
 8015f10:	f7ff fed8 	bl	8015cc4 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8015f14:	693b      	ldr	r3, [r7, #16]
 8015f16:	88db      	ldrh	r3, [r3, #6]
 8015f18:	b29b      	uxth	r3, r3
 8015f1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015f1e:	d003      	beq.n	8015f28 <etharp_input+0xb8>
 8015f20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015f24:	d01e      	beq.n	8015f64 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8015f26:	e025      	b.n	8015f74 <etharp_input+0x104>
      if (for_us) {
 8015f28:	7dfb      	ldrb	r3, [r7, #23]
 8015f2a:	2b00      	cmp	r3, #0
 8015f2c:	d021      	beq.n	8015f72 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8015f2e:	683b      	ldr	r3, [r7, #0]
 8015f30:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8015f34:	693b      	ldr	r3, [r7, #16]
 8015f36:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8015f3a:	683b      	ldr	r3, [r7, #0]
 8015f3c:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 8015f40:	683b      	ldr	r3, [r7, #0]
 8015f42:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8015f44:	693a      	ldr	r2, [r7, #16]
 8015f46:	3208      	adds	r2, #8
        etharp_raw(netif,
 8015f48:	2102      	movs	r1, #2
 8015f4a:	9103      	str	r1, [sp, #12]
 8015f4c:	f107 010c 	add.w	r1, r7, #12
 8015f50:	9102      	str	r1, [sp, #8]
 8015f52:	9201      	str	r2, [sp, #4]
 8015f54:	9300      	str	r3, [sp, #0]
 8015f56:	462b      	mov	r3, r5
 8015f58:	4622      	mov	r2, r4
 8015f5a:	4601      	mov	r1, r0
 8015f5c:	6838      	ldr	r0, [r7, #0]
 8015f5e:	f000 faef 	bl	8016540 <etharp_raw>
      break;
 8015f62:	e006      	b.n	8015f72 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8015f64:	f107 030c 	add.w	r3, r7, #12
 8015f68:	4619      	mov	r1, r3
 8015f6a:	6838      	ldr	r0, [r7, #0]
 8015f6c:	f7fe f9fc 	bl	8014368 <dhcp_arp_reply>
      break;
 8015f70:	e000      	b.n	8015f74 <etharp_input+0x104>
      break;
 8015f72:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8015f74:	6878      	ldr	r0, [r7, #4]
 8015f76:	f7f7 fbc1 	bl	800d6fc <pbuf_free>
}
 8015f7a:	3718      	adds	r7, #24
 8015f7c:	46bd      	mov	sp, r7
 8015f7e:	bdb0      	pop	{r4, r5, r7, pc}
 8015f80:	0801c340 	.word	0x0801c340
 8015f84:	0801c490 	.word	0x0801c490
 8015f88:	0801c3b8 	.word	0x0801c3b8

08015f8c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8015f8c:	b580      	push	{r7, lr}
 8015f8e:	b086      	sub	sp, #24
 8015f90:	af02      	add	r7, sp, #8
 8015f92:	60f8      	str	r0, [r7, #12]
 8015f94:	60b9      	str	r1, [r7, #8]
 8015f96:	4613      	mov	r3, r2
 8015f98:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8015f9a:	79fa      	ldrb	r2, [r7, #7]
 8015f9c:	4944      	ldr	r1, [pc, #272]	; (80160b0 <etharp_output_to_arp_index+0x124>)
 8015f9e:	4613      	mov	r3, r2
 8015fa0:	005b      	lsls	r3, r3, #1
 8015fa2:	4413      	add	r3, r2
 8015fa4:	00db      	lsls	r3, r3, #3
 8015fa6:	440b      	add	r3, r1
 8015fa8:	3314      	adds	r3, #20
 8015faa:	781b      	ldrb	r3, [r3, #0]
 8015fac:	2b01      	cmp	r3, #1
 8015fae:	d806      	bhi.n	8015fbe <etharp_output_to_arp_index+0x32>
 8015fb0:	4b40      	ldr	r3, [pc, #256]	; (80160b4 <etharp_output_to_arp_index+0x128>)
 8015fb2:	f240 22ee 	movw	r2, #750	; 0x2ee
 8015fb6:	4940      	ldr	r1, [pc, #256]	; (80160b8 <etharp_output_to_arp_index+0x12c>)
 8015fb8:	4840      	ldr	r0, [pc, #256]	; (80160bc <etharp_output_to_arp_index+0x130>)
 8015fba:	f002 fd6f 	bl	8018a9c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8015fbe:	79fa      	ldrb	r2, [r7, #7]
 8015fc0:	493b      	ldr	r1, [pc, #236]	; (80160b0 <etharp_output_to_arp_index+0x124>)
 8015fc2:	4613      	mov	r3, r2
 8015fc4:	005b      	lsls	r3, r3, #1
 8015fc6:	4413      	add	r3, r2
 8015fc8:	00db      	lsls	r3, r3, #3
 8015fca:	440b      	add	r3, r1
 8015fcc:	3314      	adds	r3, #20
 8015fce:	781b      	ldrb	r3, [r3, #0]
 8015fd0:	2b02      	cmp	r3, #2
 8015fd2:	d153      	bne.n	801607c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8015fd4:	79fa      	ldrb	r2, [r7, #7]
 8015fd6:	4936      	ldr	r1, [pc, #216]	; (80160b0 <etharp_output_to_arp_index+0x124>)
 8015fd8:	4613      	mov	r3, r2
 8015fda:	005b      	lsls	r3, r3, #1
 8015fdc:	4413      	add	r3, r2
 8015fde:	00db      	lsls	r3, r3, #3
 8015fe0:	440b      	add	r3, r1
 8015fe2:	3312      	adds	r3, #18
 8015fe4:	881b      	ldrh	r3, [r3, #0]
 8015fe6:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8015fea:	d919      	bls.n	8016020 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8015fec:	79fa      	ldrb	r2, [r7, #7]
 8015fee:	4613      	mov	r3, r2
 8015ff0:	005b      	lsls	r3, r3, #1
 8015ff2:	4413      	add	r3, r2
 8015ff4:	00db      	lsls	r3, r3, #3
 8015ff6:	4a2e      	ldr	r2, [pc, #184]	; (80160b0 <etharp_output_to_arp_index+0x124>)
 8015ff8:	4413      	add	r3, r2
 8015ffa:	3304      	adds	r3, #4
 8015ffc:	4619      	mov	r1, r3
 8015ffe:	68f8      	ldr	r0, [r7, #12]
 8016000:	f000 fb4c 	bl	801669c <etharp_request>
 8016004:	4603      	mov	r3, r0
 8016006:	2b00      	cmp	r3, #0
 8016008:	d138      	bne.n	801607c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801600a:	79fa      	ldrb	r2, [r7, #7]
 801600c:	4928      	ldr	r1, [pc, #160]	; (80160b0 <etharp_output_to_arp_index+0x124>)
 801600e:	4613      	mov	r3, r2
 8016010:	005b      	lsls	r3, r3, #1
 8016012:	4413      	add	r3, r2
 8016014:	00db      	lsls	r3, r3, #3
 8016016:	440b      	add	r3, r1
 8016018:	3314      	adds	r3, #20
 801601a:	2203      	movs	r2, #3
 801601c:	701a      	strb	r2, [r3, #0]
 801601e:	e02d      	b.n	801607c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8016020:	79fa      	ldrb	r2, [r7, #7]
 8016022:	4923      	ldr	r1, [pc, #140]	; (80160b0 <etharp_output_to_arp_index+0x124>)
 8016024:	4613      	mov	r3, r2
 8016026:	005b      	lsls	r3, r3, #1
 8016028:	4413      	add	r3, r2
 801602a:	00db      	lsls	r3, r3, #3
 801602c:	440b      	add	r3, r1
 801602e:	3312      	adds	r3, #18
 8016030:	881b      	ldrh	r3, [r3, #0]
 8016032:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8016036:	d321      	bcc.n	801607c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8016038:	79fa      	ldrb	r2, [r7, #7]
 801603a:	4613      	mov	r3, r2
 801603c:	005b      	lsls	r3, r3, #1
 801603e:	4413      	add	r3, r2
 8016040:	00db      	lsls	r3, r3, #3
 8016042:	4a1b      	ldr	r2, [pc, #108]	; (80160b0 <etharp_output_to_arp_index+0x124>)
 8016044:	4413      	add	r3, r2
 8016046:	1d19      	adds	r1, r3, #4
 8016048:	79fa      	ldrb	r2, [r7, #7]
 801604a:	4613      	mov	r3, r2
 801604c:	005b      	lsls	r3, r3, #1
 801604e:	4413      	add	r3, r2
 8016050:	00db      	lsls	r3, r3, #3
 8016052:	3308      	adds	r3, #8
 8016054:	4a16      	ldr	r2, [pc, #88]	; (80160b0 <etharp_output_to_arp_index+0x124>)
 8016056:	4413      	add	r3, r2
 8016058:	3304      	adds	r3, #4
 801605a:	461a      	mov	r2, r3
 801605c:	68f8      	ldr	r0, [r7, #12]
 801605e:	f000 fafb 	bl	8016658 <etharp_request_dst>
 8016062:	4603      	mov	r3, r0
 8016064:	2b00      	cmp	r3, #0
 8016066:	d109      	bne.n	801607c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8016068:	79fa      	ldrb	r2, [r7, #7]
 801606a:	4911      	ldr	r1, [pc, #68]	; (80160b0 <etharp_output_to_arp_index+0x124>)
 801606c:	4613      	mov	r3, r2
 801606e:	005b      	lsls	r3, r3, #1
 8016070:	4413      	add	r3, r2
 8016072:	00db      	lsls	r3, r3, #3
 8016074:	440b      	add	r3, r1
 8016076:	3314      	adds	r3, #20
 8016078:	2203      	movs	r2, #3
 801607a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801607c:	68fb      	ldr	r3, [r7, #12]
 801607e:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 8016082:	79fa      	ldrb	r2, [r7, #7]
 8016084:	4613      	mov	r3, r2
 8016086:	005b      	lsls	r3, r3, #1
 8016088:	4413      	add	r3, r2
 801608a:	00db      	lsls	r3, r3, #3
 801608c:	3308      	adds	r3, #8
 801608e:	4a08      	ldr	r2, [pc, #32]	; (80160b0 <etharp_output_to_arp_index+0x124>)
 8016090:	4413      	add	r3, r2
 8016092:	3304      	adds	r3, #4
 8016094:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8016098:	9200      	str	r2, [sp, #0]
 801609a:	460a      	mov	r2, r1
 801609c:	68b9      	ldr	r1, [r7, #8]
 801609e:	68f8      	ldr	r0, [r7, #12]
 80160a0:	f001 fe84 	bl	8017dac <ethernet_output>
 80160a4:	4603      	mov	r3, r0
}
 80160a6:	4618      	mov	r0, r3
 80160a8:	3710      	adds	r7, #16
 80160aa:	46bd      	mov	sp, r7
 80160ac:	bd80      	pop	{r7, pc}
 80160ae:	bf00      	nop
 80160b0:	2000c920 	.word	0x2000c920
 80160b4:	0801c340 	.word	0x0801c340
 80160b8:	0801c4b0 	.word	0x0801c4b0
 80160bc:	0801c3b8 	.word	0x0801c3b8

080160c0 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80160c0:	b580      	push	{r7, lr}
 80160c2:	b08a      	sub	sp, #40	; 0x28
 80160c4:	af02      	add	r7, sp, #8
 80160c6:	60f8      	str	r0, [r7, #12]
 80160c8:	60b9      	str	r1, [r7, #8]
 80160ca:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80160cc:	687b      	ldr	r3, [r7, #4]
 80160ce:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80160d0:	68fb      	ldr	r3, [r7, #12]
 80160d2:	2b00      	cmp	r3, #0
 80160d4:	d106      	bne.n	80160e4 <etharp_output+0x24>
 80160d6:	4b73      	ldr	r3, [pc, #460]	; (80162a4 <etharp_output+0x1e4>)
 80160d8:	f240 321e 	movw	r2, #798	; 0x31e
 80160dc:	4972      	ldr	r1, [pc, #456]	; (80162a8 <etharp_output+0x1e8>)
 80160de:	4873      	ldr	r0, [pc, #460]	; (80162ac <etharp_output+0x1ec>)
 80160e0:	f002 fcdc 	bl	8018a9c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80160e4:	68bb      	ldr	r3, [r7, #8]
 80160e6:	2b00      	cmp	r3, #0
 80160e8:	d106      	bne.n	80160f8 <etharp_output+0x38>
 80160ea:	4b6e      	ldr	r3, [pc, #440]	; (80162a4 <etharp_output+0x1e4>)
 80160ec:	f240 321f 	movw	r2, #799	; 0x31f
 80160f0:	496f      	ldr	r1, [pc, #444]	; (80162b0 <etharp_output+0x1f0>)
 80160f2:	486e      	ldr	r0, [pc, #440]	; (80162ac <etharp_output+0x1ec>)
 80160f4:	f002 fcd2 	bl	8018a9c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80160f8:	687b      	ldr	r3, [r7, #4]
 80160fa:	2b00      	cmp	r3, #0
 80160fc:	d106      	bne.n	801610c <etharp_output+0x4c>
 80160fe:	4b69      	ldr	r3, [pc, #420]	; (80162a4 <etharp_output+0x1e4>)
 8016100:	f44f 7248 	mov.w	r2, #800	; 0x320
 8016104:	496b      	ldr	r1, [pc, #428]	; (80162b4 <etharp_output+0x1f4>)
 8016106:	4869      	ldr	r0, [pc, #420]	; (80162ac <etharp_output+0x1ec>)
 8016108:	f002 fcc8 	bl	8018a9c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801610c:	687b      	ldr	r3, [r7, #4]
 801610e:	681b      	ldr	r3, [r3, #0]
 8016110:	68f9      	ldr	r1, [r7, #12]
 8016112:	4618      	mov	r0, r3
 8016114:	f000 ff3c 	bl	8016f90 <ip4_addr_isbroadcast_u32>
 8016118:	4603      	mov	r3, r0
 801611a:	2b00      	cmp	r3, #0
 801611c:	d002      	beq.n	8016124 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801611e:	4b66      	ldr	r3, [pc, #408]	; (80162b8 <etharp_output+0x1f8>)
 8016120:	61fb      	str	r3, [r7, #28]
 8016122:	e0af      	b.n	8016284 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8016124:	687b      	ldr	r3, [r7, #4]
 8016126:	681b      	ldr	r3, [r3, #0]
 8016128:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801612c:	2be0      	cmp	r3, #224	; 0xe0
 801612e:	d118      	bne.n	8016162 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8016130:	2301      	movs	r3, #1
 8016132:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8016134:	2300      	movs	r3, #0
 8016136:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8016138:	235e      	movs	r3, #94	; 0x5e
 801613a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801613c:	687b      	ldr	r3, [r7, #4]
 801613e:	3301      	adds	r3, #1
 8016140:	781b      	ldrb	r3, [r3, #0]
 8016142:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016146:	b2db      	uxtb	r3, r3
 8016148:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801614a:	687b      	ldr	r3, [r7, #4]
 801614c:	3302      	adds	r3, #2
 801614e:	781b      	ldrb	r3, [r3, #0]
 8016150:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8016152:	687b      	ldr	r3, [r7, #4]
 8016154:	3303      	adds	r3, #3
 8016156:	781b      	ldrb	r3, [r3, #0]
 8016158:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801615a:	f107 0310 	add.w	r3, r7, #16
 801615e:	61fb      	str	r3, [r7, #28]
 8016160:	e090      	b.n	8016284 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8016162:	687b      	ldr	r3, [r7, #4]
 8016164:	681a      	ldr	r2, [r3, #0]
 8016166:	68fb      	ldr	r3, [r7, #12]
 8016168:	3304      	adds	r3, #4
 801616a:	681b      	ldr	r3, [r3, #0]
 801616c:	405a      	eors	r2, r3
 801616e:	68fb      	ldr	r3, [r7, #12]
 8016170:	3308      	adds	r3, #8
 8016172:	681b      	ldr	r3, [r3, #0]
 8016174:	4013      	ands	r3, r2
 8016176:	2b00      	cmp	r3, #0
 8016178:	d012      	beq.n	80161a0 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801617a:	687b      	ldr	r3, [r7, #4]
 801617c:	681b      	ldr	r3, [r3, #0]
 801617e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8016180:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8016184:	4293      	cmp	r3, r2
 8016186:	d00b      	beq.n	80161a0 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8016188:	68fb      	ldr	r3, [r7, #12]
 801618a:	330c      	adds	r3, #12
 801618c:	681b      	ldr	r3, [r3, #0]
 801618e:	2b00      	cmp	r3, #0
 8016190:	d003      	beq.n	801619a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8016192:	68fb      	ldr	r3, [r7, #12]
 8016194:	330c      	adds	r3, #12
 8016196:	61bb      	str	r3, [r7, #24]
 8016198:	e002      	b.n	80161a0 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801619a:	f06f 0303 	mvn.w	r3, #3
 801619e:	e07d      	b.n	801629c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80161a0:	4b46      	ldr	r3, [pc, #280]	; (80162bc <etharp_output+0x1fc>)
 80161a2:	781b      	ldrb	r3, [r3, #0]
 80161a4:	4619      	mov	r1, r3
 80161a6:	4a46      	ldr	r2, [pc, #280]	; (80162c0 <etharp_output+0x200>)
 80161a8:	460b      	mov	r3, r1
 80161aa:	005b      	lsls	r3, r3, #1
 80161ac:	440b      	add	r3, r1
 80161ae:	00db      	lsls	r3, r3, #3
 80161b0:	4413      	add	r3, r2
 80161b2:	3314      	adds	r3, #20
 80161b4:	781b      	ldrb	r3, [r3, #0]
 80161b6:	2b01      	cmp	r3, #1
 80161b8:	d925      	bls.n	8016206 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80161ba:	4b40      	ldr	r3, [pc, #256]	; (80162bc <etharp_output+0x1fc>)
 80161bc:	781b      	ldrb	r3, [r3, #0]
 80161be:	4619      	mov	r1, r3
 80161c0:	4a3f      	ldr	r2, [pc, #252]	; (80162c0 <etharp_output+0x200>)
 80161c2:	460b      	mov	r3, r1
 80161c4:	005b      	lsls	r3, r3, #1
 80161c6:	440b      	add	r3, r1
 80161c8:	00db      	lsls	r3, r3, #3
 80161ca:	4413      	add	r3, r2
 80161cc:	3308      	adds	r3, #8
 80161ce:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80161d0:	68fa      	ldr	r2, [r7, #12]
 80161d2:	429a      	cmp	r2, r3
 80161d4:	d117      	bne.n	8016206 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80161d6:	69bb      	ldr	r3, [r7, #24]
 80161d8:	681a      	ldr	r2, [r3, #0]
 80161da:	4b38      	ldr	r3, [pc, #224]	; (80162bc <etharp_output+0x1fc>)
 80161dc:	781b      	ldrb	r3, [r3, #0]
 80161de:	4618      	mov	r0, r3
 80161e0:	4937      	ldr	r1, [pc, #220]	; (80162c0 <etharp_output+0x200>)
 80161e2:	4603      	mov	r3, r0
 80161e4:	005b      	lsls	r3, r3, #1
 80161e6:	4403      	add	r3, r0
 80161e8:	00db      	lsls	r3, r3, #3
 80161ea:	440b      	add	r3, r1
 80161ec:	3304      	adds	r3, #4
 80161ee:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80161f0:	429a      	cmp	r2, r3
 80161f2:	d108      	bne.n	8016206 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80161f4:	4b31      	ldr	r3, [pc, #196]	; (80162bc <etharp_output+0x1fc>)
 80161f6:	781b      	ldrb	r3, [r3, #0]
 80161f8:	461a      	mov	r2, r3
 80161fa:	68b9      	ldr	r1, [r7, #8]
 80161fc:	68f8      	ldr	r0, [r7, #12]
 80161fe:	f7ff fec5 	bl	8015f8c <etharp_output_to_arp_index>
 8016202:	4603      	mov	r3, r0
 8016204:	e04a      	b.n	801629c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8016206:	2300      	movs	r3, #0
 8016208:	75fb      	strb	r3, [r7, #23]
 801620a:	e031      	b.n	8016270 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801620c:	7dfa      	ldrb	r2, [r7, #23]
 801620e:	492c      	ldr	r1, [pc, #176]	; (80162c0 <etharp_output+0x200>)
 8016210:	4613      	mov	r3, r2
 8016212:	005b      	lsls	r3, r3, #1
 8016214:	4413      	add	r3, r2
 8016216:	00db      	lsls	r3, r3, #3
 8016218:	440b      	add	r3, r1
 801621a:	3314      	adds	r3, #20
 801621c:	781b      	ldrb	r3, [r3, #0]
 801621e:	2b01      	cmp	r3, #1
 8016220:	d923      	bls.n	801626a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8016222:	7dfa      	ldrb	r2, [r7, #23]
 8016224:	4926      	ldr	r1, [pc, #152]	; (80162c0 <etharp_output+0x200>)
 8016226:	4613      	mov	r3, r2
 8016228:	005b      	lsls	r3, r3, #1
 801622a:	4413      	add	r3, r2
 801622c:	00db      	lsls	r3, r3, #3
 801622e:	440b      	add	r3, r1
 8016230:	3308      	adds	r3, #8
 8016232:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8016234:	68fa      	ldr	r2, [r7, #12]
 8016236:	429a      	cmp	r2, r3
 8016238:	d117      	bne.n	801626a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801623a:	69bb      	ldr	r3, [r7, #24]
 801623c:	6819      	ldr	r1, [r3, #0]
 801623e:	7dfa      	ldrb	r2, [r7, #23]
 8016240:	481f      	ldr	r0, [pc, #124]	; (80162c0 <etharp_output+0x200>)
 8016242:	4613      	mov	r3, r2
 8016244:	005b      	lsls	r3, r3, #1
 8016246:	4413      	add	r3, r2
 8016248:	00db      	lsls	r3, r3, #3
 801624a:	4403      	add	r3, r0
 801624c:	3304      	adds	r3, #4
 801624e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8016250:	4299      	cmp	r1, r3
 8016252:	d10a      	bne.n	801626a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8016254:	4a19      	ldr	r2, [pc, #100]	; (80162bc <etharp_output+0x1fc>)
 8016256:	7dfb      	ldrb	r3, [r7, #23]
 8016258:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801625a:	7dfb      	ldrb	r3, [r7, #23]
 801625c:	461a      	mov	r2, r3
 801625e:	68b9      	ldr	r1, [r7, #8]
 8016260:	68f8      	ldr	r0, [r7, #12]
 8016262:	f7ff fe93 	bl	8015f8c <etharp_output_to_arp_index>
 8016266:	4603      	mov	r3, r0
 8016268:	e018      	b.n	801629c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801626a:	7dfb      	ldrb	r3, [r7, #23]
 801626c:	3301      	adds	r3, #1
 801626e:	75fb      	strb	r3, [r7, #23]
 8016270:	7dfb      	ldrb	r3, [r7, #23]
 8016272:	2b09      	cmp	r3, #9
 8016274:	d9ca      	bls.n	801620c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8016276:	68ba      	ldr	r2, [r7, #8]
 8016278:	69b9      	ldr	r1, [r7, #24]
 801627a:	68f8      	ldr	r0, [r7, #12]
 801627c:	f000 f822 	bl	80162c4 <etharp_query>
 8016280:	4603      	mov	r3, r0
 8016282:	e00b      	b.n	801629c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8016284:	68fb      	ldr	r3, [r7, #12]
 8016286:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 801628a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801628e:	9300      	str	r3, [sp, #0]
 8016290:	69fb      	ldr	r3, [r7, #28]
 8016292:	68b9      	ldr	r1, [r7, #8]
 8016294:	68f8      	ldr	r0, [r7, #12]
 8016296:	f001 fd89 	bl	8017dac <ethernet_output>
 801629a:	4603      	mov	r3, r0
}
 801629c:	4618      	mov	r0, r3
 801629e:	3720      	adds	r7, #32
 80162a0:	46bd      	mov	sp, r7
 80162a2:	bd80      	pop	{r7, pc}
 80162a4:	0801c340 	.word	0x0801c340
 80162a8:	0801c490 	.word	0x0801c490
 80162ac:	0801c3b8 	.word	0x0801c3b8
 80162b0:	0801c4e0 	.word	0x0801c4e0
 80162b4:	0801c480 	.word	0x0801c480
 80162b8:	0801cbbc 	.word	0x0801cbbc
 80162bc:	2000ca10 	.word	0x2000ca10
 80162c0:	2000c920 	.word	0x2000c920

080162c4 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80162c4:	b580      	push	{r7, lr}
 80162c6:	b08c      	sub	sp, #48	; 0x30
 80162c8:	af02      	add	r7, sp, #8
 80162ca:	60f8      	str	r0, [r7, #12]
 80162cc:	60b9      	str	r1, [r7, #8]
 80162ce:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80162d0:	68fb      	ldr	r3, [r7, #12]
 80162d2:	332a      	adds	r3, #42	; 0x2a
 80162d4:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80162d6:	23ff      	movs	r3, #255	; 0xff
 80162d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80162dc:	2300      	movs	r3, #0
 80162de:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80162e0:	68bb      	ldr	r3, [r7, #8]
 80162e2:	681b      	ldr	r3, [r3, #0]
 80162e4:	68f9      	ldr	r1, [r7, #12]
 80162e6:	4618      	mov	r0, r3
 80162e8:	f000 fe52 	bl	8016f90 <ip4_addr_isbroadcast_u32>
 80162ec:	4603      	mov	r3, r0
 80162ee:	2b00      	cmp	r3, #0
 80162f0:	d10c      	bne.n	801630c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80162f2:	68bb      	ldr	r3, [r7, #8]
 80162f4:	681b      	ldr	r3, [r3, #0]
 80162f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80162fa:	2be0      	cmp	r3, #224	; 0xe0
 80162fc:	d006      	beq.n	801630c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80162fe:	68bb      	ldr	r3, [r7, #8]
 8016300:	2b00      	cmp	r3, #0
 8016302:	d003      	beq.n	801630c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8016304:	68bb      	ldr	r3, [r7, #8]
 8016306:	681b      	ldr	r3, [r3, #0]
 8016308:	2b00      	cmp	r3, #0
 801630a:	d102      	bne.n	8016312 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801630c:	f06f 030f 	mvn.w	r3, #15
 8016310:	e101      	b.n	8016516 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8016312:	68fa      	ldr	r2, [r7, #12]
 8016314:	2101      	movs	r1, #1
 8016316:	68b8      	ldr	r0, [r7, #8]
 8016318:	f7ff fb5c 	bl	80159d4 <etharp_find_entry>
 801631c:	4603      	mov	r3, r0
 801631e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8016320:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8016324:	2b00      	cmp	r3, #0
 8016326:	da02      	bge.n	801632e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8016328:	8a7b      	ldrh	r3, [r7, #18]
 801632a:	b25b      	sxtb	r3, r3
 801632c:	e0f3      	b.n	8016516 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801632e:	8a7b      	ldrh	r3, [r7, #18]
 8016330:	2b7e      	cmp	r3, #126	; 0x7e
 8016332:	d906      	bls.n	8016342 <etharp_query+0x7e>
 8016334:	4b7a      	ldr	r3, [pc, #488]	; (8016520 <etharp_query+0x25c>)
 8016336:	f240 32c1 	movw	r2, #961	; 0x3c1
 801633a:	497a      	ldr	r1, [pc, #488]	; (8016524 <etharp_query+0x260>)
 801633c:	487a      	ldr	r0, [pc, #488]	; (8016528 <etharp_query+0x264>)
 801633e:	f002 fbad 	bl	8018a9c <iprintf>
  i = (netif_addr_idx_t)i_err;
 8016342:	8a7b      	ldrh	r3, [r7, #18]
 8016344:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8016346:	7c7a      	ldrb	r2, [r7, #17]
 8016348:	4978      	ldr	r1, [pc, #480]	; (801652c <etharp_query+0x268>)
 801634a:	4613      	mov	r3, r2
 801634c:	005b      	lsls	r3, r3, #1
 801634e:	4413      	add	r3, r2
 8016350:	00db      	lsls	r3, r3, #3
 8016352:	440b      	add	r3, r1
 8016354:	3314      	adds	r3, #20
 8016356:	781b      	ldrb	r3, [r3, #0]
 8016358:	2b00      	cmp	r3, #0
 801635a:	d115      	bne.n	8016388 <etharp_query+0xc4>
    is_new_entry = 1;
 801635c:	2301      	movs	r3, #1
 801635e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8016360:	7c7a      	ldrb	r2, [r7, #17]
 8016362:	4972      	ldr	r1, [pc, #456]	; (801652c <etharp_query+0x268>)
 8016364:	4613      	mov	r3, r2
 8016366:	005b      	lsls	r3, r3, #1
 8016368:	4413      	add	r3, r2
 801636a:	00db      	lsls	r3, r3, #3
 801636c:	440b      	add	r3, r1
 801636e:	3314      	adds	r3, #20
 8016370:	2201      	movs	r2, #1
 8016372:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8016374:	7c7a      	ldrb	r2, [r7, #17]
 8016376:	496d      	ldr	r1, [pc, #436]	; (801652c <etharp_query+0x268>)
 8016378:	4613      	mov	r3, r2
 801637a:	005b      	lsls	r3, r3, #1
 801637c:	4413      	add	r3, r2
 801637e:	00db      	lsls	r3, r3, #3
 8016380:	440b      	add	r3, r1
 8016382:	3308      	adds	r3, #8
 8016384:	68fa      	ldr	r2, [r7, #12]
 8016386:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8016388:	7c7a      	ldrb	r2, [r7, #17]
 801638a:	4968      	ldr	r1, [pc, #416]	; (801652c <etharp_query+0x268>)
 801638c:	4613      	mov	r3, r2
 801638e:	005b      	lsls	r3, r3, #1
 8016390:	4413      	add	r3, r2
 8016392:	00db      	lsls	r3, r3, #3
 8016394:	440b      	add	r3, r1
 8016396:	3314      	adds	r3, #20
 8016398:	781b      	ldrb	r3, [r3, #0]
 801639a:	2b01      	cmp	r3, #1
 801639c:	d011      	beq.n	80163c2 <etharp_query+0xfe>
 801639e:	7c7a      	ldrb	r2, [r7, #17]
 80163a0:	4962      	ldr	r1, [pc, #392]	; (801652c <etharp_query+0x268>)
 80163a2:	4613      	mov	r3, r2
 80163a4:	005b      	lsls	r3, r3, #1
 80163a6:	4413      	add	r3, r2
 80163a8:	00db      	lsls	r3, r3, #3
 80163aa:	440b      	add	r3, r1
 80163ac:	3314      	adds	r3, #20
 80163ae:	781b      	ldrb	r3, [r3, #0]
 80163b0:	2b01      	cmp	r3, #1
 80163b2:	d806      	bhi.n	80163c2 <etharp_query+0xfe>
 80163b4:	4b5a      	ldr	r3, [pc, #360]	; (8016520 <etharp_query+0x25c>)
 80163b6:	f240 32cd 	movw	r2, #973	; 0x3cd
 80163ba:	495d      	ldr	r1, [pc, #372]	; (8016530 <etharp_query+0x26c>)
 80163bc:	485a      	ldr	r0, [pc, #360]	; (8016528 <etharp_query+0x264>)
 80163be:	f002 fb6d 	bl	8018a9c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80163c2:	6a3b      	ldr	r3, [r7, #32]
 80163c4:	2b00      	cmp	r3, #0
 80163c6:	d102      	bne.n	80163ce <etharp_query+0x10a>
 80163c8:	687b      	ldr	r3, [r7, #4]
 80163ca:	2b00      	cmp	r3, #0
 80163cc:	d10c      	bne.n	80163e8 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80163ce:	68b9      	ldr	r1, [r7, #8]
 80163d0:	68f8      	ldr	r0, [r7, #12]
 80163d2:	f000 f963 	bl	801669c <etharp_request>
 80163d6:	4603      	mov	r3, r0
 80163d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80163dc:	687b      	ldr	r3, [r7, #4]
 80163de:	2b00      	cmp	r3, #0
 80163e0:	d102      	bne.n	80163e8 <etharp_query+0x124>
      return result;
 80163e2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80163e6:	e096      	b.n	8016516 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80163e8:	687b      	ldr	r3, [r7, #4]
 80163ea:	2b00      	cmp	r3, #0
 80163ec:	d106      	bne.n	80163fc <etharp_query+0x138>
 80163ee:	4b4c      	ldr	r3, [pc, #304]	; (8016520 <etharp_query+0x25c>)
 80163f0:	f240 32e1 	movw	r2, #993	; 0x3e1
 80163f4:	494f      	ldr	r1, [pc, #316]	; (8016534 <etharp_query+0x270>)
 80163f6:	484c      	ldr	r0, [pc, #304]	; (8016528 <etharp_query+0x264>)
 80163f8:	f002 fb50 	bl	8018a9c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80163fc:	7c7a      	ldrb	r2, [r7, #17]
 80163fe:	494b      	ldr	r1, [pc, #300]	; (801652c <etharp_query+0x268>)
 8016400:	4613      	mov	r3, r2
 8016402:	005b      	lsls	r3, r3, #1
 8016404:	4413      	add	r3, r2
 8016406:	00db      	lsls	r3, r3, #3
 8016408:	440b      	add	r3, r1
 801640a:	3314      	adds	r3, #20
 801640c:	781b      	ldrb	r3, [r3, #0]
 801640e:	2b01      	cmp	r3, #1
 8016410:	d917      	bls.n	8016442 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8016412:	4a49      	ldr	r2, [pc, #292]	; (8016538 <etharp_query+0x274>)
 8016414:	7c7b      	ldrb	r3, [r7, #17]
 8016416:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8016418:	7c7a      	ldrb	r2, [r7, #17]
 801641a:	4613      	mov	r3, r2
 801641c:	005b      	lsls	r3, r3, #1
 801641e:	4413      	add	r3, r2
 8016420:	00db      	lsls	r3, r3, #3
 8016422:	3308      	adds	r3, #8
 8016424:	4a41      	ldr	r2, [pc, #260]	; (801652c <etharp_query+0x268>)
 8016426:	4413      	add	r3, r2
 8016428:	3304      	adds	r3, #4
 801642a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801642e:	9200      	str	r2, [sp, #0]
 8016430:	697a      	ldr	r2, [r7, #20]
 8016432:	6879      	ldr	r1, [r7, #4]
 8016434:	68f8      	ldr	r0, [r7, #12]
 8016436:	f001 fcb9 	bl	8017dac <ethernet_output>
 801643a:	4603      	mov	r3, r0
 801643c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016440:	e067      	b.n	8016512 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8016442:	7c7a      	ldrb	r2, [r7, #17]
 8016444:	4939      	ldr	r1, [pc, #228]	; (801652c <etharp_query+0x268>)
 8016446:	4613      	mov	r3, r2
 8016448:	005b      	lsls	r3, r3, #1
 801644a:	4413      	add	r3, r2
 801644c:	00db      	lsls	r3, r3, #3
 801644e:	440b      	add	r3, r1
 8016450:	3314      	adds	r3, #20
 8016452:	781b      	ldrb	r3, [r3, #0]
 8016454:	2b01      	cmp	r3, #1
 8016456:	d15c      	bne.n	8016512 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8016458:	2300      	movs	r3, #0
 801645a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801645c:	687b      	ldr	r3, [r7, #4]
 801645e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8016460:	e01c      	b.n	801649c <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8016462:	69fb      	ldr	r3, [r7, #28]
 8016464:	895a      	ldrh	r2, [r3, #10]
 8016466:	69fb      	ldr	r3, [r7, #28]
 8016468:	891b      	ldrh	r3, [r3, #8]
 801646a:	429a      	cmp	r2, r3
 801646c:	d10a      	bne.n	8016484 <etharp_query+0x1c0>
 801646e:	69fb      	ldr	r3, [r7, #28]
 8016470:	681b      	ldr	r3, [r3, #0]
 8016472:	2b00      	cmp	r3, #0
 8016474:	d006      	beq.n	8016484 <etharp_query+0x1c0>
 8016476:	4b2a      	ldr	r3, [pc, #168]	; (8016520 <etharp_query+0x25c>)
 8016478:	f240 32f1 	movw	r2, #1009	; 0x3f1
 801647c:	492f      	ldr	r1, [pc, #188]	; (801653c <etharp_query+0x278>)
 801647e:	482a      	ldr	r0, [pc, #168]	; (8016528 <etharp_query+0x264>)
 8016480:	f002 fb0c 	bl	8018a9c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8016484:	69fb      	ldr	r3, [r7, #28]
 8016486:	7b1b      	ldrb	r3, [r3, #12]
 8016488:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801648c:	2b00      	cmp	r3, #0
 801648e:	d002      	beq.n	8016496 <etharp_query+0x1d2>
        copy_needed = 1;
 8016490:	2301      	movs	r3, #1
 8016492:	61bb      	str	r3, [r7, #24]
        break;
 8016494:	e005      	b.n	80164a2 <etharp_query+0x1de>
      }
      p = p->next;
 8016496:	69fb      	ldr	r3, [r7, #28]
 8016498:	681b      	ldr	r3, [r3, #0]
 801649a:	61fb      	str	r3, [r7, #28]
    while (p) {
 801649c:	69fb      	ldr	r3, [r7, #28]
 801649e:	2b00      	cmp	r3, #0
 80164a0:	d1df      	bne.n	8016462 <etharp_query+0x19e>
    }
    if (copy_needed) {
 80164a2:	69bb      	ldr	r3, [r7, #24]
 80164a4:	2b00      	cmp	r3, #0
 80164a6:	d007      	beq.n	80164b8 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80164a8:	687a      	ldr	r2, [r7, #4]
 80164aa:	f44f 7120 	mov.w	r1, #640	; 0x280
 80164ae:	200e      	movs	r0, #14
 80164b0:	f7f7 fb9c 	bl	800dbec <pbuf_clone>
 80164b4:	61f8      	str	r0, [r7, #28]
 80164b6:	e004      	b.n	80164c2 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80164b8:	687b      	ldr	r3, [r7, #4]
 80164ba:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80164bc:	69f8      	ldr	r0, [r7, #28]
 80164be:	f7f7 f9c3 	bl	800d848 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80164c2:	69fb      	ldr	r3, [r7, #28]
 80164c4:	2b00      	cmp	r3, #0
 80164c6:	d021      	beq.n	801650c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80164c8:	7c7a      	ldrb	r2, [r7, #17]
 80164ca:	4918      	ldr	r1, [pc, #96]	; (801652c <etharp_query+0x268>)
 80164cc:	4613      	mov	r3, r2
 80164ce:	005b      	lsls	r3, r3, #1
 80164d0:	4413      	add	r3, r2
 80164d2:	00db      	lsls	r3, r3, #3
 80164d4:	440b      	add	r3, r1
 80164d6:	681b      	ldr	r3, [r3, #0]
 80164d8:	2b00      	cmp	r3, #0
 80164da:	d00a      	beq.n	80164f2 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80164dc:	7c7a      	ldrb	r2, [r7, #17]
 80164de:	4913      	ldr	r1, [pc, #76]	; (801652c <etharp_query+0x268>)
 80164e0:	4613      	mov	r3, r2
 80164e2:	005b      	lsls	r3, r3, #1
 80164e4:	4413      	add	r3, r2
 80164e6:	00db      	lsls	r3, r3, #3
 80164e8:	440b      	add	r3, r1
 80164ea:	681b      	ldr	r3, [r3, #0]
 80164ec:	4618      	mov	r0, r3
 80164ee:	f7f7 f905 	bl	800d6fc <pbuf_free>
      }
      arp_table[i].q = p;
 80164f2:	7c7a      	ldrb	r2, [r7, #17]
 80164f4:	490d      	ldr	r1, [pc, #52]	; (801652c <etharp_query+0x268>)
 80164f6:	4613      	mov	r3, r2
 80164f8:	005b      	lsls	r3, r3, #1
 80164fa:	4413      	add	r3, r2
 80164fc:	00db      	lsls	r3, r3, #3
 80164fe:	440b      	add	r3, r1
 8016500:	69fa      	ldr	r2, [r7, #28]
 8016502:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8016504:	2300      	movs	r3, #0
 8016506:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801650a:	e002      	b.n	8016512 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801650c:	23ff      	movs	r3, #255	; 0xff
 801650e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8016512:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8016516:	4618      	mov	r0, r3
 8016518:	3728      	adds	r7, #40	; 0x28
 801651a:	46bd      	mov	sp, r7
 801651c:	bd80      	pop	{r7, pc}
 801651e:	bf00      	nop
 8016520:	0801c340 	.word	0x0801c340
 8016524:	0801c4ec 	.word	0x0801c4ec
 8016528:	0801c3b8 	.word	0x0801c3b8
 801652c:	2000c920 	.word	0x2000c920
 8016530:	0801c4fc 	.word	0x0801c4fc
 8016534:	0801c4e0 	.word	0x0801c4e0
 8016538:	2000ca10 	.word	0x2000ca10
 801653c:	0801c524 	.word	0x0801c524

08016540 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8016540:	b580      	push	{r7, lr}
 8016542:	b08a      	sub	sp, #40	; 0x28
 8016544:	af02      	add	r7, sp, #8
 8016546:	60f8      	str	r0, [r7, #12]
 8016548:	60b9      	str	r1, [r7, #8]
 801654a:	607a      	str	r2, [r7, #4]
 801654c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801654e:	2300      	movs	r3, #0
 8016550:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8016552:	68fb      	ldr	r3, [r7, #12]
 8016554:	2b00      	cmp	r3, #0
 8016556:	d106      	bne.n	8016566 <etharp_raw+0x26>
 8016558:	4b3a      	ldr	r3, [pc, #232]	; (8016644 <etharp_raw+0x104>)
 801655a:	f240 4257 	movw	r2, #1111	; 0x457
 801655e:	493a      	ldr	r1, [pc, #232]	; (8016648 <etharp_raw+0x108>)
 8016560:	483a      	ldr	r0, [pc, #232]	; (801664c <etharp_raw+0x10c>)
 8016562:	f002 fa9b 	bl	8018a9c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8016566:	f44f 7220 	mov.w	r2, #640	; 0x280
 801656a:	211c      	movs	r1, #28
 801656c:	200e      	movs	r0, #14
 801656e:	f7f6 fde1 	bl	800d134 <pbuf_alloc>
 8016572:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8016574:	69bb      	ldr	r3, [r7, #24]
 8016576:	2b00      	cmp	r3, #0
 8016578:	d102      	bne.n	8016580 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801657a:	f04f 33ff 	mov.w	r3, #4294967295
 801657e:	e05d      	b.n	801663c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8016580:	69bb      	ldr	r3, [r7, #24]
 8016582:	895b      	ldrh	r3, [r3, #10]
 8016584:	2b1b      	cmp	r3, #27
 8016586:	d806      	bhi.n	8016596 <etharp_raw+0x56>
 8016588:	4b2e      	ldr	r3, [pc, #184]	; (8016644 <etharp_raw+0x104>)
 801658a:	f240 4262 	movw	r2, #1122	; 0x462
 801658e:	4930      	ldr	r1, [pc, #192]	; (8016650 <etharp_raw+0x110>)
 8016590:	482e      	ldr	r0, [pc, #184]	; (801664c <etharp_raw+0x10c>)
 8016592:	f002 fa83 	bl	8018a9c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8016596:	69bb      	ldr	r3, [r7, #24]
 8016598:	685b      	ldr	r3, [r3, #4]
 801659a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801659c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801659e:	4618      	mov	r0, r3
 80165a0:	f7f5 fc5e 	bl	800be60 <lwip_htons>
 80165a4:	4603      	mov	r3, r0
 80165a6:	461a      	mov	r2, r3
 80165a8:	697b      	ldr	r3, [r7, #20]
 80165aa:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80165ac:	68fb      	ldr	r3, [r7, #12]
 80165ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80165b2:	2b06      	cmp	r3, #6
 80165b4:	d006      	beq.n	80165c4 <etharp_raw+0x84>
 80165b6:	4b23      	ldr	r3, [pc, #140]	; (8016644 <etharp_raw+0x104>)
 80165b8:	f240 4269 	movw	r2, #1129	; 0x469
 80165bc:	4925      	ldr	r1, [pc, #148]	; (8016654 <etharp_raw+0x114>)
 80165be:	4823      	ldr	r0, [pc, #140]	; (801664c <etharp_raw+0x10c>)
 80165c0:	f002 fa6c 	bl	8018a9c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80165c4:	697b      	ldr	r3, [r7, #20]
 80165c6:	3308      	adds	r3, #8
 80165c8:	2206      	movs	r2, #6
 80165ca:	6839      	ldr	r1, [r7, #0]
 80165cc:	4618      	mov	r0, r3
 80165ce:	f002 fa4f 	bl	8018a70 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80165d2:	697b      	ldr	r3, [r7, #20]
 80165d4:	3312      	adds	r3, #18
 80165d6:	2206      	movs	r2, #6
 80165d8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80165da:	4618      	mov	r0, r3
 80165dc:	f002 fa48 	bl	8018a70 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80165e0:	697b      	ldr	r3, [r7, #20]
 80165e2:	330e      	adds	r3, #14
 80165e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80165e6:	6812      	ldr	r2, [r2, #0]
 80165e8:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80165ea:	697b      	ldr	r3, [r7, #20]
 80165ec:	3318      	adds	r3, #24
 80165ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80165f0:	6812      	ldr	r2, [r2, #0]
 80165f2:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80165f4:	697b      	ldr	r3, [r7, #20]
 80165f6:	2200      	movs	r2, #0
 80165f8:	701a      	strb	r2, [r3, #0]
 80165fa:	2200      	movs	r2, #0
 80165fc:	f042 0201 	orr.w	r2, r2, #1
 8016600:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8016602:	697b      	ldr	r3, [r7, #20]
 8016604:	2200      	movs	r2, #0
 8016606:	f042 0208 	orr.w	r2, r2, #8
 801660a:	709a      	strb	r2, [r3, #2]
 801660c:	2200      	movs	r2, #0
 801660e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8016610:	697b      	ldr	r3, [r7, #20]
 8016612:	2206      	movs	r2, #6
 8016614:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8016616:	697b      	ldr	r3, [r7, #20]
 8016618:	2204      	movs	r2, #4
 801661a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801661c:	f640 0306 	movw	r3, #2054	; 0x806
 8016620:	9300      	str	r3, [sp, #0]
 8016622:	687b      	ldr	r3, [r7, #4]
 8016624:	68ba      	ldr	r2, [r7, #8]
 8016626:	69b9      	ldr	r1, [r7, #24]
 8016628:	68f8      	ldr	r0, [r7, #12]
 801662a:	f001 fbbf 	bl	8017dac <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801662e:	69b8      	ldr	r0, [r7, #24]
 8016630:	f7f7 f864 	bl	800d6fc <pbuf_free>
  p = NULL;
 8016634:	2300      	movs	r3, #0
 8016636:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8016638:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801663c:	4618      	mov	r0, r3
 801663e:	3720      	adds	r7, #32
 8016640:	46bd      	mov	sp, r7
 8016642:	bd80      	pop	{r7, pc}
 8016644:	0801c340 	.word	0x0801c340
 8016648:	0801c490 	.word	0x0801c490
 801664c:	0801c3b8 	.word	0x0801c3b8
 8016650:	0801c540 	.word	0x0801c540
 8016654:	0801c574 	.word	0x0801c574

08016658 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8016658:	b580      	push	{r7, lr}
 801665a:	b088      	sub	sp, #32
 801665c:	af04      	add	r7, sp, #16
 801665e:	60f8      	str	r0, [r7, #12]
 8016660:	60b9      	str	r1, [r7, #8]
 8016662:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8016664:	68fb      	ldr	r3, [r7, #12]
 8016666:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801666a:	68fb      	ldr	r3, [r7, #12]
 801666c:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8016670:	68fb      	ldr	r3, [r7, #12]
 8016672:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8016674:	2201      	movs	r2, #1
 8016676:	9203      	str	r2, [sp, #12]
 8016678:	68ba      	ldr	r2, [r7, #8]
 801667a:	9202      	str	r2, [sp, #8]
 801667c:	4a06      	ldr	r2, [pc, #24]	; (8016698 <etharp_request_dst+0x40>)
 801667e:	9201      	str	r2, [sp, #4]
 8016680:	9300      	str	r3, [sp, #0]
 8016682:	4603      	mov	r3, r0
 8016684:	687a      	ldr	r2, [r7, #4]
 8016686:	68f8      	ldr	r0, [r7, #12]
 8016688:	f7ff ff5a 	bl	8016540 <etharp_raw>
 801668c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801668e:	4618      	mov	r0, r3
 8016690:	3710      	adds	r7, #16
 8016692:	46bd      	mov	sp, r7
 8016694:	bd80      	pop	{r7, pc}
 8016696:	bf00      	nop
 8016698:	0801cbc4 	.word	0x0801cbc4

0801669c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801669c:	b580      	push	{r7, lr}
 801669e:	b082      	sub	sp, #8
 80166a0:	af00      	add	r7, sp, #0
 80166a2:	6078      	str	r0, [r7, #4]
 80166a4:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80166a6:	4a05      	ldr	r2, [pc, #20]	; (80166bc <etharp_request+0x20>)
 80166a8:	6839      	ldr	r1, [r7, #0]
 80166aa:	6878      	ldr	r0, [r7, #4]
 80166ac:	f7ff ffd4 	bl	8016658 <etharp_request_dst>
 80166b0:	4603      	mov	r3, r0
}
 80166b2:	4618      	mov	r0, r3
 80166b4:	3708      	adds	r7, #8
 80166b6:	46bd      	mov	sp, r7
 80166b8:	bd80      	pop	{r7, pc}
 80166ba:	bf00      	nop
 80166bc:	0801cbbc 	.word	0x0801cbbc

080166c0 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80166c0:	b580      	push	{r7, lr}
 80166c2:	b08e      	sub	sp, #56	; 0x38
 80166c4:	af04      	add	r7, sp, #16
 80166c6:	6078      	str	r0, [r7, #4]
 80166c8:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80166ca:	4b87      	ldr	r3, [pc, #540]	; (80168e8 <icmp_input+0x228>)
 80166cc:	689b      	ldr	r3, [r3, #8]
 80166ce:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80166d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166d2:	781b      	ldrb	r3, [r3, #0]
 80166d4:	f003 030f 	and.w	r3, r3, #15
 80166d8:	b2db      	uxtb	r3, r3
 80166da:	009b      	lsls	r3, r3, #2
 80166dc:	b2db      	uxtb	r3, r3
 80166de:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80166e0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80166e2:	2b13      	cmp	r3, #19
 80166e4:	f240 80e8 	bls.w	80168b8 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80166e8:	687b      	ldr	r3, [r7, #4]
 80166ea:	895b      	ldrh	r3, [r3, #10]
 80166ec:	2b03      	cmp	r3, #3
 80166ee:	f240 80e5 	bls.w	80168bc <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80166f2:	687b      	ldr	r3, [r7, #4]
 80166f4:	685b      	ldr	r3, [r3, #4]
 80166f6:	781b      	ldrb	r3, [r3, #0]
 80166f8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80166fc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8016700:	2b00      	cmp	r3, #0
 8016702:	f000 80d2 	beq.w	80168aa <icmp_input+0x1ea>
 8016706:	2b08      	cmp	r3, #8
 8016708:	f040 80d2 	bne.w	80168b0 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801670c:	4b77      	ldr	r3, [pc, #476]	; (80168ec <icmp_input+0x22c>)
 801670e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016710:	4b75      	ldr	r3, [pc, #468]	; (80168e8 <icmp_input+0x228>)
 8016712:	695b      	ldr	r3, [r3, #20]
 8016714:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016718:	2be0      	cmp	r3, #224	; 0xe0
 801671a:	f000 80d6 	beq.w	80168ca <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801671e:	4b72      	ldr	r3, [pc, #456]	; (80168e8 <icmp_input+0x228>)
 8016720:	695b      	ldr	r3, [r3, #20]
 8016722:	4a71      	ldr	r2, [pc, #452]	; (80168e8 <icmp_input+0x228>)
 8016724:	6812      	ldr	r2, [r2, #0]
 8016726:	4611      	mov	r1, r2
 8016728:	4618      	mov	r0, r3
 801672a:	f000 fc31 	bl	8016f90 <ip4_addr_isbroadcast_u32>
 801672e:	4603      	mov	r3, r0
 8016730:	2b00      	cmp	r3, #0
 8016732:	f040 80cc 	bne.w	80168ce <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8016736:	687b      	ldr	r3, [r7, #4]
 8016738:	891b      	ldrh	r3, [r3, #8]
 801673a:	2b07      	cmp	r3, #7
 801673c:	f240 80c0 	bls.w	80168c0 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8016740:	6878      	ldr	r0, [r7, #4]
 8016742:	f7f5 fc2a 	bl	800bf9a <inet_chksum_pbuf>
 8016746:	4603      	mov	r3, r0
 8016748:	2b00      	cmp	r3, #0
 801674a:	d003      	beq.n	8016754 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 801674c:	6878      	ldr	r0, [r7, #4]
 801674e:	f7f6 ffd5 	bl	800d6fc <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 8016752:	e0c5      	b.n	80168e0 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8016754:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016756:	330e      	adds	r3, #14
 8016758:	4619      	mov	r1, r3
 801675a:	6878      	ldr	r0, [r7, #4]
 801675c:	f7f6 ff38 	bl	800d5d0 <pbuf_add_header>
 8016760:	4603      	mov	r3, r0
 8016762:	2b00      	cmp	r3, #0
 8016764:	d04b      	beq.n	80167fe <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8016766:	687b      	ldr	r3, [r7, #4]
 8016768:	891a      	ldrh	r2, [r3, #8]
 801676a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801676c:	4413      	add	r3, r2
 801676e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8016770:	687b      	ldr	r3, [r7, #4]
 8016772:	891b      	ldrh	r3, [r3, #8]
 8016774:	8b7a      	ldrh	r2, [r7, #26]
 8016776:	429a      	cmp	r2, r3
 8016778:	f0c0 80ab 	bcc.w	80168d2 <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801677c:	8b7b      	ldrh	r3, [r7, #26]
 801677e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016782:	4619      	mov	r1, r3
 8016784:	200e      	movs	r0, #14
 8016786:	f7f6 fcd5 	bl	800d134 <pbuf_alloc>
 801678a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801678c:	697b      	ldr	r3, [r7, #20]
 801678e:	2b00      	cmp	r3, #0
 8016790:	f000 80a1 	beq.w	80168d6 <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8016794:	697b      	ldr	r3, [r7, #20]
 8016796:	895b      	ldrh	r3, [r3, #10]
 8016798:	461a      	mov	r2, r3
 801679a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801679c:	3308      	adds	r3, #8
 801679e:	429a      	cmp	r2, r3
 80167a0:	d203      	bcs.n	80167aa <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80167a2:	6978      	ldr	r0, [r7, #20]
 80167a4:	f7f6 ffaa 	bl	800d6fc <pbuf_free>
          goto icmperr;
 80167a8:	e096      	b.n	80168d8 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80167aa:	697b      	ldr	r3, [r7, #20]
 80167ac:	685b      	ldr	r3, [r3, #4]
 80167ae:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80167b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80167b2:	4618      	mov	r0, r3
 80167b4:	f002 f95c 	bl	8018a70 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80167b8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80167ba:	4619      	mov	r1, r3
 80167bc:	6978      	ldr	r0, [r7, #20]
 80167be:	f7f6 ff17 	bl	800d5f0 <pbuf_remove_header>
 80167c2:	4603      	mov	r3, r0
 80167c4:	2b00      	cmp	r3, #0
 80167c6:	d009      	beq.n	80167dc <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80167c8:	4b49      	ldr	r3, [pc, #292]	; (80168f0 <icmp_input+0x230>)
 80167ca:	22b6      	movs	r2, #182	; 0xb6
 80167cc:	4949      	ldr	r1, [pc, #292]	; (80168f4 <icmp_input+0x234>)
 80167ce:	484a      	ldr	r0, [pc, #296]	; (80168f8 <icmp_input+0x238>)
 80167d0:	f002 f964 	bl	8018a9c <iprintf>
          pbuf_free(r);
 80167d4:	6978      	ldr	r0, [r7, #20]
 80167d6:	f7f6 ff91 	bl	800d6fc <pbuf_free>
          goto icmperr;
 80167da:	e07d      	b.n	80168d8 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80167dc:	6879      	ldr	r1, [r7, #4]
 80167de:	6978      	ldr	r0, [r7, #20]
 80167e0:	f7f7 f8c0 	bl	800d964 <pbuf_copy>
 80167e4:	4603      	mov	r3, r0
 80167e6:	2b00      	cmp	r3, #0
 80167e8:	d003      	beq.n	80167f2 <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80167ea:	6978      	ldr	r0, [r7, #20]
 80167ec:	f7f6 ff86 	bl	800d6fc <pbuf_free>
          goto icmperr;
 80167f0:	e072      	b.n	80168d8 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 80167f2:	6878      	ldr	r0, [r7, #4]
 80167f4:	f7f6 ff82 	bl	800d6fc <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80167f8:	697b      	ldr	r3, [r7, #20]
 80167fa:	607b      	str	r3, [r7, #4]
 80167fc:	e00f      	b.n	801681e <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80167fe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016800:	330e      	adds	r3, #14
 8016802:	4619      	mov	r1, r3
 8016804:	6878      	ldr	r0, [r7, #4]
 8016806:	f7f6 fef3 	bl	800d5f0 <pbuf_remove_header>
 801680a:	4603      	mov	r3, r0
 801680c:	2b00      	cmp	r3, #0
 801680e:	d006      	beq.n	801681e <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8016810:	4b37      	ldr	r3, [pc, #220]	; (80168f0 <icmp_input+0x230>)
 8016812:	22c7      	movs	r2, #199	; 0xc7
 8016814:	4939      	ldr	r1, [pc, #228]	; (80168fc <icmp_input+0x23c>)
 8016816:	4838      	ldr	r0, [pc, #224]	; (80168f8 <icmp_input+0x238>)
 8016818:	f002 f940 	bl	8018a9c <iprintf>
          goto icmperr;
 801681c:	e05c      	b.n	80168d8 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801681e:	687b      	ldr	r3, [r7, #4]
 8016820:	685b      	ldr	r3, [r3, #4]
 8016822:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8016824:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016826:	4619      	mov	r1, r3
 8016828:	6878      	ldr	r0, [r7, #4]
 801682a:	f7f6 fed1 	bl	800d5d0 <pbuf_add_header>
 801682e:	4603      	mov	r3, r0
 8016830:	2b00      	cmp	r3, #0
 8016832:	d13c      	bne.n	80168ae <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8016834:	687b      	ldr	r3, [r7, #4]
 8016836:	685b      	ldr	r3, [r3, #4]
 8016838:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801683a:	69fb      	ldr	r3, [r7, #28]
 801683c:	681a      	ldr	r2, [r3, #0]
 801683e:	68fb      	ldr	r3, [r7, #12]
 8016840:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8016842:	4b29      	ldr	r3, [pc, #164]	; (80168e8 <icmp_input+0x228>)
 8016844:	691a      	ldr	r2, [r3, #16]
 8016846:	68fb      	ldr	r3, [r7, #12]
 8016848:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801684a:	693b      	ldr	r3, [r7, #16]
 801684c:	2200      	movs	r2, #0
 801684e:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8016850:	693b      	ldr	r3, [r7, #16]
 8016852:	885b      	ldrh	r3, [r3, #2]
 8016854:	b29b      	uxth	r3, r3
 8016856:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 801685a:	4293      	cmp	r3, r2
 801685c:	d907      	bls.n	801686e <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 801685e:	693b      	ldr	r3, [r7, #16]
 8016860:	885b      	ldrh	r3, [r3, #2]
 8016862:	b29b      	uxth	r3, r3
 8016864:	3309      	adds	r3, #9
 8016866:	b29a      	uxth	r2, r3
 8016868:	693b      	ldr	r3, [r7, #16]
 801686a:	805a      	strh	r2, [r3, #2]
 801686c:	e006      	b.n	801687c <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 801686e:	693b      	ldr	r3, [r7, #16]
 8016870:	885b      	ldrh	r3, [r3, #2]
 8016872:	b29b      	uxth	r3, r3
 8016874:	3308      	adds	r3, #8
 8016876:	b29a      	uxth	r2, r3
 8016878:	693b      	ldr	r3, [r7, #16]
 801687a:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801687c:	68fb      	ldr	r3, [r7, #12]
 801687e:	22ff      	movs	r2, #255	; 0xff
 8016880:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8016882:	68fb      	ldr	r3, [r7, #12]
 8016884:	2200      	movs	r2, #0
 8016886:	729a      	strb	r2, [r3, #10]
 8016888:	2200      	movs	r2, #0
 801688a:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801688c:	683b      	ldr	r3, [r7, #0]
 801688e:	9302      	str	r3, [sp, #8]
 8016890:	2301      	movs	r3, #1
 8016892:	9301      	str	r3, [sp, #4]
 8016894:	2300      	movs	r3, #0
 8016896:	9300      	str	r3, [sp, #0]
 8016898:	23ff      	movs	r3, #255	; 0xff
 801689a:	2200      	movs	r2, #0
 801689c:	69f9      	ldr	r1, [r7, #28]
 801689e:	6878      	ldr	r0, [r7, #4]
 80168a0:	f000 fa9e 	bl	8016de0 <ip4_output_if>
 80168a4:	4603      	mov	r3, r0
 80168a6:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80168a8:	e001      	b.n	80168ae <icmp_input+0x1ee>
      break;
 80168aa:	bf00      	nop
 80168ac:	e000      	b.n	80168b0 <icmp_input+0x1f0>
      break;
 80168ae:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80168b0:	6878      	ldr	r0, [r7, #4]
 80168b2:	f7f6 ff23 	bl	800d6fc <pbuf_free>
  return;
 80168b6:	e013      	b.n	80168e0 <icmp_input+0x220>
    goto lenerr;
 80168b8:	bf00      	nop
 80168ba:	e002      	b.n	80168c2 <icmp_input+0x202>
    goto lenerr;
 80168bc:	bf00      	nop
 80168be:	e000      	b.n	80168c2 <icmp_input+0x202>
        goto lenerr;
 80168c0:	bf00      	nop
lenerr:
  pbuf_free(p);
 80168c2:	6878      	ldr	r0, [r7, #4]
 80168c4:	f7f6 ff1a 	bl	800d6fc <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80168c8:	e00a      	b.n	80168e0 <icmp_input+0x220>
        goto icmperr;
 80168ca:	bf00      	nop
 80168cc:	e004      	b.n	80168d8 <icmp_input+0x218>
        goto icmperr;
 80168ce:	bf00      	nop
 80168d0:	e002      	b.n	80168d8 <icmp_input+0x218>
          goto icmperr;
 80168d2:	bf00      	nop
 80168d4:	e000      	b.n	80168d8 <icmp_input+0x218>
          goto icmperr;
 80168d6:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80168d8:	6878      	ldr	r0, [r7, #4]
 80168da:	f7f6 ff0f 	bl	800d6fc <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80168de:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80168e0:	3728      	adds	r7, #40	; 0x28
 80168e2:	46bd      	mov	sp, r7
 80168e4:	bd80      	pop	{r7, pc}
 80168e6:	bf00      	nop
 80168e8:	2000976c 	.word	0x2000976c
 80168ec:	20009780 	.word	0x20009780
 80168f0:	0801c5b8 	.word	0x0801c5b8
 80168f4:	0801c5f0 	.word	0x0801c5f0
 80168f8:	0801c628 	.word	0x0801c628
 80168fc:	0801c650 	.word	0x0801c650

08016900 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8016900:	b580      	push	{r7, lr}
 8016902:	b082      	sub	sp, #8
 8016904:	af00      	add	r7, sp, #0
 8016906:	6078      	str	r0, [r7, #4]
 8016908:	460b      	mov	r3, r1
 801690a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801690c:	78fb      	ldrb	r3, [r7, #3]
 801690e:	461a      	mov	r2, r3
 8016910:	2103      	movs	r1, #3
 8016912:	6878      	ldr	r0, [r7, #4]
 8016914:	f000 f814 	bl	8016940 <icmp_send_response>
}
 8016918:	bf00      	nop
 801691a:	3708      	adds	r7, #8
 801691c:	46bd      	mov	sp, r7
 801691e:	bd80      	pop	{r7, pc}

08016920 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8016920:	b580      	push	{r7, lr}
 8016922:	b082      	sub	sp, #8
 8016924:	af00      	add	r7, sp, #0
 8016926:	6078      	str	r0, [r7, #4]
 8016928:	460b      	mov	r3, r1
 801692a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801692c:	78fb      	ldrb	r3, [r7, #3]
 801692e:	461a      	mov	r2, r3
 8016930:	210b      	movs	r1, #11
 8016932:	6878      	ldr	r0, [r7, #4]
 8016934:	f000 f804 	bl	8016940 <icmp_send_response>
}
 8016938:	bf00      	nop
 801693a:	3708      	adds	r7, #8
 801693c:	46bd      	mov	sp, r7
 801693e:	bd80      	pop	{r7, pc}

08016940 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8016940:	b580      	push	{r7, lr}
 8016942:	b08c      	sub	sp, #48	; 0x30
 8016944:	af04      	add	r7, sp, #16
 8016946:	6078      	str	r0, [r7, #4]
 8016948:	460b      	mov	r3, r1
 801694a:	70fb      	strb	r3, [r7, #3]
 801694c:	4613      	mov	r3, r2
 801694e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8016950:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016954:	2124      	movs	r1, #36	; 0x24
 8016956:	2022      	movs	r0, #34	; 0x22
 8016958:	f7f6 fbec 	bl	800d134 <pbuf_alloc>
 801695c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801695e:	69fb      	ldr	r3, [r7, #28]
 8016960:	2b00      	cmp	r3, #0
 8016962:	d056      	beq.n	8016a12 <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8016964:	69fb      	ldr	r3, [r7, #28]
 8016966:	895b      	ldrh	r3, [r3, #10]
 8016968:	2b23      	cmp	r3, #35	; 0x23
 801696a:	d806      	bhi.n	801697a <icmp_send_response+0x3a>
 801696c:	4b2b      	ldr	r3, [pc, #172]	; (8016a1c <icmp_send_response+0xdc>)
 801696e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8016972:	492b      	ldr	r1, [pc, #172]	; (8016a20 <icmp_send_response+0xe0>)
 8016974:	482b      	ldr	r0, [pc, #172]	; (8016a24 <icmp_send_response+0xe4>)
 8016976:	f002 f891 	bl	8018a9c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801697a:	687b      	ldr	r3, [r7, #4]
 801697c:	685b      	ldr	r3, [r3, #4]
 801697e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8016980:	69fb      	ldr	r3, [r7, #28]
 8016982:	685b      	ldr	r3, [r3, #4]
 8016984:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8016986:	697b      	ldr	r3, [r7, #20]
 8016988:	78fa      	ldrb	r2, [r7, #3]
 801698a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801698c:	697b      	ldr	r3, [r7, #20]
 801698e:	78ba      	ldrb	r2, [r7, #2]
 8016990:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8016992:	697b      	ldr	r3, [r7, #20]
 8016994:	2200      	movs	r2, #0
 8016996:	711a      	strb	r2, [r3, #4]
 8016998:	2200      	movs	r2, #0
 801699a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801699c:	697b      	ldr	r3, [r7, #20]
 801699e:	2200      	movs	r2, #0
 80169a0:	719a      	strb	r2, [r3, #6]
 80169a2:	2200      	movs	r2, #0
 80169a4:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80169a6:	69fb      	ldr	r3, [r7, #28]
 80169a8:	685b      	ldr	r3, [r3, #4]
 80169aa:	f103 0008 	add.w	r0, r3, #8
 80169ae:	687b      	ldr	r3, [r7, #4]
 80169b0:	685b      	ldr	r3, [r3, #4]
 80169b2:	221c      	movs	r2, #28
 80169b4:	4619      	mov	r1, r3
 80169b6:	f002 f85b 	bl	8018a70 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80169ba:	69bb      	ldr	r3, [r7, #24]
 80169bc:	68db      	ldr	r3, [r3, #12]
 80169be:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80169c0:	f107 030c 	add.w	r3, r7, #12
 80169c4:	4618      	mov	r0, r3
 80169c6:	f000 f82f 	bl	8016a28 <ip4_route>
 80169ca:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80169cc:	693b      	ldr	r3, [r7, #16]
 80169ce:	2b00      	cmp	r3, #0
 80169d0:	d01b      	beq.n	8016a0a <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80169d2:	697b      	ldr	r3, [r7, #20]
 80169d4:	2200      	movs	r2, #0
 80169d6:	709a      	strb	r2, [r3, #2]
 80169d8:	2200      	movs	r2, #0
 80169da:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 80169dc:	69fb      	ldr	r3, [r7, #28]
 80169de:	895b      	ldrh	r3, [r3, #10]
 80169e0:	4619      	mov	r1, r3
 80169e2:	6978      	ldr	r0, [r7, #20]
 80169e4:	f7f5 fac7 	bl	800bf76 <inet_chksum>
 80169e8:	4603      	mov	r3, r0
 80169ea:	461a      	mov	r2, r3
 80169ec:	697b      	ldr	r3, [r7, #20]
 80169ee:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80169f0:	f107 020c 	add.w	r2, r7, #12
 80169f4:	693b      	ldr	r3, [r7, #16]
 80169f6:	9302      	str	r3, [sp, #8]
 80169f8:	2301      	movs	r3, #1
 80169fa:	9301      	str	r3, [sp, #4]
 80169fc:	2300      	movs	r3, #0
 80169fe:	9300      	str	r3, [sp, #0]
 8016a00:	23ff      	movs	r3, #255	; 0xff
 8016a02:	2100      	movs	r1, #0
 8016a04:	69f8      	ldr	r0, [r7, #28]
 8016a06:	f000 f9eb 	bl	8016de0 <ip4_output_if>
  }
  pbuf_free(q);
 8016a0a:	69f8      	ldr	r0, [r7, #28]
 8016a0c:	f7f6 fe76 	bl	800d6fc <pbuf_free>
 8016a10:	e000      	b.n	8016a14 <icmp_send_response+0xd4>
    return;
 8016a12:	bf00      	nop
}
 8016a14:	3720      	adds	r7, #32
 8016a16:	46bd      	mov	sp, r7
 8016a18:	bd80      	pop	{r7, pc}
 8016a1a:	bf00      	nop
 8016a1c:	0801c5b8 	.word	0x0801c5b8
 8016a20:	0801c684 	.word	0x0801c684
 8016a24:	0801c628 	.word	0x0801c628

08016a28 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8016a28:	b480      	push	{r7}
 8016a2a:	b085      	sub	sp, #20
 8016a2c:	af00      	add	r7, sp, #0
 8016a2e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8016a30:	4b33      	ldr	r3, [pc, #204]	; (8016b00 <ip4_route+0xd8>)
 8016a32:	681b      	ldr	r3, [r3, #0]
 8016a34:	60fb      	str	r3, [r7, #12]
 8016a36:	e036      	b.n	8016aa6 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8016a38:	68fb      	ldr	r3, [r7, #12]
 8016a3a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016a3e:	f003 0301 	and.w	r3, r3, #1
 8016a42:	b2db      	uxtb	r3, r3
 8016a44:	2b00      	cmp	r3, #0
 8016a46:	d02b      	beq.n	8016aa0 <ip4_route+0x78>
 8016a48:	68fb      	ldr	r3, [r7, #12]
 8016a4a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016a4e:	089b      	lsrs	r3, r3, #2
 8016a50:	f003 0301 	and.w	r3, r3, #1
 8016a54:	b2db      	uxtb	r3, r3
 8016a56:	2b00      	cmp	r3, #0
 8016a58:	d022      	beq.n	8016aa0 <ip4_route+0x78>
 8016a5a:	68fb      	ldr	r3, [r7, #12]
 8016a5c:	3304      	adds	r3, #4
 8016a5e:	681b      	ldr	r3, [r3, #0]
 8016a60:	2b00      	cmp	r3, #0
 8016a62:	d01d      	beq.n	8016aa0 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8016a64:	687b      	ldr	r3, [r7, #4]
 8016a66:	681a      	ldr	r2, [r3, #0]
 8016a68:	68fb      	ldr	r3, [r7, #12]
 8016a6a:	3304      	adds	r3, #4
 8016a6c:	681b      	ldr	r3, [r3, #0]
 8016a6e:	405a      	eors	r2, r3
 8016a70:	68fb      	ldr	r3, [r7, #12]
 8016a72:	3308      	adds	r3, #8
 8016a74:	681b      	ldr	r3, [r3, #0]
 8016a76:	4013      	ands	r3, r2
 8016a78:	2b00      	cmp	r3, #0
 8016a7a:	d101      	bne.n	8016a80 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8016a7c:	68fb      	ldr	r3, [r7, #12]
 8016a7e:	e038      	b.n	8016af2 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8016a80:	68fb      	ldr	r3, [r7, #12]
 8016a82:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016a86:	f003 0302 	and.w	r3, r3, #2
 8016a8a:	2b00      	cmp	r3, #0
 8016a8c:	d108      	bne.n	8016aa0 <ip4_route+0x78>
 8016a8e:	687b      	ldr	r3, [r7, #4]
 8016a90:	681a      	ldr	r2, [r3, #0]
 8016a92:	68fb      	ldr	r3, [r7, #12]
 8016a94:	330c      	adds	r3, #12
 8016a96:	681b      	ldr	r3, [r3, #0]
 8016a98:	429a      	cmp	r2, r3
 8016a9a:	d101      	bne.n	8016aa0 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8016a9c:	68fb      	ldr	r3, [r7, #12]
 8016a9e:	e028      	b.n	8016af2 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8016aa0:	68fb      	ldr	r3, [r7, #12]
 8016aa2:	681b      	ldr	r3, [r3, #0]
 8016aa4:	60fb      	str	r3, [r7, #12]
 8016aa6:	68fb      	ldr	r3, [r7, #12]
 8016aa8:	2b00      	cmp	r3, #0
 8016aaa:	d1c5      	bne.n	8016a38 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8016aac:	4b15      	ldr	r3, [pc, #84]	; (8016b04 <ip4_route+0xdc>)
 8016aae:	681b      	ldr	r3, [r3, #0]
 8016ab0:	2b00      	cmp	r3, #0
 8016ab2:	d01a      	beq.n	8016aea <ip4_route+0xc2>
 8016ab4:	4b13      	ldr	r3, [pc, #76]	; (8016b04 <ip4_route+0xdc>)
 8016ab6:	681b      	ldr	r3, [r3, #0]
 8016ab8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016abc:	f003 0301 	and.w	r3, r3, #1
 8016ac0:	2b00      	cmp	r3, #0
 8016ac2:	d012      	beq.n	8016aea <ip4_route+0xc2>
 8016ac4:	4b0f      	ldr	r3, [pc, #60]	; (8016b04 <ip4_route+0xdc>)
 8016ac6:	681b      	ldr	r3, [r3, #0]
 8016ac8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016acc:	f003 0304 	and.w	r3, r3, #4
 8016ad0:	2b00      	cmp	r3, #0
 8016ad2:	d00a      	beq.n	8016aea <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8016ad4:	4b0b      	ldr	r3, [pc, #44]	; (8016b04 <ip4_route+0xdc>)
 8016ad6:	681b      	ldr	r3, [r3, #0]
 8016ad8:	3304      	adds	r3, #4
 8016ada:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8016adc:	2b00      	cmp	r3, #0
 8016ade:	d004      	beq.n	8016aea <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8016ae0:	687b      	ldr	r3, [r7, #4]
 8016ae2:	681b      	ldr	r3, [r3, #0]
 8016ae4:	b2db      	uxtb	r3, r3
 8016ae6:	2b7f      	cmp	r3, #127	; 0x7f
 8016ae8:	d101      	bne.n	8016aee <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8016aea:	2300      	movs	r3, #0
 8016aec:	e001      	b.n	8016af2 <ip4_route+0xca>
  }

  return netif_default;
 8016aee:	4b05      	ldr	r3, [pc, #20]	; (8016b04 <ip4_route+0xdc>)
 8016af0:	681b      	ldr	r3, [r3, #0]
}
 8016af2:	4618      	mov	r0, r3
 8016af4:	3714      	adds	r7, #20
 8016af6:	46bd      	mov	sp, r7
 8016af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016afc:	4770      	bx	lr
 8016afe:	bf00      	nop
 8016b00:	2000c880 	.word	0x2000c880
 8016b04:	2000c884 	.word	0x2000c884

08016b08 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8016b08:	b580      	push	{r7, lr}
 8016b0a:	b082      	sub	sp, #8
 8016b0c:	af00      	add	r7, sp, #0
 8016b0e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8016b10:	687b      	ldr	r3, [r7, #4]
 8016b12:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016b16:	f003 0301 	and.w	r3, r3, #1
 8016b1a:	b2db      	uxtb	r3, r3
 8016b1c:	2b00      	cmp	r3, #0
 8016b1e:	d016      	beq.n	8016b4e <ip4_input_accept+0x46>
 8016b20:	687b      	ldr	r3, [r7, #4]
 8016b22:	3304      	adds	r3, #4
 8016b24:	681b      	ldr	r3, [r3, #0]
 8016b26:	2b00      	cmp	r3, #0
 8016b28:	d011      	beq.n	8016b4e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8016b2a:	4b0b      	ldr	r3, [pc, #44]	; (8016b58 <ip4_input_accept+0x50>)
 8016b2c:	695a      	ldr	r2, [r3, #20]
 8016b2e:	687b      	ldr	r3, [r7, #4]
 8016b30:	3304      	adds	r3, #4
 8016b32:	681b      	ldr	r3, [r3, #0]
 8016b34:	429a      	cmp	r2, r3
 8016b36:	d008      	beq.n	8016b4a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8016b38:	4b07      	ldr	r3, [pc, #28]	; (8016b58 <ip4_input_accept+0x50>)
 8016b3a:	695b      	ldr	r3, [r3, #20]
 8016b3c:	6879      	ldr	r1, [r7, #4]
 8016b3e:	4618      	mov	r0, r3
 8016b40:	f000 fa26 	bl	8016f90 <ip4_addr_isbroadcast_u32>
 8016b44:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8016b46:	2b00      	cmp	r3, #0
 8016b48:	d001      	beq.n	8016b4e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8016b4a:	2301      	movs	r3, #1
 8016b4c:	e000      	b.n	8016b50 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8016b4e:	2300      	movs	r3, #0
}
 8016b50:	4618      	mov	r0, r3
 8016b52:	3708      	adds	r7, #8
 8016b54:	46bd      	mov	sp, r7
 8016b56:	bd80      	pop	{r7, pc}
 8016b58:	2000976c 	.word	0x2000976c

08016b5c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8016b5c:	b580      	push	{r7, lr}
 8016b5e:	b088      	sub	sp, #32
 8016b60:	af00      	add	r7, sp, #0
 8016b62:	6078      	str	r0, [r7, #4]
 8016b64:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8016b66:	2301      	movs	r3, #1
 8016b68:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8016b6a:	687b      	ldr	r3, [r7, #4]
 8016b6c:	685b      	ldr	r3, [r3, #4]
 8016b6e:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8016b70:	69fb      	ldr	r3, [r7, #28]
 8016b72:	781b      	ldrb	r3, [r3, #0]
 8016b74:	091b      	lsrs	r3, r3, #4
 8016b76:	b2db      	uxtb	r3, r3
 8016b78:	2b04      	cmp	r3, #4
 8016b7a:	d004      	beq.n	8016b86 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8016b7c:	6878      	ldr	r0, [r7, #4]
 8016b7e:	f7f6 fdbd 	bl	800d6fc <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8016b82:	2300      	movs	r3, #0
 8016b84:	e123      	b.n	8016dce <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8016b86:	69fb      	ldr	r3, [r7, #28]
 8016b88:	781b      	ldrb	r3, [r3, #0]
 8016b8a:	f003 030f 	and.w	r3, r3, #15
 8016b8e:	b2db      	uxtb	r3, r3
 8016b90:	009b      	lsls	r3, r3, #2
 8016b92:	b2db      	uxtb	r3, r3
 8016b94:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8016b96:	69fb      	ldr	r3, [r7, #28]
 8016b98:	885b      	ldrh	r3, [r3, #2]
 8016b9a:	b29b      	uxth	r3, r3
 8016b9c:	4618      	mov	r0, r3
 8016b9e:	f7f5 f95f 	bl	800be60 <lwip_htons>
 8016ba2:	4603      	mov	r3, r0
 8016ba4:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8016ba6:	687b      	ldr	r3, [r7, #4]
 8016ba8:	891b      	ldrh	r3, [r3, #8]
 8016baa:	8a3a      	ldrh	r2, [r7, #16]
 8016bac:	429a      	cmp	r2, r3
 8016bae:	d204      	bcs.n	8016bba <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8016bb0:	8a3b      	ldrh	r3, [r7, #16]
 8016bb2:	4619      	mov	r1, r3
 8016bb4:	6878      	ldr	r0, [r7, #4]
 8016bb6:	f7f6 fc1b 	bl	800d3f0 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8016bba:	687b      	ldr	r3, [r7, #4]
 8016bbc:	895b      	ldrh	r3, [r3, #10]
 8016bbe:	8a7a      	ldrh	r2, [r7, #18]
 8016bc0:	429a      	cmp	r2, r3
 8016bc2:	d807      	bhi.n	8016bd4 <ip4_input+0x78>
 8016bc4:	687b      	ldr	r3, [r7, #4]
 8016bc6:	891b      	ldrh	r3, [r3, #8]
 8016bc8:	8a3a      	ldrh	r2, [r7, #16]
 8016bca:	429a      	cmp	r2, r3
 8016bcc:	d802      	bhi.n	8016bd4 <ip4_input+0x78>
 8016bce:	8a7b      	ldrh	r3, [r7, #18]
 8016bd0:	2b13      	cmp	r3, #19
 8016bd2:	d804      	bhi.n	8016bde <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8016bd4:	6878      	ldr	r0, [r7, #4]
 8016bd6:	f7f6 fd91 	bl	800d6fc <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8016bda:	2300      	movs	r3, #0
 8016bdc:	e0f7      	b.n	8016dce <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8016bde:	69fb      	ldr	r3, [r7, #28]
 8016be0:	691b      	ldr	r3, [r3, #16]
 8016be2:	4a7d      	ldr	r2, [pc, #500]	; (8016dd8 <ip4_input+0x27c>)
 8016be4:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8016be6:	69fb      	ldr	r3, [r7, #28]
 8016be8:	68db      	ldr	r3, [r3, #12]
 8016bea:	4a7b      	ldr	r2, [pc, #492]	; (8016dd8 <ip4_input+0x27c>)
 8016bec:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016bee:	4b7a      	ldr	r3, [pc, #488]	; (8016dd8 <ip4_input+0x27c>)
 8016bf0:	695b      	ldr	r3, [r3, #20]
 8016bf2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016bf6:	2be0      	cmp	r3, #224	; 0xe0
 8016bf8:	d112      	bne.n	8016c20 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8016bfa:	683b      	ldr	r3, [r7, #0]
 8016bfc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016c00:	f003 0301 	and.w	r3, r3, #1
 8016c04:	b2db      	uxtb	r3, r3
 8016c06:	2b00      	cmp	r3, #0
 8016c08:	d007      	beq.n	8016c1a <ip4_input+0xbe>
 8016c0a:	683b      	ldr	r3, [r7, #0]
 8016c0c:	3304      	adds	r3, #4
 8016c0e:	681b      	ldr	r3, [r3, #0]
 8016c10:	2b00      	cmp	r3, #0
 8016c12:	d002      	beq.n	8016c1a <ip4_input+0xbe>
      netif = inp;
 8016c14:	683b      	ldr	r3, [r7, #0]
 8016c16:	61bb      	str	r3, [r7, #24]
 8016c18:	e02a      	b.n	8016c70 <ip4_input+0x114>
    } else {
      netif = NULL;
 8016c1a:	2300      	movs	r3, #0
 8016c1c:	61bb      	str	r3, [r7, #24]
 8016c1e:	e027      	b.n	8016c70 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8016c20:	6838      	ldr	r0, [r7, #0]
 8016c22:	f7ff ff71 	bl	8016b08 <ip4_input_accept>
 8016c26:	4603      	mov	r3, r0
 8016c28:	2b00      	cmp	r3, #0
 8016c2a:	d002      	beq.n	8016c32 <ip4_input+0xd6>
      netif = inp;
 8016c2c:	683b      	ldr	r3, [r7, #0]
 8016c2e:	61bb      	str	r3, [r7, #24]
 8016c30:	e01e      	b.n	8016c70 <ip4_input+0x114>
    } else {
      netif = NULL;
 8016c32:	2300      	movs	r3, #0
 8016c34:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8016c36:	4b68      	ldr	r3, [pc, #416]	; (8016dd8 <ip4_input+0x27c>)
 8016c38:	695b      	ldr	r3, [r3, #20]
 8016c3a:	b2db      	uxtb	r3, r3
 8016c3c:	2b7f      	cmp	r3, #127	; 0x7f
 8016c3e:	d017      	beq.n	8016c70 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8016c40:	4b66      	ldr	r3, [pc, #408]	; (8016ddc <ip4_input+0x280>)
 8016c42:	681b      	ldr	r3, [r3, #0]
 8016c44:	61bb      	str	r3, [r7, #24]
 8016c46:	e00e      	b.n	8016c66 <ip4_input+0x10a>
          if (netif == inp) {
 8016c48:	69ba      	ldr	r2, [r7, #24]
 8016c4a:	683b      	ldr	r3, [r7, #0]
 8016c4c:	429a      	cmp	r2, r3
 8016c4e:	d006      	beq.n	8016c5e <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8016c50:	69b8      	ldr	r0, [r7, #24]
 8016c52:	f7ff ff59 	bl	8016b08 <ip4_input_accept>
 8016c56:	4603      	mov	r3, r0
 8016c58:	2b00      	cmp	r3, #0
 8016c5a:	d108      	bne.n	8016c6e <ip4_input+0x112>
 8016c5c:	e000      	b.n	8016c60 <ip4_input+0x104>
            continue;
 8016c5e:	bf00      	nop
        NETIF_FOREACH(netif) {
 8016c60:	69bb      	ldr	r3, [r7, #24]
 8016c62:	681b      	ldr	r3, [r3, #0]
 8016c64:	61bb      	str	r3, [r7, #24]
 8016c66:	69bb      	ldr	r3, [r7, #24]
 8016c68:	2b00      	cmp	r3, #0
 8016c6a:	d1ed      	bne.n	8016c48 <ip4_input+0xec>
 8016c6c:	e000      	b.n	8016c70 <ip4_input+0x114>
            break;
 8016c6e:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8016c70:	69bb      	ldr	r3, [r7, #24]
 8016c72:	2b00      	cmp	r3, #0
 8016c74:	d111      	bne.n	8016c9a <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8016c76:	69fb      	ldr	r3, [r7, #28]
 8016c78:	7a5b      	ldrb	r3, [r3, #9]
 8016c7a:	2b11      	cmp	r3, #17
 8016c7c:	d10d      	bne.n	8016c9a <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 8016c7e:	8a7b      	ldrh	r3, [r7, #18]
 8016c80:	69fa      	ldr	r2, [r7, #28]
 8016c82:	4413      	add	r3, r2
 8016c84:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8016c86:	68fb      	ldr	r3, [r7, #12]
 8016c88:	885b      	ldrh	r3, [r3, #2]
 8016c8a:	b29b      	uxth	r3, r3
 8016c8c:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8016c90:	d103      	bne.n	8016c9a <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 8016c92:	683b      	ldr	r3, [r7, #0]
 8016c94:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 8016c96:	2300      	movs	r3, #0
 8016c98:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8016c9a:	697b      	ldr	r3, [r7, #20]
 8016c9c:	2b00      	cmp	r3, #0
 8016c9e:	d017      	beq.n	8016cd0 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8016ca0:	4b4d      	ldr	r3, [pc, #308]	; (8016dd8 <ip4_input+0x27c>)
 8016ca2:	691b      	ldr	r3, [r3, #16]
 8016ca4:	2b00      	cmp	r3, #0
 8016ca6:	d013      	beq.n	8016cd0 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8016ca8:	4b4b      	ldr	r3, [pc, #300]	; (8016dd8 <ip4_input+0x27c>)
 8016caa:	691b      	ldr	r3, [r3, #16]
 8016cac:	6839      	ldr	r1, [r7, #0]
 8016cae:	4618      	mov	r0, r3
 8016cb0:	f000 f96e 	bl	8016f90 <ip4_addr_isbroadcast_u32>
 8016cb4:	4603      	mov	r3, r0
 8016cb6:	2b00      	cmp	r3, #0
 8016cb8:	d105      	bne.n	8016cc6 <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8016cba:	4b47      	ldr	r3, [pc, #284]	; (8016dd8 <ip4_input+0x27c>)
 8016cbc:	691b      	ldr	r3, [r3, #16]
 8016cbe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8016cc2:	2be0      	cmp	r3, #224	; 0xe0
 8016cc4:	d104      	bne.n	8016cd0 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8016cc6:	6878      	ldr	r0, [r7, #4]
 8016cc8:	f7f6 fd18 	bl	800d6fc <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8016ccc:	2300      	movs	r3, #0
 8016cce:	e07e      	b.n	8016dce <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8016cd0:	69bb      	ldr	r3, [r7, #24]
 8016cd2:	2b00      	cmp	r3, #0
 8016cd4:	d104      	bne.n	8016ce0 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8016cd6:	6878      	ldr	r0, [r7, #4]
 8016cd8:	f7f6 fd10 	bl	800d6fc <pbuf_free>
    return ERR_OK;
 8016cdc:	2300      	movs	r3, #0
 8016cde:	e076      	b.n	8016dce <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8016ce0:	69fb      	ldr	r3, [r7, #28]
 8016ce2:	88db      	ldrh	r3, [r3, #6]
 8016ce4:	b29b      	uxth	r3, r3
 8016ce6:	461a      	mov	r2, r3
 8016ce8:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8016cec:	4013      	ands	r3, r2
 8016cee:	2b00      	cmp	r3, #0
 8016cf0:	d00b      	beq.n	8016d0a <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8016cf2:	6878      	ldr	r0, [r7, #4]
 8016cf4:	f000 fc92 	bl	801761c <ip4_reass>
 8016cf8:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8016cfa:	687b      	ldr	r3, [r7, #4]
 8016cfc:	2b00      	cmp	r3, #0
 8016cfe:	d101      	bne.n	8016d04 <ip4_input+0x1a8>
      return ERR_OK;
 8016d00:	2300      	movs	r3, #0
 8016d02:	e064      	b.n	8016dce <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8016d04:	687b      	ldr	r3, [r7, #4]
 8016d06:	685b      	ldr	r3, [r3, #4]
 8016d08:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8016d0a:	4a33      	ldr	r2, [pc, #204]	; (8016dd8 <ip4_input+0x27c>)
 8016d0c:	69bb      	ldr	r3, [r7, #24]
 8016d0e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8016d10:	4a31      	ldr	r2, [pc, #196]	; (8016dd8 <ip4_input+0x27c>)
 8016d12:	683b      	ldr	r3, [r7, #0]
 8016d14:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8016d16:	4a30      	ldr	r2, [pc, #192]	; (8016dd8 <ip4_input+0x27c>)
 8016d18:	69fb      	ldr	r3, [r7, #28]
 8016d1a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8016d1c:	69fb      	ldr	r3, [r7, #28]
 8016d1e:	781b      	ldrb	r3, [r3, #0]
 8016d20:	f003 030f 	and.w	r3, r3, #15
 8016d24:	b2db      	uxtb	r3, r3
 8016d26:	009b      	lsls	r3, r3, #2
 8016d28:	b2db      	uxtb	r3, r3
 8016d2a:	b29a      	uxth	r2, r3
 8016d2c:	4b2a      	ldr	r3, [pc, #168]	; (8016dd8 <ip4_input+0x27c>)
 8016d2e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8016d30:	8a7b      	ldrh	r3, [r7, #18]
 8016d32:	4619      	mov	r1, r3
 8016d34:	6878      	ldr	r0, [r7, #4]
 8016d36:	f7f6 fc5b 	bl	800d5f0 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8016d3a:	69fb      	ldr	r3, [r7, #28]
 8016d3c:	7a5b      	ldrb	r3, [r3, #9]
 8016d3e:	2b11      	cmp	r3, #17
 8016d40:	d006      	beq.n	8016d50 <ip4_input+0x1f4>
 8016d42:	2b11      	cmp	r3, #17
 8016d44:	dc13      	bgt.n	8016d6e <ip4_input+0x212>
 8016d46:	2b01      	cmp	r3, #1
 8016d48:	d00c      	beq.n	8016d64 <ip4_input+0x208>
 8016d4a:	2b06      	cmp	r3, #6
 8016d4c:	d005      	beq.n	8016d5a <ip4_input+0x1fe>
 8016d4e:	e00e      	b.n	8016d6e <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8016d50:	6839      	ldr	r1, [r7, #0]
 8016d52:	6878      	ldr	r0, [r7, #4]
 8016d54:	f7fc fb00 	bl	8013358 <udp_input>
        break;
 8016d58:	e026      	b.n	8016da8 <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8016d5a:	6839      	ldr	r1, [r7, #0]
 8016d5c:	6878      	ldr	r0, [r7, #4]
 8016d5e:	f7f8 fb11 	bl	800f384 <tcp_input>
        break;
 8016d62:	e021      	b.n	8016da8 <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8016d64:	6839      	ldr	r1, [r7, #0]
 8016d66:	6878      	ldr	r0, [r7, #4]
 8016d68:	f7ff fcaa 	bl	80166c0 <icmp_input>
        break;
 8016d6c:	e01c      	b.n	8016da8 <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8016d6e:	4b1a      	ldr	r3, [pc, #104]	; (8016dd8 <ip4_input+0x27c>)
 8016d70:	695b      	ldr	r3, [r3, #20]
 8016d72:	69b9      	ldr	r1, [r7, #24]
 8016d74:	4618      	mov	r0, r3
 8016d76:	f000 f90b 	bl	8016f90 <ip4_addr_isbroadcast_u32>
 8016d7a:	4603      	mov	r3, r0
 8016d7c:	2b00      	cmp	r3, #0
 8016d7e:	d10f      	bne.n	8016da0 <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016d80:	4b15      	ldr	r3, [pc, #84]	; (8016dd8 <ip4_input+0x27c>)
 8016d82:	695b      	ldr	r3, [r3, #20]
 8016d84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8016d88:	2be0      	cmp	r3, #224	; 0xe0
 8016d8a:	d009      	beq.n	8016da0 <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8016d8c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8016d90:	4619      	mov	r1, r3
 8016d92:	6878      	ldr	r0, [r7, #4]
 8016d94:	f7f6 fc9f 	bl	800d6d6 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8016d98:	2102      	movs	r1, #2
 8016d9a:	6878      	ldr	r0, [r7, #4]
 8016d9c:	f7ff fdb0 	bl	8016900 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8016da0:	6878      	ldr	r0, [r7, #4]
 8016da2:	f7f6 fcab 	bl	800d6fc <pbuf_free>
        break;
 8016da6:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8016da8:	4b0b      	ldr	r3, [pc, #44]	; (8016dd8 <ip4_input+0x27c>)
 8016daa:	2200      	movs	r2, #0
 8016dac:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8016dae:	4b0a      	ldr	r3, [pc, #40]	; (8016dd8 <ip4_input+0x27c>)
 8016db0:	2200      	movs	r2, #0
 8016db2:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8016db4:	4b08      	ldr	r3, [pc, #32]	; (8016dd8 <ip4_input+0x27c>)
 8016db6:	2200      	movs	r2, #0
 8016db8:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8016dba:	4b07      	ldr	r3, [pc, #28]	; (8016dd8 <ip4_input+0x27c>)
 8016dbc:	2200      	movs	r2, #0
 8016dbe:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8016dc0:	4b05      	ldr	r3, [pc, #20]	; (8016dd8 <ip4_input+0x27c>)
 8016dc2:	2200      	movs	r2, #0
 8016dc4:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8016dc6:	4b04      	ldr	r3, [pc, #16]	; (8016dd8 <ip4_input+0x27c>)
 8016dc8:	2200      	movs	r2, #0
 8016dca:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8016dcc:	2300      	movs	r3, #0
}
 8016dce:	4618      	mov	r0, r3
 8016dd0:	3720      	adds	r7, #32
 8016dd2:	46bd      	mov	sp, r7
 8016dd4:	bd80      	pop	{r7, pc}
 8016dd6:	bf00      	nop
 8016dd8:	2000976c 	.word	0x2000976c
 8016ddc:	2000c880 	.word	0x2000c880

08016de0 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8016de0:	b580      	push	{r7, lr}
 8016de2:	b08a      	sub	sp, #40	; 0x28
 8016de4:	af04      	add	r7, sp, #16
 8016de6:	60f8      	str	r0, [r7, #12]
 8016de8:	60b9      	str	r1, [r7, #8]
 8016dea:	607a      	str	r2, [r7, #4]
 8016dec:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8016dee:	68bb      	ldr	r3, [r7, #8]
 8016df0:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8016df2:	687b      	ldr	r3, [r7, #4]
 8016df4:	2b00      	cmp	r3, #0
 8016df6:	d009      	beq.n	8016e0c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8016df8:	68bb      	ldr	r3, [r7, #8]
 8016dfa:	2b00      	cmp	r3, #0
 8016dfc:	d003      	beq.n	8016e06 <ip4_output_if+0x26>
 8016dfe:	68bb      	ldr	r3, [r7, #8]
 8016e00:	681b      	ldr	r3, [r3, #0]
 8016e02:	2b00      	cmp	r3, #0
 8016e04:	d102      	bne.n	8016e0c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8016e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e08:	3304      	adds	r3, #4
 8016e0a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8016e0c:	78fa      	ldrb	r2, [r7, #3]
 8016e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e10:	9302      	str	r3, [sp, #8]
 8016e12:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8016e16:	9301      	str	r3, [sp, #4]
 8016e18:	f897 3020 	ldrb.w	r3, [r7, #32]
 8016e1c:	9300      	str	r3, [sp, #0]
 8016e1e:	4613      	mov	r3, r2
 8016e20:	687a      	ldr	r2, [r7, #4]
 8016e22:	6979      	ldr	r1, [r7, #20]
 8016e24:	68f8      	ldr	r0, [r7, #12]
 8016e26:	f000 f805 	bl	8016e34 <ip4_output_if_src>
 8016e2a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8016e2c:	4618      	mov	r0, r3
 8016e2e:	3718      	adds	r7, #24
 8016e30:	46bd      	mov	sp, r7
 8016e32:	bd80      	pop	{r7, pc}

08016e34 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8016e34:	b580      	push	{r7, lr}
 8016e36:	b088      	sub	sp, #32
 8016e38:	af00      	add	r7, sp, #0
 8016e3a:	60f8      	str	r0, [r7, #12]
 8016e3c:	60b9      	str	r1, [r7, #8]
 8016e3e:	607a      	str	r2, [r7, #4]
 8016e40:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8016e42:	68fb      	ldr	r3, [r7, #12]
 8016e44:	7b9b      	ldrb	r3, [r3, #14]
 8016e46:	2b01      	cmp	r3, #1
 8016e48:	d006      	beq.n	8016e58 <ip4_output_if_src+0x24>
 8016e4a:	4b4b      	ldr	r3, [pc, #300]	; (8016f78 <ip4_output_if_src+0x144>)
 8016e4c:	f44f 7255 	mov.w	r2, #852	; 0x354
 8016e50:	494a      	ldr	r1, [pc, #296]	; (8016f7c <ip4_output_if_src+0x148>)
 8016e52:	484b      	ldr	r0, [pc, #300]	; (8016f80 <ip4_output_if_src+0x14c>)
 8016e54:	f001 fe22 	bl	8018a9c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8016e58:	687b      	ldr	r3, [r7, #4]
 8016e5a:	2b00      	cmp	r3, #0
 8016e5c:	d060      	beq.n	8016f20 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8016e5e:	2314      	movs	r3, #20
 8016e60:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8016e62:	2114      	movs	r1, #20
 8016e64:	68f8      	ldr	r0, [r7, #12]
 8016e66:	f7f6 fbb3 	bl	800d5d0 <pbuf_add_header>
 8016e6a:	4603      	mov	r3, r0
 8016e6c:	2b00      	cmp	r3, #0
 8016e6e:	d002      	beq.n	8016e76 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8016e70:	f06f 0301 	mvn.w	r3, #1
 8016e74:	e07c      	b.n	8016f70 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8016e76:	68fb      	ldr	r3, [r7, #12]
 8016e78:	685b      	ldr	r3, [r3, #4]
 8016e7a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8016e7c:	68fb      	ldr	r3, [r7, #12]
 8016e7e:	895b      	ldrh	r3, [r3, #10]
 8016e80:	2b13      	cmp	r3, #19
 8016e82:	d806      	bhi.n	8016e92 <ip4_output_if_src+0x5e>
 8016e84:	4b3c      	ldr	r3, [pc, #240]	; (8016f78 <ip4_output_if_src+0x144>)
 8016e86:	f44f 7262 	mov.w	r2, #904	; 0x388
 8016e8a:	493e      	ldr	r1, [pc, #248]	; (8016f84 <ip4_output_if_src+0x150>)
 8016e8c:	483c      	ldr	r0, [pc, #240]	; (8016f80 <ip4_output_if_src+0x14c>)
 8016e8e:	f001 fe05 	bl	8018a9c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8016e92:	69fb      	ldr	r3, [r7, #28]
 8016e94:	78fa      	ldrb	r2, [r7, #3]
 8016e96:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8016e98:	69fb      	ldr	r3, [r7, #28]
 8016e9a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8016e9e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8016ea0:	687b      	ldr	r3, [r7, #4]
 8016ea2:	681a      	ldr	r2, [r3, #0]
 8016ea4:	69fb      	ldr	r3, [r7, #28]
 8016ea6:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8016ea8:	8b7b      	ldrh	r3, [r7, #26]
 8016eaa:	089b      	lsrs	r3, r3, #2
 8016eac:	b29b      	uxth	r3, r3
 8016eae:	b2db      	uxtb	r3, r3
 8016eb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016eb4:	b2da      	uxtb	r2, r3
 8016eb6:	69fb      	ldr	r3, [r7, #28]
 8016eb8:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8016eba:	69fb      	ldr	r3, [r7, #28]
 8016ebc:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8016ec0:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8016ec2:	68fb      	ldr	r3, [r7, #12]
 8016ec4:	891b      	ldrh	r3, [r3, #8]
 8016ec6:	4618      	mov	r0, r3
 8016ec8:	f7f4 ffca 	bl	800be60 <lwip_htons>
 8016ecc:	4603      	mov	r3, r0
 8016ece:	461a      	mov	r2, r3
 8016ed0:	69fb      	ldr	r3, [r7, #28]
 8016ed2:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8016ed4:	69fb      	ldr	r3, [r7, #28]
 8016ed6:	2200      	movs	r2, #0
 8016ed8:	719a      	strb	r2, [r3, #6]
 8016eda:	2200      	movs	r2, #0
 8016edc:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8016ede:	4b2a      	ldr	r3, [pc, #168]	; (8016f88 <ip4_output_if_src+0x154>)
 8016ee0:	881b      	ldrh	r3, [r3, #0]
 8016ee2:	4618      	mov	r0, r3
 8016ee4:	f7f4 ffbc 	bl	800be60 <lwip_htons>
 8016ee8:	4603      	mov	r3, r0
 8016eea:	461a      	mov	r2, r3
 8016eec:	69fb      	ldr	r3, [r7, #28]
 8016eee:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8016ef0:	4b25      	ldr	r3, [pc, #148]	; (8016f88 <ip4_output_if_src+0x154>)
 8016ef2:	881b      	ldrh	r3, [r3, #0]
 8016ef4:	3301      	adds	r3, #1
 8016ef6:	b29a      	uxth	r2, r3
 8016ef8:	4b23      	ldr	r3, [pc, #140]	; (8016f88 <ip4_output_if_src+0x154>)
 8016efa:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8016efc:	68bb      	ldr	r3, [r7, #8]
 8016efe:	2b00      	cmp	r3, #0
 8016f00:	d104      	bne.n	8016f0c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8016f02:	4b22      	ldr	r3, [pc, #136]	; (8016f8c <ip4_output_if_src+0x158>)
 8016f04:	681a      	ldr	r2, [r3, #0]
 8016f06:	69fb      	ldr	r3, [r7, #28]
 8016f08:	60da      	str	r2, [r3, #12]
 8016f0a:	e003      	b.n	8016f14 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8016f0c:	68bb      	ldr	r3, [r7, #8]
 8016f0e:	681a      	ldr	r2, [r3, #0]
 8016f10:	69fb      	ldr	r3, [r7, #28]
 8016f12:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8016f14:	69fb      	ldr	r3, [r7, #28]
 8016f16:	2200      	movs	r2, #0
 8016f18:	729a      	strb	r2, [r3, #10]
 8016f1a:	2200      	movs	r2, #0
 8016f1c:	72da      	strb	r2, [r3, #11]
 8016f1e:	e00f      	b.n	8016f40 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8016f20:	68fb      	ldr	r3, [r7, #12]
 8016f22:	895b      	ldrh	r3, [r3, #10]
 8016f24:	2b13      	cmp	r3, #19
 8016f26:	d802      	bhi.n	8016f2e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8016f28:	f06f 0301 	mvn.w	r3, #1
 8016f2c:	e020      	b.n	8016f70 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8016f2e:	68fb      	ldr	r3, [r7, #12]
 8016f30:	685b      	ldr	r3, [r3, #4]
 8016f32:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8016f34:	69fb      	ldr	r3, [r7, #28]
 8016f36:	691b      	ldr	r3, [r3, #16]
 8016f38:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8016f3a:	f107 0314 	add.w	r3, r7, #20
 8016f3e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8016f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016f44:	2b00      	cmp	r3, #0
 8016f46:	d00c      	beq.n	8016f62 <ip4_output_if_src+0x12e>
 8016f48:	68fb      	ldr	r3, [r7, #12]
 8016f4a:	891a      	ldrh	r2, [r3, #8]
 8016f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016f50:	429a      	cmp	r2, r3
 8016f52:	d906      	bls.n	8016f62 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8016f54:	687a      	ldr	r2, [r7, #4]
 8016f56:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8016f58:	68f8      	ldr	r0, [r7, #12]
 8016f5a:	f000 fd53 	bl	8017a04 <ip4_frag>
 8016f5e:	4603      	mov	r3, r0
 8016f60:	e006      	b.n	8016f70 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8016f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f64:	695b      	ldr	r3, [r3, #20]
 8016f66:	687a      	ldr	r2, [r7, #4]
 8016f68:	68f9      	ldr	r1, [r7, #12]
 8016f6a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016f6c:	4798      	blx	r3
 8016f6e:	4603      	mov	r3, r0
}
 8016f70:	4618      	mov	r0, r3
 8016f72:	3720      	adds	r7, #32
 8016f74:	46bd      	mov	sp, r7
 8016f76:	bd80      	pop	{r7, pc}
 8016f78:	0801c6b0 	.word	0x0801c6b0
 8016f7c:	0801c6e4 	.word	0x0801c6e4
 8016f80:	0801c6f0 	.word	0x0801c6f0
 8016f84:	0801c718 	.word	0x0801c718
 8016f88:	2000ca12 	.word	0x2000ca12
 8016f8c:	0801cbb4 	.word	0x0801cbb4

08016f90 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8016f90:	b480      	push	{r7}
 8016f92:	b085      	sub	sp, #20
 8016f94:	af00      	add	r7, sp, #0
 8016f96:	6078      	str	r0, [r7, #4]
 8016f98:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8016f9a:	687b      	ldr	r3, [r7, #4]
 8016f9c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8016f9e:	687b      	ldr	r3, [r7, #4]
 8016fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016fa4:	d002      	beq.n	8016fac <ip4_addr_isbroadcast_u32+0x1c>
 8016fa6:	687b      	ldr	r3, [r7, #4]
 8016fa8:	2b00      	cmp	r3, #0
 8016faa:	d101      	bne.n	8016fb0 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8016fac:	2301      	movs	r3, #1
 8016fae:	e02a      	b.n	8017006 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8016fb0:	683b      	ldr	r3, [r7, #0]
 8016fb2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016fb6:	f003 0302 	and.w	r3, r3, #2
 8016fba:	2b00      	cmp	r3, #0
 8016fbc:	d101      	bne.n	8016fc2 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8016fbe:	2300      	movs	r3, #0
 8016fc0:	e021      	b.n	8017006 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8016fc2:	683b      	ldr	r3, [r7, #0]
 8016fc4:	3304      	adds	r3, #4
 8016fc6:	681b      	ldr	r3, [r3, #0]
 8016fc8:	687a      	ldr	r2, [r7, #4]
 8016fca:	429a      	cmp	r2, r3
 8016fcc:	d101      	bne.n	8016fd2 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8016fce:	2300      	movs	r3, #0
 8016fd0:	e019      	b.n	8017006 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8016fd2:	68fa      	ldr	r2, [r7, #12]
 8016fd4:	683b      	ldr	r3, [r7, #0]
 8016fd6:	3304      	adds	r3, #4
 8016fd8:	681b      	ldr	r3, [r3, #0]
 8016fda:	405a      	eors	r2, r3
 8016fdc:	683b      	ldr	r3, [r7, #0]
 8016fde:	3308      	adds	r3, #8
 8016fe0:	681b      	ldr	r3, [r3, #0]
 8016fe2:	4013      	ands	r3, r2
 8016fe4:	2b00      	cmp	r3, #0
 8016fe6:	d10d      	bne.n	8017004 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8016fe8:	683b      	ldr	r3, [r7, #0]
 8016fea:	3308      	adds	r3, #8
 8016fec:	681b      	ldr	r3, [r3, #0]
 8016fee:	43da      	mvns	r2, r3
 8016ff0:	687b      	ldr	r3, [r7, #4]
 8016ff2:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8016ff4:	683b      	ldr	r3, [r7, #0]
 8016ff6:	3308      	adds	r3, #8
 8016ff8:	681b      	ldr	r3, [r3, #0]
 8016ffa:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8016ffc:	429a      	cmp	r2, r3
 8016ffe:	d101      	bne.n	8017004 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8017000:	2301      	movs	r3, #1
 8017002:	e000      	b.n	8017006 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8017004:	2300      	movs	r3, #0
  }
}
 8017006:	4618      	mov	r0, r3
 8017008:	3714      	adds	r7, #20
 801700a:	46bd      	mov	sp, r7
 801700c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017010:	4770      	bx	lr
	...

08017014 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8017014:	b580      	push	{r7, lr}
 8017016:	b084      	sub	sp, #16
 8017018:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801701a:	2300      	movs	r3, #0
 801701c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801701e:	4b12      	ldr	r3, [pc, #72]	; (8017068 <ip_reass_tmr+0x54>)
 8017020:	681b      	ldr	r3, [r3, #0]
 8017022:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8017024:	e018      	b.n	8017058 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8017026:	68fb      	ldr	r3, [r7, #12]
 8017028:	7fdb      	ldrb	r3, [r3, #31]
 801702a:	2b00      	cmp	r3, #0
 801702c:	d00b      	beq.n	8017046 <ip_reass_tmr+0x32>
      r->timer--;
 801702e:	68fb      	ldr	r3, [r7, #12]
 8017030:	7fdb      	ldrb	r3, [r3, #31]
 8017032:	3b01      	subs	r3, #1
 8017034:	b2da      	uxtb	r2, r3
 8017036:	68fb      	ldr	r3, [r7, #12]
 8017038:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801703a:	68fb      	ldr	r3, [r7, #12]
 801703c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801703e:	68fb      	ldr	r3, [r7, #12]
 8017040:	681b      	ldr	r3, [r3, #0]
 8017042:	60fb      	str	r3, [r7, #12]
 8017044:	e008      	b.n	8017058 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8017046:	68fb      	ldr	r3, [r7, #12]
 8017048:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801704a:	68fb      	ldr	r3, [r7, #12]
 801704c:	681b      	ldr	r3, [r3, #0]
 801704e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8017050:	68b9      	ldr	r1, [r7, #8]
 8017052:	6878      	ldr	r0, [r7, #4]
 8017054:	f000 f80a 	bl	801706c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8017058:	68fb      	ldr	r3, [r7, #12]
 801705a:	2b00      	cmp	r3, #0
 801705c:	d1e3      	bne.n	8017026 <ip_reass_tmr+0x12>
    }
  }
}
 801705e:	bf00      	nop
 8017060:	bf00      	nop
 8017062:	3710      	adds	r7, #16
 8017064:	46bd      	mov	sp, r7
 8017066:	bd80      	pop	{r7, pc}
 8017068:	2000ca14 	.word	0x2000ca14

0801706c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801706c:	b580      	push	{r7, lr}
 801706e:	b088      	sub	sp, #32
 8017070:	af00      	add	r7, sp, #0
 8017072:	6078      	str	r0, [r7, #4]
 8017074:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8017076:	2300      	movs	r3, #0
 8017078:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801707a:	683a      	ldr	r2, [r7, #0]
 801707c:	687b      	ldr	r3, [r7, #4]
 801707e:	429a      	cmp	r2, r3
 8017080:	d105      	bne.n	801708e <ip_reass_free_complete_datagram+0x22>
 8017082:	4b45      	ldr	r3, [pc, #276]	; (8017198 <ip_reass_free_complete_datagram+0x12c>)
 8017084:	22ab      	movs	r2, #171	; 0xab
 8017086:	4945      	ldr	r1, [pc, #276]	; (801719c <ip_reass_free_complete_datagram+0x130>)
 8017088:	4845      	ldr	r0, [pc, #276]	; (80171a0 <ip_reass_free_complete_datagram+0x134>)
 801708a:	f001 fd07 	bl	8018a9c <iprintf>
  if (prev != NULL) {
 801708e:	683b      	ldr	r3, [r7, #0]
 8017090:	2b00      	cmp	r3, #0
 8017092:	d00a      	beq.n	80170aa <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8017094:	683b      	ldr	r3, [r7, #0]
 8017096:	681b      	ldr	r3, [r3, #0]
 8017098:	687a      	ldr	r2, [r7, #4]
 801709a:	429a      	cmp	r2, r3
 801709c:	d005      	beq.n	80170aa <ip_reass_free_complete_datagram+0x3e>
 801709e:	4b3e      	ldr	r3, [pc, #248]	; (8017198 <ip_reass_free_complete_datagram+0x12c>)
 80170a0:	22ad      	movs	r2, #173	; 0xad
 80170a2:	4940      	ldr	r1, [pc, #256]	; (80171a4 <ip_reass_free_complete_datagram+0x138>)
 80170a4:	483e      	ldr	r0, [pc, #248]	; (80171a0 <ip_reass_free_complete_datagram+0x134>)
 80170a6:	f001 fcf9 	bl	8018a9c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80170aa:	687b      	ldr	r3, [r7, #4]
 80170ac:	685b      	ldr	r3, [r3, #4]
 80170ae:	685b      	ldr	r3, [r3, #4]
 80170b0:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80170b2:	697b      	ldr	r3, [r7, #20]
 80170b4:	889b      	ldrh	r3, [r3, #4]
 80170b6:	b29b      	uxth	r3, r3
 80170b8:	2b00      	cmp	r3, #0
 80170ba:	d12a      	bne.n	8017112 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80170bc:	687b      	ldr	r3, [r7, #4]
 80170be:	685b      	ldr	r3, [r3, #4]
 80170c0:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80170c2:	697b      	ldr	r3, [r7, #20]
 80170c4:	681a      	ldr	r2, [r3, #0]
 80170c6:	687b      	ldr	r3, [r7, #4]
 80170c8:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80170ca:	69bb      	ldr	r3, [r7, #24]
 80170cc:	6858      	ldr	r0, [r3, #4]
 80170ce:	687b      	ldr	r3, [r7, #4]
 80170d0:	3308      	adds	r3, #8
 80170d2:	2214      	movs	r2, #20
 80170d4:	4619      	mov	r1, r3
 80170d6:	f001 fccb 	bl	8018a70 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80170da:	2101      	movs	r1, #1
 80170dc:	69b8      	ldr	r0, [r7, #24]
 80170de:	f7ff fc1f 	bl	8016920 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80170e2:	69b8      	ldr	r0, [r7, #24]
 80170e4:	f7f6 fb98 	bl	800d818 <pbuf_clen>
 80170e8:	4603      	mov	r3, r0
 80170ea:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80170ec:	8bfa      	ldrh	r2, [r7, #30]
 80170ee:	8a7b      	ldrh	r3, [r7, #18]
 80170f0:	4413      	add	r3, r2
 80170f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80170f6:	db05      	blt.n	8017104 <ip_reass_free_complete_datagram+0x98>
 80170f8:	4b27      	ldr	r3, [pc, #156]	; (8017198 <ip_reass_free_complete_datagram+0x12c>)
 80170fa:	22bc      	movs	r2, #188	; 0xbc
 80170fc:	492a      	ldr	r1, [pc, #168]	; (80171a8 <ip_reass_free_complete_datagram+0x13c>)
 80170fe:	4828      	ldr	r0, [pc, #160]	; (80171a0 <ip_reass_free_complete_datagram+0x134>)
 8017100:	f001 fccc 	bl	8018a9c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8017104:	8bfa      	ldrh	r2, [r7, #30]
 8017106:	8a7b      	ldrh	r3, [r7, #18]
 8017108:	4413      	add	r3, r2
 801710a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801710c:	69b8      	ldr	r0, [r7, #24]
 801710e:	f7f6 faf5 	bl	800d6fc <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8017112:	687b      	ldr	r3, [r7, #4]
 8017114:	685b      	ldr	r3, [r3, #4]
 8017116:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8017118:	e01f      	b.n	801715a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801711a:	69bb      	ldr	r3, [r7, #24]
 801711c:	685b      	ldr	r3, [r3, #4]
 801711e:	617b      	str	r3, [r7, #20]
    pcur = p;
 8017120:	69bb      	ldr	r3, [r7, #24]
 8017122:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8017124:	697b      	ldr	r3, [r7, #20]
 8017126:	681b      	ldr	r3, [r3, #0]
 8017128:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801712a:	68f8      	ldr	r0, [r7, #12]
 801712c:	f7f6 fb74 	bl	800d818 <pbuf_clen>
 8017130:	4603      	mov	r3, r0
 8017132:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8017134:	8bfa      	ldrh	r2, [r7, #30]
 8017136:	8a7b      	ldrh	r3, [r7, #18]
 8017138:	4413      	add	r3, r2
 801713a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801713e:	db05      	blt.n	801714c <ip_reass_free_complete_datagram+0xe0>
 8017140:	4b15      	ldr	r3, [pc, #84]	; (8017198 <ip_reass_free_complete_datagram+0x12c>)
 8017142:	22cc      	movs	r2, #204	; 0xcc
 8017144:	4918      	ldr	r1, [pc, #96]	; (80171a8 <ip_reass_free_complete_datagram+0x13c>)
 8017146:	4816      	ldr	r0, [pc, #88]	; (80171a0 <ip_reass_free_complete_datagram+0x134>)
 8017148:	f001 fca8 	bl	8018a9c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801714c:	8bfa      	ldrh	r2, [r7, #30]
 801714e:	8a7b      	ldrh	r3, [r7, #18]
 8017150:	4413      	add	r3, r2
 8017152:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8017154:	68f8      	ldr	r0, [r7, #12]
 8017156:	f7f6 fad1 	bl	800d6fc <pbuf_free>
  while (p != NULL) {
 801715a:	69bb      	ldr	r3, [r7, #24]
 801715c:	2b00      	cmp	r3, #0
 801715e:	d1dc      	bne.n	801711a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8017160:	6839      	ldr	r1, [r7, #0]
 8017162:	6878      	ldr	r0, [r7, #4]
 8017164:	f000 f8c2 	bl	80172ec <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8017168:	4b10      	ldr	r3, [pc, #64]	; (80171ac <ip_reass_free_complete_datagram+0x140>)
 801716a:	881b      	ldrh	r3, [r3, #0]
 801716c:	8bfa      	ldrh	r2, [r7, #30]
 801716e:	429a      	cmp	r2, r3
 8017170:	d905      	bls.n	801717e <ip_reass_free_complete_datagram+0x112>
 8017172:	4b09      	ldr	r3, [pc, #36]	; (8017198 <ip_reass_free_complete_datagram+0x12c>)
 8017174:	22d2      	movs	r2, #210	; 0xd2
 8017176:	490e      	ldr	r1, [pc, #56]	; (80171b0 <ip_reass_free_complete_datagram+0x144>)
 8017178:	4809      	ldr	r0, [pc, #36]	; (80171a0 <ip_reass_free_complete_datagram+0x134>)
 801717a:	f001 fc8f 	bl	8018a9c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801717e:	4b0b      	ldr	r3, [pc, #44]	; (80171ac <ip_reass_free_complete_datagram+0x140>)
 8017180:	881a      	ldrh	r2, [r3, #0]
 8017182:	8bfb      	ldrh	r3, [r7, #30]
 8017184:	1ad3      	subs	r3, r2, r3
 8017186:	b29a      	uxth	r2, r3
 8017188:	4b08      	ldr	r3, [pc, #32]	; (80171ac <ip_reass_free_complete_datagram+0x140>)
 801718a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801718c:	8bfb      	ldrh	r3, [r7, #30]
}
 801718e:	4618      	mov	r0, r3
 8017190:	3720      	adds	r7, #32
 8017192:	46bd      	mov	sp, r7
 8017194:	bd80      	pop	{r7, pc}
 8017196:	bf00      	nop
 8017198:	0801c748 	.word	0x0801c748
 801719c:	0801c784 	.word	0x0801c784
 80171a0:	0801c790 	.word	0x0801c790
 80171a4:	0801c7b8 	.word	0x0801c7b8
 80171a8:	0801c7cc 	.word	0x0801c7cc
 80171ac:	2000ca18 	.word	0x2000ca18
 80171b0:	0801c7ec 	.word	0x0801c7ec

080171b4 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80171b4:	b580      	push	{r7, lr}
 80171b6:	b08a      	sub	sp, #40	; 0x28
 80171b8:	af00      	add	r7, sp, #0
 80171ba:	6078      	str	r0, [r7, #4]
 80171bc:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80171be:	2300      	movs	r3, #0
 80171c0:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80171c2:	2300      	movs	r3, #0
 80171c4:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80171c6:	2300      	movs	r3, #0
 80171c8:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80171ca:	2300      	movs	r3, #0
 80171cc:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80171ce:	2300      	movs	r3, #0
 80171d0:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80171d2:	4b28      	ldr	r3, [pc, #160]	; (8017274 <ip_reass_remove_oldest_datagram+0xc0>)
 80171d4:	681b      	ldr	r3, [r3, #0]
 80171d6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80171d8:	e030      	b.n	801723c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80171da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80171dc:	695a      	ldr	r2, [r3, #20]
 80171de:	687b      	ldr	r3, [r7, #4]
 80171e0:	68db      	ldr	r3, [r3, #12]
 80171e2:	429a      	cmp	r2, r3
 80171e4:	d10c      	bne.n	8017200 <ip_reass_remove_oldest_datagram+0x4c>
 80171e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80171e8:	699a      	ldr	r2, [r3, #24]
 80171ea:	687b      	ldr	r3, [r7, #4]
 80171ec:	691b      	ldr	r3, [r3, #16]
 80171ee:	429a      	cmp	r2, r3
 80171f0:	d106      	bne.n	8017200 <ip_reass_remove_oldest_datagram+0x4c>
 80171f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80171f4:	899a      	ldrh	r2, [r3, #12]
 80171f6:	687b      	ldr	r3, [r7, #4]
 80171f8:	889b      	ldrh	r3, [r3, #4]
 80171fa:	b29b      	uxth	r3, r3
 80171fc:	429a      	cmp	r2, r3
 80171fe:	d014      	beq.n	801722a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8017200:	693b      	ldr	r3, [r7, #16]
 8017202:	3301      	adds	r3, #1
 8017204:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8017206:	6a3b      	ldr	r3, [r7, #32]
 8017208:	2b00      	cmp	r3, #0
 801720a:	d104      	bne.n	8017216 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801720c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801720e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8017210:	69fb      	ldr	r3, [r7, #28]
 8017212:	61bb      	str	r3, [r7, #24]
 8017214:	e009      	b.n	801722a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8017216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017218:	7fda      	ldrb	r2, [r3, #31]
 801721a:	6a3b      	ldr	r3, [r7, #32]
 801721c:	7fdb      	ldrb	r3, [r3, #31]
 801721e:	429a      	cmp	r2, r3
 8017220:	d803      	bhi.n	801722a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8017222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017224:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8017226:	69fb      	ldr	r3, [r7, #28]
 8017228:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801722a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801722c:	681b      	ldr	r3, [r3, #0]
 801722e:	2b00      	cmp	r3, #0
 8017230:	d001      	beq.n	8017236 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8017232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017234:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8017236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017238:	681b      	ldr	r3, [r3, #0]
 801723a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801723c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801723e:	2b00      	cmp	r3, #0
 8017240:	d1cb      	bne.n	80171da <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8017242:	6a3b      	ldr	r3, [r7, #32]
 8017244:	2b00      	cmp	r3, #0
 8017246:	d008      	beq.n	801725a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8017248:	69b9      	ldr	r1, [r7, #24]
 801724a:	6a38      	ldr	r0, [r7, #32]
 801724c:	f7ff ff0e 	bl	801706c <ip_reass_free_complete_datagram>
 8017250:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8017252:	697a      	ldr	r2, [r7, #20]
 8017254:	68fb      	ldr	r3, [r7, #12]
 8017256:	4413      	add	r3, r2
 8017258:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801725a:	697a      	ldr	r2, [r7, #20]
 801725c:	683b      	ldr	r3, [r7, #0]
 801725e:	429a      	cmp	r2, r3
 8017260:	da02      	bge.n	8017268 <ip_reass_remove_oldest_datagram+0xb4>
 8017262:	693b      	ldr	r3, [r7, #16]
 8017264:	2b01      	cmp	r3, #1
 8017266:	dcac      	bgt.n	80171c2 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8017268:	697b      	ldr	r3, [r7, #20]
}
 801726a:	4618      	mov	r0, r3
 801726c:	3728      	adds	r7, #40	; 0x28
 801726e:	46bd      	mov	sp, r7
 8017270:	bd80      	pop	{r7, pc}
 8017272:	bf00      	nop
 8017274:	2000ca14 	.word	0x2000ca14

08017278 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8017278:	b580      	push	{r7, lr}
 801727a:	b084      	sub	sp, #16
 801727c:	af00      	add	r7, sp, #0
 801727e:	6078      	str	r0, [r7, #4]
 8017280:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8017282:	2004      	movs	r0, #4
 8017284:	f7f5 fb7c 	bl	800c980 <memp_malloc>
 8017288:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801728a:	68fb      	ldr	r3, [r7, #12]
 801728c:	2b00      	cmp	r3, #0
 801728e:	d110      	bne.n	80172b2 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8017290:	6839      	ldr	r1, [r7, #0]
 8017292:	6878      	ldr	r0, [r7, #4]
 8017294:	f7ff ff8e 	bl	80171b4 <ip_reass_remove_oldest_datagram>
 8017298:	4602      	mov	r2, r0
 801729a:	683b      	ldr	r3, [r7, #0]
 801729c:	4293      	cmp	r3, r2
 801729e:	dc03      	bgt.n	80172a8 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80172a0:	2004      	movs	r0, #4
 80172a2:	f7f5 fb6d 	bl	800c980 <memp_malloc>
 80172a6:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80172a8:	68fb      	ldr	r3, [r7, #12]
 80172aa:	2b00      	cmp	r3, #0
 80172ac:	d101      	bne.n	80172b2 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80172ae:	2300      	movs	r3, #0
 80172b0:	e016      	b.n	80172e0 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80172b2:	2220      	movs	r2, #32
 80172b4:	2100      	movs	r1, #0
 80172b6:	68f8      	ldr	r0, [r7, #12]
 80172b8:	f001 fbe8 	bl	8018a8c <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80172bc:	68fb      	ldr	r3, [r7, #12]
 80172be:	220f      	movs	r2, #15
 80172c0:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80172c2:	4b09      	ldr	r3, [pc, #36]	; (80172e8 <ip_reass_enqueue_new_datagram+0x70>)
 80172c4:	681a      	ldr	r2, [r3, #0]
 80172c6:	68fb      	ldr	r3, [r7, #12]
 80172c8:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80172ca:	4a07      	ldr	r2, [pc, #28]	; (80172e8 <ip_reass_enqueue_new_datagram+0x70>)
 80172cc:	68fb      	ldr	r3, [r7, #12]
 80172ce:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80172d0:	68fb      	ldr	r3, [r7, #12]
 80172d2:	3308      	adds	r3, #8
 80172d4:	2214      	movs	r2, #20
 80172d6:	6879      	ldr	r1, [r7, #4]
 80172d8:	4618      	mov	r0, r3
 80172da:	f001 fbc9 	bl	8018a70 <memcpy>
  return ipr;
 80172de:	68fb      	ldr	r3, [r7, #12]
}
 80172e0:	4618      	mov	r0, r3
 80172e2:	3710      	adds	r7, #16
 80172e4:	46bd      	mov	sp, r7
 80172e6:	bd80      	pop	{r7, pc}
 80172e8:	2000ca14 	.word	0x2000ca14

080172ec <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80172ec:	b580      	push	{r7, lr}
 80172ee:	b082      	sub	sp, #8
 80172f0:	af00      	add	r7, sp, #0
 80172f2:	6078      	str	r0, [r7, #4]
 80172f4:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80172f6:	4b10      	ldr	r3, [pc, #64]	; (8017338 <ip_reass_dequeue_datagram+0x4c>)
 80172f8:	681b      	ldr	r3, [r3, #0]
 80172fa:	687a      	ldr	r2, [r7, #4]
 80172fc:	429a      	cmp	r2, r3
 80172fe:	d104      	bne.n	801730a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8017300:	687b      	ldr	r3, [r7, #4]
 8017302:	681b      	ldr	r3, [r3, #0]
 8017304:	4a0c      	ldr	r2, [pc, #48]	; (8017338 <ip_reass_dequeue_datagram+0x4c>)
 8017306:	6013      	str	r3, [r2, #0]
 8017308:	e00d      	b.n	8017326 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801730a:	683b      	ldr	r3, [r7, #0]
 801730c:	2b00      	cmp	r3, #0
 801730e:	d106      	bne.n	801731e <ip_reass_dequeue_datagram+0x32>
 8017310:	4b0a      	ldr	r3, [pc, #40]	; (801733c <ip_reass_dequeue_datagram+0x50>)
 8017312:	f240 1245 	movw	r2, #325	; 0x145
 8017316:	490a      	ldr	r1, [pc, #40]	; (8017340 <ip_reass_dequeue_datagram+0x54>)
 8017318:	480a      	ldr	r0, [pc, #40]	; (8017344 <ip_reass_dequeue_datagram+0x58>)
 801731a:	f001 fbbf 	bl	8018a9c <iprintf>
    prev->next = ipr->next;
 801731e:	687b      	ldr	r3, [r7, #4]
 8017320:	681a      	ldr	r2, [r3, #0]
 8017322:	683b      	ldr	r3, [r7, #0]
 8017324:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8017326:	6879      	ldr	r1, [r7, #4]
 8017328:	2004      	movs	r0, #4
 801732a:	f7f5 fb9f 	bl	800ca6c <memp_free>
}
 801732e:	bf00      	nop
 8017330:	3708      	adds	r7, #8
 8017332:	46bd      	mov	sp, r7
 8017334:	bd80      	pop	{r7, pc}
 8017336:	bf00      	nop
 8017338:	2000ca14 	.word	0x2000ca14
 801733c:	0801c748 	.word	0x0801c748
 8017340:	0801c810 	.word	0x0801c810
 8017344:	0801c790 	.word	0x0801c790

08017348 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8017348:	b580      	push	{r7, lr}
 801734a:	b08c      	sub	sp, #48	; 0x30
 801734c:	af00      	add	r7, sp, #0
 801734e:	60f8      	str	r0, [r7, #12]
 8017350:	60b9      	str	r1, [r7, #8]
 8017352:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8017354:	2300      	movs	r3, #0
 8017356:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8017358:	2301      	movs	r3, #1
 801735a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801735c:	68bb      	ldr	r3, [r7, #8]
 801735e:	685b      	ldr	r3, [r3, #4]
 8017360:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8017362:	69fb      	ldr	r3, [r7, #28]
 8017364:	885b      	ldrh	r3, [r3, #2]
 8017366:	b29b      	uxth	r3, r3
 8017368:	4618      	mov	r0, r3
 801736a:	f7f4 fd79 	bl	800be60 <lwip_htons>
 801736e:	4603      	mov	r3, r0
 8017370:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8017372:	69fb      	ldr	r3, [r7, #28]
 8017374:	781b      	ldrb	r3, [r3, #0]
 8017376:	f003 030f 	and.w	r3, r3, #15
 801737a:	b2db      	uxtb	r3, r3
 801737c:	009b      	lsls	r3, r3, #2
 801737e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8017380:	7e7b      	ldrb	r3, [r7, #25]
 8017382:	b29b      	uxth	r3, r3
 8017384:	8b7a      	ldrh	r2, [r7, #26]
 8017386:	429a      	cmp	r2, r3
 8017388:	d202      	bcs.n	8017390 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801738a:	f04f 33ff 	mov.w	r3, #4294967295
 801738e:	e135      	b.n	80175fc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8017390:	7e7b      	ldrb	r3, [r7, #25]
 8017392:	b29b      	uxth	r3, r3
 8017394:	8b7a      	ldrh	r2, [r7, #26]
 8017396:	1ad3      	subs	r3, r2, r3
 8017398:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801739a:	69fb      	ldr	r3, [r7, #28]
 801739c:	88db      	ldrh	r3, [r3, #6]
 801739e:	b29b      	uxth	r3, r3
 80173a0:	4618      	mov	r0, r3
 80173a2:	f7f4 fd5d 	bl	800be60 <lwip_htons>
 80173a6:	4603      	mov	r3, r0
 80173a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80173ac:	b29b      	uxth	r3, r3
 80173ae:	00db      	lsls	r3, r3, #3
 80173b0:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80173b2:	68bb      	ldr	r3, [r7, #8]
 80173b4:	685b      	ldr	r3, [r3, #4]
 80173b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 80173b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173ba:	2200      	movs	r2, #0
 80173bc:	701a      	strb	r2, [r3, #0]
 80173be:	2200      	movs	r2, #0
 80173c0:	705a      	strb	r2, [r3, #1]
 80173c2:	2200      	movs	r2, #0
 80173c4:	709a      	strb	r2, [r3, #2]
 80173c6:	2200      	movs	r2, #0
 80173c8:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80173ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173cc:	8afa      	ldrh	r2, [r7, #22]
 80173ce:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80173d0:	8afa      	ldrh	r2, [r7, #22]
 80173d2:	8b7b      	ldrh	r3, [r7, #26]
 80173d4:	4413      	add	r3, r2
 80173d6:	b29a      	uxth	r2, r3
 80173d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173da:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80173dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173de:	88db      	ldrh	r3, [r3, #6]
 80173e0:	b29b      	uxth	r3, r3
 80173e2:	8afa      	ldrh	r2, [r7, #22]
 80173e4:	429a      	cmp	r2, r3
 80173e6:	d902      	bls.n	80173ee <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80173e8:	f04f 33ff 	mov.w	r3, #4294967295
 80173ec:	e106      	b.n	80175fc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80173ee:	68fb      	ldr	r3, [r7, #12]
 80173f0:	685b      	ldr	r3, [r3, #4]
 80173f2:	627b      	str	r3, [r7, #36]	; 0x24
 80173f4:	e068      	b.n	80174c8 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80173f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173f8:	685b      	ldr	r3, [r3, #4]
 80173fa:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80173fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173fe:	889b      	ldrh	r3, [r3, #4]
 8017400:	b29a      	uxth	r2, r3
 8017402:	693b      	ldr	r3, [r7, #16]
 8017404:	889b      	ldrh	r3, [r3, #4]
 8017406:	b29b      	uxth	r3, r3
 8017408:	429a      	cmp	r2, r3
 801740a:	d235      	bcs.n	8017478 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801740c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801740e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017410:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8017412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017414:	2b00      	cmp	r3, #0
 8017416:	d020      	beq.n	801745a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8017418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801741a:	889b      	ldrh	r3, [r3, #4]
 801741c:	b29a      	uxth	r2, r3
 801741e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017420:	88db      	ldrh	r3, [r3, #6]
 8017422:	b29b      	uxth	r3, r3
 8017424:	429a      	cmp	r2, r3
 8017426:	d307      	bcc.n	8017438 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8017428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801742a:	88db      	ldrh	r3, [r3, #6]
 801742c:	b29a      	uxth	r2, r3
 801742e:	693b      	ldr	r3, [r7, #16]
 8017430:	889b      	ldrh	r3, [r3, #4]
 8017432:	b29b      	uxth	r3, r3
 8017434:	429a      	cmp	r2, r3
 8017436:	d902      	bls.n	801743e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017438:	f04f 33ff 	mov.w	r3, #4294967295
 801743c:	e0de      	b.n	80175fc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801743e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017440:	68ba      	ldr	r2, [r7, #8]
 8017442:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8017444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017446:	88db      	ldrh	r3, [r3, #6]
 8017448:	b29a      	uxth	r2, r3
 801744a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801744c:	889b      	ldrh	r3, [r3, #4]
 801744e:	b29b      	uxth	r3, r3
 8017450:	429a      	cmp	r2, r3
 8017452:	d03d      	beq.n	80174d0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8017454:	2300      	movs	r3, #0
 8017456:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8017458:	e03a      	b.n	80174d0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801745a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801745c:	88db      	ldrh	r3, [r3, #6]
 801745e:	b29a      	uxth	r2, r3
 8017460:	693b      	ldr	r3, [r7, #16]
 8017462:	889b      	ldrh	r3, [r3, #4]
 8017464:	b29b      	uxth	r3, r3
 8017466:	429a      	cmp	r2, r3
 8017468:	d902      	bls.n	8017470 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801746a:	f04f 33ff 	mov.w	r3, #4294967295
 801746e:	e0c5      	b.n	80175fc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8017470:	68fb      	ldr	r3, [r7, #12]
 8017472:	68ba      	ldr	r2, [r7, #8]
 8017474:	605a      	str	r2, [r3, #4]
      break;
 8017476:	e02b      	b.n	80174d0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8017478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801747a:	889b      	ldrh	r3, [r3, #4]
 801747c:	b29a      	uxth	r2, r3
 801747e:	693b      	ldr	r3, [r7, #16]
 8017480:	889b      	ldrh	r3, [r3, #4]
 8017482:	b29b      	uxth	r3, r3
 8017484:	429a      	cmp	r2, r3
 8017486:	d102      	bne.n	801748e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017488:	f04f 33ff 	mov.w	r3, #4294967295
 801748c:	e0b6      	b.n	80175fc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801748e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017490:	889b      	ldrh	r3, [r3, #4]
 8017492:	b29a      	uxth	r2, r3
 8017494:	693b      	ldr	r3, [r7, #16]
 8017496:	88db      	ldrh	r3, [r3, #6]
 8017498:	b29b      	uxth	r3, r3
 801749a:	429a      	cmp	r2, r3
 801749c:	d202      	bcs.n	80174a4 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801749e:	f04f 33ff 	mov.w	r3, #4294967295
 80174a2:	e0ab      	b.n	80175fc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80174a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174a6:	2b00      	cmp	r3, #0
 80174a8:	d009      	beq.n	80174be <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80174aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174ac:	88db      	ldrh	r3, [r3, #6]
 80174ae:	b29a      	uxth	r2, r3
 80174b0:	693b      	ldr	r3, [r7, #16]
 80174b2:	889b      	ldrh	r3, [r3, #4]
 80174b4:	b29b      	uxth	r3, r3
 80174b6:	429a      	cmp	r2, r3
 80174b8:	d001      	beq.n	80174be <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80174ba:	2300      	movs	r3, #0
 80174bc:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80174be:	693b      	ldr	r3, [r7, #16]
 80174c0:	681b      	ldr	r3, [r3, #0]
 80174c2:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 80174c4:	693b      	ldr	r3, [r7, #16]
 80174c6:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 80174c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80174ca:	2b00      	cmp	r3, #0
 80174cc:	d193      	bne.n	80173f6 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80174ce:	e000      	b.n	80174d2 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80174d0:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80174d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80174d4:	2b00      	cmp	r3, #0
 80174d6:	d12d      	bne.n	8017534 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80174d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174da:	2b00      	cmp	r3, #0
 80174dc:	d01c      	beq.n	8017518 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80174de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174e0:	88db      	ldrh	r3, [r3, #6]
 80174e2:	b29a      	uxth	r2, r3
 80174e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174e6:	889b      	ldrh	r3, [r3, #4]
 80174e8:	b29b      	uxth	r3, r3
 80174ea:	429a      	cmp	r2, r3
 80174ec:	d906      	bls.n	80174fc <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80174ee:	4b45      	ldr	r3, [pc, #276]	; (8017604 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80174f0:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80174f4:	4944      	ldr	r1, [pc, #272]	; (8017608 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80174f6:	4845      	ldr	r0, [pc, #276]	; (801760c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80174f8:	f001 fad0 	bl	8018a9c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80174fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174fe:	68ba      	ldr	r2, [r7, #8]
 8017500:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8017502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017504:	88db      	ldrh	r3, [r3, #6]
 8017506:	b29a      	uxth	r2, r3
 8017508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801750a:	889b      	ldrh	r3, [r3, #4]
 801750c:	b29b      	uxth	r3, r3
 801750e:	429a      	cmp	r2, r3
 8017510:	d010      	beq.n	8017534 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8017512:	2300      	movs	r3, #0
 8017514:	623b      	str	r3, [r7, #32]
 8017516:	e00d      	b.n	8017534 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8017518:	68fb      	ldr	r3, [r7, #12]
 801751a:	685b      	ldr	r3, [r3, #4]
 801751c:	2b00      	cmp	r3, #0
 801751e:	d006      	beq.n	801752e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8017520:	4b38      	ldr	r3, [pc, #224]	; (8017604 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017522:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8017526:	493a      	ldr	r1, [pc, #232]	; (8017610 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8017528:	4838      	ldr	r0, [pc, #224]	; (801760c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801752a:	f001 fab7 	bl	8018a9c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801752e:	68fb      	ldr	r3, [r7, #12]
 8017530:	68ba      	ldr	r2, [r7, #8]
 8017532:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8017534:	687b      	ldr	r3, [r7, #4]
 8017536:	2b00      	cmp	r3, #0
 8017538:	d105      	bne.n	8017546 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801753a:	68fb      	ldr	r3, [r7, #12]
 801753c:	7f9b      	ldrb	r3, [r3, #30]
 801753e:	f003 0301 	and.w	r3, r3, #1
 8017542:	2b00      	cmp	r3, #0
 8017544:	d059      	beq.n	80175fa <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8017546:	6a3b      	ldr	r3, [r7, #32]
 8017548:	2b00      	cmp	r3, #0
 801754a:	d04f      	beq.n	80175ec <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801754c:	68fb      	ldr	r3, [r7, #12]
 801754e:	685b      	ldr	r3, [r3, #4]
 8017550:	2b00      	cmp	r3, #0
 8017552:	d006      	beq.n	8017562 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8017554:	68fb      	ldr	r3, [r7, #12]
 8017556:	685b      	ldr	r3, [r3, #4]
 8017558:	685b      	ldr	r3, [r3, #4]
 801755a:	889b      	ldrh	r3, [r3, #4]
 801755c:	b29b      	uxth	r3, r3
 801755e:	2b00      	cmp	r3, #0
 8017560:	d002      	beq.n	8017568 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8017562:	2300      	movs	r3, #0
 8017564:	623b      	str	r3, [r7, #32]
 8017566:	e041      	b.n	80175ec <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8017568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801756a:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801756c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801756e:	681b      	ldr	r3, [r3, #0]
 8017570:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8017572:	e012      	b.n	801759a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8017574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017576:	685b      	ldr	r3, [r3, #4]
 8017578:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801757a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801757c:	88db      	ldrh	r3, [r3, #6]
 801757e:	b29a      	uxth	r2, r3
 8017580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017582:	889b      	ldrh	r3, [r3, #4]
 8017584:	b29b      	uxth	r3, r3
 8017586:	429a      	cmp	r2, r3
 8017588:	d002      	beq.n	8017590 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801758a:	2300      	movs	r3, #0
 801758c:	623b      	str	r3, [r7, #32]
            break;
 801758e:	e007      	b.n	80175a0 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8017590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017592:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8017594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017596:	681b      	ldr	r3, [r3, #0]
 8017598:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801759a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801759c:	2b00      	cmp	r3, #0
 801759e:	d1e9      	bne.n	8017574 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80175a0:	6a3b      	ldr	r3, [r7, #32]
 80175a2:	2b00      	cmp	r3, #0
 80175a4:	d022      	beq.n	80175ec <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80175a6:	68fb      	ldr	r3, [r7, #12]
 80175a8:	685b      	ldr	r3, [r3, #4]
 80175aa:	2b00      	cmp	r3, #0
 80175ac:	d106      	bne.n	80175bc <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80175ae:	4b15      	ldr	r3, [pc, #84]	; (8017604 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80175b0:	f240 12df 	movw	r2, #479	; 0x1df
 80175b4:	4917      	ldr	r1, [pc, #92]	; (8017614 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80175b6:	4815      	ldr	r0, [pc, #84]	; (801760c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80175b8:	f001 fa70 	bl	8018a9c <iprintf>
          LWIP_ASSERT("sanity check",
 80175bc:	68fb      	ldr	r3, [r7, #12]
 80175be:	685b      	ldr	r3, [r3, #4]
 80175c0:	685b      	ldr	r3, [r3, #4]
 80175c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80175c4:	429a      	cmp	r2, r3
 80175c6:	d106      	bne.n	80175d6 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80175c8:	4b0e      	ldr	r3, [pc, #56]	; (8017604 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80175ca:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80175ce:	4911      	ldr	r1, [pc, #68]	; (8017614 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80175d0:	480e      	ldr	r0, [pc, #56]	; (801760c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80175d2:	f001 fa63 	bl	8018a9c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80175d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175d8:	681b      	ldr	r3, [r3, #0]
 80175da:	2b00      	cmp	r3, #0
 80175dc:	d006      	beq.n	80175ec <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80175de:	4b09      	ldr	r3, [pc, #36]	; (8017604 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80175e0:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 80175e4:	490c      	ldr	r1, [pc, #48]	; (8017618 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80175e6:	4809      	ldr	r0, [pc, #36]	; (801760c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80175e8:	f001 fa58 	bl	8018a9c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80175ec:	6a3b      	ldr	r3, [r7, #32]
 80175ee:	2b00      	cmp	r3, #0
 80175f0:	bf14      	ite	ne
 80175f2:	2301      	movne	r3, #1
 80175f4:	2300      	moveq	r3, #0
 80175f6:	b2db      	uxtb	r3, r3
 80175f8:	e000      	b.n	80175fc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80175fa:	2300      	movs	r3, #0
}
 80175fc:	4618      	mov	r0, r3
 80175fe:	3730      	adds	r7, #48	; 0x30
 8017600:	46bd      	mov	sp, r7
 8017602:	bd80      	pop	{r7, pc}
 8017604:	0801c748 	.word	0x0801c748
 8017608:	0801c82c 	.word	0x0801c82c
 801760c:	0801c790 	.word	0x0801c790
 8017610:	0801c84c 	.word	0x0801c84c
 8017614:	0801c884 	.word	0x0801c884
 8017618:	0801c894 	.word	0x0801c894

0801761c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801761c:	b580      	push	{r7, lr}
 801761e:	b08e      	sub	sp, #56	; 0x38
 8017620:	af00      	add	r7, sp, #0
 8017622:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8017624:	687b      	ldr	r3, [r7, #4]
 8017626:	685b      	ldr	r3, [r3, #4]
 8017628:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801762a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801762c:	781b      	ldrb	r3, [r3, #0]
 801762e:	f003 030f 	and.w	r3, r3, #15
 8017632:	b2db      	uxtb	r3, r3
 8017634:	009b      	lsls	r3, r3, #2
 8017636:	b2db      	uxtb	r3, r3
 8017638:	2b14      	cmp	r3, #20
 801763a:	f040 8171 	bne.w	8017920 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801763e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017640:	88db      	ldrh	r3, [r3, #6]
 8017642:	b29b      	uxth	r3, r3
 8017644:	4618      	mov	r0, r3
 8017646:	f7f4 fc0b 	bl	800be60 <lwip_htons>
 801764a:	4603      	mov	r3, r0
 801764c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017650:	b29b      	uxth	r3, r3
 8017652:	00db      	lsls	r3, r3, #3
 8017654:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8017656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017658:	885b      	ldrh	r3, [r3, #2]
 801765a:	b29b      	uxth	r3, r3
 801765c:	4618      	mov	r0, r3
 801765e:	f7f4 fbff 	bl	800be60 <lwip_htons>
 8017662:	4603      	mov	r3, r0
 8017664:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8017666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017668:	781b      	ldrb	r3, [r3, #0]
 801766a:	f003 030f 	and.w	r3, r3, #15
 801766e:	b2db      	uxtb	r3, r3
 8017670:	009b      	lsls	r3, r3, #2
 8017672:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8017676:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801767a:	b29b      	uxth	r3, r3
 801767c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801767e:	429a      	cmp	r2, r3
 8017680:	f0c0 8150 	bcc.w	8017924 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8017684:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017688:	b29b      	uxth	r3, r3
 801768a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801768c:	1ad3      	subs	r3, r2, r3
 801768e:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8017690:	6878      	ldr	r0, [r7, #4]
 8017692:	f7f6 f8c1 	bl	800d818 <pbuf_clen>
 8017696:	4603      	mov	r3, r0
 8017698:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801769a:	4b8c      	ldr	r3, [pc, #560]	; (80178cc <ip4_reass+0x2b0>)
 801769c:	881b      	ldrh	r3, [r3, #0]
 801769e:	461a      	mov	r2, r3
 80176a0:	8c3b      	ldrh	r3, [r7, #32]
 80176a2:	4413      	add	r3, r2
 80176a4:	2b0a      	cmp	r3, #10
 80176a6:	dd10      	ble.n	80176ca <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80176a8:	8c3b      	ldrh	r3, [r7, #32]
 80176aa:	4619      	mov	r1, r3
 80176ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80176ae:	f7ff fd81 	bl	80171b4 <ip_reass_remove_oldest_datagram>
 80176b2:	4603      	mov	r3, r0
 80176b4:	2b00      	cmp	r3, #0
 80176b6:	f000 8137 	beq.w	8017928 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80176ba:	4b84      	ldr	r3, [pc, #528]	; (80178cc <ip4_reass+0x2b0>)
 80176bc:	881b      	ldrh	r3, [r3, #0]
 80176be:	461a      	mov	r2, r3
 80176c0:	8c3b      	ldrh	r3, [r7, #32]
 80176c2:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80176c4:	2b0a      	cmp	r3, #10
 80176c6:	f300 812f 	bgt.w	8017928 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80176ca:	4b81      	ldr	r3, [pc, #516]	; (80178d0 <ip4_reass+0x2b4>)
 80176cc:	681b      	ldr	r3, [r3, #0]
 80176ce:	633b      	str	r3, [r7, #48]	; 0x30
 80176d0:	e015      	b.n	80176fe <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80176d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80176d4:	695a      	ldr	r2, [r3, #20]
 80176d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80176d8:	68db      	ldr	r3, [r3, #12]
 80176da:	429a      	cmp	r2, r3
 80176dc:	d10c      	bne.n	80176f8 <ip4_reass+0xdc>
 80176de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80176e0:	699a      	ldr	r2, [r3, #24]
 80176e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80176e4:	691b      	ldr	r3, [r3, #16]
 80176e6:	429a      	cmp	r2, r3
 80176e8:	d106      	bne.n	80176f8 <ip4_reass+0xdc>
 80176ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80176ec:	899a      	ldrh	r2, [r3, #12]
 80176ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80176f0:	889b      	ldrh	r3, [r3, #4]
 80176f2:	b29b      	uxth	r3, r3
 80176f4:	429a      	cmp	r2, r3
 80176f6:	d006      	beq.n	8017706 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80176f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80176fa:	681b      	ldr	r3, [r3, #0]
 80176fc:	633b      	str	r3, [r7, #48]	; 0x30
 80176fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017700:	2b00      	cmp	r3, #0
 8017702:	d1e6      	bne.n	80176d2 <ip4_reass+0xb6>
 8017704:	e000      	b.n	8017708 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8017706:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8017708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801770a:	2b00      	cmp	r3, #0
 801770c:	d109      	bne.n	8017722 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801770e:	8c3b      	ldrh	r3, [r7, #32]
 8017710:	4619      	mov	r1, r3
 8017712:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017714:	f7ff fdb0 	bl	8017278 <ip_reass_enqueue_new_datagram>
 8017718:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801771a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801771c:	2b00      	cmp	r3, #0
 801771e:	d11c      	bne.n	801775a <ip4_reass+0x13e>
      goto nullreturn;
 8017720:	e105      	b.n	801792e <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8017722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017724:	88db      	ldrh	r3, [r3, #6]
 8017726:	b29b      	uxth	r3, r3
 8017728:	4618      	mov	r0, r3
 801772a:	f7f4 fb99 	bl	800be60 <lwip_htons>
 801772e:	4603      	mov	r3, r0
 8017730:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017734:	2b00      	cmp	r3, #0
 8017736:	d110      	bne.n	801775a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8017738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801773a:	89db      	ldrh	r3, [r3, #14]
 801773c:	4618      	mov	r0, r3
 801773e:	f7f4 fb8f 	bl	800be60 <lwip_htons>
 8017742:	4603      	mov	r3, r0
 8017744:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8017748:	2b00      	cmp	r3, #0
 801774a:	d006      	beq.n	801775a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801774c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801774e:	3308      	adds	r3, #8
 8017750:	2214      	movs	r2, #20
 8017752:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8017754:	4618      	mov	r0, r3
 8017756:	f001 f98b 	bl	8018a70 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801775a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801775c:	88db      	ldrh	r3, [r3, #6]
 801775e:	b29b      	uxth	r3, r3
 8017760:	f003 0320 	and.w	r3, r3, #32
 8017764:	2b00      	cmp	r3, #0
 8017766:	bf0c      	ite	eq
 8017768:	2301      	moveq	r3, #1
 801776a:	2300      	movne	r3, #0
 801776c:	b2db      	uxtb	r3, r3
 801776e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8017770:	69fb      	ldr	r3, [r7, #28]
 8017772:	2b00      	cmp	r3, #0
 8017774:	d00e      	beq.n	8017794 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8017776:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8017778:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801777a:	4413      	add	r3, r2
 801777c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801777e:	8b7a      	ldrh	r2, [r7, #26]
 8017780:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8017782:	429a      	cmp	r2, r3
 8017784:	f0c0 80a0 	bcc.w	80178c8 <ip4_reass+0x2ac>
 8017788:	8b7b      	ldrh	r3, [r7, #26]
 801778a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801778e:	4293      	cmp	r3, r2
 8017790:	f200 809a 	bhi.w	80178c8 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8017794:	69fa      	ldr	r2, [r7, #28]
 8017796:	6879      	ldr	r1, [r7, #4]
 8017798:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801779a:	f7ff fdd5 	bl	8017348 <ip_reass_chain_frag_into_datagram_and_validate>
 801779e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80177a0:	697b      	ldr	r3, [r7, #20]
 80177a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80177a6:	f000 809b 	beq.w	80178e0 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80177aa:	4b48      	ldr	r3, [pc, #288]	; (80178cc <ip4_reass+0x2b0>)
 80177ac:	881a      	ldrh	r2, [r3, #0]
 80177ae:	8c3b      	ldrh	r3, [r7, #32]
 80177b0:	4413      	add	r3, r2
 80177b2:	b29a      	uxth	r2, r3
 80177b4:	4b45      	ldr	r3, [pc, #276]	; (80178cc <ip4_reass+0x2b0>)
 80177b6:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80177b8:	69fb      	ldr	r3, [r7, #28]
 80177ba:	2b00      	cmp	r3, #0
 80177bc:	d00d      	beq.n	80177da <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80177be:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80177c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80177c2:	4413      	add	r3, r2
 80177c4:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80177c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80177c8:	8a7a      	ldrh	r2, [r7, #18]
 80177ca:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80177cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80177ce:	7f9b      	ldrb	r3, [r3, #30]
 80177d0:	f043 0301 	orr.w	r3, r3, #1
 80177d4:	b2da      	uxtb	r2, r3
 80177d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80177d8:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80177da:	697b      	ldr	r3, [r7, #20]
 80177dc:	2b01      	cmp	r3, #1
 80177de:	d171      	bne.n	80178c4 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80177e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80177e2:	8b9b      	ldrh	r3, [r3, #28]
 80177e4:	3314      	adds	r3, #20
 80177e6:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80177e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80177ea:	685b      	ldr	r3, [r3, #4]
 80177ec:	685b      	ldr	r3, [r3, #4]
 80177ee:	681b      	ldr	r3, [r3, #0]
 80177f0:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80177f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80177f4:	685b      	ldr	r3, [r3, #4]
 80177f6:	685b      	ldr	r3, [r3, #4]
 80177f8:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80177fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80177fc:	3308      	adds	r3, #8
 80177fe:	2214      	movs	r2, #20
 8017800:	4619      	mov	r1, r3
 8017802:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017804:	f001 f934 	bl	8018a70 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8017808:	8a3b      	ldrh	r3, [r7, #16]
 801780a:	4618      	mov	r0, r3
 801780c:	f7f4 fb28 	bl	800be60 <lwip_htons>
 8017810:	4603      	mov	r3, r0
 8017812:	461a      	mov	r2, r3
 8017814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017816:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8017818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801781a:	2200      	movs	r2, #0
 801781c:	719a      	strb	r2, [r3, #6]
 801781e:	2200      	movs	r2, #0
 8017820:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8017822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017824:	2200      	movs	r2, #0
 8017826:	729a      	strb	r2, [r3, #10]
 8017828:	2200      	movs	r2, #0
 801782a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801782c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801782e:	685b      	ldr	r3, [r3, #4]
 8017830:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8017832:	e00d      	b.n	8017850 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8017834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017836:	685b      	ldr	r3, [r3, #4]
 8017838:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801783a:	2114      	movs	r1, #20
 801783c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801783e:	f7f5 fed7 	bl	800d5f0 <pbuf_remove_header>
      pbuf_cat(p, r);
 8017842:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8017844:	6878      	ldr	r0, [r7, #4]
 8017846:	f7f6 f827 	bl	800d898 <pbuf_cat>
      r = iprh->next_pbuf;
 801784a:	68fb      	ldr	r3, [r7, #12]
 801784c:	681b      	ldr	r3, [r3, #0]
 801784e:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8017850:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017852:	2b00      	cmp	r3, #0
 8017854:	d1ee      	bne.n	8017834 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8017856:	4b1e      	ldr	r3, [pc, #120]	; (80178d0 <ip4_reass+0x2b4>)
 8017858:	681b      	ldr	r3, [r3, #0]
 801785a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801785c:	429a      	cmp	r2, r3
 801785e:	d102      	bne.n	8017866 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8017860:	2300      	movs	r3, #0
 8017862:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017864:	e010      	b.n	8017888 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8017866:	4b1a      	ldr	r3, [pc, #104]	; (80178d0 <ip4_reass+0x2b4>)
 8017868:	681b      	ldr	r3, [r3, #0]
 801786a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801786c:	e007      	b.n	801787e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801786e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017870:	681b      	ldr	r3, [r3, #0]
 8017872:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017874:	429a      	cmp	r2, r3
 8017876:	d006      	beq.n	8017886 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8017878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801787a:	681b      	ldr	r3, [r3, #0]
 801787c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801787e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017880:	2b00      	cmp	r3, #0
 8017882:	d1f4      	bne.n	801786e <ip4_reass+0x252>
 8017884:	e000      	b.n	8017888 <ip4_reass+0x26c>
          break;
 8017886:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8017888:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801788a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801788c:	f7ff fd2e 	bl	80172ec <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8017890:	6878      	ldr	r0, [r7, #4]
 8017892:	f7f5 ffc1 	bl	800d818 <pbuf_clen>
 8017896:	4603      	mov	r3, r0
 8017898:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801789a:	4b0c      	ldr	r3, [pc, #48]	; (80178cc <ip4_reass+0x2b0>)
 801789c:	881b      	ldrh	r3, [r3, #0]
 801789e:	8c3a      	ldrh	r2, [r7, #32]
 80178a0:	429a      	cmp	r2, r3
 80178a2:	d906      	bls.n	80178b2 <ip4_reass+0x296>
 80178a4:	4b0b      	ldr	r3, [pc, #44]	; (80178d4 <ip4_reass+0x2b8>)
 80178a6:	f240 229b 	movw	r2, #667	; 0x29b
 80178aa:	490b      	ldr	r1, [pc, #44]	; (80178d8 <ip4_reass+0x2bc>)
 80178ac:	480b      	ldr	r0, [pc, #44]	; (80178dc <ip4_reass+0x2c0>)
 80178ae:	f001 f8f5 	bl	8018a9c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80178b2:	4b06      	ldr	r3, [pc, #24]	; (80178cc <ip4_reass+0x2b0>)
 80178b4:	881a      	ldrh	r2, [r3, #0]
 80178b6:	8c3b      	ldrh	r3, [r7, #32]
 80178b8:	1ad3      	subs	r3, r2, r3
 80178ba:	b29a      	uxth	r2, r3
 80178bc:	4b03      	ldr	r3, [pc, #12]	; (80178cc <ip4_reass+0x2b0>)
 80178be:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80178c0:	687b      	ldr	r3, [r7, #4]
 80178c2:	e038      	b.n	8017936 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80178c4:	2300      	movs	r3, #0
 80178c6:	e036      	b.n	8017936 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 80178c8:	bf00      	nop
 80178ca:	e00a      	b.n	80178e2 <ip4_reass+0x2c6>
 80178cc:	2000ca18 	.word	0x2000ca18
 80178d0:	2000ca14 	.word	0x2000ca14
 80178d4:	0801c748 	.word	0x0801c748
 80178d8:	0801c8b8 	.word	0x0801c8b8
 80178dc:	0801c790 	.word	0x0801c790
    goto nullreturn_ipr;
 80178e0:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80178e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80178e4:	2b00      	cmp	r3, #0
 80178e6:	d106      	bne.n	80178f6 <ip4_reass+0x2da>
 80178e8:	4b15      	ldr	r3, [pc, #84]	; (8017940 <ip4_reass+0x324>)
 80178ea:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 80178ee:	4915      	ldr	r1, [pc, #84]	; (8017944 <ip4_reass+0x328>)
 80178f0:	4815      	ldr	r0, [pc, #84]	; (8017948 <ip4_reass+0x32c>)
 80178f2:	f001 f8d3 	bl	8018a9c <iprintf>
  if (ipr->p == NULL) {
 80178f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80178f8:	685b      	ldr	r3, [r3, #4]
 80178fa:	2b00      	cmp	r3, #0
 80178fc:	d116      	bne.n	801792c <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80178fe:	4b13      	ldr	r3, [pc, #76]	; (801794c <ip4_reass+0x330>)
 8017900:	681b      	ldr	r3, [r3, #0]
 8017902:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017904:	429a      	cmp	r2, r3
 8017906:	d006      	beq.n	8017916 <ip4_reass+0x2fa>
 8017908:	4b0d      	ldr	r3, [pc, #52]	; (8017940 <ip4_reass+0x324>)
 801790a:	f240 22ab 	movw	r2, #683	; 0x2ab
 801790e:	4910      	ldr	r1, [pc, #64]	; (8017950 <ip4_reass+0x334>)
 8017910:	480d      	ldr	r0, [pc, #52]	; (8017948 <ip4_reass+0x32c>)
 8017912:	f001 f8c3 	bl	8018a9c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8017916:	2100      	movs	r1, #0
 8017918:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801791a:	f7ff fce7 	bl	80172ec <ip_reass_dequeue_datagram>
 801791e:	e006      	b.n	801792e <ip4_reass+0x312>
    goto nullreturn;
 8017920:	bf00      	nop
 8017922:	e004      	b.n	801792e <ip4_reass+0x312>
    goto nullreturn;
 8017924:	bf00      	nop
 8017926:	e002      	b.n	801792e <ip4_reass+0x312>
      goto nullreturn;
 8017928:	bf00      	nop
 801792a:	e000      	b.n	801792e <ip4_reass+0x312>
  }

nullreturn:
 801792c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801792e:	6878      	ldr	r0, [r7, #4]
 8017930:	f7f5 fee4 	bl	800d6fc <pbuf_free>
  return NULL;
 8017934:	2300      	movs	r3, #0
}
 8017936:	4618      	mov	r0, r3
 8017938:	3738      	adds	r7, #56	; 0x38
 801793a:	46bd      	mov	sp, r7
 801793c:	bd80      	pop	{r7, pc}
 801793e:	bf00      	nop
 8017940:	0801c748 	.word	0x0801c748
 8017944:	0801c8d4 	.word	0x0801c8d4
 8017948:	0801c790 	.word	0x0801c790
 801794c:	2000ca14 	.word	0x2000ca14
 8017950:	0801c8e0 	.word	0x0801c8e0

08017954 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8017954:	b580      	push	{r7, lr}
 8017956:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8017958:	2005      	movs	r0, #5
 801795a:	f7f5 f811 	bl	800c980 <memp_malloc>
 801795e:	4603      	mov	r3, r0
}
 8017960:	4618      	mov	r0, r3
 8017962:	bd80      	pop	{r7, pc}

08017964 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8017964:	b580      	push	{r7, lr}
 8017966:	b082      	sub	sp, #8
 8017968:	af00      	add	r7, sp, #0
 801796a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801796c:	687b      	ldr	r3, [r7, #4]
 801796e:	2b00      	cmp	r3, #0
 8017970:	d106      	bne.n	8017980 <ip_frag_free_pbuf_custom_ref+0x1c>
 8017972:	4b07      	ldr	r3, [pc, #28]	; (8017990 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8017974:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8017978:	4906      	ldr	r1, [pc, #24]	; (8017994 <ip_frag_free_pbuf_custom_ref+0x30>)
 801797a:	4807      	ldr	r0, [pc, #28]	; (8017998 <ip_frag_free_pbuf_custom_ref+0x34>)
 801797c:	f001 f88e 	bl	8018a9c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8017980:	6879      	ldr	r1, [r7, #4]
 8017982:	2005      	movs	r0, #5
 8017984:	f7f5 f872 	bl	800ca6c <memp_free>
}
 8017988:	bf00      	nop
 801798a:	3708      	adds	r7, #8
 801798c:	46bd      	mov	sp, r7
 801798e:	bd80      	pop	{r7, pc}
 8017990:	0801c748 	.word	0x0801c748
 8017994:	0801c900 	.word	0x0801c900
 8017998:	0801c790 	.word	0x0801c790

0801799c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801799c:	b580      	push	{r7, lr}
 801799e:	b084      	sub	sp, #16
 80179a0:	af00      	add	r7, sp, #0
 80179a2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80179a4:	687b      	ldr	r3, [r7, #4]
 80179a6:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80179a8:	68fb      	ldr	r3, [r7, #12]
 80179aa:	2b00      	cmp	r3, #0
 80179ac:	d106      	bne.n	80179bc <ipfrag_free_pbuf_custom+0x20>
 80179ae:	4b11      	ldr	r3, [pc, #68]	; (80179f4 <ipfrag_free_pbuf_custom+0x58>)
 80179b0:	f240 22ce 	movw	r2, #718	; 0x2ce
 80179b4:	4910      	ldr	r1, [pc, #64]	; (80179f8 <ipfrag_free_pbuf_custom+0x5c>)
 80179b6:	4811      	ldr	r0, [pc, #68]	; (80179fc <ipfrag_free_pbuf_custom+0x60>)
 80179b8:	f001 f870 	bl	8018a9c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80179bc:	68fa      	ldr	r2, [r7, #12]
 80179be:	687b      	ldr	r3, [r7, #4]
 80179c0:	429a      	cmp	r2, r3
 80179c2:	d006      	beq.n	80179d2 <ipfrag_free_pbuf_custom+0x36>
 80179c4:	4b0b      	ldr	r3, [pc, #44]	; (80179f4 <ipfrag_free_pbuf_custom+0x58>)
 80179c6:	f240 22cf 	movw	r2, #719	; 0x2cf
 80179ca:	490d      	ldr	r1, [pc, #52]	; (8017a00 <ipfrag_free_pbuf_custom+0x64>)
 80179cc:	480b      	ldr	r0, [pc, #44]	; (80179fc <ipfrag_free_pbuf_custom+0x60>)
 80179ce:	f001 f865 	bl	8018a9c <iprintf>
  if (pcr->original != NULL) {
 80179d2:	68fb      	ldr	r3, [r7, #12]
 80179d4:	695b      	ldr	r3, [r3, #20]
 80179d6:	2b00      	cmp	r3, #0
 80179d8:	d004      	beq.n	80179e4 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80179da:	68fb      	ldr	r3, [r7, #12]
 80179dc:	695b      	ldr	r3, [r3, #20]
 80179de:	4618      	mov	r0, r3
 80179e0:	f7f5 fe8c 	bl	800d6fc <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80179e4:	68f8      	ldr	r0, [r7, #12]
 80179e6:	f7ff ffbd 	bl	8017964 <ip_frag_free_pbuf_custom_ref>
}
 80179ea:	bf00      	nop
 80179ec:	3710      	adds	r7, #16
 80179ee:	46bd      	mov	sp, r7
 80179f0:	bd80      	pop	{r7, pc}
 80179f2:	bf00      	nop
 80179f4:	0801c748 	.word	0x0801c748
 80179f8:	0801c90c 	.word	0x0801c90c
 80179fc:	0801c790 	.word	0x0801c790
 8017a00:	0801c918 	.word	0x0801c918

08017a04 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8017a04:	b580      	push	{r7, lr}
 8017a06:	b094      	sub	sp, #80	; 0x50
 8017a08:	af02      	add	r7, sp, #8
 8017a0a:	60f8      	str	r0, [r7, #12]
 8017a0c:	60b9      	str	r1, [r7, #8]
 8017a0e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8017a10:	2300      	movs	r3, #0
 8017a12:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8017a16:	68bb      	ldr	r3, [r7, #8]
 8017a18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017a1a:	3b14      	subs	r3, #20
 8017a1c:	2b00      	cmp	r3, #0
 8017a1e:	da00      	bge.n	8017a22 <ip4_frag+0x1e>
 8017a20:	3307      	adds	r3, #7
 8017a22:	10db      	asrs	r3, r3, #3
 8017a24:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8017a26:	2314      	movs	r3, #20
 8017a28:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8017a2a:	68fb      	ldr	r3, [r7, #12]
 8017a2c:	685b      	ldr	r3, [r3, #4]
 8017a2e:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8017a30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017a32:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8017a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a36:	781b      	ldrb	r3, [r3, #0]
 8017a38:	f003 030f 	and.w	r3, r3, #15
 8017a3c:	b2db      	uxtb	r3, r3
 8017a3e:	009b      	lsls	r3, r3, #2
 8017a40:	b2db      	uxtb	r3, r3
 8017a42:	2b14      	cmp	r3, #20
 8017a44:	d002      	beq.n	8017a4c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8017a46:	f06f 0305 	mvn.w	r3, #5
 8017a4a:	e110      	b.n	8017c6e <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8017a4c:	68fb      	ldr	r3, [r7, #12]
 8017a4e:	895b      	ldrh	r3, [r3, #10]
 8017a50:	2b13      	cmp	r3, #19
 8017a52:	d809      	bhi.n	8017a68 <ip4_frag+0x64>
 8017a54:	4b88      	ldr	r3, [pc, #544]	; (8017c78 <ip4_frag+0x274>)
 8017a56:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8017a5a:	4988      	ldr	r1, [pc, #544]	; (8017c7c <ip4_frag+0x278>)
 8017a5c:	4888      	ldr	r0, [pc, #544]	; (8017c80 <ip4_frag+0x27c>)
 8017a5e:	f001 f81d 	bl	8018a9c <iprintf>
 8017a62:	f06f 0305 	mvn.w	r3, #5
 8017a66:	e102      	b.n	8017c6e <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8017a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a6a:	88db      	ldrh	r3, [r3, #6]
 8017a6c:	b29b      	uxth	r3, r3
 8017a6e:	4618      	mov	r0, r3
 8017a70:	f7f4 f9f6 	bl	800be60 <lwip_htons>
 8017a74:	4603      	mov	r3, r0
 8017a76:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8017a78:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017a7a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017a7e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8017a82:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017a84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8017a88:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8017a8a:	68fb      	ldr	r3, [r7, #12]
 8017a8c:	891b      	ldrh	r3, [r3, #8]
 8017a8e:	3b14      	subs	r3, #20
 8017a90:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8017a94:	e0e1      	b.n	8017c5a <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8017a96:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017a98:	00db      	lsls	r3, r3, #3
 8017a9a:	b29b      	uxth	r3, r3
 8017a9c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017aa0:	4293      	cmp	r3, r2
 8017aa2:	bf28      	it	cs
 8017aa4:	4613      	movcs	r3, r2
 8017aa6:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8017aa8:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017aac:	2114      	movs	r1, #20
 8017aae:	200e      	movs	r0, #14
 8017ab0:	f7f5 fb40 	bl	800d134 <pbuf_alloc>
 8017ab4:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8017ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ab8:	2b00      	cmp	r3, #0
 8017aba:	f000 80d5 	beq.w	8017c68 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8017abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ac0:	895b      	ldrh	r3, [r3, #10]
 8017ac2:	2b13      	cmp	r3, #19
 8017ac4:	d806      	bhi.n	8017ad4 <ip4_frag+0xd0>
 8017ac6:	4b6c      	ldr	r3, [pc, #432]	; (8017c78 <ip4_frag+0x274>)
 8017ac8:	f44f 7249 	mov.w	r2, #804	; 0x324
 8017acc:	496d      	ldr	r1, [pc, #436]	; (8017c84 <ip4_frag+0x280>)
 8017ace:	486c      	ldr	r0, [pc, #432]	; (8017c80 <ip4_frag+0x27c>)
 8017ad0:	f000 ffe4 	bl	8018a9c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8017ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ad6:	685b      	ldr	r3, [r3, #4]
 8017ad8:	2214      	movs	r2, #20
 8017ada:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8017adc:	4618      	mov	r0, r3
 8017ade:	f000 ffc7 	bl	8018a70 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8017ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ae4:	685b      	ldr	r3, [r3, #4]
 8017ae6:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8017ae8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017aea:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8017aee:	e064      	b.n	8017bba <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8017af0:	68fb      	ldr	r3, [r7, #12]
 8017af2:	895a      	ldrh	r2, [r3, #10]
 8017af4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017af6:	1ad3      	subs	r3, r2, r3
 8017af8:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8017afa:	68fb      	ldr	r3, [r7, #12]
 8017afc:	895b      	ldrh	r3, [r3, #10]
 8017afe:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8017b00:	429a      	cmp	r2, r3
 8017b02:	d906      	bls.n	8017b12 <ip4_frag+0x10e>
 8017b04:	4b5c      	ldr	r3, [pc, #368]	; (8017c78 <ip4_frag+0x274>)
 8017b06:	f240 322d 	movw	r2, #813	; 0x32d
 8017b0a:	495f      	ldr	r1, [pc, #380]	; (8017c88 <ip4_frag+0x284>)
 8017b0c:	485c      	ldr	r0, [pc, #368]	; (8017c80 <ip4_frag+0x27c>)
 8017b0e:	f000 ffc5 	bl	8018a9c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8017b12:	8bfa      	ldrh	r2, [r7, #30]
 8017b14:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8017b18:	4293      	cmp	r3, r2
 8017b1a:	bf28      	it	cs
 8017b1c:	4613      	movcs	r3, r2
 8017b1e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8017b22:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8017b26:	2b00      	cmp	r3, #0
 8017b28:	d105      	bne.n	8017b36 <ip4_frag+0x132>
        poff = 0;
 8017b2a:	2300      	movs	r3, #0
 8017b2c:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8017b2e:	68fb      	ldr	r3, [r7, #12]
 8017b30:	681b      	ldr	r3, [r3, #0]
 8017b32:	60fb      	str	r3, [r7, #12]
        continue;
 8017b34:	e041      	b.n	8017bba <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8017b36:	f7ff ff0d 	bl	8017954 <ip_frag_alloc_pbuf_custom_ref>
 8017b3a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8017b3c:	69bb      	ldr	r3, [r7, #24]
 8017b3e:	2b00      	cmp	r3, #0
 8017b40:	d103      	bne.n	8017b4a <ip4_frag+0x146>
        pbuf_free(rambuf);
 8017b42:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017b44:	f7f5 fdda 	bl	800d6fc <pbuf_free>
        goto memerr;
 8017b48:	e08f      	b.n	8017c6a <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8017b4a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8017b4c:	68fb      	ldr	r3, [r7, #12]
 8017b4e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8017b50:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017b52:	4413      	add	r3, r2
 8017b54:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8017b58:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8017b5c:	9201      	str	r2, [sp, #4]
 8017b5e:	9300      	str	r3, [sp, #0]
 8017b60:	4603      	mov	r3, r0
 8017b62:	2241      	movs	r2, #65	; 0x41
 8017b64:	2000      	movs	r0, #0
 8017b66:	f7f5 fc0f 	bl	800d388 <pbuf_alloced_custom>
 8017b6a:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8017b6c:	697b      	ldr	r3, [r7, #20]
 8017b6e:	2b00      	cmp	r3, #0
 8017b70:	d106      	bne.n	8017b80 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8017b72:	69b8      	ldr	r0, [r7, #24]
 8017b74:	f7ff fef6 	bl	8017964 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8017b78:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017b7a:	f7f5 fdbf 	bl	800d6fc <pbuf_free>
        goto memerr;
 8017b7e:	e074      	b.n	8017c6a <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8017b80:	68f8      	ldr	r0, [r7, #12]
 8017b82:	f7f5 fe61 	bl	800d848 <pbuf_ref>
      pcr->original = p;
 8017b86:	69bb      	ldr	r3, [r7, #24]
 8017b88:	68fa      	ldr	r2, [r7, #12]
 8017b8a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8017b8c:	69bb      	ldr	r3, [r7, #24]
 8017b8e:	4a3f      	ldr	r2, [pc, #252]	; (8017c8c <ip4_frag+0x288>)
 8017b90:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8017b92:	6979      	ldr	r1, [r7, #20]
 8017b94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017b96:	f7f5 fe7f 	bl	800d898 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8017b9a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8017b9e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8017ba2:	1ad3      	subs	r3, r2, r3
 8017ba4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8017ba8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8017bac:	2b00      	cmp	r3, #0
 8017bae:	d004      	beq.n	8017bba <ip4_frag+0x1b6>
        poff = 0;
 8017bb0:	2300      	movs	r3, #0
 8017bb2:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8017bb4:	68fb      	ldr	r3, [r7, #12]
 8017bb6:	681b      	ldr	r3, [r3, #0]
 8017bb8:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8017bba:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8017bbe:	2b00      	cmp	r3, #0
 8017bc0:	d196      	bne.n	8017af0 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8017bc2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8017bc4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8017bc8:	4413      	add	r3, r2
 8017bca:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8017bcc:	68bb      	ldr	r3, [r7, #8]
 8017bce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017bd0:	f1a3 0213 	sub.w	r2, r3, #19
 8017bd4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017bd8:	429a      	cmp	r2, r3
 8017bda:	bfcc      	ite	gt
 8017bdc:	2301      	movgt	r3, #1
 8017bde:	2300      	movle	r3, #0
 8017be0:	b2db      	uxtb	r3, r3
 8017be2:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8017be4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8017be8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017bec:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8017bee:	6a3b      	ldr	r3, [r7, #32]
 8017bf0:	2b00      	cmp	r3, #0
 8017bf2:	d002      	beq.n	8017bfa <ip4_frag+0x1f6>
 8017bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017bf6:	2b00      	cmp	r3, #0
 8017bf8:	d003      	beq.n	8017c02 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8017bfa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017bfc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8017c00:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8017c02:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017c04:	4618      	mov	r0, r3
 8017c06:	f7f4 f92b 	bl	800be60 <lwip_htons>
 8017c0a:	4603      	mov	r3, r0
 8017c0c:	461a      	mov	r2, r3
 8017c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c10:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8017c12:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017c14:	3314      	adds	r3, #20
 8017c16:	b29b      	uxth	r3, r3
 8017c18:	4618      	mov	r0, r3
 8017c1a:	f7f4 f921 	bl	800be60 <lwip_htons>
 8017c1e:	4603      	mov	r3, r0
 8017c20:	461a      	mov	r2, r3
 8017c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c24:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8017c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c28:	2200      	movs	r2, #0
 8017c2a:	729a      	strb	r2, [r3, #10]
 8017c2c:	2200      	movs	r2, #0
 8017c2e:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8017c30:	68bb      	ldr	r3, [r7, #8]
 8017c32:	695b      	ldr	r3, [r3, #20]
 8017c34:	687a      	ldr	r2, [r7, #4]
 8017c36:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017c38:	68b8      	ldr	r0, [r7, #8]
 8017c3a:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8017c3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017c3e:	f7f5 fd5d 	bl	800d6fc <pbuf_free>
    left = (u16_t)(left - fragsize);
 8017c42:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017c46:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017c48:	1ad3      	subs	r3, r2, r3
 8017c4a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8017c4e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8017c52:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017c54:	4413      	add	r3, r2
 8017c56:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8017c5a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017c5e:	2b00      	cmp	r3, #0
 8017c60:	f47f af19 	bne.w	8017a96 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8017c64:	2300      	movs	r3, #0
 8017c66:	e002      	b.n	8017c6e <ip4_frag+0x26a>
      goto memerr;
 8017c68:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8017c6a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8017c6e:	4618      	mov	r0, r3
 8017c70:	3748      	adds	r7, #72	; 0x48
 8017c72:	46bd      	mov	sp, r7
 8017c74:	bd80      	pop	{r7, pc}
 8017c76:	bf00      	nop
 8017c78:	0801c748 	.word	0x0801c748
 8017c7c:	0801c924 	.word	0x0801c924
 8017c80:	0801c790 	.word	0x0801c790
 8017c84:	0801c940 	.word	0x0801c940
 8017c88:	0801c960 	.word	0x0801c960
 8017c8c:	0801799d 	.word	0x0801799d

08017c90 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8017c90:	b580      	push	{r7, lr}
 8017c92:	b086      	sub	sp, #24
 8017c94:	af00      	add	r7, sp, #0
 8017c96:	6078      	str	r0, [r7, #4]
 8017c98:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8017c9a:	230e      	movs	r3, #14
 8017c9c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8017c9e:	687b      	ldr	r3, [r7, #4]
 8017ca0:	895b      	ldrh	r3, [r3, #10]
 8017ca2:	2b0e      	cmp	r3, #14
 8017ca4:	d96e      	bls.n	8017d84 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8017ca6:	687b      	ldr	r3, [r7, #4]
 8017ca8:	7bdb      	ldrb	r3, [r3, #15]
 8017caa:	2b00      	cmp	r3, #0
 8017cac:	d106      	bne.n	8017cbc <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8017cae:	683b      	ldr	r3, [r7, #0]
 8017cb0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8017cb4:	3301      	adds	r3, #1
 8017cb6:	b2da      	uxtb	r2, r3
 8017cb8:	687b      	ldr	r3, [r7, #4]
 8017cba:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8017cbc:	687b      	ldr	r3, [r7, #4]
 8017cbe:	685b      	ldr	r3, [r3, #4]
 8017cc0:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8017cc2:	693b      	ldr	r3, [r7, #16]
 8017cc4:	7b1a      	ldrb	r2, [r3, #12]
 8017cc6:	7b5b      	ldrb	r3, [r3, #13]
 8017cc8:	021b      	lsls	r3, r3, #8
 8017cca:	4313      	orrs	r3, r2
 8017ccc:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8017cce:	693b      	ldr	r3, [r7, #16]
 8017cd0:	781b      	ldrb	r3, [r3, #0]
 8017cd2:	f003 0301 	and.w	r3, r3, #1
 8017cd6:	2b00      	cmp	r3, #0
 8017cd8:	d023      	beq.n	8017d22 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8017cda:	693b      	ldr	r3, [r7, #16]
 8017cdc:	781b      	ldrb	r3, [r3, #0]
 8017cde:	2b01      	cmp	r3, #1
 8017ce0:	d10f      	bne.n	8017d02 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8017ce2:	693b      	ldr	r3, [r7, #16]
 8017ce4:	785b      	ldrb	r3, [r3, #1]
 8017ce6:	2b00      	cmp	r3, #0
 8017ce8:	d11b      	bne.n	8017d22 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8017cea:	693b      	ldr	r3, [r7, #16]
 8017cec:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8017cee:	2b5e      	cmp	r3, #94	; 0x5e
 8017cf0:	d117      	bne.n	8017d22 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8017cf2:	687b      	ldr	r3, [r7, #4]
 8017cf4:	7b5b      	ldrb	r3, [r3, #13]
 8017cf6:	f043 0310 	orr.w	r3, r3, #16
 8017cfa:	b2da      	uxtb	r2, r3
 8017cfc:	687b      	ldr	r3, [r7, #4]
 8017cfe:	735a      	strb	r2, [r3, #13]
 8017d00:	e00f      	b.n	8017d22 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8017d02:	693b      	ldr	r3, [r7, #16]
 8017d04:	2206      	movs	r2, #6
 8017d06:	4928      	ldr	r1, [pc, #160]	; (8017da8 <ethernet_input+0x118>)
 8017d08:	4618      	mov	r0, r3
 8017d0a:	f000 fea1 	bl	8018a50 <memcmp>
 8017d0e:	4603      	mov	r3, r0
 8017d10:	2b00      	cmp	r3, #0
 8017d12:	d106      	bne.n	8017d22 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8017d14:	687b      	ldr	r3, [r7, #4]
 8017d16:	7b5b      	ldrb	r3, [r3, #13]
 8017d18:	f043 0308 	orr.w	r3, r3, #8
 8017d1c:	b2da      	uxtb	r2, r3
 8017d1e:	687b      	ldr	r3, [r7, #4]
 8017d20:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8017d22:	89fb      	ldrh	r3, [r7, #14]
 8017d24:	2b08      	cmp	r3, #8
 8017d26:	d003      	beq.n	8017d30 <ethernet_input+0xa0>
 8017d28:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8017d2c:	d014      	beq.n	8017d58 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8017d2e:	e032      	b.n	8017d96 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8017d30:	683b      	ldr	r3, [r7, #0]
 8017d32:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017d36:	f003 0308 	and.w	r3, r3, #8
 8017d3a:	2b00      	cmp	r3, #0
 8017d3c:	d024      	beq.n	8017d88 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8017d3e:	8afb      	ldrh	r3, [r7, #22]
 8017d40:	4619      	mov	r1, r3
 8017d42:	6878      	ldr	r0, [r7, #4]
 8017d44:	f7f5 fc54 	bl	800d5f0 <pbuf_remove_header>
 8017d48:	4603      	mov	r3, r0
 8017d4a:	2b00      	cmp	r3, #0
 8017d4c:	d11e      	bne.n	8017d8c <ethernet_input+0xfc>
        ip4_input(p, netif);
 8017d4e:	6839      	ldr	r1, [r7, #0]
 8017d50:	6878      	ldr	r0, [r7, #4]
 8017d52:	f7fe ff03 	bl	8016b5c <ip4_input>
      break;
 8017d56:	e013      	b.n	8017d80 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8017d58:	683b      	ldr	r3, [r7, #0]
 8017d5a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017d5e:	f003 0308 	and.w	r3, r3, #8
 8017d62:	2b00      	cmp	r3, #0
 8017d64:	d014      	beq.n	8017d90 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8017d66:	8afb      	ldrh	r3, [r7, #22]
 8017d68:	4619      	mov	r1, r3
 8017d6a:	6878      	ldr	r0, [r7, #4]
 8017d6c:	f7f5 fc40 	bl	800d5f0 <pbuf_remove_header>
 8017d70:	4603      	mov	r3, r0
 8017d72:	2b00      	cmp	r3, #0
 8017d74:	d10e      	bne.n	8017d94 <ethernet_input+0x104>
        etharp_input(p, netif);
 8017d76:	6839      	ldr	r1, [r7, #0]
 8017d78:	6878      	ldr	r0, [r7, #4]
 8017d7a:	f7fe f879 	bl	8015e70 <etharp_input>
      break;
 8017d7e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8017d80:	2300      	movs	r3, #0
 8017d82:	e00c      	b.n	8017d9e <ethernet_input+0x10e>
    goto free_and_return;
 8017d84:	bf00      	nop
 8017d86:	e006      	b.n	8017d96 <ethernet_input+0x106>
        goto free_and_return;
 8017d88:	bf00      	nop
 8017d8a:	e004      	b.n	8017d96 <ethernet_input+0x106>
        goto free_and_return;
 8017d8c:	bf00      	nop
 8017d8e:	e002      	b.n	8017d96 <ethernet_input+0x106>
        goto free_and_return;
 8017d90:	bf00      	nop
 8017d92:	e000      	b.n	8017d96 <ethernet_input+0x106>
        goto free_and_return;
 8017d94:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8017d96:	6878      	ldr	r0, [r7, #4]
 8017d98:	f7f5 fcb0 	bl	800d6fc <pbuf_free>
  return ERR_OK;
 8017d9c:	2300      	movs	r3, #0
}
 8017d9e:	4618      	mov	r0, r3
 8017da0:	3718      	adds	r7, #24
 8017da2:	46bd      	mov	sp, r7
 8017da4:	bd80      	pop	{r7, pc}
 8017da6:	bf00      	nop
 8017da8:	0801cbbc 	.word	0x0801cbbc

08017dac <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8017dac:	b580      	push	{r7, lr}
 8017dae:	b086      	sub	sp, #24
 8017db0:	af00      	add	r7, sp, #0
 8017db2:	60f8      	str	r0, [r7, #12]
 8017db4:	60b9      	str	r1, [r7, #8]
 8017db6:	607a      	str	r2, [r7, #4]
 8017db8:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8017dba:	8c3b      	ldrh	r3, [r7, #32]
 8017dbc:	4618      	mov	r0, r3
 8017dbe:	f7f4 f84f 	bl	800be60 <lwip_htons>
 8017dc2:	4603      	mov	r3, r0
 8017dc4:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8017dc6:	210e      	movs	r1, #14
 8017dc8:	68b8      	ldr	r0, [r7, #8]
 8017dca:	f7f5 fc01 	bl	800d5d0 <pbuf_add_header>
 8017dce:	4603      	mov	r3, r0
 8017dd0:	2b00      	cmp	r3, #0
 8017dd2:	d125      	bne.n	8017e20 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8017dd4:	68bb      	ldr	r3, [r7, #8]
 8017dd6:	685b      	ldr	r3, [r3, #4]
 8017dd8:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8017dda:	693b      	ldr	r3, [r7, #16]
 8017ddc:	8afa      	ldrh	r2, [r7, #22]
 8017dde:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8017de0:	693b      	ldr	r3, [r7, #16]
 8017de2:	2206      	movs	r2, #6
 8017de4:	6839      	ldr	r1, [r7, #0]
 8017de6:	4618      	mov	r0, r3
 8017de8:	f000 fe42 	bl	8018a70 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8017dec:	693b      	ldr	r3, [r7, #16]
 8017dee:	3306      	adds	r3, #6
 8017df0:	2206      	movs	r2, #6
 8017df2:	6879      	ldr	r1, [r7, #4]
 8017df4:	4618      	mov	r0, r3
 8017df6:	f000 fe3b 	bl	8018a70 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8017dfa:	68fb      	ldr	r3, [r7, #12]
 8017dfc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017e00:	2b06      	cmp	r3, #6
 8017e02:	d006      	beq.n	8017e12 <ethernet_output+0x66>
 8017e04:	4b0a      	ldr	r3, [pc, #40]	; (8017e30 <ethernet_output+0x84>)
 8017e06:	f44f 7299 	mov.w	r2, #306	; 0x132
 8017e0a:	490a      	ldr	r1, [pc, #40]	; (8017e34 <ethernet_output+0x88>)
 8017e0c:	480a      	ldr	r0, [pc, #40]	; (8017e38 <ethernet_output+0x8c>)
 8017e0e:	f000 fe45 	bl	8018a9c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8017e12:	68fb      	ldr	r3, [r7, #12]
 8017e14:	699b      	ldr	r3, [r3, #24]
 8017e16:	68b9      	ldr	r1, [r7, #8]
 8017e18:	68f8      	ldr	r0, [r7, #12]
 8017e1a:	4798      	blx	r3
 8017e1c:	4603      	mov	r3, r0
 8017e1e:	e002      	b.n	8017e26 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8017e20:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8017e22:	f06f 0301 	mvn.w	r3, #1
}
 8017e26:	4618      	mov	r0, r3
 8017e28:	3718      	adds	r7, #24
 8017e2a:	46bd      	mov	sp, r7
 8017e2c:	bd80      	pop	{r7, pc}
 8017e2e:	bf00      	nop
 8017e30:	0801c970 	.word	0x0801c970
 8017e34:	0801c9a8 	.word	0x0801c9a8
 8017e38:	0801c9dc 	.word	0x0801c9dc

08017e3c <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8017e3c:	b580      	push	{r7, lr}
 8017e3e:	b082      	sub	sp, #8
 8017e40:	af00      	add	r7, sp, #0
 8017e42:	6078      	str	r0, [r7, #4]
 8017e44:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 8017e46:	683b      	ldr	r3, [r7, #0]
 8017e48:	2200      	movs	r2, #0
 8017e4a:	2104      	movs	r1, #4
 8017e4c:	4618      	mov	r0, r3
 8017e4e:	f7f0 fbdf 	bl	8008610 <osMessageQueueNew>
 8017e52:	4602      	mov	r2, r0
 8017e54:	687b      	ldr	r3, [r7, #4]
 8017e56:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8017e58:	687b      	ldr	r3, [r7, #4]
 8017e5a:	681b      	ldr	r3, [r3, #0]
 8017e5c:	2b00      	cmp	r3, #0
 8017e5e:	d102      	bne.n	8017e66 <sys_mbox_new+0x2a>
    return ERR_MEM;
 8017e60:	f04f 33ff 	mov.w	r3, #4294967295
 8017e64:	e000      	b.n	8017e68 <sys_mbox_new+0x2c>

  return ERR_OK;
 8017e66:	2300      	movs	r3, #0
}
 8017e68:	4618      	mov	r0, r3
 8017e6a:	3708      	adds	r7, #8
 8017e6c:	46bd      	mov	sp, r7
 8017e6e:	bd80      	pop	{r7, pc}

08017e70 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8017e70:	b580      	push	{r7, lr}
 8017e72:	b084      	sub	sp, #16
 8017e74:	af00      	add	r7, sp, #0
 8017e76:	6078      	str	r0, [r7, #4]
 8017e78:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 8017e7a:	687b      	ldr	r3, [r7, #4]
 8017e7c:	6818      	ldr	r0, [r3, #0]
 8017e7e:	4639      	mov	r1, r7
 8017e80:	2300      	movs	r3, #0
 8017e82:	2200      	movs	r2, #0
 8017e84:	f7f0 fc38 	bl	80086f8 <osMessageQueuePut>
 8017e88:	4603      	mov	r3, r0
 8017e8a:	2b00      	cmp	r3, #0
 8017e8c:	d102      	bne.n	8017e94 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 8017e8e:	2300      	movs	r3, #0
 8017e90:	73fb      	strb	r3, [r7, #15]
 8017e92:	e001      	b.n	8017e98 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8017e94:	23ff      	movs	r3, #255	; 0xff
 8017e96:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8017e98:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8017e9c:	4618      	mov	r0, r3
 8017e9e:	3710      	adds	r7, #16
 8017ea0:	46bd      	mov	sp, r7
 8017ea2:	bd80      	pop	{r7, pc}

08017ea4 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8017ea4:	b580      	push	{r7, lr}
 8017ea6:	b086      	sub	sp, #24
 8017ea8:	af00      	add	r7, sp, #0
 8017eaa:	60f8      	str	r0, [r7, #12]
 8017eac:	60b9      	str	r1, [r7, #8]
 8017eae:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 8017eb0:	f7f0 f8be 	bl	8008030 <osKernelGetTickCount>
 8017eb4:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 8017eb6:	687b      	ldr	r3, [r7, #4]
 8017eb8:	2b00      	cmp	r3, #0
 8017eba:	d013      	beq.n	8017ee4 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 8017ebc:	68fb      	ldr	r3, [r7, #12]
 8017ebe:	6818      	ldr	r0, [r3, #0]
 8017ec0:	687b      	ldr	r3, [r7, #4]
 8017ec2:	2200      	movs	r2, #0
 8017ec4:	68b9      	ldr	r1, [r7, #8]
 8017ec6:	f7f0 fc77 	bl	80087b8 <osMessageQueueGet>
 8017eca:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 8017ecc:	693b      	ldr	r3, [r7, #16]
 8017ece:	2b00      	cmp	r3, #0
 8017ed0:	d105      	bne.n	8017ede <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 8017ed2:	f7f0 f8ad 	bl	8008030 <osKernelGetTickCount>
 8017ed6:	4602      	mov	r2, r0
 8017ed8:	697b      	ldr	r3, [r7, #20]
 8017eda:	1ad3      	subs	r3, r2, r3
 8017edc:	e00f      	b.n	8017efe <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8017ede:	f04f 33ff 	mov.w	r3, #4294967295
 8017ee2:	e00c      	b.n	8017efe <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 8017ee4:	68fb      	ldr	r3, [r7, #12]
 8017ee6:	6818      	ldr	r0, [r3, #0]
 8017ee8:	f04f 33ff 	mov.w	r3, #4294967295
 8017eec:	2200      	movs	r2, #0
 8017eee:	68b9      	ldr	r1, [r7, #8]
 8017ef0:	f7f0 fc62 	bl	80087b8 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 8017ef4:	f7f0 f89c 	bl	8008030 <osKernelGetTickCount>
 8017ef8:	4602      	mov	r2, r0
 8017efa:	697b      	ldr	r3, [r7, #20]
 8017efc:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8017efe:	4618      	mov	r0, r3
 8017f00:	3718      	adds	r7, #24
 8017f02:	46bd      	mov	sp, r7
 8017f04:	bd80      	pop	{r7, pc}

08017f06 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8017f06:	b480      	push	{r7}
 8017f08:	b083      	sub	sp, #12
 8017f0a:	af00      	add	r7, sp, #0
 8017f0c:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8017f0e:	687b      	ldr	r3, [r7, #4]
 8017f10:	681b      	ldr	r3, [r3, #0]
 8017f12:	2b00      	cmp	r3, #0
 8017f14:	d101      	bne.n	8017f1a <sys_mbox_valid+0x14>
    return 0;
 8017f16:	2300      	movs	r3, #0
 8017f18:	e000      	b.n	8017f1c <sys_mbox_valid+0x16>
  else
    return 1;
 8017f1a:	2301      	movs	r3, #1
}
 8017f1c:	4618      	mov	r0, r3
 8017f1e:	370c      	adds	r7, #12
 8017f20:	46bd      	mov	sp, r7
 8017f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f26:	4770      	bx	lr

08017f28 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8017f28:	b580      	push	{r7, lr}
 8017f2a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 8017f2c:	2000      	movs	r0, #0
 8017f2e:	f7f0 f941 	bl	80081b4 <osMutexNew>
 8017f32:	4603      	mov	r3, r0
 8017f34:	4a01      	ldr	r2, [pc, #4]	; (8017f3c <sys_init+0x14>)
 8017f36:	6013      	str	r3, [r2, #0]
#endif
}
 8017f38:	bf00      	nop
 8017f3a:	bd80      	pop	{r7, pc}
 8017f3c:	2000ca20 	.word	0x2000ca20

08017f40 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8017f40:	b580      	push	{r7, lr}
 8017f42:	b082      	sub	sp, #8
 8017f44:	af00      	add	r7, sp, #0
 8017f46:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 8017f48:	2000      	movs	r0, #0
 8017f4a:	f7f0 f933 	bl	80081b4 <osMutexNew>
 8017f4e:	4602      	mov	r2, r0
 8017f50:	687b      	ldr	r3, [r7, #4]
 8017f52:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 8017f54:	687b      	ldr	r3, [r7, #4]
 8017f56:	681b      	ldr	r3, [r3, #0]
 8017f58:	2b00      	cmp	r3, #0
 8017f5a:	d102      	bne.n	8017f62 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8017f5c:	f04f 33ff 	mov.w	r3, #4294967295
 8017f60:	e000      	b.n	8017f64 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8017f62:	2300      	movs	r3, #0
}
 8017f64:	4618      	mov	r0, r3
 8017f66:	3708      	adds	r7, #8
 8017f68:	46bd      	mov	sp, r7
 8017f6a:	bd80      	pop	{r7, pc}

08017f6c <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8017f6c:	b580      	push	{r7, lr}
 8017f6e:	b082      	sub	sp, #8
 8017f70:	af00      	add	r7, sp, #0
 8017f72:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 8017f74:	687b      	ldr	r3, [r7, #4]
 8017f76:	681b      	ldr	r3, [r3, #0]
 8017f78:	f04f 31ff 	mov.w	r1, #4294967295
 8017f7c:	4618      	mov	r0, r3
 8017f7e:	f7f0 f99f 	bl	80082c0 <osMutexAcquire>
#endif
}
 8017f82:	bf00      	nop
 8017f84:	3708      	adds	r7, #8
 8017f86:	46bd      	mov	sp, r7
 8017f88:	bd80      	pop	{r7, pc}

08017f8a <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8017f8a:	b580      	push	{r7, lr}
 8017f8c:	b082      	sub	sp, #8
 8017f8e:	af00      	add	r7, sp, #0
 8017f90:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8017f92:	687b      	ldr	r3, [r7, #4]
 8017f94:	681b      	ldr	r3, [r3, #0]
 8017f96:	4618      	mov	r0, r3
 8017f98:	f7f0 f9dd 	bl	8008356 <osMutexRelease>
}
 8017f9c:	bf00      	nop
 8017f9e:	3708      	adds	r7, #8
 8017fa0:	46bd      	mov	sp, r7
 8017fa2:	bd80      	pop	{r7, pc}

08017fa4 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8017fa4:	b580      	push	{r7, lr}
 8017fa6:	b08e      	sub	sp, #56	; 0x38
 8017fa8:	af00      	add	r7, sp, #0
 8017faa:	60f8      	str	r0, [r7, #12]
 8017fac:	60b9      	str	r1, [r7, #8]
 8017fae:	607a      	str	r2, [r7, #4]
 8017fb0:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 8017fb2:	f107 0314 	add.w	r3, r7, #20
 8017fb6:	2224      	movs	r2, #36	; 0x24
 8017fb8:	2100      	movs	r1, #0
 8017fba:	4618      	mov	r0, r3
 8017fbc:	f000 fd66 	bl	8018a8c <memset>
 8017fc0:	68fb      	ldr	r3, [r7, #12]
 8017fc2:	617b      	str	r3, [r7, #20]
 8017fc4:	683b      	ldr	r3, [r7, #0]
 8017fc6:	62bb      	str	r3, [r7, #40]	; 0x28
 8017fc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017fca:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 8017fcc:	f107 0314 	add.w	r3, r7, #20
 8017fd0:	461a      	mov	r2, r3
 8017fd2:	6879      	ldr	r1, [r7, #4]
 8017fd4:	68b8      	ldr	r0, [r7, #8]
 8017fd6:	f7f0 f840 	bl	800805a <osThreadNew>
 8017fda:	4603      	mov	r3, r0
#endif
}
 8017fdc:	4618      	mov	r0, r3
 8017fde:	3738      	adds	r7, #56	; 0x38
 8017fe0:	46bd      	mov	sp, r7
 8017fe2:	bd80      	pop	{r7, pc}

08017fe4 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8017fe4:	b580      	push	{r7, lr}
 8017fe6:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 8017fe8:	4b04      	ldr	r3, [pc, #16]	; (8017ffc <sys_arch_protect+0x18>)
 8017fea:	681b      	ldr	r3, [r3, #0]
 8017fec:	f04f 31ff 	mov.w	r1, #4294967295
 8017ff0:	4618      	mov	r0, r3
 8017ff2:	f7f0 f965 	bl	80082c0 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 8017ff6:	2301      	movs	r3, #1
}
 8017ff8:	4618      	mov	r0, r3
 8017ffa:	bd80      	pop	{r7, pc}
 8017ffc:	2000ca20 	.word	0x2000ca20

08018000 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8018000:	b580      	push	{r7, lr}
 8018002:	b082      	sub	sp, #8
 8018004:	af00      	add	r7, sp, #0
 8018006:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8018008:	4b04      	ldr	r3, [pc, #16]	; (801801c <sys_arch_unprotect+0x1c>)
 801800a:	681b      	ldr	r3, [r3, #0]
 801800c:	4618      	mov	r0, r3
 801800e:	f7f0 f9a2 	bl	8008356 <osMutexRelease>
}
 8018012:	bf00      	nop
 8018014:	3708      	adds	r7, #8
 8018016:	46bd      	mov	sp, r7
 8018018:	bd80      	pop	{r7, pc}
 801801a:	bf00      	nop
 801801c:	2000ca20 	.word	0x2000ca20

08018020 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8018020:	b580      	push	{r7, lr}
 8018022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8018024:	2200      	movs	r2, #0
 8018026:	4912      	ldr	r1, [pc, #72]	; (8018070 <MX_USB_DEVICE_Init+0x50>)
 8018028:	4812      	ldr	r0, [pc, #72]	; (8018074 <MX_USB_DEVICE_Init+0x54>)
 801802a:	f7ee fc81 	bl	8006930 <USBD_Init>
 801802e:	4603      	mov	r3, r0
 8018030:	2b00      	cmp	r3, #0
 8018032:	d001      	beq.n	8018038 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8018034:	f7e8 fbc8 	bl	80007c8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8018038:	490f      	ldr	r1, [pc, #60]	; (8018078 <MX_USB_DEVICE_Init+0x58>)
 801803a:	480e      	ldr	r0, [pc, #56]	; (8018074 <MX_USB_DEVICE_Init+0x54>)
 801803c:	f7ee fca8 	bl	8006990 <USBD_RegisterClass>
 8018040:	4603      	mov	r3, r0
 8018042:	2b00      	cmp	r3, #0
 8018044:	d001      	beq.n	801804a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8018046:	f7e8 fbbf 	bl	80007c8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801804a:	490c      	ldr	r1, [pc, #48]	; (801807c <MX_USB_DEVICE_Init+0x5c>)
 801804c:	4809      	ldr	r0, [pc, #36]	; (8018074 <MX_USB_DEVICE_Init+0x54>)
 801804e:	f7ee fbdf 	bl	8006810 <USBD_CDC_RegisterInterface>
 8018052:	4603      	mov	r3, r0
 8018054:	2b00      	cmp	r3, #0
 8018056:	d001      	beq.n	801805c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8018058:	f7e8 fbb6 	bl	80007c8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801805c:	4805      	ldr	r0, [pc, #20]	; (8018074 <MX_USB_DEVICE_Init+0x54>)
 801805e:	f7ee fccd 	bl	80069fc <USBD_Start>
 8018062:	4603      	mov	r3, r0
 8018064:	2b00      	cmp	r3, #0
 8018066:	d001      	beq.n	801806c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8018068:	f7e8 fbae 	bl	80007c8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801806c:	bf00      	nop
 801806e:	bd80      	pop	{r7, pc}
 8018070:	200000c0 	.word	0x200000c0
 8018074:	2000ca24 	.word	0x2000ca24
 8018078:	20000018 	.word	0x20000018
 801807c:	200000ac 	.word	0x200000ac

08018080 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8018080:	b580      	push	{r7, lr}
 8018082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8018084:	2200      	movs	r2, #0
 8018086:	4905      	ldr	r1, [pc, #20]	; (801809c <CDC_Init_FS+0x1c>)
 8018088:	4805      	ldr	r0, [pc, #20]	; (80180a0 <CDC_Init_FS+0x20>)
 801808a:	f7ee fbdb 	bl	8006844 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801808e:	4905      	ldr	r1, [pc, #20]	; (80180a4 <CDC_Init_FS+0x24>)
 8018090:	4803      	ldr	r0, [pc, #12]	; (80180a0 <CDC_Init_FS+0x20>)
 8018092:	f7ee fbf9 	bl	8006888 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8018096:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8018098:	4618      	mov	r0, r3
 801809a:	bd80      	pop	{r7, pc}
 801809c:	2000d500 	.word	0x2000d500
 80180a0:	2000ca24 	.word	0x2000ca24
 80180a4:	2000cd00 	.word	0x2000cd00

080180a8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80180a8:	b480      	push	{r7}
 80180aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80180ac:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80180ae:	4618      	mov	r0, r3
 80180b0:	46bd      	mov	sp, r7
 80180b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180b6:	4770      	bx	lr

080180b8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80180b8:	b480      	push	{r7}
 80180ba:	b083      	sub	sp, #12
 80180bc:	af00      	add	r7, sp, #0
 80180be:	4603      	mov	r3, r0
 80180c0:	6039      	str	r1, [r7, #0]
 80180c2:	71fb      	strb	r3, [r7, #7]
 80180c4:	4613      	mov	r3, r2
 80180c6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80180c8:	79fb      	ldrb	r3, [r7, #7]
 80180ca:	2b23      	cmp	r3, #35	; 0x23
 80180cc:	d84a      	bhi.n	8018164 <CDC_Control_FS+0xac>
 80180ce:	a201      	add	r2, pc, #4	; (adr r2, 80180d4 <CDC_Control_FS+0x1c>)
 80180d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80180d4:	08018165 	.word	0x08018165
 80180d8:	08018165 	.word	0x08018165
 80180dc:	08018165 	.word	0x08018165
 80180e0:	08018165 	.word	0x08018165
 80180e4:	08018165 	.word	0x08018165
 80180e8:	08018165 	.word	0x08018165
 80180ec:	08018165 	.word	0x08018165
 80180f0:	08018165 	.word	0x08018165
 80180f4:	08018165 	.word	0x08018165
 80180f8:	08018165 	.word	0x08018165
 80180fc:	08018165 	.word	0x08018165
 8018100:	08018165 	.word	0x08018165
 8018104:	08018165 	.word	0x08018165
 8018108:	08018165 	.word	0x08018165
 801810c:	08018165 	.word	0x08018165
 8018110:	08018165 	.word	0x08018165
 8018114:	08018165 	.word	0x08018165
 8018118:	08018165 	.word	0x08018165
 801811c:	08018165 	.word	0x08018165
 8018120:	08018165 	.word	0x08018165
 8018124:	08018165 	.word	0x08018165
 8018128:	08018165 	.word	0x08018165
 801812c:	08018165 	.word	0x08018165
 8018130:	08018165 	.word	0x08018165
 8018134:	08018165 	.word	0x08018165
 8018138:	08018165 	.word	0x08018165
 801813c:	08018165 	.word	0x08018165
 8018140:	08018165 	.word	0x08018165
 8018144:	08018165 	.word	0x08018165
 8018148:	08018165 	.word	0x08018165
 801814c:	08018165 	.word	0x08018165
 8018150:	08018165 	.word	0x08018165
 8018154:	08018165 	.word	0x08018165
 8018158:	08018165 	.word	0x08018165
 801815c:	08018165 	.word	0x08018165
 8018160:	08018165 	.word	0x08018165
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8018164:	bf00      	nop
  }

  return (USBD_OK);
 8018166:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8018168:	4618      	mov	r0, r3
 801816a:	370c      	adds	r7, #12
 801816c:	46bd      	mov	sp, r7
 801816e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018172:	4770      	bx	lr

08018174 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8018174:	b580      	push	{r7, lr}
 8018176:	b082      	sub	sp, #8
 8018178:	af00      	add	r7, sp, #0
 801817a:	6078      	str	r0, [r7, #4]
 801817c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801817e:	6879      	ldr	r1, [r7, #4]
 8018180:	4805      	ldr	r0, [pc, #20]	; (8018198 <CDC_Receive_FS+0x24>)
 8018182:	f7ee fb81 	bl	8006888 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8018186:	4804      	ldr	r0, [pc, #16]	; (8018198 <CDC_Receive_FS+0x24>)
 8018188:	f7ee fb9c 	bl	80068c4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 801818c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801818e:	4618      	mov	r0, r3
 8018190:	3708      	adds	r7, #8
 8018192:	46bd      	mov	sp, r7
 8018194:	bd80      	pop	{r7, pc}
 8018196:	bf00      	nop
 8018198:	2000ca24 	.word	0x2000ca24

0801819c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801819c:	b480      	push	{r7}
 801819e:	b087      	sub	sp, #28
 80181a0:	af00      	add	r7, sp, #0
 80181a2:	60f8      	str	r0, [r7, #12]
 80181a4:	60b9      	str	r1, [r7, #8]
 80181a6:	4613      	mov	r3, r2
 80181a8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80181aa:	2300      	movs	r3, #0
 80181ac:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80181ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80181b2:	4618      	mov	r0, r3
 80181b4:	371c      	adds	r7, #28
 80181b6:	46bd      	mov	sp, r7
 80181b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181bc:	4770      	bx	lr
	...

080181c0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80181c0:	b480      	push	{r7}
 80181c2:	b083      	sub	sp, #12
 80181c4:	af00      	add	r7, sp, #0
 80181c6:	4603      	mov	r3, r0
 80181c8:	6039      	str	r1, [r7, #0]
 80181ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80181cc:	683b      	ldr	r3, [r7, #0]
 80181ce:	2212      	movs	r2, #18
 80181d0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80181d2:	4b03      	ldr	r3, [pc, #12]	; (80181e0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80181d4:	4618      	mov	r0, r3
 80181d6:	370c      	adds	r7, #12
 80181d8:	46bd      	mov	sp, r7
 80181da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181de:	4770      	bx	lr
 80181e0:	200000dc 	.word	0x200000dc

080181e4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80181e4:	b480      	push	{r7}
 80181e6:	b083      	sub	sp, #12
 80181e8:	af00      	add	r7, sp, #0
 80181ea:	4603      	mov	r3, r0
 80181ec:	6039      	str	r1, [r7, #0]
 80181ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80181f0:	683b      	ldr	r3, [r7, #0]
 80181f2:	2204      	movs	r2, #4
 80181f4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80181f6:	4b03      	ldr	r3, [pc, #12]	; (8018204 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80181f8:	4618      	mov	r0, r3
 80181fa:	370c      	adds	r7, #12
 80181fc:	46bd      	mov	sp, r7
 80181fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018202:	4770      	bx	lr
 8018204:	200000f0 	.word	0x200000f0

08018208 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018208:	b580      	push	{r7, lr}
 801820a:	b082      	sub	sp, #8
 801820c:	af00      	add	r7, sp, #0
 801820e:	4603      	mov	r3, r0
 8018210:	6039      	str	r1, [r7, #0]
 8018212:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8018214:	79fb      	ldrb	r3, [r7, #7]
 8018216:	2b00      	cmp	r3, #0
 8018218:	d105      	bne.n	8018226 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801821a:	683a      	ldr	r2, [r7, #0]
 801821c:	4907      	ldr	r1, [pc, #28]	; (801823c <USBD_FS_ProductStrDescriptor+0x34>)
 801821e:	4808      	ldr	r0, [pc, #32]	; (8018240 <USBD_FS_ProductStrDescriptor+0x38>)
 8018220:	f7ef fd98 	bl	8007d54 <USBD_GetString>
 8018224:	e004      	b.n	8018230 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8018226:	683a      	ldr	r2, [r7, #0]
 8018228:	4904      	ldr	r1, [pc, #16]	; (801823c <USBD_FS_ProductStrDescriptor+0x34>)
 801822a:	4805      	ldr	r0, [pc, #20]	; (8018240 <USBD_FS_ProductStrDescriptor+0x38>)
 801822c:	f7ef fd92 	bl	8007d54 <USBD_GetString>
  }
  return USBD_StrDesc;
 8018230:	4b02      	ldr	r3, [pc, #8]	; (801823c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8018232:	4618      	mov	r0, r3
 8018234:	3708      	adds	r7, #8
 8018236:	46bd      	mov	sp, r7
 8018238:	bd80      	pop	{r7, pc}
 801823a:	bf00      	nop
 801823c:	2000dd00 	.word	0x2000dd00
 8018240:	0801ca04 	.word	0x0801ca04

08018244 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018244:	b580      	push	{r7, lr}
 8018246:	b082      	sub	sp, #8
 8018248:	af00      	add	r7, sp, #0
 801824a:	4603      	mov	r3, r0
 801824c:	6039      	str	r1, [r7, #0]
 801824e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8018250:	683a      	ldr	r2, [r7, #0]
 8018252:	4904      	ldr	r1, [pc, #16]	; (8018264 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8018254:	4804      	ldr	r0, [pc, #16]	; (8018268 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8018256:	f7ef fd7d 	bl	8007d54 <USBD_GetString>
  return USBD_StrDesc;
 801825a:	4b02      	ldr	r3, [pc, #8]	; (8018264 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801825c:	4618      	mov	r0, r3
 801825e:	3708      	adds	r7, #8
 8018260:	46bd      	mov	sp, r7
 8018262:	bd80      	pop	{r7, pc}
 8018264:	2000dd00 	.word	0x2000dd00
 8018268:	0801ca1c 	.word	0x0801ca1c

0801826c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801826c:	b580      	push	{r7, lr}
 801826e:	b082      	sub	sp, #8
 8018270:	af00      	add	r7, sp, #0
 8018272:	4603      	mov	r3, r0
 8018274:	6039      	str	r1, [r7, #0]
 8018276:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8018278:	683b      	ldr	r3, [r7, #0]
 801827a:	221a      	movs	r2, #26
 801827c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801827e:	f000 f843 	bl	8018308 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8018282:	4b02      	ldr	r3, [pc, #8]	; (801828c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8018284:	4618      	mov	r0, r3
 8018286:	3708      	adds	r7, #8
 8018288:	46bd      	mov	sp, r7
 801828a:	bd80      	pop	{r7, pc}
 801828c:	200000f4 	.word	0x200000f4

08018290 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018290:	b580      	push	{r7, lr}
 8018292:	b082      	sub	sp, #8
 8018294:	af00      	add	r7, sp, #0
 8018296:	4603      	mov	r3, r0
 8018298:	6039      	str	r1, [r7, #0]
 801829a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801829c:	79fb      	ldrb	r3, [r7, #7]
 801829e:	2b00      	cmp	r3, #0
 80182a0:	d105      	bne.n	80182ae <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80182a2:	683a      	ldr	r2, [r7, #0]
 80182a4:	4907      	ldr	r1, [pc, #28]	; (80182c4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80182a6:	4808      	ldr	r0, [pc, #32]	; (80182c8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80182a8:	f7ef fd54 	bl	8007d54 <USBD_GetString>
 80182ac:	e004      	b.n	80182b8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80182ae:	683a      	ldr	r2, [r7, #0]
 80182b0:	4904      	ldr	r1, [pc, #16]	; (80182c4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80182b2:	4805      	ldr	r0, [pc, #20]	; (80182c8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80182b4:	f7ef fd4e 	bl	8007d54 <USBD_GetString>
  }
  return USBD_StrDesc;
 80182b8:	4b02      	ldr	r3, [pc, #8]	; (80182c4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80182ba:	4618      	mov	r0, r3
 80182bc:	3708      	adds	r7, #8
 80182be:	46bd      	mov	sp, r7
 80182c0:	bd80      	pop	{r7, pc}
 80182c2:	bf00      	nop
 80182c4:	2000dd00 	.word	0x2000dd00
 80182c8:	0801ca30 	.word	0x0801ca30

080182cc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80182cc:	b580      	push	{r7, lr}
 80182ce:	b082      	sub	sp, #8
 80182d0:	af00      	add	r7, sp, #0
 80182d2:	4603      	mov	r3, r0
 80182d4:	6039      	str	r1, [r7, #0]
 80182d6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80182d8:	79fb      	ldrb	r3, [r7, #7]
 80182da:	2b00      	cmp	r3, #0
 80182dc:	d105      	bne.n	80182ea <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80182de:	683a      	ldr	r2, [r7, #0]
 80182e0:	4907      	ldr	r1, [pc, #28]	; (8018300 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80182e2:	4808      	ldr	r0, [pc, #32]	; (8018304 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80182e4:	f7ef fd36 	bl	8007d54 <USBD_GetString>
 80182e8:	e004      	b.n	80182f4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80182ea:	683a      	ldr	r2, [r7, #0]
 80182ec:	4904      	ldr	r1, [pc, #16]	; (8018300 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80182ee:	4805      	ldr	r0, [pc, #20]	; (8018304 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80182f0:	f7ef fd30 	bl	8007d54 <USBD_GetString>
  }
  return USBD_StrDesc;
 80182f4:	4b02      	ldr	r3, [pc, #8]	; (8018300 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80182f6:	4618      	mov	r0, r3
 80182f8:	3708      	adds	r7, #8
 80182fa:	46bd      	mov	sp, r7
 80182fc:	bd80      	pop	{r7, pc}
 80182fe:	bf00      	nop
 8018300:	2000dd00 	.word	0x2000dd00
 8018304:	0801ca3c 	.word	0x0801ca3c

08018308 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8018308:	b580      	push	{r7, lr}
 801830a:	b084      	sub	sp, #16
 801830c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801830e:	4b0f      	ldr	r3, [pc, #60]	; (801834c <Get_SerialNum+0x44>)
 8018310:	681b      	ldr	r3, [r3, #0]
 8018312:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8018314:	4b0e      	ldr	r3, [pc, #56]	; (8018350 <Get_SerialNum+0x48>)
 8018316:	681b      	ldr	r3, [r3, #0]
 8018318:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801831a:	4b0e      	ldr	r3, [pc, #56]	; (8018354 <Get_SerialNum+0x4c>)
 801831c:	681b      	ldr	r3, [r3, #0]
 801831e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8018320:	68fa      	ldr	r2, [r7, #12]
 8018322:	687b      	ldr	r3, [r7, #4]
 8018324:	4413      	add	r3, r2
 8018326:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8018328:	68fb      	ldr	r3, [r7, #12]
 801832a:	2b00      	cmp	r3, #0
 801832c:	d009      	beq.n	8018342 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801832e:	2208      	movs	r2, #8
 8018330:	4909      	ldr	r1, [pc, #36]	; (8018358 <Get_SerialNum+0x50>)
 8018332:	68f8      	ldr	r0, [r7, #12]
 8018334:	f000 f814 	bl	8018360 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8018338:	2204      	movs	r2, #4
 801833a:	4908      	ldr	r1, [pc, #32]	; (801835c <Get_SerialNum+0x54>)
 801833c:	68b8      	ldr	r0, [r7, #8]
 801833e:	f000 f80f 	bl	8018360 <IntToUnicode>
  }
}
 8018342:	bf00      	nop
 8018344:	3710      	adds	r7, #16
 8018346:	46bd      	mov	sp, r7
 8018348:	bd80      	pop	{r7, pc}
 801834a:	bf00      	nop
 801834c:	1fff7a10 	.word	0x1fff7a10
 8018350:	1fff7a14 	.word	0x1fff7a14
 8018354:	1fff7a18 	.word	0x1fff7a18
 8018358:	200000f6 	.word	0x200000f6
 801835c:	20000106 	.word	0x20000106

08018360 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8018360:	b480      	push	{r7}
 8018362:	b087      	sub	sp, #28
 8018364:	af00      	add	r7, sp, #0
 8018366:	60f8      	str	r0, [r7, #12]
 8018368:	60b9      	str	r1, [r7, #8]
 801836a:	4613      	mov	r3, r2
 801836c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801836e:	2300      	movs	r3, #0
 8018370:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8018372:	2300      	movs	r3, #0
 8018374:	75fb      	strb	r3, [r7, #23]
 8018376:	e027      	b.n	80183c8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8018378:	68fb      	ldr	r3, [r7, #12]
 801837a:	0f1b      	lsrs	r3, r3, #28
 801837c:	2b09      	cmp	r3, #9
 801837e:	d80b      	bhi.n	8018398 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8018380:	68fb      	ldr	r3, [r7, #12]
 8018382:	0f1b      	lsrs	r3, r3, #28
 8018384:	b2da      	uxtb	r2, r3
 8018386:	7dfb      	ldrb	r3, [r7, #23]
 8018388:	005b      	lsls	r3, r3, #1
 801838a:	4619      	mov	r1, r3
 801838c:	68bb      	ldr	r3, [r7, #8]
 801838e:	440b      	add	r3, r1
 8018390:	3230      	adds	r2, #48	; 0x30
 8018392:	b2d2      	uxtb	r2, r2
 8018394:	701a      	strb	r2, [r3, #0]
 8018396:	e00a      	b.n	80183ae <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8018398:	68fb      	ldr	r3, [r7, #12]
 801839a:	0f1b      	lsrs	r3, r3, #28
 801839c:	b2da      	uxtb	r2, r3
 801839e:	7dfb      	ldrb	r3, [r7, #23]
 80183a0:	005b      	lsls	r3, r3, #1
 80183a2:	4619      	mov	r1, r3
 80183a4:	68bb      	ldr	r3, [r7, #8]
 80183a6:	440b      	add	r3, r1
 80183a8:	3237      	adds	r2, #55	; 0x37
 80183aa:	b2d2      	uxtb	r2, r2
 80183ac:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80183ae:	68fb      	ldr	r3, [r7, #12]
 80183b0:	011b      	lsls	r3, r3, #4
 80183b2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80183b4:	7dfb      	ldrb	r3, [r7, #23]
 80183b6:	005b      	lsls	r3, r3, #1
 80183b8:	3301      	adds	r3, #1
 80183ba:	68ba      	ldr	r2, [r7, #8]
 80183bc:	4413      	add	r3, r2
 80183be:	2200      	movs	r2, #0
 80183c0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80183c2:	7dfb      	ldrb	r3, [r7, #23]
 80183c4:	3301      	adds	r3, #1
 80183c6:	75fb      	strb	r3, [r7, #23]
 80183c8:	7dfa      	ldrb	r2, [r7, #23]
 80183ca:	79fb      	ldrb	r3, [r7, #7]
 80183cc:	429a      	cmp	r2, r3
 80183ce:	d3d3      	bcc.n	8018378 <IntToUnicode+0x18>
  }
}
 80183d0:	bf00      	nop
 80183d2:	bf00      	nop
 80183d4:	371c      	adds	r7, #28
 80183d6:	46bd      	mov	sp, r7
 80183d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183dc:	4770      	bx	lr
	...

080183e0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80183e0:	b580      	push	{r7, lr}
 80183e2:	b08a      	sub	sp, #40	; 0x28
 80183e4:	af00      	add	r7, sp, #0
 80183e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80183e8:	f107 0314 	add.w	r3, r7, #20
 80183ec:	2200      	movs	r2, #0
 80183ee:	601a      	str	r2, [r3, #0]
 80183f0:	605a      	str	r2, [r3, #4]
 80183f2:	609a      	str	r2, [r3, #8]
 80183f4:	60da      	str	r2, [r3, #12]
 80183f6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80183f8:	687b      	ldr	r3, [r7, #4]
 80183fa:	681b      	ldr	r3, [r3, #0]
 80183fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8018400:	d13a      	bne.n	8018478 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8018402:	2300      	movs	r3, #0
 8018404:	613b      	str	r3, [r7, #16]
 8018406:	4b1e      	ldr	r3, [pc, #120]	; (8018480 <HAL_PCD_MspInit+0xa0>)
 8018408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801840a:	4a1d      	ldr	r2, [pc, #116]	; (8018480 <HAL_PCD_MspInit+0xa0>)
 801840c:	f043 0301 	orr.w	r3, r3, #1
 8018410:	6313      	str	r3, [r2, #48]	; 0x30
 8018412:	4b1b      	ldr	r3, [pc, #108]	; (8018480 <HAL_PCD_MspInit+0xa0>)
 8018414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018416:	f003 0301 	and.w	r3, r3, #1
 801841a:	613b      	str	r3, [r7, #16]
 801841c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801841e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8018422:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018424:	2302      	movs	r3, #2
 8018426:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018428:	2300      	movs	r3, #0
 801842a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801842c:	2303      	movs	r3, #3
 801842e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8018430:	230a      	movs	r3, #10
 8018432:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8018434:	f107 0314 	add.w	r3, r7, #20
 8018438:	4619      	mov	r1, r3
 801843a:	4812      	ldr	r0, [pc, #72]	; (8018484 <HAL_PCD_MspInit+0xa4>)
 801843c:	f7e9 fb12 	bl	8001a64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8018440:	4b0f      	ldr	r3, [pc, #60]	; (8018480 <HAL_PCD_MspInit+0xa0>)
 8018442:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018444:	4a0e      	ldr	r2, [pc, #56]	; (8018480 <HAL_PCD_MspInit+0xa0>)
 8018446:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801844a:	6353      	str	r3, [r2, #52]	; 0x34
 801844c:	2300      	movs	r3, #0
 801844e:	60fb      	str	r3, [r7, #12]
 8018450:	4b0b      	ldr	r3, [pc, #44]	; (8018480 <HAL_PCD_MspInit+0xa0>)
 8018452:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018454:	4a0a      	ldr	r2, [pc, #40]	; (8018480 <HAL_PCD_MspInit+0xa0>)
 8018456:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801845a:	6453      	str	r3, [r2, #68]	; 0x44
 801845c:	4b08      	ldr	r3, [pc, #32]	; (8018480 <HAL_PCD_MspInit+0xa0>)
 801845e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018460:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8018464:	60fb      	str	r3, [r7, #12]
 8018466:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8018468:	2200      	movs	r2, #0
 801846a:	2105      	movs	r1, #5
 801846c:	2043      	movs	r0, #67	; 0x43
 801846e:	f7e8 fc8d 	bl	8000d8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8018472:	2043      	movs	r0, #67	; 0x43
 8018474:	f7e8 fca6 	bl	8000dc4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8018478:	bf00      	nop
 801847a:	3728      	adds	r7, #40	; 0x28
 801847c:	46bd      	mov	sp, r7
 801847e:	bd80      	pop	{r7, pc}
 8018480:	40023800 	.word	0x40023800
 8018484:	40020000 	.word	0x40020000

08018488 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018488:	b580      	push	{r7, lr}
 801848a:	b082      	sub	sp, #8
 801848c:	af00      	add	r7, sp, #0
 801848e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8018490:	687b      	ldr	r3, [r7, #4]
 8018492:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8018496:	687b      	ldr	r3, [r7, #4]
 8018498:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 801849c:	4619      	mov	r1, r3
 801849e:	4610      	mov	r0, r2
 80184a0:	f7ee faf9 	bl	8006a96 <USBD_LL_SetupStage>
}
 80184a4:	bf00      	nop
 80184a6:	3708      	adds	r7, #8
 80184a8:	46bd      	mov	sp, r7
 80184aa:	bd80      	pop	{r7, pc}

080184ac <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80184ac:	b580      	push	{r7, lr}
 80184ae:	b082      	sub	sp, #8
 80184b0:	af00      	add	r7, sp, #0
 80184b2:	6078      	str	r0, [r7, #4]
 80184b4:	460b      	mov	r3, r1
 80184b6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80184b8:	687b      	ldr	r3, [r7, #4]
 80184ba:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80184be:	78fa      	ldrb	r2, [r7, #3]
 80184c0:	6879      	ldr	r1, [r7, #4]
 80184c2:	4613      	mov	r3, r2
 80184c4:	00db      	lsls	r3, r3, #3
 80184c6:	4413      	add	r3, r2
 80184c8:	009b      	lsls	r3, r3, #2
 80184ca:	440b      	add	r3, r1
 80184cc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80184d0:	681a      	ldr	r2, [r3, #0]
 80184d2:	78fb      	ldrb	r3, [r7, #3]
 80184d4:	4619      	mov	r1, r3
 80184d6:	f7ee fb33 	bl	8006b40 <USBD_LL_DataOutStage>
}
 80184da:	bf00      	nop
 80184dc:	3708      	adds	r7, #8
 80184de:	46bd      	mov	sp, r7
 80184e0:	bd80      	pop	{r7, pc}

080184e2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80184e2:	b580      	push	{r7, lr}
 80184e4:	b082      	sub	sp, #8
 80184e6:	af00      	add	r7, sp, #0
 80184e8:	6078      	str	r0, [r7, #4]
 80184ea:	460b      	mov	r3, r1
 80184ec:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80184ee:	687b      	ldr	r3, [r7, #4]
 80184f0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80184f4:	78fa      	ldrb	r2, [r7, #3]
 80184f6:	6879      	ldr	r1, [r7, #4]
 80184f8:	4613      	mov	r3, r2
 80184fa:	00db      	lsls	r3, r3, #3
 80184fc:	4413      	add	r3, r2
 80184fe:	009b      	lsls	r3, r3, #2
 8018500:	440b      	add	r3, r1
 8018502:	334c      	adds	r3, #76	; 0x4c
 8018504:	681a      	ldr	r2, [r3, #0]
 8018506:	78fb      	ldrb	r3, [r7, #3]
 8018508:	4619      	mov	r1, r3
 801850a:	f7ee fbcc 	bl	8006ca6 <USBD_LL_DataInStage>
}
 801850e:	bf00      	nop
 8018510:	3708      	adds	r7, #8
 8018512:	46bd      	mov	sp, r7
 8018514:	bd80      	pop	{r7, pc}

08018516 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018516:	b580      	push	{r7, lr}
 8018518:	b082      	sub	sp, #8
 801851a:	af00      	add	r7, sp, #0
 801851c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801851e:	687b      	ldr	r3, [r7, #4]
 8018520:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8018524:	4618      	mov	r0, r3
 8018526:	f7ee fd00 	bl	8006f2a <USBD_LL_SOF>
}
 801852a:	bf00      	nop
 801852c:	3708      	adds	r7, #8
 801852e:	46bd      	mov	sp, r7
 8018530:	bd80      	pop	{r7, pc}

08018532 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018532:	b580      	push	{r7, lr}
 8018534:	b084      	sub	sp, #16
 8018536:	af00      	add	r7, sp, #0
 8018538:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801853a:	2301      	movs	r3, #1
 801853c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801853e:	687b      	ldr	r3, [r7, #4]
 8018540:	68db      	ldr	r3, [r3, #12]
 8018542:	2b00      	cmp	r3, #0
 8018544:	d102      	bne.n	801854c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8018546:	2300      	movs	r3, #0
 8018548:	73fb      	strb	r3, [r7, #15]
 801854a:	e008      	b.n	801855e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801854c:	687b      	ldr	r3, [r7, #4]
 801854e:	68db      	ldr	r3, [r3, #12]
 8018550:	2b02      	cmp	r3, #2
 8018552:	d102      	bne.n	801855a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8018554:	2301      	movs	r3, #1
 8018556:	73fb      	strb	r3, [r7, #15]
 8018558:	e001      	b.n	801855e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801855a:	f7e8 f935 	bl	80007c8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801855e:	687b      	ldr	r3, [r7, #4]
 8018560:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8018564:	7bfa      	ldrb	r2, [r7, #15]
 8018566:	4611      	mov	r1, r2
 8018568:	4618      	mov	r0, r3
 801856a:	f7ee fca0 	bl	8006eae <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801856e:	687b      	ldr	r3, [r7, #4]
 8018570:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8018574:	4618      	mov	r0, r3
 8018576:	f7ee fc48 	bl	8006e0a <USBD_LL_Reset>
}
 801857a:	bf00      	nop
 801857c:	3710      	adds	r7, #16
 801857e:	46bd      	mov	sp, r7
 8018580:	bd80      	pop	{r7, pc}
	...

08018584 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018584:	b580      	push	{r7, lr}
 8018586:	b082      	sub	sp, #8
 8018588:	af00      	add	r7, sp, #0
 801858a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801858c:	687b      	ldr	r3, [r7, #4]
 801858e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8018592:	4618      	mov	r0, r3
 8018594:	f7ee fc9b 	bl	8006ece <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8018598:	687b      	ldr	r3, [r7, #4]
 801859a:	681b      	ldr	r3, [r3, #0]
 801859c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80185a0:	681b      	ldr	r3, [r3, #0]
 80185a2:	687a      	ldr	r2, [r7, #4]
 80185a4:	6812      	ldr	r2, [r2, #0]
 80185a6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80185aa:	f043 0301 	orr.w	r3, r3, #1
 80185ae:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80185b0:	687b      	ldr	r3, [r7, #4]
 80185b2:	6a1b      	ldr	r3, [r3, #32]
 80185b4:	2b00      	cmp	r3, #0
 80185b6:	d005      	beq.n	80185c4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80185b8:	4b04      	ldr	r3, [pc, #16]	; (80185cc <HAL_PCD_SuspendCallback+0x48>)
 80185ba:	691b      	ldr	r3, [r3, #16]
 80185bc:	4a03      	ldr	r2, [pc, #12]	; (80185cc <HAL_PCD_SuspendCallback+0x48>)
 80185be:	f043 0306 	orr.w	r3, r3, #6
 80185c2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80185c4:	bf00      	nop
 80185c6:	3708      	adds	r7, #8
 80185c8:	46bd      	mov	sp, r7
 80185ca:	bd80      	pop	{r7, pc}
 80185cc:	e000ed00 	.word	0xe000ed00

080185d0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80185d0:	b580      	push	{r7, lr}
 80185d2:	b082      	sub	sp, #8
 80185d4:	af00      	add	r7, sp, #0
 80185d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80185d8:	687b      	ldr	r3, [r7, #4]
 80185da:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80185de:	4618      	mov	r0, r3
 80185e0:	f7ee fc8b 	bl	8006efa <USBD_LL_Resume>
}
 80185e4:	bf00      	nop
 80185e6:	3708      	adds	r7, #8
 80185e8:	46bd      	mov	sp, r7
 80185ea:	bd80      	pop	{r7, pc}

080185ec <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80185ec:	b580      	push	{r7, lr}
 80185ee:	b082      	sub	sp, #8
 80185f0:	af00      	add	r7, sp, #0
 80185f2:	6078      	str	r0, [r7, #4]
 80185f4:	460b      	mov	r3, r1
 80185f6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80185f8:	687b      	ldr	r3, [r7, #4]
 80185fa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80185fe:	78fa      	ldrb	r2, [r7, #3]
 8018600:	4611      	mov	r1, r2
 8018602:	4618      	mov	r0, r3
 8018604:	f7ee fce3 	bl	8006fce <USBD_LL_IsoOUTIncomplete>
}
 8018608:	bf00      	nop
 801860a:	3708      	adds	r7, #8
 801860c:	46bd      	mov	sp, r7
 801860e:	bd80      	pop	{r7, pc}

08018610 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018610:	b580      	push	{r7, lr}
 8018612:	b082      	sub	sp, #8
 8018614:	af00      	add	r7, sp, #0
 8018616:	6078      	str	r0, [r7, #4]
 8018618:	460b      	mov	r3, r1
 801861a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801861c:	687b      	ldr	r3, [r7, #4]
 801861e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8018622:	78fa      	ldrb	r2, [r7, #3]
 8018624:	4611      	mov	r1, r2
 8018626:	4618      	mov	r0, r3
 8018628:	f7ee fc9f 	bl	8006f6a <USBD_LL_IsoINIncomplete>
}
 801862c:	bf00      	nop
 801862e:	3708      	adds	r7, #8
 8018630:	46bd      	mov	sp, r7
 8018632:	bd80      	pop	{r7, pc}

08018634 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018634:	b580      	push	{r7, lr}
 8018636:	b082      	sub	sp, #8
 8018638:	af00      	add	r7, sp, #0
 801863a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801863c:	687b      	ldr	r3, [r7, #4]
 801863e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8018642:	4618      	mov	r0, r3
 8018644:	f7ee fcf5 	bl	8007032 <USBD_LL_DevConnected>
}
 8018648:	bf00      	nop
 801864a:	3708      	adds	r7, #8
 801864c:	46bd      	mov	sp, r7
 801864e:	bd80      	pop	{r7, pc}

08018650 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018650:	b580      	push	{r7, lr}
 8018652:	b082      	sub	sp, #8
 8018654:	af00      	add	r7, sp, #0
 8018656:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8018658:	687b      	ldr	r3, [r7, #4]
 801865a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801865e:	4618      	mov	r0, r3
 8018660:	f7ee fcf2 	bl	8007048 <USBD_LL_DevDisconnected>
}
 8018664:	bf00      	nop
 8018666:	3708      	adds	r7, #8
 8018668:	46bd      	mov	sp, r7
 801866a:	bd80      	pop	{r7, pc}

0801866c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801866c:	b580      	push	{r7, lr}
 801866e:	b082      	sub	sp, #8
 8018670:	af00      	add	r7, sp, #0
 8018672:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8018674:	687b      	ldr	r3, [r7, #4]
 8018676:	781b      	ldrb	r3, [r3, #0]
 8018678:	2b00      	cmp	r3, #0
 801867a:	d13c      	bne.n	80186f6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801867c:	4a20      	ldr	r2, [pc, #128]	; (8018700 <USBD_LL_Init+0x94>)
 801867e:	687b      	ldr	r3, [r7, #4]
 8018680:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8018684:	687b      	ldr	r3, [r7, #4]
 8018686:	4a1e      	ldr	r2, [pc, #120]	; (8018700 <USBD_LL_Init+0x94>)
 8018688:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801868c:	4b1c      	ldr	r3, [pc, #112]	; (8018700 <USBD_LL_Init+0x94>)
 801868e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8018692:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8018694:	4b1a      	ldr	r3, [pc, #104]	; (8018700 <USBD_LL_Init+0x94>)
 8018696:	2204      	movs	r2, #4
 8018698:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801869a:	4b19      	ldr	r3, [pc, #100]	; (8018700 <USBD_LL_Init+0x94>)
 801869c:	2202      	movs	r2, #2
 801869e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80186a0:	4b17      	ldr	r3, [pc, #92]	; (8018700 <USBD_LL_Init+0x94>)
 80186a2:	2200      	movs	r2, #0
 80186a4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80186a6:	4b16      	ldr	r3, [pc, #88]	; (8018700 <USBD_LL_Init+0x94>)
 80186a8:	2202      	movs	r2, #2
 80186aa:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80186ac:	4b14      	ldr	r3, [pc, #80]	; (8018700 <USBD_LL_Init+0x94>)
 80186ae:	2200      	movs	r2, #0
 80186b0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80186b2:	4b13      	ldr	r3, [pc, #76]	; (8018700 <USBD_LL_Init+0x94>)
 80186b4:	2200      	movs	r2, #0
 80186b6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80186b8:	4b11      	ldr	r3, [pc, #68]	; (8018700 <USBD_LL_Init+0x94>)
 80186ba:	2200      	movs	r2, #0
 80186bc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80186be:	4b10      	ldr	r3, [pc, #64]	; (8018700 <USBD_LL_Init+0x94>)
 80186c0:	2200      	movs	r2, #0
 80186c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80186c4:	4b0e      	ldr	r3, [pc, #56]	; (8018700 <USBD_LL_Init+0x94>)
 80186c6:	2200      	movs	r2, #0
 80186c8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80186ca:	480d      	ldr	r0, [pc, #52]	; (8018700 <USBD_LL_Init+0x94>)
 80186cc:	f7e9 fba3 	bl	8001e16 <HAL_PCD_Init>
 80186d0:	4603      	mov	r3, r0
 80186d2:	2b00      	cmp	r3, #0
 80186d4:	d001      	beq.n	80186da <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80186d6:	f7e8 f877 	bl	80007c8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80186da:	2180      	movs	r1, #128	; 0x80
 80186dc:	4808      	ldr	r0, [pc, #32]	; (8018700 <USBD_LL_Init+0x94>)
 80186de:	f7ea fdfa 	bl	80032d6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80186e2:	2240      	movs	r2, #64	; 0x40
 80186e4:	2100      	movs	r1, #0
 80186e6:	4806      	ldr	r0, [pc, #24]	; (8018700 <USBD_LL_Init+0x94>)
 80186e8:	f7ea fdae 	bl	8003248 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80186ec:	2280      	movs	r2, #128	; 0x80
 80186ee:	2101      	movs	r1, #1
 80186f0:	4803      	ldr	r0, [pc, #12]	; (8018700 <USBD_LL_Init+0x94>)
 80186f2:	f7ea fda9 	bl	8003248 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80186f6:	2300      	movs	r3, #0
}
 80186f8:	4618      	mov	r0, r3
 80186fa:	3708      	adds	r7, #8
 80186fc:	46bd      	mov	sp, r7
 80186fe:	bd80      	pop	{r7, pc}
 8018700:	2000df00 	.word	0x2000df00

08018704 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8018704:	b580      	push	{r7, lr}
 8018706:	b084      	sub	sp, #16
 8018708:	af00      	add	r7, sp, #0
 801870a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801870c:	2300      	movs	r3, #0
 801870e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018710:	2300      	movs	r3, #0
 8018712:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8018714:	687b      	ldr	r3, [r7, #4]
 8018716:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801871a:	4618      	mov	r0, r3
 801871c:	f7e9 fc98 	bl	8002050 <HAL_PCD_Start>
 8018720:	4603      	mov	r3, r0
 8018722:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018724:	7bfb      	ldrb	r3, [r7, #15]
 8018726:	4618      	mov	r0, r3
 8018728:	f000 f942 	bl	80189b0 <USBD_Get_USB_Status>
 801872c:	4603      	mov	r3, r0
 801872e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018730:	7bbb      	ldrb	r3, [r7, #14]
}
 8018732:	4618      	mov	r0, r3
 8018734:	3710      	adds	r7, #16
 8018736:	46bd      	mov	sp, r7
 8018738:	bd80      	pop	{r7, pc}

0801873a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801873a:	b580      	push	{r7, lr}
 801873c:	b084      	sub	sp, #16
 801873e:	af00      	add	r7, sp, #0
 8018740:	6078      	str	r0, [r7, #4]
 8018742:	4608      	mov	r0, r1
 8018744:	4611      	mov	r1, r2
 8018746:	461a      	mov	r2, r3
 8018748:	4603      	mov	r3, r0
 801874a:	70fb      	strb	r3, [r7, #3]
 801874c:	460b      	mov	r3, r1
 801874e:	70bb      	strb	r3, [r7, #2]
 8018750:	4613      	mov	r3, r2
 8018752:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018754:	2300      	movs	r3, #0
 8018756:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018758:	2300      	movs	r3, #0
 801875a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801875c:	687b      	ldr	r3, [r7, #4]
 801875e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8018762:	78bb      	ldrb	r3, [r7, #2]
 8018764:	883a      	ldrh	r2, [r7, #0]
 8018766:	78f9      	ldrb	r1, [r7, #3]
 8018768:	f7ea f969 	bl	8002a3e <HAL_PCD_EP_Open>
 801876c:	4603      	mov	r3, r0
 801876e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018770:	7bfb      	ldrb	r3, [r7, #15]
 8018772:	4618      	mov	r0, r3
 8018774:	f000 f91c 	bl	80189b0 <USBD_Get_USB_Status>
 8018778:	4603      	mov	r3, r0
 801877a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801877c:	7bbb      	ldrb	r3, [r7, #14]
}
 801877e:	4618      	mov	r0, r3
 8018780:	3710      	adds	r7, #16
 8018782:	46bd      	mov	sp, r7
 8018784:	bd80      	pop	{r7, pc}

08018786 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018786:	b580      	push	{r7, lr}
 8018788:	b084      	sub	sp, #16
 801878a:	af00      	add	r7, sp, #0
 801878c:	6078      	str	r0, [r7, #4]
 801878e:	460b      	mov	r3, r1
 8018790:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018792:	2300      	movs	r3, #0
 8018794:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018796:	2300      	movs	r3, #0
 8018798:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801879a:	687b      	ldr	r3, [r7, #4]
 801879c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80187a0:	78fa      	ldrb	r2, [r7, #3]
 80187a2:	4611      	mov	r1, r2
 80187a4:	4618      	mov	r0, r3
 80187a6:	f7ea f9b2 	bl	8002b0e <HAL_PCD_EP_Close>
 80187aa:	4603      	mov	r3, r0
 80187ac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80187ae:	7bfb      	ldrb	r3, [r7, #15]
 80187b0:	4618      	mov	r0, r3
 80187b2:	f000 f8fd 	bl	80189b0 <USBD_Get_USB_Status>
 80187b6:	4603      	mov	r3, r0
 80187b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80187ba:	7bbb      	ldrb	r3, [r7, #14]
}
 80187bc:	4618      	mov	r0, r3
 80187be:	3710      	adds	r7, #16
 80187c0:	46bd      	mov	sp, r7
 80187c2:	bd80      	pop	{r7, pc}

080187c4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80187c4:	b580      	push	{r7, lr}
 80187c6:	b084      	sub	sp, #16
 80187c8:	af00      	add	r7, sp, #0
 80187ca:	6078      	str	r0, [r7, #4]
 80187cc:	460b      	mov	r3, r1
 80187ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80187d0:	2300      	movs	r3, #0
 80187d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80187d4:	2300      	movs	r3, #0
 80187d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80187d8:	687b      	ldr	r3, [r7, #4]
 80187da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80187de:	78fa      	ldrb	r2, [r7, #3]
 80187e0:	4611      	mov	r1, r2
 80187e2:	4618      	mov	r0, r3
 80187e4:	f7ea fa8a 	bl	8002cfc <HAL_PCD_EP_SetStall>
 80187e8:	4603      	mov	r3, r0
 80187ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80187ec:	7bfb      	ldrb	r3, [r7, #15]
 80187ee:	4618      	mov	r0, r3
 80187f0:	f000 f8de 	bl	80189b0 <USBD_Get_USB_Status>
 80187f4:	4603      	mov	r3, r0
 80187f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80187f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80187fa:	4618      	mov	r0, r3
 80187fc:	3710      	adds	r7, #16
 80187fe:	46bd      	mov	sp, r7
 8018800:	bd80      	pop	{r7, pc}

08018802 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018802:	b580      	push	{r7, lr}
 8018804:	b084      	sub	sp, #16
 8018806:	af00      	add	r7, sp, #0
 8018808:	6078      	str	r0, [r7, #4]
 801880a:	460b      	mov	r3, r1
 801880c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801880e:	2300      	movs	r3, #0
 8018810:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018812:	2300      	movs	r3, #0
 8018814:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8018816:	687b      	ldr	r3, [r7, #4]
 8018818:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801881c:	78fa      	ldrb	r2, [r7, #3]
 801881e:	4611      	mov	r1, r2
 8018820:	4618      	mov	r0, r3
 8018822:	f7ea facf 	bl	8002dc4 <HAL_PCD_EP_ClrStall>
 8018826:	4603      	mov	r3, r0
 8018828:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801882a:	7bfb      	ldrb	r3, [r7, #15]
 801882c:	4618      	mov	r0, r3
 801882e:	f000 f8bf 	bl	80189b0 <USBD_Get_USB_Status>
 8018832:	4603      	mov	r3, r0
 8018834:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018836:	7bbb      	ldrb	r3, [r7, #14]
}
 8018838:	4618      	mov	r0, r3
 801883a:	3710      	adds	r7, #16
 801883c:	46bd      	mov	sp, r7
 801883e:	bd80      	pop	{r7, pc}

08018840 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018840:	b480      	push	{r7}
 8018842:	b085      	sub	sp, #20
 8018844:	af00      	add	r7, sp, #0
 8018846:	6078      	str	r0, [r7, #4]
 8018848:	460b      	mov	r3, r1
 801884a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801884c:	687b      	ldr	r3, [r7, #4]
 801884e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8018852:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8018854:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018858:	2b00      	cmp	r3, #0
 801885a:	da0b      	bge.n	8018874 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801885c:	78fb      	ldrb	r3, [r7, #3]
 801885e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8018862:	68f9      	ldr	r1, [r7, #12]
 8018864:	4613      	mov	r3, r2
 8018866:	00db      	lsls	r3, r3, #3
 8018868:	4413      	add	r3, r2
 801886a:	009b      	lsls	r3, r3, #2
 801886c:	440b      	add	r3, r1
 801886e:	333e      	adds	r3, #62	; 0x3e
 8018870:	781b      	ldrb	r3, [r3, #0]
 8018872:	e00b      	b.n	801888c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8018874:	78fb      	ldrb	r3, [r7, #3]
 8018876:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801887a:	68f9      	ldr	r1, [r7, #12]
 801887c:	4613      	mov	r3, r2
 801887e:	00db      	lsls	r3, r3, #3
 8018880:	4413      	add	r3, r2
 8018882:	009b      	lsls	r3, r3, #2
 8018884:	440b      	add	r3, r1
 8018886:	f203 237e 	addw	r3, r3, #638	; 0x27e
 801888a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801888c:	4618      	mov	r0, r3
 801888e:	3714      	adds	r7, #20
 8018890:	46bd      	mov	sp, r7
 8018892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018896:	4770      	bx	lr

08018898 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8018898:	b580      	push	{r7, lr}
 801889a:	b084      	sub	sp, #16
 801889c:	af00      	add	r7, sp, #0
 801889e:	6078      	str	r0, [r7, #4]
 80188a0:	460b      	mov	r3, r1
 80188a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80188a4:	2300      	movs	r3, #0
 80188a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80188a8:	2300      	movs	r3, #0
 80188aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80188ac:	687b      	ldr	r3, [r7, #4]
 80188ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80188b2:	78fa      	ldrb	r2, [r7, #3]
 80188b4:	4611      	mov	r1, r2
 80188b6:	4618      	mov	r0, r3
 80188b8:	f7ea f89c 	bl	80029f4 <HAL_PCD_SetAddress>
 80188bc:	4603      	mov	r3, r0
 80188be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80188c0:	7bfb      	ldrb	r3, [r7, #15]
 80188c2:	4618      	mov	r0, r3
 80188c4:	f000 f874 	bl	80189b0 <USBD_Get_USB_Status>
 80188c8:	4603      	mov	r3, r0
 80188ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80188cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80188ce:	4618      	mov	r0, r3
 80188d0:	3710      	adds	r7, #16
 80188d2:	46bd      	mov	sp, r7
 80188d4:	bd80      	pop	{r7, pc}

080188d6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80188d6:	b580      	push	{r7, lr}
 80188d8:	b086      	sub	sp, #24
 80188da:	af00      	add	r7, sp, #0
 80188dc:	60f8      	str	r0, [r7, #12]
 80188de:	607a      	str	r2, [r7, #4]
 80188e0:	603b      	str	r3, [r7, #0]
 80188e2:	460b      	mov	r3, r1
 80188e4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80188e6:	2300      	movs	r3, #0
 80188e8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80188ea:	2300      	movs	r3, #0
 80188ec:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80188ee:	68fb      	ldr	r3, [r7, #12]
 80188f0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80188f4:	7af9      	ldrb	r1, [r7, #11]
 80188f6:	683b      	ldr	r3, [r7, #0]
 80188f8:	687a      	ldr	r2, [r7, #4]
 80188fa:	f7ea f9b5 	bl	8002c68 <HAL_PCD_EP_Transmit>
 80188fe:	4603      	mov	r3, r0
 8018900:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018902:	7dfb      	ldrb	r3, [r7, #23]
 8018904:	4618      	mov	r0, r3
 8018906:	f000 f853 	bl	80189b0 <USBD_Get_USB_Status>
 801890a:	4603      	mov	r3, r0
 801890c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801890e:	7dbb      	ldrb	r3, [r7, #22]
}
 8018910:	4618      	mov	r0, r3
 8018912:	3718      	adds	r7, #24
 8018914:	46bd      	mov	sp, r7
 8018916:	bd80      	pop	{r7, pc}

08018918 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8018918:	b580      	push	{r7, lr}
 801891a:	b086      	sub	sp, #24
 801891c:	af00      	add	r7, sp, #0
 801891e:	60f8      	str	r0, [r7, #12]
 8018920:	607a      	str	r2, [r7, #4]
 8018922:	603b      	str	r3, [r7, #0]
 8018924:	460b      	mov	r3, r1
 8018926:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018928:	2300      	movs	r3, #0
 801892a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801892c:	2300      	movs	r3, #0
 801892e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8018930:	68fb      	ldr	r3, [r7, #12]
 8018932:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8018936:	7af9      	ldrb	r1, [r7, #11]
 8018938:	683b      	ldr	r3, [r7, #0]
 801893a:	687a      	ldr	r2, [r7, #4]
 801893c:	f7ea f931 	bl	8002ba2 <HAL_PCD_EP_Receive>
 8018940:	4603      	mov	r3, r0
 8018942:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018944:	7dfb      	ldrb	r3, [r7, #23]
 8018946:	4618      	mov	r0, r3
 8018948:	f000 f832 	bl	80189b0 <USBD_Get_USB_Status>
 801894c:	4603      	mov	r3, r0
 801894e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8018950:	7dbb      	ldrb	r3, [r7, #22]
}
 8018952:	4618      	mov	r0, r3
 8018954:	3718      	adds	r7, #24
 8018956:	46bd      	mov	sp, r7
 8018958:	bd80      	pop	{r7, pc}

0801895a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801895a:	b580      	push	{r7, lr}
 801895c:	b082      	sub	sp, #8
 801895e:	af00      	add	r7, sp, #0
 8018960:	6078      	str	r0, [r7, #4]
 8018962:	460b      	mov	r3, r1
 8018964:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8018966:	687b      	ldr	r3, [r7, #4]
 8018968:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801896c:	78fa      	ldrb	r2, [r7, #3]
 801896e:	4611      	mov	r1, r2
 8018970:	4618      	mov	r0, r3
 8018972:	f7ea f961 	bl	8002c38 <HAL_PCD_EP_GetRxCount>
 8018976:	4603      	mov	r3, r0
}
 8018978:	4618      	mov	r0, r3
 801897a:	3708      	adds	r7, #8
 801897c:	46bd      	mov	sp, r7
 801897e:	bd80      	pop	{r7, pc}

08018980 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8018980:	b480      	push	{r7}
 8018982:	b083      	sub	sp, #12
 8018984:	af00      	add	r7, sp, #0
 8018986:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8018988:	4b03      	ldr	r3, [pc, #12]	; (8018998 <USBD_static_malloc+0x18>)
}
 801898a:	4618      	mov	r0, r3
 801898c:	370c      	adds	r7, #12
 801898e:	46bd      	mov	sp, r7
 8018990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018994:	4770      	bx	lr
 8018996:	bf00      	nop
 8018998:	2000e40c 	.word	0x2000e40c

0801899c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801899c:	b480      	push	{r7}
 801899e:	b083      	sub	sp, #12
 80189a0:	af00      	add	r7, sp, #0
 80189a2:	6078      	str	r0, [r7, #4]

}
 80189a4:	bf00      	nop
 80189a6:	370c      	adds	r7, #12
 80189a8:	46bd      	mov	sp, r7
 80189aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189ae:	4770      	bx	lr

080189b0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80189b0:	b480      	push	{r7}
 80189b2:	b085      	sub	sp, #20
 80189b4:	af00      	add	r7, sp, #0
 80189b6:	4603      	mov	r3, r0
 80189b8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80189ba:	2300      	movs	r3, #0
 80189bc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80189be:	79fb      	ldrb	r3, [r7, #7]
 80189c0:	2b03      	cmp	r3, #3
 80189c2:	d817      	bhi.n	80189f4 <USBD_Get_USB_Status+0x44>
 80189c4:	a201      	add	r2, pc, #4	; (adr r2, 80189cc <USBD_Get_USB_Status+0x1c>)
 80189c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80189ca:	bf00      	nop
 80189cc:	080189dd 	.word	0x080189dd
 80189d0:	080189e3 	.word	0x080189e3
 80189d4:	080189e9 	.word	0x080189e9
 80189d8:	080189ef 	.word	0x080189ef
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80189dc:	2300      	movs	r3, #0
 80189de:	73fb      	strb	r3, [r7, #15]
    break;
 80189e0:	e00b      	b.n	80189fa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80189e2:	2303      	movs	r3, #3
 80189e4:	73fb      	strb	r3, [r7, #15]
    break;
 80189e6:	e008      	b.n	80189fa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80189e8:	2301      	movs	r3, #1
 80189ea:	73fb      	strb	r3, [r7, #15]
    break;
 80189ec:	e005      	b.n	80189fa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80189ee:	2303      	movs	r3, #3
 80189f0:	73fb      	strb	r3, [r7, #15]
    break;
 80189f2:	e002      	b.n	80189fa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80189f4:	2303      	movs	r3, #3
 80189f6:	73fb      	strb	r3, [r7, #15]
    break;
 80189f8:	bf00      	nop
  }
  return usb_status;
 80189fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80189fc:	4618      	mov	r0, r3
 80189fe:	3714      	adds	r7, #20
 8018a00:	46bd      	mov	sp, r7
 8018a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a06:	4770      	bx	lr

08018a08 <__libc_init_array>:
 8018a08:	b570      	push	{r4, r5, r6, lr}
 8018a0a:	4d0d      	ldr	r5, [pc, #52]	; (8018a40 <__libc_init_array+0x38>)
 8018a0c:	4c0d      	ldr	r4, [pc, #52]	; (8018a44 <__libc_init_array+0x3c>)
 8018a0e:	1b64      	subs	r4, r4, r5
 8018a10:	10a4      	asrs	r4, r4, #2
 8018a12:	2600      	movs	r6, #0
 8018a14:	42a6      	cmp	r6, r4
 8018a16:	d109      	bne.n	8018a2c <__libc_init_array+0x24>
 8018a18:	4d0b      	ldr	r5, [pc, #44]	; (8018a48 <__libc_init_array+0x40>)
 8018a1a:	4c0c      	ldr	r4, [pc, #48]	; (8018a4c <__libc_init_array+0x44>)
 8018a1c:	f001 f88e 	bl	8019b3c <_init>
 8018a20:	1b64      	subs	r4, r4, r5
 8018a22:	10a4      	asrs	r4, r4, #2
 8018a24:	2600      	movs	r6, #0
 8018a26:	42a6      	cmp	r6, r4
 8018a28:	d105      	bne.n	8018a36 <__libc_init_array+0x2e>
 8018a2a:	bd70      	pop	{r4, r5, r6, pc}
 8018a2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8018a30:	4798      	blx	r3
 8018a32:	3601      	adds	r6, #1
 8018a34:	e7ee      	b.n	8018a14 <__libc_init_array+0xc>
 8018a36:	f855 3b04 	ldr.w	r3, [r5], #4
 8018a3a:	4798      	blx	r3
 8018a3c:	3601      	adds	r6, #1
 8018a3e:	e7f2      	b.n	8018a26 <__libc_init_array+0x1e>
 8018a40:	0801cd1c 	.word	0x0801cd1c
 8018a44:	0801cd1c 	.word	0x0801cd1c
 8018a48:	0801cd1c 	.word	0x0801cd1c
 8018a4c:	0801cd20 	.word	0x0801cd20

08018a50 <memcmp>:
 8018a50:	b510      	push	{r4, lr}
 8018a52:	3901      	subs	r1, #1
 8018a54:	4402      	add	r2, r0
 8018a56:	4290      	cmp	r0, r2
 8018a58:	d101      	bne.n	8018a5e <memcmp+0xe>
 8018a5a:	2000      	movs	r0, #0
 8018a5c:	e005      	b.n	8018a6a <memcmp+0x1a>
 8018a5e:	7803      	ldrb	r3, [r0, #0]
 8018a60:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8018a64:	42a3      	cmp	r3, r4
 8018a66:	d001      	beq.n	8018a6c <memcmp+0x1c>
 8018a68:	1b18      	subs	r0, r3, r4
 8018a6a:	bd10      	pop	{r4, pc}
 8018a6c:	3001      	adds	r0, #1
 8018a6e:	e7f2      	b.n	8018a56 <memcmp+0x6>

08018a70 <memcpy>:
 8018a70:	440a      	add	r2, r1
 8018a72:	4291      	cmp	r1, r2
 8018a74:	f100 33ff 	add.w	r3, r0, #4294967295
 8018a78:	d100      	bne.n	8018a7c <memcpy+0xc>
 8018a7a:	4770      	bx	lr
 8018a7c:	b510      	push	{r4, lr}
 8018a7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018a82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018a86:	4291      	cmp	r1, r2
 8018a88:	d1f9      	bne.n	8018a7e <memcpy+0xe>
 8018a8a:	bd10      	pop	{r4, pc}

08018a8c <memset>:
 8018a8c:	4402      	add	r2, r0
 8018a8e:	4603      	mov	r3, r0
 8018a90:	4293      	cmp	r3, r2
 8018a92:	d100      	bne.n	8018a96 <memset+0xa>
 8018a94:	4770      	bx	lr
 8018a96:	f803 1b01 	strb.w	r1, [r3], #1
 8018a9a:	e7f9      	b.n	8018a90 <memset+0x4>

08018a9c <iprintf>:
 8018a9c:	b40f      	push	{r0, r1, r2, r3}
 8018a9e:	4b0a      	ldr	r3, [pc, #40]	; (8018ac8 <iprintf+0x2c>)
 8018aa0:	b513      	push	{r0, r1, r4, lr}
 8018aa2:	681c      	ldr	r4, [r3, #0]
 8018aa4:	b124      	cbz	r4, 8018ab0 <iprintf+0x14>
 8018aa6:	69a3      	ldr	r3, [r4, #24]
 8018aa8:	b913      	cbnz	r3, 8018ab0 <iprintf+0x14>
 8018aaa:	4620      	mov	r0, r4
 8018aac:	f000 f8c2 	bl	8018c34 <__sinit>
 8018ab0:	ab05      	add	r3, sp, #20
 8018ab2:	9a04      	ldr	r2, [sp, #16]
 8018ab4:	68a1      	ldr	r1, [r4, #8]
 8018ab6:	9301      	str	r3, [sp, #4]
 8018ab8:	4620      	mov	r0, r4
 8018aba:	f000 fa7f 	bl	8018fbc <_vfiprintf_r>
 8018abe:	b002      	add	sp, #8
 8018ac0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018ac4:	b004      	add	sp, #16
 8018ac6:	4770      	bx	lr
 8018ac8:	20000110 	.word	0x20000110

08018acc <rand>:
 8018acc:	4b16      	ldr	r3, [pc, #88]	; (8018b28 <rand+0x5c>)
 8018ace:	b510      	push	{r4, lr}
 8018ad0:	681c      	ldr	r4, [r3, #0]
 8018ad2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8018ad4:	b9b3      	cbnz	r3, 8018b04 <rand+0x38>
 8018ad6:	2018      	movs	r0, #24
 8018ad8:	f000 f95e 	bl	8018d98 <malloc>
 8018adc:	63a0      	str	r0, [r4, #56]	; 0x38
 8018ade:	b928      	cbnz	r0, 8018aec <rand+0x20>
 8018ae0:	4602      	mov	r2, r0
 8018ae2:	4b12      	ldr	r3, [pc, #72]	; (8018b2c <rand+0x60>)
 8018ae4:	4812      	ldr	r0, [pc, #72]	; (8018b30 <rand+0x64>)
 8018ae6:	214e      	movs	r1, #78	; 0x4e
 8018ae8:	f000 f82e 	bl	8018b48 <__assert_func>
 8018aec:	4a11      	ldr	r2, [pc, #68]	; (8018b34 <rand+0x68>)
 8018aee:	4b12      	ldr	r3, [pc, #72]	; (8018b38 <rand+0x6c>)
 8018af0:	e9c0 2300 	strd	r2, r3, [r0]
 8018af4:	4b11      	ldr	r3, [pc, #68]	; (8018b3c <rand+0x70>)
 8018af6:	6083      	str	r3, [r0, #8]
 8018af8:	230b      	movs	r3, #11
 8018afa:	8183      	strh	r3, [r0, #12]
 8018afc:	2201      	movs	r2, #1
 8018afe:	2300      	movs	r3, #0
 8018b00:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8018b04:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8018b06:	4a0e      	ldr	r2, [pc, #56]	; (8018b40 <rand+0x74>)
 8018b08:	6920      	ldr	r0, [r4, #16]
 8018b0a:	6963      	ldr	r3, [r4, #20]
 8018b0c:	490d      	ldr	r1, [pc, #52]	; (8018b44 <rand+0x78>)
 8018b0e:	4342      	muls	r2, r0
 8018b10:	fb01 2203 	mla	r2, r1, r3, r2
 8018b14:	fba0 0101 	umull	r0, r1, r0, r1
 8018b18:	1c43      	adds	r3, r0, #1
 8018b1a:	eb42 0001 	adc.w	r0, r2, r1
 8018b1e:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8018b22:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8018b26:	bd10      	pop	{r4, pc}
 8018b28:	20000110 	.word	0x20000110
 8018b2c:	0801cbd0 	.word	0x0801cbd0
 8018b30:	0801cbe7 	.word	0x0801cbe7
 8018b34:	abcd330e 	.word	0xabcd330e
 8018b38:	e66d1234 	.word	0xe66d1234
 8018b3c:	0005deec 	.word	0x0005deec
 8018b40:	5851f42d 	.word	0x5851f42d
 8018b44:	4c957f2d 	.word	0x4c957f2d

08018b48 <__assert_func>:
 8018b48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8018b4a:	4614      	mov	r4, r2
 8018b4c:	461a      	mov	r2, r3
 8018b4e:	4b09      	ldr	r3, [pc, #36]	; (8018b74 <__assert_func+0x2c>)
 8018b50:	681b      	ldr	r3, [r3, #0]
 8018b52:	4605      	mov	r5, r0
 8018b54:	68d8      	ldr	r0, [r3, #12]
 8018b56:	b14c      	cbz	r4, 8018b6c <__assert_func+0x24>
 8018b58:	4b07      	ldr	r3, [pc, #28]	; (8018b78 <__assert_func+0x30>)
 8018b5a:	9100      	str	r1, [sp, #0]
 8018b5c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8018b60:	4906      	ldr	r1, [pc, #24]	; (8018b7c <__assert_func+0x34>)
 8018b62:	462b      	mov	r3, r5
 8018b64:	f000 f8e4 	bl	8018d30 <fiprintf>
 8018b68:	f000 fe12 	bl	8019790 <abort>
 8018b6c:	4b04      	ldr	r3, [pc, #16]	; (8018b80 <__assert_func+0x38>)
 8018b6e:	461c      	mov	r4, r3
 8018b70:	e7f3      	b.n	8018b5a <__assert_func+0x12>
 8018b72:	bf00      	nop
 8018b74:	20000110 	.word	0x20000110
 8018b78:	0801cc42 	.word	0x0801cc42
 8018b7c:	0801cc4f 	.word	0x0801cc4f
 8018b80:	0801cc7d 	.word	0x0801cc7d

08018b84 <std>:
 8018b84:	2300      	movs	r3, #0
 8018b86:	b510      	push	{r4, lr}
 8018b88:	4604      	mov	r4, r0
 8018b8a:	e9c0 3300 	strd	r3, r3, [r0]
 8018b8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8018b92:	6083      	str	r3, [r0, #8]
 8018b94:	8181      	strh	r1, [r0, #12]
 8018b96:	6643      	str	r3, [r0, #100]	; 0x64
 8018b98:	81c2      	strh	r2, [r0, #14]
 8018b9a:	6183      	str	r3, [r0, #24]
 8018b9c:	4619      	mov	r1, r3
 8018b9e:	2208      	movs	r2, #8
 8018ba0:	305c      	adds	r0, #92	; 0x5c
 8018ba2:	f7ff ff73 	bl	8018a8c <memset>
 8018ba6:	4b05      	ldr	r3, [pc, #20]	; (8018bbc <std+0x38>)
 8018ba8:	6263      	str	r3, [r4, #36]	; 0x24
 8018baa:	4b05      	ldr	r3, [pc, #20]	; (8018bc0 <std+0x3c>)
 8018bac:	62a3      	str	r3, [r4, #40]	; 0x28
 8018bae:	4b05      	ldr	r3, [pc, #20]	; (8018bc4 <std+0x40>)
 8018bb0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8018bb2:	4b05      	ldr	r3, [pc, #20]	; (8018bc8 <std+0x44>)
 8018bb4:	6224      	str	r4, [r4, #32]
 8018bb6:	6323      	str	r3, [r4, #48]	; 0x30
 8018bb8:	bd10      	pop	{r4, pc}
 8018bba:	bf00      	nop
 8018bbc:	08019565 	.word	0x08019565
 8018bc0:	08019587 	.word	0x08019587
 8018bc4:	080195bf 	.word	0x080195bf
 8018bc8:	080195e3 	.word	0x080195e3

08018bcc <_cleanup_r>:
 8018bcc:	4901      	ldr	r1, [pc, #4]	; (8018bd4 <_cleanup_r+0x8>)
 8018bce:	f000 b8c1 	b.w	8018d54 <_fwalk_reent>
 8018bd2:	bf00      	nop
 8018bd4:	080198cd 	.word	0x080198cd

08018bd8 <__sfmoreglue>:
 8018bd8:	b570      	push	{r4, r5, r6, lr}
 8018bda:	2268      	movs	r2, #104	; 0x68
 8018bdc:	1e4d      	subs	r5, r1, #1
 8018bde:	4355      	muls	r5, r2
 8018be0:	460e      	mov	r6, r1
 8018be2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8018be6:	f000 f94b 	bl	8018e80 <_malloc_r>
 8018bea:	4604      	mov	r4, r0
 8018bec:	b140      	cbz	r0, 8018c00 <__sfmoreglue+0x28>
 8018bee:	2100      	movs	r1, #0
 8018bf0:	e9c0 1600 	strd	r1, r6, [r0]
 8018bf4:	300c      	adds	r0, #12
 8018bf6:	60a0      	str	r0, [r4, #8]
 8018bf8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8018bfc:	f7ff ff46 	bl	8018a8c <memset>
 8018c00:	4620      	mov	r0, r4
 8018c02:	bd70      	pop	{r4, r5, r6, pc}

08018c04 <__sfp_lock_acquire>:
 8018c04:	4801      	ldr	r0, [pc, #4]	; (8018c0c <__sfp_lock_acquire+0x8>)
 8018c06:	f000 b8c5 	b.w	8018d94 <__retarget_lock_acquire_recursive>
 8018c0a:	bf00      	nop
 8018c0c:	2000e62d 	.word	0x2000e62d

08018c10 <__sfp_lock_release>:
 8018c10:	4801      	ldr	r0, [pc, #4]	; (8018c18 <__sfp_lock_release+0x8>)
 8018c12:	f000 b8c0 	b.w	8018d96 <__retarget_lock_release_recursive>
 8018c16:	bf00      	nop
 8018c18:	2000e62d 	.word	0x2000e62d

08018c1c <__sinit_lock_acquire>:
 8018c1c:	4801      	ldr	r0, [pc, #4]	; (8018c24 <__sinit_lock_acquire+0x8>)
 8018c1e:	f000 b8b9 	b.w	8018d94 <__retarget_lock_acquire_recursive>
 8018c22:	bf00      	nop
 8018c24:	2000e62e 	.word	0x2000e62e

08018c28 <__sinit_lock_release>:
 8018c28:	4801      	ldr	r0, [pc, #4]	; (8018c30 <__sinit_lock_release+0x8>)
 8018c2a:	f000 b8b4 	b.w	8018d96 <__retarget_lock_release_recursive>
 8018c2e:	bf00      	nop
 8018c30:	2000e62e 	.word	0x2000e62e

08018c34 <__sinit>:
 8018c34:	b510      	push	{r4, lr}
 8018c36:	4604      	mov	r4, r0
 8018c38:	f7ff fff0 	bl	8018c1c <__sinit_lock_acquire>
 8018c3c:	69a3      	ldr	r3, [r4, #24]
 8018c3e:	b11b      	cbz	r3, 8018c48 <__sinit+0x14>
 8018c40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018c44:	f7ff bff0 	b.w	8018c28 <__sinit_lock_release>
 8018c48:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8018c4c:	6523      	str	r3, [r4, #80]	; 0x50
 8018c4e:	4b13      	ldr	r3, [pc, #76]	; (8018c9c <__sinit+0x68>)
 8018c50:	4a13      	ldr	r2, [pc, #76]	; (8018ca0 <__sinit+0x6c>)
 8018c52:	681b      	ldr	r3, [r3, #0]
 8018c54:	62a2      	str	r2, [r4, #40]	; 0x28
 8018c56:	42a3      	cmp	r3, r4
 8018c58:	bf04      	itt	eq
 8018c5a:	2301      	moveq	r3, #1
 8018c5c:	61a3      	streq	r3, [r4, #24]
 8018c5e:	4620      	mov	r0, r4
 8018c60:	f000 f820 	bl	8018ca4 <__sfp>
 8018c64:	6060      	str	r0, [r4, #4]
 8018c66:	4620      	mov	r0, r4
 8018c68:	f000 f81c 	bl	8018ca4 <__sfp>
 8018c6c:	60a0      	str	r0, [r4, #8]
 8018c6e:	4620      	mov	r0, r4
 8018c70:	f000 f818 	bl	8018ca4 <__sfp>
 8018c74:	2200      	movs	r2, #0
 8018c76:	60e0      	str	r0, [r4, #12]
 8018c78:	2104      	movs	r1, #4
 8018c7a:	6860      	ldr	r0, [r4, #4]
 8018c7c:	f7ff ff82 	bl	8018b84 <std>
 8018c80:	68a0      	ldr	r0, [r4, #8]
 8018c82:	2201      	movs	r2, #1
 8018c84:	2109      	movs	r1, #9
 8018c86:	f7ff ff7d 	bl	8018b84 <std>
 8018c8a:	68e0      	ldr	r0, [r4, #12]
 8018c8c:	2202      	movs	r2, #2
 8018c8e:	2112      	movs	r1, #18
 8018c90:	f7ff ff78 	bl	8018b84 <std>
 8018c94:	2301      	movs	r3, #1
 8018c96:	61a3      	str	r3, [r4, #24]
 8018c98:	e7d2      	b.n	8018c40 <__sinit+0xc>
 8018c9a:	bf00      	nop
 8018c9c:	0801cbcc 	.word	0x0801cbcc
 8018ca0:	08018bcd 	.word	0x08018bcd

08018ca4 <__sfp>:
 8018ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018ca6:	4607      	mov	r7, r0
 8018ca8:	f7ff ffac 	bl	8018c04 <__sfp_lock_acquire>
 8018cac:	4b1e      	ldr	r3, [pc, #120]	; (8018d28 <__sfp+0x84>)
 8018cae:	681e      	ldr	r6, [r3, #0]
 8018cb0:	69b3      	ldr	r3, [r6, #24]
 8018cb2:	b913      	cbnz	r3, 8018cba <__sfp+0x16>
 8018cb4:	4630      	mov	r0, r6
 8018cb6:	f7ff ffbd 	bl	8018c34 <__sinit>
 8018cba:	3648      	adds	r6, #72	; 0x48
 8018cbc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8018cc0:	3b01      	subs	r3, #1
 8018cc2:	d503      	bpl.n	8018ccc <__sfp+0x28>
 8018cc4:	6833      	ldr	r3, [r6, #0]
 8018cc6:	b30b      	cbz	r3, 8018d0c <__sfp+0x68>
 8018cc8:	6836      	ldr	r6, [r6, #0]
 8018cca:	e7f7      	b.n	8018cbc <__sfp+0x18>
 8018ccc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8018cd0:	b9d5      	cbnz	r5, 8018d08 <__sfp+0x64>
 8018cd2:	4b16      	ldr	r3, [pc, #88]	; (8018d2c <__sfp+0x88>)
 8018cd4:	60e3      	str	r3, [r4, #12]
 8018cd6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8018cda:	6665      	str	r5, [r4, #100]	; 0x64
 8018cdc:	f000 f859 	bl	8018d92 <__retarget_lock_init_recursive>
 8018ce0:	f7ff ff96 	bl	8018c10 <__sfp_lock_release>
 8018ce4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8018ce8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8018cec:	6025      	str	r5, [r4, #0]
 8018cee:	61a5      	str	r5, [r4, #24]
 8018cf0:	2208      	movs	r2, #8
 8018cf2:	4629      	mov	r1, r5
 8018cf4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8018cf8:	f7ff fec8 	bl	8018a8c <memset>
 8018cfc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8018d00:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8018d04:	4620      	mov	r0, r4
 8018d06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018d08:	3468      	adds	r4, #104	; 0x68
 8018d0a:	e7d9      	b.n	8018cc0 <__sfp+0x1c>
 8018d0c:	2104      	movs	r1, #4
 8018d0e:	4638      	mov	r0, r7
 8018d10:	f7ff ff62 	bl	8018bd8 <__sfmoreglue>
 8018d14:	4604      	mov	r4, r0
 8018d16:	6030      	str	r0, [r6, #0]
 8018d18:	2800      	cmp	r0, #0
 8018d1a:	d1d5      	bne.n	8018cc8 <__sfp+0x24>
 8018d1c:	f7ff ff78 	bl	8018c10 <__sfp_lock_release>
 8018d20:	230c      	movs	r3, #12
 8018d22:	603b      	str	r3, [r7, #0]
 8018d24:	e7ee      	b.n	8018d04 <__sfp+0x60>
 8018d26:	bf00      	nop
 8018d28:	0801cbcc 	.word	0x0801cbcc
 8018d2c:	ffff0001 	.word	0xffff0001

08018d30 <fiprintf>:
 8018d30:	b40e      	push	{r1, r2, r3}
 8018d32:	b503      	push	{r0, r1, lr}
 8018d34:	4601      	mov	r1, r0
 8018d36:	ab03      	add	r3, sp, #12
 8018d38:	4805      	ldr	r0, [pc, #20]	; (8018d50 <fiprintf+0x20>)
 8018d3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8018d3e:	6800      	ldr	r0, [r0, #0]
 8018d40:	9301      	str	r3, [sp, #4]
 8018d42:	f000 f93b 	bl	8018fbc <_vfiprintf_r>
 8018d46:	b002      	add	sp, #8
 8018d48:	f85d eb04 	ldr.w	lr, [sp], #4
 8018d4c:	b003      	add	sp, #12
 8018d4e:	4770      	bx	lr
 8018d50:	20000110 	.word	0x20000110

08018d54 <_fwalk_reent>:
 8018d54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018d58:	4606      	mov	r6, r0
 8018d5a:	4688      	mov	r8, r1
 8018d5c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8018d60:	2700      	movs	r7, #0
 8018d62:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8018d66:	f1b9 0901 	subs.w	r9, r9, #1
 8018d6a:	d505      	bpl.n	8018d78 <_fwalk_reent+0x24>
 8018d6c:	6824      	ldr	r4, [r4, #0]
 8018d6e:	2c00      	cmp	r4, #0
 8018d70:	d1f7      	bne.n	8018d62 <_fwalk_reent+0xe>
 8018d72:	4638      	mov	r0, r7
 8018d74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018d78:	89ab      	ldrh	r3, [r5, #12]
 8018d7a:	2b01      	cmp	r3, #1
 8018d7c:	d907      	bls.n	8018d8e <_fwalk_reent+0x3a>
 8018d7e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8018d82:	3301      	adds	r3, #1
 8018d84:	d003      	beq.n	8018d8e <_fwalk_reent+0x3a>
 8018d86:	4629      	mov	r1, r5
 8018d88:	4630      	mov	r0, r6
 8018d8a:	47c0      	blx	r8
 8018d8c:	4307      	orrs	r7, r0
 8018d8e:	3568      	adds	r5, #104	; 0x68
 8018d90:	e7e9      	b.n	8018d66 <_fwalk_reent+0x12>

08018d92 <__retarget_lock_init_recursive>:
 8018d92:	4770      	bx	lr

08018d94 <__retarget_lock_acquire_recursive>:
 8018d94:	4770      	bx	lr

08018d96 <__retarget_lock_release_recursive>:
 8018d96:	4770      	bx	lr

08018d98 <malloc>:
 8018d98:	4b02      	ldr	r3, [pc, #8]	; (8018da4 <malloc+0xc>)
 8018d9a:	4601      	mov	r1, r0
 8018d9c:	6818      	ldr	r0, [r3, #0]
 8018d9e:	f000 b86f 	b.w	8018e80 <_malloc_r>
 8018da2:	bf00      	nop
 8018da4:	20000110 	.word	0x20000110

08018da8 <_free_r>:
 8018da8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018daa:	2900      	cmp	r1, #0
 8018dac:	d044      	beq.n	8018e38 <_free_r+0x90>
 8018dae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018db2:	9001      	str	r0, [sp, #4]
 8018db4:	2b00      	cmp	r3, #0
 8018db6:	f1a1 0404 	sub.w	r4, r1, #4
 8018dba:	bfb8      	it	lt
 8018dbc:	18e4      	addlt	r4, r4, r3
 8018dbe:	f000 fe39 	bl	8019a34 <__malloc_lock>
 8018dc2:	4a1e      	ldr	r2, [pc, #120]	; (8018e3c <_free_r+0x94>)
 8018dc4:	9801      	ldr	r0, [sp, #4]
 8018dc6:	6813      	ldr	r3, [r2, #0]
 8018dc8:	b933      	cbnz	r3, 8018dd8 <_free_r+0x30>
 8018dca:	6063      	str	r3, [r4, #4]
 8018dcc:	6014      	str	r4, [r2, #0]
 8018dce:	b003      	add	sp, #12
 8018dd0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018dd4:	f000 be34 	b.w	8019a40 <__malloc_unlock>
 8018dd8:	42a3      	cmp	r3, r4
 8018dda:	d908      	bls.n	8018dee <_free_r+0x46>
 8018ddc:	6825      	ldr	r5, [r4, #0]
 8018dde:	1961      	adds	r1, r4, r5
 8018de0:	428b      	cmp	r3, r1
 8018de2:	bf01      	itttt	eq
 8018de4:	6819      	ldreq	r1, [r3, #0]
 8018de6:	685b      	ldreq	r3, [r3, #4]
 8018de8:	1949      	addeq	r1, r1, r5
 8018dea:	6021      	streq	r1, [r4, #0]
 8018dec:	e7ed      	b.n	8018dca <_free_r+0x22>
 8018dee:	461a      	mov	r2, r3
 8018df0:	685b      	ldr	r3, [r3, #4]
 8018df2:	b10b      	cbz	r3, 8018df8 <_free_r+0x50>
 8018df4:	42a3      	cmp	r3, r4
 8018df6:	d9fa      	bls.n	8018dee <_free_r+0x46>
 8018df8:	6811      	ldr	r1, [r2, #0]
 8018dfa:	1855      	adds	r5, r2, r1
 8018dfc:	42a5      	cmp	r5, r4
 8018dfe:	d10b      	bne.n	8018e18 <_free_r+0x70>
 8018e00:	6824      	ldr	r4, [r4, #0]
 8018e02:	4421      	add	r1, r4
 8018e04:	1854      	adds	r4, r2, r1
 8018e06:	42a3      	cmp	r3, r4
 8018e08:	6011      	str	r1, [r2, #0]
 8018e0a:	d1e0      	bne.n	8018dce <_free_r+0x26>
 8018e0c:	681c      	ldr	r4, [r3, #0]
 8018e0e:	685b      	ldr	r3, [r3, #4]
 8018e10:	6053      	str	r3, [r2, #4]
 8018e12:	4421      	add	r1, r4
 8018e14:	6011      	str	r1, [r2, #0]
 8018e16:	e7da      	b.n	8018dce <_free_r+0x26>
 8018e18:	d902      	bls.n	8018e20 <_free_r+0x78>
 8018e1a:	230c      	movs	r3, #12
 8018e1c:	6003      	str	r3, [r0, #0]
 8018e1e:	e7d6      	b.n	8018dce <_free_r+0x26>
 8018e20:	6825      	ldr	r5, [r4, #0]
 8018e22:	1961      	adds	r1, r4, r5
 8018e24:	428b      	cmp	r3, r1
 8018e26:	bf04      	itt	eq
 8018e28:	6819      	ldreq	r1, [r3, #0]
 8018e2a:	685b      	ldreq	r3, [r3, #4]
 8018e2c:	6063      	str	r3, [r4, #4]
 8018e2e:	bf04      	itt	eq
 8018e30:	1949      	addeq	r1, r1, r5
 8018e32:	6021      	streq	r1, [r4, #0]
 8018e34:	6054      	str	r4, [r2, #4]
 8018e36:	e7ca      	b.n	8018dce <_free_r+0x26>
 8018e38:	b003      	add	sp, #12
 8018e3a:	bd30      	pop	{r4, r5, pc}
 8018e3c:	2000e630 	.word	0x2000e630

08018e40 <sbrk_aligned>:
 8018e40:	b570      	push	{r4, r5, r6, lr}
 8018e42:	4e0e      	ldr	r6, [pc, #56]	; (8018e7c <sbrk_aligned+0x3c>)
 8018e44:	460c      	mov	r4, r1
 8018e46:	6831      	ldr	r1, [r6, #0]
 8018e48:	4605      	mov	r5, r0
 8018e4a:	b911      	cbnz	r1, 8018e52 <sbrk_aligned+0x12>
 8018e4c:	f000 fb7a 	bl	8019544 <_sbrk_r>
 8018e50:	6030      	str	r0, [r6, #0]
 8018e52:	4621      	mov	r1, r4
 8018e54:	4628      	mov	r0, r5
 8018e56:	f000 fb75 	bl	8019544 <_sbrk_r>
 8018e5a:	1c43      	adds	r3, r0, #1
 8018e5c:	d00a      	beq.n	8018e74 <sbrk_aligned+0x34>
 8018e5e:	1cc4      	adds	r4, r0, #3
 8018e60:	f024 0403 	bic.w	r4, r4, #3
 8018e64:	42a0      	cmp	r0, r4
 8018e66:	d007      	beq.n	8018e78 <sbrk_aligned+0x38>
 8018e68:	1a21      	subs	r1, r4, r0
 8018e6a:	4628      	mov	r0, r5
 8018e6c:	f000 fb6a 	bl	8019544 <_sbrk_r>
 8018e70:	3001      	adds	r0, #1
 8018e72:	d101      	bne.n	8018e78 <sbrk_aligned+0x38>
 8018e74:	f04f 34ff 	mov.w	r4, #4294967295
 8018e78:	4620      	mov	r0, r4
 8018e7a:	bd70      	pop	{r4, r5, r6, pc}
 8018e7c:	2000e634 	.word	0x2000e634

08018e80 <_malloc_r>:
 8018e80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018e84:	1ccd      	adds	r5, r1, #3
 8018e86:	f025 0503 	bic.w	r5, r5, #3
 8018e8a:	3508      	adds	r5, #8
 8018e8c:	2d0c      	cmp	r5, #12
 8018e8e:	bf38      	it	cc
 8018e90:	250c      	movcc	r5, #12
 8018e92:	2d00      	cmp	r5, #0
 8018e94:	4607      	mov	r7, r0
 8018e96:	db01      	blt.n	8018e9c <_malloc_r+0x1c>
 8018e98:	42a9      	cmp	r1, r5
 8018e9a:	d905      	bls.n	8018ea8 <_malloc_r+0x28>
 8018e9c:	230c      	movs	r3, #12
 8018e9e:	603b      	str	r3, [r7, #0]
 8018ea0:	2600      	movs	r6, #0
 8018ea2:	4630      	mov	r0, r6
 8018ea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018ea8:	4e2e      	ldr	r6, [pc, #184]	; (8018f64 <_malloc_r+0xe4>)
 8018eaa:	f000 fdc3 	bl	8019a34 <__malloc_lock>
 8018eae:	6833      	ldr	r3, [r6, #0]
 8018eb0:	461c      	mov	r4, r3
 8018eb2:	bb34      	cbnz	r4, 8018f02 <_malloc_r+0x82>
 8018eb4:	4629      	mov	r1, r5
 8018eb6:	4638      	mov	r0, r7
 8018eb8:	f7ff ffc2 	bl	8018e40 <sbrk_aligned>
 8018ebc:	1c43      	adds	r3, r0, #1
 8018ebe:	4604      	mov	r4, r0
 8018ec0:	d14d      	bne.n	8018f5e <_malloc_r+0xde>
 8018ec2:	6834      	ldr	r4, [r6, #0]
 8018ec4:	4626      	mov	r6, r4
 8018ec6:	2e00      	cmp	r6, #0
 8018ec8:	d140      	bne.n	8018f4c <_malloc_r+0xcc>
 8018eca:	6823      	ldr	r3, [r4, #0]
 8018ecc:	4631      	mov	r1, r6
 8018ece:	4638      	mov	r0, r7
 8018ed0:	eb04 0803 	add.w	r8, r4, r3
 8018ed4:	f000 fb36 	bl	8019544 <_sbrk_r>
 8018ed8:	4580      	cmp	r8, r0
 8018eda:	d13a      	bne.n	8018f52 <_malloc_r+0xd2>
 8018edc:	6821      	ldr	r1, [r4, #0]
 8018ede:	3503      	adds	r5, #3
 8018ee0:	1a6d      	subs	r5, r5, r1
 8018ee2:	f025 0503 	bic.w	r5, r5, #3
 8018ee6:	3508      	adds	r5, #8
 8018ee8:	2d0c      	cmp	r5, #12
 8018eea:	bf38      	it	cc
 8018eec:	250c      	movcc	r5, #12
 8018eee:	4629      	mov	r1, r5
 8018ef0:	4638      	mov	r0, r7
 8018ef2:	f7ff ffa5 	bl	8018e40 <sbrk_aligned>
 8018ef6:	3001      	adds	r0, #1
 8018ef8:	d02b      	beq.n	8018f52 <_malloc_r+0xd2>
 8018efa:	6823      	ldr	r3, [r4, #0]
 8018efc:	442b      	add	r3, r5
 8018efe:	6023      	str	r3, [r4, #0]
 8018f00:	e00e      	b.n	8018f20 <_malloc_r+0xa0>
 8018f02:	6822      	ldr	r2, [r4, #0]
 8018f04:	1b52      	subs	r2, r2, r5
 8018f06:	d41e      	bmi.n	8018f46 <_malloc_r+0xc6>
 8018f08:	2a0b      	cmp	r2, #11
 8018f0a:	d916      	bls.n	8018f3a <_malloc_r+0xba>
 8018f0c:	1961      	adds	r1, r4, r5
 8018f0e:	42a3      	cmp	r3, r4
 8018f10:	6025      	str	r5, [r4, #0]
 8018f12:	bf18      	it	ne
 8018f14:	6059      	strne	r1, [r3, #4]
 8018f16:	6863      	ldr	r3, [r4, #4]
 8018f18:	bf08      	it	eq
 8018f1a:	6031      	streq	r1, [r6, #0]
 8018f1c:	5162      	str	r2, [r4, r5]
 8018f1e:	604b      	str	r3, [r1, #4]
 8018f20:	4638      	mov	r0, r7
 8018f22:	f104 060b 	add.w	r6, r4, #11
 8018f26:	f000 fd8b 	bl	8019a40 <__malloc_unlock>
 8018f2a:	f026 0607 	bic.w	r6, r6, #7
 8018f2e:	1d23      	adds	r3, r4, #4
 8018f30:	1af2      	subs	r2, r6, r3
 8018f32:	d0b6      	beq.n	8018ea2 <_malloc_r+0x22>
 8018f34:	1b9b      	subs	r3, r3, r6
 8018f36:	50a3      	str	r3, [r4, r2]
 8018f38:	e7b3      	b.n	8018ea2 <_malloc_r+0x22>
 8018f3a:	6862      	ldr	r2, [r4, #4]
 8018f3c:	42a3      	cmp	r3, r4
 8018f3e:	bf0c      	ite	eq
 8018f40:	6032      	streq	r2, [r6, #0]
 8018f42:	605a      	strne	r2, [r3, #4]
 8018f44:	e7ec      	b.n	8018f20 <_malloc_r+0xa0>
 8018f46:	4623      	mov	r3, r4
 8018f48:	6864      	ldr	r4, [r4, #4]
 8018f4a:	e7b2      	b.n	8018eb2 <_malloc_r+0x32>
 8018f4c:	4634      	mov	r4, r6
 8018f4e:	6876      	ldr	r6, [r6, #4]
 8018f50:	e7b9      	b.n	8018ec6 <_malloc_r+0x46>
 8018f52:	230c      	movs	r3, #12
 8018f54:	603b      	str	r3, [r7, #0]
 8018f56:	4638      	mov	r0, r7
 8018f58:	f000 fd72 	bl	8019a40 <__malloc_unlock>
 8018f5c:	e7a1      	b.n	8018ea2 <_malloc_r+0x22>
 8018f5e:	6025      	str	r5, [r4, #0]
 8018f60:	e7de      	b.n	8018f20 <_malloc_r+0xa0>
 8018f62:	bf00      	nop
 8018f64:	2000e630 	.word	0x2000e630

08018f68 <__sfputc_r>:
 8018f68:	6893      	ldr	r3, [r2, #8]
 8018f6a:	3b01      	subs	r3, #1
 8018f6c:	2b00      	cmp	r3, #0
 8018f6e:	b410      	push	{r4}
 8018f70:	6093      	str	r3, [r2, #8]
 8018f72:	da08      	bge.n	8018f86 <__sfputc_r+0x1e>
 8018f74:	6994      	ldr	r4, [r2, #24]
 8018f76:	42a3      	cmp	r3, r4
 8018f78:	db01      	blt.n	8018f7e <__sfputc_r+0x16>
 8018f7a:	290a      	cmp	r1, #10
 8018f7c:	d103      	bne.n	8018f86 <__sfputc_r+0x1e>
 8018f7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018f82:	f000 bb33 	b.w	80195ec <__swbuf_r>
 8018f86:	6813      	ldr	r3, [r2, #0]
 8018f88:	1c58      	adds	r0, r3, #1
 8018f8a:	6010      	str	r0, [r2, #0]
 8018f8c:	7019      	strb	r1, [r3, #0]
 8018f8e:	4608      	mov	r0, r1
 8018f90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018f94:	4770      	bx	lr

08018f96 <__sfputs_r>:
 8018f96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018f98:	4606      	mov	r6, r0
 8018f9a:	460f      	mov	r7, r1
 8018f9c:	4614      	mov	r4, r2
 8018f9e:	18d5      	adds	r5, r2, r3
 8018fa0:	42ac      	cmp	r4, r5
 8018fa2:	d101      	bne.n	8018fa8 <__sfputs_r+0x12>
 8018fa4:	2000      	movs	r0, #0
 8018fa6:	e007      	b.n	8018fb8 <__sfputs_r+0x22>
 8018fa8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018fac:	463a      	mov	r2, r7
 8018fae:	4630      	mov	r0, r6
 8018fb0:	f7ff ffda 	bl	8018f68 <__sfputc_r>
 8018fb4:	1c43      	adds	r3, r0, #1
 8018fb6:	d1f3      	bne.n	8018fa0 <__sfputs_r+0xa>
 8018fb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08018fbc <_vfiprintf_r>:
 8018fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018fc0:	460d      	mov	r5, r1
 8018fc2:	b09d      	sub	sp, #116	; 0x74
 8018fc4:	4614      	mov	r4, r2
 8018fc6:	4698      	mov	r8, r3
 8018fc8:	4606      	mov	r6, r0
 8018fca:	b118      	cbz	r0, 8018fd4 <_vfiprintf_r+0x18>
 8018fcc:	6983      	ldr	r3, [r0, #24]
 8018fce:	b90b      	cbnz	r3, 8018fd4 <_vfiprintf_r+0x18>
 8018fd0:	f7ff fe30 	bl	8018c34 <__sinit>
 8018fd4:	4b89      	ldr	r3, [pc, #548]	; (80191fc <_vfiprintf_r+0x240>)
 8018fd6:	429d      	cmp	r5, r3
 8018fd8:	d11b      	bne.n	8019012 <_vfiprintf_r+0x56>
 8018fda:	6875      	ldr	r5, [r6, #4]
 8018fdc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018fde:	07d9      	lsls	r1, r3, #31
 8018fe0:	d405      	bmi.n	8018fee <_vfiprintf_r+0x32>
 8018fe2:	89ab      	ldrh	r3, [r5, #12]
 8018fe4:	059a      	lsls	r2, r3, #22
 8018fe6:	d402      	bmi.n	8018fee <_vfiprintf_r+0x32>
 8018fe8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018fea:	f7ff fed3 	bl	8018d94 <__retarget_lock_acquire_recursive>
 8018fee:	89ab      	ldrh	r3, [r5, #12]
 8018ff0:	071b      	lsls	r3, r3, #28
 8018ff2:	d501      	bpl.n	8018ff8 <_vfiprintf_r+0x3c>
 8018ff4:	692b      	ldr	r3, [r5, #16]
 8018ff6:	b9eb      	cbnz	r3, 8019034 <_vfiprintf_r+0x78>
 8018ff8:	4629      	mov	r1, r5
 8018ffa:	4630      	mov	r0, r6
 8018ffc:	f000 fb5a 	bl	80196b4 <__swsetup_r>
 8019000:	b1c0      	cbz	r0, 8019034 <_vfiprintf_r+0x78>
 8019002:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019004:	07dc      	lsls	r4, r3, #31
 8019006:	d50e      	bpl.n	8019026 <_vfiprintf_r+0x6a>
 8019008:	f04f 30ff 	mov.w	r0, #4294967295
 801900c:	b01d      	add	sp, #116	; 0x74
 801900e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019012:	4b7b      	ldr	r3, [pc, #492]	; (8019200 <_vfiprintf_r+0x244>)
 8019014:	429d      	cmp	r5, r3
 8019016:	d101      	bne.n	801901c <_vfiprintf_r+0x60>
 8019018:	68b5      	ldr	r5, [r6, #8]
 801901a:	e7df      	b.n	8018fdc <_vfiprintf_r+0x20>
 801901c:	4b79      	ldr	r3, [pc, #484]	; (8019204 <_vfiprintf_r+0x248>)
 801901e:	429d      	cmp	r5, r3
 8019020:	bf08      	it	eq
 8019022:	68f5      	ldreq	r5, [r6, #12]
 8019024:	e7da      	b.n	8018fdc <_vfiprintf_r+0x20>
 8019026:	89ab      	ldrh	r3, [r5, #12]
 8019028:	0598      	lsls	r0, r3, #22
 801902a:	d4ed      	bmi.n	8019008 <_vfiprintf_r+0x4c>
 801902c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801902e:	f7ff feb2 	bl	8018d96 <__retarget_lock_release_recursive>
 8019032:	e7e9      	b.n	8019008 <_vfiprintf_r+0x4c>
 8019034:	2300      	movs	r3, #0
 8019036:	9309      	str	r3, [sp, #36]	; 0x24
 8019038:	2320      	movs	r3, #32
 801903a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801903e:	f8cd 800c 	str.w	r8, [sp, #12]
 8019042:	2330      	movs	r3, #48	; 0x30
 8019044:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8019208 <_vfiprintf_r+0x24c>
 8019048:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801904c:	f04f 0901 	mov.w	r9, #1
 8019050:	4623      	mov	r3, r4
 8019052:	469a      	mov	sl, r3
 8019054:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019058:	b10a      	cbz	r2, 801905e <_vfiprintf_r+0xa2>
 801905a:	2a25      	cmp	r2, #37	; 0x25
 801905c:	d1f9      	bne.n	8019052 <_vfiprintf_r+0x96>
 801905e:	ebba 0b04 	subs.w	fp, sl, r4
 8019062:	d00b      	beq.n	801907c <_vfiprintf_r+0xc0>
 8019064:	465b      	mov	r3, fp
 8019066:	4622      	mov	r2, r4
 8019068:	4629      	mov	r1, r5
 801906a:	4630      	mov	r0, r6
 801906c:	f7ff ff93 	bl	8018f96 <__sfputs_r>
 8019070:	3001      	adds	r0, #1
 8019072:	f000 80aa 	beq.w	80191ca <_vfiprintf_r+0x20e>
 8019076:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019078:	445a      	add	r2, fp
 801907a:	9209      	str	r2, [sp, #36]	; 0x24
 801907c:	f89a 3000 	ldrb.w	r3, [sl]
 8019080:	2b00      	cmp	r3, #0
 8019082:	f000 80a2 	beq.w	80191ca <_vfiprintf_r+0x20e>
 8019086:	2300      	movs	r3, #0
 8019088:	f04f 32ff 	mov.w	r2, #4294967295
 801908c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019090:	f10a 0a01 	add.w	sl, sl, #1
 8019094:	9304      	str	r3, [sp, #16]
 8019096:	9307      	str	r3, [sp, #28]
 8019098:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801909c:	931a      	str	r3, [sp, #104]	; 0x68
 801909e:	4654      	mov	r4, sl
 80190a0:	2205      	movs	r2, #5
 80190a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80190a6:	4858      	ldr	r0, [pc, #352]	; (8019208 <_vfiprintf_r+0x24c>)
 80190a8:	f7e7 f892 	bl	80001d0 <memchr>
 80190ac:	9a04      	ldr	r2, [sp, #16]
 80190ae:	b9d8      	cbnz	r0, 80190e8 <_vfiprintf_r+0x12c>
 80190b0:	06d1      	lsls	r1, r2, #27
 80190b2:	bf44      	itt	mi
 80190b4:	2320      	movmi	r3, #32
 80190b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80190ba:	0713      	lsls	r3, r2, #28
 80190bc:	bf44      	itt	mi
 80190be:	232b      	movmi	r3, #43	; 0x2b
 80190c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80190c4:	f89a 3000 	ldrb.w	r3, [sl]
 80190c8:	2b2a      	cmp	r3, #42	; 0x2a
 80190ca:	d015      	beq.n	80190f8 <_vfiprintf_r+0x13c>
 80190cc:	9a07      	ldr	r2, [sp, #28]
 80190ce:	4654      	mov	r4, sl
 80190d0:	2000      	movs	r0, #0
 80190d2:	f04f 0c0a 	mov.w	ip, #10
 80190d6:	4621      	mov	r1, r4
 80190d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80190dc:	3b30      	subs	r3, #48	; 0x30
 80190de:	2b09      	cmp	r3, #9
 80190e0:	d94e      	bls.n	8019180 <_vfiprintf_r+0x1c4>
 80190e2:	b1b0      	cbz	r0, 8019112 <_vfiprintf_r+0x156>
 80190e4:	9207      	str	r2, [sp, #28]
 80190e6:	e014      	b.n	8019112 <_vfiprintf_r+0x156>
 80190e8:	eba0 0308 	sub.w	r3, r0, r8
 80190ec:	fa09 f303 	lsl.w	r3, r9, r3
 80190f0:	4313      	orrs	r3, r2
 80190f2:	9304      	str	r3, [sp, #16]
 80190f4:	46a2      	mov	sl, r4
 80190f6:	e7d2      	b.n	801909e <_vfiprintf_r+0xe2>
 80190f8:	9b03      	ldr	r3, [sp, #12]
 80190fa:	1d19      	adds	r1, r3, #4
 80190fc:	681b      	ldr	r3, [r3, #0]
 80190fe:	9103      	str	r1, [sp, #12]
 8019100:	2b00      	cmp	r3, #0
 8019102:	bfbb      	ittet	lt
 8019104:	425b      	neglt	r3, r3
 8019106:	f042 0202 	orrlt.w	r2, r2, #2
 801910a:	9307      	strge	r3, [sp, #28]
 801910c:	9307      	strlt	r3, [sp, #28]
 801910e:	bfb8      	it	lt
 8019110:	9204      	strlt	r2, [sp, #16]
 8019112:	7823      	ldrb	r3, [r4, #0]
 8019114:	2b2e      	cmp	r3, #46	; 0x2e
 8019116:	d10c      	bne.n	8019132 <_vfiprintf_r+0x176>
 8019118:	7863      	ldrb	r3, [r4, #1]
 801911a:	2b2a      	cmp	r3, #42	; 0x2a
 801911c:	d135      	bne.n	801918a <_vfiprintf_r+0x1ce>
 801911e:	9b03      	ldr	r3, [sp, #12]
 8019120:	1d1a      	adds	r2, r3, #4
 8019122:	681b      	ldr	r3, [r3, #0]
 8019124:	9203      	str	r2, [sp, #12]
 8019126:	2b00      	cmp	r3, #0
 8019128:	bfb8      	it	lt
 801912a:	f04f 33ff 	movlt.w	r3, #4294967295
 801912e:	3402      	adds	r4, #2
 8019130:	9305      	str	r3, [sp, #20]
 8019132:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8019218 <_vfiprintf_r+0x25c>
 8019136:	7821      	ldrb	r1, [r4, #0]
 8019138:	2203      	movs	r2, #3
 801913a:	4650      	mov	r0, sl
 801913c:	f7e7 f848 	bl	80001d0 <memchr>
 8019140:	b140      	cbz	r0, 8019154 <_vfiprintf_r+0x198>
 8019142:	2340      	movs	r3, #64	; 0x40
 8019144:	eba0 000a 	sub.w	r0, r0, sl
 8019148:	fa03 f000 	lsl.w	r0, r3, r0
 801914c:	9b04      	ldr	r3, [sp, #16]
 801914e:	4303      	orrs	r3, r0
 8019150:	3401      	adds	r4, #1
 8019152:	9304      	str	r3, [sp, #16]
 8019154:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019158:	482c      	ldr	r0, [pc, #176]	; (801920c <_vfiprintf_r+0x250>)
 801915a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801915e:	2206      	movs	r2, #6
 8019160:	f7e7 f836 	bl	80001d0 <memchr>
 8019164:	2800      	cmp	r0, #0
 8019166:	d03f      	beq.n	80191e8 <_vfiprintf_r+0x22c>
 8019168:	4b29      	ldr	r3, [pc, #164]	; (8019210 <_vfiprintf_r+0x254>)
 801916a:	bb1b      	cbnz	r3, 80191b4 <_vfiprintf_r+0x1f8>
 801916c:	9b03      	ldr	r3, [sp, #12]
 801916e:	3307      	adds	r3, #7
 8019170:	f023 0307 	bic.w	r3, r3, #7
 8019174:	3308      	adds	r3, #8
 8019176:	9303      	str	r3, [sp, #12]
 8019178:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801917a:	443b      	add	r3, r7
 801917c:	9309      	str	r3, [sp, #36]	; 0x24
 801917e:	e767      	b.n	8019050 <_vfiprintf_r+0x94>
 8019180:	fb0c 3202 	mla	r2, ip, r2, r3
 8019184:	460c      	mov	r4, r1
 8019186:	2001      	movs	r0, #1
 8019188:	e7a5      	b.n	80190d6 <_vfiprintf_r+0x11a>
 801918a:	2300      	movs	r3, #0
 801918c:	3401      	adds	r4, #1
 801918e:	9305      	str	r3, [sp, #20]
 8019190:	4619      	mov	r1, r3
 8019192:	f04f 0c0a 	mov.w	ip, #10
 8019196:	4620      	mov	r0, r4
 8019198:	f810 2b01 	ldrb.w	r2, [r0], #1
 801919c:	3a30      	subs	r2, #48	; 0x30
 801919e:	2a09      	cmp	r2, #9
 80191a0:	d903      	bls.n	80191aa <_vfiprintf_r+0x1ee>
 80191a2:	2b00      	cmp	r3, #0
 80191a4:	d0c5      	beq.n	8019132 <_vfiprintf_r+0x176>
 80191a6:	9105      	str	r1, [sp, #20]
 80191a8:	e7c3      	b.n	8019132 <_vfiprintf_r+0x176>
 80191aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80191ae:	4604      	mov	r4, r0
 80191b0:	2301      	movs	r3, #1
 80191b2:	e7f0      	b.n	8019196 <_vfiprintf_r+0x1da>
 80191b4:	ab03      	add	r3, sp, #12
 80191b6:	9300      	str	r3, [sp, #0]
 80191b8:	462a      	mov	r2, r5
 80191ba:	4b16      	ldr	r3, [pc, #88]	; (8019214 <_vfiprintf_r+0x258>)
 80191bc:	a904      	add	r1, sp, #16
 80191be:	4630      	mov	r0, r6
 80191c0:	f3af 8000 	nop.w
 80191c4:	4607      	mov	r7, r0
 80191c6:	1c78      	adds	r0, r7, #1
 80191c8:	d1d6      	bne.n	8019178 <_vfiprintf_r+0x1bc>
 80191ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80191cc:	07d9      	lsls	r1, r3, #31
 80191ce:	d405      	bmi.n	80191dc <_vfiprintf_r+0x220>
 80191d0:	89ab      	ldrh	r3, [r5, #12]
 80191d2:	059a      	lsls	r2, r3, #22
 80191d4:	d402      	bmi.n	80191dc <_vfiprintf_r+0x220>
 80191d6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80191d8:	f7ff fddd 	bl	8018d96 <__retarget_lock_release_recursive>
 80191dc:	89ab      	ldrh	r3, [r5, #12]
 80191de:	065b      	lsls	r3, r3, #25
 80191e0:	f53f af12 	bmi.w	8019008 <_vfiprintf_r+0x4c>
 80191e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80191e6:	e711      	b.n	801900c <_vfiprintf_r+0x50>
 80191e8:	ab03      	add	r3, sp, #12
 80191ea:	9300      	str	r3, [sp, #0]
 80191ec:	462a      	mov	r2, r5
 80191ee:	4b09      	ldr	r3, [pc, #36]	; (8019214 <_vfiprintf_r+0x258>)
 80191f0:	a904      	add	r1, sp, #16
 80191f2:	4630      	mov	r0, r6
 80191f4:	f000 f880 	bl	80192f8 <_printf_i>
 80191f8:	e7e4      	b.n	80191c4 <_vfiprintf_r+0x208>
 80191fa:	bf00      	nop
 80191fc:	0801cca0 	.word	0x0801cca0
 8019200:	0801ccc0 	.word	0x0801ccc0
 8019204:	0801cc80 	.word	0x0801cc80
 8019208:	0801cce0 	.word	0x0801cce0
 801920c:	0801ccea 	.word	0x0801ccea
 8019210:	00000000 	.word	0x00000000
 8019214:	08018f97 	.word	0x08018f97
 8019218:	0801cce6 	.word	0x0801cce6

0801921c <_printf_common>:
 801921c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019220:	4616      	mov	r6, r2
 8019222:	4699      	mov	r9, r3
 8019224:	688a      	ldr	r2, [r1, #8]
 8019226:	690b      	ldr	r3, [r1, #16]
 8019228:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801922c:	4293      	cmp	r3, r2
 801922e:	bfb8      	it	lt
 8019230:	4613      	movlt	r3, r2
 8019232:	6033      	str	r3, [r6, #0]
 8019234:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8019238:	4607      	mov	r7, r0
 801923a:	460c      	mov	r4, r1
 801923c:	b10a      	cbz	r2, 8019242 <_printf_common+0x26>
 801923e:	3301      	adds	r3, #1
 8019240:	6033      	str	r3, [r6, #0]
 8019242:	6823      	ldr	r3, [r4, #0]
 8019244:	0699      	lsls	r1, r3, #26
 8019246:	bf42      	ittt	mi
 8019248:	6833      	ldrmi	r3, [r6, #0]
 801924a:	3302      	addmi	r3, #2
 801924c:	6033      	strmi	r3, [r6, #0]
 801924e:	6825      	ldr	r5, [r4, #0]
 8019250:	f015 0506 	ands.w	r5, r5, #6
 8019254:	d106      	bne.n	8019264 <_printf_common+0x48>
 8019256:	f104 0a19 	add.w	sl, r4, #25
 801925a:	68e3      	ldr	r3, [r4, #12]
 801925c:	6832      	ldr	r2, [r6, #0]
 801925e:	1a9b      	subs	r3, r3, r2
 8019260:	42ab      	cmp	r3, r5
 8019262:	dc26      	bgt.n	80192b2 <_printf_common+0x96>
 8019264:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8019268:	1e13      	subs	r3, r2, #0
 801926a:	6822      	ldr	r2, [r4, #0]
 801926c:	bf18      	it	ne
 801926e:	2301      	movne	r3, #1
 8019270:	0692      	lsls	r2, r2, #26
 8019272:	d42b      	bmi.n	80192cc <_printf_common+0xb0>
 8019274:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8019278:	4649      	mov	r1, r9
 801927a:	4638      	mov	r0, r7
 801927c:	47c0      	blx	r8
 801927e:	3001      	adds	r0, #1
 8019280:	d01e      	beq.n	80192c0 <_printf_common+0xa4>
 8019282:	6823      	ldr	r3, [r4, #0]
 8019284:	68e5      	ldr	r5, [r4, #12]
 8019286:	6832      	ldr	r2, [r6, #0]
 8019288:	f003 0306 	and.w	r3, r3, #6
 801928c:	2b04      	cmp	r3, #4
 801928e:	bf08      	it	eq
 8019290:	1aad      	subeq	r5, r5, r2
 8019292:	68a3      	ldr	r3, [r4, #8]
 8019294:	6922      	ldr	r2, [r4, #16]
 8019296:	bf0c      	ite	eq
 8019298:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801929c:	2500      	movne	r5, #0
 801929e:	4293      	cmp	r3, r2
 80192a0:	bfc4      	itt	gt
 80192a2:	1a9b      	subgt	r3, r3, r2
 80192a4:	18ed      	addgt	r5, r5, r3
 80192a6:	2600      	movs	r6, #0
 80192a8:	341a      	adds	r4, #26
 80192aa:	42b5      	cmp	r5, r6
 80192ac:	d11a      	bne.n	80192e4 <_printf_common+0xc8>
 80192ae:	2000      	movs	r0, #0
 80192b0:	e008      	b.n	80192c4 <_printf_common+0xa8>
 80192b2:	2301      	movs	r3, #1
 80192b4:	4652      	mov	r2, sl
 80192b6:	4649      	mov	r1, r9
 80192b8:	4638      	mov	r0, r7
 80192ba:	47c0      	blx	r8
 80192bc:	3001      	adds	r0, #1
 80192be:	d103      	bne.n	80192c8 <_printf_common+0xac>
 80192c0:	f04f 30ff 	mov.w	r0, #4294967295
 80192c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80192c8:	3501      	adds	r5, #1
 80192ca:	e7c6      	b.n	801925a <_printf_common+0x3e>
 80192cc:	18e1      	adds	r1, r4, r3
 80192ce:	1c5a      	adds	r2, r3, #1
 80192d0:	2030      	movs	r0, #48	; 0x30
 80192d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80192d6:	4422      	add	r2, r4
 80192d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80192dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80192e0:	3302      	adds	r3, #2
 80192e2:	e7c7      	b.n	8019274 <_printf_common+0x58>
 80192e4:	2301      	movs	r3, #1
 80192e6:	4622      	mov	r2, r4
 80192e8:	4649      	mov	r1, r9
 80192ea:	4638      	mov	r0, r7
 80192ec:	47c0      	blx	r8
 80192ee:	3001      	adds	r0, #1
 80192f0:	d0e6      	beq.n	80192c0 <_printf_common+0xa4>
 80192f2:	3601      	adds	r6, #1
 80192f4:	e7d9      	b.n	80192aa <_printf_common+0x8e>
	...

080192f8 <_printf_i>:
 80192f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80192fc:	7e0f      	ldrb	r7, [r1, #24]
 80192fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8019300:	2f78      	cmp	r7, #120	; 0x78
 8019302:	4691      	mov	r9, r2
 8019304:	4680      	mov	r8, r0
 8019306:	460c      	mov	r4, r1
 8019308:	469a      	mov	sl, r3
 801930a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801930e:	d807      	bhi.n	8019320 <_printf_i+0x28>
 8019310:	2f62      	cmp	r7, #98	; 0x62
 8019312:	d80a      	bhi.n	801932a <_printf_i+0x32>
 8019314:	2f00      	cmp	r7, #0
 8019316:	f000 80d8 	beq.w	80194ca <_printf_i+0x1d2>
 801931a:	2f58      	cmp	r7, #88	; 0x58
 801931c:	f000 80a3 	beq.w	8019466 <_printf_i+0x16e>
 8019320:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019324:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8019328:	e03a      	b.n	80193a0 <_printf_i+0xa8>
 801932a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801932e:	2b15      	cmp	r3, #21
 8019330:	d8f6      	bhi.n	8019320 <_printf_i+0x28>
 8019332:	a101      	add	r1, pc, #4	; (adr r1, 8019338 <_printf_i+0x40>)
 8019334:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8019338:	08019391 	.word	0x08019391
 801933c:	080193a5 	.word	0x080193a5
 8019340:	08019321 	.word	0x08019321
 8019344:	08019321 	.word	0x08019321
 8019348:	08019321 	.word	0x08019321
 801934c:	08019321 	.word	0x08019321
 8019350:	080193a5 	.word	0x080193a5
 8019354:	08019321 	.word	0x08019321
 8019358:	08019321 	.word	0x08019321
 801935c:	08019321 	.word	0x08019321
 8019360:	08019321 	.word	0x08019321
 8019364:	080194b1 	.word	0x080194b1
 8019368:	080193d5 	.word	0x080193d5
 801936c:	08019493 	.word	0x08019493
 8019370:	08019321 	.word	0x08019321
 8019374:	08019321 	.word	0x08019321
 8019378:	080194d3 	.word	0x080194d3
 801937c:	08019321 	.word	0x08019321
 8019380:	080193d5 	.word	0x080193d5
 8019384:	08019321 	.word	0x08019321
 8019388:	08019321 	.word	0x08019321
 801938c:	0801949b 	.word	0x0801949b
 8019390:	682b      	ldr	r3, [r5, #0]
 8019392:	1d1a      	adds	r2, r3, #4
 8019394:	681b      	ldr	r3, [r3, #0]
 8019396:	602a      	str	r2, [r5, #0]
 8019398:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801939c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80193a0:	2301      	movs	r3, #1
 80193a2:	e0a3      	b.n	80194ec <_printf_i+0x1f4>
 80193a4:	6820      	ldr	r0, [r4, #0]
 80193a6:	6829      	ldr	r1, [r5, #0]
 80193a8:	0606      	lsls	r6, r0, #24
 80193aa:	f101 0304 	add.w	r3, r1, #4
 80193ae:	d50a      	bpl.n	80193c6 <_printf_i+0xce>
 80193b0:	680e      	ldr	r6, [r1, #0]
 80193b2:	602b      	str	r3, [r5, #0]
 80193b4:	2e00      	cmp	r6, #0
 80193b6:	da03      	bge.n	80193c0 <_printf_i+0xc8>
 80193b8:	232d      	movs	r3, #45	; 0x2d
 80193ba:	4276      	negs	r6, r6
 80193bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80193c0:	485e      	ldr	r0, [pc, #376]	; (801953c <_printf_i+0x244>)
 80193c2:	230a      	movs	r3, #10
 80193c4:	e019      	b.n	80193fa <_printf_i+0x102>
 80193c6:	680e      	ldr	r6, [r1, #0]
 80193c8:	602b      	str	r3, [r5, #0]
 80193ca:	f010 0f40 	tst.w	r0, #64	; 0x40
 80193ce:	bf18      	it	ne
 80193d0:	b236      	sxthne	r6, r6
 80193d2:	e7ef      	b.n	80193b4 <_printf_i+0xbc>
 80193d4:	682b      	ldr	r3, [r5, #0]
 80193d6:	6820      	ldr	r0, [r4, #0]
 80193d8:	1d19      	adds	r1, r3, #4
 80193da:	6029      	str	r1, [r5, #0]
 80193dc:	0601      	lsls	r1, r0, #24
 80193de:	d501      	bpl.n	80193e4 <_printf_i+0xec>
 80193e0:	681e      	ldr	r6, [r3, #0]
 80193e2:	e002      	b.n	80193ea <_printf_i+0xf2>
 80193e4:	0646      	lsls	r6, r0, #25
 80193e6:	d5fb      	bpl.n	80193e0 <_printf_i+0xe8>
 80193e8:	881e      	ldrh	r6, [r3, #0]
 80193ea:	4854      	ldr	r0, [pc, #336]	; (801953c <_printf_i+0x244>)
 80193ec:	2f6f      	cmp	r7, #111	; 0x6f
 80193ee:	bf0c      	ite	eq
 80193f0:	2308      	moveq	r3, #8
 80193f2:	230a      	movne	r3, #10
 80193f4:	2100      	movs	r1, #0
 80193f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80193fa:	6865      	ldr	r5, [r4, #4]
 80193fc:	60a5      	str	r5, [r4, #8]
 80193fe:	2d00      	cmp	r5, #0
 8019400:	bfa2      	ittt	ge
 8019402:	6821      	ldrge	r1, [r4, #0]
 8019404:	f021 0104 	bicge.w	r1, r1, #4
 8019408:	6021      	strge	r1, [r4, #0]
 801940a:	b90e      	cbnz	r6, 8019410 <_printf_i+0x118>
 801940c:	2d00      	cmp	r5, #0
 801940e:	d04d      	beq.n	80194ac <_printf_i+0x1b4>
 8019410:	4615      	mov	r5, r2
 8019412:	fbb6 f1f3 	udiv	r1, r6, r3
 8019416:	fb03 6711 	mls	r7, r3, r1, r6
 801941a:	5dc7      	ldrb	r7, [r0, r7]
 801941c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8019420:	4637      	mov	r7, r6
 8019422:	42bb      	cmp	r3, r7
 8019424:	460e      	mov	r6, r1
 8019426:	d9f4      	bls.n	8019412 <_printf_i+0x11a>
 8019428:	2b08      	cmp	r3, #8
 801942a:	d10b      	bne.n	8019444 <_printf_i+0x14c>
 801942c:	6823      	ldr	r3, [r4, #0]
 801942e:	07de      	lsls	r6, r3, #31
 8019430:	d508      	bpl.n	8019444 <_printf_i+0x14c>
 8019432:	6923      	ldr	r3, [r4, #16]
 8019434:	6861      	ldr	r1, [r4, #4]
 8019436:	4299      	cmp	r1, r3
 8019438:	bfde      	ittt	le
 801943a:	2330      	movle	r3, #48	; 0x30
 801943c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8019440:	f105 35ff 	addle.w	r5, r5, #4294967295
 8019444:	1b52      	subs	r2, r2, r5
 8019446:	6122      	str	r2, [r4, #16]
 8019448:	f8cd a000 	str.w	sl, [sp]
 801944c:	464b      	mov	r3, r9
 801944e:	aa03      	add	r2, sp, #12
 8019450:	4621      	mov	r1, r4
 8019452:	4640      	mov	r0, r8
 8019454:	f7ff fee2 	bl	801921c <_printf_common>
 8019458:	3001      	adds	r0, #1
 801945a:	d14c      	bne.n	80194f6 <_printf_i+0x1fe>
 801945c:	f04f 30ff 	mov.w	r0, #4294967295
 8019460:	b004      	add	sp, #16
 8019462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019466:	4835      	ldr	r0, [pc, #212]	; (801953c <_printf_i+0x244>)
 8019468:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801946c:	6829      	ldr	r1, [r5, #0]
 801946e:	6823      	ldr	r3, [r4, #0]
 8019470:	f851 6b04 	ldr.w	r6, [r1], #4
 8019474:	6029      	str	r1, [r5, #0]
 8019476:	061d      	lsls	r5, r3, #24
 8019478:	d514      	bpl.n	80194a4 <_printf_i+0x1ac>
 801947a:	07df      	lsls	r7, r3, #31
 801947c:	bf44      	itt	mi
 801947e:	f043 0320 	orrmi.w	r3, r3, #32
 8019482:	6023      	strmi	r3, [r4, #0]
 8019484:	b91e      	cbnz	r6, 801948e <_printf_i+0x196>
 8019486:	6823      	ldr	r3, [r4, #0]
 8019488:	f023 0320 	bic.w	r3, r3, #32
 801948c:	6023      	str	r3, [r4, #0]
 801948e:	2310      	movs	r3, #16
 8019490:	e7b0      	b.n	80193f4 <_printf_i+0xfc>
 8019492:	6823      	ldr	r3, [r4, #0]
 8019494:	f043 0320 	orr.w	r3, r3, #32
 8019498:	6023      	str	r3, [r4, #0]
 801949a:	2378      	movs	r3, #120	; 0x78
 801949c:	4828      	ldr	r0, [pc, #160]	; (8019540 <_printf_i+0x248>)
 801949e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80194a2:	e7e3      	b.n	801946c <_printf_i+0x174>
 80194a4:	0659      	lsls	r1, r3, #25
 80194a6:	bf48      	it	mi
 80194a8:	b2b6      	uxthmi	r6, r6
 80194aa:	e7e6      	b.n	801947a <_printf_i+0x182>
 80194ac:	4615      	mov	r5, r2
 80194ae:	e7bb      	b.n	8019428 <_printf_i+0x130>
 80194b0:	682b      	ldr	r3, [r5, #0]
 80194b2:	6826      	ldr	r6, [r4, #0]
 80194b4:	6961      	ldr	r1, [r4, #20]
 80194b6:	1d18      	adds	r0, r3, #4
 80194b8:	6028      	str	r0, [r5, #0]
 80194ba:	0635      	lsls	r5, r6, #24
 80194bc:	681b      	ldr	r3, [r3, #0]
 80194be:	d501      	bpl.n	80194c4 <_printf_i+0x1cc>
 80194c0:	6019      	str	r1, [r3, #0]
 80194c2:	e002      	b.n	80194ca <_printf_i+0x1d2>
 80194c4:	0670      	lsls	r0, r6, #25
 80194c6:	d5fb      	bpl.n	80194c0 <_printf_i+0x1c8>
 80194c8:	8019      	strh	r1, [r3, #0]
 80194ca:	2300      	movs	r3, #0
 80194cc:	6123      	str	r3, [r4, #16]
 80194ce:	4615      	mov	r5, r2
 80194d0:	e7ba      	b.n	8019448 <_printf_i+0x150>
 80194d2:	682b      	ldr	r3, [r5, #0]
 80194d4:	1d1a      	adds	r2, r3, #4
 80194d6:	602a      	str	r2, [r5, #0]
 80194d8:	681d      	ldr	r5, [r3, #0]
 80194da:	6862      	ldr	r2, [r4, #4]
 80194dc:	2100      	movs	r1, #0
 80194de:	4628      	mov	r0, r5
 80194e0:	f7e6 fe76 	bl	80001d0 <memchr>
 80194e4:	b108      	cbz	r0, 80194ea <_printf_i+0x1f2>
 80194e6:	1b40      	subs	r0, r0, r5
 80194e8:	6060      	str	r0, [r4, #4]
 80194ea:	6863      	ldr	r3, [r4, #4]
 80194ec:	6123      	str	r3, [r4, #16]
 80194ee:	2300      	movs	r3, #0
 80194f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80194f4:	e7a8      	b.n	8019448 <_printf_i+0x150>
 80194f6:	6923      	ldr	r3, [r4, #16]
 80194f8:	462a      	mov	r2, r5
 80194fa:	4649      	mov	r1, r9
 80194fc:	4640      	mov	r0, r8
 80194fe:	47d0      	blx	sl
 8019500:	3001      	adds	r0, #1
 8019502:	d0ab      	beq.n	801945c <_printf_i+0x164>
 8019504:	6823      	ldr	r3, [r4, #0]
 8019506:	079b      	lsls	r3, r3, #30
 8019508:	d413      	bmi.n	8019532 <_printf_i+0x23a>
 801950a:	68e0      	ldr	r0, [r4, #12]
 801950c:	9b03      	ldr	r3, [sp, #12]
 801950e:	4298      	cmp	r0, r3
 8019510:	bfb8      	it	lt
 8019512:	4618      	movlt	r0, r3
 8019514:	e7a4      	b.n	8019460 <_printf_i+0x168>
 8019516:	2301      	movs	r3, #1
 8019518:	4632      	mov	r2, r6
 801951a:	4649      	mov	r1, r9
 801951c:	4640      	mov	r0, r8
 801951e:	47d0      	blx	sl
 8019520:	3001      	adds	r0, #1
 8019522:	d09b      	beq.n	801945c <_printf_i+0x164>
 8019524:	3501      	adds	r5, #1
 8019526:	68e3      	ldr	r3, [r4, #12]
 8019528:	9903      	ldr	r1, [sp, #12]
 801952a:	1a5b      	subs	r3, r3, r1
 801952c:	42ab      	cmp	r3, r5
 801952e:	dcf2      	bgt.n	8019516 <_printf_i+0x21e>
 8019530:	e7eb      	b.n	801950a <_printf_i+0x212>
 8019532:	2500      	movs	r5, #0
 8019534:	f104 0619 	add.w	r6, r4, #25
 8019538:	e7f5      	b.n	8019526 <_printf_i+0x22e>
 801953a:	bf00      	nop
 801953c:	0801ccf1 	.word	0x0801ccf1
 8019540:	0801cd02 	.word	0x0801cd02

08019544 <_sbrk_r>:
 8019544:	b538      	push	{r3, r4, r5, lr}
 8019546:	4d06      	ldr	r5, [pc, #24]	; (8019560 <_sbrk_r+0x1c>)
 8019548:	2300      	movs	r3, #0
 801954a:	4604      	mov	r4, r0
 801954c:	4608      	mov	r0, r1
 801954e:	602b      	str	r3, [r5, #0]
 8019550:	f7e7 fa8a 	bl	8000a68 <_sbrk>
 8019554:	1c43      	adds	r3, r0, #1
 8019556:	d102      	bne.n	801955e <_sbrk_r+0x1a>
 8019558:	682b      	ldr	r3, [r5, #0]
 801955a:	b103      	cbz	r3, 801955e <_sbrk_r+0x1a>
 801955c:	6023      	str	r3, [r4, #0]
 801955e:	bd38      	pop	{r3, r4, r5, pc}
 8019560:	2000ca1c 	.word	0x2000ca1c

08019564 <__sread>:
 8019564:	b510      	push	{r4, lr}
 8019566:	460c      	mov	r4, r1
 8019568:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801956c:	f000 fa6e 	bl	8019a4c <_read_r>
 8019570:	2800      	cmp	r0, #0
 8019572:	bfab      	itete	ge
 8019574:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8019576:	89a3      	ldrhlt	r3, [r4, #12]
 8019578:	181b      	addge	r3, r3, r0
 801957a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801957e:	bfac      	ite	ge
 8019580:	6563      	strge	r3, [r4, #84]	; 0x54
 8019582:	81a3      	strhlt	r3, [r4, #12]
 8019584:	bd10      	pop	{r4, pc}

08019586 <__swrite>:
 8019586:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801958a:	461f      	mov	r7, r3
 801958c:	898b      	ldrh	r3, [r1, #12]
 801958e:	05db      	lsls	r3, r3, #23
 8019590:	4605      	mov	r5, r0
 8019592:	460c      	mov	r4, r1
 8019594:	4616      	mov	r6, r2
 8019596:	d505      	bpl.n	80195a4 <__swrite+0x1e>
 8019598:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801959c:	2302      	movs	r3, #2
 801959e:	2200      	movs	r2, #0
 80195a0:	f000 f9d0 	bl	8019944 <_lseek_r>
 80195a4:	89a3      	ldrh	r3, [r4, #12]
 80195a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80195aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80195ae:	81a3      	strh	r3, [r4, #12]
 80195b0:	4632      	mov	r2, r6
 80195b2:	463b      	mov	r3, r7
 80195b4:	4628      	mov	r0, r5
 80195b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80195ba:	f000 b869 	b.w	8019690 <_write_r>

080195be <__sseek>:
 80195be:	b510      	push	{r4, lr}
 80195c0:	460c      	mov	r4, r1
 80195c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80195c6:	f000 f9bd 	bl	8019944 <_lseek_r>
 80195ca:	1c43      	adds	r3, r0, #1
 80195cc:	89a3      	ldrh	r3, [r4, #12]
 80195ce:	bf15      	itete	ne
 80195d0:	6560      	strne	r0, [r4, #84]	; 0x54
 80195d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80195d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80195da:	81a3      	strheq	r3, [r4, #12]
 80195dc:	bf18      	it	ne
 80195de:	81a3      	strhne	r3, [r4, #12]
 80195e0:	bd10      	pop	{r4, pc}

080195e2 <__sclose>:
 80195e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80195e6:	f000 b8db 	b.w	80197a0 <_close_r>
	...

080195ec <__swbuf_r>:
 80195ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80195ee:	460e      	mov	r6, r1
 80195f0:	4614      	mov	r4, r2
 80195f2:	4605      	mov	r5, r0
 80195f4:	b118      	cbz	r0, 80195fe <__swbuf_r+0x12>
 80195f6:	6983      	ldr	r3, [r0, #24]
 80195f8:	b90b      	cbnz	r3, 80195fe <__swbuf_r+0x12>
 80195fa:	f7ff fb1b 	bl	8018c34 <__sinit>
 80195fe:	4b21      	ldr	r3, [pc, #132]	; (8019684 <__swbuf_r+0x98>)
 8019600:	429c      	cmp	r4, r3
 8019602:	d12b      	bne.n	801965c <__swbuf_r+0x70>
 8019604:	686c      	ldr	r4, [r5, #4]
 8019606:	69a3      	ldr	r3, [r4, #24]
 8019608:	60a3      	str	r3, [r4, #8]
 801960a:	89a3      	ldrh	r3, [r4, #12]
 801960c:	071a      	lsls	r2, r3, #28
 801960e:	d52f      	bpl.n	8019670 <__swbuf_r+0x84>
 8019610:	6923      	ldr	r3, [r4, #16]
 8019612:	b36b      	cbz	r3, 8019670 <__swbuf_r+0x84>
 8019614:	6923      	ldr	r3, [r4, #16]
 8019616:	6820      	ldr	r0, [r4, #0]
 8019618:	1ac0      	subs	r0, r0, r3
 801961a:	6963      	ldr	r3, [r4, #20]
 801961c:	b2f6      	uxtb	r6, r6
 801961e:	4283      	cmp	r3, r0
 8019620:	4637      	mov	r7, r6
 8019622:	dc04      	bgt.n	801962e <__swbuf_r+0x42>
 8019624:	4621      	mov	r1, r4
 8019626:	4628      	mov	r0, r5
 8019628:	f000 f950 	bl	80198cc <_fflush_r>
 801962c:	bb30      	cbnz	r0, 801967c <__swbuf_r+0x90>
 801962e:	68a3      	ldr	r3, [r4, #8]
 8019630:	3b01      	subs	r3, #1
 8019632:	60a3      	str	r3, [r4, #8]
 8019634:	6823      	ldr	r3, [r4, #0]
 8019636:	1c5a      	adds	r2, r3, #1
 8019638:	6022      	str	r2, [r4, #0]
 801963a:	701e      	strb	r6, [r3, #0]
 801963c:	6963      	ldr	r3, [r4, #20]
 801963e:	3001      	adds	r0, #1
 8019640:	4283      	cmp	r3, r0
 8019642:	d004      	beq.n	801964e <__swbuf_r+0x62>
 8019644:	89a3      	ldrh	r3, [r4, #12]
 8019646:	07db      	lsls	r3, r3, #31
 8019648:	d506      	bpl.n	8019658 <__swbuf_r+0x6c>
 801964a:	2e0a      	cmp	r6, #10
 801964c:	d104      	bne.n	8019658 <__swbuf_r+0x6c>
 801964e:	4621      	mov	r1, r4
 8019650:	4628      	mov	r0, r5
 8019652:	f000 f93b 	bl	80198cc <_fflush_r>
 8019656:	b988      	cbnz	r0, 801967c <__swbuf_r+0x90>
 8019658:	4638      	mov	r0, r7
 801965a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801965c:	4b0a      	ldr	r3, [pc, #40]	; (8019688 <__swbuf_r+0x9c>)
 801965e:	429c      	cmp	r4, r3
 8019660:	d101      	bne.n	8019666 <__swbuf_r+0x7a>
 8019662:	68ac      	ldr	r4, [r5, #8]
 8019664:	e7cf      	b.n	8019606 <__swbuf_r+0x1a>
 8019666:	4b09      	ldr	r3, [pc, #36]	; (801968c <__swbuf_r+0xa0>)
 8019668:	429c      	cmp	r4, r3
 801966a:	bf08      	it	eq
 801966c:	68ec      	ldreq	r4, [r5, #12]
 801966e:	e7ca      	b.n	8019606 <__swbuf_r+0x1a>
 8019670:	4621      	mov	r1, r4
 8019672:	4628      	mov	r0, r5
 8019674:	f000 f81e 	bl	80196b4 <__swsetup_r>
 8019678:	2800      	cmp	r0, #0
 801967a:	d0cb      	beq.n	8019614 <__swbuf_r+0x28>
 801967c:	f04f 37ff 	mov.w	r7, #4294967295
 8019680:	e7ea      	b.n	8019658 <__swbuf_r+0x6c>
 8019682:	bf00      	nop
 8019684:	0801cca0 	.word	0x0801cca0
 8019688:	0801ccc0 	.word	0x0801ccc0
 801968c:	0801cc80 	.word	0x0801cc80

08019690 <_write_r>:
 8019690:	b538      	push	{r3, r4, r5, lr}
 8019692:	4d07      	ldr	r5, [pc, #28]	; (80196b0 <_write_r+0x20>)
 8019694:	4604      	mov	r4, r0
 8019696:	4608      	mov	r0, r1
 8019698:	4611      	mov	r1, r2
 801969a:	2200      	movs	r2, #0
 801969c:	602a      	str	r2, [r5, #0]
 801969e:	461a      	mov	r2, r3
 80196a0:	f7e7 f991 	bl	80009c6 <_write>
 80196a4:	1c43      	adds	r3, r0, #1
 80196a6:	d102      	bne.n	80196ae <_write_r+0x1e>
 80196a8:	682b      	ldr	r3, [r5, #0]
 80196aa:	b103      	cbz	r3, 80196ae <_write_r+0x1e>
 80196ac:	6023      	str	r3, [r4, #0]
 80196ae:	bd38      	pop	{r3, r4, r5, pc}
 80196b0:	2000ca1c 	.word	0x2000ca1c

080196b4 <__swsetup_r>:
 80196b4:	4b32      	ldr	r3, [pc, #200]	; (8019780 <__swsetup_r+0xcc>)
 80196b6:	b570      	push	{r4, r5, r6, lr}
 80196b8:	681d      	ldr	r5, [r3, #0]
 80196ba:	4606      	mov	r6, r0
 80196bc:	460c      	mov	r4, r1
 80196be:	b125      	cbz	r5, 80196ca <__swsetup_r+0x16>
 80196c0:	69ab      	ldr	r3, [r5, #24]
 80196c2:	b913      	cbnz	r3, 80196ca <__swsetup_r+0x16>
 80196c4:	4628      	mov	r0, r5
 80196c6:	f7ff fab5 	bl	8018c34 <__sinit>
 80196ca:	4b2e      	ldr	r3, [pc, #184]	; (8019784 <__swsetup_r+0xd0>)
 80196cc:	429c      	cmp	r4, r3
 80196ce:	d10f      	bne.n	80196f0 <__swsetup_r+0x3c>
 80196d0:	686c      	ldr	r4, [r5, #4]
 80196d2:	89a3      	ldrh	r3, [r4, #12]
 80196d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80196d8:	0719      	lsls	r1, r3, #28
 80196da:	d42c      	bmi.n	8019736 <__swsetup_r+0x82>
 80196dc:	06dd      	lsls	r5, r3, #27
 80196de:	d411      	bmi.n	8019704 <__swsetup_r+0x50>
 80196e0:	2309      	movs	r3, #9
 80196e2:	6033      	str	r3, [r6, #0]
 80196e4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80196e8:	81a3      	strh	r3, [r4, #12]
 80196ea:	f04f 30ff 	mov.w	r0, #4294967295
 80196ee:	e03e      	b.n	801976e <__swsetup_r+0xba>
 80196f0:	4b25      	ldr	r3, [pc, #148]	; (8019788 <__swsetup_r+0xd4>)
 80196f2:	429c      	cmp	r4, r3
 80196f4:	d101      	bne.n	80196fa <__swsetup_r+0x46>
 80196f6:	68ac      	ldr	r4, [r5, #8]
 80196f8:	e7eb      	b.n	80196d2 <__swsetup_r+0x1e>
 80196fa:	4b24      	ldr	r3, [pc, #144]	; (801978c <__swsetup_r+0xd8>)
 80196fc:	429c      	cmp	r4, r3
 80196fe:	bf08      	it	eq
 8019700:	68ec      	ldreq	r4, [r5, #12]
 8019702:	e7e6      	b.n	80196d2 <__swsetup_r+0x1e>
 8019704:	0758      	lsls	r0, r3, #29
 8019706:	d512      	bpl.n	801972e <__swsetup_r+0x7a>
 8019708:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801970a:	b141      	cbz	r1, 801971e <__swsetup_r+0x6a>
 801970c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019710:	4299      	cmp	r1, r3
 8019712:	d002      	beq.n	801971a <__swsetup_r+0x66>
 8019714:	4630      	mov	r0, r6
 8019716:	f7ff fb47 	bl	8018da8 <_free_r>
 801971a:	2300      	movs	r3, #0
 801971c:	6363      	str	r3, [r4, #52]	; 0x34
 801971e:	89a3      	ldrh	r3, [r4, #12]
 8019720:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8019724:	81a3      	strh	r3, [r4, #12]
 8019726:	2300      	movs	r3, #0
 8019728:	6063      	str	r3, [r4, #4]
 801972a:	6923      	ldr	r3, [r4, #16]
 801972c:	6023      	str	r3, [r4, #0]
 801972e:	89a3      	ldrh	r3, [r4, #12]
 8019730:	f043 0308 	orr.w	r3, r3, #8
 8019734:	81a3      	strh	r3, [r4, #12]
 8019736:	6923      	ldr	r3, [r4, #16]
 8019738:	b94b      	cbnz	r3, 801974e <__swsetup_r+0x9a>
 801973a:	89a3      	ldrh	r3, [r4, #12]
 801973c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8019740:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019744:	d003      	beq.n	801974e <__swsetup_r+0x9a>
 8019746:	4621      	mov	r1, r4
 8019748:	4630      	mov	r0, r6
 801974a:	f000 f933 	bl	80199b4 <__smakebuf_r>
 801974e:	89a0      	ldrh	r0, [r4, #12]
 8019750:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019754:	f010 0301 	ands.w	r3, r0, #1
 8019758:	d00a      	beq.n	8019770 <__swsetup_r+0xbc>
 801975a:	2300      	movs	r3, #0
 801975c:	60a3      	str	r3, [r4, #8]
 801975e:	6963      	ldr	r3, [r4, #20]
 8019760:	425b      	negs	r3, r3
 8019762:	61a3      	str	r3, [r4, #24]
 8019764:	6923      	ldr	r3, [r4, #16]
 8019766:	b943      	cbnz	r3, 801977a <__swsetup_r+0xc6>
 8019768:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801976c:	d1ba      	bne.n	80196e4 <__swsetup_r+0x30>
 801976e:	bd70      	pop	{r4, r5, r6, pc}
 8019770:	0781      	lsls	r1, r0, #30
 8019772:	bf58      	it	pl
 8019774:	6963      	ldrpl	r3, [r4, #20]
 8019776:	60a3      	str	r3, [r4, #8]
 8019778:	e7f4      	b.n	8019764 <__swsetup_r+0xb0>
 801977a:	2000      	movs	r0, #0
 801977c:	e7f7      	b.n	801976e <__swsetup_r+0xba>
 801977e:	bf00      	nop
 8019780:	20000110 	.word	0x20000110
 8019784:	0801cca0 	.word	0x0801cca0
 8019788:	0801ccc0 	.word	0x0801ccc0
 801978c:	0801cc80 	.word	0x0801cc80

08019790 <abort>:
 8019790:	b508      	push	{r3, lr}
 8019792:	2006      	movs	r0, #6
 8019794:	f000 f994 	bl	8019ac0 <raise>
 8019798:	2001      	movs	r0, #1
 801979a:	f7e7 f8ed 	bl	8000978 <_exit>
	...

080197a0 <_close_r>:
 80197a0:	b538      	push	{r3, r4, r5, lr}
 80197a2:	4d06      	ldr	r5, [pc, #24]	; (80197bc <_close_r+0x1c>)
 80197a4:	2300      	movs	r3, #0
 80197a6:	4604      	mov	r4, r0
 80197a8:	4608      	mov	r0, r1
 80197aa:	602b      	str	r3, [r5, #0]
 80197ac:	f7e7 f927 	bl	80009fe <_close>
 80197b0:	1c43      	adds	r3, r0, #1
 80197b2:	d102      	bne.n	80197ba <_close_r+0x1a>
 80197b4:	682b      	ldr	r3, [r5, #0]
 80197b6:	b103      	cbz	r3, 80197ba <_close_r+0x1a>
 80197b8:	6023      	str	r3, [r4, #0]
 80197ba:	bd38      	pop	{r3, r4, r5, pc}
 80197bc:	2000ca1c 	.word	0x2000ca1c

080197c0 <__sflush_r>:
 80197c0:	898a      	ldrh	r2, [r1, #12]
 80197c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80197c6:	4605      	mov	r5, r0
 80197c8:	0710      	lsls	r0, r2, #28
 80197ca:	460c      	mov	r4, r1
 80197cc:	d458      	bmi.n	8019880 <__sflush_r+0xc0>
 80197ce:	684b      	ldr	r3, [r1, #4]
 80197d0:	2b00      	cmp	r3, #0
 80197d2:	dc05      	bgt.n	80197e0 <__sflush_r+0x20>
 80197d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80197d6:	2b00      	cmp	r3, #0
 80197d8:	dc02      	bgt.n	80197e0 <__sflush_r+0x20>
 80197da:	2000      	movs	r0, #0
 80197dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80197e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80197e2:	2e00      	cmp	r6, #0
 80197e4:	d0f9      	beq.n	80197da <__sflush_r+0x1a>
 80197e6:	2300      	movs	r3, #0
 80197e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80197ec:	682f      	ldr	r7, [r5, #0]
 80197ee:	602b      	str	r3, [r5, #0]
 80197f0:	d032      	beq.n	8019858 <__sflush_r+0x98>
 80197f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80197f4:	89a3      	ldrh	r3, [r4, #12]
 80197f6:	075a      	lsls	r2, r3, #29
 80197f8:	d505      	bpl.n	8019806 <__sflush_r+0x46>
 80197fa:	6863      	ldr	r3, [r4, #4]
 80197fc:	1ac0      	subs	r0, r0, r3
 80197fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019800:	b10b      	cbz	r3, 8019806 <__sflush_r+0x46>
 8019802:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019804:	1ac0      	subs	r0, r0, r3
 8019806:	2300      	movs	r3, #0
 8019808:	4602      	mov	r2, r0
 801980a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801980c:	6a21      	ldr	r1, [r4, #32]
 801980e:	4628      	mov	r0, r5
 8019810:	47b0      	blx	r6
 8019812:	1c43      	adds	r3, r0, #1
 8019814:	89a3      	ldrh	r3, [r4, #12]
 8019816:	d106      	bne.n	8019826 <__sflush_r+0x66>
 8019818:	6829      	ldr	r1, [r5, #0]
 801981a:	291d      	cmp	r1, #29
 801981c:	d82c      	bhi.n	8019878 <__sflush_r+0xb8>
 801981e:	4a2a      	ldr	r2, [pc, #168]	; (80198c8 <__sflush_r+0x108>)
 8019820:	40ca      	lsrs	r2, r1
 8019822:	07d6      	lsls	r6, r2, #31
 8019824:	d528      	bpl.n	8019878 <__sflush_r+0xb8>
 8019826:	2200      	movs	r2, #0
 8019828:	6062      	str	r2, [r4, #4]
 801982a:	04d9      	lsls	r1, r3, #19
 801982c:	6922      	ldr	r2, [r4, #16]
 801982e:	6022      	str	r2, [r4, #0]
 8019830:	d504      	bpl.n	801983c <__sflush_r+0x7c>
 8019832:	1c42      	adds	r2, r0, #1
 8019834:	d101      	bne.n	801983a <__sflush_r+0x7a>
 8019836:	682b      	ldr	r3, [r5, #0]
 8019838:	b903      	cbnz	r3, 801983c <__sflush_r+0x7c>
 801983a:	6560      	str	r0, [r4, #84]	; 0x54
 801983c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801983e:	602f      	str	r7, [r5, #0]
 8019840:	2900      	cmp	r1, #0
 8019842:	d0ca      	beq.n	80197da <__sflush_r+0x1a>
 8019844:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019848:	4299      	cmp	r1, r3
 801984a:	d002      	beq.n	8019852 <__sflush_r+0x92>
 801984c:	4628      	mov	r0, r5
 801984e:	f7ff faab 	bl	8018da8 <_free_r>
 8019852:	2000      	movs	r0, #0
 8019854:	6360      	str	r0, [r4, #52]	; 0x34
 8019856:	e7c1      	b.n	80197dc <__sflush_r+0x1c>
 8019858:	6a21      	ldr	r1, [r4, #32]
 801985a:	2301      	movs	r3, #1
 801985c:	4628      	mov	r0, r5
 801985e:	47b0      	blx	r6
 8019860:	1c41      	adds	r1, r0, #1
 8019862:	d1c7      	bne.n	80197f4 <__sflush_r+0x34>
 8019864:	682b      	ldr	r3, [r5, #0]
 8019866:	2b00      	cmp	r3, #0
 8019868:	d0c4      	beq.n	80197f4 <__sflush_r+0x34>
 801986a:	2b1d      	cmp	r3, #29
 801986c:	d001      	beq.n	8019872 <__sflush_r+0xb2>
 801986e:	2b16      	cmp	r3, #22
 8019870:	d101      	bne.n	8019876 <__sflush_r+0xb6>
 8019872:	602f      	str	r7, [r5, #0]
 8019874:	e7b1      	b.n	80197da <__sflush_r+0x1a>
 8019876:	89a3      	ldrh	r3, [r4, #12]
 8019878:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801987c:	81a3      	strh	r3, [r4, #12]
 801987e:	e7ad      	b.n	80197dc <__sflush_r+0x1c>
 8019880:	690f      	ldr	r7, [r1, #16]
 8019882:	2f00      	cmp	r7, #0
 8019884:	d0a9      	beq.n	80197da <__sflush_r+0x1a>
 8019886:	0793      	lsls	r3, r2, #30
 8019888:	680e      	ldr	r6, [r1, #0]
 801988a:	bf08      	it	eq
 801988c:	694b      	ldreq	r3, [r1, #20]
 801988e:	600f      	str	r7, [r1, #0]
 8019890:	bf18      	it	ne
 8019892:	2300      	movne	r3, #0
 8019894:	eba6 0807 	sub.w	r8, r6, r7
 8019898:	608b      	str	r3, [r1, #8]
 801989a:	f1b8 0f00 	cmp.w	r8, #0
 801989e:	dd9c      	ble.n	80197da <__sflush_r+0x1a>
 80198a0:	6a21      	ldr	r1, [r4, #32]
 80198a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80198a4:	4643      	mov	r3, r8
 80198a6:	463a      	mov	r2, r7
 80198a8:	4628      	mov	r0, r5
 80198aa:	47b0      	blx	r6
 80198ac:	2800      	cmp	r0, #0
 80198ae:	dc06      	bgt.n	80198be <__sflush_r+0xfe>
 80198b0:	89a3      	ldrh	r3, [r4, #12]
 80198b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80198b6:	81a3      	strh	r3, [r4, #12]
 80198b8:	f04f 30ff 	mov.w	r0, #4294967295
 80198bc:	e78e      	b.n	80197dc <__sflush_r+0x1c>
 80198be:	4407      	add	r7, r0
 80198c0:	eba8 0800 	sub.w	r8, r8, r0
 80198c4:	e7e9      	b.n	801989a <__sflush_r+0xda>
 80198c6:	bf00      	nop
 80198c8:	20400001 	.word	0x20400001

080198cc <_fflush_r>:
 80198cc:	b538      	push	{r3, r4, r5, lr}
 80198ce:	690b      	ldr	r3, [r1, #16]
 80198d0:	4605      	mov	r5, r0
 80198d2:	460c      	mov	r4, r1
 80198d4:	b913      	cbnz	r3, 80198dc <_fflush_r+0x10>
 80198d6:	2500      	movs	r5, #0
 80198d8:	4628      	mov	r0, r5
 80198da:	bd38      	pop	{r3, r4, r5, pc}
 80198dc:	b118      	cbz	r0, 80198e6 <_fflush_r+0x1a>
 80198de:	6983      	ldr	r3, [r0, #24]
 80198e0:	b90b      	cbnz	r3, 80198e6 <_fflush_r+0x1a>
 80198e2:	f7ff f9a7 	bl	8018c34 <__sinit>
 80198e6:	4b14      	ldr	r3, [pc, #80]	; (8019938 <_fflush_r+0x6c>)
 80198e8:	429c      	cmp	r4, r3
 80198ea:	d11b      	bne.n	8019924 <_fflush_r+0x58>
 80198ec:	686c      	ldr	r4, [r5, #4]
 80198ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80198f2:	2b00      	cmp	r3, #0
 80198f4:	d0ef      	beq.n	80198d6 <_fflush_r+0xa>
 80198f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80198f8:	07d0      	lsls	r0, r2, #31
 80198fa:	d404      	bmi.n	8019906 <_fflush_r+0x3a>
 80198fc:	0599      	lsls	r1, r3, #22
 80198fe:	d402      	bmi.n	8019906 <_fflush_r+0x3a>
 8019900:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019902:	f7ff fa47 	bl	8018d94 <__retarget_lock_acquire_recursive>
 8019906:	4628      	mov	r0, r5
 8019908:	4621      	mov	r1, r4
 801990a:	f7ff ff59 	bl	80197c0 <__sflush_r>
 801990e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019910:	07da      	lsls	r2, r3, #31
 8019912:	4605      	mov	r5, r0
 8019914:	d4e0      	bmi.n	80198d8 <_fflush_r+0xc>
 8019916:	89a3      	ldrh	r3, [r4, #12]
 8019918:	059b      	lsls	r3, r3, #22
 801991a:	d4dd      	bmi.n	80198d8 <_fflush_r+0xc>
 801991c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801991e:	f7ff fa3a 	bl	8018d96 <__retarget_lock_release_recursive>
 8019922:	e7d9      	b.n	80198d8 <_fflush_r+0xc>
 8019924:	4b05      	ldr	r3, [pc, #20]	; (801993c <_fflush_r+0x70>)
 8019926:	429c      	cmp	r4, r3
 8019928:	d101      	bne.n	801992e <_fflush_r+0x62>
 801992a:	68ac      	ldr	r4, [r5, #8]
 801992c:	e7df      	b.n	80198ee <_fflush_r+0x22>
 801992e:	4b04      	ldr	r3, [pc, #16]	; (8019940 <_fflush_r+0x74>)
 8019930:	429c      	cmp	r4, r3
 8019932:	bf08      	it	eq
 8019934:	68ec      	ldreq	r4, [r5, #12]
 8019936:	e7da      	b.n	80198ee <_fflush_r+0x22>
 8019938:	0801cca0 	.word	0x0801cca0
 801993c:	0801ccc0 	.word	0x0801ccc0
 8019940:	0801cc80 	.word	0x0801cc80

08019944 <_lseek_r>:
 8019944:	b538      	push	{r3, r4, r5, lr}
 8019946:	4d07      	ldr	r5, [pc, #28]	; (8019964 <_lseek_r+0x20>)
 8019948:	4604      	mov	r4, r0
 801994a:	4608      	mov	r0, r1
 801994c:	4611      	mov	r1, r2
 801994e:	2200      	movs	r2, #0
 8019950:	602a      	str	r2, [r5, #0]
 8019952:	461a      	mov	r2, r3
 8019954:	f7e7 f87a 	bl	8000a4c <_lseek>
 8019958:	1c43      	adds	r3, r0, #1
 801995a:	d102      	bne.n	8019962 <_lseek_r+0x1e>
 801995c:	682b      	ldr	r3, [r5, #0]
 801995e:	b103      	cbz	r3, 8019962 <_lseek_r+0x1e>
 8019960:	6023      	str	r3, [r4, #0]
 8019962:	bd38      	pop	{r3, r4, r5, pc}
 8019964:	2000ca1c 	.word	0x2000ca1c

08019968 <__swhatbuf_r>:
 8019968:	b570      	push	{r4, r5, r6, lr}
 801996a:	460e      	mov	r6, r1
 801996c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019970:	2900      	cmp	r1, #0
 8019972:	b096      	sub	sp, #88	; 0x58
 8019974:	4614      	mov	r4, r2
 8019976:	461d      	mov	r5, r3
 8019978:	da08      	bge.n	801998c <__swhatbuf_r+0x24>
 801997a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801997e:	2200      	movs	r2, #0
 8019980:	602a      	str	r2, [r5, #0]
 8019982:	061a      	lsls	r2, r3, #24
 8019984:	d410      	bmi.n	80199a8 <__swhatbuf_r+0x40>
 8019986:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801998a:	e00e      	b.n	80199aa <__swhatbuf_r+0x42>
 801998c:	466a      	mov	r2, sp
 801998e:	f000 f8b3 	bl	8019af8 <_fstat_r>
 8019992:	2800      	cmp	r0, #0
 8019994:	dbf1      	blt.n	801997a <__swhatbuf_r+0x12>
 8019996:	9a01      	ldr	r2, [sp, #4]
 8019998:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801999c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80199a0:	425a      	negs	r2, r3
 80199a2:	415a      	adcs	r2, r3
 80199a4:	602a      	str	r2, [r5, #0]
 80199a6:	e7ee      	b.n	8019986 <__swhatbuf_r+0x1e>
 80199a8:	2340      	movs	r3, #64	; 0x40
 80199aa:	2000      	movs	r0, #0
 80199ac:	6023      	str	r3, [r4, #0]
 80199ae:	b016      	add	sp, #88	; 0x58
 80199b0:	bd70      	pop	{r4, r5, r6, pc}
	...

080199b4 <__smakebuf_r>:
 80199b4:	898b      	ldrh	r3, [r1, #12]
 80199b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80199b8:	079d      	lsls	r5, r3, #30
 80199ba:	4606      	mov	r6, r0
 80199bc:	460c      	mov	r4, r1
 80199be:	d507      	bpl.n	80199d0 <__smakebuf_r+0x1c>
 80199c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80199c4:	6023      	str	r3, [r4, #0]
 80199c6:	6123      	str	r3, [r4, #16]
 80199c8:	2301      	movs	r3, #1
 80199ca:	6163      	str	r3, [r4, #20]
 80199cc:	b002      	add	sp, #8
 80199ce:	bd70      	pop	{r4, r5, r6, pc}
 80199d0:	ab01      	add	r3, sp, #4
 80199d2:	466a      	mov	r2, sp
 80199d4:	f7ff ffc8 	bl	8019968 <__swhatbuf_r>
 80199d8:	9900      	ldr	r1, [sp, #0]
 80199da:	4605      	mov	r5, r0
 80199dc:	4630      	mov	r0, r6
 80199de:	f7ff fa4f 	bl	8018e80 <_malloc_r>
 80199e2:	b948      	cbnz	r0, 80199f8 <__smakebuf_r+0x44>
 80199e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80199e8:	059a      	lsls	r2, r3, #22
 80199ea:	d4ef      	bmi.n	80199cc <__smakebuf_r+0x18>
 80199ec:	f023 0303 	bic.w	r3, r3, #3
 80199f0:	f043 0302 	orr.w	r3, r3, #2
 80199f4:	81a3      	strh	r3, [r4, #12]
 80199f6:	e7e3      	b.n	80199c0 <__smakebuf_r+0xc>
 80199f8:	4b0d      	ldr	r3, [pc, #52]	; (8019a30 <__smakebuf_r+0x7c>)
 80199fa:	62b3      	str	r3, [r6, #40]	; 0x28
 80199fc:	89a3      	ldrh	r3, [r4, #12]
 80199fe:	6020      	str	r0, [r4, #0]
 8019a00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019a04:	81a3      	strh	r3, [r4, #12]
 8019a06:	9b00      	ldr	r3, [sp, #0]
 8019a08:	6163      	str	r3, [r4, #20]
 8019a0a:	9b01      	ldr	r3, [sp, #4]
 8019a0c:	6120      	str	r0, [r4, #16]
 8019a0e:	b15b      	cbz	r3, 8019a28 <__smakebuf_r+0x74>
 8019a10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019a14:	4630      	mov	r0, r6
 8019a16:	f000 f881 	bl	8019b1c <_isatty_r>
 8019a1a:	b128      	cbz	r0, 8019a28 <__smakebuf_r+0x74>
 8019a1c:	89a3      	ldrh	r3, [r4, #12]
 8019a1e:	f023 0303 	bic.w	r3, r3, #3
 8019a22:	f043 0301 	orr.w	r3, r3, #1
 8019a26:	81a3      	strh	r3, [r4, #12]
 8019a28:	89a0      	ldrh	r0, [r4, #12]
 8019a2a:	4305      	orrs	r5, r0
 8019a2c:	81a5      	strh	r5, [r4, #12]
 8019a2e:	e7cd      	b.n	80199cc <__smakebuf_r+0x18>
 8019a30:	08018bcd 	.word	0x08018bcd

08019a34 <__malloc_lock>:
 8019a34:	4801      	ldr	r0, [pc, #4]	; (8019a3c <__malloc_lock+0x8>)
 8019a36:	f7ff b9ad 	b.w	8018d94 <__retarget_lock_acquire_recursive>
 8019a3a:	bf00      	nop
 8019a3c:	2000e62c 	.word	0x2000e62c

08019a40 <__malloc_unlock>:
 8019a40:	4801      	ldr	r0, [pc, #4]	; (8019a48 <__malloc_unlock+0x8>)
 8019a42:	f7ff b9a8 	b.w	8018d96 <__retarget_lock_release_recursive>
 8019a46:	bf00      	nop
 8019a48:	2000e62c 	.word	0x2000e62c

08019a4c <_read_r>:
 8019a4c:	b538      	push	{r3, r4, r5, lr}
 8019a4e:	4d07      	ldr	r5, [pc, #28]	; (8019a6c <_read_r+0x20>)
 8019a50:	4604      	mov	r4, r0
 8019a52:	4608      	mov	r0, r1
 8019a54:	4611      	mov	r1, r2
 8019a56:	2200      	movs	r2, #0
 8019a58:	602a      	str	r2, [r5, #0]
 8019a5a:	461a      	mov	r2, r3
 8019a5c:	f7e6 ff96 	bl	800098c <_read>
 8019a60:	1c43      	adds	r3, r0, #1
 8019a62:	d102      	bne.n	8019a6a <_read_r+0x1e>
 8019a64:	682b      	ldr	r3, [r5, #0]
 8019a66:	b103      	cbz	r3, 8019a6a <_read_r+0x1e>
 8019a68:	6023      	str	r3, [r4, #0]
 8019a6a:	bd38      	pop	{r3, r4, r5, pc}
 8019a6c:	2000ca1c 	.word	0x2000ca1c

08019a70 <_raise_r>:
 8019a70:	291f      	cmp	r1, #31
 8019a72:	b538      	push	{r3, r4, r5, lr}
 8019a74:	4604      	mov	r4, r0
 8019a76:	460d      	mov	r5, r1
 8019a78:	d904      	bls.n	8019a84 <_raise_r+0x14>
 8019a7a:	2316      	movs	r3, #22
 8019a7c:	6003      	str	r3, [r0, #0]
 8019a7e:	f04f 30ff 	mov.w	r0, #4294967295
 8019a82:	bd38      	pop	{r3, r4, r5, pc}
 8019a84:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8019a86:	b112      	cbz	r2, 8019a8e <_raise_r+0x1e>
 8019a88:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8019a8c:	b94b      	cbnz	r3, 8019aa2 <_raise_r+0x32>
 8019a8e:	4620      	mov	r0, r4
 8019a90:	f000 f830 	bl	8019af4 <_getpid_r>
 8019a94:	462a      	mov	r2, r5
 8019a96:	4601      	mov	r1, r0
 8019a98:	4620      	mov	r0, r4
 8019a9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019a9e:	f000 b817 	b.w	8019ad0 <_kill_r>
 8019aa2:	2b01      	cmp	r3, #1
 8019aa4:	d00a      	beq.n	8019abc <_raise_r+0x4c>
 8019aa6:	1c59      	adds	r1, r3, #1
 8019aa8:	d103      	bne.n	8019ab2 <_raise_r+0x42>
 8019aaa:	2316      	movs	r3, #22
 8019aac:	6003      	str	r3, [r0, #0]
 8019aae:	2001      	movs	r0, #1
 8019ab0:	e7e7      	b.n	8019a82 <_raise_r+0x12>
 8019ab2:	2400      	movs	r4, #0
 8019ab4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8019ab8:	4628      	mov	r0, r5
 8019aba:	4798      	blx	r3
 8019abc:	2000      	movs	r0, #0
 8019abe:	e7e0      	b.n	8019a82 <_raise_r+0x12>

08019ac0 <raise>:
 8019ac0:	4b02      	ldr	r3, [pc, #8]	; (8019acc <raise+0xc>)
 8019ac2:	4601      	mov	r1, r0
 8019ac4:	6818      	ldr	r0, [r3, #0]
 8019ac6:	f7ff bfd3 	b.w	8019a70 <_raise_r>
 8019aca:	bf00      	nop
 8019acc:	20000110 	.word	0x20000110

08019ad0 <_kill_r>:
 8019ad0:	b538      	push	{r3, r4, r5, lr}
 8019ad2:	4d07      	ldr	r5, [pc, #28]	; (8019af0 <_kill_r+0x20>)
 8019ad4:	2300      	movs	r3, #0
 8019ad6:	4604      	mov	r4, r0
 8019ad8:	4608      	mov	r0, r1
 8019ada:	4611      	mov	r1, r2
 8019adc:	602b      	str	r3, [r5, #0]
 8019ade:	f7e6 ff39 	bl	8000954 <_kill>
 8019ae2:	1c43      	adds	r3, r0, #1
 8019ae4:	d102      	bne.n	8019aec <_kill_r+0x1c>
 8019ae6:	682b      	ldr	r3, [r5, #0]
 8019ae8:	b103      	cbz	r3, 8019aec <_kill_r+0x1c>
 8019aea:	6023      	str	r3, [r4, #0]
 8019aec:	bd38      	pop	{r3, r4, r5, pc}
 8019aee:	bf00      	nop
 8019af0:	2000ca1c 	.word	0x2000ca1c

08019af4 <_getpid_r>:
 8019af4:	f7e6 bf26 	b.w	8000944 <_getpid>

08019af8 <_fstat_r>:
 8019af8:	b538      	push	{r3, r4, r5, lr}
 8019afa:	4d07      	ldr	r5, [pc, #28]	; (8019b18 <_fstat_r+0x20>)
 8019afc:	2300      	movs	r3, #0
 8019afe:	4604      	mov	r4, r0
 8019b00:	4608      	mov	r0, r1
 8019b02:	4611      	mov	r1, r2
 8019b04:	602b      	str	r3, [r5, #0]
 8019b06:	f7e6 ff86 	bl	8000a16 <_fstat>
 8019b0a:	1c43      	adds	r3, r0, #1
 8019b0c:	d102      	bne.n	8019b14 <_fstat_r+0x1c>
 8019b0e:	682b      	ldr	r3, [r5, #0]
 8019b10:	b103      	cbz	r3, 8019b14 <_fstat_r+0x1c>
 8019b12:	6023      	str	r3, [r4, #0]
 8019b14:	bd38      	pop	{r3, r4, r5, pc}
 8019b16:	bf00      	nop
 8019b18:	2000ca1c 	.word	0x2000ca1c

08019b1c <_isatty_r>:
 8019b1c:	b538      	push	{r3, r4, r5, lr}
 8019b1e:	4d06      	ldr	r5, [pc, #24]	; (8019b38 <_isatty_r+0x1c>)
 8019b20:	2300      	movs	r3, #0
 8019b22:	4604      	mov	r4, r0
 8019b24:	4608      	mov	r0, r1
 8019b26:	602b      	str	r3, [r5, #0]
 8019b28:	f7e6 ff85 	bl	8000a36 <_isatty>
 8019b2c:	1c43      	adds	r3, r0, #1
 8019b2e:	d102      	bne.n	8019b36 <_isatty_r+0x1a>
 8019b30:	682b      	ldr	r3, [r5, #0]
 8019b32:	b103      	cbz	r3, 8019b36 <_isatty_r+0x1a>
 8019b34:	6023      	str	r3, [r4, #0]
 8019b36:	bd38      	pop	{r3, r4, r5, pc}
 8019b38:	2000ca1c 	.word	0x2000ca1c

08019b3c <_init>:
 8019b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019b3e:	bf00      	nop
 8019b40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019b42:	bc08      	pop	{r3}
 8019b44:	469e      	mov	lr, r3
 8019b46:	4770      	bx	lr

08019b48 <_fini>:
 8019b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019b4a:	bf00      	nop
 8019b4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019b4e:	bc08      	pop	{r3}
 8019b50:	469e      	mov	lr, r3
 8019b52:	4770      	bx	lr
