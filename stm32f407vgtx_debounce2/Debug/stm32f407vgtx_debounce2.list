
stm32f407vgtx_debounce2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b18c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000039c8  0801b31c  0801b31c  0002b31c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801ece4  0801ece4  00030174  2**0
                  CONTENTS
  4 .ARM          00000008  0801ece4  0801ece4  0002ece4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801ecec  0801ecec  00030174  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801ecec  0801ecec  0002ecec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801ecf0  0801ecf0  0002ecf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000174  20000000  0801ecf4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030174  2**0
                  CONTENTS
 10 .bss          0000db58  20000174  20000174  00030174  2**2
                  ALLOC
 11 ._user_heap_stack 00006004  2000dccc  2000dccc  00030174  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00030174  2**0
                  CONTENTS, READONLY
 13 .debug_info   000379c5  00000000  00000000  0003019e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00008cca  00000000  00000000  00067b63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000027b0  00000000  00000000  00070830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000025c8  00000000  00000000  00072fe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00034c83  00000000  00000000  000755a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003d3c9  00000000  00000000  000aa22b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f1e39  00000000  00000000  000e75f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001d942d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000ac5c  00000000  00000000  001d9480  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stabstr      0000004e  00000000  00000000  001e40dc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000174 	.word	0x20000174
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801b304 	.word	0x0801b304

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000178 	.word	0x20000178
 80001cc:	0801b304 	.word	0x0801b304

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14d      	bne.n	800035c <__udivmoddi4+0xac>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d968      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b152      	cbz	r2, 80002e2 <__udivmoddi4+0x32>
 80002cc:	fa01 f302 	lsl.w	r3, r1, r2
 80002d0:	f1c2 0120 	rsb	r1, r2, #32
 80002d4:	fa20 f101 	lsr.w	r1, r0, r1
 80002d8:	fa0c fc02 	lsl.w	ip, ip, r2
 80002dc:	ea41 0803 	orr.w	r8, r1, r3
 80002e0:	4094      	lsls	r4, r2
 80002e2:	ea4f 451c 	mov.w	r5, ip, lsr #16
 80002e6:	0c21      	lsrs	r1, r4, #16
 80002e8:	fbb8 fef5 	udiv	lr, r8, r5
 80002ec:	fa1f f78c 	uxth.w	r7, ip
 80002f0:	fb05 831e 	mls	r3, r5, lr, r8
 80002f4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f8:	fb0e f107 	mul.w	r1, lr, r7
 80002fc:	4299      	cmp	r1, r3
 80002fe:	d90b      	bls.n	8000318 <__udivmoddi4+0x68>
 8000300:	eb1c 0303 	adds.w	r3, ip, r3
 8000304:	f10e 30ff 	add.w	r0, lr, #4294967295
 8000308:	f080 811e 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030c:	4299      	cmp	r1, r3
 800030e:	f240 811b 	bls.w	8000548 <__udivmoddi4+0x298>
 8000312:	f1ae 0e02 	sub.w	lr, lr, #2
 8000316:	4463      	add	r3, ip
 8000318:	1a5b      	subs	r3, r3, r1
 800031a:	b2a4      	uxth	r4, r4
 800031c:	fbb3 f0f5 	udiv	r0, r3, r5
 8000320:	fb05 3310 	mls	r3, r5, r0, r3
 8000324:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000328:	fb00 f707 	mul.w	r7, r0, r7
 800032c:	42a7      	cmp	r7, r4
 800032e:	d90a      	bls.n	8000346 <__udivmoddi4+0x96>
 8000330:	eb1c 0404 	adds.w	r4, ip, r4
 8000334:	f100 33ff 	add.w	r3, r0, #4294967295
 8000338:	f080 8108 	bcs.w	800054c <__udivmoddi4+0x29c>
 800033c:	42a7      	cmp	r7, r4
 800033e:	f240 8105 	bls.w	800054c <__udivmoddi4+0x29c>
 8000342:	4464      	add	r4, ip
 8000344:	3802      	subs	r0, #2
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 800034c:	2100      	movs	r1, #0
 800034e:	b11e      	cbz	r6, 8000358 <__udivmoddi4+0xa8>
 8000350:	40d4      	lsrs	r4, r2
 8000352:	2300      	movs	r3, #0
 8000354:	e9c6 4300 	strd	r4, r3, [r6]
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	428b      	cmp	r3, r1
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0xc2>
 8000360:	2e00      	cmp	r6, #0
 8000362:	f000 80ee 	beq.w	8000542 <__udivmoddi4+0x292>
 8000366:	2100      	movs	r1, #0
 8000368:	e9c6 0500 	strd	r0, r5, [r6]
 800036c:	4608      	mov	r0, r1
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f183 	clz	r1, r3
 8000376:	2900      	cmp	r1, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	42ab      	cmp	r3, r5
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb65 0303 	sbc.w	r3, r5, r3
 800038a:	2001      	movs	r0, #1
 800038c:	4698      	mov	r8, r3
 800038e:	2e00      	cmp	r6, #0
 8000390:	d0e2      	beq.n	8000358 <__udivmoddi4+0xa8>
 8000392:	e9c6 4800 	strd	r4, r8, [r6]
 8000396:	e7df      	b.n	8000358 <__udivmoddi4+0xa8>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8091 	bne.w	80004c8 <__udivmoddi4+0x218>
 80003a6:	eba1 050c 	sub.w	r5, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2101      	movs	r1, #1
 80003b4:	fbb5 f3f7 	udiv	r3, r5, r7
 80003b8:	fb07 5013 	mls	r0, r7, r3, r5
 80003bc:	0c25      	lsrs	r5, r4, #16
 80003be:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	42a8      	cmp	r0, r5
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0505 	adds.w	r5, ip, r5
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	42a8      	cmp	r0, r5
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a2d      	subs	r5, r5, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb5 f0f7 	udiv	r0, r5, r7
 80003e4:	fb07 5510 	mls	r5, r7, r0, r5
 80003e8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 35ff 	add.w	r5, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4628      	mov	r0, r5
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79e      	b.n	800034e <__udivmoddi4+0x9e>
 8000410:	f1c1 0720 	rsb	r7, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa05 f301 	lsl.w	r3, r5, r1
 8000426:	431c      	orrs	r4, r3
 8000428:	40fd      	lsrs	r5, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f301 	lsl.w	r3, r0, r1
 8000432:	fbb5 f8f9 	udiv	r8, r5, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 5518 	mls	r5, r9, r8, r5
 8000440:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	42a8      	cmp	r0, r5
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0505 	adds.w	r5, ip, r5
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	42a8      	cmp	r0, r5
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4465      	add	r5, ip
 8000468:	1a2d      	subs	r5, r5, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb5 f0f9 	udiv	r0, r5, r9
 8000470:	fb09 5510 	mls	r5, r9, r0, r5
 8000474:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	45ae      	cmp	lr, r5
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0505 	adds.w	r5, ip, r5
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	45ae      	cmp	lr, r5
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4465      	add	r5, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba5 050e 	sub.w	r5, r5, lr
 800049e:	42a5      	cmp	r5, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15e      	cbz	r6, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb65 050e 	sbc.w	r5, r5, lr
 80004b2:	fa05 f707 	lsl.w	r7, r5, r7
 80004b6:	fa22 f301 	lsr.w	r3, r2, r1
 80004ba:	40cd      	lsrs	r5, r1
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c6 7500 	strd	r7, r5, [r6]
 80004c2:	2100      	movs	r1, #0
 80004c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c8:	f1c2 0320 	rsb	r3, r2, #32
 80004cc:	fa20 f103 	lsr.w	r1, r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa25 f303 	lsr.w	r3, r5, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	430d      	orrs	r5, r1
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f1f7 	udiv	r1, r3, r7
 80004e8:	fb07 3011 	mls	r0, r7, r1, r3
 80004ec:	0c2b      	lsrs	r3, r5, #16
 80004ee:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80004f2:	fb01 f00e 	mul.w	r0, r1, lr
 80004f6:	4298      	cmp	r0, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f101 38ff 	add.w	r8, r1, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	4298      	cmp	r0, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3902      	subs	r1, #2
 800050e:	4463      	add	r3, ip
 8000510:	1a1b      	subs	r3, r3, r0
 8000512:	b2ad      	uxth	r5, r5
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3310 	mls	r3, r7, r0, r3
 800051c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000520:	fb00 f30e 	mul.w	r3, r0, lr
 8000524:	42ab      	cmp	r3, r5
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0505 	adds.w	r5, ip, r5
 800052c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	42ab      	cmp	r3, r5
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3802      	subs	r0, #2
 8000538:	4465      	add	r5, ip
 800053a:	1aed      	subs	r5, r5, r3
 800053c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	4631      	mov	r1, r6
 8000544:	4630      	mov	r0, r6
 8000546:	e707      	b.n	8000358 <__udivmoddi4+0xa8>
 8000548:	4686      	mov	lr, r0
 800054a:	e6e5      	b.n	8000318 <__udivmoddi4+0x68>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fa      	b.n	8000346 <__udivmoddi4+0x96>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4640      	mov	r0, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4641      	mov	r1, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4465      	add	r5, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4608      	mov	r0, r1
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000584:	b480      	push	{r7}
 8000586:	b085      	sub	sp, #20
 8000588:	af00      	add	r7, sp, #0
 800058a:	60f8      	str	r0, [r7, #12]
 800058c:	60b9      	str	r1, [r7, #8]
 800058e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	4a06      	ldr	r2, [pc, #24]	; (80005ac <vApplicationGetIdleTaskMemory+0x28>)
 8000594:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000596:	68bb      	ldr	r3, [r7, #8]
 8000598:	4a05      	ldr	r2, [pc, #20]	; (80005b0 <vApplicationGetIdleTaskMemory+0x2c>)
 800059a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	2280      	movs	r2, #128	; 0x80
 80005a0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005a2:	bf00      	nop
 80005a4:	3714      	adds	r7, #20
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bc80      	pop	{r7}
 80005aa:	4770      	bx	lr
 80005ac:	20000190 	.word	0x20000190
 80005b0:	20000244 	.word	0x20000244

080005b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b4:	b5b0      	push	{r4, r5, r7, lr}
 80005b6:	b088      	sub	sp, #32
 80005b8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ba:	f000 fba1 	bl	8000d00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005be:	f000 f81b 	bl	80005f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c2:	f000 f883 	bl	80006cc <MX_GPIO_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005c6:	4b0a      	ldr	r3, [pc, #40]	; (80005f0 <main+0x3c>)
 80005c8:	1d3c      	adds	r4, r7, #4
 80005ca:	461d      	mov	r5, r3
 80005cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005d0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005d8:	1d3b      	adds	r3, r7, #4
 80005da:	2100      	movs	r1, #0
 80005dc:	4618      	mov	r0, r3
 80005de:	f007 fd5f 	bl	80080a0 <osThreadCreate>
 80005e2:	4603      	mov	r3, r0
 80005e4:	4a03      	ldr	r2, [pc, #12]	; (80005f4 <main+0x40>)
 80005e6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005e8:	f007 fd43 	bl	8008072 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005ec:	e7fe      	b.n	80005ec <main+0x38>
 80005ee:	bf00      	nop
 80005f0:	0801b328 	.word	0x0801b328
 80005f4:	20000444 	.word	0x20000444

080005f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b094      	sub	sp, #80	; 0x50
 80005fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fe:	f107 0320 	add.w	r3, r7, #32
 8000602:	2230      	movs	r2, #48	; 0x30
 8000604:	2100      	movs	r1, #0
 8000606:	4618      	mov	r0, r3
 8000608:	f019 ffe6 	bl	801a5d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800060c:	f107 030c 	add.w	r3, r7, #12
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]
 800061a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800061c:	2300      	movs	r3, #0
 800061e:	60bb      	str	r3, [r7, #8]
 8000620:	4b28      	ldr	r3, [pc, #160]	; (80006c4 <SystemClock_Config+0xcc>)
 8000622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000624:	4a27      	ldr	r2, [pc, #156]	; (80006c4 <SystemClock_Config+0xcc>)
 8000626:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800062a:	6413      	str	r3, [r2, #64]	; 0x40
 800062c:	4b25      	ldr	r3, [pc, #148]	; (80006c4 <SystemClock_Config+0xcc>)
 800062e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000630:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000634:	60bb      	str	r3, [r7, #8]
 8000636:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000638:	2300      	movs	r3, #0
 800063a:	607b      	str	r3, [r7, #4]
 800063c:	4b22      	ldr	r3, [pc, #136]	; (80006c8 <SystemClock_Config+0xd0>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4a21      	ldr	r2, [pc, #132]	; (80006c8 <SystemClock_Config+0xd0>)
 8000642:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000646:	6013      	str	r3, [r2, #0]
 8000648:	4b1f      	ldr	r3, [pc, #124]	; (80006c8 <SystemClock_Config+0xd0>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000650:	607b      	str	r3, [r7, #4]
 8000652:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000654:	2301      	movs	r3, #1
 8000656:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000658:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800065c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800065e:	2302      	movs	r3, #2
 8000660:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000662:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000666:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000668:	2308      	movs	r3, #8
 800066a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800066c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000670:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000672:	2302      	movs	r3, #2
 8000674:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000676:	2307      	movs	r3, #7
 8000678:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800067a:	f107 0320 	add.w	r3, r7, #32
 800067e:	4618      	mov	r0, r3
 8000680:	f002 ff0a 	bl	8003498 <HAL_RCC_OscConfig>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800068a:	f000 f8c5 	bl	8000818 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800068e:	230f      	movs	r3, #15
 8000690:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000692:	2302      	movs	r3, #2
 8000694:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000696:	2300      	movs	r3, #0
 8000698:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800069a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800069e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006a4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006a6:	f107 030c 	add.w	r3, r7, #12
 80006aa:	2105      	movs	r1, #5
 80006ac:	4618      	mov	r0, r3
 80006ae:	f003 f96b 	bl	8003988 <HAL_RCC_ClockConfig>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006b8:	f000 f8ae 	bl	8000818 <Error_Handler>
  }
}
 80006bc:	bf00      	nop
 80006be:	3750      	adds	r7, #80	; 0x50
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	40023800 	.word	0x40023800
 80006c8:	40007000 	.word	0x40007000

080006cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b08a      	sub	sp, #40	; 0x28
 80006d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d2:	f107 0314 	add.w	r3, r7, #20
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
 80006da:	605a      	str	r2, [r3, #4]
 80006dc:	609a      	str	r2, [r3, #8]
 80006de:	60da      	str	r2, [r3, #12]
 80006e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006e2:	2300      	movs	r3, #0
 80006e4:	613b      	str	r3, [r7, #16]
 80006e6:	4b39      	ldr	r3, [pc, #228]	; (80007cc <MX_GPIO_Init+0x100>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	4a38      	ldr	r2, [pc, #224]	; (80007cc <MX_GPIO_Init+0x100>)
 80006ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006f0:	6313      	str	r3, [r2, #48]	; 0x30
 80006f2:	4b36      	ldr	r3, [pc, #216]	; (80007cc <MX_GPIO_Init+0x100>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006fa:	613b      	str	r3, [r7, #16]
 80006fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006fe:	2300      	movs	r3, #0
 8000700:	60fb      	str	r3, [r7, #12]
 8000702:	4b32      	ldr	r3, [pc, #200]	; (80007cc <MX_GPIO_Init+0x100>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	4a31      	ldr	r2, [pc, #196]	; (80007cc <MX_GPIO_Init+0x100>)
 8000708:	f043 0304 	orr.w	r3, r3, #4
 800070c:	6313      	str	r3, [r2, #48]	; 0x30
 800070e:	4b2f      	ldr	r3, [pc, #188]	; (80007cc <MX_GPIO_Init+0x100>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	f003 0304 	and.w	r3, r3, #4
 8000716:	60fb      	str	r3, [r7, #12]
 8000718:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800071a:	2300      	movs	r3, #0
 800071c:	60bb      	str	r3, [r7, #8]
 800071e:	4b2b      	ldr	r3, [pc, #172]	; (80007cc <MX_GPIO_Init+0x100>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	4a2a      	ldr	r2, [pc, #168]	; (80007cc <MX_GPIO_Init+0x100>)
 8000724:	f043 0301 	orr.w	r3, r3, #1
 8000728:	6313      	str	r3, [r2, #48]	; 0x30
 800072a:	4b28      	ldr	r3, [pc, #160]	; (80007cc <MX_GPIO_Init+0x100>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	f003 0301 	and.w	r3, r3, #1
 8000732:	60bb      	str	r3, [r7, #8]
 8000734:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	607b      	str	r3, [r7, #4]
 800073a:	4b24      	ldr	r3, [pc, #144]	; (80007cc <MX_GPIO_Init+0x100>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	4a23      	ldr	r2, [pc, #140]	; (80007cc <MX_GPIO_Init+0x100>)
 8000740:	f043 0302 	orr.w	r3, r3, #2
 8000744:	6313      	str	r3, [r2, #48]	; 0x30
 8000746:	4b21      	ldr	r3, [pc, #132]	; (80007cc <MX_GPIO_Init+0x100>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	f003 0302 	and.w	r3, r3, #2
 800074e:	607b      	str	r3, [r7, #4]
 8000750:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	603b      	str	r3, [r7, #0]
 8000756:	4b1d      	ldr	r3, [pc, #116]	; (80007cc <MX_GPIO_Init+0x100>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	4a1c      	ldr	r2, [pc, #112]	; (80007cc <MX_GPIO_Init+0x100>)
 800075c:	f043 0308 	orr.w	r3, r3, #8
 8000760:	6313      	str	r3, [r2, #48]	; 0x30
 8000762:	4b1a      	ldr	r3, [pc, #104]	; (80007cc <MX_GPIO_Init+0x100>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	f003 0308 	and.w	r3, r3, #8
 800076a:	603b      	str	r3, [r7, #0]
 800076c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800076e:	2200      	movs	r2, #0
 8000770:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000774:	4816      	ldr	r0, [pc, #88]	; (80007d0 <MX_GPIO_Init+0x104>)
 8000776:	f001 fbdb 	bl	8001f30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800077a:	2301      	movs	r3, #1
 800077c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800077e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000782:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000784:	2300      	movs	r3, #0
 8000786:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000788:	f107 0314 	add.w	r3, r7, #20
 800078c:	4619      	mov	r1, r3
 800078e:	4811      	ldr	r0, [pc, #68]	; (80007d4 <MX_GPIO_Init+0x108>)
 8000790:	f001 fa34 	bl	8001bfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000794:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000798:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800079a:	2301      	movs	r3, #1
 800079c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079e:	2300      	movs	r3, #0
 80007a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a2:	2300      	movs	r3, #0
 80007a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007a6:	f107 0314 	add.w	r3, r7, #20
 80007aa:	4619      	mov	r1, r3
 80007ac:	4808      	ldr	r0, [pc, #32]	; (80007d0 <MX_GPIO_Init+0x104>)
 80007ae:	f001 fa25 	bl	8001bfc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80007b2:	2200      	movs	r2, #0
 80007b4:	2105      	movs	r1, #5
 80007b6:	2006      	movs	r0, #6
 80007b8:	f000 fbb9 	bl	8000f2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80007bc:	2006      	movs	r0, #6
 80007be:	f000 fbd2 	bl	8000f66 <HAL_NVIC_EnableIRQ>

}
 80007c2:	bf00      	nop
 80007c4:	3728      	adds	r7, #40	; 0x28
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	40023800 	.word	0x40023800
 80007d0:	40020c00 	.word	0x40020c00
 80007d4:	40020000 	.word	0x40020000

080007d8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80007e0:	f018 ffa6 	bl	8019730 <MX_USB_DEVICE_Init>

  /* init code for LWIP */
  MX_LWIP_Init();
 80007e4:	f005 f9e6 	bl	8005bb4 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  START_TEST();
 80007e8:	f000 f9f2 	bl	8000bd0 <START_TEST>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80007ec:	2001      	movs	r0, #1
 80007ee:	f007 fca3 	bl	8008138 <osDelay>
 80007f2:	e7fb      	b.n	80007ec <StartDefaultTask+0x14>

080007f4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a04      	ldr	r2, [pc, #16]	; (8000814 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000802:	4293      	cmp	r3, r2
 8000804:	d101      	bne.n	800080a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000806:	f000 fa9d 	bl	8000d44 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800080a:	bf00      	nop
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	40010000 	.word	0x40010000

08000818 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800081c:	b672      	cpsid	i
}
 800081e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000820:	e7fe      	b.n	8000820 <Error_Handler+0x8>
	...

08000824 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	607b      	str	r3, [r7, #4]
 800082e:	4b12      	ldr	r3, [pc, #72]	; (8000878 <HAL_MspInit+0x54>)
 8000830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000832:	4a11      	ldr	r2, [pc, #68]	; (8000878 <HAL_MspInit+0x54>)
 8000834:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000838:	6453      	str	r3, [r2, #68]	; 0x44
 800083a:	4b0f      	ldr	r3, [pc, #60]	; (8000878 <HAL_MspInit+0x54>)
 800083c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800083e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000842:	607b      	str	r3, [r7, #4]
 8000844:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	603b      	str	r3, [r7, #0]
 800084a:	4b0b      	ldr	r3, [pc, #44]	; (8000878 <HAL_MspInit+0x54>)
 800084c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084e:	4a0a      	ldr	r2, [pc, #40]	; (8000878 <HAL_MspInit+0x54>)
 8000850:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000854:	6413      	str	r3, [r2, #64]	; 0x40
 8000856:	4b08      	ldr	r3, [pc, #32]	; (8000878 <HAL_MspInit+0x54>)
 8000858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800085a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800085e:	603b      	str	r3, [r7, #0]
 8000860:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000862:	2200      	movs	r2, #0
 8000864:	210f      	movs	r1, #15
 8000866:	f06f 0001 	mvn.w	r0, #1
 800086a:	f000 fb60 	bl	8000f2e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800086e:	bf00      	nop
 8000870:	3708      	adds	r7, #8
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	40023800 	.word	0x40023800

0800087c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b08c      	sub	sp, #48	; 0x30
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000884:	2300      	movs	r3, #0
 8000886:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000888:	2300      	movs	r3, #0
 800088a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 800088c:	2200      	movs	r2, #0
 800088e:	6879      	ldr	r1, [r7, #4]
 8000890:	2019      	movs	r0, #25
 8000892:	f000 fb4c 	bl	8000f2e <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000896:	2019      	movs	r0, #25
 8000898:	f000 fb65 	bl	8000f66 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800089c:	2300      	movs	r3, #0
 800089e:	60fb      	str	r3, [r7, #12]
 80008a0:	4b1f      	ldr	r3, [pc, #124]	; (8000920 <HAL_InitTick+0xa4>)
 80008a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008a4:	4a1e      	ldr	r2, [pc, #120]	; (8000920 <HAL_InitTick+0xa4>)
 80008a6:	f043 0301 	orr.w	r3, r3, #1
 80008aa:	6453      	str	r3, [r2, #68]	; 0x44
 80008ac:	4b1c      	ldr	r3, [pc, #112]	; (8000920 <HAL_InitTick+0xa4>)
 80008ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008b0:	f003 0301 	and.w	r3, r3, #1
 80008b4:	60fb      	str	r3, [r7, #12]
 80008b6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008b8:	f107 0210 	add.w	r2, r7, #16
 80008bc:	f107 0314 	add.w	r3, r7, #20
 80008c0:	4611      	mov	r1, r2
 80008c2:	4618      	mov	r0, r3
 80008c4:	f003 fa70 	bl	8003da8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80008c8:	f003 fa5a 	bl	8003d80 <HAL_RCC_GetPCLK2Freq>
 80008cc:	4603      	mov	r3, r0
 80008ce:	005b      	lsls	r3, r3, #1
 80008d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008d4:	4a13      	ldr	r2, [pc, #76]	; (8000924 <HAL_InitTick+0xa8>)
 80008d6:	fba2 2303 	umull	r2, r3, r2, r3
 80008da:	0c9b      	lsrs	r3, r3, #18
 80008dc:	3b01      	subs	r3, #1
 80008de:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80008e0:	4b11      	ldr	r3, [pc, #68]	; (8000928 <HAL_InitTick+0xac>)
 80008e2:	4a12      	ldr	r2, [pc, #72]	; (800092c <HAL_InitTick+0xb0>)
 80008e4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80008e6:	4b10      	ldr	r3, [pc, #64]	; (8000928 <HAL_InitTick+0xac>)
 80008e8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008ec:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80008ee:	4a0e      	ldr	r2, [pc, #56]	; (8000928 <HAL_InitTick+0xac>)
 80008f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008f2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80008f4:	4b0c      	ldr	r3, [pc, #48]	; (8000928 <HAL_InitTick+0xac>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008fa:	4b0b      	ldr	r3, [pc, #44]	; (8000928 <HAL_InitTick+0xac>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000900:	4809      	ldr	r0, [pc, #36]	; (8000928 <HAL_InitTick+0xac>)
 8000902:	f003 fa81 	bl	8003e08 <HAL_TIM_Base_Init>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d104      	bne.n	8000916 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800090c:	4806      	ldr	r0, [pc, #24]	; (8000928 <HAL_InitTick+0xac>)
 800090e:	f003 fad3 	bl	8003eb8 <HAL_TIM_Base_Start_IT>
 8000912:	4603      	mov	r3, r0
 8000914:	e000      	b.n	8000918 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000916:	2301      	movs	r3, #1
}
 8000918:	4618      	mov	r0, r3
 800091a:	3730      	adds	r7, #48	; 0x30
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	40023800 	.word	0x40023800
 8000924:	431bde83 	.word	0x431bde83
 8000928:	20000448 	.word	0x20000448
 800092c:	40010000 	.word	0x40010000

08000930 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000934:	e7fe      	b.n	8000934 <NMI_Handler+0x4>

08000936 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000936:	b480      	push	{r7}
 8000938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800093a:	e7fe      	b.n	800093a <HardFault_Handler+0x4>

0800093c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000940:	e7fe      	b.n	8000940 <MemManage_Handler+0x4>

08000942 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000942:	b480      	push	{r7}
 8000944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000946:	e7fe      	b.n	8000946 <BusFault_Handler+0x4>

08000948 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800094c:	e7fe      	b.n	800094c <UsageFault_Handler+0x4>

0800094e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800094e:	b480      	push	{r7}
 8000950:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000952:	bf00      	nop
 8000954:	46bd      	mov	sp, r7
 8000956:	bc80      	pop	{r7}
 8000958:	4770      	bx	lr

0800095a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800095a:	b580      	push	{r7, lr}
 800095c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800095e:	2001      	movs	r0, #1
 8000960:	f001 fafe 	bl	8001f60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000964:	bf00      	nop
 8000966:	bd80      	pop	{r7, pc}

08000968 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800096c:	4802      	ldr	r0, [pc, #8]	; (8000978 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800096e:	f003 fb11 	bl	8003f94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000972:	bf00      	nop
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	20000448 	.word	0x20000448

0800097c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000980:	4802      	ldr	r0, [pc, #8]	; (800098c <OTG_FS_IRQHandler+0x10>)
 8000982:	f001 fc5f 	bl	8002244 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000986:	bf00      	nop
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	2000d590 	.word	0x2000d590

08000990 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
	return 1;
 8000994:	2301      	movs	r3, #1
}
 8000996:	4618      	mov	r0, r3
 8000998:	46bd      	mov	sp, r7
 800099a:	bc80      	pop	{r7}
 800099c:	4770      	bx	lr
	...

080009a0 <_kill>:

int _kill(int pid, int sig)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
 80009a8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80009aa:	4b05      	ldr	r3, [pc, #20]	; (80009c0 <_kill+0x20>)
 80009ac:	2216      	movs	r2, #22
 80009ae:	601a      	str	r2, [r3, #0]
	return -1;
 80009b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	370c      	adds	r7, #12
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bc80      	pop	{r7}
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	2000dcc8 	.word	0x2000dcc8

080009c4 <_exit>:

void _exit (int status)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80009cc:	f04f 31ff 	mov.w	r1, #4294967295
 80009d0:	6878      	ldr	r0, [r7, #4]
 80009d2:	f7ff ffe5 	bl	80009a0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80009d6:	e7fe      	b.n	80009d6 <_exit+0x12>

080009d8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b086      	sub	sp, #24
 80009dc:	af00      	add	r7, sp, #0
 80009de:	60f8      	str	r0, [r7, #12]
 80009e0:	60b9      	str	r1, [r7, #8]
 80009e2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009e4:	2300      	movs	r3, #0
 80009e6:	617b      	str	r3, [r7, #20]
 80009e8:	e00a      	b.n	8000a00 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80009ea:	f3af 8000 	nop.w
 80009ee:	4601      	mov	r1, r0
 80009f0:	68bb      	ldr	r3, [r7, #8]
 80009f2:	1c5a      	adds	r2, r3, #1
 80009f4:	60ba      	str	r2, [r7, #8]
 80009f6:	b2ca      	uxtb	r2, r1
 80009f8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009fa:	697b      	ldr	r3, [r7, #20]
 80009fc:	3301      	adds	r3, #1
 80009fe:	617b      	str	r3, [r7, #20]
 8000a00:	697a      	ldr	r2, [r7, #20]
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	429a      	cmp	r2, r3
 8000a06:	dbf0      	blt.n	80009ea <_read+0x12>
	}

return len;
 8000a08:	687b      	ldr	r3, [r7, #4]
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	3718      	adds	r7, #24
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}

08000a12 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a12:	b580      	push	{r7, lr}
 8000a14:	b086      	sub	sp, #24
 8000a16:	af00      	add	r7, sp, #0
 8000a18:	60f8      	str	r0, [r7, #12]
 8000a1a:	60b9      	str	r1, [r7, #8]
 8000a1c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a1e:	2300      	movs	r3, #0
 8000a20:	617b      	str	r3, [r7, #20]
 8000a22:	e009      	b.n	8000a38 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000a24:	68bb      	ldr	r3, [r7, #8]
 8000a26:	1c5a      	adds	r2, r3, #1
 8000a28:	60ba      	str	r2, [r7, #8]
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a32:	697b      	ldr	r3, [r7, #20]
 8000a34:	3301      	adds	r3, #1
 8000a36:	617b      	str	r3, [r7, #20]
 8000a38:	697a      	ldr	r2, [r7, #20]
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	429a      	cmp	r2, r3
 8000a3e:	dbf1      	blt.n	8000a24 <_write+0x12>
	}
	return len;
 8000a40:	687b      	ldr	r3, [r7, #4]
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	3718      	adds	r7, #24
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}

08000a4a <_close>:

int _close(int file)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	b083      	sub	sp, #12
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	6078      	str	r0, [r7, #4]
	return -1;
 8000a52:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	370c      	adds	r7, #12
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bc80      	pop	{r7}
 8000a5e:	4770      	bx	lr

08000a60 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b083      	sub	sp, #12
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
 8000a68:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a70:	605a      	str	r2, [r3, #4]
	return 0;
 8000a72:	2300      	movs	r3, #0
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	370c      	adds	r7, #12
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bc80      	pop	{r7}
 8000a7c:	4770      	bx	lr

08000a7e <_isatty>:

int _isatty(int file)
{
 8000a7e:	b480      	push	{r7}
 8000a80:	b083      	sub	sp, #12
 8000a82:	af00      	add	r7, sp, #0
 8000a84:	6078      	str	r0, [r7, #4]
	return 1;
 8000a86:	2301      	movs	r3, #1
}
 8000a88:	4618      	mov	r0, r3
 8000a8a:	370c      	adds	r7, #12
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bc80      	pop	{r7}
 8000a90:	4770      	bx	lr

08000a92 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a92:	b480      	push	{r7}
 8000a94:	b085      	sub	sp, #20
 8000a96:	af00      	add	r7, sp, #0
 8000a98:	60f8      	str	r0, [r7, #12]
 8000a9a:	60b9      	str	r1, [r7, #8]
 8000a9c:	607a      	str	r2, [r7, #4]
	return 0;
 8000a9e:	2300      	movs	r3, #0
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	3714      	adds	r7, #20
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bc80      	pop	{r7}
 8000aa8:	4770      	bx	lr
	...

08000aac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b087      	sub	sp, #28
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ab4:	4a14      	ldr	r2, [pc, #80]	; (8000b08 <_sbrk+0x5c>)
 8000ab6:	4b15      	ldr	r3, [pc, #84]	; (8000b0c <_sbrk+0x60>)
 8000ab8:	1ad3      	subs	r3, r2, r3
 8000aba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ac0:	4b13      	ldr	r3, [pc, #76]	; (8000b10 <_sbrk+0x64>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d102      	bne.n	8000ace <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ac8:	4b11      	ldr	r3, [pc, #68]	; (8000b10 <_sbrk+0x64>)
 8000aca:	4a12      	ldr	r2, [pc, #72]	; (8000b14 <_sbrk+0x68>)
 8000acc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ace:	4b10      	ldr	r3, [pc, #64]	; (8000b10 <_sbrk+0x64>)
 8000ad0:	681a      	ldr	r2, [r3, #0]
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	4413      	add	r3, r2
 8000ad6:	693a      	ldr	r2, [r7, #16]
 8000ad8:	429a      	cmp	r2, r3
 8000ada:	d205      	bcs.n	8000ae8 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000adc:	4b0e      	ldr	r3, [pc, #56]	; (8000b18 <_sbrk+0x6c>)
 8000ade:	220c      	movs	r2, #12
 8000ae0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ae2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ae6:	e009      	b.n	8000afc <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ae8:	4b09      	ldr	r3, [pc, #36]	; (8000b10 <_sbrk+0x64>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000aee:	4b08      	ldr	r3, [pc, #32]	; (8000b10 <_sbrk+0x64>)
 8000af0:	681a      	ldr	r2, [r3, #0]
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	4413      	add	r3, r2
 8000af6:	4a06      	ldr	r2, [pc, #24]	; (8000b10 <_sbrk+0x64>)
 8000af8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000afa:	68fb      	ldr	r3, [r7, #12]
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	371c      	adds	r7, #28
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bc80      	pop	{r7}
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	20020000 	.word	0x20020000
 8000b0c:	00004000 	.word	0x00004000
 8000b10:	20000490 	.word	0x20000490
 8000b14:	2000dcd0 	.word	0x2000dcd0
 8000b18:	2000dcc8 	.word	0x2000dcc8

08000b1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b20:	bf00      	nop
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bc80      	pop	{r7}
 8000b26:	4770      	bx	lr

08000b28 <test_mqtt_netif_output>:
const ip_addr_t test_mqtt_remote_ip = IPADDR4_INIT_BYTES(192, 168, 220, 1);
const ip_addr_t test_mqtt_netmask = IPADDR4_INIT_BYTES(255, 255, 255, 0);

static err_t test_mqtt_netif_output(struct netif *netif, struct pbuf *p,
       const ip4_addr_t *ipaddr)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b085      	sub	sp, #20
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	60f8      	str	r0, [r7, #12]
 8000b30:	60b9      	str	r1, [r7, #8]
 8000b32:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(ipaddr);
  LWIP_UNUSED_ARG(p);
  return ERR_OK;
 8000b34:	2300      	movs	r3, #0
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	3714      	adds	r7, #20
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bc80      	pop	{r7}
 8000b3e:	4770      	bx	lr

08000b40 <test_mqtt_init_netif>:

static void
test_mqtt_init_netif(struct netif *netif, const ip_addr_t *ip_addr, const ip_addr_t *netmask)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b086      	sub	sp, #24
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	60f8      	str	r0, [r7, #12]
 8000b48:	60b9      	str	r1, [r7, #8]
 8000b4a:	607a      	str	r2, [r7, #4]
  struct netif *n;
  memset(netif, 0, sizeof(struct netif));
 8000b4c:	2238      	movs	r2, #56	; 0x38
 8000b4e:	2100      	movs	r1, #0
 8000b50:	68f8      	ldr	r0, [r7, #12]
 8000b52:	f019 fd41 	bl	801a5d8 <memset>
  netif->output = test_mqtt_netif_output;
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	4a15      	ldr	r2, [pc, #84]	; (8000bb0 <test_mqtt_init_netif+0x70>)
 8000b5a:	615a      	str	r2, [r3, #20]
  netif->flags |= NETIF_FLAG_UP | NETIF_FLAG_LINK_UP;
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8000b62:	f043 0305 	orr.w	r3, r3, #5
 8000b66:	b2da      	uxtb	r2, r3
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  ip_addr_copy_from_ip4(netif->netmask, *ip_2_ip4(netmask));
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681a      	ldr	r2, [r3, #0]
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	609a      	str	r2, [r3, #8]
  ip_addr_copy_from_ip4(netif->ip_addr, *ip_2_ip4(ip_addr));
 8000b76:	68bb      	ldr	r3, [r7, #8]
 8000b78:	681a      	ldr	r2, [r3, #0]
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	605a      	str	r2, [r3, #4]
  for (n = netif_list; n != NULL; n = n->next) {
 8000b7e:	4b0d      	ldr	r3, [pc, #52]	; (8000bb4 <test_mqtt_init_netif+0x74>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	617b      	str	r3, [r7, #20]
 8000b84:	e006      	b.n	8000b94 <test_mqtt_init_netif+0x54>
    if (n == netif) {
 8000b86:	697a      	ldr	r2, [r7, #20]
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	429a      	cmp	r2, r3
 8000b8c:	d00c      	beq.n	8000ba8 <test_mqtt_init_netif+0x68>
  for (n = netif_list; n != NULL; n = n->next) {
 8000b8e:	697b      	ldr	r3, [r7, #20]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	617b      	str	r3, [r7, #20]
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d1f5      	bne.n	8000b86 <test_mqtt_init_netif+0x46>
      return;
    }
  }
  netif->next = NULL;
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8000ba0:	4a04      	ldr	r2, [pc, #16]	; (8000bb4 <test_mqtt_init_netif+0x74>)
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	6013      	str	r3, [r2, #0]
 8000ba6:	e000      	b.n	8000baa <test_mqtt_init_netif+0x6a>
      return;
 8000ba8:	bf00      	nop
}
 8000baa:	3718      	adds	r7, #24
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	08000b29 	.word	0x08000b29
 8000bb4:	2000bf14 	.word	0x2000bf14

08000bb8 <test_mqtt_connection_cb>:
  netif_default = old_netif_default;
  lwip_check_ensure_no_alloc(SKIP_POOL(MEMP_SYS_TIMEOUT));
}

static void test_mqtt_connection_cb(mqtt_client_t *client, void *arg, mqtt_connection_status_t status)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b085      	sub	sp, #20
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	60f8      	str	r0, [r7, #12]
 8000bc0:	60b9      	str	r1, [r7, #8]
 8000bc2:	4613      	mov	r3, r2
 8000bc4:	80fb      	strh	r3, [r7, #6]
  LWIP_UNUSED_ARG(client);
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(status);
}
 8000bc6:	bf00      	nop
 8000bc8:	3714      	adds	r7, #20
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bc80      	pop	{r7}
 8000bce:	4770      	bx	lr

08000bd0 <START_TEST>:

void START_TEST(void)
{
 8000bd0:	b5b0      	push	{r4, r5, r7, lr}
 8000bd2:	b09c      	sub	sp, #112	; 0x70
 8000bd4:	af02      	add	r7, sp, #8
  mqtt_client_t* client;
  struct netif netif;
  err_t err;
  struct mqtt_connect_client_info_t client_info = {
 8000bd6:	4b30      	ldr	r3, [pc, #192]	; (8000c98 <START_TEST+0xc8>)
 8000bd8:	f107 0408 	add.w	r4, r7, #8
 8000bdc:	461d      	mov	r5, r3
 8000bde:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000be0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000be2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000be6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    NULL, NULL,
    10,
    NULL, NULL, 0, 0
  };
  struct pbuf *p;
  unsigned char rxbuf[] = {0x20, 0x02, 0x00, 0x00};
 8000bea:	f44f 7308 	mov.w	r3, #544	; 0x220
 8000bee:	607b      	str	r3, [r7, #4]
  //LWIP_UNUSED_ARG(_i);

  test_mqtt_init_netif(&netif, &test_mqtt_local_ip, &test_mqtt_netmask);
 8000bf0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bf4:	4a29      	ldr	r2, [pc, #164]	; (8000c9c <START_TEST+0xcc>)
 8000bf6:	492a      	ldr	r1, [pc, #168]	; (8000ca0 <START_TEST+0xd0>)
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f7ff ffa1 	bl	8000b40 <test_mqtt_init_netif>

  client = mqtt_client_new();
 8000bfe:	f00b fa3d 	bl	800c07c <mqtt_client_new>
 8000c02:	6678      	str	r0, [r7, #100]	; 0x64
  //fail_unless(client != NULL);
  err = mqtt_client_connect(client, &test_mqtt_remote_ip, 1234, test_mqtt_connection_cb, NULL, &client_info);
 8000c04:	f107 0308 	add.w	r3, r7, #8
 8000c08:	9301      	str	r3, [sp, #4]
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	9300      	str	r3, [sp, #0]
 8000c0e:	4b25      	ldr	r3, [pc, #148]	; (8000ca4 <START_TEST+0xd4>)
 8000c10:	f240 42d2 	movw	r2, #1234	; 0x4d2
 8000c14:	4924      	ldr	r1, [pc, #144]	; (8000ca8 <START_TEST+0xd8>)
 8000c16:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8000c18:	f00b fa3a 	bl	800c090 <mqtt_client_connect>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
  //fail_unless(err == ERR_OK);

  client->conn->connected(client->conn->callback_arg, client->conn, ERR_OK);
 8000c22:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000c24:	68db      	ldr	r3, [r3, #12]
 8000c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c2a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000c2c:	68d2      	ldr	r2, [r2, #12]
 8000c2e:	6910      	ldr	r0, [r2, #16]
 8000c30:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000c32:	68d1      	ldr	r1, [r2, #12]
 8000c34:	2200      	movs	r2, #0
 8000c36:	4798      	blx	r3
  p = pbuf_alloc(PBUF_RAW, sizeof(rxbuf), PBUF_REF);
 8000c38:	2241      	movs	r2, #65	; 0x41
 8000c3a:	2104      	movs	r1, #4
 8000c3c:	2000      	movs	r0, #0
 8000c3e:	f00c fe47 	bl	800d8d0 <pbuf_alloc>
 8000c42:	65f8      	str	r0, [r7, #92]	; 0x5c
  //fail_unless(p != NULL);
  p->payload = rxbuf;
 8000c44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000c46:	1d3a      	adds	r2, r7, #4
 8000c48:	605a      	str	r2, [r3, #4]
  /* since we hack the rx path, we have to hack the rx window, too: */
  client->conn->rcv_wnd -= p->tot_len;
 8000c4a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000c4c:	68db      	ldr	r3, [r3, #12]
 8000c4e:	8d19      	ldrh	r1, [r3, #40]	; 0x28
 8000c50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000c52:	891a      	ldrh	r2, [r3, #8]
 8000c54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000c56:	68db      	ldr	r3, [r3, #12]
 8000c58:	1a8a      	subs	r2, r1, r2
 8000c5a:	b292      	uxth	r2, r2
 8000c5c:	851a      	strh	r2, [r3, #40]	; 0x28
  if (client->conn->recv(client->conn->callback_arg, client->conn, p, ERR_OK) != ERR_OK) {
 8000c5e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000c60:	68db      	ldr	r3, [r3, #12]
 8000c62:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8000c66:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000c68:	68db      	ldr	r3, [r3, #12]
 8000c6a:	6918      	ldr	r0, [r3, #16]
 8000c6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000c6e:	68d9      	ldr	r1, [r3, #12]
 8000c70:	2300      	movs	r3, #0
 8000c72:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000c74:	47a0      	blx	r4
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d002      	beq.n	8000c82 <START_TEST+0xb2>
    pbuf_free(p);
 8000c7c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8000c7e:	f00d f90b 	bl	800de98 <pbuf_free>
  }

  mqtt_disconnect(client);
 8000c82:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8000c84:	f00b fc80 	bl	800c588 <mqtt_disconnect>
  /* fixme: mqtt_client_fre() is missing... */
  mem_free(client);
 8000c88:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8000c8a:	f00b feeb 	bl	800ca64 <mem_free>
}
 8000c8e:	bf00      	nop
 8000c90:	3768      	adds	r7, #104	; 0x68
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bdb0      	pop	{r4, r5, r7, pc}
 8000c96:	bf00      	nop
 8000c98:	0801b34c 	.word	0x0801b34c
 8000c9c:	0801ea4c 	.word	0x0801ea4c
 8000ca0:	0801ea44 	.word	0x0801ea44
 8000ca4:	08000bb9 	.word	0x08000bb9
 8000ca8:	0801ea48 	.word	0x0801ea48

08000cac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000cac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ce4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cb0:	480d      	ldr	r0, [pc, #52]	; (8000ce8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cb2:	490e      	ldr	r1, [pc, #56]	; (8000cec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cb4:	4a0e      	ldr	r2, [pc, #56]	; (8000cf0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cb8:	e002      	b.n	8000cc0 <LoopCopyDataInit>

08000cba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cbe:	3304      	adds	r3, #4

08000cc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cc4:	d3f9      	bcc.n	8000cba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cc6:	4a0b      	ldr	r2, [pc, #44]	; (8000cf4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cc8:	4c0b      	ldr	r4, [pc, #44]	; (8000cf8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ccc:	e001      	b.n	8000cd2 <LoopFillZerobss>

08000cce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cd0:	3204      	adds	r2, #4

08000cd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cd4:	d3fb      	bcc.n	8000cce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cd6:	f7ff ff21 	bl	8000b1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cda:	f019 fbcb 	bl	801a474 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cde:	f7ff fc69 	bl	80005b4 <main>
  bx  lr    
 8000ce2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ce4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ce8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cec:	20000174 	.word	0x20000174
  ldr r2, =_sidata
 8000cf0:	0801ecf4 	.word	0x0801ecf4
  ldr r2, =_sbss
 8000cf4:	20000174 	.word	0x20000174
  ldr r4, =_ebss
 8000cf8:	2000dccc 	.word	0x2000dccc

08000cfc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cfc:	e7fe      	b.n	8000cfc <ADC_IRQHandler>
	...

08000d00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d04:	4b0e      	ldr	r3, [pc, #56]	; (8000d40 <HAL_Init+0x40>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a0d      	ldr	r2, [pc, #52]	; (8000d40 <HAL_Init+0x40>)
 8000d0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d10:	4b0b      	ldr	r3, [pc, #44]	; (8000d40 <HAL_Init+0x40>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a0a      	ldr	r2, [pc, #40]	; (8000d40 <HAL_Init+0x40>)
 8000d16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d1c:	4b08      	ldr	r3, [pc, #32]	; (8000d40 <HAL_Init+0x40>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a07      	ldr	r2, [pc, #28]	; (8000d40 <HAL_Init+0x40>)
 8000d22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d28:	2003      	movs	r0, #3
 8000d2a:	f000 f8f5 	bl	8000f18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d2e:	200f      	movs	r0, #15
 8000d30:	f7ff fda4 	bl	800087c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d34:	f7ff fd76 	bl	8000824 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d38:	2300      	movs	r3, #0
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	40023c00 	.word	0x40023c00

08000d44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d48:	4b05      	ldr	r3, [pc, #20]	; (8000d60 <HAL_IncTick+0x1c>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	461a      	mov	r2, r3
 8000d4e:	4b05      	ldr	r3, [pc, #20]	; (8000d64 <HAL_IncTick+0x20>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4413      	add	r3, r2
 8000d54:	4a03      	ldr	r2, [pc, #12]	; (8000d64 <HAL_IncTick+0x20>)
 8000d56:	6013      	str	r3, [r2, #0]
}
 8000d58:	bf00      	nop
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bc80      	pop	{r7}
 8000d5e:	4770      	bx	lr
 8000d60:	20000008 	.word	0x20000008
 8000d64:	20000494 	.word	0x20000494

08000d68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d6c:	4b02      	ldr	r3, [pc, #8]	; (8000d78 <HAL_GetTick+0x10>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bc80      	pop	{r7}
 8000d76:	4770      	bx	lr
 8000d78:	20000494 	.word	0x20000494

08000d7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d84:	f7ff fff0 	bl	8000d68 <HAL_GetTick>
 8000d88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d94:	d005      	beq.n	8000da2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d96:	4b0a      	ldr	r3, [pc, #40]	; (8000dc0 <HAL_Delay+0x44>)
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	461a      	mov	r2, r3
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	4413      	add	r3, r2
 8000da0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000da2:	bf00      	nop
 8000da4:	f7ff ffe0 	bl	8000d68 <HAL_GetTick>
 8000da8:	4602      	mov	r2, r0
 8000daa:	68bb      	ldr	r3, [r7, #8]
 8000dac:	1ad3      	subs	r3, r2, r3
 8000dae:	68fa      	ldr	r2, [r7, #12]
 8000db0:	429a      	cmp	r2, r3
 8000db2:	d8f7      	bhi.n	8000da4 <HAL_Delay+0x28>
  {
  }
}
 8000db4:	bf00      	nop
 8000db6:	bf00      	nop
 8000db8:	3710      	adds	r7, #16
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	20000008 	.word	0x20000008

08000dc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b085      	sub	sp, #20
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	f003 0307 	and.w	r3, r3, #7
 8000dd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dd4:	4b0c      	ldr	r3, [pc, #48]	; (8000e08 <__NVIC_SetPriorityGrouping+0x44>)
 8000dd6:	68db      	ldr	r3, [r3, #12]
 8000dd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dda:	68ba      	ldr	r2, [r7, #8]
 8000ddc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000de0:	4013      	ands	r3, r2
 8000de2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000df0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000df4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000df6:	4a04      	ldr	r2, [pc, #16]	; (8000e08 <__NVIC_SetPriorityGrouping+0x44>)
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	60d3      	str	r3, [r2, #12]
}
 8000dfc:	bf00      	nop
 8000dfe:	3714      	adds	r7, #20
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bc80      	pop	{r7}
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	e000ed00 	.word	0xe000ed00

08000e0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e10:	4b04      	ldr	r3, [pc, #16]	; (8000e24 <__NVIC_GetPriorityGrouping+0x18>)
 8000e12:	68db      	ldr	r3, [r3, #12]
 8000e14:	0a1b      	lsrs	r3, r3, #8
 8000e16:	f003 0307 	and.w	r3, r3, #7
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bc80      	pop	{r7}
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	e000ed00 	.word	0xe000ed00

08000e28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4603      	mov	r3, r0
 8000e30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	db0b      	blt.n	8000e52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e3a:	79fb      	ldrb	r3, [r7, #7]
 8000e3c:	f003 021f 	and.w	r2, r3, #31
 8000e40:	4906      	ldr	r1, [pc, #24]	; (8000e5c <__NVIC_EnableIRQ+0x34>)
 8000e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e46:	095b      	lsrs	r3, r3, #5
 8000e48:	2001      	movs	r0, #1
 8000e4a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e52:	bf00      	nop
 8000e54:	370c      	adds	r7, #12
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bc80      	pop	{r7}
 8000e5a:	4770      	bx	lr
 8000e5c:	e000e100 	.word	0xe000e100

08000e60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	4603      	mov	r3, r0
 8000e68:	6039      	str	r1, [r7, #0]
 8000e6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	db0a      	blt.n	8000e8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	b2da      	uxtb	r2, r3
 8000e78:	490c      	ldr	r1, [pc, #48]	; (8000eac <__NVIC_SetPriority+0x4c>)
 8000e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7e:	0112      	lsls	r2, r2, #4
 8000e80:	b2d2      	uxtb	r2, r2
 8000e82:	440b      	add	r3, r1
 8000e84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e88:	e00a      	b.n	8000ea0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	b2da      	uxtb	r2, r3
 8000e8e:	4908      	ldr	r1, [pc, #32]	; (8000eb0 <__NVIC_SetPriority+0x50>)
 8000e90:	79fb      	ldrb	r3, [r7, #7]
 8000e92:	f003 030f 	and.w	r3, r3, #15
 8000e96:	3b04      	subs	r3, #4
 8000e98:	0112      	lsls	r2, r2, #4
 8000e9a:	b2d2      	uxtb	r2, r2
 8000e9c:	440b      	add	r3, r1
 8000e9e:	761a      	strb	r2, [r3, #24]
}
 8000ea0:	bf00      	nop
 8000ea2:	370c      	adds	r7, #12
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bc80      	pop	{r7}
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	e000e100 	.word	0xe000e100
 8000eb0:	e000ed00 	.word	0xe000ed00

08000eb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b089      	sub	sp, #36	; 0x24
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	60f8      	str	r0, [r7, #12]
 8000ebc:	60b9      	str	r1, [r7, #8]
 8000ebe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	f003 0307 	and.w	r3, r3, #7
 8000ec6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ec8:	69fb      	ldr	r3, [r7, #28]
 8000eca:	f1c3 0307 	rsb	r3, r3, #7
 8000ece:	2b04      	cmp	r3, #4
 8000ed0:	bf28      	it	cs
 8000ed2:	2304      	movcs	r3, #4
 8000ed4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	3304      	adds	r3, #4
 8000eda:	2b06      	cmp	r3, #6
 8000edc:	d902      	bls.n	8000ee4 <NVIC_EncodePriority+0x30>
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	3b03      	subs	r3, #3
 8000ee2:	e000      	b.n	8000ee6 <NVIC_EncodePriority+0x32>
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee8:	f04f 32ff 	mov.w	r2, #4294967295
 8000eec:	69bb      	ldr	r3, [r7, #24]
 8000eee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef2:	43da      	mvns	r2, r3
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	401a      	ands	r2, r3
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000efc:	f04f 31ff 	mov.w	r1, #4294967295
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	fa01 f303 	lsl.w	r3, r1, r3
 8000f06:	43d9      	mvns	r1, r3
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f0c:	4313      	orrs	r3, r2
         );
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3724      	adds	r7, #36	; 0x24
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bc80      	pop	{r7}
 8000f16:	4770      	bx	lr

08000f18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f20:	6878      	ldr	r0, [r7, #4]
 8000f22:	f7ff ff4f 	bl	8000dc4 <__NVIC_SetPriorityGrouping>
}
 8000f26:	bf00      	nop
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}

08000f2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	b086      	sub	sp, #24
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	4603      	mov	r3, r0
 8000f36:	60b9      	str	r1, [r7, #8]
 8000f38:	607a      	str	r2, [r7, #4]
 8000f3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f40:	f7ff ff64 	bl	8000e0c <__NVIC_GetPriorityGrouping>
 8000f44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f46:	687a      	ldr	r2, [r7, #4]
 8000f48:	68b9      	ldr	r1, [r7, #8]
 8000f4a:	6978      	ldr	r0, [r7, #20]
 8000f4c:	f7ff ffb2 	bl	8000eb4 <NVIC_EncodePriority>
 8000f50:	4602      	mov	r2, r0
 8000f52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f56:	4611      	mov	r1, r2
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff ff81 	bl	8000e60 <__NVIC_SetPriority>
}
 8000f5e:	bf00      	nop
 8000f60:	3718      	adds	r7, #24
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}

08000f66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f66:	b580      	push	{r7, lr}
 8000f68:	b082      	sub	sp, #8
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff ff57 	bl	8000e28 <__NVIC_EnableIRQ>
}
 8000f7a:	bf00      	nop
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
	...

08000f84 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d101      	bne.n	8000f96 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8000f92:	2301      	movs	r3, #1
 8000f94:	e06c      	b.n	8001070 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d106      	bne.n	8000fae <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2223      	movs	r2, #35	; 0x23
 8000fa4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8000fa8:	6878      	ldr	r0, [r7, #4]
 8000faa:	f000 f869 	bl	8001080 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fae:	2300      	movs	r3, #0
 8000fb0:	60bb      	str	r3, [r7, #8]
 8000fb2:	4b31      	ldr	r3, [pc, #196]	; (8001078 <HAL_ETH_Init+0xf4>)
 8000fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fb6:	4a30      	ldr	r2, [pc, #192]	; (8001078 <HAL_ETH_Init+0xf4>)
 8000fb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fbc:	6453      	str	r3, [r2, #68]	; 0x44
 8000fbe:	4b2e      	ldr	r3, [pc, #184]	; (8001078 <HAL_ETH_Init+0xf4>)
 8000fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fc6:	60bb      	str	r3, [r7, #8]
 8000fc8:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8000fca:	4b2c      	ldr	r3, [pc, #176]	; (800107c <HAL_ETH_Init+0xf8>)
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	4a2b      	ldr	r2, [pc, #172]	; (800107c <HAL_ETH_Init+0xf8>)
 8000fd0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000fd4:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8000fd6:	4b29      	ldr	r3, [pc, #164]	; (800107c <HAL_ETH_Init+0xf8>)
 8000fd8:	685a      	ldr	r2, [r3, #4]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	689b      	ldr	r3, [r3, #8]
 8000fde:	4927      	ldr	r1, [pc, #156]	; (800107c <HAL_ETH_Init+0xf8>)
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8000fe4:	4b25      	ldr	r3, [pc, #148]	; (800107c <HAL_ETH_Init+0xf8>)
 8000fe6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	687a      	ldr	r2, [r7, #4]
 8000ff4:	6812      	ldr	r2, [r2, #0]
 8000ff6:	f043 0301 	orr.w	r3, r3, #1
 8000ffa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8000ffe:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001000:	f7ff feb2 	bl	8000d68 <HAL_GetTick>
 8001004:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001006:	e011      	b.n	800102c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001008:	f7ff feae 	bl	8000d68 <HAL_GetTick>
 800100c:	4602      	mov	r2, r0
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001016:	d909      	bls.n	800102c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2204      	movs	r2, #4
 800101c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	22e0      	movs	r2, #224	; 0xe0
 8001024:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001028:	2301      	movs	r3, #1
 800102a:	e021      	b.n	8001070 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f003 0301 	and.w	r3, r3, #1
 800103a:	2b00      	cmp	r3, #0
 800103c:	d1e4      	bne.n	8001008 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800103e:	6878      	ldr	r0, [r7, #4]
 8001040:	f000 fb3a 	bl	80016b8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001044:	6878      	ldr	r0, [r7, #4]
 8001046:	f000 fbdf 	bl	8001808 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f000 fc34 	bl	80018b8 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	461a      	mov	r2, r3
 8001056:	2100      	movs	r1, #0
 8001058:	6878      	ldr	r0, [r7, #4]
 800105a:	f000 fb9f 	bl	800179c <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2200      	movs	r2, #0
 8001062:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2210      	movs	r2, #16
 800106a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800106e:	2300      	movs	r3, #0
}
 8001070:	4618      	mov	r0, r3
 8001072:	3710      	adds	r7, #16
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	40023800 	.word	0x40023800
 800107c:	40013800 	.word	0x40013800

08001080 <HAL_ETH_MspInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_MspInit(ETH_HandleTypeDef *heth)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_MspInit could be implemented in the user file
  */
}
 8001088:	bf00      	nop
 800108a:	370c      	adds	r7, #12
 800108c:	46bd      	mov	sp, r7
 800108e:	bc80      	pop	{r7}
 8001090:	4770      	bx	lr

08001092 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 8001092:	b580      	push	{r7, lr}
 8001094:	b082      	sub	sp, #8
 8001096:	af00      	add	r7, sp, #0
 8001098:	6078      	str	r0, [r7, #4]
 800109a:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d109      	bne.n	80010b6 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010a8:	f043 0201 	orr.w	r2, r3, #1
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
 80010b4:	e045      	b.n	8001142 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80010bc:	2b23      	cmp	r3, #35	; 0x23
 80010be:	d13f      	bne.n	8001140 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 80010c8:	2201      	movs	r2, #1
 80010ca:	6839      	ldr	r1, [r7, #0]
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f000 fc5f 	bl	8001990 <ETH_Prepare_Tx_Descriptors>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d009      	beq.n	80010ec <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010de:	f043 0202 	orr.w	r2, r3, #2
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 80010e8:	2301      	movs	r3, #1
 80010ea:	e02a      	b.n	8001142 <HAL_ETH_Transmit_IT+0xb0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80010ec:	f3bf 8f4f 	dsb	sy
}
 80010f0:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010f6:	1c5a      	adds	r2, r3, #1
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	629a      	str	r2, [r3, #40]	; 0x28
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001100:	2b03      	cmp	r3, #3
 8001102:	d904      	bls.n	800110e <HAL_ETH_Transmit_IT+0x7c>
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001108:	1f1a      	subs	r2, r3, #4
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001116:	695b      	ldr	r3, [r3, #20]
 8001118:	f003 0304 	and.w	r3, r3, #4
 800111c:	2b00      	cmp	r3, #0
 800111e:	d00d      	beq.n	800113c <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001128:	461a      	mov	r2, r3
 800112a:	2304      	movs	r3, #4
 800112c:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001136:	461a      	mov	r2, r3
 8001138:	2300      	movs	r3, #0
 800113a:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 800113c:	2300      	movs	r3, #0
 800113e:	e000      	b.n	8001142 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8001140:	2301      	movs	r3, #1
  }
}
 8001142:	4618      	mov	r0, r3
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 800114a:	b580      	push	{r7, lr}
 800114c:	b088      	sub	sp, #32
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
 8001152:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001154:	2300      	movs	r3, #0
 8001156:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001158:	2300      	movs	r3, #0
 800115a:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d109      	bne.n	8001176 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001168:	f043 0201 	orr.w	r2, r3, #1
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	e0a8      	b.n	80012c8 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800117c:	2b23      	cmp	r3, #35	; 0x23
 800117e:	d001      	beq.n	8001184 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001180:	2301      	movs	r3, #1
 8001182:	e0a1      	b.n	80012c8 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001188:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	69fa      	ldr	r2, [r7, #28]
 800118e:	3212      	adds	r2, #18
 8001190:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001194:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800119a:	f1c3 0304 	rsb	r3, r3, #4
 800119e:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80011a0:	e06a      	b.n	8001278 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 80011a2:	69bb      	ldr	r3, [r7, #24]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d007      	beq.n	80011be <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 80011ae:	69bb      	ldr	r3, [r7, #24]
 80011b0:	699a      	ldr	r2, [r3, #24]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 80011b6:	69bb      	ldr	r3, [r7, #24]
 80011b8:	69da      	ldr	r2, [r3, #28]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 80011be:	69bb      	ldr	r3, [r7, #24]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d103      	bne.n	80011d2 <HAL_ETH_ReadData+0x88>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d040      	beq.n	8001254 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80011d2:	69bb      	ldr	r3, [r7, #24]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d005      	beq.n	80011ea <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2200      	movs	r2, #0
 80011e2:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2200      	movs	r2, #0
 80011e8:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	695b      	ldr	r3, [r3, #20]
 80011ee:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 80011f0:	69bb      	ldr	r3, [r7, #24]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d00c      	beq.n	8001216 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 80011fc:	69bb      	ldr	r3, [r7, #24]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	0c1b      	lsrs	r3, r3, #16
 8001202:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001206:	3b04      	subs	r3, #4
 8001208:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 800120a:	69bb      	ldr	r3, [r7, #24]
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8001212:	2301      	movs	r3, #1
 8001214:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8001216:	69bb      	ldr	r3, [r7, #24]
 8001218:	689a      	ldr	r2, [r3, #8]
 800121a:	69bb      	ldr	r3, [r7, #24]
 800121c:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 800122a:	69bb      	ldr	r3, [r7, #24]
 800122c:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800122e:	461a      	mov	r2, r3
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	b29b      	uxth	r3, r3
 8001234:	f004 ff36 	bl	80060a4 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800123c:	1c5a      	adds	r2, r3, #1
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	441a      	add	r2, r3
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 800124e:	69bb      	ldr	r3, [r7, #24]
 8001250:	2200      	movs	r2, #0
 8001252:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	3301      	adds	r3, #1
 8001258:	61fb      	str	r3, [r7, #28]
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	2b03      	cmp	r3, #3
 800125e:	d902      	bls.n	8001266 <HAL_ETH_ReadData+0x11c>
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	3b04      	subs	r3, #4
 8001264:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	69fa      	ldr	r2, [r7, #28]
 800126a:	3212      	adds	r2, #18
 800126c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001270:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	3301      	adds	r3, #1
 8001276:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	2b00      	cmp	r3, #0
 800127e:	db06      	blt.n	800128e <HAL_ETH_ReadData+0x144>
 8001280:	697a      	ldr	r2, [r7, #20]
 8001282:	68bb      	ldr	r3, [r7, #8]
 8001284:	429a      	cmp	r2, r3
 8001286:	d202      	bcs.n	800128e <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8001288:	7bfb      	ldrb	r3, [r7, #15]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d089      	beq.n	80011a2 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	441a      	add	r2, r3
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d002      	beq.n	80012a8 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f000 f814 	bl	80012d0 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	69fa      	ldr	r2, [r7, #28]
 80012ac:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 80012ae:	7bfb      	ldrb	r3, [r7, #15]
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d108      	bne.n	80012c6 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2200      	movs	r2, #0
 80012c0:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80012c2:	2300      	movs	r3, #0
 80012c4:	e000      	b.n	80012c8 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3720      	adds	r7, #32
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b088      	sub	sp, #32
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80012d8:	2300      	movs	r3, #0
 80012da:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 80012dc:	2301      	movs	r3, #1
 80012de:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80012e4:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	69fa      	ldr	r2, [r7, #28]
 80012ea:	3212      	adds	r2, #18
 80012ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012f0:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80012f6:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80012f8:	e03e      	b.n	8001378 <ETH_UpdateDescriptor+0xa8>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	6a1b      	ldr	r3, [r3, #32]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d112      	bne.n	8001328 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001302:	f107 030c 	add.w	r3, r7, #12
 8001306:	4618      	mov	r0, r3
 8001308:	f004 fe9c 	bl	8006044 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d102      	bne.n	8001318 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001312:	2300      	movs	r3, #0
 8001314:	74fb      	strb	r3, [r7, #19]
 8001316:	e007      	b.n	8001328 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	461a      	mov	r2, r3
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	461a      	mov	r2, r3
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8001328:	7cfb      	ldrb	r3, [r7, #19]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d024      	beq.n	8001378 <ETH_UpdateDescriptor+0xa8>
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800132e:	f3bf 8f5f 	dmb	sy
}
 8001332:	bf00      	nop
    {
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();

      WRITE_REG(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800133a:	601a      	str	r2, [r3, #0]

      if (heth->RxDescList.ItMode == 0U)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001340:	2b00      	cmp	r3, #0
 8001342:	d103      	bne.n	800134c <ETH_UpdateDescriptor+0x7c>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | 1000U | ETH_DMARXDESC_RCH);
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	4a1a      	ldr	r2, [pc, #104]	; (80013b0 <ETH_UpdateDescriptor+0xe0>)
 8001348:	605a      	str	r2, [r3, #4]
 800134a:	e003      	b.n	8001354 <ETH_UpdateDescriptor+0x84>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, 1000U | ETH_DMARXDESC_RCH);
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	f244 32e8 	movw	r2, #17384	; 0x43e8
 8001352:	605a      	str	r2, [r3, #4]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	3301      	adds	r3, #1
 8001358:	61fb      	str	r3, [r7, #28]
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	2b03      	cmp	r3, #3
 800135e:	d902      	bls.n	8001366 <ETH_UpdateDescriptor+0x96>
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	3b04      	subs	r3, #4
 8001364:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	69fa      	ldr	r2, [r7, #28]
 800136a:	3212      	adds	r2, #18
 800136c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001370:	617b      	str	r3, [r7, #20]
      desccount--;
 8001372:	69bb      	ldr	r3, [r7, #24]
 8001374:	3b01      	subs	r3, #1
 8001376:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001378:	69bb      	ldr	r3, [r7, #24]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d002      	beq.n	8001384 <ETH_UpdateDescriptor+0xb4>
 800137e:	7cfb      	ldrb	r3, [r7, #19]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d1ba      	bne.n	80012fa <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	429a      	cmp	r2, r3
 800138c:	d00c      	beq.n	80013a8 <ETH_UpdateDescriptor+0xd8>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001396:	461a      	mov	r2, r3
 8001398:	2300      	movs	r3, #0
 800139a:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	69fa      	ldr	r2, [r7, #28]
 80013a0:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 80013a8:	bf00      	nop
 80013aa:	3720      	adds	r7, #32
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	800043e8 	.word	0x800043e8

080013b4 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b086      	sub	sp, #24
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	3318      	adds	r3, #24
 80013c0:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013c6:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013cc:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 80013ce:	2301      	movs	r3, #1
 80013d0:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80013d2:	e03f      	b.n	8001454 <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 80013d4:	2301      	movs	r3, #1
 80013d6:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	3b01      	subs	r3, #1
 80013dc:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 80013de:	68ba      	ldr	r2, [r7, #8]
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	3304      	adds	r3, #4
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	4413      	add	r3, r2
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d106      	bne.n	80013fc <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	3301      	adds	r3, #1
 80013f2:	f003 0303 	and.w	r3, r3, #3
 80013f6:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 80013f8:	2300      	movs	r3, #0
 80013fa:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 80013fc:	7bbb      	ldrb	r3, [r7, #14]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d028      	beq.n	8001454 <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	68d9      	ldr	r1, [r3, #12]
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	4613      	mov	r3, r2
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	4413      	add	r3, r2
 800140e:	00db      	lsls	r3, r3, #3
 8001410:	440b      	add	r3, r1
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	2b00      	cmp	r3, #0
 8001416:	db1b      	blt.n	8001450 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8001418:	68ba      	ldr	r2, [r7, #8]
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	3304      	adds	r3, #4
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	4413      	add	r3, r2
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	4618      	mov	r0, r3
 8001426:	f004 fe7c 	bl	8006122 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 800142a:	68ba      	ldr	r2, [r7, #8]
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	3304      	adds	r3, #4
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	4413      	add	r3, r2
 8001434:	2200      	movs	r2, #0
 8001436:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	3301      	adds	r3, #1
 800143c:	f003 0303 	and.w	r3, r3, #3
 8001440:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	697a      	ldr	r2, [r7, #20]
 8001446:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	693a      	ldr	r2, [r7, #16]
 800144c:	62da      	str	r2, [r3, #44]	; 0x2c
 800144e:	e001      	b.n	8001454 <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8001450:	2300      	movs	r3, #0
 8001452:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d002      	beq.n	8001460 <HAL_ETH_ReleaseTxPacket+0xac>
 800145a:	7bfb      	ldrb	r3, [r7, #15]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d1b9      	bne.n	80013d4 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8001460:	2300      	movs	r3, #0
}
 8001462:	4618      	mov	r0, r3
 8001464:	3718      	adds	r7, #24
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
	...

0800146c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800147e:	68fa      	ldr	r2, [r7, #12]
 8001480:	4b47      	ldr	r3, [pc, #284]	; (80015a0 <ETH_SetMACConfig+0x134>)
 8001482:	4013      	ands	r3, r2
 8001484:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	7c1b      	ldrb	r3, [r3, #16]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d102      	bne.n	8001494 <ETH_SetMACConfig+0x28>
 800148e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001492:	e000      	b.n	8001496 <ETH_SetMACConfig+0x2a>
 8001494:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	7c5b      	ldrb	r3, [r3, #17]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d102      	bne.n	80014a4 <ETH_SetMACConfig+0x38>
 800149e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80014a2:	e000      	b.n	80014a6 <ETH_SetMACConfig+0x3a>
 80014a4:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80014a6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80014ac:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	7fdb      	ldrb	r3, [r3, #31]
 80014b2:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80014b4:	431a      	orrs	r2, r3
                        macconf->Speed |
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80014ba:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80014bc:	683a      	ldr	r2, [r7, #0]
 80014be:	7f92      	ldrb	r2, [r2, #30]
 80014c0:	2a00      	cmp	r2, #0
 80014c2:	d102      	bne.n	80014ca <ETH_SetMACConfig+0x5e>
 80014c4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014c8:	e000      	b.n	80014cc <ETH_SetMACConfig+0x60>
 80014ca:	2200      	movs	r2, #0
                        macconf->Speed |
 80014cc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	7f1b      	ldrb	r3, [r3, #28]
 80014d2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80014d4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80014da:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	791b      	ldrb	r3, [r3, #4]
 80014e0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80014e2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80014e4:	683a      	ldr	r2, [r7, #0]
 80014e6:	f892 2020 	ldrb.w	r2, [r2, #32]
 80014ea:	2a00      	cmp	r2, #0
 80014ec:	d102      	bne.n	80014f4 <ETH_SetMACConfig+0x88>
 80014ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014f2:	e000      	b.n	80014f6 <ETH_SetMACConfig+0x8a>
 80014f4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80014f6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	7bdb      	ldrb	r3, [r3, #15]
 80014fc:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80014fe:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001504:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800150c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800150e:	4313      	orrs	r3, r2
 8001510:	68fa      	ldr	r2, [r7, #12]
 8001512:	4313      	orrs	r3, r2
 8001514:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	68fa      	ldr	r2, [r7, #12]
 800151c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001526:	2001      	movs	r0, #1
 8001528:	f7ff fc28 	bl	8000d7c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	68fa      	ldr	r2, [r7, #12]
 8001532:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	699b      	ldr	r3, [r3, #24]
 800153a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800153c:	68fa      	ldr	r2, [r7, #12]
 800153e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001542:	4013      	ands	r3, r2
 8001544:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800154a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->ZeroQuantaPause |
 800154c:	683a      	ldr	r2, [r7, #0]
 800154e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001552:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        (uint32_t)macconf->ZeroQuantaPause |
 8001558:	4313      	orrs	r3, r2
                        (uint32_t)macconf->UnicastSlowProtocolPacketDetect |
 800155a:	683a      	ldr	r2, [r7, #0]
 800155c:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
                        macconf->PauseLowThreshold |
 8001560:	4313      	orrs	r3, r2
                        (uint32_t)macconf->ReceiveFlowControl |
 8001562:	683a      	ldr	r2, [r7, #0]
 8001564:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
                        (uint32_t)macconf->UnicastSlowProtocolPacketDetect |
 8001568:	4313      	orrs	r3, r2
                        (uint32_t)macconf->TransmitFlowControl);
 800156a:	683a      	ldr	r2, [r7, #0]
 800156c:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001570:	4313      	orrs	r3, r2
 8001572:	68fa      	ldr	r2, [r7, #12]
 8001574:	4313      	orrs	r3, r2
 8001576:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	68fa      	ldr	r2, [r7, #12]
 800157e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	699b      	ldr	r3, [r3, #24]
 8001586:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001588:	2001      	movs	r0, #1
 800158a:	f7ff fbf7 	bl	8000d7c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	68fa      	ldr	r2, [r7, #12]
 8001594:	619a      	str	r2, [r3, #24]
}
 8001596:	bf00      	nop
 8001598:	3710      	adds	r7, #16
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	ff20810f 	.word	0xff20810f

080015a4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015b6:	699b      	ldr	r3, [r3, #24]
 80015b8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80015ba:	68fa      	ldr	r2, [r7, #12]
 80015bc:	4b3d      	ldr	r3, [pc, #244]	; (80016b4 <ETH_SetDMAConfig+0x110>)
 80015be:	4013      	ands	r3, r2
 80015c0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	7b1b      	ldrb	r3, [r3, #12]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d102      	bne.n	80015d0 <ETH_SetDMAConfig+0x2c>
 80015ca:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80015ce:	e000      	b.n	80015d2 <ETH_SetDMAConfig+0x2e>
 80015d0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	7b5b      	ldrb	r3, [r3, #13]
 80015d6:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80015d8:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80015da:	683a      	ldr	r2, [r7, #0]
 80015dc:	7f52      	ldrb	r2, [r2, #29]
 80015de:	2a00      	cmp	r2, #0
 80015e0:	d102      	bne.n	80015e8 <ETH_SetDMAConfig+0x44>
 80015e2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80015e6:	e000      	b.n	80015ea <ETH_SetDMAConfig+0x46>
 80015e8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80015ea:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	7b9b      	ldrb	r3, [r3, #14]
 80015f0:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80015f2:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80015f8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	7f1b      	ldrb	r3, [r3, #28]
 80015fe:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001600:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	7f9b      	ldrb	r3, [r3, #30]
 8001606:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001608:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800160e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001616:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001618:	4313      	orrs	r3, r2
 800161a:	68fa      	ldr	r2, [r7, #12]
 800161c:	4313      	orrs	r3, r2
 800161e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001628:	461a      	mov	r2, r3
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001636:	699b      	ldr	r3, [r3, #24]
 8001638:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800163a:	2001      	movs	r0, #1
 800163c:	f7ff fb9e 	bl	8000d7c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001648:	461a      	mov	r2, r3
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	791b      	ldrb	r3, [r3, #4]
 8001652:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001658:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800165e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001664:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800166c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800166e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001674:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001676:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800167c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800167e:	687a      	ldr	r2, [r7, #4]
 8001680:	6812      	ldr	r2, [r2, #0]
 8001682:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001686:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800168a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001698:	2001      	movs	r0, #1
 800169a:	f7ff fb6f 	bl	8000d7c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016a6:	461a      	mov	r2, r3
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	6013      	str	r3, [r2, #0]
}
 80016ac:	bf00      	nop
 80016ae:	3710      	adds	r7, #16
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	f8de3f23 	.word	0xf8de3f23

080016b8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b0a6      	sub	sp, #152	; 0x98
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80016c0:	2301      	movs	r3, #1
 80016c2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80016c6:	2301      	movs	r3, #1
 80016c8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80016cc:	2300      	movs	r3, #0
 80016ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80016d0:	2300      	movs	r3, #0
 80016d2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80016d6:	2301      	movs	r3, #1
 80016d8:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80016dc:	2300      	movs	r3, #0
 80016de:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80016e2:	2301      	movs	r3, #1
 80016e4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80016e8:	2300      	movs	r3, #0
 80016ea:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80016ee:	2300      	movs	r3, #0
 80016f0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80016f4:	2300      	movs	r3, #0
 80016f6:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80016f8:	2300      	movs	r3, #0
 80016fa:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80016fe:	2300      	movs	r3, #0
 8001700:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001702:	2300      	movs	r3, #0
 8001704:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001708:	2300      	movs	r3, #0
 800170a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800170e:	2300      	movs	r3, #0
 8001710:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001714:	2300      	movs	r3, #0
 8001716:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800171a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800171e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001720:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001724:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001726:	2300      	movs	r3, #0
 8001728:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800172c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001730:	4619      	mov	r1, r3
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f7ff fe9a 	bl	800146c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001738:	2301      	movs	r3, #1
 800173a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800173c:	2301      	movs	r3, #1
 800173e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001740:	2301      	movs	r3, #1
 8001742:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001746:	2301      	movs	r3, #1
 8001748:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800174a:	2300      	movs	r3, #0
 800174c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800174e:	2300      	movs	r3, #0
 8001750:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001754:	2300      	movs	r3, #0
 8001756:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800175a:	2300      	movs	r3, #0
 800175c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800175e:	2301      	movs	r3, #1
 8001760:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001764:	2301      	movs	r3, #1
 8001766:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001768:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800176c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800176e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001772:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001774:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001778:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800177a:	2301      	movs	r3, #1
 800177c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001780:	2300      	movs	r3, #0
 8001782:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001784:	2300      	movs	r3, #0
 8001786:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001788:	f107 0308 	add.w	r3, r7, #8
 800178c:	4619      	mov	r1, r3
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f7ff ff08 	bl	80015a4 <ETH_SetDMAConfig>
}
 8001794:	bf00      	nop
 8001796:	3798      	adds	r7, #152	; 0x98
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}

0800179c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800179c:	b480      	push	{r7}
 800179e:	b087      	sub	sp, #28
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	60f8      	str	r0, [r7, #12]
 80017a4:	60b9      	str	r1, [r7, #8]
 80017a6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	3305      	adds	r3, #5
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	021b      	lsls	r3, r3, #8
 80017b0:	687a      	ldr	r2, [r7, #4]
 80017b2:	3204      	adds	r2, #4
 80017b4:	7812      	ldrb	r2, [r2, #0]
 80017b6:	4313      	orrs	r3, r2
 80017b8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80017ba:	68ba      	ldr	r2, [r7, #8]
 80017bc:	4b10      	ldr	r3, [pc, #64]	; (8001800 <ETH_MACAddressConfig+0x64>)
 80017be:	4413      	add	r3, r2
 80017c0:	461a      	mov	r2, r3
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	3303      	adds	r3, #3
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	061a      	lsls	r2, r3, #24
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	3302      	adds	r3, #2
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	041b      	lsls	r3, r3, #16
 80017d6:	431a      	orrs	r2, r3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	3301      	adds	r3, #1
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	021b      	lsls	r3, r3, #8
 80017e0:	4313      	orrs	r3, r2
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	7812      	ldrb	r2, [r2, #0]
 80017e6:	4313      	orrs	r3, r2
 80017e8:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80017ea:	68ba      	ldr	r2, [r7, #8]
 80017ec:	4b05      	ldr	r3, [pc, #20]	; (8001804 <ETH_MACAddressConfig+0x68>)
 80017ee:	4413      	add	r3, r2
 80017f0:	461a      	mov	r2, r3
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	6013      	str	r3, [r2, #0]
}
 80017f6:	bf00      	nop
 80017f8:	371c      	adds	r7, #28
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bc80      	pop	{r7}
 80017fe:	4770      	bx	lr
 8001800:	40028040 	.word	0x40028040
 8001804:	40028044 	.word	0x40028044

08001808 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001808:	b480      	push	{r7}
 800180a:	b085      	sub	sp, #20
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001810:	2300      	movs	r3, #0
 8001812:	60fb      	str	r3, [r7, #12]
 8001814:	e03e      	b.n	8001894 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	68d9      	ldr	r1, [r3, #12]
 800181a:	68fa      	ldr	r2, [r7, #12]
 800181c:	4613      	mov	r3, r2
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	4413      	add	r3, r2
 8001822:	00db      	lsls	r3, r3, #3
 8001824:	440b      	add	r3, r1
 8001826:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	2200      	movs	r2, #0
 800182c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	2200      	movs	r2, #0
 8001832:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	2200      	movs	r2, #0
 8001838:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	2200      	movs	r2, #0
 800183e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001840:	68b9      	ldr	r1, [r7, #8]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	68fa      	ldr	r2, [r7, #12]
 8001846:	3206      	adds	r2, #6
 8001848:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	2b02      	cmp	r3, #2
 800185c:	d80c      	bhi.n	8001878 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	68d9      	ldr	r1, [r3, #12]
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	1c5a      	adds	r2, r3, #1
 8001866:	4613      	mov	r3, r2
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	4413      	add	r3, r2
 800186c:	00db      	lsls	r3, r3, #3
 800186e:	440b      	add	r3, r1
 8001870:	461a      	mov	r2, r3
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	60da      	str	r2, [r3, #12]
 8001876:	e004      	b.n	8001882 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	461a      	mov	r2, r3
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	3301      	adds	r3, #1
 8001892:	60fb      	str	r3, [r7, #12]
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	2b03      	cmp	r3, #3
 8001898:	d9bd      	bls.n	8001816 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2200      	movs	r2, #0
 800189e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	68da      	ldr	r2, [r3, #12]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018ac:	611a      	str	r2, [r3, #16]
}
 80018ae:	bf00      	nop
 80018b0:	3714      	adds	r7, #20
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bc80      	pop	{r7}
 80018b6:	4770      	bx	lr

080018b8 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b085      	sub	sp, #20
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80018c0:	2300      	movs	r3, #0
 80018c2:	60fb      	str	r3, [r7, #12]
 80018c4:	e046      	b.n	8001954 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6919      	ldr	r1, [r3, #16]
 80018ca:	68fa      	ldr	r2, [r7, #12]
 80018cc:	4613      	mov	r3, r2
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	4413      	add	r3, r2
 80018d2:	00db      	lsls	r3, r3, #3
 80018d4:	440b      	add	r3, r1
 80018d6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	2200      	movs	r2, #0
 80018dc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	2200      	movs	r2, #0
 80018e2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	2200      	movs	r2, #0
 80018e8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80018ea:	68bb      	ldr	r3, [r7, #8]
 80018ec:	2200      	movs	r2, #0
 80018ee:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	2200      	movs	r2, #0
 80018f4:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	2200      	movs	r2, #0
 80018fa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001902:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	f244 52f8 	movw	r2, #17912	; 0x45f8
 800190a:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001918:	68b9      	ldr	r1, [r7, #8]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	68fa      	ldr	r2, [r7, #12]
 800191e:	3212      	adds	r2, #18
 8001920:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	2b02      	cmp	r3, #2
 8001928:	d80c      	bhi.n	8001944 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6919      	ldr	r1, [r3, #16]
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	1c5a      	adds	r2, r3, #1
 8001932:	4613      	mov	r3, r2
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	4413      	add	r3, r2
 8001938:	00db      	lsls	r3, r3, #3
 800193a:	440b      	add	r3, r1
 800193c:	461a      	mov	r2, r3
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	60da      	str	r2, [r3, #12]
 8001942:	e004      	b.n	800194e <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	691b      	ldr	r3, [r3, #16]
 8001948:	461a      	mov	r2, r3
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	3301      	adds	r3, #1
 8001952:	60fb      	str	r3, [r7, #12]
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	2b03      	cmp	r3, #3
 8001958:	d9b5      	bls.n	80018c6 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2200      	movs	r2, #0
 800195e:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2200      	movs	r2, #0
 8001964:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2200      	movs	r2, #0
 800196a:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2200      	movs	r2, #0
 8001970:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2200      	movs	r2, #0
 8001976:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	691a      	ldr	r2, [r3, #16]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001984:	60da      	str	r2, [r3, #12]
}
 8001986:	bf00      	nop
 8001988:	3714      	adds	r7, #20
 800198a:	46bd      	mov	sp, r7
 800198c:	bc80      	pop	{r7}
 800198e:	4770      	bx	lr

08001990 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8001990:	b480      	push	{r7}
 8001992:	b08d      	sub	sp, #52	; 0x34
 8001994:	af00      	add	r7, sp, #0
 8001996:	60f8      	str	r0, [r7, #12]
 8001998:	60b9      	str	r1, [r7, #8]
 800199a:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	3318      	adds	r3, #24
 80019a0:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	691b      	ldr	r3, [r3, #16]
 80019a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	691b      	ldr	r3, [r3, #16]
 80019ac:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 80019ae:	2300      	movs	r3, #0
 80019b0:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019ba:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 80019c2:	2300      	movs	r3, #0
 80019c4:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80019c6:	6a3b      	ldr	r3, [r7, #32]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80019ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80019d2:	d007      	beq.n	80019e4 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80019d4:	697a      	ldr	r2, [r7, #20]
 80019d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019d8:	3304      	adds	r3, #4
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	4413      	add	r3, r2
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80019e4:	2302      	movs	r3, #2
 80019e6:	e103      	b.n	8001bf0 <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 80019e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ea:	3301      	adds	r3, #1
 80019ec:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	461a      	mov	r2, r3
 80019f4:	6a3b      	ldr	r3, [r7, #32]
 80019f6:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80019f8:	6a3b      	ldr	r3, [r7, #32]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8001a00:	f023 031f 	bic.w	r3, r3, #31
 8001a04:	69fa      	ldr	r2, [r7, #28]
 8001a06:	6852      	ldr	r2, [r2, #4]
 8001a08:	431a      	orrs	r2, r3
 8001a0a:	6a3b      	ldr	r3, [r7, #32]
 8001a0c:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0301 	and.w	r3, r3, #1
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d008      	beq.n	8001a2c <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8001a1a:	6a3b      	ldr	r3, [r7, #32]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	695b      	ldr	r3, [r3, #20]
 8001a26:	431a      	orrs	r2, r3
 8001a28:	6a3b      	ldr	r3, [r7, #32]
 8001a2a:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0320 	and.w	r3, r3, #32
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d008      	beq.n	8001a4a <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8001a38:	6a3b      	ldr	r3, [r7, #32]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	691b      	ldr	r3, [r3, #16]
 8001a44:	431a      	orrs	r2, r3
 8001a46:	6a3b      	ldr	r3, [r7, #32]
 8001a48:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0304 	and.w	r3, r3, #4
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d005      	beq.n	8001a62 <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8001a56:	6a3b      	ldr	r3, [r7, #32]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001a5e:	6a3b      	ldr	r3, [r7, #32]
 8001a60:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8001a62:	6a3b      	ldr	r3, [r7, #32]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001a6a:	6a3b      	ldr	r3, [r7, #32]
 8001a6c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8001a6e:	f3bf 8f5f 	dmb	sy
}
 8001a72:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8001a74:	6a3b      	ldr	r3, [r7, #32]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001a7c:	6a3b      	ldr	r3, [r7, #32]
 8001a7e:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8001a80:	e084      	b.n	8001b8c <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8001a82:	6a3b      	ldr	r3, [r7, #32]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8001a8a:	6a3b      	ldr	r3, [r7, #32]
 8001a8c:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d006      	beq.n	8001aa2 <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8001a94:	6a3b      	ldr	r3, [r7, #32]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8001a9c:	6a3b      	ldr	r3, [r7, #32]
 8001a9e:	601a      	str	r2, [r3, #0]
 8001aa0:	e005      	b.n	8001aae <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8001aa2:	6a3b      	ldr	r3, [r7, #32]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8001aaa:	6a3b      	ldr	r3, [r7, #32]
 8001aac:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8001aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ab6:	2b03      	cmp	r3, #3
 8001ab8:	d902      	bls.n	8001ac0 <ETH_Prepare_Tx_Descriptors+0x130>
 8001aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001abc:	3b04      	subs	r3, #4
 8001abe:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ac4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ac8:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8001aca:	6a3b      	ldr	r3, [r7, #32]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001ad2:	6a3b      	ldr	r3, [r7, #32]
 8001ad4:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8001ad6:	6a3b      	ldr	r3, [r7, #32]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001ade:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001ae2:	d007      	beq.n	8001af4 <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8001ae4:	697a      	ldr	r2, [r7, #20]
 8001ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ae8:	3304      	adds	r3, #4
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	4413      	add	r3, r2
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d029      	beq.n	8001b48 <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001afc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b00:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8001b02:	2300      	movs	r3, #0
 8001b04:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b06:	e019      	b.n	8001b3c <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 8001b08:	f3bf 8f5f 	dmb	sy
}
 8001b0c:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8001b0e:	6a3b      	ldr	r3, [r7, #32]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001b16:	6a3b      	ldr	r3, [r7, #32]
 8001b18:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8001b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b22:	2b03      	cmp	r3, #3
 8001b24:	d902      	bls.n	8001b2c <ETH_Prepare_Tx_Descriptors+0x19c>
 8001b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b28:	3b04      	subs	r3, #4
 8001b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b34:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8001b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b38:	3301      	adds	r3, #1
 8001b3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d3e1      	bcc.n	8001b08 <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 8001b44:	2302      	movs	r3, #2
 8001b46:	e053      	b.n	8001bf0 <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 8001b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	461a      	mov	r2, r3
 8001b5a:	6a3b      	ldr	r3, [r7, #32]
 8001b5c:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8001b5e:	6a3b      	ldr	r3, [r7, #32]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8001b66:	f023 031f 	bic.w	r3, r3, #31
 8001b6a:	69fa      	ldr	r2, [r7, #28]
 8001b6c:	6852      	ldr	r2, [r2, #4]
 8001b6e:	431a      	orrs	r2, r3
 8001b70:	6a3b      	ldr	r3, [r7, #32]
 8001b72:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8001b74:	69bb      	ldr	r3, [r7, #24]
 8001b76:	3301      	adds	r3, #1
 8001b78:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8001b7a:	f3bf 8f5f 	dmb	sy
}
 8001b7e:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8001b80:	6a3b      	ldr	r3, [r7, #32]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001b88:	6a3b      	ldr	r3, [r7, #32]
 8001b8a:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	f47f af76 	bne.w	8001a82 <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d006      	beq.n	8001baa <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8001b9c:	6a3b      	ldr	r3, [r7, #32]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8001ba4:	6a3b      	ldr	r3, [r7, #32]
 8001ba6:	601a      	str	r2, [r3, #0]
 8001ba8:	e005      	b.n	8001bb6 <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8001baa:	6a3b      	ldr	r3, [r7, #32]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8001bb2:	6a3b      	ldr	r3, [r7, #32]
 8001bb4:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8001bb6:	6a3b      	ldr	r3, [r7, #32]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8001bbe:	6a3b      	ldr	r3, [r7, #32]
 8001bc0:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bc6:	6979      	ldr	r1, [r7, #20]
 8001bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bca:	3304      	adds	r3, #4
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	440b      	add	r3, r1
 8001bd0:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bd6:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8001bd8:	b672      	cpsid	i
}
 8001bda:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001be0:	69bb      	ldr	r3, [r7, #24]
 8001be2:	4413      	add	r3, r2
 8001be4:	1c5a      	adds	r2, r3, #1
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8001bea:	b662      	cpsie	i
}
 8001bec:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8001bee:	2300      	movs	r3, #0
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3734      	adds	r7, #52	; 0x34
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bc80      	pop	{r7}
 8001bf8:	4770      	bx	lr
	...

08001bfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b089      	sub	sp, #36	; 0x24
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c06:	2300      	movs	r3, #0
 8001c08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c12:	2300      	movs	r3, #0
 8001c14:	61fb      	str	r3, [r7, #28]
 8001c16:	e16b      	b.n	8001ef0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c18:	2201      	movs	r2, #1
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	697a      	ldr	r2, [r7, #20]
 8001c28:	4013      	ands	r3, r2
 8001c2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c2c:	693a      	ldr	r2, [r7, #16]
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	f040 815a 	bne.w	8001eea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	f003 0303 	and.w	r3, r3, #3
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d005      	beq.n	8001c4e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d130      	bne.n	8001cb0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	005b      	lsls	r3, r3, #1
 8001c58:	2203      	movs	r2, #3
 8001c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5e:	43db      	mvns	r3, r3
 8001c60:	69ba      	ldr	r2, [r7, #24]
 8001c62:	4013      	ands	r3, r2
 8001c64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	68da      	ldr	r2, [r3, #12]
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	005b      	lsls	r3, r3, #1
 8001c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c72:	69ba      	ldr	r2, [r7, #24]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	69ba      	ldr	r2, [r7, #24]
 8001c7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c84:	2201      	movs	r2, #1
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8c:	43db      	mvns	r3, r3
 8001c8e:	69ba      	ldr	r2, [r7, #24]
 8001c90:	4013      	ands	r3, r2
 8001c92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	091b      	lsrs	r3, r3, #4
 8001c9a:	f003 0201 	and.w	r2, r3, #1
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	69ba      	ldr	r2, [r7, #24]
 8001cae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f003 0303 	and.w	r3, r3, #3
 8001cb8:	2b03      	cmp	r3, #3
 8001cba:	d017      	beq.n	8001cec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	005b      	lsls	r3, r3, #1
 8001cc6:	2203      	movs	r2, #3
 8001cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ccc:	43db      	mvns	r3, r3
 8001cce:	69ba      	ldr	r2, [r7, #24]
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	689a      	ldr	r2, [r3, #8]
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	005b      	lsls	r3, r3, #1
 8001cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	69ba      	ldr	r2, [r7, #24]
 8001cea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f003 0303 	and.w	r3, r3, #3
 8001cf4:	2b02      	cmp	r3, #2
 8001cf6:	d123      	bne.n	8001d40 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	08da      	lsrs	r2, r3, #3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	3208      	adds	r2, #8
 8001d00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d04:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	f003 0307 	and.w	r3, r3, #7
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	220f      	movs	r2, #15
 8001d10:	fa02 f303 	lsl.w	r3, r2, r3
 8001d14:	43db      	mvns	r3, r3
 8001d16:	69ba      	ldr	r2, [r7, #24]
 8001d18:	4013      	ands	r3, r2
 8001d1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	691a      	ldr	r2, [r3, #16]
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	f003 0307 	and.w	r3, r3, #7
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2c:	69ba      	ldr	r2, [r7, #24]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	08da      	lsrs	r2, r3, #3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	3208      	adds	r2, #8
 8001d3a:	69b9      	ldr	r1, [r7, #24]
 8001d3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	2203      	movs	r2, #3
 8001d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d50:	43db      	mvns	r3, r3
 8001d52:	69ba      	ldr	r2, [r7, #24]
 8001d54:	4013      	ands	r3, r2
 8001d56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f003 0203 	and.w	r2, r3, #3
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	005b      	lsls	r3, r3, #1
 8001d64:	fa02 f303 	lsl.w	r3, r2, r3
 8001d68:	69ba      	ldr	r2, [r7, #24]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	69ba      	ldr	r2, [r7, #24]
 8001d72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	f000 80b4 	beq.w	8001eea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d82:	2300      	movs	r3, #0
 8001d84:	60fb      	str	r3, [r7, #12]
 8001d86:	4b5f      	ldr	r3, [pc, #380]	; (8001f04 <HAL_GPIO_Init+0x308>)
 8001d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d8a:	4a5e      	ldr	r2, [pc, #376]	; (8001f04 <HAL_GPIO_Init+0x308>)
 8001d8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d90:	6453      	str	r3, [r2, #68]	; 0x44
 8001d92:	4b5c      	ldr	r3, [pc, #368]	; (8001f04 <HAL_GPIO_Init+0x308>)
 8001d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d9a:	60fb      	str	r3, [r7, #12]
 8001d9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d9e:	4a5a      	ldr	r2, [pc, #360]	; (8001f08 <HAL_GPIO_Init+0x30c>)
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	089b      	lsrs	r3, r3, #2
 8001da4:	3302      	adds	r3, #2
 8001da6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001daa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	f003 0303 	and.w	r3, r3, #3
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	220f      	movs	r2, #15
 8001db6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dba:	43db      	mvns	r3, r3
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4a51      	ldr	r2, [pc, #324]	; (8001f0c <HAL_GPIO_Init+0x310>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d02b      	beq.n	8001e22 <HAL_GPIO_Init+0x226>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4a50      	ldr	r2, [pc, #320]	; (8001f10 <HAL_GPIO_Init+0x314>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d025      	beq.n	8001e1e <HAL_GPIO_Init+0x222>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4a4f      	ldr	r2, [pc, #316]	; (8001f14 <HAL_GPIO_Init+0x318>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d01f      	beq.n	8001e1a <HAL_GPIO_Init+0x21e>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4a4e      	ldr	r2, [pc, #312]	; (8001f18 <HAL_GPIO_Init+0x31c>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d019      	beq.n	8001e16 <HAL_GPIO_Init+0x21a>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a4d      	ldr	r2, [pc, #308]	; (8001f1c <HAL_GPIO_Init+0x320>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d013      	beq.n	8001e12 <HAL_GPIO_Init+0x216>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a4c      	ldr	r2, [pc, #304]	; (8001f20 <HAL_GPIO_Init+0x324>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d00d      	beq.n	8001e0e <HAL_GPIO_Init+0x212>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a4b      	ldr	r2, [pc, #300]	; (8001f24 <HAL_GPIO_Init+0x328>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d007      	beq.n	8001e0a <HAL_GPIO_Init+0x20e>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a4a      	ldr	r2, [pc, #296]	; (8001f28 <HAL_GPIO_Init+0x32c>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d101      	bne.n	8001e06 <HAL_GPIO_Init+0x20a>
 8001e02:	2307      	movs	r3, #7
 8001e04:	e00e      	b.n	8001e24 <HAL_GPIO_Init+0x228>
 8001e06:	2308      	movs	r3, #8
 8001e08:	e00c      	b.n	8001e24 <HAL_GPIO_Init+0x228>
 8001e0a:	2306      	movs	r3, #6
 8001e0c:	e00a      	b.n	8001e24 <HAL_GPIO_Init+0x228>
 8001e0e:	2305      	movs	r3, #5
 8001e10:	e008      	b.n	8001e24 <HAL_GPIO_Init+0x228>
 8001e12:	2304      	movs	r3, #4
 8001e14:	e006      	b.n	8001e24 <HAL_GPIO_Init+0x228>
 8001e16:	2303      	movs	r3, #3
 8001e18:	e004      	b.n	8001e24 <HAL_GPIO_Init+0x228>
 8001e1a:	2302      	movs	r3, #2
 8001e1c:	e002      	b.n	8001e24 <HAL_GPIO_Init+0x228>
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e000      	b.n	8001e24 <HAL_GPIO_Init+0x228>
 8001e22:	2300      	movs	r3, #0
 8001e24:	69fa      	ldr	r2, [r7, #28]
 8001e26:	f002 0203 	and.w	r2, r2, #3
 8001e2a:	0092      	lsls	r2, r2, #2
 8001e2c:	4093      	lsls	r3, r2
 8001e2e:	69ba      	ldr	r2, [r7, #24]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e34:	4934      	ldr	r1, [pc, #208]	; (8001f08 <HAL_GPIO_Init+0x30c>)
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	089b      	lsrs	r3, r3, #2
 8001e3a:	3302      	adds	r3, #2
 8001e3c:	69ba      	ldr	r2, [r7, #24]
 8001e3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e42:	4b3a      	ldr	r3, [pc, #232]	; (8001f2c <HAL_GPIO_Init+0x330>)
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	43db      	mvns	r3, r3
 8001e4c:	69ba      	ldr	r2, [r7, #24]
 8001e4e:	4013      	ands	r3, r2
 8001e50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d003      	beq.n	8001e66 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001e5e:	69ba      	ldr	r2, [r7, #24]
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e66:	4a31      	ldr	r2, [pc, #196]	; (8001f2c <HAL_GPIO_Init+0x330>)
 8001e68:	69bb      	ldr	r3, [r7, #24]
 8001e6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e6c:	4b2f      	ldr	r3, [pc, #188]	; (8001f2c <HAL_GPIO_Init+0x330>)
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	43db      	mvns	r3, r3
 8001e76:	69ba      	ldr	r2, [r7, #24]
 8001e78:	4013      	ands	r3, r2
 8001e7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d003      	beq.n	8001e90 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e90:	4a26      	ldr	r2, [pc, #152]	; (8001f2c <HAL_GPIO_Init+0x330>)
 8001e92:	69bb      	ldr	r3, [r7, #24]
 8001e94:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e96:	4b25      	ldr	r3, [pc, #148]	; (8001f2c <HAL_GPIO_Init+0x330>)
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	43db      	mvns	r3, r3
 8001ea0:	69ba      	ldr	r2, [r7, #24]
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d003      	beq.n	8001eba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001eb2:	69ba      	ldr	r2, [r7, #24]
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001eba:	4a1c      	ldr	r2, [pc, #112]	; (8001f2c <HAL_GPIO_Init+0x330>)
 8001ebc:	69bb      	ldr	r3, [r7, #24]
 8001ebe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ec0:	4b1a      	ldr	r3, [pc, #104]	; (8001f2c <HAL_GPIO_Init+0x330>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	43db      	mvns	r3, r3
 8001eca:	69ba      	ldr	r2, [r7, #24]
 8001ecc:	4013      	ands	r3, r2
 8001ece:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d003      	beq.n	8001ee4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001edc:	69ba      	ldr	r2, [r7, #24]
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ee4:	4a11      	ldr	r2, [pc, #68]	; (8001f2c <HAL_GPIO_Init+0x330>)
 8001ee6:	69bb      	ldr	r3, [r7, #24]
 8001ee8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	3301      	adds	r3, #1
 8001eee:	61fb      	str	r3, [r7, #28]
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	2b0f      	cmp	r3, #15
 8001ef4:	f67f ae90 	bls.w	8001c18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ef8:	bf00      	nop
 8001efa:	bf00      	nop
 8001efc:	3724      	adds	r7, #36	; 0x24
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bc80      	pop	{r7}
 8001f02:	4770      	bx	lr
 8001f04:	40023800 	.word	0x40023800
 8001f08:	40013800 	.word	0x40013800
 8001f0c:	40020000 	.word	0x40020000
 8001f10:	40020400 	.word	0x40020400
 8001f14:	40020800 	.word	0x40020800
 8001f18:	40020c00 	.word	0x40020c00
 8001f1c:	40021000 	.word	0x40021000
 8001f20:	40021400 	.word	0x40021400
 8001f24:	40021800 	.word	0x40021800
 8001f28:	40021c00 	.word	0x40021c00
 8001f2c:	40013c00 	.word	0x40013c00

08001f30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	460b      	mov	r3, r1
 8001f3a:	807b      	strh	r3, [r7, #2]
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f40:	787b      	ldrb	r3, [r7, #1]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d003      	beq.n	8001f4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f46:	887a      	ldrh	r2, [r7, #2]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f4c:	e003      	b.n	8001f56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f4e:	887b      	ldrh	r3, [r7, #2]
 8001f50:	041a      	lsls	r2, r3, #16
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	619a      	str	r2, [r3, #24]
}
 8001f56:	bf00      	nop
 8001f58:	370c      	adds	r7, #12
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bc80      	pop	{r7}
 8001f5e:	4770      	bx	lr

08001f60 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	4603      	mov	r3, r0
 8001f68:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001f6a:	4b08      	ldr	r3, [pc, #32]	; (8001f8c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f6c:	695a      	ldr	r2, [r3, #20]
 8001f6e:	88fb      	ldrh	r3, [r7, #6]
 8001f70:	4013      	ands	r3, r2
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d006      	beq.n	8001f84 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f76:	4a05      	ldr	r2, [pc, #20]	; (8001f8c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f78:	88fb      	ldrh	r3, [r7, #6]
 8001f7a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f7c:	88fb      	ldrh	r3, [r7, #6]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f000 f806 	bl	8001f90 <HAL_GPIO_EXTI_Callback>
  }
}
 8001f84:	bf00      	nop
 8001f86:	3708      	adds	r7, #8
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	40013c00 	.word	0x40013c00

08001f90 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	4603      	mov	r3, r0
 8001f98:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001f9a:	bf00      	nop
 8001f9c:	370c      	adds	r7, #12
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bc80      	pop	{r7}
 8001fa2:	4770      	bx	lr

08001fa4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001fa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fa6:	b08f      	sub	sp, #60	; 0x3c
 8001fa8:	af0a      	add	r7, sp, #40	; 0x28
 8001faa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d101      	bne.n	8001fb6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e10f      	b.n	80021d6 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d106      	bne.n	8001fd6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f017 fd89 	bl	8019ae8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2203      	movs	r2, #3
 8001fda:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d102      	bne.n	8001ff0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f002 fabd 	bl	8004574 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	603b      	str	r3, [r7, #0]
 8002000:	687e      	ldr	r6, [r7, #4]
 8002002:	466d      	mov	r5, sp
 8002004:	f106 0410 	add.w	r4, r6, #16
 8002008:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800200a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800200c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800200e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002010:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002014:	e885 0003 	stmia.w	r5, {r0, r1}
 8002018:	1d33      	adds	r3, r6, #4
 800201a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800201c:	6838      	ldr	r0, [r7, #0]
 800201e:	f002 f995 	bl	800434c <USB_CoreInit>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d005      	beq.n	8002034 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2202      	movs	r2, #2
 800202c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e0d0      	b.n	80021d6 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	2100      	movs	r1, #0
 800203a:	4618      	mov	r0, r3
 800203c:	f002 faaa 	bl	8004594 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002040:	2300      	movs	r3, #0
 8002042:	73fb      	strb	r3, [r7, #15]
 8002044:	e04a      	b.n	80020dc <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002046:	7bfa      	ldrb	r2, [r7, #15]
 8002048:	6879      	ldr	r1, [r7, #4]
 800204a:	4613      	mov	r3, r2
 800204c:	00db      	lsls	r3, r3, #3
 800204e:	4413      	add	r3, r2
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	440b      	add	r3, r1
 8002054:	333d      	adds	r3, #61	; 0x3d
 8002056:	2201      	movs	r2, #1
 8002058:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800205a:	7bfa      	ldrb	r2, [r7, #15]
 800205c:	6879      	ldr	r1, [r7, #4]
 800205e:	4613      	mov	r3, r2
 8002060:	00db      	lsls	r3, r3, #3
 8002062:	4413      	add	r3, r2
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	440b      	add	r3, r1
 8002068:	333c      	adds	r3, #60	; 0x3c
 800206a:	7bfa      	ldrb	r2, [r7, #15]
 800206c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800206e:	7bfa      	ldrb	r2, [r7, #15]
 8002070:	7bfb      	ldrb	r3, [r7, #15]
 8002072:	b298      	uxth	r0, r3
 8002074:	6879      	ldr	r1, [r7, #4]
 8002076:	4613      	mov	r3, r2
 8002078:	00db      	lsls	r3, r3, #3
 800207a:	4413      	add	r3, r2
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	440b      	add	r3, r1
 8002080:	3344      	adds	r3, #68	; 0x44
 8002082:	4602      	mov	r2, r0
 8002084:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002086:	7bfa      	ldrb	r2, [r7, #15]
 8002088:	6879      	ldr	r1, [r7, #4]
 800208a:	4613      	mov	r3, r2
 800208c:	00db      	lsls	r3, r3, #3
 800208e:	4413      	add	r3, r2
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	440b      	add	r3, r1
 8002094:	3340      	adds	r3, #64	; 0x40
 8002096:	2200      	movs	r2, #0
 8002098:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800209a:	7bfa      	ldrb	r2, [r7, #15]
 800209c:	6879      	ldr	r1, [r7, #4]
 800209e:	4613      	mov	r3, r2
 80020a0:	00db      	lsls	r3, r3, #3
 80020a2:	4413      	add	r3, r2
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	440b      	add	r3, r1
 80020a8:	3348      	adds	r3, #72	; 0x48
 80020aa:	2200      	movs	r2, #0
 80020ac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80020ae:	7bfa      	ldrb	r2, [r7, #15]
 80020b0:	6879      	ldr	r1, [r7, #4]
 80020b2:	4613      	mov	r3, r2
 80020b4:	00db      	lsls	r3, r3, #3
 80020b6:	4413      	add	r3, r2
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	440b      	add	r3, r1
 80020bc:	334c      	adds	r3, #76	; 0x4c
 80020be:	2200      	movs	r2, #0
 80020c0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80020c2:	7bfa      	ldrb	r2, [r7, #15]
 80020c4:	6879      	ldr	r1, [r7, #4]
 80020c6:	4613      	mov	r3, r2
 80020c8:	00db      	lsls	r3, r3, #3
 80020ca:	4413      	add	r3, r2
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	440b      	add	r3, r1
 80020d0:	3354      	adds	r3, #84	; 0x54
 80020d2:	2200      	movs	r2, #0
 80020d4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020d6:	7bfb      	ldrb	r3, [r7, #15]
 80020d8:	3301      	adds	r3, #1
 80020da:	73fb      	strb	r3, [r7, #15]
 80020dc:	7bfa      	ldrb	r2, [r7, #15]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d3af      	bcc.n	8002046 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020e6:	2300      	movs	r3, #0
 80020e8:	73fb      	strb	r3, [r7, #15]
 80020ea:	e044      	b.n	8002176 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80020ec:	7bfa      	ldrb	r2, [r7, #15]
 80020ee:	6879      	ldr	r1, [r7, #4]
 80020f0:	4613      	mov	r3, r2
 80020f2:	00db      	lsls	r3, r3, #3
 80020f4:	4413      	add	r3, r2
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	440b      	add	r3, r1
 80020fa:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80020fe:	2200      	movs	r2, #0
 8002100:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002102:	7bfa      	ldrb	r2, [r7, #15]
 8002104:	6879      	ldr	r1, [r7, #4]
 8002106:	4613      	mov	r3, r2
 8002108:	00db      	lsls	r3, r3, #3
 800210a:	4413      	add	r3, r2
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	440b      	add	r3, r1
 8002110:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002114:	7bfa      	ldrb	r2, [r7, #15]
 8002116:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002118:	7bfa      	ldrb	r2, [r7, #15]
 800211a:	6879      	ldr	r1, [r7, #4]
 800211c:	4613      	mov	r3, r2
 800211e:	00db      	lsls	r3, r3, #3
 8002120:	4413      	add	r3, r2
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	440b      	add	r3, r1
 8002126:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800212a:	2200      	movs	r2, #0
 800212c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800212e:	7bfa      	ldrb	r2, [r7, #15]
 8002130:	6879      	ldr	r1, [r7, #4]
 8002132:	4613      	mov	r3, r2
 8002134:	00db      	lsls	r3, r3, #3
 8002136:	4413      	add	r3, r2
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	440b      	add	r3, r1
 800213c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002140:	2200      	movs	r2, #0
 8002142:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002144:	7bfa      	ldrb	r2, [r7, #15]
 8002146:	6879      	ldr	r1, [r7, #4]
 8002148:	4613      	mov	r3, r2
 800214a:	00db      	lsls	r3, r3, #3
 800214c:	4413      	add	r3, r2
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	440b      	add	r3, r1
 8002152:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002156:	2200      	movs	r2, #0
 8002158:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800215a:	7bfa      	ldrb	r2, [r7, #15]
 800215c:	6879      	ldr	r1, [r7, #4]
 800215e:	4613      	mov	r3, r2
 8002160:	00db      	lsls	r3, r3, #3
 8002162:	4413      	add	r3, r2
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	440b      	add	r3, r1
 8002168:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800216c:	2200      	movs	r2, #0
 800216e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002170:	7bfb      	ldrb	r3, [r7, #15]
 8002172:	3301      	adds	r3, #1
 8002174:	73fb      	strb	r3, [r7, #15]
 8002176:	7bfa      	ldrb	r2, [r7, #15]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	429a      	cmp	r2, r3
 800217e:	d3b5      	bcc.n	80020ec <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	603b      	str	r3, [r7, #0]
 8002186:	687e      	ldr	r6, [r7, #4]
 8002188:	466d      	mov	r5, sp
 800218a:	f106 0410 	add.w	r4, r6, #16
 800218e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002190:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002192:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002194:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002196:	e894 0003 	ldmia.w	r4, {r0, r1}
 800219a:	e885 0003 	stmia.w	r5, {r0, r1}
 800219e:	1d33      	adds	r3, r6, #4
 80021a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021a2:	6838      	ldr	r0, [r7, #0]
 80021a4:	f002 fa42 	bl	800462c <USB_DevInit>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d005      	beq.n	80021ba <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2202      	movs	r2, #2
 80021b2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e00d      	b.n	80021d6 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2200      	movs	r2, #0
 80021be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2201      	movs	r2, #1
 80021c6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4618      	mov	r0, r3
 80021d0:	f003 fb85 	bl	80058de <USB_DevDisconnect>

  return HAL_OK;
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3714      	adds	r7, #20
 80021da:	46bd      	mov	sp, r7
 80021dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080021de <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80021de:	b580      	push	{r7, lr}
 80021e0:	b084      	sub	sp, #16
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d101      	bne.n	80021fa <HAL_PCD_Start+0x1c>
 80021f6:	2302      	movs	r3, #2
 80021f8:	e020      	b.n	800223c <HAL_PCD_Start+0x5e>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2201      	movs	r2, #1
 80021fe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002206:	2b01      	cmp	r3, #1
 8002208:	d109      	bne.n	800221e <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800220e:	2b01      	cmp	r3, #1
 8002210:	d005      	beq.n	800221e <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002216:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4618      	mov	r0, r3
 8002224:	f002 f996 	bl	8004554 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4618      	mov	r0, r3
 800222e:	f003 fb36 	bl	800589e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800223a:	2300      	movs	r3, #0
}
 800223c:	4618      	mov	r0, r3
 800223e:	3710      	adds	r7, #16
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}

08002244 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002244:	b590      	push	{r4, r7, lr}
 8002246:	b08d      	sub	sp, #52	; 0x34
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002252:	6a3b      	ldr	r3, [r7, #32]
 8002254:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4618      	mov	r0, r3
 800225c:	f003 fbed 	bl	8005a3a <USB_GetMode>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	f040 848a 	bne.w	8002b7c <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4618      	mov	r0, r3
 800226e:	f003 fb56 	bl	800591e <USB_ReadInterrupts>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	f000 8480 	beq.w	8002b7a <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	0a1b      	lsrs	r3, r3, #8
 8002284:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4618      	mov	r0, r3
 8002294:	f003 fb43 	bl	800591e <USB_ReadInterrupts>
 8002298:	4603      	mov	r3, r0
 800229a:	f003 0302 	and.w	r3, r3, #2
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d107      	bne.n	80022b2 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	695a      	ldr	r2, [r3, #20]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f002 0202 	and.w	r2, r2, #2
 80022b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4618      	mov	r0, r3
 80022b8:	f003 fb31 	bl	800591e <USB_ReadInterrupts>
 80022bc:	4603      	mov	r3, r0
 80022be:	f003 0310 	and.w	r3, r3, #16
 80022c2:	2b10      	cmp	r3, #16
 80022c4:	d161      	bne.n	800238a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	699a      	ldr	r2, [r3, #24]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f022 0210 	bic.w	r2, r2, #16
 80022d4:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80022d6:	6a3b      	ldr	r3, [r7, #32]
 80022d8:	6a1b      	ldr	r3, [r3, #32]
 80022da:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80022dc:	69bb      	ldr	r3, [r7, #24]
 80022de:	f003 020f 	and.w	r2, r3, #15
 80022e2:	4613      	mov	r3, r2
 80022e4:	00db      	lsls	r3, r3, #3
 80022e6:	4413      	add	r3, r2
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80022ee:	687a      	ldr	r2, [r7, #4]
 80022f0:	4413      	add	r3, r2
 80022f2:	3304      	adds	r3, #4
 80022f4:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	0c5b      	lsrs	r3, r3, #17
 80022fa:	f003 030f 	and.w	r3, r3, #15
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d124      	bne.n	800234c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002302:	69ba      	ldr	r2, [r7, #24]
 8002304:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002308:	4013      	ands	r3, r2
 800230a:	2b00      	cmp	r3, #0
 800230c:	d035      	beq.n	800237a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002312:	69bb      	ldr	r3, [r7, #24]
 8002314:	091b      	lsrs	r3, r3, #4
 8002316:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002318:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800231c:	b29b      	uxth	r3, r3
 800231e:	461a      	mov	r2, r3
 8002320:	6a38      	ldr	r0, [r7, #32]
 8002322:	f003 f96e 	bl	8005602 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	691a      	ldr	r2, [r3, #16]
 800232a:	69bb      	ldr	r3, [r7, #24]
 800232c:	091b      	lsrs	r3, r3, #4
 800232e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002332:	441a      	add	r2, r3
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	6a1a      	ldr	r2, [r3, #32]
 800233c:	69bb      	ldr	r3, [r7, #24]
 800233e:	091b      	lsrs	r3, r3, #4
 8002340:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002344:	441a      	add	r2, r3
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	621a      	str	r2, [r3, #32]
 800234a:	e016      	b.n	800237a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	0c5b      	lsrs	r3, r3, #17
 8002350:	f003 030f 	and.w	r3, r3, #15
 8002354:	2b06      	cmp	r3, #6
 8002356:	d110      	bne.n	800237a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800235e:	2208      	movs	r2, #8
 8002360:	4619      	mov	r1, r3
 8002362:	6a38      	ldr	r0, [r7, #32]
 8002364:	f003 f94d 	bl	8005602 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	6a1a      	ldr	r2, [r3, #32]
 800236c:	69bb      	ldr	r3, [r7, #24]
 800236e:	091b      	lsrs	r3, r3, #4
 8002370:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002374:	441a      	add	r2, r3
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	699a      	ldr	r2, [r3, #24]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f042 0210 	orr.w	r2, r2, #16
 8002388:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4618      	mov	r0, r3
 8002390:	f003 fac5 	bl	800591e <USB_ReadInterrupts>
 8002394:	4603      	mov	r3, r0
 8002396:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800239a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800239e:	f040 80a7 	bne.w	80024f0 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80023a2:	2300      	movs	r3, #0
 80023a4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4618      	mov	r0, r3
 80023ac:	f003 fac9 	bl	8005942 <USB_ReadDevAllOutEpInterrupt>
 80023b0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80023b2:	e099      	b.n	80024e8 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80023b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023b6:	f003 0301 	and.w	r3, r3, #1
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	f000 808e 	beq.w	80024dc <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023c6:	b2d2      	uxtb	r2, r2
 80023c8:	4611      	mov	r1, r2
 80023ca:	4618      	mov	r0, r3
 80023cc:	f003 faeb 	bl	80059a6 <USB_ReadDevOutEPInterrupt>
 80023d0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	f003 0301 	and.w	r3, r3, #1
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d00c      	beq.n	80023f6 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80023dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023de:	015a      	lsls	r2, r3, #5
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	4413      	add	r3, r2
 80023e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023e8:	461a      	mov	r2, r3
 80023ea:	2301      	movs	r3, #1
 80023ec:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80023ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	f000 fec1 	bl	8003178 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	f003 0308 	and.w	r3, r3, #8
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d00c      	beq.n	800241a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002402:	015a      	lsls	r2, r3, #5
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	4413      	add	r3, r2
 8002408:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800240c:	461a      	mov	r2, r3
 800240e:	2308      	movs	r3, #8
 8002410:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002412:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	f000 ff97 	bl	8003348 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	f003 0310 	and.w	r3, r3, #16
 8002420:	2b00      	cmp	r3, #0
 8002422:	d008      	beq.n	8002436 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002426:	015a      	lsls	r2, r3, #5
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	4413      	add	r3, r2
 800242c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002430:	461a      	mov	r2, r3
 8002432:	2310      	movs	r3, #16
 8002434:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	f003 0302 	and.w	r3, r3, #2
 800243c:	2b00      	cmp	r3, #0
 800243e:	d030      	beq.n	80024a2 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002440:	6a3b      	ldr	r3, [r7, #32]
 8002442:	695b      	ldr	r3, [r3, #20]
 8002444:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002448:	2b80      	cmp	r3, #128	; 0x80
 800244a:	d109      	bne.n	8002460 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	69fa      	ldr	r2, [r7, #28]
 8002456:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800245a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800245e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002460:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002462:	4613      	mov	r3, r2
 8002464:	00db      	lsls	r3, r3, #3
 8002466:	4413      	add	r3, r2
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	4413      	add	r3, r2
 8002472:	3304      	adds	r3, #4
 8002474:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	78db      	ldrb	r3, [r3, #3]
 800247a:	2b01      	cmp	r3, #1
 800247c:	d108      	bne.n	8002490 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	2200      	movs	r2, #0
 8002482:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002486:	b2db      	uxtb	r3, r3
 8002488:	4619      	mov	r1, r3
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f017 fc32 	bl	8019cf4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002492:	015a      	lsls	r2, r3, #5
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	4413      	add	r3, r2
 8002498:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800249c:	461a      	mov	r2, r3
 800249e:	2302      	movs	r3, #2
 80024a0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	f003 0320 	and.w	r3, r3, #32
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d008      	beq.n	80024be <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80024ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ae:	015a      	lsls	r2, r3, #5
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	4413      	add	r3, r2
 80024b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024b8:	461a      	mov	r2, r3
 80024ba:	2320      	movs	r3, #32
 80024bc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d009      	beq.n	80024dc <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80024c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ca:	015a      	lsls	r2, r3, #5
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	4413      	add	r3, r2
 80024d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024d4:	461a      	mov	r2, r3
 80024d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024da:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80024dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024de:	3301      	adds	r3, #1
 80024e0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80024e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024e4:	085b      	lsrs	r3, r3, #1
 80024e6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80024e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	f47f af62 	bne.w	80023b4 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4618      	mov	r0, r3
 80024f6:	f003 fa12 	bl	800591e <USB_ReadInterrupts>
 80024fa:	4603      	mov	r3, r0
 80024fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002500:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002504:	f040 80db 	bne.w	80026be <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4618      	mov	r0, r3
 800250e:	f003 fa31 	bl	8005974 <USB_ReadDevAllInEpInterrupt>
 8002512:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002514:	2300      	movs	r3, #0
 8002516:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002518:	e0cd      	b.n	80026b6 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800251a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800251c:	f003 0301 	and.w	r3, r3, #1
 8002520:	2b00      	cmp	r3, #0
 8002522:	f000 80c2 	beq.w	80026aa <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800252c:	b2d2      	uxtb	r2, r2
 800252e:	4611      	mov	r1, r2
 8002530:	4618      	mov	r0, r3
 8002532:	f003 fa55 	bl	80059e0 <USB_ReadDevInEPInterrupt>
 8002536:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	f003 0301 	and.w	r3, r3, #1
 800253e:	2b00      	cmp	r3, #0
 8002540:	d057      	beq.n	80025f2 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002544:	f003 030f 	and.w	r3, r3, #15
 8002548:	2201      	movs	r2, #1
 800254a:	fa02 f303 	lsl.w	r3, r2, r3
 800254e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002556:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	43db      	mvns	r3, r3
 800255c:	69f9      	ldr	r1, [r7, #28]
 800255e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002562:	4013      	ands	r3, r2
 8002564:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002568:	015a      	lsls	r2, r3, #5
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	4413      	add	r3, r2
 800256e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002572:	461a      	mov	r2, r3
 8002574:	2301      	movs	r3, #1
 8002576:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	691b      	ldr	r3, [r3, #16]
 800257c:	2b01      	cmp	r3, #1
 800257e:	d132      	bne.n	80025e6 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002580:	6879      	ldr	r1, [r7, #4]
 8002582:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002584:	4613      	mov	r3, r2
 8002586:	00db      	lsls	r3, r3, #3
 8002588:	4413      	add	r3, r2
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	440b      	add	r3, r1
 800258e:	334c      	adds	r3, #76	; 0x4c
 8002590:	6819      	ldr	r1, [r3, #0]
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002596:	4613      	mov	r3, r2
 8002598:	00db      	lsls	r3, r3, #3
 800259a:	4413      	add	r3, r2
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	4403      	add	r3, r0
 80025a0:	3348      	adds	r3, #72	; 0x48
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4419      	add	r1, r3
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025aa:	4613      	mov	r3, r2
 80025ac:	00db      	lsls	r3, r3, #3
 80025ae:	4413      	add	r3, r2
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	4403      	add	r3, r0
 80025b4:	334c      	adds	r3, #76	; 0x4c
 80025b6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80025b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d113      	bne.n	80025e6 <HAL_PCD_IRQHandler+0x3a2>
 80025be:	6879      	ldr	r1, [r7, #4]
 80025c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025c2:	4613      	mov	r3, r2
 80025c4:	00db      	lsls	r3, r3, #3
 80025c6:	4413      	add	r3, r2
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	440b      	add	r3, r1
 80025cc:	3354      	adds	r3, #84	; 0x54
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d108      	bne.n	80025e6 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6818      	ldr	r0, [r3, #0]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80025de:	461a      	mov	r2, r3
 80025e0:	2101      	movs	r1, #1
 80025e2:	f003 fa59 	bl	8005a98 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80025e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	4619      	mov	r1, r3
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f017 fafc 	bl	8019bea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	f003 0308 	and.w	r3, r3, #8
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d008      	beq.n	800260e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80025fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fe:	015a      	lsls	r2, r3, #5
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	4413      	add	r3, r2
 8002604:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002608:	461a      	mov	r2, r3
 800260a:	2308      	movs	r3, #8
 800260c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	f003 0310 	and.w	r3, r3, #16
 8002614:	2b00      	cmp	r3, #0
 8002616:	d008      	beq.n	800262a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261a:	015a      	lsls	r2, r3, #5
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	4413      	add	r3, r2
 8002620:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002624:	461a      	mov	r2, r3
 8002626:	2310      	movs	r3, #16
 8002628:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002630:	2b00      	cmp	r3, #0
 8002632:	d008      	beq.n	8002646 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002636:	015a      	lsls	r2, r3, #5
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	4413      	add	r3, r2
 800263c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002640:	461a      	mov	r2, r3
 8002642:	2340      	movs	r3, #64	; 0x40
 8002644:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	f003 0302 	and.w	r3, r3, #2
 800264c:	2b00      	cmp	r3, #0
 800264e:	d023      	beq.n	8002698 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002650:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002652:	6a38      	ldr	r0, [r7, #32]
 8002654:	f002 f94e 	bl	80048f4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002658:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800265a:	4613      	mov	r3, r2
 800265c:	00db      	lsls	r3, r3, #3
 800265e:	4413      	add	r3, r2
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	3338      	adds	r3, #56	; 0x38
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	4413      	add	r3, r2
 8002668:	3304      	adds	r3, #4
 800266a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	78db      	ldrb	r3, [r3, #3]
 8002670:	2b01      	cmp	r3, #1
 8002672:	d108      	bne.n	8002686 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	2200      	movs	r2, #0
 8002678:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800267a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267c:	b2db      	uxtb	r3, r3
 800267e:	4619      	mov	r1, r3
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f017 fb49 	bl	8019d18 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002688:	015a      	lsls	r2, r3, #5
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	4413      	add	r3, r2
 800268e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002692:	461a      	mov	r2, r3
 8002694:	2302      	movs	r3, #2
 8002696:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d003      	beq.n	80026aa <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80026a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f000 fcda 	bl	800305e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80026aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ac:	3301      	adds	r3, #1
 80026ae:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80026b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026b2:	085b      	lsrs	r3, r3, #1
 80026b4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80026b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	f47f af2e 	bne.w	800251a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4618      	mov	r0, r3
 80026c4:	f003 f92b 	bl	800591e <USB_ReadInterrupts>
 80026c8:	4603      	mov	r3, r0
 80026ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80026ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80026d2:	d122      	bne.n	800271a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	69fa      	ldr	r2, [r7, #28]
 80026de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026e2:	f023 0301 	bic.w	r3, r3, #1
 80026e6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d108      	bne.n	8002704 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80026fa:	2100      	movs	r1, #0
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f000 febf 	bl	8003480 <HAL_PCDEx_LPM_Callback>
 8002702:	e002      	b.n	800270a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f017 fae7 	bl	8019cd8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	695a      	ldr	r2, [r3, #20]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002718:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4618      	mov	r0, r3
 8002720:	f003 f8fd 	bl	800591e <USB_ReadInterrupts>
 8002724:	4603      	mov	r3, r0
 8002726:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800272a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800272e:	d112      	bne.n	8002756 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	f003 0301 	and.w	r3, r3, #1
 800273c:	2b01      	cmp	r3, #1
 800273e:	d102      	bne.n	8002746 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	f017 faa3 	bl	8019c8c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	695a      	ldr	r2, [r3, #20]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002754:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4618      	mov	r0, r3
 800275c:	f003 f8df 	bl	800591e <USB_ReadInterrupts>
 8002760:	4603      	mov	r3, r0
 8002762:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002766:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800276a:	f040 80b7 	bne.w	80028dc <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	69fa      	ldr	r2, [r7, #28]
 8002778:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800277c:	f023 0301 	bic.w	r3, r3, #1
 8002780:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	2110      	movs	r1, #16
 8002788:	4618      	mov	r0, r3
 800278a:	f002 f8b3 	bl	80048f4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800278e:	2300      	movs	r3, #0
 8002790:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002792:	e046      	b.n	8002822 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002796:	015a      	lsls	r2, r3, #5
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	4413      	add	r3, r2
 800279c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027a0:	461a      	mov	r2, r3
 80027a2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80027a6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80027a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027aa:	015a      	lsls	r2, r3, #5
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	4413      	add	r3, r2
 80027b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027b8:	0151      	lsls	r1, r2, #5
 80027ba:	69fa      	ldr	r2, [r7, #28]
 80027bc:	440a      	add	r2, r1
 80027be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80027c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80027c6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80027c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ca:	015a      	lsls	r2, r3, #5
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	4413      	add	r3, r2
 80027d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027d4:	461a      	mov	r2, r3
 80027d6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80027da:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80027dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027de:	015a      	lsls	r2, r3, #5
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	4413      	add	r3, r2
 80027e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027ec:	0151      	lsls	r1, r2, #5
 80027ee:	69fa      	ldr	r2, [r7, #28]
 80027f0:	440a      	add	r2, r1
 80027f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80027f6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80027fa:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80027fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027fe:	015a      	lsls	r2, r3, #5
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	4413      	add	r3, r2
 8002804:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800280c:	0151      	lsls	r1, r2, #5
 800280e:	69fa      	ldr	r2, [r7, #28]
 8002810:	440a      	add	r2, r1
 8002812:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002816:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800281a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800281c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800281e:	3301      	adds	r3, #1
 8002820:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002828:	429a      	cmp	r2, r3
 800282a:	d3b3      	bcc.n	8002794 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002832:	69db      	ldr	r3, [r3, #28]
 8002834:	69fa      	ldr	r2, [r7, #28]
 8002836:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800283a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800283e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002844:	2b00      	cmp	r3, #0
 8002846:	d016      	beq.n	8002876 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800284e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002852:	69fa      	ldr	r2, [r7, #28]
 8002854:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002858:	f043 030b 	orr.w	r3, r3, #11
 800285c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002866:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002868:	69fa      	ldr	r2, [r7, #28]
 800286a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800286e:	f043 030b 	orr.w	r3, r3, #11
 8002872:	6453      	str	r3, [r2, #68]	; 0x44
 8002874:	e015      	b.n	80028a2 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800287c:	695b      	ldr	r3, [r3, #20]
 800287e:	69fa      	ldr	r2, [r7, #28]
 8002880:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002884:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002888:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800288c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002894:	691b      	ldr	r3, [r3, #16]
 8002896:	69fa      	ldr	r2, [r7, #28]
 8002898:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800289c:	f043 030b 	orr.w	r3, r3, #11
 80028a0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	69fa      	ldr	r2, [r7, #28]
 80028ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028b0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80028b4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6818      	ldr	r0, [r3, #0]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	691b      	ldr	r3, [r3, #16]
 80028be:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80028c6:	461a      	mov	r2, r3
 80028c8:	f003 f8e6 	bl	8005a98 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	695a      	ldr	r2, [r3, #20]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80028da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4618      	mov	r0, r3
 80028e2:	f003 f81c 	bl	800591e <USB_ReadInterrupts>
 80028e6:	4603      	mov	r3, r0
 80028e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028f0:	d124      	bne.n	800293c <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4618      	mov	r0, r3
 80028f8:	f003 f8ac 	bl	8005a54 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4618      	mov	r0, r3
 8002902:	f002 f873 	bl	80049ec <USB_GetDevSpeed>
 8002906:	4603      	mov	r3, r0
 8002908:	461a      	mov	r2, r3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681c      	ldr	r4, [r3, #0]
 8002912:	f001 fa2b 	bl	8003d6c <HAL_RCC_GetHCLKFreq>
 8002916:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800291c:	b2db      	uxtb	r3, r3
 800291e:	461a      	mov	r2, r3
 8002920:	4620      	mov	r0, r4
 8002922:	f001 fd75 	bl	8004410 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f017 f987 	bl	8019c3a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	695a      	ldr	r2, [r3, #20]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800293a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4618      	mov	r0, r3
 8002942:	f002 ffec 	bl	800591e <USB_ReadInterrupts>
 8002946:	4603      	mov	r3, r0
 8002948:	f003 0308 	and.w	r3, r3, #8
 800294c:	2b08      	cmp	r3, #8
 800294e:	d10a      	bne.n	8002966 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f017 f964 	bl	8019c1e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	695a      	ldr	r2, [r3, #20]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f002 0208 	and.w	r2, r2, #8
 8002964:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4618      	mov	r0, r3
 800296c:	f002 ffd7 	bl	800591e <USB_ReadInterrupts>
 8002970:	4603      	mov	r3, r0
 8002972:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002976:	2b80      	cmp	r3, #128	; 0x80
 8002978:	d122      	bne.n	80029c0 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800297a:	6a3b      	ldr	r3, [r7, #32]
 800297c:	699b      	ldr	r3, [r3, #24]
 800297e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002982:	6a3b      	ldr	r3, [r7, #32]
 8002984:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002986:	2301      	movs	r3, #1
 8002988:	627b      	str	r3, [r7, #36]	; 0x24
 800298a:	e014      	b.n	80029b6 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800298c:	6879      	ldr	r1, [r7, #4]
 800298e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002990:	4613      	mov	r3, r2
 8002992:	00db      	lsls	r3, r3, #3
 8002994:	4413      	add	r3, r2
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	440b      	add	r3, r1
 800299a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d105      	bne.n	80029b0 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80029a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	4619      	mov	r1, r3
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f000 fb26 	bl	8002ffc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80029b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b2:	3301      	adds	r3, #1
 80029b4:	627b      	str	r3, [r7, #36]	; 0x24
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029bc:	429a      	cmp	r2, r3
 80029be:	d3e5      	bcc.n	800298c <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4618      	mov	r0, r3
 80029c6:	f002 ffaa 	bl	800591e <USB_ReadInterrupts>
 80029ca:	4603      	mov	r3, r0
 80029cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80029d4:	d13b      	bne.n	8002a4e <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80029d6:	2301      	movs	r3, #1
 80029d8:	627b      	str	r3, [r7, #36]	; 0x24
 80029da:	e02b      	b.n	8002a34 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80029dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029de:	015a      	lsls	r2, r3, #5
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	4413      	add	r3, r2
 80029e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80029ec:	6879      	ldr	r1, [r7, #4]
 80029ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029f0:	4613      	mov	r3, r2
 80029f2:	00db      	lsls	r3, r3, #3
 80029f4:	4413      	add	r3, r2
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	440b      	add	r3, r1
 80029fa:	3340      	adds	r3, #64	; 0x40
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d115      	bne.n	8002a2e <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002a02:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	da12      	bge.n	8002a2e <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002a08:	6879      	ldr	r1, [r7, #4]
 8002a0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	00db      	lsls	r3, r3, #3
 8002a10:	4413      	add	r3, r2
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	440b      	add	r3, r1
 8002a16:	333f      	adds	r3, #63	; 0x3f
 8002a18:	2201      	movs	r2, #1
 8002a1a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	4619      	mov	r1, r3
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f000 fae7 	bl	8002ffc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a30:	3301      	adds	r3, #1
 8002a32:	627b      	str	r3, [r7, #36]	; 0x24
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d3ce      	bcc.n	80029dc <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	695a      	ldr	r2, [r3, #20]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002a4c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4618      	mov	r0, r3
 8002a54:	f002 ff63 	bl	800591e <USB_ReadInterrupts>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a5e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a62:	d155      	bne.n	8002b10 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a64:	2301      	movs	r3, #1
 8002a66:	627b      	str	r3, [r7, #36]	; 0x24
 8002a68:	e045      	b.n	8002af6 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6c:	015a      	lsls	r2, r3, #5
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	4413      	add	r3, r2
 8002a72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a7a:	6879      	ldr	r1, [r7, #4]
 8002a7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a7e:	4613      	mov	r3, r2
 8002a80:	00db      	lsls	r3, r3, #3
 8002a82:	4413      	add	r3, r2
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	440b      	add	r3, r1
 8002a88:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d12e      	bne.n	8002af0 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002a92:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	da2b      	bge.n	8002af0 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002aa4:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d121      	bne.n	8002af0 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002aac:	6879      	ldr	r1, [r7, #4]
 8002aae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	00db      	lsls	r3, r3, #3
 8002ab4:	4413      	add	r3, r2
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	440b      	add	r3, r1
 8002aba:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002abe:	2201      	movs	r2, #1
 8002ac0:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002ac2:	6a3b      	ldr	r3, [r7, #32]
 8002ac4:	699b      	ldr	r3, [r3, #24]
 8002ac6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002aca:	6a3b      	ldr	r3, [r7, #32]
 8002acc:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002ace:	6a3b      	ldr	r3, [r7, #32]
 8002ad0:	695b      	ldr	r3, [r3, #20]
 8002ad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d10a      	bne.n	8002af0 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	69fa      	ldr	r2, [r7, #28]
 8002ae4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ae8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002aec:	6053      	str	r3, [r2, #4]
            break;
 8002aee:	e007      	b.n	8002b00 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af2:	3301      	adds	r3, #1
 8002af4:	627b      	str	r3, [r7, #36]	; 0x24
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d3b4      	bcc.n	8002a6a <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	695a      	ldr	r2, [r3, #20]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002b0e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4618      	mov	r0, r3
 8002b16:	f002 ff02 	bl	800591e <USB_ReadInterrupts>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002b20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b24:	d10a      	bne.n	8002b3c <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f017 f908 	bl	8019d3c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	695a      	ldr	r2, [r3, #20]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002b3a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4618      	mov	r0, r3
 8002b42:	f002 feec 	bl	800591e <USB_ReadInterrupts>
 8002b46:	4603      	mov	r3, r0
 8002b48:	f003 0304 	and.w	r3, r3, #4
 8002b4c:	2b04      	cmp	r3, #4
 8002b4e:	d115      	bne.n	8002b7c <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	f003 0304 	and.w	r3, r3, #4
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d002      	beq.n	8002b68 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f017 f8f8 	bl	8019d58 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	6859      	ldr	r1, [r3, #4]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	69ba      	ldr	r2, [r7, #24]
 8002b74:	430a      	orrs	r2, r1
 8002b76:	605a      	str	r2, [r3, #4]
 8002b78:	e000      	b.n	8002b7c <HAL_PCD_IRQHandler+0x938>
      return;
 8002b7a:	bf00      	nop
    }
  }
}
 8002b7c:	3734      	adds	r7, #52	; 0x34
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd90      	pop	{r4, r7, pc}

08002b82 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002b82:	b580      	push	{r7, lr}
 8002b84:	b082      	sub	sp, #8
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	6078      	str	r0, [r7, #4]
 8002b8a:	460b      	mov	r3, r1
 8002b8c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d101      	bne.n	8002b9c <HAL_PCD_SetAddress+0x1a>
 8002b98:	2302      	movs	r3, #2
 8002b9a:	e013      	b.n	8002bc4 <HAL_PCD_SetAddress+0x42>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	78fa      	ldrb	r2, [r7, #3]
 8002ba8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	78fa      	ldrb	r2, [r7, #3]
 8002bb2:	4611      	mov	r1, r2
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f002 fe4d 	bl	8005854 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002bc2:	2300      	movs	r3, #0
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3708      	adds	r7, #8
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b084      	sub	sp, #16
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	4608      	mov	r0, r1
 8002bd6:	4611      	mov	r1, r2
 8002bd8:	461a      	mov	r2, r3
 8002bda:	4603      	mov	r3, r0
 8002bdc:	70fb      	strb	r3, [r7, #3]
 8002bde:	460b      	mov	r3, r1
 8002be0:	803b      	strh	r3, [r7, #0]
 8002be2:	4613      	mov	r3, r2
 8002be4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002be6:	2300      	movs	r3, #0
 8002be8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002bea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	da0f      	bge.n	8002c12 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bf2:	78fb      	ldrb	r3, [r7, #3]
 8002bf4:	f003 020f 	and.w	r2, r3, #15
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	00db      	lsls	r3, r3, #3
 8002bfc:	4413      	add	r3, r2
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	3338      	adds	r3, #56	; 0x38
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	4413      	add	r3, r2
 8002c06:	3304      	adds	r3, #4
 8002c08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	705a      	strb	r2, [r3, #1]
 8002c10:	e00f      	b.n	8002c32 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c12:	78fb      	ldrb	r3, [r7, #3]
 8002c14:	f003 020f 	and.w	r2, r3, #15
 8002c18:	4613      	mov	r3, r2
 8002c1a:	00db      	lsls	r3, r3, #3
 8002c1c:	4413      	add	r3, r2
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	4413      	add	r3, r2
 8002c28:	3304      	adds	r3, #4
 8002c2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002c32:	78fb      	ldrb	r3, [r7, #3]
 8002c34:	f003 030f 	and.w	r3, r3, #15
 8002c38:	b2da      	uxtb	r2, r3
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002c3e:	883a      	ldrh	r2, [r7, #0]
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	78ba      	ldrb	r2, [r7, #2]
 8002c48:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	785b      	ldrb	r3, [r3, #1]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d004      	beq.n	8002c5c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	b29a      	uxth	r2, r3
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002c5c:	78bb      	ldrb	r3, [r7, #2]
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d102      	bne.n	8002c68 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2200      	movs	r2, #0
 8002c66:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d101      	bne.n	8002c76 <HAL_PCD_EP_Open+0xaa>
 8002c72:	2302      	movs	r3, #2
 8002c74:	e00e      	b.n	8002c94 <HAL_PCD_EP_Open+0xc8>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2201      	movs	r2, #1
 8002c7a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	68f9      	ldr	r1, [r7, #12]
 8002c84:	4618      	mov	r0, r3
 8002c86:	f001 fed5 	bl	8004a34 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002c92:	7afb      	ldrb	r3, [r7, #11]
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3710      	adds	r7, #16
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	460b      	mov	r3, r1
 8002ca6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002ca8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	da0f      	bge.n	8002cd0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cb0:	78fb      	ldrb	r3, [r7, #3]
 8002cb2:	f003 020f 	and.w	r2, r3, #15
 8002cb6:	4613      	mov	r3, r2
 8002cb8:	00db      	lsls	r3, r3, #3
 8002cba:	4413      	add	r3, r2
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	3338      	adds	r3, #56	; 0x38
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	4413      	add	r3, r2
 8002cc4:	3304      	adds	r3, #4
 8002cc6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	705a      	strb	r2, [r3, #1]
 8002cce:	e00f      	b.n	8002cf0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002cd0:	78fb      	ldrb	r3, [r7, #3]
 8002cd2:	f003 020f 	and.w	r2, r3, #15
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	00db      	lsls	r3, r3, #3
 8002cda:	4413      	add	r3, r2
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	4413      	add	r3, r2
 8002ce6:	3304      	adds	r3, #4
 8002ce8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2200      	movs	r2, #0
 8002cee:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002cf0:	78fb      	ldrb	r3, [r7, #3]
 8002cf2:	f003 030f 	and.w	r3, r3, #15
 8002cf6:	b2da      	uxtb	r2, r3
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d101      	bne.n	8002d0a <HAL_PCD_EP_Close+0x6e>
 8002d06:	2302      	movs	r3, #2
 8002d08:	e00e      	b.n	8002d28 <HAL_PCD_EP_Close+0x8c>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	68f9      	ldr	r1, [r7, #12]
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f001 ff11 	bl	8004b40 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2200      	movs	r2, #0
 8002d22:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002d26:	2300      	movs	r3, #0
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3710      	adds	r7, #16
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b086      	sub	sp, #24
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	607a      	str	r2, [r7, #4]
 8002d3a:	603b      	str	r3, [r7, #0]
 8002d3c:	460b      	mov	r3, r1
 8002d3e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d40:	7afb      	ldrb	r3, [r7, #11]
 8002d42:	f003 020f 	and.w	r2, r3, #15
 8002d46:	4613      	mov	r3, r2
 8002d48:	00db      	lsls	r3, r3, #3
 8002d4a:	4413      	add	r3, r2
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d52:	68fa      	ldr	r2, [r7, #12]
 8002d54:	4413      	add	r3, r2
 8002d56:	3304      	adds	r3, #4
 8002d58:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	683a      	ldr	r2, [r7, #0]
 8002d64:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d72:	7afb      	ldrb	r3, [r7, #11]
 8002d74:	f003 030f 	and.w	r3, r3, #15
 8002d78:	b2da      	uxtb	r2, r3
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	691b      	ldr	r3, [r3, #16]
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d102      	bne.n	8002d8c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002d8c:	7afb      	ldrb	r3, [r7, #11]
 8002d8e:	f003 030f 	and.w	r3, r3, #15
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d109      	bne.n	8002daa <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	6818      	ldr	r0, [r3, #0]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	691b      	ldr	r3, [r3, #16]
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	461a      	mov	r2, r3
 8002da2:	6979      	ldr	r1, [r7, #20]
 8002da4:	f002 f9f0 	bl	8005188 <USB_EP0StartXfer>
 8002da8:	e008      	b.n	8002dbc <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	6818      	ldr	r0, [r3, #0]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	691b      	ldr	r3, [r3, #16]
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	461a      	mov	r2, r3
 8002db6:	6979      	ldr	r1, [r7, #20]
 8002db8:	f001 ff9e 	bl	8004cf8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002dbc:	2300      	movs	r3, #0
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3718      	adds	r7, #24
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}

08002dc6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002dc6:	b480      	push	{r7}
 8002dc8:	b083      	sub	sp, #12
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	6078      	str	r0, [r7, #4]
 8002dce:	460b      	mov	r3, r1
 8002dd0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002dd2:	78fb      	ldrb	r3, [r7, #3]
 8002dd4:	f003 020f 	and.w	r2, r3, #15
 8002dd8:	6879      	ldr	r1, [r7, #4]
 8002dda:	4613      	mov	r3, r2
 8002ddc:	00db      	lsls	r3, r3, #3
 8002dde:	4413      	add	r3, r2
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	440b      	add	r3, r1
 8002de4:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002de8:	681b      	ldr	r3, [r3, #0]
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	370c      	adds	r7, #12
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bc80      	pop	{r7}
 8002df2:	4770      	bx	lr

08002df4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b086      	sub	sp, #24
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	60f8      	str	r0, [r7, #12]
 8002dfc:	607a      	str	r2, [r7, #4]
 8002dfe:	603b      	str	r3, [r7, #0]
 8002e00:	460b      	mov	r3, r1
 8002e02:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e04:	7afb      	ldrb	r3, [r7, #11]
 8002e06:	f003 020f 	and.w	r2, r3, #15
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	00db      	lsls	r3, r3, #3
 8002e0e:	4413      	add	r3, r2
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	3338      	adds	r3, #56	; 0x38
 8002e14:	68fa      	ldr	r2, [r7, #12]
 8002e16:	4413      	add	r3, r2
 8002e18:	3304      	adds	r3, #4
 8002e1a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	683a      	ldr	r2, [r7, #0]
 8002e26:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	2201      	movs	r2, #1
 8002e32:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e34:	7afb      	ldrb	r3, [r7, #11]
 8002e36:	f003 030f 	and.w	r3, r3, #15
 8002e3a:	b2da      	uxtb	r2, r3
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	691b      	ldr	r3, [r3, #16]
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d102      	bne.n	8002e4e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e4e:	7afb      	ldrb	r3, [r7, #11]
 8002e50:	f003 030f 	and.w	r3, r3, #15
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d109      	bne.n	8002e6c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	6818      	ldr	r0, [r3, #0]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	691b      	ldr	r3, [r3, #16]
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	461a      	mov	r2, r3
 8002e64:	6979      	ldr	r1, [r7, #20]
 8002e66:	f002 f98f 	bl	8005188 <USB_EP0StartXfer>
 8002e6a:	e008      	b.n	8002e7e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6818      	ldr	r0, [r3, #0]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	691b      	ldr	r3, [r3, #16]
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	461a      	mov	r2, r3
 8002e78:	6979      	ldr	r1, [r7, #20]
 8002e7a:	f001 ff3d 	bl	8004cf8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002e7e:	2300      	movs	r3, #0
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3718      	adds	r7, #24
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b084      	sub	sp, #16
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	460b      	mov	r3, r1
 8002e92:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002e94:	78fb      	ldrb	r3, [r7, #3]
 8002e96:	f003 020f 	and.w	r2, r3, #15
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d901      	bls.n	8002ea6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e050      	b.n	8002f48 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002ea6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	da0f      	bge.n	8002ece <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002eae:	78fb      	ldrb	r3, [r7, #3]
 8002eb0:	f003 020f 	and.w	r2, r3, #15
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	00db      	lsls	r3, r3, #3
 8002eb8:	4413      	add	r3, r2
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	3338      	adds	r3, #56	; 0x38
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	4413      	add	r3, r2
 8002ec2:	3304      	adds	r3, #4
 8002ec4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2201      	movs	r2, #1
 8002eca:	705a      	strb	r2, [r3, #1]
 8002ecc:	e00d      	b.n	8002eea <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002ece:	78fa      	ldrb	r2, [r7, #3]
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	00db      	lsls	r3, r3, #3
 8002ed4:	4413      	add	r3, r2
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	4413      	add	r3, r2
 8002ee0:	3304      	adds	r3, #4
 8002ee2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2201      	movs	r2, #1
 8002eee:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ef0:	78fb      	ldrb	r3, [r7, #3]
 8002ef2:	f003 030f 	and.w	r3, r3, #15
 8002ef6:	b2da      	uxtb	r2, r3
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d101      	bne.n	8002f0a <HAL_PCD_EP_SetStall+0x82>
 8002f06:	2302      	movs	r3, #2
 8002f08:	e01e      	b.n	8002f48 <HAL_PCD_EP_SetStall+0xc0>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	68f9      	ldr	r1, [r7, #12]
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f002 fbc9 	bl	80056b0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f1e:	78fb      	ldrb	r3, [r7, #3]
 8002f20:	f003 030f 	and.w	r3, r3, #15
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d10a      	bne.n	8002f3e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6818      	ldr	r0, [r3, #0]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	691b      	ldr	r3, [r3, #16]
 8002f30:	b2d9      	uxtb	r1, r3
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002f38:	461a      	mov	r2, r3
 8002f3a:	f002 fdad 	bl	8005a98 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2200      	movs	r2, #0
 8002f42:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002f46:	2300      	movs	r3, #0
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3710      	adds	r7, #16
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}

08002f50 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	460b      	mov	r3, r1
 8002f5a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002f5c:	78fb      	ldrb	r3, [r7, #3]
 8002f5e:	f003 020f 	and.w	r2, r3, #15
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d901      	bls.n	8002f6e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e042      	b.n	8002ff4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002f6e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	da0f      	bge.n	8002f96 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f76:	78fb      	ldrb	r3, [r7, #3]
 8002f78:	f003 020f 	and.w	r2, r3, #15
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	00db      	lsls	r3, r3, #3
 8002f80:	4413      	add	r3, r2
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	3338      	adds	r3, #56	; 0x38
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	4413      	add	r3, r2
 8002f8a:	3304      	adds	r3, #4
 8002f8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2201      	movs	r2, #1
 8002f92:	705a      	strb	r2, [r3, #1]
 8002f94:	e00f      	b.n	8002fb6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f96:	78fb      	ldrb	r3, [r7, #3]
 8002f98:	f003 020f 	and.w	r2, r3, #15
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	00db      	lsls	r3, r3, #3
 8002fa0:	4413      	add	r3, r2
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	4413      	add	r3, r2
 8002fac:	3304      	adds	r3, #4
 8002fae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002fbc:	78fb      	ldrb	r3, [r7, #3]
 8002fbe:	f003 030f 	and.w	r3, r3, #15
 8002fc2:	b2da      	uxtb	r2, r3
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d101      	bne.n	8002fd6 <HAL_PCD_EP_ClrStall+0x86>
 8002fd2:	2302      	movs	r3, #2
 8002fd4:	e00e      	b.n	8002ff4 <HAL_PCD_EP_ClrStall+0xa4>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2201      	movs	r2, #1
 8002fda:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	68f9      	ldr	r1, [r7, #12]
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f002 fbd0 	bl	800578a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002ff2:	2300      	movs	r3, #0
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3710      	adds	r7, #16
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}

08002ffc <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b084      	sub	sp, #16
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	460b      	mov	r3, r1
 8003006:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003008:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800300c:	2b00      	cmp	r3, #0
 800300e:	da0c      	bge.n	800302a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003010:	78fb      	ldrb	r3, [r7, #3]
 8003012:	f003 020f 	and.w	r2, r3, #15
 8003016:	4613      	mov	r3, r2
 8003018:	00db      	lsls	r3, r3, #3
 800301a:	4413      	add	r3, r2
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	3338      	adds	r3, #56	; 0x38
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	4413      	add	r3, r2
 8003024:	3304      	adds	r3, #4
 8003026:	60fb      	str	r3, [r7, #12]
 8003028:	e00c      	b.n	8003044 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800302a:	78fb      	ldrb	r3, [r7, #3]
 800302c:	f003 020f 	and.w	r2, r3, #15
 8003030:	4613      	mov	r3, r2
 8003032:	00db      	lsls	r3, r3, #3
 8003034:	4413      	add	r3, r2
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	4413      	add	r3, r2
 8003040:	3304      	adds	r3, #4
 8003042:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	68f9      	ldr	r1, [r7, #12]
 800304a:	4618      	mov	r0, r3
 800304c:	f002 f9f3 	bl	8005436 <USB_EPStopXfer>
 8003050:	4603      	mov	r3, r0
 8003052:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003054:	7afb      	ldrb	r3, [r7, #11]
}
 8003056:	4618      	mov	r0, r3
 8003058:	3710      	adds	r7, #16
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}

0800305e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800305e:	b580      	push	{r7, lr}
 8003060:	b08a      	sub	sp, #40	; 0x28
 8003062:	af02      	add	r7, sp, #8
 8003064:	6078      	str	r0, [r7, #4]
 8003066:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003072:	683a      	ldr	r2, [r7, #0]
 8003074:	4613      	mov	r3, r2
 8003076:	00db      	lsls	r3, r3, #3
 8003078:	4413      	add	r3, r2
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	3338      	adds	r3, #56	; 0x38
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	4413      	add	r3, r2
 8003082:	3304      	adds	r3, #4
 8003084:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	6a1a      	ldr	r2, [r3, #32]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	699b      	ldr	r3, [r3, #24]
 800308e:	429a      	cmp	r2, r3
 8003090:	d901      	bls.n	8003096 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e06c      	b.n	8003170 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	699a      	ldr	r2, [r3, #24]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	6a1b      	ldr	r3, [r3, #32]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	68db      	ldr	r3, [r3, #12]
 80030a6:	69fa      	ldr	r2, [r7, #28]
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d902      	bls.n	80030b2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	3303      	adds	r3, #3
 80030b6:	089b      	lsrs	r3, r3, #2
 80030b8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80030ba:	e02b      	b.n	8003114 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	699a      	ldr	r2, [r3, #24]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6a1b      	ldr	r3, [r3, #32]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	69fa      	ldr	r2, [r7, #28]
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d902      	bls.n	80030d8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	68db      	ldr	r3, [r3, #12]
 80030d6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	3303      	adds	r3, #3
 80030dc:	089b      	lsrs	r3, r3, #2
 80030de:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6919      	ldr	r1, [r3, #16]
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	b2da      	uxtb	r2, r3
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	9300      	str	r3, [sp, #0]
 80030f4:	4603      	mov	r3, r0
 80030f6:	6978      	ldr	r0, [r7, #20]
 80030f8:	f002 fa46 	bl	8005588 <USB_WritePacket>

    ep->xfer_buff  += len;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	691a      	ldr	r2, [r3, #16]
 8003100:	69fb      	ldr	r3, [r7, #28]
 8003102:	441a      	add	r2, r3
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	6a1a      	ldr	r2, [r3, #32]
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	441a      	add	r2, r3
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	015a      	lsls	r2, r3, #5
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	4413      	add	r3, r2
 800311c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003120:	699b      	ldr	r3, [r3, #24]
 8003122:	b29b      	uxth	r3, r3
 8003124:	69ba      	ldr	r2, [r7, #24]
 8003126:	429a      	cmp	r2, r3
 8003128:	d809      	bhi.n	800313e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	6a1a      	ldr	r2, [r3, #32]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003132:	429a      	cmp	r2, r3
 8003134:	d203      	bcs.n	800313e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	699b      	ldr	r3, [r3, #24]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d1be      	bne.n	80030bc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	699a      	ldr	r2, [r3, #24]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6a1b      	ldr	r3, [r3, #32]
 8003146:	429a      	cmp	r2, r3
 8003148:	d811      	bhi.n	800316e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	f003 030f 	and.w	r3, r3, #15
 8003150:	2201      	movs	r2, #1
 8003152:	fa02 f303 	lsl.w	r3, r2, r3
 8003156:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800315e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	43db      	mvns	r3, r3
 8003164:	6939      	ldr	r1, [r7, #16]
 8003166:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800316a:	4013      	ands	r3, r2
 800316c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800316e:	2300      	movs	r3, #0
}
 8003170:	4618      	mov	r0, r3
 8003172:	3720      	adds	r7, #32
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}

08003178 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b088      	sub	sp, #32
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003188:	69fb      	ldr	r3, [r7, #28]
 800318a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	333c      	adds	r3, #60	; 0x3c
 8003190:	3304      	adds	r3, #4
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	015a      	lsls	r2, r3, #5
 800319a:	69bb      	ldr	r3, [r7, #24]
 800319c:	4413      	add	r3, r2
 800319e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	691b      	ldr	r3, [r3, #16]
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d17b      	bne.n	80032a6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	f003 0308 	and.w	r3, r3, #8
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d015      	beq.n	80031e4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	4a61      	ldr	r2, [pc, #388]	; (8003340 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	f240 80b9 	bls.w	8003334 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	f000 80b3 	beq.w	8003334 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	015a      	lsls	r2, r3, #5
 80031d2:	69bb      	ldr	r3, [r7, #24]
 80031d4:	4413      	add	r3, r2
 80031d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031da:	461a      	mov	r2, r3
 80031dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031e0:	6093      	str	r3, [r2, #8]
 80031e2:	e0a7      	b.n	8003334 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	f003 0320 	and.w	r3, r3, #32
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d009      	beq.n	8003202 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	015a      	lsls	r2, r3, #5
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	4413      	add	r3, r2
 80031f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031fa:	461a      	mov	r2, r3
 80031fc:	2320      	movs	r3, #32
 80031fe:	6093      	str	r3, [r2, #8]
 8003200:	e098      	b.n	8003334 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003208:	2b00      	cmp	r3, #0
 800320a:	f040 8093 	bne.w	8003334 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	4a4b      	ldr	r2, [pc, #300]	; (8003340 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d90f      	bls.n	8003236 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800321c:	2b00      	cmp	r3, #0
 800321e:	d00a      	beq.n	8003236 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	015a      	lsls	r2, r3, #5
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	4413      	add	r3, r2
 8003228:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800322c:	461a      	mov	r2, r3
 800322e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003232:	6093      	str	r3, [r2, #8]
 8003234:	e07e      	b.n	8003334 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003236:	683a      	ldr	r2, [r7, #0]
 8003238:	4613      	mov	r3, r2
 800323a:	00db      	lsls	r3, r3, #3
 800323c:	4413      	add	r3, r2
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	4413      	add	r3, r2
 8003248:	3304      	adds	r3, #4
 800324a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	69da      	ldr	r2, [r3, #28]
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	0159      	lsls	r1, r3, #5
 8003254:	69bb      	ldr	r3, [r7, #24]
 8003256:	440b      	add	r3, r1
 8003258:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800325c:	691b      	ldr	r3, [r3, #16]
 800325e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003262:	1ad2      	subs	r2, r2, r3
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d114      	bne.n	8003298 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	699b      	ldr	r3, [r3, #24]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d109      	bne.n	800328a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6818      	ldr	r0, [r3, #0]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003280:	461a      	mov	r2, r3
 8003282:	2101      	movs	r1, #1
 8003284:	f002 fc08 	bl	8005a98 <USB_EP0_OutStart>
 8003288:	e006      	b.n	8003298 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	691a      	ldr	r2, [r3, #16]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6a1b      	ldr	r3, [r3, #32]
 8003292:	441a      	add	r2, r3
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	b2db      	uxtb	r3, r3
 800329c:	4619      	mov	r1, r3
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f016 fc88 	bl	8019bb4 <HAL_PCD_DataOutStageCallback>
 80032a4:	e046      	b.n	8003334 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	4a26      	ldr	r2, [pc, #152]	; (8003344 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d124      	bne.n	80032f8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d00a      	beq.n	80032ce <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	015a      	lsls	r2, r3, #5
 80032bc:	69bb      	ldr	r3, [r7, #24]
 80032be:	4413      	add	r3, r2
 80032c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032c4:	461a      	mov	r2, r3
 80032c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032ca:	6093      	str	r3, [r2, #8]
 80032cc:	e032      	b.n	8003334 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	f003 0320 	and.w	r3, r3, #32
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d008      	beq.n	80032ea <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	015a      	lsls	r2, r3, #5
 80032dc:	69bb      	ldr	r3, [r7, #24]
 80032de:	4413      	add	r3, r2
 80032e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032e4:	461a      	mov	r2, r3
 80032e6:	2320      	movs	r3, #32
 80032e8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	4619      	mov	r1, r3
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f016 fc5f 	bl	8019bb4 <HAL_PCD_DataOutStageCallback>
 80032f6:	e01d      	b.n	8003334 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d114      	bne.n	8003328 <PCD_EP_OutXfrComplete_int+0x1b0>
 80032fe:	6879      	ldr	r1, [r7, #4]
 8003300:	683a      	ldr	r2, [r7, #0]
 8003302:	4613      	mov	r3, r2
 8003304:	00db      	lsls	r3, r3, #3
 8003306:	4413      	add	r3, r2
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	440b      	add	r3, r1
 800330c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d108      	bne.n	8003328 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6818      	ldr	r0, [r3, #0]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003320:	461a      	mov	r2, r3
 8003322:	2100      	movs	r1, #0
 8003324:	f002 fbb8 	bl	8005a98 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	b2db      	uxtb	r3, r3
 800332c:	4619      	mov	r1, r3
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f016 fc40 	bl	8019bb4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003334:	2300      	movs	r3, #0
}
 8003336:	4618      	mov	r0, r3
 8003338:	3720      	adds	r7, #32
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	4f54300a 	.word	0x4f54300a
 8003344:	4f54310a 	.word	0x4f54310a

08003348 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b086      	sub	sp, #24
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	333c      	adds	r3, #60	; 0x3c
 8003360:	3304      	adds	r3, #4
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	015a      	lsls	r2, r3, #5
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	4413      	add	r3, r2
 800336e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	4a15      	ldr	r2, [pc, #84]	; (80033d0 <PCD_EP_OutSetupPacket_int+0x88>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d90e      	bls.n	800339c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003384:	2b00      	cmp	r3, #0
 8003386:	d009      	beq.n	800339c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	015a      	lsls	r2, r3, #5
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	4413      	add	r3, r2
 8003390:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003394:	461a      	mov	r2, r3
 8003396:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800339a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	f016 fbf7 	bl	8019b90 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	4a0a      	ldr	r2, [pc, #40]	; (80033d0 <PCD_EP_OutSetupPacket_int+0x88>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d90c      	bls.n	80033c4 <PCD_EP_OutSetupPacket_int+0x7c>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	691b      	ldr	r3, [r3, #16]
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d108      	bne.n	80033c4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6818      	ldr	r0, [r3, #0]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80033bc:	461a      	mov	r2, r3
 80033be:	2101      	movs	r1, #1
 80033c0:	f002 fb6a 	bl	8005a98 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80033c4:	2300      	movs	r3, #0
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3718      	adds	r7, #24
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	4f54300a 	.word	0x4f54300a

080033d4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b085      	sub	sp, #20
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	460b      	mov	r3, r1
 80033de:	70fb      	strb	r3, [r7, #3]
 80033e0:	4613      	mov	r3, r2
 80033e2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ea:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80033ec:	78fb      	ldrb	r3, [r7, #3]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d107      	bne.n	8003402 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80033f2:	883b      	ldrh	r3, [r7, #0]
 80033f4:	0419      	lsls	r1, r3, #16
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	68ba      	ldr	r2, [r7, #8]
 80033fc:	430a      	orrs	r2, r1
 80033fe:	629a      	str	r2, [r3, #40]	; 0x28
 8003400:	e028      	b.n	8003454 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003408:	0c1b      	lsrs	r3, r3, #16
 800340a:	68ba      	ldr	r2, [r7, #8]
 800340c:	4413      	add	r3, r2
 800340e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003410:	2300      	movs	r3, #0
 8003412:	73fb      	strb	r3, [r7, #15]
 8003414:	e00d      	b.n	8003432 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	7bfb      	ldrb	r3, [r7, #15]
 800341c:	3340      	adds	r3, #64	; 0x40
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	4413      	add	r3, r2
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	0c1b      	lsrs	r3, r3, #16
 8003426:	68ba      	ldr	r2, [r7, #8]
 8003428:	4413      	add	r3, r2
 800342a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800342c:	7bfb      	ldrb	r3, [r7, #15]
 800342e:	3301      	adds	r3, #1
 8003430:	73fb      	strb	r3, [r7, #15]
 8003432:	7bfa      	ldrb	r2, [r7, #15]
 8003434:	78fb      	ldrb	r3, [r7, #3]
 8003436:	3b01      	subs	r3, #1
 8003438:	429a      	cmp	r2, r3
 800343a:	d3ec      	bcc.n	8003416 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800343c:	883b      	ldrh	r3, [r7, #0]
 800343e:	0418      	lsls	r0, r3, #16
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6819      	ldr	r1, [r3, #0]
 8003444:	78fb      	ldrb	r3, [r7, #3]
 8003446:	3b01      	subs	r3, #1
 8003448:	68ba      	ldr	r2, [r7, #8]
 800344a:	4302      	orrs	r2, r0
 800344c:	3340      	adds	r3, #64	; 0x40
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	440b      	add	r3, r1
 8003452:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003454:	2300      	movs	r3, #0
}
 8003456:	4618      	mov	r0, r3
 8003458:	3714      	adds	r7, #20
 800345a:	46bd      	mov	sp, r7
 800345c:	bc80      	pop	{r7}
 800345e:	4770      	bx	lr

08003460 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003460:	b480      	push	{r7}
 8003462:	b083      	sub	sp, #12
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	460b      	mov	r3, r1
 800346a:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	887a      	ldrh	r2, [r7, #2]
 8003472:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003474:	2300      	movs	r3, #0
}
 8003476:	4618      	mov	r0, r3
 8003478:	370c      	adds	r7, #12
 800347a:	46bd      	mov	sp, r7
 800347c:	bc80      	pop	{r7}
 800347e:	4770      	bx	lr

08003480 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
 8003488:	460b      	mov	r3, r1
 800348a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800348c:	bf00      	nop
 800348e:	370c      	adds	r7, #12
 8003490:	46bd      	mov	sp, r7
 8003492:	bc80      	pop	{r7}
 8003494:	4770      	bx	lr
	...

08003498 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b086      	sub	sp, #24
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d101      	bne.n	80034aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e267      	b.n	800397a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 0301 	and.w	r3, r3, #1
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d075      	beq.n	80035a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80034b6:	4b88      	ldr	r3, [pc, #544]	; (80036d8 <HAL_RCC_OscConfig+0x240>)
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	f003 030c 	and.w	r3, r3, #12
 80034be:	2b04      	cmp	r3, #4
 80034c0:	d00c      	beq.n	80034dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034c2:	4b85      	ldr	r3, [pc, #532]	; (80036d8 <HAL_RCC_OscConfig+0x240>)
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80034ca:	2b08      	cmp	r3, #8
 80034cc:	d112      	bne.n	80034f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034ce:	4b82      	ldr	r3, [pc, #520]	; (80036d8 <HAL_RCC_OscConfig+0x240>)
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034da:	d10b      	bne.n	80034f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034dc:	4b7e      	ldr	r3, [pc, #504]	; (80036d8 <HAL_RCC_OscConfig+0x240>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d05b      	beq.n	80035a0 <HAL_RCC_OscConfig+0x108>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d157      	bne.n	80035a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	e242      	b.n	800397a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034fc:	d106      	bne.n	800350c <HAL_RCC_OscConfig+0x74>
 80034fe:	4b76      	ldr	r3, [pc, #472]	; (80036d8 <HAL_RCC_OscConfig+0x240>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a75      	ldr	r2, [pc, #468]	; (80036d8 <HAL_RCC_OscConfig+0x240>)
 8003504:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003508:	6013      	str	r3, [r2, #0]
 800350a:	e01d      	b.n	8003548 <HAL_RCC_OscConfig+0xb0>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003514:	d10c      	bne.n	8003530 <HAL_RCC_OscConfig+0x98>
 8003516:	4b70      	ldr	r3, [pc, #448]	; (80036d8 <HAL_RCC_OscConfig+0x240>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a6f      	ldr	r2, [pc, #444]	; (80036d8 <HAL_RCC_OscConfig+0x240>)
 800351c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003520:	6013      	str	r3, [r2, #0]
 8003522:	4b6d      	ldr	r3, [pc, #436]	; (80036d8 <HAL_RCC_OscConfig+0x240>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a6c      	ldr	r2, [pc, #432]	; (80036d8 <HAL_RCC_OscConfig+0x240>)
 8003528:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800352c:	6013      	str	r3, [r2, #0]
 800352e:	e00b      	b.n	8003548 <HAL_RCC_OscConfig+0xb0>
 8003530:	4b69      	ldr	r3, [pc, #420]	; (80036d8 <HAL_RCC_OscConfig+0x240>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a68      	ldr	r2, [pc, #416]	; (80036d8 <HAL_RCC_OscConfig+0x240>)
 8003536:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800353a:	6013      	str	r3, [r2, #0]
 800353c:	4b66      	ldr	r3, [pc, #408]	; (80036d8 <HAL_RCC_OscConfig+0x240>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a65      	ldr	r2, [pc, #404]	; (80036d8 <HAL_RCC_OscConfig+0x240>)
 8003542:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003546:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d013      	beq.n	8003578 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003550:	f7fd fc0a 	bl	8000d68 <HAL_GetTick>
 8003554:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003556:	e008      	b.n	800356a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003558:	f7fd fc06 	bl	8000d68 <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	2b64      	cmp	r3, #100	; 0x64
 8003564:	d901      	bls.n	800356a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e207      	b.n	800397a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800356a:	4b5b      	ldr	r3, [pc, #364]	; (80036d8 <HAL_RCC_OscConfig+0x240>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d0f0      	beq.n	8003558 <HAL_RCC_OscConfig+0xc0>
 8003576:	e014      	b.n	80035a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003578:	f7fd fbf6 	bl	8000d68 <HAL_GetTick>
 800357c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800357e:	e008      	b.n	8003592 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003580:	f7fd fbf2 	bl	8000d68 <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	2b64      	cmp	r3, #100	; 0x64
 800358c:	d901      	bls.n	8003592 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e1f3      	b.n	800397a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003592:	4b51      	ldr	r3, [pc, #324]	; (80036d8 <HAL_RCC_OscConfig+0x240>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d1f0      	bne.n	8003580 <HAL_RCC_OscConfig+0xe8>
 800359e:	e000      	b.n	80035a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0302 	and.w	r3, r3, #2
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d063      	beq.n	8003676 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80035ae:	4b4a      	ldr	r3, [pc, #296]	; (80036d8 <HAL_RCC_OscConfig+0x240>)
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	f003 030c 	and.w	r3, r3, #12
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d00b      	beq.n	80035d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035ba:	4b47      	ldr	r3, [pc, #284]	; (80036d8 <HAL_RCC_OscConfig+0x240>)
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80035c2:	2b08      	cmp	r3, #8
 80035c4:	d11c      	bne.n	8003600 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035c6:	4b44      	ldr	r3, [pc, #272]	; (80036d8 <HAL_RCC_OscConfig+0x240>)
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d116      	bne.n	8003600 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035d2:	4b41      	ldr	r3, [pc, #260]	; (80036d8 <HAL_RCC_OscConfig+0x240>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0302 	and.w	r3, r3, #2
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d005      	beq.n	80035ea <HAL_RCC_OscConfig+0x152>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d001      	beq.n	80035ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e1c7      	b.n	800397a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035ea:	4b3b      	ldr	r3, [pc, #236]	; (80036d8 <HAL_RCC_OscConfig+0x240>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	691b      	ldr	r3, [r3, #16]
 80035f6:	00db      	lsls	r3, r3, #3
 80035f8:	4937      	ldr	r1, [pc, #220]	; (80036d8 <HAL_RCC_OscConfig+0x240>)
 80035fa:	4313      	orrs	r3, r2
 80035fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035fe:	e03a      	b.n	8003676 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d020      	beq.n	800364a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003608:	4b34      	ldr	r3, [pc, #208]	; (80036dc <HAL_RCC_OscConfig+0x244>)
 800360a:	2201      	movs	r2, #1
 800360c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800360e:	f7fd fbab 	bl	8000d68 <HAL_GetTick>
 8003612:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003614:	e008      	b.n	8003628 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003616:	f7fd fba7 	bl	8000d68 <HAL_GetTick>
 800361a:	4602      	mov	r2, r0
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	1ad3      	subs	r3, r2, r3
 8003620:	2b02      	cmp	r3, #2
 8003622:	d901      	bls.n	8003628 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003624:	2303      	movs	r3, #3
 8003626:	e1a8      	b.n	800397a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003628:	4b2b      	ldr	r3, [pc, #172]	; (80036d8 <HAL_RCC_OscConfig+0x240>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 0302 	and.w	r3, r3, #2
 8003630:	2b00      	cmp	r3, #0
 8003632:	d0f0      	beq.n	8003616 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003634:	4b28      	ldr	r3, [pc, #160]	; (80036d8 <HAL_RCC_OscConfig+0x240>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	691b      	ldr	r3, [r3, #16]
 8003640:	00db      	lsls	r3, r3, #3
 8003642:	4925      	ldr	r1, [pc, #148]	; (80036d8 <HAL_RCC_OscConfig+0x240>)
 8003644:	4313      	orrs	r3, r2
 8003646:	600b      	str	r3, [r1, #0]
 8003648:	e015      	b.n	8003676 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800364a:	4b24      	ldr	r3, [pc, #144]	; (80036dc <HAL_RCC_OscConfig+0x244>)
 800364c:	2200      	movs	r2, #0
 800364e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003650:	f7fd fb8a 	bl	8000d68 <HAL_GetTick>
 8003654:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003656:	e008      	b.n	800366a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003658:	f7fd fb86 	bl	8000d68 <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	2b02      	cmp	r3, #2
 8003664:	d901      	bls.n	800366a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e187      	b.n	800397a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800366a:	4b1b      	ldr	r3, [pc, #108]	; (80036d8 <HAL_RCC_OscConfig+0x240>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 0302 	and.w	r3, r3, #2
 8003672:	2b00      	cmp	r3, #0
 8003674:	d1f0      	bne.n	8003658 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0308 	and.w	r3, r3, #8
 800367e:	2b00      	cmp	r3, #0
 8003680:	d036      	beq.n	80036f0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	695b      	ldr	r3, [r3, #20]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d016      	beq.n	80036b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800368a:	4b15      	ldr	r3, [pc, #84]	; (80036e0 <HAL_RCC_OscConfig+0x248>)
 800368c:	2201      	movs	r2, #1
 800368e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003690:	f7fd fb6a 	bl	8000d68 <HAL_GetTick>
 8003694:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003696:	e008      	b.n	80036aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003698:	f7fd fb66 	bl	8000d68 <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d901      	bls.n	80036aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	e167      	b.n	800397a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036aa:	4b0b      	ldr	r3, [pc, #44]	; (80036d8 <HAL_RCC_OscConfig+0x240>)
 80036ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036ae:	f003 0302 	and.w	r3, r3, #2
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d0f0      	beq.n	8003698 <HAL_RCC_OscConfig+0x200>
 80036b6:	e01b      	b.n	80036f0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036b8:	4b09      	ldr	r3, [pc, #36]	; (80036e0 <HAL_RCC_OscConfig+0x248>)
 80036ba:	2200      	movs	r2, #0
 80036bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036be:	f7fd fb53 	bl	8000d68 <HAL_GetTick>
 80036c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036c4:	e00e      	b.n	80036e4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036c6:	f7fd fb4f 	bl	8000d68 <HAL_GetTick>
 80036ca:	4602      	mov	r2, r0
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	d907      	bls.n	80036e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80036d4:	2303      	movs	r3, #3
 80036d6:	e150      	b.n	800397a <HAL_RCC_OscConfig+0x4e2>
 80036d8:	40023800 	.word	0x40023800
 80036dc:	42470000 	.word	0x42470000
 80036e0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036e4:	4b88      	ldr	r3, [pc, #544]	; (8003908 <HAL_RCC_OscConfig+0x470>)
 80036e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036e8:	f003 0302 	and.w	r3, r3, #2
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d1ea      	bne.n	80036c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0304 	and.w	r3, r3, #4
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	f000 8097 	beq.w	800382c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036fe:	2300      	movs	r3, #0
 8003700:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003702:	4b81      	ldr	r3, [pc, #516]	; (8003908 <HAL_RCC_OscConfig+0x470>)
 8003704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800370a:	2b00      	cmp	r3, #0
 800370c:	d10f      	bne.n	800372e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800370e:	2300      	movs	r3, #0
 8003710:	60bb      	str	r3, [r7, #8]
 8003712:	4b7d      	ldr	r3, [pc, #500]	; (8003908 <HAL_RCC_OscConfig+0x470>)
 8003714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003716:	4a7c      	ldr	r2, [pc, #496]	; (8003908 <HAL_RCC_OscConfig+0x470>)
 8003718:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800371c:	6413      	str	r3, [r2, #64]	; 0x40
 800371e:	4b7a      	ldr	r3, [pc, #488]	; (8003908 <HAL_RCC_OscConfig+0x470>)
 8003720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003726:	60bb      	str	r3, [r7, #8]
 8003728:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800372a:	2301      	movs	r3, #1
 800372c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800372e:	4b77      	ldr	r3, [pc, #476]	; (800390c <HAL_RCC_OscConfig+0x474>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003736:	2b00      	cmp	r3, #0
 8003738:	d118      	bne.n	800376c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800373a:	4b74      	ldr	r3, [pc, #464]	; (800390c <HAL_RCC_OscConfig+0x474>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a73      	ldr	r2, [pc, #460]	; (800390c <HAL_RCC_OscConfig+0x474>)
 8003740:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003744:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003746:	f7fd fb0f 	bl	8000d68 <HAL_GetTick>
 800374a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800374c:	e008      	b.n	8003760 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800374e:	f7fd fb0b 	bl	8000d68 <HAL_GetTick>
 8003752:	4602      	mov	r2, r0
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	1ad3      	subs	r3, r2, r3
 8003758:	2b02      	cmp	r3, #2
 800375a:	d901      	bls.n	8003760 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800375c:	2303      	movs	r3, #3
 800375e:	e10c      	b.n	800397a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003760:	4b6a      	ldr	r3, [pc, #424]	; (800390c <HAL_RCC_OscConfig+0x474>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003768:	2b00      	cmp	r3, #0
 800376a:	d0f0      	beq.n	800374e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	2b01      	cmp	r3, #1
 8003772:	d106      	bne.n	8003782 <HAL_RCC_OscConfig+0x2ea>
 8003774:	4b64      	ldr	r3, [pc, #400]	; (8003908 <HAL_RCC_OscConfig+0x470>)
 8003776:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003778:	4a63      	ldr	r2, [pc, #396]	; (8003908 <HAL_RCC_OscConfig+0x470>)
 800377a:	f043 0301 	orr.w	r3, r3, #1
 800377e:	6713      	str	r3, [r2, #112]	; 0x70
 8003780:	e01c      	b.n	80037bc <HAL_RCC_OscConfig+0x324>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	2b05      	cmp	r3, #5
 8003788:	d10c      	bne.n	80037a4 <HAL_RCC_OscConfig+0x30c>
 800378a:	4b5f      	ldr	r3, [pc, #380]	; (8003908 <HAL_RCC_OscConfig+0x470>)
 800378c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800378e:	4a5e      	ldr	r2, [pc, #376]	; (8003908 <HAL_RCC_OscConfig+0x470>)
 8003790:	f043 0304 	orr.w	r3, r3, #4
 8003794:	6713      	str	r3, [r2, #112]	; 0x70
 8003796:	4b5c      	ldr	r3, [pc, #368]	; (8003908 <HAL_RCC_OscConfig+0x470>)
 8003798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800379a:	4a5b      	ldr	r2, [pc, #364]	; (8003908 <HAL_RCC_OscConfig+0x470>)
 800379c:	f043 0301 	orr.w	r3, r3, #1
 80037a0:	6713      	str	r3, [r2, #112]	; 0x70
 80037a2:	e00b      	b.n	80037bc <HAL_RCC_OscConfig+0x324>
 80037a4:	4b58      	ldr	r3, [pc, #352]	; (8003908 <HAL_RCC_OscConfig+0x470>)
 80037a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037a8:	4a57      	ldr	r2, [pc, #348]	; (8003908 <HAL_RCC_OscConfig+0x470>)
 80037aa:	f023 0301 	bic.w	r3, r3, #1
 80037ae:	6713      	str	r3, [r2, #112]	; 0x70
 80037b0:	4b55      	ldr	r3, [pc, #340]	; (8003908 <HAL_RCC_OscConfig+0x470>)
 80037b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037b4:	4a54      	ldr	r2, [pc, #336]	; (8003908 <HAL_RCC_OscConfig+0x470>)
 80037b6:	f023 0304 	bic.w	r3, r3, #4
 80037ba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d015      	beq.n	80037f0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037c4:	f7fd fad0 	bl	8000d68 <HAL_GetTick>
 80037c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037ca:	e00a      	b.n	80037e2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037cc:	f7fd facc 	bl	8000d68 <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80037da:	4293      	cmp	r3, r2
 80037dc:	d901      	bls.n	80037e2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80037de:	2303      	movs	r3, #3
 80037e0:	e0cb      	b.n	800397a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037e2:	4b49      	ldr	r3, [pc, #292]	; (8003908 <HAL_RCC_OscConfig+0x470>)
 80037e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037e6:	f003 0302 	and.w	r3, r3, #2
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d0ee      	beq.n	80037cc <HAL_RCC_OscConfig+0x334>
 80037ee:	e014      	b.n	800381a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037f0:	f7fd faba 	bl	8000d68 <HAL_GetTick>
 80037f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037f6:	e00a      	b.n	800380e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037f8:	f7fd fab6 	bl	8000d68 <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	f241 3288 	movw	r2, #5000	; 0x1388
 8003806:	4293      	cmp	r3, r2
 8003808:	d901      	bls.n	800380e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800380a:	2303      	movs	r3, #3
 800380c:	e0b5      	b.n	800397a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800380e:	4b3e      	ldr	r3, [pc, #248]	; (8003908 <HAL_RCC_OscConfig+0x470>)
 8003810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003812:	f003 0302 	and.w	r3, r3, #2
 8003816:	2b00      	cmp	r3, #0
 8003818:	d1ee      	bne.n	80037f8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800381a:	7dfb      	ldrb	r3, [r7, #23]
 800381c:	2b01      	cmp	r3, #1
 800381e:	d105      	bne.n	800382c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003820:	4b39      	ldr	r3, [pc, #228]	; (8003908 <HAL_RCC_OscConfig+0x470>)
 8003822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003824:	4a38      	ldr	r2, [pc, #224]	; (8003908 <HAL_RCC_OscConfig+0x470>)
 8003826:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800382a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	699b      	ldr	r3, [r3, #24]
 8003830:	2b00      	cmp	r3, #0
 8003832:	f000 80a1 	beq.w	8003978 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003836:	4b34      	ldr	r3, [pc, #208]	; (8003908 <HAL_RCC_OscConfig+0x470>)
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	f003 030c 	and.w	r3, r3, #12
 800383e:	2b08      	cmp	r3, #8
 8003840:	d05c      	beq.n	80038fc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	699b      	ldr	r3, [r3, #24]
 8003846:	2b02      	cmp	r3, #2
 8003848:	d141      	bne.n	80038ce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800384a:	4b31      	ldr	r3, [pc, #196]	; (8003910 <HAL_RCC_OscConfig+0x478>)
 800384c:	2200      	movs	r2, #0
 800384e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003850:	f7fd fa8a 	bl	8000d68 <HAL_GetTick>
 8003854:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003856:	e008      	b.n	800386a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003858:	f7fd fa86 	bl	8000d68 <HAL_GetTick>
 800385c:	4602      	mov	r2, r0
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	2b02      	cmp	r3, #2
 8003864:	d901      	bls.n	800386a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003866:	2303      	movs	r3, #3
 8003868:	e087      	b.n	800397a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800386a:	4b27      	ldr	r3, [pc, #156]	; (8003908 <HAL_RCC_OscConfig+0x470>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003872:	2b00      	cmp	r3, #0
 8003874:	d1f0      	bne.n	8003858 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	69da      	ldr	r2, [r3, #28]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6a1b      	ldr	r3, [r3, #32]
 800387e:	431a      	orrs	r2, r3
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003884:	019b      	lsls	r3, r3, #6
 8003886:	431a      	orrs	r2, r3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800388c:	085b      	lsrs	r3, r3, #1
 800388e:	3b01      	subs	r3, #1
 8003890:	041b      	lsls	r3, r3, #16
 8003892:	431a      	orrs	r2, r3
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003898:	061b      	lsls	r3, r3, #24
 800389a:	491b      	ldr	r1, [pc, #108]	; (8003908 <HAL_RCC_OscConfig+0x470>)
 800389c:	4313      	orrs	r3, r2
 800389e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038a0:	4b1b      	ldr	r3, [pc, #108]	; (8003910 <HAL_RCC_OscConfig+0x478>)
 80038a2:	2201      	movs	r2, #1
 80038a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038a6:	f7fd fa5f 	bl	8000d68 <HAL_GetTick>
 80038aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038ac:	e008      	b.n	80038c0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038ae:	f7fd fa5b 	bl	8000d68 <HAL_GetTick>
 80038b2:	4602      	mov	r2, r0
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	1ad3      	subs	r3, r2, r3
 80038b8:	2b02      	cmp	r3, #2
 80038ba:	d901      	bls.n	80038c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80038bc:	2303      	movs	r3, #3
 80038be:	e05c      	b.n	800397a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038c0:	4b11      	ldr	r3, [pc, #68]	; (8003908 <HAL_RCC_OscConfig+0x470>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d0f0      	beq.n	80038ae <HAL_RCC_OscConfig+0x416>
 80038cc:	e054      	b.n	8003978 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038ce:	4b10      	ldr	r3, [pc, #64]	; (8003910 <HAL_RCC_OscConfig+0x478>)
 80038d0:	2200      	movs	r2, #0
 80038d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038d4:	f7fd fa48 	bl	8000d68 <HAL_GetTick>
 80038d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038da:	e008      	b.n	80038ee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038dc:	f7fd fa44 	bl	8000d68 <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d901      	bls.n	80038ee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80038ea:	2303      	movs	r3, #3
 80038ec:	e045      	b.n	800397a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038ee:	4b06      	ldr	r3, [pc, #24]	; (8003908 <HAL_RCC_OscConfig+0x470>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d1f0      	bne.n	80038dc <HAL_RCC_OscConfig+0x444>
 80038fa:	e03d      	b.n	8003978 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	699b      	ldr	r3, [r3, #24]
 8003900:	2b01      	cmp	r3, #1
 8003902:	d107      	bne.n	8003914 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e038      	b.n	800397a <HAL_RCC_OscConfig+0x4e2>
 8003908:	40023800 	.word	0x40023800
 800390c:	40007000 	.word	0x40007000
 8003910:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003914:	4b1b      	ldr	r3, [pc, #108]	; (8003984 <HAL_RCC_OscConfig+0x4ec>)
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	699b      	ldr	r3, [r3, #24]
 800391e:	2b01      	cmp	r3, #1
 8003920:	d028      	beq.n	8003974 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800392c:	429a      	cmp	r2, r3
 800392e:	d121      	bne.n	8003974 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800393a:	429a      	cmp	r2, r3
 800393c:	d11a      	bne.n	8003974 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800393e:	68fa      	ldr	r2, [r7, #12]
 8003940:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003944:	4013      	ands	r3, r2
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800394a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800394c:	4293      	cmp	r3, r2
 800394e:	d111      	bne.n	8003974 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800395a:	085b      	lsrs	r3, r3, #1
 800395c:	3b01      	subs	r3, #1
 800395e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003960:	429a      	cmp	r2, r3
 8003962:	d107      	bne.n	8003974 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800396e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003970:	429a      	cmp	r2, r3
 8003972:	d001      	beq.n	8003978 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e000      	b.n	800397a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003978:	2300      	movs	r3, #0
}
 800397a:	4618      	mov	r0, r3
 800397c:	3718      	adds	r7, #24
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	40023800 	.word	0x40023800

08003988 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b084      	sub	sp, #16
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d101      	bne.n	800399c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	e0cc      	b.n	8003b36 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800399c:	4b68      	ldr	r3, [pc, #416]	; (8003b40 <HAL_RCC_ClockConfig+0x1b8>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0307 	and.w	r3, r3, #7
 80039a4:	683a      	ldr	r2, [r7, #0]
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d90c      	bls.n	80039c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039aa:	4b65      	ldr	r3, [pc, #404]	; (8003b40 <HAL_RCC_ClockConfig+0x1b8>)
 80039ac:	683a      	ldr	r2, [r7, #0]
 80039ae:	b2d2      	uxtb	r2, r2
 80039b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039b2:	4b63      	ldr	r3, [pc, #396]	; (8003b40 <HAL_RCC_ClockConfig+0x1b8>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0307 	and.w	r3, r3, #7
 80039ba:	683a      	ldr	r2, [r7, #0]
 80039bc:	429a      	cmp	r2, r3
 80039be:	d001      	beq.n	80039c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e0b8      	b.n	8003b36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0302 	and.w	r3, r3, #2
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d020      	beq.n	8003a12 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 0304 	and.w	r3, r3, #4
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d005      	beq.n	80039e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039dc:	4b59      	ldr	r3, [pc, #356]	; (8003b44 <HAL_RCC_ClockConfig+0x1bc>)
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	4a58      	ldr	r2, [pc, #352]	; (8003b44 <HAL_RCC_ClockConfig+0x1bc>)
 80039e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80039e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 0308 	and.w	r3, r3, #8
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d005      	beq.n	8003a00 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039f4:	4b53      	ldr	r3, [pc, #332]	; (8003b44 <HAL_RCC_ClockConfig+0x1bc>)
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	4a52      	ldr	r2, [pc, #328]	; (8003b44 <HAL_RCC_ClockConfig+0x1bc>)
 80039fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80039fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a00:	4b50      	ldr	r3, [pc, #320]	; (8003b44 <HAL_RCC_ClockConfig+0x1bc>)
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	494d      	ldr	r1, [pc, #308]	; (8003b44 <HAL_RCC_ClockConfig+0x1bc>)
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0301 	and.w	r3, r3, #1
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d044      	beq.n	8003aa8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d107      	bne.n	8003a36 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a26:	4b47      	ldr	r3, [pc, #284]	; (8003b44 <HAL_RCC_ClockConfig+0x1bc>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d119      	bne.n	8003a66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e07f      	b.n	8003b36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	2b02      	cmp	r3, #2
 8003a3c:	d003      	beq.n	8003a46 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a42:	2b03      	cmp	r3, #3
 8003a44:	d107      	bne.n	8003a56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a46:	4b3f      	ldr	r3, [pc, #252]	; (8003b44 <HAL_RCC_ClockConfig+0x1bc>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d109      	bne.n	8003a66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e06f      	b.n	8003b36 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a56:	4b3b      	ldr	r3, [pc, #236]	; (8003b44 <HAL_RCC_ClockConfig+0x1bc>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 0302 	and.w	r3, r3, #2
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d101      	bne.n	8003a66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e067      	b.n	8003b36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a66:	4b37      	ldr	r3, [pc, #220]	; (8003b44 <HAL_RCC_ClockConfig+0x1bc>)
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	f023 0203 	bic.w	r2, r3, #3
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	4934      	ldr	r1, [pc, #208]	; (8003b44 <HAL_RCC_ClockConfig+0x1bc>)
 8003a74:	4313      	orrs	r3, r2
 8003a76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a78:	f7fd f976 	bl	8000d68 <HAL_GetTick>
 8003a7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a7e:	e00a      	b.n	8003a96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a80:	f7fd f972 	bl	8000d68 <HAL_GetTick>
 8003a84:	4602      	mov	r2, r0
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d901      	bls.n	8003a96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	e04f      	b.n	8003b36 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a96:	4b2b      	ldr	r3, [pc, #172]	; (8003b44 <HAL_RCC_ClockConfig+0x1bc>)
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	f003 020c 	and.w	r2, r3, #12
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d1eb      	bne.n	8003a80 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003aa8:	4b25      	ldr	r3, [pc, #148]	; (8003b40 <HAL_RCC_ClockConfig+0x1b8>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 0307 	and.w	r3, r3, #7
 8003ab0:	683a      	ldr	r2, [r7, #0]
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d20c      	bcs.n	8003ad0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ab6:	4b22      	ldr	r3, [pc, #136]	; (8003b40 <HAL_RCC_ClockConfig+0x1b8>)
 8003ab8:	683a      	ldr	r2, [r7, #0]
 8003aba:	b2d2      	uxtb	r2, r2
 8003abc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003abe:	4b20      	ldr	r3, [pc, #128]	; (8003b40 <HAL_RCC_ClockConfig+0x1b8>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0307 	and.w	r3, r3, #7
 8003ac6:	683a      	ldr	r2, [r7, #0]
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d001      	beq.n	8003ad0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	e032      	b.n	8003b36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0304 	and.w	r3, r3, #4
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d008      	beq.n	8003aee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003adc:	4b19      	ldr	r3, [pc, #100]	; (8003b44 <HAL_RCC_ClockConfig+0x1bc>)
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	4916      	ldr	r1, [pc, #88]	; (8003b44 <HAL_RCC_ClockConfig+0x1bc>)
 8003aea:	4313      	orrs	r3, r2
 8003aec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0308 	and.w	r3, r3, #8
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d009      	beq.n	8003b0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003afa:	4b12      	ldr	r3, [pc, #72]	; (8003b44 <HAL_RCC_ClockConfig+0x1bc>)
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	691b      	ldr	r3, [r3, #16]
 8003b06:	00db      	lsls	r3, r3, #3
 8003b08:	490e      	ldr	r1, [pc, #56]	; (8003b44 <HAL_RCC_ClockConfig+0x1bc>)
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b0e:	f000 f821 	bl	8003b54 <HAL_RCC_GetSysClockFreq>
 8003b12:	4602      	mov	r2, r0
 8003b14:	4b0b      	ldr	r3, [pc, #44]	; (8003b44 <HAL_RCC_ClockConfig+0x1bc>)
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	091b      	lsrs	r3, r3, #4
 8003b1a:	f003 030f 	and.w	r3, r3, #15
 8003b1e:	490a      	ldr	r1, [pc, #40]	; (8003b48 <HAL_RCC_ClockConfig+0x1c0>)
 8003b20:	5ccb      	ldrb	r3, [r1, r3]
 8003b22:	fa22 f303 	lsr.w	r3, r2, r3
 8003b26:	4a09      	ldr	r2, [pc, #36]	; (8003b4c <HAL_RCC_ClockConfig+0x1c4>)
 8003b28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b2a:	4b09      	ldr	r3, [pc, #36]	; (8003b50 <HAL_RCC_ClockConfig+0x1c8>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f7fc fea4 	bl	800087c <HAL_InitTick>

  return HAL_OK;
 8003b34:	2300      	movs	r3, #0
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3710      	adds	r7, #16
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	40023c00 	.word	0x40023c00
 8003b44:	40023800 	.word	0x40023800
 8003b48:	0801ea2c 	.word	0x0801ea2c
 8003b4c:	20000000 	.word	0x20000000
 8003b50:	20000004 	.word	0x20000004

08003b54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b58:	b094      	sub	sp, #80	; 0x50
 8003b5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	647b      	str	r3, [r7, #68]	; 0x44
 8003b60:	2300      	movs	r3, #0
 8003b62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b64:	2300      	movs	r3, #0
 8003b66:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b6c:	4b7c      	ldr	r3, [pc, #496]	; (8003d60 <HAL_RCC_GetSysClockFreq+0x20c>)
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	f003 030c 	and.w	r3, r3, #12
 8003b74:	2b08      	cmp	r3, #8
 8003b76:	d00d      	beq.n	8003b94 <HAL_RCC_GetSysClockFreq+0x40>
 8003b78:	2b08      	cmp	r3, #8
 8003b7a:	f200 80e7 	bhi.w	8003d4c <HAL_RCC_GetSysClockFreq+0x1f8>
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d002      	beq.n	8003b88 <HAL_RCC_GetSysClockFreq+0x34>
 8003b82:	2b04      	cmp	r3, #4
 8003b84:	d003      	beq.n	8003b8e <HAL_RCC_GetSysClockFreq+0x3a>
 8003b86:	e0e1      	b.n	8003d4c <HAL_RCC_GetSysClockFreq+0x1f8>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b88:	4b76      	ldr	r3, [pc, #472]	; (8003d64 <HAL_RCC_GetSysClockFreq+0x210>)
 8003b8a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003b8c:	e0e1      	b.n	8003d52 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b8e:	4b76      	ldr	r3, [pc, #472]	; (8003d68 <HAL_RCC_GetSysClockFreq+0x214>)
 8003b90:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b92:	e0de      	b.n	8003d52 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b94:	4b72      	ldr	r3, [pc, #456]	; (8003d60 <HAL_RCC_GetSysClockFreq+0x20c>)
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b9c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b9e:	4b70      	ldr	r3, [pc, #448]	; (8003d60 <HAL_RCC_GetSysClockFreq+0x20c>)
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d065      	beq.n	8003c76 <HAL_RCC_GetSysClockFreq+0x122>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003baa:	4b6d      	ldr	r3, [pc, #436]	; (8003d60 <HAL_RCC_GetSysClockFreq+0x20c>)
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	099b      	lsrs	r3, r3, #6
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	63bb      	str	r3, [r7, #56]	; 0x38
 8003bb4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bbc:	633b      	str	r3, [r7, #48]	; 0x30
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	637b      	str	r3, [r7, #52]	; 0x34
 8003bc2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003bc6:	4622      	mov	r2, r4
 8003bc8:	462b      	mov	r3, r5
 8003bca:	f04f 0000 	mov.w	r0, #0
 8003bce:	f04f 0100 	mov.w	r1, #0
 8003bd2:	0159      	lsls	r1, r3, #5
 8003bd4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bd8:	0150      	lsls	r0, r2, #5
 8003bda:	4602      	mov	r2, r0
 8003bdc:	460b      	mov	r3, r1
 8003bde:	4621      	mov	r1, r4
 8003be0:	1a51      	subs	r1, r2, r1
 8003be2:	6139      	str	r1, [r7, #16]
 8003be4:	4629      	mov	r1, r5
 8003be6:	eb63 0301 	sbc.w	r3, r3, r1
 8003bea:	617b      	str	r3, [r7, #20]
 8003bec:	f04f 0200 	mov.w	r2, #0
 8003bf0:	f04f 0300 	mov.w	r3, #0
 8003bf4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003bf8:	4659      	mov	r1, fp
 8003bfa:	018b      	lsls	r3, r1, #6
 8003bfc:	4651      	mov	r1, sl
 8003bfe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c02:	4651      	mov	r1, sl
 8003c04:	018a      	lsls	r2, r1, #6
 8003c06:	46d4      	mov	ip, sl
 8003c08:	ebb2 080c 	subs.w	r8, r2, ip
 8003c0c:	4659      	mov	r1, fp
 8003c0e:	eb63 0901 	sbc.w	r9, r3, r1
 8003c12:	f04f 0200 	mov.w	r2, #0
 8003c16:	f04f 0300 	mov.w	r3, #0
 8003c1a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c1e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c22:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c26:	4690      	mov	r8, r2
 8003c28:	4699      	mov	r9, r3
 8003c2a:	4623      	mov	r3, r4
 8003c2c:	eb18 0303 	adds.w	r3, r8, r3
 8003c30:	60bb      	str	r3, [r7, #8]
 8003c32:	462b      	mov	r3, r5
 8003c34:	eb49 0303 	adc.w	r3, r9, r3
 8003c38:	60fb      	str	r3, [r7, #12]
 8003c3a:	f04f 0200 	mov.w	r2, #0
 8003c3e:	f04f 0300 	mov.w	r3, #0
 8003c42:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003c46:	4629      	mov	r1, r5
 8003c48:	024b      	lsls	r3, r1, #9
 8003c4a:	4620      	mov	r0, r4
 8003c4c:	4629      	mov	r1, r5
 8003c4e:	4604      	mov	r4, r0
 8003c50:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8003c54:	4601      	mov	r1, r0
 8003c56:	024a      	lsls	r2, r1, #9
 8003c58:	4610      	mov	r0, r2
 8003c5a:	4619      	mov	r1, r3
 8003c5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c5e:	2200      	movs	r2, #0
 8003c60:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c62:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c64:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003c68:	f7fc fb0a 	bl	8000280 <__aeabi_uldivmod>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	460b      	mov	r3, r1
 8003c70:	4613      	mov	r3, r2
 8003c72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c74:	e05c      	b.n	8003d30 <HAL_RCC_GetSysClockFreq+0x1dc>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c76:	4b3a      	ldr	r3, [pc, #232]	; (8003d60 <HAL_RCC_GetSysClockFreq+0x20c>)
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	099b      	lsrs	r3, r3, #6
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	4618      	mov	r0, r3
 8003c80:	4611      	mov	r1, r2
 8003c82:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003c86:	623b      	str	r3, [r7, #32]
 8003c88:	2300      	movs	r3, #0
 8003c8a:	627b      	str	r3, [r7, #36]	; 0x24
 8003c8c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003c90:	4642      	mov	r2, r8
 8003c92:	464b      	mov	r3, r9
 8003c94:	f04f 0000 	mov.w	r0, #0
 8003c98:	f04f 0100 	mov.w	r1, #0
 8003c9c:	0159      	lsls	r1, r3, #5
 8003c9e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ca2:	0150      	lsls	r0, r2, #5
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	460b      	mov	r3, r1
 8003ca8:	46c4      	mov	ip, r8
 8003caa:	ebb2 0a0c 	subs.w	sl, r2, ip
 8003cae:	4640      	mov	r0, r8
 8003cb0:	4649      	mov	r1, r9
 8003cb2:	468c      	mov	ip, r1
 8003cb4:	eb63 0b0c 	sbc.w	fp, r3, ip
 8003cb8:	f04f 0200 	mov.w	r2, #0
 8003cbc:	f04f 0300 	mov.w	r3, #0
 8003cc0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003cc4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003cc8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003ccc:	ebb2 040a 	subs.w	r4, r2, sl
 8003cd0:	eb63 050b 	sbc.w	r5, r3, fp
 8003cd4:	f04f 0200 	mov.w	r2, #0
 8003cd8:	f04f 0300 	mov.w	r3, #0
 8003cdc:	00eb      	lsls	r3, r5, #3
 8003cde:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ce2:	00e2      	lsls	r2, r4, #3
 8003ce4:	4614      	mov	r4, r2
 8003ce6:	461d      	mov	r5, r3
 8003ce8:	4603      	mov	r3, r0
 8003cea:	18e3      	adds	r3, r4, r3
 8003cec:	603b      	str	r3, [r7, #0]
 8003cee:	460b      	mov	r3, r1
 8003cf0:	eb45 0303 	adc.w	r3, r5, r3
 8003cf4:	607b      	str	r3, [r7, #4]
 8003cf6:	f04f 0200 	mov.w	r2, #0
 8003cfa:	f04f 0300 	mov.w	r3, #0
 8003cfe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d02:	4629      	mov	r1, r5
 8003d04:	028b      	lsls	r3, r1, #10
 8003d06:	4620      	mov	r0, r4
 8003d08:	4629      	mov	r1, r5
 8003d0a:	4604      	mov	r4, r0
 8003d0c:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8003d10:	4601      	mov	r1, r0
 8003d12:	028a      	lsls	r2, r1, #10
 8003d14:	4610      	mov	r0, r2
 8003d16:	4619      	mov	r1, r3
 8003d18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	61bb      	str	r3, [r7, #24]
 8003d1e:	61fa      	str	r2, [r7, #28]
 8003d20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d24:	f7fc faac 	bl	8000280 <__aeabi_uldivmod>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	460b      	mov	r3, r1
 8003d2c:	4613      	mov	r3, r2
 8003d2e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d30:	4b0b      	ldr	r3, [pc, #44]	; (8003d60 <HAL_RCC_GetSysClockFreq+0x20c>)
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	0c1b      	lsrs	r3, r3, #16
 8003d36:	f003 0303 	and.w	r3, r3, #3
 8003d3a:	3301      	adds	r3, #1
 8003d3c:	005b      	lsls	r3, r3, #1
 8003d3e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003d40:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003d42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d44:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d48:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003d4a:	e002      	b.n	8003d52 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d4c:	4b05      	ldr	r3, [pc, #20]	; (8003d64 <HAL_RCC_GetSysClockFreq+0x210>)
 8003d4e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003d50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3750      	adds	r7, #80	; 0x50
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d5e:	bf00      	nop
 8003d60:	40023800 	.word	0x40023800
 8003d64:	00f42400 	.word	0x00f42400
 8003d68:	007a1200 	.word	0x007a1200

08003d6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d70:	4b02      	ldr	r3, [pc, #8]	; (8003d7c <HAL_RCC_GetHCLKFreq+0x10>)
 8003d72:	681b      	ldr	r3, [r3, #0]
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bc80      	pop	{r7}
 8003d7a:	4770      	bx	lr
 8003d7c:	20000000 	.word	0x20000000

08003d80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003d84:	f7ff fff2 	bl	8003d6c <HAL_RCC_GetHCLKFreq>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	4b05      	ldr	r3, [pc, #20]	; (8003da0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	0b5b      	lsrs	r3, r3, #13
 8003d90:	f003 0307 	and.w	r3, r3, #7
 8003d94:	4903      	ldr	r1, [pc, #12]	; (8003da4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d96:	5ccb      	ldrb	r3, [r1, r3]
 8003d98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	bd80      	pop	{r7, pc}
 8003da0:	40023800 	.word	0x40023800
 8003da4:	0801ea3c 	.word	0x0801ea3c

08003da8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b083      	sub	sp, #12
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	220f      	movs	r2, #15
 8003db6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003db8:	4b11      	ldr	r3, [pc, #68]	; (8003e00 <HAL_RCC_GetClockConfig+0x58>)
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	f003 0203 	and.w	r2, r3, #3
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003dc4:	4b0e      	ldr	r3, [pc, #56]	; (8003e00 <HAL_RCC_GetClockConfig+0x58>)
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003dd0:	4b0b      	ldr	r3, [pc, #44]	; (8003e00 <HAL_RCC_GetClockConfig+0x58>)
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003ddc:	4b08      	ldr	r3, [pc, #32]	; (8003e00 <HAL_RCC_GetClockConfig+0x58>)
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	08db      	lsrs	r3, r3, #3
 8003de2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003dea:	4b06      	ldr	r3, [pc, #24]	; (8003e04 <HAL_RCC_GetClockConfig+0x5c>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 0207 	and.w	r2, r3, #7
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	601a      	str	r2, [r3, #0]
}
 8003df6:	bf00      	nop
 8003df8:	370c      	adds	r7, #12
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bc80      	pop	{r7}
 8003dfe:	4770      	bx	lr
 8003e00:	40023800 	.word	0x40023800
 8003e04:	40023c00 	.word	0x40023c00

08003e08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b082      	sub	sp, #8
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d101      	bne.n	8003e1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e041      	b.n	8003e9e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d106      	bne.n	8003e34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f000 f839 	bl	8003ea6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2202      	movs	r2, #2
 8003e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	3304      	adds	r3, #4
 8003e44:	4619      	mov	r1, r3
 8003e46:	4610      	mov	r0, r2
 8003e48:	f000 f9d0 	bl	80041ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2201      	movs	r2, #1
 8003e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2201      	movs	r2, #1
 8003e88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2201      	movs	r2, #1
 8003e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e9c:	2300      	movs	r3, #0
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3708      	adds	r7, #8
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}

08003ea6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003ea6:	b480      	push	{r7}
 8003ea8:	b083      	sub	sp, #12
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003eae:	bf00      	nop
 8003eb0:	370c      	adds	r7, #12
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bc80      	pop	{r7}
 8003eb6:	4770      	bx	lr

08003eb8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b085      	sub	sp, #20
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d001      	beq.n	8003ed0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e04e      	b.n	8003f6e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2202      	movs	r2, #2
 8003ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	68da      	ldr	r2, [r3, #12]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f042 0201 	orr.w	r2, r2, #1
 8003ee6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a22      	ldr	r2, [pc, #136]	; (8003f78 <HAL_TIM_Base_Start_IT+0xc0>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d022      	beq.n	8003f38 <HAL_TIM_Base_Start_IT+0x80>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003efa:	d01d      	beq.n	8003f38 <HAL_TIM_Base_Start_IT+0x80>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a1e      	ldr	r2, [pc, #120]	; (8003f7c <HAL_TIM_Base_Start_IT+0xc4>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d018      	beq.n	8003f38 <HAL_TIM_Base_Start_IT+0x80>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a1d      	ldr	r2, [pc, #116]	; (8003f80 <HAL_TIM_Base_Start_IT+0xc8>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d013      	beq.n	8003f38 <HAL_TIM_Base_Start_IT+0x80>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a1b      	ldr	r2, [pc, #108]	; (8003f84 <HAL_TIM_Base_Start_IT+0xcc>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d00e      	beq.n	8003f38 <HAL_TIM_Base_Start_IT+0x80>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a1a      	ldr	r2, [pc, #104]	; (8003f88 <HAL_TIM_Base_Start_IT+0xd0>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d009      	beq.n	8003f38 <HAL_TIM_Base_Start_IT+0x80>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a18      	ldr	r2, [pc, #96]	; (8003f8c <HAL_TIM_Base_Start_IT+0xd4>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d004      	beq.n	8003f38 <HAL_TIM_Base_Start_IT+0x80>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a17      	ldr	r2, [pc, #92]	; (8003f90 <HAL_TIM_Base_Start_IT+0xd8>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d111      	bne.n	8003f5c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	f003 0307 	and.w	r3, r3, #7
 8003f42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2b06      	cmp	r3, #6
 8003f48:	d010      	beq.n	8003f6c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f042 0201 	orr.w	r2, r2, #1
 8003f58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f5a:	e007      	b.n	8003f6c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f042 0201 	orr.w	r2, r2, #1
 8003f6a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f6c:	2300      	movs	r3, #0
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3714      	adds	r7, #20
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bc80      	pop	{r7}
 8003f76:	4770      	bx	lr
 8003f78:	40010000 	.word	0x40010000
 8003f7c:	40000400 	.word	0x40000400
 8003f80:	40000800 	.word	0x40000800
 8003f84:	40000c00 	.word	0x40000c00
 8003f88:	40010400 	.word	0x40010400
 8003f8c:	40014000 	.word	0x40014000
 8003f90:	40001800 	.word	0x40001800

08003f94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b082      	sub	sp, #8
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	691b      	ldr	r3, [r3, #16]
 8003fa2:	f003 0302 	and.w	r3, r3, #2
 8003fa6:	2b02      	cmp	r3, #2
 8003fa8:	d122      	bne.n	8003ff0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	f003 0302 	and.w	r3, r3, #2
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	d11b      	bne.n	8003ff0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f06f 0202 	mvn.w	r2, #2
 8003fc0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	699b      	ldr	r3, [r3, #24]
 8003fce:	f003 0303 	and.w	r3, r3, #3
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d003      	beq.n	8003fde <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f000 f8ed 	bl	80041b6 <HAL_TIM_IC_CaptureCallback>
 8003fdc:	e005      	b.n	8003fea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f000 f8e0 	bl	80041a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	f000 f8ef 	bl	80041c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2200      	movs	r2, #0
 8003fee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	691b      	ldr	r3, [r3, #16]
 8003ff6:	f003 0304 	and.w	r3, r3, #4
 8003ffa:	2b04      	cmp	r3, #4
 8003ffc:	d122      	bne.n	8004044 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	f003 0304 	and.w	r3, r3, #4
 8004008:	2b04      	cmp	r3, #4
 800400a:	d11b      	bne.n	8004044 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f06f 0204 	mvn.w	r2, #4
 8004014:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2202      	movs	r2, #2
 800401a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	699b      	ldr	r3, [r3, #24]
 8004022:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004026:	2b00      	cmp	r3, #0
 8004028:	d003      	beq.n	8004032 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f000 f8c3 	bl	80041b6 <HAL_TIM_IC_CaptureCallback>
 8004030:	e005      	b.n	800403e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f000 f8b6 	bl	80041a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f000 f8c5 	bl	80041c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	691b      	ldr	r3, [r3, #16]
 800404a:	f003 0308 	and.w	r3, r3, #8
 800404e:	2b08      	cmp	r3, #8
 8004050:	d122      	bne.n	8004098 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	f003 0308 	and.w	r3, r3, #8
 800405c:	2b08      	cmp	r3, #8
 800405e:	d11b      	bne.n	8004098 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f06f 0208 	mvn.w	r2, #8
 8004068:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2204      	movs	r2, #4
 800406e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	69db      	ldr	r3, [r3, #28]
 8004076:	f003 0303 	and.w	r3, r3, #3
 800407a:	2b00      	cmp	r3, #0
 800407c:	d003      	beq.n	8004086 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f000 f899 	bl	80041b6 <HAL_TIM_IC_CaptureCallback>
 8004084:	e005      	b.n	8004092 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f000 f88c 	bl	80041a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	f000 f89b 	bl	80041c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2200      	movs	r2, #0
 8004096:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	691b      	ldr	r3, [r3, #16]
 800409e:	f003 0310 	and.w	r3, r3, #16
 80040a2:	2b10      	cmp	r3, #16
 80040a4:	d122      	bne.n	80040ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	f003 0310 	and.w	r3, r3, #16
 80040b0:	2b10      	cmp	r3, #16
 80040b2:	d11b      	bne.n	80040ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f06f 0210 	mvn.w	r2, #16
 80040bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2208      	movs	r2, #8
 80040c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	69db      	ldr	r3, [r3, #28]
 80040ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d003      	beq.n	80040da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f000 f86f 	bl	80041b6 <HAL_TIM_IC_CaptureCallback>
 80040d8:	e005      	b.n	80040e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f000 f862 	bl	80041a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	f000 f871 	bl	80041c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2200      	movs	r2, #0
 80040ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	691b      	ldr	r3, [r3, #16]
 80040f2:	f003 0301 	and.w	r3, r3, #1
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d10e      	bne.n	8004118 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	f003 0301 	and.w	r3, r3, #1
 8004104:	2b01      	cmp	r3, #1
 8004106:	d107      	bne.n	8004118 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f06f 0201 	mvn.w	r2, #1
 8004110:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f7fc fb6e 	bl	80007f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	691b      	ldr	r3, [r3, #16]
 800411e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004122:	2b80      	cmp	r3, #128	; 0x80
 8004124:	d10e      	bne.n	8004144 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004130:	2b80      	cmp	r3, #128	; 0x80
 8004132:	d107      	bne.n	8004144 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800413c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f000 f8fb 	bl	800433a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	691b      	ldr	r3, [r3, #16]
 800414a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800414e:	2b40      	cmp	r3, #64	; 0x40
 8004150:	d10e      	bne.n	8004170 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800415c:	2b40      	cmp	r3, #64	; 0x40
 800415e:	d107      	bne.n	8004170 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004168:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f000 f835 	bl	80041da <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	691b      	ldr	r3, [r3, #16]
 8004176:	f003 0320 	and.w	r3, r3, #32
 800417a:	2b20      	cmp	r3, #32
 800417c:	d10e      	bne.n	800419c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	68db      	ldr	r3, [r3, #12]
 8004184:	f003 0320 	and.w	r3, r3, #32
 8004188:	2b20      	cmp	r3, #32
 800418a:	d107      	bne.n	800419c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f06f 0220 	mvn.w	r2, #32
 8004194:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f000 f8c6 	bl	8004328 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800419c:	bf00      	nop
 800419e:	3708      	adds	r7, #8
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}

080041a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b083      	sub	sp, #12
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80041ac:	bf00      	nop
 80041ae:	370c      	adds	r7, #12
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bc80      	pop	{r7}
 80041b4:	4770      	bx	lr

080041b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80041b6:	b480      	push	{r7}
 80041b8:	b083      	sub	sp, #12
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80041be:	bf00      	nop
 80041c0:	370c      	adds	r7, #12
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bc80      	pop	{r7}
 80041c6:	4770      	bx	lr

080041c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80041d0:	bf00      	nop
 80041d2:	370c      	adds	r7, #12
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bc80      	pop	{r7}
 80041d8:	4770      	bx	lr

080041da <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80041da:	b480      	push	{r7}
 80041dc:	b083      	sub	sp, #12
 80041de:	af00      	add	r7, sp, #0
 80041e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80041e2:	bf00      	nop
 80041e4:	370c      	adds	r7, #12
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bc80      	pop	{r7}
 80041ea:	4770      	bx	lr

080041ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b085      	sub	sp, #20
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	4a3f      	ldr	r2, [pc, #252]	; (80042fc <TIM_Base_SetConfig+0x110>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d013      	beq.n	800422c <TIM_Base_SetConfig+0x40>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800420a:	d00f      	beq.n	800422c <TIM_Base_SetConfig+0x40>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	4a3c      	ldr	r2, [pc, #240]	; (8004300 <TIM_Base_SetConfig+0x114>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d00b      	beq.n	800422c <TIM_Base_SetConfig+0x40>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	4a3b      	ldr	r2, [pc, #236]	; (8004304 <TIM_Base_SetConfig+0x118>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d007      	beq.n	800422c <TIM_Base_SetConfig+0x40>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	4a3a      	ldr	r2, [pc, #232]	; (8004308 <TIM_Base_SetConfig+0x11c>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d003      	beq.n	800422c <TIM_Base_SetConfig+0x40>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	4a39      	ldr	r2, [pc, #228]	; (800430c <TIM_Base_SetConfig+0x120>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d108      	bne.n	800423e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004232:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	68fa      	ldr	r2, [r7, #12]
 800423a:	4313      	orrs	r3, r2
 800423c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4a2e      	ldr	r2, [pc, #184]	; (80042fc <TIM_Base_SetConfig+0x110>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d02b      	beq.n	800429e <TIM_Base_SetConfig+0xb2>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800424c:	d027      	beq.n	800429e <TIM_Base_SetConfig+0xb2>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4a2b      	ldr	r2, [pc, #172]	; (8004300 <TIM_Base_SetConfig+0x114>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d023      	beq.n	800429e <TIM_Base_SetConfig+0xb2>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4a2a      	ldr	r2, [pc, #168]	; (8004304 <TIM_Base_SetConfig+0x118>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d01f      	beq.n	800429e <TIM_Base_SetConfig+0xb2>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4a29      	ldr	r2, [pc, #164]	; (8004308 <TIM_Base_SetConfig+0x11c>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d01b      	beq.n	800429e <TIM_Base_SetConfig+0xb2>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4a28      	ldr	r2, [pc, #160]	; (800430c <TIM_Base_SetConfig+0x120>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d017      	beq.n	800429e <TIM_Base_SetConfig+0xb2>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	4a27      	ldr	r2, [pc, #156]	; (8004310 <TIM_Base_SetConfig+0x124>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d013      	beq.n	800429e <TIM_Base_SetConfig+0xb2>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	4a26      	ldr	r2, [pc, #152]	; (8004314 <TIM_Base_SetConfig+0x128>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d00f      	beq.n	800429e <TIM_Base_SetConfig+0xb2>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4a25      	ldr	r2, [pc, #148]	; (8004318 <TIM_Base_SetConfig+0x12c>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d00b      	beq.n	800429e <TIM_Base_SetConfig+0xb2>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	4a24      	ldr	r2, [pc, #144]	; (800431c <TIM_Base_SetConfig+0x130>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d007      	beq.n	800429e <TIM_Base_SetConfig+0xb2>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4a23      	ldr	r2, [pc, #140]	; (8004320 <TIM_Base_SetConfig+0x134>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d003      	beq.n	800429e <TIM_Base_SetConfig+0xb2>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4a22      	ldr	r2, [pc, #136]	; (8004324 <TIM_Base_SetConfig+0x138>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d108      	bne.n	80042b0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	68fa      	ldr	r2, [r7, #12]
 80042ac:	4313      	orrs	r3, r2
 80042ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	695b      	ldr	r3, [r3, #20]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	68fa      	ldr	r2, [r7, #12]
 80042c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	689a      	ldr	r2, [r3, #8]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	4a09      	ldr	r2, [pc, #36]	; (80042fc <TIM_Base_SetConfig+0x110>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d003      	beq.n	80042e4 <TIM_Base_SetConfig+0xf8>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	4a0b      	ldr	r2, [pc, #44]	; (800430c <TIM_Base_SetConfig+0x120>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d103      	bne.n	80042ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	691a      	ldr	r2, [r3, #16]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	615a      	str	r2, [r3, #20]
}
 80042f2:	bf00      	nop
 80042f4:	3714      	adds	r7, #20
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bc80      	pop	{r7}
 80042fa:	4770      	bx	lr
 80042fc:	40010000 	.word	0x40010000
 8004300:	40000400 	.word	0x40000400
 8004304:	40000800 	.word	0x40000800
 8004308:	40000c00 	.word	0x40000c00
 800430c:	40010400 	.word	0x40010400
 8004310:	40014000 	.word	0x40014000
 8004314:	40014400 	.word	0x40014400
 8004318:	40014800 	.word	0x40014800
 800431c:	40001800 	.word	0x40001800
 8004320:	40001c00 	.word	0x40001c00
 8004324:	40002000 	.word	0x40002000

08004328 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004328:	b480      	push	{r7}
 800432a:	b083      	sub	sp, #12
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004330:	bf00      	nop
 8004332:	370c      	adds	r7, #12
 8004334:	46bd      	mov	sp, r7
 8004336:	bc80      	pop	{r7}
 8004338:	4770      	bx	lr

0800433a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800433a:	b480      	push	{r7}
 800433c:	b083      	sub	sp, #12
 800433e:	af00      	add	r7, sp, #0
 8004340:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004342:	bf00      	nop
 8004344:	370c      	adds	r7, #12
 8004346:	46bd      	mov	sp, r7
 8004348:	bc80      	pop	{r7}
 800434a:	4770      	bx	lr

0800434c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800434c:	b084      	sub	sp, #16
 800434e:	b580      	push	{r7, lr}
 8004350:	b084      	sub	sp, #16
 8004352:	af00      	add	r7, sp, #0
 8004354:	6078      	str	r0, [r7, #4]
 8004356:	f107 001c 	add.w	r0, r7, #28
 800435a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800435e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004360:	2b01      	cmp	r3, #1
 8004362:	d122      	bne.n	80043aa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004368:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004378:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800438c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800438e:	2b01      	cmp	r3, #1
 8004390:	d105      	bne.n	800439e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	68db      	ldr	r3, [r3, #12]
 8004396:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f001 fbd6 	bl	8005b50 <USB_CoreReset>
 80043a4:	4603      	mov	r3, r0
 80043a6:	73fb      	strb	r3, [r7, #15]
 80043a8:	e01a      	b.n	80043e0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f001 fbca 	bl	8005b50 <USB_CoreReset>
 80043bc:	4603      	mov	r3, r0
 80043be:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80043c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d106      	bne.n	80043d4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ca:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	639a      	str	r2, [r3, #56]	; 0x38
 80043d2:	e005      	b.n	80043e0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043d8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80043e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d10b      	bne.n	80043fe <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	f043 0206 	orr.w	r2, r3, #6
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	f043 0220 	orr.w	r2, r3, #32
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80043fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004400:	4618      	mov	r0, r3
 8004402:	3710      	adds	r7, #16
 8004404:	46bd      	mov	sp, r7
 8004406:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800440a:	b004      	add	sp, #16
 800440c:	4770      	bx	lr
	...

08004410 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004410:	b480      	push	{r7}
 8004412:	b087      	sub	sp, #28
 8004414:	af00      	add	r7, sp, #0
 8004416:	60f8      	str	r0, [r7, #12]
 8004418:	60b9      	str	r1, [r7, #8]
 800441a:	4613      	mov	r3, r2
 800441c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800441e:	79fb      	ldrb	r3, [r7, #7]
 8004420:	2b02      	cmp	r3, #2
 8004422:	d165      	bne.n	80044f0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	4a41      	ldr	r2, [pc, #260]	; (800452c <USB_SetTurnaroundTime+0x11c>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d906      	bls.n	800443a <USB_SetTurnaroundTime+0x2a>
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	4a40      	ldr	r2, [pc, #256]	; (8004530 <USB_SetTurnaroundTime+0x120>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d202      	bcs.n	800443a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004434:	230f      	movs	r3, #15
 8004436:	617b      	str	r3, [r7, #20]
 8004438:	e062      	b.n	8004500 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	4a3c      	ldr	r2, [pc, #240]	; (8004530 <USB_SetTurnaroundTime+0x120>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d306      	bcc.n	8004450 <USB_SetTurnaroundTime+0x40>
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	4a3b      	ldr	r2, [pc, #236]	; (8004534 <USB_SetTurnaroundTime+0x124>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d202      	bcs.n	8004450 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800444a:	230e      	movs	r3, #14
 800444c:	617b      	str	r3, [r7, #20]
 800444e:	e057      	b.n	8004500 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	4a38      	ldr	r2, [pc, #224]	; (8004534 <USB_SetTurnaroundTime+0x124>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d306      	bcc.n	8004466 <USB_SetTurnaroundTime+0x56>
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	4a37      	ldr	r2, [pc, #220]	; (8004538 <USB_SetTurnaroundTime+0x128>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d202      	bcs.n	8004466 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004460:	230d      	movs	r3, #13
 8004462:	617b      	str	r3, [r7, #20]
 8004464:	e04c      	b.n	8004500 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	4a33      	ldr	r2, [pc, #204]	; (8004538 <USB_SetTurnaroundTime+0x128>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d306      	bcc.n	800447c <USB_SetTurnaroundTime+0x6c>
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	4a32      	ldr	r2, [pc, #200]	; (800453c <USB_SetTurnaroundTime+0x12c>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d802      	bhi.n	800447c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004476:	230c      	movs	r3, #12
 8004478:	617b      	str	r3, [r7, #20]
 800447a:	e041      	b.n	8004500 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	4a2f      	ldr	r2, [pc, #188]	; (800453c <USB_SetTurnaroundTime+0x12c>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d906      	bls.n	8004492 <USB_SetTurnaroundTime+0x82>
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	4a2e      	ldr	r2, [pc, #184]	; (8004540 <USB_SetTurnaroundTime+0x130>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d802      	bhi.n	8004492 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800448c:	230b      	movs	r3, #11
 800448e:	617b      	str	r3, [r7, #20]
 8004490:	e036      	b.n	8004500 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	4a2a      	ldr	r2, [pc, #168]	; (8004540 <USB_SetTurnaroundTime+0x130>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d906      	bls.n	80044a8 <USB_SetTurnaroundTime+0x98>
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	4a29      	ldr	r2, [pc, #164]	; (8004544 <USB_SetTurnaroundTime+0x134>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d802      	bhi.n	80044a8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80044a2:	230a      	movs	r3, #10
 80044a4:	617b      	str	r3, [r7, #20]
 80044a6:	e02b      	b.n	8004500 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	4a26      	ldr	r2, [pc, #152]	; (8004544 <USB_SetTurnaroundTime+0x134>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d906      	bls.n	80044be <USB_SetTurnaroundTime+0xae>
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	4a25      	ldr	r2, [pc, #148]	; (8004548 <USB_SetTurnaroundTime+0x138>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d202      	bcs.n	80044be <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80044b8:	2309      	movs	r3, #9
 80044ba:	617b      	str	r3, [r7, #20]
 80044bc:	e020      	b.n	8004500 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	4a21      	ldr	r2, [pc, #132]	; (8004548 <USB_SetTurnaroundTime+0x138>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d306      	bcc.n	80044d4 <USB_SetTurnaroundTime+0xc4>
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	4a20      	ldr	r2, [pc, #128]	; (800454c <USB_SetTurnaroundTime+0x13c>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d802      	bhi.n	80044d4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80044ce:	2308      	movs	r3, #8
 80044d0:	617b      	str	r3, [r7, #20]
 80044d2:	e015      	b.n	8004500 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	4a1d      	ldr	r2, [pc, #116]	; (800454c <USB_SetTurnaroundTime+0x13c>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d906      	bls.n	80044ea <USB_SetTurnaroundTime+0xda>
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	4a1c      	ldr	r2, [pc, #112]	; (8004550 <USB_SetTurnaroundTime+0x140>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d202      	bcs.n	80044ea <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80044e4:	2307      	movs	r3, #7
 80044e6:	617b      	str	r3, [r7, #20]
 80044e8:	e00a      	b.n	8004500 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80044ea:	2306      	movs	r3, #6
 80044ec:	617b      	str	r3, [r7, #20]
 80044ee:	e007      	b.n	8004500 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80044f0:	79fb      	ldrb	r3, [r7, #7]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d102      	bne.n	80044fc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80044f6:	2309      	movs	r3, #9
 80044f8:	617b      	str	r3, [r7, #20]
 80044fa:	e001      	b.n	8004500 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80044fc:	2309      	movs	r3, #9
 80044fe:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	68da      	ldr	r2, [r3, #12]
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	029b      	lsls	r3, r3, #10
 8004514:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004518:	431a      	orrs	r2, r3
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800451e:	2300      	movs	r3, #0
}
 8004520:	4618      	mov	r0, r3
 8004522:	371c      	adds	r7, #28
 8004524:	46bd      	mov	sp, r7
 8004526:	bc80      	pop	{r7}
 8004528:	4770      	bx	lr
 800452a:	bf00      	nop
 800452c:	00d8acbf 	.word	0x00d8acbf
 8004530:	00e4e1c0 	.word	0x00e4e1c0
 8004534:	00f42400 	.word	0x00f42400
 8004538:	01067380 	.word	0x01067380
 800453c:	011a499f 	.word	0x011a499f
 8004540:	01312cff 	.word	0x01312cff
 8004544:	014ca43f 	.word	0x014ca43f
 8004548:	016e3600 	.word	0x016e3600
 800454c:	01a6ab1f 	.word	0x01a6ab1f
 8004550:	01e84800 	.word	0x01e84800

08004554 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004554:	b480      	push	{r7}
 8004556:	b083      	sub	sp, #12
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	f043 0201 	orr.w	r2, r3, #1
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004568:	2300      	movs	r3, #0
}
 800456a:	4618      	mov	r0, r3
 800456c:	370c      	adds	r7, #12
 800456e:	46bd      	mov	sp, r7
 8004570:	bc80      	pop	{r7}
 8004572:	4770      	bx	lr

08004574 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004574:	b480      	push	{r7}
 8004576:	b083      	sub	sp, #12
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	f023 0201 	bic.w	r2, r3, #1
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004588:	2300      	movs	r3, #0
}
 800458a:	4618      	mov	r0, r3
 800458c:	370c      	adds	r7, #12
 800458e:	46bd      	mov	sp, r7
 8004590:	bc80      	pop	{r7}
 8004592:	4770      	bx	lr

08004594 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b084      	sub	sp, #16
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	460b      	mov	r3, r1
 800459e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80045a0:	2300      	movs	r3, #0
 80045a2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80045b0:	78fb      	ldrb	r3, [r7, #3]
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d115      	bne.n	80045e2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	68db      	ldr	r3, [r3, #12]
 80045ba:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80045c2:	2001      	movs	r0, #1
 80045c4:	f7fc fbda 	bl	8000d7c <HAL_Delay>
      ms++;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	3301      	adds	r3, #1
 80045cc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f001 fa33 	bl	8005a3a <USB_GetMode>
 80045d4:	4603      	mov	r3, r0
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d01e      	beq.n	8004618 <USB_SetCurrentMode+0x84>
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2b31      	cmp	r3, #49	; 0x31
 80045de:	d9f0      	bls.n	80045c2 <USB_SetCurrentMode+0x2e>
 80045e0:	e01a      	b.n	8004618 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80045e2:	78fb      	ldrb	r3, [r7, #3]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d115      	bne.n	8004614 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80045f4:	2001      	movs	r0, #1
 80045f6:	f7fc fbc1 	bl	8000d7c <HAL_Delay>
      ms++;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	3301      	adds	r3, #1
 80045fe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f001 fa1a 	bl	8005a3a <USB_GetMode>
 8004606:	4603      	mov	r3, r0
 8004608:	2b00      	cmp	r3, #0
 800460a:	d005      	beq.n	8004618 <USB_SetCurrentMode+0x84>
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2b31      	cmp	r3, #49	; 0x31
 8004610:	d9f0      	bls.n	80045f4 <USB_SetCurrentMode+0x60>
 8004612:	e001      	b.n	8004618 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	e005      	b.n	8004624 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2b32      	cmp	r3, #50	; 0x32
 800461c:	d101      	bne.n	8004622 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e000      	b.n	8004624 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004622:	2300      	movs	r3, #0
}
 8004624:	4618      	mov	r0, r3
 8004626:	3710      	adds	r7, #16
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}

0800462c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800462c:	b084      	sub	sp, #16
 800462e:	b580      	push	{r7, lr}
 8004630:	b086      	sub	sp, #24
 8004632:	af00      	add	r7, sp, #0
 8004634:	6078      	str	r0, [r7, #4]
 8004636:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800463a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800463e:	2300      	movs	r3, #0
 8004640:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004646:	2300      	movs	r3, #0
 8004648:	613b      	str	r3, [r7, #16]
 800464a:	e009      	b.n	8004660 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800464c:	687a      	ldr	r2, [r7, #4]
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	3340      	adds	r3, #64	; 0x40
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	4413      	add	r3, r2
 8004656:	2200      	movs	r2, #0
 8004658:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	3301      	adds	r3, #1
 800465e:	613b      	str	r3, [r7, #16]
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	2b0e      	cmp	r3, #14
 8004664:	d9f2      	bls.n	800464c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004666:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004668:	2b00      	cmp	r3, #0
 800466a:	d11c      	bne.n	80046a6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	68fa      	ldr	r2, [r7, #12]
 8004676:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800467a:	f043 0302 	orr.w	r3, r3, #2
 800467e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004684:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004690:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800469c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	639a      	str	r2, [r3, #56]	; 0x38
 80046a4:	e00b      	b.n	80046be <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046aa:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80046c4:	461a      	mov	r2, r3
 80046c6:	2300      	movs	r3, #0
 80046c8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046d0:	4619      	mov	r1, r3
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046d8:	461a      	mov	r2, r3
 80046da:	680b      	ldr	r3, [r1, #0]
 80046dc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80046de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d10c      	bne.n	80046fe <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80046e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d104      	bne.n	80046f4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80046ea:	2100      	movs	r1, #0
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f000 f965 	bl	80049bc <USB_SetDevSpeed>
 80046f2:	e008      	b.n	8004706 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80046f4:	2101      	movs	r1, #1
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f000 f960 	bl	80049bc <USB_SetDevSpeed>
 80046fc:	e003      	b.n	8004706 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80046fe:	2103      	movs	r1, #3
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	f000 f95b 	bl	80049bc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004706:	2110      	movs	r1, #16
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f000 f8f3 	bl	80048f4 <USB_FlushTxFifo>
 800470e:	4603      	mov	r3, r0
 8004710:	2b00      	cmp	r3, #0
 8004712:	d001      	beq.n	8004718 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	f000 f91f 	bl	800495c <USB_FlushRxFifo>
 800471e:	4603      	mov	r3, r0
 8004720:	2b00      	cmp	r3, #0
 8004722:	d001      	beq.n	8004728 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800472e:	461a      	mov	r2, r3
 8004730:	2300      	movs	r3, #0
 8004732:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800473a:	461a      	mov	r2, r3
 800473c:	2300      	movs	r3, #0
 800473e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004746:	461a      	mov	r2, r3
 8004748:	2300      	movs	r3, #0
 800474a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800474c:	2300      	movs	r3, #0
 800474e:	613b      	str	r3, [r7, #16]
 8004750:	e043      	b.n	80047da <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	015a      	lsls	r2, r3, #5
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	4413      	add	r3, r2
 800475a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004764:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004768:	d118      	bne.n	800479c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d10a      	bne.n	8004786 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	015a      	lsls	r2, r3, #5
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	4413      	add	r3, r2
 8004778:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800477c:	461a      	mov	r2, r3
 800477e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004782:	6013      	str	r3, [r2, #0]
 8004784:	e013      	b.n	80047ae <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	015a      	lsls	r2, r3, #5
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	4413      	add	r3, r2
 800478e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004792:	461a      	mov	r2, r3
 8004794:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004798:	6013      	str	r3, [r2, #0]
 800479a:	e008      	b.n	80047ae <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	015a      	lsls	r2, r3, #5
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	4413      	add	r3, r2
 80047a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047a8:	461a      	mov	r2, r3
 80047aa:	2300      	movs	r3, #0
 80047ac:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	015a      	lsls	r2, r3, #5
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	4413      	add	r3, r2
 80047b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047ba:	461a      	mov	r2, r3
 80047bc:	2300      	movs	r3, #0
 80047be:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	015a      	lsls	r2, r3, #5
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	4413      	add	r3, r2
 80047c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047cc:	461a      	mov	r2, r3
 80047ce:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80047d2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	3301      	adds	r3, #1
 80047d8:	613b      	str	r3, [r7, #16]
 80047da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047dc:	693a      	ldr	r2, [r7, #16]
 80047de:	429a      	cmp	r2, r3
 80047e0:	d3b7      	bcc.n	8004752 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80047e2:	2300      	movs	r3, #0
 80047e4:	613b      	str	r3, [r7, #16]
 80047e6:	e043      	b.n	8004870 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	015a      	lsls	r2, r3, #5
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	4413      	add	r3, r2
 80047f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80047fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80047fe:	d118      	bne.n	8004832 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d10a      	bne.n	800481c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	015a      	lsls	r2, r3, #5
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	4413      	add	r3, r2
 800480e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004812:	461a      	mov	r2, r3
 8004814:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004818:	6013      	str	r3, [r2, #0]
 800481a:	e013      	b.n	8004844 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	015a      	lsls	r2, r3, #5
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	4413      	add	r3, r2
 8004824:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004828:	461a      	mov	r2, r3
 800482a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800482e:	6013      	str	r3, [r2, #0]
 8004830:	e008      	b.n	8004844 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	015a      	lsls	r2, r3, #5
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	4413      	add	r3, r2
 800483a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800483e:	461a      	mov	r2, r3
 8004840:	2300      	movs	r3, #0
 8004842:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	015a      	lsls	r2, r3, #5
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	4413      	add	r3, r2
 800484c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004850:	461a      	mov	r2, r3
 8004852:	2300      	movs	r3, #0
 8004854:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	015a      	lsls	r2, r3, #5
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	4413      	add	r3, r2
 800485e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004862:	461a      	mov	r2, r3
 8004864:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004868:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	3301      	adds	r3, #1
 800486e:	613b      	str	r3, [r7, #16]
 8004870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004872:	693a      	ldr	r2, [r7, #16]
 8004874:	429a      	cmp	r2, r3
 8004876:	d3b7      	bcc.n	80047e8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800487e:	691b      	ldr	r3, [r3, #16]
 8004880:	68fa      	ldr	r2, [r7, #12]
 8004882:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004886:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800488a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2200      	movs	r2, #0
 8004890:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004898:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800489a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800489c:	2b00      	cmp	r3, #0
 800489e:	d105      	bne.n	80048ac <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	699b      	ldr	r3, [r3, #24]
 80048a4:	f043 0210 	orr.w	r2, r3, #16
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	699a      	ldr	r2, [r3, #24]
 80048b0:	4b0f      	ldr	r3, [pc, #60]	; (80048f0 <USB_DevInit+0x2c4>)
 80048b2:	4313      	orrs	r3, r2
 80048b4:	687a      	ldr	r2, [r7, #4]
 80048b6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80048b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d005      	beq.n	80048ca <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	699b      	ldr	r3, [r3, #24]
 80048c2:	f043 0208 	orr.w	r2, r3, #8
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80048ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d107      	bne.n	80048e0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	699b      	ldr	r3, [r3, #24]
 80048d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80048d8:	f043 0304 	orr.w	r3, r3, #4
 80048dc:	687a      	ldr	r2, [r7, #4]
 80048de:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80048e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	3718      	adds	r7, #24
 80048e6:	46bd      	mov	sp, r7
 80048e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80048ec:	b004      	add	sp, #16
 80048ee:	4770      	bx	lr
 80048f0:	803c3800 	.word	0x803c3800

080048f4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b085      	sub	sp, #20
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80048fe:	2300      	movs	r3, #0
 8004900:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	3301      	adds	r3, #1
 8004906:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	4a13      	ldr	r2, [pc, #76]	; (8004958 <USB_FlushTxFifo+0x64>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d901      	bls.n	8004914 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004910:	2303      	movs	r3, #3
 8004912:	e01b      	b.n	800494c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	691b      	ldr	r3, [r3, #16]
 8004918:	2b00      	cmp	r3, #0
 800491a:	daf2      	bge.n	8004902 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800491c:	2300      	movs	r3, #0
 800491e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	019b      	lsls	r3, r3, #6
 8004924:	f043 0220 	orr.w	r2, r3, #32
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	3301      	adds	r3, #1
 8004930:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	4a08      	ldr	r2, [pc, #32]	; (8004958 <USB_FlushTxFifo+0x64>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d901      	bls.n	800493e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800493a:	2303      	movs	r3, #3
 800493c:	e006      	b.n	800494c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	691b      	ldr	r3, [r3, #16]
 8004942:	f003 0320 	and.w	r3, r3, #32
 8004946:	2b20      	cmp	r3, #32
 8004948:	d0f0      	beq.n	800492c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800494a:	2300      	movs	r3, #0
}
 800494c:	4618      	mov	r0, r3
 800494e:	3714      	adds	r7, #20
 8004950:	46bd      	mov	sp, r7
 8004952:	bc80      	pop	{r7}
 8004954:	4770      	bx	lr
 8004956:	bf00      	nop
 8004958:	00030d40 	.word	0x00030d40

0800495c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800495c:	b480      	push	{r7}
 800495e:	b085      	sub	sp, #20
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004964:	2300      	movs	r3, #0
 8004966:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	3301      	adds	r3, #1
 800496c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	4a11      	ldr	r2, [pc, #68]	; (80049b8 <USB_FlushRxFifo+0x5c>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d901      	bls.n	800497a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004976:	2303      	movs	r3, #3
 8004978:	e018      	b.n	80049ac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	691b      	ldr	r3, [r3, #16]
 800497e:	2b00      	cmp	r3, #0
 8004980:	daf2      	bge.n	8004968 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004982:	2300      	movs	r3, #0
 8004984:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2210      	movs	r2, #16
 800498a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	3301      	adds	r3, #1
 8004990:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	4a08      	ldr	r2, [pc, #32]	; (80049b8 <USB_FlushRxFifo+0x5c>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d901      	bls.n	800499e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800499a:	2303      	movs	r3, #3
 800499c:	e006      	b.n	80049ac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	691b      	ldr	r3, [r3, #16]
 80049a2:	f003 0310 	and.w	r3, r3, #16
 80049a6:	2b10      	cmp	r3, #16
 80049a8:	d0f0      	beq.n	800498c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80049aa:	2300      	movs	r3, #0
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	3714      	adds	r7, #20
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bc80      	pop	{r7}
 80049b4:	4770      	bx	lr
 80049b6:	bf00      	nop
 80049b8:	00030d40 	.word	0x00030d40

080049bc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80049bc:	b480      	push	{r7}
 80049be:	b085      	sub	sp, #20
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
 80049c4:	460b      	mov	r3, r1
 80049c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	78fb      	ldrb	r3, [r7, #3]
 80049d6:	68f9      	ldr	r1, [r7, #12]
 80049d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80049dc:	4313      	orrs	r3, r2
 80049de:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80049e0:	2300      	movs	r3, #0
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3714      	adds	r7, #20
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bc80      	pop	{r7}
 80049ea:	4770      	bx	lr

080049ec <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b087      	sub	sp, #28
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	f003 0306 	and.w	r3, r3, #6
 8004a04:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d102      	bne.n	8004a12 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	75fb      	strb	r3, [r7, #23]
 8004a10:	e00a      	b.n	8004a28 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2b02      	cmp	r3, #2
 8004a16:	d002      	beq.n	8004a1e <USB_GetDevSpeed+0x32>
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2b06      	cmp	r3, #6
 8004a1c:	d102      	bne.n	8004a24 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004a1e:	2302      	movs	r3, #2
 8004a20:	75fb      	strb	r3, [r7, #23]
 8004a22:	e001      	b.n	8004a28 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004a24:	230f      	movs	r3, #15
 8004a26:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004a28:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	371c      	adds	r7, #28
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bc80      	pop	{r7}
 8004a32:	4770      	bx	lr

08004a34 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b085      	sub	sp, #20
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
 8004a3c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	781b      	ldrb	r3, [r3, #0]
 8004a46:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	785b      	ldrb	r3, [r3, #1]
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d13a      	bne.n	8004ac6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a56:	69da      	ldr	r2, [r3, #28]
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	781b      	ldrb	r3, [r3, #0]
 8004a5c:	f003 030f 	and.w	r3, r3, #15
 8004a60:	2101      	movs	r1, #1
 8004a62:	fa01 f303 	lsl.w	r3, r1, r3
 8004a66:	b29b      	uxth	r3, r3
 8004a68:	68f9      	ldr	r1, [r7, #12]
 8004a6a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	015a      	lsls	r2, r3, #5
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	4413      	add	r3, r2
 8004a7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d155      	bne.n	8004b34 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	015a      	lsls	r2, r3, #5
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	4413      	add	r3, r2
 8004a90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	791b      	ldrb	r3, [r3, #4]
 8004aa2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004aa4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	059b      	lsls	r3, r3, #22
 8004aaa:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004aac:	4313      	orrs	r3, r2
 8004aae:	68ba      	ldr	r2, [r7, #8]
 8004ab0:	0151      	lsls	r1, r2, #5
 8004ab2:	68fa      	ldr	r2, [r7, #12]
 8004ab4:	440a      	add	r2, r1
 8004ab6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004aba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004abe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ac2:	6013      	str	r3, [r2, #0]
 8004ac4:	e036      	b.n	8004b34 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004acc:	69da      	ldr	r2, [r3, #28]
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	781b      	ldrb	r3, [r3, #0]
 8004ad2:	f003 030f 	and.w	r3, r3, #15
 8004ad6:	2101      	movs	r1, #1
 8004ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8004adc:	041b      	lsls	r3, r3, #16
 8004ade:	68f9      	ldr	r1, [r7, #12]
 8004ae0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	015a      	lsls	r2, r3, #5
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	4413      	add	r3, r2
 8004af0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d11a      	bne.n	8004b34 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	015a      	lsls	r2, r3, #5
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	4413      	add	r3, r2
 8004b06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	791b      	ldrb	r3, [r3, #4]
 8004b18:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004b1a:	430b      	orrs	r3, r1
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	68ba      	ldr	r2, [r7, #8]
 8004b20:	0151      	lsls	r1, r2, #5
 8004b22:	68fa      	ldr	r2, [r7, #12]
 8004b24:	440a      	add	r2, r1
 8004b26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b32:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004b34:	2300      	movs	r3, #0
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3714      	adds	r7, #20
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bc80      	pop	{r7}
 8004b3e:	4770      	bx	lr

08004b40 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b085      	sub	sp, #20
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	781b      	ldrb	r3, [r3, #0]
 8004b52:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	785b      	ldrb	r3, [r3, #1]
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d161      	bne.n	8004c20 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	015a      	lsls	r2, r3, #5
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	4413      	add	r3, r2
 8004b64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b72:	d11f      	bne.n	8004bb4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	015a      	lsls	r2, r3, #5
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	4413      	add	r3, r2
 8004b7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	68ba      	ldr	r2, [r7, #8]
 8004b84:	0151      	lsls	r1, r2, #5
 8004b86:	68fa      	ldr	r2, [r7, #12]
 8004b88:	440a      	add	r2, r1
 8004b8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b8e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004b92:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	015a      	lsls	r2, r3, #5
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	4413      	add	r3, r2
 8004b9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	68ba      	ldr	r2, [r7, #8]
 8004ba4:	0151      	lsls	r1, r2, #5
 8004ba6:	68fa      	ldr	r2, [r7, #12]
 8004ba8:	440a      	add	r2, r1
 8004baa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004bb2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	781b      	ldrb	r3, [r3, #0]
 8004bc0:	f003 030f 	and.w	r3, r3, #15
 8004bc4:	2101      	movs	r1, #1
 8004bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	43db      	mvns	r3, r3
 8004bce:	68f9      	ldr	r1, [r7, #12]
 8004bd0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bde:	69da      	ldr	r2, [r3, #28]
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	781b      	ldrb	r3, [r3, #0]
 8004be4:	f003 030f 	and.w	r3, r3, #15
 8004be8:	2101      	movs	r1, #1
 8004bea:	fa01 f303 	lsl.w	r3, r1, r3
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	43db      	mvns	r3, r3
 8004bf2:	68f9      	ldr	r1, [r7, #12]
 8004bf4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004bf8:	4013      	ands	r3, r2
 8004bfa:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	015a      	lsls	r2, r3, #5
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	4413      	add	r3, r2
 8004c04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	0159      	lsls	r1, r3, #5
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	440b      	add	r3, r1
 8004c12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c16:	4619      	mov	r1, r3
 8004c18:	4b35      	ldr	r3, [pc, #212]	; (8004cf0 <USB_DeactivateEndpoint+0x1b0>)
 8004c1a:	4013      	ands	r3, r2
 8004c1c:	600b      	str	r3, [r1, #0]
 8004c1e:	e060      	b.n	8004ce2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	015a      	lsls	r2, r3, #5
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	4413      	add	r3, r2
 8004c28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c36:	d11f      	bne.n	8004c78 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	015a      	lsls	r2, r3, #5
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	4413      	add	r3, r2
 8004c40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	68ba      	ldr	r2, [r7, #8]
 8004c48:	0151      	lsls	r1, r2, #5
 8004c4a:	68fa      	ldr	r2, [r7, #12]
 8004c4c:	440a      	add	r2, r1
 8004c4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c52:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004c56:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	015a      	lsls	r2, r3, #5
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	4413      	add	r3, r2
 8004c60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	68ba      	ldr	r2, [r7, #8]
 8004c68:	0151      	lsls	r1, r2, #5
 8004c6a:	68fa      	ldr	r2, [r7, #12]
 8004c6c:	440a      	add	r2, r1
 8004c6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c72:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c76:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	781b      	ldrb	r3, [r3, #0]
 8004c84:	f003 030f 	and.w	r3, r3, #15
 8004c88:	2101      	movs	r1, #1
 8004c8a:	fa01 f303 	lsl.w	r3, r1, r3
 8004c8e:	041b      	lsls	r3, r3, #16
 8004c90:	43db      	mvns	r3, r3
 8004c92:	68f9      	ldr	r1, [r7, #12]
 8004c94:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c98:	4013      	ands	r3, r2
 8004c9a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ca2:	69da      	ldr	r2, [r3, #28]
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	781b      	ldrb	r3, [r3, #0]
 8004ca8:	f003 030f 	and.w	r3, r3, #15
 8004cac:	2101      	movs	r1, #1
 8004cae:	fa01 f303 	lsl.w	r3, r1, r3
 8004cb2:	041b      	lsls	r3, r3, #16
 8004cb4:	43db      	mvns	r3, r3
 8004cb6:	68f9      	ldr	r1, [r7, #12]
 8004cb8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	015a      	lsls	r2, r3, #5
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	4413      	add	r3, r2
 8004cc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	0159      	lsls	r1, r3, #5
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	440b      	add	r3, r1
 8004cd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cda:	4619      	mov	r1, r3
 8004cdc:	4b05      	ldr	r3, [pc, #20]	; (8004cf4 <USB_DeactivateEndpoint+0x1b4>)
 8004cde:	4013      	ands	r3, r2
 8004ce0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004ce2:	2300      	movs	r3, #0
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3714      	adds	r7, #20
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bc80      	pop	{r7}
 8004cec:	4770      	bx	lr
 8004cee:	bf00      	nop
 8004cf0:	ec337800 	.word	0xec337800
 8004cf4:	eff37800 	.word	0xeff37800

08004cf8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b08a      	sub	sp, #40	; 0x28
 8004cfc:	af02      	add	r7, sp, #8
 8004cfe:	60f8      	str	r0, [r7, #12]
 8004d00:	60b9      	str	r1, [r7, #8]
 8004d02:	4613      	mov	r3, r2
 8004d04:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	781b      	ldrb	r3, [r3, #0]
 8004d0e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	785b      	ldrb	r3, [r3, #1]
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	f040 815c 	bne.w	8004fd2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	699b      	ldr	r3, [r3, #24]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d132      	bne.n	8004d88 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004d22:	69bb      	ldr	r3, [r7, #24]
 8004d24:	015a      	lsls	r2, r3, #5
 8004d26:	69fb      	ldr	r3, [r7, #28]
 8004d28:	4413      	add	r3, r2
 8004d2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d2e:	691b      	ldr	r3, [r3, #16]
 8004d30:	69ba      	ldr	r2, [r7, #24]
 8004d32:	0151      	lsls	r1, r2, #5
 8004d34:	69fa      	ldr	r2, [r7, #28]
 8004d36:	440a      	add	r2, r1
 8004d38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d3c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004d40:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004d44:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004d46:	69bb      	ldr	r3, [r7, #24]
 8004d48:	015a      	lsls	r2, r3, #5
 8004d4a:	69fb      	ldr	r3, [r7, #28]
 8004d4c:	4413      	add	r3, r2
 8004d4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d52:	691b      	ldr	r3, [r3, #16]
 8004d54:	69ba      	ldr	r2, [r7, #24]
 8004d56:	0151      	lsls	r1, r2, #5
 8004d58:	69fa      	ldr	r2, [r7, #28]
 8004d5a:	440a      	add	r2, r1
 8004d5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d60:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d64:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004d66:	69bb      	ldr	r3, [r7, #24]
 8004d68:	015a      	lsls	r2, r3, #5
 8004d6a:	69fb      	ldr	r3, [r7, #28]
 8004d6c:	4413      	add	r3, r2
 8004d6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d72:	691b      	ldr	r3, [r3, #16]
 8004d74:	69ba      	ldr	r2, [r7, #24]
 8004d76:	0151      	lsls	r1, r2, #5
 8004d78:	69fa      	ldr	r2, [r7, #28]
 8004d7a:	440a      	add	r2, r1
 8004d7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d80:	0cdb      	lsrs	r3, r3, #19
 8004d82:	04db      	lsls	r3, r3, #19
 8004d84:	6113      	str	r3, [r2, #16]
 8004d86:	e074      	b.n	8004e72 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004d88:	69bb      	ldr	r3, [r7, #24]
 8004d8a:	015a      	lsls	r2, r3, #5
 8004d8c:	69fb      	ldr	r3, [r7, #28]
 8004d8e:	4413      	add	r3, r2
 8004d90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d94:	691b      	ldr	r3, [r3, #16]
 8004d96:	69ba      	ldr	r2, [r7, #24]
 8004d98:	0151      	lsls	r1, r2, #5
 8004d9a:	69fa      	ldr	r2, [r7, #28]
 8004d9c:	440a      	add	r2, r1
 8004d9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004da2:	0cdb      	lsrs	r3, r3, #19
 8004da4:	04db      	lsls	r3, r3, #19
 8004da6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004da8:	69bb      	ldr	r3, [r7, #24]
 8004daa:	015a      	lsls	r2, r3, #5
 8004dac:	69fb      	ldr	r3, [r7, #28]
 8004dae:	4413      	add	r3, r2
 8004db0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004db4:	691b      	ldr	r3, [r3, #16]
 8004db6:	69ba      	ldr	r2, [r7, #24]
 8004db8:	0151      	lsls	r1, r2, #5
 8004dba:	69fa      	ldr	r2, [r7, #28]
 8004dbc:	440a      	add	r2, r1
 8004dbe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dc2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004dc6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004dca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004dcc:	69bb      	ldr	r3, [r7, #24]
 8004dce:	015a      	lsls	r2, r3, #5
 8004dd0:	69fb      	ldr	r3, [r7, #28]
 8004dd2:	4413      	add	r3, r2
 8004dd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dd8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	6999      	ldr	r1, [r3, #24]
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	440b      	add	r3, r1
 8004de4:	1e59      	subs	r1, r3, #1
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	fbb1 f3f3 	udiv	r3, r1, r3
 8004dee:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004df0:	4b9d      	ldr	r3, [pc, #628]	; (8005068 <USB_EPStartXfer+0x370>)
 8004df2:	400b      	ands	r3, r1
 8004df4:	69b9      	ldr	r1, [r7, #24]
 8004df6:	0148      	lsls	r0, r1, #5
 8004df8:	69f9      	ldr	r1, [r7, #28]
 8004dfa:	4401      	add	r1, r0
 8004dfc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004e00:	4313      	orrs	r3, r2
 8004e02:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004e04:	69bb      	ldr	r3, [r7, #24]
 8004e06:	015a      	lsls	r2, r3, #5
 8004e08:	69fb      	ldr	r3, [r7, #28]
 8004e0a:	4413      	add	r3, r2
 8004e0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e10:	691a      	ldr	r2, [r3, #16]
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	699b      	ldr	r3, [r3, #24]
 8004e16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e1a:	69b9      	ldr	r1, [r7, #24]
 8004e1c:	0148      	lsls	r0, r1, #5
 8004e1e:	69f9      	ldr	r1, [r7, #28]
 8004e20:	4401      	add	r1, r0
 8004e22:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004e26:	4313      	orrs	r3, r2
 8004e28:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	791b      	ldrb	r3, [r3, #4]
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d11f      	bne.n	8004e72 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004e32:	69bb      	ldr	r3, [r7, #24]
 8004e34:	015a      	lsls	r2, r3, #5
 8004e36:	69fb      	ldr	r3, [r7, #28]
 8004e38:	4413      	add	r3, r2
 8004e3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e3e:	691b      	ldr	r3, [r3, #16]
 8004e40:	69ba      	ldr	r2, [r7, #24]
 8004e42:	0151      	lsls	r1, r2, #5
 8004e44:	69fa      	ldr	r2, [r7, #28]
 8004e46:	440a      	add	r2, r1
 8004e48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e4c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004e50:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004e52:	69bb      	ldr	r3, [r7, #24]
 8004e54:	015a      	lsls	r2, r3, #5
 8004e56:	69fb      	ldr	r3, [r7, #28]
 8004e58:	4413      	add	r3, r2
 8004e5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e5e:	691b      	ldr	r3, [r3, #16]
 8004e60:	69ba      	ldr	r2, [r7, #24]
 8004e62:	0151      	lsls	r1, r2, #5
 8004e64:	69fa      	ldr	r2, [r7, #28]
 8004e66:	440a      	add	r2, r1
 8004e68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e6c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004e70:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004e72:	79fb      	ldrb	r3, [r7, #7]
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d14b      	bne.n	8004f10 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	695b      	ldr	r3, [r3, #20]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d009      	beq.n	8004e94 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004e80:	69bb      	ldr	r3, [r7, #24]
 8004e82:	015a      	lsls	r2, r3, #5
 8004e84:	69fb      	ldr	r3, [r7, #28]
 8004e86:	4413      	add	r3, r2
 8004e88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e8c:	461a      	mov	r2, r3
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	695b      	ldr	r3, [r3, #20]
 8004e92:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	791b      	ldrb	r3, [r3, #4]
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d128      	bne.n	8004eee <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004e9c:	69fb      	ldr	r3, [r7, #28]
 8004e9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d110      	bne.n	8004ece <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004eac:	69bb      	ldr	r3, [r7, #24]
 8004eae:	015a      	lsls	r2, r3, #5
 8004eb0:	69fb      	ldr	r3, [r7, #28]
 8004eb2:	4413      	add	r3, r2
 8004eb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	69ba      	ldr	r2, [r7, #24]
 8004ebc:	0151      	lsls	r1, r2, #5
 8004ebe:	69fa      	ldr	r2, [r7, #28]
 8004ec0:	440a      	add	r2, r1
 8004ec2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ec6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004eca:	6013      	str	r3, [r2, #0]
 8004ecc:	e00f      	b.n	8004eee <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004ece:	69bb      	ldr	r3, [r7, #24]
 8004ed0:	015a      	lsls	r2, r3, #5
 8004ed2:	69fb      	ldr	r3, [r7, #28]
 8004ed4:	4413      	add	r3, r2
 8004ed6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	69ba      	ldr	r2, [r7, #24]
 8004ede:	0151      	lsls	r1, r2, #5
 8004ee0:	69fa      	ldr	r2, [r7, #28]
 8004ee2:	440a      	add	r2, r1
 8004ee4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ee8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004eec:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004eee:	69bb      	ldr	r3, [r7, #24]
 8004ef0:	015a      	lsls	r2, r3, #5
 8004ef2:	69fb      	ldr	r3, [r7, #28]
 8004ef4:	4413      	add	r3, r2
 8004ef6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	69ba      	ldr	r2, [r7, #24]
 8004efe:	0151      	lsls	r1, r2, #5
 8004f00:	69fa      	ldr	r2, [r7, #28]
 8004f02:	440a      	add	r2, r1
 8004f04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f08:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004f0c:	6013      	str	r3, [r2, #0]
 8004f0e:	e133      	b.n	8005178 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004f10:	69bb      	ldr	r3, [r7, #24]
 8004f12:	015a      	lsls	r2, r3, #5
 8004f14:	69fb      	ldr	r3, [r7, #28]
 8004f16:	4413      	add	r3, r2
 8004f18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	69ba      	ldr	r2, [r7, #24]
 8004f20:	0151      	lsls	r1, r2, #5
 8004f22:	69fa      	ldr	r2, [r7, #28]
 8004f24:	440a      	add	r2, r1
 8004f26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f2a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004f2e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	791b      	ldrb	r3, [r3, #4]
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d015      	beq.n	8004f64 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	699b      	ldr	r3, [r3, #24]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	f000 811b 	beq.w	8005178 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004f42:	69fb      	ldr	r3, [r7, #28]
 8004f44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	781b      	ldrb	r3, [r3, #0]
 8004f4e:	f003 030f 	and.w	r3, r3, #15
 8004f52:	2101      	movs	r1, #1
 8004f54:	fa01 f303 	lsl.w	r3, r1, r3
 8004f58:	69f9      	ldr	r1, [r7, #28]
 8004f5a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	634b      	str	r3, [r1, #52]	; 0x34
 8004f62:	e109      	b.n	8005178 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004f64:	69fb      	ldr	r3, [r7, #28]
 8004f66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d110      	bne.n	8004f96 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004f74:	69bb      	ldr	r3, [r7, #24]
 8004f76:	015a      	lsls	r2, r3, #5
 8004f78:	69fb      	ldr	r3, [r7, #28]
 8004f7a:	4413      	add	r3, r2
 8004f7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	69ba      	ldr	r2, [r7, #24]
 8004f84:	0151      	lsls	r1, r2, #5
 8004f86:	69fa      	ldr	r2, [r7, #28]
 8004f88:	440a      	add	r2, r1
 8004f8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f8e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004f92:	6013      	str	r3, [r2, #0]
 8004f94:	e00f      	b.n	8004fb6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004f96:	69bb      	ldr	r3, [r7, #24]
 8004f98:	015a      	lsls	r2, r3, #5
 8004f9a:	69fb      	ldr	r3, [r7, #28]
 8004f9c:	4413      	add	r3, r2
 8004f9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	69ba      	ldr	r2, [r7, #24]
 8004fa6:	0151      	lsls	r1, r2, #5
 8004fa8:	69fa      	ldr	r2, [r7, #28]
 8004faa:	440a      	add	r2, r1
 8004fac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fb4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	6919      	ldr	r1, [r3, #16]
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	781a      	ldrb	r2, [r3, #0]
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	699b      	ldr	r3, [r3, #24]
 8004fc2:	b298      	uxth	r0, r3
 8004fc4:	79fb      	ldrb	r3, [r7, #7]
 8004fc6:	9300      	str	r3, [sp, #0]
 8004fc8:	4603      	mov	r3, r0
 8004fca:	68f8      	ldr	r0, [r7, #12]
 8004fcc:	f000 fadc 	bl	8005588 <USB_WritePacket>
 8004fd0:	e0d2      	b.n	8005178 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004fd2:	69bb      	ldr	r3, [r7, #24]
 8004fd4:	015a      	lsls	r2, r3, #5
 8004fd6:	69fb      	ldr	r3, [r7, #28]
 8004fd8:	4413      	add	r3, r2
 8004fda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fde:	691b      	ldr	r3, [r3, #16]
 8004fe0:	69ba      	ldr	r2, [r7, #24]
 8004fe2:	0151      	lsls	r1, r2, #5
 8004fe4:	69fa      	ldr	r2, [r7, #28]
 8004fe6:	440a      	add	r2, r1
 8004fe8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fec:	0cdb      	lsrs	r3, r3, #19
 8004fee:	04db      	lsls	r3, r3, #19
 8004ff0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004ff2:	69bb      	ldr	r3, [r7, #24]
 8004ff4:	015a      	lsls	r2, r3, #5
 8004ff6:	69fb      	ldr	r3, [r7, #28]
 8004ff8:	4413      	add	r3, r2
 8004ffa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ffe:	691b      	ldr	r3, [r3, #16]
 8005000:	69ba      	ldr	r2, [r7, #24]
 8005002:	0151      	lsls	r1, r2, #5
 8005004:	69fa      	ldr	r2, [r7, #28]
 8005006:	440a      	add	r2, r1
 8005008:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800500c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005010:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005014:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	699b      	ldr	r3, [r3, #24]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d126      	bne.n	800506c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800501e:	69bb      	ldr	r3, [r7, #24]
 8005020:	015a      	lsls	r2, r3, #5
 8005022:	69fb      	ldr	r3, [r7, #28]
 8005024:	4413      	add	r3, r2
 8005026:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800502a:	691a      	ldr	r2, [r3, #16]
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	68db      	ldr	r3, [r3, #12]
 8005030:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005034:	69b9      	ldr	r1, [r7, #24]
 8005036:	0148      	lsls	r0, r1, #5
 8005038:	69f9      	ldr	r1, [r7, #28]
 800503a:	4401      	add	r1, r0
 800503c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005040:	4313      	orrs	r3, r2
 8005042:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005044:	69bb      	ldr	r3, [r7, #24]
 8005046:	015a      	lsls	r2, r3, #5
 8005048:	69fb      	ldr	r3, [r7, #28]
 800504a:	4413      	add	r3, r2
 800504c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005050:	691b      	ldr	r3, [r3, #16]
 8005052:	69ba      	ldr	r2, [r7, #24]
 8005054:	0151      	lsls	r1, r2, #5
 8005056:	69fa      	ldr	r2, [r7, #28]
 8005058:	440a      	add	r2, r1
 800505a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800505e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005062:	6113      	str	r3, [r2, #16]
 8005064:	e03a      	b.n	80050dc <USB_EPStartXfer+0x3e4>
 8005066:	bf00      	nop
 8005068:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	699a      	ldr	r2, [r3, #24]
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	68db      	ldr	r3, [r3, #12]
 8005074:	4413      	add	r3, r2
 8005076:	1e5a      	subs	r2, r3, #1
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	68db      	ldr	r3, [r3, #12]
 800507c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005080:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	68db      	ldr	r3, [r3, #12]
 8005086:	8afa      	ldrh	r2, [r7, #22]
 8005088:	fb03 f202 	mul.w	r2, r3, r2
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005090:	69bb      	ldr	r3, [r7, #24]
 8005092:	015a      	lsls	r2, r3, #5
 8005094:	69fb      	ldr	r3, [r7, #28]
 8005096:	4413      	add	r3, r2
 8005098:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800509c:	691a      	ldr	r2, [r3, #16]
 800509e:	8afb      	ldrh	r3, [r7, #22]
 80050a0:	04d9      	lsls	r1, r3, #19
 80050a2:	4b38      	ldr	r3, [pc, #224]	; (8005184 <USB_EPStartXfer+0x48c>)
 80050a4:	400b      	ands	r3, r1
 80050a6:	69b9      	ldr	r1, [r7, #24]
 80050a8:	0148      	lsls	r0, r1, #5
 80050aa:	69f9      	ldr	r1, [r7, #28]
 80050ac:	4401      	add	r1, r0
 80050ae:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80050b2:	4313      	orrs	r3, r2
 80050b4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80050b6:	69bb      	ldr	r3, [r7, #24]
 80050b8:	015a      	lsls	r2, r3, #5
 80050ba:	69fb      	ldr	r3, [r7, #28]
 80050bc:	4413      	add	r3, r2
 80050be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050c2:	691a      	ldr	r2, [r3, #16]
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	69db      	ldr	r3, [r3, #28]
 80050c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050cc:	69b9      	ldr	r1, [r7, #24]
 80050ce:	0148      	lsls	r0, r1, #5
 80050d0:	69f9      	ldr	r1, [r7, #28]
 80050d2:	4401      	add	r1, r0
 80050d4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80050d8:	4313      	orrs	r3, r2
 80050da:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80050dc:	79fb      	ldrb	r3, [r7, #7]
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d10d      	bne.n	80050fe <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	691b      	ldr	r3, [r3, #16]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d009      	beq.n	80050fe <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	6919      	ldr	r1, [r3, #16]
 80050ee:	69bb      	ldr	r3, [r7, #24]
 80050f0:	015a      	lsls	r2, r3, #5
 80050f2:	69fb      	ldr	r3, [r7, #28]
 80050f4:	4413      	add	r3, r2
 80050f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050fa:	460a      	mov	r2, r1
 80050fc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	791b      	ldrb	r3, [r3, #4]
 8005102:	2b01      	cmp	r3, #1
 8005104:	d128      	bne.n	8005158 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005106:	69fb      	ldr	r3, [r7, #28]
 8005108:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005112:	2b00      	cmp	r3, #0
 8005114:	d110      	bne.n	8005138 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005116:	69bb      	ldr	r3, [r7, #24]
 8005118:	015a      	lsls	r2, r3, #5
 800511a:	69fb      	ldr	r3, [r7, #28]
 800511c:	4413      	add	r3, r2
 800511e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	69ba      	ldr	r2, [r7, #24]
 8005126:	0151      	lsls	r1, r2, #5
 8005128:	69fa      	ldr	r2, [r7, #28]
 800512a:	440a      	add	r2, r1
 800512c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005130:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005134:	6013      	str	r3, [r2, #0]
 8005136:	e00f      	b.n	8005158 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005138:	69bb      	ldr	r3, [r7, #24]
 800513a:	015a      	lsls	r2, r3, #5
 800513c:	69fb      	ldr	r3, [r7, #28]
 800513e:	4413      	add	r3, r2
 8005140:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	69ba      	ldr	r2, [r7, #24]
 8005148:	0151      	lsls	r1, r2, #5
 800514a:	69fa      	ldr	r2, [r7, #28]
 800514c:	440a      	add	r2, r1
 800514e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005152:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005156:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005158:	69bb      	ldr	r3, [r7, #24]
 800515a:	015a      	lsls	r2, r3, #5
 800515c:	69fb      	ldr	r3, [r7, #28]
 800515e:	4413      	add	r3, r2
 8005160:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	69ba      	ldr	r2, [r7, #24]
 8005168:	0151      	lsls	r1, r2, #5
 800516a:	69fa      	ldr	r2, [r7, #28]
 800516c:	440a      	add	r2, r1
 800516e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005172:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005176:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005178:	2300      	movs	r3, #0
}
 800517a:	4618      	mov	r0, r3
 800517c:	3720      	adds	r7, #32
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}
 8005182:	bf00      	nop
 8005184:	1ff80000 	.word	0x1ff80000

08005188 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005188:	b480      	push	{r7}
 800518a:	b087      	sub	sp, #28
 800518c:	af00      	add	r7, sp, #0
 800518e:	60f8      	str	r0, [r7, #12]
 8005190:	60b9      	str	r1, [r7, #8]
 8005192:	4613      	mov	r3, r2
 8005194:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	781b      	ldrb	r3, [r3, #0]
 800519e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	785b      	ldrb	r3, [r3, #1]
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	f040 80ce 	bne.w	8005346 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	699b      	ldr	r3, [r3, #24]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d132      	bne.n	8005218 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	015a      	lsls	r2, r3, #5
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	4413      	add	r3, r2
 80051ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051be:	691b      	ldr	r3, [r3, #16]
 80051c0:	693a      	ldr	r2, [r7, #16]
 80051c2:	0151      	lsls	r1, r2, #5
 80051c4:	697a      	ldr	r2, [r7, #20]
 80051c6:	440a      	add	r2, r1
 80051c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051cc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80051d0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80051d4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	015a      	lsls	r2, r3, #5
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	4413      	add	r3, r2
 80051de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051e2:	691b      	ldr	r3, [r3, #16]
 80051e4:	693a      	ldr	r2, [r7, #16]
 80051e6:	0151      	lsls	r1, r2, #5
 80051e8:	697a      	ldr	r2, [r7, #20]
 80051ea:	440a      	add	r2, r1
 80051ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80051f4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	015a      	lsls	r2, r3, #5
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	4413      	add	r3, r2
 80051fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005202:	691b      	ldr	r3, [r3, #16]
 8005204:	693a      	ldr	r2, [r7, #16]
 8005206:	0151      	lsls	r1, r2, #5
 8005208:	697a      	ldr	r2, [r7, #20]
 800520a:	440a      	add	r2, r1
 800520c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005210:	0cdb      	lsrs	r3, r3, #19
 8005212:	04db      	lsls	r3, r3, #19
 8005214:	6113      	str	r3, [r2, #16]
 8005216:	e04e      	b.n	80052b6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	015a      	lsls	r2, r3, #5
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	4413      	add	r3, r2
 8005220:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005224:	691b      	ldr	r3, [r3, #16]
 8005226:	693a      	ldr	r2, [r7, #16]
 8005228:	0151      	lsls	r1, r2, #5
 800522a:	697a      	ldr	r2, [r7, #20]
 800522c:	440a      	add	r2, r1
 800522e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005232:	0cdb      	lsrs	r3, r3, #19
 8005234:	04db      	lsls	r3, r3, #19
 8005236:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	015a      	lsls	r2, r3, #5
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	4413      	add	r3, r2
 8005240:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005244:	691b      	ldr	r3, [r3, #16]
 8005246:	693a      	ldr	r2, [r7, #16]
 8005248:	0151      	lsls	r1, r2, #5
 800524a:	697a      	ldr	r2, [r7, #20]
 800524c:	440a      	add	r2, r1
 800524e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005252:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005256:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800525a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	699a      	ldr	r2, [r3, #24]
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	68db      	ldr	r3, [r3, #12]
 8005264:	429a      	cmp	r2, r3
 8005266:	d903      	bls.n	8005270 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	68da      	ldr	r2, [r3, #12]
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	015a      	lsls	r2, r3, #5
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	4413      	add	r3, r2
 8005278:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800527c:	691b      	ldr	r3, [r3, #16]
 800527e:	693a      	ldr	r2, [r7, #16]
 8005280:	0151      	lsls	r1, r2, #5
 8005282:	697a      	ldr	r2, [r7, #20]
 8005284:	440a      	add	r2, r1
 8005286:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800528a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800528e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	015a      	lsls	r2, r3, #5
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	4413      	add	r3, r2
 8005298:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800529c:	691a      	ldr	r2, [r3, #16]
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	699b      	ldr	r3, [r3, #24]
 80052a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052a6:	6939      	ldr	r1, [r7, #16]
 80052a8:	0148      	lsls	r0, r1, #5
 80052aa:	6979      	ldr	r1, [r7, #20]
 80052ac:	4401      	add	r1, r0
 80052ae:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80052b2:	4313      	orrs	r3, r2
 80052b4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80052b6:	79fb      	ldrb	r3, [r7, #7]
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	d11e      	bne.n	80052fa <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	695b      	ldr	r3, [r3, #20]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d009      	beq.n	80052d8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	015a      	lsls	r2, r3, #5
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	4413      	add	r3, r2
 80052cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052d0:	461a      	mov	r2, r3
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	695b      	ldr	r3, [r3, #20]
 80052d6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	015a      	lsls	r2, r3, #5
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	4413      	add	r3, r2
 80052e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	693a      	ldr	r2, [r7, #16]
 80052e8:	0151      	lsls	r1, r2, #5
 80052ea:	697a      	ldr	r2, [r7, #20]
 80052ec:	440a      	add	r2, r1
 80052ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052f2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80052f6:	6013      	str	r3, [r2, #0]
 80052f8:	e097      	b.n	800542a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	015a      	lsls	r2, r3, #5
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	4413      	add	r3, r2
 8005302:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	693a      	ldr	r2, [r7, #16]
 800530a:	0151      	lsls	r1, r2, #5
 800530c:	697a      	ldr	r2, [r7, #20]
 800530e:	440a      	add	r2, r1
 8005310:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005314:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005318:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	699b      	ldr	r3, [r3, #24]
 800531e:	2b00      	cmp	r3, #0
 8005320:	f000 8083 	beq.w	800542a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800532a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	781b      	ldrb	r3, [r3, #0]
 8005330:	f003 030f 	and.w	r3, r3, #15
 8005334:	2101      	movs	r1, #1
 8005336:	fa01 f303 	lsl.w	r3, r1, r3
 800533a:	6979      	ldr	r1, [r7, #20]
 800533c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005340:	4313      	orrs	r3, r2
 8005342:	634b      	str	r3, [r1, #52]	; 0x34
 8005344:	e071      	b.n	800542a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	015a      	lsls	r2, r3, #5
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	4413      	add	r3, r2
 800534e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005352:	691b      	ldr	r3, [r3, #16]
 8005354:	693a      	ldr	r2, [r7, #16]
 8005356:	0151      	lsls	r1, r2, #5
 8005358:	697a      	ldr	r2, [r7, #20]
 800535a:	440a      	add	r2, r1
 800535c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005360:	0cdb      	lsrs	r3, r3, #19
 8005362:	04db      	lsls	r3, r3, #19
 8005364:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	015a      	lsls	r2, r3, #5
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	4413      	add	r3, r2
 800536e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005372:	691b      	ldr	r3, [r3, #16]
 8005374:	693a      	ldr	r2, [r7, #16]
 8005376:	0151      	lsls	r1, r2, #5
 8005378:	697a      	ldr	r2, [r7, #20]
 800537a:	440a      	add	r2, r1
 800537c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005380:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005384:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005388:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	699b      	ldr	r3, [r3, #24]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d003      	beq.n	800539a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	68da      	ldr	r2, [r3, #12]
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	68da      	ldr	r2, [r3, #12]
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	015a      	lsls	r2, r3, #5
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	4413      	add	r3, r2
 80053aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053ae:	691b      	ldr	r3, [r3, #16]
 80053b0:	693a      	ldr	r2, [r7, #16]
 80053b2:	0151      	lsls	r1, r2, #5
 80053b4:	697a      	ldr	r2, [r7, #20]
 80053b6:	440a      	add	r2, r1
 80053b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80053c0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	015a      	lsls	r2, r3, #5
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	4413      	add	r3, r2
 80053ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053ce:	691a      	ldr	r2, [r3, #16]
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	69db      	ldr	r3, [r3, #28]
 80053d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053d8:	6939      	ldr	r1, [r7, #16]
 80053da:	0148      	lsls	r0, r1, #5
 80053dc:	6979      	ldr	r1, [r7, #20]
 80053de:	4401      	add	r1, r0
 80053e0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80053e4:	4313      	orrs	r3, r2
 80053e6:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80053e8:	79fb      	ldrb	r3, [r7, #7]
 80053ea:	2b01      	cmp	r3, #1
 80053ec:	d10d      	bne.n	800540a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	691b      	ldr	r3, [r3, #16]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d009      	beq.n	800540a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	6919      	ldr	r1, [r3, #16]
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	015a      	lsls	r2, r3, #5
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	4413      	add	r3, r2
 8005402:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005406:	460a      	mov	r2, r1
 8005408:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	015a      	lsls	r2, r3, #5
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	4413      	add	r3, r2
 8005412:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	693a      	ldr	r2, [r7, #16]
 800541a:	0151      	lsls	r1, r2, #5
 800541c:	697a      	ldr	r2, [r7, #20]
 800541e:	440a      	add	r2, r1
 8005420:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005424:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005428:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800542a:	2300      	movs	r3, #0
}
 800542c:	4618      	mov	r0, r3
 800542e:	371c      	adds	r7, #28
 8005430:	46bd      	mov	sp, r7
 8005432:	bc80      	pop	{r7}
 8005434:	4770      	bx	lr

08005436 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005436:	b480      	push	{r7}
 8005438:	b087      	sub	sp, #28
 800543a:	af00      	add	r7, sp, #0
 800543c:	6078      	str	r0, [r7, #4]
 800543e:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005440:	2300      	movs	r3, #0
 8005442:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005444:	2300      	movs	r3, #0
 8005446:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	785b      	ldrb	r3, [r3, #1]
 8005450:	2b01      	cmp	r3, #1
 8005452:	d14a      	bne.n	80054ea <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	781b      	ldrb	r3, [r3, #0]
 8005458:	015a      	lsls	r2, r3, #5
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	4413      	add	r3, r2
 800545e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005468:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800546c:	f040 8086 	bne.w	800557c <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	781b      	ldrb	r3, [r3, #0]
 8005474:	015a      	lsls	r2, r3, #5
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	4413      	add	r3, r2
 800547a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	683a      	ldr	r2, [r7, #0]
 8005482:	7812      	ldrb	r2, [r2, #0]
 8005484:	0151      	lsls	r1, r2, #5
 8005486:	693a      	ldr	r2, [r7, #16]
 8005488:	440a      	add	r2, r1
 800548a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800548e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005492:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	781b      	ldrb	r3, [r3, #0]
 8005498:	015a      	lsls	r2, r3, #5
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	4413      	add	r3, r2
 800549e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	683a      	ldr	r2, [r7, #0]
 80054a6:	7812      	ldrb	r2, [r2, #0]
 80054a8:	0151      	lsls	r1, r2, #5
 80054aa:	693a      	ldr	r2, [r7, #16]
 80054ac:	440a      	add	r2, r1
 80054ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054b2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80054b6:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	3301      	adds	r3, #1
 80054bc:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	f242 7210 	movw	r2, #10000	; 0x2710
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d902      	bls.n	80054ce <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	75fb      	strb	r3, [r7, #23]
          break;
 80054cc:	e056      	b.n	800557c <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	781b      	ldrb	r3, [r3, #0]
 80054d2:	015a      	lsls	r2, r3, #5
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	4413      	add	r3, r2
 80054d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054e6:	d0e7      	beq.n	80054b8 <USB_EPStopXfer+0x82>
 80054e8:	e048      	b.n	800557c <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	781b      	ldrb	r3, [r3, #0]
 80054ee:	015a      	lsls	r2, r3, #5
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	4413      	add	r3, r2
 80054f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005502:	d13b      	bne.n	800557c <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	015a      	lsls	r2, r3, #5
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	4413      	add	r3, r2
 800550e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	683a      	ldr	r2, [r7, #0]
 8005516:	7812      	ldrb	r2, [r2, #0]
 8005518:	0151      	lsls	r1, r2, #5
 800551a:	693a      	ldr	r2, [r7, #16]
 800551c:	440a      	add	r2, r1
 800551e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005522:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005526:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	781b      	ldrb	r3, [r3, #0]
 800552c:	015a      	lsls	r2, r3, #5
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	4413      	add	r3, r2
 8005532:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	683a      	ldr	r2, [r7, #0]
 800553a:	7812      	ldrb	r2, [r2, #0]
 800553c:	0151      	lsls	r1, r2, #5
 800553e:	693a      	ldr	r2, [r7, #16]
 8005540:	440a      	add	r2, r1
 8005542:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005546:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800554a:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	3301      	adds	r3, #1
 8005550:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	f242 7210 	movw	r2, #10000	; 0x2710
 8005558:	4293      	cmp	r3, r2
 800555a:	d902      	bls.n	8005562 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	75fb      	strb	r3, [r7, #23]
          break;
 8005560:	e00c      	b.n	800557c <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	781b      	ldrb	r3, [r3, #0]
 8005566:	015a      	lsls	r2, r3, #5
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	4413      	add	r3, r2
 800556c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005576:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800557a:	d0e7      	beq.n	800554c <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800557c:	7dfb      	ldrb	r3, [r7, #23]
}
 800557e:	4618      	mov	r0, r3
 8005580:	371c      	adds	r7, #28
 8005582:	46bd      	mov	sp, r7
 8005584:	bc80      	pop	{r7}
 8005586:	4770      	bx	lr

08005588 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005588:	b480      	push	{r7}
 800558a:	b089      	sub	sp, #36	; 0x24
 800558c:	af00      	add	r7, sp, #0
 800558e:	60f8      	str	r0, [r7, #12]
 8005590:	60b9      	str	r1, [r7, #8]
 8005592:	4611      	mov	r1, r2
 8005594:	461a      	mov	r2, r3
 8005596:	460b      	mov	r3, r1
 8005598:	71fb      	strb	r3, [r7, #7]
 800559a:	4613      	mov	r3, r2
 800559c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80055a6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d123      	bne.n	80055f6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80055ae:	88bb      	ldrh	r3, [r7, #4]
 80055b0:	3303      	adds	r3, #3
 80055b2:	089b      	lsrs	r3, r3, #2
 80055b4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80055b6:	2300      	movs	r3, #0
 80055b8:	61bb      	str	r3, [r7, #24]
 80055ba:	e018      	b.n	80055ee <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80055bc:	79fb      	ldrb	r3, [r7, #7]
 80055be:	031a      	lsls	r2, r3, #12
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	4413      	add	r3, r2
 80055c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055c8:	461a      	mov	r2, r3
 80055ca:	69fb      	ldr	r3, [r7, #28]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	6013      	str	r3, [r2, #0]
      pSrc++;
 80055d0:	69fb      	ldr	r3, [r7, #28]
 80055d2:	3301      	adds	r3, #1
 80055d4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80055d6:	69fb      	ldr	r3, [r7, #28]
 80055d8:	3301      	adds	r3, #1
 80055da:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80055dc:	69fb      	ldr	r3, [r7, #28]
 80055de:	3301      	adds	r3, #1
 80055e0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80055e2:	69fb      	ldr	r3, [r7, #28]
 80055e4:	3301      	adds	r3, #1
 80055e6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80055e8:	69bb      	ldr	r3, [r7, #24]
 80055ea:	3301      	adds	r3, #1
 80055ec:	61bb      	str	r3, [r7, #24]
 80055ee:	69ba      	ldr	r2, [r7, #24]
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d3e2      	bcc.n	80055bc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80055f6:	2300      	movs	r3, #0
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	3724      	adds	r7, #36	; 0x24
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bc80      	pop	{r7}
 8005600:	4770      	bx	lr

08005602 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005602:	b480      	push	{r7}
 8005604:	b08b      	sub	sp, #44	; 0x2c
 8005606:	af00      	add	r7, sp, #0
 8005608:	60f8      	str	r0, [r7, #12]
 800560a:	60b9      	str	r1, [r7, #8]
 800560c:	4613      	mov	r3, r2
 800560e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005618:	88fb      	ldrh	r3, [r7, #6]
 800561a:	089b      	lsrs	r3, r3, #2
 800561c:	b29b      	uxth	r3, r3
 800561e:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005620:	88fb      	ldrh	r3, [r7, #6]
 8005622:	f003 0303 	and.w	r3, r3, #3
 8005626:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005628:	2300      	movs	r3, #0
 800562a:	623b      	str	r3, [r7, #32]
 800562c:	e014      	b.n	8005658 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800562e:	69bb      	ldr	r3, [r7, #24]
 8005630:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005634:	681a      	ldr	r2, [r3, #0]
 8005636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005638:	601a      	str	r2, [r3, #0]
    pDest++;
 800563a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800563c:	3301      	adds	r3, #1
 800563e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005642:	3301      	adds	r3, #1
 8005644:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005648:	3301      	adds	r3, #1
 800564a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800564c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800564e:	3301      	adds	r3, #1
 8005650:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005652:	6a3b      	ldr	r3, [r7, #32]
 8005654:	3301      	adds	r3, #1
 8005656:	623b      	str	r3, [r7, #32]
 8005658:	6a3a      	ldr	r2, [r7, #32]
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	429a      	cmp	r2, r3
 800565e:	d3e6      	bcc.n	800562e <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005660:	8bfb      	ldrh	r3, [r7, #30]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d01e      	beq.n	80056a4 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005666:	2300      	movs	r3, #0
 8005668:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800566a:	69bb      	ldr	r3, [r7, #24]
 800566c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005670:	461a      	mov	r2, r3
 8005672:	f107 0310 	add.w	r3, r7, #16
 8005676:	6812      	ldr	r2, [r2, #0]
 8005678:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800567a:	693a      	ldr	r2, [r7, #16]
 800567c:	6a3b      	ldr	r3, [r7, #32]
 800567e:	b2db      	uxtb	r3, r3
 8005680:	00db      	lsls	r3, r3, #3
 8005682:	fa22 f303 	lsr.w	r3, r2, r3
 8005686:	b2da      	uxtb	r2, r3
 8005688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568a:	701a      	strb	r2, [r3, #0]
      i++;
 800568c:	6a3b      	ldr	r3, [r7, #32]
 800568e:	3301      	adds	r3, #1
 8005690:	623b      	str	r3, [r7, #32]
      pDest++;
 8005692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005694:	3301      	adds	r3, #1
 8005696:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005698:	8bfb      	ldrh	r3, [r7, #30]
 800569a:	3b01      	subs	r3, #1
 800569c:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800569e:	8bfb      	ldrh	r3, [r7, #30]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d1ea      	bne.n	800567a <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80056a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	372c      	adds	r7, #44	; 0x2c
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bc80      	pop	{r7}
 80056ae:	4770      	bx	lr

080056b0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b085      	sub	sp, #20
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
 80056b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	781b      	ldrb	r3, [r3, #0]
 80056c2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	785b      	ldrb	r3, [r3, #1]
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	d12c      	bne.n	8005726 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	015a      	lsls	r2, r3, #5
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	4413      	add	r3, r2
 80056d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	db12      	blt.n	8005704 <USB_EPSetStall+0x54>
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d00f      	beq.n	8005704 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	015a      	lsls	r2, r3, #5
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	4413      	add	r3, r2
 80056ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	68ba      	ldr	r2, [r7, #8]
 80056f4:	0151      	lsls	r1, r2, #5
 80056f6:	68fa      	ldr	r2, [r7, #12]
 80056f8:	440a      	add	r2, r1
 80056fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056fe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005702:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	015a      	lsls	r2, r3, #5
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	4413      	add	r3, r2
 800570c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	68ba      	ldr	r2, [r7, #8]
 8005714:	0151      	lsls	r1, r2, #5
 8005716:	68fa      	ldr	r2, [r7, #12]
 8005718:	440a      	add	r2, r1
 800571a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800571e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005722:	6013      	str	r3, [r2, #0]
 8005724:	e02b      	b.n	800577e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	015a      	lsls	r2, r3, #5
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	4413      	add	r3, r2
 800572e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	2b00      	cmp	r3, #0
 8005736:	db12      	blt.n	800575e <USB_EPSetStall+0xae>
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d00f      	beq.n	800575e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	015a      	lsls	r2, r3, #5
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	4413      	add	r3, r2
 8005746:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	68ba      	ldr	r2, [r7, #8]
 800574e:	0151      	lsls	r1, r2, #5
 8005750:	68fa      	ldr	r2, [r7, #12]
 8005752:	440a      	add	r2, r1
 8005754:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005758:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800575c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	015a      	lsls	r2, r3, #5
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	4413      	add	r3, r2
 8005766:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	68ba      	ldr	r2, [r7, #8]
 800576e:	0151      	lsls	r1, r2, #5
 8005770:	68fa      	ldr	r2, [r7, #12]
 8005772:	440a      	add	r2, r1
 8005774:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005778:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800577c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800577e:	2300      	movs	r3, #0
}
 8005780:	4618      	mov	r0, r3
 8005782:	3714      	adds	r7, #20
 8005784:	46bd      	mov	sp, r7
 8005786:	bc80      	pop	{r7}
 8005788:	4770      	bx	lr

0800578a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800578a:	b480      	push	{r7}
 800578c:	b085      	sub	sp, #20
 800578e:	af00      	add	r7, sp, #0
 8005790:	6078      	str	r0, [r7, #4]
 8005792:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	781b      	ldrb	r3, [r3, #0]
 800579c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	785b      	ldrb	r3, [r3, #1]
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d128      	bne.n	80057f8 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	015a      	lsls	r2, r3, #5
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	4413      	add	r3, r2
 80057ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	68ba      	ldr	r2, [r7, #8]
 80057b6:	0151      	lsls	r1, r2, #5
 80057b8:	68fa      	ldr	r2, [r7, #12]
 80057ba:	440a      	add	r2, r1
 80057bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057c0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80057c4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	791b      	ldrb	r3, [r3, #4]
 80057ca:	2b03      	cmp	r3, #3
 80057cc:	d003      	beq.n	80057d6 <USB_EPClearStall+0x4c>
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	791b      	ldrb	r3, [r3, #4]
 80057d2:	2b02      	cmp	r3, #2
 80057d4:	d138      	bne.n	8005848 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	015a      	lsls	r2, r3, #5
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	4413      	add	r3, r2
 80057de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	68ba      	ldr	r2, [r7, #8]
 80057e6:	0151      	lsls	r1, r2, #5
 80057e8:	68fa      	ldr	r2, [r7, #12]
 80057ea:	440a      	add	r2, r1
 80057ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057f4:	6013      	str	r3, [r2, #0]
 80057f6:	e027      	b.n	8005848 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	015a      	lsls	r2, r3, #5
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	4413      	add	r3, r2
 8005800:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	68ba      	ldr	r2, [r7, #8]
 8005808:	0151      	lsls	r1, r2, #5
 800580a:	68fa      	ldr	r2, [r7, #12]
 800580c:	440a      	add	r2, r1
 800580e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005812:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005816:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	791b      	ldrb	r3, [r3, #4]
 800581c:	2b03      	cmp	r3, #3
 800581e:	d003      	beq.n	8005828 <USB_EPClearStall+0x9e>
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	791b      	ldrb	r3, [r3, #4]
 8005824:	2b02      	cmp	r3, #2
 8005826:	d10f      	bne.n	8005848 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	015a      	lsls	r2, r3, #5
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	4413      	add	r3, r2
 8005830:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	68ba      	ldr	r2, [r7, #8]
 8005838:	0151      	lsls	r1, r2, #5
 800583a:	68fa      	ldr	r2, [r7, #12]
 800583c:	440a      	add	r2, r1
 800583e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005842:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005846:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005848:	2300      	movs	r3, #0
}
 800584a:	4618      	mov	r0, r3
 800584c:	3714      	adds	r7, #20
 800584e:	46bd      	mov	sp, r7
 8005850:	bc80      	pop	{r7}
 8005852:	4770      	bx	lr

08005854 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005854:	b480      	push	{r7}
 8005856:	b085      	sub	sp, #20
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
 800585c:	460b      	mov	r3, r1
 800585e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	68fa      	ldr	r2, [r7, #12]
 800586e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005872:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005876:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	78fb      	ldrb	r3, [r7, #3]
 8005882:	011b      	lsls	r3, r3, #4
 8005884:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005888:	68f9      	ldr	r1, [r7, #12]
 800588a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800588e:	4313      	orrs	r3, r2
 8005890:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005892:	2300      	movs	r3, #0
}
 8005894:	4618      	mov	r0, r3
 8005896:	3714      	adds	r7, #20
 8005898:	46bd      	mov	sp, r7
 800589a:	bc80      	pop	{r7}
 800589c:	4770      	bx	lr

0800589e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800589e:	b480      	push	{r7}
 80058a0:	b085      	sub	sp, #20
 80058a2:	af00      	add	r7, sp, #0
 80058a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	68fa      	ldr	r2, [r7, #12]
 80058b4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80058b8:	f023 0303 	bic.w	r3, r3, #3
 80058bc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	68fa      	ldr	r2, [r7, #12]
 80058c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058cc:	f023 0302 	bic.w	r3, r3, #2
 80058d0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80058d2:	2300      	movs	r3, #0
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	3714      	adds	r7, #20
 80058d8:	46bd      	mov	sp, r7
 80058da:	bc80      	pop	{r7}
 80058dc:	4770      	bx	lr

080058de <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80058de:	b480      	push	{r7}
 80058e0:	b085      	sub	sp, #20
 80058e2:	af00      	add	r7, sp, #0
 80058e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	68fa      	ldr	r2, [r7, #12]
 80058f4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80058f8:	f023 0303 	bic.w	r3, r3, #3
 80058fc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	68fa      	ldr	r2, [r7, #12]
 8005908:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800590c:	f043 0302 	orr.w	r3, r3, #2
 8005910:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005912:	2300      	movs	r3, #0
}
 8005914:	4618      	mov	r0, r3
 8005916:	3714      	adds	r7, #20
 8005918:	46bd      	mov	sp, r7
 800591a:	bc80      	pop	{r7}
 800591c:	4770      	bx	lr

0800591e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800591e:	b480      	push	{r7}
 8005920:	b085      	sub	sp, #20
 8005922:	af00      	add	r7, sp, #0
 8005924:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	695b      	ldr	r3, [r3, #20]
 800592a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	699b      	ldr	r3, [r3, #24]
 8005930:	68fa      	ldr	r2, [r7, #12]
 8005932:	4013      	ands	r3, r2
 8005934:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005936:	68fb      	ldr	r3, [r7, #12]
}
 8005938:	4618      	mov	r0, r3
 800593a:	3714      	adds	r7, #20
 800593c:	46bd      	mov	sp, r7
 800593e:	bc80      	pop	{r7}
 8005940:	4770      	bx	lr

08005942 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005942:	b480      	push	{r7}
 8005944:	b085      	sub	sp, #20
 8005946:	af00      	add	r7, sp, #0
 8005948:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005954:	699b      	ldr	r3, [r3, #24]
 8005956:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800595e:	69db      	ldr	r3, [r3, #28]
 8005960:	68ba      	ldr	r2, [r7, #8]
 8005962:	4013      	ands	r3, r2
 8005964:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	0c1b      	lsrs	r3, r3, #16
}
 800596a:	4618      	mov	r0, r3
 800596c:	3714      	adds	r7, #20
 800596e:	46bd      	mov	sp, r7
 8005970:	bc80      	pop	{r7}
 8005972:	4770      	bx	lr

08005974 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005974:	b480      	push	{r7}
 8005976:	b085      	sub	sp, #20
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005986:	699b      	ldr	r3, [r3, #24]
 8005988:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005990:	69db      	ldr	r3, [r3, #28]
 8005992:	68ba      	ldr	r2, [r7, #8]
 8005994:	4013      	ands	r3, r2
 8005996:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	b29b      	uxth	r3, r3
}
 800599c:	4618      	mov	r0, r3
 800599e:	3714      	adds	r7, #20
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bc80      	pop	{r7}
 80059a4:	4770      	bx	lr

080059a6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80059a6:	b480      	push	{r7}
 80059a8:	b085      	sub	sp, #20
 80059aa:	af00      	add	r7, sp, #0
 80059ac:	6078      	str	r0, [r7, #4]
 80059ae:	460b      	mov	r3, r1
 80059b0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80059b6:	78fb      	ldrb	r3, [r7, #3]
 80059b8:	015a      	lsls	r2, r3, #5
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	4413      	add	r3, r2
 80059be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059cc:	695b      	ldr	r3, [r3, #20]
 80059ce:	68ba      	ldr	r2, [r7, #8]
 80059d0:	4013      	ands	r3, r2
 80059d2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80059d4:	68bb      	ldr	r3, [r7, #8]
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3714      	adds	r7, #20
 80059da:	46bd      	mov	sp, r7
 80059dc:	bc80      	pop	{r7}
 80059de:	4770      	bx	lr

080059e0 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b087      	sub	sp, #28
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
 80059e8:	460b      	mov	r3, r1
 80059ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059f6:	691b      	ldr	r3, [r3, #16]
 80059f8:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a02:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005a04:	78fb      	ldrb	r3, [r7, #3]
 8005a06:	f003 030f 	and.w	r3, r3, #15
 8005a0a:	68fa      	ldr	r2, [r7, #12]
 8005a0c:	fa22 f303 	lsr.w	r3, r2, r3
 8005a10:	01db      	lsls	r3, r3, #7
 8005a12:	b2db      	uxtb	r3, r3
 8005a14:	693a      	ldr	r2, [r7, #16]
 8005a16:	4313      	orrs	r3, r2
 8005a18:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005a1a:	78fb      	ldrb	r3, [r7, #3]
 8005a1c:	015a      	lsls	r2, r3, #5
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	4413      	add	r3, r2
 8005a22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a26:	689b      	ldr	r3, [r3, #8]
 8005a28:	693a      	ldr	r2, [r7, #16]
 8005a2a:	4013      	ands	r3, r2
 8005a2c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005a2e:	68bb      	ldr	r3, [r7, #8]
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	371c      	adds	r7, #28
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bc80      	pop	{r7}
 8005a38:	4770      	bx	lr

08005a3a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005a3a:	b480      	push	{r7}
 8005a3c:	b083      	sub	sp, #12
 8005a3e:	af00      	add	r7, sp, #0
 8005a40:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	695b      	ldr	r3, [r3, #20]
 8005a46:	f003 0301 	and.w	r3, r3, #1
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	370c      	adds	r7, #12
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bc80      	pop	{r7}
 8005a52:	4770      	bx	lr

08005a54 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b085      	sub	sp, #20
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	68fa      	ldr	r2, [r7, #12]
 8005a6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a6e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005a72:	f023 0307 	bic.w	r3, r3, #7
 8005a76:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	68fa      	ldr	r2, [r7, #12]
 8005a82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a8a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005a8c:	2300      	movs	r3, #0
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3714      	adds	r7, #20
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bc80      	pop	{r7}
 8005a96:	4770      	bx	lr

08005a98 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b087      	sub	sp, #28
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	60f8      	str	r0, [r7, #12]
 8005aa0:	460b      	mov	r3, r1
 8005aa2:	607a      	str	r2, [r7, #4]
 8005aa4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	333c      	adds	r3, #60	; 0x3c
 8005aae:	3304      	adds	r3, #4
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	4a25      	ldr	r2, [pc, #148]	; (8005b4c <USB_EP0_OutStart+0xb4>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d90a      	bls.n	8005ad2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ac8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005acc:	d101      	bne.n	8005ad2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	e037      	b.n	8005b42 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ad8:	461a      	mov	r2, r3
 8005ada:	2300      	movs	r3, #0
 8005adc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ae4:	691b      	ldr	r3, [r3, #16]
 8005ae6:	697a      	ldr	r2, [r7, #20]
 8005ae8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005aec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005af0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005af8:	691b      	ldr	r3, [r3, #16]
 8005afa:	697a      	ldr	r2, [r7, #20]
 8005afc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b00:	f043 0318 	orr.w	r3, r3, #24
 8005b04:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b0c:	691b      	ldr	r3, [r3, #16]
 8005b0e:	697a      	ldr	r2, [r7, #20]
 8005b10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b14:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005b18:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005b1a:	7afb      	ldrb	r3, [r7, #11]
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d10f      	bne.n	8005b40 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b26:	461a      	mov	r2, r3
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	697a      	ldr	r2, [r7, #20]
 8005b36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b3a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005b3e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005b40:	2300      	movs	r3, #0
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	371c      	adds	r7, #28
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bc80      	pop	{r7}
 8005b4a:	4770      	bx	lr
 8005b4c:	4f54300a 	.word	0x4f54300a

08005b50 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b085      	sub	sp, #20
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	3301      	adds	r3, #1
 8005b60:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	4a12      	ldr	r2, [pc, #72]	; (8005bb0 <USB_CoreReset+0x60>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d901      	bls.n	8005b6e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005b6a:	2303      	movs	r3, #3
 8005b6c:	e01b      	b.n	8005ba6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	691b      	ldr	r3, [r3, #16]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	daf2      	bge.n	8005b5c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005b76:	2300      	movs	r3, #0
 8005b78:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	691b      	ldr	r3, [r3, #16]
 8005b7e:	f043 0201 	orr.w	r2, r3, #1
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	3301      	adds	r3, #1
 8005b8a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	4a08      	ldr	r2, [pc, #32]	; (8005bb0 <USB_CoreReset+0x60>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d901      	bls.n	8005b98 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005b94:	2303      	movs	r3, #3
 8005b96:	e006      	b.n	8005ba6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	691b      	ldr	r3, [r3, #16]
 8005b9c:	f003 0301 	and.w	r3, r3, #1
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	d0f0      	beq.n	8005b86 <USB_CoreReset+0x36>

  return HAL_OK;
 8005ba4:	2300      	movs	r3, #0
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3714      	adds	r7, #20
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bc80      	pop	{r7}
 8005bae:	4770      	bx	lr
 8005bb0:	00030d40 	.word	0x00030d40

08005bb4 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8005bb4:	b5b0      	push	{r4, r5, r7, lr}
 8005bb6:	b08c      	sub	sp, #48	; 0x30
 8005bb8:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8005bba:	2100      	movs	r1, #0
 8005bbc:	2000      	movs	r0, #0
 8005bbe:	f005 fa1d 	bl	800affc <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 8005bc2:	4b20      	ldr	r3, [pc, #128]	; (8005c44 <MX_LWIP_Init+0x90>)
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 8005bc8:	4b1f      	ldr	r3, [pc, #124]	; (8005c48 <MX_LWIP_Init+0x94>)
 8005bca:	2200      	movs	r2, #0
 8005bcc:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 8005bce:	4b1f      	ldr	r3, [pc, #124]	; (8005c4c <MX_LWIP_Init+0x98>)
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8005bd4:	4b1e      	ldr	r3, [pc, #120]	; (8005c50 <MX_LWIP_Init+0x9c>)
 8005bd6:	9302      	str	r3, [sp, #8]
 8005bd8:	4b1e      	ldr	r3, [pc, #120]	; (8005c54 <MX_LWIP_Init+0xa0>)
 8005bda:	9301      	str	r3, [sp, #4]
 8005bdc:	2300      	movs	r3, #0
 8005bde:	9300      	str	r3, [sp, #0]
 8005be0:	4b1a      	ldr	r3, [pc, #104]	; (8005c4c <MX_LWIP_Init+0x98>)
 8005be2:	4a19      	ldr	r2, [pc, #100]	; (8005c48 <MX_LWIP_Init+0x94>)
 8005be4:	4917      	ldr	r1, [pc, #92]	; (8005c44 <MX_LWIP_Init+0x90>)
 8005be6:	481c      	ldr	r0, [pc, #112]	; (8005c58 <MX_LWIP_Init+0xa4>)
 8005be8:	f007 fb48 	bl	800d27c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8005bec:	481a      	ldr	r0, [pc, #104]	; (8005c58 <MX_LWIP_Init+0xa4>)
 8005bee:	f007 fcfd 	bl	800d5ec <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8005bf2:	4b19      	ldr	r3, [pc, #100]	; (8005c58 <MX_LWIP_Init+0xa4>)
 8005bf4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005bf8:	089b      	lsrs	r3, r3, #2
 8005bfa:	f003 0301 	and.w	r3, r3, #1
 8005bfe:	b2db      	uxtb	r3, r3
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d003      	beq.n	8005c0c <MX_LWIP_Init+0x58>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8005c04:	4814      	ldr	r0, [pc, #80]	; (8005c58 <MX_LWIP_Init+0xa4>)
 8005c06:	f007 fcff 	bl	800d608 <netif_set_up>
 8005c0a:	e002      	b.n	8005c12 <MX_LWIP_Init+0x5e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8005c0c:	4812      	ldr	r0, [pc, #72]	; (8005c58 <MX_LWIP_Init+0xa4>)
 8005c0e:	f007 fd67 	bl	800d6e0 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8005c12:	4912      	ldr	r1, [pc, #72]	; (8005c5c <MX_LWIP_Init+0xa8>)
 8005c14:	4810      	ldr	r0, [pc, #64]	; (8005c58 <MX_LWIP_Init+0xa4>)
 8005c16:	f007 fd95 	bl	800d744 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 8005c1a:	4b11      	ldr	r3, [pc, #68]	; (8005c60 <MX_LWIP_Init+0xac>)
 8005c1c:	1d3c      	adds	r4, r7, #4
 8005c1e:	461d      	mov	r5, r3
 8005c20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005c22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005c24:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005c28:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 8005c2c:	1d3b      	adds	r3, r7, #4
 8005c2e:	490a      	ldr	r1, [pc, #40]	; (8005c58 <MX_LWIP_Init+0xa4>)
 8005c30:	4618      	mov	r0, r3
 8005c32:	f002 fa35 	bl	80080a0 <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 8005c36:	4808      	ldr	r0, [pc, #32]	; (8005c58 <MX_LWIP_Init+0xa4>)
 8005c38:	f00f fe80 	bl	801593c <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8005c3c:	bf00      	nop
 8005c3e:	3720      	adds	r7, #32
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bdb0      	pop	{r4, r5, r7, pc}
 8005c44:	200004d0 	.word	0x200004d0
 8005c48:	200004d4 	.word	0x200004d4
 8005c4c:	200004d8 	.word	0x200004d8
 8005c50:	0800af39 	.word	0x0800af39
 8005c54:	08005f89 	.word	0x08005f89
 8005c58:	20000498 	.word	0x20000498
 8005c5c:	08005c65 	.word	0x08005c65
 8005c60:	0801b370 	.word	0x0801b370

08005c64 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b083      	sub	sp, #12
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8005c6c:	bf00      	nop
 8005c6e:	370c      	adds	r7, #12
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bc80      	pop	{r7}
 8005c74:	4770      	bx	lr
	...

08005c78 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8005c78:	b5b0      	push	{r4, r5, r7, lr}
 8005c7a:	b08c      	sub	sp, #48	; 0x30
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8005c80:	2300      	movs	r3, #0
 8005c82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

/* USER CODE END low_level_init Variables Initialization for User BSP */
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8005c86:	4b4f      	ldr	r3, [pc, #316]	; (8005dc4 <low_level_init+0x14c>)
 8005c88:	4a4f      	ldr	r2, [pc, #316]	; (8005dc8 <low_level_init+0x150>)
 8005c8a:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  MACAddr[1] = 0x80;
 8005c92:	2380      	movs	r3, #128	; 0x80
 8005c94:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  MACAddr[2] = 0xE1;
 8005c98:	23e1      	movs	r3, #225	; 0xe1
 8005c9a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  MACAddr[3] = 0x00;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  MACAddr[4] = 0x00;
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  MACAddr[5] = 0x00;
 8005caa:	2300      	movs	r3, #0
 8005cac:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  heth.Init.MACAddr = &MACAddr[0];
 8005cb0:	4a44      	ldr	r2, [pc, #272]	; (8005dc4 <low_level_init+0x14c>)
 8005cb2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005cb6:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8005cb8:	4b42      	ldr	r3, [pc, #264]	; (8005dc4 <low_level_init+0x14c>)
 8005cba:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005cbe:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8005cc0:	4b40      	ldr	r3, [pc, #256]	; (8005dc4 <low_level_init+0x14c>)
 8005cc2:	4a42      	ldr	r2, [pc, #264]	; (8005dcc <low_level_init+0x154>)
 8005cc4:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8005cc6:	4b3f      	ldr	r3, [pc, #252]	; (8005dc4 <low_level_init+0x14c>)
 8005cc8:	4a41      	ldr	r2, [pc, #260]	; (8005dd0 <low_level_init+0x158>)
 8005cca:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8005ccc:	4b3d      	ldr	r3, [pc, #244]	; (8005dc4 <low_level_init+0x14c>)
 8005cce:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8005cd2:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8005cd4:	483b      	ldr	r0, [pc, #236]	; (8005dc4 <low_level_init+0x14c>)
 8005cd6:	f7fb f955 	bl	8000f84 <HAL_ETH_Init>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8005ce0:	2238      	movs	r2, #56	; 0x38
 8005ce2:	2100      	movs	r1, #0
 8005ce4:	483b      	ldr	r0, [pc, #236]	; (8005dd4 <low_level_init+0x15c>)
 8005ce6:	f014 fc77 	bl	801a5d8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8005cea:	4b3a      	ldr	r3, [pc, #232]	; (8005dd4 <low_level_init+0x15c>)
 8005cec:	2221      	movs	r2, #33	; 0x21
 8005cee:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8005cf0:	4b38      	ldr	r3, [pc, #224]	; (8005dd4 <low_level_init+0x15c>)
 8005cf2:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8005cf6:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8005cf8:	4b36      	ldr	r3, [pc, #216]	; (8005dd4 <low_level_init+0x15c>)
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8005cfe:	4836      	ldr	r0, [pc, #216]	; (8005dd8 <low_level_init+0x160>)
 8005d00:	f007 f978 	bl	800cff4 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2206      	movs	r2, #6
 8005d08:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8005d0c:	4b2d      	ldr	r3, [pc, #180]	; (8005dc4 <low_level_init+0x14c>)
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	781a      	ldrb	r2, [r3, #0]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8005d18:	4b2a      	ldr	r3, [pc, #168]	; (8005dc4 <low_level_init+0x14c>)
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	785a      	ldrb	r2, [r3, #1]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8005d24:	4b27      	ldr	r3, [pc, #156]	; (8005dc4 <low_level_init+0x14c>)
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	789a      	ldrb	r2, [r3, #2]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8005d30:	4b24      	ldr	r3, [pc, #144]	; (8005dc4 <low_level_init+0x14c>)
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	78da      	ldrb	r2, [r3, #3]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8005d3c:	4b21      	ldr	r3, [pc, #132]	; (8005dc4 <low_level_init+0x14c>)
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	791a      	ldrb	r2, [r3, #4]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8005d48:	4b1e      	ldr	r3, [pc, #120]	; (8005dc4 <low_level_init+0x14c>)
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	795a      	ldrb	r2, [r3, #5]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8005d5a:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005d62:	f043 030a 	orr.w	r3, r3, #10
 8005d66:	b2da      	uxtb	r2, r3
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = xSemaphoreCreateBinary();
 8005d6e:	2203      	movs	r2, #3
 8005d70:	2100      	movs	r1, #0
 8005d72:	2001      	movs	r0, #1
 8005d74:	f002 fd80 	bl	8008878 <xQueueGenericCreate>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	4a18      	ldr	r2, [pc, #96]	; (8005ddc <low_level_init+0x164>)
 8005d7c:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = xSemaphoreCreateBinary();
 8005d7e:	2203      	movs	r2, #3
 8005d80:	2100      	movs	r1, #0
 8005d82:	2001      	movs	r0, #1
 8005d84:	f002 fd78 	bl	8008878 <xQueueGenericCreate>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	4a15      	ldr	r2, [pc, #84]	; (8005de0 <low_level_init+0x168>)
 8005d8c:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8005d8e:	4b15      	ldr	r3, [pc, #84]	; (8005de4 <low_level_init+0x16c>)
 8005d90:	f107 040c 	add.w	r4, r7, #12
 8005d94:	461d      	mov	r5, r3
 8005d96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005d98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005d9a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005d9e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8005da2:	f107 030c 	add.w	r3, r7, #12
 8005da6:	6879      	ldr	r1, [r7, #4]
 8005da8:	4618      	mov	r0, r3
 8005daa:	f002 f979 	bl	80080a0 <osThreadCreate>

/* USER CODE BEGIN low_level_init Code 1 for User BSP */

/* USER CODE END low_level_init Code 1 for User BSP */

  if (hal_eth_init_status == HAL_OK)
 8005dae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d001      	beq.n	8005dba <low_level_init+0x142>
/* USER CODE END low_level_init Code 2 for User BSP */

  }
  else
  {
    Error_Handler();
 8005db6:	f7fa fd2f 	bl	8000818 <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8005dba:	bf00      	nop
 8005dbc:	3730      	adds	r7, #48	; 0x30
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bdb0      	pop	{r4, r5, r7, pc}
 8005dc2:	bf00      	nop
 8005dc4:	20004fb0 	.word	0x20004fb0
 8005dc8:	40028000 	.word	0x40028000
 8005dcc:	20004f08 	.word	0x20004f08
 8005dd0:	20004e68 	.word	0x20004e68
 8005dd4:	20005060 	.word	0x20005060
 8005dd8:	0801ea50 	.word	0x0801ea50
 8005ddc:	20004fa8 	.word	0x20004fa8
 8005de0:	20004fac 	.word	0x20004fac
 8005de4:	0801b394 	.word	0x0801b394

08005de8 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b092      	sub	sp, #72	; 0x48
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
 8005df0:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8005df2:	2300      	movs	r3, #0
 8005df4:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8005df6:	2300      	movs	r3, #0
 8005df8:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT];

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8005e00:	f107 030c 	add.w	r3, r7, #12
 8005e04:	2230      	movs	r2, #48	; 0x30
 8005e06:	2100      	movs	r1, #0
 8005e08:	4618      	mov	r0, r3
 8005e0a:	f014 fbe5 	bl	801a5d8 <memset>

  for(q = p; q != NULL; q = q->next)
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	643b      	str	r3, [r7, #64]	; 0x40
 8005e12:	e045      	b.n	8005ea0 <low_level_output+0xb8>
  {
    if(i >= ETH_TX_DESC_CNT)
 8005e14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e16:	2b03      	cmp	r3, #3
 8005e18:	d902      	bls.n	8005e20 <low_level_output+0x38>
      return ERR_IF;
 8005e1a:	f06f 030b 	mvn.w	r3, #11
 8005e1e:	e065      	b.n	8005eec <low_level_output+0x104>

    Txbuffer[i].buffer = q->payload;
 8005e20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e22:	6859      	ldr	r1, [r3, #4]
 8005e24:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e26:	4613      	mov	r3, r2
 8005e28:	005b      	lsls	r3, r3, #1
 8005e2a:	4413      	add	r3, r2
 8005e2c:	009b      	lsls	r3, r3, #2
 8005e2e:	3348      	adds	r3, #72	; 0x48
 8005e30:	443b      	add	r3, r7
 8005e32:	3b3c      	subs	r3, #60	; 0x3c
 8005e34:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8005e36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e38:	895b      	ldrh	r3, [r3, #10]
 8005e3a:	4619      	mov	r1, r3
 8005e3c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e3e:	4613      	mov	r3, r2
 8005e40:	005b      	lsls	r3, r3, #1
 8005e42:	4413      	add	r3, r2
 8005e44:	009b      	lsls	r3, r3, #2
 8005e46:	3348      	adds	r3, #72	; 0x48
 8005e48:	443b      	add	r3, r7
 8005e4a:	3b38      	subs	r3, #56	; 0x38
 8005e4c:	6019      	str	r1, [r3, #0]

    if(i>0)
 8005e4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d011      	beq.n	8005e78 <low_level_output+0x90>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8005e54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e56:	1e5a      	subs	r2, r3, #1
 8005e58:	f107 000c 	add.w	r0, r7, #12
 8005e5c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005e5e:	460b      	mov	r3, r1
 8005e60:	005b      	lsls	r3, r3, #1
 8005e62:	440b      	add	r3, r1
 8005e64:	009b      	lsls	r3, r3, #2
 8005e66:	18c1      	adds	r1, r0, r3
 8005e68:	4613      	mov	r3, r2
 8005e6a:	005b      	lsls	r3, r3, #1
 8005e6c:	4413      	add	r3, r2
 8005e6e:	009b      	lsls	r3, r3, #2
 8005e70:	3348      	adds	r3, #72	; 0x48
 8005e72:	443b      	add	r3, r7
 8005e74:	3b34      	subs	r3, #52	; 0x34
 8005e76:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8005e78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d109      	bne.n	8005e94 <low_level_output+0xac>
    {
      Txbuffer[i].next = NULL;
 8005e80:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e82:	4613      	mov	r3, r2
 8005e84:	005b      	lsls	r3, r3, #1
 8005e86:	4413      	add	r3, r2
 8005e88:	009b      	lsls	r3, r3, #2
 8005e8a:	3348      	adds	r3, #72	; 0x48
 8005e8c:	443b      	add	r3, r7
 8005e8e:	3b34      	subs	r3, #52	; 0x34
 8005e90:	2200      	movs	r2, #0
 8005e92:	601a      	str	r2, [r3, #0]
    }

    i++;
 8005e94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e96:	3301      	adds	r3, #1
 8005e98:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8005e9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	643b      	str	r3, [r7, #64]	; 0x40
 8005ea0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d1b6      	bne.n	8005e14 <low_level_output+0x2c>
  }

  TxConfig.Length = p->tot_len;
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	891b      	ldrh	r3, [r3, #8]
 8005eaa:	461a      	mov	r2, r3
 8005eac:	4b11      	ldr	r3, [pc, #68]	; (8005ef4 <low_level_output+0x10c>)
 8005eae:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8005eb0:	4a10      	ldr	r2, [pc, #64]	; (8005ef4 <low_level_output+0x10c>)
 8005eb2:	f107 030c 	add.w	r3, r7, #12
 8005eb6:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8005eb8:	4a0e      	ldr	r2, [pc, #56]	; (8005ef4 <low_level_output+0x10c>)
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 8005ebe:	6838      	ldr	r0, [r7, #0]
 8005ec0:	f008 f88e 	bl	800dfe0 <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 8005ec4:	490b      	ldr	r1, [pc, #44]	; (8005ef4 <low_level_output+0x10c>)
 8005ec6:	480c      	ldr	r0, [pc, #48]	; (8005ef8 <low_level_output+0x110>)
 8005ec8:	f7fb f8e3 	bl	8001092 <HAL_ETH_Transmit_IT>
  while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 8005ecc:	bf00      	nop
 8005ece:	4b0b      	ldr	r3, [pc, #44]	; (8005efc <low_level_output+0x114>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f04f 31ff 	mov.w	r1, #4294967295
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f002 f9de 	bl	8008298 <osSemaphoreWait>
 8005edc:	4603      	mov	r3, r0
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d1f5      	bne.n	8005ece <low_level_output+0xe6>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 8005ee2:	4805      	ldr	r0, [pc, #20]	; (8005ef8 <low_level_output+0x110>)
 8005ee4:	f7fb fa66 	bl	80013b4 <HAL_ETH_ReleaseTxPacket>

  return errval;
 8005ee8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3748      	adds	r7, #72	; 0x48
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}
 8005ef4:	20005060 	.word	0x20005060
 8005ef8:	20004fb0 	.word	0x20004fb0
 8005efc:	20004fac 	.word	0x20004fac

08005f00 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b084      	sub	sp, #16
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005f08:	2300      	movs	r3, #0
 8005f0a:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8005f0c:	4b07      	ldr	r3, [pc, #28]	; (8005f2c <low_level_input+0x2c>)
 8005f0e:	781b      	ldrb	r3, [r3, #0]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d105      	bne.n	8005f20 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8005f14:	f107 030c 	add.w	r3, r7, #12
 8005f18:	4619      	mov	r1, r3
 8005f1a:	4805      	ldr	r0, [pc, #20]	; (8005f30 <low_level_input+0x30>)
 8005f1c:	f7fb f915 	bl	800114a <HAL_ETH_ReadData>
  }

  return p;
 8005f20:	68fb      	ldr	r3, [r7, #12]
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3710      	adds	r7, #16
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}
 8005f2a:	bf00      	nop
 8005f2c:	20004e64 	.word	0x20004e64
 8005f30:	20004fb0 	.word	0x20004fb0

08005f34 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b084      	sub	sp, #16
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8005f44:	4b0f      	ldr	r3, [pc, #60]	; (8005f84 <ethernetif_input+0x50>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f04f 31ff 	mov.w	r1, #4294967295
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	f002 f9a3 	bl	8008298 <osSemaphoreWait>
 8005f52:	4603      	mov	r3, r0
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d1f5      	bne.n	8005f44 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8005f58:	68b8      	ldr	r0, [r7, #8]
 8005f5a:	f7ff ffd1 	bl	8005f00 <low_level_input>
 8005f5e:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d00a      	beq.n	8005f7c <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	691b      	ldr	r3, [r3, #16]
 8005f6a:	68b9      	ldr	r1, [r7, #8]
 8005f6c:	68f8      	ldr	r0, [r7, #12]
 8005f6e:	4798      	blx	r3
 8005f70:	4603      	mov	r3, r0
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d002      	beq.n	8005f7c <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8005f76:	68f8      	ldr	r0, [r7, #12]
 8005f78:	f007 ff8e 	bl	800de98 <pbuf_free>
          }
        }
      } while(p!=NULL);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d1ea      	bne.n	8005f58 <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8005f82:	e7df      	b.n	8005f44 <ethernetif_input+0x10>
 8005f84:	20004fa8 	.word	0x20004fa8

08005f88 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b082      	sub	sp, #8
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d106      	bne.n	8005fa4 <ethernetif_init+0x1c>
 8005f96:	4b0e      	ldr	r3, [pc, #56]	; (8005fd0 <ethernetif_init+0x48>)
 8005f98:	f240 12a9 	movw	r2, #425	; 0x1a9
 8005f9c:	490d      	ldr	r1, [pc, #52]	; (8005fd4 <ethernetif_init+0x4c>)
 8005f9e:	480e      	ldr	r0, [pc, #56]	; (8005fd8 <ethernetif_init+0x50>)
 8005fa0:	f014 fc00 	bl	801a7a4 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2273      	movs	r2, #115	; 0x73
 8005fa8:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2274      	movs	r2, #116	; 0x74
 8005fb0:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	4a09      	ldr	r2, [pc, #36]	; (8005fdc <ethernetif_init+0x54>)
 8005fb8:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	4a08      	ldr	r2, [pc, #32]	; (8005fe0 <ethernetif_init+0x58>)
 8005fbe:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f7ff fe59 	bl	8005c78 <low_level_init>

  return ERR_OK;
 8005fc6:	2300      	movs	r3, #0
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	3708      	adds	r7, #8
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}
 8005fd0:	0801b3b0 	.word	0x0801b3b0
 8005fd4:	0801b3cc 	.word	0x0801b3cc
 8005fd8:	0801b3dc 	.word	0x0801b3dc
 8005fdc:	08017791 	.word	0x08017791
 8005fe0:	08005de9 	.word	0x08005de9

08005fe4 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b084      	sub	sp, #16
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8005ff0:	68f9      	ldr	r1, [r7, #12]
 8005ff2:	4809      	ldr	r0, [pc, #36]	; (8006018 <pbuf_free_custom+0x34>)
 8005ff4:	f007 f8ee 	bl	800d1d4 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8005ff8:	4b08      	ldr	r3, [pc, #32]	; (800601c <pbuf_free_custom+0x38>)
 8005ffa:	781b      	ldrb	r3, [r3, #0]
 8005ffc:	2b01      	cmp	r3, #1
 8005ffe:	d107      	bne.n	8006010 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8006000:	4b06      	ldr	r3, [pc, #24]	; (800601c <pbuf_free_custom+0x38>)
 8006002:	2200      	movs	r2, #0
 8006004:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8006006:	4b06      	ldr	r3, [pc, #24]	; (8006020 <pbuf_free_custom+0x3c>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4618      	mov	r0, r3
 800600c:	f002 f992 	bl	8008334 <osSemaphoreRelease>
  }
}
 8006010:	bf00      	nop
 8006012:	3710      	adds	r7, #16
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}
 8006018:	0801ea50 	.word	0x0801ea50
 800601c:	20004e64 	.word	0x20004e64
 8006020:	20004fa8 	.word	0x20004fa8

08006024 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8006028:	f7fa fe9e 	bl	8000d68 <HAL_GetTick>
 800602c:	4603      	mov	r3, r0
}
 800602e:	4618      	mov	r0, r3
 8006030:	bd80      	pop	{r7, pc}

08006032 <ethernet_link_thread>:
  * @param  argument: netif
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 8006032:	b580      	push	{r7, lr}
 8006034:	b082      	sub	sp, #8
 8006036:	af00      	add	r7, sp, #0
 8006038:	6078      	str	r0, [r7, #4]

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800603a:	2064      	movs	r0, #100	; 0x64
 800603c:	f002 f87c 	bl	8008138 <osDelay>
 8006040:	e7fb      	b.n	800603a <ethernet_link_thread+0x8>
	...

08006044 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b086      	sub	sp, #24
 8006048:	af02      	add	r7, sp, #8
 800604a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */

  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800604c:	4812      	ldr	r0, [pc, #72]	; (8006098 <HAL_ETH_RxAllocateCallback+0x54>)
 800604e:	f007 f84d 	bl	800d0ec <memp_malloc_pool>
 8006052:	60f8      	str	r0, [r7, #12]
  if (p)
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d014      	beq.n	8006084 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	f103 0220 	add.w	r2, r3, #32
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	4a0d      	ldr	r2, [pc, #52]	; (800609c <HAL_ETH_RxAllocateCallback+0x58>)
 8006068:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8006072:	9201      	str	r2, [sp, #4]
 8006074:	9300      	str	r3, [sp, #0]
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	2241      	movs	r2, #65	; 0x41
 800607a:	2100      	movs	r1, #0
 800607c:	2000      	movs	r0, #0
 800607e:	f007 fd51 	bl	800db24 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8006082:	e005      	b.n	8006090 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8006084:	4b06      	ldr	r3, [pc, #24]	; (80060a0 <HAL_ETH_RxAllocateCallback+0x5c>)
 8006086:	2201      	movs	r2, #1
 8006088:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2200      	movs	r2, #0
 800608e:	601a      	str	r2, [r3, #0]
}
 8006090:	bf00      	nop
 8006092:	3710      	adds	r7, #16
 8006094:	46bd      	mov	sp, r7
 8006096:	bd80      	pop	{r7, pc}
 8006098:	0801ea50 	.word	0x0801ea50
 800609c:	08005fe5 	.word	0x08005fe5
 80060a0:	20004e64 	.word	0x20004e64

080060a4 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 80060a4:	b480      	push	{r7}
 80060a6:	b089      	sub	sp, #36	; 0x24
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	60f8      	str	r0, [r7, #12]
 80060ac:	60b9      	str	r1, [r7, #8]
 80060ae:	607a      	str	r2, [r7, #4]
 80060b0:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80060ba:	2300      	movs	r3, #0
 80060bc:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	3b20      	subs	r3, #32
 80060c2:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 80060c4:	69fb      	ldr	r3, [r7, #28]
 80060c6:	2200      	movs	r2, #0
 80060c8:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 80060ca:	69fb      	ldr	r3, [r7, #28]
 80060cc:	2200      	movs	r2, #0
 80060ce:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 80060d0:	69fb      	ldr	r3, [r7, #28]
 80060d2:	887a      	ldrh	r2, [r7, #2]
 80060d4:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 80060d6:	69bb      	ldr	r3, [r7, #24]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d103      	bne.n	80060e6 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 80060de:	69bb      	ldr	r3, [r7, #24]
 80060e0:	69fa      	ldr	r2, [r7, #28]
 80060e2:	601a      	str	r2, [r3, #0]
 80060e4:	e003      	b.n	80060ee <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	69fa      	ldr	r2, [r7, #28]
 80060ec:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	69fa      	ldr	r2, [r7, #28]
 80060f2:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 80060f4:	69bb      	ldr	r3, [r7, #24]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	61fb      	str	r3, [r7, #28]
 80060fa:	e009      	b.n	8006110 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 80060fc:	69fb      	ldr	r3, [r7, #28]
 80060fe:	891a      	ldrh	r2, [r3, #8]
 8006100:	887b      	ldrh	r3, [r7, #2]
 8006102:	4413      	add	r3, r2
 8006104:	b29a      	uxth	r2, r3
 8006106:	69fb      	ldr	r3, [r7, #28]
 8006108:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800610a:	69fb      	ldr	r3, [r7, #28]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	61fb      	str	r3, [r7, #28]
 8006110:	69fb      	ldr	r3, [r7, #28]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d1f2      	bne.n	80060fc <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 8006116:	bf00      	nop
 8006118:	bf00      	nop
 800611a:	3724      	adds	r7, #36	; 0x24
 800611c:	46bd      	mov	sp, r7
 800611e:	bc80      	pop	{r7}
 8006120:	4770      	bx	lr

08006122 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8006122:	b580      	push	{r7, lr}
 8006124:	b082      	sub	sp, #8
 8006126:	af00      	add	r7, sp, #0
 8006128:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f007 feb4 	bl	800de98 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8006130:	bf00      	nop
 8006132:	3708      	adds	r7, #8
 8006134:	46bd      	mov	sp, r7
 8006136:	bd80      	pop	{r7, pc}

08006138 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b084      	sub	sp, #16
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
 8006140:	460b      	mov	r3, r1
 8006142:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006144:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006148:	f013 ff9e 	bl	801a088 <USBD_static_malloc>
 800614c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d109      	bne.n	8006168 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	32b0      	adds	r2, #176	; 0xb0
 800615e:	2100      	movs	r1, #0
 8006160:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006164:	2302      	movs	r3, #2
 8006166:	e0d4      	b.n	8006312 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006168:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800616c:	2100      	movs	r1, #0
 800616e:	68f8      	ldr	r0, [r7, #12]
 8006170:	f014 fa32 	bl	801a5d8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	32b0      	adds	r2, #176	; 0xb0
 800617e:	68f9      	ldr	r1, [r7, #12]
 8006180:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	32b0      	adds	r2, #176	; 0xb0
 800618e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	7c1b      	ldrb	r3, [r3, #16]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d138      	bne.n	8006212 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80061a0:	4b5e      	ldr	r3, [pc, #376]	; (800631c <USBD_CDC_Init+0x1e4>)
 80061a2:	7819      	ldrb	r1, [r3, #0]
 80061a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80061a8:	2202      	movs	r2, #2
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f013 fe49 	bl	8019e42 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80061b0:	4b5a      	ldr	r3, [pc, #360]	; (800631c <USBD_CDC_Init+0x1e4>)
 80061b2:	781b      	ldrb	r3, [r3, #0]
 80061b4:	f003 020f 	and.w	r2, r3, #15
 80061b8:	6879      	ldr	r1, [r7, #4]
 80061ba:	4613      	mov	r3, r2
 80061bc:	009b      	lsls	r3, r3, #2
 80061be:	4413      	add	r3, r2
 80061c0:	009b      	lsls	r3, r3, #2
 80061c2:	440b      	add	r3, r1
 80061c4:	3324      	adds	r3, #36	; 0x24
 80061c6:	2201      	movs	r2, #1
 80061c8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80061ca:	4b55      	ldr	r3, [pc, #340]	; (8006320 <USBD_CDC_Init+0x1e8>)
 80061cc:	7819      	ldrb	r1, [r3, #0]
 80061ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80061d2:	2202      	movs	r2, #2
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f013 fe34 	bl	8019e42 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80061da:	4b51      	ldr	r3, [pc, #324]	; (8006320 <USBD_CDC_Init+0x1e8>)
 80061dc:	781b      	ldrb	r3, [r3, #0]
 80061de:	f003 020f 	and.w	r2, r3, #15
 80061e2:	6879      	ldr	r1, [r7, #4]
 80061e4:	4613      	mov	r3, r2
 80061e6:	009b      	lsls	r3, r3, #2
 80061e8:	4413      	add	r3, r2
 80061ea:	009b      	lsls	r3, r3, #2
 80061ec:	440b      	add	r3, r1
 80061ee:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80061f2:	2201      	movs	r2, #1
 80061f4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80061f6:	4b4b      	ldr	r3, [pc, #300]	; (8006324 <USBD_CDC_Init+0x1ec>)
 80061f8:	781b      	ldrb	r3, [r3, #0]
 80061fa:	f003 020f 	and.w	r2, r3, #15
 80061fe:	6879      	ldr	r1, [r7, #4]
 8006200:	4613      	mov	r3, r2
 8006202:	009b      	lsls	r3, r3, #2
 8006204:	4413      	add	r3, r2
 8006206:	009b      	lsls	r3, r3, #2
 8006208:	440b      	add	r3, r1
 800620a:	3326      	adds	r3, #38	; 0x26
 800620c:	2210      	movs	r2, #16
 800620e:	801a      	strh	r2, [r3, #0]
 8006210:	e035      	b.n	800627e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006212:	4b42      	ldr	r3, [pc, #264]	; (800631c <USBD_CDC_Init+0x1e4>)
 8006214:	7819      	ldrb	r1, [r3, #0]
 8006216:	2340      	movs	r3, #64	; 0x40
 8006218:	2202      	movs	r2, #2
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f013 fe11 	bl	8019e42 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006220:	4b3e      	ldr	r3, [pc, #248]	; (800631c <USBD_CDC_Init+0x1e4>)
 8006222:	781b      	ldrb	r3, [r3, #0]
 8006224:	f003 020f 	and.w	r2, r3, #15
 8006228:	6879      	ldr	r1, [r7, #4]
 800622a:	4613      	mov	r3, r2
 800622c:	009b      	lsls	r3, r3, #2
 800622e:	4413      	add	r3, r2
 8006230:	009b      	lsls	r3, r3, #2
 8006232:	440b      	add	r3, r1
 8006234:	3324      	adds	r3, #36	; 0x24
 8006236:	2201      	movs	r2, #1
 8006238:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800623a:	4b39      	ldr	r3, [pc, #228]	; (8006320 <USBD_CDC_Init+0x1e8>)
 800623c:	7819      	ldrb	r1, [r3, #0]
 800623e:	2340      	movs	r3, #64	; 0x40
 8006240:	2202      	movs	r2, #2
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f013 fdfd 	bl	8019e42 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006248:	4b35      	ldr	r3, [pc, #212]	; (8006320 <USBD_CDC_Init+0x1e8>)
 800624a:	781b      	ldrb	r3, [r3, #0]
 800624c:	f003 020f 	and.w	r2, r3, #15
 8006250:	6879      	ldr	r1, [r7, #4]
 8006252:	4613      	mov	r3, r2
 8006254:	009b      	lsls	r3, r3, #2
 8006256:	4413      	add	r3, r2
 8006258:	009b      	lsls	r3, r3, #2
 800625a:	440b      	add	r3, r1
 800625c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006260:	2201      	movs	r2, #1
 8006262:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006264:	4b2f      	ldr	r3, [pc, #188]	; (8006324 <USBD_CDC_Init+0x1ec>)
 8006266:	781b      	ldrb	r3, [r3, #0]
 8006268:	f003 020f 	and.w	r2, r3, #15
 800626c:	6879      	ldr	r1, [r7, #4]
 800626e:	4613      	mov	r3, r2
 8006270:	009b      	lsls	r3, r3, #2
 8006272:	4413      	add	r3, r2
 8006274:	009b      	lsls	r3, r3, #2
 8006276:	440b      	add	r3, r1
 8006278:	3326      	adds	r3, #38	; 0x26
 800627a:	2210      	movs	r2, #16
 800627c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800627e:	4b29      	ldr	r3, [pc, #164]	; (8006324 <USBD_CDC_Init+0x1ec>)
 8006280:	7819      	ldrb	r1, [r3, #0]
 8006282:	2308      	movs	r3, #8
 8006284:	2203      	movs	r2, #3
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f013 fddb 	bl	8019e42 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800628c:	4b25      	ldr	r3, [pc, #148]	; (8006324 <USBD_CDC_Init+0x1ec>)
 800628e:	781b      	ldrb	r3, [r3, #0]
 8006290:	f003 020f 	and.w	r2, r3, #15
 8006294:	6879      	ldr	r1, [r7, #4]
 8006296:	4613      	mov	r3, r2
 8006298:	009b      	lsls	r3, r3, #2
 800629a:	4413      	add	r3, r2
 800629c:	009b      	lsls	r3, r3, #2
 800629e:	440b      	add	r3, r1
 80062a0:	3324      	adds	r3, #36	; 0x24
 80062a2:	2201      	movs	r2, #1
 80062a4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2200      	movs	r2, #0
 80062aa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80062b4:	687a      	ldr	r2, [r7, #4]
 80062b6:	33b0      	adds	r3, #176	; 0xb0
 80062b8:	009b      	lsls	r3, r3, #2
 80062ba:	4413      	add	r3, r2
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	2200      	movs	r2, #0
 80062c6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2200      	movs	r2, #0
 80062ce:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d101      	bne.n	80062e0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80062dc:	2302      	movs	r3, #2
 80062de:	e018      	b.n	8006312 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	7c1b      	ldrb	r3, [r3, #16]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d10a      	bne.n	80062fe <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80062e8:	4b0d      	ldr	r3, [pc, #52]	; (8006320 <USBD_CDC_Init+0x1e8>)
 80062ea:	7819      	ldrb	r1, [r3, #0]
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80062f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f013 fe91 	bl	801a01e <USBD_LL_PrepareReceive>
 80062fc:	e008      	b.n	8006310 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80062fe:	4b08      	ldr	r3, [pc, #32]	; (8006320 <USBD_CDC_Init+0x1e8>)
 8006300:	7819      	ldrb	r1, [r3, #0]
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006308:	2340      	movs	r3, #64	; 0x40
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f013 fe87 	bl	801a01e <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006310:	2300      	movs	r3, #0
}
 8006312:	4618      	mov	r0, r3
 8006314:	3710      	adds	r7, #16
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}
 800631a:	bf00      	nop
 800631c:	20000093 	.word	0x20000093
 8006320:	20000094 	.word	0x20000094
 8006324:	20000095 	.word	0x20000095

08006328 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b082      	sub	sp, #8
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
 8006330:	460b      	mov	r3, r1
 8006332:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006334:	4b3a      	ldr	r3, [pc, #232]	; (8006420 <USBD_CDC_DeInit+0xf8>)
 8006336:	781b      	ldrb	r3, [r3, #0]
 8006338:	4619      	mov	r1, r3
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f013 fda7 	bl	8019e8e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006340:	4b37      	ldr	r3, [pc, #220]	; (8006420 <USBD_CDC_DeInit+0xf8>)
 8006342:	781b      	ldrb	r3, [r3, #0]
 8006344:	f003 020f 	and.w	r2, r3, #15
 8006348:	6879      	ldr	r1, [r7, #4]
 800634a:	4613      	mov	r3, r2
 800634c:	009b      	lsls	r3, r3, #2
 800634e:	4413      	add	r3, r2
 8006350:	009b      	lsls	r3, r3, #2
 8006352:	440b      	add	r3, r1
 8006354:	3324      	adds	r3, #36	; 0x24
 8006356:	2200      	movs	r2, #0
 8006358:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800635a:	4b32      	ldr	r3, [pc, #200]	; (8006424 <USBD_CDC_DeInit+0xfc>)
 800635c:	781b      	ldrb	r3, [r3, #0]
 800635e:	4619      	mov	r1, r3
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f013 fd94 	bl	8019e8e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006366:	4b2f      	ldr	r3, [pc, #188]	; (8006424 <USBD_CDC_DeInit+0xfc>)
 8006368:	781b      	ldrb	r3, [r3, #0]
 800636a:	f003 020f 	and.w	r2, r3, #15
 800636e:	6879      	ldr	r1, [r7, #4]
 8006370:	4613      	mov	r3, r2
 8006372:	009b      	lsls	r3, r3, #2
 8006374:	4413      	add	r3, r2
 8006376:	009b      	lsls	r3, r3, #2
 8006378:	440b      	add	r3, r1
 800637a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800637e:	2200      	movs	r2, #0
 8006380:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006382:	4b29      	ldr	r3, [pc, #164]	; (8006428 <USBD_CDC_DeInit+0x100>)
 8006384:	781b      	ldrb	r3, [r3, #0]
 8006386:	4619      	mov	r1, r3
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	f013 fd80 	bl	8019e8e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800638e:	4b26      	ldr	r3, [pc, #152]	; (8006428 <USBD_CDC_DeInit+0x100>)
 8006390:	781b      	ldrb	r3, [r3, #0]
 8006392:	f003 020f 	and.w	r2, r3, #15
 8006396:	6879      	ldr	r1, [r7, #4]
 8006398:	4613      	mov	r3, r2
 800639a:	009b      	lsls	r3, r3, #2
 800639c:	4413      	add	r3, r2
 800639e:	009b      	lsls	r3, r3, #2
 80063a0:	440b      	add	r3, r1
 80063a2:	3324      	adds	r3, #36	; 0x24
 80063a4:	2200      	movs	r2, #0
 80063a6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80063a8:	4b1f      	ldr	r3, [pc, #124]	; (8006428 <USBD_CDC_DeInit+0x100>)
 80063aa:	781b      	ldrb	r3, [r3, #0]
 80063ac:	f003 020f 	and.w	r2, r3, #15
 80063b0:	6879      	ldr	r1, [r7, #4]
 80063b2:	4613      	mov	r3, r2
 80063b4:	009b      	lsls	r3, r3, #2
 80063b6:	4413      	add	r3, r2
 80063b8:	009b      	lsls	r3, r3, #2
 80063ba:	440b      	add	r3, r1
 80063bc:	3326      	adds	r3, #38	; 0x26
 80063be:	2200      	movs	r2, #0
 80063c0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	32b0      	adds	r2, #176	; 0xb0
 80063cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d01f      	beq.n	8006414 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80063da:	687a      	ldr	r2, [r7, #4]
 80063dc:	33b0      	adds	r3, #176	; 0xb0
 80063de:	009b      	lsls	r3, r3, #2
 80063e0:	4413      	add	r3, r2
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	32b0      	adds	r2, #176	; 0xb0
 80063f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063f6:	4618      	mov	r0, r3
 80063f8:	f013 fe52 	bl	801a0a0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	32b0      	adds	r2, #176	; 0xb0
 8006406:	2100      	movs	r1, #0
 8006408:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2200      	movs	r2, #0
 8006410:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006414:	2300      	movs	r3, #0
}
 8006416:	4618      	mov	r0, r3
 8006418:	3708      	adds	r7, #8
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}
 800641e:	bf00      	nop
 8006420:	20000093 	.word	0x20000093
 8006424:	20000094 	.word	0x20000094
 8006428:	20000095 	.word	0x20000095

0800642c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b086      	sub	sp, #24
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
 8006434:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	32b0      	adds	r2, #176	; 0xb0
 8006440:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006444:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006446:	2300      	movs	r3, #0
 8006448:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800644a:	2300      	movs	r3, #0
 800644c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800644e:	2300      	movs	r3, #0
 8006450:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d101      	bne.n	800645c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006458:	2303      	movs	r3, #3
 800645a:	e0bf      	b.n	80065dc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	781b      	ldrb	r3, [r3, #0]
 8006460:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006464:	2b00      	cmp	r3, #0
 8006466:	d050      	beq.n	800650a <USBD_CDC_Setup+0xde>
 8006468:	2b20      	cmp	r3, #32
 800646a:	f040 80af 	bne.w	80065cc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	88db      	ldrh	r3, [r3, #6]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d03a      	beq.n	80064ec <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	781b      	ldrb	r3, [r3, #0]
 800647a:	b25b      	sxtb	r3, r3
 800647c:	2b00      	cmp	r3, #0
 800647e:	da1b      	bge.n	80064b8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006486:	687a      	ldr	r2, [r7, #4]
 8006488:	33b0      	adds	r3, #176	; 0xb0
 800648a:	009b      	lsls	r3, r3, #2
 800648c:	4413      	add	r3, r2
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	689b      	ldr	r3, [r3, #8]
 8006492:	683a      	ldr	r2, [r7, #0]
 8006494:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006496:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006498:	683a      	ldr	r2, [r7, #0]
 800649a:	88d2      	ldrh	r2, [r2, #6]
 800649c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	88db      	ldrh	r3, [r3, #6]
 80064a2:	2b07      	cmp	r3, #7
 80064a4:	bf28      	it	cs
 80064a6:	2307      	movcs	r3, #7
 80064a8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	89fa      	ldrh	r2, [r7, #14]
 80064ae:	4619      	mov	r1, r3
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f001 fd36 	bl	8007f22 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80064b6:	e090      	b.n	80065da <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	785a      	ldrb	r2, [r3, #1]
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	88db      	ldrh	r3, [r3, #6]
 80064c6:	2b3f      	cmp	r3, #63	; 0x3f
 80064c8:	d803      	bhi.n	80064d2 <USBD_CDC_Setup+0xa6>
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	88db      	ldrh	r3, [r3, #6]
 80064ce:	b2da      	uxtb	r2, r3
 80064d0:	e000      	b.n	80064d4 <USBD_CDC_Setup+0xa8>
 80064d2:	2240      	movs	r2, #64	; 0x40
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80064da:	6939      	ldr	r1, [r7, #16]
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80064e2:	461a      	mov	r2, r3
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f001 fd48 	bl	8007f7a <USBD_CtlPrepareRx>
      break;
 80064ea:	e076      	b.n	80065da <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80064f2:	687a      	ldr	r2, [r7, #4]
 80064f4:	33b0      	adds	r3, #176	; 0xb0
 80064f6:	009b      	lsls	r3, r3, #2
 80064f8:	4413      	add	r3, r2
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	689b      	ldr	r3, [r3, #8]
 80064fe:	683a      	ldr	r2, [r7, #0]
 8006500:	7850      	ldrb	r0, [r2, #1]
 8006502:	2200      	movs	r2, #0
 8006504:	6839      	ldr	r1, [r7, #0]
 8006506:	4798      	blx	r3
      break;
 8006508:	e067      	b.n	80065da <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	785b      	ldrb	r3, [r3, #1]
 800650e:	2b0b      	cmp	r3, #11
 8006510:	d851      	bhi.n	80065b6 <USBD_CDC_Setup+0x18a>
 8006512:	a201      	add	r2, pc, #4	; (adr r2, 8006518 <USBD_CDC_Setup+0xec>)
 8006514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006518:	08006549 	.word	0x08006549
 800651c:	080065c5 	.word	0x080065c5
 8006520:	080065b7 	.word	0x080065b7
 8006524:	080065b7 	.word	0x080065b7
 8006528:	080065b7 	.word	0x080065b7
 800652c:	080065b7 	.word	0x080065b7
 8006530:	080065b7 	.word	0x080065b7
 8006534:	080065b7 	.word	0x080065b7
 8006538:	080065b7 	.word	0x080065b7
 800653c:	080065b7 	.word	0x080065b7
 8006540:	08006573 	.word	0x08006573
 8006544:	0800659d 	.word	0x0800659d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800654e:	b2db      	uxtb	r3, r3
 8006550:	2b03      	cmp	r3, #3
 8006552:	d107      	bne.n	8006564 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006554:	f107 030a 	add.w	r3, r7, #10
 8006558:	2202      	movs	r2, #2
 800655a:	4619      	mov	r1, r3
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f001 fce0 	bl	8007f22 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006562:	e032      	b.n	80065ca <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006564:	6839      	ldr	r1, [r7, #0]
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f001 fc6b 	bl	8007e42 <USBD_CtlError>
            ret = USBD_FAIL;
 800656c:	2303      	movs	r3, #3
 800656e:	75fb      	strb	r3, [r7, #23]
          break;
 8006570:	e02b      	b.n	80065ca <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006578:	b2db      	uxtb	r3, r3
 800657a:	2b03      	cmp	r3, #3
 800657c:	d107      	bne.n	800658e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800657e:	f107 030d 	add.w	r3, r7, #13
 8006582:	2201      	movs	r2, #1
 8006584:	4619      	mov	r1, r3
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f001 fccb 	bl	8007f22 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800658c:	e01d      	b.n	80065ca <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800658e:	6839      	ldr	r1, [r7, #0]
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f001 fc56 	bl	8007e42 <USBD_CtlError>
            ret = USBD_FAIL;
 8006596:	2303      	movs	r3, #3
 8006598:	75fb      	strb	r3, [r7, #23]
          break;
 800659a:	e016      	b.n	80065ca <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065a2:	b2db      	uxtb	r3, r3
 80065a4:	2b03      	cmp	r3, #3
 80065a6:	d00f      	beq.n	80065c8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80065a8:	6839      	ldr	r1, [r7, #0]
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f001 fc49 	bl	8007e42 <USBD_CtlError>
            ret = USBD_FAIL;
 80065b0:	2303      	movs	r3, #3
 80065b2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80065b4:	e008      	b.n	80065c8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80065b6:	6839      	ldr	r1, [r7, #0]
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f001 fc42 	bl	8007e42 <USBD_CtlError>
          ret = USBD_FAIL;
 80065be:	2303      	movs	r3, #3
 80065c0:	75fb      	strb	r3, [r7, #23]
          break;
 80065c2:	e002      	b.n	80065ca <USBD_CDC_Setup+0x19e>
          break;
 80065c4:	bf00      	nop
 80065c6:	e008      	b.n	80065da <USBD_CDC_Setup+0x1ae>
          break;
 80065c8:	bf00      	nop
      }
      break;
 80065ca:	e006      	b.n	80065da <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80065cc:	6839      	ldr	r1, [r7, #0]
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f001 fc37 	bl	8007e42 <USBD_CtlError>
      ret = USBD_FAIL;
 80065d4:	2303      	movs	r3, #3
 80065d6:	75fb      	strb	r3, [r7, #23]
      break;
 80065d8:	bf00      	nop
  }

  return (uint8_t)ret;
 80065da:	7dfb      	ldrb	r3, [r7, #23]
}
 80065dc:	4618      	mov	r0, r3
 80065de:	3718      	adds	r7, #24
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}

080065e4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b084      	sub	sp, #16
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
 80065ec:	460b      	mov	r3, r1
 80065ee:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80065f6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	32b0      	adds	r2, #176	; 0xb0
 8006602:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d101      	bne.n	800660e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800660a:	2303      	movs	r3, #3
 800660c:	e065      	b.n	80066da <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	32b0      	adds	r2, #176	; 0xb0
 8006618:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800661c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800661e:	78fb      	ldrb	r3, [r7, #3]
 8006620:	f003 020f 	and.w	r2, r3, #15
 8006624:	6879      	ldr	r1, [r7, #4]
 8006626:	4613      	mov	r3, r2
 8006628:	009b      	lsls	r3, r3, #2
 800662a:	4413      	add	r3, r2
 800662c:	009b      	lsls	r3, r3, #2
 800662e:	440b      	add	r3, r1
 8006630:	3318      	adds	r3, #24
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d02f      	beq.n	8006698 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006638:	78fb      	ldrb	r3, [r7, #3]
 800663a:	f003 020f 	and.w	r2, r3, #15
 800663e:	6879      	ldr	r1, [r7, #4]
 8006640:	4613      	mov	r3, r2
 8006642:	009b      	lsls	r3, r3, #2
 8006644:	4413      	add	r3, r2
 8006646:	009b      	lsls	r3, r3, #2
 8006648:	440b      	add	r3, r1
 800664a:	3318      	adds	r3, #24
 800664c:	681a      	ldr	r2, [r3, #0]
 800664e:	78fb      	ldrb	r3, [r7, #3]
 8006650:	f003 010f 	and.w	r1, r3, #15
 8006654:	68f8      	ldr	r0, [r7, #12]
 8006656:	460b      	mov	r3, r1
 8006658:	00db      	lsls	r3, r3, #3
 800665a:	440b      	add	r3, r1
 800665c:	009b      	lsls	r3, r3, #2
 800665e:	4403      	add	r3, r0
 8006660:	3348      	adds	r3, #72	; 0x48
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	fbb2 f1f3 	udiv	r1, r2, r3
 8006668:	fb01 f303 	mul.w	r3, r1, r3
 800666c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800666e:	2b00      	cmp	r3, #0
 8006670:	d112      	bne.n	8006698 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006672:	78fb      	ldrb	r3, [r7, #3]
 8006674:	f003 020f 	and.w	r2, r3, #15
 8006678:	6879      	ldr	r1, [r7, #4]
 800667a:	4613      	mov	r3, r2
 800667c:	009b      	lsls	r3, r3, #2
 800667e:	4413      	add	r3, r2
 8006680:	009b      	lsls	r3, r3, #2
 8006682:	440b      	add	r3, r1
 8006684:	3318      	adds	r3, #24
 8006686:	2200      	movs	r2, #0
 8006688:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800668a:	78f9      	ldrb	r1, [r7, #3]
 800668c:	2300      	movs	r3, #0
 800668e:	2200      	movs	r2, #0
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f013 fca3 	bl	8019fdc <USBD_LL_Transmit>
 8006696:	e01f      	b.n	80066d8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	2200      	movs	r2, #0
 800669c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80066a6:	687a      	ldr	r2, [r7, #4]
 80066a8:	33b0      	adds	r3, #176	; 0xb0
 80066aa:	009b      	lsls	r3, r3, #2
 80066ac:	4413      	add	r3, r2
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	691b      	ldr	r3, [r3, #16]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d010      	beq.n	80066d8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80066bc:	687a      	ldr	r2, [r7, #4]
 80066be:	33b0      	adds	r3, #176	; 0xb0
 80066c0:	009b      	lsls	r3, r3, #2
 80066c2:	4413      	add	r3, r2
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	691b      	ldr	r3, [r3, #16]
 80066c8:	68ba      	ldr	r2, [r7, #8]
 80066ca:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80066ce:	68ba      	ldr	r2, [r7, #8]
 80066d0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80066d4:	78fa      	ldrb	r2, [r7, #3]
 80066d6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80066d8:	2300      	movs	r3, #0
}
 80066da:	4618      	mov	r0, r3
 80066dc:	3710      	adds	r7, #16
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}

080066e2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80066e2:	b580      	push	{r7, lr}
 80066e4:	b084      	sub	sp, #16
 80066e6:	af00      	add	r7, sp, #0
 80066e8:	6078      	str	r0, [r7, #4]
 80066ea:	460b      	mov	r3, r1
 80066ec:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	32b0      	adds	r2, #176	; 0xb0
 80066f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066fc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	32b0      	adds	r2, #176	; 0xb0
 8006708:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d101      	bne.n	8006714 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006710:	2303      	movs	r3, #3
 8006712:	e01a      	b.n	800674a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006714:	78fb      	ldrb	r3, [r7, #3]
 8006716:	4619      	mov	r1, r3
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f013 fca1 	bl	801a060 <USBD_LL_GetRxDataSize>
 800671e:	4602      	mov	r2, r0
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800672c:	687a      	ldr	r2, [r7, #4]
 800672e:	33b0      	adds	r3, #176	; 0xb0
 8006730:	009b      	lsls	r3, r3, #2
 8006732:	4413      	add	r3, r2
 8006734:	685b      	ldr	r3, [r3, #4]
 8006736:	68db      	ldr	r3, [r3, #12]
 8006738:	68fa      	ldr	r2, [r7, #12]
 800673a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800673e:	68fa      	ldr	r2, [r7, #12]
 8006740:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006744:	4611      	mov	r1, r2
 8006746:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006748:	2300      	movs	r3, #0
}
 800674a:	4618      	mov	r0, r3
 800674c:	3710      	adds	r7, #16
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}

08006752 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006752:	b580      	push	{r7, lr}
 8006754:	b084      	sub	sp, #16
 8006756:	af00      	add	r7, sp, #0
 8006758:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	32b0      	adds	r2, #176	; 0xb0
 8006764:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006768:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d101      	bne.n	8006774 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006770:	2303      	movs	r3, #3
 8006772:	e025      	b.n	80067c0 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800677a:	687a      	ldr	r2, [r7, #4]
 800677c:	33b0      	adds	r3, #176	; 0xb0
 800677e:	009b      	lsls	r3, r3, #2
 8006780:	4413      	add	r3, r2
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d01a      	beq.n	80067be <USBD_CDC_EP0_RxReady+0x6c>
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800678e:	2bff      	cmp	r3, #255	; 0xff
 8006790:	d015      	beq.n	80067be <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006798:	687a      	ldr	r2, [r7, #4]
 800679a:	33b0      	adds	r3, #176	; 0xb0
 800679c:	009b      	lsls	r3, r3, #2
 800679e:	4413      	add	r3, r2
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	689b      	ldr	r3, [r3, #8]
 80067a4:	68fa      	ldr	r2, [r7, #12]
 80067a6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80067aa:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80067ac:	68fa      	ldr	r2, [r7, #12]
 80067ae:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80067b2:	b292      	uxth	r2, r2
 80067b4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	22ff      	movs	r2, #255	; 0xff
 80067ba:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80067be:	2300      	movs	r3, #0
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	3710      	adds	r7, #16
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd80      	pop	{r7, pc}

080067c8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b086      	sub	sp, #24
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80067d0:	2182      	movs	r1, #130	; 0x82
 80067d2:	4818      	ldr	r0, [pc, #96]	; (8006834 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80067d4:	f000 fcfe 	bl	80071d4 <USBD_GetEpDesc>
 80067d8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80067da:	2101      	movs	r1, #1
 80067dc:	4815      	ldr	r0, [pc, #84]	; (8006834 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80067de:	f000 fcf9 	bl	80071d4 <USBD_GetEpDesc>
 80067e2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80067e4:	2181      	movs	r1, #129	; 0x81
 80067e6:	4813      	ldr	r0, [pc, #76]	; (8006834 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80067e8:	f000 fcf4 	bl	80071d4 <USBD_GetEpDesc>
 80067ec:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d002      	beq.n	80067fa <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	2210      	movs	r2, #16
 80067f8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d006      	beq.n	800680e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006800:	693b      	ldr	r3, [r7, #16]
 8006802:	2200      	movs	r2, #0
 8006804:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006808:	711a      	strb	r2, [r3, #4]
 800680a:	2200      	movs	r2, #0
 800680c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d006      	beq.n	8006822 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	2200      	movs	r2, #0
 8006818:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800681c:	711a      	strb	r2, [r3, #4]
 800681e:	2200      	movs	r2, #0
 8006820:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2243      	movs	r2, #67	; 0x43
 8006826:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006828:	4b02      	ldr	r3, [pc, #8]	; (8006834 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800682a:	4618      	mov	r0, r3
 800682c:	3718      	adds	r7, #24
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}
 8006832:	bf00      	nop
 8006834:	20000050 	.word	0x20000050

08006838 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b086      	sub	sp, #24
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006840:	2182      	movs	r1, #130	; 0x82
 8006842:	4818      	ldr	r0, [pc, #96]	; (80068a4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006844:	f000 fcc6 	bl	80071d4 <USBD_GetEpDesc>
 8006848:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800684a:	2101      	movs	r1, #1
 800684c:	4815      	ldr	r0, [pc, #84]	; (80068a4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800684e:	f000 fcc1 	bl	80071d4 <USBD_GetEpDesc>
 8006852:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006854:	2181      	movs	r1, #129	; 0x81
 8006856:	4813      	ldr	r0, [pc, #76]	; (80068a4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006858:	f000 fcbc 	bl	80071d4 <USBD_GetEpDesc>
 800685c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d002      	beq.n	800686a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	2210      	movs	r2, #16
 8006868:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d006      	beq.n	800687e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006870:	693b      	ldr	r3, [r7, #16]
 8006872:	2200      	movs	r2, #0
 8006874:	711a      	strb	r2, [r3, #4]
 8006876:	2200      	movs	r2, #0
 8006878:	f042 0202 	orr.w	r2, r2, #2
 800687c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d006      	beq.n	8006892 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2200      	movs	r2, #0
 8006888:	711a      	strb	r2, [r3, #4]
 800688a:	2200      	movs	r2, #0
 800688c:	f042 0202 	orr.w	r2, r2, #2
 8006890:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2243      	movs	r2, #67	; 0x43
 8006896:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006898:	4b02      	ldr	r3, [pc, #8]	; (80068a4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800689a:	4618      	mov	r0, r3
 800689c:	3718      	adds	r7, #24
 800689e:	46bd      	mov	sp, r7
 80068a0:	bd80      	pop	{r7, pc}
 80068a2:	bf00      	nop
 80068a4:	20000050 	.word	0x20000050

080068a8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b086      	sub	sp, #24
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80068b0:	2182      	movs	r1, #130	; 0x82
 80068b2:	4818      	ldr	r0, [pc, #96]	; (8006914 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80068b4:	f000 fc8e 	bl	80071d4 <USBD_GetEpDesc>
 80068b8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80068ba:	2101      	movs	r1, #1
 80068bc:	4815      	ldr	r0, [pc, #84]	; (8006914 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80068be:	f000 fc89 	bl	80071d4 <USBD_GetEpDesc>
 80068c2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80068c4:	2181      	movs	r1, #129	; 0x81
 80068c6:	4813      	ldr	r0, [pc, #76]	; (8006914 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80068c8:	f000 fc84 	bl	80071d4 <USBD_GetEpDesc>
 80068cc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d002      	beq.n	80068da <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	2210      	movs	r2, #16
 80068d8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d006      	beq.n	80068ee <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	2200      	movs	r2, #0
 80068e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80068e8:	711a      	strb	r2, [r3, #4]
 80068ea:	2200      	movs	r2, #0
 80068ec:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d006      	beq.n	8006902 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2200      	movs	r2, #0
 80068f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80068fc:	711a      	strb	r2, [r3, #4]
 80068fe:	2200      	movs	r2, #0
 8006900:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2243      	movs	r2, #67	; 0x43
 8006906:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006908:	4b02      	ldr	r3, [pc, #8]	; (8006914 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800690a:	4618      	mov	r0, r3
 800690c:	3718      	adds	r7, #24
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}
 8006912:	bf00      	nop
 8006914:	20000050 	.word	0x20000050

08006918 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006918:	b480      	push	{r7}
 800691a:	b083      	sub	sp, #12
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	220a      	movs	r2, #10
 8006924:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006926:	4b03      	ldr	r3, [pc, #12]	; (8006934 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006928:	4618      	mov	r0, r3
 800692a:	370c      	adds	r7, #12
 800692c:	46bd      	mov	sp, r7
 800692e:	bc80      	pop	{r7}
 8006930:	4770      	bx	lr
 8006932:	bf00      	nop
 8006934:	2000000c 	.word	0x2000000c

08006938 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006938:	b480      	push	{r7}
 800693a:	b083      	sub	sp, #12
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
 8006940:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d101      	bne.n	800694c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006948:	2303      	movs	r3, #3
 800694a:	e009      	b.n	8006960 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006952:	687a      	ldr	r2, [r7, #4]
 8006954:	33b0      	adds	r3, #176	; 0xb0
 8006956:	009b      	lsls	r3, r3, #2
 8006958:	4413      	add	r3, r2
 800695a:	683a      	ldr	r2, [r7, #0]
 800695c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800695e:	2300      	movs	r3, #0
}
 8006960:	4618      	mov	r0, r3
 8006962:	370c      	adds	r7, #12
 8006964:	46bd      	mov	sp, r7
 8006966:	bc80      	pop	{r7}
 8006968:	4770      	bx	lr

0800696a <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800696a:	b480      	push	{r7}
 800696c:	b087      	sub	sp, #28
 800696e:	af00      	add	r7, sp, #0
 8006970:	60f8      	str	r0, [r7, #12]
 8006972:	60b9      	str	r1, [r7, #8]
 8006974:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	32b0      	adds	r2, #176	; 0xb0
 8006980:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006984:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d101      	bne.n	8006990 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800698c:	2303      	movs	r3, #3
 800698e:	e008      	b.n	80069a2 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	68ba      	ldr	r2, [r7, #8]
 8006994:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	687a      	ldr	r2, [r7, #4]
 800699c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80069a0:	2300      	movs	r3, #0
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	371c      	adds	r7, #28
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bc80      	pop	{r7}
 80069aa:	4770      	bx	lr

080069ac <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80069ac:	b480      	push	{r7}
 80069ae:	b085      	sub	sp, #20
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
 80069b4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	32b0      	adds	r2, #176	; 0xb0
 80069c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069c4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d101      	bne.n	80069d0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80069cc:	2303      	movs	r3, #3
 80069ce:	e004      	b.n	80069da <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	683a      	ldr	r2, [r7, #0]
 80069d4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80069d8:	2300      	movs	r3, #0
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3714      	adds	r7, #20
 80069de:	46bd      	mov	sp, r7
 80069e0:	bc80      	pop	{r7}
 80069e2:	4770      	bx	lr

080069e4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b084      	sub	sp, #16
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	32b0      	adds	r2, #176	; 0xb0
 80069f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069fa:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	32b0      	adds	r2, #176	; 0xb0
 8006a06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d101      	bne.n	8006a12 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006a0e:	2303      	movs	r3, #3
 8006a10:	e018      	b.n	8006a44 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	7c1b      	ldrb	r3, [r3, #16]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d10a      	bne.n	8006a30 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006a1a:	4b0c      	ldr	r3, [pc, #48]	; (8006a4c <USBD_CDC_ReceivePacket+0x68>)
 8006a1c:	7819      	ldrb	r1, [r3, #0]
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006a24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f013 faf8 	bl	801a01e <USBD_LL_PrepareReceive>
 8006a2e:	e008      	b.n	8006a42 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006a30:	4b06      	ldr	r3, [pc, #24]	; (8006a4c <USBD_CDC_ReceivePacket+0x68>)
 8006a32:	7819      	ldrb	r1, [r3, #0]
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006a3a:	2340      	movs	r3, #64	; 0x40
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f013 faee 	bl	801a01e <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006a42:	2300      	movs	r3, #0
}
 8006a44:	4618      	mov	r0, r3
 8006a46:	3710      	adds	r7, #16
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bd80      	pop	{r7, pc}
 8006a4c:	20000094 	.word	0x20000094

08006a50 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b086      	sub	sp, #24
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	60f8      	str	r0, [r7, #12]
 8006a58:	60b9      	str	r1, [r7, #8]
 8006a5a:	4613      	mov	r3, r2
 8006a5c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d101      	bne.n	8006a68 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006a64:	2303      	movs	r3, #3
 8006a66:	e01f      	b.n	8006aa8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	2200      	movs	r2, #0
 8006a74:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d003      	beq.n	8006a8e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	68ba      	ldr	r2, [r7, #8]
 8006a8a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	2201      	movs	r2, #1
 8006a92:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	79fa      	ldrb	r2, [r7, #7]
 8006a9a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006a9c:	68f8      	ldr	r0, [r7, #12]
 8006a9e:	f013 f969 	bl	8019d74 <USBD_LL_Init>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006aa6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	3718      	adds	r7, #24
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bd80      	pop	{r7, pc}

08006ab0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b084      	sub	sp, #16
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
 8006ab8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006aba:	2300      	movs	r3, #0
 8006abc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d101      	bne.n	8006ac8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006ac4:	2303      	movs	r3, #3
 8006ac6:	e025      	b.n	8006b14 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	683a      	ldr	r2, [r7, #0]
 8006acc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	32ae      	adds	r2, #174	; 0xae
 8006ada:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d00f      	beq.n	8006b04 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	32ae      	adds	r2, #174	; 0xae
 8006aee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006af4:	f107 020e 	add.w	r2, r7, #14
 8006af8:	4610      	mov	r0, r2
 8006afa:	4798      	blx	r3
 8006afc:	4602      	mov	r2, r0
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006b0a:	1c5a      	adds	r2, r3, #1
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006b12:	2300      	movs	r3, #0
}
 8006b14:	4618      	mov	r0, r3
 8006b16:	3710      	adds	r7, #16
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bd80      	pop	{r7, pc}

08006b1c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b082      	sub	sp, #8
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006b24:	6878      	ldr	r0, [r7, #4]
 8006b26:	f013 f971 	bl	8019e0c <USBD_LL_Start>
 8006b2a:	4603      	mov	r3, r0
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3708      	adds	r7, #8
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}

08006b34 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006b34:	b480      	push	{r7}
 8006b36:	b083      	sub	sp, #12
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006b3c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	370c      	adds	r7, #12
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bc80      	pop	{r7}
 8006b46:	4770      	bx	lr

08006b48 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b084      	sub	sp, #16
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
 8006b50:	460b      	mov	r3, r1
 8006b52:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b54:	2300      	movs	r3, #0
 8006b56:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d009      	beq.n	8006b76 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	78fa      	ldrb	r2, [r7, #3]
 8006b6c:	4611      	mov	r1, r2
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	4798      	blx	r3
 8006b72:	4603      	mov	r3, r0
 8006b74:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006b76:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	3710      	adds	r7, #16
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bd80      	pop	{r7, pc}

08006b80 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b084      	sub	sp, #16
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
 8006b88:	460b      	mov	r3, r1
 8006b8a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	78fa      	ldrb	r2, [r7, #3]
 8006b9a:	4611      	mov	r1, r2
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	4798      	blx	r3
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d001      	beq.n	8006baa <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006ba6:	2303      	movs	r3, #3
 8006ba8:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006baa:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	3710      	adds	r7, #16
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}

08006bb4 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b084      	sub	sp, #16
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
 8006bbc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006bc4:	6839      	ldr	r1, [r7, #0]
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f001 f901 	bl	8007dce <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2201      	movs	r2, #1
 8006bd0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006bda:	461a      	mov	r2, r3
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006be8:	f003 031f 	and.w	r3, r3, #31
 8006bec:	2b02      	cmp	r3, #2
 8006bee:	d01a      	beq.n	8006c26 <USBD_LL_SetupStage+0x72>
 8006bf0:	2b02      	cmp	r3, #2
 8006bf2:	d822      	bhi.n	8006c3a <USBD_LL_SetupStage+0x86>
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d002      	beq.n	8006bfe <USBD_LL_SetupStage+0x4a>
 8006bf8:	2b01      	cmp	r3, #1
 8006bfa:	d00a      	beq.n	8006c12 <USBD_LL_SetupStage+0x5e>
 8006bfc:	e01d      	b.n	8006c3a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006c04:	4619      	mov	r1, r3
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f000 fb58 	bl	80072bc <USBD_StdDevReq>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	73fb      	strb	r3, [r7, #15]
      break;
 8006c10:	e020      	b.n	8006c54 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006c18:	4619      	mov	r1, r3
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f000 fbc0 	bl	80073a0 <USBD_StdItfReq>
 8006c20:	4603      	mov	r3, r0
 8006c22:	73fb      	strb	r3, [r7, #15]
      break;
 8006c24:	e016      	b.n	8006c54 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006c2c:	4619      	mov	r1, r3
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f000 fc22 	bl	8007478 <USBD_StdEPReq>
 8006c34:	4603      	mov	r3, r0
 8006c36:	73fb      	strb	r3, [r7, #15]
      break;
 8006c38:	e00c      	b.n	8006c54 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006c40:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006c44:	b2db      	uxtb	r3, r3
 8006c46:	4619      	mov	r1, r3
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f013 f93f 	bl	8019ecc <USBD_LL_StallEP>
 8006c4e:	4603      	mov	r3, r0
 8006c50:	73fb      	strb	r3, [r7, #15]
      break;
 8006c52:	bf00      	nop
  }

  return ret;
 8006c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	3710      	adds	r7, #16
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}

08006c5e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006c5e:	b580      	push	{r7, lr}
 8006c60:	b086      	sub	sp, #24
 8006c62:	af00      	add	r7, sp, #0
 8006c64:	60f8      	str	r0, [r7, #12]
 8006c66:	460b      	mov	r3, r1
 8006c68:	607a      	str	r2, [r7, #4]
 8006c6a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006c70:	7afb      	ldrb	r3, [r7, #11]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d16e      	bne.n	8006d54 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006c7c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006c84:	2b03      	cmp	r3, #3
 8006c86:	f040 8098 	bne.w	8006dba <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	689a      	ldr	r2, [r3, #8]
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	68db      	ldr	r3, [r3, #12]
 8006c92:	429a      	cmp	r2, r3
 8006c94:	d913      	bls.n	8006cbe <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	689a      	ldr	r2, [r3, #8]
 8006c9a:	693b      	ldr	r3, [r7, #16]
 8006c9c:	68db      	ldr	r3, [r3, #12]
 8006c9e:	1ad2      	subs	r2, r2, r3
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	68da      	ldr	r2, [r3, #12]
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	689b      	ldr	r3, [r3, #8]
 8006cac:	4293      	cmp	r3, r2
 8006cae:	bf28      	it	cs
 8006cb0:	4613      	movcs	r3, r2
 8006cb2:	461a      	mov	r2, r3
 8006cb4:	6879      	ldr	r1, [r7, #4]
 8006cb6:	68f8      	ldr	r0, [r7, #12]
 8006cb8:	f001 f97c 	bl	8007fb4 <USBD_CtlContinueRx>
 8006cbc:	e07d      	b.n	8006dba <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006cc4:	f003 031f 	and.w	r3, r3, #31
 8006cc8:	2b02      	cmp	r3, #2
 8006cca:	d014      	beq.n	8006cf6 <USBD_LL_DataOutStage+0x98>
 8006ccc:	2b02      	cmp	r3, #2
 8006cce:	d81d      	bhi.n	8006d0c <USBD_LL_DataOutStage+0xae>
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d002      	beq.n	8006cda <USBD_LL_DataOutStage+0x7c>
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	d003      	beq.n	8006ce0 <USBD_LL_DataOutStage+0x82>
 8006cd8:	e018      	b.n	8006d0c <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	75bb      	strb	r3, [r7, #22]
            break;
 8006cde:	e018      	b.n	8006d12 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006ce6:	b2db      	uxtb	r3, r3
 8006ce8:	4619      	mov	r1, r3
 8006cea:	68f8      	ldr	r0, [r7, #12]
 8006cec:	f000 fa5a 	bl	80071a4 <USBD_CoreFindIF>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	75bb      	strb	r3, [r7, #22]
            break;
 8006cf4:	e00d      	b.n	8006d12 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006cfc:	b2db      	uxtb	r3, r3
 8006cfe:	4619      	mov	r1, r3
 8006d00:	68f8      	ldr	r0, [r7, #12]
 8006d02:	f000 fa5b 	bl	80071bc <USBD_CoreFindEP>
 8006d06:	4603      	mov	r3, r0
 8006d08:	75bb      	strb	r3, [r7, #22]
            break;
 8006d0a:	e002      	b.n	8006d12 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	75bb      	strb	r3, [r7, #22]
            break;
 8006d10:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006d12:	7dbb      	ldrb	r3, [r7, #22]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d119      	bne.n	8006d4c <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d1e:	b2db      	uxtb	r3, r3
 8006d20:	2b03      	cmp	r3, #3
 8006d22:	d113      	bne.n	8006d4c <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006d24:	7dba      	ldrb	r2, [r7, #22]
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	32ae      	adds	r2, #174	; 0xae
 8006d2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d2e:	691b      	ldr	r3, [r3, #16]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d00b      	beq.n	8006d4c <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006d34:	7dba      	ldrb	r2, [r7, #22]
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006d3c:	7dba      	ldrb	r2, [r7, #22]
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	32ae      	adds	r2, #174	; 0xae
 8006d42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d46:	691b      	ldr	r3, [r3, #16]
 8006d48:	68f8      	ldr	r0, [r7, #12]
 8006d4a:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006d4c:	68f8      	ldr	r0, [r7, #12]
 8006d4e:	f001 f942 	bl	8007fd6 <USBD_CtlSendStatus>
 8006d52:	e032      	b.n	8006dba <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006d54:	7afb      	ldrb	r3, [r7, #11]
 8006d56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d5a:	b2db      	uxtb	r3, r3
 8006d5c:	4619      	mov	r1, r3
 8006d5e:	68f8      	ldr	r0, [r7, #12]
 8006d60:	f000 fa2c 	bl	80071bc <USBD_CoreFindEP>
 8006d64:	4603      	mov	r3, r0
 8006d66:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006d68:	7dbb      	ldrb	r3, [r7, #22]
 8006d6a:	2bff      	cmp	r3, #255	; 0xff
 8006d6c:	d025      	beq.n	8006dba <USBD_LL_DataOutStage+0x15c>
 8006d6e:	7dbb      	ldrb	r3, [r7, #22]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d122      	bne.n	8006dba <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d7a:	b2db      	uxtb	r3, r3
 8006d7c:	2b03      	cmp	r3, #3
 8006d7e:	d117      	bne.n	8006db0 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006d80:	7dba      	ldrb	r2, [r7, #22]
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	32ae      	adds	r2, #174	; 0xae
 8006d86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d8a:	699b      	ldr	r3, [r3, #24]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d00f      	beq.n	8006db0 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006d90:	7dba      	ldrb	r2, [r7, #22]
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006d98:	7dba      	ldrb	r2, [r7, #22]
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	32ae      	adds	r2, #174	; 0xae
 8006d9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006da2:	699b      	ldr	r3, [r3, #24]
 8006da4:	7afa      	ldrb	r2, [r7, #11]
 8006da6:	4611      	mov	r1, r2
 8006da8:	68f8      	ldr	r0, [r7, #12]
 8006daa:	4798      	blx	r3
 8006dac:	4603      	mov	r3, r0
 8006dae:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006db0:	7dfb      	ldrb	r3, [r7, #23]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d001      	beq.n	8006dba <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006db6:	7dfb      	ldrb	r3, [r7, #23]
 8006db8:	e000      	b.n	8006dbc <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006dba:	2300      	movs	r3, #0
}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	3718      	adds	r7, #24
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd80      	pop	{r7, pc}

08006dc4 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b086      	sub	sp, #24
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	60f8      	str	r0, [r7, #12]
 8006dcc:	460b      	mov	r3, r1
 8006dce:	607a      	str	r2, [r7, #4]
 8006dd0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006dd2:	7afb      	ldrb	r3, [r7, #11]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d16f      	bne.n	8006eb8 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	3314      	adds	r3, #20
 8006ddc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006de4:	2b02      	cmp	r3, #2
 8006de6:	d15a      	bne.n	8006e9e <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	689a      	ldr	r2, [r3, #8]
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	68db      	ldr	r3, [r3, #12]
 8006df0:	429a      	cmp	r2, r3
 8006df2:	d914      	bls.n	8006e1e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	689a      	ldr	r2, [r3, #8]
 8006df8:	693b      	ldr	r3, [r7, #16]
 8006dfa:	68db      	ldr	r3, [r3, #12]
 8006dfc:	1ad2      	subs	r2, r2, r3
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	689b      	ldr	r3, [r3, #8]
 8006e06:	461a      	mov	r2, r3
 8006e08:	6879      	ldr	r1, [r7, #4]
 8006e0a:	68f8      	ldr	r0, [r7, #12]
 8006e0c:	f001 f8a4 	bl	8007f58 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006e10:	2300      	movs	r3, #0
 8006e12:	2200      	movs	r2, #0
 8006e14:	2100      	movs	r1, #0
 8006e16:	68f8      	ldr	r0, [r7, #12]
 8006e18:	f013 f901 	bl	801a01e <USBD_LL_PrepareReceive>
 8006e1c:	e03f      	b.n	8006e9e <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006e1e:	693b      	ldr	r3, [r7, #16]
 8006e20:	68da      	ldr	r2, [r3, #12]
 8006e22:	693b      	ldr	r3, [r7, #16]
 8006e24:	689b      	ldr	r3, [r3, #8]
 8006e26:	429a      	cmp	r2, r3
 8006e28:	d11c      	bne.n	8006e64 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006e2a:	693b      	ldr	r3, [r7, #16]
 8006e2c:	685a      	ldr	r2, [r3, #4]
 8006e2e:	693b      	ldr	r3, [r7, #16]
 8006e30:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006e32:	429a      	cmp	r2, r3
 8006e34:	d316      	bcc.n	8006e64 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006e36:	693b      	ldr	r3, [r7, #16]
 8006e38:	685a      	ldr	r2, [r3, #4]
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006e40:	429a      	cmp	r2, r3
 8006e42:	d20f      	bcs.n	8006e64 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006e44:	2200      	movs	r2, #0
 8006e46:	2100      	movs	r1, #0
 8006e48:	68f8      	ldr	r0, [r7, #12]
 8006e4a:	f001 f885 	bl	8007f58 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	2200      	movs	r2, #0
 8006e52:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006e56:	2300      	movs	r3, #0
 8006e58:	2200      	movs	r2, #0
 8006e5a:	2100      	movs	r1, #0
 8006e5c:	68f8      	ldr	r0, [r7, #12]
 8006e5e:	f013 f8de 	bl	801a01e <USBD_LL_PrepareReceive>
 8006e62:	e01c      	b.n	8006e9e <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e6a:	b2db      	uxtb	r3, r3
 8006e6c:	2b03      	cmp	r3, #3
 8006e6e:	d10f      	bne.n	8006e90 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e76:	68db      	ldr	r3, [r3, #12]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d009      	beq.n	8006e90 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e8a:	68db      	ldr	r3, [r3, #12]
 8006e8c:	68f8      	ldr	r0, [r7, #12]
 8006e8e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006e90:	2180      	movs	r1, #128	; 0x80
 8006e92:	68f8      	ldr	r0, [r7, #12]
 8006e94:	f013 f81a 	bl	8019ecc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006e98:	68f8      	ldr	r0, [r7, #12]
 8006e9a:	f001 f8af 	bl	8007ffc <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d03a      	beq.n	8006f1e <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006ea8:	68f8      	ldr	r0, [r7, #12]
 8006eaa:	f7ff fe43 	bl	8006b34 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006eb6:	e032      	b.n	8006f1e <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006eb8:	7afb      	ldrb	r3, [r7, #11]
 8006eba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006ebe:	b2db      	uxtb	r3, r3
 8006ec0:	4619      	mov	r1, r3
 8006ec2:	68f8      	ldr	r0, [r7, #12]
 8006ec4:	f000 f97a 	bl	80071bc <USBD_CoreFindEP>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006ecc:	7dfb      	ldrb	r3, [r7, #23]
 8006ece:	2bff      	cmp	r3, #255	; 0xff
 8006ed0:	d025      	beq.n	8006f1e <USBD_LL_DataInStage+0x15a>
 8006ed2:	7dfb      	ldrb	r3, [r7, #23]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d122      	bne.n	8006f1e <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ede:	b2db      	uxtb	r3, r3
 8006ee0:	2b03      	cmp	r3, #3
 8006ee2:	d11c      	bne.n	8006f1e <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006ee4:	7dfa      	ldrb	r2, [r7, #23]
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	32ae      	adds	r2, #174	; 0xae
 8006eea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006eee:	695b      	ldr	r3, [r3, #20]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d014      	beq.n	8006f1e <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006ef4:	7dfa      	ldrb	r2, [r7, #23]
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006efc:	7dfa      	ldrb	r2, [r7, #23]
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	32ae      	adds	r2, #174	; 0xae
 8006f02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f06:	695b      	ldr	r3, [r3, #20]
 8006f08:	7afa      	ldrb	r2, [r7, #11]
 8006f0a:	4611      	mov	r1, r2
 8006f0c:	68f8      	ldr	r0, [r7, #12]
 8006f0e:	4798      	blx	r3
 8006f10:	4603      	mov	r3, r0
 8006f12:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006f14:	7dbb      	ldrb	r3, [r7, #22]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d001      	beq.n	8006f1e <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006f1a:	7dbb      	ldrb	r3, [r7, #22]
 8006f1c:	e000      	b.n	8006f20 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006f1e:	2300      	movs	r3, #0
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	3718      	adds	r7, #24
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}

08006f28 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b084      	sub	sp, #16
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f30:	2300      	movs	r3, #0
 8006f32:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2201      	movs	r2, #1
 8006f38:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2200      	movs	r2, #0
 8006f48:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2200      	movs	r2, #0
 8006f56:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d014      	beq.n	8006f8e <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f6a:	685b      	ldr	r3, [r3, #4]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d00e      	beq.n	8006f8e <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f76:	685b      	ldr	r3, [r3, #4]
 8006f78:	687a      	ldr	r2, [r7, #4]
 8006f7a:	6852      	ldr	r2, [r2, #4]
 8006f7c:	b2d2      	uxtb	r2, r2
 8006f7e:	4611      	mov	r1, r2
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	4798      	blx	r3
 8006f84:	4603      	mov	r3, r0
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d001      	beq.n	8006f8e <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006f8a:	2303      	movs	r3, #3
 8006f8c:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006f8e:	2340      	movs	r3, #64	; 0x40
 8006f90:	2200      	movs	r2, #0
 8006f92:	2100      	movs	r1, #0
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f012 ff54 	bl	8019e42 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2201      	movs	r2, #1
 8006f9e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2240      	movs	r2, #64	; 0x40
 8006fa6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006faa:	2340      	movs	r3, #64	; 0x40
 8006fac:	2200      	movs	r2, #0
 8006fae:	2180      	movs	r1, #128	; 0x80
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	f012 ff46 	bl	8019e42 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2201      	movs	r2, #1
 8006fba:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2240      	movs	r2, #64	; 0x40
 8006fc0:	621a      	str	r2, [r3, #32]

  return ret;
 8006fc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	3710      	adds	r7, #16
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}

08006fcc <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006fcc:	b480      	push	{r7}
 8006fce:	b083      	sub	sp, #12
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
 8006fd4:	460b      	mov	r3, r1
 8006fd6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	78fa      	ldrb	r2, [r7, #3]
 8006fdc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006fde:	2300      	movs	r3, #0
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	370c      	adds	r7, #12
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bc80      	pop	{r7}
 8006fe8:	4770      	bx	lr

08006fea <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006fea:	b480      	push	{r7}
 8006fec:	b083      	sub	sp, #12
 8006fee:	af00      	add	r7, sp, #0
 8006ff0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ff8:	b2da      	uxtb	r2, r3
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2204      	movs	r2, #4
 8007004:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007008:	2300      	movs	r3, #0
}
 800700a:	4618      	mov	r0, r3
 800700c:	370c      	adds	r7, #12
 800700e:	46bd      	mov	sp, r7
 8007010:	bc80      	pop	{r7}
 8007012:	4770      	bx	lr

08007014 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007014:	b480      	push	{r7}
 8007016:	b083      	sub	sp, #12
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007022:	b2db      	uxtb	r3, r3
 8007024:	2b04      	cmp	r3, #4
 8007026:	d106      	bne.n	8007036 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800702e:	b2da      	uxtb	r2, r3
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007036:	2300      	movs	r3, #0
}
 8007038:	4618      	mov	r0, r3
 800703a:	370c      	adds	r7, #12
 800703c:	46bd      	mov	sp, r7
 800703e:	bc80      	pop	{r7}
 8007040:	4770      	bx	lr

08007042 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007042:	b580      	push	{r7, lr}
 8007044:	b082      	sub	sp, #8
 8007046:	af00      	add	r7, sp, #0
 8007048:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007050:	b2db      	uxtb	r3, r3
 8007052:	2b03      	cmp	r3, #3
 8007054:	d110      	bne.n	8007078 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800705c:	2b00      	cmp	r3, #0
 800705e:	d00b      	beq.n	8007078 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007066:	69db      	ldr	r3, [r3, #28]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d005      	beq.n	8007078 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007072:	69db      	ldr	r3, [r3, #28]
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007078:	2300      	movs	r3, #0
}
 800707a:	4618      	mov	r0, r3
 800707c:	3708      	adds	r7, #8
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}

08007082 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007082:	b580      	push	{r7, lr}
 8007084:	b082      	sub	sp, #8
 8007086:	af00      	add	r7, sp, #0
 8007088:	6078      	str	r0, [r7, #4]
 800708a:	460b      	mov	r3, r1
 800708c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	32ae      	adds	r2, #174	; 0xae
 8007098:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d101      	bne.n	80070a4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80070a0:	2303      	movs	r3, #3
 80070a2:	e01c      	b.n	80070de <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070aa:	b2db      	uxtb	r3, r3
 80070ac:	2b03      	cmp	r3, #3
 80070ae:	d115      	bne.n	80070dc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	32ae      	adds	r2, #174	; 0xae
 80070ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070be:	6a1b      	ldr	r3, [r3, #32]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d00b      	beq.n	80070dc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	32ae      	adds	r2, #174	; 0xae
 80070ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070d2:	6a1b      	ldr	r3, [r3, #32]
 80070d4:	78fa      	ldrb	r2, [r7, #3]
 80070d6:	4611      	mov	r1, r2
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80070dc:	2300      	movs	r3, #0
}
 80070de:	4618      	mov	r0, r3
 80070e0:	3708      	adds	r7, #8
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bd80      	pop	{r7, pc}

080070e6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80070e6:	b580      	push	{r7, lr}
 80070e8:	b082      	sub	sp, #8
 80070ea:	af00      	add	r7, sp, #0
 80070ec:	6078      	str	r0, [r7, #4]
 80070ee:	460b      	mov	r3, r1
 80070f0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	32ae      	adds	r2, #174	; 0xae
 80070fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d101      	bne.n	8007108 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007104:	2303      	movs	r3, #3
 8007106:	e01c      	b.n	8007142 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800710e:	b2db      	uxtb	r3, r3
 8007110:	2b03      	cmp	r3, #3
 8007112:	d115      	bne.n	8007140 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	32ae      	adds	r2, #174	; 0xae
 800711e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007124:	2b00      	cmp	r3, #0
 8007126:	d00b      	beq.n	8007140 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	32ae      	adds	r2, #174	; 0xae
 8007132:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007138:	78fa      	ldrb	r2, [r7, #3]
 800713a:	4611      	mov	r1, r2
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007140:	2300      	movs	r3, #0
}
 8007142:	4618      	mov	r0, r3
 8007144:	3708      	adds	r7, #8
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}

0800714a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800714a:	b480      	push	{r7}
 800714c:	b083      	sub	sp, #12
 800714e:	af00      	add	r7, sp, #0
 8007150:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007152:	2300      	movs	r3, #0
}
 8007154:	4618      	mov	r0, r3
 8007156:	370c      	adds	r7, #12
 8007158:	46bd      	mov	sp, r7
 800715a:	bc80      	pop	{r7}
 800715c:	4770      	bx	lr

0800715e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800715e:	b580      	push	{r7, lr}
 8007160:	b084      	sub	sp, #16
 8007162:	af00      	add	r7, sp, #0
 8007164:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007166:	2300      	movs	r3, #0
 8007168:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2201      	movs	r2, #1
 800716e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007178:	2b00      	cmp	r3, #0
 800717a:	d00e      	beq.n	800719a <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007182:	685b      	ldr	r3, [r3, #4]
 8007184:	687a      	ldr	r2, [r7, #4]
 8007186:	6852      	ldr	r2, [r2, #4]
 8007188:	b2d2      	uxtb	r2, r2
 800718a:	4611      	mov	r1, r2
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	4798      	blx	r3
 8007190:	4603      	mov	r3, r0
 8007192:	2b00      	cmp	r3, #0
 8007194:	d001      	beq.n	800719a <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007196:	2303      	movs	r3, #3
 8007198:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800719a:	7bfb      	ldrb	r3, [r7, #15]
}
 800719c:	4618      	mov	r0, r3
 800719e:	3710      	adds	r7, #16
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bd80      	pop	{r7, pc}

080071a4 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80071a4:	b480      	push	{r7}
 80071a6:	b083      	sub	sp, #12
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
 80071ac:	460b      	mov	r3, r1
 80071ae:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80071b0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	370c      	adds	r7, #12
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bc80      	pop	{r7}
 80071ba:	4770      	bx	lr

080071bc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80071bc:	b480      	push	{r7}
 80071be:	b083      	sub	sp, #12
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
 80071c4:	460b      	mov	r3, r1
 80071c6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80071c8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	370c      	adds	r7, #12
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bc80      	pop	{r7}
 80071d2:	4770      	bx	lr

080071d4 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b086      	sub	sp, #24
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
 80071dc:	460b      	mov	r3, r1
 80071de:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80071e8:	2300      	movs	r3, #0
 80071ea:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	885b      	ldrh	r3, [r3, #2]
 80071f0:	b29a      	uxth	r2, r3
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	781b      	ldrb	r3, [r3, #0]
 80071f6:	b29b      	uxth	r3, r3
 80071f8:	429a      	cmp	r2, r3
 80071fa:	d920      	bls.n	800723e <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	781b      	ldrb	r3, [r3, #0]
 8007200:	b29b      	uxth	r3, r3
 8007202:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007204:	e013      	b.n	800722e <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007206:	f107 030a 	add.w	r3, r7, #10
 800720a:	4619      	mov	r1, r3
 800720c:	6978      	ldr	r0, [r7, #20]
 800720e:	f000 f81b 	bl	8007248 <USBD_GetNextDesc>
 8007212:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	785b      	ldrb	r3, [r3, #1]
 8007218:	2b05      	cmp	r3, #5
 800721a:	d108      	bne.n	800722e <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800721c:	697b      	ldr	r3, [r7, #20]
 800721e:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007220:	693b      	ldr	r3, [r7, #16]
 8007222:	789b      	ldrb	r3, [r3, #2]
 8007224:	78fa      	ldrb	r2, [r7, #3]
 8007226:	429a      	cmp	r2, r3
 8007228:	d008      	beq.n	800723c <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800722a:	2300      	movs	r3, #0
 800722c:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	885b      	ldrh	r3, [r3, #2]
 8007232:	b29a      	uxth	r2, r3
 8007234:	897b      	ldrh	r3, [r7, #10]
 8007236:	429a      	cmp	r2, r3
 8007238:	d8e5      	bhi.n	8007206 <USBD_GetEpDesc+0x32>
 800723a:	e000      	b.n	800723e <USBD_GetEpDesc+0x6a>
          break;
 800723c:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800723e:	693b      	ldr	r3, [r7, #16]
}
 8007240:	4618      	mov	r0, r3
 8007242:	3718      	adds	r7, #24
 8007244:	46bd      	mov	sp, r7
 8007246:	bd80      	pop	{r7, pc}

08007248 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007248:	b480      	push	{r7}
 800724a:	b085      	sub	sp, #20
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
 8007250:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	881a      	ldrh	r2, [r3, #0]
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	781b      	ldrb	r3, [r3, #0]
 800725e:	b29b      	uxth	r3, r3
 8007260:	4413      	add	r3, r2
 8007262:	b29a      	uxth	r2, r3
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	781b      	ldrb	r3, [r3, #0]
 800726c:	461a      	mov	r2, r3
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	4413      	add	r3, r2
 8007272:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007274:	68fb      	ldr	r3, [r7, #12]
}
 8007276:	4618      	mov	r0, r3
 8007278:	3714      	adds	r7, #20
 800727a:	46bd      	mov	sp, r7
 800727c:	bc80      	pop	{r7}
 800727e:	4770      	bx	lr

08007280 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007280:	b480      	push	{r7}
 8007282:	b087      	sub	sp, #28
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	781b      	ldrb	r3, [r3, #0]
 8007290:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	3301      	adds	r3, #1
 8007296:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007298:	697b      	ldr	r3, [r7, #20]
 800729a:	781b      	ldrb	r3, [r3, #0]
 800729c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800729e:	8a3b      	ldrh	r3, [r7, #16]
 80072a0:	021b      	lsls	r3, r3, #8
 80072a2:	b21a      	sxth	r2, r3
 80072a4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80072a8:	4313      	orrs	r3, r2
 80072aa:	b21b      	sxth	r3, r3
 80072ac:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80072ae:	89fb      	ldrh	r3, [r7, #14]
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	371c      	adds	r7, #28
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bc80      	pop	{r7}
 80072b8:	4770      	bx	lr
	...

080072bc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b084      	sub	sp, #16
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
 80072c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80072c6:	2300      	movs	r3, #0
 80072c8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	781b      	ldrb	r3, [r3, #0]
 80072ce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80072d2:	2b40      	cmp	r3, #64	; 0x40
 80072d4:	d005      	beq.n	80072e2 <USBD_StdDevReq+0x26>
 80072d6:	2b40      	cmp	r3, #64	; 0x40
 80072d8:	d857      	bhi.n	800738a <USBD_StdDevReq+0xce>
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d00f      	beq.n	80072fe <USBD_StdDevReq+0x42>
 80072de:	2b20      	cmp	r3, #32
 80072e0:	d153      	bne.n	800738a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	32ae      	adds	r2, #174	; 0xae
 80072ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072f0:	689b      	ldr	r3, [r3, #8]
 80072f2:	6839      	ldr	r1, [r7, #0]
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	4798      	blx	r3
 80072f8:	4603      	mov	r3, r0
 80072fa:	73fb      	strb	r3, [r7, #15]
      break;
 80072fc:	e04a      	b.n	8007394 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	785b      	ldrb	r3, [r3, #1]
 8007302:	2b09      	cmp	r3, #9
 8007304:	d83b      	bhi.n	800737e <USBD_StdDevReq+0xc2>
 8007306:	a201      	add	r2, pc, #4	; (adr r2, 800730c <USBD_StdDevReq+0x50>)
 8007308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800730c:	08007361 	.word	0x08007361
 8007310:	08007375 	.word	0x08007375
 8007314:	0800737f 	.word	0x0800737f
 8007318:	0800736b 	.word	0x0800736b
 800731c:	0800737f 	.word	0x0800737f
 8007320:	0800733f 	.word	0x0800733f
 8007324:	08007335 	.word	0x08007335
 8007328:	0800737f 	.word	0x0800737f
 800732c:	08007357 	.word	0x08007357
 8007330:	08007349 	.word	0x08007349
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007334:	6839      	ldr	r1, [r7, #0]
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f000 fa3c 	bl	80077b4 <USBD_GetDescriptor>
          break;
 800733c:	e024      	b.n	8007388 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800733e:	6839      	ldr	r1, [r7, #0]
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f000 fba1 	bl	8007a88 <USBD_SetAddress>
          break;
 8007346:	e01f      	b.n	8007388 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007348:	6839      	ldr	r1, [r7, #0]
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f000 fbe0 	bl	8007b10 <USBD_SetConfig>
 8007350:	4603      	mov	r3, r0
 8007352:	73fb      	strb	r3, [r7, #15]
          break;
 8007354:	e018      	b.n	8007388 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007356:	6839      	ldr	r1, [r7, #0]
 8007358:	6878      	ldr	r0, [r7, #4]
 800735a:	f000 fc83 	bl	8007c64 <USBD_GetConfig>
          break;
 800735e:	e013      	b.n	8007388 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007360:	6839      	ldr	r1, [r7, #0]
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f000 fcb4 	bl	8007cd0 <USBD_GetStatus>
          break;
 8007368:	e00e      	b.n	8007388 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800736a:	6839      	ldr	r1, [r7, #0]
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f000 fce3 	bl	8007d38 <USBD_SetFeature>
          break;
 8007372:	e009      	b.n	8007388 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007374:	6839      	ldr	r1, [r7, #0]
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f000 fd07 	bl	8007d8a <USBD_ClrFeature>
          break;
 800737c:	e004      	b.n	8007388 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800737e:	6839      	ldr	r1, [r7, #0]
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	f000 fd5e 	bl	8007e42 <USBD_CtlError>
          break;
 8007386:	bf00      	nop
      }
      break;
 8007388:	e004      	b.n	8007394 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800738a:	6839      	ldr	r1, [r7, #0]
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	f000 fd58 	bl	8007e42 <USBD_CtlError>
      break;
 8007392:	bf00      	nop
  }

  return ret;
 8007394:	7bfb      	ldrb	r3, [r7, #15]
}
 8007396:	4618      	mov	r0, r3
 8007398:	3710      	adds	r7, #16
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}
 800739e:	bf00      	nop

080073a0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b084      	sub	sp, #16
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
 80073a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80073aa:	2300      	movs	r3, #0
 80073ac:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	781b      	ldrb	r3, [r3, #0]
 80073b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80073b6:	2b40      	cmp	r3, #64	; 0x40
 80073b8:	d005      	beq.n	80073c6 <USBD_StdItfReq+0x26>
 80073ba:	2b40      	cmp	r3, #64	; 0x40
 80073bc:	d852      	bhi.n	8007464 <USBD_StdItfReq+0xc4>
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d001      	beq.n	80073c6 <USBD_StdItfReq+0x26>
 80073c2:	2b20      	cmp	r3, #32
 80073c4:	d14e      	bne.n	8007464 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073cc:	b2db      	uxtb	r3, r3
 80073ce:	3b01      	subs	r3, #1
 80073d0:	2b02      	cmp	r3, #2
 80073d2:	d840      	bhi.n	8007456 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	889b      	ldrh	r3, [r3, #4]
 80073d8:	b2db      	uxtb	r3, r3
 80073da:	2b01      	cmp	r3, #1
 80073dc:	d836      	bhi.n	800744c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	889b      	ldrh	r3, [r3, #4]
 80073e2:	b2db      	uxtb	r3, r3
 80073e4:	4619      	mov	r1, r3
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f7ff fedc 	bl	80071a4 <USBD_CoreFindIF>
 80073ec:	4603      	mov	r3, r0
 80073ee:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80073f0:	7bbb      	ldrb	r3, [r7, #14]
 80073f2:	2bff      	cmp	r3, #255	; 0xff
 80073f4:	d01d      	beq.n	8007432 <USBD_StdItfReq+0x92>
 80073f6:	7bbb      	ldrb	r3, [r7, #14]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d11a      	bne.n	8007432 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80073fc:	7bba      	ldrb	r2, [r7, #14]
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	32ae      	adds	r2, #174	; 0xae
 8007402:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007406:	689b      	ldr	r3, [r3, #8]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d00f      	beq.n	800742c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800740c:	7bba      	ldrb	r2, [r7, #14]
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007414:	7bba      	ldrb	r2, [r7, #14]
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	32ae      	adds	r2, #174	; 0xae
 800741a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800741e:	689b      	ldr	r3, [r3, #8]
 8007420:	6839      	ldr	r1, [r7, #0]
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	4798      	blx	r3
 8007426:	4603      	mov	r3, r0
 8007428:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800742a:	e004      	b.n	8007436 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800742c:	2303      	movs	r3, #3
 800742e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007430:	e001      	b.n	8007436 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007432:	2303      	movs	r3, #3
 8007434:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	88db      	ldrh	r3, [r3, #6]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d110      	bne.n	8007460 <USBD_StdItfReq+0xc0>
 800743e:	7bfb      	ldrb	r3, [r7, #15]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d10d      	bne.n	8007460 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f000 fdc6 	bl	8007fd6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800744a:	e009      	b.n	8007460 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800744c:	6839      	ldr	r1, [r7, #0]
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f000 fcf7 	bl	8007e42 <USBD_CtlError>
          break;
 8007454:	e004      	b.n	8007460 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007456:	6839      	ldr	r1, [r7, #0]
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	f000 fcf2 	bl	8007e42 <USBD_CtlError>
          break;
 800745e:	e000      	b.n	8007462 <USBD_StdItfReq+0xc2>
          break;
 8007460:	bf00      	nop
      }
      break;
 8007462:	e004      	b.n	800746e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007464:	6839      	ldr	r1, [r7, #0]
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f000 fceb 	bl	8007e42 <USBD_CtlError>
      break;
 800746c:	bf00      	nop
  }

  return ret;
 800746e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007470:	4618      	mov	r0, r3
 8007472:	3710      	adds	r7, #16
 8007474:	46bd      	mov	sp, r7
 8007476:	bd80      	pop	{r7, pc}

08007478 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b084      	sub	sp, #16
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
 8007480:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007482:	2300      	movs	r3, #0
 8007484:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	889b      	ldrh	r3, [r3, #4]
 800748a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	781b      	ldrb	r3, [r3, #0]
 8007490:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007494:	2b40      	cmp	r3, #64	; 0x40
 8007496:	d007      	beq.n	80074a8 <USBD_StdEPReq+0x30>
 8007498:	2b40      	cmp	r3, #64	; 0x40
 800749a:	f200 817f 	bhi.w	800779c <USBD_StdEPReq+0x324>
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d02a      	beq.n	80074f8 <USBD_StdEPReq+0x80>
 80074a2:	2b20      	cmp	r3, #32
 80074a4:	f040 817a 	bne.w	800779c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80074a8:	7bbb      	ldrb	r3, [r7, #14]
 80074aa:	4619      	mov	r1, r3
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f7ff fe85 	bl	80071bc <USBD_CoreFindEP>
 80074b2:	4603      	mov	r3, r0
 80074b4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80074b6:	7b7b      	ldrb	r3, [r7, #13]
 80074b8:	2bff      	cmp	r3, #255	; 0xff
 80074ba:	f000 8174 	beq.w	80077a6 <USBD_StdEPReq+0x32e>
 80074be:	7b7b      	ldrb	r3, [r7, #13]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	f040 8170 	bne.w	80077a6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80074c6:	7b7a      	ldrb	r2, [r7, #13]
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80074ce:	7b7a      	ldrb	r2, [r7, #13]
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	32ae      	adds	r2, #174	; 0xae
 80074d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074d8:	689b      	ldr	r3, [r3, #8]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	f000 8163 	beq.w	80077a6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80074e0:	7b7a      	ldrb	r2, [r7, #13]
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	32ae      	adds	r2, #174	; 0xae
 80074e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074ea:	689b      	ldr	r3, [r3, #8]
 80074ec:	6839      	ldr	r1, [r7, #0]
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	4798      	blx	r3
 80074f2:	4603      	mov	r3, r0
 80074f4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80074f6:	e156      	b.n	80077a6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	785b      	ldrb	r3, [r3, #1]
 80074fc:	2b03      	cmp	r3, #3
 80074fe:	d008      	beq.n	8007512 <USBD_StdEPReq+0x9a>
 8007500:	2b03      	cmp	r3, #3
 8007502:	f300 8145 	bgt.w	8007790 <USBD_StdEPReq+0x318>
 8007506:	2b00      	cmp	r3, #0
 8007508:	f000 809b 	beq.w	8007642 <USBD_StdEPReq+0x1ca>
 800750c:	2b01      	cmp	r3, #1
 800750e:	d03c      	beq.n	800758a <USBD_StdEPReq+0x112>
 8007510:	e13e      	b.n	8007790 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007518:	b2db      	uxtb	r3, r3
 800751a:	2b02      	cmp	r3, #2
 800751c:	d002      	beq.n	8007524 <USBD_StdEPReq+0xac>
 800751e:	2b03      	cmp	r3, #3
 8007520:	d016      	beq.n	8007550 <USBD_StdEPReq+0xd8>
 8007522:	e02c      	b.n	800757e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007524:	7bbb      	ldrb	r3, [r7, #14]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d00d      	beq.n	8007546 <USBD_StdEPReq+0xce>
 800752a:	7bbb      	ldrb	r3, [r7, #14]
 800752c:	2b80      	cmp	r3, #128	; 0x80
 800752e:	d00a      	beq.n	8007546 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007530:	7bbb      	ldrb	r3, [r7, #14]
 8007532:	4619      	mov	r1, r3
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f012 fcc9 	bl	8019ecc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800753a:	2180      	movs	r1, #128	; 0x80
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f012 fcc5 	bl	8019ecc <USBD_LL_StallEP>
 8007542:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007544:	e020      	b.n	8007588 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007546:	6839      	ldr	r1, [r7, #0]
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f000 fc7a 	bl	8007e42 <USBD_CtlError>
              break;
 800754e:	e01b      	b.n	8007588 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	885b      	ldrh	r3, [r3, #2]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d10e      	bne.n	8007576 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007558:	7bbb      	ldrb	r3, [r7, #14]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d00b      	beq.n	8007576 <USBD_StdEPReq+0xfe>
 800755e:	7bbb      	ldrb	r3, [r7, #14]
 8007560:	2b80      	cmp	r3, #128	; 0x80
 8007562:	d008      	beq.n	8007576 <USBD_StdEPReq+0xfe>
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	88db      	ldrh	r3, [r3, #6]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d104      	bne.n	8007576 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800756c:	7bbb      	ldrb	r3, [r7, #14]
 800756e:	4619      	mov	r1, r3
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	f012 fcab 	bl	8019ecc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f000 fd2d 	bl	8007fd6 <USBD_CtlSendStatus>

              break;
 800757c:	e004      	b.n	8007588 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800757e:	6839      	ldr	r1, [r7, #0]
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f000 fc5e 	bl	8007e42 <USBD_CtlError>
              break;
 8007586:	bf00      	nop
          }
          break;
 8007588:	e107      	b.n	800779a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007590:	b2db      	uxtb	r3, r3
 8007592:	2b02      	cmp	r3, #2
 8007594:	d002      	beq.n	800759c <USBD_StdEPReq+0x124>
 8007596:	2b03      	cmp	r3, #3
 8007598:	d016      	beq.n	80075c8 <USBD_StdEPReq+0x150>
 800759a:	e04b      	b.n	8007634 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800759c:	7bbb      	ldrb	r3, [r7, #14]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d00d      	beq.n	80075be <USBD_StdEPReq+0x146>
 80075a2:	7bbb      	ldrb	r3, [r7, #14]
 80075a4:	2b80      	cmp	r3, #128	; 0x80
 80075a6:	d00a      	beq.n	80075be <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80075a8:	7bbb      	ldrb	r3, [r7, #14]
 80075aa:	4619      	mov	r1, r3
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f012 fc8d 	bl	8019ecc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80075b2:	2180      	movs	r1, #128	; 0x80
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f012 fc89 	bl	8019ecc <USBD_LL_StallEP>
 80075ba:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80075bc:	e040      	b.n	8007640 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80075be:	6839      	ldr	r1, [r7, #0]
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f000 fc3e 	bl	8007e42 <USBD_CtlError>
              break;
 80075c6:	e03b      	b.n	8007640 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	885b      	ldrh	r3, [r3, #2]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d136      	bne.n	800763e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80075d0:	7bbb      	ldrb	r3, [r7, #14]
 80075d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d004      	beq.n	80075e4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80075da:	7bbb      	ldrb	r3, [r7, #14]
 80075dc:	4619      	mov	r1, r3
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f012 fc93 	bl	8019f0a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f000 fcf6 	bl	8007fd6 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80075ea:	7bbb      	ldrb	r3, [r7, #14]
 80075ec:	4619      	mov	r1, r3
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	f7ff fde4 	bl	80071bc <USBD_CoreFindEP>
 80075f4:	4603      	mov	r3, r0
 80075f6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80075f8:	7b7b      	ldrb	r3, [r7, #13]
 80075fa:	2bff      	cmp	r3, #255	; 0xff
 80075fc:	d01f      	beq.n	800763e <USBD_StdEPReq+0x1c6>
 80075fe:	7b7b      	ldrb	r3, [r7, #13]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d11c      	bne.n	800763e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007604:	7b7a      	ldrb	r2, [r7, #13]
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800760c:	7b7a      	ldrb	r2, [r7, #13]
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	32ae      	adds	r2, #174	; 0xae
 8007612:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007616:	689b      	ldr	r3, [r3, #8]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d010      	beq.n	800763e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800761c:	7b7a      	ldrb	r2, [r7, #13]
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	32ae      	adds	r2, #174	; 0xae
 8007622:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007626:	689b      	ldr	r3, [r3, #8]
 8007628:	6839      	ldr	r1, [r7, #0]
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	4798      	blx	r3
 800762e:	4603      	mov	r3, r0
 8007630:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007632:	e004      	b.n	800763e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007634:	6839      	ldr	r1, [r7, #0]
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f000 fc03 	bl	8007e42 <USBD_CtlError>
              break;
 800763c:	e000      	b.n	8007640 <USBD_StdEPReq+0x1c8>
              break;
 800763e:	bf00      	nop
          }
          break;
 8007640:	e0ab      	b.n	800779a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007648:	b2db      	uxtb	r3, r3
 800764a:	2b02      	cmp	r3, #2
 800764c:	d002      	beq.n	8007654 <USBD_StdEPReq+0x1dc>
 800764e:	2b03      	cmp	r3, #3
 8007650:	d032      	beq.n	80076b8 <USBD_StdEPReq+0x240>
 8007652:	e097      	b.n	8007784 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007654:	7bbb      	ldrb	r3, [r7, #14]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d007      	beq.n	800766a <USBD_StdEPReq+0x1f2>
 800765a:	7bbb      	ldrb	r3, [r7, #14]
 800765c:	2b80      	cmp	r3, #128	; 0x80
 800765e:	d004      	beq.n	800766a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007660:	6839      	ldr	r1, [r7, #0]
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f000 fbed 	bl	8007e42 <USBD_CtlError>
                break;
 8007668:	e091      	b.n	800778e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800766a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800766e:	2b00      	cmp	r3, #0
 8007670:	da0b      	bge.n	800768a <USBD_StdEPReq+0x212>
 8007672:	7bbb      	ldrb	r3, [r7, #14]
 8007674:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007678:	4613      	mov	r3, r2
 800767a:	009b      	lsls	r3, r3, #2
 800767c:	4413      	add	r3, r2
 800767e:	009b      	lsls	r3, r3, #2
 8007680:	3310      	adds	r3, #16
 8007682:	687a      	ldr	r2, [r7, #4]
 8007684:	4413      	add	r3, r2
 8007686:	3304      	adds	r3, #4
 8007688:	e00b      	b.n	80076a2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800768a:	7bbb      	ldrb	r3, [r7, #14]
 800768c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007690:	4613      	mov	r3, r2
 8007692:	009b      	lsls	r3, r3, #2
 8007694:	4413      	add	r3, r2
 8007696:	009b      	lsls	r3, r3, #2
 8007698:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800769c:	687a      	ldr	r2, [r7, #4]
 800769e:	4413      	add	r3, r2
 80076a0:	3304      	adds	r3, #4
 80076a2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	2200      	movs	r2, #0
 80076a8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	2202      	movs	r2, #2
 80076ae:	4619      	mov	r1, r3
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f000 fc36 	bl	8007f22 <USBD_CtlSendData>
              break;
 80076b6:	e06a      	b.n	800778e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80076b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	da11      	bge.n	80076e4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80076c0:	7bbb      	ldrb	r3, [r7, #14]
 80076c2:	f003 020f 	and.w	r2, r3, #15
 80076c6:	6879      	ldr	r1, [r7, #4]
 80076c8:	4613      	mov	r3, r2
 80076ca:	009b      	lsls	r3, r3, #2
 80076cc:	4413      	add	r3, r2
 80076ce:	009b      	lsls	r3, r3, #2
 80076d0:	440b      	add	r3, r1
 80076d2:	3324      	adds	r3, #36	; 0x24
 80076d4:	881b      	ldrh	r3, [r3, #0]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d117      	bne.n	800770a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80076da:	6839      	ldr	r1, [r7, #0]
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	f000 fbb0 	bl	8007e42 <USBD_CtlError>
                  break;
 80076e2:	e054      	b.n	800778e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80076e4:	7bbb      	ldrb	r3, [r7, #14]
 80076e6:	f003 020f 	and.w	r2, r3, #15
 80076ea:	6879      	ldr	r1, [r7, #4]
 80076ec:	4613      	mov	r3, r2
 80076ee:	009b      	lsls	r3, r3, #2
 80076f0:	4413      	add	r3, r2
 80076f2:	009b      	lsls	r3, r3, #2
 80076f4:	440b      	add	r3, r1
 80076f6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80076fa:	881b      	ldrh	r3, [r3, #0]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d104      	bne.n	800770a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007700:	6839      	ldr	r1, [r7, #0]
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f000 fb9d 	bl	8007e42 <USBD_CtlError>
                  break;
 8007708:	e041      	b.n	800778e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800770a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800770e:	2b00      	cmp	r3, #0
 8007710:	da0b      	bge.n	800772a <USBD_StdEPReq+0x2b2>
 8007712:	7bbb      	ldrb	r3, [r7, #14]
 8007714:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007718:	4613      	mov	r3, r2
 800771a:	009b      	lsls	r3, r3, #2
 800771c:	4413      	add	r3, r2
 800771e:	009b      	lsls	r3, r3, #2
 8007720:	3310      	adds	r3, #16
 8007722:	687a      	ldr	r2, [r7, #4]
 8007724:	4413      	add	r3, r2
 8007726:	3304      	adds	r3, #4
 8007728:	e00b      	b.n	8007742 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800772a:	7bbb      	ldrb	r3, [r7, #14]
 800772c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007730:	4613      	mov	r3, r2
 8007732:	009b      	lsls	r3, r3, #2
 8007734:	4413      	add	r3, r2
 8007736:	009b      	lsls	r3, r3, #2
 8007738:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800773c:	687a      	ldr	r2, [r7, #4]
 800773e:	4413      	add	r3, r2
 8007740:	3304      	adds	r3, #4
 8007742:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007744:	7bbb      	ldrb	r3, [r7, #14]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d002      	beq.n	8007750 <USBD_StdEPReq+0x2d8>
 800774a:	7bbb      	ldrb	r3, [r7, #14]
 800774c:	2b80      	cmp	r3, #128	; 0x80
 800774e:	d103      	bne.n	8007758 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	2200      	movs	r2, #0
 8007754:	601a      	str	r2, [r3, #0]
 8007756:	e00e      	b.n	8007776 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007758:	7bbb      	ldrb	r3, [r7, #14]
 800775a:	4619      	mov	r1, r3
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f012 fbf3 	bl	8019f48 <USBD_LL_IsStallEP>
 8007762:	4603      	mov	r3, r0
 8007764:	2b00      	cmp	r3, #0
 8007766:	d003      	beq.n	8007770 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	2201      	movs	r2, #1
 800776c:	601a      	str	r2, [r3, #0]
 800776e:	e002      	b.n	8007776 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	2200      	movs	r2, #0
 8007774:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	2202      	movs	r2, #2
 800777a:	4619      	mov	r1, r3
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	f000 fbd0 	bl	8007f22 <USBD_CtlSendData>
              break;
 8007782:	e004      	b.n	800778e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007784:	6839      	ldr	r1, [r7, #0]
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f000 fb5b 	bl	8007e42 <USBD_CtlError>
              break;
 800778c:	bf00      	nop
          }
          break;
 800778e:	e004      	b.n	800779a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007790:	6839      	ldr	r1, [r7, #0]
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f000 fb55 	bl	8007e42 <USBD_CtlError>
          break;
 8007798:	bf00      	nop
      }
      break;
 800779a:	e005      	b.n	80077a8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800779c:	6839      	ldr	r1, [r7, #0]
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f000 fb4f 	bl	8007e42 <USBD_CtlError>
      break;
 80077a4:	e000      	b.n	80077a8 <USBD_StdEPReq+0x330>
      break;
 80077a6:	bf00      	nop
  }

  return ret;
 80077a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	3710      	adds	r7, #16
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}
	...

080077b4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b084      	sub	sp, #16
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
 80077bc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80077be:	2300      	movs	r3, #0
 80077c0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80077c2:	2300      	movs	r3, #0
 80077c4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80077c6:	2300      	movs	r3, #0
 80077c8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	885b      	ldrh	r3, [r3, #2]
 80077ce:	0a1b      	lsrs	r3, r3, #8
 80077d0:	b29b      	uxth	r3, r3
 80077d2:	3b01      	subs	r3, #1
 80077d4:	2b06      	cmp	r3, #6
 80077d6:	f200 8128 	bhi.w	8007a2a <USBD_GetDescriptor+0x276>
 80077da:	a201      	add	r2, pc, #4	; (adr r2, 80077e0 <USBD_GetDescriptor+0x2c>)
 80077dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077e0:	080077fd 	.word	0x080077fd
 80077e4:	08007815 	.word	0x08007815
 80077e8:	08007855 	.word	0x08007855
 80077ec:	08007a2b 	.word	0x08007a2b
 80077f0:	08007a2b 	.word	0x08007a2b
 80077f4:	080079cb 	.word	0x080079cb
 80077f8:	080079f7 	.word	0x080079f7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	687a      	ldr	r2, [r7, #4]
 8007806:	7c12      	ldrb	r2, [r2, #16]
 8007808:	f107 0108 	add.w	r1, r7, #8
 800780c:	4610      	mov	r0, r2
 800780e:	4798      	blx	r3
 8007810:	60f8      	str	r0, [r7, #12]
      break;
 8007812:	e112      	b.n	8007a3a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	7c1b      	ldrb	r3, [r3, #16]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d10d      	bne.n	8007838 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007824:	f107 0208 	add.w	r2, r7, #8
 8007828:	4610      	mov	r0, r2
 800782a:	4798      	blx	r3
 800782c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	3301      	adds	r3, #1
 8007832:	2202      	movs	r2, #2
 8007834:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007836:	e100      	b.n	8007a3a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800783e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007840:	f107 0208 	add.w	r2, r7, #8
 8007844:	4610      	mov	r0, r2
 8007846:	4798      	blx	r3
 8007848:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	3301      	adds	r3, #1
 800784e:	2202      	movs	r2, #2
 8007850:	701a      	strb	r2, [r3, #0]
      break;
 8007852:	e0f2      	b.n	8007a3a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	885b      	ldrh	r3, [r3, #2]
 8007858:	b2db      	uxtb	r3, r3
 800785a:	2b05      	cmp	r3, #5
 800785c:	f200 80ac 	bhi.w	80079b8 <USBD_GetDescriptor+0x204>
 8007860:	a201      	add	r2, pc, #4	; (adr r2, 8007868 <USBD_GetDescriptor+0xb4>)
 8007862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007866:	bf00      	nop
 8007868:	08007881 	.word	0x08007881
 800786c:	080078b5 	.word	0x080078b5
 8007870:	080078e9 	.word	0x080078e9
 8007874:	0800791d 	.word	0x0800791d
 8007878:	08007951 	.word	0x08007951
 800787c:	08007985 	.word	0x08007985
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007886:	685b      	ldr	r3, [r3, #4]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d00b      	beq.n	80078a4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007892:	685b      	ldr	r3, [r3, #4]
 8007894:	687a      	ldr	r2, [r7, #4]
 8007896:	7c12      	ldrb	r2, [r2, #16]
 8007898:	f107 0108 	add.w	r1, r7, #8
 800789c:	4610      	mov	r0, r2
 800789e:	4798      	blx	r3
 80078a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80078a2:	e091      	b.n	80079c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80078a4:	6839      	ldr	r1, [r7, #0]
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f000 facb 	bl	8007e42 <USBD_CtlError>
            err++;
 80078ac:	7afb      	ldrb	r3, [r7, #11]
 80078ae:	3301      	adds	r3, #1
 80078b0:	72fb      	strb	r3, [r7, #11]
          break;
 80078b2:	e089      	b.n	80079c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078ba:	689b      	ldr	r3, [r3, #8]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d00b      	beq.n	80078d8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078c6:	689b      	ldr	r3, [r3, #8]
 80078c8:	687a      	ldr	r2, [r7, #4]
 80078ca:	7c12      	ldrb	r2, [r2, #16]
 80078cc:	f107 0108 	add.w	r1, r7, #8
 80078d0:	4610      	mov	r0, r2
 80078d2:	4798      	blx	r3
 80078d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80078d6:	e077      	b.n	80079c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80078d8:	6839      	ldr	r1, [r7, #0]
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f000 fab1 	bl	8007e42 <USBD_CtlError>
            err++;
 80078e0:	7afb      	ldrb	r3, [r7, #11]
 80078e2:	3301      	adds	r3, #1
 80078e4:	72fb      	strb	r3, [r7, #11]
          break;
 80078e6:	e06f      	b.n	80079c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078ee:	68db      	ldr	r3, [r3, #12]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d00b      	beq.n	800790c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078fa:	68db      	ldr	r3, [r3, #12]
 80078fc:	687a      	ldr	r2, [r7, #4]
 80078fe:	7c12      	ldrb	r2, [r2, #16]
 8007900:	f107 0108 	add.w	r1, r7, #8
 8007904:	4610      	mov	r0, r2
 8007906:	4798      	blx	r3
 8007908:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800790a:	e05d      	b.n	80079c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800790c:	6839      	ldr	r1, [r7, #0]
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f000 fa97 	bl	8007e42 <USBD_CtlError>
            err++;
 8007914:	7afb      	ldrb	r3, [r7, #11]
 8007916:	3301      	adds	r3, #1
 8007918:	72fb      	strb	r3, [r7, #11]
          break;
 800791a:	e055      	b.n	80079c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007922:	691b      	ldr	r3, [r3, #16]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d00b      	beq.n	8007940 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800792e:	691b      	ldr	r3, [r3, #16]
 8007930:	687a      	ldr	r2, [r7, #4]
 8007932:	7c12      	ldrb	r2, [r2, #16]
 8007934:	f107 0108 	add.w	r1, r7, #8
 8007938:	4610      	mov	r0, r2
 800793a:	4798      	blx	r3
 800793c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800793e:	e043      	b.n	80079c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007940:	6839      	ldr	r1, [r7, #0]
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f000 fa7d 	bl	8007e42 <USBD_CtlError>
            err++;
 8007948:	7afb      	ldrb	r3, [r7, #11]
 800794a:	3301      	adds	r3, #1
 800794c:	72fb      	strb	r3, [r7, #11]
          break;
 800794e:	e03b      	b.n	80079c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007956:	695b      	ldr	r3, [r3, #20]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d00b      	beq.n	8007974 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007962:	695b      	ldr	r3, [r3, #20]
 8007964:	687a      	ldr	r2, [r7, #4]
 8007966:	7c12      	ldrb	r2, [r2, #16]
 8007968:	f107 0108 	add.w	r1, r7, #8
 800796c:	4610      	mov	r0, r2
 800796e:	4798      	blx	r3
 8007970:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007972:	e029      	b.n	80079c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007974:	6839      	ldr	r1, [r7, #0]
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f000 fa63 	bl	8007e42 <USBD_CtlError>
            err++;
 800797c:	7afb      	ldrb	r3, [r7, #11]
 800797e:	3301      	adds	r3, #1
 8007980:	72fb      	strb	r3, [r7, #11]
          break;
 8007982:	e021      	b.n	80079c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800798a:	699b      	ldr	r3, [r3, #24]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d00b      	beq.n	80079a8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007996:	699b      	ldr	r3, [r3, #24]
 8007998:	687a      	ldr	r2, [r7, #4]
 800799a:	7c12      	ldrb	r2, [r2, #16]
 800799c:	f107 0108 	add.w	r1, r7, #8
 80079a0:	4610      	mov	r0, r2
 80079a2:	4798      	blx	r3
 80079a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80079a6:	e00f      	b.n	80079c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80079a8:	6839      	ldr	r1, [r7, #0]
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f000 fa49 	bl	8007e42 <USBD_CtlError>
            err++;
 80079b0:	7afb      	ldrb	r3, [r7, #11]
 80079b2:	3301      	adds	r3, #1
 80079b4:	72fb      	strb	r3, [r7, #11]
          break;
 80079b6:	e007      	b.n	80079c8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80079b8:	6839      	ldr	r1, [r7, #0]
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f000 fa41 	bl	8007e42 <USBD_CtlError>
          err++;
 80079c0:	7afb      	ldrb	r3, [r7, #11]
 80079c2:	3301      	adds	r3, #1
 80079c4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80079c6:	bf00      	nop
      }
      break;
 80079c8:	e037      	b.n	8007a3a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	7c1b      	ldrb	r3, [r3, #16]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d109      	bne.n	80079e6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079da:	f107 0208 	add.w	r2, r7, #8
 80079de:	4610      	mov	r0, r2
 80079e0:	4798      	blx	r3
 80079e2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80079e4:	e029      	b.n	8007a3a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80079e6:	6839      	ldr	r1, [r7, #0]
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f000 fa2a 	bl	8007e42 <USBD_CtlError>
        err++;
 80079ee:	7afb      	ldrb	r3, [r7, #11]
 80079f0:	3301      	adds	r3, #1
 80079f2:	72fb      	strb	r3, [r7, #11]
      break;
 80079f4:	e021      	b.n	8007a3a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	7c1b      	ldrb	r3, [r3, #16]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d10d      	bne.n	8007a1a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a06:	f107 0208 	add.w	r2, r7, #8
 8007a0a:	4610      	mov	r0, r2
 8007a0c:	4798      	blx	r3
 8007a0e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	3301      	adds	r3, #1
 8007a14:	2207      	movs	r2, #7
 8007a16:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007a18:	e00f      	b.n	8007a3a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007a1a:	6839      	ldr	r1, [r7, #0]
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f000 fa10 	bl	8007e42 <USBD_CtlError>
        err++;
 8007a22:	7afb      	ldrb	r3, [r7, #11]
 8007a24:	3301      	adds	r3, #1
 8007a26:	72fb      	strb	r3, [r7, #11]
      break;
 8007a28:	e007      	b.n	8007a3a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007a2a:	6839      	ldr	r1, [r7, #0]
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f000 fa08 	bl	8007e42 <USBD_CtlError>
      err++;
 8007a32:	7afb      	ldrb	r3, [r7, #11]
 8007a34:	3301      	adds	r3, #1
 8007a36:	72fb      	strb	r3, [r7, #11]
      break;
 8007a38:	bf00      	nop
  }

  if (err != 0U)
 8007a3a:	7afb      	ldrb	r3, [r7, #11]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d11e      	bne.n	8007a7e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	88db      	ldrh	r3, [r3, #6]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d016      	beq.n	8007a76 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007a48:	893b      	ldrh	r3, [r7, #8]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d00e      	beq.n	8007a6c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	88da      	ldrh	r2, [r3, #6]
 8007a52:	893b      	ldrh	r3, [r7, #8]
 8007a54:	4293      	cmp	r3, r2
 8007a56:	bf28      	it	cs
 8007a58:	4613      	movcs	r3, r2
 8007a5a:	b29b      	uxth	r3, r3
 8007a5c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007a5e:	893b      	ldrh	r3, [r7, #8]
 8007a60:	461a      	mov	r2, r3
 8007a62:	68f9      	ldr	r1, [r7, #12]
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f000 fa5c 	bl	8007f22 <USBD_CtlSendData>
 8007a6a:	e009      	b.n	8007a80 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007a6c:	6839      	ldr	r1, [r7, #0]
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	f000 f9e7 	bl	8007e42 <USBD_CtlError>
 8007a74:	e004      	b.n	8007a80 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f000 faad 	bl	8007fd6 <USBD_CtlSendStatus>
 8007a7c:	e000      	b.n	8007a80 <USBD_GetDescriptor+0x2cc>
    return;
 8007a7e:	bf00      	nop
  }
}
 8007a80:	3710      	adds	r7, #16
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bd80      	pop	{r7, pc}
 8007a86:	bf00      	nop

08007a88 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b084      	sub	sp, #16
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
 8007a90:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	889b      	ldrh	r3, [r3, #4]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d131      	bne.n	8007afe <USBD_SetAddress+0x76>
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	88db      	ldrh	r3, [r3, #6]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d12d      	bne.n	8007afe <USBD_SetAddress+0x76>
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	885b      	ldrh	r3, [r3, #2]
 8007aa6:	2b7f      	cmp	r3, #127	; 0x7f
 8007aa8:	d829      	bhi.n	8007afe <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	885b      	ldrh	r3, [r3, #2]
 8007aae:	b2db      	uxtb	r3, r3
 8007ab0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ab4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007abc:	b2db      	uxtb	r3, r3
 8007abe:	2b03      	cmp	r3, #3
 8007ac0:	d104      	bne.n	8007acc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007ac2:	6839      	ldr	r1, [r7, #0]
 8007ac4:	6878      	ldr	r0, [r7, #4]
 8007ac6:	f000 f9bc 	bl	8007e42 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007aca:	e01d      	b.n	8007b08 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	7bfa      	ldrb	r2, [r7, #15]
 8007ad0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007ad4:	7bfb      	ldrb	r3, [r7, #15]
 8007ad6:	4619      	mov	r1, r3
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f012 fa60 	bl	8019f9e <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f000 fa79 	bl	8007fd6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007ae4:	7bfb      	ldrb	r3, [r7, #15]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d004      	beq.n	8007af4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2202      	movs	r2, #2
 8007aee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007af2:	e009      	b.n	8007b08 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2201      	movs	r2, #1
 8007af8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007afc:	e004      	b.n	8007b08 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007afe:	6839      	ldr	r1, [r7, #0]
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f000 f99e 	bl	8007e42 <USBD_CtlError>
  }
}
 8007b06:	bf00      	nop
 8007b08:	bf00      	nop
 8007b0a:	3710      	adds	r7, #16
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd80      	pop	{r7, pc}

08007b10 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b084      	sub	sp, #16
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
 8007b18:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	885b      	ldrh	r3, [r3, #2]
 8007b22:	b2da      	uxtb	r2, r3
 8007b24:	4b4e      	ldr	r3, [pc, #312]	; (8007c60 <USBD_SetConfig+0x150>)
 8007b26:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007b28:	4b4d      	ldr	r3, [pc, #308]	; (8007c60 <USBD_SetConfig+0x150>)
 8007b2a:	781b      	ldrb	r3, [r3, #0]
 8007b2c:	2b01      	cmp	r3, #1
 8007b2e:	d905      	bls.n	8007b3c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007b30:	6839      	ldr	r1, [r7, #0]
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f000 f985 	bl	8007e42 <USBD_CtlError>
    return USBD_FAIL;
 8007b38:	2303      	movs	r3, #3
 8007b3a:	e08c      	b.n	8007c56 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b42:	b2db      	uxtb	r3, r3
 8007b44:	2b02      	cmp	r3, #2
 8007b46:	d002      	beq.n	8007b4e <USBD_SetConfig+0x3e>
 8007b48:	2b03      	cmp	r3, #3
 8007b4a:	d029      	beq.n	8007ba0 <USBD_SetConfig+0x90>
 8007b4c:	e075      	b.n	8007c3a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007b4e:	4b44      	ldr	r3, [pc, #272]	; (8007c60 <USBD_SetConfig+0x150>)
 8007b50:	781b      	ldrb	r3, [r3, #0]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d020      	beq.n	8007b98 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007b56:	4b42      	ldr	r3, [pc, #264]	; (8007c60 <USBD_SetConfig+0x150>)
 8007b58:	781b      	ldrb	r3, [r3, #0]
 8007b5a:	461a      	mov	r2, r3
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007b60:	4b3f      	ldr	r3, [pc, #252]	; (8007c60 <USBD_SetConfig+0x150>)
 8007b62:	781b      	ldrb	r3, [r3, #0]
 8007b64:	4619      	mov	r1, r3
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f7fe ffee 	bl	8006b48 <USBD_SetClassConfig>
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007b70:	7bfb      	ldrb	r3, [r7, #15]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d008      	beq.n	8007b88 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007b76:	6839      	ldr	r1, [r7, #0]
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f000 f962 	bl	8007e42 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2202      	movs	r2, #2
 8007b82:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007b86:	e065      	b.n	8007c54 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	f000 fa24 	bl	8007fd6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2203      	movs	r2, #3
 8007b92:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007b96:	e05d      	b.n	8007c54 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007b98:	6878      	ldr	r0, [r7, #4]
 8007b9a:	f000 fa1c 	bl	8007fd6 <USBD_CtlSendStatus>
      break;
 8007b9e:	e059      	b.n	8007c54 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007ba0:	4b2f      	ldr	r3, [pc, #188]	; (8007c60 <USBD_SetConfig+0x150>)
 8007ba2:	781b      	ldrb	r3, [r3, #0]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d112      	bne.n	8007bce <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2202      	movs	r2, #2
 8007bac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007bb0:	4b2b      	ldr	r3, [pc, #172]	; (8007c60 <USBD_SetConfig+0x150>)
 8007bb2:	781b      	ldrb	r3, [r3, #0]
 8007bb4:	461a      	mov	r2, r3
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007bba:	4b29      	ldr	r3, [pc, #164]	; (8007c60 <USBD_SetConfig+0x150>)
 8007bbc:	781b      	ldrb	r3, [r3, #0]
 8007bbe:	4619      	mov	r1, r3
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f7fe ffdd 	bl	8006b80 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f000 fa05 	bl	8007fd6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007bcc:	e042      	b.n	8007c54 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007bce:	4b24      	ldr	r3, [pc, #144]	; (8007c60 <USBD_SetConfig+0x150>)
 8007bd0:	781b      	ldrb	r3, [r3, #0]
 8007bd2:	461a      	mov	r2, r3
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	685b      	ldr	r3, [r3, #4]
 8007bd8:	429a      	cmp	r2, r3
 8007bda:	d02a      	beq.n	8007c32 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	685b      	ldr	r3, [r3, #4]
 8007be0:	b2db      	uxtb	r3, r3
 8007be2:	4619      	mov	r1, r3
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	f7fe ffcb 	bl	8006b80 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007bea:	4b1d      	ldr	r3, [pc, #116]	; (8007c60 <USBD_SetConfig+0x150>)
 8007bec:	781b      	ldrb	r3, [r3, #0]
 8007bee:	461a      	mov	r2, r3
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007bf4:	4b1a      	ldr	r3, [pc, #104]	; (8007c60 <USBD_SetConfig+0x150>)
 8007bf6:	781b      	ldrb	r3, [r3, #0]
 8007bf8:	4619      	mov	r1, r3
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f7fe ffa4 	bl	8006b48 <USBD_SetClassConfig>
 8007c00:	4603      	mov	r3, r0
 8007c02:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007c04:	7bfb      	ldrb	r3, [r7, #15]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d00f      	beq.n	8007c2a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007c0a:	6839      	ldr	r1, [r7, #0]
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	f000 f918 	bl	8007e42 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	685b      	ldr	r3, [r3, #4]
 8007c16:	b2db      	uxtb	r3, r3
 8007c18:	4619      	mov	r1, r3
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f7fe ffb0 	bl	8006b80 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2202      	movs	r2, #2
 8007c24:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007c28:	e014      	b.n	8007c54 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f000 f9d3 	bl	8007fd6 <USBD_CtlSendStatus>
      break;
 8007c30:	e010      	b.n	8007c54 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f000 f9cf 	bl	8007fd6 <USBD_CtlSendStatus>
      break;
 8007c38:	e00c      	b.n	8007c54 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007c3a:	6839      	ldr	r1, [r7, #0]
 8007c3c:	6878      	ldr	r0, [r7, #4]
 8007c3e:	f000 f900 	bl	8007e42 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007c42:	4b07      	ldr	r3, [pc, #28]	; (8007c60 <USBD_SetConfig+0x150>)
 8007c44:	781b      	ldrb	r3, [r3, #0]
 8007c46:	4619      	mov	r1, r3
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	f7fe ff99 	bl	8006b80 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007c4e:	2303      	movs	r3, #3
 8007c50:	73fb      	strb	r3, [r7, #15]
      break;
 8007c52:	bf00      	nop
  }

  return ret;
 8007c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	3710      	adds	r7, #16
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}
 8007c5e:	bf00      	nop
 8007c60:	20005098 	.word	0x20005098

08007c64 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b082      	sub	sp, #8
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
 8007c6c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	88db      	ldrh	r3, [r3, #6]
 8007c72:	2b01      	cmp	r3, #1
 8007c74:	d004      	beq.n	8007c80 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007c76:	6839      	ldr	r1, [r7, #0]
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f000 f8e2 	bl	8007e42 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007c7e:	e023      	b.n	8007cc8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c86:	b2db      	uxtb	r3, r3
 8007c88:	2b02      	cmp	r3, #2
 8007c8a:	dc02      	bgt.n	8007c92 <USBD_GetConfig+0x2e>
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	dc03      	bgt.n	8007c98 <USBD_GetConfig+0x34>
 8007c90:	e015      	b.n	8007cbe <USBD_GetConfig+0x5a>
 8007c92:	2b03      	cmp	r3, #3
 8007c94:	d00b      	beq.n	8007cae <USBD_GetConfig+0x4a>
 8007c96:	e012      	b.n	8007cbe <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	3308      	adds	r3, #8
 8007ca2:	2201      	movs	r2, #1
 8007ca4:	4619      	mov	r1, r3
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f000 f93b 	bl	8007f22 <USBD_CtlSendData>
        break;
 8007cac:	e00c      	b.n	8007cc8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	3304      	adds	r3, #4
 8007cb2:	2201      	movs	r2, #1
 8007cb4:	4619      	mov	r1, r3
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f000 f933 	bl	8007f22 <USBD_CtlSendData>
        break;
 8007cbc:	e004      	b.n	8007cc8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007cbe:	6839      	ldr	r1, [r7, #0]
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f000 f8be 	bl	8007e42 <USBD_CtlError>
        break;
 8007cc6:	bf00      	nop
}
 8007cc8:	bf00      	nop
 8007cca:	3708      	adds	r7, #8
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bd80      	pop	{r7, pc}

08007cd0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b082      	sub	sp, #8
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
 8007cd8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ce0:	b2db      	uxtb	r3, r3
 8007ce2:	3b01      	subs	r3, #1
 8007ce4:	2b02      	cmp	r3, #2
 8007ce6:	d81e      	bhi.n	8007d26 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	88db      	ldrh	r3, [r3, #6]
 8007cec:	2b02      	cmp	r3, #2
 8007cee:	d004      	beq.n	8007cfa <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007cf0:	6839      	ldr	r1, [r7, #0]
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f000 f8a5 	bl	8007e42 <USBD_CtlError>
        break;
 8007cf8:	e01a      	b.n	8007d30 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2201      	movs	r2, #1
 8007cfe:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d005      	beq.n	8007d16 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	68db      	ldr	r3, [r3, #12]
 8007d0e:	f043 0202 	orr.w	r2, r3, #2
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	330c      	adds	r3, #12
 8007d1a:	2202      	movs	r2, #2
 8007d1c:	4619      	mov	r1, r3
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f000 f8ff 	bl	8007f22 <USBD_CtlSendData>
      break;
 8007d24:	e004      	b.n	8007d30 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007d26:	6839      	ldr	r1, [r7, #0]
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f000 f88a 	bl	8007e42 <USBD_CtlError>
      break;
 8007d2e:	bf00      	nop
  }
}
 8007d30:	bf00      	nop
 8007d32:	3708      	adds	r7, #8
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd80      	pop	{r7, pc}

08007d38 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b082      	sub	sp, #8
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
 8007d40:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	885b      	ldrh	r3, [r3, #2]
 8007d46:	2b01      	cmp	r3, #1
 8007d48:	d107      	bne.n	8007d5a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2201      	movs	r2, #1
 8007d4e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f000 f93f 	bl	8007fd6 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007d58:	e013      	b.n	8007d82 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	885b      	ldrh	r3, [r3, #2]
 8007d5e:	2b02      	cmp	r3, #2
 8007d60:	d10b      	bne.n	8007d7a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	889b      	ldrh	r3, [r3, #4]
 8007d66:	0a1b      	lsrs	r3, r3, #8
 8007d68:	b29b      	uxth	r3, r3
 8007d6a:	b2da      	uxtb	r2, r3
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f000 f92f 	bl	8007fd6 <USBD_CtlSendStatus>
}
 8007d78:	e003      	b.n	8007d82 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007d7a:	6839      	ldr	r1, [r7, #0]
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f000 f860 	bl	8007e42 <USBD_CtlError>
}
 8007d82:	bf00      	nop
 8007d84:	3708      	adds	r7, #8
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}

08007d8a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d8a:	b580      	push	{r7, lr}
 8007d8c:	b082      	sub	sp, #8
 8007d8e:	af00      	add	r7, sp, #0
 8007d90:	6078      	str	r0, [r7, #4]
 8007d92:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d9a:	b2db      	uxtb	r3, r3
 8007d9c:	3b01      	subs	r3, #1
 8007d9e:	2b02      	cmp	r3, #2
 8007da0:	d80b      	bhi.n	8007dba <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	885b      	ldrh	r3, [r3, #2]
 8007da6:	2b01      	cmp	r3, #1
 8007da8:	d10c      	bne.n	8007dc4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2200      	movs	r2, #0
 8007dae:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	f000 f90f 	bl	8007fd6 <USBD_CtlSendStatus>
      }
      break;
 8007db8:	e004      	b.n	8007dc4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007dba:	6839      	ldr	r1, [r7, #0]
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	f000 f840 	bl	8007e42 <USBD_CtlError>
      break;
 8007dc2:	e000      	b.n	8007dc6 <USBD_ClrFeature+0x3c>
      break;
 8007dc4:	bf00      	nop
  }
}
 8007dc6:	bf00      	nop
 8007dc8:	3708      	adds	r7, #8
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}

08007dce <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007dce:	b580      	push	{r7, lr}
 8007dd0:	b084      	sub	sp, #16
 8007dd2:	af00      	add	r7, sp, #0
 8007dd4:	6078      	str	r0, [r7, #4]
 8007dd6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	781a      	ldrb	r2, [r3, #0]
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	3301      	adds	r3, #1
 8007de8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	781a      	ldrb	r2, [r3, #0]
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	3301      	adds	r3, #1
 8007df6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007df8:	68f8      	ldr	r0, [r7, #12]
 8007dfa:	f7ff fa41 	bl	8007280 <SWAPBYTE>
 8007dfe:	4603      	mov	r3, r0
 8007e00:	461a      	mov	r2, r3
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	3301      	adds	r3, #1
 8007e0a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	3301      	adds	r3, #1
 8007e10:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007e12:	68f8      	ldr	r0, [r7, #12]
 8007e14:	f7ff fa34 	bl	8007280 <SWAPBYTE>
 8007e18:	4603      	mov	r3, r0
 8007e1a:	461a      	mov	r2, r3
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	3301      	adds	r3, #1
 8007e24:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	3301      	adds	r3, #1
 8007e2a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007e2c:	68f8      	ldr	r0, [r7, #12]
 8007e2e:	f7ff fa27 	bl	8007280 <SWAPBYTE>
 8007e32:	4603      	mov	r3, r0
 8007e34:	461a      	mov	r2, r3
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	80da      	strh	r2, [r3, #6]
}
 8007e3a:	bf00      	nop
 8007e3c:	3710      	adds	r7, #16
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}

08007e42 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e42:	b580      	push	{r7, lr}
 8007e44:	b082      	sub	sp, #8
 8007e46:	af00      	add	r7, sp, #0
 8007e48:	6078      	str	r0, [r7, #4]
 8007e4a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007e4c:	2180      	movs	r1, #128	; 0x80
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f012 f83c 	bl	8019ecc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007e54:	2100      	movs	r1, #0
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f012 f838 	bl	8019ecc <USBD_LL_StallEP>
}
 8007e5c:	bf00      	nop
 8007e5e:	3708      	adds	r7, #8
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}

08007e64 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b086      	sub	sp, #24
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	60f8      	str	r0, [r7, #12]
 8007e6c:	60b9      	str	r1, [r7, #8]
 8007e6e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007e70:	2300      	movs	r3, #0
 8007e72:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d036      	beq.n	8007ee8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007e7e:	6938      	ldr	r0, [r7, #16]
 8007e80:	f000 f836 	bl	8007ef0 <USBD_GetLen>
 8007e84:	4603      	mov	r3, r0
 8007e86:	3301      	adds	r3, #1
 8007e88:	b29b      	uxth	r3, r3
 8007e8a:	005b      	lsls	r3, r3, #1
 8007e8c:	b29a      	uxth	r2, r3
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007e92:	7dfb      	ldrb	r3, [r7, #23]
 8007e94:	68ba      	ldr	r2, [r7, #8]
 8007e96:	4413      	add	r3, r2
 8007e98:	687a      	ldr	r2, [r7, #4]
 8007e9a:	7812      	ldrb	r2, [r2, #0]
 8007e9c:	701a      	strb	r2, [r3, #0]
  idx++;
 8007e9e:	7dfb      	ldrb	r3, [r7, #23]
 8007ea0:	3301      	adds	r3, #1
 8007ea2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007ea4:	7dfb      	ldrb	r3, [r7, #23]
 8007ea6:	68ba      	ldr	r2, [r7, #8]
 8007ea8:	4413      	add	r3, r2
 8007eaa:	2203      	movs	r2, #3
 8007eac:	701a      	strb	r2, [r3, #0]
  idx++;
 8007eae:	7dfb      	ldrb	r3, [r7, #23]
 8007eb0:	3301      	adds	r3, #1
 8007eb2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007eb4:	e013      	b.n	8007ede <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007eb6:	7dfb      	ldrb	r3, [r7, #23]
 8007eb8:	68ba      	ldr	r2, [r7, #8]
 8007eba:	4413      	add	r3, r2
 8007ebc:	693a      	ldr	r2, [r7, #16]
 8007ebe:	7812      	ldrb	r2, [r2, #0]
 8007ec0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007ec2:	693b      	ldr	r3, [r7, #16]
 8007ec4:	3301      	adds	r3, #1
 8007ec6:	613b      	str	r3, [r7, #16]
    idx++;
 8007ec8:	7dfb      	ldrb	r3, [r7, #23]
 8007eca:	3301      	adds	r3, #1
 8007ecc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007ece:	7dfb      	ldrb	r3, [r7, #23]
 8007ed0:	68ba      	ldr	r2, [r7, #8]
 8007ed2:	4413      	add	r3, r2
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	701a      	strb	r2, [r3, #0]
    idx++;
 8007ed8:	7dfb      	ldrb	r3, [r7, #23]
 8007eda:	3301      	adds	r3, #1
 8007edc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007ede:	693b      	ldr	r3, [r7, #16]
 8007ee0:	781b      	ldrb	r3, [r3, #0]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d1e7      	bne.n	8007eb6 <USBD_GetString+0x52>
 8007ee6:	e000      	b.n	8007eea <USBD_GetString+0x86>
    return;
 8007ee8:	bf00      	nop
  }
}
 8007eea:	3718      	adds	r7, #24
 8007eec:	46bd      	mov	sp, r7
 8007eee:	bd80      	pop	{r7, pc}

08007ef0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b085      	sub	sp, #20
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007ef8:	2300      	movs	r3, #0
 8007efa:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007f00:	e005      	b.n	8007f0e <USBD_GetLen+0x1e>
  {
    len++;
 8007f02:	7bfb      	ldrb	r3, [r7, #15]
 8007f04:	3301      	adds	r3, #1
 8007f06:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	3301      	adds	r3, #1
 8007f0c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007f0e:	68bb      	ldr	r3, [r7, #8]
 8007f10:	781b      	ldrb	r3, [r3, #0]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d1f5      	bne.n	8007f02 <USBD_GetLen+0x12>
  }

  return len;
 8007f16:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f18:	4618      	mov	r0, r3
 8007f1a:	3714      	adds	r7, #20
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bc80      	pop	{r7}
 8007f20:	4770      	bx	lr

08007f22 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007f22:	b580      	push	{r7, lr}
 8007f24:	b084      	sub	sp, #16
 8007f26:	af00      	add	r7, sp, #0
 8007f28:	60f8      	str	r0, [r7, #12]
 8007f2a:	60b9      	str	r1, [r7, #8]
 8007f2c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	2202      	movs	r2, #2
 8007f32:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	687a      	ldr	r2, [r7, #4]
 8007f3a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	687a      	ldr	r2, [r7, #4]
 8007f40:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	68ba      	ldr	r2, [r7, #8]
 8007f46:	2100      	movs	r1, #0
 8007f48:	68f8      	ldr	r0, [r7, #12]
 8007f4a:	f012 f847 	bl	8019fdc <USBD_LL_Transmit>

  return USBD_OK;
 8007f4e:	2300      	movs	r3, #0
}
 8007f50:	4618      	mov	r0, r3
 8007f52:	3710      	adds	r7, #16
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd80      	pop	{r7, pc}

08007f58 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b084      	sub	sp, #16
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	60f8      	str	r0, [r7, #12]
 8007f60:	60b9      	str	r1, [r7, #8]
 8007f62:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	68ba      	ldr	r2, [r7, #8]
 8007f68:	2100      	movs	r1, #0
 8007f6a:	68f8      	ldr	r0, [r7, #12]
 8007f6c:	f012 f836 	bl	8019fdc <USBD_LL_Transmit>

  return USBD_OK;
 8007f70:	2300      	movs	r3, #0
}
 8007f72:	4618      	mov	r0, r3
 8007f74:	3710      	adds	r7, #16
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}

08007f7a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007f7a:	b580      	push	{r7, lr}
 8007f7c:	b084      	sub	sp, #16
 8007f7e:	af00      	add	r7, sp, #0
 8007f80:	60f8      	str	r0, [r7, #12]
 8007f82:	60b9      	str	r1, [r7, #8]
 8007f84:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	2203      	movs	r2, #3
 8007f8a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	687a      	ldr	r2, [r7, #4]
 8007f92:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	687a      	ldr	r2, [r7, #4]
 8007f9a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	68ba      	ldr	r2, [r7, #8]
 8007fa2:	2100      	movs	r1, #0
 8007fa4:	68f8      	ldr	r0, [r7, #12]
 8007fa6:	f012 f83a 	bl	801a01e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007faa:	2300      	movs	r3, #0
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	3710      	adds	r7, #16
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bd80      	pop	{r7, pc}

08007fb4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b084      	sub	sp, #16
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	60f8      	str	r0, [r7, #12]
 8007fbc:	60b9      	str	r1, [r7, #8]
 8007fbe:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	68ba      	ldr	r2, [r7, #8]
 8007fc4:	2100      	movs	r1, #0
 8007fc6:	68f8      	ldr	r0, [r7, #12]
 8007fc8:	f012 f829 	bl	801a01e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007fcc:	2300      	movs	r3, #0
}
 8007fce:	4618      	mov	r0, r3
 8007fd0:	3710      	adds	r7, #16
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bd80      	pop	{r7, pc}

08007fd6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007fd6:	b580      	push	{r7, lr}
 8007fd8:	b082      	sub	sp, #8
 8007fda:	af00      	add	r7, sp, #0
 8007fdc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2204      	movs	r2, #4
 8007fe2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	2200      	movs	r2, #0
 8007fea:	2100      	movs	r1, #0
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f011 fff5 	bl	8019fdc <USBD_LL_Transmit>

  return USBD_OK;
 8007ff2:	2300      	movs	r3, #0
}
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	3708      	adds	r7, #8
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bd80      	pop	{r7, pc}

08007ffc <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b082      	sub	sp, #8
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2205      	movs	r2, #5
 8008008:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800800c:	2300      	movs	r3, #0
 800800e:	2200      	movs	r2, #0
 8008010:	2100      	movs	r1, #0
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f012 f803 	bl	801a01e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008018:	2300      	movs	r3, #0
}
 800801a:	4618      	mov	r0, r3
 800801c:	3708      	adds	r7, #8
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}

08008022 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008022:	b480      	push	{r7}
 8008024:	b085      	sub	sp, #20
 8008026:	af00      	add	r7, sp, #0
 8008028:	4603      	mov	r3, r0
 800802a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800802c:	2300      	movs	r3, #0
 800802e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008030:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008034:	2b84      	cmp	r3, #132	; 0x84
 8008036:	d005      	beq.n	8008044 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008038:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	4413      	add	r3, r2
 8008040:	3303      	adds	r3, #3
 8008042:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8008044:	68fb      	ldr	r3, [r7, #12]
}
 8008046:	4618      	mov	r0, r3
 8008048:	3714      	adds	r7, #20
 800804a:	46bd      	mov	sp, r7
 800804c:	bc80      	pop	{r7}
 800804e:	4770      	bx	lr

08008050 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8008050:	b480      	push	{r7}
 8008052:	b083      	sub	sp, #12
 8008054:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008056:	f3ef 8305 	mrs	r3, IPSR
 800805a:	607b      	str	r3, [r7, #4]
  return(result);
 800805c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800805e:	2b00      	cmp	r3, #0
 8008060:	bf14      	ite	ne
 8008062:	2301      	movne	r3, #1
 8008064:	2300      	moveq	r3, #0
 8008066:	b2db      	uxtb	r3, r3
}
 8008068:	4618      	mov	r0, r3
 800806a:	370c      	adds	r7, #12
 800806c:	46bd      	mov	sp, r7
 800806e:	bc80      	pop	{r7}
 8008070:	4770      	bx	lr

08008072 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008072:	b580      	push	{r7, lr}
 8008074:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008076:	f001 fc3d 	bl	80098f4 <vTaskStartScheduler>
  
  return osOK;
 800807a:	2300      	movs	r3, #0
}
 800807c:	4618      	mov	r0, r3
 800807e:	bd80      	pop	{r7, pc}

08008080 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8008080:	b580      	push	{r7, lr}
 8008082:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8008084:	f7ff ffe4 	bl	8008050 <inHandlerMode>
 8008088:	4603      	mov	r3, r0
 800808a:	2b00      	cmp	r3, #0
 800808c:	d003      	beq.n	8008096 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800808e:	f001 fd53 	bl	8009b38 <xTaskGetTickCountFromISR>
 8008092:	4603      	mov	r3, r0
 8008094:	e002      	b.n	800809c <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8008096:	f001 fd41 	bl	8009b1c <xTaskGetTickCount>
 800809a:	4603      	mov	r3, r0
  }
}
 800809c:	4618      	mov	r0, r3
 800809e:	bd80      	pop	{r7, pc}

080080a0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80080a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80080a2:	b089      	sub	sp, #36	; 0x24
 80080a4:	af04      	add	r7, sp, #16
 80080a6:	6078      	str	r0, [r7, #4]
 80080a8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	695b      	ldr	r3, [r3, #20]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d020      	beq.n	80080f4 <osThreadCreate+0x54>
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	699b      	ldr	r3, [r3, #24]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d01c      	beq.n	80080f4 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	685c      	ldr	r4, [r3, #4]
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681d      	ldr	r5, [r3, #0]
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	691e      	ldr	r6, [r3, #16]
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80080cc:	4618      	mov	r0, r3
 80080ce:	f7ff ffa8 	bl	8008022 <makeFreeRtosPriority>
 80080d2:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	695b      	ldr	r3, [r3, #20]
 80080d8:	687a      	ldr	r2, [r7, #4]
 80080da:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80080dc:	9202      	str	r2, [sp, #8]
 80080de:	9301      	str	r3, [sp, #4]
 80080e0:	9100      	str	r1, [sp, #0]
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	4632      	mov	r2, r6
 80080e6:	4629      	mov	r1, r5
 80080e8:	4620      	mov	r0, r4
 80080ea:	f001 fa24 	bl	8009536 <xTaskCreateStatic>
 80080ee:	4603      	mov	r3, r0
 80080f0:	60fb      	str	r3, [r7, #12]
 80080f2:	e01c      	b.n	800812e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	685c      	ldr	r4, [r3, #4]
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008100:	b29e      	uxth	r6, r3
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008108:	4618      	mov	r0, r3
 800810a:	f7ff ff8a 	bl	8008022 <makeFreeRtosPriority>
 800810e:	4602      	mov	r2, r0
 8008110:	f107 030c 	add.w	r3, r7, #12
 8008114:	9301      	str	r3, [sp, #4]
 8008116:	9200      	str	r2, [sp, #0]
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	4632      	mov	r2, r6
 800811c:	4629      	mov	r1, r5
 800811e:	4620      	mov	r0, r4
 8008120:	f001 fa66 	bl	80095f0 <xTaskCreate>
 8008124:	4603      	mov	r3, r0
 8008126:	2b01      	cmp	r3, #1
 8008128:	d001      	beq.n	800812e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800812a:	2300      	movs	r3, #0
 800812c:	e000      	b.n	8008130 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800812e:	68fb      	ldr	r3, [r7, #12]
}
 8008130:	4618      	mov	r0, r3
 8008132:	3714      	adds	r7, #20
 8008134:	46bd      	mov	sp, r7
 8008136:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008138 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b084      	sub	sp, #16
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d001      	beq.n	800814e <osDelay+0x16>
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	e000      	b.n	8008150 <osDelay+0x18>
 800814e:	2301      	movs	r3, #1
 8008150:	4618      	mov	r0, r3
 8008152:	f001 fb9b 	bl	800988c <vTaskDelay>
  
  return osOK;
 8008156:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8008158:	4618      	mov	r0, r3
 800815a:	3710      	adds	r7, #16
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}

08008160 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b082      	sub	sp, #8
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	685b      	ldr	r3, [r3, #4]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d007      	beq.n	8008180 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	685b      	ldr	r3, [r3, #4]
 8008174:	4619      	mov	r1, r3
 8008176:	2001      	movs	r0, #1
 8008178:	f000 fc09 	bl	800898e <xQueueCreateMutexStatic>
 800817c:	4603      	mov	r3, r0
 800817e:	e003      	b.n	8008188 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8008180:	2001      	movs	r0, #1
 8008182:	f000 fbec 	bl	800895e <xQueueCreateMutex>
 8008186:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8008188:	4618      	mov	r0, r3
 800818a:	3708      	adds	r7, #8
 800818c:	46bd      	mov	sp, r7
 800818e:	bd80      	pop	{r7, pc}

08008190 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b084      	sub	sp, #16
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
 8008198:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800819a:	2300      	movs	r3, #0
 800819c:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d101      	bne.n	80081a8 <osMutexWait+0x18>
    return osErrorParameter;
 80081a4:	2380      	movs	r3, #128	; 0x80
 80081a6:	e03a      	b.n	800821e <osMutexWait+0x8e>
  }
  
  ticks = 0;
 80081a8:	2300      	movs	r3, #0
 80081aa:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081b2:	d103      	bne.n	80081bc <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 80081b4:	f04f 33ff 	mov.w	r3, #4294967295
 80081b8:	60fb      	str	r3, [r7, #12]
 80081ba:	e009      	b.n	80081d0 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d006      	beq.n	80081d0 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d101      	bne.n	80081d0 <osMutexWait+0x40>
      ticks = 1;
 80081cc:	2301      	movs	r3, #1
 80081ce:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80081d0:	f7ff ff3e 	bl	8008050 <inHandlerMode>
 80081d4:	4603      	mov	r3, r0
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d017      	beq.n	800820a <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80081da:	f107 0308 	add.w	r3, r7, #8
 80081de:	461a      	mov	r2, r3
 80081e0:	2100      	movs	r1, #0
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f001 f800 	bl	80091e8 <xQueueReceiveFromISR>
 80081e8:	4603      	mov	r3, r0
 80081ea:	2b01      	cmp	r3, #1
 80081ec:	d001      	beq.n	80081f2 <osMutexWait+0x62>
      return osErrorOS;
 80081ee:	23ff      	movs	r3, #255	; 0xff
 80081f0:	e015      	b.n	800821e <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80081f2:	68bb      	ldr	r3, [r7, #8]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d011      	beq.n	800821c <osMutexWait+0x8c>
 80081f8:	4b0b      	ldr	r3, [pc, #44]	; (8008228 <osMutexWait+0x98>)
 80081fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081fe:	601a      	str	r2, [r3, #0]
 8008200:	f3bf 8f4f 	dsb	sy
 8008204:	f3bf 8f6f 	isb	sy
 8008208:	e008      	b.n	800821c <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800820a:	68f9      	ldr	r1, [r7, #12]
 800820c:	6878      	ldr	r0, [r7, #4]
 800820e:	f000 fedf 	bl	8008fd0 <xQueueSemaphoreTake>
 8008212:	4603      	mov	r3, r0
 8008214:	2b01      	cmp	r3, #1
 8008216:	d001      	beq.n	800821c <osMutexWait+0x8c>
    return osErrorOS;
 8008218:	23ff      	movs	r3, #255	; 0xff
 800821a:	e000      	b.n	800821e <osMutexWait+0x8e>
  }
  
  return osOK;
 800821c:	2300      	movs	r3, #0
}
 800821e:	4618      	mov	r0, r3
 8008220:	3710      	adds	r7, #16
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}
 8008226:	bf00      	nop
 8008228:	e000ed04 	.word	0xe000ed04

0800822c <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b084      	sub	sp, #16
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8008234:	2300      	movs	r3, #0
 8008236:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8008238:	2300      	movs	r3, #0
 800823a:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800823c:	f7ff ff08 	bl	8008050 <inHandlerMode>
 8008240:	4603      	mov	r3, r0
 8008242:	2b00      	cmp	r3, #0
 8008244:	d016      	beq.n	8008274 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8008246:	f107 0308 	add.w	r3, r7, #8
 800824a:	4619      	mov	r1, r3
 800824c:	6878      	ldr	r0, [r7, #4]
 800824e:	f000 fd52 	bl	8008cf6 <xQueueGiveFromISR>
 8008252:	4603      	mov	r3, r0
 8008254:	2b01      	cmp	r3, #1
 8008256:	d001      	beq.n	800825c <osMutexRelease+0x30>
      return osErrorOS;
 8008258:	23ff      	movs	r3, #255	; 0xff
 800825a:	e017      	b.n	800828c <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800825c:	68bb      	ldr	r3, [r7, #8]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d013      	beq.n	800828a <osMutexRelease+0x5e>
 8008262:	4b0c      	ldr	r3, [pc, #48]	; (8008294 <osMutexRelease+0x68>)
 8008264:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008268:	601a      	str	r2, [r3, #0]
 800826a:	f3bf 8f4f 	dsb	sy
 800826e:	f3bf 8f6f 	isb	sy
 8008272:	e00a      	b.n	800828a <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8008274:	2300      	movs	r3, #0
 8008276:	2200      	movs	r2, #0
 8008278:	2100      	movs	r1, #0
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f000 fba2 	bl	80089c4 <xQueueGenericSend>
 8008280:	4603      	mov	r3, r0
 8008282:	2b01      	cmp	r3, #1
 8008284:	d001      	beq.n	800828a <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8008286:	23ff      	movs	r3, #255	; 0xff
 8008288:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800828a:	68fb      	ldr	r3, [r7, #12]
}
 800828c:	4618      	mov	r0, r3
 800828e:	3710      	adds	r7, #16
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}
 8008294:	e000ed04 	.word	0xe000ed04

08008298 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b084      	sub	sp, #16
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
 80082a0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80082a2:	2300      	movs	r3, #0
 80082a4:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d101      	bne.n	80082b0 <osSemaphoreWait+0x18>
    return osErrorParameter;
 80082ac:	2380      	movs	r3, #128	; 0x80
 80082ae:	e03a      	b.n	8008326 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80082b0:	2300      	movs	r3, #0
 80082b2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082ba:	d103      	bne.n	80082c4 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80082bc:	f04f 33ff 	mov.w	r3, #4294967295
 80082c0:	60fb      	str	r3, [r7, #12]
 80082c2:	e009      	b.n	80082d8 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d006      	beq.n	80082d8 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d101      	bne.n	80082d8 <osSemaphoreWait+0x40>
      ticks = 1;
 80082d4:	2301      	movs	r3, #1
 80082d6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80082d8:	f7ff feba 	bl	8008050 <inHandlerMode>
 80082dc:	4603      	mov	r3, r0
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d017      	beq.n	8008312 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80082e2:	f107 0308 	add.w	r3, r7, #8
 80082e6:	461a      	mov	r2, r3
 80082e8:	2100      	movs	r1, #0
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	f000 ff7c 	bl	80091e8 <xQueueReceiveFromISR>
 80082f0:	4603      	mov	r3, r0
 80082f2:	2b01      	cmp	r3, #1
 80082f4:	d001      	beq.n	80082fa <osSemaphoreWait+0x62>
      return osErrorOS;
 80082f6:	23ff      	movs	r3, #255	; 0xff
 80082f8:	e015      	b.n	8008326 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80082fa:	68bb      	ldr	r3, [r7, #8]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d011      	beq.n	8008324 <osSemaphoreWait+0x8c>
 8008300:	4b0b      	ldr	r3, [pc, #44]	; (8008330 <osSemaphoreWait+0x98>)
 8008302:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008306:	601a      	str	r2, [r3, #0]
 8008308:	f3bf 8f4f 	dsb	sy
 800830c:	f3bf 8f6f 	isb	sy
 8008310:	e008      	b.n	8008324 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8008312:	68f9      	ldr	r1, [r7, #12]
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f000 fe5b 	bl	8008fd0 <xQueueSemaphoreTake>
 800831a:	4603      	mov	r3, r0
 800831c:	2b01      	cmp	r3, #1
 800831e:	d001      	beq.n	8008324 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8008320:	23ff      	movs	r3, #255	; 0xff
 8008322:	e000      	b.n	8008326 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8008324:	2300      	movs	r3, #0
}
 8008326:	4618      	mov	r0, r3
 8008328:	3710      	adds	r7, #16
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}
 800832e:	bf00      	nop
 8008330:	e000ed04 	.word	0xe000ed04

08008334 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b084      	sub	sp, #16
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800833c:	2300      	movs	r3, #0
 800833e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8008340:	2300      	movs	r3, #0
 8008342:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8008344:	f7ff fe84 	bl	8008050 <inHandlerMode>
 8008348:	4603      	mov	r3, r0
 800834a:	2b00      	cmp	r3, #0
 800834c:	d016      	beq.n	800837c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800834e:	f107 0308 	add.w	r3, r7, #8
 8008352:	4619      	mov	r1, r3
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f000 fcce 	bl	8008cf6 <xQueueGiveFromISR>
 800835a:	4603      	mov	r3, r0
 800835c:	2b01      	cmp	r3, #1
 800835e:	d001      	beq.n	8008364 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8008360:	23ff      	movs	r3, #255	; 0xff
 8008362:	e017      	b.n	8008394 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008364:	68bb      	ldr	r3, [r7, #8]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d013      	beq.n	8008392 <osSemaphoreRelease+0x5e>
 800836a:	4b0c      	ldr	r3, [pc, #48]	; (800839c <osSemaphoreRelease+0x68>)
 800836c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008370:	601a      	str	r2, [r3, #0]
 8008372:	f3bf 8f4f 	dsb	sy
 8008376:	f3bf 8f6f 	isb	sy
 800837a:	e00a      	b.n	8008392 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800837c:	2300      	movs	r3, #0
 800837e:	2200      	movs	r2, #0
 8008380:	2100      	movs	r1, #0
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f000 fb1e 	bl	80089c4 <xQueueGenericSend>
 8008388:	4603      	mov	r3, r0
 800838a:	2b01      	cmp	r3, #1
 800838c:	d001      	beq.n	8008392 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800838e:	23ff      	movs	r3, #255	; 0xff
 8008390:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8008392:	68fb      	ldr	r3, [r7, #12]
}
 8008394:	4618      	mov	r0, r3
 8008396:	3710      	adds	r7, #16
 8008398:	46bd      	mov	sp, r7
 800839a:	bd80      	pop	{r7, pc}
 800839c:	e000ed04 	.word	0xe000ed04

080083a0 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80083a0:	b590      	push	{r4, r7, lr}
 80083a2:	b085      	sub	sp, #20
 80083a4:	af02      	add	r7, sp, #8
 80083a6:	6078      	str	r0, [r7, #4]
 80083a8:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	689b      	ldr	r3, [r3, #8]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d011      	beq.n	80083d6 <osMessageCreate+0x36>
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	68db      	ldr	r3, [r3, #12]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d00d      	beq.n	80083d6 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6818      	ldr	r0, [r3, #0]
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6859      	ldr	r1, [r3, #4]
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	689a      	ldr	r2, [r3, #8]
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	68db      	ldr	r3, [r3, #12]
 80083ca:	2400      	movs	r4, #0
 80083cc:	9400      	str	r4, [sp, #0]
 80083ce:	f000 f9db 	bl	8008788 <xQueueGenericCreateStatic>
 80083d2:	4603      	mov	r3, r0
 80083d4:	e008      	b.n	80083e8 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6818      	ldr	r0, [r3, #0]
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	685b      	ldr	r3, [r3, #4]
 80083de:	2200      	movs	r2, #0
 80083e0:	4619      	mov	r1, r3
 80083e2:	f000 fa49 	bl	8008878 <xQueueGenericCreate>
 80083e6:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80083e8:	4618      	mov	r0, r3
 80083ea:	370c      	adds	r7, #12
 80083ec:	46bd      	mov	sp, r7
 80083ee:	bd90      	pop	{r4, r7, pc}

080083f0 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b086      	sub	sp, #24
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	60f8      	str	r0, [r7, #12]
 80083f8:	60b9      	str	r1, [r7, #8]
 80083fa:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80083fc:	2300      	movs	r3, #0
 80083fe:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8008404:	697b      	ldr	r3, [r7, #20]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d101      	bne.n	800840e <osMessagePut+0x1e>
    ticks = 1;
 800840a:	2301      	movs	r3, #1
 800840c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800840e:	f7ff fe1f 	bl	8008050 <inHandlerMode>
 8008412:	4603      	mov	r3, r0
 8008414:	2b00      	cmp	r3, #0
 8008416:	d018      	beq.n	800844a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8008418:	f107 0210 	add.w	r2, r7, #16
 800841c:	f107 0108 	add.w	r1, r7, #8
 8008420:	2300      	movs	r3, #0
 8008422:	68f8      	ldr	r0, [r7, #12]
 8008424:	f000 fbcc 	bl	8008bc0 <xQueueGenericSendFromISR>
 8008428:	4603      	mov	r3, r0
 800842a:	2b01      	cmp	r3, #1
 800842c:	d001      	beq.n	8008432 <osMessagePut+0x42>
      return osErrorOS;
 800842e:	23ff      	movs	r3, #255	; 0xff
 8008430:	e018      	b.n	8008464 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008432:	693b      	ldr	r3, [r7, #16]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d014      	beq.n	8008462 <osMessagePut+0x72>
 8008438:	4b0c      	ldr	r3, [pc, #48]	; (800846c <osMessagePut+0x7c>)
 800843a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800843e:	601a      	str	r2, [r3, #0]
 8008440:	f3bf 8f4f 	dsb	sy
 8008444:	f3bf 8f6f 	isb	sy
 8008448:	e00b      	b.n	8008462 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800844a:	f107 0108 	add.w	r1, r7, #8
 800844e:	2300      	movs	r3, #0
 8008450:	697a      	ldr	r2, [r7, #20]
 8008452:	68f8      	ldr	r0, [r7, #12]
 8008454:	f000 fab6 	bl	80089c4 <xQueueGenericSend>
 8008458:	4603      	mov	r3, r0
 800845a:	2b01      	cmp	r3, #1
 800845c:	d001      	beq.n	8008462 <osMessagePut+0x72>
      return osErrorOS;
 800845e:	23ff      	movs	r3, #255	; 0xff
 8008460:	e000      	b.n	8008464 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8008462:	2300      	movs	r3, #0
}
 8008464:	4618      	mov	r0, r3
 8008466:	3718      	adds	r7, #24
 8008468:	46bd      	mov	sp, r7
 800846a:	bd80      	pop	{r7, pc}
 800846c:	e000ed04 	.word	0xe000ed04

08008470 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8008470:	b590      	push	{r4, r7, lr}
 8008472:	b08b      	sub	sp, #44	; 0x2c
 8008474:	af00      	add	r7, sp, #0
 8008476:	60f8      	str	r0, [r7, #12]
 8008478:	60b9      	str	r1, [r7, #8]
 800847a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8008480:	2300      	movs	r3, #0
 8008482:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d10a      	bne.n	80084a0 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800848a:	2380      	movs	r3, #128	; 0x80
 800848c:	617b      	str	r3, [r7, #20]
    return event;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	461c      	mov	r4, r3
 8008492:	f107 0314 	add.w	r3, r7, #20
 8008496:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800849a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800849e:	e054      	b.n	800854a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80084a0:	2300      	movs	r3, #0
 80084a2:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80084a4:	2300      	movs	r3, #0
 80084a6:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084ae:	d103      	bne.n	80084b8 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80084b0:	f04f 33ff 	mov.w	r3, #4294967295
 80084b4:	627b      	str	r3, [r7, #36]	; 0x24
 80084b6:	e009      	b.n	80084cc <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d006      	beq.n	80084cc <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80084c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d101      	bne.n	80084cc <osMessageGet+0x5c>
      ticks = 1;
 80084c8:	2301      	movs	r3, #1
 80084ca:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80084cc:	f7ff fdc0 	bl	8008050 <inHandlerMode>
 80084d0:	4603      	mov	r3, r0
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d01c      	beq.n	8008510 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80084d6:	f107 0220 	add.w	r2, r7, #32
 80084da:	f107 0314 	add.w	r3, r7, #20
 80084de:	3304      	adds	r3, #4
 80084e0:	4619      	mov	r1, r3
 80084e2:	68b8      	ldr	r0, [r7, #8]
 80084e4:	f000 fe80 	bl	80091e8 <xQueueReceiveFromISR>
 80084e8:	4603      	mov	r3, r0
 80084ea:	2b01      	cmp	r3, #1
 80084ec:	d102      	bne.n	80084f4 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80084ee:	2310      	movs	r3, #16
 80084f0:	617b      	str	r3, [r7, #20]
 80084f2:	e001      	b.n	80084f8 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80084f4:	2300      	movs	r3, #0
 80084f6:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80084f8:	6a3b      	ldr	r3, [r7, #32]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d01d      	beq.n	800853a <osMessageGet+0xca>
 80084fe:	4b15      	ldr	r3, [pc, #84]	; (8008554 <osMessageGet+0xe4>)
 8008500:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008504:	601a      	str	r2, [r3, #0]
 8008506:	f3bf 8f4f 	dsb	sy
 800850a:	f3bf 8f6f 	isb	sy
 800850e:	e014      	b.n	800853a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8008510:	f107 0314 	add.w	r3, r7, #20
 8008514:	3304      	adds	r3, #4
 8008516:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008518:	4619      	mov	r1, r3
 800851a:	68b8      	ldr	r0, [r7, #8]
 800851c:	f000 fc78 	bl	8008e10 <xQueueReceive>
 8008520:	4603      	mov	r3, r0
 8008522:	2b01      	cmp	r3, #1
 8008524:	d102      	bne.n	800852c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8008526:	2310      	movs	r3, #16
 8008528:	617b      	str	r3, [r7, #20]
 800852a:	e006      	b.n	800853a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800852c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800852e:	2b00      	cmp	r3, #0
 8008530:	d101      	bne.n	8008536 <osMessageGet+0xc6>
 8008532:	2300      	movs	r3, #0
 8008534:	e000      	b.n	8008538 <osMessageGet+0xc8>
 8008536:	2340      	movs	r3, #64	; 0x40
 8008538:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	461c      	mov	r4, r3
 800853e:	f107 0314 	add.w	r3, r7, #20
 8008542:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008546:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800854a:	68f8      	ldr	r0, [r7, #12]
 800854c:	372c      	adds	r7, #44	; 0x2c
 800854e:	46bd      	mov	sp, r7
 8008550:	bd90      	pop	{r4, r7, pc}
 8008552:	bf00      	nop
 8008554:	e000ed04 	.word	0xe000ed04

08008558 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008558:	b480      	push	{r7}
 800855a:	b083      	sub	sp, #12
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	f103 0208 	add.w	r2, r3, #8
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	f04f 32ff 	mov.w	r2, #4294967295
 8008570:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	f103 0208 	add.w	r2, r3, #8
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f103 0208 	add.w	r2, r3, #8
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2200      	movs	r2, #0
 800858a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800858c:	bf00      	nop
 800858e:	370c      	adds	r7, #12
 8008590:	46bd      	mov	sp, r7
 8008592:	bc80      	pop	{r7}
 8008594:	4770      	bx	lr

08008596 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008596:	b480      	push	{r7}
 8008598:	b083      	sub	sp, #12
 800859a:	af00      	add	r7, sp, #0
 800859c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2200      	movs	r2, #0
 80085a2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80085a4:	bf00      	nop
 80085a6:	370c      	adds	r7, #12
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bc80      	pop	{r7}
 80085ac:	4770      	bx	lr

080085ae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80085ae:	b480      	push	{r7}
 80085b0:	b085      	sub	sp, #20
 80085b2:	af00      	add	r7, sp, #0
 80085b4:	6078      	str	r0, [r7, #4]
 80085b6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	685b      	ldr	r3, [r3, #4]
 80085bc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	68fa      	ldr	r2, [r7, #12]
 80085c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	689a      	ldr	r2, [r3, #8]
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	689b      	ldr	r3, [r3, #8]
 80085d0:	683a      	ldr	r2, [r7, #0]
 80085d2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	683a      	ldr	r2, [r7, #0]
 80085d8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	687a      	ldr	r2, [r7, #4]
 80085de:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	1c5a      	adds	r2, r3, #1
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	601a      	str	r2, [r3, #0]
}
 80085ea:	bf00      	nop
 80085ec:	3714      	adds	r7, #20
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bc80      	pop	{r7}
 80085f2:	4770      	bx	lr

080085f4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80085f4:	b480      	push	{r7}
 80085f6:	b085      	sub	sp, #20
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
 80085fc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800860a:	d103      	bne.n	8008614 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	691b      	ldr	r3, [r3, #16]
 8008610:	60fb      	str	r3, [r7, #12]
 8008612:	e00c      	b.n	800862e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	3308      	adds	r3, #8
 8008618:	60fb      	str	r3, [r7, #12]
 800861a:	e002      	b.n	8008622 <vListInsert+0x2e>
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	685b      	ldr	r3, [r3, #4]
 8008620:	60fb      	str	r3, [r7, #12]
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	685b      	ldr	r3, [r3, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	68ba      	ldr	r2, [r7, #8]
 800862a:	429a      	cmp	r2, r3
 800862c:	d2f6      	bcs.n	800861c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	685a      	ldr	r2, [r3, #4]
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	685b      	ldr	r3, [r3, #4]
 800863a:	683a      	ldr	r2, [r7, #0]
 800863c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	68fa      	ldr	r2, [r7, #12]
 8008642:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	683a      	ldr	r2, [r7, #0]
 8008648:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	687a      	ldr	r2, [r7, #4]
 800864e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	1c5a      	adds	r2, r3, #1
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	601a      	str	r2, [r3, #0]
}
 800865a:	bf00      	nop
 800865c:	3714      	adds	r7, #20
 800865e:	46bd      	mov	sp, r7
 8008660:	bc80      	pop	{r7}
 8008662:	4770      	bx	lr

08008664 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008664:	b480      	push	{r7}
 8008666:	b085      	sub	sp, #20
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	691b      	ldr	r3, [r3, #16]
 8008670:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	685b      	ldr	r3, [r3, #4]
 8008676:	687a      	ldr	r2, [r7, #4]
 8008678:	6892      	ldr	r2, [r2, #8]
 800867a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	689b      	ldr	r3, [r3, #8]
 8008680:	687a      	ldr	r2, [r7, #4]
 8008682:	6852      	ldr	r2, [r2, #4]
 8008684:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	685b      	ldr	r3, [r3, #4]
 800868a:	687a      	ldr	r2, [r7, #4]
 800868c:	429a      	cmp	r2, r3
 800868e:	d103      	bne.n	8008698 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	689a      	ldr	r2, [r3, #8]
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2200      	movs	r2, #0
 800869c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	1e5a      	subs	r2, r3, #1
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	681b      	ldr	r3, [r3, #0]
}
 80086ac:	4618      	mov	r0, r3
 80086ae:	3714      	adds	r7, #20
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bc80      	pop	{r7}
 80086b4:	4770      	bx	lr
	...

080086b8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b084      	sub	sp, #16
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
 80086c0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d10a      	bne.n	80086e2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80086cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086d0:	f383 8811 	msr	BASEPRI, r3
 80086d4:	f3bf 8f6f 	isb	sy
 80086d8:	f3bf 8f4f 	dsb	sy
 80086dc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80086de:	bf00      	nop
 80086e0:	e7fe      	b.n	80086e0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80086e2:	f002 f84b 	bl	800a77c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	681a      	ldr	r2, [r3, #0]
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086ee:	68f9      	ldr	r1, [r7, #12]
 80086f0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80086f2:	fb01 f303 	mul.w	r3, r1, r3
 80086f6:	441a      	add	r2, r3
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	2200      	movs	r2, #0
 8008700:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	681a      	ldr	r2, [r3, #0]
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	681a      	ldr	r2, [r3, #0]
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008712:	3b01      	subs	r3, #1
 8008714:	68f9      	ldr	r1, [r7, #12]
 8008716:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008718:	fb01 f303 	mul.w	r3, r1, r3
 800871c:	441a      	add	r2, r3
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	22ff      	movs	r2, #255	; 0xff
 8008726:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	22ff      	movs	r2, #255	; 0xff
 800872e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d114      	bne.n	8008762 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	691b      	ldr	r3, [r3, #16]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d01a      	beq.n	8008776 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	3310      	adds	r3, #16
 8008744:	4618      	mov	r0, r3
 8008746:	f001 fb47 	bl	8009dd8 <xTaskRemoveFromEventList>
 800874a:	4603      	mov	r3, r0
 800874c:	2b00      	cmp	r3, #0
 800874e:	d012      	beq.n	8008776 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008750:	4b0c      	ldr	r3, [pc, #48]	; (8008784 <xQueueGenericReset+0xcc>)
 8008752:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008756:	601a      	str	r2, [r3, #0]
 8008758:	f3bf 8f4f 	dsb	sy
 800875c:	f3bf 8f6f 	isb	sy
 8008760:	e009      	b.n	8008776 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	3310      	adds	r3, #16
 8008766:	4618      	mov	r0, r3
 8008768:	f7ff fef6 	bl	8008558 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	3324      	adds	r3, #36	; 0x24
 8008770:	4618      	mov	r0, r3
 8008772:	f7ff fef1 	bl	8008558 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008776:	f002 f831 	bl	800a7dc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800877a:	2301      	movs	r3, #1
}
 800877c:	4618      	mov	r0, r3
 800877e:	3710      	adds	r7, #16
 8008780:	46bd      	mov	sp, r7
 8008782:	bd80      	pop	{r7, pc}
 8008784:	e000ed04 	.word	0xe000ed04

08008788 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008788:	b580      	push	{r7, lr}
 800878a:	b08e      	sub	sp, #56	; 0x38
 800878c:	af02      	add	r7, sp, #8
 800878e:	60f8      	str	r0, [r7, #12]
 8008790:	60b9      	str	r1, [r7, #8]
 8008792:	607a      	str	r2, [r7, #4]
 8008794:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d10a      	bne.n	80087b2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800879c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087a0:	f383 8811 	msr	BASEPRI, r3
 80087a4:	f3bf 8f6f 	isb	sy
 80087a8:	f3bf 8f4f 	dsb	sy
 80087ac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80087ae:	bf00      	nop
 80087b0:	e7fe      	b.n	80087b0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d10a      	bne.n	80087ce <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80087b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087bc:	f383 8811 	msr	BASEPRI, r3
 80087c0:	f3bf 8f6f 	isb	sy
 80087c4:	f3bf 8f4f 	dsb	sy
 80087c8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80087ca:	bf00      	nop
 80087cc:	e7fe      	b.n	80087cc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d002      	beq.n	80087da <xQueueGenericCreateStatic+0x52>
 80087d4:	68bb      	ldr	r3, [r7, #8]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d001      	beq.n	80087de <xQueueGenericCreateStatic+0x56>
 80087da:	2301      	movs	r3, #1
 80087dc:	e000      	b.n	80087e0 <xQueueGenericCreateStatic+0x58>
 80087de:	2300      	movs	r3, #0
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d10a      	bne.n	80087fa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80087e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087e8:	f383 8811 	msr	BASEPRI, r3
 80087ec:	f3bf 8f6f 	isb	sy
 80087f0:	f3bf 8f4f 	dsb	sy
 80087f4:	623b      	str	r3, [r7, #32]
}
 80087f6:	bf00      	nop
 80087f8:	e7fe      	b.n	80087f8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d102      	bne.n	8008806 <xQueueGenericCreateStatic+0x7e>
 8008800:	68bb      	ldr	r3, [r7, #8]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d101      	bne.n	800880a <xQueueGenericCreateStatic+0x82>
 8008806:	2301      	movs	r3, #1
 8008808:	e000      	b.n	800880c <xQueueGenericCreateStatic+0x84>
 800880a:	2300      	movs	r3, #0
 800880c:	2b00      	cmp	r3, #0
 800880e:	d10a      	bne.n	8008826 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008814:	f383 8811 	msr	BASEPRI, r3
 8008818:	f3bf 8f6f 	isb	sy
 800881c:	f3bf 8f4f 	dsb	sy
 8008820:	61fb      	str	r3, [r7, #28]
}
 8008822:	bf00      	nop
 8008824:	e7fe      	b.n	8008824 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008826:	2348      	movs	r3, #72	; 0x48
 8008828:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800882a:	697b      	ldr	r3, [r7, #20]
 800882c:	2b48      	cmp	r3, #72	; 0x48
 800882e:	d00a      	beq.n	8008846 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008834:	f383 8811 	msr	BASEPRI, r3
 8008838:	f3bf 8f6f 	isb	sy
 800883c:	f3bf 8f4f 	dsb	sy
 8008840:	61bb      	str	r3, [r7, #24]
}
 8008842:	bf00      	nop
 8008844:	e7fe      	b.n	8008844 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008846:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800884c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800884e:	2b00      	cmp	r3, #0
 8008850:	d00d      	beq.n	800886e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008854:	2201      	movs	r2, #1
 8008856:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800885a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800885e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008860:	9300      	str	r3, [sp, #0]
 8008862:	4613      	mov	r3, r2
 8008864:	687a      	ldr	r2, [r7, #4]
 8008866:	68b9      	ldr	r1, [r7, #8]
 8008868:	68f8      	ldr	r0, [r7, #12]
 800886a:	f000 f83f 	bl	80088ec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800886e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008870:	4618      	mov	r0, r3
 8008872:	3730      	adds	r7, #48	; 0x30
 8008874:	46bd      	mov	sp, r7
 8008876:	bd80      	pop	{r7, pc}

08008878 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008878:	b580      	push	{r7, lr}
 800887a:	b08a      	sub	sp, #40	; 0x28
 800887c:	af02      	add	r7, sp, #8
 800887e:	60f8      	str	r0, [r7, #12]
 8008880:	60b9      	str	r1, [r7, #8]
 8008882:	4613      	mov	r3, r2
 8008884:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d10a      	bne.n	80088a2 <xQueueGenericCreate+0x2a>
	__asm volatile
 800888c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008890:	f383 8811 	msr	BASEPRI, r3
 8008894:	f3bf 8f6f 	isb	sy
 8008898:	f3bf 8f4f 	dsb	sy
 800889c:	613b      	str	r3, [r7, #16]
}
 800889e:	bf00      	nop
 80088a0:	e7fe      	b.n	80088a0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	68ba      	ldr	r2, [r7, #8]
 80088a6:	fb02 f303 	mul.w	r3, r2, r3
 80088aa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80088ac:	69fb      	ldr	r3, [r7, #28]
 80088ae:	3348      	adds	r3, #72	; 0x48
 80088b0:	4618      	mov	r0, r3
 80088b2:	f002 f863 	bl	800a97c <pvPortMalloc>
 80088b6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80088b8:	69bb      	ldr	r3, [r7, #24]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d011      	beq.n	80088e2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80088be:	69bb      	ldr	r3, [r7, #24]
 80088c0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80088c2:	697b      	ldr	r3, [r7, #20]
 80088c4:	3348      	adds	r3, #72	; 0x48
 80088c6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80088c8:	69bb      	ldr	r3, [r7, #24]
 80088ca:	2200      	movs	r2, #0
 80088cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80088d0:	79fa      	ldrb	r2, [r7, #7]
 80088d2:	69bb      	ldr	r3, [r7, #24]
 80088d4:	9300      	str	r3, [sp, #0]
 80088d6:	4613      	mov	r3, r2
 80088d8:	697a      	ldr	r2, [r7, #20]
 80088da:	68b9      	ldr	r1, [r7, #8]
 80088dc:	68f8      	ldr	r0, [r7, #12]
 80088de:	f000 f805 	bl	80088ec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80088e2:	69bb      	ldr	r3, [r7, #24]
	}
 80088e4:	4618      	mov	r0, r3
 80088e6:	3720      	adds	r7, #32
 80088e8:	46bd      	mov	sp, r7
 80088ea:	bd80      	pop	{r7, pc}

080088ec <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b084      	sub	sp, #16
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	60f8      	str	r0, [r7, #12]
 80088f4:	60b9      	str	r1, [r7, #8]
 80088f6:	607a      	str	r2, [r7, #4]
 80088f8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80088fa:	68bb      	ldr	r3, [r7, #8]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d103      	bne.n	8008908 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008900:	69bb      	ldr	r3, [r7, #24]
 8008902:	69ba      	ldr	r2, [r7, #24]
 8008904:	601a      	str	r2, [r3, #0]
 8008906:	e002      	b.n	800890e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008908:	69bb      	ldr	r3, [r7, #24]
 800890a:	687a      	ldr	r2, [r7, #4]
 800890c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800890e:	69bb      	ldr	r3, [r7, #24]
 8008910:	68fa      	ldr	r2, [r7, #12]
 8008912:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008914:	69bb      	ldr	r3, [r7, #24]
 8008916:	68ba      	ldr	r2, [r7, #8]
 8008918:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800891a:	2101      	movs	r1, #1
 800891c:	69b8      	ldr	r0, [r7, #24]
 800891e:	f7ff fecb 	bl	80086b8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008922:	bf00      	nop
 8008924:	3710      	adds	r7, #16
 8008926:	46bd      	mov	sp, r7
 8008928:	bd80      	pop	{r7, pc}

0800892a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800892a:	b580      	push	{r7, lr}
 800892c:	b082      	sub	sp, #8
 800892e:	af00      	add	r7, sp, #0
 8008930:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d00e      	beq.n	8008956 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2200      	movs	r2, #0
 800893c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2200      	movs	r2, #0
 8008942:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2200      	movs	r2, #0
 8008948:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800894a:	2300      	movs	r3, #0
 800894c:	2200      	movs	r2, #0
 800894e:	2100      	movs	r1, #0
 8008950:	6878      	ldr	r0, [r7, #4]
 8008952:	f000 f837 	bl	80089c4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8008956:	bf00      	nop
 8008958:	3708      	adds	r7, #8
 800895a:	46bd      	mov	sp, r7
 800895c:	bd80      	pop	{r7, pc}

0800895e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800895e:	b580      	push	{r7, lr}
 8008960:	b086      	sub	sp, #24
 8008962:	af00      	add	r7, sp, #0
 8008964:	4603      	mov	r3, r0
 8008966:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008968:	2301      	movs	r3, #1
 800896a:	617b      	str	r3, [r7, #20]
 800896c:	2300      	movs	r3, #0
 800896e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8008970:	79fb      	ldrb	r3, [r7, #7]
 8008972:	461a      	mov	r2, r3
 8008974:	6939      	ldr	r1, [r7, #16]
 8008976:	6978      	ldr	r0, [r7, #20]
 8008978:	f7ff ff7e 	bl	8008878 <xQueueGenericCreate>
 800897c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800897e:	68f8      	ldr	r0, [r7, #12]
 8008980:	f7ff ffd3 	bl	800892a <prvInitialiseMutex>

		return xNewQueue;
 8008984:	68fb      	ldr	r3, [r7, #12]
	}
 8008986:	4618      	mov	r0, r3
 8008988:	3718      	adds	r7, #24
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}

0800898e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800898e:	b580      	push	{r7, lr}
 8008990:	b088      	sub	sp, #32
 8008992:	af02      	add	r7, sp, #8
 8008994:	4603      	mov	r3, r0
 8008996:	6039      	str	r1, [r7, #0]
 8008998:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800899a:	2301      	movs	r3, #1
 800899c:	617b      	str	r3, [r7, #20]
 800899e:	2300      	movs	r3, #0
 80089a0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80089a2:	79fb      	ldrb	r3, [r7, #7]
 80089a4:	9300      	str	r3, [sp, #0]
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	2200      	movs	r2, #0
 80089aa:	6939      	ldr	r1, [r7, #16]
 80089ac:	6978      	ldr	r0, [r7, #20]
 80089ae:	f7ff feeb 	bl	8008788 <xQueueGenericCreateStatic>
 80089b2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80089b4:	68f8      	ldr	r0, [r7, #12]
 80089b6:	f7ff ffb8 	bl	800892a <prvInitialiseMutex>

		return xNewQueue;
 80089ba:	68fb      	ldr	r3, [r7, #12]
	}
 80089bc:	4618      	mov	r0, r3
 80089be:	3718      	adds	r7, #24
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bd80      	pop	{r7, pc}

080089c4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b08e      	sub	sp, #56	; 0x38
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	60f8      	str	r0, [r7, #12]
 80089cc:	60b9      	str	r1, [r7, #8]
 80089ce:	607a      	str	r2, [r7, #4]
 80089d0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80089d2:	2300      	movs	r3, #0
 80089d4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80089da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d10a      	bne.n	80089f6 <xQueueGenericSend+0x32>
	__asm volatile
 80089e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089e4:	f383 8811 	msr	BASEPRI, r3
 80089e8:	f3bf 8f6f 	isb	sy
 80089ec:	f3bf 8f4f 	dsb	sy
 80089f0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80089f2:	bf00      	nop
 80089f4:	e7fe      	b.n	80089f4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80089f6:	68bb      	ldr	r3, [r7, #8]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d103      	bne.n	8008a04 <xQueueGenericSend+0x40>
 80089fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d101      	bne.n	8008a08 <xQueueGenericSend+0x44>
 8008a04:	2301      	movs	r3, #1
 8008a06:	e000      	b.n	8008a0a <xQueueGenericSend+0x46>
 8008a08:	2300      	movs	r3, #0
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d10a      	bne.n	8008a24 <xQueueGenericSend+0x60>
	__asm volatile
 8008a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a12:	f383 8811 	msr	BASEPRI, r3
 8008a16:	f3bf 8f6f 	isb	sy
 8008a1a:	f3bf 8f4f 	dsb	sy
 8008a1e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008a20:	bf00      	nop
 8008a22:	e7fe      	b.n	8008a22 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	2b02      	cmp	r3, #2
 8008a28:	d103      	bne.n	8008a32 <xQueueGenericSend+0x6e>
 8008a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a2e:	2b01      	cmp	r3, #1
 8008a30:	d101      	bne.n	8008a36 <xQueueGenericSend+0x72>
 8008a32:	2301      	movs	r3, #1
 8008a34:	e000      	b.n	8008a38 <xQueueGenericSend+0x74>
 8008a36:	2300      	movs	r3, #0
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d10a      	bne.n	8008a52 <xQueueGenericSend+0x8e>
	__asm volatile
 8008a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a40:	f383 8811 	msr	BASEPRI, r3
 8008a44:	f3bf 8f6f 	isb	sy
 8008a48:	f3bf 8f4f 	dsb	sy
 8008a4c:	623b      	str	r3, [r7, #32]
}
 8008a4e:	bf00      	nop
 8008a50:	e7fe      	b.n	8008a50 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008a52:	f001 fb81 	bl	800a158 <xTaskGetSchedulerState>
 8008a56:	4603      	mov	r3, r0
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d102      	bne.n	8008a62 <xQueueGenericSend+0x9e>
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d101      	bne.n	8008a66 <xQueueGenericSend+0xa2>
 8008a62:	2301      	movs	r3, #1
 8008a64:	e000      	b.n	8008a68 <xQueueGenericSend+0xa4>
 8008a66:	2300      	movs	r3, #0
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d10a      	bne.n	8008a82 <xQueueGenericSend+0xbe>
	__asm volatile
 8008a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a70:	f383 8811 	msr	BASEPRI, r3
 8008a74:	f3bf 8f6f 	isb	sy
 8008a78:	f3bf 8f4f 	dsb	sy
 8008a7c:	61fb      	str	r3, [r7, #28]
}
 8008a7e:	bf00      	nop
 8008a80:	e7fe      	b.n	8008a80 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008a82:	f001 fe7b 	bl	800a77c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a8e:	429a      	cmp	r2, r3
 8008a90:	d302      	bcc.n	8008a98 <xQueueGenericSend+0xd4>
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	2b02      	cmp	r3, #2
 8008a96:	d129      	bne.n	8008aec <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008a98:	683a      	ldr	r2, [r7, #0]
 8008a9a:	68b9      	ldr	r1, [r7, #8]
 8008a9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a9e:	f000 fc3a 	bl	8009316 <prvCopyDataToQueue>
 8008aa2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d010      	beq.n	8008ace <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aae:	3324      	adds	r3, #36	; 0x24
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	f001 f991 	bl	8009dd8 <xTaskRemoveFromEventList>
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d013      	beq.n	8008ae4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008abc:	4b3f      	ldr	r3, [pc, #252]	; (8008bbc <xQueueGenericSend+0x1f8>)
 8008abe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ac2:	601a      	str	r2, [r3, #0]
 8008ac4:	f3bf 8f4f 	dsb	sy
 8008ac8:	f3bf 8f6f 	isb	sy
 8008acc:	e00a      	b.n	8008ae4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d007      	beq.n	8008ae4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008ad4:	4b39      	ldr	r3, [pc, #228]	; (8008bbc <xQueueGenericSend+0x1f8>)
 8008ad6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ada:	601a      	str	r2, [r3, #0]
 8008adc:	f3bf 8f4f 	dsb	sy
 8008ae0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008ae4:	f001 fe7a 	bl	800a7dc <vPortExitCritical>
				return pdPASS;
 8008ae8:	2301      	movs	r3, #1
 8008aea:	e063      	b.n	8008bb4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d103      	bne.n	8008afa <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008af2:	f001 fe73 	bl	800a7dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008af6:	2300      	movs	r3, #0
 8008af8:	e05c      	b.n	8008bb4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008afa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d106      	bne.n	8008b0e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008b00:	f107 0314 	add.w	r3, r7, #20
 8008b04:	4618      	mov	r0, r3
 8008b06:	f001 f9c9 	bl	8009e9c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008b0a:	2301      	movs	r3, #1
 8008b0c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008b0e:	f001 fe65 	bl	800a7dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008b12:	f000 ff59 	bl	80099c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008b16:	f001 fe31 	bl	800a77c <vPortEnterCritical>
 8008b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b1c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008b20:	b25b      	sxtb	r3, r3
 8008b22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b26:	d103      	bne.n	8008b30 <xQueueGenericSend+0x16c>
 8008b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b32:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008b36:	b25b      	sxtb	r3, r3
 8008b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b3c:	d103      	bne.n	8008b46 <xQueueGenericSend+0x182>
 8008b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b40:	2200      	movs	r2, #0
 8008b42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008b46:	f001 fe49 	bl	800a7dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008b4a:	1d3a      	adds	r2, r7, #4
 8008b4c:	f107 0314 	add.w	r3, r7, #20
 8008b50:	4611      	mov	r1, r2
 8008b52:	4618      	mov	r0, r3
 8008b54:	f001 f9b8 	bl	8009ec8 <xTaskCheckForTimeOut>
 8008b58:	4603      	mov	r3, r0
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d124      	bne.n	8008ba8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008b5e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008b60:	f000 fcd1 	bl	8009506 <prvIsQueueFull>
 8008b64:	4603      	mov	r3, r0
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d018      	beq.n	8008b9c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b6c:	3310      	adds	r3, #16
 8008b6e:	687a      	ldr	r2, [r7, #4]
 8008b70:	4611      	mov	r1, r2
 8008b72:	4618      	mov	r0, r3
 8008b74:	f001 f90c 	bl	8009d90 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008b78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008b7a:	f000 fc5c 	bl	8009436 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008b7e:	f000 ff31 	bl	80099e4 <xTaskResumeAll>
 8008b82:	4603      	mov	r3, r0
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	f47f af7c 	bne.w	8008a82 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008b8a:	4b0c      	ldr	r3, [pc, #48]	; (8008bbc <xQueueGenericSend+0x1f8>)
 8008b8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b90:	601a      	str	r2, [r3, #0]
 8008b92:	f3bf 8f4f 	dsb	sy
 8008b96:	f3bf 8f6f 	isb	sy
 8008b9a:	e772      	b.n	8008a82 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008b9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008b9e:	f000 fc4a 	bl	8009436 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008ba2:	f000 ff1f 	bl	80099e4 <xTaskResumeAll>
 8008ba6:	e76c      	b.n	8008a82 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008ba8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008baa:	f000 fc44 	bl	8009436 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008bae:	f000 ff19 	bl	80099e4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008bb2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	3738      	adds	r7, #56	; 0x38
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	bd80      	pop	{r7, pc}
 8008bbc:	e000ed04 	.word	0xe000ed04

08008bc0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b090      	sub	sp, #64	; 0x40
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	60f8      	str	r0, [r7, #12]
 8008bc8:	60b9      	str	r1, [r7, #8]
 8008bca:	607a      	str	r2, [r7, #4]
 8008bcc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8008bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d10a      	bne.n	8008bee <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bdc:	f383 8811 	msr	BASEPRI, r3
 8008be0:	f3bf 8f6f 	isb	sy
 8008be4:	f3bf 8f4f 	dsb	sy
 8008be8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008bea:	bf00      	nop
 8008bec:	e7fe      	b.n	8008bec <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008bee:	68bb      	ldr	r3, [r7, #8]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d103      	bne.n	8008bfc <xQueueGenericSendFromISR+0x3c>
 8008bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d101      	bne.n	8008c00 <xQueueGenericSendFromISR+0x40>
 8008bfc:	2301      	movs	r3, #1
 8008bfe:	e000      	b.n	8008c02 <xQueueGenericSendFromISR+0x42>
 8008c00:	2300      	movs	r3, #0
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d10a      	bne.n	8008c1c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c0a:	f383 8811 	msr	BASEPRI, r3
 8008c0e:	f3bf 8f6f 	isb	sy
 8008c12:	f3bf 8f4f 	dsb	sy
 8008c16:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008c18:	bf00      	nop
 8008c1a:	e7fe      	b.n	8008c1a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	2b02      	cmp	r3, #2
 8008c20:	d103      	bne.n	8008c2a <xQueueGenericSendFromISR+0x6a>
 8008c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c26:	2b01      	cmp	r3, #1
 8008c28:	d101      	bne.n	8008c2e <xQueueGenericSendFromISR+0x6e>
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	e000      	b.n	8008c30 <xQueueGenericSendFromISR+0x70>
 8008c2e:	2300      	movs	r3, #0
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d10a      	bne.n	8008c4a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c38:	f383 8811 	msr	BASEPRI, r3
 8008c3c:	f3bf 8f6f 	isb	sy
 8008c40:	f3bf 8f4f 	dsb	sy
 8008c44:	623b      	str	r3, [r7, #32]
}
 8008c46:	bf00      	nop
 8008c48:	e7fe      	b.n	8008c48 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008c4a:	f001 fe59 	bl	800a900 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008c4e:	f3ef 8211 	mrs	r2, BASEPRI
 8008c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c56:	f383 8811 	msr	BASEPRI, r3
 8008c5a:	f3bf 8f6f 	isb	sy
 8008c5e:	f3bf 8f4f 	dsb	sy
 8008c62:	61fa      	str	r2, [r7, #28]
 8008c64:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008c66:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008c68:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c72:	429a      	cmp	r2, r3
 8008c74:	d302      	bcc.n	8008c7c <xQueueGenericSendFromISR+0xbc>
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	2b02      	cmp	r3, #2
 8008c7a:	d12f      	bne.n	8008cdc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008c82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008c8c:	683a      	ldr	r2, [r7, #0]
 8008c8e:	68b9      	ldr	r1, [r7, #8]
 8008c90:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008c92:	f000 fb40 	bl	8009316 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008c96:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c9e:	d112      	bne.n	8008cc6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d016      	beq.n	8008cd6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008caa:	3324      	adds	r3, #36	; 0x24
 8008cac:	4618      	mov	r0, r3
 8008cae:	f001 f893 	bl	8009dd8 <xTaskRemoveFromEventList>
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d00e      	beq.n	8008cd6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d00b      	beq.n	8008cd6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	2201      	movs	r2, #1
 8008cc2:	601a      	str	r2, [r3, #0]
 8008cc4:	e007      	b.n	8008cd6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008cc6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008cca:	3301      	adds	r3, #1
 8008ccc:	b2db      	uxtb	r3, r3
 8008cce:	b25a      	sxtb	r2, r3
 8008cd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008cd6:	2301      	movs	r3, #1
 8008cd8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8008cda:	e001      	b.n	8008ce0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008cdc:	2300      	movs	r3, #0
 8008cde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ce0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ce2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008ce4:	697b      	ldr	r3, [r7, #20]
 8008ce6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008cea:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008cec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008cee:	4618      	mov	r0, r3
 8008cf0:	3740      	adds	r7, #64	; 0x40
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	bd80      	pop	{r7, pc}

08008cf6 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008cf6:	b580      	push	{r7, lr}
 8008cf8:	b08e      	sub	sp, #56	; 0x38
 8008cfa:	af00      	add	r7, sp, #0
 8008cfc:	6078      	str	r0, [r7, #4]
 8008cfe:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8008d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d10a      	bne.n	8008d20 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8008d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d0e:	f383 8811 	msr	BASEPRI, r3
 8008d12:	f3bf 8f6f 	isb	sy
 8008d16:	f3bf 8f4f 	dsb	sy
 8008d1a:	623b      	str	r3, [r7, #32]
}
 8008d1c:	bf00      	nop
 8008d1e:	e7fe      	b.n	8008d1e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d00a      	beq.n	8008d3e <xQueueGiveFromISR+0x48>
	__asm volatile
 8008d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d2c:	f383 8811 	msr	BASEPRI, r3
 8008d30:	f3bf 8f6f 	isb	sy
 8008d34:	f3bf 8f4f 	dsb	sy
 8008d38:	61fb      	str	r3, [r7, #28]
}
 8008d3a:	bf00      	nop
 8008d3c:	e7fe      	b.n	8008d3c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8008d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d103      	bne.n	8008d4e <xQueueGiveFromISR+0x58>
 8008d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d48:	689b      	ldr	r3, [r3, #8]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d101      	bne.n	8008d52 <xQueueGiveFromISR+0x5c>
 8008d4e:	2301      	movs	r3, #1
 8008d50:	e000      	b.n	8008d54 <xQueueGiveFromISR+0x5e>
 8008d52:	2300      	movs	r3, #0
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d10a      	bne.n	8008d6e <xQueueGiveFromISR+0x78>
	__asm volatile
 8008d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d5c:	f383 8811 	msr	BASEPRI, r3
 8008d60:	f3bf 8f6f 	isb	sy
 8008d64:	f3bf 8f4f 	dsb	sy
 8008d68:	61bb      	str	r3, [r7, #24]
}
 8008d6a:	bf00      	nop
 8008d6c:	e7fe      	b.n	8008d6c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008d6e:	f001 fdc7 	bl	800a900 <vPortValidateInterruptPriority>
	__asm volatile
 8008d72:	f3ef 8211 	mrs	r2, BASEPRI
 8008d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d7a:	f383 8811 	msr	BASEPRI, r3
 8008d7e:	f3bf 8f6f 	isb	sy
 8008d82:	f3bf 8f4f 	dsb	sy
 8008d86:	617a      	str	r2, [r7, #20]
 8008d88:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8008d8a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d92:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d9a:	429a      	cmp	r2, r3
 8008d9c:	d22b      	bcs.n	8008df6 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008da0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008da4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008daa:	1c5a      	adds	r2, r3, #1
 8008dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dae:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008db0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008db8:	d112      	bne.n	8008de0 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d016      	beq.n	8008df0 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dc4:	3324      	adds	r3, #36	; 0x24
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	f001 f806 	bl	8009dd8 <xTaskRemoveFromEventList>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d00e      	beq.n	8008df0 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d00b      	beq.n	8008df0 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	2201      	movs	r2, #1
 8008ddc:	601a      	str	r2, [r3, #0]
 8008dde:	e007      	b.n	8008df0 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008de0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008de4:	3301      	adds	r3, #1
 8008de6:	b2db      	uxtb	r3, r3
 8008de8:	b25a      	sxtb	r2, r3
 8008dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008df0:	2301      	movs	r3, #1
 8008df2:	637b      	str	r3, [r7, #52]	; 0x34
 8008df4:	e001      	b.n	8008dfa <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008df6:	2300      	movs	r3, #0
 8008df8:	637b      	str	r3, [r7, #52]	; 0x34
 8008dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dfc:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	f383 8811 	msr	BASEPRI, r3
}
 8008e04:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008e06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008e08:	4618      	mov	r0, r3
 8008e0a:	3738      	adds	r7, #56	; 0x38
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	bd80      	pop	{r7, pc}

08008e10 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b08c      	sub	sp, #48	; 0x30
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	60f8      	str	r0, [r7, #12]
 8008e18:	60b9      	str	r1, [r7, #8]
 8008e1a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d10a      	bne.n	8008e40 <xQueueReceive+0x30>
	__asm volatile
 8008e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e2e:	f383 8811 	msr	BASEPRI, r3
 8008e32:	f3bf 8f6f 	isb	sy
 8008e36:	f3bf 8f4f 	dsb	sy
 8008e3a:	623b      	str	r3, [r7, #32]
}
 8008e3c:	bf00      	nop
 8008e3e:	e7fe      	b.n	8008e3e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008e40:	68bb      	ldr	r3, [r7, #8]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d103      	bne.n	8008e4e <xQueueReceive+0x3e>
 8008e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d101      	bne.n	8008e52 <xQueueReceive+0x42>
 8008e4e:	2301      	movs	r3, #1
 8008e50:	e000      	b.n	8008e54 <xQueueReceive+0x44>
 8008e52:	2300      	movs	r3, #0
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d10a      	bne.n	8008e6e <xQueueReceive+0x5e>
	__asm volatile
 8008e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e5c:	f383 8811 	msr	BASEPRI, r3
 8008e60:	f3bf 8f6f 	isb	sy
 8008e64:	f3bf 8f4f 	dsb	sy
 8008e68:	61fb      	str	r3, [r7, #28]
}
 8008e6a:	bf00      	nop
 8008e6c:	e7fe      	b.n	8008e6c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008e6e:	f001 f973 	bl	800a158 <xTaskGetSchedulerState>
 8008e72:	4603      	mov	r3, r0
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d102      	bne.n	8008e7e <xQueueReceive+0x6e>
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d101      	bne.n	8008e82 <xQueueReceive+0x72>
 8008e7e:	2301      	movs	r3, #1
 8008e80:	e000      	b.n	8008e84 <xQueueReceive+0x74>
 8008e82:	2300      	movs	r3, #0
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d10a      	bne.n	8008e9e <xQueueReceive+0x8e>
	__asm volatile
 8008e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e8c:	f383 8811 	msr	BASEPRI, r3
 8008e90:	f3bf 8f6f 	isb	sy
 8008e94:	f3bf 8f4f 	dsb	sy
 8008e98:	61bb      	str	r3, [r7, #24]
}
 8008e9a:	bf00      	nop
 8008e9c:	e7fe      	b.n	8008e9c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008e9e:	f001 fc6d 	bl	800a77c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ea6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d01f      	beq.n	8008eee <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008eae:	68b9      	ldr	r1, [r7, #8]
 8008eb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008eb2:	f000 fa9a 	bl	80093ea <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb8:	1e5a      	subs	r2, r3, #1
 8008eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ebc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ec0:	691b      	ldr	r3, [r3, #16]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d00f      	beq.n	8008ee6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ec8:	3310      	adds	r3, #16
 8008eca:	4618      	mov	r0, r3
 8008ecc:	f000 ff84 	bl	8009dd8 <xTaskRemoveFromEventList>
 8008ed0:	4603      	mov	r3, r0
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d007      	beq.n	8008ee6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008ed6:	4b3d      	ldr	r3, [pc, #244]	; (8008fcc <xQueueReceive+0x1bc>)
 8008ed8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008edc:	601a      	str	r2, [r3, #0]
 8008ede:	f3bf 8f4f 	dsb	sy
 8008ee2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008ee6:	f001 fc79 	bl	800a7dc <vPortExitCritical>
				return pdPASS;
 8008eea:	2301      	movs	r3, #1
 8008eec:	e069      	b.n	8008fc2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d103      	bne.n	8008efc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008ef4:	f001 fc72 	bl	800a7dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008ef8:	2300      	movs	r3, #0
 8008efa:	e062      	b.n	8008fc2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d106      	bne.n	8008f10 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008f02:	f107 0310 	add.w	r3, r7, #16
 8008f06:	4618      	mov	r0, r3
 8008f08:	f000 ffc8 	bl	8009e9c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008f0c:	2301      	movs	r3, #1
 8008f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008f10:	f001 fc64 	bl	800a7dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008f14:	f000 fd58 	bl	80099c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008f18:	f001 fc30 	bl	800a77c <vPortEnterCritical>
 8008f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f1e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008f22:	b25b      	sxtb	r3, r3
 8008f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f28:	d103      	bne.n	8008f32 <xQueueReceive+0x122>
 8008f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008f38:	b25b      	sxtb	r3, r3
 8008f3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f3e:	d103      	bne.n	8008f48 <xQueueReceive+0x138>
 8008f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f42:	2200      	movs	r2, #0
 8008f44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008f48:	f001 fc48 	bl	800a7dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008f4c:	1d3a      	adds	r2, r7, #4
 8008f4e:	f107 0310 	add.w	r3, r7, #16
 8008f52:	4611      	mov	r1, r2
 8008f54:	4618      	mov	r0, r3
 8008f56:	f000 ffb7 	bl	8009ec8 <xTaskCheckForTimeOut>
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d123      	bne.n	8008fa8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008f60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f62:	f000 faba 	bl	80094da <prvIsQueueEmpty>
 8008f66:	4603      	mov	r3, r0
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d017      	beq.n	8008f9c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f6e:	3324      	adds	r3, #36	; 0x24
 8008f70:	687a      	ldr	r2, [r7, #4]
 8008f72:	4611      	mov	r1, r2
 8008f74:	4618      	mov	r0, r3
 8008f76:	f000 ff0b 	bl	8009d90 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008f7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f7c:	f000 fa5b 	bl	8009436 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008f80:	f000 fd30 	bl	80099e4 <xTaskResumeAll>
 8008f84:	4603      	mov	r3, r0
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d189      	bne.n	8008e9e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008f8a:	4b10      	ldr	r3, [pc, #64]	; (8008fcc <xQueueReceive+0x1bc>)
 8008f8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f90:	601a      	str	r2, [r3, #0]
 8008f92:	f3bf 8f4f 	dsb	sy
 8008f96:	f3bf 8f6f 	isb	sy
 8008f9a:	e780      	b.n	8008e9e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008f9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f9e:	f000 fa4a 	bl	8009436 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008fa2:	f000 fd1f 	bl	80099e4 <xTaskResumeAll>
 8008fa6:	e77a      	b.n	8008e9e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008fa8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008faa:	f000 fa44 	bl	8009436 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008fae:	f000 fd19 	bl	80099e4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008fb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008fb4:	f000 fa91 	bl	80094da <prvIsQueueEmpty>
 8008fb8:	4603      	mov	r3, r0
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	f43f af6f 	beq.w	8008e9e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008fc0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	3730      	adds	r7, #48	; 0x30
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	bd80      	pop	{r7, pc}
 8008fca:	bf00      	nop
 8008fcc:	e000ed04 	.word	0xe000ed04

08008fd0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b08e      	sub	sp, #56	; 0x38
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
 8008fd8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008fda:	2300      	movs	r3, #0
 8008fdc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d10a      	bne.n	8009002 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8008fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ff0:	f383 8811 	msr	BASEPRI, r3
 8008ff4:	f3bf 8f6f 	isb	sy
 8008ff8:	f3bf 8f4f 	dsb	sy
 8008ffc:	623b      	str	r3, [r7, #32]
}
 8008ffe:	bf00      	nop
 8009000:	e7fe      	b.n	8009000 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009006:	2b00      	cmp	r3, #0
 8009008:	d00a      	beq.n	8009020 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800900a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800900e:	f383 8811 	msr	BASEPRI, r3
 8009012:	f3bf 8f6f 	isb	sy
 8009016:	f3bf 8f4f 	dsb	sy
 800901a:	61fb      	str	r3, [r7, #28]
}
 800901c:	bf00      	nop
 800901e:	e7fe      	b.n	800901e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009020:	f001 f89a 	bl	800a158 <xTaskGetSchedulerState>
 8009024:	4603      	mov	r3, r0
 8009026:	2b00      	cmp	r3, #0
 8009028:	d102      	bne.n	8009030 <xQueueSemaphoreTake+0x60>
 800902a:	683b      	ldr	r3, [r7, #0]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d101      	bne.n	8009034 <xQueueSemaphoreTake+0x64>
 8009030:	2301      	movs	r3, #1
 8009032:	e000      	b.n	8009036 <xQueueSemaphoreTake+0x66>
 8009034:	2300      	movs	r3, #0
 8009036:	2b00      	cmp	r3, #0
 8009038:	d10a      	bne.n	8009050 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800903a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800903e:	f383 8811 	msr	BASEPRI, r3
 8009042:	f3bf 8f6f 	isb	sy
 8009046:	f3bf 8f4f 	dsb	sy
 800904a:	61bb      	str	r3, [r7, #24]
}
 800904c:	bf00      	nop
 800904e:	e7fe      	b.n	800904e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009050:	f001 fb94 	bl	800a77c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009058:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800905a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800905c:	2b00      	cmp	r3, #0
 800905e:	d024      	beq.n	80090aa <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009062:	1e5a      	subs	r2, r3, #1
 8009064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009066:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d104      	bne.n	800907a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009070:	f001 fa1a 	bl	800a4a8 <pvTaskIncrementMutexHeldCount>
 8009074:	4602      	mov	r2, r0
 8009076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009078:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800907a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800907c:	691b      	ldr	r3, [r3, #16]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d00f      	beq.n	80090a2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009084:	3310      	adds	r3, #16
 8009086:	4618      	mov	r0, r3
 8009088:	f000 fea6 	bl	8009dd8 <xTaskRemoveFromEventList>
 800908c:	4603      	mov	r3, r0
 800908e:	2b00      	cmp	r3, #0
 8009090:	d007      	beq.n	80090a2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009092:	4b54      	ldr	r3, [pc, #336]	; (80091e4 <xQueueSemaphoreTake+0x214>)
 8009094:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009098:	601a      	str	r2, [r3, #0]
 800909a:	f3bf 8f4f 	dsb	sy
 800909e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80090a2:	f001 fb9b 	bl	800a7dc <vPortExitCritical>
				return pdPASS;
 80090a6:	2301      	movs	r3, #1
 80090a8:	e097      	b.n	80091da <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d111      	bne.n	80090d4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80090b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d00a      	beq.n	80090cc <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80090b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ba:	f383 8811 	msr	BASEPRI, r3
 80090be:	f3bf 8f6f 	isb	sy
 80090c2:	f3bf 8f4f 	dsb	sy
 80090c6:	617b      	str	r3, [r7, #20]
}
 80090c8:	bf00      	nop
 80090ca:	e7fe      	b.n	80090ca <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80090cc:	f001 fb86 	bl	800a7dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80090d0:	2300      	movs	r3, #0
 80090d2:	e082      	b.n	80091da <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80090d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d106      	bne.n	80090e8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80090da:	f107 030c 	add.w	r3, r7, #12
 80090de:	4618      	mov	r0, r3
 80090e0:	f000 fedc 	bl	8009e9c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80090e4:	2301      	movs	r3, #1
 80090e6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80090e8:	f001 fb78 	bl	800a7dc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80090ec:	f000 fc6c 	bl	80099c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80090f0:	f001 fb44 	bl	800a77c <vPortEnterCritical>
 80090f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80090fa:	b25b      	sxtb	r3, r3
 80090fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009100:	d103      	bne.n	800910a <xQueueSemaphoreTake+0x13a>
 8009102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009104:	2200      	movs	r2, #0
 8009106:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800910a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800910c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009110:	b25b      	sxtb	r3, r3
 8009112:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009116:	d103      	bne.n	8009120 <xQueueSemaphoreTake+0x150>
 8009118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800911a:	2200      	movs	r2, #0
 800911c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009120:	f001 fb5c 	bl	800a7dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009124:	463a      	mov	r2, r7
 8009126:	f107 030c 	add.w	r3, r7, #12
 800912a:	4611      	mov	r1, r2
 800912c:	4618      	mov	r0, r3
 800912e:	f000 fecb 	bl	8009ec8 <xTaskCheckForTimeOut>
 8009132:	4603      	mov	r3, r0
 8009134:	2b00      	cmp	r3, #0
 8009136:	d132      	bne.n	800919e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009138:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800913a:	f000 f9ce 	bl	80094da <prvIsQueueEmpty>
 800913e:	4603      	mov	r3, r0
 8009140:	2b00      	cmp	r3, #0
 8009142:	d026      	beq.n	8009192 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d109      	bne.n	8009160 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800914c:	f001 fb16 	bl	800a77c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009152:	689b      	ldr	r3, [r3, #8]
 8009154:	4618      	mov	r0, r3
 8009156:	f001 f81d 	bl	800a194 <xTaskPriorityInherit>
 800915a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800915c:	f001 fb3e 	bl	800a7dc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009162:	3324      	adds	r3, #36	; 0x24
 8009164:	683a      	ldr	r2, [r7, #0]
 8009166:	4611      	mov	r1, r2
 8009168:	4618      	mov	r0, r3
 800916a:	f000 fe11 	bl	8009d90 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800916e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009170:	f000 f961 	bl	8009436 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009174:	f000 fc36 	bl	80099e4 <xTaskResumeAll>
 8009178:	4603      	mov	r3, r0
 800917a:	2b00      	cmp	r3, #0
 800917c:	f47f af68 	bne.w	8009050 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8009180:	4b18      	ldr	r3, [pc, #96]	; (80091e4 <xQueueSemaphoreTake+0x214>)
 8009182:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009186:	601a      	str	r2, [r3, #0]
 8009188:	f3bf 8f4f 	dsb	sy
 800918c:	f3bf 8f6f 	isb	sy
 8009190:	e75e      	b.n	8009050 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009192:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009194:	f000 f94f 	bl	8009436 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009198:	f000 fc24 	bl	80099e4 <xTaskResumeAll>
 800919c:	e758      	b.n	8009050 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800919e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80091a0:	f000 f949 	bl	8009436 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80091a4:	f000 fc1e 	bl	80099e4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80091a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80091aa:	f000 f996 	bl	80094da <prvIsQueueEmpty>
 80091ae:	4603      	mov	r3, r0
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	f43f af4d 	beq.w	8009050 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80091b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d00d      	beq.n	80091d8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80091bc:	f001 fade 	bl	800a77c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80091c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80091c2:	f000 f891 	bl	80092e8 <prvGetDisinheritPriorityAfterTimeout>
 80091c6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80091c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091ca:	689b      	ldr	r3, [r3, #8]
 80091cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80091ce:	4618      	mov	r0, r3
 80091d0:	f001 f8dc 	bl	800a38c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80091d4:	f001 fb02 	bl	800a7dc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80091d8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80091da:	4618      	mov	r0, r3
 80091dc:	3738      	adds	r7, #56	; 0x38
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd80      	pop	{r7, pc}
 80091e2:	bf00      	nop
 80091e4:	e000ed04 	.word	0xe000ed04

080091e8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b08e      	sub	sp, #56	; 0x38
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	60f8      	str	r0, [r7, #12]
 80091f0:	60b9      	str	r1, [r7, #8]
 80091f2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80091f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d10a      	bne.n	8009214 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80091fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009202:	f383 8811 	msr	BASEPRI, r3
 8009206:	f3bf 8f6f 	isb	sy
 800920a:	f3bf 8f4f 	dsb	sy
 800920e:	623b      	str	r3, [r7, #32]
}
 8009210:	bf00      	nop
 8009212:	e7fe      	b.n	8009212 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009214:	68bb      	ldr	r3, [r7, #8]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d103      	bne.n	8009222 <xQueueReceiveFromISR+0x3a>
 800921a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800921c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800921e:	2b00      	cmp	r3, #0
 8009220:	d101      	bne.n	8009226 <xQueueReceiveFromISR+0x3e>
 8009222:	2301      	movs	r3, #1
 8009224:	e000      	b.n	8009228 <xQueueReceiveFromISR+0x40>
 8009226:	2300      	movs	r3, #0
 8009228:	2b00      	cmp	r3, #0
 800922a:	d10a      	bne.n	8009242 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800922c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009230:	f383 8811 	msr	BASEPRI, r3
 8009234:	f3bf 8f6f 	isb	sy
 8009238:	f3bf 8f4f 	dsb	sy
 800923c:	61fb      	str	r3, [r7, #28]
}
 800923e:	bf00      	nop
 8009240:	e7fe      	b.n	8009240 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009242:	f001 fb5d 	bl	800a900 <vPortValidateInterruptPriority>
	__asm volatile
 8009246:	f3ef 8211 	mrs	r2, BASEPRI
 800924a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800924e:	f383 8811 	msr	BASEPRI, r3
 8009252:	f3bf 8f6f 	isb	sy
 8009256:	f3bf 8f4f 	dsb	sy
 800925a:	61ba      	str	r2, [r7, #24]
 800925c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800925e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009260:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009266:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800926a:	2b00      	cmp	r3, #0
 800926c:	d02f      	beq.n	80092ce <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800926e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009270:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009274:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009278:	68b9      	ldr	r1, [r7, #8]
 800927a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800927c:	f000 f8b5 	bl	80093ea <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009282:	1e5a      	subs	r2, r3, #1
 8009284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009286:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009288:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800928c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009290:	d112      	bne.n	80092b8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009294:	691b      	ldr	r3, [r3, #16]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d016      	beq.n	80092c8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800929a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800929c:	3310      	adds	r3, #16
 800929e:	4618      	mov	r0, r3
 80092a0:	f000 fd9a 	bl	8009dd8 <xTaskRemoveFromEventList>
 80092a4:	4603      	mov	r3, r0
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d00e      	beq.n	80092c8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d00b      	beq.n	80092c8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2201      	movs	r2, #1
 80092b4:	601a      	str	r2, [r3, #0]
 80092b6:	e007      	b.n	80092c8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80092b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80092bc:	3301      	adds	r3, #1
 80092be:	b2db      	uxtb	r3, r3
 80092c0:	b25a      	sxtb	r2, r3
 80092c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80092c8:	2301      	movs	r3, #1
 80092ca:	637b      	str	r3, [r7, #52]	; 0x34
 80092cc:	e001      	b.n	80092d2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80092ce:	2300      	movs	r3, #0
 80092d0:	637b      	str	r3, [r7, #52]	; 0x34
 80092d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092d4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80092d6:	693b      	ldr	r3, [r7, #16]
 80092d8:	f383 8811 	msr	BASEPRI, r3
}
 80092dc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80092de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80092e0:	4618      	mov	r0, r3
 80092e2:	3738      	adds	r7, #56	; 0x38
 80092e4:	46bd      	mov	sp, r7
 80092e6:	bd80      	pop	{r7, pc}

080092e8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80092e8:	b480      	push	{r7}
 80092ea:	b085      	sub	sp, #20
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d006      	beq.n	8009306 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	f1c3 0307 	rsb	r3, r3, #7
 8009302:	60fb      	str	r3, [r7, #12]
 8009304:	e001      	b.n	800930a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009306:	2300      	movs	r3, #0
 8009308:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800930a:	68fb      	ldr	r3, [r7, #12]
	}
 800930c:	4618      	mov	r0, r3
 800930e:	3714      	adds	r7, #20
 8009310:	46bd      	mov	sp, r7
 8009312:	bc80      	pop	{r7}
 8009314:	4770      	bx	lr

08009316 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009316:	b580      	push	{r7, lr}
 8009318:	b086      	sub	sp, #24
 800931a:	af00      	add	r7, sp, #0
 800931c:	60f8      	str	r0, [r7, #12]
 800931e:	60b9      	str	r1, [r7, #8]
 8009320:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009322:	2300      	movs	r3, #0
 8009324:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800932a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009330:	2b00      	cmp	r3, #0
 8009332:	d10d      	bne.n	8009350 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d14d      	bne.n	80093d8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	689b      	ldr	r3, [r3, #8]
 8009340:	4618      	mov	r0, r3
 8009342:	f000 ff9d 	bl	800a280 <xTaskPriorityDisinherit>
 8009346:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	2200      	movs	r2, #0
 800934c:	609a      	str	r2, [r3, #8]
 800934e:	e043      	b.n	80093d8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d119      	bne.n	800938a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	6858      	ldr	r0, [r3, #4]
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800935e:	461a      	mov	r2, r3
 8009360:	68b9      	ldr	r1, [r7, #8]
 8009362:	f011 f92b 	bl	801a5bc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	685a      	ldr	r2, [r3, #4]
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800936e:	441a      	add	r2, r3
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	685a      	ldr	r2, [r3, #4]
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	689b      	ldr	r3, [r3, #8]
 800937c:	429a      	cmp	r2, r3
 800937e:	d32b      	bcc.n	80093d8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	681a      	ldr	r2, [r3, #0]
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	605a      	str	r2, [r3, #4]
 8009388:	e026      	b.n	80093d8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	68d8      	ldr	r0, [r3, #12]
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009392:	461a      	mov	r2, r3
 8009394:	68b9      	ldr	r1, [r7, #8]
 8009396:	f011 f911 	bl	801a5bc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	68da      	ldr	r2, [r3, #12]
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093a2:	425b      	negs	r3, r3
 80093a4:	441a      	add	r2, r3
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	68da      	ldr	r2, [r3, #12]
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	429a      	cmp	r2, r3
 80093b4:	d207      	bcs.n	80093c6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	689a      	ldr	r2, [r3, #8]
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093be:	425b      	negs	r3, r3
 80093c0:	441a      	add	r2, r3
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	2b02      	cmp	r3, #2
 80093ca:	d105      	bne.n	80093d8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80093cc:	693b      	ldr	r3, [r7, #16]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d002      	beq.n	80093d8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80093d2:	693b      	ldr	r3, [r7, #16]
 80093d4:	3b01      	subs	r3, #1
 80093d6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80093d8:	693b      	ldr	r3, [r7, #16]
 80093da:	1c5a      	adds	r2, r3, #1
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80093e0:	697b      	ldr	r3, [r7, #20]
}
 80093e2:	4618      	mov	r0, r3
 80093e4:	3718      	adds	r7, #24
 80093e6:	46bd      	mov	sp, r7
 80093e8:	bd80      	pop	{r7, pc}

080093ea <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80093ea:	b580      	push	{r7, lr}
 80093ec:	b082      	sub	sp, #8
 80093ee:	af00      	add	r7, sp, #0
 80093f0:	6078      	str	r0, [r7, #4]
 80093f2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d018      	beq.n	800942e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	68da      	ldr	r2, [r3, #12]
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009404:	441a      	add	r2, r3
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	68da      	ldr	r2, [r3, #12]
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	689b      	ldr	r3, [r3, #8]
 8009412:	429a      	cmp	r2, r3
 8009414:	d303      	bcc.n	800941e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681a      	ldr	r2, [r3, #0]
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	68d9      	ldr	r1, [r3, #12]
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009426:	461a      	mov	r2, r3
 8009428:	6838      	ldr	r0, [r7, #0]
 800942a:	f011 f8c7 	bl	801a5bc <memcpy>
	}
}
 800942e:	bf00      	nop
 8009430:	3708      	adds	r7, #8
 8009432:	46bd      	mov	sp, r7
 8009434:	bd80      	pop	{r7, pc}

08009436 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009436:	b580      	push	{r7, lr}
 8009438:	b084      	sub	sp, #16
 800943a:	af00      	add	r7, sp, #0
 800943c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800943e:	f001 f99d 	bl	800a77c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009448:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800944a:	e011      	b.n	8009470 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009450:	2b00      	cmp	r3, #0
 8009452:	d012      	beq.n	800947a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	3324      	adds	r3, #36	; 0x24
 8009458:	4618      	mov	r0, r3
 800945a:	f000 fcbd 	bl	8009dd8 <xTaskRemoveFromEventList>
 800945e:	4603      	mov	r3, r0
 8009460:	2b00      	cmp	r3, #0
 8009462:	d001      	beq.n	8009468 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009464:	f000 fd92 	bl	8009f8c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009468:	7bfb      	ldrb	r3, [r7, #15]
 800946a:	3b01      	subs	r3, #1
 800946c:	b2db      	uxtb	r3, r3
 800946e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009470:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009474:	2b00      	cmp	r3, #0
 8009476:	dce9      	bgt.n	800944c <prvUnlockQueue+0x16>
 8009478:	e000      	b.n	800947c <prvUnlockQueue+0x46>
					break;
 800947a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	22ff      	movs	r2, #255	; 0xff
 8009480:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009484:	f001 f9aa 	bl	800a7dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009488:	f001 f978 	bl	800a77c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009492:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009494:	e011      	b.n	80094ba <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	691b      	ldr	r3, [r3, #16]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d012      	beq.n	80094c4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	3310      	adds	r3, #16
 80094a2:	4618      	mov	r0, r3
 80094a4:	f000 fc98 	bl	8009dd8 <xTaskRemoveFromEventList>
 80094a8:	4603      	mov	r3, r0
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d001      	beq.n	80094b2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80094ae:	f000 fd6d 	bl	8009f8c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80094b2:	7bbb      	ldrb	r3, [r7, #14]
 80094b4:	3b01      	subs	r3, #1
 80094b6:	b2db      	uxtb	r3, r3
 80094b8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80094ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	dce9      	bgt.n	8009496 <prvUnlockQueue+0x60>
 80094c2:	e000      	b.n	80094c6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80094c4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	22ff      	movs	r2, #255	; 0xff
 80094ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80094ce:	f001 f985 	bl	800a7dc <vPortExitCritical>
}
 80094d2:	bf00      	nop
 80094d4:	3710      	adds	r7, #16
 80094d6:	46bd      	mov	sp, r7
 80094d8:	bd80      	pop	{r7, pc}

080094da <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80094da:	b580      	push	{r7, lr}
 80094dc:	b084      	sub	sp, #16
 80094de:	af00      	add	r7, sp, #0
 80094e0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80094e2:	f001 f94b 	bl	800a77c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d102      	bne.n	80094f4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80094ee:	2301      	movs	r3, #1
 80094f0:	60fb      	str	r3, [r7, #12]
 80094f2:	e001      	b.n	80094f8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80094f4:	2300      	movs	r3, #0
 80094f6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80094f8:	f001 f970 	bl	800a7dc <vPortExitCritical>

	return xReturn;
 80094fc:	68fb      	ldr	r3, [r7, #12]
}
 80094fe:	4618      	mov	r0, r3
 8009500:	3710      	adds	r7, #16
 8009502:	46bd      	mov	sp, r7
 8009504:	bd80      	pop	{r7, pc}

08009506 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009506:	b580      	push	{r7, lr}
 8009508:	b084      	sub	sp, #16
 800950a:	af00      	add	r7, sp, #0
 800950c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800950e:	f001 f935 	bl	800a77c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800951a:	429a      	cmp	r2, r3
 800951c:	d102      	bne.n	8009524 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800951e:	2301      	movs	r3, #1
 8009520:	60fb      	str	r3, [r7, #12]
 8009522:	e001      	b.n	8009528 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009524:	2300      	movs	r3, #0
 8009526:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009528:	f001 f958 	bl	800a7dc <vPortExitCritical>

	return xReturn;
 800952c:	68fb      	ldr	r3, [r7, #12]
}
 800952e:	4618      	mov	r0, r3
 8009530:	3710      	adds	r7, #16
 8009532:	46bd      	mov	sp, r7
 8009534:	bd80      	pop	{r7, pc}

08009536 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009536:	b580      	push	{r7, lr}
 8009538:	b08e      	sub	sp, #56	; 0x38
 800953a:	af04      	add	r7, sp, #16
 800953c:	60f8      	str	r0, [r7, #12]
 800953e:	60b9      	str	r1, [r7, #8]
 8009540:	607a      	str	r2, [r7, #4]
 8009542:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009546:	2b00      	cmp	r3, #0
 8009548:	d10a      	bne.n	8009560 <xTaskCreateStatic+0x2a>
	__asm volatile
 800954a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800954e:	f383 8811 	msr	BASEPRI, r3
 8009552:	f3bf 8f6f 	isb	sy
 8009556:	f3bf 8f4f 	dsb	sy
 800955a:	623b      	str	r3, [r7, #32]
}
 800955c:	bf00      	nop
 800955e:	e7fe      	b.n	800955e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009562:	2b00      	cmp	r3, #0
 8009564:	d10a      	bne.n	800957c <xTaskCreateStatic+0x46>
	__asm volatile
 8009566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800956a:	f383 8811 	msr	BASEPRI, r3
 800956e:	f3bf 8f6f 	isb	sy
 8009572:	f3bf 8f4f 	dsb	sy
 8009576:	61fb      	str	r3, [r7, #28]
}
 8009578:	bf00      	nop
 800957a:	e7fe      	b.n	800957a <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800957c:	23b4      	movs	r3, #180	; 0xb4
 800957e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009580:	693b      	ldr	r3, [r7, #16]
 8009582:	2bb4      	cmp	r3, #180	; 0xb4
 8009584:	d00a      	beq.n	800959c <xTaskCreateStatic+0x66>
	__asm volatile
 8009586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800958a:	f383 8811 	msr	BASEPRI, r3
 800958e:	f3bf 8f6f 	isb	sy
 8009592:	f3bf 8f4f 	dsb	sy
 8009596:	61bb      	str	r3, [r7, #24]
}
 8009598:	bf00      	nop
 800959a:	e7fe      	b.n	800959a <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800959c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800959e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d01e      	beq.n	80095e2 <xTaskCreateStatic+0xac>
 80095a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d01b      	beq.n	80095e2 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80095aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095ac:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80095ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80095b2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80095b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095b6:	2202      	movs	r2, #2
 80095b8:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80095bc:	2300      	movs	r3, #0
 80095be:	9303      	str	r3, [sp, #12]
 80095c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095c2:	9302      	str	r3, [sp, #8]
 80095c4:	f107 0314 	add.w	r3, r7, #20
 80095c8:	9301      	str	r3, [sp, #4]
 80095ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095cc:	9300      	str	r3, [sp, #0]
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	687a      	ldr	r2, [r7, #4]
 80095d2:	68b9      	ldr	r1, [r7, #8]
 80095d4:	68f8      	ldr	r0, [r7, #12]
 80095d6:	f000 f851 	bl	800967c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80095da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80095dc:	f000 f8ec 	bl	80097b8 <prvAddNewTaskToReadyList>
 80095e0:	e001      	b.n	80095e6 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80095e2:	2300      	movs	r3, #0
 80095e4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80095e6:	697b      	ldr	r3, [r7, #20]
	}
 80095e8:	4618      	mov	r0, r3
 80095ea:	3728      	adds	r7, #40	; 0x28
 80095ec:	46bd      	mov	sp, r7
 80095ee:	bd80      	pop	{r7, pc}

080095f0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b08c      	sub	sp, #48	; 0x30
 80095f4:	af04      	add	r7, sp, #16
 80095f6:	60f8      	str	r0, [r7, #12]
 80095f8:	60b9      	str	r1, [r7, #8]
 80095fa:	603b      	str	r3, [r7, #0]
 80095fc:	4613      	mov	r3, r2
 80095fe:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009600:	88fb      	ldrh	r3, [r7, #6]
 8009602:	009b      	lsls	r3, r3, #2
 8009604:	4618      	mov	r0, r3
 8009606:	f001 f9b9 	bl	800a97c <pvPortMalloc>
 800960a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800960c:	697b      	ldr	r3, [r7, #20]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d00e      	beq.n	8009630 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009612:	20b4      	movs	r0, #180	; 0xb4
 8009614:	f001 f9b2 	bl	800a97c <pvPortMalloc>
 8009618:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800961a:	69fb      	ldr	r3, [r7, #28]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d003      	beq.n	8009628 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009620:	69fb      	ldr	r3, [r7, #28]
 8009622:	697a      	ldr	r2, [r7, #20]
 8009624:	631a      	str	r2, [r3, #48]	; 0x30
 8009626:	e005      	b.n	8009634 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009628:	6978      	ldr	r0, [r7, #20]
 800962a:	f001 fa73 	bl	800ab14 <vPortFree>
 800962e:	e001      	b.n	8009634 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009630:	2300      	movs	r3, #0
 8009632:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009634:	69fb      	ldr	r3, [r7, #28]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d017      	beq.n	800966a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800963a:	69fb      	ldr	r3, [r7, #28]
 800963c:	2200      	movs	r2, #0
 800963e:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009642:	88fa      	ldrh	r2, [r7, #6]
 8009644:	2300      	movs	r3, #0
 8009646:	9303      	str	r3, [sp, #12]
 8009648:	69fb      	ldr	r3, [r7, #28]
 800964a:	9302      	str	r3, [sp, #8]
 800964c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800964e:	9301      	str	r3, [sp, #4]
 8009650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009652:	9300      	str	r3, [sp, #0]
 8009654:	683b      	ldr	r3, [r7, #0]
 8009656:	68b9      	ldr	r1, [r7, #8]
 8009658:	68f8      	ldr	r0, [r7, #12]
 800965a:	f000 f80f 	bl	800967c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800965e:	69f8      	ldr	r0, [r7, #28]
 8009660:	f000 f8aa 	bl	80097b8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009664:	2301      	movs	r3, #1
 8009666:	61bb      	str	r3, [r7, #24]
 8009668:	e002      	b.n	8009670 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800966a:	f04f 33ff 	mov.w	r3, #4294967295
 800966e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009670:	69bb      	ldr	r3, [r7, #24]
	}
 8009672:	4618      	mov	r0, r3
 8009674:	3720      	adds	r7, #32
 8009676:	46bd      	mov	sp, r7
 8009678:	bd80      	pop	{r7, pc}
	...

0800967c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b088      	sub	sp, #32
 8009680:	af00      	add	r7, sp, #0
 8009682:	60f8      	str	r0, [r7, #12]
 8009684:	60b9      	str	r1, [r7, #8]
 8009686:	607a      	str	r2, [r7, #4]
 8009688:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800968a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800968c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009694:	3b01      	subs	r3, #1
 8009696:	009b      	lsls	r3, r3, #2
 8009698:	4413      	add	r3, r2
 800969a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800969c:	69bb      	ldr	r3, [r7, #24]
 800969e:	f023 0307 	bic.w	r3, r3, #7
 80096a2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80096a4:	69bb      	ldr	r3, [r7, #24]
 80096a6:	f003 0307 	and.w	r3, r3, #7
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d00a      	beq.n	80096c4 <prvInitialiseNewTask+0x48>
	__asm volatile
 80096ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096b2:	f383 8811 	msr	BASEPRI, r3
 80096b6:	f3bf 8f6f 	isb	sy
 80096ba:	f3bf 8f4f 	dsb	sy
 80096be:	617b      	str	r3, [r7, #20]
}
 80096c0:	bf00      	nop
 80096c2:	e7fe      	b.n	80096c2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80096c4:	68bb      	ldr	r3, [r7, #8]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d01f      	beq.n	800970a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80096ca:	2300      	movs	r3, #0
 80096cc:	61fb      	str	r3, [r7, #28]
 80096ce:	e012      	b.n	80096f6 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80096d0:	68ba      	ldr	r2, [r7, #8]
 80096d2:	69fb      	ldr	r3, [r7, #28]
 80096d4:	4413      	add	r3, r2
 80096d6:	7819      	ldrb	r1, [r3, #0]
 80096d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80096da:	69fb      	ldr	r3, [r7, #28]
 80096dc:	4413      	add	r3, r2
 80096de:	3334      	adds	r3, #52	; 0x34
 80096e0:	460a      	mov	r2, r1
 80096e2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80096e4:	68ba      	ldr	r2, [r7, #8]
 80096e6:	69fb      	ldr	r3, [r7, #28]
 80096e8:	4413      	add	r3, r2
 80096ea:	781b      	ldrb	r3, [r3, #0]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d006      	beq.n	80096fe <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80096f0:	69fb      	ldr	r3, [r7, #28]
 80096f2:	3301      	adds	r3, #1
 80096f4:	61fb      	str	r3, [r7, #28]
 80096f6:	69fb      	ldr	r3, [r7, #28]
 80096f8:	2b0f      	cmp	r3, #15
 80096fa:	d9e9      	bls.n	80096d0 <prvInitialiseNewTask+0x54>
 80096fc:	e000      	b.n	8009700 <prvInitialiseNewTask+0x84>
			{
				break;
 80096fe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009702:	2200      	movs	r2, #0
 8009704:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009708:	e003      	b.n	8009712 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800970a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800970c:	2200      	movs	r2, #0
 800970e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009714:	2b06      	cmp	r3, #6
 8009716:	d901      	bls.n	800971c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009718:	2306      	movs	r3, #6
 800971a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800971c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800971e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009720:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009724:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009726:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8009728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800972a:	2200      	movs	r2, #0
 800972c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800972e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009730:	3304      	adds	r3, #4
 8009732:	4618      	mov	r0, r3
 8009734:	f7fe ff2f 	bl	8008596 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800973a:	3318      	adds	r3, #24
 800973c:	4618      	mov	r0, r3
 800973e:	f7fe ff2a 	bl	8008596 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009744:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009746:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800974a:	f1c3 0207 	rsb	r2, r3, #7
 800974e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009750:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009754:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009756:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800975a:	2200      	movs	r2, #0
 800975c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009762:	2200      	movs	r2, #0
 8009764:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800976a:	334c      	adds	r3, #76	; 0x4c
 800976c:	2260      	movs	r2, #96	; 0x60
 800976e:	2100      	movs	r1, #0
 8009770:	4618      	mov	r0, r3
 8009772:	f010 ff31 	bl	801a5d8 <memset>
 8009776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009778:	4a0c      	ldr	r2, [pc, #48]	; (80097ac <prvInitialiseNewTask+0x130>)
 800977a:	651a      	str	r2, [r3, #80]	; 0x50
 800977c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800977e:	4a0c      	ldr	r2, [pc, #48]	; (80097b0 <prvInitialiseNewTask+0x134>)
 8009780:	655a      	str	r2, [r3, #84]	; 0x54
 8009782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009784:	4a0b      	ldr	r2, [pc, #44]	; (80097b4 <prvInitialiseNewTask+0x138>)
 8009786:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009788:	683a      	ldr	r2, [r7, #0]
 800978a:	68f9      	ldr	r1, [r7, #12]
 800978c:	69b8      	ldr	r0, [r7, #24]
 800978e:	f000 ff05 	bl	800a59c <pxPortInitialiseStack>
 8009792:	4602      	mov	r2, r0
 8009794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009796:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800979a:	2b00      	cmp	r3, #0
 800979c:	d002      	beq.n	80097a4 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800979e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80097a2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80097a4:	bf00      	nop
 80097a6:	3720      	adds	r7, #32
 80097a8:	46bd      	mov	sp, r7
 80097aa:	bd80      	pop	{r7, pc}
 80097ac:	0801ebbc 	.word	0x0801ebbc
 80097b0:	0801ebdc 	.word	0x0801ebdc
 80097b4:	0801eb9c 	.word	0x0801eb9c

080097b8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b082      	sub	sp, #8
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80097c0:	f000 ffdc 	bl	800a77c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80097c4:	4b2a      	ldr	r3, [pc, #168]	; (8009870 <prvAddNewTaskToReadyList+0xb8>)
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	3301      	adds	r3, #1
 80097ca:	4a29      	ldr	r2, [pc, #164]	; (8009870 <prvAddNewTaskToReadyList+0xb8>)
 80097cc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80097ce:	4b29      	ldr	r3, [pc, #164]	; (8009874 <prvAddNewTaskToReadyList+0xbc>)
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d109      	bne.n	80097ea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80097d6:	4a27      	ldr	r2, [pc, #156]	; (8009874 <prvAddNewTaskToReadyList+0xbc>)
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80097dc:	4b24      	ldr	r3, [pc, #144]	; (8009870 <prvAddNewTaskToReadyList+0xb8>)
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	2b01      	cmp	r3, #1
 80097e2:	d110      	bne.n	8009806 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80097e4:	f000 fbf6 	bl	8009fd4 <prvInitialiseTaskLists>
 80097e8:	e00d      	b.n	8009806 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80097ea:	4b23      	ldr	r3, [pc, #140]	; (8009878 <prvAddNewTaskToReadyList+0xc0>)
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d109      	bne.n	8009806 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80097f2:	4b20      	ldr	r3, [pc, #128]	; (8009874 <prvAddNewTaskToReadyList+0xbc>)
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097fc:	429a      	cmp	r2, r3
 80097fe:	d802      	bhi.n	8009806 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009800:	4a1c      	ldr	r2, [pc, #112]	; (8009874 <prvAddNewTaskToReadyList+0xbc>)
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009806:	4b1d      	ldr	r3, [pc, #116]	; (800987c <prvAddNewTaskToReadyList+0xc4>)
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	3301      	adds	r3, #1
 800980c:	4a1b      	ldr	r2, [pc, #108]	; (800987c <prvAddNewTaskToReadyList+0xc4>)
 800980e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009814:	2201      	movs	r2, #1
 8009816:	409a      	lsls	r2, r3
 8009818:	4b19      	ldr	r3, [pc, #100]	; (8009880 <prvAddNewTaskToReadyList+0xc8>)
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	4313      	orrs	r3, r2
 800981e:	4a18      	ldr	r2, [pc, #96]	; (8009880 <prvAddNewTaskToReadyList+0xc8>)
 8009820:	6013      	str	r3, [r2, #0]
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009826:	4613      	mov	r3, r2
 8009828:	009b      	lsls	r3, r3, #2
 800982a:	4413      	add	r3, r2
 800982c:	009b      	lsls	r3, r3, #2
 800982e:	4a15      	ldr	r2, [pc, #84]	; (8009884 <prvAddNewTaskToReadyList+0xcc>)
 8009830:	441a      	add	r2, r3
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	3304      	adds	r3, #4
 8009836:	4619      	mov	r1, r3
 8009838:	4610      	mov	r0, r2
 800983a:	f7fe feb8 	bl	80085ae <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800983e:	f000 ffcd 	bl	800a7dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009842:	4b0d      	ldr	r3, [pc, #52]	; (8009878 <prvAddNewTaskToReadyList+0xc0>)
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d00e      	beq.n	8009868 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800984a:	4b0a      	ldr	r3, [pc, #40]	; (8009874 <prvAddNewTaskToReadyList+0xbc>)
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009854:	429a      	cmp	r2, r3
 8009856:	d207      	bcs.n	8009868 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009858:	4b0b      	ldr	r3, [pc, #44]	; (8009888 <prvAddNewTaskToReadyList+0xd0>)
 800985a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800985e:	601a      	str	r2, [r3, #0]
 8009860:	f3bf 8f4f 	dsb	sy
 8009864:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009868:	bf00      	nop
 800986a:	3708      	adds	r7, #8
 800986c:	46bd      	mov	sp, r7
 800986e:	bd80      	pop	{r7, pc}
 8009870:	2000519c 	.word	0x2000519c
 8009874:	2000509c 	.word	0x2000509c
 8009878:	200051a8 	.word	0x200051a8
 800987c:	200051b8 	.word	0x200051b8
 8009880:	200051a4 	.word	0x200051a4
 8009884:	200050a0 	.word	0x200050a0
 8009888:	e000ed04 	.word	0xe000ed04

0800988c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800988c:	b580      	push	{r7, lr}
 800988e:	b084      	sub	sp, #16
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009894:	2300      	movs	r3, #0
 8009896:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d017      	beq.n	80098ce <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800989e:	4b13      	ldr	r3, [pc, #76]	; (80098ec <vTaskDelay+0x60>)
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d00a      	beq.n	80098bc <vTaskDelay+0x30>
	__asm volatile
 80098a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098aa:	f383 8811 	msr	BASEPRI, r3
 80098ae:	f3bf 8f6f 	isb	sy
 80098b2:	f3bf 8f4f 	dsb	sy
 80098b6:	60bb      	str	r3, [r7, #8]
}
 80098b8:	bf00      	nop
 80098ba:	e7fe      	b.n	80098ba <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80098bc:	f000 f884 	bl	80099c8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80098c0:	2100      	movs	r1, #0
 80098c2:	6878      	ldr	r0, [r7, #4]
 80098c4:	f000 fe04 	bl	800a4d0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80098c8:	f000 f88c 	bl	80099e4 <xTaskResumeAll>
 80098cc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d107      	bne.n	80098e4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80098d4:	4b06      	ldr	r3, [pc, #24]	; (80098f0 <vTaskDelay+0x64>)
 80098d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098da:	601a      	str	r2, [r3, #0]
 80098dc:	f3bf 8f4f 	dsb	sy
 80098e0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80098e4:	bf00      	nop
 80098e6:	3710      	adds	r7, #16
 80098e8:	46bd      	mov	sp, r7
 80098ea:	bd80      	pop	{r7, pc}
 80098ec:	200051c4 	.word	0x200051c4
 80098f0:	e000ed04 	.word	0xe000ed04

080098f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b08a      	sub	sp, #40	; 0x28
 80098f8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80098fa:	2300      	movs	r3, #0
 80098fc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80098fe:	2300      	movs	r3, #0
 8009900:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009902:	463a      	mov	r2, r7
 8009904:	1d39      	adds	r1, r7, #4
 8009906:	f107 0308 	add.w	r3, r7, #8
 800990a:	4618      	mov	r0, r3
 800990c:	f7f6 fe3a 	bl	8000584 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009910:	6839      	ldr	r1, [r7, #0]
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	68ba      	ldr	r2, [r7, #8]
 8009916:	9202      	str	r2, [sp, #8]
 8009918:	9301      	str	r3, [sp, #4]
 800991a:	2300      	movs	r3, #0
 800991c:	9300      	str	r3, [sp, #0]
 800991e:	2300      	movs	r3, #0
 8009920:	460a      	mov	r2, r1
 8009922:	4921      	ldr	r1, [pc, #132]	; (80099a8 <vTaskStartScheduler+0xb4>)
 8009924:	4821      	ldr	r0, [pc, #132]	; (80099ac <vTaskStartScheduler+0xb8>)
 8009926:	f7ff fe06 	bl	8009536 <xTaskCreateStatic>
 800992a:	4603      	mov	r3, r0
 800992c:	4a20      	ldr	r2, [pc, #128]	; (80099b0 <vTaskStartScheduler+0xbc>)
 800992e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009930:	4b1f      	ldr	r3, [pc, #124]	; (80099b0 <vTaskStartScheduler+0xbc>)
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d002      	beq.n	800993e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009938:	2301      	movs	r3, #1
 800993a:	617b      	str	r3, [r7, #20]
 800993c:	e001      	b.n	8009942 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800993e:	2300      	movs	r3, #0
 8009940:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009942:	697b      	ldr	r3, [r7, #20]
 8009944:	2b01      	cmp	r3, #1
 8009946:	d11b      	bne.n	8009980 <vTaskStartScheduler+0x8c>
	__asm volatile
 8009948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800994c:	f383 8811 	msr	BASEPRI, r3
 8009950:	f3bf 8f6f 	isb	sy
 8009954:	f3bf 8f4f 	dsb	sy
 8009958:	613b      	str	r3, [r7, #16]
}
 800995a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800995c:	4b15      	ldr	r3, [pc, #84]	; (80099b4 <vTaskStartScheduler+0xc0>)
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	334c      	adds	r3, #76	; 0x4c
 8009962:	4a15      	ldr	r2, [pc, #84]	; (80099b8 <vTaskStartScheduler+0xc4>)
 8009964:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009966:	4b15      	ldr	r3, [pc, #84]	; (80099bc <vTaskStartScheduler+0xc8>)
 8009968:	f04f 32ff 	mov.w	r2, #4294967295
 800996c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800996e:	4b14      	ldr	r3, [pc, #80]	; (80099c0 <vTaskStartScheduler+0xcc>)
 8009970:	2201      	movs	r2, #1
 8009972:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009974:	4b13      	ldr	r3, [pc, #76]	; (80099c4 <vTaskStartScheduler+0xd0>)
 8009976:	2200      	movs	r2, #0
 8009978:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800997a:	f000 fe8d 	bl	800a698 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800997e:	e00e      	b.n	800999e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009980:	697b      	ldr	r3, [r7, #20]
 8009982:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009986:	d10a      	bne.n	800999e <vTaskStartScheduler+0xaa>
	__asm volatile
 8009988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800998c:	f383 8811 	msr	BASEPRI, r3
 8009990:	f3bf 8f6f 	isb	sy
 8009994:	f3bf 8f4f 	dsb	sy
 8009998:	60fb      	str	r3, [r7, #12]
}
 800999a:	bf00      	nop
 800999c:	e7fe      	b.n	800999c <vTaskStartScheduler+0xa8>
}
 800999e:	bf00      	nop
 80099a0:	3718      	adds	r7, #24
 80099a2:	46bd      	mov	sp, r7
 80099a4:	bd80      	pop	{r7, pc}
 80099a6:	bf00      	nop
 80099a8:	0801b404 	.word	0x0801b404
 80099ac:	08009fa5 	.word	0x08009fa5
 80099b0:	200051c0 	.word	0x200051c0
 80099b4:	2000509c 	.word	0x2000509c
 80099b8:	20000110 	.word	0x20000110
 80099bc:	200051bc 	.word	0x200051bc
 80099c0:	200051a8 	.word	0x200051a8
 80099c4:	200051a0 	.word	0x200051a0

080099c8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80099c8:	b480      	push	{r7}
 80099ca:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80099cc:	4b04      	ldr	r3, [pc, #16]	; (80099e0 <vTaskSuspendAll+0x18>)
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	3301      	adds	r3, #1
 80099d2:	4a03      	ldr	r2, [pc, #12]	; (80099e0 <vTaskSuspendAll+0x18>)
 80099d4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80099d6:	bf00      	nop
 80099d8:	46bd      	mov	sp, r7
 80099da:	bc80      	pop	{r7}
 80099dc:	4770      	bx	lr
 80099de:	bf00      	nop
 80099e0:	200051c4 	.word	0x200051c4

080099e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b084      	sub	sp, #16
 80099e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80099ea:	2300      	movs	r3, #0
 80099ec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80099ee:	2300      	movs	r3, #0
 80099f0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80099f2:	4b41      	ldr	r3, [pc, #260]	; (8009af8 <xTaskResumeAll+0x114>)
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d10a      	bne.n	8009a10 <xTaskResumeAll+0x2c>
	__asm volatile
 80099fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099fe:	f383 8811 	msr	BASEPRI, r3
 8009a02:	f3bf 8f6f 	isb	sy
 8009a06:	f3bf 8f4f 	dsb	sy
 8009a0a:	603b      	str	r3, [r7, #0]
}
 8009a0c:	bf00      	nop
 8009a0e:	e7fe      	b.n	8009a0e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009a10:	f000 feb4 	bl	800a77c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009a14:	4b38      	ldr	r3, [pc, #224]	; (8009af8 <xTaskResumeAll+0x114>)
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	3b01      	subs	r3, #1
 8009a1a:	4a37      	ldr	r2, [pc, #220]	; (8009af8 <xTaskResumeAll+0x114>)
 8009a1c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009a1e:	4b36      	ldr	r3, [pc, #216]	; (8009af8 <xTaskResumeAll+0x114>)
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d161      	bne.n	8009aea <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009a26:	4b35      	ldr	r3, [pc, #212]	; (8009afc <xTaskResumeAll+0x118>)
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d05d      	beq.n	8009aea <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009a2e:	e02e      	b.n	8009a8e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a30:	4b33      	ldr	r3, [pc, #204]	; (8009b00 <xTaskResumeAll+0x11c>)
 8009a32:	68db      	ldr	r3, [r3, #12]
 8009a34:	68db      	ldr	r3, [r3, #12]
 8009a36:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	3318      	adds	r3, #24
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	f7fe fe11 	bl	8008664 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	3304      	adds	r3, #4
 8009a46:	4618      	mov	r0, r3
 8009a48:	f7fe fe0c 	bl	8008664 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a50:	2201      	movs	r2, #1
 8009a52:	409a      	lsls	r2, r3
 8009a54:	4b2b      	ldr	r3, [pc, #172]	; (8009b04 <xTaskResumeAll+0x120>)
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	4313      	orrs	r3, r2
 8009a5a:	4a2a      	ldr	r2, [pc, #168]	; (8009b04 <xTaskResumeAll+0x120>)
 8009a5c:	6013      	str	r3, [r2, #0]
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a62:	4613      	mov	r3, r2
 8009a64:	009b      	lsls	r3, r3, #2
 8009a66:	4413      	add	r3, r2
 8009a68:	009b      	lsls	r3, r3, #2
 8009a6a:	4a27      	ldr	r2, [pc, #156]	; (8009b08 <xTaskResumeAll+0x124>)
 8009a6c:	441a      	add	r2, r3
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	3304      	adds	r3, #4
 8009a72:	4619      	mov	r1, r3
 8009a74:	4610      	mov	r0, r2
 8009a76:	f7fe fd9a 	bl	80085ae <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a7e:	4b23      	ldr	r3, [pc, #140]	; (8009b0c <xTaskResumeAll+0x128>)
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a84:	429a      	cmp	r2, r3
 8009a86:	d302      	bcc.n	8009a8e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8009a88:	4b21      	ldr	r3, [pc, #132]	; (8009b10 <xTaskResumeAll+0x12c>)
 8009a8a:	2201      	movs	r2, #1
 8009a8c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009a8e:	4b1c      	ldr	r3, [pc, #112]	; (8009b00 <xTaskResumeAll+0x11c>)
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d1cc      	bne.n	8009a30 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d001      	beq.n	8009aa0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009a9c:	f000 fb3c 	bl	800a118 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009aa0:	4b1c      	ldr	r3, [pc, #112]	; (8009b14 <xTaskResumeAll+0x130>)
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d010      	beq.n	8009ace <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009aac:	f000 f856 	bl	8009b5c <xTaskIncrementTick>
 8009ab0:	4603      	mov	r3, r0
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d002      	beq.n	8009abc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8009ab6:	4b16      	ldr	r3, [pc, #88]	; (8009b10 <xTaskResumeAll+0x12c>)
 8009ab8:	2201      	movs	r2, #1
 8009aba:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	3b01      	subs	r3, #1
 8009ac0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d1f1      	bne.n	8009aac <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8009ac8:	4b12      	ldr	r3, [pc, #72]	; (8009b14 <xTaskResumeAll+0x130>)
 8009aca:	2200      	movs	r2, #0
 8009acc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009ace:	4b10      	ldr	r3, [pc, #64]	; (8009b10 <xTaskResumeAll+0x12c>)
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d009      	beq.n	8009aea <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009ad6:	2301      	movs	r3, #1
 8009ad8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009ada:	4b0f      	ldr	r3, [pc, #60]	; (8009b18 <xTaskResumeAll+0x134>)
 8009adc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ae0:	601a      	str	r2, [r3, #0]
 8009ae2:	f3bf 8f4f 	dsb	sy
 8009ae6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009aea:	f000 fe77 	bl	800a7dc <vPortExitCritical>

	return xAlreadyYielded;
 8009aee:	68bb      	ldr	r3, [r7, #8]
}
 8009af0:	4618      	mov	r0, r3
 8009af2:	3710      	adds	r7, #16
 8009af4:	46bd      	mov	sp, r7
 8009af6:	bd80      	pop	{r7, pc}
 8009af8:	200051c4 	.word	0x200051c4
 8009afc:	2000519c 	.word	0x2000519c
 8009b00:	2000515c 	.word	0x2000515c
 8009b04:	200051a4 	.word	0x200051a4
 8009b08:	200050a0 	.word	0x200050a0
 8009b0c:	2000509c 	.word	0x2000509c
 8009b10:	200051b0 	.word	0x200051b0
 8009b14:	200051ac 	.word	0x200051ac
 8009b18:	e000ed04 	.word	0xe000ed04

08009b1c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009b1c:	b480      	push	{r7}
 8009b1e:	b083      	sub	sp, #12
 8009b20:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009b22:	4b04      	ldr	r3, [pc, #16]	; (8009b34 <xTaskGetTickCount+0x18>)
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009b28:	687b      	ldr	r3, [r7, #4]
}
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	370c      	adds	r7, #12
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	bc80      	pop	{r7}
 8009b32:	4770      	bx	lr
 8009b34:	200051a0 	.word	0x200051a0

08009b38 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b082      	sub	sp, #8
 8009b3c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009b3e:	f000 fedf 	bl	800a900 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8009b42:	2300      	movs	r3, #0
 8009b44:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8009b46:	4b04      	ldr	r3, [pc, #16]	; (8009b58 <xTaskGetTickCountFromISR+0x20>)
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009b4c:	683b      	ldr	r3, [r7, #0]
}
 8009b4e:	4618      	mov	r0, r3
 8009b50:	3708      	adds	r7, #8
 8009b52:	46bd      	mov	sp, r7
 8009b54:	bd80      	pop	{r7, pc}
 8009b56:	bf00      	nop
 8009b58:	200051a0 	.word	0x200051a0

08009b5c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b086      	sub	sp, #24
 8009b60:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009b62:	2300      	movs	r3, #0
 8009b64:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009b66:	4b4e      	ldr	r3, [pc, #312]	; (8009ca0 <xTaskIncrementTick+0x144>)
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	f040 808e 	bne.w	8009c8c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009b70:	4b4c      	ldr	r3, [pc, #304]	; (8009ca4 <xTaskIncrementTick+0x148>)
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	3301      	adds	r3, #1
 8009b76:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009b78:	4a4a      	ldr	r2, [pc, #296]	; (8009ca4 <xTaskIncrementTick+0x148>)
 8009b7a:	693b      	ldr	r3, [r7, #16]
 8009b7c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009b7e:	693b      	ldr	r3, [r7, #16]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d120      	bne.n	8009bc6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009b84:	4b48      	ldr	r3, [pc, #288]	; (8009ca8 <xTaskIncrementTick+0x14c>)
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d00a      	beq.n	8009ba4 <xTaskIncrementTick+0x48>
	__asm volatile
 8009b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b92:	f383 8811 	msr	BASEPRI, r3
 8009b96:	f3bf 8f6f 	isb	sy
 8009b9a:	f3bf 8f4f 	dsb	sy
 8009b9e:	603b      	str	r3, [r7, #0]
}
 8009ba0:	bf00      	nop
 8009ba2:	e7fe      	b.n	8009ba2 <xTaskIncrementTick+0x46>
 8009ba4:	4b40      	ldr	r3, [pc, #256]	; (8009ca8 <xTaskIncrementTick+0x14c>)
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	60fb      	str	r3, [r7, #12]
 8009baa:	4b40      	ldr	r3, [pc, #256]	; (8009cac <xTaskIncrementTick+0x150>)
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	4a3e      	ldr	r2, [pc, #248]	; (8009ca8 <xTaskIncrementTick+0x14c>)
 8009bb0:	6013      	str	r3, [r2, #0]
 8009bb2:	4a3e      	ldr	r2, [pc, #248]	; (8009cac <xTaskIncrementTick+0x150>)
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	6013      	str	r3, [r2, #0]
 8009bb8:	4b3d      	ldr	r3, [pc, #244]	; (8009cb0 <xTaskIncrementTick+0x154>)
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	3301      	adds	r3, #1
 8009bbe:	4a3c      	ldr	r2, [pc, #240]	; (8009cb0 <xTaskIncrementTick+0x154>)
 8009bc0:	6013      	str	r3, [r2, #0]
 8009bc2:	f000 faa9 	bl	800a118 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009bc6:	4b3b      	ldr	r3, [pc, #236]	; (8009cb4 <xTaskIncrementTick+0x158>)
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	693a      	ldr	r2, [r7, #16]
 8009bcc:	429a      	cmp	r2, r3
 8009bce:	d348      	bcc.n	8009c62 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009bd0:	4b35      	ldr	r3, [pc, #212]	; (8009ca8 <xTaskIncrementTick+0x14c>)
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d104      	bne.n	8009be4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009bda:	4b36      	ldr	r3, [pc, #216]	; (8009cb4 <xTaskIncrementTick+0x158>)
 8009bdc:	f04f 32ff 	mov.w	r2, #4294967295
 8009be0:	601a      	str	r2, [r3, #0]
					break;
 8009be2:	e03e      	b.n	8009c62 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009be4:	4b30      	ldr	r3, [pc, #192]	; (8009ca8 <xTaskIncrementTick+0x14c>)
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	68db      	ldr	r3, [r3, #12]
 8009bea:	68db      	ldr	r3, [r3, #12]
 8009bec:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009bee:	68bb      	ldr	r3, [r7, #8]
 8009bf0:	685b      	ldr	r3, [r3, #4]
 8009bf2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009bf4:	693a      	ldr	r2, [r7, #16]
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	429a      	cmp	r2, r3
 8009bfa:	d203      	bcs.n	8009c04 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009bfc:	4a2d      	ldr	r2, [pc, #180]	; (8009cb4 <xTaskIncrementTick+0x158>)
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009c02:	e02e      	b.n	8009c62 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009c04:	68bb      	ldr	r3, [r7, #8]
 8009c06:	3304      	adds	r3, #4
 8009c08:	4618      	mov	r0, r3
 8009c0a:	f7fe fd2b 	bl	8008664 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009c0e:	68bb      	ldr	r3, [r7, #8]
 8009c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d004      	beq.n	8009c20 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009c16:	68bb      	ldr	r3, [r7, #8]
 8009c18:	3318      	adds	r3, #24
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	f7fe fd22 	bl	8008664 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009c20:	68bb      	ldr	r3, [r7, #8]
 8009c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c24:	2201      	movs	r2, #1
 8009c26:	409a      	lsls	r2, r3
 8009c28:	4b23      	ldr	r3, [pc, #140]	; (8009cb8 <xTaskIncrementTick+0x15c>)
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	4313      	orrs	r3, r2
 8009c2e:	4a22      	ldr	r2, [pc, #136]	; (8009cb8 <xTaskIncrementTick+0x15c>)
 8009c30:	6013      	str	r3, [r2, #0]
 8009c32:	68bb      	ldr	r3, [r7, #8]
 8009c34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c36:	4613      	mov	r3, r2
 8009c38:	009b      	lsls	r3, r3, #2
 8009c3a:	4413      	add	r3, r2
 8009c3c:	009b      	lsls	r3, r3, #2
 8009c3e:	4a1f      	ldr	r2, [pc, #124]	; (8009cbc <xTaskIncrementTick+0x160>)
 8009c40:	441a      	add	r2, r3
 8009c42:	68bb      	ldr	r3, [r7, #8]
 8009c44:	3304      	adds	r3, #4
 8009c46:	4619      	mov	r1, r3
 8009c48:	4610      	mov	r0, r2
 8009c4a:	f7fe fcb0 	bl	80085ae <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009c4e:	68bb      	ldr	r3, [r7, #8]
 8009c50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c52:	4b1b      	ldr	r3, [pc, #108]	; (8009cc0 <xTaskIncrementTick+0x164>)
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c58:	429a      	cmp	r2, r3
 8009c5a:	d3b9      	bcc.n	8009bd0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009c5c:	2301      	movs	r3, #1
 8009c5e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009c60:	e7b6      	b.n	8009bd0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009c62:	4b17      	ldr	r3, [pc, #92]	; (8009cc0 <xTaskIncrementTick+0x164>)
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c68:	4914      	ldr	r1, [pc, #80]	; (8009cbc <xTaskIncrementTick+0x160>)
 8009c6a:	4613      	mov	r3, r2
 8009c6c:	009b      	lsls	r3, r3, #2
 8009c6e:	4413      	add	r3, r2
 8009c70:	009b      	lsls	r3, r3, #2
 8009c72:	440b      	add	r3, r1
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	2b01      	cmp	r3, #1
 8009c78:	d901      	bls.n	8009c7e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8009c7a:	2301      	movs	r3, #1
 8009c7c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009c7e:	4b11      	ldr	r3, [pc, #68]	; (8009cc4 <xTaskIncrementTick+0x168>)
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d007      	beq.n	8009c96 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8009c86:	2301      	movs	r3, #1
 8009c88:	617b      	str	r3, [r7, #20]
 8009c8a:	e004      	b.n	8009c96 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009c8c:	4b0e      	ldr	r3, [pc, #56]	; (8009cc8 <xTaskIncrementTick+0x16c>)
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	3301      	adds	r3, #1
 8009c92:	4a0d      	ldr	r2, [pc, #52]	; (8009cc8 <xTaskIncrementTick+0x16c>)
 8009c94:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009c96:	697b      	ldr	r3, [r7, #20]
}
 8009c98:	4618      	mov	r0, r3
 8009c9a:	3718      	adds	r7, #24
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	bd80      	pop	{r7, pc}
 8009ca0:	200051c4 	.word	0x200051c4
 8009ca4:	200051a0 	.word	0x200051a0
 8009ca8:	20005154 	.word	0x20005154
 8009cac:	20005158 	.word	0x20005158
 8009cb0:	200051b4 	.word	0x200051b4
 8009cb4:	200051bc 	.word	0x200051bc
 8009cb8:	200051a4 	.word	0x200051a4
 8009cbc:	200050a0 	.word	0x200050a0
 8009cc0:	2000509c 	.word	0x2000509c
 8009cc4:	200051b0 	.word	0x200051b0
 8009cc8:	200051ac 	.word	0x200051ac

08009ccc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009ccc:	b480      	push	{r7}
 8009cce:	b087      	sub	sp, #28
 8009cd0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009cd2:	4b29      	ldr	r3, [pc, #164]	; (8009d78 <vTaskSwitchContext+0xac>)
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d003      	beq.n	8009ce2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009cda:	4b28      	ldr	r3, [pc, #160]	; (8009d7c <vTaskSwitchContext+0xb0>)
 8009cdc:	2201      	movs	r2, #1
 8009cde:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009ce0:	e044      	b.n	8009d6c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8009ce2:	4b26      	ldr	r3, [pc, #152]	; (8009d7c <vTaskSwitchContext+0xb0>)
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ce8:	4b25      	ldr	r3, [pc, #148]	; (8009d80 <vTaskSwitchContext+0xb4>)
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	fab3 f383 	clz	r3, r3
 8009cf4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009cf6:	7afb      	ldrb	r3, [r7, #11]
 8009cf8:	f1c3 031f 	rsb	r3, r3, #31
 8009cfc:	617b      	str	r3, [r7, #20]
 8009cfe:	4921      	ldr	r1, [pc, #132]	; (8009d84 <vTaskSwitchContext+0xb8>)
 8009d00:	697a      	ldr	r2, [r7, #20]
 8009d02:	4613      	mov	r3, r2
 8009d04:	009b      	lsls	r3, r3, #2
 8009d06:	4413      	add	r3, r2
 8009d08:	009b      	lsls	r3, r3, #2
 8009d0a:	440b      	add	r3, r1
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d10a      	bne.n	8009d28 <vTaskSwitchContext+0x5c>
	__asm volatile
 8009d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d16:	f383 8811 	msr	BASEPRI, r3
 8009d1a:	f3bf 8f6f 	isb	sy
 8009d1e:	f3bf 8f4f 	dsb	sy
 8009d22:	607b      	str	r3, [r7, #4]
}
 8009d24:	bf00      	nop
 8009d26:	e7fe      	b.n	8009d26 <vTaskSwitchContext+0x5a>
 8009d28:	697a      	ldr	r2, [r7, #20]
 8009d2a:	4613      	mov	r3, r2
 8009d2c:	009b      	lsls	r3, r3, #2
 8009d2e:	4413      	add	r3, r2
 8009d30:	009b      	lsls	r3, r3, #2
 8009d32:	4a14      	ldr	r2, [pc, #80]	; (8009d84 <vTaskSwitchContext+0xb8>)
 8009d34:	4413      	add	r3, r2
 8009d36:	613b      	str	r3, [r7, #16]
 8009d38:	693b      	ldr	r3, [r7, #16]
 8009d3a:	685b      	ldr	r3, [r3, #4]
 8009d3c:	685a      	ldr	r2, [r3, #4]
 8009d3e:	693b      	ldr	r3, [r7, #16]
 8009d40:	605a      	str	r2, [r3, #4]
 8009d42:	693b      	ldr	r3, [r7, #16]
 8009d44:	685a      	ldr	r2, [r3, #4]
 8009d46:	693b      	ldr	r3, [r7, #16]
 8009d48:	3308      	adds	r3, #8
 8009d4a:	429a      	cmp	r2, r3
 8009d4c:	d104      	bne.n	8009d58 <vTaskSwitchContext+0x8c>
 8009d4e:	693b      	ldr	r3, [r7, #16]
 8009d50:	685b      	ldr	r3, [r3, #4]
 8009d52:	685a      	ldr	r2, [r3, #4]
 8009d54:	693b      	ldr	r3, [r7, #16]
 8009d56:	605a      	str	r2, [r3, #4]
 8009d58:	693b      	ldr	r3, [r7, #16]
 8009d5a:	685b      	ldr	r3, [r3, #4]
 8009d5c:	68db      	ldr	r3, [r3, #12]
 8009d5e:	4a0a      	ldr	r2, [pc, #40]	; (8009d88 <vTaskSwitchContext+0xbc>)
 8009d60:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009d62:	4b09      	ldr	r3, [pc, #36]	; (8009d88 <vTaskSwitchContext+0xbc>)
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	334c      	adds	r3, #76	; 0x4c
 8009d68:	4a08      	ldr	r2, [pc, #32]	; (8009d8c <vTaskSwitchContext+0xc0>)
 8009d6a:	6013      	str	r3, [r2, #0]
}
 8009d6c:	bf00      	nop
 8009d6e:	371c      	adds	r7, #28
 8009d70:	46bd      	mov	sp, r7
 8009d72:	bc80      	pop	{r7}
 8009d74:	4770      	bx	lr
 8009d76:	bf00      	nop
 8009d78:	200051c4 	.word	0x200051c4
 8009d7c:	200051b0 	.word	0x200051b0
 8009d80:	200051a4 	.word	0x200051a4
 8009d84:	200050a0 	.word	0x200050a0
 8009d88:	2000509c 	.word	0x2000509c
 8009d8c:	20000110 	.word	0x20000110

08009d90 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b084      	sub	sp, #16
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
 8009d98:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d10a      	bne.n	8009db6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009da4:	f383 8811 	msr	BASEPRI, r3
 8009da8:	f3bf 8f6f 	isb	sy
 8009dac:	f3bf 8f4f 	dsb	sy
 8009db0:	60fb      	str	r3, [r7, #12]
}
 8009db2:	bf00      	nop
 8009db4:	e7fe      	b.n	8009db4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009db6:	4b07      	ldr	r3, [pc, #28]	; (8009dd4 <vTaskPlaceOnEventList+0x44>)
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	3318      	adds	r3, #24
 8009dbc:	4619      	mov	r1, r3
 8009dbe:	6878      	ldr	r0, [r7, #4]
 8009dc0:	f7fe fc18 	bl	80085f4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009dc4:	2101      	movs	r1, #1
 8009dc6:	6838      	ldr	r0, [r7, #0]
 8009dc8:	f000 fb82 	bl	800a4d0 <prvAddCurrentTaskToDelayedList>
}
 8009dcc:	bf00      	nop
 8009dce:	3710      	adds	r7, #16
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	bd80      	pop	{r7, pc}
 8009dd4:	2000509c 	.word	0x2000509c

08009dd8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b086      	sub	sp, #24
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	68db      	ldr	r3, [r3, #12]
 8009de4:	68db      	ldr	r3, [r3, #12]
 8009de6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009de8:	693b      	ldr	r3, [r7, #16]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d10a      	bne.n	8009e04 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009df2:	f383 8811 	msr	BASEPRI, r3
 8009df6:	f3bf 8f6f 	isb	sy
 8009dfa:	f3bf 8f4f 	dsb	sy
 8009dfe:	60fb      	str	r3, [r7, #12]
}
 8009e00:	bf00      	nop
 8009e02:	e7fe      	b.n	8009e02 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009e04:	693b      	ldr	r3, [r7, #16]
 8009e06:	3318      	adds	r3, #24
 8009e08:	4618      	mov	r0, r3
 8009e0a:	f7fe fc2b 	bl	8008664 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009e0e:	4b1d      	ldr	r3, [pc, #116]	; (8009e84 <xTaskRemoveFromEventList+0xac>)
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d11c      	bne.n	8009e50 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009e16:	693b      	ldr	r3, [r7, #16]
 8009e18:	3304      	adds	r3, #4
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	f7fe fc22 	bl	8008664 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009e20:	693b      	ldr	r3, [r7, #16]
 8009e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e24:	2201      	movs	r2, #1
 8009e26:	409a      	lsls	r2, r3
 8009e28:	4b17      	ldr	r3, [pc, #92]	; (8009e88 <xTaskRemoveFromEventList+0xb0>)
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	4313      	orrs	r3, r2
 8009e2e:	4a16      	ldr	r2, [pc, #88]	; (8009e88 <xTaskRemoveFromEventList+0xb0>)
 8009e30:	6013      	str	r3, [r2, #0]
 8009e32:	693b      	ldr	r3, [r7, #16]
 8009e34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e36:	4613      	mov	r3, r2
 8009e38:	009b      	lsls	r3, r3, #2
 8009e3a:	4413      	add	r3, r2
 8009e3c:	009b      	lsls	r3, r3, #2
 8009e3e:	4a13      	ldr	r2, [pc, #76]	; (8009e8c <xTaskRemoveFromEventList+0xb4>)
 8009e40:	441a      	add	r2, r3
 8009e42:	693b      	ldr	r3, [r7, #16]
 8009e44:	3304      	adds	r3, #4
 8009e46:	4619      	mov	r1, r3
 8009e48:	4610      	mov	r0, r2
 8009e4a:	f7fe fbb0 	bl	80085ae <vListInsertEnd>
 8009e4e:	e005      	b.n	8009e5c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009e50:	693b      	ldr	r3, [r7, #16]
 8009e52:	3318      	adds	r3, #24
 8009e54:	4619      	mov	r1, r3
 8009e56:	480e      	ldr	r0, [pc, #56]	; (8009e90 <xTaskRemoveFromEventList+0xb8>)
 8009e58:	f7fe fba9 	bl	80085ae <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009e5c:	693b      	ldr	r3, [r7, #16]
 8009e5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e60:	4b0c      	ldr	r3, [pc, #48]	; (8009e94 <xTaskRemoveFromEventList+0xbc>)
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e66:	429a      	cmp	r2, r3
 8009e68:	d905      	bls.n	8009e76 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009e6a:	2301      	movs	r3, #1
 8009e6c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009e6e:	4b0a      	ldr	r3, [pc, #40]	; (8009e98 <xTaskRemoveFromEventList+0xc0>)
 8009e70:	2201      	movs	r2, #1
 8009e72:	601a      	str	r2, [r3, #0]
 8009e74:	e001      	b.n	8009e7a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8009e76:	2300      	movs	r3, #0
 8009e78:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009e7a:	697b      	ldr	r3, [r7, #20]
}
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	3718      	adds	r7, #24
 8009e80:	46bd      	mov	sp, r7
 8009e82:	bd80      	pop	{r7, pc}
 8009e84:	200051c4 	.word	0x200051c4
 8009e88:	200051a4 	.word	0x200051a4
 8009e8c:	200050a0 	.word	0x200050a0
 8009e90:	2000515c 	.word	0x2000515c
 8009e94:	2000509c 	.word	0x2000509c
 8009e98:	200051b0 	.word	0x200051b0

08009e9c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009e9c:	b480      	push	{r7}
 8009e9e:	b083      	sub	sp, #12
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009ea4:	4b06      	ldr	r3, [pc, #24]	; (8009ec0 <vTaskInternalSetTimeOutState+0x24>)
 8009ea6:	681a      	ldr	r2, [r3, #0]
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009eac:	4b05      	ldr	r3, [pc, #20]	; (8009ec4 <vTaskInternalSetTimeOutState+0x28>)
 8009eae:	681a      	ldr	r2, [r3, #0]
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	605a      	str	r2, [r3, #4]
}
 8009eb4:	bf00      	nop
 8009eb6:	370c      	adds	r7, #12
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	bc80      	pop	{r7}
 8009ebc:	4770      	bx	lr
 8009ebe:	bf00      	nop
 8009ec0:	200051b4 	.word	0x200051b4
 8009ec4:	200051a0 	.word	0x200051a0

08009ec8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b088      	sub	sp, #32
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
 8009ed0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d10a      	bne.n	8009eee <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009edc:	f383 8811 	msr	BASEPRI, r3
 8009ee0:	f3bf 8f6f 	isb	sy
 8009ee4:	f3bf 8f4f 	dsb	sy
 8009ee8:	613b      	str	r3, [r7, #16]
}
 8009eea:	bf00      	nop
 8009eec:	e7fe      	b.n	8009eec <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009eee:	683b      	ldr	r3, [r7, #0]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d10a      	bne.n	8009f0a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ef8:	f383 8811 	msr	BASEPRI, r3
 8009efc:	f3bf 8f6f 	isb	sy
 8009f00:	f3bf 8f4f 	dsb	sy
 8009f04:	60fb      	str	r3, [r7, #12]
}
 8009f06:	bf00      	nop
 8009f08:	e7fe      	b.n	8009f08 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009f0a:	f000 fc37 	bl	800a77c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009f0e:	4b1d      	ldr	r3, [pc, #116]	; (8009f84 <xTaskCheckForTimeOut+0xbc>)
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	685b      	ldr	r3, [r3, #4]
 8009f18:	69ba      	ldr	r2, [r7, #24]
 8009f1a:	1ad3      	subs	r3, r2, r3
 8009f1c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009f1e:	683b      	ldr	r3, [r7, #0]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f26:	d102      	bne.n	8009f2e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009f28:	2300      	movs	r3, #0
 8009f2a:	61fb      	str	r3, [r7, #28]
 8009f2c:	e023      	b.n	8009f76 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681a      	ldr	r2, [r3, #0]
 8009f32:	4b15      	ldr	r3, [pc, #84]	; (8009f88 <xTaskCheckForTimeOut+0xc0>)
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	429a      	cmp	r2, r3
 8009f38:	d007      	beq.n	8009f4a <xTaskCheckForTimeOut+0x82>
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	685b      	ldr	r3, [r3, #4]
 8009f3e:	69ba      	ldr	r2, [r7, #24]
 8009f40:	429a      	cmp	r2, r3
 8009f42:	d302      	bcc.n	8009f4a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009f44:	2301      	movs	r3, #1
 8009f46:	61fb      	str	r3, [r7, #28]
 8009f48:	e015      	b.n	8009f76 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009f4a:	683b      	ldr	r3, [r7, #0]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	697a      	ldr	r2, [r7, #20]
 8009f50:	429a      	cmp	r2, r3
 8009f52:	d20b      	bcs.n	8009f6c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	681a      	ldr	r2, [r3, #0]
 8009f58:	697b      	ldr	r3, [r7, #20]
 8009f5a:	1ad2      	subs	r2, r2, r3
 8009f5c:	683b      	ldr	r3, [r7, #0]
 8009f5e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009f60:	6878      	ldr	r0, [r7, #4]
 8009f62:	f7ff ff9b 	bl	8009e9c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009f66:	2300      	movs	r3, #0
 8009f68:	61fb      	str	r3, [r7, #28]
 8009f6a:	e004      	b.n	8009f76 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009f6c:	683b      	ldr	r3, [r7, #0]
 8009f6e:	2200      	movs	r2, #0
 8009f70:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009f72:	2301      	movs	r3, #1
 8009f74:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009f76:	f000 fc31 	bl	800a7dc <vPortExitCritical>

	return xReturn;
 8009f7a:	69fb      	ldr	r3, [r7, #28]
}
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	3720      	adds	r7, #32
 8009f80:	46bd      	mov	sp, r7
 8009f82:	bd80      	pop	{r7, pc}
 8009f84:	200051a0 	.word	0x200051a0
 8009f88:	200051b4 	.word	0x200051b4

08009f8c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009f8c:	b480      	push	{r7}
 8009f8e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009f90:	4b03      	ldr	r3, [pc, #12]	; (8009fa0 <vTaskMissedYield+0x14>)
 8009f92:	2201      	movs	r2, #1
 8009f94:	601a      	str	r2, [r3, #0]
}
 8009f96:	bf00      	nop
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	bc80      	pop	{r7}
 8009f9c:	4770      	bx	lr
 8009f9e:	bf00      	nop
 8009fa0:	200051b0 	.word	0x200051b0

08009fa4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b082      	sub	sp, #8
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009fac:	f000 f852 	bl	800a054 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009fb0:	4b06      	ldr	r3, [pc, #24]	; (8009fcc <prvIdleTask+0x28>)
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	2b01      	cmp	r3, #1
 8009fb6:	d9f9      	bls.n	8009fac <prvIdleTask+0x8>
			{
				taskYIELD();
 8009fb8:	4b05      	ldr	r3, [pc, #20]	; (8009fd0 <prvIdleTask+0x2c>)
 8009fba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009fbe:	601a      	str	r2, [r3, #0]
 8009fc0:	f3bf 8f4f 	dsb	sy
 8009fc4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009fc8:	e7f0      	b.n	8009fac <prvIdleTask+0x8>
 8009fca:	bf00      	nop
 8009fcc:	200050a0 	.word	0x200050a0
 8009fd0:	e000ed04 	.word	0xe000ed04

08009fd4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b082      	sub	sp, #8
 8009fd8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009fda:	2300      	movs	r3, #0
 8009fdc:	607b      	str	r3, [r7, #4]
 8009fde:	e00c      	b.n	8009ffa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009fe0:	687a      	ldr	r2, [r7, #4]
 8009fe2:	4613      	mov	r3, r2
 8009fe4:	009b      	lsls	r3, r3, #2
 8009fe6:	4413      	add	r3, r2
 8009fe8:	009b      	lsls	r3, r3, #2
 8009fea:	4a12      	ldr	r2, [pc, #72]	; (800a034 <prvInitialiseTaskLists+0x60>)
 8009fec:	4413      	add	r3, r2
 8009fee:	4618      	mov	r0, r3
 8009ff0:	f7fe fab2 	bl	8008558 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	3301      	adds	r3, #1
 8009ff8:	607b      	str	r3, [r7, #4]
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	2b06      	cmp	r3, #6
 8009ffe:	d9ef      	bls.n	8009fe0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a000:	480d      	ldr	r0, [pc, #52]	; (800a038 <prvInitialiseTaskLists+0x64>)
 800a002:	f7fe faa9 	bl	8008558 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a006:	480d      	ldr	r0, [pc, #52]	; (800a03c <prvInitialiseTaskLists+0x68>)
 800a008:	f7fe faa6 	bl	8008558 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a00c:	480c      	ldr	r0, [pc, #48]	; (800a040 <prvInitialiseTaskLists+0x6c>)
 800a00e:	f7fe faa3 	bl	8008558 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a012:	480c      	ldr	r0, [pc, #48]	; (800a044 <prvInitialiseTaskLists+0x70>)
 800a014:	f7fe faa0 	bl	8008558 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a018:	480b      	ldr	r0, [pc, #44]	; (800a048 <prvInitialiseTaskLists+0x74>)
 800a01a:	f7fe fa9d 	bl	8008558 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a01e:	4b0b      	ldr	r3, [pc, #44]	; (800a04c <prvInitialiseTaskLists+0x78>)
 800a020:	4a05      	ldr	r2, [pc, #20]	; (800a038 <prvInitialiseTaskLists+0x64>)
 800a022:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a024:	4b0a      	ldr	r3, [pc, #40]	; (800a050 <prvInitialiseTaskLists+0x7c>)
 800a026:	4a05      	ldr	r2, [pc, #20]	; (800a03c <prvInitialiseTaskLists+0x68>)
 800a028:	601a      	str	r2, [r3, #0]
}
 800a02a:	bf00      	nop
 800a02c:	3708      	adds	r7, #8
 800a02e:	46bd      	mov	sp, r7
 800a030:	bd80      	pop	{r7, pc}
 800a032:	bf00      	nop
 800a034:	200050a0 	.word	0x200050a0
 800a038:	2000512c 	.word	0x2000512c
 800a03c:	20005140 	.word	0x20005140
 800a040:	2000515c 	.word	0x2000515c
 800a044:	20005170 	.word	0x20005170
 800a048:	20005188 	.word	0x20005188
 800a04c:	20005154 	.word	0x20005154
 800a050:	20005158 	.word	0x20005158

0800a054 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a054:	b580      	push	{r7, lr}
 800a056:	b082      	sub	sp, #8
 800a058:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a05a:	e019      	b.n	800a090 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a05c:	f000 fb8e 	bl	800a77c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a060:	4b10      	ldr	r3, [pc, #64]	; (800a0a4 <prvCheckTasksWaitingTermination+0x50>)
 800a062:	68db      	ldr	r3, [r3, #12]
 800a064:	68db      	ldr	r3, [r3, #12]
 800a066:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	3304      	adds	r3, #4
 800a06c:	4618      	mov	r0, r3
 800a06e:	f7fe faf9 	bl	8008664 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a072:	4b0d      	ldr	r3, [pc, #52]	; (800a0a8 <prvCheckTasksWaitingTermination+0x54>)
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	3b01      	subs	r3, #1
 800a078:	4a0b      	ldr	r2, [pc, #44]	; (800a0a8 <prvCheckTasksWaitingTermination+0x54>)
 800a07a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a07c:	4b0b      	ldr	r3, [pc, #44]	; (800a0ac <prvCheckTasksWaitingTermination+0x58>)
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	3b01      	subs	r3, #1
 800a082:	4a0a      	ldr	r2, [pc, #40]	; (800a0ac <prvCheckTasksWaitingTermination+0x58>)
 800a084:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a086:	f000 fba9 	bl	800a7dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a08a:	6878      	ldr	r0, [r7, #4]
 800a08c:	f000 f810 	bl	800a0b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a090:	4b06      	ldr	r3, [pc, #24]	; (800a0ac <prvCheckTasksWaitingTermination+0x58>)
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d1e1      	bne.n	800a05c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a098:	bf00      	nop
 800a09a:	bf00      	nop
 800a09c:	3708      	adds	r7, #8
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	bd80      	pop	{r7, pc}
 800a0a2:	bf00      	nop
 800a0a4:	20005170 	.word	0x20005170
 800a0a8:	2000519c 	.word	0x2000519c
 800a0ac:	20005184 	.word	0x20005184

0800a0b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	b084      	sub	sp, #16
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	334c      	adds	r3, #76	; 0x4c
 800a0bc:	4618      	mov	r0, r3
 800a0be:	f010 fbd5 	bl	801a86c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d108      	bne.n	800a0de <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	f000 fd1f 	bl	800ab14 <vPortFree>
				vPortFree( pxTCB );
 800a0d6:	6878      	ldr	r0, [r7, #4]
 800a0d8:	f000 fd1c 	bl	800ab14 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a0dc:	e018      	b.n	800a110 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800a0e4:	2b01      	cmp	r3, #1
 800a0e6:	d103      	bne.n	800a0f0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a0e8:	6878      	ldr	r0, [r7, #4]
 800a0ea:	f000 fd13 	bl	800ab14 <vPortFree>
	}
 800a0ee:	e00f      	b.n	800a110 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800a0f6:	2b02      	cmp	r3, #2
 800a0f8:	d00a      	beq.n	800a110 <prvDeleteTCB+0x60>
	__asm volatile
 800a0fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0fe:	f383 8811 	msr	BASEPRI, r3
 800a102:	f3bf 8f6f 	isb	sy
 800a106:	f3bf 8f4f 	dsb	sy
 800a10a:	60fb      	str	r3, [r7, #12]
}
 800a10c:	bf00      	nop
 800a10e:	e7fe      	b.n	800a10e <prvDeleteTCB+0x5e>
	}
 800a110:	bf00      	nop
 800a112:	3710      	adds	r7, #16
 800a114:	46bd      	mov	sp, r7
 800a116:	bd80      	pop	{r7, pc}

0800a118 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a118:	b480      	push	{r7}
 800a11a:	b083      	sub	sp, #12
 800a11c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a11e:	4b0c      	ldr	r3, [pc, #48]	; (800a150 <prvResetNextTaskUnblockTime+0x38>)
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d104      	bne.n	800a132 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a128:	4b0a      	ldr	r3, [pc, #40]	; (800a154 <prvResetNextTaskUnblockTime+0x3c>)
 800a12a:	f04f 32ff 	mov.w	r2, #4294967295
 800a12e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a130:	e008      	b.n	800a144 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a132:	4b07      	ldr	r3, [pc, #28]	; (800a150 <prvResetNextTaskUnblockTime+0x38>)
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	68db      	ldr	r3, [r3, #12]
 800a138:	68db      	ldr	r3, [r3, #12]
 800a13a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	685b      	ldr	r3, [r3, #4]
 800a140:	4a04      	ldr	r2, [pc, #16]	; (800a154 <prvResetNextTaskUnblockTime+0x3c>)
 800a142:	6013      	str	r3, [r2, #0]
}
 800a144:	bf00      	nop
 800a146:	370c      	adds	r7, #12
 800a148:	46bd      	mov	sp, r7
 800a14a:	bc80      	pop	{r7}
 800a14c:	4770      	bx	lr
 800a14e:	bf00      	nop
 800a150:	20005154 	.word	0x20005154
 800a154:	200051bc 	.word	0x200051bc

0800a158 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a158:	b480      	push	{r7}
 800a15a:	b083      	sub	sp, #12
 800a15c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a15e:	4b0b      	ldr	r3, [pc, #44]	; (800a18c <xTaskGetSchedulerState+0x34>)
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d102      	bne.n	800a16c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a166:	2301      	movs	r3, #1
 800a168:	607b      	str	r3, [r7, #4]
 800a16a:	e008      	b.n	800a17e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a16c:	4b08      	ldr	r3, [pc, #32]	; (800a190 <xTaskGetSchedulerState+0x38>)
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d102      	bne.n	800a17a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a174:	2302      	movs	r3, #2
 800a176:	607b      	str	r3, [r7, #4]
 800a178:	e001      	b.n	800a17e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a17a:	2300      	movs	r3, #0
 800a17c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a17e:	687b      	ldr	r3, [r7, #4]
	}
 800a180:	4618      	mov	r0, r3
 800a182:	370c      	adds	r7, #12
 800a184:	46bd      	mov	sp, r7
 800a186:	bc80      	pop	{r7}
 800a188:	4770      	bx	lr
 800a18a:	bf00      	nop
 800a18c:	200051a8 	.word	0x200051a8
 800a190:	200051c4 	.word	0x200051c4

0800a194 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a194:	b580      	push	{r7, lr}
 800a196:	b084      	sub	sp, #16
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d05e      	beq.n	800a268 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a1aa:	68bb      	ldr	r3, [r7, #8]
 800a1ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1ae:	4b31      	ldr	r3, [pc, #196]	; (800a274 <xTaskPriorityInherit+0xe0>)
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1b4:	429a      	cmp	r2, r3
 800a1b6:	d24e      	bcs.n	800a256 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a1b8:	68bb      	ldr	r3, [r7, #8]
 800a1ba:	699b      	ldr	r3, [r3, #24]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	db06      	blt.n	800a1ce <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a1c0:	4b2c      	ldr	r3, [pc, #176]	; (800a274 <xTaskPriorityInherit+0xe0>)
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1c6:	f1c3 0207 	rsb	r2, r3, #7
 800a1ca:	68bb      	ldr	r3, [r7, #8]
 800a1cc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a1ce:	68bb      	ldr	r3, [r7, #8]
 800a1d0:	6959      	ldr	r1, [r3, #20]
 800a1d2:	68bb      	ldr	r3, [r7, #8]
 800a1d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1d6:	4613      	mov	r3, r2
 800a1d8:	009b      	lsls	r3, r3, #2
 800a1da:	4413      	add	r3, r2
 800a1dc:	009b      	lsls	r3, r3, #2
 800a1de:	4a26      	ldr	r2, [pc, #152]	; (800a278 <xTaskPriorityInherit+0xe4>)
 800a1e0:	4413      	add	r3, r2
 800a1e2:	4299      	cmp	r1, r3
 800a1e4:	d12f      	bne.n	800a246 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a1e6:	68bb      	ldr	r3, [r7, #8]
 800a1e8:	3304      	adds	r3, #4
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	f7fe fa3a 	bl	8008664 <uxListRemove>
 800a1f0:	4603      	mov	r3, r0
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d10a      	bne.n	800a20c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800a1f6:	68bb      	ldr	r3, [r7, #8]
 800a1f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1fa:	2201      	movs	r2, #1
 800a1fc:	fa02 f303 	lsl.w	r3, r2, r3
 800a200:	43da      	mvns	r2, r3
 800a202:	4b1e      	ldr	r3, [pc, #120]	; (800a27c <xTaskPriorityInherit+0xe8>)
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	4013      	ands	r3, r2
 800a208:	4a1c      	ldr	r2, [pc, #112]	; (800a27c <xTaskPriorityInherit+0xe8>)
 800a20a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a20c:	4b19      	ldr	r3, [pc, #100]	; (800a274 <xTaskPriorityInherit+0xe0>)
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a212:	68bb      	ldr	r3, [r7, #8]
 800a214:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a216:	68bb      	ldr	r3, [r7, #8]
 800a218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a21a:	2201      	movs	r2, #1
 800a21c:	409a      	lsls	r2, r3
 800a21e:	4b17      	ldr	r3, [pc, #92]	; (800a27c <xTaskPriorityInherit+0xe8>)
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	4313      	orrs	r3, r2
 800a224:	4a15      	ldr	r2, [pc, #84]	; (800a27c <xTaskPriorityInherit+0xe8>)
 800a226:	6013      	str	r3, [r2, #0]
 800a228:	68bb      	ldr	r3, [r7, #8]
 800a22a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a22c:	4613      	mov	r3, r2
 800a22e:	009b      	lsls	r3, r3, #2
 800a230:	4413      	add	r3, r2
 800a232:	009b      	lsls	r3, r3, #2
 800a234:	4a10      	ldr	r2, [pc, #64]	; (800a278 <xTaskPriorityInherit+0xe4>)
 800a236:	441a      	add	r2, r3
 800a238:	68bb      	ldr	r3, [r7, #8]
 800a23a:	3304      	adds	r3, #4
 800a23c:	4619      	mov	r1, r3
 800a23e:	4610      	mov	r0, r2
 800a240:	f7fe f9b5 	bl	80085ae <vListInsertEnd>
 800a244:	e004      	b.n	800a250 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a246:	4b0b      	ldr	r3, [pc, #44]	; (800a274 <xTaskPriorityInherit+0xe0>)
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a24c:	68bb      	ldr	r3, [r7, #8]
 800a24e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a250:	2301      	movs	r3, #1
 800a252:	60fb      	str	r3, [r7, #12]
 800a254:	e008      	b.n	800a268 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a256:	68bb      	ldr	r3, [r7, #8]
 800a258:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a25a:	4b06      	ldr	r3, [pc, #24]	; (800a274 <xTaskPriorityInherit+0xe0>)
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a260:	429a      	cmp	r2, r3
 800a262:	d201      	bcs.n	800a268 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a264:	2301      	movs	r3, #1
 800a266:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a268:	68fb      	ldr	r3, [r7, #12]
	}
 800a26a:	4618      	mov	r0, r3
 800a26c:	3710      	adds	r7, #16
 800a26e:	46bd      	mov	sp, r7
 800a270:	bd80      	pop	{r7, pc}
 800a272:	bf00      	nop
 800a274:	2000509c 	.word	0x2000509c
 800a278:	200050a0 	.word	0x200050a0
 800a27c:	200051a4 	.word	0x200051a4

0800a280 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a280:	b580      	push	{r7, lr}
 800a282:	b086      	sub	sp, #24
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a28c:	2300      	movs	r3, #0
 800a28e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d06e      	beq.n	800a374 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a296:	4b3a      	ldr	r3, [pc, #232]	; (800a380 <xTaskPriorityDisinherit+0x100>)
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	693a      	ldr	r2, [r7, #16]
 800a29c:	429a      	cmp	r2, r3
 800a29e:	d00a      	beq.n	800a2b6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a2a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2a4:	f383 8811 	msr	BASEPRI, r3
 800a2a8:	f3bf 8f6f 	isb	sy
 800a2ac:	f3bf 8f4f 	dsb	sy
 800a2b0:	60fb      	str	r3, [r7, #12]
}
 800a2b2:	bf00      	nop
 800a2b4:	e7fe      	b.n	800a2b4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a2b6:	693b      	ldr	r3, [r7, #16]
 800a2b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d10a      	bne.n	800a2d4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a2be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2c2:	f383 8811 	msr	BASEPRI, r3
 800a2c6:	f3bf 8f6f 	isb	sy
 800a2ca:	f3bf 8f4f 	dsb	sy
 800a2ce:	60bb      	str	r3, [r7, #8]
}
 800a2d0:	bf00      	nop
 800a2d2:	e7fe      	b.n	800a2d2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a2d4:	693b      	ldr	r3, [r7, #16]
 800a2d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a2d8:	1e5a      	subs	r2, r3, #1
 800a2da:	693b      	ldr	r3, [r7, #16]
 800a2dc:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a2de:	693b      	ldr	r3, [r7, #16]
 800a2e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2e2:	693b      	ldr	r3, [r7, #16]
 800a2e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2e6:	429a      	cmp	r2, r3
 800a2e8:	d044      	beq.n	800a374 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a2ea:	693b      	ldr	r3, [r7, #16]
 800a2ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d140      	bne.n	800a374 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a2f2:	693b      	ldr	r3, [r7, #16]
 800a2f4:	3304      	adds	r3, #4
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	f7fe f9b4 	bl	8008664 <uxListRemove>
 800a2fc:	4603      	mov	r3, r0
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d115      	bne.n	800a32e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a302:	693b      	ldr	r3, [r7, #16]
 800a304:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a306:	491f      	ldr	r1, [pc, #124]	; (800a384 <xTaskPriorityDisinherit+0x104>)
 800a308:	4613      	mov	r3, r2
 800a30a:	009b      	lsls	r3, r3, #2
 800a30c:	4413      	add	r3, r2
 800a30e:	009b      	lsls	r3, r3, #2
 800a310:	440b      	add	r3, r1
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d10a      	bne.n	800a32e <xTaskPriorityDisinherit+0xae>
 800a318:	693b      	ldr	r3, [r7, #16]
 800a31a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a31c:	2201      	movs	r2, #1
 800a31e:	fa02 f303 	lsl.w	r3, r2, r3
 800a322:	43da      	mvns	r2, r3
 800a324:	4b18      	ldr	r3, [pc, #96]	; (800a388 <xTaskPriorityDisinherit+0x108>)
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	4013      	ands	r3, r2
 800a32a:	4a17      	ldr	r2, [pc, #92]	; (800a388 <xTaskPriorityDisinherit+0x108>)
 800a32c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a32e:	693b      	ldr	r3, [r7, #16]
 800a330:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a332:	693b      	ldr	r3, [r7, #16]
 800a334:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a336:	693b      	ldr	r3, [r7, #16]
 800a338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a33a:	f1c3 0207 	rsb	r2, r3, #7
 800a33e:	693b      	ldr	r3, [r7, #16]
 800a340:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a342:	693b      	ldr	r3, [r7, #16]
 800a344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a346:	2201      	movs	r2, #1
 800a348:	409a      	lsls	r2, r3
 800a34a:	4b0f      	ldr	r3, [pc, #60]	; (800a388 <xTaskPriorityDisinherit+0x108>)
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	4313      	orrs	r3, r2
 800a350:	4a0d      	ldr	r2, [pc, #52]	; (800a388 <xTaskPriorityDisinherit+0x108>)
 800a352:	6013      	str	r3, [r2, #0]
 800a354:	693b      	ldr	r3, [r7, #16]
 800a356:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a358:	4613      	mov	r3, r2
 800a35a:	009b      	lsls	r3, r3, #2
 800a35c:	4413      	add	r3, r2
 800a35e:	009b      	lsls	r3, r3, #2
 800a360:	4a08      	ldr	r2, [pc, #32]	; (800a384 <xTaskPriorityDisinherit+0x104>)
 800a362:	441a      	add	r2, r3
 800a364:	693b      	ldr	r3, [r7, #16]
 800a366:	3304      	adds	r3, #4
 800a368:	4619      	mov	r1, r3
 800a36a:	4610      	mov	r0, r2
 800a36c:	f7fe f91f 	bl	80085ae <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a370:	2301      	movs	r3, #1
 800a372:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a374:	697b      	ldr	r3, [r7, #20]
	}
 800a376:	4618      	mov	r0, r3
 800a378:	3718      	adds	r7, #24
 800a37a:	46bd      	mov	sp, r7
 800a37c:	bd80      	pop	{r7, pc}
 800a37e:	bf00      	nop
 800a380:	2000509c 	.word	0x2000509c
 800a384:	200050a0 	.word	0x200050a0
 800a388:	200051a4 	.word	0x200051a4

0800a38c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	b088      	sub	sp, #32
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
 800a394:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a39a:	2301      	movs	r3, #1
 800a39c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d077      	beq.n	800a494 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a3a4:	69bb      	ldr	r3, [r7, #24]
 800a3a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d10a      	bne.n	800a3c2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800a3ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3b0:	f383 8811 	msr	BASEPRI, r3
 800a3b4:	f3bf 8f6f 	isb	sy
 800a3b8:	f3bf 8f4f 	dsb	sy
 800a3bc:	60fb      	str	r3, [r7, #12]
}
 800a3be:	bf00      	nop
 800a3c0:	e7fe      	b.n	800a3c0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a3c2:	69bb      	ldr	r3, [r7, #24]
 800a3c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3c6:	683a      	ldr	r2, [r7, #0]
 800a3c8:	429a      	cmp	r2, r3
 800a3ca:	d902      	bls.n	800a3d2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a3cc:	683b      	ldr	r3, [r7, #0]
 800a3ce:	61fb      	str	r3, [r7, #28]
 800a3d0:	e002      	b.n	800a3d8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a3d2:	69bb      	ldr	r3, [r7, #24]
 800a3d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3d6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a3d8:	69bb      	ldr	r3, [r7, #24]
 800a3da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3dc:	69fa      	ldr	r2, [r7, #28]
 800a3de:	429a      	cmp	r2, r3
 800a3e0:	d058      	beq.n	800a494 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a3e2:	69bb      	ldr	r3, [r7, #24]
 800a3e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a3e6:	697a      	ldr	r2, [r7, #20]
 800a3e8:	429a      	cmp	r2, r3
 800a3ea:	d153      	bne.n	800a494 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a3ec:	4b2b      	ldr	r3, [pc, #172]	; (800a49c <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	69ba      	ldr	r2, [r7, #24]
 800a3f2:	429a      	cmp	r2, r3
 800a3f4:	d10a      	bne.n	800a40c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800a3f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3fa:	f383 8811 	msr	BASEPRI, r3
 800a3fe:	f3bf 8f6f 	isb	sy
 800a402:	f3bf 8f4f 	dsb	sy
 800a406:	60bb      	str	r3, [r7, #8]
}
 800a408:	bf00      	nop
 800a40a:	e7fe      	b.n	800a40a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a40c:	69bb      	ldr	r3, [r7, #24]
 800a40e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a410:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a412:	69bb      	ldr	r3, [r7, #24]
 800a414:	69fa      	ldr	r2, [r7, #28]
 800a416:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a418:	69bb      	ldr	r3, [r7, #24]
 800a41a:	699b      	ldr	r3, [r3, #24]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	db04      	blt.n	800a42a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a420:	69fb      	ldr	r3, [r7, #28]
 800a422:	f1c3 0207 	rsb	r2, r3, #7
 800a426:	69bb      	ldr	r3, [r7, #24]
 800a428:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a42a:	69bb      	ldr	r3, [r7, #24]
 800a42c:	6959      	ldr	r1, [r3, #20]
 800a42e:	693a      	ldr	r2, [r7, #16]
 800a430:	4613      	mov	r3, r2
 800a432:	009b      	lsls	r3, r3, #2
 800a434:	4413      	add	r3, r2
 800a436:	009b      	lsls	r3, r3, #2
 800a438:	4a19      	ldr	r2, [pc, #100]	; (800a4a0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800a43a:	4413      	add	r3, r2
 800a43c:	4299      	cmp	r1, r3
 800a43e:	d129      	bne.n	800a494 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a440:	69bb      	ldr	r3, [r7, #24]
 800a442:	3304      	adds	r3, #4
 800a444:	4618      	mov	r0, r3
 800a446:	f7fe f90d 	bl	8008664 <uxListRemove>
 800a44a:	4603      	mov	r3, r0
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d10a      	bne.n	800a466 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800a450:	69bb      	ldr	r3, [r7, #24]
 800a452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a454:	2201      	movs	r2, #1
 800a456:	fa02 f303 	lsl.w	r3, r2, r3
 800a45a:	43da      	mvns	r2, r3
 800a45c:	4b11      	ldr	r3, [pc, #68]	; (800a4a4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	4013      	ands	r3, r2
 800a462:	4a10      	ldr	r2, [pc, #64]	; (800a4a4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800a464:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a466:	69bb      	ldr	r3, [r7, #24]
 800a468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a46a:	2201      	movs	r2, #1
 800a46c:	409a      	lsls	r2, r3
 800a46e:	4b0d      	ldr	r3, [pc, #52]	; (800a4a4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	4313      	orrs	r3, r2
 800a474:	4a0b      	ldr	r2, [pc, #44]	; (800a4a4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800a476:	6013      	str	r3, [r2, #0]
 800a478:	69bb      	ldr	r3, [r7, #24]
 800a47a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a47c:	4613      	mov	r3, r2
 800a47e:	009b      	lsls	r3, r3, #2
 800a480:	4413      	add	r3, r2
 800a482:	009b      	lsls	r3, r3, #2
 800a484:	4a06      	ldr	r2, [pc, #24]	; (800a4a0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800a486:	441a      	add	r2, r3
 800a488:	69bb      	ldr	r3, [r7, #24]
 800a48a:	3304      	adds	r3, #4
 800a48c:	4619      	mov	r1, r3
 800a48e:	4610      	mov	r0, r2
 800a490:	f7fe f88d 	bl	80085ae <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a494:	bf00      	nop
 800a496:	3720      	adds	r7, #32
 800a498:	46bd      	mov	sp, r7
 800a49a:	bd80      	pop	{r7, pc}
 800a49c:	2000509c 	.word	0x2000509c
 800a4a0:	200050a0 	.word	0x200050a0
 800a4a4:	200051a4 	.word	0x200051a4

0800a4a8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a4a8:	b480      	push	{r7}
 800a4aa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a4ac:	4b07      	ldr	r3, [pc, #28]	; (800a4cc <pvTaskIncrementMutexHeldCount+0x24>)
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d004      	beq.n	800a4be <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a4b4:	4b05      	ldr	r3, [pc, #20]	; (800a4cc <pvTaskIncrementMutexHeldCount+0x24>)
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a4ba:	3201      	adds	r2, #1
 800a4bc:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800a4be:	4b03      	ldr	r3, [pc, #12]	; (800a4cc <pvTaskIncrementMutexHeldCount+0x24>)
 800a4c0:	681b      	ldr	r3, [r3, #0]
	}
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	bc80      	pop	{r7}
 800a4c8:	4770      	bx	lr
 800a4ca:	bf00      	nop
 800a4cc:	2000509c 	.word	0x2000509c

0800a4d0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b084      	sub	sp, #16
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	6078      	str	r0, [r7, #4]
 800a4d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a4da:	4b29      	ldr	r3, [pc, #164]	; (800a580 <prvAddCurrentTaskToDelayedList+0xb0>)
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a4e0:	4b28      	ldr	r3, [pc, #160]	; (800a584 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	3304      	adds	r3, #4
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	f7fe f8bc 	bl	8008664 <uxListRemove>
 800a4ec:	4603      	mov	r3, r0
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d10b      	bne.n	800a50a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800a4f2:	4b24      	ldr	r3, [pc, #144]	; (800a584 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4f8:	2201      	movs	r2, #1
 800a4fa:	fa02 f303 	lsl.w	r3, r2, r3
 800a4fe:	43da      	mvns	r2, r3
 800a500:	4b21      	ldr	r3, [pc, #132]	; (800a588 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	4013      	ands	r3, r2
 800a506:	4a20      	ldr	r2, [pc, #128]	; (800a588 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a508:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a510:	d10a      	bne.n	800a528 <prvAddCurrentTaskToDelayedList+0x58>
 800a512:	683b      	ldr	r3, [r7, #0]
 800a514:	2b00      	cmp	r3, #0
 800a516:	d007      	beq.n	800a528 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a518:	4b1a      	ldr	r3, [pc, #104]	; (800a584 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	3304      	adds	r3, #4
 800a51e:	4619      	mov	r1, r3
 800a520:	481a      	ldr	r0, [pc, #104]	; (800a58c <prvAddCurrentTaskToDelayedList+0xbc>)
 800a522:	f7fe f844 	bl	80085ae <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a526:	e026      	b.n	800a576 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a528:	68fa      	ldr	r2, [r7, #12]
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	4413      	add	r3, r2
 800a52e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a530:	4b14      	ldr	r3, [pc, #80]	; (800a584 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	68ba      	ldr	r2, [r7, #8]
 800a536:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a538:	68ba      	ldr	r2, [r7, #8]
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	429a      	cmp	r2, r3
 800a53e:	d209      	bcs.n	800a554 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a540:	4b13      	ldr	r3, [pc, #76]	; (800a590 <prvAddCurrentTaskToDelayedList+0xc0>)
 800a542:	681a      	ldr	r2, [r3, #0]
 800a544:	4b0f      	ldr	r3, [pc, #60]	; (800a584 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	3304      	adds	r3, #4
 800a54a:	4619      	mov	r1, r3
 800a54c:	4610      	mov	r0, r2
 800a54e:	f7fe f851 	bl	80085f4 <vListInsert>
}
 800a552:	e010      	b.n	800a576 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a554:	4b0f      	ldr	r3, [pc, #60]	; (800a594 <prvAddCurrentTaskToDelayedList+0xc4>)
 800a556:	681a      	ldr	r2, [r3, #0]
 800a558:	4b0a      	ldr	r3, [pc, #40]	; (800a584 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	3304      	adds	r3, #4
 800a55e:	4619      	mov	r1, r3
 800a560:	4610      	mov	r0, r2
 800a562:	f7fe f847 	bl	80085f4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a566:	4b0c      	ldr	r3, [pc, #48]	; (800a598 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	68ba      	ldr	r2, [r7, #8]
 800a56c:	429a      	cmp	r2, r3
 800a56e:	d202      	bcs.n	800a576 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800a570:	4a09      	ldr	r2, [pc, #36]	; (800a598 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a572:	68bb      	ldr	r3, [r7, #8]
 800a574:	6013      	str	r3, [r2, #0]
}
 800a576:	bf00      	nop
 800a578:	3710      	adds	r7, #16
 800a57a:	46bd      	mov	sp, r7
 800a57c:	bd80      	pop	{r7, pc}
 800a57e:	bf00      	nop
 800a580:	200051a0 	.word	0x200051a0
 800a584:	2000509c 	.word	0x2000509c
 800a588:	200051a4 	.word	0x200051a4
 800a58c:	20005188 	.word	0x20005188
 800a590:	20005158 	.word	0x20005158
 800a594:	20005154 	.word	0x20005154
 800a598:	200051bc 	.word	0x200051bc

0800a59c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a59c:	b480      	push	{r7}
 800a59e:	b085      	sub	sp, #20
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	60f8      	str	r0, [r7, #12]
 800a5a4:	60b9      	str	r1, [r7, #8]
 800a5a6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	3b04      	subs	r3, #4
 800a5ac:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a5b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	3b04      	subs	r3, #4
 800a5ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a5bc:	68bb      	ldr	r3, [r7, #8]
 800a5be:	f023 0201 	bic.w	r2, r3, #1
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	3b04      	subs	r3, #4
 800a5ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a5cc:	4a08      	ldr	r2, [pc, #32]	; (800a5f0 <pxPortInitialiseStack+0x54>)
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	3b14      	subs	r3, #20
 800a5d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a5d8:	687a      	ldr	r2, [r7, #4]
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	3b20      	subs	r3, #32
 800a5e2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a5e4:	68fb      	ldr	r3, [r7, #12]
}
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	3714      	adds	r7, #20
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	bc80      	pop	{r7}
 800a5ee:	4770      	bx	lr
 800a5f0:	0800a5f5 	.word	0x0800a5f5

0800a5f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a5f4:	b480      	push	{r7}
 800a5f6:	b085      	sub	sp, #20
 800a5f8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a5fe:	4b12      	ldr	r3, [pc, #72]	; (800a648 <prvTaskExitError+0x54>)
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a606:	d00a      	beq.n	800a61e <prvTaskExitError+0x2a>
	__asm volatile
 800a608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a60c:	f383 8811 	msr	BASEPRI, r3
 800a610:	f3bf 8f6f 	isb	sy
 800a614:	f3bf 8f4f 	dsb	sy
 800a618:	60fb      	str	r3, [r7, #12]
}
 800a61a:	bf00      	nop
 800a61c:	e7fe      	b.n	800a61c <prvTaskExitError+0x28>
	__asm volatile
 800a61e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a622:	f383 8811 	msr	BASEPRI, r3
 800a626:	f3bf 8f6f 	isb	sy
 800a62a:	f3bf 8f4f 	dsb	sy
 800a62e:	60bb      	str	r3, [r7, #8]
}
 800a630:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a632:	bf00      	nop
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d0fc      	beq.n	800a634 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a63a:	bf00      	nop
 800a63c:	bf00      	nop
 800a63e:	3714      	adds	r7, #20
 800a640:	46bd      	mov	sp, r7
 800a642:	bc80      	pop	{r7}
 800a644:	4770      	bx	lr
 800a646:	bf00      	nop
 800a648:	20000098 	.word	0x20000098
 800a64c:	00000000 	.word	0x00000000

0800a650 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a650:	4b07      	ldr	r3, [pc, #28]	; (800a670 <pxCurrentTCBConst2>)
 800a652:	6819      	ldr	r1, [r3, #0]
 800a654:	6808      	ldr	r0, [r1, #0]
 800a656:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a65a:	f380 8809 	msr	PSP, r0
 800a65e:	f3bf 8f6f 	isb	sy
 800a662:	f04f 0000 	mov.w	r0, #0
 800a666:	f380 8811 	msr	BASEPRI, r0
 800a66a:	f04e 0e0d 	orr.w	lr, lr, #13
 800a66e:	4770      	bx	lr

0800a670 <pxCurrentTCBConst2>:
 800a670:	2000509c 	.word	0x2000509c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a674:	bf00      	nop
 800a676:	bf00      	nop

0800a678 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800a678:	4806      	ldr	r0, [pc, #24]	; (800a694 <prvPortStartFirstTask+0x1c>)
 800a67a:	6800      	ldr	r0, [r0, #0]
 800a67c:	6800      	ldr	r0, [r0, #0]
 800a67e:	f380 8808 	msr	MSP, r0
 800a682:	b662      	cpsie	i
 800a684:	b661      	cpsie	f
 800a686:	f3bf 8f4f 	dsb	sy
 800a68a:	f3bf 8f6f 	isb	sy
 800a68e:	df00      	svc	0
 800a690:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a692:	bf00      	nop
 800a694:	e000ed08 	.word	0xe000ed08

0800a698 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	b084      	sub	sp, #16
 800a69c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a69e:	4b32      	ldr	r3, [pc, #200]	; (800a768 <xPortStartScheduler+0xd0>)
 800a6a0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	781b      	ldrb	r3, [r3, #0]
 800a6a6:	b2db      	uxtb	r3, r3
 800a6a8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	22ff      	movs	r2, #255	; 0xff
 800a6ae:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	781b      	ldrb	r3, [r3, #0]
 800a6b4:	b2db      	uxtb	r3, r3
 800a6b6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a6b8:	78fb      	ldrb	r3, [r7, #3]
 800a6ba:	b2db      	uxtb	r3, r3
 800a6bc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a6c0:	b2da      	uxtb	r2, r3
 800a6c2:	4b2a      	ldr	r3, [pc, #168]	; (800a76c <xPortStartScheduler+0xd4>)
 800a6c4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a6c6:	4b2a      	ldr	r3, [pc, #168]	; (800a770 <xPortStartScheduler+0xd8>)
 800a6c8:	2207      	movs	r2, #7
 800a6ca:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a6cc:	e009      	b.n	800a6e2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800a6ce:	4b28      	ldr	r3, [pc, #160]	; (800a770 <xPortStartScheduler+0xd8>)
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	3b01      	subs	r3, #1
 800a6d4:	4a26      	ldr	r2, [pc, #152]	; (800a770 <xPortStartScheduler+0xd8>)
 800a6d6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a6d8:	78fb      	ldrb	r3, [r7, #3]
 800a6da:	b2db      	uxtb	r3, r3
 800a6dc:	005b      	lsls	r3, r3, #1
 800a6de:	b2db      	uxtb	r3, r3
 800a6e0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a6e2:	78fb      	ldrb	r3, [r7, #3]
 800a6e4:	b2db      	uxtb	r3, r3
 800a6e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6ea:	2b80      	cmp	r3, #128	; 0x80
 800a6ec:	d0ef      	beq.n	800a6ce <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a6ee:	4b20      	ldr	r3, [pc, #128]	; (800a770 <xPortStartScheduler+0xd8>)
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	f1c3 0307 	rsb	r3, r3, #7
 800a6f6:	2b04      	cmp	r3, #4
 800a6f8:	d00a      	beq.n	800a710 <xPortStartScheduler+0x78>
	__asm volatile
 800a6fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6fe:	f383 8811 	msr	BASEPRI, r3
 800a702:	f3bf 8f6f 	isb	sy
 800a706:	f3bf 8f4f 	dsb	sy
 800a70a:	60bb      	str	r3, [r7, #8]
}
 800a70c:	bf00      	nop
 800a70e:	e7fe      	b.n	800a70e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a710:	4b17      	ldr	r3, [pc, #92]	; (800a770 <xPortStartScheduler+0xd8>)
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	021b      	lsls	r3, r3, #8
 800a716:	4a16      	ldr	r2, [pc, #88]	; (800a770 <xPortStartScheduler+0xd8>)
 800a718:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a71a:	4b15      	ldr	r3, [pc, #84]	; (800a770 <xPortStartScheduler+0xd8>)
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a722:	4a13      	ldr	r2, [pc, #76]	; (800a770 <xPortStartScheduler+0xd8>)
 800a724:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	b2da      	uxtb	r2, r3
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a72e:	4b11      	ldr	r3, [pc, #68]	; (800a774 <xPortStartScheduler+0xdc>)
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	4a10      	ldr	r2, [pc, #64]	; (800a774 <xPortStartScheduler+0xdc>)
 800a734:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a738:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a73a:	4b0e      	ldr	r3, [pc, #56]	; (800a774 <xPortStartScheduler+0xdc>)
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	4a0d      	ldr	r2, [pc, #52]	; (800a774 <xPortStartScheduler+0xdc>)
 800a740:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a744:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a746:	f000 f8b9 	bl	800a8bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a74a:	4b0b      	ldr	r3, [pc, #44]	; (800a778 <xPortStartScheduler+0xe0>)
 800a74c:	2200      	movs	r2, #0
 800a74e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a750:	f7ff ff92 	bl	800a678 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a754:	f7ff faba 	bl	8009ccc <vTaskSwitchContext>
	prvTaskExitError();
 800a758:	f7ff ff4c 	bl	800a5f4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a75c:	2300      	movs	r3, #0
}
 800a75e:	4618      	mov	r0, r3
 800a760:	3710      	adds	r7, #16
 800a762:	46bd      	mov	sp, r7
 800a764:	bd80      	pop	{r7, pc}
 800a766:	bf00      	nop
 800a768:	e000e400 	.word	0xe000e400
 800a76c:	200051c8 	.word	0x200051c8
 800a770:	200051cc 	.word	0x200051cc
 800a774:	e000ed20 	.word	0xe000ed20
 800a778:	20000098 	.word	0x20000098

0800a77c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a77c:	b480      	push	{r7}
 800a77e:	b083      	sub	sp, #12
 800a780:	af00      	add	r7, sp, #0
	__asm volatile
 800a782:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a786:	f383 8811 	msr	BASEPRI, r3
 800a78a:	f3bf 8f6f 	isb	sy
 800a78e:	f3bf 8f4f 	dsb	sy
 800a792:	607b      	str	r3, [r7, #4]
}
 800a794:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a796:	4b0f      	ldr	r3, [pc, #60]	; (800a7d4 <vPortEnterCritical+0x58>)
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	3301      	adds	r3, #1
 800a79c:	4a0d      	ldr	r2, [pc, #52]	; (800a7d4 <vPortEnterCritical+0x58>)
 800a79e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a7a0:	4b0c      	ldr	r3, [pc, #48]	; (800a7d4 <vPortEnterCritical+0x58>)
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	2b01      	cmp	r3, #1
 800a7a6:	d10f      	bne.n	800a7c8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a7a8:	4b0b      	ldr	r3, [pc, #44]	; (800a7d8 <vPortEnterCritical+0x5c>)
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	b2db      	uxtb	r3, r3
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d00a      	beq.n	800a7c8 <vPortEnterCritical+0x4c>
	__asm volatile
 800a7b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7b6:	f383 8811 	msr	BASEPRI, r3
 800a7ba:	f3bf 8f6f 	isb	sy
 800a7be:	f3bf 8f4f 	dsb	sy
 800a7c2:	603b      	str	r3, [r7, #0]
}
 800a7c4:	bf00      	nop
 800a7c6:	e7fe      	b.n	800a7c6 <vPortEnterCritical+0x4a>
	}
}
 800a7c8:	bf00      	nop
 800a7ca:	370c      	adds	r7, #12
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	bc80      	pop	{r7}
 800a7d0:	4770      	bx	lr
 800a7d2:	bf00      	nop
 800a7d4:	20000098 	.word	0x20000098
 800a7d8:	e000ed04 	.word	0xe000ed04

0800a7dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a7dc:	b480      	push	{r7}
 800a7de:	b083      	sub	sp, #12
 800a7e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a7e2:	4b11      	ldr	r3, [pc, #68]	; (800a828 <vPortExitCritical+0x4c>)
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d10a      	bne.n	800a800 <vPortExitCritical+0x24>
	__asm volatile
 800a7ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7ee:	f383 8811 	msr	BASEPRI, r3
 800a7f2:	f3bf 8f6f 	isb	sy
 800a7f6:	f3bf 8f4f 	dsb	sy
 800a7fa:	607b      	str	r3, [r7, #4]
}
 800a7fc:	bf00      	nop
 800a7fe:	e7fe      	b.n	800a7fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a800:	4b09      	ldr	r3, [pc, #36]	; (800a828 <vPortExitCritical+0x4c>)
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	3b01      	subs	r3, #1
 800a806:	4a08      	ldr	r2, [pc, #32]	; (800a828 <vPortExitCritical+0x4c>)
 800a808:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a80a:	4b07      	ldr	r3, [pc, #28]	; (800a828 <vPortExitCritical+0x4c>)
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d105      	bne.n	800a81e <vPortExitCritical+0x42>
 800a812:	2300      	movs	r3, #0
 800a814:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a816:	683b      	ldr	r3, [r7, #0]
 800a818:	f383 8811 	msr	BASEPRI, r3
}
 800a81c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a81e:	bf00      	nop
 800a820:	370c      	adds	r7, #12
 800a822:	46bd      	mov	sp, r7
 800a824:	bc80      	pop	{r7}
 800a826:	4770      	bx	lr
 800a828:	20000098 	.word	0x20000098
 800a82c:	00000000 	.word	0x00000000

0800a830 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a830:	f3ef 8009 	mrs	r0, PSP
 800a834:	f3bf 8f6f 	isb	sy
 800a838:	4b0d      	ldr	r3, [pc, #52]	; (800a870 <pxCurrentTCBConst>)
 800a83a:	681a      	ldr	r2, [r3, #0]
 800a83c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a840:	6010      	str	r0, [r2, #0]
 800a842:	e92d 4008 	stmdb	sp!, {r3, lr}
 800a846:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a84a:	f380 8811 	msr	BASEPRI, r0
 800a84e:	f7ff fa3d 	bl	8009ccc <vTaskSwitchContext>
 800a852:	f04f 0000 	mov.w	r0, #0
 800a856:	f380 8811 	msr	BASEPRI, r0
 800a85a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a85e:	6819      	ldr	r1, [r3, #0]
 800a860:	6808      	ldr	r0, [r1, #0]
 800a862:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a866:	f380 8809 	msr	PSP, r0
 800a86a:	f3bf 8f6f 	isb	sy
 800a86e:	4770      	bx	lr

0800a870 <pxCurrentTCBConst>:
 800a870:	2000509c 	.word	0x2000509c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a874:	bf00      	nop
 800a876:	bf00      	nop

0800a878 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b082      	sub	sp, #8
 800a87c:	af00      	add	r7, sp, #0
	__asm volatile
 800a87e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a882:	f383 8811 	msr	BASEPRI, r3
 800a886:	f3bf 8f6f 	isb	sy
 800a88a:	f3bf 8f4f 	dsb	sy
 800a88e:	607b      	str	r3, [r7, #4]
}
 800a890:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a892:	f7ff f963 	bl	8009b5c <xTaskIncrementTick>
 800a896:	4603      	mov	r3, r0
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d003      	beq.n	800a8a4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a89c:	4b06      	ldr	r3, [pc, #24]	; (800a8b8 <SysTick_Handler+0x40>)
 800a89e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8a2:	601a      	str	r2, [r3, #0]
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a8a8:	683b      	ldr	r3, [r7, #0]
 800a8aa:	f383 8811 	msr	BASEPRI, r3
}
 800a8ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a8b0:	bf00      	nop
 800a8b2:	3708      	adds	r7, #8
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	bd80      	pop	{r7, pc}
 800a8b8:	e000ed04 	.word	0xe000ed04

0800a8bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a8bc:	b480      	push	{r7}
 800a8be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a8c0:	4b0a      	ldr	r3, [pc, #40]	; (800a8ec <vPortSetupTimerInterrupt+0x30>)
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a8c6:	4b0a      	ldr	r3, [pc, #40]	; (800a8f0 <vPortSetupTimerInterrupt+0x34>)
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a8cc:	4b09      	ldr	r3, [pc, #36]	; (800a8f4 <vPortSetupTimerInterrupt+0x38>)
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	4a09      	ldr	r2, [pc, #36]	; (800a8f8 <vPortSetupTimerInterrupt+0x3c>)
 800a8d2:	fba2 2303 	umull	r2, r3, r2, r3
 800a8d6:	099b      	lsrs	r3, r3, #6
 800a8d8:	4a08      	ldr	r2, [pc, #32]	; (800a8fc <vPortSetupTimerInterrupt+0x40>)
 800a8da:	3b01      	subs	r3, #1
 800a8dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a8de:	4b03      	ldr	r3, [pc, #12]	; (800a8ec <vPortSetupTimerInterrupt+0x30>)
 800a8e0:	2207      	movs	r2, #7
 800a8e2:	601a      	str	r2, [r3, #0]
}
 800a8e4:	bf00      	nop
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	bc80      	pop	{r7}
 800a8ea:	4770      	bx	lr
 800a8ec:	e000e010 	.word	0xe000e010
 800a8f0:	e000e018 	.word	0xe000e018
 800a8f4:	20000000 	.word	0x20000000
 800a8f8:	10624dd3 	.word	0x10624dd3
 800a8fc:	e000e014 	.word	0xe000e014

0800a900 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a900:	b480      	push	{r7}
 800a902:	b085      	sub	sp, #20
 800a904:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a906:	f3ef 8305 	mrs	r3, IPSR
 800a90a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	2b0f      	cmp	r3, #15
 800a910:	d914      	bls.n	800a93c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a912:	4a16      	ldr	r2, [pc, #88]	; (800a96c <vPortValidateInterruptPriority+0x6c>)
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	4413      	add	r3, r2
 800a918:	781b      	ldrb	r3, [r3, #0]
 800a91a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a91c:	4b14      	ldr	r3, [pc, #80]	; (800a970 <vPortValidateInterruptPriority+0x70>)
 800a91e:	781b      	ldrb	r3, [r3, #0]
 800a920:	7afa      	ldrb	r2, [r7, #11]
 800a922:	429a      	cmp	r2, r3
 800a924:	d20a      	bcs.n	800a93c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a92a:	f383 8811 	msr	BASEPRI, r3
 800a92e:	f3bf 8f6f 	isb	sy
 800a932:	f3bf 8f4f 	dsb	sy
 800a936:	607b      	str	r3, [r7, #4]
}
 800a938:	bf00      	nop
 800a93a:	e7fe      	b.n	800a93a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a93c:	4b0d      	ldr	r3, [pc, #52]	; (800a974 <vPortValidateInterruptPriority+0x74>)
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a944:	4b0c      	ldr	r3, [pc, #48]	; (800a978 <vPortValidateInterruptPriority+0x78>)
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	429a      	cmp	r2, r3
 800a94a:	d90a      	bls.n	800a962 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a94c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a950:	f383 8811 	msr	BASEPRI, r3
 800a954:	f3bf 8f6f 	isb	sy
 800a958:	f3bf 8f4f 	dsb	sy
 800a95c:	603b      	str	r3, [r7, #0]
}
 800a95e:	bf00      	nop
 800a960:	e7fe      	b.n	800a960 <vPortValidateInterruptPriority+0x60>
	}
 800a962:	bf00      	nop
 800a964:	3714      	adds	r7, #20
 800a966:	46bd      	mov	sp, r7
 800a968:	bc80      	pop	{r7}
 800a96a:	4770      	bx	lr
 800a96c:	e000e3f0 	.word	0xe000e3f0
 800a970:	200051c8 	.word	0x200051c8
 800a974:	e000ed0c 	.word	0xe000ed0c
 800a978:	200051cc 	.word	0x200051cc

0800a97c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b08a      	sub	sp, #40	; 0x28
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a984:	2300      	movs	r3, #0
 800a986:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a988:	f7ff f81e 	bl	80099c8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a98c:	4b5b      	ldr	r3, [pc, #364]	; (800aafc <pvPortMalloc+0x180>)
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d101      	bne.n	800a998 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a994:	f000 f920 	bl	800abd8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a998:	4b59      	ldr	r3, [pc, #356]	; (800ab00 <pvPortMalloc+0x184>)
 800a99a:	681a      	ldr	r2, [r3, #0]
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	4013      	ands	r3, r2
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	f040 8093 	bne.w	800aacc <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d01d      	beq.n	800a9e8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a9ac:	2208      	movs	r2, #8
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	4413      	add	r3, r2
 800a9b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	f003 0307 	and.w	r3, r3, #7
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d014      	beq.n	800a9e8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	f023 0307 	bic.w	r3, r3, #7
 800a9c4:	3308      	adds	r3, #8
 800a9c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	f003 0307 	and.w	r3, r3, #7
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d00a      	beq.n	800a9e8 <pvPortMalloc+0x6c>
	__asm volatile
 800a9d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9d6:	f383 8811 	msr	BASEPRI, r3
 800a9da:	f3bf 8f6f 	isb	sy
 800a9de:	f3bf 8f4f 	dsb	sy
 800a9e2:	617b      	str	r3, [r7, #20]
}
 800a9e4:	bf00      	nop
 800a9e6:	e7fe      	b.n	800a9e6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d06e      	beq.n	800aacc <pvPortMalloc+0x150>
 800a9ee:	4b45      	ldr	r3, [pc, #276]	; (800ab04 <pvPortMalloc+0x188>)
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	687a      	ldr	r2, [r7, #4]
 800a9f4:	429a      	cmp	r2, r3
 800a9f6:	d869      	bhi.n	800aacc <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a9f8:	4b43      	ldr	r3, [pc, #268]	; (800ab08 <pvPortMalloc+0x18c>)
 800a9fa:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a9fc:	4b42      	ldr	r3, [pc, #264]	; (800ab08 <pvPortMalloc+0x18c>)
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800aa02:	e004      	b.n	800aa0e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800aa04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa06:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800aa08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800aa0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa10:	685b      	ldr	r3, [r3, #4]
 800aa12:	687a      	ldr	r2, [r7, #4]
 800aa14:	429a      	cmp	r2, r3
 800aa16:	d903      	bls.n	800aa20 <pvPortMalloc+0xa4>
 800aa18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d1f1      	bne.n	800aa04 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800aa20:	4b36      	ldr	r3, [pc, #216]	; (800aafc <pvPortMalloc+0x180>)
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa26:	429a      	cmp	r2, r3
 800aa28:	d050      	beq.n	800aacc <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800aa2a:	6a3b      	ldr	r3, [r7, #32]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	2208      	movs	r2, #8
 800aa30:	4413      	add	r3, r2
 800aa32:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800aa34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa36:	681a      	ldr	r2, [r3, #0]
 800aa38:	6a3b      	ldr	r3, [r7, #32]
 800aa3a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800aa3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa3e:	685a      	ldr	r2, [r3, #4]
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	1ad2      	subs	r2, r2, r3
 800aa44:	2308      	movs	r3, #8
 800aa46:	005b      	lsls	r3, r3, #1
 800aa48:	429a      	cmp	r2, r3
 800aa4a:	d91f      	bls.n	800aa8c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800aa4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	4413      	add	r3, r2
 800aa52:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800aa54:	69bb      	ldr	r3, [r7, #24]
 800aa56:	f003 0307 	and.w	r3, r3, #7
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d00a      	beq.n	800aa74 <pvPortMalloc+0xf8>
	__asm volatile
 800aa5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa62:	f383 8811 	msr	BASEPRI, r3
 800aa66:	f3bf 8f6f 	isb	sy
 800aa6a:	f3bf 8f4f 	dsb	sy
 800aa6e:	613b      	str	r3, [r7, #16]
}
 800aa70:	bf00      	nop
 800aa72:	e7fe      	b.n	800aa72 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800aa74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa76:	685a      	ldr	r2, [r3, #4]
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	1ad2      	subs	r2, r2, r3
 800aa7c:	69bb      	ldr	r3, [r7, #24]
 800aa7e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800aa80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa82:	687a      	ldr	r2, [r7, #4]
 800aa84:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800aa86:	69b8      	ldr	r0, [r7, #24]
 800aa88:	f000 f908 	bl	800ac9c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800aa8c:	4b1d      	ldr	r3, [pc, #116]	; (800ab04 <pvPortMalloc+0x188>)
 800aa8e:	681a      	ldr	r2, [r3, #0]
 800aa90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa92:	685b      	ldr	r3, [r3, #4]
 800aa94:	1ad3      	subs	r3, r2, r3
 800aa96:	4a1b      	ldr	r2, [pc, #108]	; (800ab04 <pvPortMalloc+0x188>)
 800aa98:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800aa9a:	4b1a      	ldr	r3, [pc, #104]	; (800ab04 <pvPortMalloc+0x188>)
 800aa9c:	681a      	ldr	r2, [r3, #0]
 800aa9e:	4b1b      	ldr	r3, [pc, #108]	; (800ab0c <pvPortMalloc+0x190>)
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	429a      	cmp	r2, r3
 800aaa4:	d203      	bcs.n	800aaae <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800aaa6:	4b17      	ldr	r3, [pc, #92]	; (800ab04 <pvPortMalloc+0x188>)
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	4a18      	ldr	r2, [pc, #96]	; (800ab0c <pvPortMalloc+0x190>)
 800aaac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800aaae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aab0:	685a      	ldr	r2, [r3, #4]
 800aab2:	4b13      	ldr	r3, [pc, #76]	; (800ab00 <pvPortMalloc+0x184>)
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	431a      	orrs	r2, r3
 800aab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800aabc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aabe:	2200      	movs	r2, #0
 800aac0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800aac2:	4b13      	ldr	r3, [pc, #76]	; (800ab10 <pvPortMalloc+0x194>)
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	3301      	adds	r3, #1
 800aac8:	4a11      	ldr	r2, [pc, #68]	; (800ab10 <pvPortMalloc+0x194>)
 800aaca:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800aacc:	f7fe ff8a 	bl	80099e4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800aad0:	69fb      	ldr	r3, [r7, #28]
 800aad2:	f003 0307 	and.w	r3, r3, #7
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d00a      	beq.n	800aaf0 <pvPortMalloc+0x174>
	__asm volatile
 800aada:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aade:	f383 8811 	msr	BASEPRI, r3
 800aae2:	f3bf 8f6f 	isb	sy
 800aae6:	f3bf 8f4f 	dsb	sy
 800aaea:	60fb      	str	r3, [r7, #12]
}
 800aaec:	bf00      	nop
 800aaee:	e7fe      	b.n	800aaee <pvPortMalloc+0x172>
	return pvReturn;
 800aaf0:	69fb      	ldr	r3, [r7, #28]
}
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	3728      	adds	r7, #40	; 0x28
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	bd80      	pop	{r7, pc}
 800aafa:	bf00      	nop
 800aafc:	20008dd8 	.word	0x20008dd8
 800ab00:	20008dec 	.word	0x20008dec
 800ab04:	20008ddc 	.word	0x20008ddc
 800ab08:	20008dd0 	.word	0x20008dd0
 800ab0c:	20008de0 	.word	0x20008de0
 800ab10:	20008de4 	.word	0x20008de4

0800ab14 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b086      	sub	sp, #24
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d04d      	beq.n	800abc2 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ab26:	2308      	movs	r3, #8
 800ab28:	425b      	negs	r3, r3
 800ab2a:	697a      	ldr	r2, [r7, #20]
 800ab2c:	4413      	add	r3, r2
 800ab2e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ab30:	697b      	ldr	r3, [r7, #20]
 800ab32:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ab34:	693b      	ldr	r3, [r7, #16]
 800ab36:	685a      	ldr	r2, [r3, #4]
 800ab38:	4b24      	ldr	r3, [pc, #144]	; (800abcc <vPortFree+0xb8>)
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	4013      	ands	r3, r2
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d10a      	bne.n	800ab58 <vPortFree+0x44>
	__asm volatile
 800ab42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab46:	f383 8811 	msr	BASEPRI, r3
 800ab4a:	f3bf 8f6f 	isb	sy
 800ab4e:	f3bf 8f4f 	dsb	sy
 800ab52:	60fb      	str	r3, [r7, #12]
}
 800ab54:	bf00      	nop
 800ab56:	e7fe      	b.n	800ab56 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ab58:	693b      	ldr	r3, [r7, #16]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d00a      	beq.n	800ab76 <vPortFree+0x62>
	__asm volatile
 800ab60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab64:	f383 8811 	msr	BASEPRI, r3
 800ab68:	f3bf 8f6f 	isb	sy
 800ab6c:	f3bf 8f4f 	dsb	sy
 800ab70:	60bb      	str	r3, [r7, #8]
}
 800ab72:	bf00      	nop
 800ab74:	e7fe      	b.n	800ab74 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ab76:	693b      	ldr	r3, [r7, #16]
 800ab78:	685a      	ldr	r2, [r3, #4]
 800ab7a:	4b14      	ldr	r3, [pc, #80]	; (800abcc <vPortFree+0xb8>)
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	4013      	ands	r3, r2
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d01e      	beq.n	800abc2 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ab84:	693b      	ldr	r3, [r7, #16]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d11a      	bne.n	800abc2 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ab8c:	693b      	ldr	r3, [r7, #16]
 800ab8e:	685a      	ldr	r2, [r3, #4]
 800ab90:	4b0e      	ldr	r3, [pc, #56]	; (800abcc <vPortFree+0xb8>)
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	43db      	mvns	r3, r3
 800ab96:	401a      	ands	r2, r3
 800ab98:	693b      	ldr	r3, [r7, #16]
 800ab9a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ab9c:	f7fe ff14 	bl	80099c8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800aba0:	693b      	ldr	r3, [r7, #16]
 800aba2:	685a      	ldr	r2, [r3, #4]
 800aba4:	4b0a      	ldr	r3, [pc, #40]	; (800abd0 <vPortFree+0xbc>)
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	4413      	add	r3, r2
 800abaa:	4a09      	ldr	r2, [pc, #36]	; (800abd0 <vPortFree+0xbc>)
 800abac:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800abae:	6938      	ldr	r0, [r7, #16]
 800abb0:	f000 f874 	bl	800ac9c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800abb4:	4b07      	ldr	r3, [pc, #28]	; (800abd4 <vPortFree+0xc0>)
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	3301      	adds	r3, #1
 800abba:	4a06      	ldr	r2, [pc, #24]	; (800abd4 <vPortFree+0xc0>)
 800abbc:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800abbe:	f7fe ff11 	bl	80099e4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800abc2:	bf00      	nop
 800abc4:	3718      	adds	r7, #24
 800abc6:	46bd      	mov	sp, r7
 800abc8:	bd80      	pop	{r7, pc}
 800abca:	bf00      	nop
 800abcc:	20008dec 	.word	0x20008dec
 800abd0:	20008ddc 	.word	0x20008ddc
 800abd4:	20008de8 	.word	0x20008de8

0800abd8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800abd8:	b480      	push	{r7}
 800abda:	b085      	sub	sp, #20
 800abdc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800abde:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800abe2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800abe4:	4b27      	ldr	r3, [pc, #156]	; (800ac84 <prvHeapInit+0xac>)
 800abe6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	f003 0307 	and.w	r3, r3, #7
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d00c      	beq.n	800ac0c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	3307      	adds	r3, #7
 800abf6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	f023 0307 	bic.w	r3, r3, #7
 800abfe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ac00:	68ba      	ldr	r2, [r7, #8]
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	1ad3      	subs	r3, r2, r3
 800ac06:	4a1f      	ldr	r2, [pc, #124]	; (800ac84 <prvHeapInit+0xac>)
 800ac08:	4413      	add	r3, r2
 800ac0a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ac10:	4a1d      	ldr	r2, [pc, #116]	; (800ac88 <prvHeapInit+0xb0>)
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ac16:	4b1c      	ldr	r3, [pc, #112]	; (800ac88 <prvHeapInit+0xb0>)
 800ac18:	2200      	movs	r2, #0
 800ac1a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	68ba      	ldr	r2, [r7, #8]
 800ac20:	4413      	add	r3, r2
 800ac22:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ac24:	2208      	movs	r2, #8
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	1a9b      	subs	r3, r3, r2
 800ac2a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	f023 0307 	bic.w	r3, r3, #7
 800ac32:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	4a15      	ldr	r2, [pc, #84]	; (800ac8c <prvHeapInit+0xb4>)
 800ac38:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ac3a:	4b14      	ldr	r3, [pc, #80]	; (800ac8c <prvHeapInit+0xb4>)
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	2200      	movs	r2, #0
 800ac40:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ac42:	4b12      	ldr	r3, [pc, #72]	; (800ac8c <prvHeapInit+0xb4>)
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	2200      	movs	r2, #0
 800ac48:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ac4e:	683b      	ldr	r3, [r7, #0]
 800ac50:	68fa      	ldr	r2, [r7, #12]
 800ac52:	1ad2      	subs	r2, r2, r3
 800ac54:	683b      	ldr	r3, [r7, #0]
 800ac56:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ac58:	4b0c      	ldr	r3, [pc, #48]	; (800ac8c <prvHeapInit+0xb4>)
 800ac5a:	681a      	ldr	r2, [r3, #0]
 800ac5c:	683b      	ldr	r3, [r7, #0]
 800ac5e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ac60:	683b      	ldr	r3, [r7, #0]
 800ac62:	685b      	ldr	r3, [r3, #4]
 800ac64:	4a0a      	ldr	r2, [pc, #40]	; (800ac90 <prvHeapInit+0xb8>)
 800ac66:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ac68:	683b      	ldr	r3, [r7, #0]
 800ac6a:	685b      	ldr	r3, [r3, #4]
 800ac6c:	4a09      	ldr	r2, [pc, #36]	; (800ac94 <prvHeapInit+0xbc>)
 800ac6e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ac70:	4b09      	ldr	r3, [pc, #36]	; (800ac98 <prvHeapInit+0xc0>)
 800ac72:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ac76:	601a      	str	r2, [r3, #0]
}
 800ac78:	bf00      	nop
 800ac7a:	3714      	adds	r7, #20
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	bc80      	pop	{r7}
 800ac80:	4770      	bx	lr
 800ac82:	bf00      	nop
 800ac84:	200051d0 	.word	0x200051d0
 800ac88:	20008dd0 	.word	0x20008dd0
 800ac8c:	20008dd8 	.word	0x20008dd8
 800ac90:	20008de0 	.word	0x20008de0
 800ac94:	20008ddc 	.word	0x20008ddc
 800ac98:	20008dec 	.word	0x20008dec

0800ac9c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ac9c:	b480      	push	{r7}
 800ac9e:	b085      	sub	sp, #20
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800aca4:	4b27      	ldr	r3, [pc, #156]	; (800ad44 <prvInsertBlockIntoFreeList+0xa8>)
 800aca6:	60fb      	str	r3, [r7, #12]
 800aca8:	e002      	b.n	800acb0 <prvInsertBlockIntoFreeList+0x14>
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	60fb      	str	r3, [r7, #12]
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	687a      	ldr	r2, [r7, #4]
 800acb6:	429a      	cmp	r2, r3
 800acb8:	d8f7      	bhi.n	800acaa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	685b      	ldr	r3, [r3, #4]
 800acc2:	68ba      	ldr	r2, [r7, #8]
 800acc4:	4413      	add	r3, r2
 800acc6:	687a      	ldr	r2, [r7, #4]
 800acc8:	429a      	cmp	r2, r3
 800acca:	d108      	bne.n	800acde <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	685a      	ldr	r2, [r3, #4]
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	685b      	ldr	r3, [r3, #4]
 800acd4:	441a      	add	r2, r3
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	685b      	ldr	r3, [r3, #4]
 800ace6:	68ba      	ldr	r2, [r7, #8]
 800ace8:	441a      	add	r2, r3
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	429a      	cmp	r2, r3
 800acf0:	d118      	bne.n	800ad24 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	681a      	ldr	r2, [r3, #0]
 800acf6:	4b14      	ldr	r3, [pc, #80]	; (800ad48 <prvInsertBlockIntoFreeList+0xac>)
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	429a      	cmp	r2, r3
 800acfc:	d00d      	beq.n	800ad1a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	685a      	ldr	r2, [r3, #4]
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	685b      	ldr	r3, [r3, #4]
 800ad08:	441a      	add	r2, r3
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	681a      	ldr	r2, [r3, #0]
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	601a      	str	r2, [r3, #0]
 800ad18:	e008      	b.n	800ad2c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ad1a:	4b0b      	ldr	r3, [pc, #44]	; (800ad48 <prvInsertBlockIntoFreeList+0xac>)
 800ad1c:	681a      	ldr	r2, [r3, #0]
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	601a      	str	r2, [r3, #0]
 800ad22:	e003      	b.n	800ad2c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	681a      	ldr	r2, [r3, #0]
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ad2c:	68fa      	ldr	r2, [r7, #12]
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	429a      	cmp	r2, r3
 800ad32:	d002      	beq.n	800ad3a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	687a      	ldr	r2, [r7, #4]
 800ad38:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ad3a:	bf00      	nop
 800ad3c:	3714      	adds	r7, #20
 800ad3e:	46bd      	mov	sp, r7
 800ad40:	bc80      	pop	{r7}
 800ad42:	4770      	bx	lr
 800ad44:	20008dd0 	.word	0x20008dd0
 800ad48:	20008dd8 	.word	0x20008dd8

0800ad4c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b084      	sub	sp, #16
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
 800ad54:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800ad56:	f009 fd83 	bl	8014860 <sys_timeouts_sleeptime>
 800ad5a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad62:	d10b      	bne.n	800ad7c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800ad64:	4813      	ldr	r0, [pc, #76]	; (800adb4 <tcpip_timeouts_mbox_fetch+0x68>)
 800ad66:	f00e fc92 	bl	801968e <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	6839      	ldr	r1, [r7, #0]
 800ad6e:	6878      	ldr	r0, [r7, #4]
 800ad70:	f00e fc04 	bl	801957c <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800ad74:	480f      	ldr	r0, [pc, #60]	; (800adb4 <tcpip_timeouts_mbox_fetch+0x68>)
 800ad76:	f00e fc7b 	bl	8019670 <sys_mutex_lock>
    return;
 800ad7a:	e018      	b.n	800adae <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d102      	bne.n	800ad88 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800ad82:	f009 fd33 	bl	80147ec <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800ad86:	e7e6      	b.n	800ad56 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800ad88:	480a      	ldr	r0, [pc, #40]	; (800adb4 <tcpip_timeouts_mbox_fetch+0x68>)
 800ad8a:	f00e fc80 	bl	801968e <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800ad8e:	68fa      	ldr	r2, [r7, #12]
 800ad90:	6839      	ldr	r1, [r7, #0]
 800ad92:	6878      	ldr	r0, [r7, #4]
 800ad94:	f00e fbf2 	bl	801957c <sys_arch_mbox_fetch>
 800ad98:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800ad9a:	4806      	ldr	r0, [pc, #24]	; (800adb4 <tcpip_timeouts_mbox_fetch+0x68>)
 800ad9c:	f00e fc68 	bl	8019670 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800ada0:	68bb      	ldr	r3, [r7, #8]
 800ada2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ada6:	d102      	bne.n	800adae <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800ada8:	f009 fd20 	bl	80147ec <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800adac:	e7d3      	b.n	800ad56 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800adae:	3710      	adds	r7, #16
 800adb0:	46bd      	mov	sp, r7
 800adb2:	bd80      	pop	{r7, pc}
 800adb4:	20008dfc 	.word	0x20008dfc

0800adb8 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800adb8:	b580      	push	{r7, lr}
 800adba:	b084      	sub	sp, #16
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800adc0:	4810      	ldr	r0, [pc, #64]	; (800ae04 <tcpip_thread+0x4c>)
 800adc2:	f00e fc55 	bl	8019670 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800adc6:	4b10      	ldr	r3, [pc, #64]	; (800ae08 <tcpip_thread+0x50>)
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d005      	beq.n	800adda <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800adce:	4b0e      	ldr	r3, [pc, #56]	; (800ae08 <tcpip_thread+0x50>)
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	4a0e      	ldr	r2, [pc, #56]	; (800ae0c <tcpip_thread+0x54>)
 800add4:	6812      	ldr	r2, [r2, #0]
 800add6:	4610      	mov	r0, r2
 800add8:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800adda:	f107 030c 	add.w	r3, r7, #12
 800adde:	4619      	mov	r1, r3
 800ade0:	480b      	ldr	r0, [pc, #44]	; (800ae10 <tcpip_thread+0x58>)
 800ade2:	f7ff ffb3 	bl	800ad4c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d106      	bne.n	800adfa <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800adec:	4b09      	ldr	r3, [pc, #36]	; (800ae14 <tcpip_thread+0x5c>)
 800adee:	2291      	movs	r2, #145	; 0x91
 800adf0:	4909      	ldr	r1, [pc, #36]	; (800ae18 <tcpip_thread+0x60>)
 800adf2:	480a      	ldr	r0, [pc, #40]	; (800ae1c <tcpip_thread+0x64>)
 800adf4:	f00f fcd6 	bl	801a7a4 <iprintf>
      continue;
 800adf8:	e003      	b.n	800ae02 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	4618      	mov	r0, r3
 800adfe:	f000 f80f 	bl	800ae20 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800ae02:	e7ea      	b.n	800adda <tcpip_thread+0x22>
 800ae04:	20008dfc 	.word	0x20008dfc
 800ae08:	20008df0 	.word	0x20008df0
 800ae0c:	20008df4 	.word	0x20008df4
 800ae10:	20008df8 	.word	0x20008df8
 800ae14:	0801b40c 	.word	0x0801b40c
 800ae18:	0801b43c 	.word	0x0801b43c
 800ae1c:	0801b45c 	.word	0x0801b45c

0800ae20 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800ae20:	b580      	push	{r7, lr}
 800ae22:	b082      	sub	sp, #8
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	781b      	ldrb	r3, [r3, #0]
 800ae2c:	2b02      	cmp	r3, #2
 800ae2e:	d026      	beq.n	800ae7e <tcpip_thread_handle_msg+0x5e>
 800ae30:	2b02      	cmp	r3, #2
 800ae32:	dc2b      	bgt.n	800ae8c <tcpip_thread_handle_msg+0x6c>
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d002      	beq.n	800ae3e <tcpip_thread_handle_msg+0x1e>
 800ae38:	2b01      	cmp	r3, #1
 800ae3a:	d015      	beq.n	800ae68 <tcpip_thread_handle_msg+0x48>
 800ae3c:	e026      	b.n	800ae8c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	68db      	ldr	r3, [r3, #12]
 800ae42:	687a      	ldr	r2, [r7, #4]
 800ae44:	6850      	ldr	r0, [r2, #4]
 800ae46:	687a      	ldr	r2, [r7, #4]
 800ae48:	6892      	ldr	r2, [r2, #8]
 800ae4a:	4611      	mov	r1, r2
 800ae4c:	4798      	blx	r3
 800ae4e:	4603      	mov	r3, r0
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d004      	beq.n	800ae5e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	685b      	ldr	r3, [r3, #4]
 800ae58:	4618      	mov	r0, r3
 800ae5a:	f003 f81d 	bl	800de98 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800ae5e:	6879      	ldr	r1, [r7, #4]
 800ae60:	2009      	movs	r0, #9
 800ae62:	f002 f9db 	bl	800d21c <memp_free>
      break;
 800ae66:	e018      	b.n	800ae9a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	685b      	ldr	r3, [r3, #4]
 800ae6c:	687a      	ldr	r2, [r7, #4]
 800ae6e:	6892      	ldr	r2, [r2, #8]
 800ae70:	4610      	mov	r0, r2
 800ae72:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800ae74:	6879      	ldr	r1, [r7, #4]
 800ae76:	2008      	movs	r0, #8
 800ae78:	f002 f9d0 	bl	800d21c <memp_free>
      break;
 800ae7c:	e00d      	b.n	800ae9a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	685b      	ldr	r3, [r3, #4]
 800ae82:	687a      	ldr	r2, [r7, #4]
 800ae84:	6892      	ldr	r2, [r2, #8]
 800ae86:	4610      	mov	r0, r2
 800ae88:	4798      	blx	r3
      break;
 800ae8a:	e006      	b.n	800ae9a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800ae8c:	4b05      	ldr	r3, [pc, #20]	; (800aea4 <tcpip_thread_handle_msg+0x84>)
 800ae8e:	22cf      	movs	r2, #207	; 0xcf
 800ae90:	4905      	ldr	r1, [pc, #20]	; (800aea8 <tcpip_thread_handle_msg+0x88>)
 800ae92:	4806      	ldr	r0, [pc, #24]	; (800aeac <tcpip_thread_handle_msg+0x8c>)
 800ae94:	f00f fc86 	bl	801a7a4 <iprintf>
      break;
 800ae98:	bf00      	nop
  }
}
 800ae9a:	bf00      	nop
 800ae9c:	3708      	adds	r7, #8
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	bd80      	pop	{r7, pc}
 800aea2:	bf00      	nop
 800aea4:	0801b40c 	.word	0x0801b40c
 800aea8:	0801b43c 	.word	0x0801b43c
 800aeac:	0801b45c 	.word	0x0801b45c

0800aeb0 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b086      	sub	sp, #24
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	60f8      	str	r0, [r7, #12]
 800aeb8:	60b9      	str	r1, [r7, #8]
 800aeba:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800aebc:	481a      	ldr	r0, [pc, #104]	; (800af28 <tcpip_inpkt+0x78>)
 800aebe:	f00e fb9c 	bl	80195fa <sys_mbox_valid>
 800aec2:	4603      	mov	r3, r0
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d105      	bne.n	800aed4 <tcpip_inpkt+0x24>
 800aec8:	4b18      	ldr	r3, [pc, #96]	; (800af2c <tcpip_inpkt+0x7c>)
 800aeca:	22fc      	movs	r2, #252	; 0xfc
 800aecc:	4918      	ldr	r1, [pc, #96]	; (800af30 <tcpip_inpkt+0x80>)
 800aece:	4819      	ldr	r0, [pc, #100]	; (800af34 <tcpip_inpkt+0x84>)
 800aed0:	f00f fc68 	bl	801a7a4 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800aed4:	2009      	movs	r0, #9
 800aed6:	f002 f92b 	bl	800d130 <memp_malloc>
 800aeda:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800aedc:	697b      	ldr	r3, [r7, #20]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d102      	bne.n	800aee8 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800aee2:	f04f 33ff 	mov.w	r3, #4294967295
 800aee6:	e01a      	b.n	800af1e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800aee8:	697b      	ldr	r3, [r7, #20]
 800aeea:	2200      	movs	r2, #0
 800aeec:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800aeee:	697b      	ldr	r3, [r7, #20]
 800aef0:	68fa      	ldr	r2, [r7, #12]
 800aef2:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800aef4:	697b      	ldr	r3, [r7, #20]
 800aef6:	68ba      	ldr	r2, [r7, #8]
 800aef8:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800aefa:	697b      	ldr	r3, [r7, #20]
 800aefc:	687a      	ldr	r2, [r7, #4]
 800aefe:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800af00:	6979      	ldr	r1, [r7, #20]
 800af02:	4809      	ldr	r0, [pc, #36]	; (800af28 <tcpip_inpkt+0x78>)
 800af04:	f00e fb20 	bl	8019548 <sys_mbox_trypost>
 800af08:	4603      	mov	r3, r0
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d006      	beq.n	800af1c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800af0e:	6979      	ldr	r1, [r7, #20]
 800af10:	2009      	movs	r0, #9
 800af12:	f002 f983 	bl	800d21c <memp_free>
    return ERR_MEM;
 800af16:	f04f 33ff 	mov.w	r3, #4294967295
 800af1a:	e000      	b.n	800af1e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800af1c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800af1e:	4618      	mov	r0, r3
 800af20:	3718      	adds	r7, #24
 800af22:	46bd      	mov	sp, r7
 800af24:	bd80      	pop	{r7, pc}
 800af26:	bf00      	nop
 800af28:	20008df8 	.word	0x20008df8
 800af2c:	0801b40c 	.word	0x0801b40c
 800af30:	0801b484 	.word	0x0801b484
 800af34:	0801b45c 	.word	0x0801b45c

0800af38 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800af38:	b580      	push	{r7, lr}
 800af3a:	b082      	sub	sp, #8
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	6078      	str	r0, [r7, #4]
 800af40:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800af42:	683b      	ldr	r3, [r7, #0]
 800af44:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800af48:	f003 0318 	and.w	r3, r3, #24
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d006      	beq.n	800af5e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800af50:	4a08      	ldr	r2, [pc, #32]	; (800af74 <tcpip_input+0x3c>)
 800af52:	6839      	ldr	r1, [r7, #0]
 800af54:	6878      	ldr	r0, [r7, #4]
 800af56:	f7ff ffab 	bl	800aeb0 <tcpip_inpkt>
 800af5a:	4603      	mov	r3, r0
 800af5c:	e005      	b.n	800af6a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800af5e:	4a06      	ldr	r2, [pc, #24]	; (800af78 <tcpip_input+0x40>)
 800af60:	6839      	ldr	r1, [r7, #0]
 800af62:	6878      	ldr	r0, [r7, #4]
 800af64:	f7ff ffa4 	bl	800aeb0 <tcpip_inpkt>
 800af68:	4603      	mov	r3, r0
}
 800af6a:	4618      	mov	r0, r3
 800af6c:	3708      	adds	r7, #8
 800af6e:	46bd      	mov	sp, r7
 800af70:	bd80      	pop	{r7, pc}
 800af72:	bf00      	nop
 800af74:	08019359 	.word	0x08019359
 800af78:	08018229 	.word	0x08018229

0800af7c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b084      	sub	sp, #16
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
 800af84:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800af86:	4819      	ldr	r0, [pc, #100]	; (800afec <tcpip_try_callback+0x70>)
 800af88:	f00e fb37 	bl	80195fa <sys_mbox_valid>
 800af8c:	4603      	mov	r3, r0
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d106      	bne.n	800afa0 <tcpip_try_callback+0x24>
 800af92:	4b17      	ldr	r3, [pc, #92]	; (800aff0 <tcpip_try_callback+0x74>)
 800af94:	f240 125d 	movw	r2, #349	; 0x15d
 800af98:	4916      	ldr	r1, [pc, #88]	; (800aff4 <tcpip_try_callback+0x78>)
 800af9a:	4817      	ldr	r0, [pc, #92]	; (800aff8 <tcpip_try_callback+0x7c>)
 800af9c:	f00f fc02 	bl	801a7a4 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800afa0:	2008      	movs	r0, #8
 800afa2:	f002 f8c5 	bl	800d130 <memp_malloc>
 800afa6:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d102      	bne.n	800afb4 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800afae:	f04f 33ff 	mov.w	r3, #4294967295
 800afb2:	e017      	b.n	800afe4 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	2201      	movs	r2, #1
 800afb8:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	687a      	ldr	r2, [r7, #4]
 800afbe:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	683a      	ldr	r2, [r7, #0]
 800afc4:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800afc6:	68f9      	ldr	r1, [r7, #12]
 800afc8:	4808      	ldr	r0, [pc, #32]	; (800afec <tcpip_try_callback+0x70>)
 800afca:	f00e fabd 	bl	8019548 <sys_mbox_trypost>
 800afce:	4603      	mov	r3, r0
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d006      	beq.n	800afe2 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800afd4:	68f9      	ldr	r1, [r7, #12]
 800afd6:	2008      	movs	r0, #8
 800afd8:	f002 f920 	bl	800d21c <memp_free>
    return ERR_MEM;
 800afdc:	f04f 33ff 	mov.w	r3, #4294967295
 800afe0:	e000      	b.n	800afe4 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800afe2:	2300      	movs	r3, #0
}
 800afe4:	4618      	mov	r0, r3
 800afe6:	3710      	adds	r7, #16
 800afe8:	46bd      	mov	sp, r7
 800afea:	bd80      	pop	{r7, pc}
 800afec:	20008df8 	.word	0x20008df8
 800aff0:	0801b40c 	.word	0x0801b40c
 800aff4:	0801b484 	.word	0x0801b484
 800aff8:	0801b45c 	.word	0x0801b45c

0800affc <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800affc:	b580      	push	{r7, lr}
 800affe:	b084      	sub	sp, #16
 800b000:	af02      	add	r7, sp, #8
 800b002:	6078      	str	r0, [r7, #4]
 800b004:	6039      	str	r1, [r7, #0]
  lwip_init();
 800b006:	f001 fbca 	bl	800c79e <lwip_init>

  tcpip_init_done = initfunc;
 800b00a:	4a17      	ldr	r2, [pc, #92]	; (800b068 <tcpip_init+0x6c>)
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800b010:	4a16      	ldr	r2, [pc, #88]	; (800b06c <tcpip_init+0x70>)
 800b012:	683b      	ldr	r3, [r7, #0]
 800b014:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800b016:	2106      	movs	r1, #6
 800b018:	4815      	ldr	r0, [pc, #84]	; (800b070 <tcpip_init+0x74>)
 800b01a:	f00e fa73 	bl	8019504 <sys_mbox_new>
 800b01e:	4603      	mov	r3, r0
 800b020:	2b00      	cmp	r3, #0
 800b022:	d006      	beq.n	800b032 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800b024:	4b13      	ldr	r3, [pc, #76]	; (800b074 <tcpip_init+0x78>)
 800b026:	f240 2261 	movw	r2, #609	; 0x261
 800b02a:	4913      	ldr	r1, [pc, #76]	; (800b078 <tcpip_init+0x7c>)
 800b02c:	4813      	ldr	r0, [pc, #76]	; (800b07c <tcpip_init+0x80>)
 800b02e:	f00f fbb9 	bl	801a7a4 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800b032:	4813      	ldr	r0, [pc, #76]	; (800b080 <tcpip_init+0x84>)
 800b034:	f00e fb00 	bl	8019638 <sys_mutex_new>
 800b038:	4603      	mov	r3, r0
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d006      	beq.n	800b04c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800b03e:	4b0d      	ldr	r3, [pc, #52]	; (800b074 <tcpip_init+0x78>)
 800b040:	f240 2265 	movw	r2, #613	; 0x265
 800b044:	490f      	ldr	r1, [pc, #60]	; (800b084 <tcpip_init+0x88>)
 800b046:	480d      	ldr	r0, [pc, #52]	; (800b07c <tcpip_init+0x80>)
 800b048:	f00f fbac 	bl	801a7a4 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800b04c:	2300      	movs	r3, #0
 800b04e:	9300      	str	r3, [sp, #0]
 800b050:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b054:	2200      	movs	r2, #0
 800b056:	490c      	ldr	r1, [pc, #48]	; (800b088 <tcpip_init+0x8c>)
 800b058:	480c      	ldr	r0, [pc, #48]	; (800b08c <tcpip_init+0x90>)
 800b05a:	f00e fb25 	bl	80196a8 <sys_thread_new>
}
 800b05e:	bf00      	nop
 800b060:	3708      	adds	r7, #8
 800b062:	46bd      	mov	sp, r7
 800b064:	bd80      	pop	{r7, pc}
 800b066:	bf00      	nop
 800b068:	20008df0 	.word	0x20008df0
 800b06c:	20008df4 	.word	0x20008df4
 800b070:	20008df8 	.word	0x20008df8
 800b074:	0801b40c 	.word	0x0801b40c
 800b078:	0801b494 	.word	0x0801b494
 800b07c:	0801b45c 	.word	0x0801b45c
 800b080:	20008dfc 	.word	0x20008dfc
 800b084:	0801b4b8 	.word	0x0801b4b8
 800b088:	0800adb9 	.word	0x0800adb9
 800b08c:	0801b4dc 	.word	0x0801b4dc

0800b090 <mqtt_ringbuf_put>:
/* Output ring buffer */

/** Add single item to ring buffer */
static void
mqtt_ringbuf_put(struct mqtt_ringbuf_t *rb, u8_t item)
{
 800b090:	b480      	push	{r7}
 800b092:	b083      	sub	sp, #12
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
 800b098:	460b      	mov	r3, r1
 800b09a:	70fb      	strb	r3, [r7, #3]
  rb->buf[rb->put] = item;
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	881b      	ldrh	r3, [r3, #0]
 800b0a0:	461a      	mov	r2, r3
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	4413      	add	r3, r2
 800b0a6:	78fa      	ldrb	r2, [r7, #3]
 800b0a8:	711a      	strb	r2, [r3, #4]
  rb->put++;
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	881b      	ldrh	r3, [r3, #0]
 800b0ae:	3301      	adds	r3, #1
 800b0b0:	b29a      	uxth	r2, r3
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	801a      	strh	r2, [r3, #0]
  if (rb->put >= MQTT_OUTPUT_RINGBUF_SIZE) {
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	881b      	ldrh	r3, [r3, #0]
 800b0ba:	2bff      	cmp	r3, #255	; 0xff
 800b0bc:	d902      	bls.n	800b0c4 <mqtt_ringbuf_put+0x34>
    rb->put = 0;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	2200      	movs	r2, #0
 800b0c2:	801a      	strh	r2, [r3, #0]
  }
}
 800b0c4:	bf00      	nop
 800b0c6:	370c      	adds	r7, #12
 800b0c8:	46bd      	mov	sp, r7
 800b0ca:	bc80      	pop	{r7}
 800b0cc:	4770      	bx	lr

0800b0ce <mqtt_ringbuf_get_ptr>:

/** Return pointer to ring buffer get position */
static u8_t *
mqtt_ringbuf_get_ptr(struct mqtt_ringbuf_t *rb)
{
 800b0ce:	b480      	push	{r7}
 800b0d0:	b083      	sub	sp, #12
 800b0d2:	af00      	add	r7, sp, #0
 800b0d4:	6078      	str	r0, [r7, #4]
  return &rb->buf[rb->get];
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	885b      	ldrh	r3, [r3, #2]
 800b0da:	461a      	mov	r2, r3
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	4413      	add	r3, r2
 800b0e0:	3304      	adds	r3, #4
}
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	370c      	adds	r7, #12
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	bc80      	pop	{r7}
 800b0ea:	4770      	bx	lr

0800b0ec <mqtt_ringbuf_advance_get_idx>:

static void
mqtt_ringbuf_advance_get_idx(struct mqtt_ringbuf_t *rb, u16_t len)
{
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b082      	sub	sp, #8
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	6078      	str	r0, [r7, #4]
 800b0f4:	460b      	mov	r3, r1
 800b0f6:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("mqtt_ringbuf_advance_get_idx: len < MQTT_OUTPUT_RINGBUF_SIZE", len < MQTT_OUTPUT_RINGBUF_SIZE);
 800b0f8:	887b      	ldrh	r3, [r7, #2]
 800b0fa:	2bff      	cmp	r3, #255	; 0xff
 800b0fc:	d905      	bls.n	800b10a <mqtt_ringbuf_advance_get_idx+0x1e>
 800b0fe:	4b0e      	ldr	r3, [pc, #56]	; (800b138 <mqtt_ringbuf_advance_get_idx+0x4c>)
 800b100:	22cb      	movs	r2, #203	; 0xcb
 800b102:	490e      	ldr	r1, [pc, #56]	; (800b13c <mqtt_ringbuf_advance_get_idx+0x50>)
 800b104:	480e      	ldr	r0, [pc, #56]	; (800b140 <mqtt_ringbuf_advance_get_idx+0x54>)
 800b106:	f00f fb4d 	bl	801a7a4 <iprintf>

  rb->get += len;
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	885a      	ldrh	r2, [r3, #2]
 800b10e:	887b      	ldrh	r3, [r7, #2]
 800b110:	4413      	add	r3, r2
 800b112:	b29a      	uxth	r2, r3
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	805a      	strh	r2, [r3, #2]
  if (rb->get >= MQTT_OUTPUT_RINGBUF_SIZE) {
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	885b      	ldrh	r3, [r3, #2]
 800b11c:	2bff      	cmp	r3, #255	; 0xff
 800b11e:	d906      	bls.n	800b12e <mqtt_ringbuf_advance_get_idx+0x42>
    rb->get = rb->get - MQTT_OUTPUT_RINGBUF_SIZE;
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	885b      	ldrh	r3, [r3, #2]
 800b124:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800b128:	b29a      	uxth	r2, r3
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	805a      	strh	r2, [r3, #2]
  }
}
 800b12e:	bf00      	nop
 800b130:	3708      	adds	r7, #8
 800b132:	46bd      	mov	sp, r7
 800b134:	bd80      	pop	{r7, pc}
 800b136:	bf00      	nop
 800b138:	0801b4ec 	.word	0x0801b4ec
 800b13c:	0801b524 	.word	0x0801b524
 800b140:	0801b564 	.word	0x0801b564

0800b144 <mqtt_ringbuf_len>:

/** Return number of bytes in ring buffer */
static u16_t
mqtt_ringbuf_len(struct mqtt_ringbuf_t *rb)
{
 800b144:	b480      	push	{r7}
 800b146:	b085      	sub	sp, #20
 800b148:	af00      	add	r7, sp, #0
 800b14a:	6078      	str	r0, [r7, #4]
  u32_t len = rb->put - rb->get;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	881b      	ldrh	r3, [r3, #0]
 800b150:	461a      	mov	r2, r3
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	885b      	ldrh	r3, [r3, #2]
 800b156:	1ad3      	subs	r3, r2, r3
 800b158:	60fb      	str	r3, [r7, #12]
  if (len > 0xFFFF) {
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b160:	d303      	bcc.n	800b16a <mqtt_ringbuf_len+0x26>
    len += MQTT_OUTPUT_RINGBUF_SIZE;
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800b168:	60fb      	str	r3, [r7, #12]
  }
  return (u16_t)len;
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	b29b      	uxth	r3, r3
}
 800b16e:	4618      	mov	r0, r3
 800b170:	3714      	adds	r7, #20
 800b172:	46bd      	mov	sp, r7
 800b174:	bc80      	pop	{r7}
 800b176:	4770      	bx	lr

0800b178 <mqtt_output_send>:
 * @param rb Output ring buffer
 * @param tpcb TCP connection handle
 */
static void
mqtt_output_send(struct mqtt_ringbuf_t *rb, struct altcp_pcb *tpcb)
{
 800b178:	b590      	push	{r4, r7, lr}
 800b17a:	b085      	sub	sp, #20
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	6078      	str	r0, [r7, #4]
 800b180:	6039      	str	r1, [r7, #0]
  err_t err;
  u8_t wrap = 0;
 800b182:	2300      	movs	r3, #0
 800b184:	73bb      	strb	r3, [r7, #14]
  u16_t ringbuf_lin_len = mqtt_ringbuf_linear_read_length(rb);
 800b186:	6878      	ldr	r0, [r7, #4]
 800b188:	f7ff ffdc 	bl	800b144 <mqtt_ringbuf_len>
 800b18c:	4603      	mov	r3, r0
 800b18e:	461a      	mov	r2, r3
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	885b      	ldrh	r3, [r3, #2]
 800b194:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800b198:	429a      	cmp	r2, r3
 800b19a:	da04      	bge.n	800b1a6 <mqtt_output_send+0x2e>
 800b19c:	6878      	ldr	r0, [r7, #4]
 800b19e:	f7ff ffd1 	bl	800b144 <mqtt_ringbuf_len>
 800b1a2:	4603      	mov	r3, r0
 800b1a4:	e004      	b.n	800b1b0 <mqtt_output_send+0x38>
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	885b      	ldrh	r3, [r3, #2]
 800b1aa:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800b1ae:	b29b      	uxth	r3, r3
 800b1b0:	817b      	strh	r3, [r7, #10]
  u16_t send_len = altcp_sndbuf(tpcb);
 800b1b2:	683b      	ldr	r3, [r7, #0]
 800b1b4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b1b8:	81bb      	strh	r3, [r7, #12]
  LWIP_ASSERT("mqtt_output_send: tpcb != NULL", tpcb != NULL);
 800b1ba:	683b      	ldr	r3, [r7, #0]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d105      	bne.n	800b1cc <mqtt_output_send+0x54>
 800b1c0:	4b44      	ldr	r3, [pc, #272]	; (800b2d4 <mqtt_output_send+0x15c>)
 800b1c2:	22f0      	movs	r2, #240	; 0xf0
 800b1c4:	4944      	ldr	r1, [pc, #272]	; (800b2d8 <mqtt_output_send+0x160>)
 800b1c6:	4845      	ldr	r0, [pc, #276]	; (800b2dc <mqtt_output_send+0x164>)
 800b1c8:	f00f faec 	bl	801a7a4 <iprintf>

  if (send_len == 0 || ringbuf_lin_len == 0) {
 800b1cc:	89bb      	ldrh	r3, [r7, #12]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d07c      	beq.n	800b2cc <mqtt_output_send+0x154>
 800b1d2:	897b      	ldrh	r3, [r7, #10]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d079      	beq.n	800b2cc <mqtt_output_send+0x154>
  }

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_output_send: tcp_sndbuf: %d bytes, ringbuf_linear_available: %d, get %d, put %d\n",
                                 send_len, ringbuf_lin_len, rb->get, rb->put));

  if (send_len > ringbuf_lin_len) {
 800b1d8:	89ba      	ldrh	r2, [r7, #12]
 800b1da:	897b      	ldrh	r3, [r7, #10]
 800b1dc:	429a      	cmp	r2, r3
 800b1de:	d90d      	bls.n	800b1fc <mqtt_output_send+0x84>
    /* Space in TCP output buffer is larger than available in ring buffer linear portion */
    send_len = ringbuf_lin_len;
 800b1e0:	897b      	ldrh	r3, [r7, #10]
 800b1e2:	81bb      	strh	r3, [r7, #12]
    /* Wrap around if more data in ring buffer after linear portion */
    wrap = (mqtt_ringbuf_len(rb) > ringbuf_lin_len);
 800b1e4:	6878      	ldr	r0, [r7, #4]
 800b1e6:	f7ff ffad 	bl	800b144 <mqtt_ringbuf_len>
 800b1ea:	4603      	mov	r3, r0
 800b1ec:	461a      	mov	r2, r3
 800b1ee:	897b      	ldrh	r3, [r7, #10]
 800b1f0:	4293      	cmp	r3, r2
 800b1f2:	bf34      	ite	cc
 800b1f4:	2301      	movcc	r3, #1
 800b1f6:	2300      	movcs	r3, #0
 800b1f8:	b2db      	uxtb	r3, r3
 800b1fa:	73bb      	strb	r3, [r7, #14]
  }
  err = altcp_write(tpcb, mqtt_ringbuf_get_ptr(rb), send_len, TCP_WRITE_FLAG_COPY | (wrap ? TCP_WRITE_FLAG_MORE : 0));
 800b1fc:	6878      	ldr	r0, [r7, #4]
 800b1fe:	f7ff ff66 	bl	800b0ce <mqtt_ringbuf_get_ptr>
 800b202:	4601      	mov	r1, r0
 800b204:	7bbb      	ldrb	r3, [r7, #14]
 800b206:	2b00      	cmp	r3, #0
 800b208:	d001      	beq.n	800b20e <mqtt_output_send+0x96>
 800b20a:	2303      	movs	r3, #3
 800b20c:	e000      	b.n	800b210 <mqtt_output_send+0x98>
 800b20e:	2301      	movs	r3, #1
 800b210:	89ba      	ldrh	r2, [r7, #12]
 800b212:	6838      	ldr	r0, [r7, #0]
 800b214:	f007 fc48 	bl	8012aa8 <tcp_write>
 800b218:	4603      	mov	r3, r0
 800b21a:	73fb      	strb	r3, [r7, #15]
  if ((err == ERR_OK) && wrap) {
 800b21c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b220:	2b00      	cmp	r3, #0
 800b222:	d146      	bne.n	800b2b2 <mqtt_output_send+0x13a>
 800b224:	7bbb      	ldrb	r3, [r7, #14]
 800b226:	2b00      	cmp	r3, #0
 800b228:	d043      	beq.n	800b2b2 <mqtt_output_send+0x13a>
    mqtt_ringbuf_advance_get_idx(rb, send_len);
 800b22a:	89bb      	ldrh	r3, [r7, #12]
 800b22c:	4619      	mov	r1, r3
 800b22e:	6878      	ldr	r0, [r7, #4]
 800b230:	f7ff ff5c 	bl	800b0ec <mqtt_ringbuf_advance_get_idx>
    /* Use the lesser one of ring buffer linear length and TCP send buffer size */
    send_len = LWIP_MIN(altcp_sndbuf(tpcb), mqtt_ringbuf_linear_read_length(rb));
 800b234:	683b      	ldr	r3, [r7, #0]
 800b236:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b23a:	461c      	mov	r4, r3
 800b23c:	6878      	ldr	r0, [r7, #4]
 800b23e:	f7ff ff81 	bl	800b144 <mqtt_ringbuf_len>
 800b242:	4603      	mov	r3, r0
 800b244:	461a      	mov	r2, r3
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	885b      	ldrh	r3, [r3, #2]
 800b24a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800b24e:	429a      	cmp	r2, r3
 800b250:	da04      	bge.n	800b25c <mqtt_output_send+0xe4>
 800b252:	6878      	ldr	r0, [r7, #4]
 800b254:	f7ff ff76 	bl	800b144 <mqtt_ringbuf_len>
 800b258:	4603      	mov	r3, r0
 800b25a:	e003      	b.n	800b264 <mqtt_output_send+0xec>
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	885b      	ldrh	r3, [r3, #2]
 800b260:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800b264:	42a3      	cmp	r3, r4
 800b266:	dd03      	ble.n	800b270 <mqtt_output_send+0xf8>
 800b268:	683b      	ldr	r3, [r7, #0]
 800b26a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b26e:	e014      	b.n	800b29a <mqtt_output_send+0x122>
 800b270:	6878      	ldr	r0, [r7, #4]
 800b272:	f7ff ff67 	bl	800b144 <mqtt_ringbuf_len>
 800b276:	4603      	mov	r3, r0
 800b278:	461a      	mov	r2, r3
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	885b      	ldrh	r3, [r3, #2]
 800b27e:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800b282:	429a      	cmp	r2, r3
 800b284:	da04      	bge.n	800b290 <mqtt_output_send+0x118>
 800b286:	6878      	ldr	r0, [r7, #4]
 800b288:	f7ff ff5c 	bl	800b144 <mqtt_ringbuf_len>
 800b28c:	4603      	mov	r3, r0
 800b28e:	e004      	b.n	800b29a <mqtt_output_send+0x122>
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	885b      	ldrh	r3, [r3, #2]
 800b294:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800b298:	b29b      	uxth	r3, r3
 800b29a:	81bb      	strh	r3, [r7, #12]
    err = altcp_write(tpcb, mqtt_ringbuf_get_ptr(rb), send_len, TCP_WRITE_FLAG_COPY);
 800b29c:	6878      	ldr	r0, [r7, #4]
 800b29e:	f7ff ff16 	bl	800b0ce <mqtt_ringbuf_get_ptr>
 800b2a2:	4601      	mov	r1, r0
 800b2a4:	89ba      	ldrh	r2, [r7, #12]
 800b2a6:	2301      	movs	r3, #1
 800b2a8:	6838      	ldr	r0, [r7, #0]
 800b2aa:	f007 fbfd 	bl	8012aa8 <tcp_write>
 800b2ae:	4603      	mov	r3, r0
 800b2b0:	73fb      	strb	r3, [r7, #15]
  }

  if (err == ERR_OK) {
 800b2b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d109      	bne.n	800b2ce <mqtt_output_send+0x156>
    mqtt_ringbuf_advance_get_idx(rb, send_len);
 800b2ba:	89bb      	ldrh	r3, [r7, #12]
 800b2bc:	4619      	mov	r1, r3
 800b2be:	6878      	ldr	r0, [r7, #4]
 800b2c0:	f7ff ff14 	bl	800b0ec <mqtt_ringbuf_advance_get_idx>
    /* Flush */
    altcp_output(tpcb);
 800b2c4:	6838      	ldr	r0, [r7, #0]
 800b2c6:	f008 f9d9 	bl	801367c <tcp_output>
 800b2ca:	e000      	b.n	800b2ce <mqtt_output_send+0x156>
    return;
 800b2cc:	bf00      	nop
  } else {
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_output_send: Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
  }
}
 800b2ce:	3714      	adds	r7, #20
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	bd90      	pop	{r4, r7, pc}
 800b2d4:	0801b4ec 	.word	0x0801b4ec
 800b2d8:	0801b58c 	.word	0x0801b58c
 800b2dc:	0801b564 	.word	0x0801b564

0800b2e0 <mqtt_delete_request>:
 * Delete request item
 * @param r Request item to delete
 */
static void
mqtt_delete_request(struct mqtt_request_t *r)
{
 800b2e0:	b480      	push	{r7}
 800b2e2:	b083      	sub	sp, #12
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	6078      	str	r0, [r7, #4]
  if (r != NULL) {
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d002      	beq.n	800b2f4 <mqtt_delete_request+0x14>
    r->next = r;
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	687a      	ldr	r2, [r7, #4]
 800b2f2:	601a      	str	r2, [r3, #0]
  }
}
 800b2f4:	bf00      	nop
 800b2f6:	370c      	adds	r7, #12
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	bc80      	pop	{r7}
 800b2fc:	4770      	bx	lr
	...

0800b300 <mqtt_take_request>:
 * @param pkt_id Packet identifier of request to take
 * @return Request item if found, NULL if not
 */
static struct mqtt_request_t *
mqtt_take_request(struct mqtt_request_t **tail, u16_t pkt_id)
{
 800b300:	b580      	push	{r7, lr}
 800b302:	b084      	sub	sp, #16
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
 800b308:	460b      	mov	r3, r1
 800b30a:	807b      	strh	r3, [r7, #2]
  struct mqtt_request_t *iter = NULL, *prev = NULL;
 800b30c:	2300      	movs	r3, #0
 800b30e:	60fb      	str	r3, [r7, #12]
 800b310:	2300      	movs	r3, #0
 800b312:	60bb      	str	r3, [r7, #8]
  LWIP_ASSERT("mqtt_take_request: tail != NULL", tail != NULL);
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	2b00      	cmp	r3, #0
 800b318:	d106      	bne.n	800b328 <mqtt_take_request+0x28>
 800b31a:	4b1f      	ldr	r3, [pc, #124]	; (800b398 <mqtt_take_request+0x98>)
 800b31c:	f240 1267 	movw	r2, #359	; 0x167
 800b320:	491e      	ldr	r1, [pc, #120]	; (800b39c <mqtt_take_request+0x9c>)
 800b322:	481f      	ldr	r0, [pc, #124]	; (800b3a0 <mqtt_take_request+0xa0>)
 800b324:	f00f fa3e 	bl	801a7a4 <iprintf>
  /* Search all request for pkt_id */
  for (iter = *tail; iter != NULL; iter = iter->next) {
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	60fb      	str	r3, [r7, #12]
 800b32e:	e009      	b.n	800b344 <mqtt_take_request+0x44>
    if (iter->pkt_id == pkt_id) {
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	899b      	ldrh	r3, [r3, #12]
 800b334:	887a      	ldrh	r2, [r7, #2]
 800b336:	429a      	cmp	r2, r3
 800b338:	d008      	beq.n	800b34c <mqtt_take_request+0x4c>
      break;
    }
    prev = iter;
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	60bb      	str	r3, [r7, #8]
  for (iter = *tail; iter != NULL; iter = iter->next) {
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	60fb      	str	r3, [r7, #12]
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d1f2      	bne.n	800b330 <mqtt_take_request+0x30>
 800b34a:	e000      	b.n	800b34e <mqtt_take_request+0x4e>
      break;
 800b34c:	bf00      	nop
  }

  /* If request was found */
  if (iter != NULL) {
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	2b00      	cmp	r3, #0
 800b352:	d01c      	beq.n	800b38e <mqtt_take_request+0x8e>
    /* unchain */
    if (prev == NULL) {
 800b354:	68bb      	ldr	r3, [r7, #8]
 800b356:	2b00      	cmp	r3, #0
 800b358:	d104      	bne.n	800b364 <mqtt_take_request+0x64>
      *tail = iter->next;
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	681a      	ldr	r2, [r3, #0]
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	601a      	str	r2, [r3, #0]
 800b362:	e003      	b.n	800b36c <mqtt_take_request+0x6c>
    } else {
      prev->next = iter->next;
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	681a      	ldr	r2, [r3, #0]
 800b368:	68bb      	ldr	r3, [r7, #8]
 800b36a:	601a      	str	r2, [r3, #0]
    }
    /* If exists, add remaining timeout time for the request to next */
    if (iter->next != NULL) {
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	2b00      	cmp	r3, #0
 800b372:	d009      	beq.n	800b388 <mqtt_take_request+0x88>
      iter->next->timeout_diff += iter->timeout_diff;
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	89d9      	ldrh	r1, [r3, #14]
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	89da      	ldrh	r2, [r3, #14]
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	440a      	add	r2, r1
 800b384:	b292      	uxth	r2, r2
 800b386:	81da      	strh	r2, [r3, #14]
    }
    iter->next = NULL;
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	2200      	movs	r2, #0
 800b38c:	601a      	str	r2, [r3, #0]
  }
  return iter;
 800b38e:	68fb      	ldr	r3, [r7, #12]
}
 800b390:	4618      	mov	r0, r3
 800b392:	3710      	adds	r7, #16
 800b394:	46bd      	mov	sp, r7
 800b396:	bd80      	pop	{r7, pc}
 800b398:	0801b4ec 	.word	0x0801b4ec
 800b39c:	0801b62c 	.word	0x0801b62c
 800b3a0:	0801b564 	.word	0x0801b564

0800b3a4 <mqtt_request_time_elapsed>:
 * @param tail Pointer to request queue tail pointer
 * @param t Time since last call in seconds
 */
static void
mqtt_request_time_elapsed(struct mqtt_request_t **tail, u8_t t)
{
 800b3a4:	b580      	push	{r7, lr}
 800b3a6:	b084      	sub	sp, #16
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	6078      	str	r0, [r7, #4]
 800b3ac:	460b      	mov	r3, r1
 800b3ae:	70fb      	strb	r3, [r7, #3]
  struct mqtt_request_t *r;
  LWIP_ASSERT("mqtt_request_time_elapsed: tail != NULL", tail != NULL);
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d106      	bne.n	800b3c4 <mqtt_request_time_elapsed+0x20>
 800b3b6:	4b21      	ldr	r3, [pc, #132]	; (800b43c <mqtt_request_time_elapsed+0x98>)
 800b3b8:	f44f 72c5 	mov.w	r2, #394	; 0x18a
 800b3bc:	4920      	ldr	r1, [pc, #128]	; (800b440 <mqtt_request_time_elapsed+0x9c>)
 800b3be:	4821      	ldr	r0, [pc, #132]	; (800b444 <mqtt_request_time_elapsed+0xa0>)
 800b3c0:	f00f f9f0 	bl	801a7a4 <iprintf>
  r = *tail;
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	60fb      	str	r3, [r7, #12]
  while (t > 0 && r != NULL) {
 800b3ca:	e02c      	b.n	800b426 <mqtt_request_time_elapsed+0x82>
    if (t >= r->timeout_diff) {
 800b3cc:	78fb      	ldrb	r3, [r7, #3]
 800b3ce:	b29a      	uxth	r2, r3
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	89db      	ldrh	r3, [r3, #14]
 800b3d4:	429a      	cmp	r2, r3
 800b3d6:	d31c      	bcc.n	800b412 <mqtt_request_time_elapsed+0x6e>
      t -= (u8_t)r->timeout_diff;
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	89db      	ldrh	r3, [r3, #14]
 800b3dc:	b2db      	uxtb	r3, r3
 800b3de:	78fa      	ldrb	r2, [r7, #3]
 800b3e0:	1ad3      	subs	r3, r2, r3
 800b3e2:	70fb      	strb	r3, [r7, #3]
      /* Unchain */
      *tail = r->next;
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	681a      	ldr	r2, [r3, #0]
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	601a      	str	r2, [r3, #0]
      /* Notify upper layer about timeout */
      if (r->cb != NULL) {
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	685b      	ldr	r3, [r3, #4]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d007      	beq.n	800b404 <mqtt_request_time_elapsed+0x60>
        r->cb(r->arg, ERR_TIMEOUT);
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	685b      	ldr	r3, [r3, #4]
 800b3f8:	68fa      	ldr	r2, [r7, #12]
 800b3fa:	6892      	ldr	r2, [r2, #8]
 800b3fc:	f06f 0102 	mvn.w	r1, #2
 800b400:	4610      	mov	r0, r2
 800b402:	4798      	blx	r3
      }
      mqtt_delete_request(r);
 800b404:	68f8      	ldr	r0, [r7, #12]
 800b406:	f7ff ff6b 	bl	800b2e0 <mqtt_delete_request>
      /* Tail might be be modified in callback, so re-read it in every iteration */
      r = *(struct mqtt_request_t *const volatile *)tail;
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	60fb      	str	r3, [r7, #12]
 800b410:	e009      	b.n	800b426 <mqtt_request_time_elapsed+0x82>
    } else {
      r->timeout_diff -= t;
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	89da      	ldrh	r2, [r3, #14]
 800b416:	78fb      	ldrb	r3, [r7, #3]
 800b418:	b29b      	uxth	r3, r3
 800b41a:	1ad3      	subs	r3, r2, r3
 800b41c:	b29a      	uxth	r2, r3
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	81da      	strh	r2, [r3, #14]
      t = 0;
 800b422:	2300      	movs	r3, #0
 800b424:	70fb      	strb	r3, [r7, #3]
  while (t > 0 && r != NULL) {
 800b426:	78fb      	ldrb	r3, [r7, #3]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d002      	beq.n	800b432 <mqtt_request_time_elapsed+0x8e>
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d1cc      	bne.n	800b3cc <mqtt_request_time_elapsed+0x28>
    }
  }
}
 800b432:	bf00      	nop
 800b434:	3710      	adds	r7, #16
 800b436:	46bd      	mov	sp, r7
 800b438:	bd80      	pop	{r7, pc}
 800b43a:	bf00      	nop
 800b43c:	0801b4ec 	.word	0x0801b4ec
 800b440:	0801b64c 	.word	0x0801b64c
 800b444:	0801b564 	.word	0x0801b564

0800b448 <mqtt_clear_requests>:
 * Free all request items
 * @param tail Pointer to request queue tail pointer
 */
static void
mqtt_clear_requests(struct mqtt_request_t **tail)
{
 800b448:	b580      	push	{r7, lr}
 800b44a:	b084      	sub	sp, #16
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	6078      	str	r0, [r7, #4]
  struct mqtt_request_t *iter, *next;
  LWIP_ASSERT("mqtt_clear_requests: tail != NULL", tail != NULL);
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d106      	bne.n	800b464 <mqtt_clear_requests+0x1c>
 800b456:	4b0e      	ldr	r3, [pc, #56]	; (800b490 <mqtt_clear_requests+0x48>)
 800b458:	f240 12a7 	movw	r2, #423	; 0x1a7
 800b45c:	490d      	ldr	r1, [pc, #52]	; (800b494 <mqtt_clear_requests+0x4c>)
 800b45e:	480e      	ldr	r0, [pc, #56]	; (800b498 <mqtt_clear_requests+0x50>)
 800b460:	f00f f9a0 	bl	801a7a4 <iprintf>
  for (iter = *tail; iter != NULL; iter = next) {
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	60fb      	str	r3, [r7, #12]
 800b46a:	e007      	b.n	800b47c <mqtt_clear_requests+0x34>
    next = iter->next;
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	60bb      	str	r3, [r7, #8]
    mqtt_delete_request(iter);
 800b472:	68f8      	ldr	r0, [r7, #12]
 800b474:	f7ff ff34 	bl	800b2e0 <mqtt_delete_request>
  for (iter = *tail; iter != NULL; iter = next) {
 800b478:	68bb      	ldr	r3, [r7, #8]
 800b47a:	60fb      	str	r3, [r7, #12]
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d1f4      	bne.n	800b46c <mqtt_clear_requests+0x24>
  }
  *tail = NULL;
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	2200      	movs	r2, #0
 800b486:	601a      	str	r2, [r3, #0]
}
 800b488:	bf00      	nop
 800b48a:	3710      	adds	r7, #16
 800b48c:	46bd      	mov	sp, r7
 800b48e:	bd80      	pop	{r7, pc}
 800b490:	0801b4ec 	.word	0x0801b4ec
 800b494:	0801b674 	.word	0x0801b674
 800b498:	0801b564 	.word	0x0801b564

0800b49c <mqtt_init_requests>:
 * @param r_objs Pointer to request objects
 * @param r_objs_len Number of array entries
 */
static void
mqtt_init_requests(struct mqtt_request_t *r_objs, size_t r_objs_len)
{
 800b49c:	b580      	push	{r7, lr}
 800b49e:	b084      	sub	sp, #16
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	6078      	str	r0, [r7, #4]
 800b4a4:	6039      	str	r1, [r7, #0]
  u8_t n;
  LWIP_ASSERT("mqtt_init_requests: r_objs != NULL", r_objs != NULL);
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d106      	bne.n	800b4ba <mqtt_init_requests+0x1e>
 800b4ac:	4b0f      	ldr	r3, [pc, #60]	; (800b4ec <mqtt_init_requests+0x50>)
 800b4ae:	f240 12b7 	movw	r2, #439	; 0x1b7
 800b4b2:	490f      	ldr	r1, [pc, #60]	; (800b4f0 <mqtt_init_requests+0x54>)
 800b4b4:	480f      	ldr	r0, [pc, #60]	; (800b4f4 <mqtt_init_requests+0x58>)
 800b4b6:	f00f f975 	bl	801a7a4 <iprintf>
  for (n = 0; n < r_objs_len; n++) {
 800b4ba:	2300      	movs	r3, #0
 800b4bc:	73fb      	strb	r3, [r7, #15]
 800b4be:	e00b      	b.n	800b4d8 <mqtt_init_requests+0x3c>
    /* Item pointing to itself indicates unused */
    r_objs[n].next = &r_objs[n];
 800b4c0:	7bfb      	ldrb	r3, [r7, #15]
 800b4c2:	011a      	lsls	r2, r3, #4
 800b4c4:	7bfb      	ldrb	r3, [r7, #15]
 800b4c6:	011b      	lsls	r3, r3, #4
 800b4c8:	6879      	ldr	r1, [r7, #4]
 800b4ca:	440b      	add	r3, r1
 800b4cc:	6879      	ldr	r1, [r7, #4]
 800b4ce:	440a      	add	r2, r1
 800b4d0:	601a      	str	r2, [r3, #0]
  for (n = 0; n < r_objs_len; n++) {
 800b4d2:	7bfb      	ldrb	r3, [r7, #15]
 800b4d4:	3301      	adds	r3, #1
 800b4d6:	73fb      	strb	r3, [r7, #15]
 800b4d8:	7bfb      	ldrb	r3, [r7, #15]
 800b4da:	683a      	ldr	r2, [r7, #0]
 800b4dc:	429a      	cmp	r2, r3
 800b4de:	d8ef      	bhi.n	800b4c0 <mqtt_init_requests+0x24>
  }
}
 800b4e0:	bf00      	nop
 800b4e2:	bf00      	nop
 800b4e4:	3710      	adds	r7, #16
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	bd80      	pop	{r7, pc}
 800b4ea:	bf00      	nop
 800b4ec:	0801b4ec 	.word	0x0801b4ec
 800b4f0:	0801b698 	.word	0x0801b698
 800b4f4:	0801b564 	.word	0x0801b564

0800b4f8 <mqtt_output_append_u8>:
/* Output message build helpers */


static void
mqtt_output_append_u8(struct mqtt_ringbuf_t *rb, u8_t value)
{
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	b082      	sub	sp, #8
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	6078      	str	r0, [r7, #4]
 800b500:	460b      	mov	r3, r1
 800b502:	70fb      	strb	r3, [r7, #3]
  mqtt_ringbuf_put(rb, value);
 800b504:	78fb      	ldrb	r3, [r7, #3]
 800b506:	4619      	mov	r1, r3
 800b508:	6878      	ldr	r0, [r7, #4]
 800b50a:	f7ff fdc1 	bl	800b090 <mqtt_ringbuf_put>
}
 800b50e:	bf00      	nop
 800b510:	3708      	adds	r7, #8
 800b512:	46bd      	mov	sp, r7
 800b514:	bd80      	pop	{r7, pc}

0800b516 <mqtt_output_append_u16>:

static
void mqtt_output_append_u16(struct mqtt_ringbuf_t *rb, u16_t value)
{
 800b516:	b580      	push	{r7, lr}
 800b518:	b082      	sub	sp, #8
 800b51a:	af00      	add	r7, sp, #0
 800b51c:	6078      	str	r0, [r7, #4]
 800b51e:	460b      	mov	r3, r1
 800b520:	807b      	strh	r3, [r7, #2]
  mqtt_ringbuf_put(rb, value >> 8);
 800b522:	887b      	ldrh	r3, [r7, #2]
 800b524:	0a1b      	lsrs	r3, r3, #8
 800b526:	b29b      	uxth	r3, r3
 800b528:	b2db      	uxtb	r3, r3
 800b52a:	4619      	mov	r1, r3
 800b52c:	6878      	ldr	r0, [r7, #4]
 800b52e:	f7ff fdaf 	bl	800b090 <mqtt_ringbuf_put>
  mqtt_ringbuf_put(rb, value & 0xff);
 800b532:	887b      	ldrh	r3, [r7, #2]
 800b534:	b2db      	uxtb	r3, r3
 800b536:	4619      	mov	r1, r3
 800b538:	6878      	ldr	r0, [r7, #4]
 800b53a:	f7ff fda9 	bl	800b090 <mqtt_ringbuf_put>
}
 800b53e:	bf00      	nop
 800b540:	3708      	adds	r7, #8
 800b542:	46bd      	mov	sp, r7
 800b544:	bd80      	pop	{r7, pc}

0800b546 <mqtt_output_append_string>:
  }
}

static void
mqtt_output_append_string(struct mqtt_ringbuf_t *rb, const char *str, u16_t length)
{
 800b546:	b580      	push	{r7, lr}
 800b548:	b086      	sub	sp, #24
 800b54a:	af00      	add	r7, sp, #0
 800b54c:	60f8      	str	r0, [r7, #12]
 800b54e:	60b9      	str	r1, [r7, #8]
 800b550:	4613      	mov	r3, r2
 800b552:	80fb      	strh	r3, [r7, #6]
  u16_t n;
  mqtt_ringbuf_put(rb, length >> 8);
 800b554:	88fb      	ldrh	r3, [r7, #6]
 800b556:	0a1b      	lsrs	r3, r3, #8
 800b558:	b29b      	uxth	r3, r3
 800b55a:	b2db      	uxtb	r3, r3
 800b55c:	4619      	mov	r1, r3
 800b55e:	68f8      	ldr	r0, [r7, #12]
 800b560:	f7ff fd96 	bl	800b090 <mqtt_ringbuf_put>
  mqtt_ringbuf_put(rb, length & 0xff);
 800b564:	88fb      	ldrh	r3, [r7, #6]
 800b566:	b2db      	uxtb	r3, r3
 800b568:	4619      	mov	r1, r3
 800b56a:	68f8      	ldr	r0, [r7, #12]
 800b56c:	f7ff fd90 	bl	800b090 <mqtt_ringbuf_put>
  for (n = 0; n < length; n++) {
 800b570:	2300      	movs	r3, #0
 800b572:	82fb      	strh	r3, [r7, #22]
 800b574:	e00a      	b.n	800b58c <mqtt_output_append_string+0x46>
    mqtt_ringbuf_put(rb, str[n]);
 800b576:	8afb      	ldrh	r3, [r7, #22]
 800b578:	68ba      	ldr	r2, [r7, #8]
 800b57a:	4413      	add	r3, r2
 800b57c:	781b      	ldrb	r3, [r3, #0]
 800b57e:	4619      	mov	r1, r3
 800b580:	68f8      	ldr	r0, [r7, #12]
 800b582:	f7ff fd85 	bl	800b090 <mqtt_ringbuf_put>
  for (n = 0; n < length; n++) {
 800b586:	8afb      	ldrh	r3, [r7, #22]
 800b588:	3301      	adds	r3, #1
 800b58a:	82fb      	strh	r3, [r7, #22]
 800b58c:	8afa      	ldrh	r2, [r7, #22]
 800b58e:	88fb      	ldrh	r3, [r7, #6]
 800b590:	429a      	cmp	r2, r3
 800b592:	d3f0      	bcc.n	800b576 <mqtt_output_append_string+0x30>
  }
}
 800b594:	bf00      	nop
 800b596:	bf00      	nop
 800b598:	3718      	adds	r7, #24
 800b59a:	46bd      	mov	sp, r7
 800b59c:	bd80      	pop	{r7, pc}

0800b59e <mqtt_output_append_fixed_header>:
 */

static void
mqtt_output_append_fixed_header(struct mqtt_ringbuf_t *rb, u8_t msg_type, u8_t fdup,
                                u8_t fqos, u8_t fretain, u16_t r_length)
{
 800b59e:	b580      	push	{r7, lr}
 800b5a0:	b082      	sub	sp, #8
 800b5a2:	af00      	add	r7, sp, #0
 800b5a4:	6078      	str	r0, [r7, #4]
 800b5a6:	4608      	mov	r0, r1
 800b5a8:	4611      	mov	r1, r2
 800b5aa:	461a      	mov	r2, r3
 800b5ac:	4603      	mov	r3, r0
 800b5ae:	70fb      	strb	r3, [r7, #3]
 800b5b0:	460b      	mov	r3, r1
 800b5b2:	70bb      	strb	r3, [r7, #2]
 800b5b4:	4613      	mov	r3, r2
 800b5b6:	707b      	strb	r3, [r7, #1]
  /* Start with control byte */
  mqtt_output_append_u8(rb, (((msg_type & 0x0f) << 4) | ((fdup & 1) << 3) | ((fqos & 3) << 1) | (fretain & 1)));
 800b5b8:	78fb      	ldrb	r3, [r7, #3]
 800b5ba:	011b      	lsls	r3, r3, #4
 800b5bc:	b25a      	sxtb	r2, r3
 800b5be:	78bb      	ldrb	r3, [r7, #2]
 800b5c0:	00db      	lsls	r3, r3, #3
 800b5c2:	b25b      	sxtb	r3, r3
 800b5c4:	f003 0308 	and.w	r3, r3, #8
 800b5c8:	b25b      	sxtb	r3, r3
 800b5ca:	4313      	orrs	r3, r2
 800b5cc:	b25a      	sxtb	r2, r3
 800b5ce:	787b      	ldrb	r3, [r7, #1]
 800b5d0:	005b      	lsls	r3, r3, #1
 800b5d2:	b25b      	sxtb	r3, r3
 800b5d4:	f003 0306 	and.w	r3, r3, #6
 800b5d8:	b25b      	sxtb	r3, r3
 800b5da:	4313      	orrs	r3, r2
 800b5dc:	b25a      	sxtb	r2, r3
 800b5de:	f997 3010 	ldrsb.w	r3, [r7, #16]
 800b5e2:	f003 0301 	and.w	r3, r3, #1
 800b5e6:	b25b      	sxtb	r3, r3
 800b5e8:	4313      	orrs	r3, r2
 800b5ea:	b25b      	sxtb	r3, r3
 800b5ec:	b2db      	uxtb	r3, r3
 800b5ee:	4619      	mov	r1, r3
 800b5f0:	6878      	ldr	r0, [r7, #4]
 800b5f2:	f7ff ff81 	bl	800b4f8 <mqtt_output_append_u8>
  /* Encode remaining length field */
  do {
    mqtt_output_append_u8(rb, (r_length & 0x7f) | (r_length >= 128 ? 0x80 : 0));
 800b5f6:	8abb      	ldrh	r3, [r7, #20]
 800b5f8:	b25b      	sxtb	r3, r3
 800b5fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b5fe:	b25b      	sxtb	r3, r3
 800b600:	8aba      	ldrh	r2, [r7, #20]
 800b602:	2a7f      	cmp	r2, #127	; 0x7f
 800b604:	d902      	bls.n	800b60c <mqtt_output_append_fixed_header+0x6e>
 800b606:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 800b60a:	e000      	b.n	800b60e <mqtt_output_append_fixed_header+0x70>
 800b60c:	2200      	movs	r2, #0
 800b60e:	4313      	orrs	r3, r2
 800b610:	b25b      	sxtb	r3, r3
 800b612:	b2db      	uxtb	r3, r3
 800b614:	4619      	mov	r1, r3
 800b616:	6878      	ldr	r0, [r7, #4]
 800b618:	f7ff ff6e 	bl	800b4f8 <mqtt_output_append_u8>
    r_length >>= 7;
 800b61c:	8abb      	ldrh	r3, [r7, #20]
 800b61e:	09db      	lsrs	r3, r3, #7
 800b620:	82bb      	strh	r3, [r7, #20]
  } while (r_length > 0);
 800b622:	8abb      	ldrh	r3, [r7, #20]
 800b624:	2b00      	cmp	r3, #0
 800b626:	d1e6      	bne.n	800b5f6 <mqtt_output_append_fixed_header+0x58>
}
 800b628:	bf00      	nop
 800b62a:	bf00      	nop
 800b62c:	3708      	adds	r7, #8
 800b62e:	46bd      	mov	sp, r7
 800b630:	bd80      	pop	{r7, pc}
	...

0800b634 <mqtt_output_check_space>:
 * @param r_length Remaining length after fixed header
 * @return 1 if message will fit, 0 if not enough buffer space
 */
static u8_t
mqtt_output_check_space(struct mqtt_ringbuf_t *rb, u16_t r_length)
{
 800b634:	b590      	push	{r4, r7, lr}
 800b636:	b085      	sub	sp, #20
 800b638:	af00      	add	r7, sp, #0
 800b63a:	6078      	str	r0, [r7, #4]
 800b63c:	460b      	mov	r3, r1
 800b63e:	807b      	strh	r3, [r7, #2]
  /* Start with length of type byte + remaining length */
  u16_t total_len = 1 + r_length;
 800b640:	887b      	ldrh	r3, [r7, #2]
 800b642:	3301      	adds	r3, #1
 800b644:	81fb      	strh	r3, [r7, #14]

  LWIP_ASSERT("mqtt_output_check_space: rb != NULL", rb != NULL);
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d106      	bne.n	800b65a <mqtt_output_check_space+0x26>
 800b64c:	4b0f      	ldr	r3, [pc, #60]	; (800b68c <mqtt_output_check_space+0x58>)
 800b64e:	f240 2207 	movw	r2, #519	; 0x207
 800b652:	490f      	ldr	r1, [pc, #60]	; (800b690 <mqtt_output_check_space+0x5c>)
 800b654:	480f      	ldr	r0, [pc, #60]	; (800b694 <mqtt_output_check_space+0x60>)
 800b656:	f00f f8a5 	bl	801a7a4 <iprintf>

  /* Calculate number of required bytes to contain the remaining bytes field and add to total*/
  do {
    total_len++;
 800b65a:	89fb      	ldrh	r3, [r7, #14]
 800b65c:	3301      	adds	r3, #1
 800b65e:	81fb      	strh	r3, [r7, #14]
    r_length >>= 7;
 800b660:	887b      	ldrh	r3, [r7, #2]
 800b662:	09db      	lsrs	r3, r3, #7
 800b664:	807b      	strh	r3, [r7, #2]
  } while (r_length > 0);
 800b666:	887b      	ldrh	r3, [r7, #2]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d1f6      	bne.n	800b65a <mqtt_output_check_space+0x26>

  return (total_len <= mqtt_ringbuf_free(rb));
 800b66c:	89fc      	ldrh	r4, [r7, #14]
 800b66e:	6878      	ldr	r0, [r7, #4]
 800b670:	f7ff fd68 	bl	800b144 <mqtt_ringbuf_len>
 800b674:	4603      	mov	r3, r0
 800b676:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800b67a:	429c      	cmp	r4, r3
 800b67c:	bfd4      	ite	le
 800b67e:	2301      	movle	r3, #1
 800b680:	2300      	movgt	r3, #0
 800b682:	b2db      	uxtb	r3, r3
}
 800b684:	4618      	mov	r0, r3
 800b686:	3714      	adds	r7, #20
 800b688:	46bd      	mov	sp, r7
 800b68a:	bd90      	pop	{r4, r7, pc}
 800b68c:	0801b4ec 	.word	0x0801b4ec
 800b690:	0801b6bc 	.word	0x0801b6bc
 800b694:	0801b564 	.word	0x0801b564

0800b698 <mqtt_close>:
 * @param client MQTT client
 * @param reason Reason for disconnection
 */
static void
mqtt_close(mqtt_client_t *client, mqtt_connection_status_t reason)
{
 800b698:	b580      	push	{r7, lr}
 800b69a:	b084      	sub	sp, #16
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	6078      	str	r0, [r7, #4]
 800b6a0:	460b      	mov	r3, r1
 800b6a2:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("mqtt_close: client != NULL", client != NULL);
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d106      	bne.n	800b6b8 <mqtt_close+0x20>
 800b6aa:	4b27      	ldr	r3, [pc, #156]	; (800b748 <mqtt_close+0xb0>)
 800b6ac:	f240 221b 	movw	r2, #539	; 0x21b
 800b6b0:	4926      	ldr	r1, [pc, #152]	; (800b74c <mqtt_close+0xb4>)
 800b6b2:	4827      	ldr	r0, [pc, #156]	; (800b750 <mqtt_close+0xb8>)
 800b6b4:	f00f f876 	bl	801a7a4 <iprintf>

  /* Bring down TCP connection if not already done */
  if (client->conn != NULL) {
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	68db      	ldr	r3, [r3, #12]
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d024      	beq.n	800b70a <mqtt_close+0x72>
    err_t res;
    altcp_recv(client->conn, NULL);
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	68db      	ldr	r3, [r3, #12]
 800b6c4:	2100      	movs	r1, #0
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	f004 fad6 	bl	800fc78 <tcp_recv>
    altcp_err(client->conn,  NULL);
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	68db      	ldr	r3, [r3, #12]
 800b6d0:	2100      	movs	r1, #0
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	f004 fb14 	bl	800fd00 <tcp_err>
    altcp_sent(client->conn, NULL);
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	68db      	ldr	r3, [r3, #12]
 800b6dc:	2100      	movs	r1, #0
 800b6de:	4618      	mov	r0, r3
 800b6e0:	f004 faec 	bl	800fcbc <tcp_sent>
    res = altcp_close(client->conn);
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	68db      	ldr	r3, [r3, #12]
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	f003 f8ef 	bl	800e8cc <tcp_close>
 800b6ee:	4603      	mov	r3, r0
 800b6f0:	73fb      	strb	r3, [r7, #15]
    if (res != ERR_OK) {
 800b6f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d004      	beq.n	800b704 <mqtt_close+0x6c>
      altcp_abort(client->conn);
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	68db      	ldr	r3, [r3, #12]
 800b6fe:	4618      	mov	r0, r3
 800b700:	f003 f9ce 	bl	800eaa0 <tcp_abort>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_close: Close err=%s\n", lwip_strerr(res)));
    }
    client->conn = NULL;
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	2200      	movs	r2, #0
 800b708:	60da      	str	r2, [r3, #12]
  }

  /* Remove all pending requests */
  mqtt_clear_requests(&client->pend_req_queue);
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	3318      	adds	r3, #24
 800b70e:	4618      	mov	r0, r3
 800b710:	f7ff fe9a 	bl	800b448 <mqtt_clear_requests>
  /* Stop cyclic timer */
  sys_untimeout(mqtt_cyclic_timer, client);
 800b714:	6879      	ldr	r1, [r7, #4]
 800b716:	480f      	ldr	r0, [pc, #60]	; (800b754 <mqtt_close+0xbc>)
 800b718:	f009 f82e 	bl	8014778 <sys_untimeout>

  /* Notify upper layer of disconnection if changed state */
  if (client->conn_state != TCP_DISCONNECTED) {
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	7a9b      	ldrb	r3, [r3, #10]
 800b720:	2b00      	cmp	r3, #0
 800b722:	d00d      	beq.n	800b740 <mqtt_close+0xa8>

    client->conn_state = TCP_DISCONNECTED;
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	2200      	movs	r2, #0
 800b728:	729a      	strb	r2, [r3, #10]
    if (client->connect_cb != NULL) {
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	695b      	ldr	r3, [r3, #20]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d006      	beq.n	800b740 <mqtt_close+0xa8>
      client->connect_cb(client, client->connect_arg, reason);
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	695b      	ldr	r3, [r3, #20]
 800b736:	687a      	ldr	r2, [r7, #4]
 800b738:	6911      	ldr	r1, [r2, #16]
 800b73a:	887a      	ldrh	r2, [r7, #2]
 800b73c:	6878      	ldr	r0, [r7, #4]
 800b73e:	4798      	blx	r3
    }
  }
}
 800b740:	bf00      	nop
 800b742:	3710      	adds	r7, #16
 800b744:	46bd      	mov	sp, r7
 800b746:	bd80      	pop	{r7, pc}
 800b748:	0801b4ec 	.word	0x0801b4ec
 800b74c:	0801b6e0 	.word	0x0801b6e0
 800b750:	0801b564 	.word	0x0801b564
 800b754:	0800b759 	.word	0x0800b759

0800b758 <mqtt_cyclic_timer>:
 * Interval timer, called every MQTT_CYCLIC_TIMER_INTERVAL seconds in MQTT_CONNECTING and MQTT_CONNECTED states
 * @param arg MQTT client
 */
static void
mqtt_cyclic_timer(void *arg)
{
 800b758:	b580      	push	{r7, lr}
 800b75a:	b086      	sub	sp, #24
 800b75c:	af02      	add	r7, sp, #8
 800b75e:	6078      	str	r0, [r7, #4]
  u8_t restart_timer = 1;
 800b760:	2301      	movs	r3, #1
 800b762:	73fb      	strb	r3, [r7, #15]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	60bb      	str	r3, [r7, #8]
  LWIP_ASSERT("mqtt_cyclic_timer: client != NULL", client != NULL);
 800b768:	68bb      	ldr	r3, [r7, #8]
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d106      	bne.n	800b77c <mqtt_cyclic_timer+0x24>
 800b76e:	4b42      	ldr	r3, [pc, #264]	; (800b878 <mqtt_cyclic_timer+0x120>)
 800b770:	f44f 7211 	mov.w	r2, #580	; 0x244
 800b774:	4941      	ldr	r1, [pc, #260]	; (800b87c <mqtt_cyclic_timer+0x124>)
 800b776:	4842      	ldr	r0, [pc, #264]	; (800b880 <mqtt_cyclic_timer+0x128>)
 800b778:	f00f f814 	bl	801a7a4 <iprintf>

  if (client->conn_state == MQTT_CONNECTING) {
 800b77c:	68bb      	ldr	r3, [r7, #8]
 800b77e:	7a9b      	ldrb	r3, [r3, #10]
 800b780:	2b02      	cmp	r3, #2
 800b782:	d115      	bne.n	800b7b0 <mqtt_cyclic_timer+0x58>
    client->cyclic_tick++;
 800b784:	68bb      	ldr	r3, [r7, #8]
 800b786:	881b      	ldrh	r3, [r3, #0]
 800b788:	3301      	adds	r3, #1
 800b78a:	b29a      	uxth	r2, r3
 800b78c:	68bb      	ldr	r3, [r7, #8]
 800b78e:	801a      	strh	r2, [r3, #0]
    if ((client->cyclic_tick * MQTT_CYCLIC_TIMER_INTERVAL) >= MQTT_CONNECT_TIMOUT) {
 800b790:	68bb      	ldr	r3, [r7, #8]
 800b792:	881b      	ldrh	r3, [r3, #0]
 800b794:	461a      	mov	r2, r3
 800b796:	4613      	mov	r3, r2
 800b798:	009b      	lsls	r3, r3, #2
 800b79a:	4413      	add	r3, r2
 800b79c:	2b63      	cmp	r3, #99	; 0x63
 800b79e:	dd5e      	ble.n	800b85e <mqtt_cyclic_timer+0x106>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_cyclic_timer: CONNECT attempt to server timed out\n"));
      /* Disconnect TCP */
      mqtt_close(client, MQTT_CONNECT_TIMEOUT);
 800b7a0:	f240 1101 	movw	r1, #257	; 0x101
 800b7a4:	68b8      	ldr	r0, [r7, #8]
 800b7a6:	f7ff ff77 	bl	800b698 <mqtt_close>
      restart_timer = 0;
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	73fb      	strb	r3, [r7, #15]
 800b7ae:	e056      	b.n	800b85e <mqtt_cyclic_timer+0x106>
    }
  } else if (client->conn_state == MQTT_CONNECTED) {
 800b7b0:	68bb      	ldr	r3, [r7, #8]
 800b7b2:	7a9b      	ldrb	r3, [r3, #10]
 800b7b4:	2b03      	cmp	r3, #3
 800b7b6:	d150      	bne.n	800b85a <mqtt_cyclic_timer+0x102>
    /* Handle timeout for pending requests */
    mqtt_request_time_elapsed(&client->pend_req_queue, MQTT_CYCLIC_TIMER_INTERVAL);
 800b7b8:	68bb      	ldr	r3, [r7, #8]
 800b7ba:	3318      	adds	r3, #24
 800b7bc:	2105      	movs	r1, #5
 800b7be:	4618      	mov	r0, r3
 800b7c0:	f7ff fdf0 	bl	800b3a4 <mqtt_request_time_elapsed>

    /* keep_alive > 0 means keep alive functionality shall be used */
    if (client->keep_alive > 0) {
 800b7c4:	68bb      	ldr	r3, [r7, #8]
 800b7c6:	885b      	ldrh	r3, [r3, #2]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d048      	beq.n	800b85e <mqtt_cyclic_timer+0x106>

      client->server_watchdog++;
 800b7cc:	68bb      	ldr	r3, [r7, #8]
 800b7ce:	889b      	ldrh	r3, [r3, #4]
 800b7d0:	3301      	adds	r3, #1
 800b7d2:	b29a      	uxth	r2, r3
 800b7d4:	68bb      	ldr	r3, [r7, #8]
 800b7d6:	809a      	strh	r2, [r3, #4]
      /* If reception from server has been idle for 1.5*keep_alive time, server is considered unresponsive */
      if ((client->server_watchdog * MQTT_CYCLIC_TIMER_INTERVAL) > (client->keep_alive + client->keep_alive / 2)) {
 800b7d8:	68bb      	ldr	r3, [r7, #8]
 800b7da:	889b      	ldrh	r3, [r3, #4]
 800b7dc:	461a      	mov	r2, r3
 800b7de:	4613      	mov	r3, r2
 800b7e0:	009b      	lsls	r3, r3, #2
 800b7e2:	441a      	add	r2, r3
 800b7e4:	68bb      	ldr	r3, [r7, #8]
 800b7e6:	885b      	ldrh	r3, [r3, #2]
 800b7e8:	4619      	mov	r1, r3
 800b7ea:	68bb      	ldr	r3, [r7, #8]
 800b7ec:	885b      	ldrh	r3, [r3, #2]
 800b7ee:	085b      	lsrs	r3, r3, #1
 800b7f0:	b29b      	uxth	r3, r3
 800b7f2:	440b      	add	r3, r1
 800b7f4:	429a      	cmp	r2, r3
 800b7f6:	dd06      	ble.n	800b806 <mqtt_cyclic_timer+0xae>
        LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_cyclic_timer: Server incoming keep-alive timeout\n"));
        mqtt_close(client, MQTT_CONNECT_TIMEOUT);
 800b7f8:	f240 1101 	movw	r1, #257	; 0x101
 800b7fc:	68b8      	ldr	r0, [r7, #8]
 800b7fe:	f7ff ff4b 	bl	800b698 <mqtt_close>
        restart_timer = 0;
 800b802:	2300      	movs	r3, #0
 800b804:	73fb      	strb	r3, [r7, #15]
      }

      /* If time for a keep alive message to be sent, transmission has been idle for keep_alive time */
      if ((client->cyclic_tick * MQTT_CYCLIC_TIMER_INTERVAL) >= client->keep_alive) {
 800b806:	68bb      	ldr	r3, [r7, #8]
 800b808:	881b      	ldrh	r3, [r3, #0]
 800b80a:	461a      	mov	r2, r3
 800b80c:	4613      	mov	r3, r2
 800b80e:	009b      	lsls	r3, r3, #2
 800b810:	4413      	add	r3, r2
 800b812:	68ba      	ldr	r2, [r7, #8]
 800b814:	8852      	ldrh	r2, [r2, #2]
 800b816:	4293      	cmp	r3, r2
 800b818:	db18      	blt.n	800b84c <mqtt_cyclic_timer+0xf4>
        LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_cyclic_timer: Sending keep-alive message to server\n"));
        if (mqtt_output_check_space(&client->output, 0) != 0) {
 800b81a:	68bb      	ldr	r3, [r7, #8]
 800b81c:	33ec      	adds	r3, #236	; 0xec
 800b81e:	2100      	movs	r1, #0
 800b820:	4618      	mov	r0, r3
 800b822:	f7ff ff07 	bl	800b634 <mqtt_output_check_space>
 800b826:	4603      	mov	r3, r0
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d018      	beq.n	800b85e <mqtt_cyclic_timer+0x106>
          mqtt_output_append_fixed_header(&client->output, MQTT_MSG_TYPE_PINGREQ, 0, 0, 0, 0);
 800b82c:	68bb      	ldr	r3, [r7, #8]
 800b82e:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 800b832:	2300      	movs	r3, #0
 800b834:	9301      	str	r3, [sp, #4]
 800b836:	2300      	movs	r3, #0
 800b838:	9300      	str	r3, [sp, #0]
 800b83a:	2300      	movs	r3, #0
 800b83c:	2200      	movs	r2, #0
 800b83e:	210c      	movs	r1, #12
 800b840:	f7ff fead 	bl	800b59e <mqtt_output_append_fixed_header>
          client->cyclic_tick = 0;
 800b844:	68bb      	ldr	r3, [r7, #8]
 800b846:	2200      	movs	r2, #0
 800b848:	801a      	strh	r2, [r3, #0]
 800b84a:	e008      	b.n	800b85e <mqtt_cyclic_timer+0x106>
        }
      } else {
        client->cyclic_tick++;
 800b84c:	68bb      	ldr	r3, [r7, #8]
 800b84e:	881b      	ldrh	r3, [r3, #0]
 800b850:	3301      	adds	r3, #1
 800b852:	b29a      	uxth	r2, r3
 800b854:	68bb      	ldr	r3, [r7, #8]
 800b856:	801a      	strh	r2, [r3, #0]
 800b858:	e001      	b.n	800b85e <mqtt_cyclic_timer+0x106>
      }
    }
  } else {
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_cyclic_timer: Timer should not be running in state %d\n", client->conn_state));
    restart_timer = 0;
 800b85a:	2300      	movs	r3, #0
 800b85c:	73fb      	strb	r3, [r7, #15]
  }
  if (restart_timer) {
 800b85e:	7bfb      	ldrb	r3, [r7, #15]
 800b860:	2b00      	cmp	r3, #0
 800b862:	d005      	beq.n	800b870 <mqtt_cyclic_timer+0x118>
    sys_timeout(MQTT_CYCLIC_TIMER_INTERVAL * 1000, mqtt_cyclic_timer, arg);
 800b864:	687a      	ldr	r2, [r7, #4]
 800b866:	4907      	ldr	r1, [pc, #28]	; (800b884 <mqtt_cyclic_timer+0x12c>)
 800b868:	f241 3088 	movw	r0, #5000	; 0x1388
 800b86c:	f008 ff5e 	bl	801472c <sys_timeout>
  }
}
 800b870:	bf00      	nop
 800b872:	3710      	adds	r7, #16
 800b874:	46bd      	mov	sp, r7
 800b876:	bd80      	pop	{r7, pc}
 800b878:	0801b4ec 	.word	0x0801b4ec
 800b87c:	0801b6fc 	.word	0x0801b6fc
 800b880:	0801b564 	.word	0x0801b564
 800b884:	0800b759 	.word	0x0800b759

0800b888 <pub_ack_rec_rel_response>:
 * @param qos QoS value
 * @return ERR_OK if successful, ERR_MEM if out of memory
 */
static err_t
pub_ack_rec_rel_response(mqtt_client_t *client, u8_t msg, u16_t pkt_id, u8_t qos)
{
 800b888:	b580      	push	{r7, lr}
 800b88a:	b086      	sub	sp, #24
 800b88c:	af02      	add	r7, sp, #8
 800b88e:	6078      	str	r0, [r7, #4]
 800b890:	4608      	mov	r0, r1
 800b892:	4611      	mov	r1, r2
 800b894:	461a      	mov	r2, r3
 800b896:	4603      	mov	r3, r0
 800b898:	70fb      	strb	r3, [r7, #3]
 800b89a:	460b      	mov	r3, r1
 800b89c:	803b      	strh	r3, [r7, #0]
 800b89e:	4613      	mov	r3, r2
 800b8a0:	70bb      	strb	r3, [r7, #2]
  err_t err = ERR_OK;
 800b8a2:	2300      	movs	r3, #0
 800b8a4:	73fb      	strb	r3, [r7, #15]
  if (mqtt_output_check_space(&client->output, 2)) {
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	33ec      	adds	r3, #236	; 0xec
 800b8aa:	2102      	movs	r1, #2
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	f7ff fec1 	bl	800b634 <mqtt_output_check_space>
 800b8b2:	4603      	mov	r3, r0
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d01c      	beq.n	800b8f2 <pub_ack_rec_rel_response+0x6a>
    mqtt_output_append_fixed_header(&client->output, msg, 0, qos, 0, 2);
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 800b8be:	78bb      	ldrb	r3, [r7, #2]
 800b8c0:	78f9      	ldrb	r1, [r7, #3]
 800b8c2:	2202      	movs	r2, #2
 800b8c4:	9201      	str	r2, [sp, #4]
 800b8c6:	2200      	movs	r2, #0
 800b8c8:	9200      	str	r2, [sp, #0]
 800b8ca:	2200      	movs	r2, #0
 800b8cc:	f7ff fe67 	bl	800b59e <mqtt_output_append_fixed_header>
    mqtt_output_append_u16(&client->output, pkt_id);
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	33ec      	adds	r3, #236	; 0xec
 800b8d4:	883a      	ldrh	r2, [r7, #0]
 800b8d6:	4611      	mov	r1, r2
 800b8d8:	4618      	mov	r0, r3
 800b8da:	f7ff fe1c 	bl	800b516 <mqtt_output_append_u16>
    mqtt_output_send(&client->output, client->conn);
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	68db      	ldr	r3, [r3, #12]
 800b8e8:	4619      	mov	r1, r3
 800b8ea:	4610      	mov	r0, r2
 800b8ec:	f7ff fc44 	bl	800b178 <mqtt_output_send>
 800b8f0:	e001      	b.n	800b8f6 <pub_ack_rec_rel_response+0x6e>
  } else {
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("pub_ack_rec_rel_response: OOM creating response: %s with pkt_id: %d\n",
                                   mqtt_msg_type_to_str(msg), pkt_id));
    err = ERR_MEM;
 800b8f2:	23ff      	movs	r3, #255	; 0xff
 800b8f4:	73fb      	strb	r3, [r7, #15]
  }
  return err;
 800b8f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b8fa:	4618      	mov	r0, r3
 800b8fc:	3710      	adds	r7, #16
 800b8fe:	46bd      	mov	sp, r7
 800b900:	bd80      	pop	{r7, pc}

0800b902 <mqtt_incomming_suback>:
 * @param r Matching request
 * @param result Result code from server
 */
static void
mqtt_incomming_suback(struct mqtt_request_t *r, u8_t result)
{
 800b902:	b580      	push	{r7, lr}
 800b904:	b082      	sub	sp, #8
 800b906:	af00      	add	r7, sp, #0
 800b908:	6078      	str	r0, [r7, #4]
 800b90a:	460b      	mov	r3, r1
 800b90c:	70fb      	strb	r3, [r7, #3]
  if (r->cb != NULL) {
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	685b      	ldr	r3, [r3, #4]
 800b912:	2b00      	cmp	r3, #0
 800b914:	d00c      	beq.n	800b930 <mqtt_incomming_suback+0x2e>
    r->cb(r->arg, result < 3 ? ERR_OK : ERR_ABRT);
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	685b      	ldr	r3, [r3, #4]
 800b91a:	687a      	ldr	r2, [r7, #4]
 800b91c:	6890      	ldr	r0, [r2, #8]
 800b91e:	78fa      	ldrb	r2, [r7, #3]
 800b920:	2a02      	cmp	r2, #2
 800b922:	d801      	bhi.n	800b928 <mqtt_incomming_suback+0x26>
 800b924:	2200      	movs	r2, #0
 800b926:	e001      	b.n	800b92c <mqtt_incomming_suback+0x2a>
 800b928:	f06f 020c 	mvn.w	r2, #12
 800b92c:	4611      	mov	r1, r2
 800b92e:	4798      	blx	r3
  }
}
 800b930:	bf00      	nop
 800b932:	3708      	adds	r7, #8
 800b934:	46bd      	mov	sp, r7
 800b936:	bd80      	pop	{r7, pc}

0800b938 <mqtt_message_received>:
 * @param length length received part
 * @param remaining_length Remaining length of complete message
 */
static mqtt_connection_status_t
mqtt_message_received(mqtt_client_t *client, u8_t fixed_hdr_idx, u16_t length, u32_t remaining_length)
{
 800b938:	b590      	push	{r4, r7, lr}
 800b93a:	b08f      	sub	sp, #60	; 0x3c
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	60f8      	str	r0, [r7, #12]
 800b940:	607b      	str	r3, [r7, #4]
 800b942:	460b      	mov	r3, r1
 800b944:	72fb      	strb	r3, [r7, #11]
 800b946:	4613      	mov	r3, r2
 800b948:	813b      	strh	r3, [r7, #8]
  mqtt_connection_status_t res = MQTT_CONNECT_ACCEPTED;
 800b94a:	2300      	movs	r3, #0
 800b94c:	86fb      	strh	r3, [r7, #54]	; 0x36

  u8_t *var_hdr_payload = client->rx_buffer + fixed_hdr_idx;
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 800b954:	7afb      	ldrb	r3, [r7, #11]
 800b956:	4413      	add	r3, r2
 800b958:	62fb      	str	r3, [r7, #44]	; 0x2c
  size_t var_hdr_payload_bufsize = sizeof(client->rx_buffer) - fixed_hdr_idx;
 800b95a:	7afb      	ldrb	r3, [r7, #11]
 800b95c:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800b960:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Control packet type */
  u8_t pkt_type = MQTT_CTL_PACKET_TYPE(client->rx_buffer[0]);
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800b968:	091b      	lsrs	r3, r3, #4
 800b96a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  u16_t pkt_id = 0;
 800b96e:	2300      	movs	r3, #0
 800b970:	84bb      	strh	r3, [r7, #36]	; 0x24

  LWIP_ASSERT("client->msg_idx < MQTT_VAR_HEADER_BUFFER_LEN", client->msg_idx < MQTT_VAR_HEADER_BUFFER_LEN);
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b976:	2b7f      	cmp	r3, #127	; 0x7f
 800b978:	d906      	bls.n	800b988 <mqtt_message_received+0x50>
 800b97a:	4b97      	ldr	r3, [pc, #604]	; (800bbd8 <mqtt_message_received+0x2a0>)
 800b97c:	f240 22ab 	movw	r2, #683	; 0x2ab
 800b980:	4996      	ldr	r1, [pc, #600]	; (800bbdc <mqtt_message_received+0x2a4>)
 800b982:	4897      	ldr	r0, [pc, #604]	; (800bbe0 <mqtt_message_received+0x2a8>)
 800b984:	f00e ff0e 	bl	801a7a4 <iprintf>
  LWIP_ASSERT("fixed_hdr_idx <= client->msg_idx", fixed_hdr_idx <= client->msg_idx);
 800b988:	7afa      	ldrb	r2, [r7, #11]
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b98e:	429a      	cmp	r2, r3
 800b990:	d906      	bls.n	800b9a0 <mqtt_message_received+0x68>
 800b992:	4b91      	ldr	r3, [pc, #580]	; (800bbd8 <mqtt_message_received+0x2a0>)
 800b994:	f44f 722b 	mov.w	r2, #684	; 0x2ac
 800b998:	4992      	ldr	r1, [pc, #584]	; (800bbe4 <mqtt_message_received+0x2ac>)
 800b99a:	4891      	ldr	r0, [pc, #580]	; (800bbe0 <mqtt_message_received+0x2a8>)
 800b99c:	f00e ff02 	bl	801a7a4 <iprintf>
  LWIP_ERROR("buffer length mismatch", fixed_hdr_idx + length <= MQTT_VAR_HEADER_BUFFER_LEN,
 800b9a0:	7afa      	ldrb	r2, [r7, #11]
 800b9a2:	893b      	ldrh	r3, [r7, #8]
 800b9a4:	4413      	add	r3, r2
 800b9a6:	2b80      	cmp	r3, #128	; 0x80
 800b9a8:	dd09      	ble.n	800b9be <mqtt_message_received+0x86>
 800b9aa:	4b8b      	ldr	r3, [pc, #556]	; (800bbd8 <mqtt_message_received+0x2a0>)
 800b9ac:	f240 22ad 	movw	r2, #685	; 0x2ad
 800b9b0:	498d      	ldr	r1, [pc, #564]	; (800bbe8 <mqtt_message_received+0x2b0>)
 800b9b2:	488b      	ldr	r0, [pc, #556]	; (800bbe0 <mqtt_message_received+0x2a8>)
 800b9b4:	f00e fef6 	bl	801a7a4 <iprintf>
 800b9b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b9bc:	e16f      	b.n	800bc9e <mqtt_message_received+0x366>
             return MQTT_CONNECT_DISCONNECTED);

  if (pkt_type == MQTT_MSG_TYPE_CONNACK) {
 800b9be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b9c2:	2b02      	cmp	r3, #2
 800b9c4:	d123      	bne.n	800ba0e <mqtt_message_received+0xd6>
    if (client->conn_state == MQTT_CONNECTING) {
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	7a9b      	ldrb	r3, [r3, #10]
 800b9ca:	2b02      	cmp	r3, #2
 800b9cc:	f040 8152 	bne.w	800bc74 <mqtt_message_received+0x33c>
      if (length < 2) {
 800b9d0:	893b      	ldrh	r3, [r7, #8]
 800b9d2:	2b01      	cmp	r3, #1
 800b9d4:	f240 8150 	bls.w	800bc78 <mqtt_message_received+0x340>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short CONNACK message\n"));
        goto out_disconnect;
      }
      /* Get result code from CONNACK */
      res = (mqtt_connection_status_t)var_hdr_payload[1];
 800b9d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9da:	3301      	adds	r3, #1
 800b9dc:	781b      	ldrb	r3, [r3, #0]
 800b9de:	86fb      	strh	r3, [r7, #54]	; 0x36
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: Connect response code %d\n", res));
      if (res == MQTT_CONNECT_ACCEPTED) {
 800b9e0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	f040 8146 	bne.w	800bc74 <mqtt_message_received+0x33c>
        /* Reset cyclic_tick when changing to connected state */
        client->cyclic_tick = 0;
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	2200      	movs	r2, #0
 800b9ec:	801a      	strh	r2, [r3, #0]
        client->conn_state = MQTT_CONNECTED;
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	2203      	movs	r2, #3
 800b9f2:	729a      	strb	r2, [r3, #10]
        /* Notify upper layer */
        if (client->connect_cb != 0) {
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	695b      	ldr	r3, [r3, #20]
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	f000 813b 	beq.w	800bc74 <mqtt_message_received+0x33c>
          client->connect_cb(client, client->connect_arg, res);
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	695b      	ldr	r3, [r3, #20]
 800ba02:	68fa      	ldr	r2, [r7, #12]
 800ba04:	6911      	ldr	r1, [r2, #16]
 800ba06:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800ba08:	68f8      	ldr	r0, [r7, #12]
 800ba0a:	4798      	blx	r3
 800ba0c:	e132      	b.n	800bc74 <mqtt_message_received+0x33c>
        }
      }
    } else {
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: Received CONNACK in connected state\n"));
    }
  } else if (pkt_type == MQTT_MSG_TYPE_PINGRESP) {
 800ba0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ba12:	2b0d      	cmp	r3, #13
 800ba14:	f000 812e 	beq.w	800bc74 <mqtt_message_received+0x33c>
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ( "mqtt_message_received: Received PINGRESP from server\n"));

  } else if (pkt_type == MQTT_MSG_TYPE_PUBLISH) {
 800ba18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ba1c:	2b03      	cmp	r3, #3
 800ba1e:	f040 80c0 	bne.w	800bba2 <mqtt_message_received+0x26a>
    u16_t payload_offset = 0;
 800ba22:	2300      	movs	r3, #0
 800ba24:	86bb      	strh	r3, [r7, #52]	; 0x34
    u16_t payload_length = length;
 800ba26:	893b      	ldrh	r3, [r7, #8]
 800ba28:	867b      	strh	r3, [r7, #50]	; 0x32
    u8_t qos = MQTT_CTL_PACKET_QOS(client->rx_buffer[0]);
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800ba30:	105b      	asrs	r3, r3, #1
 800ba32:	b2db      	uxtb	r3, r3
 800ba34:	f003 0303 	and.w	r3, r3, #3
 800ba38:	77fb      	strb	r3, [r7, #31]

    if (client->msg_idx <= MQTT_VAR_HEADER_BUFFER_LEN) {
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ba3e:	2b80      	cmp	r3, #128	; 0x80
 800ba40:	d87d      	bhi.n	800bb3e <mqtt_message_received+0x206>
      /* Should have topic and pkt id*/
      u8_t *topic;
      u16_t after_topic;
      u8_t bkp;
      u16_t topic_len;
      u16_t qos_len = (qos ? 2U : 0U);
 800ba42:	7ffb      	ldrb	r3, [r7, #31]
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d001      	beq.n	800ba4c <mqtt_message_received+0x114>
 800ba48:	2302      	movs	r3, #2
 800ba4a:	e000      	b.n	800ba4e <mqtt_message_received+0x116>
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	83bb      	strh	r3, [r7, #28]
      if (length < 2 + qos_len) {
 800ba50:	8bbb      	ldrh	r3, [r7, #28]
 800ba52:	1c5a      	adds	r2, r3, #1
 800ba54:	893b      	ldrh	r3, [r7, #8]
 800ba56:	429a      	cmp	r2, r3
 800ba58:	f280 8110 	bge.w	800bc7c <mqtt_message_received+0x344>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short PUBLISH packet\n"));
        goto out_disconnect;
      }
      topic_len = var_hdr_payload[0];
 800ba5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba5e:	781b      	ldrb	r3, [r3, #0]
 800ba60:	837b      	strh	r3, [r7, #26]
      topic_len = (topic_len << 8) + (u16_t)(var_hdr_payload[1]);
 800ba62:	8b7b      	ldrh	r3, [r7, #26]
 800ba64:	021b      	lsls	r3, r3, #8
 800ba66:	b29a      	uxth	r2, r3
 800ba68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba6a:	3301      	adds	r3, #1
 800ba6c:	781b      	ldrb	r3, [r3, #0]
 800ba6e:	b29b      	uxth	r3, r3
 800ba70:	4413      	add	r3, r2
 800ba72:	837b      	strh	r3, [r7, #26]
      if ((topic_len > length - (2 + qos_len)) ||
 800ba74:	8b7a      	ldrh	r2, [r7, #26]
 800ba76:	8939      	ldrh	r1, [r7, #8]
 800ba78:	8bbb      	ldrh	r3, [r7, #28]
 800ba7a:	3302      	adds	r3, #2
 800ba7c:	1acb      	subs	r3, r1, r3
 800ba7e:	429a      	cmp	r2, r3
 800ba80:	f300 80fe 	bgt.w	800bc80 <mqtt_message_received+0x348>
          (topic_len > var_hdr_payload_bufsize - (2 + qos_len))) {
 800ba84:	8b7a      	ldrh	r2, [r7, #26]
 800ba86:	8bbb      	ldrh	r3, [r7, #28]
 800ba88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ba8a:	1acb      	subs	r3, r1, r3
 800ba8c:	3b02      	subs	r3, #2
      if ((topic_len > length - (2 + qos_len)) ||
 800ba8e:	429a      	cmp	r2, r3
 800ba90:	f200 80f6 	bhi.w	800bc80 <mqtt_message_received+0x348>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short PUBLISH packet (topic)\n"));
        goto out_disconnect;
      }

      topic = var_hdr_payload + 2;
 800ba94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba96:	3302      	adds	r3, #2
 800ba98:	617b      	str	r3, [r7, #20]
      after_topic = 2 + topic_len;
 800ba9a:	8b7b      	ldrh	r3, [r7, #26]
 800ba9c:	3302      	adds	r3, #2
 800ba9e:	863b      	strh	r3, [r7, #48]	; 0x30
      /* Check buffer length, add one byte even for QoS 0 so that zero termination will fit */
      if ((after_topic + (qos ? 2U : 1U)) > var_hdr_payload_bufsize) {
 800baa0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800baa2:	7ffa      	ldrb	r2, [r7, #31]
 800baa4:	2a00      	cmp	r2, #0
 800baa6:	d001      	beq.n	800baac <mqtt_message_received+0x174>
 800baa8:	2202      	movs	r2, #2
 800baaa:	e000      	b.n	800baae <mqtt_message_received+0x176>
 800baac:	2201      	movs	r2, #1
 800baae:	4413      	add	r3, r2
 800bab0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bab2:	429a      	cmp	r2, r3
 800bab4:	f0c0 80e6 	bcc.w	800bc84 <mqtt_message_received+0x34c>
        LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: Receive buffer can not fit topic + pkt_id\n"));
        goto out_disconnect;
      }

      /* id for QoS 1 and 2 */
      if (qos > 0) {
 800bab8:	7ffb      	ldrb	r3, [r7, #31]
 800baba:	2b00      	cmp	r3, #0
 800babc:	d01a      	beq.n	800baf4 <mqtt_message_received+0x1bc>
        if (length < after_topic + 2U) {
 800babe:	893a      	ldrh	r2, [r7, #8]
 800bac0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800bac2:	3302      	adds	r3, #2
 800bac4:	429a      	cmp	r2, r3
 800bac6:	f0c0 80df 	bcc.w	800bc88 <mqtt_message_received+0x350>
          LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short PUBLISH packet (after_topic)\n"));
          goto out_disconnect;
        }
        client->inpub_pkt_id = ((u16_t)var_hdr_payload[after_topic] << 8) + (u16_t)var_hdr_payload[after_topic + 1];
 800baca:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800bacc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bace:	4413      	add	r3, r2
 800bad0:	781b      	ldrb	r3, [r3, #0]
 800bad2:	b29b      	uxth	r3, r3
 800bad4:	021b      	lsls	r3, r3, #8
 800bad6:	b29a      	uxth	r2, r3
 800bad8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800bada:	3301      	adds	r3, #1
 800badc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bade:	440b      	add	r3, r1
 800bae0:	781b      	ldrb	r3, [r3, #0]
 800bae2:	b29b      	uxth	r3, r3
 800bae4:	4413      	add	r3, r2
 800bae6:	b29a      	uxth	r2, r3
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	811a      	strh	r2, [r3, #8]
        after_topic += 2;
 800baec:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800baee:	3302      	adds	r3, #2
 800baf0:	863b      	strh	r3, [r7, #48]	; 0x30
 800baf2:	e002      	b.n	800bafa <mqtt_message_received+0x1c2>
      } else {
        client->inpub_pkt_id = 0;
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	2200      	movs	r2, #0
 800baf8:	811a      	strh	r2, [r3, #8]
      }
      /* Take backup of byte after topic */
      bkp = topic[topic_len];
 800bafa:	8b7b      	ldrh	r3, [r7, #26]
 800bafc:	697a      	ldr	r2, [r7, #20]
 800bafe:	4413      	add	r3, r2
 800bb00:	781b      	ldrb	r3, [r3, #0]
 800bb02:	74fb      	strb	r3, [r7, #19]
      /* Zero terminate string */
      topic[topic_len] = 0;
 800bb04:	8b7b      	ldrh	r3, [r7, #26]
 800bb06:	697a      	ldr	r2, [r7, #20]
 800bb08:	4413      	add	r3, r2
 800bb0a:	2200      	movs	r2, #0
 800bb0c:	701a      	strb	r2, [r3, #0]
      /* Payload data remaining in receive buffer */
      payload_length = length - after_topic;
 800bb0e:	893a      	ldrh	r2, [r7, #8]
 800bb10:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800bb12:	1ad3      	subs	r3, r2, r3
 800bb14:	867b      	strh	r3, [r7, #50]	; 0x32
      payload_offset = after_topic;
 800bb16:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800bb18:	86bb      	strh	r3, [r7, #52]	; 0x34

      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_incomming_publish: Received message with QoS %d at topic: %s, payload length %"U32_F"\n",
                                     qos, topic, remaining_length + payload_length));
      if (client->pub_cb != NULL) {
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d008      	beq.n	800bb34 <mqtt_message_received+0x1fc>
        client->pub_cb(client->inpub_arg, (const char *)topic, remaining_length + payload_length);
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bb26:	68fa      	ldr	r2, [r7, #12]
 800bb28:	6dd0      	ldr	r0, [r2, #92]	; 0x5c
 800bb2a:	8e79      	ldrh	r1, [r7, #50]	; 0x32
 800bb2c:	687a      	ldr	r2, [r7, #4]
 800bb2e:	440a      	add	r2, r1
 800bb30:	6979      	ldr	r1, [r7, #20]
 800bb32:	4798      	blx	r3
      }
      /* Restore byte after topic */
      topic[topic_len] = bkp;
 800bb34:	8b7b      	ldrh	r3, [r7, #26]
 800bb36:	697a      	ldr	r2, [r7, #20]
 800bb38:	4413      	add	r3, r2
 800bb3a:	7cfa      	ldrb	r2, [r7, #19]
 800bb3c:	701a      	strb	r2, [r3, #0]
    }
    if (payload_length > 0 || remaining_length == 0) {
 800bb3e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d103      	bne.n	800bb4c <mqtt_message_received+0x214>
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	f040 8094 	bne.w	800bc74 <mqtt_message_received+0x33c>
      if (length < (size_t)(payload_offset + payload_length)) {
 800bb4c:	893b      	ldrh	r3, [r7, #8]
 800bb4e:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 800bb50:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800bb52:	440a      	add	r2, r1
 800bb54:	4293      	cmp	r3, r2
 800bb56:	f0c0 8099 	bcc.w	800bc8c <mqtt_message_received+0x354>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short packet (payload)\n"));
        goto out_disconnect;
      }
      client->data_cb(client->inpub_arg, var_hdr_payload + payload_offset, payload_length, remaining_length == 0 ? MQTT_DATA_FLAG_LAST : 0);
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 800bb62:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800bb64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bb66:	18d1      	adds	r1, r2, r3
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	bf0c      	ite	eq
 800bb6e:	2301      	moveq	r3, #1
 800bb70:	2300      	movne	r3, #0
 800bb72:	b2db      	uxtb	r3, r3
 800bb74:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800bb76:	47a0      	blx	r4
      /* Reply if QoS > 0 */
      if (remaining_length == 0 && qos > 0) {
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d17a      	bne.n	800bc74 <mqtt_message_received+0x33c>
 800bb7e:	7ffb      	ldrb	r3, [r7, #31]
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d077      	beq.n	800bc74 <mqtt_message_received+0x33c>
        /* Send PUBACK for QoS 1 or PUBREC for QoS 2 */
        u8_t resp_msg = (qos == 1) ? MQTT_MSG_TYPE_PUBACK : MQTT_MSG_TYPE_PUBREC;
 800bb84:	7ffb      	ldrb	r3, [r7, #31]
 800bb86:	2b01      	cmp	r3, #1
 800bb88:	d101      	bne.n	800bb8e <mqtt_message_received+0x256>
 800bb8a:	2304      	movs	r3, #4
 800bb8c:	e000      	b.n	800bb90 <mqtt_message_received+0x258>
 800bb8e:	2305      	movs	r3, #5
 800bb90:	74bb      	strb	r3, [r7, #18]
        LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_incomming_publish: Sending publish response: %s with pkt_id: %d\n",
                                       mqtt_msg_type_to_str(resp_msg), client->inpub_pkt_id));
        pub_ack_rec_rel_response(client, resp_msg, client->inpub_pkt_id, 0);
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	891a      	ldrh	r2, [r3, #8]
 800bb96:	7cb9      	ldrb	r1, [r7, #18]
 800bb98:	2300      	movs	r3, #0
 800bb9a:	68f8      	ldr	r0, [r7, #12]
 800bb9c:	f7ff fe74 	bl	800b888 <pub_ack_rec_rel_response>
 800bba0:	e068      	b.n	800bc74 <mqtt_message_received+0x33c>
      }
    }
  } else {
    /* Get packet identifier */
    pkt_id = (u16_t)var_hdr_payload[0] << 8;
 800bba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bba4:	781b      	ldrb	r3, [r3, #0]
 800bba6:	b29b      	uxth	r3, r3
 800bba8:	021b      	lsls	r3, r3, #8
 800bbaa:	84bb      	strh	r3, [r7, #36]	; 0x24
    pkt_id |= (u16_t)var_hdr_payload[1];
 800bbac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbae:	3301      	adds	r3, #1
 800bbb0:	781b      	ldrb	r3, [r3, #0]
 800bbb2:	b29a      	uxth	r2, r3
 800bbb4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bbb6:	4313      	orrs	r3, r2
 800bbb8:	84bb      	strh	r3, [r7, #36]	; 0x24
    if (pkt_id == 0) {
 800bbba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d067      	beq.n	800bc90 <mqtt_message_received+0x358>
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: Got message with illegal packet identifier: 0\n"));
      goto out_disconnect;
    }
    if (pkt_type == MQTT_MSG_TYPE_PUBREC) {
 800bbc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bbc4:	2b05      	cmp	r3, #5
 800bbc6:	d111      	bne.n	800bbec <mqtt_message_received+0x2b4>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: PUBREC, sending PUBREL with pkt_id: %d\n", pkt_id));
      pub_ack_rec_rel_response(client, MQTT_MSG_TYPE_PUBREL, pkt_id, 1);
 800bbc8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800bbca:	2301      	movs	r3, #1
 800bbcc:	2106      	movs	r1, #6
 800bbce:	68f8      	ldr	r0, [r7, #12]
 800bbd0:	f7ff fe5a 	bl	800b888 <pub_ack_rec_rel_response>
 800bbd4:	e04e      	b.n	800bc74 <mqtt_message_received+0x33c>
 800bbd6:	bf00      	nop
 800bbd8:	0801b4ec 	.word	0x0801b4ec
 800bbdc:	0801b720 	.word	0x0801b720
 800bbe0:	0801b564 	.word	0x0801b564
 800bbe4:	0801b750 	.word	0x0801b750
 800bbe8:	0801b774 	.word	0x0801b774

    } else if (pkt_type == MQTT_MSG_TYPE_PUBREL) {
 800bbec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bbf0:	2b06      	cmp	r3, #6
 800bbf2:	d106      	bne.n	800bc02 <mqtt_message_received+0x2ca>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: PUBREL, sending PUBCOMP response with pkt_id: %d\n", pkt_id));
      pub_ack_rec_rel_response(client, MQTT_MSG_TYPE_PUBCOMP, pkt_id, 0);
 800bbf4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	2107      	movs	r1, #7
 800bbfa:	68f8      	ldr	r0, [r7, #12]
 800bbfc:	f7ff fe44 	bl	800b888 <pub_ack_rec_rel_response>
 800bc00:	e038      	b.n	800bc74 <mqtt_message_received+0x33c>

    } else if (pkt_type == MQTT_MSG_TYPE_SUBACK || pkt_type == MQTT_MSG_TYPE_UNSUBACK ||
 800bc02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc06:	2b09      	cmp	r3, #9
 800bc08:	d00b      	beq.n	800bc22 <mqtt_message_received+0x2ea>
 800bc0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc0e:	2b0b      	cmp	r3, #11
 800bc10:	d007      	beq.n	800bc22 <mqtt_message_received+0x2ea>
 800bc12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc16:	2b07      	cmp	r3, #7
 800bc18:	d003      	beq.n	800bc22 <mqtt_message_received+0x2ea>
               pkt_type == MQTT_MSG_TYPE_PUBCOMP || pkt_type == MQTT_MSG_TYPE_PUBACK) {
 800bc1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc1e:	2b04      	cmp	r3, #4
 800bc20:	d138      	bne.n	800bc94 <mqtt_message_received+0x35c>
      struct mqtt_request_t *r = mqtt_take_request(&client->pend_req_queue, pkt_id);
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	3318      	adds	r3, #24
 800bc26:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800bc28:	4611      	mov	r1, r2
 800bc2a:	4618      	mov	r0, r3
 800bc2c:	f7ff fb68 	bl	800b300 <mqtt_take_request>
 800bc30:	6238      	str	r0, [r7, #32]
      if (r != NULL) {
 800bc32:	6a3b      	ldr	r3, [r7, #32]
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d01c      	beq.n	800bc72 <mqtt_message_received+0x33a>
        LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: %s response with id %d\n", mqtt_msg_type_to_str(pkt_type), pkt_id));
        if (pkt_type == MQTT_MSG_TYPE_SUBACK) {
 800bc38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc3c:	2b09      	cmp	r3, #9
 800bc3e:	d10a      	bne.n	800bc56 <mqtt_message_received+0x31e>
          if (length < 3) {
 800bc40:	893b      	ldrh	r3, [r7, #8]
 800bc42:	2b02      	cmp	r3, #2
 800bc44:	d928      	bls.n	800bc98 <mqtt_message_received+0x360>
            LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: To small SUBACK packet\n"));
            goto out_disconnect;
          } else {
            mqtt_incomming_suback(r, var_hdr_payload[2]);
 800bc46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc48:	3302      	adds	r3, #2
 800bc4a:	781b      	ldrb	r3, [r3, #0]
 800bc4c:	4619      	mov	r1, r3
 800bc4e:	6a38      	ldr	r0, [r7, #32]
 800bc50:	f7ff fe57 	bl	800b902 <mqtt_incomming_suback>
 800bc54:	e00a      	b.n	800bc6c <mqtt_message_received+0x334>
          }
        } else if (r->cb != NULL) {
 800bc56:	6a3b      	ldr	r3, [r7, #32]
 800bc58:	685b      	ldr	r3, [r3, #4]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d006      	beq.n	800bc6c <mqtt_message_received+0x334>
          r->cb(r->arg, ERR_OK);
 800bc5e:	6a3b      	ldr	r3, [r7, #32]
 800bc60:	685b      	ldr	r3, [r3, #4]
 800bc62:	6a3a      	ldr	r2, [r7, #32]
 800bc64:	6892      	ldr	r2, [r2, #8]
 800bc66:	2100      	movs	r1, #0
 800bc68:	4610      	mov	r0, r2
 800bc6a:	4798      	blx	r3
        }
        mqtt_delete_request(r);
 800bc6c:	6a38      	ldr	r0, [r7, #32]
 800bc6e:	f7ff fb37 	bl	800b2e0 <mqtt_delete_request>
               pkt_type == MQTT_MSG_TYPE_PUBCOMP || pkt_type == MQTT_MSG_TYPE_PUBACK) {
 800bc72:	bf00      	nop
    } else {
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ( "mqtt_message_received: Received unknown message type: %d\n", pkt_type));
      goto out_disconnect;
    }
  }
  return res;
 800bc74:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bc76:	e012      	b.n	800bc9e <mqtt_message_received+0x366>
        goto out_disconnect;
 800bc78:	bf00      	nop
 800bc7a:	e00e      	b.n	800bc9a <mqtt_message_received+0x362>
        goto out_disconnect;
 800bc7c:	bf00      	nop
 800bc7e:	e00c      	b.n	800bc9a <mqtt_message_received+0x362>
        goto out_disconnect;
 800bc80:	bf00      	nop
 800bc82:	e00a      	b.n	800bc9a <mqtt_message_received+0x362>
        goto out_disconnect;
 800bc84:	bf00      	nop
 800bc86:	e008      	b.n	800bc9a <mqtt_message_received+0x362>
          goto out_disconnect;
 800bc88:	bf00      	nop
 800bc8a:	e006      	b.n	800bc9a <mqtt_message_received+0x362>
        goto out_disconnect;
 800bc8c:	bf00      	nop
 800bc8e:	e004      	b.n	800bc9a <mqtt_message_received+0x362>
      goto out_disconnect;
 800bc90:	bf00      	nop
 800bc92:	e002      	b.n	800bc9a <mqtt_message_received+0x362>
      goto out_disconnect;
 800bc94:	bf00      	nop
 800bc96:	e000      	b.n	800bc9a <mqtt_message_received+0x362>
            goto out_disconnect;
 800bc98:	bf00      	nop
out_disconnect:
  return MQTT_CONNECT_DISCONNECTED;
 800bc9a:	f44f 7380 	mov.w	r3, #256	; 0x100
}
 800bc9e:	4618      	mov	r0, r3
 800bca0:	373c      	adds	r7, #60	; 0x3c
 800bca2:	46bd      	mov	sp, r7
 800bca4:	bd90      	pop	{r4, r7, pc}
 800bca6:	bf00      	nop

0800bca8 <mqtt_parse_incoming>:
 * @param p PBUF chain of received data
 * @return Connection status
 */
static mqtt_connection_status_t
mqtt_parse_incoming(mqtt_client_t *client, struct pbuf *p)
{
 800bca8:	b580      	push	{r7, lr}
 800bcaa:	b088      	sub	sp, #32
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	6078      	str	r0, [r7, #4]
 800bcb0:	6039      	str	r1, [r7, #0]
  u16_t in_offset = 0;
 800bcb2:	2300      	movs	r3, #0
 800bcb4:	83fb      	strh	r3, [r7, #30]
  u32_t msg_rem_len = 0;
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	61bb      	str	r3, [r7, #24]
  u8_t fixed_hdr_idx = 0;
 800bcba:	2300      	movs	r3, #0
 800bcbc:	75fb      	strb	r3, [r7, #23]
  u8_t b = 0;
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	75bb      	strb	r3, [r7, #22]

  while (p->tot_len > in_offset) {
 800bcc2:	e0bc      	b.n	800be3e <mqtt_parse_incoming+0x196>
    /* We ALWAYS parse the header here first. Even if the header was not
       included in this segment, we re-parse it here by buffering it in
       client->rx_buffer. client->msg_idx keeps track of this. */
    if ((fixed_hdr_idx < 2) || ((b & 0x80) != 0)) {
 800bcc4:	7dfb      	ldrb	r3, [r7, #23]
 800bcc6:	2b01      	cmp	r3, #1
 800bcc8:	d903      	bls.n	800bcd2 <mqtt_parse_incoming+0x2a>
 800bcca:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	da4d      	bge.n	800bd6e <mqtt_parse_incoming+0xc6>

      if (fixed_hdr_idx < client->msg_idx) {
 800bcd2:	7dfa      	ldrb	r2, [r7, #23]
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bcd8:	429a      	cmp	r2, r3
 800bcda:	d206      	bcs.n	800bcea <mqtt_parse_incoming+0x42>
        /* parse header from old pbuf (buffered in client->rx_buffer) */
        b = client->rx_buffer[fixed_hdr_idx];
 800bcdc:	7dfb      	ldrb	r3, [r7, #23]
 800bcde:	687a      	ldr	r2, [r7, #4]
 800bce0:	4413      	add	r3, r2
 800bce2:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800bce6:	75bb      	strb	r3, [r7, #22]
 800bce8:	e012      	b.n	800bd10 <mqtt_parse_incoming+0x68>
      } else {
        /* parse header from this pbuf and save it in client->rx_buffer in case
           it comes in segmented */
        b = pbuf_get_at(p, in_offset++);
 800bcea:	8bfb      	ldrh	r3, [r7, #30]
 800bcec:	1c5a      	adds	r2, r3, #1
 800bcee:	83fa      	strh	r2, [r7, #30]
 800bcf0:	4619      	mov	r1, r3
 800bcf2:	6838      	ldr	r0, [r7, #0]
 800bcf4:	f002 fba0 	bl	800e438 <pbuf_get_at>
 800bcf8:	4603      	mov	r3, r0
 800bcfa:	75bb      	strb	r3, [r7, #22]
        client->rx_buffer[client->msg_idx++] = b;
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bd00:	1c59      	adds	r1, r3, #1
 800bd02:	687a      	ldr	r2, [r7, #4]
 800bd04:	6691      	str	r1, [r2, #104]	; 0x68
 800bd06:	687a      	ldr	r2, [r7, #4]
 800bd08:	4413      	add	r3, r2
 800bd0a:	7dba      	ldrb	r2, [r7, #22]
 800bd0c:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
      }
      fixed_hdr_idx++;
 800bd10:	7dfb      	ldrb	r3, [r7, #23]
 800bd12:	3301      	adds	r3, #1
 800bd14:	75fb      	strb	r3, [r7, #23]

      if (fixed_hdr_idx >= 2) {
 800bd16:	7dfb      	ldrb	r3, [r7, #23]
 800bd18:	2b01      	cmp	r3, #1
 800bd1a:	f240 8090 	bls.w	800be3e <mqtt_parse_incoming+0x196>
        /* fixed header contains at least 2 bytes but can contain more, depending on
           'remaining length'. All bytes but the last of this have 0x80 set to
           indicate more bytes are coming. */
        msg_rem_len |= (u32_t)(b & 0x7f) << ((fixed_hdr_idx - 2) * 7);
 800bd1e:	7dbb      	ldrb	r3, [r7, #22]
 800bd20:	f003 017f 	and.w	r1, r3, #127	; 0x7f
 800bd24:	7dfb      	ldrb	r3, [r7, #23]
 800bd26:	1e9a      	subs	r2, r3, #2
 800bd28:	4613      	mov	r3, r2
 800bd2a:	00db      	lsls	r3, r3, #3
 800bd2c:	1a9b      	subs	r3, r3, r2
 800bd2e:	fa01 f303 	lsl.w	r3, r1, r3
 800bd32:	69ba      	ldr	r2, [r7, #24]
 800bd34:	4313      	orrs	r3, r2
 800bd36:	61bb      	str	r3, [r7, #24]
        if ((b & 0x80) == 0) {
 800bd38:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	db7e      	blt.n	800be3e <mqtt_parse_incoming+0x196>
          /* fixed header is done */
          LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_parse_incoming: Remaining length after fixed header: %"U32_F"\n", msg_rem_len));
          if (msg_rem_len == 0) {
 800bd40:	69bb      	ldr	r3, [r7, #24]
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d10b      	bne.n	800bd5e <mqtt_parse_incoming+0xb6>
            /* Complete message with no extra headers of payload received */
            mqtt_message_received(client, fixed_hdr_idx, 0, 0);
 800bd46:	7df9      	ldrb	r1, [r7, #23]
 800bd48:	2300      	movs	r3, #0
 800bd4a:	2200      	movs	r2, #0
 800bd4c:	6878      	ldr	r0, [r7, #4]
 800bd4e:	f7ff fdf3 	bl	800b938 <mqtt_message_received>
            client->msg_idx = 0;
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	2200      	movs	r2, #0
 800bd56:	669a      	str	r2, [r3, #104]	; 0x68
            fixed_hdr_idx = 0;
 800bd58:	2300      	movs	r3, #0
 800bd5a:	75fb      	strb	r3, [r7, #23]
 800bd5c:	e06f      	b.n	800be3e <mqtt_parse_incoming+0x196>
          } else {
            /* Bytes remaining in message (changes remaining length if this is
               not the first segment of this message) */
            msg_rem_len = (msg_rem_len + fixed_hdr_idx) - client->msg_idx;
 800bd5e:	7dfa      	ldrb	r2, [r7, #23]
 800bd60:	69bb      	ldr	r3, [r7, #24]
 800bd62:	441a      	add	r2, r3
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bd68:	1ad3      	subs	r3, r2, r3
 800bd6a:	61bb      	str	r3, [r7, #24]
      if (fixed_hdr_idx >= 2) {
 800bd6c:	e067      	b.n	800be3e <mqtt_parse_incoming+0x196>
      }
    } else {
      /* Fixed header has been parsed, parse variable header */
      u16_t cpy_len, cpy_start, buffer_space;

      cpy_start = (client->msg_idx - fixed_hdr_idx) % (MQTT_VAR_HEADER_BUFFER_LEN - fixed_hdr_idx) + fixed_hdr_idx;
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800bd72:	7dfb      	ldrb	r3, [r7, #23]
 800bd74:	1ad3      	subs	r3, r2, r3
 800bd76:	7dfa      	ldrb	r2, [r7, #23]
 800bd78:	f1c2 0280 	rsb	r2, r2, #128	; 0x80
 800bd7c:	fbb3 f1f2 	udiv	r1, r3, r2
 800bd80:	fb01 f202 	mul.w	r2, r1, r2
 800bd84:	1a9b      	subs	r3, r3, r2
 800bd86:	b29a      	uxth	r2, r3
 800bd88:	7dfb      	ldrb	r3, [r7, #23]
 800bd8a:	b29b      	uxth	r3, r3
 800bd8c:	4413      	add	r3, r2
 800bd8e:	827b      	strh	r3, [r7, #18]

      /* Allow to copy the lesser one of available length in input data or bytes remaining in message */
      cpy_len = (u16_t)LWIP_MIN((u16_t)(p->tot_len - in_offset), msg_rem_len);
 800bd90:	683b      	ldr	r3, [r7, #0]
 800bd92:	891a      	ldrh	r2, [r3, #8]
 800bd94:	8bfb      	ldrh	r3, [r7, #30]
 800bd96:	1ad3      	subs	r3, r2, r3
 800bd98:	b29b      	uxth	r3, r3
 800bd9a:	461a      	mov	r2, r3
 800bd9c:	69bb      	ldr	r3, [r7, #24]
 800bd9e:	4293      	cmp	r3, r2
 800bda0:	d905      	bls.n	800bdae <mqtt_parse_incoming+0x106>
 800bda2:	683b      	ldr	r3, [r7, #0]
 800bda4:	891a      	ldrh	r2, [r3, #8]
 800bda6:	8bfb      	ldrh	r3, [r7, #30]
 800bda8:	1ad3      	subs	r3, r2, r3
 800bdaa:	b29b      	uxth	r3, r3
 800bdac:	e001      	b.n	800bdb2 <mqtt_parse_incoming+0x10a>
 800bdae:	69bb      	ldr	r3, [r7, #24]
 800bdb0:	b29b      	uxth	r3, r3
 800bdb2:	82bb      	strh	r3, [r7, #20]

      /* Limit to available space in buffer */
      buffer_space = MQTT_VAR_HEADER_BUFFER_LEN - cpy_start;
 800bdb4:	8a7b      	ldrh	r3, [r7, #18]
 800bdb6:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800bdba:	823b      	strh	r3, [r7, #16]
      if (cpy_len > buffer_space) {
 800bdbc:	8aba      	ldrh	r2, [r7, #20]
 800bdbe:	8a3b      	ldrh	r3, [r7, #16]
 800bdc0:	429a      	cmp	r2, r3
 800bdc2:	d901      	bls.n	800bdc8 <mqtt_parse_incoming+0x120>
        cpy_len = buffer_space;
 800bdc4:	8a3b      	ldrh	r3, [r7, #16]
 800bdc6:	82bb      	strh	r3, [r7, #20]
      }
      pbuf_copy_partial(p, client->rx_buffer + cpy_start, cpy_len, in_offset);
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 800bdce:	8a7b      	ldrh	r3, [r7, #18]
 800bdd0:	18d1      	adds	r1, r2, r3
 800bdd2:	8bfb      	ldrh	r3, [r7, #30]
 800bdd4:	8aba      	ldrh	r2, [r7, #20]
 800bdd6:	6838      	ldr	r0, [r7, #0]
 800bdd8:	f002 fa62 	bl	800e2a0 <pbuf_copy_partial>

      /* Advance get and put indexes  */
      client->msg_idx += cpy_len;
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800bde0:	8abb      	ldrh	r3, [r7, #20]
 800bde2:	441a      	add	r2, r3
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	669a      	str	r2, [r3, #104]	; 0x68
      in_offset += cpy_len;
 800bde8:	8bfa      	ldrh	r2, [r7, #30]
 800bdea:	8abb      	ldrh	r3, [r7, #20]
 800bdec:	4413      	add	r3, r2
 800bdee:	83fb      	strh	r3, [r7, #30]
      msg_rem_len -= cpy_len;
 800bdf0:	8abb      	ldrh	r3, [r7, #20]
 800bdf2:	69ba      	ldr	r2, [r7, #24]
 800bdf4:	1ad3      	subs	r3, r2, r3
 800bdf6:	61bb      	str	r3, [r7, #24]

      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_parse_incoming: msg_idx: %"U32_F", cpy_len: %"U16_F", remaining %"U32_F"\n", client->msg_idx, cpy_len, msg_rem_len));
      if ((msg_rem_len == 0) || (cpy_len == buffer_space)) {
 800bdf8:	69bb      	ldr	r3, [r7, #24]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d003      	beq.n	800be06 <mqtt_parse_incoming+0x15e>
 800bdfe:	8aba      	ldrh	r2, [r7, #20]
 800be00:	8a3b      	ldrh	r3, [r7, #16]
 800be02:	429a      	cmp	r2, r3
 800be04:	d11b      	bne.n	800be3e <mqtt_parse_incoming+0x196>
        /* Whole message received or buffer is full */
        mqtt_connection_status_t res = mqtt_message_received(client, fixed_hdr_idx, (cpy_start + cpy_len) - fixed_hdr_idx, msg_rem_len);
 800be06:	8a7a      	ldrh	r2, [r7, #18]
 800be08:	8abb      	ldrh	r3, [r7, #20]
 800be0a:	4413      	add	r3, r2
 800be0c:	b29a      	uxth	r2, r3
 800be0e:	7dfb      	ldrb	r3, [r7, #23]
 800be10:	b29b      	uxth	r3, r3
 800be12:	1ad3      	subs	r3, r2, r3
 800be14:	b29a      	uxth	r2, r3
 800be16:	7df9      	ldrb	r1, [r7, #23]
 800be18:	69bb      	ldr	r3, [r7, #24]
 800be1a:	6878      	ldr	r0, [r7, #4]
 800be1c:	f7ff fd8c 	bl	800b938 <mqtt_message_received>
 800be20:	4603      	mov	r3, r0
 800be22:	81fb      	strh	r3, [r7, #14]
        if (res != MQTT_CONNECT_ACCEPTED) {
 800be24:	89fb      	ldrh	r3, [r7, #14]
 800be26:	2b00      	cmp	r3, #0
 800be28:	d001      	beq.n	800be2e <mqtt_parse_incoming+0x186>
          return res;
 800be2a:	89fb      	ldrh	r3, [r7, #14]
 800be2c:	e00e      	b.n	800be4c <mqtt_parse_incoming+0x1a4>
        }
        if (msg_rem_len == 0) {
 800be2e:	69bb      	ldr	r3, [r7, #24]
 800be30:	2b00      	cmp	r3, #0
 800be32:	d104      	bne.n	800be3e <mqtt_parse_incoming+0x196>
          /* Reset parser state */
          client->msg_idx = 0;
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	2200      	movs	r2, #0
 800be38:	669a      	str	r2, [r3, #104]	; 0x68
          /* msg_tot_len = 0; */
          fixed_hdr_idx = 0;
 800be3a:	2300      	movs	r3, #0
 800be3c:	75fb      	strb	r3, [r7, #23]
  while (p->tot_len > in_offset) {
 800be3e:	683b      	ldr	r3, [r7, #0]
 800be40:	891b      	ldrh	r3, [r3, #8]
 800be42:	8bfa      	ldrh	r2, [r7, #30]
 800be44:	429a      	cmp	r2, r3
 800be46:	f4ff af3d 	bcc.w	800bcc4 <mqtt_parse_incoming+0x1c>
        }
      }
    }
  }
  return MQTT_CONNECT_ACCEPTED;
 800be4a:	2300      	movs	r3, #0
}
 800be4c:	4618      	mov	r0, r3
 800be4e:	3720      	adds	r7, #32
 800be50:	46bd      	mov	sp, r7
 800be52:	bd80      	pop	{r7, pc}

0800be54 <mqtt_tcp_recv_cb>:
 * @param err Passed as return value if not ERR_OK
 * @return ERR_OK or err passed into callback
 */
static err_t
mqtt_tcp_recv_cb(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800be54:	b580      	push	{r7, lr}
 800be56:	b086      	sub	sp, #24
 800be58:	af00      	add	r7, sp, #0
 800be5a:	60f8      	str	r0, [r7, #12]
 800be5c:	60b9      	str	r1, [r7, #8]
 800be5e:	607a      	str	r2, [r7, #4]
 800be60:	70fb      	strb	r3, [r7, #3]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	617b      	str	r3, [r7, #20]
  LWIP_ASSERT("mqtt_tcp_recv_cb: client != NULL", client != NULL);
 800be66:	697b      	ldr	r3, [r7, #20]
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d106      	bne.n	800be7a <mqtt_tcp_recv_cb+0x26>
 800be6c:	4b24      	ldr	r3, [pc, #144]	; (800bf00 <mqtt_tcp_recv_cb+0xac>)
 800be6e:	f240 32a7 	movw	r2, #935	; 0x3a7
 800be72:	4924      	ldr	r1, [pc, #144]	; (800bf04 <mqtt_tcp_recv_cb+0xb0>)
 800be74:	4824      	ldr	r0, [pc, #144]	; (800bf08 <mqtt_tcp_recv_cb+0xb4>)
 800be76:	f00e fc95 	bl	801a7a4 <iprintf>
  LWIP_ASSERT("mqtt_tcp_recv_cb: client->conn == pcb", client->conn == pcb);
 800be7a:	697b      	ldr	r3, [r7, #20]
 800be7c:	68db      	ldr	r3, [r3, #12]
 800be7e:	68ba      	ldr	r2, [r7, #8]
 800be80:	429a      	cmp	r2, r3
 800be82:	d006      	beq.n	800be92 <mqtt_tcp_recv_cb+0x3e>
 800be84:	4b1e      	ldr	r3, [pc, #120]	; (800bf00 <mqtt_tcp_recv_cb+0xac>)
 800be86:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800be8a:	4920      	ldr	r1, [pc, #128]	; (800bf0c <mqtt_tcp_recv_cb+0xb8>)
 800be8c:	481e      	ldr	r0, [pc, #120]	; (800bf08 <mqtt_tcp_recv_cb+0xb4>)
 800be8e:	f00e fc89 	bl	801a7a4 <iprintf>

  if (p == NULL) {
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	2b00      	cmp	r3, #0
 800be96:	d105      	bne.n	800bea4 <mqtt_tcp_recv_cb+0x50>
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_recv_cb: Recv pbuf=NULL, remote has closed connection\n"));
    mqtt_close(client, MQTT_CONNECT_DISCONNECTED);
 800be98:	f44f 7180 	mov.w	r1, #256	; 0x100
 800be9c:	6978      	ldr	r0, [r7, #20]
 800be9e:	f7ff fbfb 	bl	800b698 <mqtt_close>
 800bea2:	e027      	b.n	800bef4 <mqtt_tcp_recv_cb+0xa0>
  } else {
    mqtt_connection_status_t res;
    if (err != ERR_OK) {
 800bea4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d005      	beq.n	800beb8 <mqtt_tcp_recv_cb+0x64>
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_tcp_recv_cb: Recv err=%d\n", err));
      pbuf_free(p);
 800beac:	6878      	ldr	r0, [r7, #4]
 800beae:	f001 fff3 	bl	800de98 <pbuf_free>
      return err;
 800beb2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800beb6:	e01e      	b.n	800bef6 <mqtt_tcp_recv_cb+0xa2>
    }

    /* Tell remote that data has been received */
    altcp_recved(pcb, p->tot_len);
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	891b      	ldrh	r3, [r3, #8]
 800bebc:	4619      	mov	r1, r3
 800bebe:	68b8      	ldr	r0, [r7, #8]
 800bec0:	f002 feec 	bl	800ec9c <tcp_recved>
    res = mqtt_parse_incoming(client, p);
 800bec4:	6879      	ldr	r1, [r7, #4]
 800bec6:	6978      	ldr	r0, [r7, #20]
 800bec8:	f7ff feee 	bl	800bca8 <mqtt_parse_incoming>
 800becc:	4603      	mov	r3, r0
 800bece:	827b      	strh	r3, [r7, #18]
    pbuf_free(p);
 800bed0:	6878      	ldr	r0, [r7, #4]
 800bed2:	f001 ffe1 	bl	800de98 <pbuf_free>

    if (res != MQTT_CONNECT_ACCEPTED) {
 800bed6:	8a7b      	ldrh	r3, [r7, #18]
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d004      	beq.n	800bee6 <mqtt_tcp_recv_cb+0x92>
      mqtt_close(client, res);
 800bedc:	8a7b      	ldrh	r3, [r7, #18]
 800bede:	4619      	mov	r1, r3
 800bee0:	6978      	ldr	r0, [r7, #20]
 800bee2:	f7ff fbd9 	bl	800b698 <mqtt_close>
    }
    /* If keep alive functionality is used */
    if (client->keep_alive != 0) {
 800bee6:	697b      	ldr	r3, [r7, #20]
 800bee8:	885b      	ldrh	r3, [r3, #2]
 800beea:	2b00      	cmp	r3, #0
 800beec:	d002      	beq.n	800bef4 <mqtt_tcp_recv_cb+0xa0>
      /* Reset server alive watchdog */
      client->server_watchdog = 0;
 800beee:	697b      	ldr	r3, [r7, #20]
 800bef0:	2200      	movs	r2, #0
 800bef2:	809a      	strh	r2, [r3, #4]
    }

  }
  return ERR_OK;
 800bef4:	2300      	movs	r3, #0
}
 800bef6:	4618      	mov	r0, r3
 800bef8:	3718      	adds	r7, #24
 800befa:	46bd      	mov	sp, r7
 800befc:	bd80      	pop	{r7, pc}
 800befe:	bf00      	nop
 800bf00:	0801b4ec 	.word	0x0801b4ec
 800bf04:	0801b78c 	.word	0x0801b78c
 800bf08:	0801b564 	.word	0x0801b564
 800bf0c:	0801b7b0 	.word	0x0801b7b0

0800bf10 <mqtt_tcp_sent_cb>:
 * @param len Number of bytes sent
 * @return ERR_OK
 */
static err_t
mqtt_tcp_sent_cb(void *arg, struct altcp_pcb *tpcb, u16_t len)
{
 800bf10:	b580      	push	{r7, lr}
 800bf12:	b086      	sub	sp, #24
 800bf14:	af00      	add	r7, sp, #0
 800bf16:	60f8      	str	r0, [r7, #12]
 800bf18:	60b9      	str	r1, [r7, #8]
 800bf1a:	4613      	mov	r3, r2
 800bf1c:	80fb      	strh	r3, [r7, #6]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(tpcb);
  LWIP_UNUSED_ARG(len);

  if (client->conn_state == MQTT_CONNECTED) {
 800bf22:	697b      	ldr	r3, [r7, #20]
 800bf24:	7a9b      	ldrb	r3, [r3, #10]
 800bf26:	2b03      	cmp	r3, #3
 800bf28:	d127      	bne.n	800bf7a <mqtt_tcp_sent_cb+0x6a>
    struct mqtt_request_t *r;

    /* Reset keep-alive send timer and server watchdog */
    client->cyclic_tick = 0;
 800bf2a:	697b      	ldr	r3, [r7, #20]
 800bf2c:	2200      	movs	r2, #0
 800bf2e:	801a      	strh	r2, [r3, #0]
    client->server_watchdog = 0;
 800bf30:	697b      	ldr	r3, [r7, #20]
 800bf32:	2200      	movs	r2, #0
 800bf34:	809a      	strh	r2, [r3, #4]
    /* QoS 0 publish has no response from server, so call its callbacks here */
    while ((r = mqtt_take_request(&client->pend_req_queue, 0)) != NULL) {
 800bf36:	e00d      	b.n	800bf54 <mqtt_tcp_sent_cb+0x44>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_sent_cb: Calling QoS 0 publish complete callback\n"));
      if (r->cb != NULL) {
 800bf38:	693b      	ldr	r3, [r7, #16]
 800bf3a:	685b      	ldr	r3, [r3, #4]
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d006      	beq.n	800bf4e <mqtt_tcp_sent_cb+0x3e>
        r->cb(r->arg, ERR_OK);
 800bf40:	693b      	ldr	r3, [r7, #16]
 800bf42:	685b      	ldr	r3, [r3, #4]
 800bf44:	693a      	ldr	r2, [r7, #16]
 800bf46:	6892      	ldr	r2, [r2, #8]
 800bf48:	2100      	movs	r1, #0
 800bf4a:	4610      	mov	r0, r2
 800bf4c:	4798      	blx	r3
      }
      mqtt_delete_request(r);
 800bf4e:	6938      	ldr	r0, [r7, #16]
 800bf50:	f7ff f9c6 	bl	800b2e0 <mqtt_delete_request>
    while ((r = mqtt_take_request(&client->pend_req_queue, 0)) != NULL) {
 800bf54:	697b      	ldr	r3, [r7, #20]
 800bf56:	3318      	adds	r3, #24
 800bf58:	2100      	movs	r1, #0
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	f7ff f9d0 	bl	800b300 <mqtt_take_request>
 800bf60:	6138      	str	r0, [r7, #16]
 800bf62:	693b      	ldr	r3, [r7, #16]
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d1e7      	bne.n	800bf38 <mqtt_tcp_sent_cb+0x28>
    }
    /* Try send any remaining buffers from output queue */
    mqtt_output_send(&client->output, client->conn);
 800bf68:	697b      	ldr	r3, [r7, #20]
 800bf6a:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 800bf6e:	697b      	ldr	r3, [r7, #20]
 800bf70:	68db      	ldr	r3, [r3, #12]
 800bf72:	4619      	mov	r1, r3
 800bf74:	4610      	mov	r0, r2
 800bf76:	f7ff f8ff 	bl	800b178 <mqtt_output_send>
  }
  return ERR_OK;
 800bf7a:	2300      	movs	r3, #0
}
 800bf7c:	4618      	mov	r0, r3
 800bf7e:	3718      	adds	r7, #24
 800bf80:	46bd      	mov	sp, r7
 800bf82:	bd80      	pop	{r7, pc}

0800bf84 <mqtt_tcp_err_cb>:
 * @param arg MQTT client
 * @param err Error encountered
 */
static void
mqtt_tcp_err_cb(void *arg, err_t err)
{
 800bf84:	b580      	push	{r7, lr}
 800bf86:	b084      	sub	sp, #16
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	6078      	str	r0, [r7, #4]
 800bf8c:	460b      	mov	r3, r1
 800bf8e:	70fb      	strb	r3, [r7, #3]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err); /* only used for debug output */
  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_err_cb: TCP error callback: error %d, arg: %p\n", err, arg));
  LWIP_ASSERT("mqtt_tcp_err_cb: client != NULL", client != NULL);
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d106      	bne.n	800bfa8 <mqtt_tcp_err_cb+0x24>
 800bf9a:	4b09      	ldr	r3, [pc, #36]	; (800bfc0 <mqtt_tcp_err_cb+0x3c>)
 800bf9c:	f240 32f6 	movw	r2, #1014	; 0x3f6
 800bfa0:	4908      	ldr	r1, [pc, #32]	; (800bfc4 <mqtt_tcp_err_cb+0x40>)
 800bfa2:	4809      	ldr	r0, [pc, #36]	; (800bfc8 <mqtt_tcp_err_cb+0x44>)
 800bfa4:	f00e fbfe 	bl	801a7a4 <iprintf>
  /* Set conn to null before calling close as pcb is already deallocated*/
  client->conn = 0;
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	2200      	movs	r2, #0
 800bfac:	60da      	str	r2, [r3, #12]
  mqtt_close(client, MQTT_CONNECT_DISCONNECTED);
 800bfae:	f44f 7180 	mov.w	r1, #256	; 0x100
 800bfb2:	68f8      	ldr	r0, [r7, #12]
 800bfb4:	f7ff fb70 	bl	800b698 <mqtt_close>
}
 800bfb8:	bf00      	nop
 800bfba:	3710      	adds	r7, #16
 800bfbc:	46bd      	mov	sp, r7
 800bfbe:	bd80      	pop	{r7, pc}
 800bfc0:	0801b4ec 	.word	0x0801b4ec
 800bfc4:	0801b7d8 	.word	0x0801b7d8
 800bfc8:	0801b564 	.word	0x0801b564

0800bfcc <mqtt_tcp_poll_cb>:
 * @param tpcb TCP connection handle
 * @return err ERR_OK
 */
static err_t
mqtt_tcp_poll_cb(void *arg, struct altcp_pcb *tpcb)
{
 800bfcc:	b580      	push	{r7, lr}
 800bfce:	b084      	sub	sp, #16
 800bfd0:	af00      	add	r7, sp, #0
 800bfd2:	6078      	str	r0, [r7, #4]
 800bfd4:	6039      	str	r1, [r7, #0]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	60fb      	str	r3, [r7, #12]
  if (client->conn_state == MQTT_CONNECTED) {
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	7a9b      	ldrb	r3, [r3, #10]
 800bfde:	2b03      	cmp	r3, #3
 800bfe0:	d105      	bne.n	800bfee <mqtt_tcp_poll_cb+0x22>
    /* Try send any remaining buffers from output queue */
    mqtt_output_send(&client->output, tpcb);
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	33ec      	adds	r3, #236	; 0xec
 800bfe6:	6839      	ldr	r1, [r7, #0]
 800bfe8:	4618      	mov	r0, r3
 800bfea:	f7ff f8c5 	bl	800b178 <mqtt_output_send>
  }
  return ERR_OK;
 800bfee:	2300      	movs	r3, #0
}
 800bff0:	4618      	mov	r0, r3
 800bff2:	3710      	adds	r7, #16
 800bff4:	46bd      	mov	sp, r7
 800bff6:	bd80      	pop	{r7, pc}

0800bff8 <mqtt_tcp_connect_cb>:
 * @param err Always ERR_OK, mqtt_tcp_err_cb is called in case of error
 * @return ERR_OK
 */
static err_t
mqtt_tcp_connect_cb(void *arg, struct altcp_pcb *tpcb, err_t err)
{
 800bff8:	b580      	push	{r7, lr}
 800bffa:	b086      	sub	sp, #24
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	60f8      	str	r0, [r7, #12]
 800c000:	60b9      	str	r1, [r7, #8]
 800c002:	4613      	mov	r3, r2
 800c004:	71fb      	strb	r3, [r7, #7]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	617b      	str	r3, [r7, #20]

  if (err != ERR_OK) {
 800c00a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d002      	beq.n	800c018 <mqtt_tcp_connect_cb+0x20>
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_tcp_connect_cb: TCP connect error %d\n", err));
    return err;
 800c012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c016:	e025      	b.n	800c064 <mqtt_tcp_connect_cb+0x6c>
  }

  /* Initiate receiver state */
  client->msg_idx = 0;
 800c018:	697b      	ldr	r3, [r7, #20]
 800c01a:	2200      	movs	r2, #0
 800c01c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Setup TCP callbacks */
  altcp_recv(tpcb, mqtt_tcp_recv_cb);
 800c01e:	4913      	ldr	r1, [pc, #76]	; (800c06c <mqtt_tcp_connect_cb+0x74>)
 800c020:	68b8      	ldr	r0, [r7, #8]
 800c022:	f003 fe29 	bl	800fc78 <tcp_recv>
  altcp_sent(tpcb, mqtt_tcp_sent_cb);
 800c026:	4912      	ldr	r1, [pc, #72]	; (800c070 <mqtt_tcp_connect_cb+0x78>)
 800c028:	68b8      	ldr	r0, [r7, #8]
 800c02a:	f003 fe47 	bl	800fcbc <tcp_sent>
  altcp_poll(tpcb, mqtt_tcp_poll_cb, 2);
 800c02e:	2202      	movs	r2, #2
 800c030:	4910      	ldr	r1, [pc, #64]	; (800c074 <mqtt_tcp_connect_cb+0x7c>)
 800c032:	68b8      	ldr	r0, [r7, #8]
 800c034:	f003 fe86 	bl	800fd44 <tcp_poll>

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_connect_cb: TCP connection established to server\n"));
  /* Enter MQTT connect state */
  client->conn_state = MQTT_CONNECTING;
 800c038:	697b      	ldr	r3, [r7, #20]
 800c03a:	2202      	movs	r2, #2
 800c03c:	729a      	strb	r2, [r3, #10]

  /* Start cyclic timer */
  sys_timeout(MQTT_CYCLIC_TIMER_INTERVAL * 1000, mqtt_cyclic_timer, client);
 800c03e:	697a      	ldr	r2, [r7, #20]
 800c040:	490d      	ldr	r1, [pc, #52]	; (800c078 <mqtt_tcp_connect_cb+0x80>)
 800c042:	f241 3088 	movw	r0, #5000	; 0x1388
 800c046:	f008 fb71 	bl	801472c <sys_timeout>
  client->cyclic_tick = 0;
 800c04a:	697b      	ldr	r3, [r7, #20]
 800c04c:	2200      	movs	r2, #0
 800c04e:	801a      	strh	r2, [r3, #0]

  /* Start transmission from output queue, connect message is the first one out*/
  mqtt_output_send(&client->output, client->conn);
 800c050:	697b      	ldr	r3, [r7, #20]
 800c052:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 800c056:	697b      	ldr	r3, [r7, #20]
 800c058:	68db      	ldr	r3, [r3, #12]
 800c05a:	4619      	mov	r1, r3
 800c05c:	4610      	mov	r0, r2
 800c05e:	f7ff f88b 	bl	800b178 <mqtt_output_send>

  return ERR_OK;
 800c062:	2300      	movs	r3, #0
}
 800c064:	4618      	mov	r0, r3
 800c066:	3718      	adds	r7, #24
 800c068:	46bd      	mov	sp, r7
 800c06a:	bd80      	pop	{r7, pc}
 800c06c:	0800be55 	.word	0x0800be55
 800c070:	0800bf11 	.word	0x0800bf11
 800c074:	0800bfcd 	.word	0x0800bfcd
 800c078:	0800b759 	.word	0x0800b759

0800c07c <mqtt_client_new>:
 * Create a new MQTT client instance
 * @return Pointer to instance on success, NULL otherwise
 */
mqtt_client_t *
mqtt_client_new(void)
{
 800c07c:	b580      	push	{r7, lr}
 800c07e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();
  return (mqtt_client_t *)mem_calloc(1, sizeof(mqtt_client_t));
 800c080:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 800c084:	2001      	movs	r0, #1
 800c086:	f000 ff8d 	bl	800cfa4 <mem_calloc>
 800c08a:	4603      	mov	r3, r0
}
 800c08c:	4618      	mov	r0, r3
 800c08e:	bd80      	pop	{r7, pc}

0800c090 <mqtt_client_connect>:
 * @return ERR_OK if successful, @see err_t enum for other results
 */
err_t
mqtt_client_connect(mqtt_client_t *client, const ip_addr_t *ip_addr, u16_t port, mqtt_connection_cb_t cb, void *arg,
                    const struct mqtt_connect_client_info_t *client_info)
{
 800c090:	b580      	push	{r7, lr}
 800c092:	b08c      	sub	sp, #48	; 0x30
 800c094:	af02      	add	r7, sp, #8
 800c096:	60f8      	str	r0, [r7, #12]
 800c098:	60b9      	str	r1, [r7, #8]
 800c09a:	603b      	str	r3, [r7, #0]
 800c09c:	4613      	mov	r3, r2
 800c09e:	80fb      	strh	r3, [r7, #6]
  err_t err;
  size_t len;
  u16_t client_id_length;
  /* Length is the sum of 2+"MQTT", protocol level, flags and keep alive */
  u16_t remaining_length = 2 + 4 + 1 + 1 + 2;
 800c0a0:	230a      	movs	r3, #10
 800c0a2:	84bb      	strh	r3, [r7, #36]	; 0x24
  u8_t flags = 0, will_topic_len = 0, will_msg_len = 0;
 800c0a4:	2300      	movs	r3, #0
 800c0a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c0aa:	2300      	movs	r3, #0
 800c0ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800c0b0:	2300      	movs	r3, #0
 800c0b2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  u16_t client_user_len = 0, client_pass_len = 0;
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	83fb      	strh	r3, [r7, #30]
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	83bb      	strh	r3, [r7, #28]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_client_connect: client != NULL", client != NULL);
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d106      	bne.n	800c0d2 <mqtt_client_connect+0x42>
 800c0c4:	4b9e      	ldr	r3, [pc, #632]	; (800c340 <mqtt_client_connect+0x2b0>)
 800c0c6:	f240 520f 	movw	r2, #1295	; 0x50f
 800c0ca:	499e      	ldr	r1, [pc, #632]	; (800c344 <mqtt_client_connect+0x2b4>)
 800c0cc:	489e      	ldr	r0, [pc, #632]	; (800c348 <mqtt_client_connect+0x2b8>)
 800c0ce:	f00e fb69 	bl	801a7a4 <iprintf>
  LWIP_ASSERT("mqtt_client_connect: ip_addr != NULL", ip_addr != NULL);
 800c0d2:	68bb      	ldr	r3, [r7, #8]
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d106      	bne.n	800c0e6 <mqtt_client_connect+0x56>
 800c0d8:	4b99      	ldr	r3, [pc, #612]	; (800c340 <mqtt_client_connect+0x2b0>)
 800c0da:	f44f 62a2 	mov.w	r2, #1296	; 0x510
 800c0de:	499b      	ldr	r1, [pc, #620]	; (800c34c <mqtt_client_connect+0x2bc>)
 800c0e0:	4899      	ldr	r0, [pc, #612]	; (800c348 <mqtt_client_connect+0x2b8>)
 800c0e2:	f00e fb5f 	bl	801a7a4 <iprintf>
  LWIP_ASSERT("mqtt_client_connect: client_info != NULL", client_info != NULL);
 800c0e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d106      	bne.n	800c0fa <mqtt_client_connect+0x6a>
 800c0ec:	4b94      	ldr	r3, [pc, #592]	; (800c340 <mqtt_client_connect+0x2b0>)
 800c0ee:	f240 5211 	movw	r2, #1297	; 0x511
 800c0f2:	4997      	ldr	r1, [pc, #604]	; (800c350 <mqtt_client_connect+0x2c0>)
 800c0f4:	4894      	ldr	r0, [pc, #592]	; (800c348 <mqtt_client_connect+0x2b8>)
 800c0f6:	f00e fb55 	bl	801a7a4 <iprintf>
  LWIP_ASSERT("mqtt_client_connect: client_info->client_id != NULL", client_info->client_id != NULL);
 800c0fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d106      	bne.n	800c110 <mqtt_client_connect+0x80>
 800c102:	4b8f      	ldr	r3, [pc, #572]	; (800c340 <mqtt_client_connect+0x2b0>)
 800c104:	f240 5212 	movw	r2, #1298	; 0x512
 800c108:	4992      	ldr	r1, [pc, #584]	; (800c354 <mqtt_client_connect+0x2c4>)
 800c10a:	488f      	ldr	r0, [pc, #572]	; (800c348 <mqtt_client_connect+0x2b8>)
 800c10c:	f00e fb4a 	bl	801a7a4 <iprintf>

  if (client->conn_state != TCP_DISCONNECTED) {
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	7a9b      	ldrb	r3, [r3, #10]
 800c114:	2b00      	cmp	r3, #0
 800c116:	d002      	beq.n	800c11e <mqtt_client_connect+0x8e>
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_client_connect: Already connected\n"));
    return ERR_ISCONN;
 800c118:	f06f 0309 	mvn.w	r3, #9
 800c11c:	e21f      	b.n	800c55e <mqtt_client_connect+0x4ce>
  }

  /* Wipe clean */
  memset(client, 0, sizeof(mqtt_client_t));
 800c11e:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
 800c122:	2100      	movs	r1, #0
 800c124:	68f8      	ldr	r0, [r7, #12]
 800c126:	f00e fa57 	bl	801a5d8 <memset>
  client->connect_arg = arg;
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c12e:	611a      	str	r2, [r3, #16]
  client->connect_cb = cb;
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	683a      	ldr	r2, [r7, #0]
 800c134:	615a      	str	r2, [r3, #20]
  client->keep_alive = client_info->keep_alive;
 800c136:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c138:	899a      	ldrh	r2, [r3, #12]
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	805a      	strh	r2, [r3, #2]
  mqtt_init_requests(client->req_list, LWIP_ARRAYSIZE(client->req_list));
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	331c      	adds	r3, #28
 800c142:	2104      	movs	r1, #4
 800c144:	4618      	mov	r0, r3
 800c146:	f7ff f9a9 	bl	800b49c <mqtt_init_requests>

  /* Build connect message */
  if (client_info->will_topic != NULL && client_info->will_msg != NULL) {
 800c14a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c14c:	691b      	ldr	r3, [r3, #16]
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d073      	beq.n	800c23a <mqtt_client_connect+0x1aa>
 800c152:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c154:	695b      	ldr	r3, [r3, #20]
 800c156:	2b00      	cmp	r3, #0
 800c158:	d06f      	beq.n	800c23a <mqtt_client_connect+0x1aa>
    flags |= MQTT_CONNECT_FLAG_WILL;
 800c15a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c15e:	f043 0304 	orr.w	r3, r3, #4
 800c162:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    flags |= (client_info->will_qos & 3) << 3;
 800c166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c168:	7e1b      	ldrb	r3, [r3, #24]
 800c16a:	00db      	lsls	r3, r3, #3
 800c16c:	b25b      	sxtb	r3, r3
 800c16e:	f003 0318 	and.w	r3, r3, #24
 800c172:	b25a      	sxtb	r2, r3
 800c174:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800c178:	4313      	orrs	r3, r2
 800c17a:	b25b      	sxtb	r3, r3
 800c17c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (client_info->will_retain) {
 800c180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c182:	7e5b      	ldrb	r3, [r3, #25]
 800c184:	2b00      	cmp	r3, #0
 800c186:	d005      	beq.n	800c194 <mqtt_client_connect+0x104>
      flags |= MQTT_CONNECT_FLAG_WILL_RETAIN;
 800c188:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c18c:	f043 0320 	orr.w	r3, r3, #32
 800c190:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    }
    len = strlen(client_info->will_topic);
 800c194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c196:	691b      	ldr	r3, [r3, #16]
 800c198:	4618      	mov	r0, r3
 800c19a:	f7f4 f869 	bl	8000270 <strlen>
 800c19e:	61b8      	str	r0, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: client_info->will_topic length overflow", len <= 0xFF, return ERR_VAL);
 800c1a0:	69bb      	ldr	r3, [r7, #24]
 800c1a2:	2bff      	cmp	r3, #255	; 0xff
 800c1a4:	d909      	bls.n	800c1ba <mqtt_client_connect+0x12a>
 800c1a6:	4b66      	ldr	r3, [pc, #408]	; (800c340 <mqtt_client_connect+0x2b0>)
 800c1a8:	f44f 62a5 	mov.w	r2, #1320	; 0x528
 800c1ac:	496a      	ldr	r1, [pc, #424]	; (800c358 <mqtt_client_connect+0x2c8>)
 800c1ae:	4866      	ldr	r0, [pc, #408]	; (800c348 <mqtt_client_connect+0x2b8>)
 800c1b0:	f00e faf8 	bl	801a7a4 <iprintf>
 800c1b4:	f06f 0305 	mvn.w	r3, #5
 800c1b8:	e1d1      	b.n	800c55e <mqtt_client_connect+0x4ce>
    LWIP_ERROR("mqtt_client_connect: client_info->will_topic length must be > 0", len > 0, return ERR_VAL);
 800c1ba:	69bb      	ldr	r3, [r7, #24]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d109      	bne.n	800c1d4 <mqtt_client_connect+0x144>
 800c1c0:	4b5f      	ldr	r3, [pc, #380]	; (800c340 <mqtt_client_connect+0x2b0>)
 800c1c2:	f240 5229 	movw	r2, #1321	; 0x529
 800c1c6:	4965      	ldr	r1, [pc, #404]	; (800c35c <mqtt_client_connect+0x2cc>)
 800c1c8:	485f      	ldr	r0, [pc, #380]	; (800c348 <mqtt_client_connect+0x2b8>)
 800c1ca:	f00e faeb 	bl	801a7a4 <iprintf>
 800c1ce:	f06f 0305 	mvn.w	r3, #5
 800c1d2:	e1c4      	b.n	800c55e <mqtt_client_connect+0x4ce>
    will_topic_len = (u8_t)len;
 800c1d4:	69bb      	ldr	r3, [r7, #24]
 800c1d6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    len = strlen(client_info->will_msg);
 800c1da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1dc:	695b      	ldr	r3, [r3, #20]
 800c1de:	4618      	mov	r0, r3
 800c1e0:	f7f4 f846 	bl	8000270 <strlen>
 800c1e4:	61b8      	str	r0, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: client_info->will_msg length overflow", len <= 0xFF, return ERR_VAL);
 800c1e6:	69bb      	ldr	r3, [r7, #24]
 800c1e8:	2bff      	cmp	r3, #255	; 0xff
 800c1ea:	d909      	bls.n	800c200 <mqtt_client_connect+0x170>
 800c1ec:	4b54      	ldr	r3, [pc, #336]	; (800c340 <mqtt_client_connect+0x2b0>)
 800c1ee:	f240 522c 	movw	r2, #1324	; 0x52c
 800c1f2:	495b      	ldr	r1, [pc, #364]	; (800c360 <mqtt_client_connect+0x2d0>)
 800c1f4:	4854      	ldr	r0, [pc, #336]	; (800c348 <mqtt_client_connect+0x2b8>)
 800c1f6:	f00e fad5 	bl	801a7a4 <iprintf>
 800c1fa:	f06f 0305 	mvn.w	r3, #5
 800c1fe:	e1ae      	b.n	800c55e <mqtt_client_connect+0x4ce>
    will_msg_len = (u8_t)len;
 800c200:	69bb      	ldr	r3, [r7, #24]
 800c202:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    len = remaining_length + 2 + will_topic_len + 2 + will_msg_len;
 800c206:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c208:	1c9a      	adds	r2, r3, #2
 800c20a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800c20e:	4413      	add	r3, r2
 800c210:	1c9a      	adds	r2, r3, #2
 800c212:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800c216:	4413      	add	r3, r2
 800c218:	61bb      	str	r3, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 800c21a:	69bb      	ldr	r3, [r7, #24]
 800c21c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c220:	d309      	bcc.n	800c236 <mqtt_client_connect+0x1a6>
 800c222:	4b47      	ldr	r3, [pc, #284]	; (800c340 <mqtt_client_connect+0x2b0>)
 800c224:	f240 522f 	movw	r2, #1327	; 0x52f
 800c228:	494e      	ldr	r1, [pc, #312]	; (800c364 <mqtt_client_connect+0x2d4>)
 800c22a:	4847      	ldr	r0, [pc, #284]	; (800c348 <mqtt_client_connect+0x2b8>)
 800c22c:	f00e faba 	bl	801a7a4 <iprintf>
 800c230:	f06f 0305 	mvn.w	r3, #5
 800c234:	e193      	b.n	800c55e <mqtt_client_connect+0x4ce>
    remaining_length = (u16_t)len;
 800c236:	69bb      	ldr	r3, [r7, #24]
 800c238:	84bb      	strh	r3, [r7, #36]	; 0x24
  }
  if (client_info->client_user != NULL) {
 800c23a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c23c:	685b      	ldr	r3, [r3, #4]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d03d      	beq.n	800c2be <mqtt_client_connect+0x22e>
    flags |= MQTT_CONNECT_FLAG_USERNAME;
 800c242:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c246:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c24a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    len = strlen(client_info->client_user);
 800c24e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c250:	685b      	ldr	r3, [r3, #4]
 800c252:	4618      	mov	r0, r3
 800c254:	f7f4 f80c 	bl	8000270 <strlen>
 800c258:	61b8      	str	r0, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: client_info->client_user length overflow", len <= 0xFFFF, return ERR_VAL);
 800c25a:	69bb      	ldr	r3, [r7, #24]
 800c25c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c260:	d309      	bcc.n	800c276 <mqtt_client_connect+0x1e6>
 800c262:	4b37      	ldr	r3, [pc, #220]	; (800c340 <mqtt_client_connect+0x2b0>)
 800c264:	f240 5235 	movw	r2, #1333	; 0x535
 800c268:	493f      	ldr	r1, [pc, #252]	; (800c368 <mqtt_client_connect+0x2d8>)
 800c26a:	4837      	ldr	r0, [pc, #220]	; (800c348 <mqtt_client_connect+0x2b8>)
 800c26c:	f00e fa9a 	bl	801a7a4 <iprintf>
 800c270:	f06f 0305 	mvn.w	r3, #5
 800c274:	e173      	b.n	800c55e <mqtt_client_connect+0x4ce>
    LWIP_ERROR("mqtt_client_connect: client_info->client_user length must be > 0", len > 0, return ERR_VAL);
 800c276:	69bb      	ldr	r3, [r7, #24]
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d109      	bne.n	800c290 <mqtt_client_connect+0x200>
 800c27c:	4b30      	ldr	r3, [pc, #192]	; (800c340 <mqtt_client_connect+0x2b0>)
 800c27e:	f240 5236 	movw	r2, #1334	; 0x536
 800c282:	493a      	ldr	r1, [pc, #232]	; (800c36c <mqtt_client_connect+0x2dc>)
 800c284:	4830      	ldr	r0, [pc, #192]	; (800c348 <mqtt_client_connect+0x2b8>)
 800c286:	f00e fa8d 	bl	801a7a4 <iprintf>
 800c28a:	f06f 0305 	mvn.w	r3, #5
 800c28e:	e166      	b.n	800c55e <mqtt_client_connect+0x4ce>
    client_user_len = (u16_t)len;
 800c290:	69bb      	ldr	r3, [r7, #24]
 800c292:	83fb      	strh	r3, [r7, #30]
    len = remaining_length + 2 + client_user_len;
 800c294:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c296:	1c9a      	adds	r2, r3, #2
 800c298:	8bfb      	ldrh	r3, [r7, #30]
 800c29a:	4413      	add	r3, r2
 800c29c:	61bb      	str	r3, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 800c29e:	69bb      	ldr	r3, [r7, #24]
 800c2a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c2a4:	d309      	bcc.n	800c2ba <mqtt_client_connect+0x22a>
 800c2a6:	4b26      	ldr	r3, [pc, #152]	; (800c340 <mqtt_client_connect+0x2b0>)
 800c2a8:	f240 5239 	movw	r2, #1337	; 0x539
 800c2ac:	492d      	ldr	r1, [pc, #180]	; (800c364 <mqtt_client_connect+0x2d4>)
 800c2ae:	4826      	ldr	r0, [pc, #152]	; (800c348 <mqtt_client_connect+0x2b8>)
 800c2b0:	f00e fa78 	bl	801a7a4 <iprintf>
 800c2b4:	f06f 0305 	mvn.w	r3, #5
 800c2b8:	e151      	b.n	800c55e <mqtt_client_connect+0x4ce>
    remaining_length = (u16_t)len;
 800c2ba:	69bb      	ldr	r3, [r7, #24]
 800c2bc:	84bb      	strh	r3, [r7, #36]	; 0x24
  }
  if (client_info->client_pass != NULL) {
 800c2be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2c0:	689b      	ldr	r3, [r3, #8]
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d05a      	beq.n	800c37c <mqtt_client_connect+0x2ec>
    flags |= MQTT_CONNECT_FLAG_PASSWORD;
 800c2c6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c2ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c2ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    len = strlen(client_info->client_pass);
 800c2d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2d4:	689b      	ldr	r3, [r3, #8]
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	f7f3 ffca 	bl	8000270 <strlen>
 800c2dc:	61b8      	str	r0, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: client_info->client_pass length overflow", len <= 0xFFFF, return ERR_VAL);
 800c2de:	69bb      	ldr	r3, [r7, #24]
 800c2e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c2e4:	d309      	bcc.n	800c2fa <mqtt_client_connect+0x26a>
 800c2e6:	4b16      	ldr	r3, [pc, #88]	; (800c340 <mqtt_client_connect+0x2b0>)
 800c2e8:	f240 523f 	movw	r2, #1343	; 0x53f
 800c2ec:	4920      	ldr	r1, [pc, #128]	; (800c370 <mqtt_client_connect+0x2e0>)
 800c2ee:	4816      	ldr	r0, [pc, #88]	; (800c348 <mqtt_client_connect+0x2b8>)
 800c2f0:	f00e fa58 	bl	801a7a4 <iprintf>
 800c2f4:	f06f 0305 	mvn.w	r3, #5
 800c2f8:	e131      	b.n	800c55e <mqtt_client_connect+0x4ce>
    LWIP_ERROR("mqtt_client_connect: client_info->client_pass length must be > 0", len > 0, return ERR_VAL);
 800c2fa:	69bb      	ldr	r3, [r7, #24]
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d109      	bne.n	800c314 <mqtt_client_connect+0x284>
 800c300:	4b0f      	ldr	r3, [pc, #60]	; (800c340 <mqtt_client_connect+0x2b0>)
 800c302:	f44f 62a8 	mov.w	r2, #1344	; 0x540
 800c306:	491b      	ldr	r1, [pc, #108]	; (800c374 <mqtt_client_connect+0x2e4>)
 800c308:	480f      	ldr	r0, [pc, #60]	; (800c348 <mqtt_client_connect+0x2b8>)
 800c30a:	f00e fa4b 	bl	801a7a4 <iprintf>
 800c30e:	f06f 0305 	mvn.w	r3, #5
 800c312:	e124      	b.n	800c55e <mqtt_client_connect+0x4ce>
    client_pass_len = (u16_t)len;
 800c314:	69bb      	ldr	r3, [r7, #24]
 800c316:	83bb      	strh	r3, [r7, #28]
    len = remaining_length + 2 + client_pass_len;
 800c318:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c31a:	1c9a      	adds	r2, r3, #2
 800c31c:	8bbb      	ldrh	r3, [r7, #28]
 800c31e:	4413      	add	r3, r2
 800c320:	61bb      	str	r3, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 800c322:	69bb      	ldr	r3, [r7, #24]
 800c324:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c328:	d326      	bcc.n	800c378 <mqtt_client_connect+0x2e8>
 800c32a:	4b05      	ldr	r3, [pc, #20]	; (800c340 <mqtt_client_connect+0x2b0>)
 800c32c:	f240 5243 	movw	r2, #1347	; 0x543
 800c330:	490c      	ldr	r1, [pc, #48]	; (800c364 <mqtt_client_connect+0x2d4>)
 800c332:	4805      	ldr	r0, [pc, #20]	; (800c348 <mqtt_client_connect+0x2b8>)
 800c334:	f00e fa36 	bl	801a7a4 <iprintf>
 800c338:	f06f 0305 	mvn.w	r3, #5
 800c33c:	e10f      	b.n	800c55e <mqtt_client_connect+0x4ce>
 800c33e:	bf00      	nop
 800c340:	0801b4ec 	.word	0x0801b4ec
 800c344:	0801b96c 	.word	0x0801b96c
 800c348:	0801b564 	.word	0x0801b564
 800c34c:	0801b990 	.word	0x0801b990
 800c350:	0801b9b8 	.word	0x0801b9b8
 800c354:	0801b9e4 	.word	0x0801b9e4
 800c358:	0801ba18 	.word	0x0801ba18
 800c35c:	0801ba58 	.word	0x0801ba58
 800c360:	0801ba98 	.word	0x0801ba98
 800c364:	0801bad4 	.word	0x0801bad4
 800c368:	0801bb04 	.word	0x0801bb04
 800c36c:	0801bb44 	.word	0x0801bb44
 800c370:	0801bb88 	.word	0x0801bb88
 800c374:	0801bbc8 	.word	0x0801bbc8
    remaining_length = (u16_t)len;
 800c378:	69bb      	ldr	r3, [r7, #24]
 800c37a:	84bb      	strh	r3, [r7, #36]	; 0x24
  }

  /* Don't complicate things, always connect using clean session */
  flags |= MQTT_CONNECT_FLAG_CLEAN_SESSION;
 800c37c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c380:	f043 0302 	orr.w	r3, r3, #2
 800c384:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  len = strlen(client_info->client_id);
 800c388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	4618      	mov	r0, r3
 800c38e:	f7f3 ff6f 	bl	8000270 <strlen>
 800c392:	61b8      	str	r0, [r7, #24]
  LWIP_ERROR("mqtt_client_connect: client_info->client_id length overflow", len <= 0xFFFF, return ERR_VAL);
 800c394:	69bb      	ldr	r3, [r7, #24]
 800c396:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c39a:	d309      	bcc.n	800c3b0 <mqtt_client_connect+0x320>
 800c39c:	4b72      	ldr	r3, [pc, #456]	; (800c568 <mqtt_client_connect+0x4d8>)
 800c39e:	f240 524b 	movw	r2, #1355	; 0x54b
 800c3a2:	4972      	ldr	r1, [pc, #456]	; (800c56c <mqtt_client_connect+0x4dc>)
 800c3a4:	4872      	ldr	r0, [pc, #456]	; (800c570 <mqtt_client_connect+0x4e0>)
 800c3a6:	f00e f9fd 	bl	801a7a4 <iprintf>
 800c3aa:	f06f 0305 	mvn.w	r3, #5
 800c3ae:	e0d6      	b.n	800c55e <mqtt_client_connect+0x4ce>
  client_id_length = (u16_t)len;
 800c3b0:	69bb      	ldr	r3, [r7, #24]
 800c3b2:	82fb      	strh	r3, [r7, #22]
  len = remaining_length + 2 + client_id_length;
 800c3b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c3b6:	1c9a      	adds	r2, r3, #2
 800c3b8:	8afb      	ldrh	r3, [r7, #22]
 800c3ba:	4413      	add	r3, r2
 800c3bc:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 800c3be:	69bb      	ldr	r3, [r7, #24]
 800c3c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c3c4:	d309      	bcc.n	800c3da <mqtt_client_connect+0x34a>
 800c3c6:	4b68      	ldr	r3, [pc, #416]	; (800c568 <mqtt_client_connect+0x4d8>)
 800c3c8:	f240 524e 	movw	r2, #1358	; 0x54e
 800c3cc:	4969      	ldr	r1, [pc, #420]	; (800c574 <mqtt_client_connect+0x4e4>)
 800c3ce:	4868      	ldr	r0, [pc, #416]	; (800c570 <mqtt_client_connect+0x4e0>)
 800c3d0:	f00e f9e8 	bl	801a7a4 <iprintf>
 800c3d4:	f06f 0305 	mvn.w	r3, #5
 800c3d8:	e0c1      	b.n	800c55e <mqtt_client_connect+0x4ce>
  remaining_length = (u16_t)len;
 800c3da:	69bb      	ldr	r3, [r7, #24]
 800c3dc:	84bb      	strh	r3, [r7, #36]	; 0x24

  if (mqtt_output_check_space(&client->output, remaining_length) == 0) {
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	33ec      	adds	r3, #236	; 0xec
 800c3e2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c3e4:	4611      	mov	r1, r2
 800c3e6:	4618      	mov	r0, r3
 800c3e8:	f7ff f924 	bl	800b634 <mqtt_output_check_space>
 800c3ec:	4603      	mov	r3, r0
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d102      	bne.n	800c3f8 <mqtt_client_connect+0x368>
    return ERR_MEM;
 800c3f2:	f04f 33ff 	mov.w	r3, #4294967295
 800c3f6:	e0b2      	b.n	800c55e <mqtt_client_connect+0x4ce>
  if (client_info->tls_config) {
    client->conn = altcp_tls_new(client_info->tls_config, IP_GET_TYPE(ip_addr));
  } else
#endif
  {
    client->conn = altcp_tcp_new_ip_type(IP_GET_TYPE(ip_addr));
 800c3f8:	2000      	movs	r0, #0
 800c3fa:	f003 fc1f 	bl	800fc3c <tcp_new_ip_type>
 800c3fe:	4602      	mov	r2, r0
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	60da      	str	r2, [r3, #12]
  }
  if (client->conn == NULL) {
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	68db      	ldr	r3, [r3, #12]
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d102      	bne.n	800c412 <mqtt_client_connect+0x382>
    return ERR_MEM;
 800c40c:	f04f 33ff 	mov.w	r3, #4294967295
 800c410:	e0a5      	b.n	800c55e <mqtt_client_connect+0x4ce>
  }

  /* Set arg pointer for callbacks */
  altcp_arg(client->conn, client);
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	68db      	ldr	r3, [r3, #12]
 800c416:	68f9      	ldr	r1, [r7, #12]
 800c418:	4618      	mov	r0, r3
 800c41a:	f003 fc1d 	bl	800fc58 <tcp_arg>
  /* Any local address, pick random local port number */
  err = altcp_bind(client->conn, IP_ADDR_ANY, 0);
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	68db      	ldr	r3, [r3, #12]
 800c422:	2200      	movs	r2, #0
 800c424:	4954      	ldr	r1, [pc, #336]	; (800c578 <mqtt_client_connect+0x4e8>)
 800c426:	4618      	mov	r0, r3
 800c428:	f002 fb46 	bl	800eab8 <tcp_bind>
 800c42c:	4603      	mov	r3, r0
 800c42e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (err != ERR_OK) {
 800c432:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c436:	2b00      	cmp	r3, #0
 800c438:	f040 8084 	bne.w	800c544 <mqtt_client_connect+0x4b4>
    goto tcp_fail;
  }
  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_client_connect: Connecting to host: %s at port:%"U16_F"\n", ipaddr_ntoa(ip_addr), port));

  /* Connect to server */
  err = altcp_connect(client->conn, ip_addr, port, mqtt_tcp_connect_cb);
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	68d8      	ldr	r0, [r3, #12]
 800c440:	88fa      	ldrh	r2, [r7, #6]
 800c442:	4b4e      	ldr	r3, [pc, #312]	; (800c57c <mqtt_client_connect+0x4ec>)
 800c444:	68b9      	ldr	r1, [r7, #8]
 800c446:	f002 fcbf 	bl	800edc8 <tcp_connect>
 800c44a:	4603      	mov	r3, r0
 800c44c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (err != ERR_OK) {
 800c450:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c454:	2b00      	cmp	r3, #0
 800c456:	d177      	bne.n	800c548 <mqtt_client_connect+0x4b8>
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_client_connect: Error connecting to remote ip/port, %d\n", err));
    goto tcp_fail;
  }
  /* Set error callback */
  altcp_err(client->conn, mqtt_tcp_err_cb);
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	68db      	ldr	r3, [r3, #12]
 800c45c:	4948      	ldr	r1, [pc, #288]	; (800c580 <mqtt_client_connect+0x4f0>)
 800c45e:	4618      	mov	r0, r3
 800c460:	f003 fc4e 	bl	800fd00 <tcp_err>
  client->conn_state = TCP_CONNECTING;
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	2201      	movs	r2, #1
 800c468:	729a      	strb	r2, [r3, #10]

  /* Append fixed header */
  mqtt_output_append_fixed_header(&client->output, MQTT_MSG_TYPE_CONNECT, 0, 0, 0, remaining_length);
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 800c470:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c472:	9301      	str	r3, [sp, #4]
 800c474:	2300      	movs	r3, #0
 800c476:	9300      	str	r3, [sp, #0]
 800c478:	2300      	movs	r3, #0
 800c47a:	2200      	movs	r2, #0
 800c47c:	2101      	movs	r1, #1
 800c47e:	f7ff f88e 	bl	800b59e <mqtt_output_append_fixed_header>
  /* Append Protocol string */
  mqtt_output_append_string(&client->output, "MQTT", 4);
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	33ec      	adds	r3, #236	; 0xec
 800c486:	2204      	movs	r2, #4
 800c488:	493e      	ldr	r1, [pc, #248]	; (800c584 <mqtt_client_connect+0x4f4>)
 800c48a:	4618      	mov	r0, r3
 800c48c:	f7ff f85b 	bl	800b546 <mqtt_output_append_string>
  /* Append Protocol level */
  mqtt_output_append_u8(&client->output, 4);
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	33ec      	adds	r3, #236	; 0xec
 800c494:	2104      	movs	r1, #4
 800c496:	4618      	mov	r0, r3
 800c498:	f7ff f82e 	bl	800b4f8 <mqtt_output_append_u8>
  /* Append connect flags */
  mqtt_output_append_u8(&client->output, flags);
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	33ec      	adds	r3, #236	; 0xec
 800c4a0:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800c4a4:	4611      	mov	r1, r2
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	f7ff f826 	bl	800b4f8 <mqtt_output_append_u8>
  /* Append keep-alive */
  mqtt_output_append_u16(&client->output, client_info->keep_alive);
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 800c4b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4b4:	899b      	ldrh	r3, [r3, #12]
 800c4b6:	4619      	mov	r1, r3
 800c4b8:	4610      	mov	r0, r2
 800c4ba:	f7ff f82c 	bl	800b516 <mqtt_output_append_u16>
  /* Append client id */
  mqtt_output_append_string(&client->output, client_info->client_id, client_id_length);
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 800c4c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	8afa      	ldrh	r2, [r7, #22]
 800c4ca:	4619      	mov	r1, r3
 800c4cc:	f7ff f83b 	bl	800b546 <mqtt_output_append_string>
  /* Append will message if used */
  if ((flags & MQTT_CONNECT_FLAG_WILL) != 0) {
 800c4d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c4d4:	f003 0304 	and.w	r3, r3, #4
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d015      	beq.n	800c508 <mqtt_client_connect+0x478>
    mqtt_output_append_string(&client->output, client_info->will_topic, will_topic_len);
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 800c4e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4e4:	691b      	ldr	r3, [r3, #16]
 800c4e6:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800c4ea:	b292      	uxth	r2, r2
 800c4ec:	4619      	mov	r1, r3
 800c4ee:	f7ff f82a 	bl	800b546 <mqtt_output_append_string>
    mqtt_output_append_string(&client->output, client_info->will_msg, will_msg_len);
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 800c4f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4fa:	695b      	ldr	r3, [r3, #20]
 800c4fc:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800c500:	b292      	uxth	r2, r2
 800c502:	4619      	mov	r1, r3
 800c504:	f7ff f81f 	bl	800b546 <mqtt_output_append_string>
  }
  /* Append user name if given */
  if ((flags & MQTT_CONNECT_FLAG_USERNAME) != 0) {
 800c508:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	da08      	bge.n	800c522 <mqtt_client_connect+0x492>
    mqtt_output_append_string(&client->output, client_info->client_user, client_user_len);
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 800c516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c518:	685b      	ldr	r3, [r3, #4]
 800c51a:	8bfa      	ldrh	r2, [r7, #30]
 800c51c:	4619      	mov	r1, r3
 800c51e:	f7ff f812 	bl	800b546 <mqtt_output_append_string>
  }
  /* Append password if given */
  if ((flags & MQTT_CONNECT_FLAG_PASSWORD) != 0) {
 800c522:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d008      	beq.n	800c540 <mqtt_client_connect+0x4b0>
    mqtt_output_append_string(&client->output, client_info->client_pass, client_pass_len);
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 800c534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c536:	689b      	ldr	r3, [r3, #8]
 800c538:	8bba      	ldrh	r2, [r7, #28]
 800c53a:	4619      	mov	r1, r3
 800c53c:	f7ff f803 	bl	800b546 <mqtt_output_append_string>
  }
  return ERR_OK;
 800c540:	2300      	movs	r3, #0
 800c542:	e00c      	b.n	800c55e <mqtt_client_connect+0x4ce>
    goto tcp_fail;
 800c544:	bf00      	nop
 800c546:	e000      	b.n	800c54a <mqtt_client_connect+0x4ba>
    goto tcp_fail;
 800c548:	bf00      	nop

tcp_fail:
  altcp_abort(client->conn);
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	68db      	ldr	r3, [r3, #12]
 800c54e:	4618      	mov	r0, r3
 800c550:	f002 faa6 	bl	800eaa0 <tcp_abort>
  client->conn = NULL;
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	2200      	movs	r2, #0
 800c558:	60da      	str	r2, [r3, #12]
  return err;
 800c55a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800c55e:	4618      	mov	r0, r3
 800c560:	3728      	adds	r7, #40	; 0x28
 800c562:	46bd      	mov	sp, r7
 800c564:	bd80      	pop	{r7, pc}
 800c566:	bf00      	nop
 800c568:	0801b4ec 	.word	0x0801b4ec
 800c56c:	0801bc0c 	.word	0x0801bc0c
 800c570:	0801b564 	.word	0x0801b564
 800c574:	0801bad4 	.word	0x0801bad4
 800c578:	0801eb7c 	.word	0x0801eb7c
 800c57c:	0800bff9 	.word	0x0800bff9
 800c580:	0800bf85 	.word	0x0800bf85
 800c584:	0801bc48 	.word	0x0801bc48

0800c588 <mqtt_disconnect>:
 * Disconnect from MQTT server
 * @param client MQTT client
 */
void
mqtt_disconnect(mqtt_client_t *client)
{
 800c588:	b580      	push	{r7, lr}
 800c58a:	b082      	sub	sp, #8
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_disconnect: client != NULL", client);
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	2b00      	cmp	r3, #0
 800c594:	d106      	bne.n	800c5a4 <mqtt_disconnect+0x1c>
 800c596:	4b0b      	ldr	r3, [pc, #44]	; (800c5c4 <mqtt_disconnect+0x3c>)
 800c598:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 800c59c:	490a      	ldr	r1, [pc, #40]	; (800c5c8 <mqtt_disconnect+0x40>)
 800c59e:	480b      	ldr	r0, [pc, #44]	; (800c5cc <mqtt_disconnect+0x44>)
 800c5a0:	f00e f900 	bl	801a7a4 <iprintf>
  /* If connection in not already closed */
  if (client->conn_state != TCP_DISCONNECTED) {
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	7a9b      	ldrb	r3, [r3, #10]
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d006      	beq.n	800c5ba <mqtt_disconnect+0x32>
    /* Set conn_state before calling mqtt_close to prevent callback from being called */
    client->conn_state = TCP_DISCONNECTED;
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	2200      	movs	r2, #0
 800c5b0:	729a      	strb	r2, [r3, #10]
    mqtt_close(client, (mqtt_connection_status_t)0);
 800c5b2:	2100      	movs	r1, #0
 800c5b4:	6878      	ldr	r0, [r7, #4]
 800c5b6:	f7ff f86f 	bl	800b698 <mqtt_close>
  }
}
 800c5ba:	bf00      	nop
 800c5bc:	3708      	adds	r7, #8
 800c5be:	46bd      	mov	sp, r7
 800c5c0:	bd80      	pop	{r7, pc}
 800c5c2:	bf00      	nop
 800c5c4:	0801b4ec 	.word	0x0801b4ec
 800c5c8:	0801bc50 	.word	0x0801bc50
 800c5cc:	0801b564 	.word	0x0801b564

0800c5d0 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800c5d0:	b480      	push	{r7}
 800c5d2:	b083      	sub	sp, #12
 800c5d4:	af00      	add	r7, sp, #0
 800c5d6:	4603      	mov	r3, r0
 800c5d8:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800c5da:	88fb      	ldrh	r3, [r7, #6]
 800c5dc:	021b      	lsls	r3, r3, #8
 800c5de:	b21a      	sxth	r2, r3
 800c5e0:	88fb      	ldrh	r3, [r7, #6]
 800c5e2:	0a1b      	lsrs	r3, r3, #8
 800c5e4:	b29b      	uxth	r3, r3
 800c5e6:	b21b      	sxth	r3, r3
 800c5e8:	4313      	orrs	r3, r2
 800c5ea:	b21b      	sxth	r3, r3
 800c5ec:	b29b      	uxth	r3, r3
}
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	370c      	adds	r7, #12
 800c5f2:	46bd      	mov	sp, r7
 800c5f4:	bc80      	pop	{r7}
 800c5f6:	4770      	bx	lr

0800c5f8 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800c5f8:	b480      	push	{r7}
 800c5fa:	b083      	sub	sp, #12
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	061a      	lsls	r2, r3, #24
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	021b      	lsls	r3, r3, #8
 800c608:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c60c:	431a      	orrs	r2, r3
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	0a1b      	lsrs	r3, r3, #8
 800c612:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c616:	431a      	orrs	r2, r3
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	0e1b      	lsrs	r3, r3, #24
 800c61c:	4313      	orrs	r3, r2
}
 800c61e:	4618      	mov	r0, r3
 800c620:	370c      	adds	r7, #12
 800c622:	46bd      	mov	sp, r7
 800c624:	bc80      	pop	{r7}
 800c626:	4770      	bx	lr

0800c628 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800c628:	b480      	push	{r7}
 800c62a:	b089      	sub	sp, #36	; 0x24
 800c62c:	af00      	add	r7, sp, #0
 800c62e:	6078      	str	r0, [r7, #4]
 800c630:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800c636:	2300      	movs	r3, #0
 800c638:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800c63a:	2300      	movs	r3, #0
 800c63c:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800c63e:	69fb      	ldr	r3, [r7, #28]
 800c640:	f003 0301 	and.w	r3, r3, #1
 800c644:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800c646:	693b      	ldr	r3, [r7, #16]
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d00d      	beq.n	800c668 <lwip_standard_chksum+0x40>
 800c64c:	683b      	ldr	r3, [r7, #0]
 800c64e:	2b00      	cmp	r3, #0
 800c650:	dd0a      	ble.n	800c668 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800c652:	69fa      	ldr	r2, [r7, #28]
 800c654:	1c53      	adds	r3, r2, #1
 800c656:	61fb      	str	r3, [r7, #28]
 800c658:	f107 030e 	add.w	r3, r7, #14
 800c65c:	3301      	adds	r3, #1
 800c65e:	7812      	ldrb	r2, [r2, #0]
 800c660:	701a      	strb	r2, [r3, #0]
    len--;
 800c662:	683b      	ldr	r3, [r7, #0]
 800c664:	3b01      	subs	r3, #1
 800c666:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800c668:	69fb      	ldr	r3, [r7, #28]
 800c66a:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800c66c:	e00a      	b.n	800c684 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800c66e:	69bb      	ldr	r3, [r7, #24]
 800c670:	1c9a      	adds	r2, r3, #2
 800c672:	61ba      	str	r2, [r7, #24]
 800c674:	881b      	ldrh	r3, [r3, #0]
 800c676:	461a      	mov	r2, r3
 800c678:	697b      	ldr	r3, [r7, #20]
 800c67a:	4413      	add	r3, r2
 800c67c:	617b      	str	r3, [r7, #20]
    len -= 2;
 800c67e:	683b      	ldr	r3, [r7, #0]
 800c680:	3b02      	subs	r3, #2
 800c682:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800c684:	683b      	ldr	r3, [r7, #0]
 800c686:	2b01      	cmp	r3, #1
 800c688:	dcf1      	bgt.n	800c66e <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800c68a:	683b      	ldr	r3, [r7, #0]
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	dd04      	ble.n	800c69a <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800c690:	f107 030e 	add.w	r3, r7, #14
 800c694:	69ba      	ldr	r2, [r7, #24]
 800c696:	7812      	ldrb	r2, [r2, #0]
 800c698:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800c69a:	89fb      	ldrh	r3, [r7, #14]
 800c69c:	461a      	mov	r2, r3
 800c69e:	697b      	ldr	r3, [r7, #20]
 800c6a0:	4413      	add	r3, r2
 800c6a2:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800c6a4:	697b      	ldr	r3, [r7, #20]
 800c6a6:	0c1a      	lsrs	r2, r3, #16
 800c6a8:	697b      	ldr	r3, [r7, #20]
 800c6aa:	b29b      	uxth	r3, r3
 800c6ac:	4413      	add	r3, r2
 800c6ae:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800c6b0:	697b      	ldr	r3, [r7, #20]
 800c6b2:	0c1a      	lsrs	r2, r3, #16
 800c6b4:	697b      	ldr	r3, [r7, #20]
 800c6b6:	b29b      	uxth	r3, r3
 800c6b8:	4413      	add	r3, r2
 800c6ba:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800c6bc:	693b      	ldr	r3, [r7, #16]
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d007      	beq.n	800c6d2 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800c6c2:	697b      	ldr	r3, [r7, #20]
 800c6c4:	021b      	lsls	r3, r3, #8
 800c6c6:	b29a      	uxth	r2, r3
 800c6c8:	697b      	ldr	r3, [r7, #20]
 800c6ca:	0a1b      	lsrs	r3, r3, #8
 800c6cc:	b2db      	uxtb	r3, r3
 800c6ce:	4313      	orrs	r3, r2
 800c6d0:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800c6d2:	697b      	ldr	r3, [r7, #20]
 800c6d4:	b29b      	uxth	r3, r3
}
 800c6d6:	4618      	mov	r0, r3
 800c6d8:	3724      	adds	r7, #36	; 0x24
 800c6da:	46bd      	mov	sp, r7
 800c6dc:	bc80      	pop	{r7}
 800c6de:	4770      	bx	lr

0800c6e0 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800c6e0:	b580      	push	{r7, lr}
 800c6e2:	b082      	sub	sp, #8
 800c6e4:	af00      	add	r7, sp, #0
 800c6e6:	6078      	str	r0, [r7, #4]
 800c6e8:	460b      	mov	r3, r1
 800c6ea:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800c6ec:	887b      	ldrh	r3, [r7, #2]
 800c6ee:	4619      	mov	r1, r3
 800c6f0:	6878      	ldr	r0, [r7, #4]
 800c6f2:	f7ff ff99 	bl	800c628 <lwip_standard_chksum>
 800c6f6:	4603      	mov	r3, r0
 800c6f8:	43db      	mvns	r3, r3
 800c6fa:	b29b      	uxth	r3, r3
}
 800c6fc:	4618      	mov	r0, r3
 800c6fe:	3708      	adds	r7, #8
 800c700:	46bd      	mov	sp, r7
 800c702:	bd80      	pop	{r7, pc}

0800c704 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800c704:	b580      	push	{r7, lr}
 800c706:	b086      	sub	sp, #24
 800c708:	af00      	add	r7, sp, #0
 800c70a:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 800c70c:	2300      	movs	r3, #0
 800c70e:	60fb      	str	r3, [r7, #12]

  acc = 0;
 800c710:	2300      	movs	r3, #0
 800c712:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	613b      	str	r3, [r7, #16]
 800c718:	e02b      	b.n	800c772 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 800c71a:	693b      	ldr	r3, [r7, #16]
 800c71c:	685a      	ldr	r2, [r3, #4]
 800c71e:	693b      	ldr	r3, [r7, #16]
 800c720:	895b      	ldrh	r3, [r3, #10]
 800c722:	4619      	mov	r1, r3
 800c724:	4610      	mov	r0, r2
 800c726:	f7ff ff7f 	bl	800c628 <lwip_standard_chksum>
 800c72a:	4603      	mov	r3, r0
 800c72c:	461a      	mov	r2, r3
 800c72e:	697b      	ldr	r3, [r7, #20]
 800c730:	4413      	add	r3, r2
 800c732:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800c734:	697b      	ldr	r3, [r7, #20]
 800c736:	0c1a      	lsrs	r2, r3, #16
 800c738:	697b      	ldr	r3, [r7, #20]
 800c73a:	b29b      	uxth	r3, r3
 800c73c:	4413      	add	r3, r2
 800c73e:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800c740:	693b      	ldr	r3, [r7, #16]
 800c742:	895b      	ldrh	r3, [r3, #10]
 800c744:	f003 0301 	and.w	r3, r3, #1
 800c748:	b29b      	uxth	r3, r3
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d00e      	beq.n	800c76c <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	2b00      	cmp	r3, #0
 800c752:	bf0c      	ite	eq
 800c754:	2301      	moveq	r3, #1
 800c756:	2300      	movne	r3, #0
 800c758:	b2db      	uxtb	r3, r3
 800c75a:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 800c75c:	697b      	ldr	r3, [r7, #20]
 800c75e:	021b      	lsls	r3, r3, #8
 800c760:	b29a      	uxth	r2, r3
 800c762:	697b      	ldr	r3, [r7, #20]
 800c764:	0a1b      	lsrs	r3, r3, #8
 800c766:	b2db      	uxtb	r3, r3
 800c768:	4313      	orrs	r3, r2
 800c76a:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800c76c:	693b      	ldr	r3, [r7, #16]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	613b      	str	r3, [r7, #16]
 800c772:	693b      	ldr	r3, [r7, #16]
 800c774:	2b00      	cmp	r3, #0
 800c776:	d1d0      	bne.n	800c71a <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d007      	beq.n	800c78e <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 800c77e:	697b      	ldr	r3, [r7, #20]
 800c780:	021b      	lsls	r3, r3, #8
 800c782:	b29a      	uxth	r2, r3
 800c784:	697b      	ldr	r3, [r7, #20]
 800c786:	0a1b      	lsrs	r3, r3, #8
 800c788:	b2db      	uxtb	r3, r3
 800c78a:	4313      	orrs	r3, r2
 800c78c:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 800c78e:	697b      	ldr	r3, [r7, #20]
 800c790:	b29b      	uxth	r3, r3
 800c792:	43db      	mvns	r3, r3
 800c794:	b29b      	uxth	r3, r3
}
 800c796:	4618      	mov	r0, r3
 800c798:	3718      	adds	r7, #24
 800c79a:	46bd      	mov	sp, r7
 800c79c:	bd80      	pop	{r7, pc}

0800c79e <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800c79e:	b580      	push	{r7, lr}
 800c7a0:	b082      	sub	sp, #8
 800c7a2:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800c7a4:	2300      	movs	r3, #0
 800c7a6:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800c7a8:	f00c ff38 	bl	801961c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800c7ac:	f000 f8d0 	bl	800c950 <mem_init>
  memp_init();
 800c7b0:	f000 fc50 	bl	800d054 <memp_init>
  pbuf_init();
  netif_init();
 800c7b4:	f000 fd5c 	bl	800d270 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800c7b8:	f008 f88a 	bl	80148d0 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800c7bc:	f001 fe76 	bl	800e4ac <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800c7c0:	f007 ff92 	bl	80146e8 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800c7c4:	bf00      	nop
 800c7c6:	3708      	adds	r7, #8
 800c7c8:	46bd      	mov	sp, r7
 800c7ca:	bd80      	pop	{r7, pc}

0800c7cc <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800c7cc:	b480      	push	{r7}
 800c7ce:	b083      	sub	sp, #12
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	4603      	mov	r3, r0
 800c7d4:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800c7d6:	4b04      	ldr	r3, [pc, #16]	; (800c7e8 <ptr_to_mem+0x1c>)
 800c7d8:	681a      	ldr	r2, [r3, #0]
 800c7da:	88fb      	ldrh	r3, [r7, #6]
 800c7dc:	4413      	add	r3, r2
}
 800c7de:	4618      	mov	r0, r3
 800c7e0:	370c      	adds	r7, #12
 800c7e2:	46bd      	mov	sp, r7
 800c7e4:	bc80      	pop	{r7}
 800c7e6:	4770      	bx	lr
 800c7e8:	20008e18 	.word	0x20008e18

0800c7ec <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800c7ec:	b480      	push	{r7}
 800c7ee:	b083      	sub	sp, #12
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800c7f4:	4b04      	ldr	r3, [pc, #16]	; (800c808 <mem_to_ptr+0x1c>)
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	687a      	ldr	r2, [r7, #4]
 800c7fa:	1ad3      	subs	r3, r2, r3
 800c7fc:	b29b      	uxth	r3, r3
}
 800c7fe:	4618      	mov	r0, r3
 800c800:	370c      	adds	r7, #12
 800c802:	46bd      	mov	sp, r7
 800c804:	bc80      	pop	{r7}
 800c806:	4770      	bx	lr
 800c808:	20008e18 	.word	0x20008e18

0800c80c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800c80c:	b590      	push	{r4, r7, lr}
 800c80e:	b085      	sub	sp, #20
 800c810:	af00      	add	r7, sp, #0
 800c812:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800c814:	4b45      	ldr	r3, [pc, #276]	; (800c92c <plug_holes+0x120>)
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	687a      	ldr	r2, [r7, #4]
 800c81a:	429a      	cmp	r2, r3
 800c81c:	d206      	bcs.n	800c82c <plug_holes+0x20>
 800c81e:	4b44      	ldr	r3, [pc, #272]	; (800c930 <plug_holes+0x124>)
 800c820:	f240 12df 	movw	r2, #479	; 0x1df
 800c824:	4943      	ldr	r1, [pc, #268]	; (800c934 <plug_holes+0x128>)
 800c826:	4844      	ldr	r0, [pc, #272]	; (800c938 <plug_holes+0x12c>)
 800c828:	f00d ffbc 	bl	801a7a4 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800c82c:	4b43      	ldr	r3, [pc, #268]	; (800c93c <plug_holes+0x130>)
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	687a      	ldr	r2, [r7, #4]
 800c832:	429a      	cmp	r2, r3
 800c834:	d306      	bcc.n	800c844 <plug_holes+0x38>
 800c836:	4b3e      	ldr	r3, [pc, #248]	; (800c930 <plug_holes+0x124>)
 800c838:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800c83c:	4940      	ldr	r1, [pc, #256]	; (800c940 <plug_holes+0x134>)
 800c83e:	483e      	ldr	r0, [pc, #248]	; (800c938 <plug_holes+0x12c>)
 800c840:	f00d ffb0 	bl	801a7a4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	791b      	ldrb	r3, [r3, #4]
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d006      	beq.n	800c85a <plug_holes+0x4e>
 800c84c:	4b38      	ldr	r3, [pc, #224]	; (800c930 <plug_holes+0x124>)
 800c84e:	f240 12e1 	movw	r2, #481	; 0x1e1
 800c852:	493c      	ldr	r1, [pc, #240]	; (800c944 <plug_holes+0x138>)
 800c854:	4838      	ldr	r0, [pc, #224]	; (800c938 <plug_holes+0x12c>)
 800c856:	f00d ffa5 	bl	801a7a4 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	881b      	ldrh	r3, [r3, #0]
 800c85e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c862:	d906      	bls.n	800c872 <plug_holes+0x66>
 800c864:	4b32      	ldr	r3, [pc, #200]	; (800c930 <plug_holes+0x124>)
 800c866:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800c86a:	4937      	ldr	r1, [pc, #220]	; (800c948 <plug_holes+0x13c>)
 800c86c:	4832      	ldr	r0, [pc, #200]	; (800c938 <plug_holes+0x12c>)
 800c86e:	f00d ff99 	bl	801a7a4 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	881b      	ldrh	r3, [r3, #0]
 800c876:	4618      	mov	r0, r3
 800c878:	f7ff ffa8 	bl	800c7cc <ptr_to_mem>
 800c87c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800c87e:	687a      	ldr	r2, [r7, #4]
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	429a      	cmp	r2, r3
 800c884:	d024      	beq.n	800c8d0 <plug_holes+0xc4>
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	791b      	ldrb	r3, [r3, #4]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d120      	bne.n	800c8d0 <plug_holes+0xc4>
 800c88e:	4b2b      	ldr	r3, [pc, #172]	; (800c93c <plug_holes+0x130>)
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	68fa      	ldr	r2, [r7, #12]
 800c894:	429a      	cmp	r2, r3
 800c896:	d01b      	beq.n	800c8d0 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800c898:	4b2c      	ldr	r3, [pc, #176]	; (800c94c <plug_holes+0x140>)
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	68fa      	ldr	r2, [r7, #12]
 800c89e:	429a      	cmp	r2, r3
 800c8a0:	d102      	bne.n	800c8a8 <plug_holes+0x9c>
      lfree = mem;
 800c8a2:	4a2a      	ldr	r2, [pc, #168]	; (800c94c <plug_holes+0x140>)
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	881a      	ldrh	r2, [r3, #0]
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	881b      	ldrh	r3, [r3, #0]
 800c8b4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c8b8:	d00a      	beq.n	800c8d0 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	881b      	ldrh	r3, [r3, #0]
 800c8be:	4618      	mov	r0, r3
 800c8c0:	f7ff ff84 	bl	800c7cc <ptr_to_mem>
 800c8c4:	4604      	mov	r4, r0
 800c8c6:	6878      	ldr	r0, [r7, #4]
 800c8c8:	f7ff ff90 	bl	800c7ec <mem_to_ptr>
 800c8cc:	4603      	mov	r3, r0
 800c8ce:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	885b      	ldrh	r3, [r3, #2]
 800c8d4:	4618      	mov	r0, r3
 800c8d6:	f7ff ff79 	bl	800c7cc <ptr_to_mem>
 800c8da:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800c8dc:	68ba      	ldr	r2, [r7, #8]
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	429a      	cmp	r2, r3
 800c8e2:	d01f      	beq.n	800c924 <plug_holes+0x118>
 800c8e4:	68bb      	ldr	r3, [r7, #8]
 800c8e6:	791b      	ldrb	r3, [r3, #4]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d11b      	bne.n	800c924 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800c8ec:	4b17      	ldr	r3, [pc, #92]	; (800c94c <plug_holes+0x140>)
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	687a      	ldr	r2, [r7, #4]
 800c8f2:	429a      	cmp	r2, r3
 800c8f4:	d102      	bne.n	800c8fc <plug_holes+0xf0>
      lfree = pmem;
 800c8f6:	4a15      	ldr	r2, [pc, #84]	; (800c94c <plug_holes+0x140>)
 800c8f8:	68bb      	ldr	r3, [r7, #8]
 800c8fa:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	881a      	ldrh	r2, [r3, #0]
 800c900:	68bb      	ldr	r3, [r7, #8]
 800c902:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	881b      	ldrh	r3, [r3, #0]
 800c908:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c90c:	d00a      	beq.n	800c924 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	881b      	ldrh	r3, [r3, #0]
 800c912:	4618      	mov	r0, r3
 800c914:	f7ff ff5a 	bl	800c7cc <ptr_to_mem>
 800c918:	4604      	mov	r4, r0
 800c91a:	68b8      	ldr	r0, [r7, #8]
 800c91c:	f7ff ff66 	bl	800c7ec <mem_to_ptr>
 800c920:	4603      	mov	r3, r0
 800c922:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800c924:	bf00      	nop
 800c926:	3714      	adds	r7, #20
 800c928:	46bd      	mov	sp, r7
 800c92a:	bd90      	pop	{r4, r7, pc}
 800c92c:	20008e18 	.word	0x20008e18
 800c930:	0801bc9c 	.word	0x0801bc9c
 800c934:	0801bccc 	.word	0x0801bccc
 800c938:	0801bce4 	.word	0x0801bce4
 800c93c:	20008e1c 	.word	0x20008e1c
 800c940:	0801bd0c 	.word	0x0801bd0c
 800c944:	0801bd28 	.word	0x0801bd28
 800c948:	0801bd44 	.word	0x0801bd44
 800c94c:	20008e24 	.word	0x20008e24

0800c950 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800c950:	b580      	push	{r7, lr}
 800c952:	b082      	sub	sp, #8
 800c954:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800c956:	4b1d      	ldr	r3, [pc, #116]	; (800c9cc <mem_init+0x7c>)
 800c958:	4a1d      	ldr	r2, [pc, #116]	; (800c9d0 <mem_init+0x80>)
 800c95a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800c95c:	4b1b      	ldr	r3, [pc, #108]	; (800c9cc <mem_init+0x7c>)
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800c968:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	2200      	movs	r2, #0
 800c96e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	2200      	movs	r2, #0
 800c974:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800c976:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800c97a:	f7ff ff27 	bl	800c7cc <ptr_to_mem>
 800c97e:	4603      	mov	r3, r0
 800c980:	4a14      	ldr	r2, [pc, #80]	; (800c9d4 <mem_init+0x84>)
 800c982:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800c984:	4b13      	ldr	r3, [pc, #76]	; (800c9d4 <mem_init+0x84>)
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	2201      	movs	r2, #1
 800c98a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800c98c:	4b11      	ldr	r3, [pc, #68]	; (800c9d4 <mem_init+0x84>)
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800c994:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800c996:	4b0f      	ldr	r3, [pc, #60]	; (800c9d4 <mem_init+0x84>)
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800c99e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800c9a0:	4b0a      	ldr	r3, [pc, #40]	; (800c9cc <mem_init+0x7c>)
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	4a0c      	ldr	r2, [pc, #48]	; (800c9d8 <mem_init+0x88>)
 800c9a6:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800c9a8:	480c      	ldr	r0, [pc, #48]	; (800c9dc <mem_init+0x8c>)
 800c9aa:	f00c fe45 	bl	8019638 <sys_mutex_new>
 800c9ae:	4603      	mov	r3, r0
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d006      	beq.n	800c9c2 <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800c9b4:	4b0a      	ldr	r3, [pc, #40]	; (800c9e0 <mem_init+0x90>)
 800c9b6:	f240 221f 	movw	r2, #543	; 0x21f
 800c9ba:	490a      	ldr	r1, [pc, #40]	; (800c9e4 <mem_init+0x94>)
 800c9bc:	480a      	ldr	r0, [pc, #40]	; (800c9e8 <mem_init+0x98>)
 800c9be:	f00d fef1 	bl	801a7a4 <iprintf>
  }
}
 800c9c2:	bf00      	nop
 800c9c4:	3708      	adds	r7, #8
 800c9c6:	46bd      	mov	sp, r7
 800c9c8:	bd80      	pop	{r7, pc}
 800c9ca:	bf00      	nop
 800c9cc:	20008e18 	.word	0x20008e18
 800c9d0:	30044000 	.word	0x30044000
 800c9d4:	20008e1c 	.word	0x20008e1c
 800c9d8:	20008e24 	.word	0x20008e24
 800c9dc:	20008e20 	.word	0x20008e20
 800c9e0:	0801bc9c 	.word	0x0801bc9c
 800c9e4:	0801bd70 	.word	0x0801bd70
 800c9e8:	0801bce4 	.word	0x0801bce4

0800c9ec <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800c9ec:	b580      	push	{r7, lr}
 800c9ee:	b086      	sub	sp, #24
 800c9f0:	af00      	add	r7, sp, #0
 800c9f2:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800c9f4:	6878      	ldr	r0, [r7, #4]
 800c9f6:	f7ff fef9 	bl	800c7ec <mem_to_ptr>
 800c9fa:	4603      	mov	r3, r0
 800c9fc:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	881b      	ldrh	r3, [r3, #0]
 800ca02:	4618      	mov	r0, r3
 800ca04:	f7ff fee2 	bl	800c7cc <ptr_to_mem>
 800ca08:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	885b      	ldrh	r3, [r3, #2]
 800ca0e:	4618      	mov	r0, r3
 800ca10:	f7ff fedc 	bl	800c7cc <ptr_to_mem>
 800ca14:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	881b      	ldrh	r3, [r3, #0]
 800ca1a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ca1e:	d818      	bhi.n	800ca52 <mem_link_valid+0x66>
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	885b      	ldrh	r3, [r3, #2]
 800ca24:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ca28:	d813      	bhi.n	800ca52 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800ca2e:	8afa      	ldrh	r2, [r7, #22]
 800ca30:	429a      	cmp	r2, r3
 800ca32:	d004      	beq.n	800ca3e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	881b      	ldrh	r3, [r3, #0]
 800ca38:	8afa      	ldrh	r2, [r7, #22]
 800ca3a:	429a      	cmp	r2, r3
 800ca3c:	d109      	bne.n	800ca52 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800ca3e:	4b08      	ldr	r3, [pc, #32]	; (800ca60 <mem_link_valid+0x74>)
 800ca40:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ca42:	693a      	ldr	r2, [r7, #16]
 800ca44:	429a      	cmp	r2, r3
 800ca46:	d006      	beq.n	800ca56 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800ca48:	693b      	ldr	r3, [r7, #16]
 800ca4a:	885b      	ldrh	r3, [r3, #2]
 800ca4c:	8afa      	ldrh	r2, [r7, #22]
 800ca4e:	429a      	cmp	r2, r3
 800ca50:	d001      	beq.n	800ca56 <mem_link_valid+0x6a>
    return 0;
 800ca52:	2300      	movs	r3, #0
 800ca54:	e000      	b.n	800ca58 <mem_link_valid+0x6c>
  }
  return 1;
 800ca56:	2301      	movs	r3, #1
}
 800ca58:	4618      	mov	r0, r3
 800ca5a:	3718      	adds	r7, #24
 800ca5c:	46bd      	mov	sp, r7
 800ca5e:	bd80      	pop	{r7, pc}
 800ca60:	20008e1c 	.word	0x20008e1c

0800ca64 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800ca64:	b580      	push	{r7, lr}
 800ca66:	b088      	sub	sp, #32
 800ca68:	af00      	add	r7, sp, #0
 800ca6a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d070      	beq.n	800cb54 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	f003 0303 	and.w	r3, r3, #3
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d00d      	beq.n	800ca98 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800ca7c:	4b37      	ldr	r3, [pc, #220]	; (800cb5c <mem_free+0xf8>)
 800ca7e:	f240 2273 	movw	r2, #627	; 0x273
 800ca82:	4937      	ldr	r1, [pc, #220]	; (800cb60 <mem_free+0xfc>)
 800ca84:	4837      	ldr	r0, [pc, #220]	; (800cb64 <mem_free+0x100>)
 800ca86:	f00d fe8d 	bl	801a7a4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ca8a:	f00c fe33 	bl	80196f4 <sys_arch_protect>
 800ca8e:	60f8      	str	r0, [r7, #12]
 800ca90:	68f8      	ldr	r0, [r7, #12]
 800ca92:	f00c fe3d 	bl	8019710 <sys_arch_unprotect>
    return;
 800ca96:	e05e      	b.n	800cb56 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	3b08      	subs	r3, #8
 800ca9c:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800ca9e:	4b32      	ldr	r3, [pc, #200]	; (800cb68 <mem_free+0x104>)
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	69fa      	ldr	r2, [r7, #28]
 800caa4:	429a      	cmp	r2, r3
 800caa6:	d306      	bcc.n	800cab6 <mem_free+0x52>
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	f103 020c 	add.w	r2, r3, #12
 800caae:	4b2f      	ldr	r3, [pc, #188]	; (800cb6c <mem_free+0x108>)
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	429a      	cmp	r2, r3
 800cab4:	d90d      	bls.n	800cad2 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800cab6:	4b29      	ldr	r3, [pc, #164]	; (800cb5c <mem_free+0xf8>)
 800cab8:	f240 227f 	movw	r2, #639	; 0x27f
 800cabc:	492c      	ldr	r1, [pc, #176]	; (800cb70 <mem_free+0x10c>)
 800cabe:	4829      	ldr	r0, [pc, #164]	; (800cb64 <mem_free+0x100>)
 800cac0:	f00d fe70 	bl	801a7a4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800cac4:	f00c fe16 	bl	80196f4 <sys_arch_protect>
 800cac8:	6138      	str	r0, [r7, #16]
 800caca:	6938      	ldr	r0, [r7, #16]
 800cacc:	f00c fe20 	bl	8019710 <sys_arch_unprotect>
    return;
 800cad0:	e041      	b.n	800cb56 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800cad2:	4828      	ldr	r0, [pc, #160]	; (800cb74 <mem_free+0x110>)
 800cad4:	f00c fdcc 	bl	8019670 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800cad8:	69fb      	ldr	r3, [r7, #28]
 800cada:	791b      	ldrb	r3, [r3, #4]
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d110      	bne.n	800cb02 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800cae0:	4b1e      	ldr	r3, [pc, #120]	; (800cb5c <mem_free+0xf8>)
 800cae2:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800cae6:	4924      	ldr	r1, [pc, #144]	; (800cb78 <mem_free+0x114>)
 800cae8:	481e      	ldr	r0, [pc, #120]	; (800cb64 <mem_free+0x100>)
 800caea:	f00d fe5b 	bl	801a7a4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800caee:	4821      	ldr	r0, [pc, #132]	; (800cb74 <mem_free+0x110>)
 800caf0:	f00c fdcd 	bl	801968e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800caf4:	f00c fdfe 	bl	80196f4 <sys_arch_protect>
 800caf8:	6178      	str	r0, [r7, #20]
 800cafa:	6978      	ldr	r0, [r7, #20]
 800cafc:	f00c fe08 	bl	8019710 <sys_arch_unprotect>
    return;
 800cb00:	e029      	b.n	800cb56 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800cb02:	69f8      	ldr	r0, [r7, #28]
 800cb04:	f7ff ff72 	bl	800c9ec <mem_link_valid>
 800cb08:	4603      	mov	r3, r0
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d110      	bne.n	800cb30 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800cb0e:	4b13      	ldr	r3, [pc, #76]	; (800cb5c <mem_free+0xf8>)
 800cb10:	f240 2295 	movw	r2, #661	; 0x295
 800cb14:	4919      	ldr	r1, [pc, #100]	; (800cb7c <mem_free+0x118>)
 800cb16:	4813      	ldr	r0, [pc, #76]	; (800cb64 <mem_free+0x100>)
 800cb18:	f00d fe44 	bl	801a7a4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800cb1c:	4815      	ldr	r0, [pc, #84]	; (800cb74 <mem_free+0x110>)
 800cb1e:	f00c fdb6 	bl	801968e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800cb22:	f00c fde7 	bl	80196f4 <sys_arch_protect>
 800cb26:	61b8      	str	r0, [r7, #24]
 800cb28:	69b8      	ldr	r0, [r7, #24]
 800cb2a:	f00c fdf1 	bl	8019710 <sys_arch_unprotect>
    return;
 800cb2e:	e012      	b.n	800cb56 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800cb30:	69fb      	ldr	r3, [r7, #28]
 800cb32:	2200      	movs	r2, #0
 800cb34:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800cb36:	4b12      	ldr	r3, [pc, #72]	; (800cb80 <mem_free+0x11c>)
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	69fa      	ldr	r2, [r7, #28]
 800cb3c:	429a      	cmp	r2, r3
 800cb3e:	d202      	bcs.n	800cb46 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800cb40:	4a0f      	ldr	r2, [pc, #60]	; (800cb80 <mem_free+0x11c>)
 800cb42:	69fb      	ldr	r3, [r7, #28]
 800cb44:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800cb46:	69f8      	ldr	r0, [r7, #28]
 800cb48:	f7ff fe60 	bl	800c80c <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800cb4c:	4809      	ldr	r0, [pc, #36]	; (800cb74 <mem_free+0x110>)
 800cb4e:	f00c fd9e 	bl	801968e <sys_mutex_unlock>
 800cb52:	e000      	b.n	800cb56 <mem_free+0xf2>
    return;
 800cb54:	bf00      	nop
}
 800cb56:	3720      	adds	r7, #32
 800cb58:	46bd      	mov	sp, r7
 800cb5a:	bd80      	pop	{r7, pc}
 800cb5c:	0801bc9c 	.word	0x0801bc9c
 800cb60:	0801bd8c 	.word	0x0801bd8c
 800cb64:	0801bce4 	.word	0x0801bce4
 800cb68:	20008e18 	.word	0x20008e18
 800cb6c:	20008e1c 	.word	0x20008e1c
 800cb70:	0801bdb0 	.word	0x0801bdb0
 800cb74:	20008e20 	.word	0x20008e20
 800cb78:	0801bdcc 	.word	0x0801bdcc
 800cb7c:	0801bdf4 	.word	0x0801bdf4
 800cb80:	20008e24 	.word	0x20008e24

0800cb84 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800cb84:	b580      	push	{r7, lr}
 800cb86:	b088      	sub	sp, #32
 800cb88:	af00      	add	r7, sp, #0
 800cb8a:	6078      	str	r0, [r7, #4]
 800cb8c:	460b      	mov	r3, r1
 800cb8e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800cb90:	887b      	ldrh	r3, [r7, #2]
 800cb92:	3303      	adds	r3, #3
 800cb94:	b29b      	uxth	r3, r3
 800cb96:	f023 0303 	bic.w	r3, r3, #3
 800cb9a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800cb9c:	8bfb      	ldrh	r3, [r7, #30]
 800cb9e:	2b0b      	cmp	r3, #11
 800cba0:	d801      	bhi.n	800cba6 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800cba2:	230c      	movs	r3, #12
 800cba4:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800cba6:	8bfb      	ldrh	r3, [r7, #30]
 800cba8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cbac:	d803      	bhi.n	800cbb6 <mem_trim+0x32>
 800cbae:	8bfa      	ldrh	r2, [r7, #30]
 800cbb0:	887b      	ldrh	r3, [r7, #2]
 800cbb2:	429a      	cmp	r2, r3
 800cbb4:	d201      	bcs.n	800cbba <mem_trim+0x36>
    return NULL;
 800cbb6:	2300      	movs	r3, #0
 800cbb8:	e0d8      	b.n	800cd6c <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800cbba:	4b6e      	ldr	r3, [pc, #440]	; (800cd74 <mem_trim+0x1f0>)
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	687a      	ldr	r2, [r7, #4]
 800cbc0:	429a      	cmp	r2, r3
 800cbc2:	d304      	bcc.n	800cbce <mem_trim+0x4a>
 800cbc4:	4b6c      	ldr	r3, [pc, #432]	; (800cd78 <mem_trim+0x1f4>)
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	687a      	ldr	r2, [r7, #4]
 800cbca:	429a      	cmp	r2, r3
 800cbcc:	d306      	bcc.n	800cbdc <mem_trim+0x58>
 800cbce:	4b6b      	ldr	r3, [pc, #428]	; (800cd7c <mem_trim+0x1f8>)
 800cbd0:	f240 22d1 	movw	r2, #721	; 0x2d1
 800cbd4:	496a      	ldr	r1, [pc, #424]	; (800cd80 <mem_trim+0x1fc>)
 800cbd6:	486b      	ldr	r0, [pc, #428]	; (800cd84 <mem_trim+0x200>)
 800cbd8:	f00d fde4 	bl	801a7a4 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800cbdc:	4b65      	ldr	r3, [pc, #404]	; (800cd74 <mem_trim+0x1f0>)
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	687a      	ldr	r2, [r7, #4]
 800cbe2:	429a      	cmp	r2, r3
 800cbe4:	d304      	bcc.n	800cbf0 <mem_trim+0x6c>
 800cbe6:	4b64      	ldr	r3, [pc, #400]	; (800cd78 <mem_trim+0x1f4>)
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	687a      	ldr	r2, [r7, #4]
 800cbec:	429a      	cmp	r2, r3
 800cbee:	d307      	bcc.n	800cc00 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800cbf0:	f00c fd80 	bl	80196f4 <sys_arch_protect>
 800cbf4:	60b8      	str	r0, [r7, #8]
 800cbf6:	68b8      	ldr	r0, [r7, #8]
 800cbf8:	f00c fd8a 	bl	8019710 <sys_arch_unprotect>
    return rmem;
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	e0b5      	b.n	800cd6c <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	3b08      	subs	r3, #8
 800cc04:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800cc06:	69b8      	ldr	r0, [r7, #24]
 800cc08:	f7ff fdf0 	bl	800c7ec <mem_to_ptr>
 800cc0c:	4603      	mov	r3, r0
 800cc0e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800cc10:	69bb      	ldr	r3, [r7, #24]
 800cc12:	881a      	ldrh	r2, [r3, #0]
 800cc14:	8afb      	ldrh	r3, [r7, #22]
 800cc16:	1ad3      	subs	r3, r2, r3
 800cc18:	b29b      	uxth	r3, r3
 800cc1a:	3b08      	subs	r3, #8
 800cc1c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800cc1e:	8bfa      	ldrh	r2, [r7, #30]
 800cc20:	8abb      	ldrh	r3, [r7, #20]
 800cc22:	429a      	cmp	r2, r3
 800cc24:	d906      	bls.n	800cc34 <mem_trim+0xb0>
 800cc26:	4b55      	ldr	r3, [pc, #340]	; (800cd7c <mem_trim+0x1f8>)
 800cc28:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800cc2c:	4956      	ldr	r1, [pc, #344]	; (800cd88 <mem_trim+0x204>)
 800cc2e:	4855      	ldr	r0, [pc, #340]	; (800cd84 <mem_trim+0x200>)
 800cc30:	f00d fdb8 	bl	801a7a4 <iprintf>
  if (newsize > size) {
 800cc34:	8bfa      	ldrh	r2, [r7, #30]
 800cc36:	8abb      	ldrh	r3, [r7, #20]
 800cc38:	429a      	cmp	r2, r3
 800cc3a:	d901      	bls.n	800cc40 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800cc3c:	2300      	movs	r3, #0
 800cc3e:	e095      	b.n	800cd6c <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800cc40:	8bfa      	ldrh	r2, [r7, #30]
 800cc42:	8abb      	ldrh	r3, [r7, #20]
 800cc44:	429a      	cmp	r2, r3
 800cc46:	d101      	bne.n	800cc4c <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	e08f      	b.n	800cd6c <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800cc4c:	484f      	ldr	r0, [pc, #316]	; (800cd8c <mem_trim+0x208>)
 800cc4e:	f00c fd0f 	bl	8019670 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800cc52:	69bb      	ldr	r3, [r7, #24]
 800cc54:	881b      	ldrh	r3, [r3, #0]
 800cc56:	4618      	mov	r0, r3
 800cc58:	f7ff fdb8 	bl	800c7cc <ptr_to_mem>
 800cc5c:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800cc5e:	693b      	ldr	r3, [r7, #16]
 800cc60:	791b      	ldrb	r3, [r3, #4]
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d13f      	bne.n	800cce6 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800cc66:	69bb      	ldr	r3, [r7, #24]
 800cc68:	881b      	ldrh	r3, [r3, #0]
 800cc6a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cc6e:	d106      	bne.n	800cc7e <mem_trim+0xfa>
 800cc70:	4b42      	ldr	r3, [pc, #264]	; (800cd7c <mem_trim+0x1f8>)
 800cc72:	f240 22f5 	movw	r2, #757	; 0x2f5
 800cc76:	4946      	ldr	r1, [pc, #280]	; (800cd90 <mem_trim+0x20c>)
 800cc78:	4842      	ldr	r0, [pc, #264]	; (800cd84 <mem_trim+0x200>)
 800cc7a:	f00d fd93 	bl	801a7a4 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800cc7e:	693b      	ldr	r3, [r7, #16]
 800cc80:	881b      	ldrh	r3, [r3, #0]
 800cc82:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800cc84:	8afa      	ldrh	r2, [r7, #22]
 800cc86:	8bfb      	ldrh	r3, [r7, #30]
 800cc88:	4413      	add	r3, r2
 800cc8a:	b29b      	uxth	r3, r3
 800cc8c:	3308      	adds	r3, #8
 800cc8e:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800cc90:	4b40      	ldr	r3, [pc, #256]	; (800cd94 <mem_trim+0x210>)
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	693a      	ldr	r2, [r7, #16]
 800cc96:	429a      	cmp	r2, r3
 800cc98:	d106      	bne.n	800cca8 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800cc9a:	89fb      	ldrh	r3, [r7, #14]
 800cc9c:	4618      	mov	r0, r3
 800cc9e:	f7ff fd95 	bl	800c7cc <ptr_to_mem>
 800cca2:	4603      	mov	r3, r0
 800cca4:	4a3b      	ldr	r2, [pc, #236]	; (800cd94 <mem_trim+0x210>)
 800cca6:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800cca8:	89fb      	ldrh	r3, [r7, #14]
 800ccaa:	4618      	mov	r0, r3
 800ccac:	f7ff fd8e 	bl	800c7cc <ptr_to_mem>
 800ccb0:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800ccb2:	693b      	ldr	r3, [r7, #16]
 800ccb4:	2200      	movs	r2, #0
 800ccb6:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800ccb8:	693b      	ldr	r3, [r7, #16]
 800ccba:	89ba      	ldrh	r2, [r7, #12]
 800ccbc:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800ccbe:	693b      	ldr	r3, [r7, #16]
 800ccc0:	8afa      	ldrh	r2, [r7, #22]
 800ccc2:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800ccc4:	69bb      	ldr	r3, [r7, #24]
 800ccc6:	89fa      	ldrh	r2, [r7, #14]
 800ccc8:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800ccca:	693b      	ldr	r3, [r7, #16]
 800cccc:	881b      	ldrh	r3, [r3, #0]
 800ccce:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ccd2:	d047      	beq.n	800cd64 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800ccd4:	693b      	ldr	r3, [r7, #16]
 800ccd6:	881b      	ldrh	r3, [r3, #0]
 800ccd8:	4618      	mov	r0, r3
 800ccda:	f7ff fd77 	bl	800c7cc <ptr_to_mem>
 800ccde:	4602      	mov	r2, r0
 800cce0:	89fb      	ldrh	r3, [r7, #14]
 800cce2:	8053      	strh	r3, [r2, #2]
 800cce4:	e03e      	b.n	800cd64 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800cce6:	8bfb      	ldrh	r3, [r7, #30]
 800cce8:	f103 0214 	add.w	r2, r3, #20
 800ccec:	8abb      	ldrh	r3, [r7, #20]
 800ccee:	429a      	cmp	r2, r3
 800ccf0:	d838      	bhi.n	800cd64 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800ccf2:	8afa      	ldrh	r2, [r7, #22]
 800ccf4:	8bfb      	ldrh	r3, [r7, #30]
 800ccf6:	4413      	add	r3, r2
 800ccf8:	b29b      	uxth	r3, r3
 800ccfa:	3308      	adds	r3, #8
 800ccfc:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800ccfe:	69bb      	ldr	r3, [r7, #24]
 800cd00:	881b      	ldrh	r3, [r3, #0]
 800cd02:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cd06:	d106      	bne.n	800cd16 <mem_trim+0x192>
 800cd08:	4b1c      	ldr	r3, [pc, #112]	; (800cd7c <mem_trim+0x1f8>)
 800cd0a:	f240 3216 	movw	r2, #790	; 0x316
 800cd0e:	4920      	ldr	r1, [pc, #128]	; (800cd90 <mem_trim+0x20c>)
 800cd10:	481c      	ldr	r0, [pc, #112]	; (800cd84 <mem_trim+0x200>)
 800cd12:	f00d fd47 	bl	801a7a4 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800cd16:	89fb      	ldrh	r3, [r7, #14]
 800cd18:	4618      	mov	r0, r3
 800cd1a:	f7ff fd57 	bl	800c7cc <ptr_to_mem>
 800cd1e:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800cd20:	4b1c      	ldr	r3, [pc, #112]	; (800cd94 <mem_trim+0x210>)
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	693a      	ldr	r2, [r7, #16]
 800cd26:	429a      	cmp	r2, r3
 800cd28:	d202      	bcs.n	800cd30 <mem_trim+0x1ac>
      lfree = mem2;
 800cd2a:	4a1a      	ldr	r2, [pc, #104]	; (800cd94 <mem_trim+0x210>)
 800cd2c:	693b      	ldr	r3, [r7, #16]
 800cd2e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800cd30:	693b      	ldr	r3, [r7, #16]
 800cd32:	2200      	movs	r2, #0
 800cd34:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800cd36:	69bb      	ldr	r3, [r7, #24]
 800cd38:	881a      	ldrh	r2, [r3, #0]
 800cd3a:	693b      	ldr	r3, [r7, #16]
 800cd3c:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800cd3e:	693b      	ldr	r3, [r7, #16]
 800cd40:	8afa      	ldrh	r2, [r7, #22]
 800cd42:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800cd44:	69bb      	ldr	r3, [r7, #24]
 800cd46:	89fa      	ldrh	r2, [r7, #14]
 800cd48:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800cd4a:	693b      	ldr	r3, [r7, #16]
 800cd4c:	881b      	ldrh	r3, [r3, #0]
 800cd4e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cd52:	d007      	beq.n	800cd64 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800cd54:	693b      	ldr	r3, [r7, #16]
 800cd56:	881b      	ldrh	r3, [r3, #0]
 800cd58:	4618      	mov	r0, r3
 800cd5a:	f7ff fd37 	bl	800c7cc <ptr_to_mem>
 800cd5e:	4602      	mov	r2, r0
 800cd60:	89fb      	ldrh	r3, [r7, #14]
 800cd62:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800cd64:	4809      	ldr	r0, [pc, #36]	; (800cd8c <mem_trim+0x208>)
 800cd66:	f00c fc92 	bl	801968e <sys_mutex_unlock>
  return rmem;
 800cd6a:	687b      	ldr	r3, [r7, #4]
}
 800cd6c:	4618      	mov	r0, r3
 800cd6e:	3720      	adds	r7, #32
 800cd70:	46bd      	mov	sp, r7
 800cd72:	bd80      	pop	{r7, pc}
 800cd74:	20008e18 	.word	0x20008e18
 800cd78:	20008e1c 	.word	0x20008e1c
 800cd7c:	0801bc9c 	.word	0x0801bc9c
 800cd80:	0801be28 	.word	0x0801be28
 800cd84:	0801bce4 	.word	0x0801bce4
 800cd88:	0801be40 	.word	0x0801be40
 800cd8c:	20008e20 	.word	0x20008e20
 800cd90:	0801be60 	.word	0x0801be60
 800cd94:	20008e24 	.word	0x20008e24

0800cd98 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800cd98:	b580      	push	{r7, lr}
 800cd9a:	b088      	sub	sp, #32
 800cd9c:	af00      	add	r7, sp, #0
 800cd9e:	4603      	mov	r3, r0
 800cda0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800cda2:	88fb      	ldrh	r3, [r7, #6]
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d101      	bne.n	800cdac <mem_malloc+0x14>
    return NULL;
 800cda8:	2300      	movs	r3, #0
 800cdaa:	e0e2      	b.n	800cf72 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800cdac:	88fb      	ldrh	r3, [r7, #6]
 800cdae:	3303      	adds	r3, #3
 800cdb0:	b29b      	uxth	r3, r3
 800cdb2:	f023 0303 	bic.w	r3, r3, #3
 800cdb6:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800cdb8:	8bbb      	ldrh	r3, [r7, #28]
 800cdba:	2b0b      	cmp	r3, #11
 800cdbc:	d801      	bhi.n	800cdc2 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800cdbe:	230c      	movs	r3, #12
 800cdc0:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800cdc2:	8bbb      	ldrh	r3, [r7, #28]
 800cdc4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cdc8:	d803      	bhi.n	800cdd2 <mem_malloc+0x3a>
 800cdca:	8bba      	ldrh	r2, [r7, #28]
 800cdcc:	88fb      	ldrh	r3, [r7, #6]
 800cdce:	429a      	cmp	r2, r3
 800cdd0:	d201      	bcs.n	800cdd6 <mem_malloc+0x3e>
    return NULL;
 800cdd2:	2300      	movs	r3, #0
 800cdd4:	e0cd      	b.n	800cf72 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800cdd6:	4869      	ldr	r0, [pc, #420]	; (800cf7c <mem_malloc+0x1e4>)
 800cdd8:	f00c fc4a 	bl	8019670 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800cddc:	4b68      	ldr	r3, [pc, #416]	; (800cf80 <mem_malloc+0x1e8>)
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	4618      	mov	r0, r3
 800cde2:	f7ff fd03 	bl	800c7ec <mem_to_ptr>
 800cde6:	4603      	mov	r3, r0
 800cde8:	83fb      	strh	r3, [r7, #30]
 800cdea:	e0b7      	b.n	800cf5c <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800cdec:	8bfb      	ldrh	r3, [r7, #30]
 800cdee:	4618      	mov	r0, r3
 800cdf0:	f7ff fcec 	bl	800c7cc <ptr_to_mem>
 800cdf4:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800cdf6:	697b      	ldr	r3, [r7, #20]
 800cdf8:	791b      	ldrb	r3, [r3, #4]
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	f040 80a7 	bne.w	800cf4e <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800ce00:	697b      	ldr	r3, [r7, #20]
 800ce02:	881b      	ldrh	r3, [r3, #0]
 800ce04:	461a      	mov	r2, r3
 800ce06:	8bfb      	ldrh	r3, [r7, #30]
 800ce08:	1ad3      	subs	r3, r2, r3
 800ce0a:	f1a3 0208 	sub.w	r2, r3, #8
 800ce0e:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800ce10:	429a      	cmp	r2, r3
 800ce12:	f0c0 809c 	bcc.w	800cf4e <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800ce16:	697b      	ldr	r3, [r7, #20]
 800ce18:	881b      	ldrh	r3, [r3, #0]
 800ce1a:	461a      	mov	r2, r3
 800ce1c:	8bfb      	ldrh	r3, [r7, #30]
 800ce1e:	1ad3      	subs	r3, r2, r3
 800ce20:	f1a3 0208 	sub.w	r2, r3, #8
 800ce24:	8bbb      	ldrh	r3, [r7, #28]
 800ce26:	3314      	adds	r3, #20
 800ce28:	429a      	cmp	r2, r3
 800ce2a:	d333      	bcc.n	800ce94 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800ce2c:	8bfa      	ldrh	r2, [r7, #30]
 800ce2e:	8bbb      	ldrh	r3, [r7, #28]
 800ce30:	4413      	add	r3, r2
 800ce32:	b29b      	uxth	r3, r3
 800ce34:	3308      	adds	r3, #8
 800ce36:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800ce38:	8a7b      	ldrh	r3, [r7, #18]
 800ce3a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ce3e:	d106      	bne.n	800ce4e <mem_malloc+0xb6>
 800ce40:	4b50      	ldr	r3, [pc, #320]	; (800cf84 <mem_malloc+0x1ec>)
 800ce42:	f240 3287 	movw	r2, #903	; 0x387
 800ce46:	4950      	ldr	r1, [pc, #320]	; (800cf88 <mem_malloc+0x1f0>)
 800ce48:	4850      	ldr	r0, [pc, #320]	; (800cf8c <mem_malloc+0x1f4>)
 800ce4a:	f00d fcab 	bl	801a7a4 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800ce4e:	8a7b      	ldrh	r3, [r7, #18]
 800ce50:	4618      	mov	r0, r3
 800ce52:	f7ff fcbb 	bl	800c7cc <ptr_to_mem>
 800ce56:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	2200      	movs	r2, #0
 800ce5c:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800ce5e:	697b      	ldr	r3, [r7, #20]
 800ce60:	881a      	ldrh	r2, [r3, #0]
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	8bfa      	ldrh	r2, [r7, #30]
 800ce6a:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800ce6c:	697b      	ldr	r3, [r7, #20]
 800ce6e:	8a7a      	ldrh	r2, [r7, #18]
 800ce70:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800ce72:	697b      	ldr	r3, [r7, #20]
 800ce74:	2201      	movs	r2, #1
 800ce76:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	881b      	ldrh	r3, [r3, #0]
 800ce7c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ce80:	d00b      	beq.n	800ce9a <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	881b      	ldrh	r3, [r3, #0]
 800ce86:	4618      	mov	r0, r3
 800ce88:	f7ff fca0 	bl	800c7cc <ptr_to_mem>
 800ce8c:	4602      	mov	r2, r0
 800ce8e:	8a7b      	ldrh	r3, [r7, #18]
 800ce90:	8053      	strh	r3, [r2, #2]
 800ce92:	e002      	b.n	800ce9a <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800ce94:	697b      	ldr	r3, [r7, #20]
 800ce96:	2201      	movs	r2, #1
 800ce98:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800ce9a:	4b39      	ldr	r3, [pc, #228]	; (800cf80 <mem_malloc+0x1e8>)
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	697a      	ldr	r2, [r7, #20]
 800cea0:	429a      	cmp	r2, r3
 800cea2:	d127      	bne.n	800cef4 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800cea4:	4b36      	ldr	r3, [pc, #216]	; (800cf80 <mem_malloc+0x1e8>)
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800ceaa:	e005      	b.n	800ceb8 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800ceac:	69bb      	ldr	r3, [r7, #24]
 800ceae:	881b      	ldrh	r3, [r3, #0]
 800ceb0:	4618      	mov	r0, r3
 800ceb2:	f7ff fc8b 	bl	800c7cc <ptr_to_mem>
 800ceb6:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800ceb8:	69bb      	ldr	r3, [r7, #24]
 800ceba:	791b      	ldrb	r3, [r3, #4]
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d004      	beq.n	800ceca <mem_malloc+0x132>
 800cec0:	4b33      	ldr	r3, [pc, #204]	; (800cf90 <mem_malloc+0x1f8>)
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	69ba      	ldr	r2, [r7, #24]
 800cec6:	429a      	cmp	r2, r3
 800cec8:	d1f0      	bne.n	800ceac <mem_malloc+0x114>
          }
          lfree = cur;
 800ceca:	4a2d      	ldr	r2, [pc, #180]	; (800cf80 <mem_malloc+0x1e8>)
 800cecc:	69bb      	ldr	r3, [r7, #24]
 800cece:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800ced0:	4b2b      	ldr	r3, [pc, #172]	; (800cf80 <mem_malloc+0x1e8>)
 800ced2:	681a      	ldr	r2, [r3, #0]
 800ced4:	4b2e      	ldr	r3, [pc, #184]	; (800cf90 <mem_malloc+0x1f8>)
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	429a      	cmp	r2, r3
 800ceda:	d00b      	beq.n	800cef4 <mem_malloc+0x15c>
 800cedc:	4b28      	ldr	r3, [pc, #160]	; (800cf80 <mem_malloc+0x1e8>)
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	791b      	ldrb	r3, [r3, #4]
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d006      	beq.n	800cef4 <mem_malloc+0x15c>
 800cee6:	4b27      	ldr	r3, [pc, #156]	; (800cf84 <mem_malloc+0x1ec>)
 800cee8:	f240 32b5 	movw	r2, #949	; 0x3b5
 800ceec:	4929      	ldr	r1, [pc, #164]	; (800cf94 <mem_malloc+0x1fc>)
 800ceee:	4827      	ldr	r0, [pc, #156]	; (800cf8c <mem_malloc+0x1f4>)
 800cef0:	f00d fc58 	bl	801a7a4 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800cef4:	4821      	ldr	r0, [pc, #132]	; (800cf7c <mem_malloc+0x1e4>)
 800cef6:	f00c fbca 	bl	801968e <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800cefa:	8bba      	ldrh	r2, [r7, #28]
 800cefc:	697b      	ldr	r3, [r7, #20]
 800cefe:	4413      	add	r3, r2
 800cf00:	3308      	adds	r3, #8
 800cf02:	4a23      	ldr	r2, [pc, #140]	; (800cf90 <mem_malloc+0x1f8>)
 800cf04:	6812      	ldr	r2, [r2, #0]
 800cf06:	4293      	cmp	r3, r2
 800cf08:	d906      	bls.n	800cf18 <mem_malloc+0x180>
 800cf0a:	4b1e      	ldr	r3, [pc, #120]	; (800cf84 <mem_malloc+0x1ec>)
 800cf0c:	f240 32b9 	movw	r2, #953	; 0x3b9
 800cf10:	4921      	ldr	r1, [pc, #132]	; (800cf98 <mem_malloc+0x200>)
 800cf12:	481e      	ldr	r0, [pc, #120]	; (800cf8c <mem_malloc+0x1f4>)
 800cf14:	f00d fc46 	bl	801a7a4 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800cf18:	697b      	ldr	r3, [r7, #20]
 800cf1a:	f003 0303 	and.w	r3, r3, #3
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d006      	beq.n	800cf30 <mem_malloc+0x198>
 800cf22:	4b18      	ldr	r3, [pc, #96]	; (800cf84 <mem_malloc+0x1ec>)
 800cf24:	f240 32bb 	movw	r2, #955	; 0x3bb
 800cf28:	491c      	ldr	r1, [pc, #112]	; (800cf9c <mem_malloc+0x204>)
 800cf2a:	4818      	ldr	r0, [pc, #96]	; (800cf8c <mem_malloc+0x1f4>)
 800cf2c:	f00d fc3a 	bl	801a7a4 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800cf30:	697b      	ldr	r3, [r7, #20]
 800cf32:	f003 0303 	and.w	r3, r3, #3
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d006      	beq.n	800cf48 <mem_malloc+0x1b0>
 800cf3a:	4b12      	ldr	r3, [pc, #72]	; (800cf84 <mem_malloc+0x1ec>)
 800cf3c:	f240 32bd 	movw	r2, #957	; 0x3bd
 800cf40:	4917      	ldr	r1, [pc, #92]	; (800cfa0 <mem_malloc+0x208>)
 800cf42:	4812      	ldr	r0, [pc, #72]	; (800cf8c <mem_malloc+0x1f4>)
 800cf44:	f00d fc2e 	bl	801a7a4 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800cf48:	697b      	ldr	r3, [r7, #20]
 800cf4a:	3308      	adds	r3, #8
 800cf4c:	e011      	b.n	800cf72 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800cf4e:	8bfb      	ldrh	r3, [r7, #30]
 800cf50:	4618      	mov	r0, r3
 800cf52:	f7ff fc3b 	bl	800c7cc <ptr_to_mem>
 800cf56:	4603      	mov	r3, r0
 800cf58:	881b      	ldrh	r3, [r3, #0]
 800cf5a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800cf5c:	8bfa      	ldrh	r2, [r7, #30]
 800cf5e:	8bbb      	ldrh	r3, [r7, #28]
 800cf60:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800cf64:	429a      	cmp	r2, r3
 800cf66:	f4ff af41 	bcc.w	800cdec <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800cf6a:	4804      	ldr	r0, [pc, #16]	; (800cf7c <mem_malloc+0x1e4>)
 800cf6c:	f00c fb8f 	bl	801968e <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800cf70:	2300      	movs	r3, #0
}
 800cf72:	4618      	mov	r0, r3
 800cf74:	3720      	adds	r7, #32
 800cf76:	46bd      	mov	sp, r7
 800cf78:	bd80      	pop	{r7, pc}
 800cf7a:	bf00      	nop
 800cf7c:	20008e20 	.word	0x20008e20
 800cf80:	20008e24 	.word	0x20008e24
 800cf84:	0801bc9c 	.word	0x0801bc9c
 800cf88:	0801be60 	.word	0x0801be60
 800cf8c:	0801bce4 	.word	0x0801bce4
 800cf90:	20008e1c 	.word	0x20008e1c
 800cf94:	0801be74 	.word	0x0801be74
 800cf98:	0801be90 	.word	0x0801be90
 800cf9c:	0801bec0 	.word	0x0801bec0
 800cfa0:	0801bef0 	.word	0x0801bef0

0800cfa4 <mem_calloc>:
 * @param size size of the objects to allocate
 * @return pointer to allocated memory / NULL pointer if there is an error
 */
void *
mem_calloc(mem_size_t count, mem_size_t size)
{
 800cfa4:	b580      	push	{r7, lr}
 800cfa6:	b084      	sub	sp, #16
 800cfa8:	af00      	add	r7, sp, #0
 800cfaa:	4603      	mov	r3, r0
 800cfac:	460a      	mov	r2, r1
 800cfae:	80fb      	strh	r3, [r7, #6]
 800cfb0:	4613      	mov	r3, r2
 800cfb2:	80bb      	strh	r3, [r7, #4]
  void *p;
  size_t alloc_size = (size_t)count * (size_t)size;
 800cfb4:	88fb      	ldrh	r3, [r7, #6]
 800cfb6:	88ba      	ldrh	r2, [r7, #4]
 800cfb8:	fb02 f303 	mul.w	r3, r2, r3
 800cfbc:	60fb      	str	r3, [r7, #12]

  if ((size_t)(mem_size_t)alloc_size != alloc_size) {
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	b29b      	uxth	r3, r3
 800cfc2:	461a      	mov	r2, r3
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	4293      	cmp	r3, r2
 800cfc8:	d001      	beq.n	800cfce <mem_calloc+0x2a>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_calloc: could not allocate %"SZT_F" bytes\n", alloc_size));
    return NULL;
 800cfca:	2300      	movs	r3, #0
 800cfcc:	e00e      	b.n	800cfec <mem_calloc+0x48>
  }

  /* allocate 'count' objects of size 'size' */
  p = mem_malloc((mem_size_t)alloc_size);
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	b29b      	uxth	r3, r3
 800cfd2:	4618      	mov	r0, r3
 800cfd4:	f7ff fee0 	bl	800cd98 <mem_malloc>
 800cfd8:	60b8      	str	r0, [r7, #8]
  if (p) {
 800cfda:	68bb      	ldr	r3, [r7, #8]
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d004      	beq.n	800cfea <mem_calloc+0x46>
    /* zero the memory */
    memset(p, 0, alloc_size);
 800cfe0:	68fa      	ldr	r2, [r7, #12]
 800cfe2:	2100      	movs	r1, #0
 800cfe4:	68b8      	ldr	r0, [r7, #8]
 800cfe6:	f00d faf7 	bl	801a5d8 <memset>
  }
  return p;
 800cfea:	68bb      	ldr	r3, [r7, #8]
}
 800cfec:	4618      	mov	r0, r3
 800cfee:	3710      	adds	r7, #16
 800cff0:	46bd      	mov	sp, r7
 800cff2:	bd80      	pop	{r7, pc}

0800cff4 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800cff4:	b480      	push	{r7}
 800cff6:	b085      	sub	sp, #20
 800cff8:	af00      	add	r7, sp, #0
 800cffa:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	689b      	ldr	r3, [r3, #8]
 800d000:	2200      	movs	r2, #0
 800d002:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	685b      	ldr	r3, [r3, #4]
 800d008:	3303      	adds	r3, #3
 800d00a:	f023 0303 	bic.w	r3, r3, #3
 800d00e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800d010:	2300      	movs	r3, #0
 800d012:	60fb      	str	r3, [r7, #12]
 800d014:	e011      	b.n	800d03a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	689b      	ldr	r3, [r3, #8]
 800d01a:	681a      	ldr	r2, [r3, #0]
 800d01c:	68bb      	ldr	r3, [r7, #8]
 800d01e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	689b      	ldr	r3, [r3, #8]
 800d024:	68ba      	ldr	r2, [r7, #8]
 800d026:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	881b      	ldrh	r3, [r3, #0]
 800d02c:	461a      	mov	r2, r3
 800d02e:	68bb      	ldr	r3, [r7, #8]
 800d030:	4413      	add	r3, r2
 800d032:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	3301      	adds	r3, #1
 800d038:	60fb      	str	r3, [r7, #12]
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	885b      	ldrh	r3, [r3, #2]
 800d03e:	461a      	mov	r2, r3
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	4293      	cmp	r3, r2
 800d044:	dbe7      	blt.n	800d016 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800d046:	bf00      	nop
 800d048:	bf00      	nop
 800d04a:	3714      	adds	r7, #20
 800d04c:	46bd      	mov	sp, r7
 800d04e:	bc80      	pop	{r7}
 800d050:	4770      	bx	lr
	...

0800d054 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800d054:	b580      	push	{r7, lr}
 800d056:	b082      	sub	sp, #8
 800d058:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800d05a:	2300      	movs	r3, #0
 800d05c:	80fb      	strh	r3, [r7, #6]
 800d05e:	e009      	b.n	800d074 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800d060:	88fb      	ldrh	r3, [r7, #6]
 800d062:	4a08      	ldr	r2, [pc, #32]	; (800d084 <memp_init+0x30>)
 800d064:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d068:	4618      	mov	r0, r3
 800d06a:	f7ff ffc3 	bl	800cff4 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800d06e:	88fb      	ldrh	r3, [r7, #6]
 800d070:	3301      	adds	r3, #1
 800d072:	80fb      	strh	r3, [r7, #6]
 800d074:	88fb      	ldrh	r3, [r7, #6]
 800d076:	2b0c      	cmp	r3, #12
 800d078:	d9f2      	bls.n	800d060 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800d07a:	bf00      	nop
 800d07c:	bf00      	nop
 800d07e:	3708      	adds	r7, #8
 800d080:	46bd      	mov	sp, r7
 800d082:	bd80      	pop	{r7, pc}
 800d084:	0801eaf8 	.word	0x0801eaf8

0800d088 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800d088:	b580      	push	{r7, lr}
 800d08a:	b084      	sub	sp, #16
 800d08c:	af00      	add	r7, sp, #0
 800d08e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800d090:	f00c fb30 	bl	80196f4 <sys_arch_protect>
 800d094:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	689b      	ldr	r3, [r3, #8]
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800d09e:	68bb      	ldr	r3, [r7, #8]
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d015      	beq.n	800d0d0 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	689b      	ldr	r3, [r3, #8]
 800d0a8:	68ba      	ldr	r2, [r7, #8]
 800d0aa:	6812      	ldr	r2, [r2, #0]
 800d0ac:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800d0ae:	68bb      	ldr	r3, [r7, #8]
 800d0b0:	f003 0303 	and.w	r3, r3, #3
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d006      	beq.n	800d0c6 <do_memp_malloc_pool+0x3e>
 800d0b8:	4b09      	ldr	r3, [pc, #36]	; (800d0e0 <do_memp_malloc_pool+0x58>)
 800d0ba:	f44f 728c 	mov.w	r2, #280	; 0x118
 800d0be:	4909      	ldr	r1, [pc, #36]	; (800d0e4 <do_memp_malloc_pool+0x5c>)
 800d0c0:	4809      	ldr	r0, [pc, #36]	; (800d0e8 <do_memp_malloc_pool+0x60>)
 800d0c2:	f00d fb6f 	bl	801a7a4 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800d0c6:	68f8      	ldr	r0, [r7, #12]
 800d0c8:	f00c fb22 	bl	8019710 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800d0cc:	68bb      	ldr	r3, [r7, #8]
 800d0ce:	e003      	b.n	800d0d8 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800d0d0:	68f8      	ldr	r0, [r7, #12]
 800d0d2:	f00c fb1d 	bl	8019710 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800d0d6:	2300      	movs	r3, #0
}
 800d0d8:	4618      	mov	r0, r3
 800d0da:	3710      	adds	r7, #16
 800d0dc:	46bd      	mov	sp, r7
 800d0de:	bd80      	pop	{r7, pc}
 800d0e0:	0801bf14 	.word	0x0801bf14
 800d0e4:	0801bf44 	.word	0x0801bf44
 800d0e8:	0801bf68 	.word	0x0801bf68

0800d0ec <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800d0ec:	b580      	push	{r7, lr}
 800d0ee:	b082      	sub	sp, #8
 800d0f0:	af00      	add	r7, sp, #0
 800d0f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d106      	bne.n	800d108 <memp_malloc_pool+0x1c>
 800d0fa:	4b0a      	ldr	r3, [pc, #40]	; (800d124 <memp_malloc_pool+0x38>)
 800d0fc:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800d100:	4909      	ldr	r1, [pc, #36]	; (800d128 <memp_malloc_pool+0x3c>)
 800d102:	480a      	ldr	r0, [pc, #40]	; (800d12c <memp_malloc_pool+0x40>)
 800d104:	f00d fb4e 	bl	801a7a4 <iprintf>
  if (desc == NULL) {
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d101      	bne.n	800d112 <memp_malloc_pool+0x26>
    return NULL;
 800d10e:	2300      	movs	r3, #0
 800d110:	e003      	b.n	800d11a <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800d112:	6878      	ldr	r0, [r7, #4]
 800d114:	f7ff ffb8 	bl	800d088 <do_memp_malloc_pool>
 800d118:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800d11a:	4618      	mov	r0, r3
 800d11c:	3708      	adds	r7, #8
 800d11e:	46bd      	mov	sp, r7
 800d120:	bd80      	pop	{r7, pc}
 800d122:	bf00      	nop
 800d124:	0801bf14 	.word	0x0801bf14
 800d128:	0801bf90 	.word	0x0801bf90
 800d12c:	0801bf68 	.word	0x0801bf68

0800d130 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800d130:	b580      	push	{r7, lr}
 800d132:	b084      	sub	sp, #16
 800d134:	af00      	add	r7, sp, #0
 800d136:	4603      	mov	r3, r0
 800d138:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800d13a:	79fb      	ldrb	r3, [r7, #7]
 800d13c:	2b0c      	cmp	r3, #12
 800d13e:	d908      	bls.n	800d152 <memp_malloc+0x22>
 800d140:	4b0a      	ldr	r3, [pc, #40]	; (800d16c <memp_malloc+0x3c>)
 800d142:	f240 1257 	movw	r2, #343	; 0x157
 800d146:	490a      	ldr	r1, [pc, #40]	; (800d170 <memp_malloc+0x40>)
 800d148:	480a      	ldr	r0, [pc, #40]	; (800d174 <memp_malloc+0x44>)
 800d14a:	f00d fb2b 	bl	801a7a4 <iprintf>
 800d14e:	2300      	movs	r3, #0
 800d150:	e008      	b.n	800d164 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800d152:	79fb      	ldrb	r3, [r7, #7]
 800d154:	4a08      	ldr	r2, [pc, #32]	; (800d178 <memp_malloc+0x48>)
 800d156:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d15a:	4618      	mov	r0, r3
 800d15c:	f7ff ff94 	bl	800d088 <do_memp_malloc_pool>
 800d160:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800d162:	68fb      	ldr	r3, [r7, #12]
}
 800d164:	4618      	mov	r0, r3
 800d166:	3710      	adds	r7, #16
 800d168:	46bd      	mov	sp, r7
 800d16a:	bd80      	pop	{r7, pc}
 800d16c:	0801bf14 	.word	0x0801bf14
 800d170:	0801bfa4 	.word	0x0801bfa4
 800d174:	0801bf68 	.word	0x0801bf68
 800d178:	0801eaf8 	.word	0x0801eaf8

0800d17c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800d17c:	b580      	push	{r7, lr}
 800d17e:	b084      	sub	sp, #16
 800d180:	af00      	add	r7, sp, #0
 800d182:	6078      	str	r0, [r7, #4]
 800d184:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800d186:	683b      	ldr	r3, [r7, #0]
 800d188:	f003 0303 	and.w	r3, r3, #3
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d006      	beq.n	800d19e <do_memp_free_pool+0x22>
 800d190:	4b0d      	ldr	r3, [pc, #52]	; (800d1c8 <do_memp_free_pool+0x4c>)
 800d192:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800d196:	490d      	ldr	r1, [pc, #52]	; (800d1cc <do_memp_free_pool+0x50>)
 800d198:	480d      	ldr	r0, [pc, #52]	; (800d1d0 <do_memp_free_pool+0x54>)
 800d19a:	f00d fb03 	bl	801a7a4 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800d19e:	683b      	ldr	r3, [r7, #0]
 800d1a0:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800d1a2:	f00c faa7 	bl	80196f4 <sys_arch_protect>
 800d1a6:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	689b      	ldr	r3, [r3, #8]
 800d1ac:	681a      	ldr	r2, [r3, #0]
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	689b      	ldr	r3, [r3, #8]
 800d1b6:	68fa      	ldr	r2, [r7, #12]
 800d1b8:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800d1ba:	68b8      	ldr	r0, [r7, #8]
 800d1bc:	f00c faa8 	bl	8019710 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800d1c0:	bf00      	nop
 800d1c2:	3710      	adds	r7, #16
 800d1c4:	46bd      	mov	sp, r7
 800d1c6:	bd80      	pop	{r7, pc}
 800d1c8:	0801bf14 	.word	0x0801bf14
 800d1cc:	0801bfc4 	.word	0x0801bfc4
 800d1d0:	0801bf68 	.word	0x0801bf68

0800d1d4 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800d1d4:	b580      	push	{r7, lr}
 800d1d6:	b082      	sub	sp, #8
 800d1d8:	af00      	add	r7, sp, #0
 800d1da:	6078      	str	r0, [r7, #4]
 800d1dc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d106      	bne.n	800d1f2 <memp_free_pool+0x1e>
 800d1e4:	4b0a      	ldr	r3, [pc, #40]	; (800d210 <memp_free_pool+0x3c>)
 800d1e6:	f240 1295 	movw	r2, #405	; 0x195
 800d1ea:	490a      	ldr	r1, [pc, #40]	; (800d214 <memp_free_pool+0x40>)
 800d1ec:	480a      	ldr	r0, [pc, #40]	; (800d218 <memp_free_pool+0x44>)
 800d1ee:	f00d fad9 	bl	801a7a4 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d007      	beq.n	800d208 <memp_free_pool+0x34>
 800d1f8:	683b      	ldr	r3, [r7, #0]
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d004      	beq.n	800d208 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800d1fe:	6839      	ldr	r1, [r7, #0]
 800d200:	6878      	ldr	r0, [r7, #4]
 800d202:	f7ff ffbb 	bl	800d17c <do_memp_free_pool>
 800d206:	e000      	b.n	800d20a <memp_free_pool+0x36>
    return;
 800d208:	bf00      	nop
}
 800d20a:	3708      	adds	r7, #8
 800d20c:	46bd      	mov	sp, r7
 800d20e:	bd80      	pop	{r7, pc}
 800d210:	0801bf14 	.word	0x0801bf14
 800d214:	0801bf90 	.word	0x0801bf90
 800d218:	0801bf68 	.word	0x0801bf68

0800d21c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800d21c:	b580      	push	{r7, lr}
 800d21e:	b082      	sub	sp, #8
 800d220:	af00      	add	r7, sp, #0
 800d222:	4603      	mov	r3, r0
 800d224:	6039      	str	r1, [r7, #0]
 800d226:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800d228:	79fb      	ldrb	r3, [r7, #7]
 800d22a:	2b0c      	cmp	r3, #12
 800d22c:	d907      	bls.n	800d23e <memp_free+0x22>
 800d22e:	4b0c      	ldr	r3, [pc, #48]	; (800d260 <memp_free+0x44>)
 800d230:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800d234:	490b      	ldr	r1, [pc, #44]	; (800d264 <memp_free+0x48>)
 800d236:	480c      	ldr	r0, [pc, #48]	; (800d268 <memp_free+0x4c>)
 800d238:	f00d fab4 	bl	801a7a4 <iprintf>
 800d23c:	e00c      	b.n	800d258 <memp_free+0x3c>

  if (mem == NULL) {
 800d23e:	683b      	ldr	r3, [r7, #0]
 800d240:	2b00      	cmp	r3, #0
 800d242:	d008      	beq.n	800d256 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800d244:	79fb      	ldrb	r3, [r7, #7]
 800d246:	4a09      	ldr	r2, [pc, #36]	; (800d26c <memp_free+0x50>)
 800d248:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d24c:	6839      	ldr	r1, [r7, #0]
 800d24e:	4618      	mov	r0, r3
 800d250:	f7ff ff94 	bl	800d17c <do_memp_free_pool>
 800d254:	e000      	b.n	800d258 <memp_free+0x3c>
    return;
 800d256:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800d258:	3708      	adds	r7, #8
 800d25a:	46bd      	mov	sp, r7
 800d25c:	bd80      	pop	{r7, pc}
 800d25e:	bf00      	nop
 800d260:	0801bf14 	.word	0x0801bf14
 800d264:	0801bfe4 	.word	0x0801bfe4
 800d268:	0801bf68 	.word	0x0801bf68
 800d26c:	0801eaf8 	.word	0x0801eaf8

0800d270 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800d270:	b480      	push	{r7}
 800d272:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800d274:	bf00      	nop
 800d276:	46bd      	mov	sp, r7
 800d278:	bc80      	pop	{r7}
 800d27a:	4770      	bx	lr

0800d27c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800d27c:	b580      	push	{r7, lr}
 800d27e:	b086      	sub	sp, #24
 800d280:	af00      	add	r7, sp, #0
 800d282:	60f8      	str	r0, [r7, #12]
 800d284:	60b9      	str	r1, [r7, #8]
 800d286:	607a      	str	r2, [r7, #4]
 800d288:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d108      	bne.n	800d2a2 <netif_add+0x26>
 800d290:	4b5b      	ldr	r3, [pc, #364]	; (800d400 <netif_add+0x184>)
 800d292:	f240 1227 	movw	r2, #295	; 0x127
 800d296:	495b      	ldr	r1, [pc, #364]	; (800d404 <netif_add+0x188>)
 800d298:	485b      	ldr	r0, [pc, #364]	; (800d408 <netif_add+0x18c>)
 800d29a:	f00d fa83 	bl	801a7a4 <iprintf>
 800d29e:	2300      	movs	r3, #0
 800d2a0:	e0a9      	b.n	800d3f6 <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800d2a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d108      	bne.n	800d2ba <netif_add+0x3e>
 800d2a8:	4b55      	ldr	r3, [pc, #340]	; (800d400 <netif_add+0x184>)
 800d2aa:	f44f 7294 	mov.w	r2, #296	; 0x128
 800d2ae:	4957      	ldr	r1, [pc, #348]	; (800d40c <netif_add+0x190>)
 800d2b0:	4855      	ldr	r0, [pc, #340]	; (800d408 <netif_add+0x18c>)
 800d2b2:	f00d fa77 	bl	801a7a4 <iprintf>
 800d2b6:	2300      	movs	r3, #0
 800d2b8:	e09d      	b.n	800d3f6 <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800d2ba:	68bb      	ldr	r3, [r7, #8]
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d101      	bne.n	800d2c4 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800d2c0:	4b53      	ldr	r3, [pc, #332]	; (800d410 <netif_add+0x194>)
 800d2c2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d101      	bne.n	800d2ce <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800d2ca:	4b51      	ldr	r3, [pc, #324]	; (800d410 <netif_add+0x194>)
 800d2cc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800d2ce:	683b      	ldr	r3, [r7, #0]
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d101      	bne.n	800d2d8 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800d2d4:	4b4e      	ldr	r3, [pc, #312]	; (800d410 <netif_add+0x194>)
 800d2d6:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	2200      	movs	r2, #0
 800d2dc:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	2200      	movs	r2, #0
 800d2e2:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	2200      	movs	r2, #0
 800d2e8:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	4a49      	ldr	r2, [pc, #292]	; (800d414 <netif_add+0x198>)
 800d2ee:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	2200      	movs	r2, #0
 800d2f4:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	2200      	movs	r2, #0
 800d2fa:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	3324      	adds	r3, #36	; 0x24
 800d302:	2204      	movs	r2, #4
 800d304:	2100      	movs	r1, #0
 800d306:	4618      	mov	r0, r3
 800d308:	f00d f966 	bl	801a5d8 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	2200      	movs	r2, #0
 800d310:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	6a3a      	ldr	r2, [r7, #32]
 800d316:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800d318:	4b3f      	ldr	r3, [pc, #252]	; (800d418 <netif_add+0x19c>)
 800d31a:	781a      	ldrb	r2, [r3, #0]
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d326:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800d328:	683b      	ldr	r3, [r7, #0]
 800d32a:	687a      	ldr	r2, [r7, #4]
 800d32c:	68b9      	ldr	r1, [r7, #8]
 800d32e:	68f8      	ldr	r0, [r7, #12]
 800d330:	f000 f912 	bl	800d558 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800d334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d336:	68f8      	ldr	r0, [r7, #12]
 800d338:	4798      	blx	r3
 800d33a:	4603      	mov	r3, r0
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d001      	beq.n	800d344 <netif_add+0xc8>
    return NULL;
 800d340:	2300      	movs	r3, #0
 800d342:	e058      	b.n	800d3f6 <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d34a:	2bff      	cmp	r3, #255	; 0xff
 800d34c:	d103      	bne.n	800d356 <netif_add+0xda>
        netif->num = 0;
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	2200      	movs	r2, #0
 800d352:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 800d356:	2300      	movs	r3, #0
 800d358:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800d35a:	4b30      	ldr	r3, [pc, #192]	; (800d41c <netif_add+0x1a0>)
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	617b      	str	r3, [r7, #20]
 800d360:	e02b      	b.n	800d3ba <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800d362:	697a      	ldr	r2, [r7, #20]
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	429a      	cmp	r2, r3
 800d368:	d106      	bne.n	800d378 <netif_add+0xfc>
 800d36a:	4b25      	ldr	r3, [pc, #148]	; (800d400 <netif_add+0x184>)
 800d36c:	f240 128b 	movw	r2, #395	; 0x18b
 800d370:	492b      	ldr	r1, [pc, #172]	; (800d420 <netif_add+0x1a4>)
 800d372:	4825      	ldr	r0, [pc, #148]	; (800d408 <netif_add+0x18c>)
 800d374:	f00d fa16 	bl	801a7a4 <iprintf>
        num_netifs++;
 800d378:	693b      	ldr	r3, [r7, #16]
 800d37a:	3301      	adds	r3, #1
 800d37c:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800d37e:	693b      	ldr	r3, [r7, #16]
 800d380:	2bff      	cmp	r3, #255	; 0xff
 800d382:	dd06      	ble.n	800d392 <netif_add+0x116>
 800d384:	4b1e      	ldr	r3, [pc, #120]	; (800d400 <netif_add+0x184>)
 800d386:	f240 128d 	movw	r2, #397	; 0x18d
 800d38a:	4926      	ldr	r1, [pc, #152]	; (800d424 <netif_add+0x1a8>)
 800d38c:	481e      	ldr	r0, [pc, #120]	; (800d408 <netif_add+0x18c>)
 800d38e:	f00d fa09 	bl	801a7a4 <iprintf>
        if (netif2->num == netif->num) {
 800d392:	697b      	ldr	r3, [r7, #20]
 800d394:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d39e:	429a      	cmp	r2, r3
 800d3a0:	d108      	bne.n	800d3b4 <netif_add+0x138>
          netif->num++;
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d3a8:	3301      	adds	r3, #1
 800d3aa:	b2da      	uxtb	r2, r3
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 800d3b2:	e005      	b.n	800d3c0 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800d3b4:	697b      	ldr	r3, [r7, #20]
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	617b      	str	r3, [r7, #20]
 800d3ba:	697b      	ldr	r3, [r7, #20]
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d1d0      	bne.n	800d362 <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 800d3c0:	697b      	ldr	r3, [r7, #20]
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d1be      	bne.n	800d344 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d3cc:	2bfe      	cmp	r3, #254	; 0xfe
 800d3ce:	d103      	bne.n	800d3d8 <netif_add+0x15c>
    netif_num = 0;
 800d3d0:	4b11      	ldr	r3, [pc, #68]	; (800d418 <netif_add+0x19c>)
 800d3d2:	2200      	movs	r2, #0
 800d3d4:	701a      	strb	r2, [r3, #0]
 800d3d6:	e006      	b.n	800d3e6 <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d3de:	3301      	adds	r3, #1
 800d3e0:	b2da      	uxtb	r2, r3
 800d3e2:	4b0d      	ldr	r3, [pc, #52]	; (800d418 <netif_add+0x19c>)
 800d3e4:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800d3e6:	4b0d      	ldr	r3, [pc, #52]	; (800d41c <netif_add+0x1a0>)
 800d3e8:	681a      	ldr	r2, [r3, #0]
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800d3ee:	4a0b      	ldr	r2, [pc, #44]	; (800d41c <netif_add+0x1a0>)
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800d3f4:	68fb      	ldr	r3, [r7, #12]
}
 800d3f6:	4618      	mov	r0, r3
 800d3f8:	3718      	adds	r7, #24
 800d3fa:	46bd      	mov	sp, r7
 800d3fc:	bd80      	pop	{r7, pc}
 800d3fe:	bf00      	nop
 800d400:	0801c000 	.word	0x0801c000
 800d404:	0801c094 	.word	0x0801c094
 800d408:	0801c050 	.word	0x0801c050
 800d40c:	0801c0b0 	.word	0x0801c0b0
 800d410:	0801eb7c 	.word	0x0801eb7c
 800d414:	0800d765 	.word	0x0800d765
 800d418:	2000bf1c 	.word	0x2000bf1c
 800d41c:	2000bf14 	.word	0x2000bf14
 800d420:	0801c0d4 	.word	0x0801c0d4
 800d424:	0801c0e8 	.word	0x0801c0e8

0800d428 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800d428:	b580      	push	{r7, lr}
 800d42a:	b082      	sub	sp, #8
 800d42c:	af00      	add	r7, sp, #0
 800d42e:	6078      	str	r0, [r7, #4]
 800d430:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800d432:	6839      	ldr	r1, [r7, #0]
 800d434:	6878      	ldr	r0, [r7, #4]
 800d436:	f002 fe2b 	bl	8010090 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800d43a:	6839      	ldr	r1, [r7, #0]
 800d43c:	6878      	ldr	r0, [r7, #4]
 800d43e:	f007 fed3 	bl	80151e8 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800d442:	bf00      	nop
 800d444:	3708      	adds	r7, #8
 800d446:	46bd      	mov	sp, r7
 800d448:	bd80      	pop	{r7, pc}
	...

0800d44c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800d44c:	b580      	push	{r7, lr}
 800d44e:	b086      	sub	sp, #24
 800d450:	af00      	add	r7, sp, #0
 800d452:	60f8      	str	r0, [r7, #12]
 800d454:	60b9      	str	r1, [r7, #8]
 800d456:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800d458:	68bb      	ldr	r3, [r7, #8]
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d106      	bne.n	800d46c <netif_do_set_ipaddr+0x20>
 800d45e:	4b1d      	ldr	r3, [pc, #116]	; (800d4d4 <netif_do_set_ipaddr+0x88>)
 800d460:	f240 12cb 	movw	r2, #459	; 0x1cb
 800d464:	491c      	ldr	r1, [pc, #112]	; (800d4d8 <netif_do_set_ipaddr+0x8c>)
 800d466:	481d      	ldr	r0, [pc, #116]	; (800d4dc <netif_do_set_ipaddr+0x90>)
 800d468:	f00d f99c 	bl	801a7a4 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d106      	bne.n	800d480 <netif_do_set_ipaddr+0x34>
 800d472:	4b18      	ldr	r3, [pc, #96]	; (800d4d4 <netif_do_set_ipaddr+0x88>)
 800d474:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800d478:	4917      	ldr	r1, [pc, #92]	; (800d4d8 <netif_do_set_ipaddr+0x8c>)
 800d47a:	4818      	ldr	r0, [pc, #96]	; (800d4dc <netif_do_set_ipaddr+0x90>)
 800d47c:	f00d f992 	bl	801a7a4 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800d480:	68bb      	ldr	r3, [r7, #8]
 800d482:	681a      	ldr	r2, [r3, #0]
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	3304      	adds	r3, #4
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	429a      	cmp	r2, r3
 800d48c:	d01c      	beq.n	800d4c8 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800d48e:	68bb      	ldr	r3, [r7, #8]
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	3304      	adds	r3, #4
 800d498:	681a      	ldr	r2, [r3, #0]
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800d49e:	f107 0314 	add.w	r3, r7, #20
 800d4a2:	4619      	mov	r1, r3
 800d4a4:	6878      	ldr	r0, [r7, #4]
 800d4a6:	f7ff ffbf 	bl	800d428 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800d4aa:	68bb      	ldr	r3, [r7, #8]
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d002      	beq.n	800d4b6 <netif_do_set_ipaddr+0x6a>
 800d4b0:	68bb      	ldr	r3, [r7, #8]
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	e000      	b.n	800d4b8 <netif_do_set_ipaddr+0x6c>
 800d4b6:	2300      	movs	r3, #0
 800d4b8:	68fa      	ldr	r2, [r7, #12]
 800d4ba:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800d4bc:	2101      	movs	r1, #1
 800d4be:	68f8      	ldr	r0, [r7, #12]
 800d4c0:	f000 f8ce 	bl	800d660 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800d4c4:	2301      	movs	r3, #1
 800d4c6:	e000      	b.n	800d4ca <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800d4c8:	2300      	movs	r3, #0
}
 800d4ca:	4618      	mov	r0, r3
 800d4cc:	3718      	adds	r7, #24
 800d4ce:	46bd      	mov	sp, r7
 800d4d0:	bd80      	pop	{r7, pc}
 800d4d2:	bf00      	nop
 800d4d4:	0801c000 	.word	0x0801c000
 800d4d8:	0801c118 	.word	0x0801c118
 800d4dc:	0801c050 	.word	0x0801c050

0800d4e0 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800d4e0:	b480      	push	{r7}
 800d4e2:	b085      	sub	sp, #20
 800d4e4:	af00      	add	r7, sp, #0
 800d4e6:	60f8      	str	r0, [r7, #12]
 800d4e8:	60b9      	str	r1, [r7, #8]
 800d4ea:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800d4ec:	68bb      	ldr	r3, [r7, #8]
 800d4ee:	681a      	ldr	r2, [r3, #0]
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	3308      	adds	r3, #8
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	429a      	cmp	r2, r3
 800d4f8:	d00a      	beq.n	800d510 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800d4fa:	68bb      	ldr	r3, [r7, #8]
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d002      	beq.n	800d506 <netif_do_set_netmask+0x26>
 800d500:	68bb      	ldr	r3, [r7, #8]
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	e000      	b.n	800d508 <netif_do_set_netmask+0x28>
 800d506:	2300      	movs	r3, #0
 800d508:	68fa      	ldr	r2, [r7, #12]
 800d50a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800d50c:	2301      	movs	r3, #1
 800d50e:	e000      	b.n	800d512 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800d510:	2300      	movs	r3, #0
}
 800d512:	4618      	mov	r0, r3
 800d514:	3714      	adds	r7, #20
 800d516:	46bd      	mov	sp, r7
 800d518:	bc80      	pop	{r7}
 800d51a:	4770      	bx	lr

0800d51c <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800d51c:	b480      	push	{r7}
 800d51e:	b085      	sub	sp, #20
 800d520:	af00      	add	r7, sp, #0
 800d522:	60f8      	str	r0, [r7, #12]
 800d524:	60b9      	str	r1, [r7, #8]
 800d526:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800d528:	68bb      	ldr	r3, [r7, #8]
 800d52a:	681a      	ldr	r2, [r3, #0]
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	330c      	adds	r3, #12
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	429a      	cmp	r2, r3
 800d534:	d00a      	beq.n	800d54c <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800d536:	68bb      	ldr	r3, [r7, #8]
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d002      	beq.n	800d542 <netif_do_set_gw+0x26>
 800d53c:	68bb      	ldr	r3, [r7, #8]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	e000      	b.n	800d544 <netif_do_set_gw+0x28>
 800d542:	2300      	movs	r3, #0
 800d544:	68fa      	ldr	r2, [r7, #12]
 800d546:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800d548:	2301      	movs	r3, #1
 800d54a:	e000      	b.n	800d54e <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800d54c:	2300      	movs	r3, #0
}
 800d54e:	4618      	mov	r0, r3
 800d550:	3714      	adds	r7, #20
 800d552:	46bd      	mov	sp, r7
 800d554:	bc80      	pop	{r7}
 800d556:	4770      	bx	lr

0800d558 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800d558:	b580      	push	{r7, lr}
 800d55a:	b088      	sub	sp, #32
 800d55c:	af00      	add	r7, sp, #0
 800d55e:	60f8      	str	r0, [r7, #12]
 800d560:	60b9      	str	r1, [r7, #8]
 800d562:	607a      	str	r2, [r7, #4]
 800d564:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800d566:	2300      	movs	r3, #0
 800d568:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800d56a:	2300      	movs	r3, #0
 800d56c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800d56e:	68bb      	ldr	r3, [r7, #8]
 800d570:	2b00      	cmp	r3, #0
 800d572:	d101      	bne.n	800d578 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800d574:	4b1c      	ldr	r3, [pc, #112]	; (800d5e8 <netif_set_addr+0x90>)
 800d576:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d101      	bne.n	800d582 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800d57e:	4b1a      	ldr	r3, [pc, #104]	; (800d5e8 <netif_set_addr+0x90>)
 800d580:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800d582:	683b      	ldr	r3, [r7, #0]
 800d584:	2b00      	cmp	r3, #0
 800d586:	d101      	bne.n	800d58c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800d588:	4b17      	ldr	r3, [pc, #92]	; (800d5e8 <netif_set_addr+0x90>)
 800d58a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800d58c:	68bb      	ldr	r3, [r7, #8]
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d003      	beq.n	800d59a <netif_set_addr+0x42>
 800d592:	68bb      	ldr	r3, [r7, #8]
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	2b00      	cmp	r3, #0
 800d598:	d101      	bne.n	800d59e <netif_set_addr+0x46>
 800d59a:	2301      	movs	r3, #1
 800d59c:	e000      	b.n	800d5a0 <netif_set_addr+0x48>
 800d59e:	2300      	movs	r3, #0
 800d5a0:	617b      	str	r3, [r7, #20]
  if (remove) {
 800d5a2:	697b      	ldr	r3, [r7, #20]
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d006      	beq.n	800d5b6 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800d5a8:	f107 0310 	add.w	r3, r7, #16
 800d5ac:	461a      	mov	r2, r3
 800d5ae:	68b9      	ldr	r1, [r7, #8]
 800d5b0:	68f8      	ldr	r0, [r7, #12]
 800d5b2:	f7ff ff4b 	bl	800d44c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800d5b6:	69fa      	ldr	r2, [r7, #28]
 800d5b8:	6879      	ldr	r1, [r7, #4]
 800d5ba:	68f8      	ldr	r0, [r7, #12]
 800d5bc:	f7ff ff90 	bl	800d4e0 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800d5c0:	69ba      	ldr	r2, [r7, #24]
 800d5c2:	6839      	ldr	r1, [r7, #0]
 800d5c4:	68f8      	ldr	r0, [r7, #12]
 800d5c6:	f7ff ffa9 	bl	800d51c <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800d5ca:	697b      	ldr	r3, [r7, #20]
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d106      	bne.n	800d5de <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800d5d0:	f107 0310 	add.w	r3, r7, #16
 800d5d4:	461a      	mov	r2, r3
 800d5d6:	68b9      	ldr	r1, [r7, #8]
 800d5d8:	68f8      	ldr	r0, [r7, #12]
 800d5da:	f7ff ff37 	bl	800d44c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800d5de:	bf00      	nop
 800d5e0:	3720      	adds	r7, #32
 800d5e2:	46bd      	mov	sp, r7
 800d5e4:	bd80      	pop	{r7, pc}
 800d5e6:	bf00      	nop
 800d5e8:	0801eb7c 	.word	0x0801eb7c

0800d5ec <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800d5ec:	b480      	push	{r7}
 800d5ee:	b083      	sub	sp, #12
 800d5f0:	af00      	add	r7, sp, #0
 800d5f2:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800d5f4:	4a03      	ldr	r2, [pc, #12]	; (800d604 <netif_set_default+0x18>)
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800d5fa:	bf00      	nop
 800d5fc:	370c      	adds	r7, #12
 800d5fe:	46bd      	mov	sp, r7
 800d600:	bc80      	pop	{r7}
 800d602:	4770      	bx	lr
 800d604:	2000bf18 	.word	0x2000bf18

0800d608 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800d608:	b580      	push	{r7, lr}
 800d60a:	b082      	sub	sp, #8
 800d60c:	af00      	add	r7, sp, #0
 800d60e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	2b00      	cmp	r3, #0
 800d614:	d107      	bne.n	800d626 <netif_set_up+0x1e>
 800d616:	4b0f      	ldr	r3, [pc, #60]	; (800d654 <netif_set_up+0x4c>)
 800d618:	f44f 7254 	mov.w	r2, #848	; 0x350
 800d61c:	490e      	ldr	r1, [pc, #56]	; (800d658 <netif_set_up+0x50>)
 800d61e:	480f      	ldr	r0, [pc, #60]	; (800d65c <netif_set_up+0x54>)
 800d620:	f00d f8c0 	bl	801a7a4 <iprintf>
 800d624:	e013      	b.n	800d64e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d62c:	f003 0301 	and.w	r3, r3, #1
 800d630:	2b00      	cmp	r3, #0
 800d632:	d10c      	bne.n	800d64e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d63a:	f043 0301 	orr.w	r3, r3, #1
 800d63e:	b2da      	uxtb	r2, r3
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800d646:	2103      	movs	r1, #3
 800d648:	6878      	ldr	r0, [r7, #4]
 800d64a:	f000 f809 	bl	800d660 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800d64e:	3708      	adds	r7, #8
 800d650:	46bd      	mov	sp, r7
 800d652:	bd80      	pop	{r7, pc}
 800d654:	0801c000 	.word	0x0801c000
 800d658:	0801c188 	.word	0x0801c188
 800d65c:	0801c050 	.word	0x0801c050

0800d660 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800d660:	b580      	push	{r7, lr}
 800d662:	b082      	sub	sp, #8
 800d664:	af00      	add	r7, sp, #0
 800d666:	6078      	str	r0, [r7, #4]
 800d668:	460b      	mov	r3, r1
 800d66a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d106      	bne.n	800d680 <netif_issue_reports+0x20>
 800d672:	4b18      	ldr	r3, [pc, #96]	; (800d6d4 <netif_issue_reports+0x74>)
 800d674:	f240 326d 	movw	r2, #877	; 0x36d
 800d678:	4917      	ldr	r1, [pc, #92]	; (800d6d8 <netif_issue_reports+0x78>)
 800d67a:	4818      	ldr	r0, [pc, #96]	; (800d6dc <netif_issue_reports+0x7c>)
 800d67c:	f00d f892 	bl	801a7a4 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d686:	f003 0304 	and.w	r3, r3, #4
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d01e      	beq.n	800d6cc <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d694:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d017      	beq.n	800d6cc <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800d69c:	78fb      	ldrb	r3, [r7, #3]
 800d69e:	f003 0301 	and.w	r3, r3, #1
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d013      	beq.n	800d6ce <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	3304      	adds	r3, #4
 800d6aa:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d00e      	beq.n	800d6ce <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d6b6:	f003 0308 	and.w	r3, r3, #8
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d007      	beq.n	800d6ce <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	3304      	adds	r3, #4
 800d6c2:	4619      	mov	r1, r3
 800d6c4:	6878      	ldr	r0, [r7, #4]
 800d6c6:	f00a fb51 	bl	8017d6c <etharp_request>
 800d6ca:	e000      	b.n	800d6ce <netif_issue_reports+0x6e>
    return;
 800d6cc:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800d6ce:	3708      	adds	r7, #8
 800d6d0:	46bd      	mov	sp, r7
 800d6d2:	bd80      	pop	{r7, pc}
 800d6d4:	0801c000 	.word	0x0801c000
 800d6d8:	0801c1a4 	.word	0x0801c1a4
 800d6dc:	0801c050 	.word	0x0801c050

0800d6e0 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800d6e0:	b580      	push	{r7, lr}
 800d6e2:	b082      	sub	sp, #8
 800d6e4:	af00      	add	r7, sp, #0
 800d6e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d107      	bne.n	800d6fe <netif_set_down+0x1e>
 800d6ee:	4b12      	ldr	r3, [pc, #72]	; (800d738 <netif_set_down+0x58>)
 800d6f0:	f240 329b 	movw	r2, #923	; 0x39b
 800d6f4:	4911      	ldr	r1, [pc, #68]	; (800d73c <netif_set_down+0x5c>)
 800d6f6:	4812      	ldr	r0, [pc, #72]	; (800d740 <netif_set_down+0x60>)
 800d6f8:	f00d f854 	bl	801a7a4 <iprintf>
 800d6fc:	e019      	b.n	800d732 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d704:	f003 0301 	and.w	r3, r3, #1
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d012      	beq.n	800d732 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d712:	f023 0301 	bic.w	r3, r3, #1
 800d716:	b2da      	uxtb	r2, r3
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d724:	f003 0308 	and.w	r3, r3, #8
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d002      	beq.n	800d732 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800d72c:	6878      	ldr	r0, [r7, #4]
 800d72e:	f009 fed7 	bl	80174e0 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800d732:	3708      	adds	r7, #8
 800d734:	46bd      	mov	sp, r7
 800d736:	bd80      	pop	{r7, pc}
 800d738:	0801c000 	.word	0x0801c000
 800d73c:	0801c1c8 	.word	0x0801c1c8
 800d740:	0801c050 	.word	0x0801c050

0800d744 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800d744:	b480      	push	{r7}
 800d746:	b083      	sub	sp, #12
 800d748:	af00      	add	r7, sp, #0
 800d74a:	6078      	str	r0, [r7, #4]
 800d74c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	2b00      	cmp	r3, #0
 800d752:	d002      	beq.n	800d75a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	683a      	ldr	r2, [r7, #0]
 800d758:	61da      	str	r2, [r3, #28]
  }
}
 800d75a:	bf00      	nop
 800d75c:	370c      	adds	r7, #12
 800d75e:	46bd      	mov	sp, r7
 800d760:	bc80      	pop	{r7}
 800d762:	4770      	bx	lr

0800d764 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800d764:	b480      	push	{r7}
 800d766:	b085      	sub	sp, #20
 800d768:	af00      	add	r7, sp, #0
 800d76a:	60f8      	str	r0, [r7, #12]
 800d76c:	60b9      	str	r1, [r7, #8]
 800d76e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800d770:	f06f 030b 	mvn.w	r3, #11
}
 800d774:	4618      	mov	r0, r3
 800d776:	3714      	adds	r7, #20
 800d778:	46bd      	mov	sp, r7
 800d77a:	bc80      	pop	{r7}
 800d77c:	4770      	bx	lr
	...

0800d780 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800d780:	b480      	push	{r7}
 800d782:	b085      	sub	sp, #20
 800d784:	af00      	add	r7, sp, #0
 800d786:	4603      	mov	r3, r0
 800d788:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800d78a:	79fb      	ldrb	r3, [r7, #7]
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d013      	beq.n	800d7b8 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800d790:	4b0c      	ldr	r3, [pc, #48]	; (800d7c4 <netif_get_by_index+0x44>)
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	60fb      	str	r3, [r7, #12]
 800d796:	e00c      	b.n	800d7b2 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d79e:	3301      	adds	r3, #1
 800d7a0:	b2db      	uxtb	r3, r3
 800d7a2:	79fa      	ldrb	r2, [r7, #7]
 800d7a4:	429a      	cmp	r2, r3
 800d7a6:	d101      	bne.n	800d7ac <netif_get_by_index+0x2c>
        return netif; /* found! */
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	e006      	b.n	800d7ba <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	60fb      	str	r3, [r7, #12]
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d1ef      	bne.n	800d798 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800d7b8:	2300      	movs	r3, #0
}
 800d7ba:	4618      	mov	r0, r3
 800d7bc:	3714      	adds	r7, #20
 800d7be:	46bd      	mov	sp, r7
 800d7c0:	bc80      	pop	{r7}
 800d7c2:	4770      	bx	lr
 800d7c4:	2000bf14 	.word	0x2000bf14

0800d7c8 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800d7c8:	b580      	push	{r7, lr}
 800d7ca:	b082      	sub	sp, #8
 800d7cc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800d7ce:	f00b ff91 	bl	80196f4 <sys_arch_protect>
 800d7d2:	6038      	str	r0, [r7, #0]
 800d7d4:	4b0d      	ldr	r3, [pc, #52]	; (800d80c <pbuf_free_ooseq+0x44>)
 800d7d6:	2200      	movs	r2, #0
 800d7d8:	701a      	strb	r2, [r3, #0]
 800d7da:	6838      	ldr	r0, [r7, #0]
 800d7dc:	f00b ff98 	bl	8019710 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800d7e0:	4b0b      	ldr	r3, [pc, #44]	; (800d810 <pbuf_free_ooseq+0x48>)
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	607b      	str	r3, [r7, #4]
 800d7e6:	e00a      	b.n	800d7fe <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d003      	beq.n	800d7f8 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800d7f0:	6878      	ldr	r0, [r7, #4]
 800d7f2:	f002 fc8b 	bl	801010c <tcp_free_ooseq>
      return;
 800d7f6:	e005      	b.n	800d804 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	68db      	ldr	r3, [r3, #12]
 800d7fc:	607b      	str	r3, [r7, #4]
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	2b00      	cmp	r3, #0
 800d802:	d1f1      	bne.n	800d7e8 <pbuf_free_ooseq+0x20>
    }
  }
}
 800d804:	3708      	adds	r7, #8
 800d806:	46bd      	mov	sp, r7
 800d808:	bd80      	pop	{r7, pc}
 800d80a:	bf00      	nop
 800d80c:	2000bf1d 	.word	0x2000bf1d
 800d810:	2000bf2c 	.word	0x2000bf2c

0800d814 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800d814:	b580      	push	{r7, lr}
 800d816:	b082      	sub	sp, #8
 800d818:	af00      	add	r7, sp, #0
 800d81a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800d81c:	f7ff ffd4 	bl	800d7c8 <pbuf_free_ooseq>
}
 800d820:	bf00      	nop
 800d822:	3708      	adds	r7, #8
 800d824:	46bd      	mov	sp, r7
 800d826:	bd80      	pop	{r7, pc}

0800d828 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800d828:	b580      	push	{r7, lr}
 800d82a:	b082      	sub	sp, #8
 800d82c:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800d82e:	f00b ff61 	bl	80196f4 <sys_arch_protect>
 800d832:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800d834:	4b0f      	ldr	r3, [pc, #60]	; (800d874 <pbuf_pool_is_empty+0x4c>)
 800d836:	781b      	ldrb	r3, [r3, #0]
 800d838:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800d83a:	4b0e      	ldr	r3, [pc, #56]	; (800d874 <pbuf_pool_is_empty+0x4c>)
 800d83c:	2201      	movs	r2, #1
 800d83e:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800d840:	6878      	ldr	r0, [r7, #4]
 800d842:	f00b ff65 	bl	8019710 <sys_arch_unprotect>

  if (!queued) {
 800d846:	78fb      	ldrb	r3, [r7, #3]
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d10f      	bne.n	800d86c <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800d84c:	2100      	movs	r1, #0
 800d84e:	480a      	ldr	r0, [pc, #40]	; (800d878 <pbuf_pool_is_empty+0x50>)
 800d850:	f7fd fb94 	bl	800af7c <tcpip_try_callback>
 800d854:	4603      	mov	r3, r0
 800d856:	2b00      	cmp	r3, #0
 800d858:	d008      	beq.n	800d86c <pbuf_pool_is_empty+0x44>
 800d85a:	f00b ff4b 	bl	80196f4 <sys_arch_protect>
 800d85e:	6078      	str	r0, [r7, #4]
 800d860:	4b04      	ldr	r3, [pc, #16]	; (800d874 <pbuf_pool_is_empty+0x4c>)
 800d862:	2200      	movs	r2, #0
 800d864:	701a      	strb	r2, [r3, #0]
 800d866:	6878      	ldr	r0, [r7, #4]
 800d868:	f00b ff52 	bl	8019710 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800d86c:	bf00      	nop
 800d86e:	3708      	adds	r7, #8
 800d870:	46bd      	mov	sp, r7
 800d872:	bd80      	pop	{r7, pc}
 800d874:	2000bf1d 	.word	0x2000bf1d
 800d878:	0800d815 	.word	0x0800d815

0800d87c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800d87c:	b480      	push	{r7}
 800d87e:	b085      	sub	sp, #20
 800d880:	af00      	add	r7, sp, #0
 800d882:	60f8      	str	r0, [r7, #12]
 800d884:	60b9      	str	r1, [r7, #8]
 800d886:	4611      	mov	r1, r2
 800d888:	461a      	mov	r2, r3
 800d88a:	460b      	mov	r3, r1
 800d88c:	80fb      	strh	r3, [r7, #6]
 800d88e:	4613      	mov	r3, r2
 800d890:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	2200      	movs	r2, #0
 800d896:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	68ba      	ldr	r2, [r7, #8]
 800d89c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	88fa      	ldrh	r2, [r7, #6]
 800d8a2:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	88ba      	ldrh	r2, [r7, #4]
 800d8a8:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800d8aa:	8b3b      	ldrh	r3, [r7, #24]
 800d8ac:	b2da      	uxtb	r2, r3
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	7f3a      	ldrb	r2, [r7, #28]
 800d8b6:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	2201      	movs	r2, #1
 800d8bc:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	2200      	movs	r2, #0
 800d8c2:	73da      	strb	r2, [r3, #15]
}
 800d8c4:	bf00      	nop
 800d8c6:	3714      	adds	r7, #20
 800d8c8:	46bd      	mov	sp, r7
 800d8ca:	bc80      	pop	{r7}
 800d8cc:	4770      	bx	lr
	...

0800d8d0 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800d8d0:	b580      	push	{r7, lr}
 800d8d2:	b08c      	sub	sp, #48	; 0x30
 800d8d4:	af02      	add	r7, sp, #8
 800d8d6:	4603      	mov	r3, r0
 800d8d8:	71fb      	strb	r3, [r7, #7]
 800d8da:	460b      	mov	r3, r1
 800d8dc:	80bb      	strh	r3, [r7, #4]
 800d8de:	4613      	mov	r3, r2
 800d8e0:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800d8e2:	79fb      	ldrb	r3, [r7, #7]
 800d8e4:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800d8e6:	887b      	ldrh	r3, [r7, #2]
 800d8e8:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800d8ec:	d07f      	beq.n	800d9ee <pbuf_alloc+0x11e>
 800d8ee:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800d8f2:	f300 80c8 	bgt.w	800da86 <pbuf_alloc+0x1b6>
 800d8f6:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800d8fa:	d010      	beq.n	800d91e <pbuf_alloc+0x4e>
 800d8fc:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800d900:	f300 80c1 	bgt.w	800da86 <pbuf_alloc+0x1b6>
 800d904:	2b01      	cmp	r3, #1
 800d906:	d002      	beq.n	800d90e <pbuf_alloc+0x3e>
 800d908:	2b41      	cmp	r3, #65	; 0x41
 800d90a:	f040 80bc 	bne.w	800da86 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800d90e:	887a      	ldrh	r2, [r7, #2]
 800d910:	88bb      	ldrh	r3, [r7, #4]
 800d912:	4619      	mov	r1, r3
 800d914:	2000      	movs	r0, #0
 800d916:	f000 f8d1 	bl	800dabc <pbuf_alloc_reference>
 800d91a:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800d91c:	e0bd      	b.n	800da9a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800d91e:	2300      	movs	r3, #0
 800d920:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800d922:	2300      	movs	r3, #0
 800d924:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800d926:	88bb      	ldrh	r3, [r7, #4]
 800d928:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800d92a:	200c      	movs	r0, #12
 800d92c:	f7ff fc00 	bl	800d130 <memp_malloc>
 800d930:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800d932:	693b      	ldr	r3, [r7, #16]
 800d934:	2b00      	cmp	r3, #0
 800d936:	d109      	bne.n	800d94c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800d938:	f7ff ff76 	bl	800d828 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800d93c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d002      	beq.n	800d948 <pbuf_alloc+0x78>
            pbuf_free(p);
 800d942:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d944:	f000 faa8 	bl	800de98 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800d948:	2300      	movs	r3, #0
 800d94a:	e0a7      	b.n	800da9c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800d94c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d94e:	3303      	adds	r3, #3
 800d950:	b29b      	uxth	r3, r3
 800d952:	f023 0303 	bic.w	r3, r3, #3
 800d956:	b29b      	uxth	r3, r3
 800d958:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800d95c:	b29b      	uxth	r3, r3
 800d95e:	8b7a      	ldrh	r2, [r7, #26]
 800d960:	4293      	cmp	r3, r2
 800d962:	bf28      	it	cs
 800d964:	4613      	movcs	r3, r2
 800d966:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800d968:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d96a:	3310      	adds	r3, #16
 800d96c:	693a      	ldr	r2, [r7, #16]
 800d96e:	4413      	add	r3, r2
 800d970:	3303      	adds	r3, #3
 800d972:	f023 0303 	bic.w	r3, r3, #3
 800d976:	4618      	mov	r0, r3
 800d978:	89f9      	ldrh	r1, [r7, #14]
 800d97a:	8b7a      	ldrh	r2, [r7, #26]
 800d97c:	2300      	movs	r3, #0
 800d97e:	9301      	str	r3, [sp, #4]
 800d980:	887b      	ldrh	r3, [r7, #2]
 800d982:	9300      	str	r3, [sp, #0]
 800d984:	460b      	mov	r3, r1
 800d986:	4601      	mov	r1, r0
 800d988:	6938      	ldr	r0, [r7, #16]
 800d98a:	f7ff ff77 	bl	800d87c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800d98e:	693b      	ldr	r3, [r7, #16]
 800d990:	685b      	ldr	r3, [r3, #4]
 800d992:	f003 0303 	and.w	r3, r3, #3
 800d996:	2b00      	cmp	r3, #0
 800d998:	d006      	beq.n	800d9a8 <pbuf_alloc+0xd8>
 800d99a:	4b42      	ldr	r3, [pc, #264]	; (800daa4 <pbuf_alloc+0x1d4>)
 800d99c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d9a0:	4941      	ldr	r1, [pc, #260]	; (800daa8 <pbuf_alloc+0x1d8>)
 800d9a2:	4842      	ldr	r0, [pc, #264]	; (800daac <pbuf_alloc+0x1dc>)
 800d9a4:	f00c fefe 	bl	801a7a4 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800d9a8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d9aa:	3303      	adds	r3, #3
 800d9ac:	f023 0303 	bic.w	r3, r3, #3
 800d9b0:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800d9b4:	d106      	bne.n	800d9c4 <pbuf_alloc+0xf4>
 800d9b6:	4b3b      	ldr	r3, [pc, #236]	; (800daa4 <pbuf_alloc+0x1d4>)
 800d9b8:	f44f 7281 	mov.w	r2, #258	; 0x102
 800d9bc:	493c      	ldr	r1, [pc, #240]	; (800dab0 <pbuf_alloc+0x1e0>)
 800d9be:	483b      	ldr	r0, [pc, #236]	; (800daac <pbuf_alloc+0x1dc>)
 800d9c0:	f00c fef0 	bl	801a7a4 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800d9c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d102      	bne.n	800d9d0 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800d9ca:	693b      	ldr	r3, [r7, #16]
 800d9cc:	627b      	str	r3, [r7, #36]	; 0x24
 800d9ce:	e002      	b.n	800d9d6 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800d9d0:	69fb      	ldr	r3, [r7, #28]
 800d9d2:	693a      	ldr	r2, [r7, #16]
 800d9d4:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800d9d6:	693b      	ldr	r3, [r7, #16]
 800d9d8:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800d9da:	8b7a      	ldrh	r2, [r7, #26]
 800d9dc:	89fb      	ldrh	r3, [r7, #14]
 800d9de:	1ad3      	subs	r3, r2, r3
 800d9e0:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800d9e2:	2300      	movs	r3, #0
 800d9e4:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800d9e6:	8b7b      	ldrh	r3, [r7, #26]
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d19e      	bne.n	800d92a <pbuf_alloc+0x5a>
      break;
 800d9ec:	e055      	b.n	800da9a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800d9ee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d9f0:	3303      	adds	r3, #3
 800d9f2:	b29b      	uxth	r3, r3
 800d9f4:	f023 0303 	bic.w	r3, r3, #3
 800d9f8:	b29a      	uxth	r2, r3
 800d9fa:	88bb      	ldrh	r3, [r7, #4]
 800d9fc:	3303      	adds	r3, #3
 800d9fe:	b29b      	uxth	r3, r3
 800da00:	f023 0303 	bic.w	r3, r3, #3
 800da04:	b29b      	uxth	r3, r3
 800da06:	4413      	add	r3, r2
 800da08:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800da0a:	8b3b      	ldrh	r3, [r7, #24]
 800da0c:	3310      	adds	r3, #16
 800da0e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800da10:	8b3a      	ldrh	r2, [r7, #24]
 800da12:	88bb      	ldrh	r3, [r7, #4]
 800da14:	3303      	adds	r3, #3
 800da16:	f023 0303 	bic.w	r3, r3, #3
 800da1a:	429a      	cmp	r2, r3
 800da1c:	d306      	bcc.n	800da2c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800da1e:	8afa      	ldrh	r2, [r7, #22]
 800da20:	88bb      	ldrh	r3, [r7, #4]
 800da22:	3303      	adds	r3, #3
 800da24:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800da28:	429a      	cmp	r2, r3
 800da2a:	d201      	bcs.n	800da30 <pbuf_alloc+0x160>
        return NULL;
 800da2c:	2300      	movs	r3, #0
 800da2e:	e035      	b.n	800da9c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800da30:	8afb      	ldrh	r3, [r7, #22]
 800da32:	4618      	mov	r0, r3
 800da34:	f7ff f9b0 	bl	800cd98 <mem_malloc>
 800da38:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800da3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d101      	bne.n	800da44 <pbuf_alloc+0x174>
        return NULL;
 800da40:	2300      	movs	r3, #0
 800da42:	e02b      	b.n	800da9c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800da44:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800da46:	3310      	adds	r3, #16
 800da48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800da4a:	4413      	add	r3, r2
 800da4c:	3303      	adds	r3, #3
 800da4e:	f023 0303 	bic.w	r3, r3, #3
 800da52:	4618      	mov	r0, r3
 800da54:	88b9      	ldrh	r1, [r7, #4]
 800da56:	88ba      	ldrh	r2, [r7, #4]
 800da58:	2300      	movs	r3, #0
 800da5a:	9301      	str	r3, [sp, #4]
 800da5c:	887b      	ldrh	r3, [r7, #2]
 800da5e:	9300      	str	r3, [sp, #0]
 800da60:	460b      	mov	r3, r1
 800da62:	4601      	mov	r1, r0
 800da64:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800da66:	f7ff ff09 	bl	800d87c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800da6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da6c:	685b      	ldr	r3, [r3, #4]
 800da6e:	f003 0303 	and.w	r3, r3, #3
 800da72:	2b00      	cmp	r3, #0
 800da74:	d010      	beq.n	800da98 <pbuf_alloc+0x1c8>
 800da76:	4b0b      	ldr	r3, [pc, #44]	; (800daa4 <pbuf_alloc+0x1d4>)
 800da78:	f44f 7291 	mov.w	r2, #290	; 0x122
 800da7c:	490d      	ldr	r1, [pc, #52]	; (800dab4 <pbuf_alloc+0x1e4>)
 800da7e:	480b      	ldr	r0, [pc, #44]	; (800daac <pbuf_alloc+0x1dc>)
 800da80:	f00c fe90 	bl	801a7a4 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800da84:	e008      	b.n	800da98 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800da86:	4b07      	ldr	r3, [pc, #28]	; (800daa4 <pbuf_alloc+0x1d4>)
 800da88:	f240 1227 	movw	r2, #295	; 0x127
 800da8c:	490a      	ldr	r1, [pc, #40]	; (800dab8 <pbuf_alloc+0x1e8>)
 800da8e:	4807      	ldr	r0, [pc, #28]	; (800daac <pbuf_alloc+0x1dc>)
 800da90:	f00c fe88 	bl	801a7a4 <iprintf>
      return NULL;
 800da94:	2300      	movs	r3, #0
 800da96:	e001      	b.n	800da9c <pbuf_alloc+0x1cc>
      break;
 800da98:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800da9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800da9c:	4618      	mov	r0, r3
 800da9e:	3728      	adds	r7, #40	; 0x28
 800daa0:	46bd      	mov	sp, r7
 800daa2:	bd80      	pop	{r7, pc}
 800daa4:	0801c230 	.word	0x0801c230
 800daa8:	0801c260 	.word	0x0801c260
 800daac:	0801c290 	.word	0x0801c290
 800dab0:	0801c2b8 	.word	0x0801c2b8
 800dab4:	0801c2ec 	.word	0x0801c2ec
 800dab8:	0801c318 	.word	0x0801c318

0800dabc <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800dabc:	b580      	push	{r7, lr}
 800dabe:	b086      	sub	sp, #24
 800dac0:	af02      	add	r7, sp, #8
 800dac2:	6078      	str	r0, [r7, #4]
 800dac4:	460b      	mov	r3, r1
 800dac6:	807b      	strh	r3, [r7, #2]
 800dac8:	4613      	mov	r3, r2
 800daca:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800dacc:	883b      	ldrh	r3, [r7, #0]
 800dace:	2b41      	cmp	r3, #65	; 0x41
 800dad0:	d009      	beq.n	800dae6 <pbuf_alloc_reference+0x2a>
 800dad2:	883b      	ldrh	r3, [r7, #0]
 800dad4:	2b01      	cmp	r3, #1
 800dad6:	d006      	beq.n	800dae6 <pbuf_alloc_reference+0x2a>
 800dad8:	4b0f      	ldr	r3, [pc, #60]	; (800db18 <pbuf_alloc_reference+0x5c>)
 800dada:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800dade:	490f      	ldr	r1, [pc, #60]	; (800db1c <pbuf_alloc_reference+0x60>)
 800dae0:	480f      	ldr	r0, [pc, #60]	; (800db20 <pbuf_alloc_reference+0x64>)
 800dae2:	f00c fe5f 	bl	801a7a4 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800dae6:	200b      	movs	r0, #11
 800dae8:	f7ff fb22 	bl	800d130 <memp_malloc>
 800daec:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d101      	bne.n	800daf8 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800daf4:	2300      	movs	r3, #0
 800daf6:	e00b      	b.n	800db10 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800daf8:	8879      	ldrh	r1, [r7, #2]
 800dafa:	887a      	ldrh	r2, [r7, #2]
 800dafc:	2300      	movs	r3, #0
 800dafe:	9301      	str	r3, [sp, #4]
 800db00:	883b      	ldrh	r3, [r7, #0]
 800db02:	9300      	str	r3, [sp, #0]
 800db04:	460b      	mov	r3, r1
 800db06:	6879      	ldr	r1, [r7, #4]
 800db08:	68f8      	ldr	r0, [r7, #12]
 800db0a:	f7ff feb7 	bl	800d87c <pbuf_init_alloced_pbuf>
  return p;
 800db0e:	68fb      	ldr	r3, [r7, #12]
}
 800db10:	4618      	mov	r0, r3
 800db12:	3710      	adds	r7, #16
 800db14:	46bd      	mov	sp, r7
 800db16:	bd80      	pop	{r7, pc}
 800db18:	0801c230 	.word	0x0801c230
 800db1c:	0801c334 	.word	0x0801c334
 800db20:	0801c290 	.word	0x0801c290

0800db24 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800db24:	b580      	push	{r7, lr}
 800db26:	b088      	sub	sp, #32
 800db28:	af02      	add	r7, sp, #8
 800db2a:	607b      	str	r3, [r7, #4]
 800db2c:	4603      	mov	r3, r0
 800db2e:	73fb      	strb	r3, [r7, #15]
 800db30:	460b      	mov	r3, r1
 800db32:	81bb      	strh	r3, [r7, #12]
 800db34:	4613      	mov	r3, r2
 800db36:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800db38:	7bfb      	ldrb	r3, [r7, #15]
 800db3a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800db3c:	8a7b      	ldrh	r3, [r7, #18]
 800db3e:	3303      	adds	r3, #3
 800db40:	f023 0203 	bic.w	r2, r3, #3
 800db44:	89bb      	ldrh	r3, [r7, #12]
 800db46:	441a      	add	r2, r3
 800db48:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800db4a:	429a      	cmp	r2, r3
 800db4c:	d901      	bls.n	800db52 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800db4e:	2300      	movs	r3, #0
 800db50:	e018      	b.n	800db84 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800db52:	6a3b      	ldr	r3, [r7, #32]
 800db54:	2b00      	cmp	r3, #0
 800db56:	d007      	beq.n	800db68 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800db58:	8a7b      	ldrh	r3, [r7, #18]
 800db5a:	3303      	adds	r3, #3
 800db5c:	f023 0303 	bic.w	r3, r3, #3
 800db60:	6a3a      	ldr	r2, [r7, #32]
 800db62:	4413      	add	r3, r2
 800db64:	617b      	str	r3, [r7, #20]
 800db66:	e001      	b.n	800db6c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800db68:	2300      	movs	r3, #0
 800db6a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800db6c:	6878      	ldr	r0, [r7, #4]
 800db6e:	89b9      	ldrh	r1, [r7, #12]
 800db70:	89ba      	ldrh	r2, [r7, #12]
 800db72:	2302      	movs	r3, #2
 800db74:	9301      	str	r3, [sp, #4]
 800db76:	897b      	ldrh	r3, [r7, #10]
 800db78:	9300      	str	r3, [sp, #0]
 800db7a:	460b      	mov	r3, r1
 800db7c:	6979      	ldr	r1, [r7, #20]
 800db7e:	f7ff fe7d 	bl	800d87c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800db82:	687b      	ldr	r3, [r7, #4]
}
 800db84:	4618      	mov	r0, r3
 800db86:	3718      	adds	r7, #24
 800db88:	46bd      	mov	sp, r7
 800db8a:	bd80      	pop	{r7, pc}

0800db8c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800db8c:	b580      	push	{r7, lr}
 800db8e:	b084      	sub	sp, #16
 800db90:	af00      	add	r7, sp, #0
 800db92:	6078      	str	r0, [r7, #4]
 800db94:	460b      	mov	r3, r1
 800db96:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d106      	bne.n	800dbac <pbuf_realloc+0x20>
 800db9e:	4b3a      	ldr	r3, [pc, #232]	; (800dc88 <pbuf_realloc+0xfc>)
 800dba0:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800dba4:	4939      	ldr	r1, [pc, #228]	; (800dc8c <pbuf_realloc+0x100>)
 800dba6:	483a      	ldr	r0, [pc, #232]	; (800dc90 <pbuf_realloc+0x104>)
 800dba8:	f00c fdfc 	bl	801a7a4 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	891b      	ldrh	r3, [r3, #8]
 800dbb0:	887a      	ldrh	r2, [r7, #2]
 800dbb2:	429a      	cmp	r2, r3
 800dbb4:	d263      	bcs.n	800dc7e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	891a      	ldrh	r2, [r3, #8]
 800dbba:	887b      	ldrh	r3, [r7, #2]
 800dbbc:	1ad3      	subs	r3, r2, r3
 800dbbe:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800dbc0:	887b      	ldrh	r3, [r7, #2]
 800dbc2:	817b      	strh	r3, [r7, #10]
  q = p;
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800dbc8:	e018      	b.n	800dbfc <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	895b      	ldrh	r3, [r3, #10]
 800dbce:	897a      	ldrh	r2, [r7, #10]
 800dbd0:	1ad3      	subs	r3, r2, r3
 800dbd2:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	891a      	ldrh	r2, [r3, #8]
 800dbd8:	893b      	ldrh	r3, [r7, #8]
 800dbda:	1ad3      	subs	r3, r2, r3
 800dbdc:	b29a      	uxth	r2, r3
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d106      	bne.n	800dbfc <pbuf_realloc+0x70>
 800dbee:	4b26      	ldr	r3, [pc, #152]	; (800dc88 <pbuf_realloc+0xfc>)
 800dbf0:	f240 12af 	movw	r2, #431	; 0x1af
 800dbf4:	4927      	ldr	r1, [pc, #156]	; (800dc94 <pbuf_realloc+0x108>)
 800dbf6:	4826      	ldr	r0, [pc, #152]	; (800dc90 <pbuf_realloc+0x104>)
 800dbf8:	f00c fdd4 	bl	801a7a4 <iprintf>
  while (rem_len > q->len) {
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	895b      	ldrh	r3, [r3, #10]
 800dc00:	897a      	ldrh	r2, [r7, #10]
 800dc02:	429a      	cmp	r2, r3
 800dc04:	d8e1      	bhi.n	800dbca <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	7b1b      	ldrb	r3, [r3, #12]
 800dc0a:	f003 030f 	and.w	r3, r3, #15
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d121      	bne.n	800dc56 <pbuf_realloc+0xca>
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	895b      	ldrh	r3, [r3, #10]
 800dc16:	897a      	ldrh	r2, [r7, #10]
 800dc18:	429a      	cmp	r2, r3
 800dc1a:	d01c      	beq.n	800dc56 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	7b5b      	ldrb	r3, [r3, #13]
 800dc20:	f003 0302 	and.w	r3, r3, #2
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d116      	bne.n	800dc56 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	685a      	ldr	r2, [r3, #4]
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	1ad3      	subs	r3, r2, r3
 800dc30:	b29a      	uxth	r2, r3
 800dc32:	897b      	ldrh	r3, [r7, #10]
 800dc34:	4413      	add	r3, r2
 800dc36:	b29b      	uxth	r3, r3
 800dc38:	4619      	mov	r1, r3
 800dc3a:	68f8      	ldr	r0, [r7, #12]
 800dc3c:	f7fe ffa2 	bl	800cb84 <mem_trim>
 800dc40:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d106      	bne.n	800dc56 <pbuf_realloc+0xca>
 800dc48:	4b0f      	ldr	r3, [pc, #60]	; (800dc88 <pbuf_realloc+0xfc>)
 800dc4a:	f240 12bd 	movw	r2, #445	; 0x1bd
 800dc4e:	4912      	ldr	r1, [pc, #72]	; (800dc98 <pbuf_realloc+0x10c>)
 800dc50:	480f      	ldr	r0, [pc, #60]	; (800dc90 <pbuf_realloc+0x104>)
 800dc52:	f00c fda7 	bl	801a7a4 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	897a      	ldrh	r2, [r7, #10]
 800dc5a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	895a      	ldrh	r2, [r3, #10]
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d004      	beq.n	800dc76 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	4618      	mov	r0, r3
 800dc72:	f000 f911 	bl	800de98 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	2200      	movs	r2, #0
 800dc7a:	601a      	str	r2, [r3, #0]
 800dc7c:	e000      	b.n	800dc80 <pbuf_realloc+0xf4>
    return;
 800dc7e:	bf00      	nop

}
 800dc80:	3710      	adds	r7, #16
 800dc82:	46bd      	mov	sp, r7
 800dc84:	bd80      	pop	{r7, pc}
 800dc86:	bf00      	nop
 800dc88:	0801c230 	.word	0x0801c230
 800dc8c:	0801c348 	.word	0x0801c348
 800dc90:	0801c290 	.word	0x0801c290
 800dc94:	0801c360 	.word	0x0801c360
 800dc98:	0801c378 	.word	0x0801c378

0800dc9c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800dc9c:	b580      	push	{r7, lr}
 800dc9e:	b086      	sub	sp, #24
 800dca0:	af00      	add	r7, sp, #0
 800dca2:	60f8      	str	r0, [r7, #12]
 800dca4:	60b9      	str	r1, [r7, #8]
 800dca6:	4613      	mov	r3, r2
 800dca8:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d106      	bne.n	800dcbe <pbuf_add_header_impl+0x22>
 800dcb0:	4b2b      	ldr	r3, [pc, #172]	; (800dd60 <pbuf_add_header_impl+0xc4>)
 800dcb2:	f240 12df 	movw	r2, #479	; 0x1df
 800dcb6:	492b      	ldr	r1, [pc, #172]	; (800dd64 <pbuf_add_header_impl+0xc8>)
 800dcb8:	482b      	ldr	r0, [pc, #172]	; (800dd68 <pbuf_add_header_impl+0xcc>)
 800dcba:	f00c fd73 	bl	801a7a4 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d003      	beq.n	800dccc <pbuf_add_header_impl+0x30>
 800dcc4:	68bb      	ldr	r3, [r7, #8]
 800dcc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dcca:	d301      	bcc.n	800dcd0 <pbuf_add_header_impl+0x34>
    return 1;
 800dccc:	2301      	movs	r3, #1
 800dcce:	e043      	b.n	800dd58 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800dcd0:	68bb      	ldr	r3, [r7, #8]
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d101      	bne.n	800dcda <pbuf_add_header_impl+0x3e>
    return 0;
 800dcd6:	2300      	movs	r3, #0
 800dcd8:	e03e      	b.n	800dd58 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800dcda:	68bb      	ldr	r3, [r7, #8]
 800dcdc:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	891a      	ldrh	r2, [r3, #8]
 800dce2:	8a7b      	ldrh	r3, [r7, #18]
 800dce4:	4413      	add	r3, r2
 800dce6:	b29b      	uxth	r3, r3
 800dce8:	8a7a      	ldrh	r2, [r7, #18]
 800dcea:	429a      	cmp	r2, r3
 800dcec:	d901      	bls.n	800dcf2 <pbuf_add_header_impl+0x56>
    return 1;
 800dcee:	2301      	movs	r3, #1
 800dcf0:	e032      	b.n	800dd58 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	7b1b      	ldrb	r3, [r3, #12]
 800dcf6:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800dcf8:	8a3b      	ldrh	r3, [r7, #16]
 800dcfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d00c      	beq.n	800dd1c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	685a      	ldr	r2, [r3, #4]
 800dd06:	68bb      	ldr	r3, [r7, #8]
 800dd08:	425b      	negs	r3, r3
 800dd0a:	4413      	add	r3, r2
 800dd0c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	3310      	adds	r3, #16
 800dd12:	697a      	ldr	r2, [r7, #20]
 800dd14:	429a      	cmp	r2, r3
 800dd16:	d20d      	bcs.n	800dd34 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800dd18:	2301      	movs	r3, #1
 800dd1a:	e01d      	b.n	800dd58 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800dd1c:	79fb      	ldrb	r3, [r7, #7]
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d006      	beq.n	800dd30 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	685a      	ldr	r2, [r3, #4]
 800dd26:	68bb      	ldr	r3, [r7, #8]
 800dd28:	425b      	negs	r3, r3
 800dd2a:	4413      	add	r3, r2
 800dd2c:	617b      	str	r3, [r7, #20]
 800dd2e:	e001      	b.n	800dd34 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800dd30:	2301      	movs	r3, #1
 800dd32:	e011      	b.n	800dd58 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	697a      	ldr	r2, [r7, #20]
 800dd38:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	895a      	ldrh	r2, [r3, #10]
 800dd3e:	8a7b      	ldrh	r3, [r7, #18]
 800dd40:	4413      	add	r3, r2
 800dd42:	b29a      	uxth	r2, r3
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	891a      	ldrh	r2, [r3, #8]
 800dd4c:	8a7b      	ldrh	r3, [r7, #18]
 800dd4e:	4413      	add	r3, r2
 800dd50:	b29a      	uxth	r2, r3
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	811a      	strh	r2, [r3, #8]


  return 0;
 800dd56:	2300      	movs	r3, #0
}
 800dd58:	4618      	mov	r0, r3
 800dd5a:	3718      	adds	r7, #24
 800dd5c:	46bd      	mov	sp, r7
 800dd5e:	bd80      	pop	{r7, pc}
 800dd60:	0801c230 	.word	0x0801c230
 800dd64:	0801c394 	.word	0x0801c394
 800dd68:	0801c290 	.word	0x0801c290

0800dd6c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800dd6c:	b580      	push	{r7, lr}
 800dd6e:	b082      	sub	sp, #8
 800dd70:	af00      	add	r7, sp, #0
 800dd72:	6078      	str	r0, [r7, #4]
 800dd74:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800dd76:	2200      	movs	r2, #0
 800dd78:	6839      	ldr	r1, [r7, #0]
 800dd7a:	6878      	ldr	r0, [r7, #4]
 800dd7c:	f7ff ff8e 	bl	800dc9c <pbuf_add_header_impl>
 800dd80:	4603      	mov	r3, r0
}
 800dd82:	4618      	mov	r0, r3
 800dd84:	3708      	adds	r7, #8
 800dd86:	46bd      	mov	sp, r7
 800dd88:	bd80      	pop	{r7, pc}
	...

0800dd8c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800dd8c:	b580      	push	{r7, lr}
 800dd8e:	b084      	sub	sp, #16
 800dd90:	af00      	add	r7, sp, #0
 800dd92:	6078      	str	r0, [r7, #4]
 800dd94:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d106      	bne.n	800ddaa <pbuf_remove_header+0x1e>
 800dd9c:	4b20      	ldr	r3, [pc, #128]	; (800de20 <pbuf_remove_header+0x94>)
 800dd9e:	f240 224b 	movw	r2, #587	; 0x24b
 800dda2:	4920      	ldr	r1, [pc, #128]	; (800de24 <pbuf_remove_header+0x98>)
 800dda4:	4820      	ldr	r0, [pc, #128]	; (800de28 <pbuf_remove_header+0x9c>)
 800dda6:	f00c fcfd 	bl	801a7a4 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d003      	beq.n	800ddb8 <pbuf_remove_header+0x2c>
 800ddb0:	683b      	ldr	r3, [r7, #0]
 800ddb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ddb6:	d301      	bcc.n	800ddbc <pbuf_remove_header+0x30>
    return 1;
 800ddb8:	2301      	movs	r3, #1
 800ddba:	e02c      	b.n	800de16 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800ddbc:	683b      	ldr	r3, [r7, #0]
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d101      	bne.n	800ddc6 <pbuf_remove_header+0x3a>
    return 0;
 800ddc2:	2300      	movs	r3, #0
 800ddc4:	e027      	b.n	800de16 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800ddc6:	683b      	ldr	r3, [r7, #0]
 800ddc8:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	895b      	ldrh	r3, [r3, #10]
 800ddce:	89fa      	ldrh	r2, [r7, #14]
 800ddd0:	429a      	cmp	r2, r3
 800ddd2:	d908      	bls.n	800dde6 <pbuf_remove_header+0x5a>
 800ddd4:	4b12      	ldr	r3, [pc, #72]	; (800de20 <pbuf_remove_header+0x94>)
 800ddd6:	f240 2255 	movw	r2, #597	; 0x255
 800ddda:	4914      	ldr	r1, [pc, #80]	; (800de2c <pbuf_remove_header+0xa0>)
 800dddc:	4812      	ldr	r0, [pc, #72]	; (800de28 <pbuf_remove_header+0x9c>)
 800ddde:	f00c fce1 	bl	801a7a4 <iprintf>
 800dde2:	2301      	movs	r3, #1
 800dde4:	e017      	b.n	800de16 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	685b      	ldr	r3, [r3, #4]
 800ddea:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	685a      	ldr	r2, [r3, #4]
 800ddf0:	683b      	ldr	r3, [r7, #0]
 800ddf2:	441a      	add	r2, r3
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	895a      	ldrh	r2, [r3, #10]
 800ddfc:	89fb      	ldrh	r3, [r7, #14]
 800ddfe:	1ad3      	subs	r3, r2, r3
 800de00:	b29a      	uxth	r2, r3
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	891a      	ldrh	r2, [r3, #8]
 800de0a:	89fb      	ldrh	r3, [r7, #14]
 800de0c:	1ad3      	subs	r3, r2, r3
 800de0e:	b29a      	uxth	r2, r3
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800de14:	2300      	movs	r3, #0
}
 800de16:	4618      	mov	r0, r3
 800de18:	3710      	adds	r7, #16
 800de1a:	46bd      	mov	sp, r7
 800de1c:	bd80      	pop	{r7, pc}
 800de1e:	bf00      	nop
 800de20:	0801c230 	.word	0x0801c230
 800de24:	0801c394 	.word	0x0801c394
 800de28:	0801c290 	.word	0x0801c290
 800de2c:	0801c3a0 	.word	0x0801c3a0

0800de30 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800de30:	b580      	push	{r7, lr}
 800de32:	b082      	sub	sp, #8
 800de34:	af00      	add	r7, sp, #0
 800de36:	6078      	str	r0, [r7, #4]
 800de38:	460b      	mov	r3, r1
 800de3a:	807b      	strh	r3, [r7, #2]
 800de3c:	4613      	mov	r3, r2
 800de3e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800de40:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800de44:	2b00      	cmp	r3, #0
 800de46:	da08      	bge.n	800de5a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800de48:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800de4c:	425b      	negs	r3, r3
 800de4e:	4619      	mov	r1, r3
 800de50:	6878      	ldr	r0, [r7, #4]
 800de52:	f7ff ff9b 	bl	800dd8c <pbuf_remove_header>
 800de56:	4603      	mov	r3, r0
 800de58:	e007      	b.n	800de6a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800de5a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800de5e:	787a      	ldrb	r2, [r7, #1]
 800de60:	4619      	mov	r1, r3
 800de62:	6878      	ldr	r0, [r7, #4]
 800de64:	f7ff ff1a 	bl	800dc9c <pbuf_add_header_impl>
 800de68:	4603      	mov	r3, r0
  }
}
 800de6a:	4618      	mov	r0, r3
 800de6c:	3708      	adds	r7, #8
 800de6e:	46bd      	mov	sp, r7
 800de70:	bd80      	pop	{r7, pc}

0800de72 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800de72:	b580      	push	{r7, lr}
 800de74:	b082      	sub	sp, #8
 800de76:	af00      	add	r7, sp, #0
 800de78:	6078      	str	r0, [r7, #4]
 800de7a:	460b      	mov	r3, r1
 800de7c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800de7e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800de82:	2201      	movs	r2, #1
 800de84:	4619      	mov	r1, r3
 800de86:	6878      	ldr	r0, [r7, #4]
 800de88:	f7ff ffd2 	bl	800de30 <pbuf_header_impl>
 800de8c:	4603      	mov	r3, r0
}
 800de8e:	4618      	mov	r0, r3
 800de90:	3708      	adds	r7, #8
 800de92:	46bd      	mov	sp, r7
 800de94:	bd80      	pop	{r7, pc}
	...

0800de98 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800de98:	b580      	push	{r7, lr}
 800de9a:	b088      	sub	sp, #32
 800de9c:	af00      	add	r7, sp, #0
 800de9e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d10b      	bne.n	800debe <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d106      	bne.n	800deba <pbuf_free+0x22>
 800deac:	4b3b      	ldr	r3, [pc, #236]	; (800df9c <pbuf_free+0x104>)
 800deae:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800deb2:	493b      	ldr	r1, [pc, #236]	; (800dfa0 <pbuf_free+0x108>)
 800deb4:	483b      	ldr	r0, [pc, #236]	; (800dfa4 <pbuf_free+0x10c>)
 800deb6:	f00c fc75 	bl	801a7a4 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800deba:	2300      	movs	r3, #0
 800debc:	e069      	b.n	800df92 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800debe:	2300      	movs	r3, #0
 800dec0:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800dec2:	e062      	b.n	800df8a <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800dec4:	f00b fc16 	bl	80196f4 <sys_arch_protect>
 800dec8:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	7b9b      	ldrb	r3, [r3, #14]
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d106      	bne.n	800dee0 <pbuf_free+0x48>
 800ded2:	4b32      	ldr	r3, [pc, #200]	; (800df9c <pbuf_free+0x104>)
 800ded4:	f240 22f1 	movw	r2, #753	; 0x2f1
 800ded8:	4933      	ldr	r1, [pc, #204]	; (800dfa8 <pbuf_free+0x110>)
 800deda:	4832      	ldr	r0, [pc, #200]	; (800dfa4 <pbuf_free+0x10c>)
 800dedc:	f00c fc62 	bl	801a7a4 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	7b9b      	ldrb	r3, [r3, #14]
 800dee4:	3b01      	subs	r3, #1
 800dee6:	b2da      	uxtb	r2, r3
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	739a      	strb	r2, [r3, #14]
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	7b9b      	ldrb	r3, [r3, #14]
 800def0:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800def2:	69b8      	ldr	r0, [r7, #24]
 800def4:	f00b fc0c 	bl	8019710 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800def8:	7dfb      	ldrb	r3, [r7, #23]
 800defa:	2b00      	cmp	r3, #0
 800defc:	d143      	bne.n	800df86 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	7b1b      	ldrb	r3, [r3, #12]
 800df08:	f003 030f 	and.w	r3, r3, #15
 800df0c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	7b5b      	ldrb	r3, [r3, #13]
 800df12:	f003 0302 	and.w	r3, r3, #2
 800df16:	2b00      	cmp	r3, #0
 800df18:	d011      	beq.n	800df3e <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800df1e:	68bb      	ldr	r3, [r7, #8]
 800df20:	691b      	ldr	r3, [r3, #16]
 800df22:	2b00      	cmp	r3, #0
 800df24:	d106      	bne.n	800df34 <pbuf_free+0x9c>
 800df26:	4b1d      	ldr	r3, [pc, #116]	; (800df9c <pbuf_free+0x104>)
 800df28:	f240 22ff 	movw	r2, #767	; 0x2ff
 800df2c:	491f      	ldr	r1, [pc, #124]	; (800dfac <pbuf_free+0x114>)
 800df2e:	481d      	ldr	r0, [pc, #116]	; (800dfa4 <pbuf_free+0x10c>)
 800df30:	f00c fc38 	bl	801a7a4 <iprintf>
        pc->custom_free_function(p);
 800df34:	68bb      	ldr	r3, [r7, #8]
 800df36:	691b      	ldr	r3, [r3, #16]
 800df38:	6878      	ldr	r0, [r7, #4]
 800df3a:	4798      	blx	r3
 800df3c:	e01d      	b.n	800df7a <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800df3e:	7bfb      	ldrb	r3, [r7, #15]
 800df40:	2b02      	cmp	r3, #2
 800df42:	d104      	bne.n	800df4e <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800df44:	6879      	ldr	r1, [r7, #4]
 800df46:	200c      	movs	r0, #12
 800df48:	f7ff f968 	bl	800d21c <memp_free>
 800df4c:	e015      	b.n	800df7a <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800df4e:	7bfb      	ldrb	r3, [r7, #15]
 800df50:	2b01      	cmp	r3, #1
 800df52:	d104      	bne.n	800df5e <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800df54:	6879      	ldr	r1, [r7, #4]
 800df56:	200b      	movs	r0, #11
 800df58:	f7ff f960 	bl	800d21c <memp_free>
 800df5c:	e00d      	b.n	800df7a <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800df5e:	7bfb      	ldrb	r3, [r7, #15]
 800df60:	2b00      	cmp	r3, #0
 800df62:	d103      	bne.n	800df6c <pbuf_free+0xd4>
          mem_free(p);
 800df64:	6878      	ldr	r0, [r7, #4]
 800df66:	f7fe fd7d 	bl	800ca64 <mem_free>
 800df6a:	e006      	b.n	800df7a <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800df6c:	4b0b      	ldr	r3, [pc, #44]	; (800df9c <pbuf_free+0x104>)
 800df6e:	f240 320f 	movw	r2, #783	; 0x30f
 800df72:	490f      	ldr	r1, [pc, #60]	; (800dfb0 <pbuf_free+0x118>)
 800df74:	480b      	ldr	r0, [pc, #44]	; (800dfa4 <pbuf_free+0x10c>)
 800df76:	f00c fc15 	bl	801a7a4 <iprintf>
        }
      }
      count++;
 800df7a:	7ffb      	ldrb	r3, [r7, #31]
 800df7c:	3301      	adds	r3, #1
 800df7e:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800df80:	693b      	ldr	r3, [r7, #16]
 800df82:	607b      	str	r3, [r7, #4]
 800df84:	e001      	b.n	800df8a <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800df86:	2300      	movs	r3, #0
 800df88:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d199      	bne.n	800dec4 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800df90:	7ffb      	ldrb	r3, [r7, #31]
}
 800df92:	4618      	mov	r0, r3
 800df94:	3720      	adds	r7, #32
 800df96:	46bd      	mov	sp, r7
 800df98:	bd80      	pop	{r7, pc}
 800df9a:	bf00      	nop
 800df9c:	0801c230 	.word	0x0801c230
 800dfa0:	0801c394 	.word	0x0801c394
 800dfa4:	0801c290 	.word	0x0801c290
 800dfa8:	0801c3c0 	.word	0x0801c3c0
 800dfac:	0801c3d8 	.word	0x0801c3d8
 800dfb0:	0801c3fc 	.word	0x0801c3fc

0800dfb4 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800dfb4:	b480      	push	{r7}
 800dfb6:	b085      	sub	sp, #20
 800dfb8:	af00      	add	r7, sp, #0
 800dfba:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800dfbc:	2300      	movs	r3, #0
 800dfbe:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800dfc0:	e005      	b.n	800dfce <pbuf_clen+0x1a>
    ++len;
 800dfc2:	89fb      	ldrh	r3, [r7, #14]
 800dfc4:	3301      	adds	r3, #1
 800dfc6:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d1f6      	bne.n	800dfc2 <pbuf_clen+0xe>
  }
  return len;
 800dfd4:	89fb      	ldrh	r3, [r7, #14]
}
 800dfd6:	4618      	mov	r0, r3
 800dfd8:	3714      	adds	r7, #20
 800dfda:	46bd      	mov	sp, r7
 800dfdc:	bc80      	pop	{r7}
 800dfde:	4770      	bx	lr

0800dfe0 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800dfe0:	b580      	push	{r7, lr}
 800dfe2:	b084      	sub	sp, #16
 800dfe4:	af00      	add	r7, sp, #0
 800dfe6:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d016      	beq.n	800e01c <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800dfee:	f00b fb81 	bl	80196f4 <sys_arch_protect>
 800dff2:	60f8      	str	r0, [r7, #12]
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	7b9b      	ldrb	r3, [r3, #14]
 800dff8:	3301      	adds	r3, #1
 800dffa:	b2da      	uxtb	r2, r3
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	739a      	strb	r2, [r3, #14]
 800e000:	68f8      	ldr	r0, [r7, #12]
 800e002:	f00b fb85 	bl	8019710 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	7b9b      	ldrb	r3, [r3, #14]
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d106      	bne.n	800e01c <pbuf_ref+0x3c>
 800e00e:	4b05      	ldr	r3, [pc, #20]	; (800e024 <pbuf_ref+0x44>)
 800e010:	f240 3242 	movw	r2, #834	; 0x342
 800e014:	4904      	ldr	r1, [pc, #16]	; (800e028 <pbuf_ref+0x48>)
 800e016:	4805      	ldr	r0, [pc, #20]	; (800e02c <pbuf_ref+0x4c>)
 800e018:	f00c fbc4 	bl	801a7a4 <iprintf>
  }
}
 800e01c:	bf00      	nop
 800e01e:	3710      	adds	r7, #16
 800e020:	46bd      	mov	sp, r7
 800e022:	bd80      	pop	{r7, pc}
 800e024:	0801c230 	.word	0x0801c230
 800e028:	0801c410 	.word	0x0801c410
 800e02c:	0801c290 	.word	0x0801c290

0800e030 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800e030:	b580      	push	{r7, lr}
 800e032:	b084      	sub	sp, #16
 800e034:	af00      	add	r7, sp, #0
 800e036:	6078      	str	r0, [r7, #4]
 800e038:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d002      	beq.n	800e046 <pbuf_cat+0x16>
 800e040:	683b      	ldr	r3, [r7, #0]
 800e042:	2b00      	cmp	r3, #0
 800e044:	d107      	bne.n	800e056 <pbuf_cat+0x26>
 800e046:	4b20      	ldr	r3, [pc, #128]	; (800e0c8 <pbuf_cat+0x98>)
 800e048:	f240 3259 	movw	r2, #857	; 0x359
 800e04c:	491f      	ldr	r1, [pc, #124]	; (800e0cc <pbuf_cat+0x9c>)
 800e04e:	4820      	ldr	r0, [pc, #128]	; (800e0d0 <pbuf_cat+0xa0>)
 800e050:	f00c fba8 	bl	801a7a4 <iprintf>
 800e054:	e034      	b.n	800e0c0 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	60fb      	str	r3, [r7, #12]
 800e05a:	e00a      	b.n	800e072 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	891a      	ldrh	r2, [r3, #8]
 800e060:	683b      	ldr	r3, [r7, #0]
 800e062:	891b      	ldrh	r3, [r3, #8]
 800e064:	4413      	add	r3, r2
 800e066:	b29a      	uxth	r2, r3
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	60fb      	str	r3, [r7, #12]
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	2b00      	cmp	r3, #0
 800e078:	d1f0      	bne.n	800e05c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	891a      	ldrh	r2, [r3, #8]
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	895b      	ldrh	r3, [r3, #10]
 800e082:	429a      	cmp	r2, r3
 800e084:	d006      	beq.n	800e094 <pbuf_cat+0x64>
 800e086:	4b10      	ldr	r3, [pc, #64]	; (800e0c8 <pbuf_cat+0x98>)
 800e088:	f240 3262 	movw	r2, #866	; 0x362
 800e08c:	4911      	ldr	r1, [pc, #68]	; (800e0d4 <pbuf_cat+0xa4>)
 800e08e:	4810      	ldr	r0, [pc, #64]	; (800e0d0 <pbuf_cat+0xa0>)
 800e090:	f00c fb88 	bl	801a7a4 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d006      	beq.n	800e0aa <pbuf_cat+0x7a>
 800e09c:	4b0a      	ldr	r3, [pc, #40]	; (800e0c8 <pbuf_cat+0x98>)
 800e09e:	f240 3263 	movw	r2, #867	; 0x363
 800e0a2:	490d      	ldr	r1, [pc, #52]	; (800e0d8 <pbuf_cat+0xa8>)
 800e0a4:	480a      	ldr	r0, [pc, #40]	; (800e0d0 <pbuf_cat+0xa0>)
 800e0a6:	f00c fb7d 	bl	801a7a4 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	891a      	ldrh	r2, [r3, #8]
 800e0ae:	683b      	ldr	r3, [r7, #0]
 800e0b0:	891b      	ldrh	r3, [r3, #8]
 800e0b2:	4413      	add	r3, r2
 800e0b4:	b29a      	uxth	r2, r3
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	683a      	ldr	r2, [r7, #0]
 800e0be:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800e0c0:	3710      	adds	r7, #16
 800e0c2:	46bd      	mov	sp, r7
 800e0c4:	bd80      	pop	{r7, pc}
 800e0c6:	bf00      	nop
 800e0c8:	0801c230 	.word	0x0801c230
 800e0cc:	0801c424 	.word	0x0801c424
 800e0d0:	0801c290 	.word	0x0801c290
 800e0d4:	0801c45c 	.word	0x0801c45c
 800e0d8:	0801c48c 	.word	0x0801c48c

0800e0dc <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800e0dc:	b580      	push	{r7, lr}
 800e0de:	b082      	sub	sp, #8
 800e0e0:	af00      	add	r7, sp, #0
 800e0e2:	6078      	str	r0, [r7, #4]
 800e0e4:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800e0e6:	6839      	ldr	r1, [r7, #0]
 800e0e8:	6878      	ldr	r0, [r7, #4]
 800e0ea:	f7ff ffa1 	bl	800e030 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800e0ee:	6838      	ldr	r0, [r7, #0]
 800e0f0:	f7ff ff76 	bl	800dfe0 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800e0f4:	bf00      	nop
 800e0f6:	3708      	adds	r7, #8
 800e0f8:	46bd      	mov	sp, r7
 800e0fa:	bd80      	pop	{r7, pc}

0800e0fc <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800e0fc:	b580      	push	{r7, lr}
 800e0fe:	b086      	sub	sp, #24
 800e100:	af00      	add	r7, sp, #0
 800e102:	6078      	str	r0, [r7, #4]
 800e104:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800e106:	2300      	movs	r3, #0
 800e108:	617b      	str	r3, [r7, #20]
 800e10a:	2300      	movs	r3, #0
 800e10c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	2b00      	cmp	r3, #0
 800e112:	d008      	beq.n	800e126 <pbuf_copy+0x2a>
 800e114:	683b      	ldr	r3, [r7, #0]
 800e116:	2b00      	cmp	r3, #0
 800e118:	d005      	beq.n	800e126 <pbuf_copy+0x2a>
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	891a      	ldrh	r2, [r3, #8]
 800e11e:	683b      	ldr	r3, [r7, #0]
 800e120:	891b      	ldrh	r3, [r3, #8]
 800e122:	429a      	cmp	r2, r3
 800e124:	d209      	bcs.n	800e13a <pbuf_copy+0x3e>
 800e126:	4b57      	ldr	r3, [pc, #348]	; (800e284 <pbuf_copy+0x188>)
 800e128:	f240 32c9 	movw	r2, #969	; 0x3c9
 800e12c:	4956      	ldr	r1, [pc, #344]	; (800e288 <pbuf_copy+0x18c>)
 800e12e:	4857      	ldr	r0, [pc, #348]	; (800e28c <pbuf_copy+0x190>)
 800e130:	f00c fb38 	bl	801a7a4 <iprintf>
 800e134:	f06f 030f 	mvn.w	r3, #15
 800e138:	e09f      	b.n	800e27a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	895b      	ldrh	r3, [r3, #10]
 800e13e:	461a      	mov	r2, r3
 800e140:	697b      	ldr	r3, [r7, #20]
 800e142:	1ad2      	subs	r2, r2, r3
 800e144:	683b      	ldr	r3, [r7, #0]
 800e146:	895b      	ldrh	r3, [r3, #10]
 800e148:	4619      	mov	r1, r3
 800e14a:	693b      	ldr	r3, [r7, #16]
 800e14c:	1acb      	subs	r3, r1, r3
 800e14e:	429a      	cmp	r2, r3
 800e150:	d306      	bcc.n	800e160 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800e152:	683b      	ldr	r3, [r7, #0]
 800e154:	895b      	ldrh	r3, [r3, #10]
 800e156:	461a      	mov	r2, r3
 800e158:	693b      	ldr	r3, [r7, #16]
 800e15a:	1ad3      	subs	r3, r2, r3
 800e15c:	60fb      	str	r3, [r7, #12]
 800e15e:	e005      	b.n	800e16c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	895b      	ldrh	r3, [r3, #10]
 800e164:	461a      	mov	r2, r3
 800e166:	697b      	ldr	r3, [r7, #20]
 800e168:	1ad3      	subs	r3, r2, r3
 800e16a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	685a      	ldr	r2, [r3, #4]
 800e170:	697b      	ldr	r3, [r7, #20]
 800e172:	18d0      	adds	r0, r2, r3
 800e174:	683b      	ldr	r3, [r7, #0]
 800e176:	685a      	ldr	r2, [r3, #4]
 800e178:	693b      	ldr	r3, [r7, #16]
 800e17a:	4413      	add	r3, r2
 800e17c:	68fa      	ldr	r2, [r7, #12]
 800e17e:	4619      	mov	r1, r3
 800e180:	f00c fa1c 	bl	801a5bc <memcpy>
    offset_to += len;
 800e184:	697a      	ldr	r2, [r7, #20]
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	4413      	add	r3, r2
 800e18a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800e18c:	693a      	ldr	r2, [r7, #16]
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	4413      	add	r3, r2
 800e192:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	895b      	ldrh	r3, [r3, #10]
 800e198:	461a      	mov	r2, r3
 800e19a:	697b      	ldr	r3, [r7, #20]
 800e19c:	4293      	cmp	r3, r2
 800e19e:	d906      	bls.n	800e1ae <pbuf_copy+0xb2>
 800e1a0:	4b38      	ldr	r3, [pc, #224]	; (800e284 <pbuf_copy+0x188>)
 800e1a2:	f240 32d9 	movw	r2, #985	; 0x3d9
 800e1a6:	493a      	ldr	r1, [pc, #232]	; (800e290 <pbuf_copy+0x194>)
 800e1a8:	4838      	ldr	r0, [pc, #224]	; (800e28c <pbuf_copy+0x190>)
 800e1aa:	f00c fafb 	bl	801a7a4 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800e1ae:	683b      	ldr	r3, [r7, #0]
 800e1b0:	895b      	ldrh	r3, [r3, #10]
 800e1b2:	461a      	mov	r2, r3
 800e1b4:	693b      	ldr	r3, [r7, #16]
 800e1b6:	4293      	cmp	r3, r2
 800e1b8:	d906      	bls.n	800e1c8 <pbuf_copy+0xcc>
 800e1ba:	4b32      	ldr	r3, [pc, #200]	; (800e284 <pbuf_copy+0x188>)
 800e1bc:	f240 32da 	movw	r2, #986	; 0x3da
 800e1c0:	4934      	ldr	r1, [pc, #208]	; (800e294 <pbuf_copy+0x198>)
 800e1c2:	4832      	ldr	r0, [pc, #200]	; (800e28c <pbuf_copy+0x190>)
 800e1c4:	f00c faee 	bl	801a7a4 <iprintf>
    if (offset_from >= p_from->len) {
 800e1c8:	683b      	ldr	r3, [r7, #0]
 800e1ca:	895b      	ldrh	r3, [r3, #10]
 800e1cc:	461a      	mov	r2, r3
 800e1ce:	693b      	ldr	r3, [r7, #16]
 800e1d0:	4293      	cmp	r3, r2
 800e1d2:	d304      	bcc.n	800e1de <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800e1d4:	2300      	movs	r3, #0
 800e1d6:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800e1d8:	683b      	ldr	r3, [r7, #0]
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	895b      	ldrh	r3, [r3, #10]
 800e1e2:	461a      	mov	r2, r3
 800e1e4:	697b      	ldr	r3, [r7, #20]
 800e1e6:	4293      	cmp	r3, r2
 800e1e8:	d114      	bne.n	800e214 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800e1ea:	2300      	movs	r3, #0
 800e1ec:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d10c      	bne.n	800e214 <pbuf_copy+0x118>
 800e1fa:	683b      	ldr	r3, [r7, #0]
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d009      	beq.n	800e214 <pbuf_copy+0x118>
 800e200:	4b20      	ldr	r3, [pc, #128]	; (800e284 <pbuf_copy+0x188>)
 800e202:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800e206:	4924      	ldr	r1, [pc, #144]	; (800e298 <pbuf_copy+0x19c>)
 800e208:	4820      	ldr	r0, [pc, #128]	; (800e28c <pbuf_copy+0x190>)
 800e20a:	f00c facb 	bl	801a7a4 <iprintf>
 800e20e:	f06f 030f 	mvn.w	r3, #15
 800e212:	e032      	b.n	800e27a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800e214:	683b      	ldr	r3, [r7, #0]
 800e216:	2b00      	cmp	r3, #0
 800e218:	d013      	beq.n	800e242 <pbuf_copy+0x146>
 800e21a:	683b      	ldr	r3, [r7, #0]
 800e21c:	895a      	ldrh	r2, [r3, #10]
 800e21e:	683b      	ldr	r3, [r7, #0]
 800e220:	891b      	ldrh	r3, [r3, #8]
 800e222:	429a      	cmp	r2, r3
 800e224:	d10d      	bne.n	800e242 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800e226:	683b      	ldr	r3, [r7, #0]
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d009      	beq.n	800e242 <pbuf_copy+0x146>
 800e22e:	4b15      	ldr	r3, [pc, #84]	; (800e284 <pbuf_copy+0x188>)
 800e230:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800e234:	4919      	ldr	r1, [pc, #100]	; (800e29c <pbuf_copy+0x1a0>)
 800e236:	4815      	ldr	r0, [pc, #84]	; (800e28c <pbuf_copy+0x190>)
 800e238:	f00c fab4 	bl	801a7a4 <iprintf>
 800e23c:	f06f 0305 	mvn.w	r3, #5
 800e240:	e01b      	b.n	800e27a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	2b00      	cmp	r3, #0
 800e246:	d013      	beq.n	800e270 <pbuf_copy+0x174>
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	895a      	ldrh	r2, [r3, #10]
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	891b      	ldrh	r3, [r3, #8]
 800e250:	429a      	cmp	r2, r3
 800e252:	d10d      	bne.n	800e270 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d009      	beq.n	800e270 <pbuf_copy+0x174>
 800e25c:	4b09      	ldr	r3, [pc, #36]	; (800e284 <pbuf_copy+0x188>)
 800e25e:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800e262:	490e      	ldr	r1, [pc, #56]	; (800e29c <pbuf_copy+0x1a0>)
 800e264:	4809      	ldr	r0, [pc, #36]	; (800e28c <pbuf_copy+0x190>)
 800e266:	f00c fa9d 	bl	801a7a4 <iprintf>
 800e26a:	f06f 0305 	mvn.w	r3, #5
 800e26e:	e004      	b.n	800e27a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800e270:	683b      	ldr	r3, [r7, #0]
 800e272:	2b00      	cmp	r3, #0
 800e274:	f47f af61 	bne.w	800e13a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800e278:	2300      	movs	r3, #0
}
 800e27a:	4618      	mov	r0, r3
 800e27c:	3718      	adds	r7, #24
 800e27e:	46bd      	mov	sp, r7
 800e280:	bd80      	pop	{r7, pc}
 800e282:	bf00      	nop
 800e284:	0801c230 	.word	0x0801c230
 800e288:	0801c4d8 	.word	0x0801c4d8
 800e28c:	0801c290 	.word	0x0801c290
 800e290:	0801c508 	.word	0x0801c508
 800e294:	0801c520 	.word	0x0801c520
 800e298:	0801c53c 	.word	0x0801c53c
 800e29c:	0801c54c 	.word	0x0801c54c

0800e2a0 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800e2a0:	b580      	push	{r7, lr}
 800e2a2:	b088      	sub	sp, #32
 800e2a4:	af00      	add	r7, sp, #0
 800e2a6:	60f8      	str	r0, [r7, #12]
 800e2a8:	60b9      	str	r1, [r7, #8]
 800e2aa:	4611      	mov	r1, r2
 800e2ac:	461a      	mov	r2, r3
 800e2ae:	460b      	mov	r3, r1
 800e2b0:	80fb      	strh	r3, [r7, #6]
 800e2b2:	4613      	mov	r3, r2
 800e2b4:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800e2b6:	2300      	movs	r3, #0
 800e2b8:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800e2ba:	2300      	movs	r3, #0
 800e2bc:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d108      	bne.n	800e2d6 <pbuf_copy_partial+0x36>
 800e2c4:	4b2b      	ldr	r3, [pc, #172]	; (800e374 <pbuf_copy_partial+0xd4>)
 800e2c6:	f240 420a 	movw	r2, #1034	; 0x40a
 800e2ca:	492b      	ldr	r1, [pc, #172]	; (800e378 <pbuf_copy_partial+0xd8>)
 800e2cc:	482b      	ldr	r0, [pc, #172]	; (800e37c <pbuf_copy_partial+0xdc>)
 800e2ce:	f00c fa69 	bl	801a7a4 <iprintf>
 800e2d2:	2300      	movs	r3, #0
 800e2d4:	e04a      	b.n	800e36c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800e2d6:	68bb      	ldr	r3, [r7, #8]
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d108      	bne.n	800e2ee <pbuf_copy_partial+0x4e>
 800e2dc:	4b25      	ldr	r3, [pc, #148]	; (800e374 <pbuf_copy_partial+0xd4>)
 800e2de:	f240 420b 	movw	r2, #1035	; 0x40b
 800e2e2:	4927      	ldr	r1, [pc, #156]	; (800e380 <pbuf_copy_partial+0xe0>)
 800e2e4:	4825      	ldr	r0, [pc, #148]	; (800e37c <pbuf_copy_partial+0xdc>)
 800e2e6:	f00c fa5d 	bl	801a7a4 <iprintf>
 800e2ea:	2300      	movs	r3, #0
 800e2ec:	e03e      	b.n	800e36c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	61fb      	str	r3, [r7, #28]
 800e2f2:	e034      	b.n	800e35e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800e2f4:	88bb      	ldrh	r3, [r7, #4]
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d00a      	beq.n	800e310 <pbuf_copy_partial+0x70>
 800e2fa:	69fb      	ldr	r3, [r7, #28]
 800e2fc:	895b      	ldrh	r3, [r3, #10]
 800e2fe:	88ba      	ldrh	r2, [r7, #4]
 800e300:	429a      	cmp	r2, r3
 800e302:	d305      	bcc.n	800e310 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800e304:	69fb      	ldr	r3, [r7, #28]
 800e306:	895b      	ldrh	r3, [r3, #10]
 800e308:	88ba      	ldrh	r2, [r7, #4]
 800e30a:	1ad3      	subs	r3, r2, r3
 800e30c:	80bb      	strh	r3, [r7, #4]
 800e30e:	e023      	b.n	800e358 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800e310:	69fb      	ldr	r3, [r7, #28]
 800e312:	895a      	ldrh	r2, [r3, #10]
 800e314:	88bb      	ldrh	r3, [r7, #4]
 800e316:	1ad3      	subs	r3, r2, r3
 800e318:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800e31a:	8b3a      	ldrh	r2, [r7, #24]
 800e31c:	88fb      	ldrh	r3, [r7, #6]
 800e31e:	429a      	cmp	r2, r3
 800e320:	d901      	bls.n	800e326 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800e322:	88fb      	ldrh	r3, [r7, #6]
 800e324:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800e326:	8b7b      	ldrh	r3, [r7, #26]
 800e328:	68ba      	ldr	r2, [r7, #8]
 800e32a:	18d0      	adds	r0, r2, r3
 800e32c:	69fb      	ldr	r3, [r7, #28]
 800e32e:	685a      	ldr	r2, [r3, #4]
 800e330:	88bb      	ldrh	r3, [r7, #4]
 800e332:	4413      	add	r3, r2
 800e334:	8b3a      	ldrh	r2, [r7, #24]
 800e336:	4619      	mov	r1, r3
 800e338:	f00c f940 	bl	801a5bc <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800e33c:	8afa      	ldrh	r2, [r7, #22]
 800e33e:	8b3b      	ldrh	r3, [r7, #24]
 800e340:	4413      	add	r3, r2
 800e342:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800e344:	8b7a      	ldrh	r2, [r7, #26]
 800e346:	8b3b      	ldrh	r3, [r7, #24]
 800e348:	4413      	add	r3, r2
 800e34a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800e34c:	88fa      	ldrh	r2, [r7, #6]
 800e34e:	8b3b      	ldrh	r3, [r7, #24]
 800e350:	1ad3      	subs	r3, r2, r3
 800e352:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800e354:	2300      	movs	r3, #0
 800e356:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800e358:	69fb      	ldr	r3, [r7, #28]
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	61fb      	str	r3, [r7, #28]
 800e35e:	88fb      	ldrh	r3, [r7, #6]
 800e360:	2b00      	cmp	r3, #0
 800e362:	d002      	beq.n	800e36a <pbuf_copy_partial+0xca>
 800e364:	69fb      	ldr	r3, [r7, #28]
 800e366:	2b00      	cmp	r3, #0
 800e368:	d1c4      	bne.n	800e2f4 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800e36a:	8afb      	ldrh	r3, [r7, #22]
}
 800e36c:	4618      	mov	r0, r3
 800e36e:	3720      	adds	r7, #32
 800e370:	46bd      	mov	sp, r7
 800e372:	bd80      	pop	{r7, pc}
 800e374:	0801c230 	.word	0x0801c230
 800e378:	0801c578 	.word	0x0801c578
 800e37c:	0801c290 	.word	0x0801c290
 800e380:	0801c598 	.word	0x0801c598

0800e384 <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf *
pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 800e384:	b480      	push	{r7}
 800e386:	b087      	sub	sp, #28
 800e388:	af00      	add	r7, sp, #0
 800e38a:	60f8      	str	r0, [r7, #12]
 800e38c:	460b      	mov	r3, r1
 800e38e:	607a      	str	r2, [r7, #4]
 800e390:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 800e392:	897b      	ldrh	r3, [r7, #10]
 800e394:	82fb      	strh	r3, [r7, #22]
  const struct pbuf *q = in;
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 800e39a:	e007      	b.n	800e3ac <pbuf_skip_const+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 800e39c:	693b      	ldr	r3, [r7, #16]
 800e39e:	895b      	ldrh	r3, [r3, #10]
 800e3a0:	8afa      	ldrh	r2, [r7, #22]
 800e3a2:	1ad3      	subs	r3, r2, r3
 800e3a4:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 800e3a6:	693b      	ldr	r3, [r7, #16]
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 800e3ac:	693b      	ldr	r3, [r7, #16]
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d004      	beq.n	800e3bc <pbuf_skip_const+0x38>
 800e3b2:	693b      	ldr	r3, [r7, #16]
 800e3b4:	895b      	ldrh	r3, [r3, #10]
 800e3b6:	8afa      	ldrh	r2, [r7, #22]
 800e3b8:	429a      	cmp	r2, r3
 800e3ba:	d2ef      	bcs.n	800e39c <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d002      	beq.n	800e3c8 <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	8afa      	ldrh	r2, [r7, #22]
 800e3c6:	801a      	strh	r2, [r3, #0]
  }
  return q;
 800e3c8:	693b      	ldr	r3, [r7, #16]
}
 800e3ca:	4618      	mov	r0, r3
 800e3cc:	371c      	adds	r7, #28
 800e3ce:	46bd      	mov	sp, r7
 800e3d0:	bc80      	pop	{r7}
 800e3d2:	4770      	bx	lr

0800e3d4 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800e3d4:	b580      	push	{r7, lr}
 800e3d6:	b084      	sub	sp, #16
 800e3d8:	af00      	add	r7, sp, #0
 800e3da:	4603      	mov	r3, r0
 800e3dc:	603a      	str	r2, [r7, #0]
 800e3de:	71fb      	strb	r3, [r7, #7]
 800e3e0:	460b      	mov	r3, r1
 800e3e2:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800e3e4:	683b      	ldr	r3, [r7, #0]
 800e3e6:	8919      	ldrh	r1, [r3, #8]
 800e3e8:	88ba      	ldrh	r2, [r7, #4]
 800e3ea:	79fb      	ldrb	r3, [r7, #7]
 800e3ec:	4618      	mov	r0, r3
 800e3ee:	f7ff fa6f 	bl	800d8d0 <pbuf_alloc>
 800e3f2:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800e3f4:	68fb      	ldr	r3, [r7, #12]
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d101      	bne.n	800e3fe <pbuf_clone+0x2a>
    return NULL;
 800e3fa:	2300      	movs	r3, #0
 800e3fc:	e011      	b.n	800e422 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800e3fe:	6839      	ldr	r1, [r7, #0]
 800e400:	68f8      	ldr	r0, [r7, #12]
 800e402:	f7ff fe7b 	bl	800e0fc <pbuf_copy>
 800e406:	4603      	mov	r3, r0
 800e408:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800e40a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d006      	beq.n	800e420 <pbuf_clone+0x4c>
 800e412:	4b06      	ldr	r3, [pc, #24]	; (800e42c <pbuf_clone+0x58>)
 800e414:	f240 5224 	movw	r2, #1316	; 0x524
 800e418:	4905      	ldr	r1, [pc, #20]	; (800e430 <pbuf_clone+0x5c>)
 800e41a:	4806      	ldr	r0, [pc, #24]	; (800e434 <pbuf_clone+0x60>)
 800e41c:	f00c f9c2 	bl	801a7a4 <iprintf>
  return q;
 800e420:	68fb      	ldr	r3, [r7, #12]
}
 800e422:	4618      	mov	r0, r3
 800e424:	3710      	adds	r7, #16
 800e426:	46bd      	mov	sp, r7
 800e428:	bd80      	pop	{r7, pc}
 800e42a:	bf00      	nop
 800e42c:	0801c230 	.word	0x0801c230
 800e430:	0801c6a4 	.word	0x0801c6a4
 800e434:	0801c290 	.word	0x0801c290

0800e438 <pbuf_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p OR ZERO IF 'offset' >= p->tot_len
 */
u8_t
pbuf_get_at(const struct pbuf *p, u16_t offset)
{
 800e438:	b580      	push	{r7, lr}
 800e43a:	b084      	sub	sp, #16
 800e43c:	af00      	add	r7, sp, #0
 800e43e:	6078      	str	r0, [r7, #4]
 800e440:	460b      	mov	r3, r1
 800e442:	807b      	strh	r3, [r7, #2]
  int ret = pbuf_try_get_at(p, offset);
 800e444:	887b      	ldrh	r3, [r7, #2]
 800e446:	4619      	mov	r1, r3
 800e448:	6878      	ldr	r0, [r7, #4]
 800e44a:	f000 f80c 	bl	800e466 <pbuf_try_get_at>
 800e44e:	60f8      	str	r0, [r7, #12]
  if (ret >= 0) {
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	2b00      	cmp	r3, #0
 800e454:	db02      	blt.n	800e45c <pbuf_get_at+0x24>
    return (u8_t)ret;
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	b2db      	uxtb	r3, r3
 800e45a:	e000      	b.n	800e45e <pbuf_get_at+0x26>
  }
  return 0;
 800e45c:	2300      	movs	r3, #0
}
 800e45e:	4618      	mov	r0, r3
 800e460:	3710      	adds	r7, #16
 800e462:	46bd      	mov	sp, r7
 800e464:	bd80      	pop	{r7, pc}

0800e466 <pbuf_try_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p [0..0xFF] OR negative if 'offset' >= p->tot_len
 */
int
pbuf_try_get_at(const struct pbuf *p, u16_t offset)
{
 800e466:	b580      	push	{r7, lr}
 800e468:	b084      	sub	sp, #16
 800e46a:	af00      	add	r7, sp, #0
 800e46c:	6078      	str	r0, [r7, #4]
 800e46e:	460b      	mov	r3, r1
 800e470:	807b      	strh	r3, [r7, #2]
  u16_t q_idx;
  const struct pbuf *q = pbuf_skip_const(p, offset, &q_idx);
 800e472:	f107 020a 	add.w	r2, r7, #10
 800e476:	887b      	ldrh	r3, [r7, #2]
 800e478:	4619      	mov	r1, r3
 800e47a:	6878      	ldr	r0, [r7, #4]
 800e47c:	f7ff ff82 	bl	800e384 <pbuf_skip_const>
 800e480:	60f8      	str	r0, [r7, #12]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	2b00      	cmp	r3, #0
 800e486:	d00a      	beq.n	800e49e <pbuf_try_get_at+0x38>
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	895a      	ldrh	r2, [r3, #10]
 800e48c:	897b      	ldrh	r3, [r7, #10]
 800e48e:	429a      	cmp	r2, r3
 800e490:	d905      	bls.n	800e49e <pbuf_try_get_at+0x38>
    return ((u8_t *)q->payload)[q_idx];
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	685b      	ldr	r3, [r3, #4]
 800e496:	897a      	ldrh	r2, [r7, #10]
 800e498:	4413      	add	r3, r2
 800e49a:	781b      	ldrb	r3, [r3, #0]
 800e49c:	e001      	b.n	800e4a2 <pbuf_try_get_at+0x3c>
  }
  return -1;
 800e49e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e4a2:	4618      	mov	r0, r3
 800e4a4:	3710      	adds	r7, #16
 800e4a6:	46bd      	mov	sp, r7
 800e4a8:	bd80      	pop	{r7, pc}
	...

0800e4ac <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800e4ac:	b580      	push	{r7, lr}
 800e4ae:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800e4b0:	f00c f990 	bl	801a7d4 <rand>
 800e4b4:	4603      	mov	r3, r0
 800e4b6:	b29b      	uxth	r3, r3
 800e4b8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800e4bc:	b29b      	uxth	r3, r3
 800e4be:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800e4c2:	b29a      	uxth	r2, r3
 800e4c4:	4b01      	ldr	r3, [pc, #4]	; (800e4cc <tcp_init+0x20>)
 800e4c6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800e4c8:	bf00      	nop
 800e4ca:	bd80      	pop	{r7, pc}
 800e4cc:	2000009c 	.word	0x2000009c

0800e4d0 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800e4d0:	b580      	push	{r7, lr}
 800e4d2:	b082      	sub	sp, #8
 800e4d4:	af00      	add	r7, sp, #0
 800e4d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	7d1b      	ldrb	r3, [r3, #20]
 800e4dc:	2b01      	cmp	r3, #1
 800e4de:	d105      	bne.n	800e4ec <tcp_free+0x1c>
 800e4e0:	4b06      	ldr	r3, [pc, #24]	; (800e4fc <tcp_free+0x2c>)
 800e4e2:	22d4      	movs	r2, #212	; 0xd4
 800e4e4:	4906      	ldr	r1, [pc, #24]	; (800e500 <tcp_free+0x30>)
 800e4e6:	4807      	ldr	r0, [pc, #28]	; (800e504 <tcp_free+0x34>)
 800e4e8:	f00c f95c 	bl	801a7a4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800e4ec:	6879      	ldr	r1, [r7, #4]
 800e4ee:	2001      	movs	r0, #1
 800e4f0:	f7fe fe94 	bl	800d21c <memp_free>
}
 800e4f4:	bf00      	nop
 800e4f6:	3708      	adds	r7, #8
 800e4f8:	46bd      	mov	sp, r7
 800e4fa:	bd80      	pop	{r7, pc}
 800e4fc:	0801c730 	.word	0x0801c730
 800e500:	0801c760 	.word	0x0801c760
 800e504:	0801c774 	.word	0x0801c774

0800e508 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800e508:	b580      	push	{r7, lr}
 800e50a:	b082      	sub	sp, #8
 800e50c:	af00      	add	r7, sp, #0
 800e50e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	7d1b      	ldrb	r3, [r3, #20]
 800e514:	2b01      	cmp	r3, #1
 800e516:	d105      	bne.n	800e524 <tcp_free_listen+0x1c>
 800e518:	4b06      	ldr	r3, [pc, #24]	; (800e534 <tcp_free_listen+0x2c>)
 800e51a:	22df      	movs	r2, #223	; 0xdf
 800e51c:	4906      	ldr	r1, [pc, #24]	; (800e538 <tcp_free_listen+0x30>)
 800e51e:	4807      	ldr	r0, [pc, #28]	; (800e53c <tcp_free_listen+0x34>)
 800e520:	f00c f940 	bl	801a7a4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800e524:	6879      	ldr	r1, [r7, #4]
 800e526:	2002      	movs	r0, #2
 800e528:	f7fe fe78 	bl	800d21c <memp_free>
}
 800e52c:	bf00      	nop
 800e52e:	3708      	adds	r7, #8
 800e530:	46bd      	mov	sp, r7
 800e532:	bd80      	pop	{r7, pc}
 800e534:	0801c730 	.word	0x0801c730
 800e538:	0801c79c 	.word	0x0801c79c
 800e53c:	0801c774 	.word	0x0801c774

0800e540 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800e540:	b580      	push	{r7, lr}
 800e542:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800e544:	f001 f898 	bl	800f678 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800e548:	4b07      	ldr	r3, [pc, #28]	; (800e568 <tcp_tmr+0x28>)
 800e54a:	781b      	ldrb	r3, [r3, #0]
 800e54c:	3301      	adds	r3, #1
 800e54e:	b2da      	uxtb	r2, r3
 800e550:	4b05      	ldr	r3, [pc, #20]	; (800e568 <tcp_tmr+0x28>)
 800e552:	701a      	strb	r2, [r3, #0]
 800e554:	4b04      	ldr	r3, [pc, #16]	; (800e568 <tcp_tmr+0x28>)
 800e556:	781b      	ldrb	r3, [r3, #0]
 800e558:	f003 0301 	and.w	r3, r3, #1
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d001      	beq.n	800e564 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800e560:	f000 fd4a 	bl	800eff8 <tcp_slowtmr>
  }
}
 800e564:	bf00      	nop
 800e566:	bd80      	pop	{r7, pc}
 800e568:	2000bf35 	.word	0x2000bf35

0800e56c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800e56c:	b580      	push	{r7, lr}
 800e56e:	b084      	sub	sp, #16
 800e570:	af00      	add	r7, sp, #0
 800e572:	6078      	str	r0, [r7, #4]
 800e574:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800e576:	683b      	ldr	r3, [r7, #0]
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d105      	bne.n	800e588 <tcp_remove_listener+0x1c>
 800e57c:	4b0d      	ldr	r3, [pc, #52]	; (800e5b4 <tcp_remove_listener+0x48>)
 800e57e:	22ff      	movs	r2, #255	; 0xff
 800e580:	490d      	ldr	r1, [pc, #52]	; (800e5b8 <tcp_remove_listener+0x4c>)
 800e582:	480e      	ldr	r0, [pc, #56]	; (800e5bc <tcp_remove_listener+0x50>)
 800e584:	f00c f90e 	bl	801a7a4 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	60fb      	str	r3, [r7, #12]
 800e58c:	e00a      	b.n	800e5a4 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e592:	683a      	ldr	r2, [r7, #0]
 800e594:	429a      	cmp	r2, r3
 800e596:	d102      	bne.n	800e59e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	2200      	movs	r2, #0
 800e59c:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	68db      	ldr	r3, [r3, #12]
 800e5a2:	60fb      	str	r3, [r7, #12]
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d1f1      	bne.n	800e58e <tcp_remove_listener+0x22>
    }
  }
}
 800e5aa:	bf00      	nop
 800e5ac:	bf00      	nop
 800e5ae:	3710      	adds	r7, #16
 800e5b0:	46bd      	mov	sp, r7
 800e5b2:	bd80      	pop	{r7, pc}
 800e5b4:	0801c730 	.word	0x0801c730
 800e5b8:	0801c7b8 	.word	0x0801c7b8
 800e5bc:	0801c774 	.word	0x0801c774

0800e5c0 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800e5c0:	b580      	push	{r7, lr}
 800e5c2:	b084      	sub	sp, #16
 800e5c4:	af00      	add	r7, sp, #0
 800e5c6:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d106      	bne.n	800e5dc <tcp_listen_closed+0x1c>
 800e5ce:	4b14      	ldr	r3, [pc, #80]	; (800e620 <tcp_listen_closed+0x60>)
 800e5d0:	f240 1211 	movw	r2, #273	; 0x111
 800e5d4:	4913      	ldr	r1, [pc, #76]	; (800e624 <tcp_listen_closed+0x64>)
 800e5d6:	4814      	ldr	r0, [pc, #80]	; (800e628 <tcp_listen_closed+0x68>)
 800e5d8:	f00c f8e4 	bl	801a7a4 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	7d1b      	ldrb	r3, [r3, #20]
 800e5e0:	2b01      	cmp	r3, #1
 800e5e2:	d006      	beq.n	800e5f2 <tcp_listen_closed+0x32>
 800e5e4:	4b0e      	ldr	r3, [pc, #56]	; (800e620 <tcp_listen_closed+0x60>)
 800e5e6:	f44f 7289 	mov.w	r2, #274	; 0x112
 800e5ea:	4910      	ldr	r1, [pc, #64]	; (800e62c <tcp_listen_closed+0x6c>)
 800e5ec:	480e      	ldr	r0, [pc, #56]	; (800e628 <tcp_listen_closed+0x68>)
 800e5ee:	f00c f8d9 	bl	801a7a4 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800e5f2:	2301      	movs	r3, #1
 800e5f4:	60fb      	str	r3, [r7, #12]
 800e5f6:	e00b      	b.n	800e610 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800e5f8:	4a0d      	ldr	r2, [pc, #52]	; (800e630 <tcp_listen_closed+0x70>)
 800e5fa:	68fb      	ldr	r3, [r7, #12]
 800e5fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	6879      	ldr	r1, [r7, #4]
 800e604:	4618      	mov	r0, r3
 800e606:	f7ff ffb1 	bl	800e56c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	3301      	adds	r3, #1
 800e60e:	60fb      	str	r3, [r7, #12]
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	2b03      	cmp	r3, #3
 800e614:	d9f0      	bls.n	800e5f8 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800e616:	bf00      	nop
 800e618:	bf00      	nop
 800e61a:	3710      	adds	r7, #16
 800e61c:	46bd      	mov	sp, r7
 800e61e:	bd80      	pop	{r7, pc}
 800e620:	0801c730 	.word	0x0801c730
 800e624:	0801c7e0 	.word	0x0801c7e0
 800e628:	0801c774 	.word	0x0801c774
 800e62c:	0801c7ec 	.word	0x0801c7ec
 800e630:	0801eb44 	.word	0x0801eb44

0800e634 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800e634:	b5b0      	push	{r4, r5, r7, lr}
 800e636:	b088      	sub	sp, #32
 800e638:	af04      	add	r7, sp, #16
 800e63a:	6078      	str	r0, [r7, #4]
 800e63c:	460b      	mov	r3, r1
 800e63e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	2b00      	cmp	r3, #0
 800e644:	d106      	bne.n	800e654 <tcp_close_shutdown+0x20>
 800e646:	4b63      	ldr	r3, [pc, #396]	; (800e7d4 <tcp_close_shutdown+0x1a0>)
 800e648:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800e64c:	4962      	ldr	r1, [pc, #392]	; (800e7d8 <tcp_close_shutdown+0x1a4>)
 800e64e:	4863      	ldr	r0, [pc, #396]	; (800e7dc <tcp_close_shutdown+0x1a8>)
 800e650:	f00c f8a8 	bl	801a7a4 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800e654:	78fb      	ldrb	r3, [r7, #3]
 800e656:	2b00      	cmp	r3, #0
 800e658:	d066      	beq.n	800e728 <tcp_close_shutdown+0xf4>
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	7d1b      	ldrb	r3, [r3, #20]
 800e65e:	2b04      	cmp	r3, #4
 800e660:	d003      	beq.n	800e66a <tcp_close_shutdown+0x36>
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	7d1b      	ldrb	r3, [r3, #20]
 800e666:	2b07      	cmp	r3, #7
 800e668:	d15e      	bne.n	800e728 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d104      	bne.n	800e67c <tcp_close_shutdown+0x48>
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e676:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e67a:	d055      	beq.n	800e728 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	8b5b      	ldrh	r3, [r3, #26]
 800e680:	f003 0310 	and.w	r3, r3, #16
 800e684:	2b00      	cmp	r3, #0
 800e686:	d106      	bne.n	800e696 <tcp_close_shutdown+0x62>
 800e688:	4b52      	ldr	r3, [pc, #328]	; (800e7d4 <tcp_close_shutdown+0x1a0>)
 800e68a:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800e68e:	4954      	ldr	r1, [pc, #336]	; (800e7e0 <tcp_close_shutdown+0x1ac>)
 800e690:	4852      	ldr	r0, [pc, #328]	; (800e7dc <tcp_close_shutdown+0x1a8>)
 800e692:	f00c f887 	bl	801a7a4 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800e69e:	687d      	ldr	r5, [r7, #4]
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	3304      	adds	r3, #4
 800e6a4:	687a      	ldr	r2, [r7, #4]
 800e6a6:	8ad2      	ldrh	r2, [r2, #22]
 800e6a8:	6879      	ldr	r1, [r7, #4]
 800e6aa:	8b09      	ldrh	r1, [r1, #24]
 800e6ac:	9102      	str	r1, [sp, #8]
 800e6ae:	9201      	str	r2, [sp, #4]
 800e6b0:	9300      	str	r3, [sp, #0]
 800e6b2:	462b      	mov	r3, r5
 800e6b4:	4622      	mov	r2, r4
 800e6b6:	4601      	mov	r1, r0
 800e6b8:	6878      	ldr	r0, [r7, #4]
 800e6ba:	f005 fd93 	bl	80141e4 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800e6be:	6878      	ldr	r0, [r7, #4]
 800e6c0:	f001 fb70 	bl	800fda4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800e6c4:	4b47      	ldr	r3, [pc, #284]	; (800e7e4 <tcp_close_shutdown+0x1b0>)
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	687a      	ldr	r2, [r7, #4]
 800e6ca:	429a      	cmp	r2, r3
 800e6cc:	d105      	bne.n	800e6da <tcp_close_shutdown+0xa6>
 800e6ce:	4b45      	ldr	r3, [pc, #276]	; (800e7e4 <tcp_close_shutdown+0x1b0>)
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	68db      	ldr	r3, [r3, #12]
 800e6d4:	4a43      	ldr	r2, [pc, #268]	; (800e7e4 <tcp_close_shutdown+0x1b0>)
 800e6d6:	6013      	str	r3, [r2, #0]
 800e6d8:	e013      	b.n	800e702 <tcp_close_shutdown+0xce>
 800e6da:	4b42      	ldr	r3, [pc, #264]	; (800e7e4 <tcp_close_shutdown+0x1b0>)
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	60fb      	str	r3, [r7, #12]
 800e6e0:	e00c      	b.n	800e6fc <tcp_close_shutdown+0xc8>
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	68db      	ldr	r3, [r3, #12]
 800e6e6:	687a      	ldr	r2, [r7, #4]
 800e6e8:	429a      	cmp	r2, r3
 800e6ea:	d104      	bne.n	800e6f6 <tcp_close_shutdown+0xc2>
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	68da      	ldr	r2, [r3, #12]
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	60da      	str	r2, [r3, #12]
 800e6f4:	e005      	b.n	800e702 <tcp_close_shutdown+0xce>
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	68db      	ldr	r3, [r3, #12]
 800e6fa:	60fb      	str	r3, [r7, #12]
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d1ef      	bne.n	800e6e2 <tcp_close_shutdown+0xae>
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	2200      	movs	r2, #0
 800e706:	60da      	str	r2, [r3, #12]
 800e708:	4b37      	ldr	r3, [pc, #220]	; (800e7e8 <tcp_close_shutdown+0x1b4>)
 800e70a:	2201      	movs	r2, #1
 800e70c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800e70e:	4b37      	ldr	r3, [pc, #220]	; (800e7ec <tcp_close_shutdown+0x1b8>)
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	687a      	ldr	r2, [r7, #4]
 800e714:	429a      	cmp	r2, r3
 800e716:	d102      	bne.n	800e71e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800e718:	f004 f808 	bl	801272c <tcp_trigger_input_pcb_close>
 800e71c:	e002      	b.n	800e724 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800e71e:	6878      	ldr	r0, [r7, #4]
 800e720:	f7ff fed6 	bl	800e4d0 <tcp_free>
      }
      return ERR_OK;
 800e724:	2300      	movs	r3, #0
 800e726:	e050      	b.n	800e7ca <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	7d1b      	ldrb	r3, [r3, #20]
 800e72c:	2b02      	cmp	r3, #2
 800e72e:	d03b      	beq.n	800e7a8 <tcp_close_shutdown+0x174>
 800e730:	2b02      	cmp	r3, #2
 800e732:	dc44      	bgt.n	800e7be <tcp_close_shutdown+0x18a>
 800e734:	2b00      	cmp	r3, #0
 800e736:	d002      	beq.n	800e73e <tcp_close_shutdown+0x10a>
 800e738:	2b01      	cmp	r3, #1
 800e73a:	d02a      	beq.n	800e792 <tcp_close_shutdown+0x15e>
 800e73c:	e03f      	b.n	800e7be <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	8adb      	ldrh	r3, [r3, #22]
 800e742:	2b00      	cmp	r3, #0
 800e744:	d021      	beq.n	800e78a <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800e746:	4b2a      	ldr	r3, [pc, #168]	; (800e7f0 <tcp_close_shutdown+0x1bc>)
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	687a      	ldr	r2, [r7, #4]
 800e74c:	429a      	cmp	r2, r3
 800e74e:	d105      	bne.n	800e75c <tcp_close_shutdown+0x128>
 800e750:	4b27      	ldr	r3, [pc, #156]	; (800e7f0 <tcp_close_shutdown+0x1bc>)
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	68db      	ldr	r3, [r3, #12]
 800e756:	4a26      	ldr	r2, [pc, #152]	; (800e7f0 <tcp_close_shutdown+0x1bc>)
 800e758:	6013      	str	r3, [r2, #0]
 800e75a:	e013      	b.n	800e784 <tcp_close_shutdown+0x150>
 800e75c:	4b24      	ldr	r3, [pc, #144]	; (800e7f0 <tcp_close_shutdown+0x1bc>)
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	60bb      	str	r3, [r7, #8]
 800e762:	e00c      	b.n	800e77e <tcp_close_shutdown+0x14a>
 800e764:	68bb      	ldr	r3, [r7, #8]
 800e766:	68db      	ldr	r3, [r3, #12]
 800e768:	687a      	ldr	r2, [r7, #4]
 800e76a:	429a      	cmp	r2, r3
 800e76c:	d104      	bne.n	800e778 <tcp_close_shutdown+0x144>
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	68da      	ldr	r2, [r3, #12]
 800e772:	68bb      	ldr	r3, [r7, #8]
 800e774:	60da      	str	r2, [r3, #12]
 800e776:	e005      	b.n	800e784 <tcp_close_shutdown+0x150>
 800e778:	68bb      	ldr	r3, [r7, #8]
 800e77a:	68db      	ldr	r3, [r3, #12]
 800e77c:	60bb      	str	r3, [r7, #8]
 800e77e:	68bb      	ldr	r3, [r7, #8]
 800e780:	2b00      	cmp	r3, #0
 800e782:	d1ef      	bne.n	800e764 <tcp_close_shutdown+0x130>
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	2200      	movs	r2, #0
 800e788:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800e78a:	6878      	ldr	r0, [r7, #4]
 800e78c:	f7ff fea0 	bl	800e4d0 <tcp_free>
      break;
 800e790:	e01a      	b.n	800e7c8 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800e792:	6878      	ldr	r0, [r7, #4]
 800e794:	f7ff ff14 	bl	800e5c0 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800e798:	6879      	ldr	r1, [r7, #4]
 800e79a:	4816      	ldr	r0, [pc, #88]	; (800e7f4 <tcp_close_shutdown+0x1c0>)
 800e79c:	f001 fb52 	bl	800fe44 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800e7a0:	6878      	ldr	r0, [r7, #4]
 800e7a2:	f7ff feb1 	bl	800e508 <tcp_free_listen>
      break;
 800e7a6:	e00f      	b.n	800e7c8 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800e7a8:	6879      	ldr	r1, [r7, #4]
 800e7aa:	480e      	ldr	r0, [pc, #56]	; (800e7e4 <tcp_close_shutdown+0x1b0>)
 800e7ac:	f001 fb4a 	bl	800fe44 <tcp_pcb_remove>
 800e7b0:	4b0d      	ldr	r3, [pc, #52]	; (800e7e8 <tcp_close_shutdown+0x1b4>)
 800e7b2:	2201      	movs	r2, #1
 800e7b4:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800e7b6:	6878      	ldr	r0, [r7, #4]
 800e7b8:	f7ff fe8a 	bl	800e4d0 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800e7bc:	e004      	b.n	800e7c8 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800e7be:	6878      	ldr	r0, [r7, #4]
 800e7c0:	f000 f81a 	bl	800e7f8 <tcp_close_shutdown_fin>
 800e7c4:	4603      	mov	r3, r0
 800e7c6:	e000      	b.n	800e7ca <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800e7c8:	2300      	movs	r3, #0
}
 800e7ca:	4618      	mov	r0, r3
 800e7cc:	3710      	adds	r7, #16
 800e7ce:	46bd      	mov	sp, r7
 800e7d0:	bdb0      	pop	{r4, r5, r7, pc}
 800e7d2:	bf00      	nop
 800e7d4:	0801c730 	.word	0x0801c730
 800e7d8:	0801c804 	.word	0x0801c804
 800e7dc:	0801c774 	.word	0x0801c774
 800e7e0:	0801c824 	.word	0x0801c824
 800e7e4:	2000bf2c 	.word	0x2000bf2c
 800e7e8:	2000bf34 	.word	0x2000bf34
 800e7ec:	2000bf6c 	.word	0x2000bf6c
 800e7f0:	2000bf24 	.word	0x2000bf24
 800e7f4:	2000bf28 	.word	0x2000bf28

0800e7f8 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800e7f8:	b580      	push	{r7, lr}
 800e7fa:	b084      	sub	sp, #16
 800e7fc:	af00      	add	r7, sp, #0
 800e7fe:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	2b00      	cmp	r3, #0
 800e804:	d106      	bne.n	800e814 <tcp_close_shutdown_fin+0x1c>
 800e806:	4b2e      	ldr	r3, [pc, #184]	; (800e8c0 <tcp_close_shutdown_fin+0xc8>)
 800e808:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800e80c:	492d      	ldr	r1, [pc, #180]	; (800e8c4 <tcp_close_shutdown_fin+0xcc>)
 800e80e:	482e      	ldr	r0, [pc, #184]	; (800e8c8 <tcp_close_shutdown_fin+0xd0>)
 800e810:	f00b ffc8 	bl	801a7a4 <iprintf>

  switch (pcb->state) {
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	7d1b      	ldrb	r3, [r3, #20]
 800e818:	2b07      	cmp	r3, #7
 800e81a:	d020      	beq.n	800e85e <tcp_close_shutdown_fin+0x66>
 800e81c:	2b07      	cmp	r3, #7
 800e81e:	dc2b      	bgt.n	800e878 <tcp_close_shutdown_fin+0x80>
 800e820:	2b03      	cmp	r3, #3
 800e822:	d002      	beq.n	800e82a <tcp_close_shutdown_fin+0x32>
 800e824:	2b04      	cmp	r3, #4
 800e826:	d00d      	beq.n	800e844 <tcp_close_shutdown_fin+0x4c>
 800e828:	e026      	b.n	800e878 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800e82a:	6878      	ldr	r0, [r7, #4]
 800e82c:	f004 fde8 	bl	8013400 <tcp_send_fin>
 800e830:	4603      	mov	r3, r0
 800e832:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e834:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d11f      	bne.n	800e87c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	2205      	movs	r2, #5
 800e840:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e842:	e01b      	b.n	800e87c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800e844:	6878      	ldr	r0, [r7, #4]
 800e846:	f004 fddb 	bl	8013400 <tcp_send_fin>
 800e84a:	4603      	mov	r3, r0
 800e84c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e84e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e852:	2b00      	cmp	r3, #0
 800e854:	d114      	bne.n	800e880 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	2205      	movs	r2, #5
 800e85a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e85c:	e010      	b.n	800e880 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800e85e:	6878      	ldr	r0, [r7, #4]
 800e860:	f004 fdce 	bl	8013400 <tcp_send_fin>
 800e864:	4603      	mov	r3, r0
 800e866:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e868:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d109      	bne.n	800e884 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	2209      	movs	r2, #9
 800e874:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e876:	e005      	b.n	800e884 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800e878:	2300      	movs	r3, #0
 800e87a:	e01c      	b.n	800e8b6 <tcp_close_shutdown_fin+0xbe>
      break;
 800e87c:	bf00      	nop
 800e87e:	e002      	b.n	800e886 <tcp_close_shutdown_fin+0x8e>
      break;
 800e880:	bf00      	nop
 800e882:	e000      	b.n	800e886 <tcp_close_shutdown_fin+0x8e>
      break;
 800e884:	bf00      	nop
  }

  if (err == ERR_OK) {
 800e886:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d103      	bne.n	800e896 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800e88e:	6878      	ldr	r0, [r7, #4]
 800e890:	f004 fef4 	bl	801367c <tcp_output>
 800e894:	e00d      	b.n	800e8b2 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800e896:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e89a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e89e:	d108      	bne.n	800e8b2 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	8b5b      	ldrh	r3, [r3, #26]
 800e8a4:	f043 0308 	orr.w	r3, r3, #8
 800e8a8:	b29a      	uxth	r2, r3
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800e8ae:	2300      	movs	r3, #0
 800e8b0:	e001      	b.n	800e8b6 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800e8b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e8b6:	4618      	mov	r0, r3
 800e8b8:	3710      	adds	r7, #16
 800e8ba:	46bd      	mov	sp, r7
 800e8bc:	bd80      	pop	{r7, pc}
 800e8be:	bf00      	nop
 800e8c0:	0801c730 	.word	0x0801c730
 800e8c4:	0801c7e0 	.word	0x0801c7e0
 800e8c8:	0801c774 	.word	0x0801c774

0800e8cc <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800e8cc:	b580      	push	{r7, lr}
 800e8ce:	b082      	sub	sp, #8
 800e8d0:	af00      	add	r7, sp, #0
 800e8d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d109      	bne.n	800e8ee <tcp_close+0x22>
 800e8da:	4b0f      	ldr	r3, [pc, #60]	; (800e918 <tcp_close+0x4c>)
 800e8dc:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800e8e0:	490e      	ldr	r1, [pc, #56]	; (800e91c <tcp_close+0x50>)
 800e8e2:	480f      	ldr	r0, [pc, #60]	; (800e920 <tcp_close+0x54>)
 800e8e4:	f00b ff5e 	bl	801a7a4 <iprintf>
 800e8e8:	f06f 030f 	mvn.w	r3, #15
 800e8ec:	e00f      	b.n	800e90e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	7d1b      	ldrb	r3, [r3, #20]
 800e8f2:	2b01      	cmp	r3, #1
 800e8f4:	d006      	beq.n	800e904 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	8b5b      	ldrh	r3, [r3, #26]
 800e8fa:	f043 0310 	orr.w	r3, r3, #16
 800e8fe:	b29a      	uxth	r2, r3
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800e904:	2101      	movs	r1, #1
 800e906:	6878      	ldr	r0, [r7, #4]
 800e908:	f7ff fe94 	bl	800e634 <tcp_close_shutdown>
 800e90c:	4603      	mov	r3, r0
}
 800e90e:	4618      	mov	r0, r3
 800e910:	3708      	adds	r7, #8
 800e912:	46bd      	mov	sp, r7
 800e914:	bd80      	pop	{r7, pc}
 800e916:	bf00      	nop
 800e918:	0801c730 	.word	0x0801c730
 800e91c:	0801c840 	.word	0x0801c840
 800e920:	0801c774 	.word	0x0801c774

0800e924 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800e924:	b580      	push	{r7, lr}
 800e926:	b08e      	sub	sp, #56	; 0x38
 800e928:	af04      	add	r7, sp, #16
 800e92a:	6078      	str	r0, [r7, #4]
 800e92c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	2b00      	cmp	r3, #0
 800e932:	d107      	bne.n	800e944 <tcp_abandon+0x20>
 800e934:	4b52      	ldr	r3, [pc, #328]	; (800ea80 <tcp_abandon+0x15c>)
 800e936:	f240 223d 	movw	r2, #573	; 0x23d
 800e93a:	4952      	ldr	r1, [pc, #328]	; (800ea84 <tcp_abandon+0x160>)
 800e93c:	4852      	ldr	r0, [pc, #328]	; (800ea88 <tcp_abandon+0x164>)
 800e93e:	f00b ff31 	bl	801a7a4 <iprintf>
 800e942:	e099      	b.n	800ea78 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	7d1b      	ldrb	r3, [r3, #20]
 800e948:	2b01      	cmp	r3, #1
 800e94a:	d106      	bne.n	800e95a <tcp_abandon+0x36>
 800e94c:	4b4c      	ldr	r3, [pc, #304]	; (800ea80 <tcp_abandon+0x15c>)
 800e94e:	f44f 7210 	mov.w	r2, #576	; 0x240
 800e952:	494e      	ldr	r1, [pc, #312]	; (800ea8c <tcp_abandon+0x168>)
 800e954:	484c      	ldr	r0, [pc, #304]	; (800ea88 <tcp_abandon+0x164>)
 800e956:	f00b ff25 	bl	801a7a4 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	7d1b      	ldrb	r3, [r3, #20]
 800e95e:	2b0a      	cmp	r3, #10
 800e960:	d107      	bne.n	800e972 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800e962:	6879      	ldr	r1, [r7, #4]
 800e964:	484a      	ldr	r0, [pc, #296]	; (800ea90 <tcp_abandon+0x16c>)
 800e966:	f001 fa6d 	bl	800fe44 <tcp_pcb_remove>
    tcp_free(pcb);
 800e96a:	6878      	ldr	r0, [r7, #4]
 800e96c:	f7ff fdb0 	bl	800e4d0 <tcp_free>
 800e970:	e082      	b.n	800ea78 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800e972:	2300      	movs	r3, #0
 800e974:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800e976:	2300      	movs	r3, #0
 800e978:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e97e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e984:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e98c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	691b      	ldr	r3, [r3, #16]
 800e992:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	7d1b      	ldrb	r3, [r3, #20]
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d126      	bne.n	800e9ea <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	8adb      	ldrh	r3, [r3, #22]
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d02e      	beq.n	800ea02 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800e9a4:	4b3b      	ldr	r3, [pc, #236]	; (800ea94 <tcp_abandon+0x170>)
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	687a      	ldr	r2, [r7, #4]
 800e9aa:	429a      	cmp	r2, r3
 800e9ac:	d105      	bne.n	800e9ba <tcp_abandon+0x96>
 800e9ae:	4b39      	ldr	r3, [pc, #228]	; (800ea94 <tcp_abandon+0x170>)
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	68db      	ldr	r3, [r3, #12]
 800e9b4:	4a37      	ldr	r2, [pc, #220]	; (800ea94 <tcp_abandon+0x170>)
 800e9b6:	6013      	str	r3, [r2, #0]
 800e9b8:	e013      	b.n	800e9e2 <tcp_abandon+0xbe>
 800e9ba:	4b36      	ldr	r3, [pc, #216]	; (800ea94 <tcp_abandon+0x170>)
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	61fb      	str	r3, [r7, #28]
 800e9c0:	e00c      	b.n	800e9dc <tcp_abandon+0xb8>
 800e9c2:	69fb      	ldr	r3, [r7, #28]
 800e9c4:	68db      	ldr	r3, [r3, #12]
 800e9c6:	687a      	ldr	r2, [r7, #4]
 800e9c8:	429a      	cmp	r2, r3
 800e9ca:	d104      	bne.n	800e9d6 <tcp_abandon+0xb2>
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	68da      	ldr	r2, [r3, #12]
 800e9d0:	69fb      	ldr	r3, [r7, #28]
 800e9d2:	60da      	str	r2, [r3, #12]
 800e9d4:	e005      	b.n	800e9e2 <tcp_abandon+0xbe>
 800e9d6:	69fb      	ldr	r3, [r7, #28]
 800e9d8:	68db      	ldr	r3, [r3, #12]
 800e9da:	61fb      	str	r3, [r7, #28]
 800e9dc:	69fb      	ldr	r3, [r7, #28]
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d1ef      	bne.n	800e9c2 <tcp_abandon+0x9e>
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	2200      	movs	r2, #0
 800e9e6:	60da      	str	r2, [r3, #12]
 800e9e8:	e00b      	b.n	800ea02 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800e9ea:	683b      	ldr	r3, [r7, #0]
 800e9ec:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	8adb      	ldrh	r3, [r3, #22]
 800e9f2:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800e9f4:	6879      	ldr	r1, [r7, #4]
 800e9f6:	4828      	ldr	r0, [pc, #160]	; (800ea98 <tcp_abandon+0x174>)
 800e9f8:	f001 fa24 	bl	800fe44 <tcp_pcb_remove>
 800e9fc:	4b27      	ldr	r3, [pc, #156]	; (800ea9c <tcp_abandon+0x178>)
 800e9fe:	2201      	movs	r2, #1
 800ea00:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d004      	beq.n	800ea14 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ea0e:	4618      	mov	r0, r3
 800ea10:	f000 ff12 	bl	800f838 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d004      	beq.n	800ea26 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ea20:	4618      	mov	r0, r3
 800ea22:	f000 ff09 	bl	800f838 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d004      	beq.n	800ea38 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ea32:	4618      	mov	r0, r3
 800ea34:	f000 ff00 	bl	800f838 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800ea38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d00e      	beq.n	800ea5c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800ea3e:	6879      	ldr	r1, [r7, #4]
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	3304      	adds	r3, #4
 800ea44:	687a      	ldr	r2, [r7, #4]
 800ea46:	8b12      	ldrh	r2, [r2, #24]
 800ea48:	9202      	str	r2, [sp, #8]
 800ea4a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800ea4c:	9201      	str	r2, [sp, #4]
 800ea4e:	9300      	str	r3, [sp, #0]
 800ea50:	460b      	mov	r3, r1
 800ea52:	697a      	ldr	r2, [r7, #20]
 800ea54:	69b9      	ldr	r1, [r7, #24]
 800ea56:	6878      	ldr	r0, [r7, #4]
 800ea58:	f005 fbc4 	bl	80141e4 <tcp_rst>
    }
    last_state = pcb->state;
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	7d1b      	ldrb	r3, [r3, #20]
 800ea60:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800ea62:	6878      	ldr	r0, [r7, #4]
 800ea64:	f7ff fd34 	bl	800e4d0 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800ea68:	693b      	ldr	r3, [r7, #16]
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d004      	beq.n	800ea78 <tcp_abandon+0x154>
 800ea6e:	693b      	ldr	r3, [r7, #16]
 800ea70:	f06f 010c 	mvn.w	r1, #12
 800ea74:	68f8      	ldr	r0, [r7, #12]
 800ea76:	4798      	blx	r3
  }
}
 800ea78:	3728      	adds	r7, #40	; 0x28
 800ea7a:	46bd      	mov	sp, r7
 800ea7c:	bd80      	pop	{r7, pc}
 800ea7e:	bf00      	nop
 800ea80:	0801c730 	.word	0x0801c730
 800ea84:	0801c874 	.word	0x0801c874
 800ea88:	0801c774 	.word	0x0801c774
 800ea8c:	0801c890 	.word	0x0801c890
 800ea90:	2000bf30 	.word	0x2000bf30
 800ea94:	2000bf24 	.word	0x2000bf24
 800ea98:	2000bf2c 	.word	0x2000bf2c
 800ea9c:	2000bf34 	.word	0x2000bf34

0800eaa0 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800eaa0:	b580      	push	{r7, lr}
 800eaa2:	b082      	sub	sp, #8
 800eaa4:	af00      	add	r7, sp, #0
 800eaa6:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800eaa8:	2101      	movs	r1, #1
 800eaaa:	6878      	ldr	r0, [r7, #4]
 800eaac:	f7ff ff3a 	bl	800e924 <tcp_abandon>
}
 800eab0:	bf00      	nop
 800eab2:	3708      	adds	r7, #8
 800eab4:	46bd      	mov	sp, r7
 800eab6:	bd80      	pop	{r7, pc}

0800eab8 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800eab8:	b580      	push	{r7, lr}
 800eaba:	b088      	sub	sp, #32
 800eabc:	af00      	add	r7, sp, #0
 800eabe:	60f8      	str	r0, [r7, #12]
 800eac0:	60b9      	str	r1, [r7, #8]
 800eac2:	4613      	mov	r3, r2
 800eac4:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800eac6:	2304      	movs	r3, #4
 800eac8:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800eaca:	68bb      	ldr	r3, [r7, #8]
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d101      	bne.n	800ead4 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800ead0:	4b3e      	ldr	r3, [pc, #248]	; (800ebcc <tcp_bind+0x114>)
 800ead2:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d109      	bne.n	800eaee <tcp_bind+0x36>
 800eada:	4b3d      	ldr	r3, [pc, #244]	; (800ebd0 <tcp_bind+0x118>)
 800eadc:	f240 22a9 	movw	r2, #681	; 0x2a9
 800eae0:	493c      	ldr	r1, [pc, #240]	; (800ebd4 <tcp_bind+0x11c>)
 800eae2:	483d      	ldr	r0, [pc, #244]	; (800ebd8 <tcp_bind+0x120>)
 800eae4:	f00b fe5e 	bl	801a7a4 <iprintf>
 800eae8:	f06f 030f 	mvn.w	r3, #15
 800eaec:	e06a      	b.n	800ebc4 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	7d1b      	ldrb	r3, [r3, #20]
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	d009      	beq.n	800eb0a <tcp_bind+0x52>
 800eaf6:	4b36      	ldr	r3, [pc, #216]	; (800ebd0 <tcp_bind+0x118>)
 800eaf8:	f240 22ab 	movw	r2, #683	; 0x2ab
 800eafc:	4937      	ldr	r1, [pc, #220]	; (800ebdc <tcp_bind+0x124>)
 800eafe:	4836      	ldr	r0, [pc, #216]	; (800ebd8 <tcp_bind+0x120>)
 800eb00:	f00b fe50 	bl	801a7a4 <iprintf>
 800eb04:	f06f 0305 	mvn.w	r3, #5
 800eb08:	e05c      	b.n	800ebc4 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800eb0a:	88fb      	ldrh	r3, [r7, #6]
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d109      	bne.n	800eb24 <tcp_bind+0x6c>
    port = tcp_new_port();
 800eb10:	f000 f914 	bl	800ed3c <tcp_new_port>
 800eb14:	4603      	mov	r3, r0
 800eb16:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800eb18:	88fb      	ldrh	r3, [r7, #6]
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d135      	bne.n	800eb8a <tcp_bind+0xd2>
      return ERR_BUF;
 800eb1e:	f06f 0301 	mvn.w	r3, #1
 800eb22:	e04f      	b.n	800ebc4 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800eb24:	2300      	movs	r3, #0
 800eb26:	61fb      	str	r3, [r7, #28]
 800eb28:	e02b      	b.n	800eb82 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800eb2a:	4a2d      	ldr	r2, [pc, #180]	; (800ebe0 <tcp_bind+0x128>)
 800eb2c:	69fb      	ldr	r3, [r7, #28]
 800eb2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eb32:	681b      	ldr	r3, [r3, #0]
 800eb34:	61bb      	str	r3, [r7, #24]
 800eb36:	e01e      	b.n	800eb76 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800eb38:	69bb      	ldr	r3, [r7, #24]
 800eb3a:	8adb      	ldrh	r3, [r3, #22]
 800eb3c:	88fa      	ldrh	r2, [r7, #6]
 800eb3e:	429a      	cmp	r2, r3
 800eb40:	d116      	bne.n	800eb70 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800eb42:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d010      	beq.n	800eb6a <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800eb48:	69bb      	ldr	r3, [r7, #24]
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d00c      	beq.n	800eb6a <tcp_bind+0xb2>
 800eb50:	68bb      	ldr	r3, [r7, #8]
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d009      	beq.n	800eb6a <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800eb56:	68bb      	ldr	r3, [r7, #8]
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d005      	beq.n	800eb6a <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800eb5e:	69bb      	ldr	r3, [r7, #24]
 800eb60:	681a      	ldr	r2, [r3, #0]
 800eb62:	68bb      	ldr	r3, [r7, #8]
 800eb64:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800eb66:	429a      	cmp	r2, r3
 800eb68:	d102      	bne.n	800eb70 <tcp_bind+0xb8>
              return ERR_USE;
 800eb6a:	f06f 0307 	mvn.w	r3, #7
 800eb6e:	e029      	b.n	800ebc4 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800eb70:	69bb      	ldr	r3, [r7, #24]
 800eb72:	68db      	ldr	r3, [r3, #12]
 800eb74:	61bb      	str	r3, [r7, #24]
 800eb76:	69bb      	ldr	r3, [r7, #24]
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d1dd      	bne.n	800eb38 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800eb7c:	69fb      	ldr	r3, [r7, #28]
 800eb7e:	3301      	adds	r3, #1
 800eb80:	61fb      	str	r3, [r7, #28]
 800eb82:	69fa      	ldr	r2, [r7, #28]
 800eb84:	697b      	ldr	r3, [r7, #20]
 800eb86:	429a      	cmp	r2, r3
 800eb88:	dbcf      	blt.n	800eb2a <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800eb8a:	68bb      	ldr	r3, [r7, #8]
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d00c      	beq.n	800ebaa <tcp_bind+0xf2>
 800eb90:	68bb      	ldr	r3, [r7, #8]
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d008      	beq.n	800ebaa <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800eb98:	68bb      	ldr	r3, [r7, #8]
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d002      	beq.n	800eba4 <tcp_bind+0xec>
 800eb9e:	68bb      	ldr	r3, [r7, #8]
 800eba0:	681b      	ldr	r3, [r3, #0]
 800eba2:	e000      	b.n	800eba6 <tcp_bind+0xee>
 800eba4:	2300      	movs	r3, #0
 800eba6:	68fa      	ldr	r2, [r7, #12]
 800eba8:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	88fa      	ldrh	r2, [r7, #6]
 800ebae:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800ebb0:	4b0c      	ldr	r3, [pc, #48]	; (800ebe4 <tcp_bind+0x12c>)
 800ebb2:	681a      	ldr	r2, [r3, #0]
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	60da      	str	r2, [r3, #12]
 800ebb8:	4a0a      	ldr	r2, [pc, #40]	; (800ebe4 <tcp_bind+0x12c>)
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	6013      	str	r3, [r2, #0]
 800ebbe:	f005 fcd3 	bl	8014568 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800ebc2:	2300      	movs	r3, #0
}
 800ebc4:	4618      	mov	r0, r3
 800ebc6:	3720      	adds	r7, #32
 800ebc8:	46bd      	mov	sp, r7
 800ebca:	bd80      	pop	{r7, pc}
 800ebcc:	0801eb7c 	.word	0x0801eb7c
 800ebd0:	0801c730 	.word	0x0801c730
 800ebd4:	0801c8c4 	.word	0x0801c8c4
 800ebd8:	0801c774 	.word	0x0801c774
 800ebdc:	0801c8dc 	.word	0x0801c8dc
 800ebe0:	0801eb44 	.word	0x0801eb44
 800ebe4:	2000bf24 	.word	0x2000bf24

0800ebe8 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800ebe8:	b580      	push	{r7, lr}
 800ebea:	b084      	sub	sp, #16
 800ebec:	af00      	add	r7, sp, #0
 800ebee:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d106      	bne.n	800ec04 <tcp_update_rcv_ann_wnd+0x1c>
 800ebf6:	4b25      	ldr	r3, [pc, #148]	; (800ec8c <tcp_update_rcv_ann_wnd+0xa4>)
 800ebf8:	f240 32a6 	movw	r2, #934	; 0x3a6
 800ebfc:	4924      	ldr	r1, [pc, #144]	; (800ec90 <tcp_update_rcv_ann_wnd+0xa8>)
 800ebfe:	4825      	ldr	r0, [pc, #148]	; (800ec94 <tcp_update_rcv_ann_wnd+0xac>)
 800ec00:	f00b fdd0 	bl	801a7a4 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec08:	687a      	ldr	r2, [r7, #4]
 800ec0a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800ec0c:	4413      	add	r3, r2
 800ec0e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec14:	687a      	ldr	r2, [r7, #4]
 800ec16:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800ec18:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800ec1c:	bf28      	it	cs
 800ec1e:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800ec22:	b292      	uxth	r2, r2
 800ec24:	4413      	add	r3, r2
 800ec26:	68fa      	ldr	r2, [r7, #12]
 800ec28:	1ad3      	subs	r3, r2, r3
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	db08      	blt.n	800ec40 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec3a:	68fa      	ldr	r2, [r7, #12]
 800ec3c:	1ad3      	subs	r3, r2, r3
 800ec3e:	e020      	b.n	800ec82 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec48:	1ad3      	subs	r3, r2, r3
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	dd03      	ble.n	800ec56 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	2200      	movs	r2, #0
 800ec52:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ec54:	e014      	b.n	800ec80 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec5e:	1ad3      	subs	r3, r2, r3
 800ec60:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800ec62:	68bb      	ldr	r3, [r7, #8]
 800ec64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ec68:	d306      	bcc.n	800ec78 <tcp_update_rcv_ann_wnd+0x90>
 800ec6a:	4b08      	ldr	r3, [pc, #32]	; (800ec8c <tcp_update_rcv_ann_wnd+0xa4>)
 800ec6c:	f240 32b6 	movw	r2, #950	; 0x3b6
 800ec70:	4909      	ldr	r1, [pc, #36]	; (800ec98 <tcp_update_rcv_ann_wnd+0xb0>)
 800ec72:	4808      	ldr	r0, [pc, #32]	; (800ec94 <tcp_update_rcv_ann_wnd+0xac>)
 800ec74:	f00b fd96 	bl	801a7a4 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800ec78:	68bb      	ldr	r3, [r7, #8]
 800ec7a:	b29a      	uxth	r2, r3
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800ec80:	2300      	movs	r3, #0
  }
}
 800ec82:	4618      	mov	r0, r3
 800ec84:	3710      	adds	r7, #16
 800ec86:	46bd      	mov	sp, r7
 800ec88:	bd80      	pop	{r7, pc}
 800ec8a:	bf00      	nop
 800ec8c:	0801c730 	.word	0x0801c730
 800ec90:	0801c98c 	.word	0x0801c98c
 800ec94:	0801c774 	.word	0x0801c774
 800ec98:	0801c9b0 	.word	0x0801c9b0

0800ec9c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800ec9c:	b580      	push	{r7, lr}
 800ec9e:	b084      	sub	sp, #16
 800eca0:	af00      	add	r7, sp, #0
 800eca2:	6078      	str	r0, [r7, #4]
 800eca4:	460b      	mov	r3, r1
 800eca6:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	d107      	bne.n	800ecbe <tcp_recved+0x22>
 800ecae:	4b1f      	ldr	r3, [pc, #124]	; (800ed2c <tcp_recved+0x90>)
 800ecb0:	f240 32cf 	movw	r2, #975	; 0x3cf
 800ecb4:	491e      	ldr	r1, [pc, #120]	; (800ed30 <tcp_recved+0x94>)
 800ecb6:	481f      	ldr	r0, [pc, #124]	; (800ed34 <tcp_recved+0x98>)
 800ecb8:	f00b fd74 	bl	801a7a4 <iprintf>
 800ecbc:	e032      	b.n	800ed24 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	7d1b      	ldrb	r3, [r3, #20]
 800ecc2:	2b01      	cmp	r3, #1
 800ecc4:	d106      	bne.n	800ecd4 <tcp_recved+0x38>
 800ecc6:	4b19      	ldr	r3, [pc, #100]	; (800ed2c <tcp_recved+0x90>)
 800ecc8:	f240 32d2 	movw	r2, #978	; 0x3d2
 800eccc:	491a      	ldr	r1, [pc, #104]	; (800ed38 <tcp_recved+0x9c>)
 800ecce:	4819      	ldr	r0, [pc, #100]	; (800ed34 <tcp_recved+0x98>)
 800ecd0:	f00b fd68 	bl	801a7a4 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ecd8:	887b      	ldrh	r3, [r7, #2]
 800ecda:	4413      	add	r3, r2
 800ecdc:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800ecde:	89fb      	ldrh	r3, [r7, #14]
 800ece0:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ece4:	d804      	bhi.n	800ecf0 <tcp_recved+0x54>
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ecea:	89fa      	ldrh	r2, [r7, #14]
 800ecec:	429a      	cmp	r2, r3
 800ecee:	d204      	bcs.n	800ecfa <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800ecf6:	851a      	strh	r2, [r3, #40]	; 0x28
 800ecf8:	e002      	b.n	800ed00 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	89fa      	ldrh	r2, [r7, #14]
 800ecfe:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800ed00:	6878      	ldr	r0, [r7, #4]
 800ed02:	f7ff ff71 	bl	800ebe8 <tcp_update_rcv_ann_wnd>
 800ed06:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800ed08:	68bb      	ldr	r3, [r7, #8]
 800ed0a:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800ed0e:	d309      	bcc.n	800ed24 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	8b5b      	ldrh	r3, [r3, #26]
 800ed14:	f043 0302 	orr.w	r3, r3, #2
 800ed18:	b29a      	uxth	r2, r3
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800ed1e:	6878      	ldr	r0, [r7, #4]
 800ed20:	f004 fcac 	bl	801367c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800ed24:	3710      	adds	r7, #16
 800ed26:	46bd      	mov	sp, r7
 800ed28:	bd80      	pop	{r7, pc}
 800ed2a:	bf00      	nop
 800ed2c:	0801c730 	.word	0x0801c730
 800ed30:	0801c9cc 	.word	0x0801c9cc
 800ed34:	0801c774 	.word	0x0801c774
 800ed38:	0801c9e4 	.word	0x0801c9e4

0800ed3c <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800ed3c:	b480      	push	{r7}
 800ed3e:	b083      	sub	sp, #12
 800ed40:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800ed42:	2300      	movs	r3, #0
 800ed44:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800ed46:	4b1e      	ldr	r3, [pc, #120]	; (800edc0 <tcp_new_port+0x84>)
 800ed48:	881b      	ldrh	r3, [r3, #0]
 800ed4a:	3301      	adds	r3, #1
 800ed4c:	b29a      	uxth	r2, r3
 800ed4e:	4b1c      	ldr	r3, [pc, #112]	; (800edc0 <tcp_new_port+0x84>)
 800ed50:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800ed52:	4b1b      	ldr	r3, [pc, #108]	; (800edc0 <tcp_new_port+0x84>)
 800ed54:	881b      	ldrh	r3, [r3, #0]
 800ed56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ed5a:	4293      	cmp	r3, r2
 800ed5c:	d103      	bne.n	800ed66 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800ed5e:	4b18      	ldr	r3, [pc, #96]	; (800edc0 <tcp_new_port+0x84>)
 800ed60:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800ed64:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800ed66:	2300      	movs	r3, #0
 800ed68:	71fb      	strb	r3, [r7, #7]
 800ed6a:	e01e      	b.n	800edaa <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800ed6c:	79fb      	ldrb	r3, [r7, #7]
 800ed6e:	4a15      	ldr	r2, [pc, #84]	; (800edc4 <tcp_new_port+0x88>)
 800ed70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	603b      	str	r3, [r7, #0]
 800ed78:	e011      	b.n	800ed9e <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800ed7a:	683b      	ldr	r3, [r7, #0]
 800ed7c:	8ada      	ldrh	r2, [r3, #22]
 800ed7e:	4b10      	ldr	r3, [pc, #64]	; (800edc0 <tcp_new_port+0x84>)
 800ed80:	881b      	ldrh	r3, [r3, #0]
 800ed82:	429a      	cmp	r2, r3
 800ed84:	d108      	bne.n	800ed98 <tcp_new_port+0x5c>
        n++;
 800ed86:	88bb      	ldrh	r3, [r7, #4]
 800ed88:	3301      	adds	r3, #1
 800ed8a:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800ed8c:	88bb      	ldrh	r3, [r7, #4]
 800ed8e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ed92:	d3d8      	bcc.n	800ed46 <tcp_new_port+0xa>
          return 0;
 800ed94:	2300      	movs	r3, #0
 800ed96:	e00d      	b.n	800edb4 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800ed98:	683b      	ldr	r3, [r7, #0]
 800ed9a:	68db      	ldr	r3, [r3, #12]
 800ed9c:	603b      	str	r3, [r7, #0]
 800ed9e:	683b      	ldr	r3, [r7, #0]
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d1ea      	bne.n	800ed7a <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800eda4:	79fb      	ldrb	r3, [r7, #7]
 800eda6:	3301      	adds	r3, #1
 800eda8:	71fb      	strb	r3, [r7, #7]
 800edaa:	79fb      	ldrb	r3, [r7, #7]
 800edac:	2b03      	cmp	r3, #3
 800edae:	d9dd      	bls.n	800ed6c <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800edb0:	4b03      	ldr	r3, [pc, #12]	; (800edc0 <tcp_new_port+0x84>)
 800edb2:	881b      	ldrh	r3, [r3, #0]
}
 800edb4:	4618      	mov	r0, r3
 800edb6:	370c      	adds	r7, #12
 800edb8:	46bd      	mov	sp, r7
 800edba:	bc80      	pop	{r7}
 800edbc:	4770      	bx	lr
 800edbe:	bf00      	nop
 800edc0:	2000009c 	.word	0x2000009c
 800edc4:	0801eb44 	.word	0x0801eb44

0800edc8 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 800edc8:	b580      	push	{r7, lr}
 800edca:	b08a      	sub	sp, #40	; 0x28
 800edcc:	af00      	add	r7, sp, #0
 800edce:	60f8      	str	r0, [r7, #12]
 800edd0:	60b9      	str	r1, [r7, #8]
 800edd2:	603b      	str	r3, [r7, #0]
 800edd4:	4613      	mov	r3, r2
 800edd6:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 800edd8:	2300      	movs	r3, #0
 800edda:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d109      	bne.n	800edf6 <tcp_connect+0x2e>
 800ede2:	4b7d      	ldr	r3, [pc, #500]	; (800efd8 <tcp_connect+0x210>)
 800ede4:	f240 4235 	movw	r2, #1077	; 0x435
 800ede8:	497c      	ldr	r1, [pc, #496]	; (800efdc <tcp_connect+0x214>)
 800edea:	487d      	ldr	r0, [pc, #500]	; (800efe0 <tcp_connect+0x218>)
 800edec:	f00b fcda 	bl	801a7a4 <iprintf>
 800edf0:	f06f 030f 	mvn.w	r3, #15
 800edf4:	e0ec      	b.n	800efd0 <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800edf6:	68bb      	ldr	r3, [r7, #8]
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	d109      	bne.n	800ee10 <tcp_connect+0x48>
 800edfc:	4b76      	ldr	r3, [pc, #472]	; (800efd8 <tcp_connect+0x210>)
 800edfe:	f240 4236 	movw	r2, #1078	; 0x436
 800ee02:	4978      	ldr	r1, [pc, #480]	; (800efe4 <tcp_connect+0x21c>)
 800ee04:	4876      	ldr	r0, [pc, #472]	; (800efe0 <tcp_connect+0x218>)
 800ee06:	f00b fccd 	bl	801a7a4 <iprintf>
 800ee0a:	f06f 030f 	mvn.w	r3, #15
 800ee0e:	e0df      	b.n	800efd0 <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	7d1b      	ldrb	r3, [r3, #20]
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d009      	beq.n	800ee2c <tcp_connect+0x64>
 800ee18:	4b6f      	ldr	r3, [pc, #444]	; (800efd8 <tcp_connect+0x210>)
 800ee1a:	f44f 6287 	mov.w	r2, #1080	; 0x438
 800ee1e:	4972      	ldr	r1, [pc, #456]	; (800efe8 <tcp_connect+0x220>)
 800ee20:	486f      	ldr	r0, [pc, #444]	; (800efe0 <tcp_connect+0x218>)
 800ee22:	f00b fcbf 	bl	801a7a4 <iprintf>
 800ee26:	f06f 0309 	mvn.w	r3, #9
 800ee2a:	e0d1      	b.n	800efd0 <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 800ee2c:	68bb      	ldr	r3, [r7, #8]
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	d002      	beq.n	800ee38 <tcp_connect+0x70>
 800ee32:	68bb      	ldr	r3, [r7, #8]
 800ee34:	681b      	ldr	r3, [r3, #0]
 800ee36:	e000      	b.n	800ee3a <tcp_connect+0x72>
 800ee38:	2300      	movs	r3, #0
 800ee3a:	68fa      	ldr	r2, [r7, #12]
 800ee3c:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	88fa      	ldrh	r2, [r7, #6]
 800ee42:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800ee44:	68fb      	ldr	r3, [r7, #12]
 800ee46:	7a1b      	ldrb	r3, [r3, #8]
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d006      	beq.n	800ee5a <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 800ee4c:	68fb      	ldr	r3, [r7, #12]
 800ee4e:	7a1b      	ldrb	r3, [r3, #8]
 800ee50:	4618      	mov	r0, r3
 800ee52:	f7fe fc95 	bl	800d780 <netif_get_by_index>
 800ee56:	6278      	str	r0, [r7, #36]	; 0x24
 800ee58:	e005      	b.n	800ee66 <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	3304      	adds	r3, #4
 800ee5e:	4618      	mov	r0, r3
 800ee60:	f009 f94a 	bl	80180f8 <ip4_route>
 800ee64:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 800ee66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d102      	bne.n	800ee72 <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 800ee6c:	f06f 0303 	mvn.w	r3, #3
 800ee70:	e0ae      	b.n	800efd0 <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d003      	beq.n	800ee80 <tcp_connect+0xb8>
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d111      	bne.n	800eea4 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 800ee80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	d002      	beq.n	800ee8c <tcp_connect+0xc4>
 800ee86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee88:	3304      	adds	r3, #4
 800ee8a:	e000      	b.n	800ee8e <tcp_connect+0xc6>
 800ee8c:	2300      	movs	r3, #0
 800ee8e:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 800ee90:	69fb      	ldr	r3, [r7, #28]
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d102      	bne.n	800ee9c <tcp_connect+0xd4>
      return ERR_RTE;
 800ee96:	f06f 0303 	mvn.w	r3, #3
 800ee9a:	e099      	b.n	800efd0 <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800ee9c:	69fb      	ldr	r3, [r7, #28]
 800ee9e:	681a      	ldr	r2, [r3, #0]
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 800eea4:	68fb      	ldr	r3, [r7, #12]
 800eea6:	8adb      	ldrh	r3, [r3, #22]
 800eea8:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	8adb      	ldrh	r3, [r3, #22]
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d10c      	bne.n	800eecc <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 800eeb2:	f7ff ff43 	bl	800ed3c <tcp_new_port>
 800eeb6:	4603      	mov	r3, r0
 800eeb8:	461a      	mov	r2, r3
 800eeba:	68fb      	ldr	r3, [r7, #12]
 800eebc:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 800eebe:	68fb      	ldr	r3, [r7, #12]
 800eec0:	8adb      	ldrh	r3, [r3, #22]
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d102      	bne.n	800eecc <tcp_connect+0x104>
      return ERR_BUF;
 800eec6:	f06f 0301 	mvn.w	r3, #1
 800eeca:	e081      	b.n	800efd0 <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 800eecc:	68f8      	ldr	r0, [r7, #12]
 800eece:	f001 f84d 	bl	800ff6c <tcp_next_iss>
 800eed2:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 800eed4:	68fb      	ldr	r3, [r7, #12]
 800eed6:	2200      	movs	r2, #0
 800eed8:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	697a      	ldr	r2, [r7, #20]
 800eede:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 800eee0:	697b      	ldr	r3, [r7, #20]
 800eee2:	1e5a      	subs	r2, r3, #1
 800eee4:	68fb      	ldr	r3, [r7, #12]
 800eee6:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 800eee8:	697b      	ldr	r3, [r7, #20]
 800eeea:	1e5a      	subs	r2, r3, #1
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 800eef0:	697b      	ldr	r3, [r7, #20]
 800eef2:	1e5a      	subs	r2, r3, #1
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800eef8:	68fb      	ldr	r3, [r7, #12]
 800eefa:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800eefe:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800ef16:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	f44f 7206 	mov.w	r2, #536	; 0x218
 800ef20:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 800ef22:	68fb      	ldr	r3, [r7, #12]
 800ef24:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 800ef26:	68fb      	ldr	r3, [r7, #12]
 800ef28:	3304      	adds	r3, #4
 800ef2a:	461a      	mov	r2, r3
 800ef2c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ef2e:	f001 f843 	bl	800ffb8 <tcp_eff_send_mss_netif>
 800ef32:	4603      	mov	r3, r0
 800ef34:	461a      	mov	r2, r3
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 800ef3a:	68fb      	ldr	r3, [r7, #12]
 800ef3c:	2201      	movs	r2, #1
 800ef3e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 800ef42:	68fb      	ldr	r3, [r7, #12]
 800ef44:	683a      	ldr	r2, [r7, #0]
 800ef46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 800ef4a:	2102      	movs	r1, #2
 800ef4c:	68f8      	ldr	r0, [r7, #12]
 800ef4e:	f004 faa7 	bl	80134a0 <tcp_enqueue_flags>
 800ef52:	4603      	mov	r3, r0
 800ef54:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 800ef56:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d136      	bne.n	800efcc <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 800ef5e:	68fb      	ldr	r3, [r7, #12]
 800ef60:	2202      	movs	r2, #2
 800ef62:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 800ef64:	8b7b      	ldrh	r3, [r7, #26]
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d021      	beq.n	800efae <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800ef6a:	4b20      	ldr	r3, [pc, #128]	; (800efec <tcp_connect+0x224>)
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	68fa      	ldr	r2, [r7, #12]
 800ef70:	429a      	cmp	r2, r3
 800ef72:	d105      	bne.n	800ef80 <tcp_connect+0x1b8>
 800ef74:	4b1d      	ldr	r3, [pc, #116]	; (800efec <tcp_connect+0x224>)
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	68db      	ldr	r3, [r3, #12]
 800ef7a:	4a1c      	ldr	r2, [pc, #112]	; (800efec <tcp_connect+0x224>)
 800ef7c:	6013      	str	r3, [r2, #0]
 800ef7e:	e013      	b.n	800efa8 <tcp_connect+0x1e0>
 800ef80:	4b1a      	ldr	r3, [pc, #104]	; (800efec <tcp_connect+0x224>)
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	623b      	str	r3, [r7, #32]
 800ef86:	e00c      	b.n	800efa2 <tcp_connect+0x1da>
 800ef88:	6a3b      	ldr	r3, [r7, #32]
 800ef8a:	68db      	ldr	r3, [r3, #12]
 800ef8c:	68fa      	ldr	r2, [r7, #12]
 800ef8e:	429a      	cmp	r2, r3
 800ef90:	d104      	bne.n	800ef9c <tcp_connect+0x1d4>
 800ef92:	68fb      	ldr	r3, [r7, #12]
 800ef94:	68da      	ldr	r2, [r3, #12]
 800ef96:	6a3b      	ldr	r3, [r7, #32]
 800ef98:	60da      	str	r2, [r3, #12]
 800ef9a:	e005      	b.n	800efa8 <tcp_connect+0x1e0>
 800ef9c:	6a3b      	ldr	r3, [r7, #32]
 800ef9e:	68db      	ldr	r3, [r3, #12]
 800efa0:	623b      	str	r3, [r7, #32]
 800efa2:	6a3b      	ldr	r3, [r7, #32]
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d1ef      	bne.n	800ef88 <tcp_connect+0x1c0>
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	2200      	movs	r2, #0
 800efac:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 800efae:	4b10      	ldr	r3, [pc, #64]	; (800eff0 <tcp_connect+0x228>)
 800efb0:	681a      	ldr	r2, [r3, #0]
 800efb2:	68fb      	ldr	r3, [r7, #12]
 800efb4:	60da      	str	r2, [r3, #12]
 800efb6:	4a0e      	ldr	r2, [pc, #56]	; (800eff0 <tcp_connect+0x228>)
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	6013      	str	r3, [r2, #0]
 800efbc:	f005 fad4 	bl	8014568 <tcp_timer_needed>
 800efc0:	4b0c      	ldr	r3, [pc, #48]	; (800eff4 <tcp_connect+0x22c>)
 800efc2:	2201      	movs	r2, #1
 800efc4:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 800efc6:	68f8      	ldr	r0, [r7, #12]
 800efc8:	f004 fb58 	bl	801367c <tcp_output>
  }
  return ret;
 800efcc:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800efd0:	4618      	mov	r0, r3
 800efd2:	3728      	adds	r7, #40	; 0x28
 800efd4:	46bd      	mov	sp, r7
 800efd6:	bd80      	pop	{r7, pc}
 800efd8:	0801c730 	.word	0x0801c730
 800efdc:	0801ca0c 	.word	0x0801ca0c
 800efe0:	0801c774 	.word	0x0801c774
 800efe4:	0801ca28 	.word	0x0801ca28
 800efe8:	0801ca44 	.word	0x0801ca44
 800efec:	2000bf24 	.word	0x2000bf24
 800eff0:	2000bf2c 	.word	0x2000bf2c
 800eff4:	2000bf34 	.word	0x2000bf34

0800eff8 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800eff8:	b5b0      	push	{r4, r5, r7, lr}
 800effa:	b090      	sub	sp, #64	; 0x40
 800effc:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800effe:	2300      	movs	r3, #0
 800f000:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800f004:	4b94      	ldr	r3, [pc, #592]	; (800f258 <tcp_slowtmr+0x260>)
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	3301      	adds	r3, #1
 800f00a:	4a93      	ldr	r2, [pc, #588]	; (800f258 <tcp_slowtmr+0x260>)
 800f00c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800f00e:	4b93      	ldr	r3, [pc, #588]	; (800f25c <tcp_slowtmr+0x264>)
 800f010:	781b      	ldrb	r3, [r3, #0]
 800f012:	3301      	adds	r3, #1
 800f014:	b2da      	uxtb	r2, r3
 800f016:	4b91      	ldr	r3, [pc, #580]	; (800f25c <tcp_slowtmr+0x264>)
 800f018:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800f01a:	2300      	movs	r3, #0
 800f01c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800f01e:	4b90      	ldr	r3, [pc, #576]	; (800f260 <tcp_slowtmr+0x268>)
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800f024:	e29f      	b.n	800f566 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800f026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f028:	7d1b      	ldrb	r3, [r3, #20]
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d106      	bne.n	800f03c <tcp_slowtmr+0x44>
 800f02e:	4b8d      	ldr	r3, [pc, #564]	; (800f264 <tcp_slowtmr+0x26c>)
 800f030:	f240 42be 	movw	r2, #1214	; 0x4be
 800f034:	498c      	ldr	r1, [pc, #560]	; (800f268 <tcp_slowtmr+0x270>)
 800f036:	488d      	ldr	r0, [pc, #564]	; (800f26c <tcp_slowtmr+0x274>)
 800f038:	f00b fbb4 	bl	801a7a4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800f03c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f03e:	7d1b      	ldrb	r3, [r3, #20]
 800f040:	2b01      	cmp	r3, #1
 800f042:	d106      	bne.n	800f052 <tcp_slowtmr+0x5a>
 800f044:	4b87      	ldr	r3, [pc, #540]	; (800f264 <tcp_slowtmr+0x26c>)
 800f046:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800f04a:	4989      	ldr	r1, [pc, #548]	; (800f270 <tcp_slowtmr+0x278>)
 800f04c:	4887      	ldr	r0, [pc, #540]	; (800f26c <tcp_slowtmr+0x274>)
 800f04e:	f00b fba9 	bl	801a7a4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800f052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f054:	7d1b      	ldrb	r3, [r3, #20]
 800f056:	2b0a      	cmp	r3, #10
 800f058:	d106      	bne.n	800f068 <tcp_slowtmr+0x70>
 800f05a:	4b82      	ldr	r3, [pc, #520]	; (800f264 <tcp_slowtmr+0x26c>)
 800f05c:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800f060:	4984      	ldr	r1, [pc, #528]	; (800f274 <tcp_slowtmr+0x27c>)
 800f062:	4882      	ldr	r0, [pc, #520]	; (800f26c <tcp_slowtmr+0x274>)
 800f064:	f00b fb9e 	bl	801a7a4 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800f068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f06a:	7f9a      	ldrb	r2, [r3, #30]
 800f06c:	4b7b      	ldr	r3, [pc, #492]	; (800f25c <tcp_slowtmr+0x264>)
 800f06e:	781b      	ldrb	r3, [r3, #0]
 800f070:	429a      	cmp	r2, r3
 800f072:	d105      	bne.n	800f080 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800f074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f076:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800f078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f07a:	68db      	ldr	r3, [r3, #12]
 800f07c:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800f07e:	e272      	b.n	800f566 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800f080:	4b76      	ldr	r3, [pc, #472]	; (800f25c <tcp_slowtmr+0x264>)
 800f082:	781a      	ldrb	r2, [r3, #0]
 800f084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f086:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800f088:	2300      	movs	r3, #0
 800f08a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800f08e:	2300      	movs	r3, #0
 800f090:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800f094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f096:	7d1b      	ldrb	r3, [r3, #20]
 800f098:	2b02      	cmp	r3, #2
 800f09a:	d10a      	bne.n	800f0b2 <tcp_slowtmr+0xba>
 800f09c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f09e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f0a2:	2b05      	cmp	r3, #5
 800f0a4:	d905      	bls.n	800f0b2 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800f0a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f0aa:	3301      	adds	r3, #1
 800f0ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f0b0:	e11e      	b.n	800f2f0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800f0b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0b4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f0b8:	2b0b      	cmp	r3, #11
 800f0ba:	d905      	bls.n	800f0c8 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800f0bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f0c0:	3301      	adds	r3, #1
 800f0c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f0c6:	e113      	b.n	800f2f0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800f0c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0ca:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d075      	beq.n	800f1be <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800f0d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d006      	beq.n	800f0e8 <tcp_slowtmr+0xf0>
 800f0da:	4b62      	ldr	r3, [pc, #392]	; (800f264 <tcp_slowtmr+0x26c>)
 800f0dc:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800f0e0:	4965      	ldr	r1, [pc, #404]	; (800f278 <tcp_slowtmr+0x280>)
 800f0e2:	4862      	ldr	r0, [pc, #392]	; (800f26c <tcp_slowtmr+0x274>)
 800f0e4:	f00b fb5e 	bl	801a7a4 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800f0e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d106      	bne.n	800f0fe <tcp_slowtmr+0x106>
 800f0f0:	4b5c      	ldr	r3, [pc, #368]	; (800f264 <tcp_slowtmr+0x26c>)
 800f0f2:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800f0f6:	4961      	ldr	r1, [pc, #388]	; (800f27c <tcp_slowtmr+0x284>)
 800f0f8:	485c      	ldr	r0, [pc, #368]	; (800f26c <tcp_slowtmr+0x274>)
 800f0fa:	f00b fb53 	bl	801a7a4 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800f0fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f100:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800f104:	2b0b      	cmp	r3, #11
 800f106:	d905      	bls.n	800f114 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800f108:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f10c:	3301      	adds	r3, #1
 800f10e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f112:	e0ed      	b.n	800f2f0 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800f114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f116:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f11a:	3b01      	subs	r3, #1
 800f11c:	4a58      	ldr	r2, [pc, #352]	; (800f280 <tcp_slowtmr+0x288>)
 800f11e:	5cd3      	ldrb	r3, [r2, r3]
 800f120:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800f122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f124:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800f128:	7c7a      	ldrb	r2, [r7, #17]
 800f12a:	429a      	cmp	r2, r3
 800f12c:	d907      	bls.n	800f13e <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800f12e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f130:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800f134:	3301      	adds	r3, #1
 800f136:	b2da      	uxtb	r2, r3
 800f138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f13a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800f13e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f140:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800f144:	7c7a      	ldrb	r2, [r7, #17]
 800f146:	429a      	cmp	r2, r3
 800f148:	f200 80d2 	bhi.w	800f2f0 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800f14c:	2301      	movs	r3, #1
 800f14e:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800f150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f152:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f156:	2b00      	cmp	r3, #0
 800f158:	d108      	bne.n	800f16c <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800f15a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f15c:	f005 f936 	bl	80143cc <tcp_zero_window_probe>
 800f160:	4603      	mov	r3, r0
 800f162:	2b00      	cmp	r3, #0
 800f164:	d014      	beq.n	800f190 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800f166:	2300      	movs	r3, #0
 800f168:	623b      	str	r3, [r7, #32]
 800f16a:	e011      	b.n	800f190 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800f16c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f16e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f172:	4619      	mov	r1, r3
 800f174:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f176:	f003 fffb 	bl	8013170 <tcp_split_unsent_seg>
 800f17a:	4603      	mov	r3, r0
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d107      	bne.n	800f190 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800f180:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f182:	f004 fa7b 	bl	801367c <tcp_output>
 800f186:	4603      	mov	r3, r0
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d101      	bne.n	800f190 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800f18c:	2300      	movs	r3, #0
 800f18e:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800f190:	6a3b      	ldr	r3, [r7, #32]
 800f192:	2b00      	cmp	r3, #0
 800f194:	f000 80ac 	beq.w	800f2f0 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800f198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f19a:	2200      	movs	r2, #0
 800f19c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800f1a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1a2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f1a6:	2b06      	cmp	r3, #6
 800f1a8:	f200 80a2 	bhi.w	800f2f0 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800f1ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1ae:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f1b2:	3301      	adds	r3, #1
 800f1b4:	b2da      	uxtb	r2, r3
 800f1b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1b8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800f1bc:	e098      	b.n	800f2f0 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800f1be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1c0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	db0f      	blt.n	800f1e8 <tcp_slowtmr+0x1f0>
 800f1c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1ca:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f1ce:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800f1d2:	4293      	cmp	r3, r2
 800f1d4:	d008      	beq.n	800f1e8 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800f1d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1d8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f1dc:	b29b      	uxth	r3, r3
 800f1de:	3301      	adds	r3, #1
 800f1e0:	b29b      	uxth	r3, r3
 800f1e2:	b21a      	sxth	r2, r3
 800f1e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1e6:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800f1e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1ea:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800f1ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1f0:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800f1f4:	429a      	cmp	r2, r3
 800f1f6:	db7b      	blt.n	800f2f0 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800f1f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f1fa:	f004 fd31 	bl	8013c60 <tcp_rexmit_rto_prepare>
 800f1fe:	4603      	mov	r3, r0
 800f200:	2b00      	cmp	r3, #0
 800f202:	d007      	beq.n	800f214 <tcp_slowtmr+0x21c>
 800f204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d171      	bne.n	800f2f0 <tcp_slowtmr+0x2f8>
 800f20c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f20e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f210:	2b00      	cmp	r3, #0
 800f212:	d06d      	beq.n	800f2f0 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800f214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f216:	7d1b      	ldrb	r3, [r3, #20]
 800f218:	2b02      	cmp	r3, #2
 800f21a:	d03a      	beq.n	800f292 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800f21c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f21e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f222:	2b0c      	cmp	r3, #12
 800f224:	bf28      	it	cs
 800f226:	230c      	movcs	r3, #12
 800f228:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800f22a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f22c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f230:	10db      	asrs	r3, r3, #3
 800f232:	b21b      	sxth	r3, r3
 800f234:	461a      	mov	r2, r3
 800f236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f238:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f23c:	4413      	add	r3, r2
 800f23e:	7efa      	ldrb	r2, [r7, #27]
 800f240:	4910      	ldr	r1, [pc, #64]	; (800f284 <tcp_slowtmr+0x28c>)
 800f242:	5c8a      	ldrb	r2, [r1, r2]
 800f244:	4093      	lsls	r3, r2
 800f246:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800f248:	697b      	ldr	r3, [r7, #20]
 800f24a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800f24e:	4293      	cmp	r3, r2
 800f250:	dc1a      	bgt.n	800f288 <tcp_slowtmr+0x290>
 800f252:	697b      	ldr	r3, [r7, #20]
 800f254:	b21a      	sxth	r2, r3
 800f256:	e019      	b.n	800f28c <tcp_slowtmr+0x294>
 800f258:	2000bf20 	.word	0x2000bf20
 800f25c:	2000bf36 	.word	0x2000bf36
 800f260:	2000bf2c 	.word	0x2000bf2c
 800f264:	0801c730 	.word	0x0801c730
 800f268:	0801ca74 	.word	0x0801ca74
 800f26c:	0801c774 	.word	0x0801c774
 800f270:	0801caa0 	.word	0x0801caa0
 800f274:	0801cacc 	.word	0x0801cacc
 800f278:	0801cafc 	.word	0x0801cafc
 800f27c:	0801cb30 	.word	0x0801cb30
 800f280:	0801eb3c 	.word	0x0801eb3c
 800f284:	0801eb2c 	.word	0x0801eb2c
 800f288:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800f28c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f28e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800f292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f294:	2200      	movs	r2, #0
 800f296:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800f298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f29a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f29e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2a0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f2a4:	4293      	cmp	r3, r2
 800f2a6:	bf28      	it	cs
 800f2a8:	4613      	movcs	r3, r2
 800f2aa:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800f2ac:	8a7b      	ldrh	r3, [r7, #18]
 800f2ae:	085b      	lsrs	r3, r3, #1
 800f2b0:	b29a      	uxth	r2, r3
 800f2b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2b4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800f2b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2ba:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800f2be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f2c2:	005b      	lsls	r3, r3, #1
 800f2c4:	b29b      	uxth	r3, r3
 800f2c6:	429a      	cmp	r2, r3
 800f2c8:	d206      	bcs.n	800f2d8 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800f2ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f2ce:	005b      	lsls	r3, r3, #1
 800f2d0:	b29a      	uxth	r2, r3
 800f2d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2d4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800f2d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2da:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800f2dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2de:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800f2e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2e4:	2200      	movs	r2, #0
 800f2e6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800f2ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f2ec:	f004 fd28 	bl	8013d40 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800f2f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2f2:	7d1b      	ldrb	r3, [r3, #20]
 800f2f4:	2b06      	cmp	r3, #6
 800f2f6:	d111      	bne.n	800f31c <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800f2f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2fa:	8b5b      	ldrh	r3, [r3, #26]
 800f2fc:	f003 0310 	and.w	r3, r3, #16
 800f300:	2b00      	cmp	r3, #0
 800f302:	d00b      	beq.n	800f31c <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f304:	4b9d      	ldr	r3, [pc, #628]	; (800f57c <tcp_slowtmr+0x584>)
 800f306:	681a      	ldr	r2, [r3, #0]
 800f308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f30a:	6a1b      	ldr	r3, [r3, #32]
 800f30c:	1ad3      	subs	r3, r2, r3
 800f30e:	2b28      	cmp	r3, #40	; 0x28
 800f310:	d904      	bls.n	800f31c <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800f312:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f316:	3301      	adds	r3, #1
 800f318:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800f31c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f31e:	7a5b      	ldrb	r3, [r3, #9]
 800f320:	f003 0308 	and.w	r3, r3, #8
 800f324:	2b00      	cmp	r3, #0
 800f326:	d04c      	beq.n	800f3c2 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800f328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f32a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800f32c:	2b04      	cmp	r3, #4
 800f32e:	d003      	beq.n	800f338 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800f330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f332:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800f334:	2b07      	cmp	r3, #7
 800f336:	d144      	bne.n	800f3c2 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f338:	4b90      	ldr	r3, [pc, #576]	; (800f57c <tcp_slowtmr+0x584>)
 800f33a:	681a      	ldr	r2, [r3, #0]
 800f33c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f33e:	6a1b      	ldr	r3, [r3, #32]
 800f340:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800f342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f344:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f348:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800f34c:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800f350:	498b      	ldr	r1, [pc, #556]	; (800f580 <tcp_slowtmr+0x588>)
 800f352:	fba1 1303 	umull	r1, r3, r1, r3
 800f356:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f358:	429a      	cmp	r2, r3
 800f35a:	d90a      	bls.n	800f372 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800f35c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f360:	3301      	adds	r3, #1
 800f362:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800f366:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f36a:	3301      	adds	r3, #1
 800f36c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f370:	e027      	b.n	800f3c2 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f372:	4b82      	ldr	r3, [pc, #520]	; (800f57c <tcp_slowtmr+0x584>)
 800f374:	681a      	ldr	r2, [r3, #0]
 800f376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f378:	6a1b      	ldr	r3, [r3, #32]
 800f37a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800f37c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f37e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800f382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f384:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800f388:	4618      	mov	r0, r3
 800f38a:	4b7e      	ldr	r3, [pc, #504]	; (800f584 <tcp_slowtmr+0x58c>)
 800f38c:	fb00 f303 	mul.w	r3, r0, r3
 800f390:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800f392:	497b      	ldr	r1, [pc, #492]	; (800f580 <tcp_slowtmr+0x588>)
 800f394:	fba1 1303 	umull	r1, r3, r1, r3
 800f398:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f39a:	429a      	cmp	r2, r3
 800f39c:	d911      	bls.n	800f3c2 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800f39e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f3a0:	f004 ffd4 	bl	801434c <tcp_keepalive>
 800f3a4:	4603      	mov	r3, r0
 800f3a6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800f3aa:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d107      	bne.n	800f3c2 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800f3b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3b4:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800f3b8:	3301      	adds	r3, #1
 800f3ba:	b2da      	uxtb	r2, r3
 800f3bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3be:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800f3c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d011      	beq.n	800f3ee <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800f3ca:	4b6c      	ldr	r3, [pc, #432]	; (800f57c <tcp_slowtmr+0x584>)
 800f3cc:	681a      	ldr	r2, [r3, #0]
 800f3ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3d0:	6a1b      	ldr	r3, [r3, #32]
 800f3d2:	1ad2      	subs	r2, r2, r3
 800f3d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3d6:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800f3da:	4619      	mov	r1, r3
 800f3dc:	460b      	mov	r3, r1
 800f3de:	005b      	lsls	r3, r3, #1
 800f3e0:	440b      	add	r3, r1
 800f3e2:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800f3e4:	429a      	cmp	r2, r3
 800f3e6:	d302      	bcc.n	800f3ee <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800f3e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f3ea:	f000 fe8f 	bl	801010c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800f3ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3f0:	7d1b      	ldrb	r3, [r3, #20]
 800f3f2:	2b03      	cmp	r3, #3
 800f3f4:	d10b      	bne.n	800f40e <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f3f6:	4b61      	ldr	r3, [pc, #388]	; (800f57c <tcp_slowtmr+0x584>)
 800f3f8:	681a      	ldr	r2, [r3, #0]
 800f3fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3fc:	6a1b      	ldr	r3, [r3, #32]
 800f3fe:	1ad3      	subs	r3, r2, r3
 800f400:	2b28      	cmp	r3, #40	; 0x28
 800f402:	d904      	bls.n	800f40e <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800f404:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f408:	3301      	adds	r3, #1
 800f40a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800f40e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f410:	7d1b      	ldrb	r3, [r3, #20]
 800f412:	2b09      	cmp	r3, #9
 800f414:	d10b      	bne.n	800f42e <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800f416:	4b59      	ldr	r3, [pc, #356]	; (800f57c <tcp_slowtmr+0x584>)
 800f418:	681a      	ldr	r2, [r3, #0]
 800f41a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f41c:	6a1b      	ldr	r3, [r3, #32]
 800f41e:	1ad3      	subs	r3, r2, r3
 800f420:	2bf0      	cmp	r3, #240	; 0xf0
 800f422:	d904      	bls.n	800f42e <tcp_slowtmr+0x436>
        ++pcb_remove;
 800f424:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f428:	3301      	adds	r3, #1
 800f42a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800f42e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f432:	2b00      	cmp	r3, #0
 800f434:	d060      	beq.n	800f4f8 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800f436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f438:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f43c:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800f43e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f440:	f000 fcb0 	bl	800fda4 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800f444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f446:	2b00      	cmp	r3, #0
 800f448:	d010      	beq.n	800f46c <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800f44a:	4b4f      	ldr	r3, [pc, #316]	; (800f588 <tcp_slowtmr+0x590>)
 800f44c:	681b      	ldr	r3, [r3, #0]
 800f44e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f450:	429a      	cmp	r2, r3
 800f452:	d106      	bne.n	800f462 <tcp_slowtmr+0x46a>
 800f454:	4b4d      	ldr	r3, [pc, #308]	; (800f58c <tcp_slowtmr+0x594>)
 800f456:	f240 526d 	movw	r2, #1389	; 0x56d
 800f45a:	494d      	ldr	r1, [pc, #308]	; (800f590 <tcp_slowtmr+0x598>)
 800f45c:	484d      	ldr	r0, [pc, #308]	; (800f594 <tcp_slowtmr+0x59c>)
 800f45e:	f00b f9a1 	bl	801a7a4 <iprintf>
        prev->next = pcb->next;
 800f462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f464:	68da      	ldr	r2, [r3, #12]
 800f466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f468:	60da      	str	r2, [r3, #12]
 800f46a:	e00f      	b.n	800f48c <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800f46c:	4b46      	ldr	r3, [pc, #280]	; (800f588 <tcp_slowtmr+0x590>)
 800f46e:	681b      	ldr	r3, [r3, #0]
 800f470:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f472:	429a      	cmp	r2, r3
 800f474:	d006      	beq.n	800f484 <tcp_slowtmr+0x48c>
 800f476:	4b45      	ldr	r3, [pc, #276]	; (800f58c <tcp_slowtmr+0x594>)
 800f478:	f240 5271 	movw	r2, #1393	; 0x571
 800f47c:	4946      	ldr	r1, [pc, #280]	; (800f598 <tcp_slowtmr+0x5a0>)
 800f47e:	4845      	ldr	r0, [pc, #276]	; (800f594 <tcp_slowtmr+0x59c>)
 800f480:	f00b f990 	bl	801a7a4 <iprintf>
        tcp_active_pcbs = pcb->next;
 800f484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f486:	68db      	ldr	r3, [r3, #12]
 800f488:	4a3f      	ldr	r2, [pc, #252]	; (800f588 <tcp_slowtmr+0x590>)
 800f48a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800f48c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f490:	2b00      	cmp	r3, #0
 800f492:	d013      	beq.n	800f4bc <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800f494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f496:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800f498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f49a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800f49c:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800f49e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4a0:	3304      	adds	r3, #4
 800f4a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f4a4:	8ad2      	ldrh	r2, [r2, #22]
 800f4a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f4a8:	8b09      	ldrh	r1, [r1, #24]
 800f4aa:	9102      	str	r1, [sp, #8]
 800f4ac:	9201      	str	r2, [sp, #4]
 800f4ae:	9300      	str	r3, [sp, #0]
 800f4b0:	462b      	mov	r3, r5
 800f4b2:	4622      	mov	r2, r4
 800f4b4:	4601      	mov	r1, r0
 800f4b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f4b8:	f004 fe94 	bl	80141e4 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800f4bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4be:	691b      	ldr	r3, [r3, #16]
 800f4c0:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800f4c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4c4:	7d1b      	ldrb	r3, [r3, #20]
 800f4c6:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800f4c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4ca:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800f4cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4ce:	68db      	ldr	r3, [r3, #12]
 800f4d0:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800f4d2:	6838      	ldr	r0, [r7, #0]
 800f4d4:	f7fe fffc 	bl	800e4d0 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800f4d8:	4b30      	ldr	r3, [pc, #192]	; (800f59c <tcp_slowtmr+0x5a4>)
 800f4da:	2200      	movs	r2, #0
 800f4dc:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800f4de:	68fb      	ldr	r3, [r7, #12]
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d004      	beq.n	800f4ee <tcp_slowtmr+0x4f6>
 800f4e4:	68fb      	ldr	r3, [r7, #12]
 800f4e6:	f06f 010c 	mvn.w	r1, #12
 800f4ea:	68b8      	ldr	r0, [r7, #8]
 800f4ec:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800f4ee:	4b2b      	ldr	r3, [pc, #172]	; (800f59c <tcp_slowtmr+0x5a4>)
 800f4f0:	781b      	ldrb	r3, [r3, #0]
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	d037      	beq.n	800f566 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800f4f6:	e590      	b.n	800f01a <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800f4f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4fa:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800f4fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4fe:	68db      	ldr	r3, [r3, #12]
 800f500:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800f502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f504:	7f1b      	ldrb	r3, [r3, #28]
 800f506:	3301      	adds	r3, #1
 800f508:	b2da      	uxtb	r2, r3
 800f50a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f50c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800f50e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f510:	7f1a      	ldrb	r2, [r3, #28]
 800f512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f514:	7f5b      	ldrb	r3, [r3, #29]
 800f516:	429a      	cmp	r2, r3
 800f518:	d325      	bcc.n	800f566 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800f51a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f51c:	2200      	movs	r2, #0
 800f51e:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800f520:	4b1e      	ldr	r3, [pc, #120]	; (800f59c <tcp_slowtmr+0x5a4>)
 800f522:	2200      	movs	r2, #0
 800f524:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800f526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f528:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d00b      	beq.n	800f548 <tcp_slowtmr+0x550>
 800f530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f532:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f536:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f538:	6912      	ldr	r2, [r2, #16]
 800f53a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f53c:	4610      	mov	r0, r2
 800f53e:	4798      	blx	r3
 800f540:	4603      	mov	r3, r0
 800f542:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800f546:	e002      	b.n	800f54e <tcp_slowtmr+0x556>
 800f548:	2300      	movs	r3, #0
 800f54a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800f54e:	4b13      	ldr	r3, [pc, #76]	; (800f59c <tcp_slowtmr+0x5a4>)
 800f550:	781b      	ldrb	r3, [r3, #0]
 800f552:	2b00      	cmp	r3, #0
 800f554:	d000      	beq.n	800f558 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800f556:	e560      	b.n	800f01a <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800f558:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d102      	bne.n	800f566 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800f560:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f562:	f004 f88b 	bl	801367c <tcp_output>
  while (pcb != NULL) {
 800f566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f568:	2b00      	cmp	r3, #0
 800f56a:	f47f ad5c 	bne.w	800f026 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800f56e:	2300      	movs	r3, #0
 800f570:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800f572:	4b0b      	ldr	r3, [pc, #44]	; (800f5a0 <tcp_slowtmr+0x5a8>)
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800f578:	e067      	b.n	800f64a <tcp_slowtmr+0x652>
 800f57a:	bf00      	nop
 800f57c:	2000bf20 	.word	0x2000bf20
 800f580:	10624dd3 	.word	0x10624dd3
 800f584:	000124f8 	.word	0x000124f8
 800f588:	2000bf2c 	.word	0x2000bf2c
 800f58c:	0801c730 	.word	0x0801c730
 800f590:	0801cb68 	.word	0x0801cb68
 800f594:	0801c774 	.word	0x0801c774
 800f598:	0801cb94 	.word	0x0801cb94
 800f59c:	2000bf34 	.word	0x2000bf34
 800f5a0:	2000bf30 	.word	0x2000bf30
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f5a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5a6:	7d1b      	ldrb	r3, [r3, #20]
 800f5a8:	2b0a      	cmp	r3, #10
 800f5aa:	d006      	beq.n	800f5ba <tcp_slowtmr+0x5c2>
 800f5ac:	4b2b      	ldr	r3, [pc, #172]	; (800f65c <tcp_slowtmr+0x664>)
 800f5ae:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800f5b2:	492b      	ldr	r1, [pc, #172]	; (800f660 <tcp_slowtmr+0x668>)
 800f5b4:	482b      	ldr	r0, [pc, #172]	; (800f664 <tcp_slowtmr+0x66c>)
 800f5b6:	f00b f8f5 	bl	801a7a4 <iprintf>
    pcb_remove = 0;
 800f5ba:	2300      	movs	r3, #0
 800f5bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800f5c0:	4b29      	ldr	r3, [pc, #164]	; (800f668 <tcp_slowtmr+0x670>)
 800f5c2:	681a      	ldr	r2, [r3, #0]
 800f5c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5c6:	6a1b      	ldr	r3, [r3, #32]
 800f5c8:	1ad3      	subs	r3, r2, r3
 800f5ca:	2bf0      	cmp	r3, #240	; 0xf0
 800f5cc:	d904      	bls.n	800f5d8 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800f5ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f5d2:	3301      	adds	r3, #1
 800f5d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800f5d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d02f      	beq.n	800f640 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800f5e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f5e2:	f000 fbdf 	bl	800fda4 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800f5e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	d010      	beq.n	800f60e <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800f5ec:	4b1f      	ldr	r3, [pc, #124]	; (800f66c <tcp_slowtmr+0x674>)
 800f5ee:	681b      	ldr	r3, [r3, #0]
 800f5f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f5f2:	429a      	cmp	r2, r3
 800f5f4:	d106      	bne.n	800f604 <tcp_slowtmr+0x60c>
 800f5f6:	4b19      	ldr	r3, [pc, #100]	; (800f65c <tcp_slowtmr+0x664>)
 800f5f8:	f240 52af 	movw	r2, #1455	; 0x5af
 800f5fc:	491c      	ldr	r1, [pc, #112]	; (800f670 <tcp_slowtmr+0x678>)
 800f5fe:	4819      	ldr	r0, [pc, #100]	; (800f664 <tcp_slowtmr+0x66c>)
 800f600:	f00b f8d0 	bl	801a7a4 <iprintf>
        prev->next = pcb->next;
 800f604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f606:	68da      	ldr	r2, [r3, #12]
 800f608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f60a:	60da      	str	r2, [r3, #12]
 800f60c:	e00f      	b.n	800f62e <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800f60e:	4b17      	ldr	r3, [pc, #92]	; (800f66c <tcp_slowtmr+0x674>)
 800f610:	681b      	ldr	r3, [r3, #0]
 800f612:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f614:	429a      	cmp	r2, r3
 800f616:	d006      	beq.n	800f626 <tcp_slowtmr+0x62e>
 800f618:	4b10      	ldr	r3, [pc, #64]	; (800f65c <tcp_slowtmr+0x664>)
 800f61a:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800f61e:	4915      	ldr	r1, [pc, #84]	; (800f674 <tcp_slowtmr+0x67c>)
 800f620:	4810      	ldr	r0, [pc, #64]	; (800f664 <tcp_slowtmr+0x66c>)
 800f622:	f00b f8bf 	bl	801a7a4 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800f626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f628:	68db      	ldr	r3, [r3, #12]
 800f62a:	4a10      	ldr	r2, [pc, #64]	; (800f66c <tcp_slowtmr+0x674>)
 800f62c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800f62e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f630:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800f632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f634:	68db      	ldr	r3, [r3, #12]
 800f636:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800f638:	69f8      	ldr	r0, [r7, #28]
 800f63a:	f7fe ff49 	bl	800e4d0 <tcp_free>
 800f63e:	e004      	b.n	800f64a <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800f640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f642:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800f644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f646:	68db      	ldr	r3, [r3, #12]
 800f648:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800f64a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d1a9      	bne.n	800f5a4 <tcp_slowtmr+0x5ac>
    }
  }
}
 800f650:	bf00      	nop
 800f652:	bf00      	nop
 800f654:	3730      	adds	r7, #48	; 0x30
 800f656:	46bd      	mov	sp, r7
 800f658:	bdb0      	pop	{r4, r5, r7, pc}
 800f65a:	bf00      	nop
 800f65c:	0801c730 	.word	0x0801c730
 800f660:	0801cbc0 	.word	0x0801cbc0
 800f664:	0801c774 	.word	0x0801c774
 800f668:	2000bf20 	.word	0x2000bf20
 800f66c:	2000bf30 	.word	0x2000bf30
 800f670:	0801cbf0 	.word	0x0801cbf0
 800f674:	0801cc18 	.word	0x0801cc18

0800f678 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800f678:	b580      	push	{r7, lr}
 800f67a:	b082      	sub	sp, #8
 800f67c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800f67e:	4b2d      	ldr	r3, [pc, #180]	; (800f734 <tcp_fasttmr+0xbc>)
 800f680:	781b      	ldrb	r3, [r3, #0]
 800f682:	3301      	adds	r3, #1
 800f684:	b2da      	uxtb	r2, r3
 800f686:	4b2b      	ldr	r3, [pc, #172]	; (800f734 <tcp_fasttmr+0xbc>)
 800f688:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800f68a:	4b2b      	ldr	r3, [pc, #172]	; (800f738 <tcp_fasttmr+0xc0>)
 800f68c:	681b      	ldr	r3, [r3, #0]
 800f68e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800f690:	e048      	b.n	800f724 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	7f9a      	ldrb	r2, [r3, #30]
 800f696:	4b27      	ldr	r3, [pc, #156]	; (800f734 <tcp_fasttmr+0xbc>)
 800f698:	781b      	ldrb	r3, [r3, #0]
 800f69a:	429a      	cmp	r2, r3
 800f69c:	d03f      	beq.n	800f71e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800f69e:	4b25      	ldr	r3, [pc, #148]	; (800f734 <tcp_fasttmr+0xbc>)
 800f6a0:	781a      	ldrb	r2, [r3, #0]
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	8b5b      	ldrh	r3, [r3, #26]
 800f6aa:	f003 0301 	and.w	r3, r3, #1
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	d010      	beq.n	800f6d4 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	8b5b      	ldrh	r3, [r3, #26]
 800f6b6:	f043 0302 	orr.w	r3, r3, #2
 800f6ba:	b29a      	uxth	r2, r3
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800f6c0:	6878      	ldr	r0, [r7, #4]
 800f6c2:	f003 ffdb 	bl	801367c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	8b5b      	ldrh	r3, [r3, #26]
 800f6ca:	f023 0303 	bic.w	r3, r3, #3
 800f6ce:	b29a      	uxth	r2, r3
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	8b5b      	ldrh	r3, [r3, #26]
 800f6d8:	f003 0308 	and.w	r3, r3, #8
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d009      	beq.n	800f6f4 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	8b5b      	ldrh	r3, [r3, #26]
 800f6e4:	f023 0308 	bic.w	r3, r3, #8
 800f6e8:	b29a      	uxth	r2, r3
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800f6ee:	6878      	ldr	r0, [r7, #4]
 800f6f0:	f7ff f882 	bl	800e7f8 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	68db      	ldr	r3, [r3, #12]
 800f6f8:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	d00a      	beq.n	800f718 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800f702:	4b0e      	ldr	r3, [pc, #56]	; (800f73c <tcp_fasttmr+0xc4>)
 800f704:	2200      	movs	r2, #0
 800f706:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800f708:	6878      	ldr	r0, [r7, #4]
 800f70a:	f000 f819 	bl	800f740 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800f70e:	4b0b      	ldr	r3, [pc, #44]	; (800f73c <tcp_fasttmr+0xc4>)
 800f710:	781b      	ldrb	r3, [r3, #0]
 800f712:	2b00      	cmp	r3, #0
 800f714:	d000      	beq.n	800f718 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800f716:	e7b8      	b.n	800f68a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800f718:	683b      	ldr	r3, [r7, #0]
 800f71a:	607b      	str	r3, [r7, #4]
 800f71c:	e002      	b.n	800f724 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	68db      	ldr	r3, [r3, #12]
 800f722:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	2b00      	cmp	r3, #0
 800f728:	d1b3      	bne.n	800f692 <tcp_fasttmr+0x1a>
    }
  }
}
 800f72a:	bf00      	nop
 800f72c:	bf00      	nop
 800f72e:	3708      	adds	r7, #8
 800f730:	46bd      	mov	sp, r7
 800f732:	bd80      	pop	{r7, pc}
 800f734:	2000bf36 	.word	0x2000bf36
 800f738:	2000bf2c 	.word	0x2000bf2c
 800f73c:	2000bf34 	.word	0x2000bf34

0800f740 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800f740:	b590      	push	{r4, r7, lr}
 800f742:	b085      	sub	sp, #20
 800f744:	af00      	add	r7, sp, #0
 800f746:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d109      	bne.n	800f762 <tcp_process_refused_data+0x22>
 800f74e:	4b37      	ldr	r3, [pc, #220]	; (800f82c <tcp_process_refused_data+0xec>)
 800f750:	f240 6209 	movw	r2, #1545	; 0x609
 800f754:	4936      	ldr	r1, [pc, #216]	; (800f830 <tcp_process_refused_data+0xf0>)
 800f756:	4837      	ldr	r0, [pc, #220]	; (800f834 <tcp_process_refused_data+0xf4>)
 800f758:	f00b f824 	bl	801a7a4 <iprintf>
 800f75c:	f06f 030f 	mvn.w	r3, #15
 800f760:	e060      	b.n	800f824 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f766:	7b5b      	ldrb	r3, [r3, #13]
 800f768:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f76e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	2200      	movs	r2, #0
 800f774:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d00b      	beq.n	800f798 <tcp_process_refused_data+0x58>
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	6918      	ldr	r0, [r3, #16]
 800f78a:	2300      	movs	r3, #0
 800f78c:	68ba      	ldr	r2, [r7, #8]
 800f78e:	6879      	ldr	r1, [r7, #4]
 800f790:	47a0      	blx	r4
 800f792:	4603      	mov	r3, r0
 800f794:	73fb      	strb	r3, [r7, #15]
 800f796:	e007      	b.n	800f7a8 <tcp_process_refused_data+0x68>
 800f798:	2300      	movs	r3, #0
 800f79a:	68ba      	ldr	r2, [r7, #8]
 800f79c:	6879      	ldr	r1, [r7, #4]
 800f79e:	2000      	movs	r0, #0
 800f7a0:	f000 f8a4 	bl	800f8ec <tcp_recv_null>
 800f7a4:	4603      	mov	r3, r0
 800f7a6:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800f7a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	d12a      	bne.n	800f806 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800f7b0:	7bbb      	ldrb	r3, [r7, #14]
 800f7b2:	f003 0320 	and.w	r3, r3, #32
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d033      	beq.n	800f822 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f7be:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f7c2:	d005      	beq.n	800f7d0 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f7c8:	3301      	adds	r3, #1
 800f7ca:	b29a      	uxth	r2, r3
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d00b      	beq.n	800f7f2 <tcp_process_refused_data+0xb2>
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	6918      	ldr	r0, [r3, #16]
 800f7e4:	2300      	movs	r3, #0
 800f7e6:	2200      	movs	r2, #0
 800f7e8:	6879      	ldr	r1, [r7, #4]
 800f7ea:	47a0      	blx	r4
 800f7ec:	4603      	mov	r3, r0
 800f7ee:	73fb      	strb	r3, [r7, #15]
 800f7f0:	e001      	b.n	800f7f6 <tcp_process_refused_data+0xb6>
 800f7f2:	2300      	movs	r3, #0
 800f7f4:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800f7f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f7fa:	f113 0f0d 	cmn.w	r3, #13
 800f7fe:	d110      	bne.n	800f822 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800f800:	f06f 030c 	mvn.w	r3, #12
 800f804:	e00e      	b.n	800f824 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800f806:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f80a:	f113 0f0d 	cmn.w	r3, #13
 800f80e:	d102      	bne.n	800f816 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800f810:	f06f 030c 	mvn.w	r3, #12
 800f814:	e006      	b.n	800f824 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	68ba      	ldr	r2, [r7, #8]
 800f81a:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800f81c:	f06f 0304 	mvn.w	r3, #4
 800f820:	e000      	b.n	800f824 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800f822:	2300      	movs	r3, #0
}
 800f824:	4618      	mov	r0, r3
 800f826:	3714      	adds	r7, #20
 800f828:	46bd      	mov	sp, r7
 800f82a:	bd90      	pop	{r4, r7, pc}
 800f82c:	0801c730 	.word	0x0801c730
 800f830:	0801cc40 	.word	0x0801cc40
 800f834:	0801c774 	.word	0x0801c774

0800f838 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800f838:	b580      	push	{r7, lr}
 800f83a:	b084      	sub	sp, #16
 800f83c:	af00      	add	r7, sp, #0
 800f83e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800f840:	e007      	b.n	800f852 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	681b      	ldr	r3, [r3, #0]
 800f846:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800f848:	6878      	ldr	r0, [r7, #4]
 800f84a:	f000 f80a 	bl	800f862 <tcp_seg_free>
    seg = next;
 800f84e:	68fb      	ldr	r3, [r7, #12]
 800f850:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	2b00      	cmp	r3, #0
 800f856:	d1f4      	bne.n	800f842 <tcp_segs_free+0xa>
  }
}
 800f858:	bf00      	nop
 800f85a:	bf00      	nop
 800f85c:	3710      	adds	r7, #16
 800f85e:	46bd      	mov	sp, r7
 800f860:	bd80      	pop	{r7, pc}

0800f862 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800f862:	b580      	push	{r7, lr}
 800f864:	b082      	sub	sp, #8
 800f866:	af00      	add	r7, sp, #0
 800f868:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	d00c      	beq.n	800f88a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	685b      	ldr	r3, [r3, #4]
 800f874:	2b00      	cmp	r3, #0
 800f876:	d004      	beq.n	800f882 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	685b      	ldr	r3, [r3, #4]
 800f87c:	4618      	mov	r0, r3
 800f87e:	f7fe fb0b 	bl	800de98 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800f882:	6879      	ldr	r1, [r7, #4]
 800f884:	2003      	movs	r0, #3
 800f886:	f7fd fcc9 	bl	800d21c <memp_free>
  }
}
 800f88a:	bf00      	nop
 800f88c:	3708      	adds	r7, #8
 800f88e:	46bd      	mov	sp, r7
 800f890:	bd80      	pop	{r7, pc}
	...

0800f894 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800f894:	b580      	push	{r7, lr}
 800f896:	b084      	sub	sp, #16
 800f898:	af00      	add	r7, sp, #0
 800f89a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	d106      	bne.n	800f8b0 <tcp_seg_copy+0x1c>
 800f8a2:	4b0f      	ldr	r3, [pc, #60]	; (800f8e0 <tcp_seg_copy+0x4c>)
 800f8a4:	f240 6282 	movw	r2, #1666	; 0x682
 800f8a8:	490e      	ldr	r1, [pc, #56]	; (800f8e4 <tcp_seg_copy+0x50>)
 800f8aa:	480f      	ldr	r0, [pc, #60]	; (800f8e8 <tcp_seg_copy+0x54>)
 800f8ac:	f00a ff7a 	bl	801a7a4 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800f8b0:	2003      	movs	r0, #3
 800f8b2:	f7fd fc3d 	bl	800d130 <memp_malloc>
 800f8b6:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800f8b8:	68fb      	ldr	r3, [r7, #12]
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d101      	bne.n	800f8c2 <tcp_seg_copy+0x2e>
    return NULL;
 800f8be:	2300      	movs	r3, #0
 800f8c0:	e00a      	b.n	800f8d8 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800f8c2:	2210      	movs	r2, #16
 800f8c4:	6879      	ldr	r1, [r7, #4]
 800f8c6:	68f8      	ldr	r0, [r7, #12]
 800f8c8:	f00a fe78 	bl	801a5bc <memcpy>
  pbuf_ref(cseg->p);
 800f8cc:	68fb      	ldr	r3, [r7, #12]
 800f8ce:	685b      	ldr	r3, [r3, #4]
 800f8d0:	4618      	mov	r0, r3
 800f8d2:	f7fe fb85 	bl	800dfe0 <pbuf_ref>
  return cseg;
 800f8d6:	68fb      	ldr	r3, [r7, #12]
}
 800f8d8:	4618      	mov	r0, r3
 800f8da:	3710      	adds	r7, #16
 800f8dc:	46bd      	mov	sp, r7
 800f8de:	bd80      	pop	{r7, pc}
 800f8e0:	0801c730 	.word	0x0801c730
 800f8e4:	0801cc84 	.word	0x0801cc84
 800f8e8:	0801c774 	.word	0x0801c774

0800f8ec <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800f8ec:	b580      	push	{r7, lr}
 800f8ee:	b084      	sub	sp, #16
 800f8f0:	af00      	add	r7, sp, #0
 800f8f2:	60f8      	str	r0, [r7, #12]
 800f8f4:	60b9      	str	r1, [r7, #8]
 800f8f6:	607a      	str	r2, [r7, #4]
 800f8f8:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800f8fa:	68bb      	ldr	r3, [r7, #8]
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	d109      	bne.n	800f914 <tcp_recv_null+0x28>
 800f900:	4b12      	ldr	r3, [pc, #72]	; (800f94c <tcp_recv_null+0x60>)
 800f902:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800f906:	4912      	ldr	r1, [pc, #72]	; (800f950 <tcp_recv_null+0x64>)
 800f908:	4812      	ldr	r0, [pc, #72]	; (800f954 <tcp_recv_null+0x68>)
 800f90a:	f00a ff4b 	bl	801a7a4 <iprintf>
 800f90e:	f06f 030f 	mvn.w	r3, #15
 800f912:	e016      	b.n	800f942 <tcp_recv_null+0x56>

  if (p != NULL) {
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	2b00      	cmp	r3, #0
 800f918:	d009      	beq.n	800f92e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	891b      	ldrh	r3, [r3, #8]
 800f91e:	4619      	mov	r1, r3
 800f920:	68b8      	ldr	r0, [r7, #8]
 800f922:	f7ff f9bb 	bl	800ec9c <tcp_recved>
    pbuf_free(p);
 800f926:	6878      	ldr	r0, [r7, #4]
 800f928:	f7fe fab6 	bl	800de98 <pbuf_free>
 800f92c:	e008      	b.n	800f940 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800f92e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f932:	2b00      	cmp	r3, #0
 800f934:	d104      	bne.n	800f940 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800f936:	68b8      	ldr	r0, [r7, #8]
 800f938:	f7fe ffc8 	bl	800e8cc <tcp_close>
 800f93c:	4603      	mov	r3, r0
 800f93e:	e000      	b.n	800f942 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800f940:	2300      	movs	r3, #0
}
 800f942:	4618      	mov	r0, r3
 800f944:	3710      	adds	r7, #16
 800f946:	46bd      	mov	sp, r7
 800f948:	bd80      	pop	{r7, pc}
 800f94a:	bf00      	nop
 800f94c:	0801c730 	.word	0x0801c730
 800f950:	0801cca0 	.word	0x0801cca0
 800f954:	0801c774 	.word	0x0801c774

0800f958 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800f958:	b580      	push	{r7, lr}
 800f95a:	b086      	sub	sp, #24
 800f95c:	af00      	add	r7, sp, #0
 800f95e:	4603      	mov	r3, r0
 800f960:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800f962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f966:	2b00      	cmp	r3, #0
 800f968:	db01      	blt.n	800f96e <tcp_kill_prio+0x16>
 800f96a:	79fb      	ldrb	r3, [r7, #7]
 800f96c:	e000      	b.n	800f970 <tcp_kill_prio+0x18>
 800f96e:	237f      	movs	r3, #127	; 0x7f
 800f970:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800f972:	7afb      	ldrb	r3, [r7, #11]
 800f974:	2b00      	cmp	r3, #0
 800f976:	d034      	beq.n	800f9e2 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800f978:	7afb      	ldrb	r3, [r7, #11]
 800f97a:	3b01      	subs	r3, #1
 800f97c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800f97e:	2300      	movs	r3, #0
 800f980:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800f982:	2300      	movs	r3, #0
 800f984:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f986:	4b19      	ldr	r3, [pc, #100]	; (800f9ec <tcp_kill_prio+0x94>)
 800f988:	681b      	ldr	r3, [r3, #0]
 800f98a:	617b      	str	r3, [r7, #20]
 800f98c:	e01f      	b.n	800f9ce <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800f98e:	697b      	ldr	r3, [r7, #20]
 800f990:	7d5b      	ldrb	r3, [r3, #21]
 800f992:	7afa      	ldrb	r2, [r7, #11]
 800f994:	429a      	cmp	r2, r3
 800f996:	d80c      	bhi.n	800f9b2 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800f998:	697b      	ldr	r3, [r7, #20]
 800f99a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800f99c:	7afa      	ldrb	r2, [r7, #11]
 800f99e:	429a      	cmp	r2, r3
 800f9a0:	d112      	bne.n	800f9c8 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800f9a2:	4b13      	ldr	r3, [pc, #76]	; (800f9f0 <tcp_kill_prio+0x98>)
 800f9a4:	681a      	ldr	r2, [r3, #0]
 800f9a6:	697b      	ldr	r3, [r7, #20]
 800f9a8:	6a1b      	ldr	r3, [r3, #32]
 800f9aa:	1ad3      	subs	r3, r2, r3
 800f9ac:	68fa      	ldr	r2, [r7, #12]
 800f9ae:	429a      	cmp	r2, r3
 800f9b0:	d80a      	bhi.n	800f9c8 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800f9b2:	4b0f      	ldr	r3, [pc, #60]	; (800f9f0 <tcp_kill_prio+0x98>)
 800f9b4:	681a      	ldr	r2, [r3, #0]
 800f9b6:	697b      	ldr	r3, [r7, #20]
 800f9b8:	6a1b      	ldr	r3, [r3, #32]
 800f9ba:	1ad3      	subs	r3, r2, r3
 800f9bc:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800f9be:	697b      	ldr	r3, [r7, #20]
 800f9c0:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800f9c2:	697b      	ldr	r3, [r7, #20]
 800f9c4:	7d5b      	ldrb	r3, [r3, #21]
 800f9c6:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f9c8:	697b      	ldr	r3, [r7, #20]
 800f9ca:	68db      	ldr	r3, [r3, #12]
 800f9cc:	617b      	str	r3, [r7, #20]
 800f9ce:	697b      	ldr	r3, [r7, #20]
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	d1dc      	bne.n	800f98e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800f9d4:	693b      	ldr	r3, [r7, #16]
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d004      	beq.n	800f9e4 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800f9da:	6938      	ldr	r0, [r7, #16]
 800f9dc:	f7ff f860 	bl	800eaa0 <tcp_abort>
 800f9e0:	e000      	b.n	800f9e4 <tcp_kill_prio+0x8c>
    return;
 800f9e2:	bf00      	nop
  }
}
 800f9e4:	3718      	adds	r7, #24
 800f9e6:	46bd      	mov	sp, r7
 800f9e8:	bd80      	pop	{r7, pc}
 800f9ea:	bf00      	nop
 800f9ec:	2000bf2c 	.word	0x2000bf2c
 800f9f0:	2000bf20 	.word	0x2000bf20

0800f9f4 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800f9f4:	b580      	push	{r7, lr}
 800f9f6:	b086      	sub	sp, #24
 800f9f8:	af00      	add	r7, sp, #0
 800f9fa:	4603      	mov	r3, r0
 800f9fc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800f9fe:	79fb      	ldrb	r3, [r7, #7]
 800fa00:	2b08      	cmp	r3, #8
 800fa02:	d009      	beq.n	800fa18 <tcp_kill_state+0x24>
 800fa04:	79fb      	ldrb	r3, [r7, #7]
 800fa06:	2b09      	cmp	r3, #9
 800fa08:	d006      	beq.n	800fa18 <tcp_kill_state+0x24>
 800fa0a:	4b1a      	ldr	r3, [pc, #104]	; (800fa74 <tcp_kill_state+0x80>)
 800fa0c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800fa10:	4919      	ldr	r1, [pc, #100]	; (800fa78 <tcp_kill_state+0x84>)
 800fa12:	481a      	ldr	r0, [pc, #104]	; (800fa7c <tcp_kill_state+0x88>)
 800fa14:	f00a fec6 	bl	801a7a4 <iprintf>

  inactivity = 0;
 800fa18:	2300      	movs	r3, #0
 800fa1a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800fa1c:	2300      	movs	r3, #0
 800fa1e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800fa20:	4b17      	ldr	r3, [pc, #92]	; (800fa80 <tcp_kill_state+0x8c>)
 800fa22:	681b      	ldr	r3, [r3, #0]
 800fa24:	617b      	str	r3, [r7, #20]
 800fa26:	e017      	b.n	800fa58 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800fa28:	697b      	ldr	r3, [r7, #20]
 800fa2a:	7d1b      	ldrb	r3, [r3, #20]
 800fa2c:	79fa      	ldrb	r2, [r7, #7]
 800fa2e:	429a      	cmp	r2, r3
 800fa30:	d10f      	bne.n	800fa52 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800fa32:	4b14      	ldr	r3, [pc, #80]	; (800fa84 <tcp_kill_state+0x90>)
 800fa34:	681a      	ldr	r2, [r3, #0]
 800fa36:	697b      	ldr	r3, [r7, #20]
 800fa38:	6a1b      	ldr	r3, [r3, #32]
 800fa3a:	1ad3      	subs	r3, r2, r3
 800fa3c:	68fa      	ldr	r2, [r7, #12]
 800fa3e:	429a      	cmp	r2, r3
 800fa40:	d807      	bhi.n	800fa52 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800fa42:	4b10      	ldr	r3, [pc, #64]	; (800fa84 <tcp_kill_state+0x90>)
 800fa44:	681a      	ldr	r2, [r3, #0]
 800fa46:	697b      	ldr	r3, [r7, #20]
 800fa48:	6a1b      	ldr	r3, [r3, #32]
 800fa4a:	1ad3      	subs	r3, r2, r3
 800fa4c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800fa4e:	697b      	ldr	r3, [r7, #20]
 800fa50:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800fa52:	697b      	ldr	r3, [r7, #20]
 800fa54:	68db      	ldr	r3, [r3, #12]
 800fa56:	617b      	str	r3, [r7, #20]
 800fa58:	697b      	ldr	r3, [r7, #20]
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d1e4      	bne.n	800fa28 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800fa5e:	693b      	ldr	r3, [r7, #16]
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	d003      	beq.n	800fa6c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800fa64:	2100      	movs	r1, #0
 800fa66:	6938      	ldr	r0, [r7, #16]
 800fa68:	f7fe ff5c 	bl	800e924 <tcp_abandon>
  }
}
 800fa6c:	bf00      	nop
 800fa6e:	3718      	adds	r7, #24
 800fa70:	46bd      	mov	sp, r7
 800fa72:	bd80      	pop	{r7, pc}
 800fa74:	0801c730 	.word	0x0801c730
 800fa78:	0801ccbc 	.word	0x0801ccbc
 800fa7c:	0801c774 	.word	0x0801c774
 800fa80:	2000bf2c 	.word	0x2000bf2c
 800fa84:	2000bf20 	.word	0x2000bf20

0800fa88 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800fa88:	b580      	push	{r7, lr}
 800fa8a:	b084      	sub	sp, #16
 800fa8c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800fa8e:	2300      	movs	r3, #0
 800fa90:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800fa92:	2300      	movs	r3, #0
 800fa94:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800fa96:	4b12      	ldr	r3, [pc, #72]	; (800fae0 <tcp_kill_timewait+0x58>)
 800fa98:	681b      	ldr	r3, [r3, #0]
 800fa9a:	60fb      	str	r3, [r7, #12]
 800fa9c:	e012      	b.n	800fac4 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800fa9e:	4b11      	ldr	r3, [pc, #68]	; (800fae4 <tcp_kill_timewait+0x5c>)
 800faa0:	681a      	ldr	r2, [r3, #0]
 800faa2:	68fb      	ldr	r3, [r7, #12]
 800faa4:	6a1b      	ldr	r3, [r3, #32]
 800faa6:	1ad3      	subs	r3, r2, r3
 800faa8:	687a      	ldr	r2, [r7, #4]
 800faaa:	429a      	cmp	r2, r3
 800faac:	d807      	bhi.n	800fabe <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800faae:	4b0d      	ldr	r3, [pc, #52]	; (800fae4 <tcp_kill_timewait+0x5c>)
 800fab0:	681a      	ldr	r2, [r3, #0]
 800fab2:	68fb      	ldr	r3, [r7, #12]
 800fab4:	6a1b      	ldr	r3, [r3, #32]
 800fab6:	1ad3      	subs	r3, r2, r3
 800fab8:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800faba:	68fb      	ldr	r3, [r7, #12]
 800fabc:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800fabe:	68fb      	ldr	r3, [r7, #12]
 800fac0:	68db      	ldr	r3, [r3, #12]
 800fac2:	60fb      	str	r3, [r7, #12]
 800fac4:	68fb      	ldr	r3, [r7, #12]
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	d1e9      	bne.n	800fa9e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800faca:	68bb      	ldr	r3, [r7, #8]
 800facc:	2b00      	cmp	r3, #0
 800face:	d002      	beq.n	800fad6 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800fad0:	68b8      	ldr	r0, [r7, #8]
 800fad2:	f7fe ffe5 	bl	800eaa0 <tcp_abort>
  }
}
 800fad6:	bf00      	nop
 800fad8:	3710      	adds	r7, #16
 800fada:	46bd      	mov	sp, r7
 800fadc:	bd80      	pop	{r7, pc}
 800fade:	bf00      	nop
 800fae0:	2000bf30 	.word	0x2000bf30
 800fae4:	2000bf20 	.word	0x2000bf20

0800fae8 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800fae8:	b580      	push	{r7, lr}
 800faea:	b082      	sub	sp, #8
 800faec:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800faee:	4b10      	ldr	r3, [pc, #64]	; (800fb30 <tcp_handle_closepend+0x48>)
 800faf0:	681b      	ldr	r3, [r3, #0]
 800faf2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800faf4:	e014      	b.n	800fb20 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	68db      	ldr	r3, [r3, #12]
 800fafa:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	8b5b      	ldrh	r3, [r3, #26]
 800fb00:	f003 0308 	and.w	r3, r3, #8
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	d009      	beq.n	800fb1c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	8b5b      	ldrh	r3, [r3, #26]
 800fb0c:	f023 0308 	bic.w	r3, r3, #8
 800fb10:	b29a      	uxth	r2, r3
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800fb16:	6878      	ldr	r0, [r7, #4]
 800fb18:	f7fe fe6e 	bl	800e7f8 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800fb1c:	683b      	ldr	r3, [r7, #0]
 800fb1e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	d1e7      	bne.n	800faf6 <tcp_handle_closepend+0xe>
  }
}
 800fb26:	bf00      	nop
 800fb28:	bf00      	nop
 800fb2a:	3708      	adds	r7, #8
 800fb2c:	46bd      	mov	sp, r7
 800fb2e:	bd80      	pop	{r7, pc}
 800fb30:	2000bf2c 	.word	0x2000bf2c

0800fb34 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800fb34:	b580      	push	{r7, lr}
 800fb36:	b084      	sub	sp, #16
 800fb38:	af00      	add	r7, sp, #0
 800fb3a:	4603      	mov	r3, r0
 800fb3c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800fb3e:	2001      	movs	r0, #1
 800fb40:	f7fd faf6 	bl	800d130 <memp_malloc>
 800fb44:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800fb46:	68fb      	ldr	r3, [r7, #12]
 800fb48:	2b00      	cmp	r3, #0
 800fb4a:	d126      	bne.n	800fb9a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800fb4c:	f7ff ffcc 	bl	800fae8 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800fb50:	f7ff ff9a 	bl	800fa88 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800fb54:	2001      	movs	r0, #1
 800fb56:	f7fd faeb 	bl	800d130 <memp_malloc>
 800fb5a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800fb5c:	68fb      	ldr	r3, [r7, #12]
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d11b      	bne.n	800fb9a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800fb62:	2009      	movs	r0, #9
 800fb64:	f7ff ff46 	bl	800f9f4 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800fb68:	2001      	movs	r0, #1
 800fb6a:	f7fd fae1 	bl	800d130 <memp_malloc>
 800fb6e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800fb70:	68fb      	ldr	r3, [r7, #12]
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d111      	bne.n	800fb9a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800fb76:	2008      	movs	r0, #8
 800fb78:	f7ff ff3c 	bl	800f9f4 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800fb7c:	2001      	movs	r0, #1
 800fb7e:	f7fd fad7 	bl	800d130 <memp_malloc>
 800fb82:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800fb84:	68fb      	ldr	r3, [r7, #12]
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d107      	bne.n	800fb9a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800fb8a:	79fb      	ldrb	r3, [r7, #7]
 800fb8c:	4618      	mov	r0, r3
 800fb8e:	f7ff fee3 	bl	800f958 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800fb92:	2001      	movs	r0, #1
 800fb94:	f7fd facc 	bl	800d130 <memp_malloc>
 800fb98:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800fb9a:	68fb      	ldr	r3, [r7, #12]
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	d03f      	beq.n	800fc20 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800fba0:	229c      	movs	r2, #156	; 0x9c
 800fba2:	2100      	movs	r1, #0
 800fba4:	68f8      	ldr	r0, [r7, #12]
 800fba6:	f00a fd17 	bl	801a5d8 <memset>
    pcb->prio = prio;
 800fbaa:	68fb      	ldr	r3, [r7, #12]
 800fbac:	79fa      	ldrb	r2, [r7, #7]
 800fbae:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800fbb0:	68fb      	ldr	r3, [r7, #12]
 800fbb2:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800fbb6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800fbba:	68fb      	ldr	r3, [r7, #12]
 800fbbc:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800fbc0:	855a      	strh	r2, [r3, #42]	; 0x2a
 800fbc2:	68fb      	ldr	r3, [r7, #12]
 800fbc4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800fbc6:	68fb      	ldr	r3, [r7, #12]
 800fbc8:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800fbca:	68fb      	ldr	r3, [r7, #12]
 800fbcc:	22ff      	movs	r2, #255	; 0xff
 800fbce:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800fbd0:	68fb      	ldr	r3, [r7, #12]
 800fbd2:	f44f 7206 	mov.w	r2, #536	; 0x218
 800fbd6:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800fbd8:	68fb      	ldr	r3, [r7, #12]
 800fbda:	2206      	movs	r2, #6
 800fbdc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800fbe0:	68fb      	ldr	r3, [r7, #12]
 800fbe2:	2206      	movs	r2, #6
 800fbe4:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800fbe6:	68fb      	ldr	r3, [r7, #12]
 800fbe8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fbec:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800fbee:	68fb      	ldr	r3, [r7, #12]
 800fbf0:	2201      	movs	r2, #1
 800fbf2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800fbf6:	4b0d      	ldr	r3, [pc, #52]	; (800fc2c <tcp_alloc+0xf8>)
 800fbf8:	681a      	ldr	r2, [r3, #0]
 800fbfa:	68fb      	ldr	r3, [r7, #12]
 800fbfc:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800fbfe:	4b0c      	ldr	r3, [pc, #48]	; (800fc30 <tcp_alloc+0xfc>)
 800fc00:	781a      	ldrb	r2, [r3, #0]
 800fc02:	68fb      	ldr	r3, [r7, #12]
 800fc04:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800fc06:	68fb      	ldr	r3, [r7, #12]
 800fc08:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800fc0c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800fc10:	68fb      	ldr	r3, [r7, #12]
 800fc12:	4a08      	ldr	r2, [pc, #32]	; (800fc34 <tcp_alloc+0x100>)
 800fc14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800fc18:	68fb      	ldr	r3, [r7, #12]
 800fc1a:	4a07      	ldr	r2, [pc, #28]	; (800fc38 <tcp_alloc+0x104>)
 800fc1c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800fc20:	68fb      	ldr	r3, [r7, #12]
}
 800fc22:	4618      	mov	r0, r3
 800fc24:	3710      	adds	r7, #16
 800fc26:	46bd      	mov	sp, r7
 800fc28:	bd80      	pop	{r7, pc}
 800fc2a:	bf00      	nop
 800fc2c:	2000bf20 	.word	0x2000bf20
 800fc30:	2000bf36 	.word	0x2000bf36
 800fc34:	0800f8ed 	.word	0x0800f8ed
 800fc38:	006ddd00 	.word	0x006ddd00

0800fc3c <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800fc3c:	b580      	push	{r7, lr}
 800fc3e:	b084      	sub	sp, #16
 800fc40:	af00      	add	r7, sp, #0
 800fc42:	4603      	mov	r3, r0
 800fc44:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800fc46:	2040      	movs	r0, #64	; 0x40
 800fc48:	f7ff ff74 	bl	800fb34 <tcp_alloc>
 800fc4c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800fc4e:	68fb      	ldr	r3, [r7, #12]
}
 800fc50:	4618      	mov	r0, r3
 800fc52:	3710      	adds	r7, #16
 800fc54:	46bd      	mov	sp, r7
 800fc56:	bd80      	pop	{r7, pc}

0800fc58 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800fc58:	b480      	push	{r7}
 800fc5a:	b083      	sub	sp, #12
 800fc5c:	af00      	add	r7, sp, #0
 800fc5e:	6078      	str	r0, [r7, #4]
 800fc60:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	d002      	beq.n	800fc6e <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	683a      	ldr	r2, [r7, #0]
 800fc6c:	611a      	str	r2, [r3, #16]
  }
}
 800fc6e:	bf00      	nop
 800fc70:	370c      	adds	r7, #12
 800fc72:	46bd      	mov	sp, r7
 800fc74:	bc80      	pop	{r7}
 800fc76:	4770      	bx	lr

0800fc78 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800fc78:	b580      	push	{r7, lr}
 800fc7a:	b082      	sub	sp, #8
 800fc7c:	af00      	add	r7, sp, #0
 800fc7e:	6078      	str	r0, [r7, #4]
 800fc80:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	2b00      	cmp	r3, #0
 800fc86:	d00e      	beq.n	800fca6 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	7d1b      	ldrb	r3, [r3, #20]
 800fc8c:	2b01      	cmp	r3, #1
 800fc8e:	d106      	bne.n	800fc9e <tcp_recv+0x26>
 800fc90:	4b07      	ldr	r3, [pc, #28]	; (800fcb0 <tcp_recv+0x38>)
 800fc92:	f240 72df 	movw	r2, #2015	; 0x7df
 800fc96:	4907      	ldr	r1, [pc, #28]	; (800fcb4 <tcp_recv+0x3c>)
 800fc98:	4807      	ldr	r0, [pc, #28]	; (800fcb8 <tcp_recv+0x40>)
 800fc9a:	f00a fd83 	bl	801a7a4 <iprintf>
    pcb->recv = recv;
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	683a      	ldr	r2, [r7, #0]
 800fca2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800fca6:	bf00      	nop
 800fca8:	3708      	adds	r7, #8
 800fcaa:	46bd      	mov	sp, r7
 800fcac:	bd80      	pop	{r7, pc}
 800fcae:	bf00      	nop
 800fcb0:	0801c730 	.word	0x0801c730
 800fcb4:	0801cccc 	.word	0x0801cccc
 800fcb8:	0801c774 	.word	0x0801c774

0800fcbc <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800fcbc:	b580      	push	{r7, lr}
 800fcbe:	b082      	sub	sp, #8
 800fcc0:	af00      	add	r7, sp, #0
 800fcc2:	6078      	str	r0, [r7, #4]
 800fcc4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	d00e      	beq.n	800fcea <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	7d1b      	ldrb	r3, [r3, #20]
 800fcd0:	2b01      	cmp	r3, #1
 800fcd2:	d106      	bne.n	800fce2 <tcp_sent+0x26>
 800fcd4:	4b07      	ldr	r3, [pc, #28]	; (800fcf4 <tcp_sent+0x38>)
 800fcd6:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800fcda:	4907      	ldr	r1, [pc, #28]	; (800fcf8 <tcp_sent+0x3c>)
 800fcdc:	4807      	ldr	r0, [pc, #28]	; (800fcfc <tcp_sent+0x40>)
 800fcde:	f00a fd61 	bl	801a7a4 <iprintf>
    pcb->sent = sent;
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	683a      	ldr	r2, [r7, #0]
 800fce6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800fcea:	bf00      	nop
 800fcec:	3708      	adds	r7, #8
 800fcee:	46bd      	mov	sp, r7
 800fcf0:	bd80      	pop	{r7, pc}
 800fcf2:	bf00      	nop
 800fcf4:	0801c730 	.word	0x0801c730
 800fcf8:	0801ccf4 	.word	0x0801ccf4
 800fcfc:	0801c774 	.word	0x0801c774

0800fd00 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800fd00:	b580      	push	{r7, lr}
 800fd02:	b082      	sub	sp, #8
 800fd04:	af00      	add	r7, sp, #0
 800fd06:	6078      	str	r0, [r7, #4]
 800fd08:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	d00e      	beq.n	800fd2e <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	7d1b      	ldrb	r3, [r3, #20]
 800fd14:	2b01      	cmp	r3, #1
 800fd16:	d106      	bne.n	800fd26 <tcp_err+0x26>
 800fd18:	4b07      	ldr	r3, [pc, #28]	; (800fd38 <tcp_err+0x38>)
 800fd1a:	f640 020d 	movw	r2, #2061	; 0x80d
 800fd1e:	4907      	ldr	r1, [pc, #28]	; (800fd3c <tcp_err+0x3c>)
 800fd20:	4807      	ldr	r0, [pc, #28]	; (800fd40 <tcp_err+0x40>)
 800fd22:	f00a fd3f 	bl	801a7a4 <iprintf>
    pcb->errf = err;
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	683a      	ldr	r2, [r7, #0]
 800fd2a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800fd2e:	bf00      	nop
 800fd30:	3708      	adds	r7, #8
 800fd32:	46bd      	mov	sp, r7
 800fd34:	bd80      	pop	{r7, pc}
 800fd36:	bf00      	nop
 800fd38:	0801c730 	.word	0x0801c730
 800fd3c:	0801cd1c 	.word	0x0801cd1c
 800fd40:	0801c774 	.word	0x0801c774

0800fd44 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800fd44:	b580      	push	{r7, lr}
 800fd46:	b084      	sub	sp, #16
 800fd48:	af00      	add	r7, sp, #0
 800fd4a:	60f8      	str	r0, [r7, #12]
 800fd4c:	60b9      	str	r1, [r7, #8]
 800fd4e:	4613      	mov	r3, r2
 800fd50:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800fd52:	68fb      	ldr	r3, [r7, #12]
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	d107      	bne.n	800fd68 <tcp_poll+0x24>
 800fd58:	4b0e      	ldr	r3, [pc, #56]	; (800fd94 <tcp_poll+0x50>)
 800fd5a:	f640 023d 	movw	r2, #2109	; 0x83d
 800fd5e:	490e      	ldr	r1, [pc, #56]	; (800fd98 <tcp_poll+0x54>)
 800fd60:	480e      	ldr	r0, [pc, #56]	; (800fd9c <tcp_poll+0x58>)
 800fd62:	f00a fd1f 	bl	801a7a4 <iprintf>
 800fd66:	e011      	b.n	800fd8c <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	7d1b      	ldrb	r3, [r3, #20]
 800fd6c:	2b01      	cmp	r3, #1
 800fd6e:	d106      	bne.n	800fd7e <tcp_poll+0x3a>
 800fd70:	4b08      	ldr	r3, [pc, #32]	; (800fd94 <tcp_poll+0x50>)
 800fd72:	f640 023e 	movw	r2, #2110	; 0x83e
 800fd76:	490a      	ldr	r1, [pc, #40]	; (800fda0 <tcp_poll+0x5c>)
 800fd78:	4808      	ldr	r0, [pc, #32]	; (800fd9c <tcp_poll+0x58>)
 800fd7a:	f00a fd13 	bl	801a7a4 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800fd7e:	68fb      	ldr	r3, [r7, #12]
 800fd80:	68ba      	ldr	r2, [r7, #8]
 800fd82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800fd86:	68fb      	ldr	r3, [r7, #12]
 800fd88:	79fa      	ldrb	r2, [r7, #7]
 800fd8a:	775a      	strb	r2, [r3, #29]
}
 800fd8c:	3710      	adds	r7, #16
 800fd8e:	46bd      	mov	sp, r7
 800fd90:	bd80      	pop	{r7, pc}
 800fd92:	bf00      	nop
 800fd94:	0801c730 	.word	0x0801c730
 800fd98:	0801cd44 	.word	0x0801cd44
 800fd9c:	0801c774 	.word	0x0801c774
 800fda0:	0801cd5c 	.word	0x0801cd5c

0800fda4 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800fda4:	b580      	push	{r7, lr}
 800fda6:	b082      	sub	sp, #8
 800fda8:	af00      	add	r7, sp, #0
 800fdaa:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d107      	bne.n	800fdc2 <tcp_pcb_purge+0x1e>
 800fdb2:	4b21      	ldr	r3, [pc, #132]	; (800fe38 <tcp_pcb_purge+0x94>)
 800fdb4:	f640 0251 	movw	r2, #2129	; 0x851
 800fdb8:	4920      	ldr	r1, [pc, #128]	; (800fe3c <tcp_pcb_purge+0x98>)
 800fdba:	4821      	ldr	r0, [pc, #132]	; (800fe40 <tcp_pcb_purge+0x9c>)
 800fdbc:	f00a fcf2 	bl	801a7a4 <iprintf>
 800fdc0:	e037      	b.n	800fe32 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	7d1b      	ldrb	r3, [r3, #20]
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	d033      	beq.n	800fe32 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800fdce:	2b0a      	cmp	r3, #10
 800fdd0:	d02f      	beq.n	800fe32 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800fdd6:	2b01      	cmp	r3, #1
 800fdd8:	d02b      	beq.n	800fe32 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d007      	beq.n	800fdf2 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fde6:	4618      	mov	r0, r3
 800fde8:	f7fe f856 	bl	800de98 <pbuf_free>
      pcb->refused_data = NULL;
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	2200      	movs	r2, #0
 800fdf0:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	d002      	beq.n	800fe00 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800fdfa:	6878      	ldr	r0, [r7, #4]
 800fdfc:	f000 f986 	bl	801010c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fe06:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fe0c:	4618      	mov	r0, r3
 800fe0e:	f7ff fd13 	bl	800f838 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fe16:	4618      	mov	r0, r3
 800fe18:	f7ff fd0e 	bl	800f838 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	2200      	movs	r2, #0
 800fe20:	66da      	str	r2, [r3, #108]	; 0x6c
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	2200      	movs	r2, #0
 800fe2e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800fe32:	3708      	adds	r7, #8
 800fe34:	46bd      	mov	sp, r7
 800fe36:	bd80      	pop	{r7, pc}
 800fe38:	0801c730 	.word	0x0801c730
 800fe3c:	0801cd7c 	.word	0x0801cd7c
 800fe40:	0801c774 	.word	0x0801c774

0800fe44 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800fe44:	b580      	push	{r7, lr}
 800fe46:	b084      	sub	sp, #16
 800fe48:	af00      	add	r7, sp, #0
 800fe4a:	6078      	str	r0, [r7, #4]
 800fe4c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800fe4e:	683b      	ldr	r3, [r7, #0]
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	d106      	bne.n	800fe62 <tcp_pcb_remove+0x1e>
 800fe54:	4b3e      	ldr	r3, [pc, #248]	; (800ff50 <tcp_pcb_remove+0x10c>)
 800fe56:	f640 0283 	movw	r2, #2179	; 0x883
 800fe5a:	493e      	ldr	r1, [pc, #248]	; (800ff54 <tcp_pcb_remove+0x110>)
 800fe5c:	483e      	ldr	r0, [pc, #248]	; (800ff58 <tcp_pcb_remove+0x114>)
 800fe5e:	f00a fca1 	bl	801a7a4 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	d106      	bne.n	800fe76 <tcp_pcb_remove+0x32>
 800fe68:	4b39      	ldr	r3, [pc, #228]	; (800ff50 <tcp_pcb_remove+0x10c>)
 800fe6a:	f640 0284 	movw	r2, #2180	; 0x884
 800fe6e:	493b      	ldr	r1, [pc, #236]	; (800ff5c <tcp_pcb_remove+0x118>)
 800fe70:	4839      	ldr	r0, [pc, #228]	; (800ff58 <tcp_pcb_remove+0x114>)
 800fe72:	f00a fc97 	bl	801a7a4 <iprintf>

  TCP_RMV(pcblist, pcb);
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	681b      	ldr	r3, [r3, #0]
 800fe7a:	683a      	ldr	r2, [r7, #0]
 800fe7c:	429a      	cmp	r2, r3
 800fe7e:	d105      	bne.n	800fe8c <tcp_pcb_remove+0x48>
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	681b      	ldr	r3, [r3, #0]
 800fe84:	68da      	ldr	r2, [r3, #12]
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	601a      	str	r2, [r3, #0]
 800fe8a:	e013      	b.n	800feb4 <tcp_pcb_remove+0x70>
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	681b      	ldr	r3, [r3, #0]
 800fe90:	60fb      	str	r3, [r7, #12]
 800fe92:	e00c      	b.n	800feae <tcp_pcb_remove+0x6a>
 800fe94:	68fb      	ldr	r3, [r7, #12]
 800fe96:	68db      	ldr	r3, [r3, #12]
 800fe98:	683a      	ldr	r2, [r7, #0]
 800fe9a:	429a      	cmp	r2, r3
 800fe9c:	d104      	bne.n	800fea8 <tcp_pcb_remove+0x64>
 800fe9e:	683b      	ldr	r3, [r7, #0]
 800fea0:	68da      	ldr	r2, [r3, #12]
 800fea2:	68fb      	ldr	r3, [r7, #12]
 800fea4:	60da      	str	r2, [r3, #12]
 800fea6:	e005      	b.n	800feb4 <tcp_pcb_remove+0x70>
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	68db      	ldr	r3, [r3, #12]
 800feac:	60fb      	str	r3, [r7, #12]
 800feae:	68fb      	ldr	r3, [r7, #12]
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	d1ef      	bne.n	800fe94 <tcp_pcb_remove+0x50>
 800feb4:	683b      	ldr	r3, [r7, #0]
 800feb6:	2200      	movs	r2, #0
 800feb8:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800feba:	6838      	ldr	r0, [r7, #0]
 800febc:	f7ff ff72 	bl	800fda4 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800fec0:	683b      	ldr	r3, [r7, #0]
 800fec2:	7d1b      	ldrb	r3, [r3, #20]
 800fec4:	2b0a      	cmp	r3, #10
 800fec6:	d013      	beq.n	800fef0 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800fec8:	683b      	ldr	r3, [r7, #0]
 800feca:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800fecc:	2b01      	cmp	r3, #1
 800fece:	d00f      	beq.n	800fef0 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800fed0:	683b      	ldr	r3, [r7, #0]
 800fed2:	8b5b      	ldrh	r3, [r3, #26]
 800fed4:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800fed8:	2b00      	cmp	r3, #0
 800feda:	d009      	beq.n	800fef0 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800fedc:	683b      	ldr	r3, [r7, #0]
 800fede:	8b5b      	ldrh	r3, [r3, #26]
 800fee0:	f043 0302 	orr.w	r3, r3, #2
 800fee4:	b29a      	uxth	r2, r3
 800fee6:	683b      	ldr	r3, [r7, #0]
 800fee8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800feea:	6838      	ldr	r0, [r7, #0]
 800feec:	f003 fbc6 	bl	801367c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800fef0:	683b      	ldr	r3, [r7, #0]
 800fef2:	7d1b      	ldrb	r3, [r3, #20]
 800fef4:	2b01      	cmp	r3, #1
 800fef6:	d020      	beq.n	800ff3a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800fef8:	683b      	ldr	r3, [r7, #0]
 800fefa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	d006      	beq.n	800ff0e <tcp_pcb_remove+0xca>
 800ff00:	4b13      	ldr	r3, [pc, #76]	; (800ff50 <tcp_pcb_remove+0x10c>)
 800ff02:	f640 0293 	movw	r2, #2195	; 0x893
 800ff06:	4916      	ldr	r1, [pc, #88]	; (800ff60 <tcp_pcb_remove+0x11c>)
 800ff08:	4813      	ldr	r0, [pc, #76]	; (800ff58 <tcp_pcb_remove+0x114>)
 800ff0a:	f00a fc4b 	bl	801a7a4 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800ff0e:	683b      	ldr	r3, [r7, #0]
 800ff10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	d006      	beq.n	800ff24 <tcp_pcb_remove+0xe0>
 800ff16:	4b0e      	ldr	r3, [pc, #56]	; (800ff50 <tcp_pcb_remove+0x10c>)
 800ff18:	f640 0294 	movw	r2, #2196	; 0x894
 800ff1c:	4911      	ldr	r1, [pc, #68]	; (800ff64 <tcp_pcb_remove+0x120>)
 800ff1e:	480e      	ldr	r0, [pc, #56]	; (800ff58 <tcp_pcb_remove+0x114>)
 800ff20:	f00a fc40 	bl	801a7a4 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800ff24:	683b      	ldr	r3, [r7, #0]
 800ff26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	d006      	beq.n	800ff3a <tcp_pcb_remove+0xf6>
 800ff2c:	4b08      	ldr	r3, [pc, #32]	; (800ff50 <tcp_pcb_remove+0x10c>)
 800ff2e:	f640 0296 	movw	r2, #2198	; 0x896
 800ff32:	490d      	ldr	r1, [pc, #52]	; (800ff68 <tcp_pcb_remove+0x124>)
 800ff34:	4808      	ldr	r0, [pc, #32]	; (800ff58 <tcp_pcb_remove+0x114>)
 800ff36:	f00a fc35 	bl	801a7a4 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800ff3a:	683b      	ldr	r3, [r7, #0]
 800ff3c:	2200      	movs	r2, #0
 800ff3e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800ff40:	683b      	ldr	r3, [r7, #0]
 800ff42:	2200      	movs	r2, #0
 800ff44:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800ff46:	bf00      	nop
 800ff48:	3710      	adds	r7, #16
 800ff4a:	46bd      	mov	sp, r7
 800ff4c:	bd80      	pop	{r7, pc}
 800ff4e:	bf00      	nop
 800ff50:	0801c730 	.word	0x0801c730
 800ff54:	0801cd98 	.word	0x0801cd98
 800ff58:	0801c774 	.word	0x0801c774
 800ff5c:	0801cdb4 	.word	0x0801cdb4
 800ff60:	0801cdd4 	.word	0x0801cdd4
 800ff64:	0801cdec 	.word	0x0801cdec
 800ff68:	0801ce08 	.word	0x0801ce08

0800ff6c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800ff6c:	b580      	push	{r7, lr}
 800ff6e:	b082      	sub	sp, #8
 800ff70:	af00      	add	r7, sp, #0
 800ff72:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d106      	bne.n	800ff88 <tcp_next_iss+0x1c>
 800ff7a:	4b0a      	ldr	r3, [pc, #40]	; (800ffa4 <tcp_next_iss+0x38>)
 800ff7c:	f640 02af 	movw	r2, #2223	; 0x8af
 800ff80:	4909      	ldr	r1, [pc, #36]	; (800ffa8 <tcp_next_iss+0x3c>)
 800ff82:	480a      	ldr	r0, [pc, #40]	; (800ffac <tcp_next_iss+0x40>)
 800ff84:	f00a fc0e 	bl	801a7a4 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800ff88:	4b09      	ldr	r3, [pc, #36]	; (800ffb0 <tcp_next_iss+0x44>)
 800ff8a:	681a      	ldr	r2, [r3, #0]
 800ff8c:	4b09      	ldr	r3, [pc, #36]	; (800ffb4 <tcp_next_iss+0x48>)
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	4413      	add	r3, r2
 800ff92:	4a07      	ldr	r2, [pc, #28]	; (800ffb0 <tcp_next_iss+0x44>)
 800ff94:	6013      	str	r3, [r2, #0]
  return iss;
 800ff96:	4b06      	ldr	r3, [pc, #24]	; (800ffb0 <tcp_next_iss+0x44>)
 800ff98:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800ff9a:	4618      	mov	r0, r3
 800ff9c:	3708      	adds	r7, #8
 800ff9e:	46bd      	mov	sp, r7
 800ffa0:	bd80      	pop	{r7, pc}
 800ffa2:	bf00      	nop
 800ffa4:	0801c730 	.word	0x0801c730
 800ffa8:	0801ce20 	.word	0x0801ce20
 800ffac:	0801c774 	.word	0x0801c774
 800ffb0:	200000a0 	.word	0x200000a0
 800ffb4:	2000bf20 	.word	0x2000bf20

0800ffb8 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800ffb8:	b580      	push	{r7, lr}
 800ffba:	b086      	sub	sp, #24
 800ffbc:	af00      	add	r7, sp, #0
 800ffbe:	4603      	mov	r3, r0
 800ffc0:	60b9      	str	r1, [r7, #8]
 800ffc2:	607a      	str	r2, [r7, #4]
 800ffc4:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	d106      	bne.n	800ffda <tcp_eff_send_mss_netif+0x22>
 800ffcc:	4b14      	ldr	r3, [pc, #80]	; (8010020 <tcp_eff_send_mss_netif+0x68>)
 800ffce:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800ffd2:	4914      	ldr	r1, [pc, #80]	; (8010024 <tcp_eff_send_mss_netif+0x6c>)
 800ffd4:	4814      	ldr	r0, [pc, #80]	; (8010028 <tcp_eff_send_mss_netif+0x70>)
 800ffd6:	f00a fbe5 	bl	801a7a4 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800ffda:	68bb      	ldr	r3, [r7, #8]
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	d101      	bne.n	800ffe4 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800ffe0:	89fb      	ldrh	r3, [r7, #14]
 800ffe2:	e019      	b.n	8010018 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800ffe4:	68bb      	ldr	r3, [r7, #8]
 800ffe6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ffe8:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800ffea:	8afb      	ldrh	r3, [r7, #22]
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	d012      	beq.n	8010016 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800fff0:	2328      	movs	r3, #40	; 0x28
 800fff2:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800fff4:	8afa      	ldrh	r2, [r7, #22]
 800fff6:	8abb      	ldrh	r3, [r7, #20]
 800fff8:	429a      	cmp	r2, r3
 800fffa:	d904      	bls.n	8010006 <tcp_eff_send_mss_netif+0x4e>
 800fffc:	8afa      	ldrh	r2, [r7, #22]
 800fffe:	8abb      	ldrh	r3, [r7, #20]
 8010000:	1ad3      	subs	r3, r2, r3
 8010002:	b29b      	uxth	r3, r3
 8010004:	e000      	b.n	8010008 <tcp_eff_send_mss_netif+0x50>
 8010006:	2300      	movs	r3, #0
 8010008:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 801000a:	8a7a      	ldrh	r2, [r7, #18]
 801000c:	89fb      	ldrh	r3, [r7, #14]
 801000e:	4293      	cmp	r3, r2
 8010010:	bf28      	it	cs
 8010012:	4613      	movcs	r3, r2
 8010014:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8010016:	89fb      	ldrh	r3, [r7, #14]
}
 8010018:	4618      	mov	r0, r3
 801001a:	3718      	adds	r7, #24
 801001c:	46bd      	mov	sp, r7
 801001e:	bd80      	pop	{r7, pc}
 8010020:	0801c730 	.word	0x0801c730
 8010024:	0801ce3c 	.word	0x0801ce3c
 8010028:	0801c774 	.word	0x0801c774

0801002c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 801002c:	b580      	push	{r7, lr}
 801002e:	b084      	sub	sp, #16
 8010030:	af00      	add	r7, sp, #0
 8010032:	6078      	str	r0, [r7, #4]
 8010034:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8010036:	683b      	ldr	r3, [r7, #0]
 8010038:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	2b00      	cmp	r3, #0
 801003e:	d119      	bne.n	8010074 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8010040:	4b10      	ldr	r3, [pc, #64]	; (8010084 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8010042:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8010046:	4910      	ldr	r1, [pc, #64]	; (8010088 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8010048:	4810      	ldr	r0, [pc, #64]	; (801008c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 801004a:	f00a fbab 	bl	801a7a4 <iprintf>

  while (pcb != NULL) {
 801004e:	e011      	b.n	8010074 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8010050:	68fb      	ldr	r3, [r7, #12]
 8010052:	681a      	ldr	r2, [r3, #0]
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	681b      	ldr	r3, [r3, #0]
 8010058:	429a      	cmp	r2, r3
 801005a:	d108      	bne.n	801006e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 801005c:	68fb      	ldr	r3, [r7, #12]
 801005e:	68db      	ldr	r3, [r3, #12]
 8010060:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8010062:	68f8      	ldr	r0, [r7, #12]
 8010064:	f7fe fd1c 	bl	800eaa0 <tcp_abort>
      pcb = next;
 8010068:	68bb      	ldr	r3, [r7, #8]
 801006a:	60fb      	str	r3, [r7, #12]
 801006c:	e002      	b.n	8010074 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 801006e:	68fb      	ldr	r3, [r7, #12]
 8010070:	68db      	ldr	r3, [r3, #12]
 8010072:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8010074:	68fb      	ldr	r3, [r7, #12]
 8010076:	2b00      	cmp	r3, #0
 8010078:	d1ea      	bne.n	8010050 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 801007a:	bf00      	nop
 801007c:	bf00      	nop
 801007e:	3710      	adds	r7, #16
 8010080:	46bd      	mov	sp, r7
 8010082:	bd80      	pop	{r7, pc}
 8010084:	0801c730 	.word	0x0801c730
 8010088:	0801ce64 	.word	0x0801ce64
 801008c:	0801c774 	.word	0x0801c774

08010090 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8010090:	b580      	push	{r7, lr}
 8010092:	b084      	sub	sp, #16
 8010094:	af00      	add	r7, sp, #0
 8010096:	6078      	str	r0, [r7, #4]
 8010098:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	2b00      	cmp	r3, #0
 801009e:	d02a      	beq.n	80100f6 <tcp_netif_ip_addr_changed+0x66>
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	681b      	ldr	r3, [r3, #0]
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	d026      	beq.n	80100f6 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80100a8:	4b15      	ldr	r3, [pc, #84]	; (8010100 <tcp_netif_ip_addr_changed+0x70>)
 80100aa:	681b      	ldr	r3, [r3, #0]
 80100ac:	4619      	mov	r1, r3
 80100ae:	6878      	ldr	r0, [r7, #4]
 80100b0:	f7ff ffbc 	bl	801002c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80100b4:	4b13      	ldr	r3, [pc, #76]	; (8010104 <tcp_netif_ip_addr_changed+0x74>)
 80100b6:	681b      	ldr	r3, [r3, #0]
 80100b8:	4619      	mov	r1, r3
 80100ba:	6878      	ldr	r0, [r7, #4]
 80100bc:	f7ff ffb6 	bl	801002c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80100c0:	683b      	ldr	r3, [r7, #0]
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d017      	beq.n	80100f6 <tcp_netif_ip_addr_changed+0x66>
 80100c6:	683b      	ldr	r3, [r7, #0]
 80100c8:	681b      	ldr	r3, [r3, #0]
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	d013      	beq.n	80100f6 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80100ce:	4b0e      	ldr	r3, [pc, #56]	; (8010108 <tcp_netif_ip_addr_changed+0x78>)
 80100d0:	681b      	ldr	r3, [r3, #0]
 80100d2:	60fb      	str	r3, [r7, #12]
 80100d4:	e00c      	b.n	80100f0 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80100d6:	68fb      	ldr	r3, [r7, #12]
 80100d8:	681a      	ldr	r2, [r3, #0]
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	681b      	ldr	r3, [r3, #0]
 80100de:	429a      	cmp	r2, r3
 80100e0:	d103      	bne.n	80100ea <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80100e2:	683b      	ldr	r3, [r7, #0]
 80100e4:	681a      	ldr	r2, [r3, #0]
 80100e6:	68fb      	ldr	r3, [r7, #12]
 80100e8:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80100ea:	68fb      	ldr	r3, [r7, #12]
 80100ec:	68db      	ldr	r3, [r3, #12]
 80100ee:	60fb      	str	r3, [r7, #12]
 80100f0:	68fb      	ldr	r3, [r7, #12]
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d1ef      	bne.n	80100d6 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80100f6:	bf00      	nop
 80100f8:	3710      	adds	r7, #16
 80100fa:	46bd      	mov	sp, r7
 80100fc:	bd80      	pop	{r7, pc}
 80100fe:	bf00      	nop
 8010100:	2000bf2c 	.word	0x2000bf2c
 8010104:	2000bf24 	.word	0x2000bf24
 8010108:	2000bf28 	.word	0x2000bf28

0801010c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 801010c:	b580      	push	{r7, lr}
 801010e:	b082      	sub	sp, #8
 8010110:	af00      	add	r7, sp, #0
 8010112:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010118:	2b00      	cmp	r3, #0
 801011a:	d007      	beq.n	801012c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010120:	4618      	mov	r0, r3
 8010122:	f7ff fb89 	bl	800f838 <tcp_segs_free>
    pcb->ooseq = NULL;
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	2200      	movs	r2, #0
 801012a:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 801012c:	bf00      	nop
 801012e:	3708      	adds	r7, #8
 8010130:	46bd      	mov	sp, r7
 8010132:	bd80      	pop	{r7, pc}

08010134 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8010134:	b590      	push	{r4, r7, lr}
 8010136:	b08d      	sub	sp, #52	; 0x34
 8010138:	af04      	add	r7, sp, #16
 801013a:	6078      	str	r0, [r7, #4]
 801013c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	2b00      	cmp	r3, #0
 8010142:	d105      	bne.n	8010150 <tcp_input+0x1c>
 8010144:	4b9b      	ldr	r3, [pc, #620]	; (80103b4 <tcp_input+0x280>)
 8010146:	2283      	movs	r2, #131	; 0x83
 8010148:	499b      	ldr	r1, [pc, #620]	; (80103b8 <tcp_input+0x284>)
 801014a:	489c      	ldr	r0, [pc, #624]	; (80103bc <tcp_input+0x288>)
 801014c:	f00a fb2a 	bl	801a7a4 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	685b      	ldr	r3, [r3, #4]
 8010154:	4a9a      	ldr	r2, [pc, #616]	; (80103c0 <tcp_input+0x28c>)
 8010156:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	895b      	ldrh	r3, [r3, #10]
 801015c:	2b13      	cmp	r3, #19
 801015e:	f240 83d1 	bls.w	8010904 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8010162:	4b98      	ldr	r3, [pc, #608]	; (80103c4 <tcp_input+0x290>)
 8010164:	695b      	ldr	r3, [r3, #20]
 8010166:	4a97      	ldr	r2, [pc, #604]	; (80103c4 <tcp_input+0x290>)
 8010168:	6812      	ldr	r2, [r2, #0]
 801016a:	4611      	mov	r1, r2
 801016c:	4618      	mov	r0, r3
 801016e:	f008 fa75 	bl	801865c <ip4_addr_isbroadcast_u32>
 8010172:	4603      	mov	r3, r0
 8010174:	2b00      	cmp	r3, #0
 8010176:	f040 83c7 	bne.w	8010908 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801017a:	4b92      	ldr	r3, [pc, #584]	; (80103c4 <tcp_input+0x290>)
 801017c:	695b      	ldr	r3, [r3, #20]
 801017e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8010182:	2be0      	cmp	r3, #224	; 0xe0
 8010184:	f000 83c0 	beq.w	8010908 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8010188:	4b8d      	ldr	r3, [pc, #564]	; (80103c0 <tcp_input+0x28c>)
 801018a:	681b      	ldr	r3, [r3, #0]
 801018c:	899b      	ldrh	r3, [r3, #12]
 801018e:	b29b      	uxth	r3, r3
 8010190:	4618      	mov	r0, r3
 8010192:	f7fc fa1d 	bl	800c5d0 <lwip_htons>
 8010196:	4603      	mov	r3, r0
 8010198:	0b1b      	lsrs	r3, r3, #12
 801019a:	b29b      	uxth	r3, r3
 801019c:	b2db      	uxtb	r3, r3
 801019e:	009b      	lsls	r3, r3, #2
 80101a0:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80101a2:	7cbb      	ldrb	r3, [r7, #18]
 80101a4:	2b13      	cmp	r3, #19
 80101a6:	f240 83b1 	bls.w	801090c <tcp_input+0x7d8>
 80101aa:	7cbb      	ldrb	r3, [r7, #18]
 80101ac:	b29a      	uxth	r2, r3
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	891b      	ldrh	r3, [r3, #8]
 80101b2:	429a      	cmp	r2, r3
 80101b4:	f200 83aa 	bhi.w	801090c <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80101b8:	7cbb      	ldrb	r3, [r7, #18]
 80101ba:	b29b      	uxth	r3, r3
 80101bc:	3b14      	subs	r3, #20
 80101be:	b29a      	uxth	r2, r3
 80101c0:	4b81      	ldr	r3, [pc, #516]	; (80103c8 <tcp_input+0x294>)
 80101c2:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80101c4:	4b81      	ldr	r3, [pc, #516]	; (80103cc <tcp_input+0x298>)
 80101c6:	2200      	movs	r2, #0
 80101c8:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	895a      	ldrh	r2, [r3, #10]
 80101ce:	7cbb      	ldrb	r3, [r7, #18]
 80101d0:	b29b      	uxth	r3, r3
 80101d2:	429a      	cmp	r2, r3
 80101d4:	d309      	bcc.n	80101ea <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80101d6:	4b7c      	ldr	r3, [pc, #496]	; (80103c8 <tcp_input+0x294>)
 80101d8:	881a      	ldrh	r2, [r3, #0]
 80101da:	4b7d      	ldr	r3, [pc, #500]	; (80103d0 <tcp_input+0x29c>)
 80101dc:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80101de:	7cbb      	ldrb	r3, [r7, #18]
 80101e0:	4619      	mov	r1, r3
 80101e2:	6878      	ldr	r0, [r7, #4]
 80101e4:	f7fd fdd2 	bl	800dd8c <pbuf_remove_header>
 80101e8:	e04e      	b.n	8010288 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	681b      	ldr	r3, [r3, #0]
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	d105      	bne.n	80101fe <tcp_input+0xca>
 80101f2:	4b70      	ldr	r3, [pc, #448]	; (80103b4 <tcp_input+0x280>)
 80101f4:	22c2      	movs	r2, #194	; 0xc2
 80101f6:	4977      	ldr	r1, [pc, #476]	; (80103d4 <tcp_input+0x2a0>)
 80101f8:	4870      	ldr	r0, [pc, #448]	; (80103bc <tcp_input+0x288>)
 80101fa:	f00a fad3 	bl	801a7a4 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80101fe:	2114      	movs	r1, #20
 8010200:	6878      	ldr	r0, [r7, #4]
 8010202:	f7fd fdc3 	bl	800dd8c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	895a      	ldrh	r2, [r3, #10]
 801020a:	4b71      	ldr	r3, [pc, #452]	; (80103d0 <tcp_input+0x29c>)
 801020c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801020e:	4b6e      	ldr	r3, [pc, #440]	; (80103c8 <tcp_input+0x294>)
 8010210:	881a      	ldrh	r2, [r3, #0]
 8010212:	4b6f      	ldr	r3, [pc, #444]	; (80103d0 <tcp_input+0x29c>)
 8010214:	881b      	ldrh	r3, [r3, #0]
 8010216:	1ad3      	subs	r3, r2, r3
 8010218:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 801021a:	4b6d      	ldr	r3, [pc, #436]	; (80103d0 <tcp_input+0x29c>)
 801021c:	881b      	ldrh	r3, [r3, #0]
 801021e:	4619      	mov	r1, r3
 8010220:	6878      	ldr	r0, [r7, #4]
 8010222:	f7fd fdb3 	bl	800dd8c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	681b      	ldr	r3, [r3, #0]
 801022a:	895b      	ldrh	r3, [r3, #10]
 801022c:	8a3a      	ldrh	r2, [r7, #16]
 801022e:	429a      	cmp	r2, r3
 8010230:	f200 836e 	bhi.w	8010910 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	681b      	ldr	r3, [r3, #0]
 8010238:	685b      	ldr	r3, [r3, #4]
 801023a:	4a64      	ldr	r2, [pc, #400]	; (80103cc <tcp_input+0x298>)
 801023c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	681b      	ldr	r3, [r3, #0]
 8010242:	8a3a      	ldrh	r2, [r7, #16]
 8010244:	4611      	mov	r1, r2
 8010246:	4618      	mov	r0, r3
 8010248:	f7fd fda0 	bl	800dd8c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	891a      	ldrh	r2, [r3, #8]
 8010250:	8a3b      	ldrh	r3, [r7, #16]
 8010252:	1ad3      	subs	r3, r2, r3
 8010254:	b29a      	uxth	r2, r3
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	895b      	ldrh	r3, [r3, #10]
 801025e:	2b00      	cmp	r3, #0
 8010260:	d005      	beq.n	801026e <tcp_input+0x13a>
 8010262:	4b54      	ldr	r3, [pc, #336]	; (80103b4 <tcp_input+0x280>)
 8010264:	22df      	movs	r2, #223	; 0xdf
 8010266:	495c      	ldr	r1, [pc, #368]	; (80103d8 <tcp_input+0x2a4>)
 8010268:	4854      	ldr	r0, [pc, #336]	; (80103bc <tcp_input+0x288>)
 801026a:	f00a fa9b 	bl	801a7a4 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	891a      	ldrh	r2, [r3, #8]
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	681b      	ldr	r3, [r3, #0]
 8010276:	891b      	ldrh	r3, [r3, #8]
 8010278:	429a      	cmp	r2, r3
 801027a:	d005      	beq.n	8010288 <tcp_input+0x154>
 801027c:	4b4d      	ldr	r3, [pc, #308]	; (80103b4 <tcp_input+0x280>)
 801027e:	22e0      	movs	r2, #224	; 0xe0
 8010280:	4956      	ldr	r1, [pc, #344]	; (80103dc <tcp_input+0x2a8>)
 8010282:	484e      	ldr	r0, [pc, #312]	; (80103bc <tcp_input+0x288>)
 8010284:	f00a fa8e 	bl	801a7a4 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8010288:	4b4d      	ldr	r3, [pc, #308]	; (80103c0 <tcp_input+0x28c>)
 801028a:	681b      	ldr	r3, [r3, #0]
 801028c:	881b      	ldrh	r3, [r3, #0]
 801028e:	b29b      	uxth	r3, r3
 8010290:	4a4b      	ldr	r2, [pc, #300]	; (80103c0 <tcp_input+0x28c>)
 8010292:	6814      	ldr	r4, [r2, #0]
 8010294:	4618      	mov	r0, r3
 8010296:	f7fc f99b 	bl	800c5d0 <lwip_htons>
 801029a:	4603      	mov	r3, r0
 801029c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 801029e:	4b48      	ldr	r3, [pc, #288]	; (80103c0 <tcp_input+0x28c>)
 80102a0:	681b      	ldr	r3, [r3, #0]
 80102a2:	885b      	ldrh	r3, [r3, #2]
 80102a4:	b29b      	uxth	r3, r3
 80102a6:	4a46      	ldr	r2, [pc, #280]	; (80103c0 <tcp_input+0x28c>)
 80102a8:	6814      	ldr	r4, [r2, #0]
 80102aa:	4618      	mov	r0, r3
 80102ac:	f7fc f990 	bl	800c5d0 <lwip_htons>
 80102b0:	4603      	mov	r3, r0
 80102b2:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80102b4:	4b42      	ldr	r3, [pc, #264]	; (80103c0 <tcp_input+0x28c>)
 80102b6:	681b      	ldr	r3, [r3, #0]
 80102b8:	685b      	ldr	r3, [r3, #4]
 80102ba:	4a41      	ldr	r2, [pc, #260]	; (80103c0 <tcp_input+0x28c>)
 80102bc:	6814      	ldr	r4, [r2, #0]
 80102be:	4618      	mov	r0, r3
 80102c0:	f7fc f99a 	bl	800c5f8 <lwip_htonl>
 80102c4:	4603      	mov	r3, r0
 80102c6:	6063      	str	r3, [r4, #4]
 80102c8:	6863      	ldr	r3, [r4, #4]
 80102ca:	4a45      	ldr	r2, [pc, #276]	; (80103e0 <tcp_input+0x2ac>)
 80102cc:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80102ce:	4b3c      	ldr	r3, [pc, #240]	; (80103c0 <tcp_input+0x28c>)
 80102d0:	681b      	ldr	r3, [r3, #0]
 80102d2:	689b      	ldr	r3, [r3, #8]
 80102d4:	4a3a      	ldr	r2, [pc, #232]	; (80103c0 <tcp_input+0x28c>)
 80102d6:	6814      	ldr	r4, [r2, #0]
 80102d8:	4618      	mov	r0, r3
 80102da:	f7fc f98d 	bl	800c5f8 <lwip_htonl>
 80102de:	4603      	mov	r3, r0
 80102e0:	60a3      	str	r3, [r4, #8]
 80102e2:	68a3      	ldr	r3, [r4, #8]
 80102e4:	4a3f      	ldr	r2, [pc, #252]	; (80103e4 <tcp_input+0x2b0>)
 80102e6:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80102e8:	4b35      	ldr	r3, [pc, #212]	; (80103c0 <tcp_input+0x28c>)
 80102ea:	681b      	ldr	r3, [r3, #0]
 80102ec:	89db      	ldrh	r3, [r3, #14]
 80102ee:	b29b      	uxth	r3, r3
 80102f0:	4a33      	ldr	r2, [pc, #204]	; (80103c0 <tcp_input+0x28c>)
 80102f2:	6814      	ldr	r4, [r2, #0]
 80102f4:	4618      	mov	r0, r3
 80102f6:	f7fc f96b 	bl	800c5d0 <lwip_htons>
 80102fa:	4603      	mov	r3, r0
 80102fc:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80102fe:	4b30      	ldr	r3, [pc, #192]	; (80103c0 <tcp_input+0x28c>)
 8010300:	681b      	ldr	r3, [r3, #0]
 8010302:	899b      	ldrh	r3, [r3, #12]
 8010304:	b29b      	uxth	r3, r3
 8010306:	4618      	mov	r0, r3
 8010308:	f7fc f962 	bl	800c5d0 <lwip_htons>
 801030c:	4603      	mov	r3, r0
 801030e:	b2db      	uxtb	r3, r3
 8010310:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010314:	b2da      	uxtb	r2, r3
 8010316:	4b34      	ldr	r3, [pc, #208]	; (80103e8 <tcp_input+0x2b4>)
 8010318:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	891a      	ldrh	r2, [r3, #8]
 801031e:	4b33      	ldr	r3, [pc, #204]	; (80103ec <tcp_input+0x2b8>)
 8010320:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8010322:	4b31      	ldr	r3, [pc, #196]	; (80103e8 <tcp_input+0x2b4>)
 8010324:	781b      	ldrb	r3, [r3, #0]
 8010326:	f003 0303 	and.w	r3, r3, #3
 801032a:	2b00      	cmp	r3, #0
 801032c:	d00c      	beq.n	8010348 <tcp_input+0x214>
    tcplen++;
 801032e:	4b2f      	ldr	r3, [pc, #188]	; (80103ec <tcp_input+0x2b8>)
 8010330:	881b      	ldrh	r3, [r3, #0]
 8010332:	3301      	adds	r3, #1
 8010334:	b29a      	uxth	r2, r3
 8010336:	4b2d      	ldr	r3, [pc, #180]	; (80103ec <tcp_input+0x2b8>)
 8010338:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	891a      	ldrh	r2, [r3, #8]
 801033e:	4b2b      	ldr	r3, [pc, #172]	; (80103ec <tcp_input+0x2b8>)
 8010340:	881b      	ldrh	r3, [r3, #0]
 8010342:	429a      	cmp	r2, r3
 8010344:	f200 82e6 	bhi.w	8010914 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8010348:	2300      	movs	r3, #0
 801034a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801034c:	4b28      	ldr	r3, [pc, #160]	; (80103f0 <tcp_input+0x2bc>)
 801034e:	681b      	ldr	r3, [r3, #0]
 8010350:	61fb      	str	r3, [r7, #28]
 8010352:	e09d      	b.n	8010490 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8010354:	69fb      	ldr	r3, [r7, #28]
 8010356:	7d1b      	ldrb	r3, [r3, #20]
 8010358:	2b00      	cmp	r3, #0
 801035a:	d105      	bne.n	8010368 <tcp_input+0x234>
 801035c:	4b15      	ldr	r3, [pc, #84]	; (80103b4 <tcp_input+0x280>)
 801035e:	22fb      	movs	r2, #251	; 0xfb
 8010360:	4924      	ldr	r1, [pc, #144]	; (80103f4 <tcp_input+0x2c0>)
 8010362:	4816      	ldr	r0, [pc, #88]	; (80103bc <tcp_input+0x288>)
 8010364:	f00a fa1e 	bl	801a7a4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8010368:	69fb      	ldr	r3, [r7, #28]
 801036a:	7d1b      	ldrb	r3, [r3, #20]
 801036c:	2b0a      	cmp	r3, #10
 801036e:	d105      	bne.n	801037c <tcp_input+0x248>
 8010370:	4b10      	ldr	r3, [pc, #64]	; (80103b4 <tcp_input+0x280>)
 8010372:	22fc      	movs	r2, #252	; 0xfc
 8010374:	4920      	ldr	r1, [pc, #128]	; (80103f8 <tcp_input+0x2c4>)
 8010376:	4811      	ldr	r0, [pc, #68]	; (80103bc <tcp_input+0x288>)
 8010378:	f00a fa14 	bl	801a7a4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 801037c:	69fb      	ldr	r3, [r7, #28]
 801037e:	7d1b      	ldrb	r3, [r3, #20]
 8010380:	2b01      	cmp	r3, #1
 8010382:	d105      	bne.n	8010390 <tcp_input+0x25c>
 8010384:	4b0b      	ldr	r3, [pc, #44]	; (80103b4 <tcp_input+0x280>)
 8010386:	22fd      	movs	r2, #253	; 0xfd
 8010388:	491c      	ldr	r1, [pc, #112]	; (80103fc <tcp_input+0x2c8>)
 801038a:	480c      	ldr	r0, [pc, #48]	; (80103bc <tcp_input+0x288>)
 801038c:	f00a fa0a 	bl	801a7a4 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010390:	69fb      	ldr	r3, [r7, #28]
 8010392:	7a1b      	ldrb	r3, [r3, #8]
 8010394:	2b00      	cmp	r3, #0
 8010396:	d033      	beq.n	8010400 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010398:	69fb      	ldr	r3, [r7, #28]
 801039a:	7a1a      	ldrb	r2, [r3, #8]
 801039c:	4b09      	ldr	r3, [pc, #36]	; (80103c4 <tcp_input+0x290>)
 801039e:	685b      	ldr	r3, [r3, #4]
 80103a0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80103a4:	3301      	adds	r3, #1
 80103a6:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80103a8:	429a      	cmp	r2, r3
 80103aa:	d029      	beq.n	8010400 <tcp_input+0x2cc>
      prev = pcb;
 80103ac:	69fb      	ldr	r3, [r7, #28]
 80103ae:	61bb      	str	r3, [r7, #24]
      continue;
 80103b0:	e06b      	b.n	801048a <tcp_input+0x356>
 80103b2:	bf00      	nop
 80103b4:	0801ce98 	.word	0x0801ce98
 80103b8:	0801cecc 	.word	0x0801cecc
 80103bc:	0801cee4 	.word	0x0801cee4
 80103c0:	2000bf48 	.word	0x2000bf48
 80103c4:	20008e00 	.word	0x20008e00
 80103c8:	2000bf4c 	.word	0x2000bf4c
 80103cc:	2000bf50 	.word	0x2000bf50
 80103d0:	2000bf4e 	.word	0x2000bf4e
 80103d4:	0801cf0c 	.word	0x0801cf0c
 80103d8:	0801cf1c 	.word	0x0801cf1c
 80103dc:	0801cf28 	.word	0x0801cf28
 80103e0:	2000bf58 	.word	0x2000bf58
 80103e4:	2000bf5c 	.word	0x2000bf5c
 80103e8:	2000bf64 	.word	0x2000bf64
 80103ec:	2000bf62 	.word	0x2000bf62
 80103f0:	2000bf2c 	.word	0x2000bf2c
 80103f4:	0801cf48 	.word	0x0801cf48
 80103f8:	0801cf70 	.word	0x0801cf70
 80103fc:	0801cf9c 	.word	0x0801cf9c
    }

    if (pcb->remote_port == tcphdr->src &&
 8010400:	69fb      	ldr	r3, [r7, #28]
 8010402:	8b1a      	ldrh	r2, [r3, #24]
 8010404:	4b72      	ldr	r3, [pc, #456]	; (80105d0 <tcp_input+0x49c>)
 8010406:	681b      	ldr	r3, [r3, #0]
 8010408:	881b      	ldrh	r3, [r3, #0]
 801040a:	b29b      	uxth	r3, r3
 801040c:	429a      	cmp	r2, r3
 801040e:	d13a      	bne.n	8010486 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8010410:	69fb      	ldr	r3, [r7, #28]
 8010412:	8ada      	ldrh	r2, [r3, #22]
 8010414:	4b6e      	ldr	r3, [pc, #440]	; (80105d0 <tcp_input+0x49c>)
 8010416:	681b      	ldr	r3, [r3, #0]
 8010418:	885b      	ldrh	r3, [r3, #2]
 801041a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 801041c:	429a      	cmp	r2, r3
 801041e:	d132      	bne.n	8010486 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010420:	69fb      	ldr	r3, [r7, #28]
 8010422:	685a      	ldr	r2, [r3, #4]
 8010424:	4b6b      	ldr	r3, [pc, #428]	; (80105d4 <tcp_input+0x4a0>)
 8010426:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8010428:	429a      	cmp	r2, r3
 801042a:	d12c      	bne.n	8010486 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801042c:	69fb      	ldr	r3, [r7, #28]
 801042e:	681a      	ldr	r2, [r3, #0]
 8010430:	4b68      	ldr	r3, [pc, #416]	; (80105d4 <tcp_input+0x4a0>)
 8010432:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010434:	429a      	cmp	r2, r3
 8010436:	d126      	bne.n	8010486 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8010438:	69fb      	ldr	r3, [r7, #28]
 801043a:	68db      	ldr	r3, [r3, #12]
 801043c:	69fa      	ldr	r2, [r7, #28]
 801043e:	429a      	cmp	r2, r3
 8010440:	d106      	bne.n	8010450 <tcp_input+0x31c>
 8010442:	4b65      	ldr	r3, [pc, #404]	; (80105d8 <tcp_input+0x4a4>)
 8010444:	f240 120d 	movw	r2, #269	; 0x10d
 8010448:	4964      	ldr	r1, [pc, #400]	; (80105dc <tcp_input+0x4a8>)
 801044a:	4865      	ldr	r0, [pc, #404]	; (80105e0 <tcp_input+0x4ac>)
 801044c:	f00a f9aa 	bl	801a7a4 <iprintf>
      if (prev != NULL) {
 8010450:	69bb      	ldr	r3, [r7, #24]
 8010452:	2b00      	cmp	r3, #0
 8010454:	d00a      	beq.n	801046c <tcp_input+0x338>
        prev->next = pcb->next;
 8010456:	69fb      	ldr	r3, [r7, #28]
 8010458:	68da      	ldr	r2, [r3, #12]
 801045a:	69bb      	ldr	r3, [r7, #24]
 801045c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 801045e:	4b61      	ldr	r3, [pc, #388]	; (80105e4 <tcp_input+0x4b0>)
 8010460:	681a      	ldr	r2, [r3, #0]
 8010462:	69fb      	ldr	r3, [r7, #28]
 8010464:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8010466:	4a5f      	ldr	r2, [pc, #380]	; (80105e4 <tcp_input+0x4b0>)
 8010468:	69fb      	ldr	r3, [r7, #28]
 801046a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 801046c:	69fb      	ldr	r3, [r7, #28]
 801046e:	68db      	ldr	r3, [r3, #12]
 8010470:	69fa      	ldr	r2, [r7, #28]
 8010472:	429a      	cmp	r2, r3
 8010474:	d111      	bne.n	801049a <tcp_input+0x366>
 8010476:	4b58      	ldr	r3, [pc, #352]	; (80105d8 <tcp_input+0x4a4>)
 8010478:	f240 1215 	movw	r2, #277	; 0x115
 801047c:	495a      	ldr	r1, [pc, #360]	; (80105e8 <tcp_input+0x4b4>)
 801047e:	4858      	ldr	r0, [pc, #352]	; (80105e0 <tcp_input+0x4ac>)
 8010480:	f00a f990 	bl	801a7a4 <iprintf>
      break;
 8010484:	e009      	b.n	801049a <tcp_input+0x366>
    }
    prev = pcb;
 8010486:	69fb      	ldr	r3, [r7, #28]
 8010488:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801048a:	69fb      	ldr	r3, [r7, #28]
 801048c:	68db      	ldr	r3, [r3, #12]
 801048e:	61fb      	str	r3, [r7, #28]
 8010490:	69fb      	ldr	r3, [r7, #28]
 8010492:	2b00      	cmp	r3, #0
 8010494:	f47f af5e 	bne.w	8010354 <tcp_input+0x220>
 8010498:	e000      	b.n	801049c <tcp_input+0x368>
      break;
 801049a:	bf00      	nop
  }

  if (pcb == NULL) {
 801049c:	69fb      	ldr	r3, [r7, #28]
 801049e:	2b00      	cmp	r3, #0
 80104a0:	f040 80aa 	bne.w	80105f8 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80104a4:	4b51      	ldr	r3, [pc, #324]	; (80105ec <tcp_input+0x4b8>)
 80104a6:	681b      	ldr	r3, [r3, #0]
 80104a8:	61fb      	str	r3, [r7, #28]
 80104aa:	e03f      	b.n	801052c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80104ac:	69fb      	ldr	r3, [r7, #28]
 80104ae:	7d1b      	ldrb	r3, [r3, #20]
 80104b0:	2b0a      	cmp	r3, #10
 80104b2:	d006      	beq.n	80104c2 <tcp_input+0x38e>
 80104b4:	4b48      	ldr	r3, [pc, #288]	; (80105d8 <tcp_input+0x4a4>)
 80104b6:	f240 121f 	movw	r2, #287	; 0x11f
 80104ba:	494d      	ldr	r1, [pc, #308]	; (80105f0 <tcp_input+0x4bc>)
 80104bc:	4848      	ldr	r0, [pc, #288]	; (80105e0 <tcp_input+0x4ac>)
 80104be:	f00a f971 	bl	801a7a4 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80104c2:	69fb      	ldr	r3, [r7, #28]
 80104c4:	7a1b      	ldrb	r3, [r3, #8]
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	d009      	beq.n	80104de <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80104ca:	69fb      	ldr	r3, [r7, #28]
 80104cc:	7a1a      	ldrb	r2, [r3, #8]
 80104ce:	4b41      	ldr	r3, [pc, #260]	; (80105d4 <tcp_input+0x4a0>)
 80104d0:	685b      	ldr	r3, [r3, #4]
 80104d2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80104d6:	3301      	adds	r3, #1
 80104d8:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80104da:	429a      	cmp	r2, r3
 80104dc:	d122      	bne.n	8010524 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80104de:	69fb      	ldr	r3, [r7, #28]
 80104e0:	8b1a      	ldrh	r2, [r3, #24]
 80104e2:	4b3b      	ldr	r3, [pc, #236]	; (80105d0 <tcp_input+0x49c>)
 80104e4:	681b      	ldr	r3, [r3, #0]
 80104e6:	881b      	ldrh	r3, [r3, #0]
 80104e8:	b29b      	uxth	r3, r3
 80104ea:	429a      	cmp	r2, r3
 80104ec:	d11b      	bne.n	8010526 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 80104ee:	69fb      	ldr	r3, [r7, #28]
 80104f0:	8ada      	ldrh	r2, [r3, #22]
 80104f2:	4b37      	ldr	r3, [pc, #220]	; (80105d0 <tcp_input+0x49c>)
 80104f4:	681b      	ldr	r3, [r3, #0]
 80104f6:	885b      	ldrh	r3, [r3, #2]
 80104f8:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80104fa:	429a      	cmp	r2, r3
 80104fc:	d113      	bne.n	8010526 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80104fe:	69fb      	ldr	r3, [r7, #28]
 8010500:	685a      	ldr	r2, [r3, #4]
 8010502:	4b34      	ldr	r3, [pc, #208]	; (80105d4 <tcp_input+0x4a0>)
 8010504:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8010506:	429a      	cmp	r2, r3
 8010508:	d10d      	bne.n	8010526 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801050a:	69fb      	ldr	r3, [r7, #28]
 801050c:	681a      	ldr	r2, [r3, #0]
 801050e:	4b31      	ldr	r3, [pc, #196]	; (80105d4 <tcp_input+0x4a0>)
 8010510:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010512:	429a      	cmp	r2, r3
 8010514:	d107      	bne.n	8010526 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8010516:	69f8      	ldr	r0, [r7, #28]
 8010518:	f000 fb56 	bl	8010bc8 <tcp_timewait_input>
        }
        pbuf_free(p);
 801051c:	6878      	ldr	r0, [r7, #4]
 801051e:	f7fd fcbb 	bl	800de98 <pbuf_free>
        return;
 8010522:	e1fd      	b.n	8010920 <tcp_input+0x7ec>
        continue;
 8010524:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010526:	69fb      	ldr	r3, [r7, #28]
 8010528:	68db      	ldr	r3, [r3, #12]
 801052a:	61fb      	str	r3, [r7, #28]
 801052c:	69fb      	ldr	r3, [r7, #28]
 801052e:	2b00      	cmp	r3, #0
 8010530:	d1bc      	bne.n	80104ac <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8010532:	2300      	movs	r3, #0
 8010534:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010536:	4b2f      	ldr	r3, [pc, #188]	; (80105f4 <tcp_input+0x4c0>)
 8010538:	681b      	ldr	r3, [r3, #0]
 801053a:	617b      	str	r3, [r7, #20]
 801053c:	e02a      	b.n	8010594 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801053e:	697b      	ldr	r3, [r7, #20]
 8010540:	7a1b      	ldrb	r3, [r3, #8]
 8010542:	2b00      	cmp	r3, #0
 8010544:	d00c      	beq.n	8010560 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010546:	697b      	ldr	r3, [r7, #20]
 8010548:	7a1a      	ldrb	r2, [r3, #8]
 801054a:	4b22      	ldr	r3, [pc, #136]	; (80105d4 <tcp_input+0x4a0>)
 801054c:	685b      	ldr	r3, [r3, #4]
 801054e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010552:	3301      	adds	r3, #1
 8010554:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8010556:	429a      	cmp	r2, r3
 8010558:	d002      	beq.n	8010560 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 801055a:	697b      	ldr	r3, [r7, #20]
 801055c:	61bb      	str	r3, [r7, #24]
        continue;
 801055e:	e016      	b.n	801058e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8010560:	697b      	ldr	r3, [r7, #20]
 8010562:	8ada      	ldrh	r2, [r3, #22]
 8010564:	4b1a      	ldr	r3, [pc, #104]	; (80105d0 <tcp_input+0x49c>)
 8010566:	681b      	ldr	r3, [r3, #0]
 8010568:	885b      	ldrh	r3, [r3, #2]
 801056a:	b29b      	uxth	r3, r3
 801056c:	429a      	cmp	r2, r3
 801056e:	d10c      	bne.n	801058a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8010570:	697b      	ldr	r3, [r7, #20]
 8010572:	681a      	ldr	r2, [r3, #0]
 8010574:	4b17      	ldr	r3, [pc, #92]	; (80105d4 <tcp_input+0x4a0>)
 8010576:	695b      	ldr	r3, [r3, #20]
 8010578:	429a      	cmp	r2, r3
 801057a:	d00f      	beq.n	801059c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 801057c:	697b      	ldr	r3, [r7, #20]
 801057e:	2b00      	cmp	r3, #0
 8010580:	d00d      	beq.n	801059e <tcp_input+0x46a>
 8010582:	697b      	ldr	r3, [r7, #20]
 8010584:	681b      	ldr	r3, [r3, #0]
 8010586:	2b00      	cmp	r3, #0
 8010588:	d009      	beq.n	801059e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 801058a:	697b      	ldr	r3, [r7, #20]
 801058c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801058e:	697b      	ldr	r3, [r7, #20]
 8010590:	68db      	ldr	r3, [r3, #12]
 8010592:	617b      	str	r3, [r7, #20]
 8010594:	697b      	ldr	r3, [r7, #20]
 8010596:	2b00      	cmp	r3, #0
 8010598:	d1d1      	bne.n	801053e <tcp_input+0x40a>
 801059a:	e000      	b.n	801059e <tcp_input+0x46a>
            break;
 801059c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 801059e:	697b      	ldr	r3, [r7, #20]
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d029      	beq.n	80105f8 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80105a4:	69bb      	ldr	r3, [r7, #24]
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	d00a      	beq.n	80105c0 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80105aa:	697b      	ldr	r3, [r7, #20]
 80105ac:	68da      	ldr	r2, [r3, #12]
 80105ae:	69bb      	ldr	r3, [r7, #24]
 80105b0:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80105b2:	4b10      	ldr	r3, [pc, #64]	; (80105f4 <tcp_input+0x4c0>)
 80105b4:	681a      	ldr	r2, [r3, #0]
 80105b6:	697b      	ldr	r3, [r7, #20]
 80105b8:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80105ba:	4a0e      	ldr	r2, [pc, #56]	; (80105f4 <tcp_input+0x4c0>)
 80105bc:	697b      	ldr	r3, [r7, #20]
 80105be:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80105c0:	6978      	ldr	r0, [r7, #20]
 80105c2:	f000 fa03 	bl	80109cc <tcp_listen_input>
      }
      pbuf_free(p);
 80105c6:	6878      	ldr	r0, [r7, #4]
 80105c8:	f7fd fc66 	bl	800de98 <pbuf_free>
      return;
 80105cc:	e1a8      	b.n	8010920 <tcp_input+0x7ec>
 80105ce:	bf00      	nop
 80105d0:	2000bf48 	.word	0x2000bf48
 80105d4:	20008e00 	.word	0x20008e00
 80105d8:	0801ce98 	.word	0x0801ce98
 80105dc:	0801cfc4 	.word	0x0801cfc4
 80105e0:	0801cee4 	.word	0x0801cee4
 80105e4:	2000bf2c 	.word	0x2000bf2c
 80105e8:	0801cff0 	.word	0x0801cff0
 80105ec:	2000bf30 	.word	0x2000bf30
 80105f0:	0801d01c 	.word	0x0801d01c
 80105f4:	2000bf28 	.word	0x2000bf28
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80105f8:	69fb      	ldr	r3, [r7, #28]
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	f000 8158 	beq.w	80108b0 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8010600:	4b95      	ldr	r3, [pc, #596]	; (8010858 <tcp_input+0x724>)
 8010602:	2200      	movs	r2, #0
 8010604:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	891a      	ldrh	r2, [r3, #8]
 801060a:	4b93      	ldr	r3, [pc, #588]	; (8010858 <tcp_input+0x724>)
 801060c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 801060e:	4a92      	ldr	r2, [pc, #584]	; (8010858 <tcp_input+0x724>)
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8010614:	4b91      	ldr	r3, [pc, #580]	; (801085c <tcp_input+0x728>)
 8010616:	681b      	ldr	r3, [r3, #0]
 8010618:	4a8f      	ldr	r2, [pc, #572]	; (8010858 <tcp_input+0x724>)
 801061a:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 801061c:	4b90      	ldr	r3, [pc, #576]	; (8010860 <tcp_input+0x72c>)
 801061e:	2200      	movs	r2, #0
 8010620:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8010622:	4b90      	ldr	r3, [pc, #576]	; (8010864 <tcp_input+0x730>)
 8010624:	2200      	movs	r2, #0
 8010626:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8010628:	4b8f      	ldr	r3, [pc, #572]	; (8010868 <tcp_input+0x734>)
 801062a:	2200      	movs	r2, #0
 801062c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 801062e:	4b8f      	ldr	r3, [pc, #572]	; (801086c <tcp_input+0x738>)
 8010630:	781b      	ldrb	r3, [r3, #0]
 8010632:	f003 0308 	and.w	r3, r3, #8
 8010636:	2b00      	cmp	r3, #0
 8010638:	d006      	beq.n	8010648 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	7b5b      	ldrb	r3, [r3, #13]
 801063e:	f043 0301 	orr.w	r3, r3, #1
 8010642:	b2da      	uxtb	r2, r3
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8010648:	69fb      	ldr	r3, [r7, #28]
 801064a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801064c:	2b00      	cmp	r3, #0
 801064e:	d017      	beq.n	8010680 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8010650:	69f8      	ldr	r0, [r7, #28]
 8010652:	f7ff f875 	bl	800f740 <tcp_process_refused_data>
 8010656:	4603      	mov	r3, r0
 8010658:	f113 0f0d 	cmn.w	r3, #13
 801065c:	d007      	beq.n	801066e <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801065e:	69fb      	ldr	r3, [r7, #28]
 8010660:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8010662:	2b00      	cmp	r3, #0
 8010664:	d00c      	beq.n	8010680 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8010666:	4b82      	ldr	r3, [pc, #520]	; (8010870 <tcp_input+0x73c>)
 8010668:	881b      	ldrh	r3, [r3, #0]
 801066a:	2b00      	cmp	r3, #0
 801066c:	d008      	beq.n	8010680 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 801066e:	69fb      	ldr	r3, [r7, #28]
 8010670:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010672:	2b00      	cmp	r3, #0
 8010674:	f040 80e3 	bne.w	801083e <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8010678:	69f8      	ldr	r0, [r7, #28]
 801067a:	f003 fe05 	bl	8014288 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 801067e:	e0de      	b.n	801083e <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8010680:	4a7c      	ldr	r2, [pc, #496]	; (8010874 <tcp_input+0x740>)
 8010682:	69fb      	ldr	r3, [r7, #28]
 8010684:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8010686:	69f8      	ldr	r0, [r7, #28]
 8010688:	f000 fb18 	bl	8010cbc <tcp_process>
 801068c:	4603      	mov	r3, r0
 801068e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8010690:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010694:	f113 0f0d 	cmn.w	r3, #13
 8010698:	f000 80d3 	beq.w	8010842 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 801069c:	4b71      	ldr	r3, [pc, #452]	; (8010864 <tcp_input+0x730>)
 801069e:	781b      	ldrb	r3, [r3, #0]
 80106a0:	f003 0308 	and.w	r3, r3, #8
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	d015      	beq.n	80106d4 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80106a8:	69fb      	ldr	r3, [r7, #28]
 80106aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	d008      	beq.n	80106c4 <tcp_input+0x590>
 80106b2:	69fb      	ldr	r3, [r7, #28]
 80106b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80106b8:	69fa      	ldr	r2, [r7, #28]
 80106ba:	6912      	ldr	r2, [r2, #16]
 80106bc:	f06f 010d 	mvn.w	r1, #13
 80106c0:	4610      	mov	r0, r2
 80106c2:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80106c4:	69f9      	ldr	r1, [r7, #28]
 80106c6:	486c      	ldr	r0, [pc, #432]	; (8010878 <tcp_input+0x744>)
 80106c8:	f7ff fbbc 	bl	800fe44 <tcp_pcb_remove>
        tcp_free(pcb);
 80106cc:	69f8      	ldr	r0, [r7, #28]
 80106ce:	f7fd feff 	bl	800e4d0 <tcp_free>
 80106d2:	e0da      	b.n	801088a <tcp_input+0x756>
      } else {
        err = ERR_OK;
 80106d4:	2300      	movs	r3, #0
 80106d6:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80106d8:	4b63      	ldr	r3, [pc, #396]	; (8010868 <tcp_input+0x734>)
 80106da:	881b      	ldrh	r3, [r3, #0]
 80106dc:	2b00      	cmp	r3, #0
 80106de:	d01d      	beq.n	801071c <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80106e0:	4b61      	ldr	r3, [pc, #388]	; (8010868 <tcp_input+0x734>)
 80106e2:	881b      	ldrh	r3, [r3, #0]
 80106e4:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80106e6:	69fb      	ldr	r3, [r7, #28]
 80106e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	d00a      	beq.n	8010706 <tcp_input+0x5d2>
 80106f0:	69fb      	ldr	r3, [r7, #28]
 80106f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80106f6:	69fa      	ldr	r2, [r7, #28]
 80106f8:	6910      	ldr	r0, [r2, #16]
 80106fa:	89fa      	ldrh	r2, [r7, #14]
 80106fc:	69f9      	ldr	r1, [r7, #28]
 80106fe:	4798      	blx	r3
 8010700:	4603      	mov	r3, r0
 8010702:	74fb      	strb	r3, [r7, #19]
 8010704:	e001      	b.n	801070a <tcp_input+0x5d6>
 8010706:	2300      	movs	r3, #0
 8010708:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801070a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801070e:	f113 0f0d 	cmn.w	r3, #13
 8010712:	f000 8098 	beq.w	8010846 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8010716:	4b54      	ldr	r3, [pc, #336]	; (8010868 <tcp_input+0x734>)
 8010718:	2200      	movs	r2, #0
 801071a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 801071c:	69f8      	ldr	r0, [r7, #28]
 801071e:	f000 f915 	bl	801094c <tcp_input_delayed_close>
 8010722:	4603      	mov	r3, r0
 8010724:	2b00      	cmp	r3, #0
 8010726:	f040 8090 	bne.w	801084a <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801072a:	4b4d      	ldr	r3, [pc, #308]	; (8010860 <tcp_input+0x72c>)
 801072c:	681b      	ldr	r3, [r3, #0]
 801072e:	2b00      	cmp	r3, #0
 8010730:	d041      	beq.n	80107b6 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8010732:	69fb      	ldr	r3, [r7, #28]
 8010734:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010736:	2b00      	cmp	r3, #0
 8010738:	d006      	beq.n	8010748 <tcp_input+0x614>
 801073a:	4b50      	ldr	r3, [pc, #320]	; (801087c <tcp_input+0x748>)
 801073c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8010740:	494f      	ldr	r1, [pc, #316]	; (8010880 <tcp_input+0x74c>)
 8010742:	4850      	ldr	r0, [pc, #320]	; (8010884 <tcp_input+0x750>)
 8010744:	f00a f82e 	bl	801a7a4 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8010748:	69fb      	ldr	r3, [r7, #28]
 801074a:	8b5b      	ldrh	r3, [r3, #26]
 801074c:	f003 0310 	and.w	r3, r3, #16
 8010750:	2b00      	cmp	r3, #0
 8010752:	d008      	beq.n	8010766 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8010754:	4b42      	ldr	r3, [pc, #264]	; (8010860 <tcp_input+0x72c>)
 8010756:	681b      	ldr	r3, [r3, #0]
 8010758:	4618      	mov	r0, r3
 801075a:	f7fd fb9d 	bl	800de98 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 801075e:	69f8      	ldr	r0, [r7, #28]
 8010760:	f7fe f99e 	bl	800eaa0 <tcp_abort>
            goto aborted;
 8010764:	e091      	b.n	801088a <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8010766:	69fb      	ldr	r3, [r7, #28]
 8010768:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801076c:	2b00      	cmp	r3, #0
 801076e:	d00c      	beq.n	801078a <tcp_input+0x656>
 8010770:	69fb      	ldr	r3, [r7, #28]
 8010772:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8010776:	69fb      	ldr	r3, [r7, #28]
 8010778:	6918      	ldr	r0, [r3, #16]
 801077a:	4b39      	ldr	r3, [pc, #228]	; (8010860 <tcp_input+0x72c>)
 801077c:	681a      	ldr	r2, [r3, #0]
 801077e:	2300      	movs	r3, #0
 8010780:	69f9      	ldr	r1, [r7, #28]
 8010782:	47a0      	blx	r4
 8010784:	4603      	mov	r3, r0
 8010786:	74fb      	strb	r3, [r7, #19]
 8010788:	e008      	b.n	801079c <tcp_input+0x668>
 801078a:	4b35      	ldr	r3, [pc, #212]	; (8010860 <tcp_input+0x72c>)
 801078c:	681a      	ldr	r2, [r3, #0]
 801078e:	2300      	movs	r3, #0
 8010790:	69f9      	ldr	r1, [r7, #28]
 8010792:	2000      	movs	r0, #0
 8010794:	f7ff f8aa 	bl	800f8ec <tcp_recv_null>
 8010798:	4603      	mov	r3, r0
 801079a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 801079c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80107a0:	f113 0f0d 	cmn.w	r3, #13
 80107a4:	d053      	beq.n	801084e <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80107a6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	d003      	beq.n	80107b6 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80107ae:	4b2c      	ldr	r3, [pc, #176]	; (8010860 <tcp_input+0x72c>)
 80107b0:	681a      	ldr	r2, [r3, #0]
 80107b2:	69fb      	ldr	r3, [r7, #28]
 80107b4:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80107b6:	4b2b      	ldr	r3, [pc, #172]	; (8010864 <tcp_input+0x730>)
 80107b8:	781b      	ldrb	r3, [r3, #0]
 80107ba:	f003 0320 	and.w	r3, r3, #32
 80107be:	2b00      	cmp	r3, #0
 80107c0:	d030      	beq.n	8010824 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 80107c2:	69fb      	ldr	r3, [r7, #28]
 80107c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	d009      	beq.n	80107de <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80107ca:	69fb      	ldr	r3, [r7, #28]
 80107cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80107ce:	7b5a      	ldrb	r2, [r3, #13]
 80107d0:	69fb      	ldr	r3, [r7, #28]
 80107d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80107d4:	f042 0220 	orr.w	r2, r2, #32
 80107d8:	b2d2      	uxtb	r2, r2
 80107da:	735a      	strb	r2, [r3, #13]
 80107dc:	e022      	b.n	8010824 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80107de:	69fb      	ldr	r3, [r7, #28]
 80107e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80107e2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80107e6:	d005      	beq.n	80107f4 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 80107e8:	69fb      	ldr	r3, [r7, #28]
 80107ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80107ec:	3301      	adds	r3, #1
 80107ee:	b29a      	uxth	r2, r3
 80107f0:	69fb      	ldr	r3, [r7, #28]
 80107f2:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80107f4:	69fb      	ldr	r3, [r7, #28]
 80107f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80107fa:	2b00      	cmp	r3, #0
 80107fc:	d00b      	beq.n	8010816 <tcp_input+0x6e2>
 80107fe:	69fb      	ldr	r3, [r7, #28]
 8010800:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8010804:	69fb      	ldr	r3, [r7, #28]
 8010806:	6918      	ldr	r0, [r3, #16]
 8010808:	2300      	movs	r3, #0
 801080a:	2200      	movs	r2, #0
 801080c:	69f9      	ldr	r1, [r7, #28]
 801080e:	47a0      	blx	r4
 8010810:	4603      	mov	r3, r0
 8010812:	74fb      	strb	r3, [r7, #19]
 8010814:	e001      	b.n	801081a <tcp_input+0x6e6>
 8010816:	2300      	movs	r3, #0
 8010818:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801081a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801081e:	f113 0f0d 	cmn.w	r3, #13
 8010822:	d016      	beq.n	8010852 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8010824:	4b13      	ldr	r3, [pc, #76]	; (8010874 <tcp_input+0x740>)
 8010826:	2200      	movs	r2, #0
 8010828:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801082a:	69f8      	ldr	r0, [r7, #28]
 801082c:	f000 f88e 	bl	801094c <tcp_input_delayed_close>
 8010830:	4603      	mov	r3, r0
 8010832:	2b00      	cmp	r3, #0
 8010834:	d128      	bne.n	8010888 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8010836:	69f8      	ldr	r0, [r7, #28]
 8010838:	f002 ff20 	bl	801367c <tcp_output>
 801083c:	e025      	b.n	801088a <tcp_input+0x756>
        goto aborted;
 801083e:	bf00      	nop
 8010840:	e023      	b.n	801088a <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8010842:	bf00      	nop
 8010844:	e021      	b.n	801088a <tcp_input+0x756>
              goto aborted;
 8010846:	bf00      	nop
 8010848:	e01f      	b.n	801088a <tcp_input+0x756>
          goto aborted;
 801084a:	bf00      	nop
 801084c:	e01d      	b.n	801088a <tcp_input+0x756>
            goto aborted;
 801084e:	bf00      	nop
 8010850:	e01b      	b.n	801088a <tcp_input+0x756>
              goto aborted;
 8010852:	bf00      	nop
 8010854:	e019      	b.n	801088a <tcp_input+0x756>
 8010856:	bf00      	nop
 8010858:	2000bf38 	.word	0x2000bf38
 801085c:	2000bf48 	.word	0x2000bf48
 8010860:	2000bf68 	.word	0x2000bf68
 8010864:	2000bf65 	.word	0x2000bf65
 8010868:	2000bf60 	.word	0x2000bf60
 801086c:	2000bf64 	.word	0x2000bf64
 8010870:	2000bf62 	.word	0x2000bf62
 8010874:	2000bf6c 	.word	0x2000bf6c
 8010878:	2000bf2c 	.word	0x2000bf2c
 801087c:	0801ce98 	.word	0x0801ce98
 8010880:	0801d04c 	.word	0x0801d04c
 8010884:	0801cee4 	.word	0x0801cee4
          goto aborted;
 8010888:	bf00      	nop
    tcp_input_pcb = NULL;
 801088a:	4b27      	ldr	r3, [pc, #156]	; (8010928 <tcp_input+0x7f4>)
 801088c:	2200      	movs	r2, #0
 801088e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8010890:	4b26      	ldr	r3, [pc, #152]	; (801092c <tcp_input+0x7f8>)
 8010892:	2200      	movs	r2, #0
 8010894:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8010896:	4b26      	ldr	r3, [pc, #152]	; (8010930 <tcp_input+0x7fc>)
 8010898:	685b      	ldr	r3, [r3, #4]
 801089a:	2b00      	cmp	r3, #0
 801089c:	d03f      	beq.n	801091e <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 801089e:	4b24      	ldr	r3, [pc, #144]	; (8010930 <tcp_input+0x7fc>)
 80108a0:	685b      	ldr	r3, [r3, #4]
 80108a2:	4618      	mov	r0, r3
 80108a4:	f7fd faf8 	bl	800de98 <pbuf_free>
      inseg.p = NULL;
 80108a8:	4b21      	ldr	r3, [pc, #132]	; (8010930 <tcp_input+0x7fc>)
 80108aa:	2200      	movs	r2, #0
 80108ac:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80108ae:	e036      	b.n	801091e <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80108b0:	4b20      	ldr	r3, [pc, #128]	; (8010934 <tcp_input+0x800>)
 80108b2:	681b      	ldr	r3, [r3, #0]
 80108b4:	899b      	ldrh	r3, [r3, #12]
 80108b6:	b29b      	uxth	r3, r3
 80108b8:	4618      	mov	r0, r3
 80108ba:	f7fb fe89 	bl	800c5d0 <lwip_htons>
 80108be:	4603      	mov	r3, r0
 80108c0:	b2db      	uxtb	r3, r3
 80108c2:	f003 0304 	and.w	r3, r3, #4
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	d118      	bne.n	80108fc <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80108ca:	4b1b      	ldr	r3, [pc, #108]	; (8010938 <tcp_input+0x804>)
 80108cc:	6819      	ldr	r1, [r3, #0]
 80108ce:	4b1b      	ldr	r3, [pc, #108]	; (801093c <tcp_input+0x808>)
 80108d0:	881b      	ldrh	r3, [r3, #0]
 80108d2:	461a      	mov	r2, r3
 80108d4:	4b1a      	ldr	r3, [pc, #104]	; (8010940 <tcp_input+0x80c>)
 80108d6:	681b      	ldr	r3, [r3, #0]
 80108d8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80108da:	4b16      	ldr	r3, [pc, #88]	; (8010934 <tcp_input+0x800>)
 80108dc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80108de:	885b      	ldrh	r3, [r3, #2]
 80108e0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80108e2:	4a14      	ldr	r2, [pc, #80]	; (8010934 <tcp_input+0x800>)
 80108e4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80108e6:	8812      	ldrh	r2, [r2, #0]
 80108e8:	b292      	uxth	r2, r2
 80108ea:	9202      	str	r2, [sp, #8]
 80108ec:	9301      	str	r3, [sp, #4]
 80108ee:	4b15      	ldr	r3, [pc, #84]	; (8010944 <tcp_input+0x810>)
 80108f0:	9300      	str	r3, [sp, #0]
 80108f2:	4b15      	ldr	r3, [pc, #84]	; (8010948 <tcp_input+0x814>)
 80108f4:	4602      	mov	r2, r0
 80108f6:	2000      	movs	r0, #0
 80108f8:	f003 fc74 	bl	80141e4 <tcp_rst>
    pbuf_free(p);
 80108fc:	6878      	ldr	r0, [r7, #4]
 80108fe:	f7fd facb 	bl	800de98 <pbuf_free>
  return;
 8010902:	e00c      	b.n	801091e <tcp_input+0x7ea>
    goto dropped;
 8010904:	bf00      	nop
 8010906:	e006      	b.n	8010916 <tcp_input+0x7e2>
    goto dropped;
 8010908:	bf00      	nop
 801090a:	e004      	b.n	8010916 <tcp_input+0x7e2>
    goto dropped;
 801090c:	bf00      	nop
 801090e:	e002      	b.n	8010916 <tcp_input+0x7e2>
      goto dropped;
 8010910:	bf00      	nop
 8010912:	e000      	b.n	8010916 <tcp_input+0x7e2>
      goto dropped;
 8010914:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8010916:	6878      	ldr	r0, [r7, #4]
 8010918:	f7fd fabe 	bl	800de98 <pbuf_free>
 801091c:	e000      	b.n	8010920 <tcp_input+0x7ec>
  return;
 801091e:	bf00      	nop
}
 8010920:	3724      	adds	r7, #36	; 0x24
 8010922:	46bd      	mov	sp, r7
 8010924:	bd90      	pop	{r4, r7, pc}
 8010926:	bf00      	nop
 8010928:	2000bf6c 	.word	0x2000bf6c
 801092c:	2000bf68 	.word	0x2000bf68
 8010930:	2000bf38 	.word	0x2000bf38
 8010934:	2000bf48 	.word	0x2000bf48
 8010938:	2000bf5c 	.word	0x2000bf5c
 801093c:	2000bf62 	.word	0x2000bf62
 8010940:	2000bf58 	.word	0x2000bf58
 8010944:	20008e10 	.word	0x20008e10
 8010948:	20008e14 	.word	0x20008e14

0801094c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 801094c:	b580      	push	{r7, lr}
 801094e:	b082      	sub	sp, #8
 8010950:	af00      	add	r7, sp, #0
 8010952:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	2b00      	cmp	r3, #0
 8010958:	d106      	bne.n	8010968 <tcp_input_delayed_close+0x1c>
 801095a:	4b17      	ldr	r3, [pc, #92]	; (80109b8 <tcp_input_delayed_close+0x6c>)
 801095c:	f240 225a 	movw	r2, #602	; 0x25a
 8010960:	4916      	ldr	r1, [pc, #88]	; (80109bc <tcp_input_delayed_close+0x70>)
 8010962:	4817      	ldr	r0, [pc, #92]	; (80109c0 <tcp_input_delayed_close+0x74>)
 8010964:	f009 ff1e 	bl	801a7a4 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8010968:	4b16      	ldr	r3, [pc, #88]	; (80109c4 <tcp_input_delayed_close+0x78>)
 801096a:	781b      	ldrb	r3, [r3, #0]
 801096c:	f003 0310 	and.w	r3, r3, #16
 8010970:	2b00      	cmp	r3, #0
 8010972:	d01c      	beq.n	80109ae <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	8b5b      	ldrh	r3, [r3, #26]
 8010978:	f003 0310 	and.w	r3, r3, #16
 801097c:	2b00      	cmp	r3, #0
 801097e:	d10d      	bne.n	801099c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010986:	2b00      	cmp	r3, #0
 8010988:	d008      	beq.n	801099c <tcp_input_delayed_close+0x50>
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010990:	687a      	ldr	r2, [r7, #4]
 8010992:	6912      	ldr	r2, [r2, #16]
 8010994:	f06f 010e 	mvn.w	r1, #14
 8010998:	4610      	mov	r0, r2
 801099a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801099c:	6879      	ldr	r1, [r7, #4]
 801099e:	480a      	ldr	r0, [pc, #40]	; (80109c8 <tcp_input_delayed_close+0x7c>)
 80109a0:	f7ff fa50 	bl	800fe44 <tcp_pcb_remove>
    tcp_free(pcb);
 80109a4:	6878      	ldr	r0, [r7, #4]
 80109a6:	f7fd fd93 	bl	800e4d0 <tcp_free>
    return 1;
 80109aa:	2301      	movs	r3, #1
 80109ac:	e000      	b.n	80109b0 <tcp_input_delayed_close+0x64>
  }
  return 0;
 80109ae:	2300      	movs	r3, #0
}
 80109b0:	4618      	mov	r0, r3
 80109b2:	3708      	adds	r7, #8
 80109b4:	46bd      	mov	sp, r7
 80109b6:	bd80      	pop	{r7, pc}
 80109b8:	0801ce98 	.word	0x0801ce98
 80109bc:	0801d068 	.word	0x0801d068
 80109c0:	0801cee4 	.word	0x0801cee4
 80109c4:	2000bf65 	.word	0x2000bf65
 80109c8:	2000bf2c 	.word	0x2000bf2c

080109cc <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80109cc:	b590      	push	{r4, r7, lr}
 80109ce:	b08b      	sub	sp, #44	; 0x2c
 80109d0:	af04      	add	r7, sp, #16
 80109d2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80109d4:	4b6f      	ldr	r3, [pc, #444]	; (8010b94 <tcp_listen_input+0x1c8>)
 80109d6:	781b      	ldrb	r3, [r3, #0]
 80109d8:	f003 0304 	and.w	r3, r3, #4
 80109dc:	2b00      	cmp	r3, #0
 80109de:	f040 80d2 	bne.w	8010b86 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	d106      	bne.n	80109f6 <tcp_listen_input+0x2a>
 80109e8:	4b6b      	ldr	r3, [pc, #428]	; (8010b98 <tcp_listen_input+0x1cc>)
 80109ea:	f240 2281 	movw	r2, #641	; 0x281
 80109ee:	496b      	ldr	r1, [pc, #428]	; (8010b9c <tcp_listen_input+0x1d0>)
 80109f0:	486b      	ldr	r0, [pc, #428]	; (8010ba0 <tcp_listen_input+0x1d4>)
 80109f2:	f009 fed7 	bl	801a7a4 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80109f6:	4b67      	ldr	r3, [pc, #412]	; (8010b94 <tcp_listen_input+0x1c8>)
 80109f8:	781b      	ldrb	r3, [r3, #0]
 80109fa:	f003 0310 	and.w	r3, r3, #16
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	d019      	beq.n	8010a36 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010a02:	4b68      	ldr	r3, [pc, #416]	; (8010ba4 <tcp_listen_input+0x1d8>)
 8010a04:	6819      	ldr	r1, [r3, #0]
 8010a06:	4b68      	ldr	r3, [pc, #416]	; (8010ba8 <tcp_listen_input+0x1dc>)
 8010a08:	881b      	ldrh	r3, [r3, #0]
 8010a0a:	461a      	mov	r2, r3
 8010a0c:	4b67      	ldr	r3, [pc, #412]	; (8010bac <tcp_listen_input+0x1e0>)
 8010a0e:	681b      	ldr	r3, [r3, #0]
 8010a10:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010a12:	4b67      	ldr	r3, [pc, #412]	; (8010bb0 <tcp_listen_input+0x1e4>)
 8010a14:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010a16:	885b      	ldrh	r3, [r3, #2]
 8010a18:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010a1a:	4a65      	ldr	r2, [pc, #404]	; (8010bb0 <tcp_listen_input+0x1e4>)
 8010a1c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010a1e:	8812      	ldrh	r2, [r2, #0]
 8010a20:	b292      	uxth	r2, r2
 8010a22:	9202      	str	r2, [sp, #8]
 8010a24:	9301      	str	r3, [sp, #4]
 8010a26:	4b63      	ldr	r3, [pc, #396]	; (8010bb4 <tcp_listen_input+0x1e8>)
 8010a28:	9300      	str	r3, [sp, #0]
 8010a2a:	4b63      	ldr	r3, [pc, #396]	; (8010bb8 <tcp_listen_input+0x1ec>)
 8010a2c:	4602      	mov	r2, r0
 8010a2e:	6878      	ldr	r0, [r7, #4]
 8010a30:	f003 fbd8 	bl	80141e4 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8010a34:	e0a9      	b.n	8010b8a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8010a36:	4b57      	ldr	r3, [pc, #348]	; (8010b94 <tcp_listen_input+0x1c8>)
 8010a38:	781b      	ldrb	r3, [r3, #0]
 8010a3a:	f003 0302 	and.w	r3, r3, #2
 8010a3e:	2b00      	cmp	r3, #0
 8010a40:	f000 80a3 	beq.w	8010b8a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	7d5b      	ldrb	r3, [r3, #21]
 8010a48:	4618      	mov	r0, r3
 8010a4a:	f7ff f873 	bl	800fb34 <tcp_alloc>
 8010a4e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8010a50:	697b      	ldr	r3, [r7, #20]
 8010a52:	2b00      	cmp	r3, #0
 8010a54:	d111      	bne.n	8010a7a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	699b      	ldr	r3, [r3, #24]
 8010a5a:	2b00      	cmp	r3, #0
 8010a5c:	d00a      	beq.n	8010a74 <tcp_listen_input+0xa8>
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	699b      	ldr	r3, [r3, #24]
 8010a62:	687a      	ldr	r2, [r7, #4]
 8010a64:	6910      	ldr	r0, [r2, #16]
 8010a66:	f04f 32ff 	mov.w	r2, #4294967295
 8010a6a:	2100      	movs	r1, #0
 8010a6c:	4798      	blx	r3
 8010a6e:	4603      	mov	r3, r0
 8010a70:	73bb      	strb	r3, [r7, #14]
      return;
 8010a72:	e08b      	b.n	8010b8c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8010a74:	23f0      	movs	r3, #240	; 0xf0
 8010a76:	73bb      	strb	r3, [r7, #14]
      return;
 8010a78:	e088      	b.n	8010b8c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8010a7a:	4b50      	ldr	r3, [pc, #320]	; (8010bbc <tcp_listen_input+0x1f0>)
 8010a7c:	695a      	ldr	r2, [r3, #20]
 8010a7e:	697b      	ldr	r3, [r7, #20]
 8010a80:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8010a82:	4b4e      	ldr	r3, [pc, #312]	; (8010bbc <tcp_listen_input+0x1f0>)
 8010a84:	691a      	ldr	r2, [r3, #16]
 8010a86:	697b      	ldr	r3, [r7, #20]
 8010a88:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	8ada      	ldrh	r2, [r3, #22]
 8010a8e:	697b      	ldr	r3, [r7, #20]
 8010a90:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8010a92:	4b47      	ldr	r3, [pc, #284]	; (8010bb0 <tcp_listen_input+0x1e4>)
 8010a94:	681b      	ldr	r3, [r3, #0]
 8010a96:	881b      	ldrh	r3, [r3, #0]
 8010a98:	b29a      	uxth	r2, r3
 8010a9a:	697b      	ldr	r3, [r7, #20]
 8010a9c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8010a9e:	697b      	ldr	r3, [r7, #20]
 8010aa0:	2203      	movs	r2, #3
 8010aa2:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8010aa4:	4b41      	ldr	r3, [pc, #260]	; (8010bac <tcp_listen_input+0x1e0>)
 8010aa6:	681b      	ldr	r3, [r3, #0]
 8010aa8:	1c5a      	adds	r2, r3, #1
 8010aaa:	697b      	ldr	r3, [r7, #20]
 8010aac:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8010aae:	697b      	ldr	r3, [r7, #20]
 8010ab0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010ab2:	697b      	ldr	r3, [r7, #20]
 8010ab4:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8010ab6:	6978      	ldr	r0, [r7, #20]
 8010ab8:	f7ff fa58 	bl	800ff6c <tcp_next_iss>
 8010abc:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8010abe:	697b      	ldr	r3, [r7, #20]
 8010ac0:	693a      	ldr	r2, [r7, #16]
 8010ac2:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8010ac4:	697b      	ldr	r3, [r7, #20]
 8010ac6:	693a      	ldr	r2, [r7, #16]
 8010ac8:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8010aca:	697b      	ldr	r3, [r7, #20]
 8010acc:	693a      	ldr	r2, [r7, #16]
 8010ace:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8010ad0:	697b      	ldr	r3, [r7, #20]
 8010ad2:	693a      	ldr	r2, [r7, #16]
 8010ad4:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8010ad6:	4b35      	ldr	r3, [pc, #212]	; (8010bac <tcp_listen_input+0x1e0>)
 8010ad8:	681b      	ldr	r3, [r3, #0]
 8010ada:	1e5a      	subs	r2, r3, #1
 8010adc:	697b      	ldr	r3, [r7, #20]
 8010ade:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	691a      	ldr	r2, [r3, #16]
 8010ae4:	697b      	ldr	r3, [r7, #20]
 8010ae6:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8010ae8:	697b      	ldr	r3, [r7, #20]
 8010aea:	687a      	ldr	r2, [r7, #4]
 8010aec:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	7a5b      	ldrb	r3, [r3, #9]
 8010af2:	f003 030c 	and.w	r3, r3, #12
 8010af6:	b2da      	uxtb	r2, r3
 8010af8:	697b      	ldr	r3, [r7, #20]
 8010afa:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	7a1a      	ldrb	r2, [r3, #8]
 8010b00:	697b      	ldr	r3, [r7, #20]
 8010b02:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8010b04:	4b2e      	ldr	r3, [pc, #184]	; (8010bc0 <tcp_listen_input+0x1f4>)
 8010b06:	681a      	ldr	r2, [r3, #0]
 8010b08:	697b      	ldr	r3, [r7, #20]
 8010b0a:	60da      	str	r2, [r3, #12]
 8010b0c:	4a2c      	ldr	r2, [pc, #176]	; (8010bc0 <tcp_listen_input+0x1f4>)
 8010b0e:	697b      	ldr	r3, [r7, #20]
 8010b10:	6013      	str	r3, [r2, #0]
 8010b12:	f003 fd29 	bl	8014568 <tcp_timer_needed>
 8010b16:	4b2b      	ldr	r3, [pc, #172]	; (8010bc4 <tcp_listen_input+0x1f8>)
 8010b18:	2201      	movs	r2, #1
 8010b1a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8010b1c:	6978      	ldr	r0, [r7, #20]
 8010b1e:	f001 fd8f 	bl	8012640 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8010b22:	4b23      	ldr	r3, [pc, #140]	; (8010bb0 <tcp_listen_input+0x1e4>)
 8010b24:	681b      	ldr	r3, [r3, #0]
 8010b26:	89db      	ldrh	r3, [r3, #14]
 8010b28:	b29a      	uxth	r2, r3
 8010b2a:	697b      	ldr	r3, [r7, #20]
 8010b2c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8010b30:	697b      	ldr	r3, [r7, #20]
 8010b32:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010b36:	697b      	ldr	r3, [r7, #20]
 8010b38:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8010b3c:	697b      	ldr	r3, [r7, #20]
 8010b3e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8010b40:	697b      	ldr	r3, [r7, #20]
 8010b42:	3304      	adds	r3, #4
 8010b44:	4618      	mov	r0, r3
 8010b46:	f007 fad7 	bl	80180f8 <ip4_route>
 8010b4a:	4601      	mov	r1, r0
 8010b4c:	697b      	ldr	r3, [r7, #20]
 8010b4e:	3304      	adds	r3, #4
 8010b50:	461a      	mov	r2, r3
 8010b52:	4620      	mov	r0, r4
 8010b54:	f7ff fa30 	bl	800ffb8 <tcp_eff_send_mss_netif>
 8010b58:	4603      	mov	r3, r0
 8010b5a:	461a      	mov	r2, r3
 8010b5c:	697b      	ldr	r3, [r7, #20]
 8010b5e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8010b60:	2112      	movs	r1, #18
 8010b62:	6978      	ldr	r0, [r7, #20]
 8010b64:	f002 fc9c 	bl	80134a0 <tcp_enqueue_flags>
 8010b68:	4603      	mov	r3, r0
 8010b6a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8010b6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010b70:	2b00      	cmp	r3, #0
 8010b72:	d004      	beq.n	8010b7e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8010b74:	2100      	movs	r1, #0
 8010b76:	6978      	ldr	r0, [r7, #20]
 8010b78:	f7fd fed4 	bl	800e924 <tcp_abandon>
      return;
 8010b7c:	e006      	b.n	8010b8c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8010b7e:	6978      	ldr	r0, [r7, #20]
 8010b80:	f002 fd7c 	bl	801367c <tcp_output>
  return;
 8010b84:	e001      	b.n	8010b8a <tcp_listen_input+0x1be>
    return;
 8010b86:	bf00      	nop
 8010b88:	e000      	b.n	8010b8c <tcp_listen_input+0x1c0>
  return;
 8010b8a:	bf00      	nop
}
 8010b8c:	371c      	adds	r7, #28
 8010b8e:	46bd      	mov	sp, r7
 8010b90:	bd90      	pop	{r4, r7, pc}
 8010b92:	bf00      	nop
 8010b94:	2000bf64 	.word	0x2000bf64
 8010b98:	0801ce98 	.word	0x0801ce98
 8010b9c:	0801d090 	.word	0x0801d090
 8010ba0:	0801cee4 	.word	0x0801cee4
 8010ba4:	2000bf5c 	.word	0x2000bf5c
 8010ba8:	2000bf62 	.word	0x2000bf62
 8010bac:	2000bf58 	.word	0x2000bf58
 8010bb0:	2000bf48 	.word	0x2000bf48
 8010bb4:	20008e10 	.word	0x20008e10
 8010bb8:	20008e14 	.word	0x20008e14
 8010bbc:	20008e00 	.word	0x20008e00
 8010bc0:	2000bf2c 	.word	0x2000bf2c
 8010bc4:	2000bf34 	.word	0x2000bf34

08010bc8 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8010bc8:	b580      	push	{r7, lr}
 8010bca:	b086      	sub	sp, #24
 8010bcc:	af04      	add	r7, sp, #16
 8010bce:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8010bd0:	4b2f      	ldr	r3, [pc, #188]	; (8010c90 <tcp_timewait_input+0xc8>)
 8010bd2:	781b      	ldrb	r3, [r3, #0]
 8010bd4:	f003 0304 	and.w	r3, r3, #4
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	d153      	bne.n	8010c84 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d106      	bne.n	8010bf0 <tcp_timewait_input+0x28>
 8010be2:	4b2c      	ldr	r3, [pc, #176]	; (8010c94 <tcp_timewait_input+0xcc>)
 8010be4:	f240 22ee 	movw	r2, #750	; 0x2ee
 8010be8:	492b      	ldr	r1, [pc, #172]	; (8010c98 <tcp_timewait_input+0xd0>)
 8010bea:	482c      	ldr	r0, [pc, #176]	; (8010c9c <tcp_timewait_input+0xd4>)
 8010bec:	f009 fdda 	bl	801a7a4 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8010bf0:	4b27      	ldr	r3, [pc, #156]	; (8010c90 <tcp_timewait_input+0xc8>)
 8010bf2:	781b      	ldrb	r3, [r3, #0]
 8010bf4:	f003 0302 	and.w	r3, r3, #2
 8010bf8:	2b00      	cmp	r3, #0
 8010bfa:	d02a      	beq.n	8010c52 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8010bfc:	4b28      	ldr	r3, [pc, #160]	; (8010ca0 <tcp_timewait_input+0xd8>)
 8010bfe:	681a      	ldr	r2, [r3, #0]
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c04:	1ad3      	subs	r3, r2, r3
 8010c06:	2b00      	cmp	r3, #0
 8010c08:	db2d      	blt.n	8010c66 <tcp_timewait_input+0x9e>
 8010c0a:	4b25      	ldr	r3, [pc, #148]	; (8010ca0 <tcp_timewait_input+0xd8>)
 8010c0c:	681a      	ldr	r2, [r3, #0]
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c12:	6879      	ldr	r1, [r7, #4]
 8010c14:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010c16:	440b      	add	r3, r1
 8010c18:	1ad3      	subs	r3, r2, r3
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	dc23      	bgt.n	8010c66 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010c1e:	4b21      	ldr	r3, [pc, #132]	; (8010ca4 <tcp_timewait_input+0xdc>)
 8010c20:	6819      	ldr	r1, [r3, #0]
 8010c22:	4b21      	ldr	r3, [pc, #132]	; (8010ca8 <tcp_timewait_input+0xe0>)
 8010c24:	881b      	ldrh	r3, [r3, #0]
 8010c26:	461a      	mov	r2, r3
 8010c28:	4b1d      	ldr	r3, [pc, #116]	; (8010ca0 <tcp_timewait_input+0xd8>)
 8010c2a:	681b      	ldr	r3, [r3, #0]
 8010c2c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010c2e:	4b1f      	ldr	r3, [pc, #124]	; (8010cac <tcp_timewait_input+0xe4>)
 8010c30:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010c32:	885b      	ldrh	r3, [r3, #2]
 8010c34:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010c36:	4a1d      	ldr	r2, [pc, #116]	; (8010cac <tcp_timewait_input+0xe4>)
 8010c38:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010c3a:	8812      	ldrh	r2, [r2, #0]
 8010c3c:	b292      	uxth	r2, r2
 8010c3e:	9202      	str	r2, [sp, #8]
 8010c40:	9301      	str	r3, [sp, #4]
 8010c42:	4b1b      	ldr	r3, [pc, #108]	; (8010cb0 <tcp_timewait_input+0xe8>)
 8010c44:	9300      	str	r3, [sp, #0]
 8010c46:	4b1b      	ldr	r3, [pc, #108]	; (8010cb4 <tcp_timewait_input+0xec>)
 8010c48:	4602      	mov	r2, r0
 8010c4a:	6878      	ldr	r0, [r7, #4]
 8010c4c:	f003 faca 	bl	80141e4 <tcp_rst>
      return;
 8010c50:	e01b      	b.n	8010c8a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8010c52:	4b0f      	ldr	r3, [pc, #60]	; (8010c90 <tcp_timewait_input+0xc8>)
 8010c54:	781b      	ldrb	r3, [r3, #0]
 8010c56:	f003 0301 	and.w	r3, r3, #1
 8010c5a:	2b00      	cmp	r3, #0
 8010c5c:	d003      	beq.n	8010c66 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8010c5e:	4b16      	ldr	r3, [pc, #88]	; (8010cb8 <tcp_timewait_input+0xf0>)
 8010c60:	681a      	ldr	r2, [r3, #0]
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8010c66:	4b10      	ldr	r3, [pc, #64]	; (8010ca8 <tcp_timewait_input+0xe0>)
 8010c68:	881b      	ldrh	r3, [r3, #0]
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	d00c      	beq.n	8010c88 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	8b5b      	ldrh	r3, [r3, #26]
 8010c72:	f043 0302 	orr.w	r3, r3, #2
 8010c76:	b29a      	uxth	r2, r3
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8010c7c:	6878      	ldr	r0, [r7, #4]
 8010c7e:	f002 fcfd 	bl	801367c <tcp_output>
  }
  return;
 8010c82:	e001      	b.n	8010c88 <tcp_timewait_input+0xc0>
    return;
 8010c84:	bf00      	nop
 8010c86:	e000      	b.n	8010c8a <tcp_timewait_input+0xc2>
  return;
 8010c88:	bf00      	nop
}
 8010c8a:	3708      	adds	r7, #8
 8010c8c:	46bd      	mov	sp, r7
 8010c8e:	bd80      	pop	{r7, pc}
 8010c90:	2000bf64 	.word	0x2000bf64
 8010c94:	0801ce98 	.word	0x0801ce98
 8010c98:	0801d0b0 	.word	0x0801d0b0
 8010c9c:	0801cee4 	.word	0x0801cee4
 8010ca0:	2000bf58 	.word	0x2000bf58
 8010ca4:	2000bf5c 	.word	0x2000bf5c
 8010ca8:	2000bf62 	.word	0x2000bf62
 8010cac:	2000bf48 	.word	0x2000bf48
 8010cb0:	20008e10 	.word	0x20008e10
 8010cb4:	20008e14 	.word	0x20008e14
 8010cb8:	2000bf20 	.word	0x2000bf20

08010cbc <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8010cbc:	b590      	push	{r4, r7, lr}
 8010cbe:	b08d      	sub	sp, #52	; 0x34
 8010cc0:	af04      	add	r7, sp, #16
 8010cc2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8010cc4:	2300      	movs	r3, #0
 8010cc6:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8010cc8:	2300      	movs	r3, #0
 8010cca:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	d106      	bne.n	8010ce0 <tcp_process+0x24>
 8010cd2:	4b9d      	ldr	r3, [pc, #628]	; (8010f48 <tcp_process+0x28c>)
 8010cd4:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8010cd8:	499c      	ldr	r1, [pc, #624]	; (8010f4c <tcp_process+0x290>)
 8010cda:	489d      	ldr	r0, [pc, #628]	; (8010f50 <tcp_process+0x294>)
 8010cdc:	f009 fd62 	bl	801a7a4 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8010ce0:	4b9c      	ldr	r3, [pc, #624]	; (8010f54 <tcp_process+0x298>)
 8010ce2:	781b      	ldrb	r3, [r3, #0]
 8010ce4:	f003 0304 	and.w	r3, r3, #4
 8010ce8:	2b00      	cmp	r3, #0
 8010cea:	d04e      	beq.n	8010d8a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	7d1b      	ldrb	r3, [r3, #20]
 8010cf0:	2b02      	cmp	r3, #2
 8010cf2:	d108      	bne.n	8010d06 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010cf8:	4b97      	ldr	r3, [pc, #604]	; (8010f58 <tcp_process+0x29c>)
 8010cfa:	681b      	ldr	r3, [r3, #0]
 8010cfc:	429a      	cmp	r2, r3
 8010cfe:	d123      	bne.n	8010d48 <tcp_process+0x8c>
        acceptable = 1;
 8010d00:	2301      	movs	r3, #1
 8010d02:	76fb      	strb	r3, [r7, #27]
 8010d04:	e020      	b.n	8010d48 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010d0a:	4b94      	ldr	r3, [pc, #592]	; (8010f5c <tcp_process+0x2a0>)
 8010d0c:	681b      	ldr	r3, [r3, #0]
 8010d0e:	429a      	cmp	r2, r3
 8010d10:	d102      	bne.n	8010d18 <tcp_process+0x5c>
        acceptable = 1;
 8010d12:	2301      	movs	r3, #1
 8010d14:	76fb      	strb	r3, [r7, #27]
 8010d16:	e017      	b.n	8010d48 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010d18:	4b90      	ldr	r3, [pc, #576]	; (8010f5c <tcp_process+0x2a0>)
 8010d1a:	681a      	ldr	r2, [r3, #0]
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d20:	1ad3      	subs	r3, r2, r3
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	db10      	blt.n	8010d48 <tcp_process+0x8c>
 8010d26:	4b8d      	ldr	r3, [pc, #564]	; (8010f5c <tcp_process+0x2a0>)
 8010d28:	681a      	ldr	r2, [r3, #0]
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d2e:	6879      	ldr	r1, [r7, #4]
 8010d30:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010d32:	440b      	add	r3, r1
 8010d34:	1ad3      	subs	r3, r2, r3
 8010d36:	2b00      	cmp	r3, #0
 8010d38:	dc06      	bgt.n	8010d48 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	8b5b      	ldrh	r3, [r3, #26]
 8010d3e:	f043 0302 	orr.w	r3, r3, #2
 8010d42:	b29a      	uxth	r2, r3
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8010d48:	7efb      	ldrb	r3, [r7, #27]
 8010d4a:	2b00      	cmp	r3, #0
 8010d4c:	d01b      	beq.n	8010d86 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	7d1b      	ldrb	r3, [r3, #20]
 8010d52:	2b00      	cmp	r3, #0
 8010d54:	d106      	bne.n	8010d64 <tcp_process+0xa8>
 8010d56:	4b7c      	ldr	r3, [pc, #496]	; (8010f48 <tcp_process+0x28c>)
 8010d58:	f44f 724e 	mov.w	r2, #824	; 0x338
 8010d5c:	4980      	ldr	r1, [pc, #512]	; (8010f60 <tcp_process+0x2a4>)
 8010d5e:	487c      	ldr	r0, [pc, #496]	; (8010f50 <tcp_process+0x294>)
 8010d60:	f009 fd20 	bl	801a7a4 <iprintf>
      recv_flags |= TF_RESET;
 8010d64:	4b7f      	ldr	r3, [pc, #508]	; (8010f64 <tcp_process+0x2a8>)
 8010d66:	781b      	ldrb	r3, [r3, #0]
 8010d68:	f043 0308 	orr.w	r3, r3, #8
 8010d6c:	b2da      	uxtb	r2, r3
 8010d6e:	4b7d      	ldr	r3, [pc, #500]	; (8010f64 <tcp_process+0x2a8>)
 8010d70:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	8b5b      	ldrh	r3, [r3, #26]
 8010d76:	f023 0301 	bic.w	r3, r3, #1
 8010d7a:	b29a      	uxth	r2, r3
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8010d80:	f06f 030d 	mvn.w	r3, #13
 8010d84:	e37a      	b.n	801147c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8010d86:	2300      	movs	r3, #0
 8010d88:	e378      	b.n	801147c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8010d8a:	4b72      	ldr	r3, [pc, #456]	; (8010f54 <tcp_process+0x298>)
 8010d8c:	781b      	ldrb	r3, [r3, #0]
 8010d8e:	f003 0302 	and.w	r3, r3, #2
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	d010      	beq.n	8010db8 <tcp_process+0xfc>
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	7d1b      	ldrb	r3, [r3, #20]
 8010d9a:	2b02      	cmp	r3, #2
 8010d9c:	d00c      	beq.n	8010db8 <tcp_process+0xfc>
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	7d1b      	ldrb	r3, [r3, #20]
 8010da2:	2b03      	cmp	r3, #3
 8010da4:	d008      	beq.n	8010db8 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	8b5b      	ldrh	r3, [r3, #26]
 8010daa:	f043 0302 	orr.w	r3, r3, #2
 8010dae:	b29a      	uxth	r2, r3
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8010db4:	2300      	movs	r3, #0
 8010db6:	e361      	b.n	801147c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	8b5b      	ldrh	r3, [r3, #26]
 8010dbc:	f003 0310 	and.w	r3, r3, #16
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	d103      	bne.n	8010dcc <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8010dc4:	4b68      	ldr	r3, [pc, #416]	; (8010f68 <tcp_process+0x2ac>)
 8010dc6:	681a      	ldr	r2, [r3, #0]
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	2200      	movs	r2, #0
 8010dd0:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	2200      	movs	r2, #0
 8010dd8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8010ddc:	6878      	ldr	r0, [r7, #4]
 8010dde:	f001 fc2f 	bl	8012640 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	7d1b      	ldrb	r3, [r3, #20]
 8010de6:	3b02      	subs	r3, #2
 8010de8:	2b07      	cmp	r3, #7
 8010dea:	f200 8337 	bhi.w	801145c <tcp_process+0x7a0>
 8010dee:	a201      	add	r2, pc, #4	; (adr r2, 8010df4 <tcp_process+0x138>)
 8010df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010df4:	08010e15 	.word	0x08010e15
 8010df8:	08011045 	.word	0x08011045
 8010dfc:	080111bd 	.word	0x080111bd
 8010e00:	080111e7 	.word	0x080111e7
 8010e04:	0801130b 	.word	0x0801130b
 8010e08:	080111bd 	.word	0x080111bd
 8010e0c:	08011397 	.word	0x08011397
 8010e10:	08011427 	.word	0x08011427
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8010e14:	4b4f      	ldr	r3, [pc, #316]	; (8010f54 <tcp_process+0x298>)
 8010e16:	781b      	ldrb	r3, [r3, #0]
 8010e18:	f003 0310 	and.w	r3, r3, #16
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	f000 80e4 	beq.w	8010fea <tcp_process+0x32e>
 8010e22:	4b4c      	ldr	r3, [pc, #304]	; (8010f54 <tcp_process+0x298>)
 8010e24:	781b      	ldrb	r3, [r3, #0]
 8010e26:	f003 0302 	and.w	r3, r3, #2
 8010e2a:	2b00      	cmp	r3, #0
 8010e2c:	f000 80dd 	beq.w	8010fea <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010e34:	1c5a      	adds	r2, r3, #1
 8010e36:	4b48      	ldr	r3, [pc, #288]	; (8010f58 <tcp_process+0x29c>)
 8010e38:	681b      	ldr	r3, [r3, #0]
 8010e3a:	429a      	cmp	r2, r3
 8010e3c:	f040 80d5 	bne.w	8010fea <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8010e40:	4b46      	ldr	r3, [pc, #280]	; (8010f5c <tcp_process+0x2a0>)
 8010e42:	681b      	ldr	r3, [r3, #0]
 8010e44:	1c5a      	adds	r2, r3, #1
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8010e52:	4b41      	ldr	r3, [pc, #260]	; (8010f58 <tcp_process+0x29c>)
 8010e54:	681a      	ldr	r2, [r3, #0]
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8010e5a:	4b44      	ldr	r3, [pc, #272]	; (8010f6c <tcp_process+0x2b0>)
 8010e5c:	681b      	ldr	r3, [r3, #0]
 8010e5e:	89db      	ldrh	r3, [r3, #14]
 8010e60:	b29a      	uxth	r2, r3
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8010e74:	4b39      	ldr	r3, [pc, #228]	; (8010f5c <tcp_process+0x2a0>)
 8010e76:	681b      	ldr	r3, [r3, #0]
 8010e78:	1e5a      	subs	r2, r3, #1
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	2204      	movs	r2, #4
 8010e82:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	3304      	adds	r3, #4
 8010e8c:	4618      	mov	r0, r3
 8010e8e:	f007 f933 	bl	80180f8 <ip4_route>
 8010e92:	4601      	mov	r1, r0
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	3304      	adds	r3, #4
 8010e98:	461a      	mov	r2, r3
 8010e9a:	4620      	mov	r0, r4
 8010e9c:	f7ff f88c 	bl	800ffb8 <tcp_eff_send_mss_netif>
 8010ea0:	4603      	mov	r3, r0
 8010ea2:	461a      	mov	r2, r3
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010eac:	009a      	lsls	r2, r3, #2
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010eb2:	005b      	lsls	r3, r3, #1
 8010eb4:	f241 111c 	movw	r1, #4380	; 0x111c
 8010eb8:	428b      	cmp	r3, r1
 8010eba:	bf38      	it	cc
 8010ebc:	460b      	movcc	r3, r1
 8010ebe:	429a      	cmp	r2, r3
 8010ec0:	d204      	bcs.n	8010ecc <tcp_process+0x210>
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010ec6:	009b      	lsls	r3, r3, #2
 8010ec8:	b29b      	uxth	r3, r3
 8010eca:	e00d      	b.n	8010ee8 <tcp_process+0x22c>
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010ed0:	005b      	lsls	r3, r3, #1
 8010ed2:	f241 121c 	movw	r2, #4380	; 0x111c
 8010ed6:	4293      	cmp	r3, r2
 8010ed8:	d904      	bls.n	8010ee4 <tcp_process+0x228>
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010ede:	005b      	lsls	r3, r3, #1
 8010ee0:	b29b      	uxth	r3, r3
 8010ee2:	e001      	b.n	8010ee8 <tcp_process+0x22c>
 8010ee4:	f241 131c 	movw	r3, #4380	; 0x111c
 8010ee8:	687a      	ldr	r2, [r7, #4]
 8010eea:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010ef4:	2b00      	cmp	r3, #0
 8010ef6:	d106      	bne.n	8010f06 <tcp_process+0x24a>
 8010ef8:	4b13      	ldr	r3, [pc, #76]	; (8010f48 <tcp_process+0x28c>)
 8010efa:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8010efe:	491c      	ldr	r1, [pc, #112]	; (8010f70 <tcp_process+0x2b4>)
 8010f00:	4813      	ldr	r0, [pc, #76]	; (8010f50 <tcp_process+0x294>)
 8010f02:	f009 fc4f 	bl	801a7a4 <iprintf>
        --pcb->snd_queuelen;
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010f0c:	3b01      	subs	r3, #1
 8010f0e:	b29a      	uxth	r2, r3
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010f1a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8010f1c:	69fb      	ldr	r3, [r7, #28]
 8010f1e:	2b00      	cmp	r3, #0
 8010f20:	d12a      	bne.n	8010f78 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010f26:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8010f28:	69fb      	ldr	r3, [r7, #28]
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	d106      	bne.n	8010f3c <tcp_process+0x280>
 8010f2e:	4b06      	ldr	r3, [pc, #24]	; (8010f48 <tcp_process+0x28c>)
 8010f30:	f44f 725d 	mov.w	r2, #884	; 0x374
 8010f34:	490f      	ldr	r1, [pc, #60]	; (8010f74 <tcp_process+0x2b8>)
 8010f36:	4806      	ldr	r0, [pc, #24]	; (8010f50 <tcp_process+0x294>)
 8010f38:	f009 fc34 	bl	801a7a4 <iprintf>
          pcb->unsent = rseg->next;
 8010f3c:	69fb      	ldr	r3, [r7, #28]
 8010f3e:	681a      	ldr	r2, [r3, #0]
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	66da      	str	r2, [r3, #108]	; 0x6c
 8010f44:	e01c      	b.n	8010f80 <tcp_process+0x2c4>
 8010f46:	bf00      	nop
 8010f48:	0801ce98 	.word	0x0801ce98
 8010f4c:	0801d0d0 	.word	0x0801d0d0
 8010f50:	0801cee4 	.word	0x0801cee4
 8010f54:	2000bf64 	.word	0x2000bf64
 8010f58:	2000bf5c 	.word	0x2000bf5c
 8010f5c:	2000bf58 	.word	0x2000bf58
 8010f60:	0801d0ec 	.word	0x0801d0ec
 8010f64:	2000bf65 	.word	0x2000bf65
 8010f68:	2000bf20 	.word	0x2000bf20
 8010f6c:	2000bf48 	.word	0x2000bf48
 8010f70:	0801d10c 	.word	0x0801d10c
 8010f74:	0801d124 	.word	0x0801d124
        } else {
          pcb->unacked = rseg->next;
 8010f78:	69fb      	ldr	r3, [r7, #28]
 8010f7a:	681a      	ldr	r2, [r3, #0]
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8010f80:	69f8      	ldr	r0, [r7, #28]
 8010f82:	f7fe fc6e 	bl	800f862 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	d104      	bne.n	8010f98 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010f94:	861a      	strh	r2, [r3, #48]	; 0x30
 8010f96:	e006      	b.n	8010fa6 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	2200      	movs	r2, #0
 8010f9c:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	2200      	movs	r2, #0
 8010fa2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010fac:	2b00      	cmp	r3, #0
 8010fae:	d00a      	beq.n	8010fc6 <tcp_process+0x30a>
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010fb6:	687a      	ldr	r2, [r7, #4]
 8010fb8:	6910      	ldr	r0, [r2, #16]
 8010fba:	2200      	movs	r2, #0
 8010fbc:	6879      	ldr	r1, [r7, #4]
 8010fbe:	4798      	blx	r3
 8010fc0:	4603      	mov	r3, r0
 8010fc2:	76bb      	strb	r3, [r7, #26]
 8010fc4:	e001      	b.n	8010fca <tcp_process+0x30e>
 8010fc6:	2300      	movs	r3, #0
 8010fc8:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8010fca:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010fce:	f113 0f0d 	cmn.w	r3, #13
 8010fd2:	d102      	bne.n	8010fda <tcp_process+0x31e>
          return ERR_ABRT;
 8010fd4:	f06f 030c 	mvn.w	r3, #12
 8010fd8:	e250      	b.n	801147c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	8b5b      	ldrh	r3, [r3, #26]
 8010fde:	f043 0302 	orr.w	r3, r3, #2
 8010fe2:	b29a      	uxth	r2, r3
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8010fe8:	e23a      	b.n	8011460 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8010fea:	4b98      	ldr	r3, [pc, #608]	; (801124c <tcp_process+0x590>)
 8010fec:	781b      	ldrb	r3, [r3, #0]
 8010fee:	f003 0310 	and.w	r3, r3, #16
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	f000 8234 	beq.w	8011460 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010ff8:	4b95      	ldr	r3, [pc, #596]	; (8011250 <tcp_process+0x594>)
 8010ffa:	6819      	ldr	r1, [r3, #0]
 8010ffc:	4b95      	ldr	r3, [pc, #596]	; (8011254 <tcp_process+0x598>)
 8010ffe:	881b      	ldrh	r3, [r3, #0]
 8011000:	461a      	mov	r2, r3
 8011002:	4b95      	ldr	r3, [pc, #596]	; (8011258 <tcp_process+0x59c>)
 8011004:	681b      	ldr	r3, [r3, #0]
 8011006:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011008:	4b94      	ldr	r3, [pc, #592]	; (801125c <tcp_process+0x5a0>)
 801100a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801100c:	885b      	ldrh	r3, [r3, #2]
 801100e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011010:	4a92      	ldr	r2, [pc, #584]	; (801125c <tcp_process+0x5a0>)
 8011012:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011014:	8812      	ldrh	r2, [r2, #0]
 8011016:	b292      	uxth	r2, r2
 8011018:	9202      	str	r2, [sp, #8]
 801101a:	9301      	str	r3, [sp, #4]
 801101c:	4b90      	ldr	r3, [pc, #576]	; (8011260 <tcp_process+0x5a4>)
 801101e:	9300      	str	r3, [sp, #0]
 8011020:	4b90      	ldr	r3, [pc, #576]	; (8011264 <tcp_process+0x5a8>)
 8011022:	4602      	mov	r2, r0
 8011024:	6878      	ldr	r0, [r7, #4]
 8011026:	f003 f8dd 	bl	80141e4 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011030:	2b05      	cmp	r3, #5
 8011032:	f200 8215 	bhi.w	8011460 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	2200      	movs	r2, #0
 801103a:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 801103c:	6878      	ldr	r0, [r7, #4]
 801103e:	f002 fea7 	bl	8013d90 <tcp_rexmit_rto>
      break;
 8011042:	e20d      	b.n	8011460 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8011044:	4b81      	ldr	r3, [pc, #516]	; (801124c <tcp_process+0x590>)
 8011046:	781b      	ldrb	r3, [r3, #0]
 8011048:	f003 0310 	and.w	r3, r3, #16
 801104c:	2b00      	cmp	r3, #0
 801104e:	f000 80a1 	beq.w	8011194 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011052:	4b7f      	ldr	r3, [pc, #508]	; (8011250 <tcp_process+0x594>)
 8011054:	681a      	ldr	r2, [r3, #0]
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801105a:	1ad3      	subs	r3, r2, r3
 801105c:	3b01      	subs	r3, #1
 801105e:	2b00      	cmp	r3, #0
 8011060:	db7e      	blt.n	8011160 <tcp_process+0x4a4>
 8011062:	4b7b      	ldr	r3, [pc, #492]	; (8011250 <tcp_process+0x594>)
 8011064:	681a      	ldr	r2, [r3, #0]
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801106a:	1ad3      	subs	r3, r2, r3
 801106c:	2b00      	cmp	r3, #0
 801106e:	dc77      	bgt.n	8011160 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	2204      	movs	r2, #4
 8011074:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801107a:	2b00      	cmp	r3, #0
 801107c:	d102      	bne.n	8011084 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 801107e:	23fa      	movs	r3, #250	; 0xfa
 8011080:	76bb      	strb	r3, [r7, #26]
 8011082:	e01d      	b.n	80110c0 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011088:	699b      	ldr	r3, [r3, #24]
 801108a:	2b00      	cmp	r3, #0
 801108c:	d106      	bne.n	801109c <tcp_process+0x3e0>
 801108e:	4b76      	ldr	r3, [pc, #472]	; (8011268 <tcp_process+0x5ac>)
 8011090:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8011094:	4975      	ldr	r1, [pc, #468]	; (801126c <tcp_process+0x5b0>)
 8011096:	4876      	ldr	r0, [pc, #472]	; (8011270 <tcp_process+0x5b4>)
 8011098:	f009 fb84 	bl	801a7a4 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80110a0:	699b      	ldr	r3, [r3, #24]
 80110a2:	2b00      	cmp	r3, #0
 80110a4:	d00a      	beq.n	80110bc <tcp_process+0x400>
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80110aa:	699b      	ldr	r3, [r3, #24]
 80110ac:	687a      	ldr	r2, [r7, #4]
 80110ae:	6910      	ldr	r0, [r2, #16]
 80110b0:	2200      	movs	r2, #0
 80110b2:	6879      	ldr	r1, [r7, #4]
 80110b4:	4798      	blx	r3
 80110b6:	4603      	mov	r3, r0
 80110b8:	76bb      	strb	r3, [r7, #26]
 80110ba:	e001      	b.n	80110c0 <tcp_process+0x404>
 80110bc:	23f0      	movs	r3, #240	; 0xf0
 80110be:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80110c0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	d00a      	beq.n	80110de <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80110c8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80110cc:	f113 0f0d 	cmn.w	r3, #13
 80110d0:	d002      	beq.n	80110d8 <tcp_process+0x41c>
              tcp_abort(pcb);
 80110d2:	6878      	ldr	r0, [r7, #4]
 80110d4:	f7fd fce4 	bl	800eaa0 <tcp_abort>
            }
            return ERR_ABRT;
 80110d8:	f06f 030c 	mvn.w	r3, #12
 80110dc:	e1ce      	b.n	801147c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80110de:	6878      	ldr	r0, [r7, #4]
 80110e0:	f000 fae0 	bl	80116a4 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80110e4:	4b63      	ldr	r3, [pc, #396]	; (8011274 <tcp_process+0x5b8>)
 80110e6:	881b      	ldrh	r3, [r3, #0]
 80110e8:	2b00      	cmp	r3, #0
 80110ea:	d005      	beq.n	80110f8 <tcp_process+0x43c>
            recv_acked--;
 80110ec:	4b61      	ldr	r3, [pc, #388]	; (8011274 <tcp_process+0x5b8>)
 80110ee:	881b      	ldrh	r3, [r3, #0]
 80110f0:	3b01      	subs	r3, #1
 80110f2:	b29a      	uxth	r2, r3
 80110f4:	4b5f      	ldr	r3, [pc, #380]	; (8011274 <tcp_process+0x5b8>)
 80110f6:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80110fc:	009a      	lsls	r2, r3, #2
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011102:	005b      	lsls	r3, r3, #1
 8011104:	f241 111c 	movw	r1, #4380	; 0x111c
 8011108:	428b      	cmp	r3, r1
 801110a:	bf38      	it	cc
 801110c:	460b      	movcc	r3, r1
 801110e:	429a      	cmp	r2, r3
 8011110:	d204      	bcs.n	801111c <tcp_process+0x460>
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011116:	009b      	lsls	r3, r3, #2
 8011118:	b29b      	uxth	r3, r3
 801111a:	e00d      	b.n	8011138 <tcp_process+0x47c>
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011120:	005b      	lsls	r3, r3, #1
 8011122:	f241 121c 	movw	r2, #4380	; 0x111c
 8011126:	4293      	cmp	r3, r2
 8011128:	d904      	bls.n	8011134 <tcp_process+0x478>
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801112e:	005b      	lsls	r3, r3, #1
 8011130:	b29b      	uxth	r3, r3
 8011132:	e001      	b.n	8011138 <tcp_process+0x47c>
 8011134:	f241 131c 	movw	r3, #4380	; 0x111c
 8011138:	687a      	ldr	r2, [r7, #4]
 801113a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 801113e:	4b4e      	ldr	r3, [pc, #312]	; (8011278 <tcp_process+0x5bc>)
 8011140:	781b      	ldrb	r3, [r3, #0]
 8011142:	f003 0320 	and.w	r3, r3, #32
 8011146:	2b00      	cmp	r3, #0
 8011148:	d037      	beq.n	80111ba <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	8b5b      	ldrh	r3, [r3, #26]
 801114e:	f043 0302 	orr.w	r3, r3, #2
 8011152:	b29a      	uxth	r2, r3
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	2207      	movs	r2, #7
 801115c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801115e:	e02c      	b.n	80111ba <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011160:	4b3b      	ldr	r3, [pc, #236]	; (8011250 <tcp_process+0x594>)
 8011162:	6819      	ldr	r1, [r3, #0]
 8011164:	4b3b      	ldr	r3, [pc, #236]	; (8011254 <tcp_process+0x598>)
 8011166:	881b      	ldrh	r3, [r3, #0]
 8011168:	461a      	mov	r2, r3
 801116a:	4b3b      	ldr	r3, [pc, #236]	; (8011258 <tcp_process+0x59c>)
 801116c:	681b      	ldr	r3, [r3, #0]
 801116e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011170:	4b3a      	ldr	r3, [pc, #232]	; (801125c <tcp_process+0x5a0>)
 8011172:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011174:	885b      	ldrh	r3, [r3, #2]
 8011176:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011178:	4a38      	ldr	r2, [pc, #224]	; (801125c <tcp_process+0x5a0>)
 801117a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801117c:	8812      	ldrh	r2, [r2, #0]
 801117e:	b292      	uxth	r2, r2
 8011180:	9202      	str	r2, [sp, #8]
 8011182:	9301      	str	r3, [sp, #4]
 8011184:	4b36      	ldr	r3, [pc, #216]	; (8011260 <tcp_process+0x5a4>)
 8011186:	9300      	str	r3, [sp, #0]
 8011188:	4b36      	ldr	r3, [pc, #216]	; (8011264 <tcp_process+0x5a8>)
 801118a:	4602      	mov	r2, r0
 801118c:	6878      	ldr	r0, [r7, #4]
 801118e:	f003 f829 	bl	80141e4 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8011192:	e167      	b.n	8011464 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8011194:	4b2d      	ldr	r3, [pc, #180]	; (801124c <tcp_process+0x590>)
 8011196:	781b      	ldrb	r3, [r3, #0]
 8011198:	f003 0302 	and.w	r3, r3, #2
 801119c:	2b00      	cmp	r3, #0
 801119e:	f000 8161 	beq.w	8011464 <tcp_process+0x7a8>
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80111a6:	1e5a      	subs	r2, r3, #1
 80111a8:	4b2b      	ldr	r3, [pc, #172]	; (8011258 <tcp_process+0x59c>)
 80111aa:	681b      	ldr	r3, [r3, #0]
 80111ac:	429a      	cmp	r2, r3
 80111ae:	f040 8159 	bne.w	8011464 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80111b2:	6878      	ldr	r0, [r7, #4]
 80111b4:	f002 fe0e 	bl	8013dd4 <tcp_rexmit>
      break;
 80111b8:	e154      	b.n	8011464 <tcp_process+0x7a8>
 80111ba:	e153      	b.n	8011464 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80111bc:	6878      	ldr	r0, [r7, #4]
 80111be:	f000 fa71 	bl	80116a4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80111c2:	4b2d      	ldr	r3, [pc, #180]	; (8011278 <tcp_process+0x5bc>)
 80111c4:	781b      	ldrb	r3, [r3, #0]
 80111c6:	f003 0320 	and.w	r3, r3, #32
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	f000 814c 	beq.w	8011468 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	8b5b      	ldrh	r3, [r3, #26]
 80111d4:	f043 0302 	orr.w	r3, r3, #2
 80111d8:	b29a      	uxth	r2, r3
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	2207      	movs	r2, #7
 80111e2:	751a      	strb	r2, [r3, #20]
      }
      break;
 80111e4:	e140      	b.n	8011468 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80111e6:	6878      	ldr	r0, [r7, #4]
 80111e8:	f000 fa5c 	bl	80116a4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80111ec:	4b22      	ldr	r3, [pc, #136]	; (8011278 <tcp_process+0x5bc>)
 80111ee:	781b      	ldrb	r3, [r3, #0]
 80111f0:	f003 0320 	and.w	r3, r3, #32
 80111f4:	2b00      	cmp	r3, #0
 80111f6:	d071      	beq.n	80112dc <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80111f8:	4b14      	ldr	r3, [pc, #80]	; (801124c <tcp_process+0x590>)
 80111fa:	781b      	ldrb	r3, [r3, #0]
 80111fc:	f003 0310 	and.w	r3, r3, #16
 8011200:	2b00      	cmp	r3, #0
 8011202:	d060      	beq.n	80112c6 <tcp_process+0x60a>
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011208:	4b11      	ldr	r3, [pc, #68]	; (8011250 <tcp_process+0x594>)
 801120a:	681b      	ldr	r3, [r3, #0]
 801120c:	429a      	cmp	r2, r3
 801120e:	d15a      	bne.n	80112c6 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011214:	2b00      	cmp	r3, #0
 8011216:	d156      	bne.n	80112c6 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	8b5b      	ldrh	r3, [r3, #26]
 801121c:	f043 0302 	orr.w	r3, r3, #2
 8011220:	b29a      	uxth	r2, r3
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8011226:	6878      	ldr	r0, [r7, #4]
 8011228:	f7fe fdbc 	bl	800fda4 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 801122c:	4b13      	ldr	r3, [pc, #76]	; (801127c <tcp_process+0x5c0>)
 801122e:	681b      	ldr	r3, [r3, #0]
 8011230:	687a      	ldr	r2, [r7, #4]
 8011232:	429a      	cmp	r2, r3
 8011234:	d105      	bne.n	8011242 <tcp_process+0x586>
 8011236:	4b11      	ldr	r3, [pc, #68]	; (801127c <tcp_process+0x5c0>)
 8011238:	681b      	ldr	r3, [r3, #0]
 801123a:	68db      	ldr	r3, [r3, #12]
 801123c:	4a0f      	ldr	r2, [pc, #60]	; (801127c <tcp_process+0x5c0>)
 801123e:	6013      	str	r3, [r2, #0]
 8011240:	e02e      	b.n	80112a0 <tcp_process+0x5e4>
 8011242:	4b0e      	ldr	r3, [pc, #56]	; (801127c <tcp_process+0x5c0>)
 8011244:	681b      	ldr	r3, [r3, #0]
 8011246:	617b      	str	r3, [r7, #20]
 8011248:	e027      	b.n	801129a <tcp_process+0x5de>
 801124a:	bf00      	nop
 801124c:	2000bf64 	.word	0x2000bf64
 8011250:	2000bf5c 	.word	0x2000bf5c
 8011254:	2000bf62 	.word	0x2000bf62
 8011258:	2000bf58 	.word	0x2000bf58
 801125c:	2000bf48 	.word	0x2000bf48
 8011260:	20008e10 	.word	0x20008e10
 8011264:	20008e14 	.word	0x20008e14
 8011268:	0801ce98 	.word	0x0801ce98
 801126c:	0801d138 	.word	0x0801d138
 8011270:	0801cee4 	.word	0x0801cee4
 8011274:	2000bf60 	.word	0x2000bf60
 8011278:	2000bf65 	.word	0x2000bf65
 801127c:	2000bf2c 	.word	0x2000bf2c
 8011280:	697b      	ldr	r3, [r7, #20]
 8011282:	68db      	ldr	r3, [r3, #12]
 8011284:	687a      	ldr	r2, [r7, #4]
 8011286:	429a      	cmp	r2, r3
 8011288:	d104      	bne.n	8011294 <tcp_process+0x5d8>
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	68da      	ldr	r2, [r3, #12]
 801128e:	697b      	ldr	r3, [r7, #20]
 8011290:	60da      	str	r2, [r3, #12]
 8011292:	e005      	b.n	80112a0 <tcp_process+0x5e4>
 8011294:	697b      	ldr	r3, [r7, #20]
 8011296:	68db      	ldr	r3, [r3, #12]
 8011298:	617b      	str	r3, [r7, #20]
 801129a:	697b      	ldr	r3, [r7, #20]
 801129c:	2b00      	cmp	r3, #0
 801129e:	d1ef      	bne.n	8011280 <tcp_process+0x5c4>
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	2200      	movs	r2, #0
 80112a4:	60da      	str	r2, [r3, #12]
 80112a6:	4b77      	ldr	r3, [pc, #476]	; (8011484 <tcp_process+0x7c8>)
 80112a8:	2201      	movs	r2, #1
 80112aa:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	220a      	movs	r2, #10
 80112b0:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80112b2:	4b75      	ldr	r3, [pc, #468]	; (8011488 <tcp_process+0x7cc>)
 80112b4:	681a      	ldr	r2, [r3, #0]
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	60da      	str	r2, [r3, #12]
 80112ba:	4a73      	ldr	r2, [pc, #460]	; (8011488 <tcp_process+0x7cc>)
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	6013      	str	r3, [r2, #0]
 80112c0:	f003 f952 	bl	8014568 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80112c4:	e0d2      	b.n	801146c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	8b5b      	ldrh	r3, [r3, #26]
 80112ca:	f043 0302 	orr.w	r3, r3, #2
 80112ce:	b29a      	uxth	r2, r3
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	2208      	movs	r2, #8
 80112d8:	751a      	strb	r2, [r3, #20]
      break;
 80112da:	e0c7      	b.n	801146c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80112dc:	4b6b      	ldr	r3, [pc, #428]	; (801148c <tcp_process+0x7d0>)
 80112de:	781b      	ldrb	r3, [r3, #0]
 80112e0:	f003 0310 	and.w	r3, r3, #16
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	f000 80c1 	beq.w	801146c <tcp_process+0x7b0>
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80112ee:	4b68      	ldr	r3, [pc, #416]	; (8011490 <tcp_process+0x7d4>)
 80112f0:	681b      	ldr	r3, [r3, #0]
 80112f2:	429a      	cmp	r2, r3
 80112f4:	f040 80ba 	bne.w	801146c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80112fc:	2b00      	cmp	r3, #0
 80112fe:	f040 80b5 	bne.w	801146c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	2206      	movs	r2, #6
 8011306:	751a      	strb	r2, [r3, #20]
      break;
 8011308:	e0b0      	b.n	801146c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801130a:	6878      	ldr	r0, [r7, #4]
 801130c:	f000 f9ca 	bl	80116a4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8011310:	4b60      	ldr	r3, [pc, #384]	; (8011494 <tcp_process+0x7d8>)
 8011312:	781b      	ldrb	r3, [r3, #0]
 8011314:	f003 0320 	and.w	r3, r3, #32
 8011318:	2b00      	cmp	r3, #0
 801131a:	f000 80a9 	beq.w	8011470 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	8b5b      	ldrh	r3, [r3, #26]
 8011322:	f043 0302 	orr.w	r3, r3, #2
 8011326:	b29a      	uxth	r2, r3
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 801132c:	6878      	ldr	r0, [r7, #4]
 801132e:	f7fe fd39 	bl	800fda4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8011332:	4b59      	ldr	r3, [pc, #356]	; (8011498 <tcp_process+0x7dc>)
 8011334:	681b      	ldr	r3, [r3, #0]
 8011336:	687a      	ldr	r2, [r7, #4]
 8011338:	429a      	cmp	r2, r3
 801133a:	d105      	bne.n	8011348 <tcp_process+0x68c>
 801133c:	4b56      	ldr	r3, [pc, #344]	; (8011498 <tcp_process+0x7dc>)
 801133e:	681b      	ldr	r3, [r3, #0]
 8011340:	68db      	ldr	r3, [r3, #12]
 8011342:	4a55      	ldr	r2, [pc, #340]	; (8011498 <tcp_process+0x7dc>)
 8011344:	6013      	str	r3, [r2, #0]
 8011346:	e013      	b.n	8011370 <tcp_process+0x6b4>
 8011348:	4b53      	ldr	r3, [pc, #332]	; (8011498 <tcp_process+0x7dc>)
 801134a:	681b      	ldr	r3, [r3, #0]
 801134c:	613b      	str	r3, [r7, #16]
 801134e:	e00c      	b.n	801136a <tcp_process+0x6ae>
 8011350:	693b      	ldr	r3, [r7, #16]
 8011352:	68db      	ldr	r3, [r3, #12]
 8011354:	687a      	ldr	r2, [r7, #4]
 8011356:	429a      	cmp	r2, r3
 8011358:	d104      	bne.n	8011364 <tcp_process+0x6a8>
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	68da      	ldr	r2, [r3, #12]
 801135e:	693b      	ldr	r3, [r7, #16]
 8011360:	60da      	str	r2, [r3, #12]
 8011362:	e005      	b.n	8011370 <tcp_process+0x6b4>
 8011364:	693b      	ldr	r3, [r7, #16]
 8011366:	68db      	ldr	r3, [r3, #12]
 8011368:	613b      	str	r3, [r7, #16]
 801136a:	693b      	ldr	r3, [r7, #16]
 801136c:	2b00      	cmp	r3, #0
 801136e:	d1ef      	bne.n	8011350 <tcp_process+0x694>
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	2200      	movs	r2, #0
 8011374:	60da      	str	r2, [r3, #12]
 8011376:	4b43      	ldr	r3, [pc, #268]	; (8011484 <tcp_process+0x7c8>)
 8011378:	2201      	movs	r2, #1
 801137a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	220a      	movs	r2, #10
 8011380:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8011382:	4b41      	ldr	r3, [pc, #260]	; (8011488 <tcp_process+0x7cc>)
 8011384:	681a      	ldr	r2, [r3, #0]
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	60da      	str	r2, [r3, #12]
 801138a:	4a3f      	ldr	r2, [pc, #252]	; (8011488 <tcp_process+0x7cc>)
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	6013      	str	r3, [r2, #0]
 8011390:	f003 f8ea 	bl	8014568 <tcp_timer_needed>
      }
      break;
 8011394:	e06c      	b.n	8011470 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8011396:	6878      	ldr	r0, [r7, #4]
 8011398:	f000 f984 	bl	80116a4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801139c:	4b3b      	ldr	r3, [pc, #236]	; (801148c <tcp_process+0x7d0>)
 801139e:	781b      	ldrb	r3, [r3, #0]
 80113a0:	f003 0310 	and.w	r3, r3, #16
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	d065      	beq.n	8011474 <tcp_process+0x7b8>
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80113ac:	4b38      	ldr	r3, [pc, #224]	; (8011490 <tcp_process+0x7d4>)
 80113ae:	681b      	ldr	r3, [r3, #0]
 80113b0:	429a      	cmp	r2, r3
 80113b2:	d15f      	bne.n	8011474 <tcp_process+0x7b8>
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80113b8:	2b00      	cmp	r3, #0
 80113ba:	d15b      	bne.n	8011474 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80113bc:	6878      	ldr	r0, [r7, #4]
 80113be:	f7fe fcf1 	bl	800fda4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80113c2:	4b35      	ldr	r3, [pc, #212]	; (8011498 <tcp_process+0x7dc>)
 80113c4:	681b      	ldr	r3, [r3, #0]
 80113c6:	687a      	ldr	r2, [r7, #4]
 80113c8:	429a      	cmp	r2, r3
 80113ca:	d105      	bne.n	80113d8 <tcp_process+0x71c>
 80113cc:	4b32      	ldr	r3, [pc, #200]	; (8011498 <tcp_process+0x7dc>)
 80113ce:	681b      	ldr	r3, [r3, #0]
 80113d0:	68db      	ldr	r3, [r3, #12]
 80113d2:	4a31      	ldr	r2, [pc, #196]	; (8011498 <tcp_process+0x7dc>)
 80113d4:	6013      	str	r3, [r2, #0]
 80113d6:	e013      	b.n	8011400 <tcp_process+0x744>
 80113d8:	4b2f      	ldr	r3, [pc, #188]	; (8011498 <tcp_process+0x7dc>)
 80113da:	681b      	ldr	r3, [r3, #0]
 80113dc:	60fb      	str	r3, [r7, #12]
 80113de:	e00c      	b.n	80113fa <tcp_process+0x73e>
 80113e0:	68fb      	ldr	r3, [r7, #12]
 80113e2:	68db      	ldr	r3, [r3, #12]
 80113e4:	687a      	ldr	r2, [r7, #4]
 80113e6:	429a      	cmp	r2, r3
 80113e8:	d104      	bne.n	80113f4 <tcp_process+0x738>
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	68da      	ldr	r2, [r3, #12]
 80113ee:	68fb      	ldr	r3, [r7, #12]
 80113f0:	60da      	str	r2, [r3, #12]
 80113f2:	e005      	b.n	8011400 <tcp_process+0x744>
 80113f4:	68fb      	ldr	r3, [r7, #12]
 80113f6:	68db      	ldr	r3, [r3, #12]
 80113f8:	60fb      	str	r3, [r7, #12]
 80113fa:	68fb      	ldr	r3, [r7, #12]
 80113fc:	2b00      	cmp	r3, #0
 80113fe:	d1ef      	bne.n	80113e0 <tcp_process+0x724>
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	2200      	movs	r2, #0
 8011404:	60da      	str	r2, [r3, #12]
 8011406:	4b1f      	ldr	r3, [pc, #124]	; (8011484 <tcp_process+0x7c8>)
 8011408:	2201      	movs	r2, #1
 801140a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	220a      	movs	r2, #10
 8011410:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8011412:	4b1d      	ldr	r3, [pc, #116]	; (8011488 <tcp_process+0x7cc>)
 8011414:	681a      	ldr	r2, [r3, #0]
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	60da      	str	r2, [r3, #12]
 801141a:	4a1b      	ldr	r2, [pc, #108]	; (8011488 <tcp_process+0x7cc>)
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	6013      	str	r3, [r2, #0]
 8011420:	f003 f8a2 	bl	8014568 <tcp_timer_needed>
      }
      break;
 8011424:	e026      	b.n	8011474 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8011426:	6878      	ldr	r0, [r7, #4]
 8011428:	f000 f93c 	bl	80116a4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801142c:	4b17      	ldr	r3, [pc, #92]	; (801148c <tcp_process+0x7d0>)
 801142e:	781b      	ldrb	r3, [r3, #0]
 8011430:	f003 0310 	and.w	r3, r3, #16
 8011434:	2b00      	cmp	r3, #0
 8011436:	d01f      	beq.n	8011478 <tcp_process+0x7bc>
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801143c:	4b14      	ldr	r3, [pc, #80]	; (8011490 <tcp_process+0x7d4>)
 801143e:	681b      	ldr	r3, [r3, #0]
 8011440:	429a      	cmp	r2, r3
 8011442:	d119      	bne.n	8011478 <tcp_process+0x7bc>
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011448:	2b00      	cmp	r3, #0
 801144a:	d115      	bne.n	8011478 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 801144c:	4b11      	ldr	r3, [pc, #68]	; (8011494 <tcp_process+0x7d8>)
 801144e:	781b      	ldrb	r3, [r3, #0]
 8011450:	f043 0310 	orr.w	r3, r3, #16
 8011454:	b2da      	uxtb	r2, r3
 8011456:	4b0f      	ldr	r3, [pc, #60]	; (8011494 <tcp_process+0x7d8>)
 8011458:	701a      	strb	r2, [r3, #0]
      }
      break;
 801145a:	e00d      	b.n	8011478 <tcp_process+0x7bc>
    default:
      break;
 801145c:	bf00      	nop
 801145e:	e00c      	b.n	801147a <tcp_process+0x7be>
      break;
 8011460:	bf00      	nop
 8011462:	e00a      	b.n	801147a <tcp_process+0x7be>
      break;
 8011464:	bf00      	nop
 8011466:	e008      	b.n	801147a <tcp_process+0x7be>
      break;
 8011468:	bf00      	nop
 801146a:	e006      	b.n	801147a <tcp_process+0x7be>
      break;
 801146c:	bf00      	nop
 801146e:	e004      	b.n	801147a <tcp_process+0x7be>
      break;
 8011470:	bf00      	nop
 8011472:	e002      	b.n	801147a <tcp_process+0x7be>
      break;
 8011474:	bf00      	nop
 8011476:	e000      	b.n	801147a <tcp_process+0x7be>
      break;
 8011478:	bf00      	nop
  }
  return ERR_OK;
 801147a:	2300      	movs	r3, #0
}
 801147c:	4618      	mov	r0, r3
 801147e:	3724      	adds	r7, #36	; 0x24
 8011480:	46bd      	mov	sp, r7
 8011482:	bd90      	pop	{r4, r7, pc}
 8011484:	2000bf34 	.word	0x2000bf34
 8011488:	2000bf30 	.word	0x2000bf30
 801148c:	2000bf64 	.word	0x2000bf64
 8011490:	2000bf5c 	.word	0x2000bf5c
 8011494:	2000bf65 	.word	0x2000bf65
 8011498:	2000bf2c 	.word	0x2000bf2c

0801149c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 801149c:	b590      	push	{r4, r7, lr}
 801149e:	b085      	sub	sp, #20
 80114a0:	af00      	add	r7, sp, #0
 80114a2:	6078      	str	r0, [r7, #4]
 80114a4:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	d106      	bne.n	80114ba <tcp_oos_insert_segment+0x1e>
 80114ac:	4b3b      	ldr	r3, [pc, #236]	; (801159c <tcp_oos_insert_segment+0x100>)
 80114ae:	f240 421f 	movw	r2, #1055	; 0x41f
 80114b2:	493b      	ldr	r1, [pc, #236]	; (80115a0 <tcp_oos_insert_segment+0x104>)
 80114b4:	483b      	ldr	r0, [pc, #236]	; (80115a4 <tcp_oos_insert_segment+0x108>)
 80114b6:	f009 f975 	bl	801a7a4 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	68db      	ldr	r3, [r3, #12]
 80114be:	899b      	ldrh	r3, [r3, #12]
 80114c0:	b29b      	uxth	r3, r3
 80114c2:	4618      	mov	r0, r3
 80114c4:	f7fb f884 	bl	800c5d0 <lwip_htons>
 80114c8:	4603      	mov	r3, r0
 80114ca:	b2db      	uxtb	r3, r3
 80114cc:	f003 0301 	and.w	r3, r3, #1
 80114d0:	2b00      	cmp	r3, #0
 80114d2:	d028      	beq.n	8011526 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80114d4:	6838      	ldr	r0, [r7, #0]
 80114d6:	f7fe f9af 	bl	800f838 <tcp_segs_free>
    next = NULL;
 80114da:	2300      	movs	r3, #0
 80114dc:	603b      	str	r3, [r7, #0]
 80114de:	e056      	b.n	801158e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80114e0:	683b      	ldr	r3, [r7, #0]
 80114e2:	68db      	ldr	r3, [r3, #12]
 80114e4:	899b      	ldrh	r3, [r3, #12]
 80114e6:	b29b      	uxth	r3, r3
 80114e8:	4618      	mov	r0, r3
 80114ea:	f7fb f871 	bl	800c5d0 <lwip_htons>
 80114ee:	4603      	mov	r3, r0
 80114f0:	b2db      	uxtb	r3, r3
 80114f2:	f003 0301 	and.w	r3, r3, #1
 80114f6:	2b00      	cmp	r3, #0
 80114f8:	d00d      	beq.n	8011516 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	68db      	ldr	r3, [r3, #12]
 80114fe:	899b      	ldrh	r3, [r3, #12]
 8011500:	b29c      	uxth	r4, r3
 8011502:	2001      	movs	r0, #1
 8011504:	f7fb f864 	bl	800c5d0 <lwip_htons>
 8011508:	4603      	mov	r3, r0
 801150a:	461a      	mov	r2, r3
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	68db      	ldr	r3, [r3, #12]
 8011510:	4322      	orrs	r2, r4
 8011512:	b292      	uxth	r2, r2
 8011514:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8011516:	683b      	ldr	r3, [r7, #0]
 8011518:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801151a:	683b      	ldr	r3, [r7, #0]
 801151c:	681b      	ldr	r3, [r3, #0]
 801151e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8011520:	68f8      	ldr	r0, [r7, #12]
 8011522:	f7fe f99e 	bl	800f862 <tcp_seg_free>
    while (next &&
 8011526:	683b      	ldr	r3, [r7, #0]
 8011528:	2b00      	cmp	r3, #0
 801152a:	d00e      	beq.n	801154a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	891b      	ldrh	r3, [r3, #8]
 8011530:	461a      	mov	r2, r3
 8011532:	4b1d      	ldr	r3, [pc, #116]	; (80115a8 <tcp_oos_insert_segment+0x10c>)
 8011534:	681b      	ldr	r3, [r3, #0]
 8011536:	441a      	add	r2, r3
 8011538:	683b      	ldr	r3, [r7, #0]
 801153a:	68db      	ldr	r3, [r3, #12]
 801153c:	685b      	ldr	r3, [r3, #4]
 801153e:	6839      	ldr	r1, [r7, #0]
 8011540:	8909      	ldrh	r1, [r1, #8]
 8011542:	440b      	add	r3, r1
 8011544:	1ad3      	subs	r3, r2, r3
    while (next &&
 8011546:	2b00      	cmp	r3, #0
 8011548:	daca      	bge.n	80114e0 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801154a:	683b      	ldr	r3, [r7, #0]
 801154c:	2b00      	cmp	r3, #0
 801154e:	d01e      	beq.n	801158e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	891b      	ldrh	r3, [r3, #8]
 8011554:	461a      	mov	r2, r3
 8011556:	4b14      	ldr	r3, [pc, #80]	; (80115a8 <tcp_oos_insert_segment+0x10c>)
 8011558:	681b      	ldr	r3, [r3, #0]
 801155a:	441a      	add	r2, r3
 801155c:	683b      	ldr	r3, [r7, #0]
 801155e:	68db      	ldr	r3, [r3, #12]
 8011560:	685b      	ldr	r3, [r3, #4]
 8011562:	1ad3      	subs	r3, r2, r3
    if (next &&
 8011564:	2b00      	cmp	r3, #0
 8011566:	dd12      	ble.n	801158e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8011568:	683b      	ldr	r3, [r7, #0]
 801156a:	68db      	ldr	r3, [r3, #12]
 801156c:	685b      	ldr	r3, [r3, #4]
 801156e:	b29a      	uxth	r2, r3
 8011570:	4b0d      	ldr	r3, [pc, #52]	; (80115a8 <tcp_oos_insert_segment+0x10c>)
 8011572:	681b      	ldr	r3, [r3, #0]
 8011574:	b29b      	uxth	r3, r3
 8011576:	1ad3      	subs	r3, r2, r3
 8011578:	b29a      	uxth	r2, r3
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	685a      	ldr	r2, [r3, #4]
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	891b      	ldrh	r3, [r3, #8]
 8011586:	4619      	mov	r1, r3
 8011588:	4610      	mov	r0, r2
 801158a:	f7fc faff 	bl	800db8c <pbuf_realloc>
    }
  }
  cseg->next = next;
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	683a      	ldr	r2, [r7, #0]
 8011592:	601a      	str	r2, [r3, #0]
}
 8011594:	bf00      	nop
 8011596:	3714      	adds	r7, #20
 8011598:	46bd      	mov	sp, r7
 801159a:	bd90      	pop	{r4, r7, pc}
 801159c:	0801ce98 	.word	0x0801ce98
 80115a0:	0801d158 	.word	0x0801d158
 80115a4:	0801cee4 	.word	0x0801cee4
 80115a8:	2000bf58 	.word	0x2000bf58

080115ac <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80115ac:	b5b0      	push	{r4, r5, r7, lr}
 80115ae:	b086      	sub	sp, #24
 80115b0:	af00      	add	r7, sp, #0
 80115b2:	60f8      	str	r0, [r7, #12]
 80115b4:	60b9      	str	r1, [r7, #8]
 80115b6:	607a      	str	r2, [r7, #4]
 80115b8:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80115ba:	e03e      	b.n	801163a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80115bc:	68bb      	ldr	r3, [r7, #8]
 80115be:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80115c0:	68bb      	ldr	r3, [r7, #8]
 80115c2:	681b      	ldr	r3, [r3, #0]
 80115c4:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80115c6:	697b      	ldr	r3, [r7, #20]
 80115c8:	685b      	ldr	r3, [r3, #4]
 80115ca:	4618      	mov	r0, r3
 80115cc:	f7fc fcf2 	bl	800dfb4 <pbuf_clen>
 80115d0:	4603      	mov	r3, r0
 80115d2:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80115d4:	68fb      	ldr	r3, [r7, #12]
 80115d6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80115da:	8a7a      	ldrh	r2, [r7, #18]
 80115dc:	429a      	cmp	r2, r3
 80115de:	d906      	bls.n	80115ee <tcp_free_acked_segments+0x42>
 80115e0:	4b2a      	ldr	r3, [pc, #168]	; (801168c <tcp_free_acked_segments+0xe0>)
 80115e2:	f240 4257 	movw	r2, #1111	; 0x457
 80115e6:	492a      	ldr	r1, [pc, #168]	; (8011690 <tcp_free_acked_segments+0xe4>)
 80115e8:	482a      	ldr	r0, [pc, #168]	; (8011694 <tcp_free_acked_segments+0xe8>)
 80115ea:	f009 f8db 	bl	801a7a4 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80115ee:	68fb      	ldr	r3, [r7, #12]
 80115f0:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 80115f4:	8a7b      	ldrh	r3, [r7, #18]
 80115f6:	1ad3      	subs	r3, r2, r3
 80115f8:	b29a      	uxth	r2, r3
 80115fa:	68fb      	ldr	r3, [r7, #12]
 80115fc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8011600:	697b      	ldr	r3, [r7, #20]
 8011602:	891a      	ldrh	r2, [r3, #8]
 8011604:	4b24      	ldr	r3, [pc, #144]	; (8011698 <tcp_free_acked_segments+0xec>)
 8011606:	881b      	ldrh	r3, [r3, #0]
 8011608:	4413      	add	r3, r2
 801160a:	b29a      	uxth	r2, r3
 801160c:	4b22      	ldr	r3, [pc, #136]	; (8011698 <tcp_free_acked_segments+0xec>)
 801160e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8011610:	6978      	ldr	r0, [r7, #20]
 8011612:	f7fe f926 	bl	800f862 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8011616:	68fb      	ldr	r3, [r7, #12]
 8011618:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801161c:	2b00      	cmp	r3, #0
 801161e:	d00c      	beq.n	801163a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8011620:	68bb      	ldr	r3, [r7, #8]
 8011622:	2b00      	cmp	r3, #0
 8011624:	d109      	bne.n	801163a <tcp_free_acked_segments+0x8e>
 8011626:	683b      	ldr	r3, [r7, #0]
 8011628:	2b00      	cmp	r3, #0
 801162a:	d106      	bne.n	801163a <tcp_free_acked_segments+0x8e>
 801162c:	4b17      	ldr	r3, [pc, #92]	; (801168c <tcp_free_acked_segments+0xe0>)
 801162e:	f240 4261 	movw	r2, #1121	; 0x461
 8011632:	491a      	ldr	r1, [pc, #104]	; (801169c <tcp_free_acked_segments+0xf0>)
 8011634:	4817      	ldr	r0, [pc, #92]	; (8011694 <tcp_free_acked_segments+0xe8>)
 8011636:	f009 f8b5 	bl	801a7a4 <iprintf>
  while (seg_list != NULL &&
 801163a:	68bb      	ldr	r3, [r7, #8]
 801163c:	2b00      	cmp	r3, #0
 801163e:	d020      	beq.n	8011682 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8011640:	68bb      	ldr	r3, [r7, #8]
 8011642:	68db      	ldr	r3, [r3, #12]
 8011644:	685b      	ldr	r3, [r3, #4]
 8011646:	4618      	mov	r0, r3
 8011648:	f7fa ffd6 	bl	800c5f8 <lwip_htonl>
 801164c:	4604      	mov	r4, r0
 801164e:	68bb      	ldr	r3, [r7, #8]
 8011650:	891b      	ldrh	r3, [r3, #8]
 8011652:	461d      	mov	r5, r3
 8011654:	68bb      	ldr	r3, [r7, #8]
 8011656:	68db      	ldr	r3, [r3, #12]
 8011658:	899b      	ldrh	r3, [r3, #12]
 801165a:	b29b      	uxth	r3, r3
 801165c:	4618      	mov	r0, r3
 801165e:	f7fa ffb7 	bl	800c5d0 <lwip_htons>
 8011662:	4603      	mov	r3, r0
 8011664:	b2db      	uxtb	r3, r3
 8011666:	f003 0303 	and.w	r3, r3, #3
 801166a:	2b00      	cmp	r3, #0
 801166c:	d001      	beq.n	8011672 <tcp_free_acked_segments+0xc6>
 801166e:	2301      	movs	r3, #1
 8011670:	e000      	b.n	8011674 <tcp_free_acked_segments+0xc8>
 8011672:	2300      	movs	r3, #0
 8011674:	442b      	add	r3, r5
 8011676:	18e2      	adds	r2, r4, r3
 8011678:	4b09      	ldr	r3, [pc, #36]	; (80116a0 <tcp_free_acked_segments+0xf4>)
 801167a:	681b      	ldr	r3, [r3, #0]
 801167c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801167e:	2b00      	cmp	r3, #0
 8011680:	dd9c      	ble.n	80115bc <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8011682:	68bb      	ldr	r3, [r7, #8]
}
 8011684:	4618      	mov	r0, r3
 8011686:	3718      	adds	r7, #24
 8011688:	46bd      	mov	sp, r7
 801168a:	bdb0      	pop	{r4, r5, r7, pc}
 801168c:	0801ce98 	.word	0x0801ce98
 8011690:	0801d180 	.word	0x0801d180
 8011694:	0801cee4 	.word	0x0801cee4
 8011698:	2000bf60 	.word	0x2000bf60
 801169c:	0801d1a8 	.word	0x0801d1a8
 80116a0:	2000bf5c 	.word	0x2000bf5c

080116a4 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80116a4:	b5b0      	push	{r4, r5, r7, lr}
 80116a6:	b094      	sub	sp, #80	; 0x50
 80116a8:	af00      	add	r7, sp, #0
 80116aa:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80116ac:	2300      	movs	r3, #0
 80116ae:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	2b00      	cmp	r3, #0
 80116b4:	d106      	bne.n	80116c4 <tcp_receive+0x20>
 80116b6:	4b91      	ldr	r3, [pc, #580]	; (80118fc <tcp_receive+0x258>)
 80116b8:	f240 427b 	movw	r2, #1147	; 0x47b
 80116bc:	4990      	ldr	r1, [pc, #576]	; (8011900 <tcp_receive+0x25c>)
 80116be:	4891      	ldr	r0, [pc, #580]	; (8011904 <tcp_receive+0x260>)
 80116c0:	f009 f870 	bl	801a7a4 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	7d1b      	ldrb	r3, [r3, #20]
 80116c8:	2b03      	cmp	r3, #3
 80116ca:	d806      	bhi.n	80116da <tcp_receive+0x36>
 80116cc:	4b8b      	ldr	r3, [pc, #556]	; (80118fc <tcp_receive+0x258>)
 80116ce:	f240 427c 	movw	r2, #1148	; 0x47c
 80116d2:	498d      	ldr	r1, [pc, #564]	; (8011908 <tcp_receive+0x264>)
 80116d4:	488b      	ldr	r0, [pc, #556]	; (8011904 <tcp_receive+0x260>)
 80116d6:	f009 f865 	bl	801a7a4 <iprintf>

  if (flags & TCP_ACK) {
 80116da:	4b8c      	ldr	r3, [pc, #560]	; (801190c <tcp_receive+0x268>)
 80116dc:	781b      	ldrb	r3, [r3, #0]
 80116de:	f003 0310 	and.w	r3, r3, #16
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	f000 8264 	beq.w	8011bb0 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80116ee:	461a      	mov	r2, r3
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80116f4:	4413      	add	r3, r2
 80116f6:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80116fc:	4b84      	ldr	r3, [pc, #528]	; (8011910 <tcp_receive+0x26c>)
 80116fe:	681b      	ldr	r3, [r3, #0]
 8011700:	1ad3      	subs	r3, r2, r3
 8011702:	2b00      	cmp	r3, #0
 8011704:	db1b      	blt.n	801173e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801170a:	4b81      	ldr	r3, [pc, #516]	; (8011910 <tcp_receive+0x26c>)
 801170c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801170e:	429a      	cmp	r2, r3
 8011710:	d106      	bne.n	8011720 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011716:	4b7f      	ldr	r3, [pc, #508]	; (8011914 <tcp_receive+0x270>)
 8011718:	681b      	ldr	r3, [r3, #0]
 801171a:	1ad3      	subs	r3, r2, r3
 801171c:	2b00      	cmp	r3, #0
 801171e:	db0e      	blt.n	801173e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011724:	4b7b      	ldr	r3, [pc, #492]	; (8011914 <tcp_receive+0x270>)
 8011726:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011728:	429a      	cmp	r2, r3
 801172a:	d125      	bne.n	8011778 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801172c:	4b7a      	ldr	r3, [pc, #488]	; (8011918 <tcp_receive+0x274>)
 801172e:	681b      	ldr	r3, [r3, #0]
 8011730:	89db      	ldrh	r3, [r3, #14]
 8011732:	b29a      	uxth	r2, r3
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801173a:	429a      	cmp	r2, r3
 801173c:	d91c      	bls.n	8011778 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801173e:	4b76      	ldr	r3, [pc, #472]	; (8011918 <tcp_receive+0x274>)
 8011740:	681b      	ldr	r3, [r3, #0]
 8011742:	89db      	ldrh	r3, [r3, #14]
 8011744:	b29a      	uxth	r2, r3
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011758:	429a      	cmp	r2, r3
 801175a:	d205      	bcs.n	8011768 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8011768:	4b69      	ldr	r3, [pc, #420]	; (8011910 <tcp_receive+0x26c>)
 801176a:	681a      	ldr	r2, [r3, #0]
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8011770:	4b68      	ldr	r3, [pc, #416]	; (8011914 <tcp_receive+0x270>)
 8011772:	681a      	ldr	r2, [r3, #0]
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8011778:	4b66      	ldr	r3, [pc, #408]	; (8011914 <tcp_receive+0x270>)
 801177a:	681a      	ldr	r2, [r3, #0]
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011780:	1ad3      	subs	r3, r2, r3
 8011782:	2b00      	cmp	r3, #0
 8011784:	dc58      	bgt.n	8011838 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8011786:	4b65      	ldr	r3, [pc, #404]	; (801191c <tcp_receive+0x278>)
 8011788:	881b      	ldrh	r3, [r3, #0]
 801178a:	2b00      	cmp	r3, #0
 801178c:	d14b      	bne.n	8011826 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011792:	687a      	ldr	r2, [r7, #4]
 8011794:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8011798:	4413      	add	r3, r2
 801179a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801179c:	429a      	cmp	r2, r3
 801179e:	d142      	bne.n	8011826 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	db3d      	blt.n	8011826 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80117ae:	4b59      	ldr	r3, [pc, #356]	; (8011914 <tcp_receive+0x270>)
 80117b0:	681b      	ldr	r3, [r3, #0]
 80117b2:	429a      	cmp	r2, r3
 80117b4:	d137      	bne.n	8011826 <tcp_receive+0x182>
              found_dupack = 1;
 80117b6:	2301      	movs	r3, #1
 80117b8:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80117c0:	2bff      	cmp	r3, #255	; 0xff
 80117c2:	d007      	beq.n	80117d4 <tcp_receive+0x130>
                ++pcb->dupacks;
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80117ca:	3301      	adds	r3, #1
 80117cc:	b2da      	uxtb	r2, r3
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80117da:	2b03      	cmp	r3, #3
 80117dc:	d91b      	bls.n	8011816 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80117e8:	4413      	add	r3, r2
 80117ea:	b29a      	uxth	r2, r3
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80117f2:	429a      	cmp	r2, r3
 80117f4:	d30a      	bcc.n	801180c <tcp_receive+0x168>
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011800:	4413      	add	r3, r2
 8011802:	b29a      	uxth	r2, r3
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801180a:	e004      	b.n	8011816 <tcp_receive+0x172>
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011812:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801181c:	2b02      	cmp	r3, #2
 801181e:	d902      	bls.n	8011826 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8011820:	6878      	ldr	r0, [r7, #4]
 8011822:	f002 fb43 	bl	8013eac <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8011826:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011828:	2b00      	cmp	r3, #0
 801182a:	f040 8161 	bne.w	8011af0 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	2200      	movs	r2, #0
 8011832:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8011836:	e15b      	b.n	8011af0 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011838:	4b36      	ldr	r3, [pc, #216]	; (8011914 <tcp_receive+0x270>)
 801183a:	681a      	ldr	r2, [r3, #0]
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011840:	1ad3      	subs	r3, r2, r3
 8011842:	3b01      	subs	r3, #1
 8011844:	2b00      	cmp	r3, #0
 8011846:	f2c0 814e 	blt.w	8011ae6 <tcp_receive+0x442>
 801184a:	4b32      	ldr	r3, [pc, #200]	; (8011914 <tcp_receive+0x270>)
 801184c:	681a      	ldr	r2, [r3, #0]
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011852:	1ad3      	subs	r3, r2, r3
 8011854:	2b00      	cmp	r3, #0
 8011856:	f300 8146 	bgt.w	8011ae6 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	8b5b      	ldrh	r3, [r3, #26]
 801185e:	f003 0304 	and.w	r3, r3, #4
 8011862:	2b00      	cmp	r3, #0
 8011864:	d010      	beq.n	8011888 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	8b5b      	ldrh	r3, [r3, #26]
 801186a:	f023 0304 	bic.w	r3, r3, #4
 801186e:	b29a      	uxth	r2, r3
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	2200      	movs	r2, #0
 8011884:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	2200      	movs	r2, #0
 801188c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011896:	10db      	asrs	r3, r3, #3
 8011898:	b21b      	sxth	r3, r3
 801189a:	b29a      	uxth	r2, r3
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80118a2:	b29b      	uxth	r3, r3
 80118a4:	4413      	add	r3, r2
 80118a6:	b29b      	uxth	r3, r3
 80118a8:	b21a      	sxth	r2, r3
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80118b0:	4b18      	ldr	r3, [pc, #96]	; (8011914 <tcp_receive+0x270>)
 80118b2:	681b      	ldr	r3, [r3, #0]
 80118b4:	b29a      	uxth	r2, r3
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80118ba:	b29b      	uxth	r3, r3
 80118bc:	1ad3      	subs	r3, r2, r3
 80118be:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	2200      	movs	r2, #0
 80118c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 80118c8:	4b12      	ldr	r3, [pc, #72]	; (8011914 <tcp_receive+0x270>)
 80118ca:	681a      	ldr	r2, [r3, #0]
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	7d1b      	ldrb	r3, [r3, #20]
 80118d4:	2b03      	cmp	r3, #3
 80118d6:	f240 8097 	bls.w	8011a08 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80118e6:	429a      	cmp	r2, r3
 80118e8:	d245      	bcs.n	8011976 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	8b5b      	ldrh	r3, [r3, #26]
 80118ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	d014      	beq.n	8011920 <tcp_receive+0x27c>
 80118f6:	2301      	movs	r3, #1
 80118f8:	e013      	b.n	8011922 <tcp_receive+0x27e>
 80118fa:	bf00      	nop
 80118fc:	0801ce98 	.word	0x0801ce98
 8011900:	0801d1c8 	.word	0x0801d1c8
 8011904:	0801cee4 	.word	0x0801cee4
 8011908:	0801d1e4 	.word	0x0801d1e4
 801190c:	2000bf64 	.word	0x2000bf64
 8011910:	2000bf58 	.word	0x2000bf58
 8011914:	2000bf5c 	.word	0x2000bf5c
 8011918:	2000bf48 	.word	0x2000bf48
 801191c:	2000bf62 	.word	0x2000bf62
 8011920:	2302      	movs	r3, #2
 8011922:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8011926:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801192a:	b29a      	uxth	r2, r3
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011930:	fb12 f303 	smulbb	r3, r2, r3
 8011934:	b29b      	uxth	r3, r3
 8011936:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011938:	4293      	cmp	r3, r2
 801193a:	bf28      	it	cs
 801193c:	4613      	movcs	r3, r2
 801193e:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011946:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011948:	4413      	add	r3, r2
 801194a:	b29a      	uxth	r2, r3
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011952:	429a      	cmp	r2, r3
 8011954:	d309      	bcc.n	801196a <tcp_receive+0x2c6>
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801195c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801195e:	4413      	add	r3, r2
 8011960:	b29a      	uxth	r2, r3
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011968:	e04e      	b.n	8011a08 <tcp_receive+0x364>
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011970:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011974:	e048      	b.n	8011a08 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801197c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801197e:	4413      	add	r3, r2
 8011980:	b29a      	uxth	r2, r3
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011988:	429a      	cmp	r2, r3
 801198a:	d309      	bcc.n	80119a0 <tcp_receive+0x2fc>
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011992:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011994:	4413      	add	r3, r2
 8011996:	b29a      	uxth	r2, r3
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 801199e:	e004      	b.n	80119aa <tcp_receive+0x306>
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80119a6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80119b6:	429a      	cmp	r2, r3
 80119b8:	d326      	bcc.n	8011a08 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80119c6:	1ad3      	subs	r3, r2, r3
 80119c8:	b29a      	uxth	r2, r3
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80119da:	4413      	add	r3, r2
 80119dc:	b29a      	uxth	r2, r3
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80119e4:	429a      	cmp	r2, r3
 80119e6:	d30a      	bcc.n	80119fe <tcp_receive+0x35a>
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80119f2:	4413      	add	r3, r2
 80119f4:	b29a      	uxth	r2, r3
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80119fc:	e004      	b.n	8011a08 <tcp_receive+0x364>
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011a04:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011a10:	4a98      	ldr	r2, [pc, #608]	; (8011c74 <tcp_receive+0x5d0>)
 8011a12:	6878      	ldr	r0, [r7, #4]
 8011a14:	f7ff fdca 	bl	80115ac <tcp_free_acked_segments>
 8011a18:	4602      	mov	r2, r0
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011a26:	4a94      	ldr	r2, [pc, #592]	; (8011c78 <tcp_receive+0x5d4>)
 8011a28:	6878      	ldr	r0, [r7, #4]
 8011a2a:	f7ff fdbf 	bl	80115ac <tcp_free_acked_segments>
 8011a2e:	4602      	mov	r2, r0
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011a38:	2b00      	cmp	r3, #0
 8011a3a:	d104      	bne.n	8011a46 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011a42:	861a      	strh	r2, [r3, #48]	; 0x30
 8011a44:	e002      	b.n	8011a4c <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	2200      	movs	r2, #0
 8011a4a:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	2200      	movs	r2, #0
 8011a50:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011a56:	2b00      	cmp	r3, #0
 8011a58:	d103      	bne.n	8011a62 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	2200      	movs	r2, #0
 8011a5e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8011a68:	4b84      	ldr	r3, [pc, #528]	; (8011c7c <tcp_receive+0x5d8>)
 8011a6a:	881b      	ldrh	r3, [r3, #0]
 8011a6c:	4413      	add	r3, r2
 8011a6e:	b29a      	uxth	r2, r3
 8011a70:	687b      	ldr	r3, [r7, #4]
 8011a72:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	8b5b      	ldrh	r3, [r3, #26]
 8011a7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011a7e:	2b00      	cmp	r3, #0
 8011a80:	d035      	beq.n	8011aee <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8011a82:	687b      	ldr	r3, [r7, #4]
 8011a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011a86:	2b00      	cmp	r3, #0
 8011a88:	d118      	bne.n	8011abc <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011a8e:	2b00      	cmp	r3, #0
 8011a90:	d00c      	beq.n	8011aac <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8011a96:	687b      	ldr	r3, [r7, #4]
 8011a98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011a9a:	68db      	ldr	r3, [r3, #12]
 8011a9c:	685b      	ldr	r3, [r3, #4]
 8011a9e:	4618      	mov	r0, r3
 8011aa0:	f7fa fdaa 	bl	800c5f8 <lwip_htonl>
 8011aa4:	4603      	mov	r3, r0
 8011aa6:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8011aa8:	2b00      	cmp	r3, #0
 8011aaa:	dc20      	bgt.n	8011aee <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	8b5b      	ldrh	r3, [r3, #26]
 8011ab0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011ab4:	b29a      	uxth	r2, r3
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011aba:	e018      	b.n	8011aee <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011ac4:	68db      	ldr	r3, [r3, #12]
 8011ac6:	685b      	ldr	r3, [r3, #4]
 8011ac8:	4618      	mov	r0, r3
 8011aca:	f7fa fd95 	bl	800c5f8 <lwip_htonl>
 8011ace:	4603      	mov	r3, r0
 8011ad0:	1ae3      	subs	r3, r4, r3
 8011ad2:	2b00      	cmp	r3, #0
 8011ad4:	dc0b      	bgt.n	8011aee <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	8b5b      	ldrh	r3, [r3, #26]
 8011ada:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011ade:	b29a      	uxth	r2, r3
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011ae4:	e003      	b.n	8011aee <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8011ae6:	6878      	ldr	r0, [r7, #4]
 8011ae8:	f002 fbce 	bl	8014288 <tcp_send_empty_ack>
 8011aec:	e000      	b.n	8011af0 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011aee:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011af4:	2b00      	cmp	r3, #0
 8011af6:	d05b      	beq.n	8011bb0 <tcp_receive+0x50c>
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011afc:	4b60      	ldr	r3, [pc, #384]	; (8011c80 <tcp_receive+0x5dc>)
 8011afe:	681b      	ldr	r3, [r3, #0]
 8011b00:	1ad3      	subs	r3, r2, r3
 8011b02:	2b00      	cmp	r3, #0
 8011b04:	da54      	bge.n	8011bb0 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8011b06:	4b5f      	ldr	r3, [pc, #380]	; (8011c84 <tcp_receive+0x5e0>)
 8011b08:	681b      	ldr	r3, [r3, #0]
 8011b0a:	b29a      	uxth	r2, r3
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011b10:	b29b      	uxth	r3, r3
 8011b12:	1ad3      	subs	r3, r2, r3
 8011b14:	b29b      	uxth	r3, r3
 8011b16:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8011b1a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011b24:	10db      	asrs	r3, r3, #3
 8011b26:	b21b      	sxth	r3, r3
 8011b28:	b29b      	uxth	r3, r3
 8011b2a:	1ad3      	subs	r3, r2, r3
 8011b2c:	b29b      	uxth	r3, r3
 8011b2e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011b38:	b29a      	uxth	r2, r3
 8011b3a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8011b3e:	4413      	add	r3, r2
 8011b40:	b29b      	uxth	r3, r3
 8011b42:	b21a      	sxth	r2, r3
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8011b48:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8011b4c:	2b00      	cmp	r3, #0
 8011b4e:	da05      	bge.n	8011b5c <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8011b50:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8011b54:	425b      	negs	r3, r3
 8011b56:	b29b      	uxth	r3, r3
 8011b58:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8011b5c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011b66:	109b      	asrs	r3, r3, #2
 8011b68:	b21b      	sxth	r3, r3
 8011b6a:	b29b      	uxth	r3, r3
 8011b6c:	1ad3      	subs	r3, r2, r3
 8011b6e:	b29b      	uxth	r3, r3
 8011b70:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011b7a:	b29a      	uxth	r2, r3
 8011b7c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8011b80:	4413      	add	r3, r2
 8011b82:	b29b      	uxth	r3, r3
 8011b84:	b21a      	sxth	r2, r3
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011b90:	10db      	asrs	r3, r3, #3
 8011b92:	b21b      	sxth	r3, r3
 8011b94:	b29a      	uxth	r2, r3
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011b9c:	b29b      	uxth	r3, r3
 8011b9e:	4413      	add	r3, r2
 8011ba0:	b29b      	uxth	r3, r3
 8011ba2:	b21a      	sxth	r2, r3
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	2200      	movs	r2, #0
 8011bae:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8011bb0:	4b35      	ldr	r3, [pc, #212]	; (8011c88 <tcp_receive+0x5e4>)
 8011bb2:	881b      	ldrh	r3, [r3, #0]
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	f000 84e2 	beq.w	801257e <tcp_receive+0xeda>
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	7d1b      	ldrb	r3, [r3, #20]
 8011bbe:	2b06      	cmp	r3, #6
 8011bc0:	f200 84dd 	bhi.w	801257e <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011bc8:	4b30      	ldr	r3, [pc, #192]	; (8011c8c <tcp_receive+0x5e8>)
 8011bca:	681b      	ldr	r3, [r3, #0]
 8011bcc:	1ad3      	subs	r3, r2, r3
 8011bce:	3b01      	subs	r3, #1
 8011bd0:	2b00      	cmp	r3, #0
 8011bd2:	f2c0 808f 	blt.w	8011cf4 <tcp_receive+0x650>
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011bda:	4b2b      	ldr	r3, [pc, #172]	; (8011c88 <tcp_receive+0x5e4>)
 8011bdc:	881b      	ldrh	r3, [r3, #0]
 8011bde:	4619      	mov	r1, r3
 8011be0:	4b2a      	ldr	r3, [pc, #168]	; (8011c8c <tcp_receive+0x5e8>)
 8011be2:	681b      	ldr	r3, [r3, #0]
 8011be4:	440b      	add	r3, r1
 8011be6:	1ad3      	subs	r3, r2, r3
 8011be8:	3301      	adds	r3, #1
 8011bea:	2b00      	cmp	r3, #0
 8011bec:	f300 8082 	bgt.w	8011cf4 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8011bf0:	4b27      	ldr	r3, [pc, #156]	; (8011c90 <tcp_receive+0x5ec>)
 8011bf2:	685b      	ldr	r3, [r3, #4]
 8011bf4:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011bfa:	4b24      	ldr	r3, [pc, #144]	; (8011c8c <tcp_receive+0x5e8>)
 8011bfc:	681b      	ldr	r3, [r3, #0]
 8011bfe:	1ad3      	subs	r3, r2, r3
 8011c00:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8011c02:	4b23      	ldr	r3, [pc, #140]	; (8011c90 <tcp_receive+0x5ec>)
 8011c04:	685b      	ldr	r3, [r3, #4]
 8011c06:	2b00      	cmp	r3, #0
 8011c08:	d106      	bne.n	8011c18 <tcp_receive+0x574>
 8011c0a:	4b22      	ldr	r3, [pc, #136]	; (8011c94 <tcp_receive+0x5f0>)
 8011c0c:	f240 5294 	movw	r2, #1428	; 0x594
 8011c10:	4921      	ldr	r1, [pc, #132]	; (8011c98 <tcp_receive+0x5f4>)
 8011c12:	4822      	ldr	r0, [pc, #136]	; (8011c9c <tcp_receive+0x5f8>)
 8011c14:	f008 fdc6 	bl	801a7a4 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8011c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c1a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8011c1e:	4293      	cmp	r3, r2
 8011c20:	d906      	bls.n	8011c30 <tcp_receive+0x58c>
 8011c22:	4b1c      	ldr	r3, [pc, #112]	; (8011c94 <tcp_receive+0x5f0>)
 8011c24:	f240 5295 	movw	r2, #1429	; 0x595
 8011c28:	491d      	ldr	r1, [pc, #116]	; (8011ca0 <tcp_receive+0x5fc>)
 8011c2a:	481c      	ldr	r0, [pc, #112]	; (8011c9c <tcp_receive+0x5f8>)
 8011c2c:	f008 fdba 	bl	801a7a4 <iprintf>
      off = (u16_t)off32;
 8011c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c32:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8011c36:	4b16      	ldr	r3, [pc, #88]	; (8011c90 <tcp_receive+0x5ec>)
 8011c38:	685b      	ldr	r3, [r3, #4]
 8011c3a:	891b      	ldrh	r3, [r3, #8]
 8011c3c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011c40:	429a      	cmp	r2, r3
 8011c42:	d906      	bls.n	8011c52 <tcp_receive+0x5ae>
 8011c44:	4b13      	ldr	r3, [pc, #76]	; (8011c94 <tcp_receive+0x5f0>)
 8011c46:	f240 5297 	movw	r2, #1431	; 0x597
 8011c4a:	4916      	ldr	r1, [pc, #88]	; (8011ca4 <tcp_receive+0x600>)
 8011c4c:	4813      	ldr	r0, [pc, #76]	; (8011c9c <tcp_receive+0x5f8>)
 8011c4e:	f008 fda9 	bl	801a7a4 <iprintf>
      inseg.len -= off;
 8011c52:	4b0f      	ldr	r3, [pc, #60]	; (8011c90 <tcp_receive+0x5ec>)
 8011c54:	891a      	ldrh	r2, [r3, #8]
 8011c56:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011c5a:	1ad3      	subs	r3, r2, r3
 8011c5c:	b29a      	uxth	r2, r3
 8011c5e:	4b0c      	ldr	r3, [pc, #48]	; (8011c90 <tcp_receive+0x5ec>)
 8011c60:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8011c62:	4b0b      	ldr	r3, [pc, #44]	; (8011c90 <tcp_receive+0x5ec>)
 8011c64:	685b      	ldr	r3, [r3, #4]
 8011c66:	891a      	ldrh	r2, [r3, #8]
 8011c68:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011c6c:	1ad3      	subs	r3, r2, r3
 8011c6e:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8011c70:	e02a      	b.n	8011cc8 <tcp_receive+0x624>
 8011c72:	bf00      	nop
 8011c74:	0801d200 	.word	0x0801d200
 8011c78:	0801d208 	.word	0x0801d208
 8011c7c:	2000bf60 	.word	0x2000bf60
 8011c80:	2000bf5c 	.word	0x2000bf5c
 8011c84:	2000bf20 	.word	0x2000bf20
 8011c88:	2000bf62 	.word	0x2000bf62
 8011c8c:	2000bf58 	.word	0x2000bf58
 8011c90:	2000bf38 	.word	0x2000bf38
 8011c94:	0801ce98 	.word	0x0801ce98
 8011c98:	0801d210 	.word	0x0801d210
 8011c9c:	0801cee4 	.word	0x0801cee4
 8011ca0:	0801d220 	.word	0x0801d220
 8011ca4:	0801d230 	.word	0x0801d230
        off -= p->len;
 8011ca8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011caa:	895b      	ldrh	r3, [r3, #10]
 8011cac:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011cb0:	1ad3      	subs	r3, r2, r3
 8011cb2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8011cb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011cb8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8011cba:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8011cbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011cbe:	2200      	movs	r2, #0
 8011cc0:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8011cc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011cc4:	681b      	ldr	r3, [r3, #0]
 8011cc6:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8011cc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011cca:	895b      	ldrh	r3, [r3, #10]
 8011ccc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011cd0:	429a      	cmp	r2, r3
 8011cd2:	d8e9      	bhi.n	8011ca8 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8011cd4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011cd8:	4619      	mov	r1, r3
 8011cda:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8011cdc:	f7fc f856 	bl	800dd8c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ce4:	4a91      	ldr	r2, [pc, #580]	; (8011f2c <tcp_receive+0x888>)
 8011ce6:	6013      	str	r3, [r2, #0]
 8011ce8:	4b91      	ldr	r3, [pc, #580]	; (8011f30 <tcp_receive+0x88c>)
 8011cea:	68db      	ldr	r3, [r3, #12]
 8011cec:	4a8f      	ldr	r2, [pc, #572]	; (8011f2c <tcp_receive+0x888>)
 8011cee:	6812      	ldr	r2, [r2, #0]
 8011cf0:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8011cf2:	e00d      	b.n	8011d10 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8011cf4:	4b8d      	ldr	r3, [pc, #564]	; (8011f2c <tcp_receive+0x888>)
 8011cf6:	681a      	ldr	r2, [r3, #0]
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011cfc:	1ad3      	subs	r3, r2, r3
 8011cfe:	2b00      	cmp	r3, #0
 8011d00:	da06      	bge.n	8011d10 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	8b5b      	ldrh	r3, [r3, #26]
 8011d06:	f043 0302 	orr.w	r3, r3, #2
 8011d0a:	b29a      	uxth	r2, r3
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011d10:	4b86      	ldr	r3, [pc, #536]	; (8011f2c <tcp_receive+0x888>)
 8011d12:	681a      	ldr	r2, [r3, #0]
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d18:	1ad3      	subs	r3, r2, r3
 8011d1a:	2b00      	cmp	r3, #0
 8011d1c:	f2c0 842a 	blt.w	8012574 <tcp_receive+0xed0>
 8011d20:	4b82      	ldr	r3, [pc, #520]	; (8011f2c <tcp_receive+0x888>)
 8011d22:	681a      	ldr	r2, [r3, #0]
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d28:	6879      	ldr	r1, [r7, #4]
 8011d2a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011d2c:	440b      	add	r3, r1
 8011d2e:	1ad3      	subs	r3, r2, r3
 8011d30:	3301      	adds	r3, #1
 8011d32:	2b00      	cmp	r3, #0
 8011d34:	f300 841e 	bgt.w	8012574 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8011d38:	687b      	ldr	r3, [r7, #4]
 8011d3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011d3c:	4b7b      	ldr	r3, [pc, #492]	; (8011f2c <tcp_receive+0x888>)
 8011d3e:	681b      	ldr	r3, [r3, #0]
 8011d40:	429a      	cmp	r2, r3
 8011d42:	f040 829a 	bne.w	801227a <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8011d46:	4b7a      	ldr	r3, [pc, #488]	; (8011f30 <tcp_receive+0x88c>)
 8011d48:	891c      	ldrh	r4, [r3, #8]
 8011d4a:	4b79      	ldr	r3, [pc, #484]	; (8011f30 <tcp_receive+0x88c>)
 8011d4c:	68db      	ldr	r3, [r3, #12]
 8011d4e:	899b      	ldrh	r3, [r3, #12]
 8011d50:	b29b      	uxth	r3, r3
 8011d52:	4618      	mov	r0, r3
 8011d54:	f7fa fc3c 	bl	800c5d0 <lwip_htons>
 8011d58:	4603      	mov	r3, r0
 8011d5a:	b2db      	uxtb	r3, r3
 8011d5c:	f003 0303 	and.w	r3, r3, #3
 8011d60:	2b00      	cmp	r3, #0
 8011d62:	d001      	beq.n	8011d68 <tcp_receive+0x6c4>
 8011d64:	2301      	movs	r3, #1
 8011d66:	e000      	b.n	8011d6a <tcp_receive+0x6c6>
 8011d68:	2300      	movs	r3, #0
 8011d6a:	4423      	add	r3, r4
 8011d6c:	b29a      	uxth	r2, r3
 8011d6e:	4b71      	ldr	r3, [pc, #452]	; (8011f34 <tcp_receive+0x890>)
 8011d70:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011d76:	4b6f      	ldr	r3, [pc, #444]	; (8011f34 <tcp_receive+0x890>)
 8011d78:	881b      	ldrh	r3, [r3, #0]
 8011d7a:	429a      	cmp	r2, r3
 8011d7c:	d275      	bcs.n	8011e6a <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011d7e:	4b6c      	ldr	r3, [pc, #432]	; (8011f30 <tcp_receive+0x88c>)
 8011d80:	68db      	ldr	r3, [r3, #12]
 8011d82:	899b      	ldrh	r3, [r3, #12]
 8011d84:	b29b      	uxth	r3, r3
 8011d86:	4618      	mov	r0, r3
 8011d88:	f7fa fc22 	bl	800c5d0 <lwip_htons>
 8011d8c:	4603      	mov	r3, r0
 8011d8e:	b2db      	uxtb	r3, r3
 8011d90:	f003 0301 	and.w	r3, r3, #1
 8011d94:	2b00      	cmp	r3, #0
 8011d96:	d01f      	beq.n	8011dd8 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8011d98:	4b65      	ldr	r3, [pc, #404]	; (8011f30 <tcp_receive+0x88c>)
 8011d9a:	68db      	ldr	r3, [r3, #12]
 8011d9c:	899b      	ldrh	r3, [r3, #12]
 8011d9e:	b29b      	uxth	r3, r3
 8011da0:	b21b      	sxth	r3, r3
 8011da2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011da6:	b21c      	sxth	r4, r3
 8011da8:	4b61      	ldr	r3, [pc, #388]	; (8011f30 <tcp_receive+0x88c>)
 8011daa:	68db      	ldr	r3, [r3, #12]
 8011dac:	899b      	ldrh	r3, [r3, #12]
 8011dae:	b29b      	uxth	r3, r3
 8011db0:	4618      	mov	r0, r3
 8011db2:	f7fa fc0d 	bl	800c5d0 <lwip_htons>
 8011db6:	4603      	mov	r3, r0
 8011db8:	b2db      	uxtb	r3, r3
 8011dba:	b29b      	uxth	r3, r3
 8011dbc:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8011dc0:	b29b      	uxth	r3, r3
 8011dc2:	4618      	mov	r0, r3
 8011dc4:	f7fa fc04 	bl	800c5d0 <lwip_htons>
 8011dc8:	4603      	mov	r3, r0
 8011dca:	b21b      	sxth	r3, r3
 8011dcc:	4323      	orrs	r3, r4
 8011dce:	b21a      	sxth	r2, r3
 8011dd0:	4b57      	ldr	r3, [pc, #348]	; (8011f30 <tcp_receive+0x88c>)
 8011dd2:	68db      	ldr	r3, [r3, #12]
 8011dd4:	b292      	uxth	r2, r2
 8011dd6:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011ddc:	4b54      	ldr	r3, [pc, #336]	; (8011f30 <tcp_receive+0x88c>)
 8011dde:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8011de0:	4b53      	ldr	r3, [pc, #332]	; (8011f30 <tcp_receive+0x88c>)
 8011de2:	68db      	ldr	r3, [r3, #12]
 8011de4:	899b      	ldrh	r3, [r3, #12]
 8011de6:	b29b      	uxth	r3, r3
 8011de8:	4618      	mov	r0, r3
 8011dea:	f7fa fbf1 	bl	800c5d0 <lwip_htons>
 8011dee:	4603      	mov	r3, r0
 8011df0:	b2db      	uxtb	r3, r3
 8011df2:	f003 0302 	and.w	r3, r3, #2
 8011df6:	2b00      	cmp	r3, #0
 8011df8:	d005      	beq.n	8011e06 <tcp_receive+0x762>
            inseg.len -= 1;
 8011dfa:	4b4d      	ldr	r3, [pc, #308]	; (8011f30 <tcp_receive+0x88c>)
 8011dfc:	891b      	ldrh	r3, [r3, #8]
 8011dfe:	3b01      	subs	r3, #1
 8011e00:	b29a      	uxth	r2, r3
 8011e02:	4b4b      	ldr	r3, [pc, #300]	; (8011f30 <tcp_receive+0x88c>)
 8011e04:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8011e06:	4b4a      	ldr	r3, [pc, #296]	; (8011f30 <tcp_receive+0x88c>)
 8011e08:	685b      	ldr	r3, [r3, #4]
 8011e0a:	4a49      	ldr	r2, [pc, #292]	; (8011f30 <tcp_receive+0x88c>)
 8011e0c:	8912      	ldrh	r2, [r2, #8]
 8011e0e:	4611      	mov	r1, r2
 8011e10:	4618      	mov	r0, r3
 8011e12:	f7fb febb 	bl	800db8c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8011e16:	4b46      	ldr	r3, [pc, #280]	; (8011f30 <tcp_receive+0x88c>)
 8011e18:	891c      	ldrh	r4, [r3, #8]
 8011e1a:	4b45      	ldr	r3, [pc, #276]	; (8011f30 <tcp_receive+0x88c>)
 8011e1c:	68db      	ldr	r3, [r3, #12]
 8011e1e:	899b      	ldrh	r3, [r3, #12]
 8011e20:	b29b      	uxth	r3, r3
 8011e22:	4618      	mov	r0, r3
 8011e24:	f7fa fbd4 	bl	800c5d0 <lwip_htons>
 8011e28:	4603      	mov	r3, r0
 8011e2a:	b2db      	uxtb	r3, r3
 8011e2c:	f003 0303 	and.w	r3, r3, #3
 8011e30:	2b00      	cmp	r3, #0
 8011e32:	d001      	beq.n	8011e38 <tcp_receive+0x794>
 8011e34:	2301      	movs	r3, #1
 8011e36:	e000      	b.n	8011e3a <tcp_receive+0x796>
 8011e38:	2300      	movs	r3, #0
 8011e3a:	4423      	add	r3, r4
 8011e3c:	b29a      	uxth	r2, r3
 8011e3e:	4b3d      	ldr	r3, [pc, #244]	; (8011f34 <tcp_receive+0x890>)
 8011e40:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8011e42:	4b3c      	ldr	r3, [pc, #240]	; (8011f34 <tcp_receive+0x890>)
 8011e44:	881b      	ldrh	r3, [r3, #0]
 8011e46:	461a      	mov	r2, r3
 8011e48:	4b38      	ldr	r3, [pc, #224]	; (8011f2c <tcp_receive+0x888>)
 8011e4a:	681b      	ldr	r3, [r3, #0]
 8011e4c:	441a      	add	r2, r3
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e52:	6879      	ldr	r1, [r7, #4]
 8011e54:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011e56:	440b      	add	r3, r1
 8011e58:	429a      	cmp	r2, r3
 8011e5a:	d006      	beq.n	8011e6a <tcp_receive+0x7c6>
 8011e5c:	4b36      	ldr	r3, [pc, #216]	; (8011f38 <tcp_receive+0x894>)
 8011e5e:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8011e62:	4936      	ldr	r1, [pc, #216]	; (8011f3c <tcp_receive+0x898>)
 8011e64:	4836      	ldr	r0, [pc, #216]	; (8011f40 <tcp_receive+0x89c>)
 8011e66:	f008 fc9d 	bl	801a7a4 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011e6e:	2b00      	cmp	r3, #0
 8011e70:	f000 80e7 	beq.w	8012042 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011e74:	4b2e      	ldr	r3, [pc, #184]	; (8011f30 <tcp_receive+0x88c>)
 8011e76:	68db      	ldr	r3, [r3, #12]
 8011e78:	899b      	ldrh	r3, [r3, #12]
 8011e7a:	b29b      	uxth	r3, r3
 8011e7c:	4618      	mov	r0, r3
 8011e7e:	f7fa fba7 	bl	800c5d0 <lwip_htons>
 8011e82:	4603      	mov	r3, r0
 8011e84:	b2db      	uxtb	r3, r3
 8011e86:	f003 0301 	and.w	r3, r3, #1
 8011e8a:	2b00      	cmp	r3, #0
 8011e8c:	d010      	beq.n	8011eb0 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8011e8e:	e00a      	b.n	8011ea6 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011e94:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011e9a:	681a      	ldr	r2, [r3, #0]
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8011ea0:	68f8      	ldr	r0, [r7, #12]
 8011ea2:	f7fd fcde 	bl	800f862 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011eaa:	2b00      	cmp	r3, #0
 8011eac:	d1f0      	bne.n	8011e90 <tcp_receive+0x7ec>
 8011eae:	e0c8      	b.n	8012042 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011eb4:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8011eb6:	e052      	b.n	8011f5e <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8011eb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011eba:	68db      	ldr	r3, [r3, #12]
 8011ebc:	899b      	ldrh	r3, [r3, #12]
 8011ebe:	b29b      	uxth	r3, r3
 8011ec0:	4618      	mov	r0, r3
 8011ec2:	f7fa fb85 	bl	800c5d0 <lwip_htons>
 8011ec6:	4603      	mov	r3, r0
 8011ec8:	b2db      	uxtb	r3, r3
 8011eca:	f003 0301 	and.w	r3, r3, #1
 8011ece:	2b00      	cmp	r3, #0
 8011ed0:	d03d      	beq.n	8011f4e <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8011ed2:	4b17      	ldr	r3, [pc, #92]	; (8011f30 <tcp_receive+0x88c>)
 8011ed4:	68db      	ldr	r3, [r3, #12]
 8011ed6:	899b      	ldrh	r3, [r3, #12]
 8011ed8:	b29b      	uxth	r3, r3
 8011eda:	4618      	mov	r0, r3
 8011edc:	f7fa fb78 	bl	800c5d0 <lwip_htons>
 8011ee0:	4603      	mov	r3, r0
 8011ee2:	b2db      	uxtb	r3, r3
 8011ee4:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8011ee8:	2b00      	cmp	r3, #0
 8011eea:	d130      	bne.n	8011f4e <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8011eec:	4b10      	ldr	r3, [pc, #64]	; (8011f30 <tcp_receive+0x88c>)
 8011eee:	68db      	ldr	r3, [r3, #12]
 8011ef0:	899b      	ldrh	r3, [r3, #12]
 8011ef2:	b29c      	uxth	r4, r3
 8011ef4:	2001      	movs	r0, #1
 8011ef6:	f7fa fb6b 	bl	800c5d0 <lwip_htons>
 8011efa:	4603      	mov	r3, r0
 8011efc:	461a      	mov	r2, r3
 8011efe:	4b0c      	ldr	r3, [pc, #48]	; (8011f30 <tcp_receive+0x88c>)
 8011f00:	68db      	ldr	r3, [r3, #12]
 8011f02:	4322      	orrs	r2, r4
 8011f04:	b292      	uxth	r2, r2
 8011f06:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8011f08:	4b09      	ldr	r3, [pc, #36]	; (8011f30 <tcp_receive+0x88c>)
 8011f0a:	891c      	ldrh	r4, [r3, #8]
 8011f0c:	4b08      	ldr	r3, [pc, #32]	; (8011f30 <tcp_receive+0x88c>)
 8011f0e:	68db      	ldr	r3, [r3, #12]
 8011f10:	899b      	ldrh	r3, [r3, #12]
 8011f12:	b29b      	uxth	r3, r3
 8011f14:	4618      	mov	r0, r3
 8011f16:	f7fa fb5b 	bl	800c5d0 <lwip_htons>
 8011f1a:	4603      	mov	r3, r0
 8011f1c:	b2db      	uxtb	r3, r3
 8011f1e:	f003 0303 	and.w	r3, r3, #3
 8011f22:	2b00      	cmp	r3, #0
 8011f24:	d00e      	beq.n	8011f44 <tcp_receive+0x8a0>
 8011f26:	2301      	movs	r3, #1
 8011f28:	e00d      	b.n	8011f46 <tcp_receive+0x8a2>
 8011f2a:	bf00      	nop
 8011f2c:	2000bf58 	.word	0x2000bf58
 8011f30:	2000bf38 	.word	0x2000bf38
 8011f34:	2000bf62 	.word	0x2000bf62
 8011f38:	0801ce98 	.word	0x0801ce98
 8011f3c:	0801d240 	.word	0x0801d240
 8011f40:	0801cee4 	.word	0x0801cee4
 8011f44:	2300      	movs	r3, #0
 8011f46:	4423      	add	r3, r4
 8011f48:	b29a      	uxth	r2, r3
 8011f4a:	4b98      	ldr	r3, [pc, #608]	; (80121ac <tcp_receive+0xb08>)
 8011f4c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8011f4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f50:	613b      	str	r3, [r7, #16]
              next = next->next;
 8011f52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f54:	681b      	ldr	r3, [r3, #0]
 8011f56:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8011f58:	6938      	ldr	r0, [r7, #16]
 8011f5a:	f7fd fc82 	bl	800f862 <tcp_seg_free>
            while (next &&
 8011f5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f60:	2b00      	cmp	r3, #0
 8011f62:	d00e      	beq.n	8011f82 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8011f64:	4b91      	ldr	r3, [pc, #580]	; (80121ac <tcp_receive+0xb08>)
 8011f66:	881b      	ldrh	r3, [r3, #0]
 8011f68:	461a      	mov	r2, r3
 8011f6a:	4b91      	ldr	r3, [pc, #580]	; (80121b0 <tcp_receive+0xb0c>)
 8011f6c:	681b      	ldr	r3, [r3, #0]
 8011f6e:	441a      	add	r2, r3
 8011f70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f72:	68db      	ldr	r3, [r3, #12]
 8011f74:	685b      	ldr	r3, [r3, #4]
 8011f76:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011f78:	8909      	ldrh	r1, [r1, #8]
 8011f7a:	440b      	add	r3, r1
 8011f7c:	1ad3      	subs	r3, r2, r3
            while (next &&
 8011f7e:	2b00      	cmp	r3, #0
 8011f80:	da9a      	bge.n	8011eb8 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8011f82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f84:	2b00      	cmp	r3, #0
 8011f86:	d059      	beq.n	801203c <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8011f88:	4b88      	ldr	r3, [pc, #544]	; (80121ac <tcp_receive+0xb08>)
 8011f8a:	881b      	ldrh	r3, [r3, #0]
 8011f8c:	461a      	mov	r2, r3
 8011f8e:	4b88      	ldr	r3, [pc, #544]	; (80121b0 <tcp_receive+0xb0c>)
 8011f90:	681b      	ldr	r3, [r3, #0]
 8011f92:	441a      	add	r2, r3
 8011f94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f96:	68db      	ldr	r3, [r3, #12]
 8011f98:	685b      	ldr	r3, [r3, #4]
 8011f9a:	1ad3      	subs	r3, r2, r3
            if (next &&
 8011f9c:	2b00      	cmp	r3, #0
 8011f9e:	dd4d      	ble.n	801203c <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8011fa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011fa2:	68db      	ldr	r3, [r3, #12]
 8011fa4:	685b      	ldr	r3, [r3, #4]
 8011fa6:	b29a      	uxth	r2, r3
 8011fa8:	4b81      	ldr	r3, [pc, #516]	; (80121b0 <tcp_receive+0xb0c>)
 8011faa:	681b      	ldr	r3, [r3, #0]
 8011fac:	b29b      	uxth	r3, r3
 8011fae:	1ad3      	subs	r3, r2, r3
 8011fb0:	b29a      	uxth	r2, r3
 8011fb2:	4b80      	ldr	r3, [pc, #512]	; (80121b4 <tcp_receive+0xb10>)
 8011fb4:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8011fb6:	4b7f      	ldr	r3, [pc, #508]	; (80121b4 <tcp_receive+0xb10>)
 8011fb8:	68db      	ldr	r3, [r3, #12]
 8011fba:	899b      	ldrh	r3, [r3, #12]
 8011fbc:	b29b      	uxth	r3, r3
 8011fbe:	4618      	mov	r0, r3
 8011fc0:	f7fa fb06 	bl	800c5d0 <lwip_htons>
 8011fc4:	4603      	mov	r3, r0
 8011fc6:	b2db      	uxtb	r3, r3
 8011fc8:	f003 0302 	and.w	r3, r3, #2
 8011fcc:	2b00      	cmp	r3, #0
 8011fce:	d005      	beq.n	8011fdc <tcp_receive+0x938>
                inseg.len -= 1;
 8011fd0:	4b78      	ldr	r3, [pc, #480]	; (80121b4 <tcp_receive+0xb10>)
 8011fd2:	891b      	ldrh	r3, [r3, #8]
 8011fd4:	3b01      	subs	r3, #1
 8011fd6:	b29a      	uxth	r2, r3
 8011fd8:	4b76      	ldr	r3, [pc, #472]	; (80121b4 <tcp_receive+0xb10>)
 8011fda:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8011fdc:	4b75      	ldr	r3, [pc, #468]	; (80121b4 <tcp_receive+0xb10>)
 8011fde:	685b      	ldr	r3, [r3, #4]
 8011fe0:	4a74      	ldr	r2, [pc, #464]	; (80121b4 <tcp_receive+0xb10>)
 8011fe2:	8912      	ldrh	r2, [r2, #8]
 8011fe4:	4611      	mov	r1, r2
 8011fe6:	4618      	mov	r0, r3
 8011fe8:	f7fb fdd0 	bl	800db8c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8011fec:	4b71      	ldr	r3, [pc, #452]	; (80121b4 <tcp_receive+0xb10>)
 8011fee:	891c      	ldrh	r4, [r3, #8]
 8011ff0:	4b70      	ldr	r3, [pc, #448]	; (80121b4 <tcp_receive+0xb10>)
 8011ff2:	68db      	ldr	r3, [r3, #12]
 8011ff4:	899b      	ldrh	r3, [r3, #12]
 8011ff6:	b29b      	uxth	r3, r3
 8011ff8:	4618      	mov	r0, r3
 8011ffa:	f7fa fae9 	bl	800c5d0 <lwip_htons>
 8011ffe:	4603      	mov	r3, r0
 8012000:	b2db      	uxtb	r3, r3
 8012002:	f003 0303 	and.w	r3, r3, #3
 8012006:	2b00      	cmp	r3, #0
 8012008:	d001      	beq.n	801200e <tcp_receive+0x96a>
 801200a:	2301      	movs	r3, #1
 801200c:	e000      	b.n	8012010 <tcp_receive+0x96c>
 801200e:	2300      	movs	r3, #0
 8012010:	4423      	add	r3, r4
 8012012:	b29a      	uxth	r2, r3
 8012014:	4b65      	ldr	r3, [pc, #404]	; (80121ac <tcp_receive+0xb08>)
 8012016:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8012018:	4b64      	ldr	r3, [pc, #400]	; (80121ac <tcp_receive+0xb08>)
 801201a:	881b      	ldrh	r3, [r3, #0]
 801201c:	461a      	mov	r2, r3
 801201e:	4b64      	ldr	r3, [pc, #400]	; (80121b0 <tcp_receive+0xb0c>)
 8012020:	681b      	ldr	r3, [r3, #0]
 8012022:	441a      	add	r2, r3
 8012024:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012026:	68db      	ldr	r3, [r3, #12]
 8012028:	685b      	ldr	r3, [r3, #4]
 801202a:	429a      	cmp	r2, r3
 801202c:	d006      	beq.n	801203c <tcp_receive+0x998>
 801202e:	4b62      	ldr	r3, [pc, #392]	; (80121b8 <tcp_receive+0xb14>)
 8012030:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8012034:	4961      	ldr	r1, [pc, #388]	; (80121bc <tcp_receive+0xb18>)
 8012036:	4862      	ldr	r0, [pc, #392]	; (80121c0 <tcp_receive+0xb1c>)
 8012038:	f008 fbb4 	bl	801a7a4 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012040:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8012042:	4b5a      	ldr	r3, [pc, #360]	; (80121ac <tcp_receive+0xb08>)
 8012044:	881b      	ldrh	r3, [r3, #0]
 8012046:	461a      	mov	r2, r3
 8012048:	4b59      	ldr	r3, [pc, #356]	; (80121b0 <tcp_receive+0xb0c>)
 801204a:	681b      	ldr	r3, [r3, #0]
 801204c:	441a      	add	r2, r3
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012056:	4b55      	ldr	r3, [pc, #340]	; (80121ac <tcp_receive+0xb08>)
 8012058:	881b      	ldrh	r3, [r3, #0]
 801205a:	429a      	cmp	r2, r3
 801205c:	d206      	bcs.n	801206c <tcp_receive+0x9c8>
 801205e:	4b56      	ldr	r3, [pc, #344]	; (80121b8 <tcp_receive+0xb14>)
 8012060:	f240 6207 	movw	r2, #1543	; 0x607
 8012064:	4957      	ldr	r1, [pc, #348]	; (80121c4 <tcp_receive+0xb20>)
 8012066:	4856      	ldr	r0, [pc, #344]	; (80121c0 <tcp_receive+0xb1c>)
 8012068:	f008 fb9c 	bl	801a7a4 <iprintf>
        pcb->rcv_wnd -= tcplen;
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012070:	4b4e      	ldr	r3, [pc, #312]	; (80121ac <tcp_receive+0xb08>)
 8012072:	881b      	ldrh	r3, [r3, #0]
 8012074:	1ad3      	subs	r3, r2, r3
 8012076:	b29a      	uxth	r2, r3
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 801207c:	6878      	ldr	r0, [r7, #4]
 801207e:	f7fc fdb3 	bl	800ebe8 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8012082:	4b4c      	ldr	r3, [pc, #304]	; (80121b4 <tcp_receive+0xb10>)
 8012084:	685b      	ldr	r3, [r3, #4]
 8012086:	891b      	ldrh	r3, [r3, #8]
 8012088:	2b00      	cmp	r3, #0
 801208a:	d006      	beq.n	801209a <tcp_receive+0x9f6>
          recv_data = inseg.p;
 801208c:	4b49      	ldr	r3, [pc, #292]	; (80121b4 <tcp_receive+0xb10>)
 801208e:	685b      	ldr	r3, [r3, #4]
 8012090:	4a4d      	ldr	r2, [pc, #308]	; (80121c8 <tcp_receive+0xb24>)
 8012092:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8012094:	4b47      	ldr	r3, [pc, #284]	; (80121b4 <tcp_receive+0xb10>)
 8012096:	2200      	movs	r2, #0
 8012098:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801209a:	4b46      	ldr	r3, [pc, #280]	; (80121b4 <tcp_receive+0xb10>)
 801209c:	68db      	ldr	r3, [r3, #12]
 801209e:	899b      	ldrh	r3, [r3, #12]
 80120a0:	b29b      	uxth	r3, r3
 80120a2:	4618      	mov	r0, r3
 80120a4:	f7fa fa94 	bl	800c5d0 <lwip_htons>
 80120a8:	4603      	mov	r3, r0
 80120aa:	b2db      	uxtb	r3, r3
 80120ac:	f003 0301 	and.w	r3, r3, #1
 80120b0:	2b00      	cmp	r3, #0
 80120b2:	f000 80b8 	beq.w	8012226 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80120b6:	4b45      	ldr	r3, [pc, #276]	; (80121cc <tcp_receive+0xb28>)
 80120b8:	781b      	ldrb	r3, [r3, #0]
 80120ba:	f043 0320 	orr.w	r3, r3, #32
 80120be:	b2da      	uxtb	r2, r3
 80120c0:	4b42      	ldr	r3, [pc, #264]	; (80121cc <tcp_receive+0xb28>)
 80120c2:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80120c4:	e0af      	b.n	8012226 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80120c6:	687b      	ldr	r3, [r7, #4]
 80120c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80120ca:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80120d0:	68db      	ldr	r3, [r3, #12]
 80120d2:	685b      	ldr	r3, [r3, #4]
 80120d4:	4a36      	ldr	r2, [pc, #216]	; (80121b0 <tcp_receive+0xb0c>)
 80120d6:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80120d8:	68bb      	ldr	r3, [r7, #8]
 80120da:	891b      	ldrh	r3, [r3, #8]
 80120dc:	461c      	mov	r4, r3
 80120de:	68bb      	ldr	r3, [r7, #8]
 80120e0:	68db      	ldr	r3, [r3, #12]
 80120e2:	899b      	ldrh	r3, [r3, #12]
 80120e4:	b29b      	uxth	r3, r3
 80120e6:	4618      	mov	r0, r3
 80120e8:	f7fa fa72 	bl	800c5d0 <lwip_htons>
 80120ec:	4603      	mov	r3, r0
 80120ee:	b2db      	uxtb	r3, r3
 80120f0:	f003 0303 	and.w	r3, r3, #3
 80120f4:	2b00      	cmp	r3, #0
 80120f6:	d001      	beq.n	80120fc <tcp_receive+0xa58>
 80120f8:	2301      	movs	r3, #1
 80120fa:	e000      	b.n	80120fe <tcp_receive+0xa5a>
 80120fc:	2300      	movs	r3, #0
 80120fe:	191a      	adds	r2, r3, r4
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012104:	441a      	add	r2, r3
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801210e:	461c      	mov	r4, r3
 8012110:	68bb      	ldr	r3, [r7, #8]
 8012112:	891b      	ldrh	r3, [r3, #8]
 8012114:	461d      	mov	r5, r3
 8012116:	68bb      	ldr	r3, [r7, #8]
 8012118:	68db      	ldr	r3, [r3, #12]
 801211a:	899b      	ldrh	r3, [r3, #12]
 801211c:	b29b      	uxth	r3, r3
 801211e:	4618      	mov	r0, r3
 8012120:	f7fa fa56 	bl	800c5d0 <lwip_htons>
 8012124:	4603      	mov	r3, r0
 8012126:	b2db      	uxtb	r3, r3
 8012128:	f003 0303 	and.w	r3, r3, #3
 801212c:	2b00      	cmp	r3, #0
 801212e:	d001      	beq.n	8012134 <tcp_receive+0xa90>
 8012130:	2301      	movs	r3, #1
 8012132:	e000      	b.n	8012136 <tcp_receive+0xa92>
 8012134:	2300      	movs	r3, #0
 8012136:	442b      	add	r3, r5
 8012138:	429c      	cmp	r4, r3
 801213a:	d206      	bcs.n	801214a <tcp_receive+0xaa6>
 801213c:	4b1e      	ldr	r3, [pc, #120]	; (80121b8 <tcp_receive+0xb14>)
 801213e:	f240 622b 	movw	r2, #1579	; 0x62b
 8012142:	4923      	ldr	r1, [pc, #140]	; (80121d0 <tcp_receive+0xb2c>)
 8012144:	481e      	ldr	r0, [pc, #120]	; (80121c0 <tcp_receive+0xb1c>)
 8012146:	f008 fb2d 	bl	801a7a4 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801214a:	68bb      	ldr	r3, [r7, #8]
 801214c:	891b      	ldrh	r3, [r3, #8]
 801214e:	461c      	mov	r4, r3
 8012150:	68bb      	ldr	r3, [r7, #8]
 8012152:	68db      	ldr	r3, [r3, #12]
 8012154:	899b      	ldrh	r3, [r3, #12]
 8012156:	b29b      	uxth	r3, r3
 8012158:	4618      	mov	r0, r3
 801215a:	f7fa fa39 	bl	800c5d0 <lwip_htons>
 801215e:	4603      	mov	r3, r0
 8012160:	b2db      	uxtb	r3, r3
 8012162:	f003 0303 	and.w	r3, r3, #3
 8012166:	2b00      	cmp	r3, #0
 8012168:	d001      	beq.n	801216e <tcp_receive+0xaca>
 801216a:	2301      	movs	r3, #1
 801216c:	e000      	b.n	8012170 <tcp_receive+0xacc>
 801216e:	2300      	movs	r3, #0
 8012170:	1919      	adds	r1, r3, r4
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012176:	b28b      	uxth	r3, r1
 8012178:	1ad3      	subs	r3, r2, r3
 801217a:	b29a      	uxth	r2, r3
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8012180:	6878      	ldr	r0, [r7, #4]
 8012182:	f7fc fd31 	bl	800ebe8 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8012186:	68bb      	ldr	r3, [r7, #8]
 8012188:	685b      	ldr	r3, [r3, #4]
 801218a:	891b      	ldrh	r3, [r3, #8]
 801218c:	2b00      	cmp	r3, #0
 801218e:	d028      	beq.n	80121e2 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8012190:	4b0d      	ldr	r3, [pc, #52]	; (80121c8 <tcp_receive+0xb24>)
 8012192:	681b      	ldr	r3, [r3, #0]
 8012194:	2b00      	cmp	r3, #0
 8012196:	d01d      	beq.n	80121d4 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8012198:	4b0b      	ldr	r3, [pc, #44]	; (80121c8 <tcp_receive+0xb24>)
 801219a:	681a      	ldr	r2, [r3, #0]
 801219c:	68bb      	ldr	r3, [r7, #8]
 801219e:	685b      	ldr	r3, [r3, #4]
 80121a0:	4619      	mov	r1, r3
 80121a2:	4610      	mov	r0, r2
 80121a4:	f7fb ff44 	bl	800e030 <pbuf_cat>
 80121a8:	e018      	b.n	80121dc <tcp_receive+0xb38>
 80121aa:	bf00      	nop
 80121ac:	2000bf62 	.word	0x2000bf62
 80121b0:	2000bf58 	.word	0x2000bf58
 80121b4:	2000bf38 	.word	0x2000bf38
 80121b8:	0801ce98 	.word	0x0801ce98
 80121bc:	0801d278 	.word	0x0801d278
 80121c0:	0801cee4 	.word	0x0801cee4
 80121c4:	0801d2b4 	.word	0x0801d2b4
 80121c8:	2000bf68 	.word	0x2000bf68
 80121cc:	2000bf65 	.word	0x2000bf65
 80121d0:	0801d2d4 	.word	0x0801d2d4
            } else {
              recv_data = cseg->p;
 80121d4:	68bb      	ldr	r3, [r7, #8]
 80121d6:	685b      	ldr	r3, [r3, #4]
 80121d8:	4a70      	ldr	r2, [pc, #448]	; (801239c <tcp_receive+0xcf8>)
 80121da:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80121dc:	68bb      	ldr	r3, [r7, #8]
 80121de:	2200      	movs	r2, #0
 80121e0:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80121e2:	68bb      	ldr	r3, [r7, #8]
 80121e4:	68db      	ldr	r3, [r3, #12]
 80121e6:	899b      	ldrh	r3, [r3, #12]
 80121e8:	b29b      	uxth	r3, r3
 80121ea:	4618      	mov	r0, r3
 80121ec:	f7fa f9f0 	bl	800c5d0 <lwip_htons>
 80121f0:	4603      	mov	r3, r0
 80121f2:	b2db      	uxtb	r3, r3
 80121f4:	f003 0301 	and.w	r3, r3, #1
 80121f8:	2b00      	cmp	r3, #0
 80121fa:	d00d      	beq.n	8012218 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80121fc:	4b68      	ldr	r3, [pc, #416]	; (80123a0 <tcp_receive+0xcfc>)
 80121fe:	781b      	ldrb	r3, [r3, #0]
 8012200:	f043 0320 	orr.w	r3, r3, #32
 8012204:	b2da      	uxtb	r2, r3
 8012206:	4b66      	ldr	r3, [pc, #408]	; (80123a0 <tcp_receive+0xcfc>)
 8012208:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801220a:	687b      	ldr	r3, [r7, #4]
 801220c:	7d1b      	ldrb	r3, [r3, #20]
 801220e:	2b04      	cmp	r3, #4
 8012210:	d102      	bne.n	8012218 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	2207      	movs	r2, #7
 8012216:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8012218:	68bb      	ldr	r3, [r7, #8]
 801221a:	681a      	ldr	r2, [r3, #0]
 801221c:	687b      	ldr	r3, [r7, #4]
 801221e:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8012220:	68b8      	ldr	r0, [r7, #8]
 8012222:	f7fd fb1e 	bl	800f862 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801222a:	2b00      	cmp	r3, #0
 801222c:	d008      	beq.n	8012240 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801222e:	687b      	ldr	r3, [r7, #4]
 8012230:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012232:	68db      	ldr	r3, [r3, #12]
 8012234:	685a      	ldr	r2, [r3, #4]
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 801223a:	429a      	cmp	r2, r3
 801223c:	f43f af43 	beq.w	80120c6 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8012240:	687b      	ldr	r3, [r7, #4]
 8012242:	8b5b      	ldrh	r3, [r3, #26]
 8012244:	f003 0301 	and.w	r3, r3, #1
 8012248:	2b00      	cmp	r3, #0
 801224a:	d00e      	beq.n	801226a <tcp_receive+0xbc6>
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	8b5b      	ldrh	r3, [r3, #26]
 8012250:	f023 0301 	bic.w	r3, r3, #1
 8012254:	b29a      	uxth	r2, r3
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	835a      	strh	r2, [r3, #26]
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	8b5b      	ldrh	r3, [r3, #26]
 801225e:	f043 0302 	orr.w	r3, r3, #2
 8012262:	b29a      	uxth	r2, r3
 8012264:	687b      	ldr	r3, [r7, #4]
 8012266:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8012268:	e188      	b.n	801257c <tcp_receive+0xed8>
        tcp_ack(pcb);
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	8b5b      	ldrh	r3, [r3, #26]
 801226e:	f043 0301 	orr.w	r3, r3, #1
 8012272:	b29a      	uxth	r2, r3
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8012278:	e180      	b.n	801257c <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801227e:	2b00      	cmp	r3, #0
 8012280:	d106      	bne.n	8012290 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8012282:	4848      	ldr	r0, [pc, #288]	; (80123a4 <tcp_receive+0xd00>)
 8012284:	f7fd fb06 	bl	800f894 <tcp_seg_copy>
 8012288:	4602      	mov	r2, r0
 801228a:	687b      	ldr	r3, [r7, #4]
 801228c:	675a      	str	r2, [r3, #116]	; 0x74
 801228e:	e16d      	b.n	801256c <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8012290:	2300      	movs	r3, #0
 8012292:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012298:	63bb      	str	r3, [r7, #56]	; 0x38
 801229a:	e157      	b.n	801254c <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 801229c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801229e:	68db      	ldr	r3, [r3, #12]
 80122a0:	685a      	ldr	r2, [r3, #4]
 80122a2:	4b41      	ldr	r3, [pc, #260]	; (80123a8 <tcp_receive+0xd04>)
 80122a4:	681b      	ldr	r3, [r3, #0]
 80122a6:	429a      	cmp	r2, r3
 80122a8:	d11d      	bne.n	80122e6 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80122aa:	4b3e      	ldr	r3, [pc, #248]	; (80123a4 <tcp_receive+0xd00>)
 80122ac:	891a      	ldrh	r2, [r3, #8]
 80122ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122b0:	891b      	ldrh	r3, [r3, #8]
 80122b2:	429a      	cmp	r2, r3
 80122b4:	f240 814f 	bls.w	8012556 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80122b8:	483a      	ldr	r0, [pc, #232]	; (80123a4 <tcp_receive+0xd00>)
 80122ba:	f7fd faeb 	bl	800f894 <tcp_seg_copy>
 80122be:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80122c0:	697b      	ldr	r3, [r7, #20]
 80122c2:	2b00      	cmp	r3, #0
 80122c4:	f000 8149 	beq.w	801255a <tcp_receive+0xeb6>
                  if (prev != NULL) {
 80122c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80122ca:	2b00      	cmp	r3, #0
 80122cc:	d003      	beq.n	80122d6 <tcp_receive+0xc32>
                    prev->next = cseg;
 80122ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80122d0:	697a      	ldr	r2, [r7, #20]
 80122d2:	601a      	str	r2, [r3, #0]
 80122d4:	e002      	b.n	80122dc <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 80122d6:	687b      	ldr	r3, [r7, #4]
 80122d8:	697a      	ldr	r2, [r7, #20]
 80122da:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80122dc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80122de:	6978      	ldr	r0, [r7, #20]
 80122e0:	f7ff f8dc 	bl	801149c <tcp_oos_insert_segment>
                }
                break;
 80122e4:	e139      	b.n	801255a <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80122e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80122e8:	2b00      	cmp	r3, #0
 80122ea:	d117      	bne.n	801231c <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80122ec:	4b2e      	ldr	r3, [pc, #184]	; (80123a8 <tcp_receive+0xd04>)
 80122ee:	681a      	ldr	r2, [r3, #0]
 80122f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122f2:	68db      	ldr	r3, [r3, #12]
 80122f4:	685b      	ldr	r3, [r3, #4]
 80122f6:	1ad3      	subs	r3, r2, r3
 80122f8:	2b00      	cmp	r3, #0
 80122fa:	da57      	bge.n	80123ac <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80122fc:	4829      	ldr	r0, [pc, #164]	; (80123a4 <tcp_receive+0xd00>)
 80122fe:	f7fd fac9 	bl	800f894 <tcp_seg_copy>
 8012302:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8012304:	69bb      	ldr	r3, [r7, #24]
 8012306:	2b00      	cmp	r3, #0
 8012308:	f000 8129 	beq.w	801255e <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 801230c:	687b      	ldr	r3, [r7, #4]
 801230e:	69ba      	ldr	r2, [r7, #24]
 8012310:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8012312:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012314:	69b8      	ldr	r0, [r7, #24]
 8012316:	f7ff f8c1 	bl	801149c <tcp_oos_insert_segment>
                  }
                  break;
 801231a:	e120      	b.n	801255e <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801231c:	4b22      	ldr	r3, [pc, #136]	; (80123a8 <tcp_receive+0xd04>)
 801231e:	681a      	ldr	r2, [r3, #0]
 8012320:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012322:	68db      	ldr	r3, [r3, #12]
 8012324:	685b      	ldr	r3, [r3, #4]
 8012326:	1ad3      	subs	r3, r2, r3
 8012328:	3b01      	subs	r3, #1
 801232a:	2b00      	cmp	r3, #0
 801232c:	db3e      	blt.n	80123ac <tcp_receive+0xd08>
 801232e:	4b1e      	ldr	r3, [pc, #120]	; (80123a8 <tcp_receive+0xd04>)
 8012330:	681a      	ldr	r2, [r3, #0]
 8012332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012334:	68db      	ldr	r3, [r3, #12]
 8012336:	685b      	ldr	r3, [r3, #4]
 8012338:	1ad3      	subs	r3, r2, r3
 801233a:	3301      	adds	r3, #1
 801233c:	2b00      	cmp	r3, #0
 801233e:	dc35      	bgt.n	80123ac <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012340:	4818      	ldr	r0, [pc, #96]	; (80123a4 <tcp_receive+0xd00>)
 8012342:	f7fd faa7 	bl	800f894 <tcp_seg_copy>
 8012346:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8012348:	69fb      	ldr	r3, [r7, #28]
 801234a:	2b00      	cmp	r3, #0
 801234c:	f000 8109 	beq.w	8012562 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8012350:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012352:	68db      	ldr	r3, [r3, #12]
 8012354:	685b      	ldr	r3, [r3, #4]
 8012356:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012358:	8912      	ldrh	r2, [r2, #8]
 801235a:	441a      	add	r2, r3
 801235c:	4b12      	ldr	r3, [pc, #72]	; (80123a8 <tcp_receive+0xd04>)
 801235e:	681b      	ldr	r3, [r3, #0]
 8012360:	1ad3      	subs	r3, r2, r3
 8012362:	2b00      	cmp	r3, #0
 8012364:	dd12      	ble.n	801238c <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8012366:	4b10      	ldr	r3, [pc, #64]	; (80123a8 <tcp_receive+0xd04>)
 8012368:	681b      	ldr	r3, [r3, #0]
 801236a:	b29a      	uxth	r2, r3
 801236c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801236e:	68db      	ldr	r3, [r3, #12]
 8012370:	685b      	ldr	r3, [r3, #4]
 8012372:	b29b      	uxth	r3, r3
 8012374:	1ad3      	subs	r3, r2, r3
 8012376:	b29a      	uxth	r2, r3
 8012378:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801237a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 801237c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801237e:	685a      	ldr	r2, [r3, #4]
 8012380:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012382:	891b      	ldrh	r3, [r3, #8]
 8012384:	4619      	mov	r1, r3
 8012386:	4610      	mov	r0, r2
 8012388:	f7fb fc00 	bl	800db8c <pbuf_realloc>
                    }
                    prev->next = cseg;
 801238c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801238e:	69fa      	ldr	r2, [r7, #28]
 8012390:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8012392:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012394:	69f8      	ldr	r0, [r7, #28]
 8012396:	f7ff f881 	bl	801149c <tcp_oos_insert_segment>
                  }
                  break;
 801239a:	e0e2      	b.n	8012562 <tcp_receive+0xebe>
 801239c:	2000bf68 	.word	0x2000bf68
 80123a0:	2000bf65 	.word	0x2000bf65
 80123a4:	2000bf38 	.word	0x2000bf38
 80123a8:	2000bf58 	.word	0x2000bf58
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80123ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123ae:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80123b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123b2:	681b      	ldr	r3, [r3, #0]
 80123b4:	2b00      	cmp	r3, #0
 80123b6:	f040 80c6 	bne.w	8012546 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80123ba:	4b80      	ldr	r3, [pc, #512]	; (80125bc <tcp_receive+0xf18>)
 80123bc:	681a      	ldr	r2, [r3, #0]
 80123be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123c0:	68db      	ldr	r3, [r3, #12]
 80123c2:	685b      	ldr	r3, [r3, #4]
 80123c4:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80123c6:	2b00      	cmp	r3, #0
 80123c8:	f340 80bd 	ble.w	8012546 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80123cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123ce:	68db      	ldr	r3, [r3, #12]
 80123d0:	899b      	ldrh	r3, [r3, #12]
 80123d2:	b29b      	uxth	r3, r3
 80123d4:	4618      	mov	r0, r3
 80123d6:	f7fa f8fb 	bl	800c5d0 <lwip_htons>
 80123da:	4603      	mov	r3, r0
 80123dc:	b2db      	uxtb	r3, r3
 80123de:	f003 0301 	and.w	r3, r3, #1
 80123e2:	2b00      	cmp	r3, #0
 80123e4:	f040 80bf 	bne.w	8012566 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80123e8:	4875      	ldr	r0, [pc, #468]	; (80125c0 <tcp_receive+0xf1c>)
 80123ea:	f7fd fa53 	bl	800f894 <tcp_seg_copy>
 80123ee:	4602      	mov	r2, r0
 80123f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123f2:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80123f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123f6:	681b      	ldr	r3, [r3, #0]
 80123f8:	2b00      	cmp	r3, #0
 80123fa:	f000 80b6 	beq.w	801256a <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80123fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012400:	68db      	ldr	r3, [r3, #12]
 8012402:	685b      	ldr	r3, [r3, #4]
 8012404:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012406:	8912      	ldrh	r2, [r2, #8]
 8012408:	441a      	add	r2, r3
 801240a:	4b6c      	ldr	r3, [pc, #432]	; (80125bc <tcp_receive+0xf18>)
 801240c:	681b      	ldr	r3, [r3, #0]
 801240e:	1ad3      	subs	r3, r2, r3
 8012410:	2b00      	cmp	r3, #0
 8012412:	dd12      	ble.n	801243a <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8012414:	4b69      	ldr	r3, [pc, #420]	; (80125bc <tcp_receive+0xf18>)
 8012416:	681b      	ldr	r3, [r3, #0]
 8012418:	b29a      	uxth	r2, r3
 801241a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801241c:	68db      	ldr	r3, [r3, #12]
 801241e:	685b      	ldr	r3, [r3, #4]
 8012420:	b29b      	uxth	r3, r3
 8012422:	1ad3      	subs	r3, r2, r3
 8012424:	b29a      	uxth	r2, r3
 8012426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012428:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801242a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801242c:	685a      	ldr	r2, [r3, #4]
 801242e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012430:	891b      	ldrh	r3, [r3, #8]
 8012432:	4619      	mov	r1, r3
 8012434:	4610      	mov	r0, r2
 8012436:	f7fb fba9 	bl	800db8c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801243a:	4b62      	ldr	r3, [pc, #392]	; (80125c4 <tcp_receive+0xf20>)
 801243c:	881b      	ldrh	r3, [r3, #0]
 801243e:	461a      	mov	r2, r3
 8012440:	4b5e      	ldr	r3, [pc, #376]	; (80125bc <tcp_receive+0xf18>)
 8012442:	681b      	ldr	r3, [r3, #0]
 8012444:	441a      	add	r2, r3
 8012446:	687b      	ldr	r3, [r7, #4]
 8012448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801244a:	6879      	ldr	r1, [r7, #4]
 801244c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801244e:	440b      	add	r3, r1
 8012450:	1ad3      	subs	r3, r2, r3
 8012452:	2b00      	cmp	r3, #0
 8012454:	f340 8089 	ble.w	801256a <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8012458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801245a:	681b      	ldr	r3, [r3, #0]
 801245c:	68db      	ldr	r3, [r3, #12]
 801245e:	899b      	ldrh	r3, [r3, #12]
 8012460:	b29b      	uxth	r3, r3
 8012462:	4618      	mov	r0, r3
 8012464:	f7fa f8b4 	bl	800c5d0 <lwip_htons>
 8012468:	4603      	mov	r3, r0
 801246a:	b2db      	uxtb	r3, r3
 801246c:	f003 0301 	and.w	r3, r3, #1
 8012470:	2b00      	cmp	r3, #0
 8012472:	d022      	beq.n	80124ba <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8012474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012476:	681b      	ldr	r3, [r3, #0]
 8012478:	68db      	ldr	r3, [r3, #12]
 801247a:	899b      	ldrh	r3, [r3, #12]
 801247c:	b29b      	uxth	r3, r3
 801247e:	b21b      	sxth	r3, r3
 8012480:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012484:	b21c      	sxth	r4, r3
 8012486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012488:	681b      	ldr	r3, [r3, #0]
 801248a:	68db      	ldr	r3, [r3, #12]
 801248c:	899b      	ldrh	r3, [r3, #12]
 801248e:	b29b      	uxth	r3, r3
 8012490:	4618      	mov	r0, r3
 8012492:	f7fa f89d 	bl	800c5d0 <lwip_htons>
 8012496:	4603      	mov	r3, r0
 8012498:	b2db      	uxtb	r3, r3
 801249a:	b29b      	uxth	r3, r3
 801249c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80124a0:	b29b      	uxth	r3, r3
 80124a2:	4618      	mov	r0, r3
 80124a4:	f7fa f894 	bl	800c5d0 <lwip_htons>
 80124a8:	4603      	mov	r3, r0
 80124aa:	b21b      	sxth	r3, r3
 80124ac:	4323      	orrs	r3, r4
 80124ae:	b21a      	sxth	r2, r3
 80124b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124b2:	681b      	ldr	r3, [r3, #0]
 80124b4:	68db      	ldr	r3, [r3, #12]
 80124b6:	b292      	uxth	r2, r2
 80124b8:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80124be:	b29a      	uxth	r2, r3
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80124c4:	4413      	add	r3, r2
 80124c6:	b299      	uxth	r1, r3
 80124c8:	4b3c      	ldr	r3, [pc, #240]	; (80125bc <tcp_receive+0xf18>)
 80124ca:	681b      	ldr	r3, [r3, #0]
 80124cc:	b29a      	uxth	r2, r3
 80124ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124d0:	681b      	ldr	r3, [r3, #0]
 80124d2:	1a8a      	subs	r2, r1, r2
 80124d4:	b292      	uxth	r2, r2
 80124d6:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80124d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124da:	681b      	ldr	r3, [r3, #0]
 80124dc:	685a      	ldr	r2, [r3, #4]
 80124de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124e0:	681b      	ldr	r3, [r3, #0]
 80124e2:	891b      	ldrh	r3, [r3, #8]
 80124e4:	4619      	mov	r1, r3
 80124e6:	4610      	mov	r0, r2
 80124e8:	f7fb fb50 	bl	800db8c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80124ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124ee:	681b      	ldr	r3, [r3, #0]
 80124f0:	891c      	ldrh	r4, [r3, #8]
 80124f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124f4:	681b      	ldr	r3, [r3, #0]
 80124f6:	68db      	ldr	r3, [r3, #12]
 80124f8:	899b      	ldrh	r3, [r3, #12]
 80124fa:	b29b      	uxth	r3, r3
 80124fc:	4618      	mov	r0, r3
 80124fe:	f7fa f867 	bl	800c5d0 <lwip_htons>
 8012502:	4603      	mov	r3, r0
 8012504:	b2db      	uxtb	r3, r3
 8012506:	f003 0303 	and.w	r3, r3, #3
 801250a:	2b00      	cmp	r3, #0
 801250c:	d001      	beq.n	8012512 <tcp_receive+0xe6e>
 801250e:	2301      	movs	r3, #1
 8012510:	e000      	b.n	8012514 <tcp_receive+0xe70>
 8012512:	2300      	movs	r3, #0
 8012514:	4423      	add	r3, r4
 8012516:	b29a      	uxth	r2, r3
 8012518:	4b2a      	ldr	r3, [pc, #168]	; (80125c4 <tcp_receive+0xf20>)
 801251a:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801251c:	4b29      	ldr	r3, [pc, #164]	; (80125c4 <tcp_receive+0xf20>)
 801251e:	881b      	ldrh	r3, [r3, #0]
 8012520:	461a      	mov	r2, r3
 8012522:	4b26      	ldr	r3, [pc, #152]	; (80125bc <tcp_receive+0xf18>)
 8012524:	681b      	ldr	r3, [r3, #0]
 8012526:	441a      	add	r2, r3
 8012528:	687b      	ldr	r3, [r7, #4]
 801252a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801252c:	6879      	ldr	r1, [r7, #4]
 801252e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012530:	440b      	add	r3, r1
 8012532:	429a      	cmp	r2, r3
 8012534:	d019      	beq.n	801256a <tcp_receive+0xec6>
 8012536:	4b24      	ldr	r3, [pc, #144]	; (80125c8 <tcp_receive+0xf24>)
 8012538:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 801253c:	4923      	ldr	r1, [pc, #140]	; (80125cc <tcp_receive+0xf28>)
 801253e:	4824      	ldr	r0, [pc, #144]	; (80125d0 <tcp_receive+0xf2c>)
 8012540:	f008 f930 	bl	801a7a4 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8012544:	e011      	b.n	801256a <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8012546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012548:	681b      	ldr	r3, [r3, #0]
 801254a:	63bb      	str	r3, [r7, #56]	; 0x38
 801254c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801254e:	2b00      	cmp	r3, #0
 8012550:	f47f aea4 	bne.w	801229c <tcp_receive+0xbf8>
 8012554:	e00a      	b.n	801256c <tcp_receive+0xec8>
                break;
 8012556:	bf00      	nop
 8012558:	e008      	b.n	801256c <tcp_receive+0xec8>
                break;
 801255a:	bf00      	nop
 801255c:	e006      	b.n	801256c <tcp_receive+0xec8>
                  break;
 801255e:	bf00      	nop
 8012560:	e004      	b.n	801256c <tcp_receive+0xec8>
                  break;
 8012562:	bf00      	nop
 8012564:	e002      	b.n	801256c <tcp_receive+0xec8>
                  break;
 8012566:	bf00      	nop
 8012568:	e000      	b.n	801256c <tcp_receive+0xec8>
                break;
 801256a:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801256c:	6878      	ldr	r0, [r7, #4]
 801256e:	f001 fe8b 	bl	8014288 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8012572:	e003      	b.n	801257c <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8012574:	6878      	ldr	r0, [r7, #4]
 8012576:	f001 fe87 	bl	8014288 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801257a:	e01a      	b.n	80125b2 <tcp_receive+0xf0e>
 801257c:	e019      	b.n	80125b2 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801257e:	4b0f      	ldr	r3, [pc, #60]	; (80125bc <tcp_receive+0xf18>)
 8012580:	681a      	ldr	r2, [r3, #0]
 8012582:	687b      	ldr	r3, [r7, #4]
 8012584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012586:	1ad3      	subs	r3, r2, r3
 8012588:	2b00      	cmp	r3, #0
 801258a:	db0a      	blt.n	80125a2 <tcp_receive+0xefe>
 801258c:	4b0b      	ldr	r3, [pc, #44]	; (80125bc <tcp_receive+0xf18>)
 801258e:	681a      	ldr	r2, [r3, #0]
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012594:	6879      	ldr	r1, [r7, #4]
 8012596:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012598:	440b      	add	r3, r1
 801259a:	1ad3      	subs	r3, r2, r3
 801259c:	3301      	adds	r3, #1
 801259e:	2b00      	cmp	r3, #0
 80125a0:	dd07      	ble.n	80125b2 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 80125a2:	687b      	ldr	r3, [r7, #4]
 80125a4:	8b5b      	ldrh	r3, [r3, #26]
 80125a6:	f043 0302 	orr.w	r3, r3, #2
 80125aa:	b29a      	uxth	r2, r3
 80125ac:	687b      	ldr	r3, [r7, #4]
 80125ae:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80125b0:	e7ff      	b.n	80125b2 <tcp_receive+0xf0e>
 80125b2:	bf00      	nop
 80125b4:	3750      	adds	r7, #80	; 0x50
 80125b6:	46bd      	mov	sp, r7
 80125b8:	bdb0      	pop	{r4, r5, r7, pc}
 80125ba:	bf00      	nop
 80125bc:	2000bf58 	.word	0x2000bf58
 80125c0:	2000bf38 	.word	0x2000bf38
 80125c4:	2000bf62 	.word	0x2000bf62
 80125c8:	0801ce98 	.word	0x0801ce98
 80125cc:	0801d240 	.word	0x0801d240
 80125d0:	0801cee4 	.word	0x0801cee4

080125d4 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80125d4:	b480      	push	{r7}
 80125d6:	b083      	sub	sp, #12
 80125d8:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80125da:	4b15      	ldr	r3, [pc, #84]	; (8012630 <tcp_get_next_optbyte+0x5c>)
 80125dc:	881b      	ldrh	r3, [r3, #0]
 80125de:	1c5a      	adds	r2, r3, #1
 80125e0:	b291      	uxth	r1, r2
 80125e2:	4a13      	ldr	r2, [pc, #76]	; (8012630 <tcp_get_next_optbyte+0x5c>)
 80125e4:	8011      	strh	r1, [r2, #0]
 80125e6:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80125e8:	4b12      	ldr	r3, [pc, #72]	; (8012634 <tcp_get_next_optbyte+0x60>)
 80125ea:	681b      	ldr	r3, [r3, #0]
 80125ec:	2b00      	cmp	r3, #0
 80125ee:	d004      	beq.n	80125fa <tcp_get_next_optbyte+0x26>
 80125f0:	4b11      	ldr	r3, [pc, #68]	; (8012638 <tcp_get_next_optbyte+0x64>)
 80125f2:	881b      	ldrh	r3, [r3, #0]
 80125f4:	88fa      	ldrh	r2, [r7, #6]
 80125f6:	429a      	cmp	r2, r3
 80125f8:	d208      	bcs.n	801260c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80125fa:	4b10      	ldr	r3, [pc, #64]	; (801263c <tcp_get_next_optbyte+0x68>)
 80125fc:	681b      	ldr	r3, [r3, #0]
 80125fe:	3314      	adds	r3, #20
 8012600:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8012602:	88fb      	ldrh	r3, [r7, #6]
 8012604:	683a      	ldr	r2, [r7, #0]
 8012606:	4413      	add	r3, r2
 8012608:	781b      	ldrb	r3, [r3, #0]
 801260a:	e00b      	b.n	8012624 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801260c:	88fb      	ldrh	r3, [r7, #6]
 801260e:	b2da      	uxtb	r2, r3
 8012610:	4b09      	ldr	r3, [pc, #36]	; (8012638 <tcp_get_next_optbyte+0x64>)
 8012612:	881b      	ldrh	r3, [r3, #0]
 8012614:	b2db      	uxtb	r3, r3
 8012616:	1ad3      	subs	r3, r2, r3
 8012618:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801261a:	4b06      	ldr	r3, [pc, #24]	; (8012634 <tcp_get_next_optbyte+0x60>)
 801261c:	681a      	ldr	r2, [r3, #0]
 801261e:	797b      	ldrb	r3, [r7, #5]
 8012620:	4413      	add	r3, r2
 8012622:	781b      	ldrb	r3, [r3, #0]
  }
}
 8012624:	4618      	mov	r0, r3
 8012626:	370c      	adds	r7, #12
 8012628:	46bd      	mov	sp, r7
 801262a:	bc80      	pop	{r7}
 801262c:	4770      	bx	lr
 801262e:	bf00      	nop
 8012630:	2000bf54 	.word	0x2000bf54
 8012634:	2000bf50 	.word	0x2000bf50
 8012638:	2000bf4e 	.word	0x2000bf4e
 801263c:	2000bf48 	.word	0x2000bf48

08012640 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8012640:	b580      	push	{r7, lr}
 8012642:	b084      	sub	sp, #16
 8012644:	af00      	add	r7, sp, #0
 8012646:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8012648:	687b      	ldr	r3, [r7, #4]
 801264a:	2b00      	cmp	r3, #0
 801264c:	d106      	bne.n	801265c <tcp_parseopt+0x1c>
 801264e:	4b32      	ldr	r3, [pc, #200]	; (8012718 <tcp_parseopt+0xd8>)
 8012650:	f240 727d 	movw	r2, #1917	; 0x77d
 8012654:	4931      	ldr	r1, [pc, #196]	; (801271c <tcp_parseopt+0xdc>)
 8012656:	4832      	ldr	r0, [pc, #200]	; (8012720 <tcp_parseopt+0xe0>)
 8012658:	f008 f8a4 	bl	801a7a4 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 801265c:	4b31      	ldr	r3, [pc, #196]	; (8012724 <tcp_parseopt+0xe4>)
 801265e:	881b      	ldrh	r3, [r3, #0]
 8012660:	2b00      	cmp	r3, #0
 8012662:	d055      	beq.n	8012710 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8012664:	4b30      	ldr	r3, [pc, #192]	; (8012728 <tcp_parseopt+0xe8>)
 8012666:	2200      	movs	r2, #0
 8012668:	801a      	strh	r2, [r3, #0]
 801266a:	e045      	b.n	80126f8 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 801266c:	f7ff ffb2 	bl	80125d4 <tcp_get_next_optbyte>
 8012670:	4603      	mov	r3, r0
 8012672:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8012674:	7bfb      	ldrb	r3, [r7, #15]
 8012676:	2b02      	cmp	r3, #2
 8012678:	d006      	beq.n	8012688 <tcp_parseopt+0x48>
 801267a:	2b02      	cmp	r3, #2
 801267c:	dc2b      	bgt.n	80126d6 <tcp_parseopt+0x96>
 801267e:	2b00      	cmp	r3, #0
 8012680:	d041      	beq.n	8012706 <tcp_parseopt+0xc6>
 8012682:	2b01      	cmp	r3, #1
 8012684:	d127      	bne.n	80126d6 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8012686:	e037      	b.n	80126f8 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8012688:	f7ff ffa4 	bl	80125d4 <tcp_get_next_optbyte>
 801268c:	4603      	mov	r3, r0
 801268e:	2b04      	cmp	r3, #4
 8012690:	d13b      	bne.n	801270a <tcp_parseopt+0xca>
 8012692:	4b25      	ldr	r3, [pc, #148]	; (8012728 <tcp_parseopt+0xe8>)
 8012694:	881b      	ldrh	r3, [r3, #0]
 8012696:	3301      	adds	r3, #1
 8012698:	4a22      	ldr	r2, [pc, #136]	; (8012724 <tcp_parseopt+0xe4>)
 801269a:	8812      	ldrh	r2, [r2, #0]
 801269c:	4293      	cmp	r3, r2
 801269e:	da34      	bge.n	801270a <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80126a0:	f7ff ff98 	bl	80125d4 <tcp_get_next_optbyte>
 80126a4:	4603      	mov	r3, r0
 80126a6:	b29b      	uxth	r3, r3
 80126a8:	021b      	lsls	r3, r3, #8
 80126aa:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80126ac:	f7ff ff92 	bl	80125d4 <tcp_get_next_optbyte>
 80126b0:	4603      	mov	r3, r0
 80126b2:	b29a      	uxth	r2, r3
 80126b4:	89bb      	ldrh	r3, [r7, #12]
 80126b6:	4313      	orrs	r3, r2
 80126b8:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80126ba:	89bb      	ldrh	r3, [r7, #12]
 80126bc:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80126c0:	d804      	bhi.n	80126cc <tcp_parseopt+0x8c>
 80126c2:	89bb      	ldrh	r3, [r7, #12]
 80126c4:	2b00      	cmp	r3, #0
 80126c6:	d001      	beq.n	80126cc <tcp_parseopt+0x8c>
 80126c8:	89ba      	ldrh	r2, [r7, #12]
 80126ca:	e001      	b.n	80126d0 <tcp_parseopt+0x90>
 80126cc:	f44f 7206 	mov.w	r2, #536	; 0x218
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 80126d4:	e010      	b.n	80126f8 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80126d6:	f7ff ff7d 	bl	80125d4 <tcp_get_next_optbyte>
 80126da:	4603      	mov	r3, r0
 80126dc:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80126de:	7afb      	ldrb	r3, [r7, #11]
 80126e0:	2b01      	cmp	r3, #1
 80126e2:	d914      	bls.n	801270e <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80126e4:	7afb      	ldrb	r3, [r7, #11]
 80126e6:	b29a      	uxth	r2, r3
 80126e8:	4b0f      	ldr	r3, [pc, #60]	; (8012728 <tcp_parseopt+0xe8>)
 80126ea:	881b      	ldrh	r3, [r3, #0]
 80126ec:	4413      	add	r3, r2
 80126ee:	b29b      	uxth	r3, r3
 80126f0:	3b02      	subs	r3, #2
 80126f2:	b29a      	uxth	r2, r3
 80126f4:	4b0c      	ldr	r3, [pc, #48]	; (8012728 <tcp_parseopt+0xe8>)
 80126f6:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80126f8:	4b0b      	ldr	r3, [pc, #44]	; (8012728 <tcp_parseopt+0xe8>)
 80126fa:	881a      	ldrh	r2, [r3, #0]
 80126fc:	4b09      	ldr	r3, [pc, #36]	; (8012724 <tcp_parseopt+0xe4>)
 80126fe:	881b      	ldrh	r3, [r3, #0]
 8012700:	429a      	cmp	r2, r3
 8012702:	d3b3      	bcc.n	801266c <tcp_parseopt+0x2c>
 8012704:	e004      	b.n	8012710 <tcp_parseopt+0xd0>
          return;
 8012706:	bf00      	nop
 8012708:	e002      	b.n	8012710 <tcp_parseopt+0xd0>
            return;
 801270a:	bf00      	nop
 801270c:	e000      	b.n	8012710 <tcp_parseopt+0xd0>
            return;
 801270e:	bf00      	nop
      }
    }
  }
}
 8012710:	3710      	adds	r7, #16
 8012712:	46bd      	mov	sp, r7
 8012714:	bd80      	pop	{r7, pc}
 8012716:	bf00      	nop
 8012718:	0801ce98 	.word	0x0801ce98
 801271c:	0801d2fc 	.word	0x0801d2fc
 8012720:	0801cee4 	.word	0x0801cee4
 8012724:	2000bf4c 	.word	0x2000bf4c
 8012728:	2000bf54 	.word	0x2000bf54

0801272c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 801272c:	b480      	push	{r7}
 801272e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8012730:	4b05      	ldr	r3, [pc, #20]	; (8012748 <tcp_trigger_input_pcb_close+0x1c>)
 8012732:	781b      	ldrb	r3, [r3, #0]
 8012734:	f043 0310 	orr.w	r3, r3, #16
 8012738:	b2da      	uxtb	r2, r3
 801273a:	4b03      	ldr	r3, [pc, #12]	; (8012748 <tcp_trigger_input_pcb_close+0x1c>)
 801273c:	701a      	strb	r2, [r3, #0]
}
 801273e:	bf00      	nop
 8012740:	46bd      	mov	sp, r7
 8012742:	bc80      	pop	{r7}
 8012744:	4770      	bx	lr
 8012746:	bf00      	nop
 8012748:	2000bf65 	.word	0x2000bf65

0801274c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 801274c:	b580      	push	{r7, lr}
 801274e:	b084      	sub	sp, #16
 8012750:	af00      	add	r7, sp, #0
 8012752:	60f8      	str	r0, [r7, #12]
 8012754:	60b9      	str	r1, [r7, #8]
 8012756:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8012758:	68fb      	ldr	r3, [r7, #12]
 801275a:	2b00      	cmp	r3, #0
 801275c:	d00a      	beq.n	8012774 <tcp_route+0x28>
 801275e:	68fb      	ldr	r3, [r7, #12]
 8012760:	7a1b      	ldrb	r3, [r3, #8]
 8012762:	2b00      	cmp	r3, #0
 8012764:	d006      	beq.n	8012774 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8012766:	68fb      	ldr	r3, [r7, #12]
 8012768:	7a1b      	ldrb	r3, [r3, #8]
 801276a:	4618      	mov	r0, r3
 801276c:	f7fb f808 	bl	800d780 <netif_get_by_index>
 8012770:	4603      	mov	r3, r0
 8012772:	e003      	b.n	801277c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8012774:	6878      	ldr	r0, [r7, #4]
 8012776:	f005 fcbf 	bl	80180f8 <ip4_route>
 801277a:	4603      	mov	r3, r0
  }
}
 801277c:	4618      	mov	r0, r3
 801277e:	3710      	adds	r7, #16
 8012780:	46bd      	mov	sp, r7
 8012782:	bd80      	pop	{r7, pc}

08012784 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8012784:	b590      	push	{r4, r7, lr}
 8012786:	b087      	sub	sp, #28
 8012788:	af00      	add	r7, sp, #0
 801278a:	60f8      	str	r0, [r7, #12]
 801278c:	60b9      	str	r1, [r7, #8]
 801278e:	603b      	str	r3, [r7, #0]
 8012790:	4613      	mov	r3, r2
 8012792:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8012794:	68fb      	ldr	r3, [r7, #12]
 8012796:	2b00      	cmp	r3, #0
 8012798:	d105      	bne.n	80127a6 <tcp_create_segment+0x22>
 801279a:	4b44      	ldr	r3, [pc, #272]	; (80128ac <tcp_create_segment+0x128>)
 801279c:	22a3      	movs	r2, #163	; 0xa3
 801279e:	4944      	ldr	r1, [pc, #272]	; (80128b0 <tcp_create_segment+0x12c>)
 80127a0:	4844      	ldr	r0, [pc, #272]	; (80128b4 <tcp_create_segment+0x130>)
 80127a2:	f007 ffff 	bl	801a7a4 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80127a6:	68bb      	ldr	r3, [r7, #8]
 80127a8:	2b00      	cmp	r3, #0
 80127aa:	d105      	bne.n	80127b8 <tcp_create_segment+0x34>
 80127ac:	4b3f      	ldr	r3, [pc, #252]	; (80128ac <tcp_create_segment+0x128>)
 80127ae:	22a4      	movs	r2, #164	; 0xa4
 80127b0:	4941      	ldr	r1, [pc, #260]	; (80128b8 <tcp_create_segment+0x134>)
 80127b2:	4840      	ldr	r0, [pc, #256]	; (80128b4 <tcp_create_segment+0x130>)
 80127b4:	f007 fff6 	bl	801a7a4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80127b8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80127bc:	009b      	lsls	r3, r3, #2
 80127be:	b2db      	uxtb	r3, r3
 80127c0:	f003 0304 	and.w	r3, r3, #4
 80127c4:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80127c6:	2003      	movs	r0, #3
 80127c8:	f7fa fcb2 	bl	800d130 <memp_malloc>
 80127cc:	6138      	str	r0, [r7, #16]
 80127ce:	693b      	ldr	r3, [r7, #16]
 80127d0:	2b00      	cmp	r3, #0
 80127d2:	d104      	bne.n	80127de <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80127d4:	68b8      	ldr	r0, [r7, #8]
 80127d6:	f7fb fb5f 	bl	800de98 <pbuf_free>
    return NULL;
 80127da:	2300      	movs	r3, #0
 80127dc:	e061      	b.n	80128a2 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 80127de:	693b      	ldr	r3, [r7, #16]
 80127e0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80127e4:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80127e6:	693b      	ldr	r3, [r7, #16]
 80127e8:	2200      	movs	r2, #0
 80127ea:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80127ec:	693b      	ldr	r3, [r7, #16]
 80127ee:	68ba      	ldr	r2, [r7, #8]
 80127f0:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80127f2:	68bb      	ldr	r3, [r7, #8]
 80127f4:	891a      	ldrh	r2, [r3, #8]
 80127f6:	7dfb      	ldrb	r3, [r7, #23]
 80127f8:	b29b      	uxth	r3, r3
 80127fa:	429a      	cmp	r2, r3
 80127fc:	d205      	bcs.n	801280a <tcp_create_segment+0x86>
 80127fe:	4b2b      	ldr	r3, [pc, #172]	; (80128ac <tcp_create_segment+0x128>)
 8012800:	22b0      	movs	r2, #176	; 0xb0
 8012802:	492e      	ldr	r1, [pc, #184]	; (80128bc <tcp_create_segment+0x138>)
 8012804:	482b      	ldr	r0, [pc, #172]	; (80128b4 <tcp_create_segment+0x130>)
 8012806:	f007 ffcd 	bl	801a7a4 <iprintf>
  seg->len = p->tot_len - optlen;
 801280a:	68bb      	ldr	r3, [r7, #8]
 801280c:	891a      	ldrh	r2, [r3, #8]
 801280e:	7dfb      	ldrb	r3, [r7, #23]
 8012810:	b29b      	uxth	r3, r3
 8012812:	1ad3      	subs	r3, r2, r3
 8012814:	b29a      	uxth	r2, r3
 8012816:	693b      	ldr	r3, [r7, #16]
 8012818:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801281a:	2114      	movs	r1, #20
 801281c:	68b8      	ldr	r0, [r7, #8]
 801281e:	f7fb faa5 	bl	800dd6c <pbuf_add_header>
 8012822:	4603      	mov	r3, r0
 8012824:	2b00      	cmp	r3, #0
 8012826:	d004      	beq.n	8012832 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8012828:	6938      	ldr	r0, [r7, #16]
 801282a:	f7fd f81a 	bl	800f862 <tcp_seg_free>
    return NULL;
 801282e:	2300      	movs	r3, #0
 8012830:	e037      	b.n	80128a2 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8012832:	693b      	ldr	r3, [r7, #16]
 8012834:	685b      	ldr	r3, [r3, #4]
 8012836:	685a      	ldr	r2, [r3, #4]
 8012838:	693b      	ldr	r3, [r7, #16]
 801283a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801283c:	68fb      	ldr	r3, [r7, #12]
 801283e:	8ada      	ldrh	r2, [r3, #22]
 8012840:	693b      	ldr	r3, [r7, #16]
 8012842:	68dc      	ldr	r4, [r3, #12]
 8012844:	4610      	mov	r0, r2
 8012846:	f7f9 fec3 	bl	800c5d0 <lwip_htons>
 801284a:	4603      	mov	r3, r0
 801284c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801284e:	68fb      	ldr	r3, [r7, #12]
 8012850:	8b1a      	ldrh	r2, [r3, #24]
 8012852:	693b      	ldr	r3, [r7, #16]
 8012854:	68dc      	ldr	r4, [r3, #12]
 8012856:	4610      	mov	r0, r2
 8012858:	f7f9 feba 	bl	800c5d0 <lwip_htons>
 801285c:	4603      	mov	r3, r0
 801285e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8012860:	693b      	ldr	r3, [r7, #16]
 8012862:	68dc      	ldr	r4, [r3, #12]
 8012864:	6838      	ldr	r0, [r7, #0]
 8012866:	f7f9 fec7 	bl	800c5f8 <lwip_htonl>
 801286a:	4603      	mov	r3, r0
 801286c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801286e:	7dfb      	ldrb	r3, [r7, #23]
 8012870:	089b      	lsrs	r3, r3, #2
 8012872:	b2db      	uxtb	r3, r3
 8012874:	b29b      	uxth	r3, r3
 8012876:	3305      	adds	r3, #5
 8012878:	b29b      	uxth	r3, r3
 801287a:	031b      	lsls	r3, r3, #12
 801287c:	b29a      	uxth	r2, r3
 801287e:	79fb      	ldrb	r3, [r7, #7]
 8012880:	b29b      	uxth	r3, r3
 8012882:	4313      	orrs	r3, r2
 8012884:	b29a      	uxth	r2, r3
 8012886:	693b      	ldr	r3, [r7, #16]
 8012888:	68dc      	ldr	r4, [r3, #12]
 801288a:	4610      	mov	r0, r2
 801288c:	f7f9 fea0 	bl	800c5d0 <lwip_htons>
 8012890:	4603      	mov	r3, r0
 8012892:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8012894:	693b      	ldr	r3, [r7, #16]
 8012896:	68db      	ldr	r3, [r3, #12]
 8012898:	2200      	movs	r2, #0
 801289a:	749a      	strb	r2, [r3, #18]
 801289c:	2200      	movs	r2, #0
 801289e:	74da      	strb	r2, [r3, #19]
  return seg;
 80128a0:	693b      	ldr	r3, [r7, #16]
}
 80128a2:	4618      	mov	r0, r3
 80128a4:	371c      	adds	r7, #28
 80128a6:	46bd      	mov	sp, r7
 80128a8:	bd90      	pop	{r4, r7, pc}
 80128aa:	bf00      	nop
 80128ac:	0801d318 	.word	0x0801d318
 80128b0:	0801d34c 	.word	0x0801d34c
 80128b4:	0801d36c 	.word	0x0801d36c
 80128b8:	0801d394 	.word	0x0801d394
 80128bc:	0801d3b8 	.word	0x0801d3b8

080128c0 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 80128c0:	b580      	push	{r7, lr}
 80128c2:	b086      	sub	sp, #24
 80128c4:	af00      	add	r7, sp, #0
 80128c6:	607b      	str	r3, [r7, #4]
 80128c8:	4603      	mov	r3, r0
 80128ca:	73fb      	strb	r3, [r7, #15]
 80128cc:	460b      	mov	r3, r1
 80128ce:	81bb      	strh	r3, [r7, #12]
 80128d0:	4613      	mov	r3, r2
 80128d2:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 80128d4:	89bb      	ldrh	r3, [r7, #12]
 80128d6:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 80128d8:	687b      	ldr	r3, [r7, #4]
 80128da:	2b00      	cmp	r3, #0
 80128dc:	d105      	bne.n	80128ea <tcp_pbuf_prealloc+0x2a>
 80128de:	4b30      	ldr	r3, [pc, #192]	; (80129a0 <tcp_pbuf_prealloc+0xe0>)
 80128e0:	22e8      	movs	r2, #232	; 0xe8
 80128e2:	4930      	ldr	r1, [pc, #192]	; (80129a4 <tcp_pbuf_prealloc+0xe4>)
 80128e4:	4830      	ldr	r0, [pc, #192]	; (80129a8 <tcp_pbuf_prealloc+0xe8>)
 80128e6:	f007 ff5d 	bl	801a7a4 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 80128ea:	6a3b      	ldr	r3, [r7, #32]
 80128ec:	2b00      	cmp	r3, #0
 80128ee:	d105      	bne.n	80128fc <tcp_pbuf_prealloc+0x3c>
 80128f0:	4b2b      	ldr	r3, [pc, #172]	; (80129a0 <tcp_pbuf_prealloc+0xe0>)
 80128f2:	22e9      	movs	r2, #233	; 0xe9
 80128f4:	492d      	ldr	r1, [pc, #180]	; (80129ac <tcp_pbuf_prealloc+0xec>)
 80128f6:	482c      	ldr	r0, [pc, #176]	; (80129a8 <tcp_pbuf_prealloc+0xe8>)
 80128f8:	f007 ff54 	bl	801a7a4 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 80128fc:	89ba      	ldrh	r2, [r7, #12]
 80128fe:	897b      	ldrh	r3, [r7, #10]
 8012900:	429a      	cmp	r2, r3
 8012902:	d221      	bcs.n	8012948 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8012904:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8012908:	f003 0302 	and.w	r3, r3, #2
 801290c:	2b00      	cmp	r3, #0
 801290e:	d111      	bne.n	8012934 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8012910:	6a3b      	ldr	r3, [r7, #32]
 8012912:	8b5b      	ldrh	r3, [r3, #26]
 8012914:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8012918:	2b00      	cmp	r3, #0
 801291a:	d115      	bne.n	8012948 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 801291c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012920:	2b00      	cmp	r3, #0
 8012922:	d007      	beq.n	8012934 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8012924:	6a3b      	ldr	r3, [r7, #32]
 8012926:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8012928:	2b00      	cmp	r3, #0
 801292a:	d103      	bne.n	8012934 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 801292c:	6a3b      	ldr	r3, [r7, #32]
 801292e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8012930:	2b00      	cmp	r3, #0
 8012932:	d009      	beq.n	8012948 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8012934:	89bb      	ldrh	r3, [r7, #12]
 8012936:	f203 231b 	addw	r3, r3, #539	; 0x21b
 801293a:	f023 0203 	bic.w	r2, r3, #3
 801293e:	897b      	ldrh	r3, [r7, #10]
 8012940:	4293      	cmp	r3, r2
 8012942:	bf28      	it	cs
 8012944:	4613      	movcs	r3, r2
 8012946:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8012948:	8af9      	ldrh	r1, [r7, #22]
 801294a:	7bfb      	ldrb	r3, [r7, #15]
 801294c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012950:	4618      	mov	r0, r3
 8012952:	f7fa ffbd 	bl	800d8d0 <pbuf_alloc>
 8012956:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012958:	693b      	ldr	r3, [r7, #16]
 801295a:	2b00      	cmp	r3, #0
 801295c:	d101      	bne.n	8012962 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801295e:	2300      	movs	r3, #0
 8012960:	e019      	b.n	8012996 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8012962:	693b      	ldr	r3, [r7, #16]
 8012964:	681b      	ldr	r3, [r3, #0]
 8012966:	2b00      	cmp	r3, #0
 8012968:	d006      	beq.n	8012978 <tcp_pbuf_prealloc+0xb8>
 801296a:	4b0d      	ldr	r3, [pc, #52]	; (80129a0 <tcp_pbuf_prealloc+0xe0>)
 801296c:	f240 120b 	movw	r2, #267	; 0x10b
 8012970:	490f      	ldr	r1, [pc, #60]	; (80129b0 <tcp_pbuf_prealloc+0xf0>)
 8012972:	480d      	ldr	r0, [pc, #52]	; (80129a8 <tcp_pbuf_prealloc+0xe8>)
 8012974:	f007 ff16 	bl	801a7a4 <iprintf>
  *oversize = p->len - length;
 8012978:	693b      	ldr	r3, [r7, #16]
 801297a:	895a      	ldrh	r2, [r3, #10]
 801297c:	89bb      	ldrh	r3, [r7, #12]
 801297e:	1ad3      	subs	r3, r2, r3
 8012980:	b29a      	uxth	r2, r3
 8012982:	687b      	ldr	r3, [r7, #4]
 8012984:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8012986:	693b      	ldr	r3, [r7, #16]
 8012988:	89ba      	ldrh	r2, [r7, #12]
 801298a:	811a      	strh	r2, [r3, #8]
 801298c:	693b      	ldr	r3, [r7, #16]
 801298e:	891a      	ldrh	r2, [r3, #8]
 8012990:	693b      	ldr	r3, [r7, #16]
 8012992:	815a      	strh	r2, [r3, #10]
  return p;
 8012994:	693b      	ldr	r3, [r7, #16]
}
 8012996:	4618      	mov	r0, r3
 8012998:	3718      	adds	r7, #24
 801299a:	46bd      	mov	sp, r7
 801299c:	bd80      	pop	{r7, pc}
 801299e:	bf00      	nop
 80129a0:	0801d318 	.word	0x0801d318
 80129a4:	0801d3d0 	.word	0x0801d3d0
 80129a8:	0801d36c 	.word	0x0801d36c
 80129ac:	0801d3f4 	.word	0x0801d3f4
 80129b0:	0801d414 	.word	0x0801d414

080129b4 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 80129b4:	b580      	push	{r7, lr}
 80129b6:	b082      	sub	sp, #8
 80129b8:	af00      	add	r7, sp, #0
 80129ba:	6078      	str	r0, [r7, #4]
 80129bc:	460b      	mov	r3, r1
 80129be:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	2b00      	cmp	r3, #0
 80129c4:	d106      	bne.n	80129d4 <tcp_write_checks+0x20>
 80129c6:	4b33      	ldr	r3, [pc, #204]	; (8012a94 <tcp_write_checks+0xe0>)
 80129c8:	f240 1233 	movw	r2, #307	; 0x133
 80129cc:	4932      	ldr	r1, [pc, #200]	; (8012a98 <tcp_write_checks+0xe4>)
 80129ce:	4833      	ldr	r0, [pc, #204]	; (8012a9c <tcp_write_checks+0xe8>)
 80129d0:	f007 fee8 	bl	801a7a4 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	7d1b      	ldrb	r3, [r3, #20]
 80129d8:	2b04      	cmp	r3, #4
 80129da:	d00e      	beq.n	80129fa <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 80129e0:	2b07      	cmp	r3, #7
 80129e2:	d00a      	beq.n	80129fa <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 80129e8:	2b02      	cmp	r3, #2
 80129ea:	d006      	beq.n	80129fa <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 80129f0:	2b03      	cmp	r3, #3
 80129f2:	d002      	beq.n	80129fa <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 80129f4:	f06f 030a 	mvn.w	r3, #10
 80129f8:	e048      	b.n	8012a8c <tcp_write_checks+0xd8>
  } else if (len == 0) {
 80129fa:	887b      	ldrh	r3, [r7, #2]
 80129fc:	2b00      	cmp	r3, #0
 80129fe:	d101      	bne.n	8012a04 <tcp_write_checks+0x50>
    return ERR_OK;
 8012a00:	2300      	movs	r3, #0
 8012a02:	e043      	b.n	8012a8c <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8012a0a:	887a      	ldrh	r2, [r7, #2]
 8012a0c:	429a      	cmp	r2, r3
 8012a0e:	d909      	bls.n	8012a24 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012a10:	687b      	ldr	r3, [r7, #4]
 8012a12:	8b5b      	ldrh	r3, [r3, #26]
 8012a14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012a18:	b29a      	uxth	r2, r3
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8012a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8012a22:	e033      	b.n	8012a8c <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012a2a:	2b08      	cmp	r3, #8
 8012a2c:	d909      	bls.n	8012a42 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012a2e:	687b      	ldr	r3, [r7, #4]
 8012a30:	8b5b      	ldrh	r3, [r3, #26]
 8012a32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012a36:	b29a      	uxth	r2, r3
 8012a38:	687b      	ldr	r3, [r7, #4]
 8012a3a:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8012a3c:	f04f 33ff 	mov.w	r3, #4294967295
 8012a40:	e024      	b.n	8012a8c <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8012a42:	687b      	ldr	r3, [r7, #4]
 8012a44:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012a48:	2b00      	cmp	r3, #0
 8012a4a:	d00f      	beq.n	8012a6c <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012a50:	2b00      	cmp	r3, #0
 8012a52:	d11a      	bne.n	8012a8a <tcp_write_checks+0xd6>
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012a58:	2b00      	cmp	r3, #0
 8012a5a:	d116      	bne.n	8012a8a <tcp_write_checks+0xd6>
 8012a5c:	4b0d      	ldr	r3, [pc, #52]	; (8012a94 <tcp_write_checks+0xe0>)
 8012a5e:	f240 1255 	movw	r2, #341	; 0x155
 8012a62:	490f      	ldr	r1, [pc, #60]	; (8012aa0 <tcp_write_checks+0xec>)
 8012a64:	480d      	ldr	r0, [pc, #52]	; (8012a9c <tcp_write_checks+0xe8>)
 8012a66:	f007 fe9d 	bl	801a7a4 <iprintf>
 8012a6a:	e00e      	b.n	8012a8a <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012a70:	2b00      	cmp	r3, #0
 8012a72:	d103      	bne.n	8012a7c <tcp_write_checks+0xc8>
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012a78:	2b00      	cmp	r3, #0
 8012a7a:	d006      	beq.n	8012a8a <tcp_write_checks+0xd6>
 8012a7c:	4b05      	ldr	r3, [pc, #20]	; (8012a94 <tcp_write_checks+0xe0>)
 8012a7e:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8012a82:	4908      	ldr	r1, [pc, #32]	; (8012aa4 <tcp_write_checks+0xf0>)
 8012a84:	4805      	ldr	r0, [pc, #20]	; (8012a9c <tcp_write_checks+0xe8>)
 8012a86:	f007 fe8d 	bl	801a7a4 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8012a8a:	2300      	movs	r3, #0
}
 8012a8c:	4618      	mov	r0, r3
 8012a8e:	3708      	adds	r7, #8
 8012a90:	46bd      	mov	sp, r7
 8012a92:	bd80      	pop	{r7, pc}
 8012a94:	0801d318 	.word	0x0801d318
 8012a98:	0801d428 	.word	0x0801d428
 8012a9c:	0801d36c 	.word	0x0801d36c
 8012aa0:	0801d448 	.word	0x0801d448
 8012aa4:	0801d484 	.word	0x0801d484

08012aa8 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8012aa8:	b590      	push	{r4, r7, lr}
 8012aaa:	b09b      	sub	sp, #108	; 0x6c
 8012aac:	af04      	add	r7, sp, #16
 8012aae:	60f8      	str	r0, [r7, #12]
 8012ab0:	60b9      	str	r1, [r7, #8]
 8012ab2:	4611      	mov	r1, r2
 8012ab4:	461a      	mov	r2, r3
 8012ab6:	460b      	mov	r3, r1
 8012ab8:	80fb      	strh	r3, [r7, #6]
 8012aba:	4613      	mov	r3, r2
 8012abc:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8012abe:	2300      	movs	r3, #0
 8012ac0:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8012ac2:	2300      	movs	r3, #0
 8012ac4:	653b      	str	r3, [r7, #80]	; 0x50
 8012ac6:	2300      	movs	r3, #0
 8012ac8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012aca:	2300      	movs	r3, #0
 8012acc:	64bb      	str	r3, [r7, #72]	; 0x48
 8012ace:	2300      	movs	r3, #0
 8012ad0:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8012ad2:	2300      	movs	r3, #0
 8012ad4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8012ad8:	2300      	movs	r3, #0
 8012ada:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8012ade:	2300      	movs	r3, #0
 8012ae0:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8012ae2:	2300      	movs	r3, #0
 8012ae4:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8012ae6:	2300      	movs	r3, #0
 8012ae8:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8012aea:	68fb      	ldr	r3, [r7, #12]
 8012aec:	2b00      	cmp	r3, #0
 8012aee:	d109      	bne.n	8012b04 <tcp_write+0x5c>
 8012af0:	4ba4      	ldr	r3, [pc, #656]	; (8012d84 <tcp_write+0x2dc>)
 8012af2:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8012af6:	49a4      	ldr	r1, [pc, #656]	; (8012d88 <tcp_write+0x2e0>)
 8012af8:	48a4      	ldr	r0, [pc, #656]	; (8012d8c <tcp_write+0x2e4>)
 8012afa:	f007 fe53 	bl	801a7a4 <iprintf>
 8012afe:	f06f 030f 	mvn.w	r3, #15
 8012b02:	e32a      	b.n	801315a <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8012b04:	68fb      	ldr	r3, [r7, #12]
 8012b06:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8012b0a:	085b      	lsrs	r3, r3, #1
 8012b0c:	b29a      	uxth	r2, r3
 8012b0e:	68fb      	ldr	r3, [r7, #12]
 8012b10:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012b12:	4293      	cmp	r3, r2
 8012b14:	bf28      	it	cs
 8012b16:	4613      	movcs	r3, r2
 8012b18:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8012b1a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012b1c:	2b00      	cmp	r3, #0
 8012b1e:	d102      	bne.n	8012b26 <tcp_write+0x7e>
 8012b20:	68fb      	ldr	r3, [r7, #12]
 8012b22:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012b24:	e000      	b.n	8012b28 <tcp_write+0x80>
 8012b26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012b28:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8012b2a:	68bb      	ldr	r3, [r7, #8]
 8012b2c:	2b00      	cmp	r3, #0
 8012b2e:	d109      	bne.n	8012b44 <tcp_write+0x9c>
 8012b30:	4b94      	ldr	r3, [pc, #592]	; (8012d84 <tcp_write+0x2dc>)
 8012b32:	f240 12ad 	movw	r2, #429	; 0x1ad
 8012b36:	4996      	ldr	r1, [pc, #600]	; (8012d90 <tcp_write+0x2e8>)
 8012b38:	4894      	ldr	r0, [pc, #592]	; (8012d8c <tcp_write+0x2e4>)
 8012b3a:	f007 fe33 	bl	801a7a4 <iprintf>
 8012b3e:	f06f 030f 	mvn.w	r3, #15
 8012b42:	e30a      	b.n	801315a <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8012b44:	88fb      	ldrh	r3, [r7, #6]
 8012b46:	4619      	mov	r1, r3
 8012b48:	68f8      	ldr	r0, [r7, #12]
 8012b4a:	f7ff ff33 	bl	80129b4 <tcp_write_checks>
 8012b4e:	4603      	mov	r3, r0
 8012b50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8012b54:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8012b58:	2b00      	cmp	r3, #0
 8012b5a:	d002      	beq.n	8012b62 <tcp_write+0xba>
    return err;
 8012b5c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8012b60:	e2fb      	b.n	801315a <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8012b62:	68fb      	ldr	r3, [r7, #12]
 8012b64:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012b68:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012b6c:	2300      	movs	r3, #0
 8012b6e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8012b72:	68fb      	ldr	r3, [r7, #12]
 8012b74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012b76:	2b00      	cmp	r3, #0
 8012b78:	f000 80f6 	beq.w	8012d68 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012b7c:	68fb      	ldr	r3, [r7, #12]
 8012b7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012b80:	653b      	str	r3, [r7, #80]	; 0x50
 8012b82:	e002      	b.n	8012b8a <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8012b84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012b86:	681b      	ldr	r3, [r3, #0]
 8012b88:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012b8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012b8c:	681b      	ldr	r3, [r3, #0]
 8012b8e:	2b00      	cmp	r3, #0
 8012b90:	d1f8      	bne.n	8012b84 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8012b92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012b94:	7a9b      	ldrb	r3, [r3, #10]
 8012b96:	009b      	lsls	r3, r3, #2
 8012b98:	b29b      	uxth	r3, r3
 8012b9a:	f003 0304 	and.w	r3, r3, #4
 8012b9e:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8012ba0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012ba2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012ba4:	891b      	ldrh	r3, [r3, #8]
 8012ba6:	4619      	mov	r1, r3
 8012ba8:	8c3b      	ldrh	r3, [r7, #32]
 8012baa:	440b      	add	r3, r1
 8012bac:	429a      	cmp	r2, r3
 8012bae:	da06      	bge.n	8012bbe <tcp_write+0x116>
 8012bb0:	4b74      	ldr	r3, [pc, #464]	; (8012d84 <tcp_write+0x2dc>)
 8012bb2:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8012bb6:	4977      	ldr	r1, [pc, #476]	; (8012d94 <tcp_write+0x2ec>)
 8012bb8:	4874      	ldr	r0, [pc, #464]	; (8012d8c <tcp_write+0x2e4>)
 8012bba:	f007 fdf3 	bl	801a7a4 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8012bbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012bc0:	891a      	ldrh	r2, [r3, #8]
 8012bc2:	8c3b      	ldrh	r3, [r7, #32]
 8012bc4:	4413      	add	r3, r2
 8012bc6:	b29b      	uxth	r3, r3
 8012bc8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012bca:	1ad3      	subs	r3, r2, r3
 8012bcc:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8012bce:	68fb      	ldr	r3, [r7, #12]
 8012bd0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012bd4:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8012bd6:	8a7b      	ldrh	r3, [r7, #18]
 8012bd8:	2b00      	cmp	r3, #0
 8012bda:	d026      	beq.n	8012c2a <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8012bdc:	8a7b      	ldrh	r3, [r7, #18]
 8012bde:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012be0:	429a      	cmp	r2, r3
 8012be2:	d206      	bcs.n	8012bf2 <tcp_write+0x14a>
 8012be4:	4b67      	ldr	r3, [pc, #412]	; (8012d84 <tcp_write+0x2dc>)
 8012be6:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8012bea:	496b      	ldr	r1, [pc, #428]	; (8012d98 <tcp_write+0x2f0>)
 8012bec:	4867      	ldr	r0, [pc, #412]	; (8012d8c <tcp_write+0x2e4>)
 8012bee:	f007 fdd9 	bl	801a7a4 <iprintf>
      seg = last_unsent;
 8012bf2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012bf4:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8012bf6:	8a7b      	ldrh	r3, [r7, #18]
 8012bf8:	88fa      	ldrh	r2, [r7, #6]
 8012bfa:	4293      	cmp	r3, r2
 8012bfc:	bf28      	it	cs
 8012bfe:	4613      	movcs	r3, r2
 8012c00:	b29b      	uxth	r3, r3
 8012c02:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012c04:	4293      	cmp	r3, r2
 8012c06:	bf28      	it	cs
 8012c08:	4613      	movcs	r3, r2
 8012c0a:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8012c0c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012c10:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012c12:	4413      	add	r3, r2
 8012c14:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8012c18:	8a7a      	ldrh	r2, [r7, #18]
 8012c1a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012c1c:	1ad3      	subs	r3, r2, r3
 8012c1e:	b29b      	uxth	r3, r3
 8012c20:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8012c22:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012c24:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012c26:	1ad3      	subs	r3, r2, r3
 8012c28:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8012c2a:	8a7b      	ldrh	r3, [r7, #18]
 8012c2c:	2b00      	cmp	r3, #0
 8012c2e:	d00b      	beq.n	8012c48 <tcp_write+0x1a0>
 8012c30:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012c34:	88fb      	ldrh	r3, [r7, #6]
 8012c36:	429a      	cmp	r2, r3
 8012c38:	d006      	beq.n	8012c48 <tcp_write+0x1a0>
 8012c3a:	4b52      	ldr	r3, [pc, #328]	; (8012d84 <tcp_write+0x2dc>)
 8012c3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012c40:	4956      	ldr	r1, [pc, #344]	; (8012d9c <tcp_write+0x2f4>)
 8012c42:	4852      	ldr	r0, [pc, #328]	; (8012d8c <tcp_write+0x2e4>)
 8012c44:	f007 fdae 	bl	801a7a4 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8012c48:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012c4c:	88fb      	ldrh	r3, [r7, #6]
 8012c4e:	429a      	cmp	r2, r3
 8012c50:	f080 8167 	bcs.w	8012f22 <tcp_write+0x47a>
 8012c54:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012c56:	2b00      	cmp	r3, #0
 8012c58:	f000 8163 	beq.w	8012f22 <tcp_write+0x47a>
 8012c5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012c5e:	891b      	ldrh	r3, [r3, #8]
 8012c60:	2b00      	cmp	r3, #0
 8012c62:	f000 815e 	beq.w	8012f22 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8012c66:	88fa      	ldrh	r2, [r7, #6]
 8012c68:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012c6c:	1ad2      	subs	r2, r2, r3
 8012c6e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012c70:	4293      	cmp	r3, r2
 8012c72:	bfa8      	it	ge
 8012c74:	4613      	movge	r3, r2
 8012c76:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8012c78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012c7a:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8012c7c:	797b      	ldrb	r3, [r7, #5]
 8012c7e:	f003 0301 	and.w	r3, r3, #1
 8012c82:	2b00      	cmp	r3, #0
 8012c84:	d027      	beq.n	8012cd6 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8012c86:	f107 0012 	add.w	r0, r7, #18
 8012c8a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012c8c:	8bf9      	ldrh	r1, [r7, #30]
 8012c8e:	2301      	movs	r3, #1
 8012c90:	9302      	str	r3, [sp, #8]
 8012c92:	797b      	ldrb	r3, [r7, #5]
 8012c94:	9301      	str	r3, [sp, #4]
 8012c96:	68fb      	ldr	r3, [r7, #12]
 8012c98:	9300      	str	r3, [sp, #0]
 8012c9a:	4603      	mov	r3, r0
 8012c9c:	2000      	movs	r0, #0
 8012c9e:	f7ff fe0f 	bl	80128c0 <tcp_pbuf_prealloc>
 8012ca2:	6578      	str	r0, [r7, #84]	; 0x54
 8012ca4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012ca6:	2b00      	cmp	r3, #0
 8012ca8:	f000 8225 	beq.w	80130f6 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8012cac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012cae:	6858      	ldr	r0, [r3, #4]
 8012cb0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012cb4:	68ba      	ldr	r2, [r7, #8]
 8012cb6:	4413      	add	r3, r2
 8012cb8:	8bfa      	ldrh	r2, [r7, #30]
 8012cba:	4619      	mov	r1, r3
 8012cbc:	f007 fc7e 	bl	801a5bc <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8012cc0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8012cc2:	f7fb f977 	bl	800dfb4 <pbuf_clen>
 8012cc6:	4603      	mov	r3, r0
 8012cc8:	461a      	mov	r2, r3
 8012cca:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012cce:	4413      	add	r3, r2
 8012cd0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8012cd4:	e041      	b.n	8012d5a <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8012cd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012cd8:	685b      	ldr	r3, [r3, #4]
 8012cda:	637b      	str	r3, [r7, #52]	; 0x34
 8012cdc:	e002      	b.n	8012ce4 <tcp_write+0x23c>
 8012cde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012ce0:	681b      	ldr	r3, [r3, #0]
 8012ce2:	637b      	str	r3, [r7, #52]	; 0x34
 8012ce4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012ce6:	681b      	ldr	r3, [r3, #0]
 8012ce8:	2b00      	cmp	r3, #0
 8012cea:	d1f8      	bne.n	8012cde <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8012cec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012cee:	7b1b      	ldrb	r3, [r3, #12]
 8012cf0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8012cf4:	2b00      	cmp	r3, #0
 8012cf6:	d115      	bne.n	8012d24 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8012cf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012cfa:	685b      	ldr	r3, [r3, #4]
 8012cfc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012cfe:	8952      	ldrh	r2, [r2, #10]
 8012d00:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8012d02:	68ba      	ldr	r2, [r7, #8]
 8012d04:	429a      	cmp	r2, r3
 8012d06:	d10d      	bne.n	8012d24 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8012d08:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012d0c:	2b00      	cmp	r3, #0
 8012d0e:	d006      	beq.n	8012d1e <tcp_write+0x276>
 8012d10:	4b1c      	ldr	r3, [pc, #112]	; (8012d84 <tcp_write+0x2dc>)
 8012d12:	f240 2231 	movw	r2, #561	; 0x231
 8012d16:	4922      	ldr	r1, [pc, #136]	; (8012da0 <tcp_write+0x2f8>)
 8012d18:	481c      	ldr	r0, [pc, #112]	; (8012d8c <tcp_write+0x2e4>)
 8012d1a:	f007 fd43 	bl	801a7a4 <iprintf>
          extendlen = seglen;
 8012d1e:	8bfb      	ldrh	r3, [r7, #30]
 8012d20:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8012d22:	e01a      	b.n	8012d5a <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8012d24:	8bfb      	ldrh	r3, [r7, #30]
 8012d26:	2201      	movs	r2, #1
 8012d28:	4619      	mov	r1, r3
 8012d2a:	2000      	movs	r0, #0
 8012d2c:	f7fa fdd0 	bl	800d8d0 <pbuf_alloc>
 8012d30:	6578      	str	r0, [r7, #84]	; 0x54
 8012d32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012d34:	2b00      	cmp	r3, #0
 8012d36:	f000 81e0 	beq.w	80130fa <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8012d3a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012d3e:	68ba      	ldr	r2, [r7, #8]
 8012d40:	441a      	add	r2, r3
 8012d42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012d44:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8012d46:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8012d48:	f7fb f934 	bl	800dfb4 <pbuf_clen>
 8012d4c:	4603      	mov	r3, r0
 8012d4e:	461a      	mov	r2, r3
 8012d50:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012d54:	4413      	add	r3, r2
 8012d56:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8012d5a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012d5e:	8bfb      	ldrh	r3, [r7, #30]
 8012d60:	4413      	add	r3, r2
 8012d62:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8012d66:	e0dc      	b.n	8012f22 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8012d68:	68fb      	ldr	r3, [r7, #12]
 8012d6a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012d6e:	2b00      	cmp	r3, #0
 8012d70:	f000 80d7 	beq.w	8012f22 <tcp_write+0x47a>
 8012d74:	4b03      	ldr	r3, [pc, #12]	; (8012d84 <tcp_write+0x2dc>)
 8012d76:	f240 224a 	movw	r2, #586	; 0x24a
 8012d7a:	490a      	ldr	r1, [pc, #40]	; (8012da4 <tcp_write+0x2fc>)
 8012d7c:	4803      	ldr	r0, [pc, #12]	; (8012d8c <tcp_write+0x2e4>)
 8012d7e:	f007 fd11 	bl	801a7a4 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8012d82:	e0ce      	b.n	8012f22 <tcp_write+0x47a>
 8012d84:	0801d318 	.word	0x0801d318
 8012d88:	0801d4b8 	.word	0x0801d4b8
 8012d8c:	0801d36c 	.word	0x0801d36c
 8012d90:	0801d4d0 	.word	0x0801d4d0
 8012d94:	0801d504 	.word	0x0801d504
 8012d98:	0801d51c 	.word	0x0801d51c
 8012d9c:	0801d53c 	.word	0x0801d53c
 8012da0:	0801d55c 	.word	0x0801d55c
 8012da4:	0801d588 	.word	0x0801d588
    struct pbuf *p;
    u16_t left = len - pos;
 8012da8:	88fa      	ldrh	r2, [r7, #6]
 8012daa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012dae:	1ad3      	subs	r3, r2, r3
 8012db0:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8012db2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012db6:	b29b      	uxth	r3, r3
 8012db8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012dba:	1ad3      	subs	r3, r2, r3
 8012dbc:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8012dbe:	8b7a      	ldrh	r2, [r7, #26]
 8012dc0:	8bbb      	ldrh	r3, [r7, #28]
 8012dc2:	4293      	cmp	r3, r2
 8012dc4:	bf28      	it	cs
 8012dc6:	4613      	movcs	r3, r2
 8012dc8:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8012dca:	797b      	ldrb	r3, [r7, #5]
 8012dcc:	f003 0301 	and.w	r3, r3, #1
 8012dd0:	2b00      	cmp	r3, #0
 8012dd2:	d036      	beq.n	8012e42 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8012dd4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012dd8:	b29a      	uxth	r2, r3
 8012dda:	8b3b      	ldrh	r3, [r7, #24]
 8012ddc:	4413      	add	r3, r2
 8012dde:	b299      	uxth	r1, r3
 8012de0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012de2:	2b00      	cmp	r3, #0
 8012de4:	bf0c      	ite	eq
 8012de6:	2301      	moveq	r3, #1
 8012de8:	2300      	movne	r3, #0
 8012dea:	b2db      	uxtb	r3, r3
 8012dec:	f107 0012 	add.w	r0, r7, #18
 8012df0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012df2:	9302      	str	r3, [sp, #8]
 8012df4:	797b      	ldrb	r3, [r7, #5]
 8012df6:	9301      	str	r3, [sp, #4]
 8012df8:	68fb      	ldr	r3, [r7, #12]
 8012dfa:	9300      	str	r3, [sp, #0]
 8012dfc:	4603      	mov	r3, r0
 8012dfe:	2036      	movs	r0, #54	; 0x36
 8012e00:	f7ff fd5e 	bl	80128c0 <tcp_pbuf_prealloc>
 8012e04:	6338      	str	r0, [r7, #48]	; 0x30
 8012e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e08:	2b00      	cmp	r3, #0
 8012e0a:	f000 8178 	beq.w	80130fe <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8012e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e10:	895b      	ldrh	r3, [r3, #10]
 8012e12:	8b3a      	ldrh	r2, [r7, #24]
 8012e14:	429a      	cmp	r2, r3
 8012e16:	d906      	bls.n	8012e26 <tcp_write+0x37e>
 8012e18:	4b8c      	ldr	r3, [pc, #560]	; (801304c <tcp_write+0x5a4>)
 8012e1a:	f240 2266 	movw	r2, #614	; 0x266
 8012e1e:	498c      	ldr	r1, [pc, #560]	; (8013050 <tcp_write+0x5a8>)
 8012e20:	488c      	ldr	r0, [pc, #560]	; (8013054 <tcp_write+0x5ac>)
 8012e22:	f007 fcbf 	bl	801a7a4 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8012e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e28:	685a      	ldr	r2, [r3, #4]
 8012e2a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012e2e:	18d0      	adds	r0, r2, r3
 8012e30:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012e34:	68ba      	ldr	r2, [r7, #8]
 8012e36:	4413      	add	r3, r2
 8012e38:	8b3a      	ldrh	r2, [r7, #24]
 8012e3a:	4619      	mov	r1, r3
 8012e3c:	f007 fbbe 	bl	801a5bc <memcpy>
 8012e40:	e02f      	b.n	8012ea2 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8012e42:	8a7b      	ldrh	r3, [r7, #18]
 8012e44:	2b00      	cmp	r3, #0
 8012e46:	d006      	beq.n	8012e56 <tcp_write+0x3ae>
 8012e48:	4b80      	ldr	r3, [pc, #512]	; (801304c <tcp_write+0x5a4>)
 8012e4a:	f240 2271 	movw	r2, #625	; 0x271
 8012e4e:	4982      	ldr	r1, [pc, #520]	; (8013058 <tcp_write+0x5b0>)
 8012e50:	4880      	ldr	r0, [pc, #512]	; (8013054 <tcp_write+0x5ac>)
 8012e52:	f007 fca7 	bl	801a7a4 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8012e56:	8b3b      	ldrh	r3, [r7, #24]
 8012e58:	2201      	movs	r2, #1
 8012e5a:	4619      	mov	r1, r3
 8012e5c:	2036      	movs	r0, #54	; 0x36
 8012e5e:	f7fa fd37 	bl	800d8d0 <pbuf_alloc>
 8012e62:	6178      	str	r0, [r7, #20]
 8012e64:	697b      	ldr	r3, [r7, #20]
 8012e66:	2b00      	cmp	r3, #0
 8012e68:	f000 814b 	beq.w	8013102 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8012e6c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012e70:	68ba      	ldr	r2, [r7, #8]
 8012e72:	441a      	add	r2, r3
 8012e74:	697b      	ldr	r3, [r7, #20]
 8012e76:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8012e78:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012e7c:	b29b      	uxth	r3, r3
 8012e7e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012e82:	4619      	mov	r1, r3
 8012e84:	2036      	movs	r0, #54	; 0x36
 8012e86:	f7fa fd23 	bl	800d8d0 <pbuf_alloc>
 8012e8a:	6338      	str	r0, [r7, #48]	; 0x30
 8012e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e8e:	2b00      	cmp	r3, #0
 8012e90:	d103      	bne.n	8012e9a <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8012e92:	6978      	ldr	r0, [r7, #20]
 8012e94:	f7fb f800 	bl	800de98 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8012e98:	e136      	b.n	8013108 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8012e9a:	6979      	ldr	r1, [r7, #20]
 8012e9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012e9e:	f7fb f8c7 	bl	800e030 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8012ea2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012ea4:	f7fb f886 	bl	800dfb4 <pbuf_clen>
 8012ea8:	4603      	mov	r3, r0
 8012eaa:	461a      	mov	r2, r3
 8012eac:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012eb0:	4413      	add	r3, r2
 8012eb2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8012eb6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012eba:	2b09      	cmp	r3, #9
 8012ebc:	d903      	bls.n	8012ec6 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8012ebe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012ec0:	f7fa ffea 	bl	800de98 <pbuf_free>
      goto memerr;
 8012ec4:	e120      	b.n	8013108 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8012ec6:	68fb      	ldr	r3, [r7, #12]
 8012ec8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8012eca:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012ece:	441a      	add	r2, r3
 8012ed0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012ed4:	9300      	str	r3, [sp, #0]
 8012ed6:	4613      	mov	r3, r2
 8012ed8:	2200      	movs	r2, #0
 8012eda:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012edc:	68f8      	ldr	r0, [r7, #12]
 8012ede:	f7ff fc51 	bl	8012784 <tcp_create_segment>
 8012ee2:	64f8      	str	r0, [r7, #76]	; 0x4c
 8012ee4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012ee6:	2b00      	cmp	r3, #0
 8012ee8:	f000 810d 	beq.w	8013106 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8012eec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012eee:	2b00      	cmp	r3, #0
 8012ef0:	d102      	bne.n	8012ef8 <tcp_write+0x450>
      queue = seg;
 8012ef2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012ef4:	647b      	str	r3, [r7, #68]	; 0x44
 8012ef6:	e00c      	b.n	8012f12 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8012ef8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012efa:	2b00      	cmp	r3, #0
 8012efc:	d106      	bne.n	8012f0c <tcp_write+0x464>
 8012efe:	4b53      	ldr	r3, [pc, #332]	; (801304c <tcp_write+0x5a4>)
 8012f00:	f240 22ab 	movw	r2, #683	; 0x2ab
 8012f04:	4955      	ldr	r1, [pc, #340]	; (801305c <tcp_write+0x5b4>)
 8012f06:	4853      	ldr	r0, [pc, #332]	; (8013054 <tcp_write+0x5ac>)
 8012f08:	f007 fc4c 	bl	801a7a4 <iprintf>
      prev_seg->next = seg;
 8012f0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012f0e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012f10:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8012f12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012f14:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8012f16:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012f1a:	8b3b      	ldrh	r3, [r7, #24]
 8012f1c:	4413      	add	r3, r2
 8012f1e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8012f22:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012f26:	88fb      	ldrh	r3, [r7, #6]
 8012f28:	429a      	cmp	r2, r3
 8012f2a:	f4ff af3d 	bcc.w	8012da8 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8012f2e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012f30:	2b00      	cmp	r3, #0
 8012f32:	d02c      	beq.n	8012f8e <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8012f34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012f36:	685b      	ldr	r3, [r3, #4]
 8012f38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012f3a:	e01e      	b.n	8012f7a <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8012f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f3e:	891a      	ldrh	r2, [r3, #8]
 8012f40:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012f42:	4413      	add	r3, r2
 8012f44:	b29a      	uxth	r2, r3
 8012f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f48:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8012f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f4c:	681b      	ldr	r3, [r3, #0]
 8012f4e:	2b00      	cmp	r3, #0
 8012f50:	d110      	bne.n	8012f74 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8012f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f54:	685b      	ldr	r3, [r3, #4]
 8012f56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012f58:	8952      	ldrh	r2, [r2, #10]
 8012f5a:	4413      	add	r3, r2
 8012f5c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8012f5e:	68b9      	ldr	r1, [r7, #8]
 8012f60:	4618      	mov	r0, r3
 8012f62:	f007 fb2b 	bl	801a5bc <memcpy>
        p->len += oversize_used;
 8012f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f68:	895a      	ldrh	r2, [r3, #10]
 8012f6a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012f6c:	4413      	add	r3, r2
 8012f6e:	b29a      	uxth	r2, r3
 8012f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f72:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8012f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f76:	681b      	ldr	r3, [r3, #0]
 8012f78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f7c:	2b00      	cmp	r3, #0
 8012f7e:	d1dd      	bne.n	8012f3c <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8012f80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012f82:	891a      	ldrh	r2, [r3, #8]
 8012f84:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012f86:	4413      	add	r3, r2
 8012f88:	b29a      	uxth	r2, r3
 8012f8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012f8c:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8012f8e:	8a7a      	ldrh	r2, [r7, #18]
 8012f90:	68fb      	ldr	r3, [r7, #12]
 8012f92:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8012f96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012f98:	2b00      	cmp	r3, #0
 8012f9a:	d018      	beq.n	8012fce <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8012f9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012f9e:	2b00      	cmp	r3, #0
 8012fa0:	d106      	bne.n	8012fb0 <tcp_write+0x508>
 8012fa2:	4b2a      	ldr	r3, [pc, #168]	; (801304c <tcp_write+0x5a4>)
 8012fa4:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8012fa8:	492d      	ldr	r1, [pc, #180]	; (8013060 <tcp_write+0x5b8>)
 8012faa:	482a      	ldr	r0, [pc, #168]	; (8013054 <tcp_write+0x5ac>)
 8012fac:	f007 fbfa 	bl	801a7a4 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8012fb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012fb2:	685b      	ldr	r3, [r3, #4]
 8012fb4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012fb6:	4618      	mov	r0, r3
 8012fb8:	f7fb f83a 	bl	800e030 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8012fbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012fbe:	891a      	ldrh	r2, [r3, #8]
 8012fc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012fc2:	891b      	ldrh	r3, [r3, #8]
 8012fc4:	4413      	add	r3, r2
 8012fc6:	b29a      	uxth	r2, r3
 8012fc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012fca:	811a      	strh	r2, [r3, #8]
 8012fcc:	e037      	b.n	801303e <tcp_write+0x596>
  } else if (extendlen > 0) {
 8012fce:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012fd0:	2b00      	cmp	r3, #0
 8012fd2:	d034      	beq.n	801303e <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8012fd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012fd6:	2b00      	cmp	r3, #0
 8012fd8:	d003      	beq.n	8012fe2 <tcp_write+0x53a>
 8012fda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012fdc:	685b      	ldr	r3, [r3, #4]
 8012fde:	2b00      	cmp	r3, #0
 8012fe0:	d106      	bne.n	8012ff0 <tcp_write+0x548>
 8012fe2:	4b1a      	ldr	r3, [pc, #104]	; (801304c <tcp_write+0x5a4>)
 8012fe4:	f240 22e6 	movw	r2, #742	; 0x2e6
 8012fe8:	491e      	ldr	r1, [pc, #120]	; (8013064 <tcp_write+0x5bc>)
 8012fea:	481a      	ldr	r0, [pc, #104]	; (8013054 <tcp_write+0x5ac>)
 8012fec:	f007 fbda 	bl	801a7a4 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8012ff0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012ff2:	685b      	ldr	r3, [r3, #4]
 8012ff4:	62bb      	str	r3, [r7, #40]	; 0x28
 8012ff6:	e009      	b.n	801300c <tcp_write+0x564>
      p->tot_len += extendlen;
 8012ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ffa:	891a      	ldrh	r2, [r3, #8]
 8012ffc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012ffe:	4413      	add	r3, r2
 8013000:	b29a      	uxth	r2, r3
 8013002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013004:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8013006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013008:	681b      	ldr	r3, [r3, #0]
 801300a:	62bb      	str	r3, [r7, #40]	; 0x28
 801300c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801300e:	681b      	ldr	r3, [r3, #0]
 8013010:	2b00      	cmp	r3, #0
 8013012:	d1f1      	bne.n	8012ff8 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8013014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013016:	891a      	ldrh	r2, [r3, #8]
 8013018:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801301a:	4413      	add	r3, r2
 801301c:	b29a      	uxth	r2, r3
 801301e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013020:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8013022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013024:	895a      	ldrh	r2, [r3, #10]
 8013026:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013028:	4413      	add	r3, r2
 801302a:	b29a      	uxth	r2, r3
 801302c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801302e:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8013030:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013032:	891a      	ldrh	r2, [r3, #8]
 8013034:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013036:	4413      	add	r3, r2
 8013038:	b29a      	uxth	r2, r3
 801303a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801303c:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801303e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013040:	2b00      	cmp	r3, #0
 8013042:	d111      	bne.n	8013068 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8013044:	68fb      	ldr	r3, [r7, #12]
 8013046:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013048:	66da      	str	r2, [r3, #108]	; 0x6c
 801304a:	e010      	b.n	801306e <tcp_write+0x5c6>
 801304c:	0801d318 	.word	0x0801d318
 8013050:	0801d5b8 	.word	0x0801d5b8
 8013054:	0801d36c 	.word	0x0801d36c
 8013058:	0801d5f8 	.word	0x0801d5f8
 801305c:	0801d608 	.word	0x0801d608
 8013060:	0801d61c 	.word	0x0801d61c
 8013064:	0801d654 	.word	0x0801d654
  } else {
    last_unsent->next = queue;
 8013068:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801306a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801306c:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801306e:	68fb      	ldr	r3, [r7, #12]
 8013070:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8013072:	88fb      	ldrh	r3, [r7, #6]
 8013074:	441a      	add	r2, r3
 8013076:	68fb      	ldr	r3, [r7, #12]
 8013078:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 801307a:	68fb      	ldr	r3, [r7, #12]
 801307c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8013080:	88fb      	ldrh	r3, [r7, #6]
 8013082:	1ad3      	subs	r3, r2, r3
 8013084:	b29a      	uxth	r2, r3
 8013086:	68fb      	ldr	r3, [r7, #12]
 8013088:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 801308c:	68fb      	ldr	r3, [r7, #12]
 801308e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8013092:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8013096:	68fb      	ldr	r3, [r7, #12]
 8013098:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801309c:	2b00      	cmp	r3, #0
 801309e:	d00e      	beq.n	80130be <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 80130a0:	68fb      	ldr	r3, [r7, #12]
 80130a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80130a4:	2b00      	cmp	r3, #0
 80130a6:	d10a      	bne.n	80130be <tcp_write+0x616>
 80130a8:	68fb      	ldr	r3, [r7, #12]
 80130aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80130ac:	2b00      	cmp	r3, #0
 80130ae:	d106      	bne.n	80130be <tcp_write+0x616>
 80130b0:	4b2c      	ldr	r3, [pc, #176]	; (8013164 <tcp_write+0x6bc>)
 80130b2:	f240 3212 	movw	r2, #786	; 0x312
 80130b6:	492c      	ldr	r1, [pc, #176]	; (8013168 <tcp_write+0x6c0>)
 80130b8:	482c      	ldr	r0, [pc, #176]	; (801316c <tcp_write+0x6c4>)
 80130ba:	f007 fb73 	bl	801a7a4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 80130be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80130c0:	2b00      	cmp	r3, #0
 80130c2:	d016      	beq.n	80130f2 <tcp_write+0x64a>
 80130c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80130c6:	68db      	ldr	r3, [r3, #12]
 80130c8:	2b00      	cmp	r3, #0
 80130ca:	d012      	beq.n	80130f2 <tcp_write+0x64a>
 80130cc:	797b      	ldrb	r3, [r7, #5]
 80130ce:	f003 0302 	and.w	r3, r3, #2
 80130d2:	2b00      	cmp	r3, #0
 80130d4:	d10d      	bne.n	80130f2 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 80130d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80130d8:	68db      	ldr	r3, [r3, #12]
 80130da:	899b      	ldrh	r3, [r3, #12]
 80130dc:	b29c      	uxth	r4, r3
 80130de:	2008      	movs	r0, #8
 80130e0:	f7f9 fa76 	bl	800c5d0 <lwip_htons>
 80130e4:	4603      	mov	r3, r0
 80130e6:	461a      	mov	r2, r3
 80130e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80130ea:	68db      	ldr	r3, [r3, #12]
 80130ec:	4322      	orrs	r2, r4
 80130ee:	b292      	uxth	r2, r2
 80130f0:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 80130f2:	2300      	movs	r3, #0
 80130f4:	e031      	b.n	801315a <tcp_write+0x6b2>
          goto memerr;
 80130f6:	bf00      	nop
 80130f8:	e006      	b.n	8013108 <tcp_write+0x660>
            goto memerr;
 80130fa:	bf00      	nop
 80130fc:	e004      	b.n	8013108 <tcp_write+0x660>
        goto memerr;
 80130fe:	bf00      	nop
 8013100:	e002      	b.n	8013108 <tcp_write+0x660>
        goto memerr;
 8013102:	bf00      	nop
 8013104:	e000      	b.n	8013108 <tcp_write+0x660>
      goto memerr;
 8013106:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013108:	68fb      	ldr	r3, [r7, #12]
 801310a:	8b5b      	ldrh	r3, [r3, #26]
 801310c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013110:	b29a      	uxth	r2, r3
 8013112:	68fb      	ldr	r3, [r7, #12]
 8013114:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8013116:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013118:	2b00      	cmp	r3, #0
 801311a:	d002      	beq.n	8013122 <tcp_write+0x67a>
    pbuf_free(concat_p);
 801311c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801311e:	f7fa febb 	bl	800de98 <pbuf_free>
  }
  if (queue != NULL) {
 8013122:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013124:	2b00      	cmp	r3, #0
 8013126:	d002      	beq.n	801312e <tcp_write+0x686>
    tcp_segs_free(queue);
 8013128:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801312a:	f7fc fb85 	bl	800f838 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801312e:	68fb      	ldr	r3, [r7, #12]
 8013130:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013134:	2b00      	cmp	r3, #0
 8013136:	d00e      	beq.n	8013156 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8013138:	68fb      	ldr	r3, [r7, #12]
 801313a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801313c:	2b00      	cmp	r3, #0
 801313e:	d10a      	bne.n	8013156 <tcp_write+0x6ae>
 8013140:	68fb      	ldr	r3, [r7, #12]
 8013142:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013144:	2b00      	cmp	r3, #0
 8013146:	d106      	bne.n	8013156 <tcp_write+0x6ae>
 8013148:	4b06      	ldr	r3, [pc, #24]	; (8013164 <tcp_write+0x6bc>)
 801314a:	f240 3227 	movw	r2, #807	; 0x327
 801314e:	4906      	ldr	r1, [pc, #24]	; (8013168 <tcp_write+0x6c0>)
 8013150:	4806      	ldr	r0, [pc, #24]	; (801316c <tcp_write+0x6c4>)
 8013152:	f007 fb27 	bl	801a7a4 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8013156:	f04f 33ff 	mov.w	r3, #4294967295
}
 801315a:	4618      	mov	r0, r3
 801315c:	375c      	adds	r7, #92	; 0x5c
 801315e:	46bd      	mov	sp, r7
 8013160:	bd90      	pop	{r4, r7, pc}
 8013162:	bf00      	nop
 8013164:	0801d318 	.word	0x0801d318
 8013168:	0801d68c 	.word	0x0801d68c
 801316c:	0801d36c 	.word	0x0801d36c

08013170 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8013170:	b590      	push	{r4, r7, lr}
 8013172:	b08b      	sub	sp, #44	; 0x2c
 8013174:	af02      	add	r7, sp, #8
 8013176:	6078      	str	r0, [r7, #4]
 8013178:	460b      	mov	r3, r1
 801317a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801317c:	2300      	movs	r3, #0
 801317e:	61fb      	str	r3, [r7, #28]
 8013180:	2300      	movs	r3, #0
 8013182:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8013184:	2300      	movs	r3, #0
 8013186:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8013188:	687b      	ldr	r3, [r7, #4]
 801318a:	2b00      	cmp	r3, #0
 801318c:	d106      	bne.n	801319c <tcp_split_unsent_seg+0x2c>
 801318e:	4b95      	ldr	r3, [pc, #596]	; (80133e4 <tcp_split_unsent_seg+0x274>)
 8013190:	f240 324b 	movw	r2, #843	; 0x34b
 8013194:	4994      	ldr	r1, [pc, #592]	; (80133e8 <tcp_split_unsent_seg+0x278>)
 8013196:	4895      	ldr	r0, [pc, #596]	; (80133ec <tcp_split_unsent_seg+0x27c>)
 8013198:	f007 fb04 	bl	801a7a4 <iprintf>

  useg = pcb->unsent;
 801319c:	687b      	ldr	r3, [r7, #4]
 801319e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80131a0:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80131a2:	697b      	ldr	r3, [r7, #20]
 80131a4:	2b00      	cmp	r3, #0
 80131a6:	d102      	bne.n	80131ae <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80131a8:	f04f 33ff 	mov.w	r3, #4294967295
 80131ac:	e116      	b.n	80133dc <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80131ae:	887b      	ldrh	r3, [r7, #2]
 80131b0:	2b00      	cmp	r3, #0
 80131b2:	d109      	bne.n	80131c8 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80131b4:	4b8b      	ldr	r3, [pc, #556]	; (80133e4 <tcp_split_unsent_seg+0x274>)
 80131b6:	f240 3253 	movw	r2, #851	; 0x353
 80131ba:	498d      	ldr	r1, [pc, #564]	; (80133f0 <tcp_split_unsent_seg+0x280>)
 80131bc:	488b      	ldr	r0, [pc, #556]	; (80133ec <tcp_split_unsent_seg+0x27c>)
 80131be:	f007 faf1 	bl	801a7a4 <iprintf>
    return ERR_VAL;
 80131c2:	f06f 0305 	mvn.w	r3, #5
 80131c6:	e109      	b.n	80133dc <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80131c8:	697b      	ldr	r3, [r7, #20]
 80131ca:	891b      	ldrh	r3, [r3, #8]
 80131cc:	887a      	ldrh	r2, [r7, #2]
 80131ce:	429a      	cmp	r2, r3
 80131d0:	d301      	bcc.n	80131d6 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80131d2:	2300      	movs	r3, #0
 80131d4:	e102      	b.n	80133dc <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80131d6:	687b      	ldr	r3, [r7, #4]
 80131d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80131da:	887a      	ldrh	r2, [r7, #2]
 80131dc:	429a      	cmp	r2, r3
 80131de:	d906      	bls.n	80131ee <tcp_split_unsent_seg+0x7e>
 80131e0:	4b80      	ldr	r3, [pc, #512]	; (80133e4 <tcp_split_unsent_seg+0x274>)
 80131e2:	f240 325b 	movw	r2, #859	; 0x35b
 80131e6:	4983      	ldr	r1, [pc, #524]	; (80133f4 <tcp_split_unsent_seg+0x284>)
 80131e8:	4880      	ldr	r0, [pc, #512]	; (80133ec <tcp_split_unsent_seg+0x27c>)
 80131ea:	f007 fadb 	bl	801a7a4 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80131ee:	697b      	ldr	r3, [r7, #20]
 80131f0:	891b      	ldrh	r3, [r3, #8]
 80131f2:	2b00      	cmp	r3, #0
 80131f4:	d106      	bne.n	8013204 <tcp_split_unsent_seg+0x94>
 80131f6:	4b7b      	ldr	r3, [pc, #492]	; (80133e4 <tcp_split_unsent_seg+0x274>)
 80131f8:	f44f 7257 	mov.w	r2, #860	; 0x35c
 80131fc:	497e      	ldr	r1, [pc, #504]	; (80133f8 <tcp_split_unsent_seg+0x288>)
 80131fe:	487b      	ldr	r0, [pc, #492]	; (80133ec <tcp_split_unsent_seg+0x27c>)
 8013200:	f007 fad0 	bl	801a7a4 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8013204:	697b      	ldr	r3, [r7, #20]
 8013206:	7a9b      	ldrb	r3, [r3, #10]
 8013208:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801320a:	7bfb      	ldrb	r3, [r7, #15]
 801320c:	009b      	lsls	r3, r3, #2
 801320e:	b2db      	uxtb	r3, r3
 8013210:	f003 0304 	and.w	r3, r3, #4
 8013214:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8013216:	697b      	ldr	r3, [r7, #20]
 8013218:	891a      	ldrh	r2, [r3, #8]
 801321a:	887b      	ldrh	r3, [r7, #2]
 801321c:	1ad3      	subs	r3, r2, r3
 801321e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8013220:	7bbb      	ldrb	r3, [r7, #14]
 8013222:	b29a      	uxth	r2, r3
 8013224:	89bb      	ldrh	r3, [r7, #12]
 8013226:	4413      	add	r3, r2
 8013228:	b29b      	uxth	r3, r3
 801322a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801322e:	4619      	mov	r1, r3
 8013230:	2036      	movs	r0, #54	; 0x36
 8013232:	f7fa fb4d 	bl	800d8d0 <pbuf_alloc>
 8013236:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013238:	693b      	ldr	r3, [r7, #16]
 801323a:	2b00      	cmp	r3, #0
 801323c:	f000 80b7 	beq.w	80133ae <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8013240:	697b      	ldr	r3, [r7, #20]
 8013242:	685b      	ldr	r3, [r3, #4]
 8013244:	891a      	ldrh	r2, [r3, #8]
 8013246:	697b      	ldr	r3, [r7, #20]
 8013248:	891b      	ldrh	r3, [r3, #8]
 801324a:	1ad3      	subs	r3, r2, r3
 801324c:	b29a      	uxth	r2, r3
 801324e:	887b      	ldrh	r3, [r7, #2]
 8013250:	4413      	add	r3, r2
 8013252:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8013254:	697b      	ldr	r3, [r7, #20]
 8013256:	6858      	ldr	r0, [r3, #4]
 8013258:	693b      	ldr	r3, [r7, #16]
 801325a:	685a      	ldr	r2, [r3, #4]
 801325c:	7bbb      	ldrb	r3, [r7, #14]
 801325e:	18d1      	adds	r1, r2, r3
 8013260:	897b      	ldrh	r3, [r7, #10]
 8013262:	89ba      	ldrh	r2, [r7, #12]
 8013264:	f7fb f81c 	bl	800e2a0 <pbuf_copy_partial>
 8013268:	4603      	mov	r3, r0
 801326a:	461a      	mov	r2, r3
 801326c:	89bb      	ldrh	r3, [r7, #12]
 801326e:	4293      	cmp	r3, r2
 8013270:	f040 809f 	bne.w	80133b2 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8013274:	697b      	ldr	r3, [r7, #20]
 8013276:	68db      	ldr	r3, [r3, #12]
 8013278:	899b      	ldrh	r3, [r3, #12]
 801327a:	b29b      	uxth	r3, r3
 801327c:	4618      	mov	r0, r3
 801327e:	f7f9 f9a7 	bl	800c5d0 <lwip_htons>
 8013282:	4603      	mov	r3, r0
 8013284:	b2db      	uxtb	r3, r3
 8013286:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801328a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801328c:	2300      	movs	r3, #0
 801328e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8013290:	7efb      	ldrb	r3, [r7, #27]
 8013292:	f003 0308 	and.w	r3, r3, #8
 8013296:	2b00      	cmp	r3, #0
 8013298:	d007      	beq.n	80132aa <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801329a:	7efb      	ldrb	r3, [r7, #27]
 801329c:	f023 0308 	bic.w	r3, r3, #8
 80132a0:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 80132a2:	7ebb      	ldrb	r3, [r7, #26]
 80132a4:	f043 0308 	orr.w	r3, r3, #8
 80132a8:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 80132aa:	7efb      	ldrb	r3, [r7, #27]
 80132ac:	f003 0301 	and.w	r3, r3, #1
 80132b0:	2b00      	cmp	r3, #0
 80132b2:	d007      	beq.n	80132c4 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80132b4:	7efb      	ldrb	r3, [r7, #27]
 80132b6:	f023 0301 	bic.w	r3, r3, #1
 80132ba:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 80132bc:	7ebb      	ldrb	r3, [r7, #26]
 80132be:	f043 0301 	orr.w	r3, r3, #1
 80132c2:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80132c4:	697b      	ldr	r3, [r7, #20]
 80132c6:	68db      	ldr	r3, [r3, #12]
 80132c8:	685b      	ldr	r3, [r3, #4]
 80132ca:	4618      	mov	r0, r3
 80132cc:	f7f9 f994 	bl	800c5f8 <lwip_htonl>
 80132d0:	4602      	mov	r2, r0
 80132d2:	887b      	ldrh	r3, [r7, #2]
 80132d4:	18d1      	adds	r1, r2, r3
 80132d6:	7eba      	ldrb	r2, [r7, #26]
 80132d8:	7bfb      	ldrb	r3, [r7, #15]
 80132da:	9300      	str	r3, [sp, #0]
 80132dc:	460b      	mov	r3, r1
 80132de:	6939      	ldr	r1, [r7, #16]
 80132e0:	6878      	ldr	r0, [r7, #4]
 80132e2:	f7ff fa4f 	bl	8012784 <tcp_create_segment>
 80132e6:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80132e8:	69fb      	ldr	r3, [r7, #28]
 80132ea:	2b00      	cmp	r3, #0
 80132ec:	d063      	beq.n	80133b6 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80132ee:	697b      	ldr	r3, [r7, #20]
 80132f0:	685b      	ldr	r3, [r3, #4]
 80132f2:	4618      	mov	r0, r3
 80132f4:	f7fa fe5e 	bl	800dfb4 <pbuf_clen>
 80132f8:	4603      	mov	r3, r0
 80132fa:	461a      	mov	r2, r3
 80132fc:	687b      	ldr	r3, [r7, #4]
 80132fe:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013302:	1a9b      	subs	r3, r3, r2
 8013304:	b29a      	uxth	r2, r3
 8013306:	687b      	ldr	r3, [r7, #4]
 8013308:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801330c:	697b      	ldr	r3, [r7, #20]
 801330e:	6858      	ldr	r0, [r3, #4]
 8013310:	697b      	ldr	r3, [r7, #20]
 8013312:	685b      	ldr	r3, [r3, #4]
 8013314:	891a      	ldrh	r2, [r3, #8]
 8013316:	89bb      	ldrh	r3, [r7, #12]
 8013318:	1ad3      	subs	r3, r2, r3
 801331a:	b29b      	uxth	r3, r3
 801331c:	4619      	mov	r1, r3
 801331e:	f7fa fc35 	bl	800db8c <pbuf_realloc>
  useg->len -= remainder;
 8013322:	697b      	ldr	r3, [r7, #20]
 8013324:	891a      	ldrh	r2, [r3, #8]
 8013326:	89bb      	ldrh	r3, [r7, #12]
 8013328:	1ad3      	subs	r3, r2, r3
 801332a:	b29a      	uxth	r2, r3
 801332c:	697b      	ldr	r3, [r7, #20]
 801332e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8013330:	697b      	ldr	r3, [r7, #20]
 8013332:	68db      	ldr	r3, [r3, #12]
 8013334:	899b      	ldrh	r3, [r3, #12]
 8013336:	b29c      	uxth	r4, r3
 8013338:	7efb      	ldrb	r3, [r7, #27]
 801333a:	b29b      	uxth	r3, r3
 801333c:	4618      	mov	r0, r3
 801333e:	f7f9 f947 	bl	800c5d0 <lwip_htons>
 8013342:	4603      	mov	r3, r0
 8013344:	461a      	mov	r2, r3
 8013346:	697b      	ldr	r3, [r7, #20]
 8013348:	68db      	ldr	r3, [r3, #12]
 801334a:	4322      	orrs	r2, r4
 801334c:	b292      	uxth	r2, r2
 801334e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8013350:	697b      	ldr	r3, [r7, #20]
 8013352:	685b      	ldr	r3, [r3, #4]
 8013354:	4618      	mov	r0, r3
 8013356:	f7fa fe2d 	bl	800dfb4 <pbuf_clen>
 801335a:	4603      	mov	r3, r0
 801335c:	461a      	mov	r2, r3
 801335e:	687b      	ldr	r3, [r7, #4]
 8013360:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013364:	4413      	add	r3, r2
 8013366:	b29a      	uxth	r2, r3
 8013368:	687b      	ldr	r3, [r7, #4]
 801336a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801336e:	69fb      	ldr	r3, [r7, #28]
 8013370:	685b      	ldr	r3, [r3, #4]
 8013372:	4618      	mov	r0, r3
 8013374:	f7fa fe1e 	bl	800dfb4 <pbuf_clen>
 8013378:	4603      	mov	r3, r0
 801337a:	461a      	mov	r2, r3
 801337c:	687b      	ldr	r3, [r7, #4]
 801337e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013382:	4413      	add	r3, r2
 8013384:	b29a      	uxth	r2, r3
 8013386:	687b      	ldr	r3, [r7, #4]
 8013388:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801338c:	697b      	ldr	r3, [r7, #20]
 801338e:	681a      	ldr	r2, [r3, #0]
 8013390:	69fb      	ldr	r3, [r7, #28]
 8013392:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8013394:	697b      	ldr	r3, [r7, #20]
 8013396:	69fa      	ldr	r2, [r7, #28]
 8013398:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801339a:	69fb      	ldr	r3, [r7, #28]
 801339c:	681b      	ldr	r3, [r3, #0]
 801339e:	2b00      	cmp	r3, #0
 80133a0:	d103      	bne.n	80133aa <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 80133a2:	687b      	ldr	r3, [r7, #4]
 80133a4:	2200      	movs	r2, #0
 80133a6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80133aa:	2300      	movs	r3, #0
 80133ac:	e016      	b.n	80133dc <tcp_split_unsent_seg+0x26c>
    goto memerr;
 80133ae:	bf00      	nop
 80133b0:	e002      	b.n	80133b8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80133b2:	bf00      	nop
 80133b4:	e000      	b.n	80133b8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80133b6:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80133b8:	69fb      	ldr	r3, [r7, #28]
 80133ba:	2b00      	cmp	r3, #0
 80133bc:	d006      	beq.n	80133cc <tcp_split_unsent_seg+0x25c>
 80133be:	4b09      	ldr	r3, [pc, #36]	; (80133e4 <tcp_split_unsent_seg+0x274>)
 80133c0:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 80133c4:	490d      	ldr	r1, [pc, #52]	; (80133fc <tcp_split_unsent_seg+0x28c>)
 80133c6:	4809      	ldr	r0, [pc, #36]	; (80133ec <tcp_split_unsent_seg+0x27c>)
 80133c8:	f007 f9ec 	bl	801a7a4 <iprintf>
  if (p != NULL) {
 80133cc:	693b      	ldr	r3, [r7, #16]
 80133ce:	2b00      	cmp	r3, #0
 80133d0:	d002      	beq.n	80133d8 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80133d2:	6938      	ldr	r0, [r7, #16]
 80133d4:	f7fa fd60 	bl	800de98 <pbuf_free>
  }

  return ERR_MEM;
 80133d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80133dc:	4618      	mov	r0, r3
 80133de:	3724      	adds	r7, #36	; 0x24
 80133e0:	46bd      	mov	sp, r7
 80133e2:	bd90      	pop	{r4, r7, pc}
 80133e4:	0801d318 	.word	0x0801d318
 80133e8:	0801d6ac 	.word	0x0801d6ac
 80133ec:	0801d36c 	.word	0x0801d36c
 80133f0:	0801d6d0 	.word	0x0801d6d0
 80133f4:	0801d6f4 	.word	0x0801d6f4
 80133f8:	0801d704 	.word	0x0801d704
 80133fc:	0801d714 	.word	0x0801d714

08013400 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8013400:	b590      	push	{r4, r7, lr}
 8013402:	b085      	sub	sp, #20
 8013404:	af00      	add	r7, sp, #0
 8013406:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8013408:	687b      	ldr	r3, [r7, #4]
 801340a:	2b00      	cmp	r3, #0
 801340c:	d106      	bne.n	801341c <tcp_send_fin+0x1c>
 801340e:	4b21      	ldr	r3, [pc, #132]	; (8013494 <tcp_send_fin+0x94>)
 8013410:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8013414:	4920      	ldr	r1, [pc, #128]	; (8013498 <tcp_send_fin+0x98>)
 8013416:	4821      	ldr	r0, [pc, #132]	; (801349c <tcp_send_fin+0x9c>)
 8013418:	f007 f9c4 	bl	801a7a4 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013420:	2b00      	cmp	r3, #0
 8013422:	d02e      	beq.n	8013482 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013424:	687b      	ldr	r3, [r7, #4]
 8013426:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013428:	60fb      	str	r3, [r7, #12]
 801342a:	e002      	b.n	8013432 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801342c:	68fb      	ldr	r3, [r7, #12]
 801342e:	681b      	ldr	r3, [r3, #0]
 8013430:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013432:	68fb      	ldr	r3, [r7, #12]
 8013434:	681b      	ldr	r3, [r3, #0]
 8013436:	2b00      	cmp	r3, #0
 8013438:	d1f8      	bne.n	801342c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801343a:	68fb      	ldr	r3, [r7, #12]
 801343c:	68db      	ldr	r3, [r3, #12]
 801343e:	899b      	ldrh	r3, [r3, #12]
 8013440:	b29b      	uxth	r3, r3
 8013442:	4618      	mov	r0, r3
 8013444:	f7f9 f8c4 	bl	800c5d0 <lwip_htons>
 8013448:	4603      	mov	r3, r0
 801344a:	b2db      	uxtb	r3, r3
 801344c:	f003 0307 	and.w	r3, r3, #7
 8013450:	2b00      	cmp	r3, #0
 8013452:	d116      	bne.n	8013482 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8013454:	68fb      	ldr	r3, [r7, #12]
 8013456:	68db      	ldr	r3, [r3, #12]
 8013458:	899b      	ldrh	r3, [r3, #12]
 801345a:	b29c      	uxth	r4, r3
 801345c:	2001      	movs	r0, #1
 801345e:	f7f9 f8b7 	bl	800c5d0 <lwip_htons>
 8013462:	4603      	mov	r3, r0
 8013464:	461a      	mov	r2, r3
 8013466:	68fb      	ldr	r3, [r7, #12]
 8013468:	68db      	ldr	r3, [r3, #12]
 801346a:	4322      	orrs	r2, r4
 801346c:	b292      	uxth	r2, r2
 801346e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8013470:	687b      	ldr	r3, [r7, #4]
 8013472:	8b5b      	ldrh	r3, [r3, #26]
 8013474:	f043 0320 	orr.w	r3, r3, #32
 8013478:	b29a      	uxth	r2, r3
 801347a:	687b      	ldr	r3, [r7, #4]
 801347c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801347e:	2300      	movs	r3, #0
 8013480:	e004      	b.n	801348c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8013482:	2101      	movs	r1, #1
 8013484:	6878      	ldr	r0, [r7, #4]
 8013486:	f000 f80b 	bl	80134a0 <tcp_enqueue_flags>
 801348a:	4603      	mov	r3, r0
}
 801348c:	4618      	mov	r0, r3
 801348e:	3714      	adds	r7, #20
 8013490:	46bd      	mov	sp, r7
 8013492:	bd90      	pop	{r4, r7, pc}
 8013494:	0801d318 	.word	0x0801d318
 8013498:	0801d720 	.word	0x0801d720
 801349c:	0801d36c 	.word	0x0801d36c

080134a0 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80134a0:	b580      	push	{r7, lr}
 80134a2:	b08a      	sub	sp, #40	; 0x28
 80134a4:	af02      	add	r7, sp, #8
 80134a6:	6078      	str	r0, [r7, #4]
 80134a8:	460b      	mov	r3, r1
 80134aa:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80134ac:	2300      	movs	r3, #0
 80134ae:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80134b0:	2300      	movs	r3, #0
 80134b2:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80134b4:	78fb      	ldrb	r3, [r7, #3]
 80134b6:	f003 0303 	and.w	r3, r3, #3
 80134ba:	2b00      	cmp	r3, #0
 80134bc:	d106      	bne.n	80134cc <tcp_enqueue_flags+0x2c>
 80134be:	4b67      	ldr	r3, [pc, #412]	; (801365c <tcp_enqueue_flags+0x1bc>)
 80134c0:	f240 4211 	movw	r2, #1041	; 0x411
 80134c4:	4966      	ldr	r1, [pc, #408]	; (8013660 <tcp_enqueue_flags+0x1c0>)
 80134c6:	4867      	ldr	r0, [pc, #412]	; (8013664 <tcp_enqueue_flags+0x1c4>)
 80134c8:	f007 f96c 	bl	801a7a4 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80134cc:	687b      	ldr	r3, [r7, #4]
 80134ce:	2b00      	cmp	r3, #0
 80134d0:	d106      	bne.n	80134e0 <tcp_enqueue_flags+0x40>
 80134d2:	4b62      	ldr	r3, [pc, #392]	; (801365c <tcp_enqueue_flags+0x1bc>)
 80134d4:	f240 4213 	movw	r2, #1043	; 0x413
 80134d8:	4963      	ldr	r1, [pc, #396]	; (8013668 <tcp_enqueue_flags+0x1c8>)
 80134da:	4862      	ldr	r0, [pc, #392]	; (8013664 <tcp_enqueue_flags+0x1c4>)
 80134dc:	f007 f962 	bl	801a7a4 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80134e0:	78fb      	ldrb	r3, [r7, #3]
 80134e2:	f003 0302 	and.w	r3, r3, #2
 80134e6:	2b00      	cmp	r3, #0
 80134e8:	d001      	beq.n	80134ee <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80134ea:	2301      	movs	r3, #1
 80134ec:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80134ee:	7ffb      	ldrb	r3, [r7, #31]
 80134f0:	009b      	lsls	r3, r3, #2
 80134f2:	b2db      	uxtb	r3, r3
 80134f4:	f003 0304 	and.w	r3, r3, #4
 80134f8:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80134fa:	7dfb      	ldrb	r3, [r7, #23]
 80134fc:	b29b      	uxth	r3, r3
 80134fe:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013502:	4619      	mov	r1, r3
 8013504:	2036      	movs	r0, #54	; 0x36
 8013506:	f7fa f9e3 	bl	800d8d0 <pbuf_alloc>
 801350a:	6138      	str	r0, [r7, #16]
 801350c:	693b      	ldr	r3, [r7, #16]
 801350e:	2b00      	cmp	r3, #0
 8013510:	d109      	bne.n	8013526 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013512:	687b      	ldr	r3, [r7, #4]
 8013514:	8b5b      	ldrh	r3, [r3, #26]
 8013516:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801351a:	b29a      	uxth	r2, r3
 801351c:	687b      	ldr	r3, [r7, #4]
 801351e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8013520:	f04f 33ff 	mov.w	r3, #4294967295
 8013524:	e095      	b.n	8013652 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8013526:	693b      	ldr	r3, [r7, #16]
 8013528:	895a      	ldrh	r2, [r3, #10]
 801352a:	7dfb      	ldrb	r3, [r7, #23]
 801352c:	b29b      	uxth	r3, r3
 801352e:	429a      	cmp	r2, r3
 8013530:	d206      	bcs.n	8013540 <tcp_enqueue_flags+0xa0>
 8013532:	4b4a      	ldr	r3, [pc, #296]	; (801365c <tcp_enqueue_flags+0x1bc>)
 8013534:	f240 4239 	movw	r2, #1081	; 0x439
 8013538:	494c      	ldr	r1, [pc, #304]	; (801366c <tcp_enqueue_flags+0x1cc>)
 801353a:	484a      	ldr	r0, [pc, #296]	; (8013664 <tcp_enqueue_flags+0x1c4>)
 801353c:	f007 f932 	bl	801a7a4 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8013540:	687b      	ldr	r3, [r7, #4]
 8013542:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8013544:	78fa      	ldrb	r2, [r7, #3]
 8013546:	7ffb      	ldrb	r3, [r7, #31]
 8013548:	9300      	str	r3, [sp, #0]
 801354a:	460b      	mov	r3, r1
 801354c:	6939      	ldr	r1, [r7, #16]
 801354e:	6878      	ldr	r0, [r7, #4]
 8013550:	f7ff f918 	bl	8012784 <tcp_create_segment>
 8013554:	60f8      	str	r0, [r7, #12]
 8013556:	68fb      	ldr	r3, [r7, #12]
 8013558:	2b00      	cmp	r3, #0
 801355a:	d109      	bne.n	8013570 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801355c:	687b      	ldr	r3, [r7, #4]
 801355e:	8b5b      	ldrh	r3, [r3, #26]
 8013560:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013564:	b29a      	uxth	r2, r3
 8013566:	687b      	ldr	r3, [r7, #4]
 8013568:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801356a:	f04f 33ff 	mov.w	r3, #4294967295
 801356e:	e070      	b.n	8013652 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8013570:	68fb      	ldr	r3, [r7, #12]
 8013572:	68db      	ldr	r3, [r3, #12]
 8013574:	f003 0303 	and.w	r3, r3, #3
 8013578:	2b00      	cmp	r3, #0
 801357a:	d006      	beq.n	801358a <tcp_enqueue_flags+0xea>
 801357c:	4b37      	ldr	r3, [pc, #220]	; (801365c <tcp_enqueue_flags+0x1bc>)
 801357e:	f240 4242 	movw	r2, #1090	; 0x442
 8013582:	493b      	ldr	r1, [pc, #236]	; (8013670 <tcp_enqueue_flags+0x1d0>)
 8013584:	4837      	ldr	r0, [pc, #220]	; (8013664 <tcp_enqueue_flags+0x1c4>)
 8013586:	f007 f90d 	bl	801a7a4 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801358a:	68fb      	ldr	r3, [r7, #12]
 801358c:	891b      	ldrh	r3, [r3, #8]
 801358e:	2b00      	cmp	r3, #0
 8013590:	d006      	beq.n	80135a0 <tcp_enqueue_flags+0x100>
 8013592:	4b32      	ldr	r3, [pc, #200]	; (801365c <tcp_enqueue_flags+0x1bc>)
 8013594:	f240 4243 	movw	r2, #1091	; 0x443
 8013598:	4936      	ldr	r1, [pc, #216]	; (8013674 <tcp_enqueue_flags+0x1d4>)
 801359a:	4832      	ldr	r0, [pc, #200]	; (8013664 <tcp_enqueue_flags+0x1c4>)
 801359c:	f007 f902 	bl	801a7a4 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80135a0:	687b      	ldr	r3, [r7, #4]
 80135a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80135a4:	2b00      	cmp	r3, #0
 80135a6:	d103      	bne.n	80135b0 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80135a8:	687b      	ldr	r3, [r7, #4]
 80135aa:	68fa      	ldr	r2, [r7, #12]
 80135ac:	66da      	str	r2, [r3, #108]	; 0x6c
 80135ae:	e00d      	b.n	80135cc <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80135b0:	687b      	ldr	r3, [r7, #4]
 80135b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80135b4:	61bb      	str	r3, [r7, #24]
 80135b6:	e002      	b.n	80135be <tcp_enqueue_flags+0x11e>
 80135b8:	69bb      	ldr	r3, [r7, #24]
 80135ba:	681b      	ldr	r3, [r3, #0]
 80135bc:	61bb      	str	r3, [r7, #24]
 80135be:	69bb      	ldr	r3, [r7, #24]
 80135c0:	681b      	ldr	r3, [r3, #0]
 80135c2:	2b00      	cmp	r3, #0
 80135c4:	d1f8      	bne.n	80135b8 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 80135c6:	69bb      	ldr	r3, [r7, #24]
 80135c8:	68fa      	ldr	r2, [r7, #12]
 80135ca:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80135cc:	687b      	ldr	r3, [r7, #4]
 80135ce:	2200      	movs	r2, #0
 80135d0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80135d4:	78fb      	ldrb	r3, [r7, #3]
 80135d6:	f003 0302 	and.w	r3, r3, #2
 80135da:	2b00      	cmp	r3, #0
 80135dc:	d104      	bne.n	80135e8 <tcp_enqueue_flags+0x148>
 80135de:	78fb      	ldrb	r3, [r7, #3]
 80135e0:	f003 0301 	and.w	r3, r3, #1
 80135e4:	2b00      	cmp	r3, #0
 80135e6:	d004      	beq.n	80135f2 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 80135e8:	687b      	ldr	r3, [r7, #4]
 80135ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80135ec:	1c5a      	adds	r2, r3, #1
 80135ee:	687b      	ldr	r3, [r7, #4]
 80135f0:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80135f2:	78fb      	ldrb	r3, [r7, #3]
 80135f4:	f003 0301 	and.w	r3, r3, #1
 80135f8:	2b00      	cmp	r3, #0
 80135fa:	d006      	beq.n	801360a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 80135fc:	687b      	ldr	r3, [r7, #4]
 80135fe:	8b5b      	ldrh	r3, [r3, #26]
 8013600:	f043 0320 	orr.w	r3, r3, #32
 8013604:	b29a      	uxth	r2, r3
 8013606:	687b      	ldr	r3, [r7, #4]
 8013608:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801360a:	68fb      	ldr	r3, [r7, #12]
 801360c:	685b      	ldr	r3, [r3, #4]
 801360e:	4618      	mov	r0, r3
 8013610:	f7fa fcd0 	bl	800dfb4 <pbuf_clen>
 8013614:	4603      	mov	r3, r0
 8013616:	461a      	mov	r2, r3
 8013618:	687b      	ldr	r3, [r7, #4]
 801361a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801361e:	4413      	add	r3, r2
 8013620:	b29a      	uxth	r2, r3
 8013622:	687b      	ldr	r3, [r7, #4]
 8013624:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8013628:	687b      	ldr	r3, [r7, #4]
 801362a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801362e:	2b00      	cmp	r3, #0
 8013630:	d00e      	beq.n	8013650 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8013632:	687b      	ldr	r3, [r7, #4]
 8013634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013636:	2b00      	cmp	r3, #0
 8013638:	d10a      	bne.n	8013650 <tcp_enqueue_flags+0x1b0>
 801363a:	687b      	ldr	r3, [r7, #4]
 801363c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801363e:	2b00      	cmp	r3, #0
 8013640:	d106      	bne.n	8013650 <tcp_enqueue_flags+0x1b0>
 8013642:	4b06      	ldr	r3, [pc, #24]	; (801365c <tcp_enqueue_flags+0x1bc>)
 8013644:	f240 4265 	movw	r2, #1125	; 0x465
 8013648:	490b      	ldr	r1, [pc, #44]	; (8013678 <tcp_enqueue_flags+0x1d8>)
 801364a:	4806      	ldr	r0, [pc, #24]	; (8013664 <tcp_enqueue_flags+0x1c4>)
 801364c:	f007 f8aa 	bl	801a7a4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8013650:	2300      	movs	r3, #0
}
 8013652:	4618      	mov	r0, r3
 8013654:	3720      	adds	r7, #32
 8013656:	46bd      	mov	sp, r7
 8013658:	bd80      	pop	{r7, pc}
 801365a:	bf00      	nop
 801365c:	0801d318 	.word	0x0801d318
 8013660:	0801d73c 	.word	0x0801d73c
 8013664:	0801d36c 	.word	0x0801d36c
 8013668:	0801d794 	.word	0x0801d794
 801366c:	0801d7b4 	.word	0x0801d7b4
 8013670:	0801d7f0 	.word	0x0801d7f0
 8013674:	0801d808 	.word	0x0801d808
 8013678:	0801d834 	.word	0x0801d834

0801367c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801367c:	b5b0      	push	{r4, r5, r7, lr}
 801367e:	b08a      	sub	sp, #40	; 0x28
 8013680:	af00      	add	r7, sp, #0
 8013682:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8013684:	687b      	ldr	r3, [r7, #4]
 8013686:	2b00      	cmp	r3, #0
 8013688:	d106      	bne.n	8013698 <tcp_output+0x1c>
 801368a:	4b8a      	ldr	r3, [pc, #552]	; (80138b4 <tcp_output+0x238>)
 801368c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8013690:	4989      	ldr	r1, [pc, #548]	; (80138b8 <tcp_output+0x23c>)
 8013692:	488a      	ldr	r0, [pc, #552]	; (80138bc <tcp_output+0x240>)
 8013694:	f007 f886 	bl	801a7a4 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8013698:	687b      	ldr	r3, [r7, #4]
 801369a:	7d1b      	ldrb	r3, [r3, #20]
 801369c:	2b01      	cmp	r3, #1
 801369e:	d106      	bne.n	80136ae <tcp_output+0x32>
 80136a0:	4b84      	ldr	r3, [pc, #528]	; (80138b4 <tcp_output+0x238>)
 80136a2:	f240 42e3 	movw	r2, #1251	; 0x4e3
 80136a6:	4986      	ldr	r1, [pc, #536]	; (80138c0 <tcp_output+0x244>)
 80136a8:	4884      	ldr	r0, [pc, #528]	; (80138bc <tcp_output+0x240>)
 80136aa:	f007 f87b 	bl	801a7a4 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80136ae:	4b85      	ldr	r3, [pc, #532]	; (80138c4 <tcp_output+0x248>)
 80136b0:	681b      	ldr	r3, [r3, #0]
 80136b2:	687a      	ldr	r2, [r7, #4]
 80136b4:	429a      	cmp	r2, r3
 80136b6:	d101      	bne.n	80136bc <tcp_output+0x40>
    return ERR_OK;
 80136b8:	2300      	movs	r3, #0
 80136ba:	e1ce      	b.n	8013a5a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80136bc:	687b      	ldr	r3, [r7, #4]
 80136be:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80136c2:	687b      	ldr	r3, [r7, #4]
 80136c4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80136c8:	4293      	cmp	r3, r2
 80136ca:	bf28      	it	cs
 80136cc:	4613      	movcs	r3, r2
 80136ce:	b29b      	uxth	r3, r3
 80136d0:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80136d6:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 80136d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136da:	2b00      	cmp	r3, #0
 80136dc:	d10b      	bne.n	80136f6 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 80136de:	687b      	ldr	r3, [r7, #4]
 80136e0:	8b5b      	ldrh	r3, [r3, #26]
 80136e2:	f003 0302 	and.w	r3, r3, #2
 80136e6:	2b00      	cmp	r3, #0
 80136e8:	f000 81aa 	beq.w	8013a40 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 80136ec:	6878      	ldr	r0, [r7, #4]
 80136ee:	f000 fdcb 	bl	8014288 <tcp_send_empty_ack>
 80136f2:	4603      	mov	r3, r0
 80136f4:	e1b1      	b.n	8013a5a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 80136f6:	6879      	ldr	r1, [r7, #4]
 80136f8:	687b      	ldr	r3, [r7, #4]
 80136fa:	3304      	adds	r3, #4
 80136fc:	461a      	mov	r2, r3
 80136fe:	6878      	ldr	r0, [r7, #4]
 8013700:	f7ff f824 	bl	801274c <tcp_route>
 8013704:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8013706:	697b      	ldr	r3, [r7, #20]
 8013708:	2b00      	cmp	r3, #0
 801370a:	d102      	bne.n	8013712 <tcp_output+0x96>
    return ERR_RTE;
 801370c:	f06f 0303 	mvn.w	r3, #3
 8013710:	e1a3      	b.n	8013a5a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8013712:	687b      	ldr	r3, [r7, #4]
 8013714:	2b00      	cmp	r3, #0
 8013716:	d003      	beq.n	8013720 <tcp_output+0xa4>
 8013718:	687b      	ldr	r3, [r7, #4]
 801371a:	681b      	ldr	r3, [r3, #0]
 801371c:	2b00      	cmp	r3, #0
 801371e:	d111      	bne.n	8013744 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8013720:	697b      	ldr	r3, [r7, #20]
 8013722:	2b00      	cmp	r3, #0
 8013724:	d002      	beq.n	801372c <tcp_output+0xb0>
 8013726:	697b      	ldr	r3, [r7, #20]
 8013728:	3304      	adds	r3, #4
 801372a:	e000      	b.n	801372e <tcp_output+0xb2>
 801372c:	2300      	movs	r3, #0
 801372e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8013730:	693b      	ldr	r3, [r7, #16]
 8013732:	2b00      	cmp	r3, #0
 8013734:	d102      	bne.n	801373c <tcp_output+0xc0>
      return ERR_RTE;
 8013736:	f06f 0303 	mvn.w	r3, #3
 801373a:	e18e      	b.n	8013a5a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801373c:	693b      	ldr	r3, [r7, #16]
 801373e:	681a      	ldr	r2, [r3, #0]
 8013740:	687b      	ldr	r3, [r7, #4]
 8013742:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8013744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013746:	68db      	ldr	r3, [r3, #12]
 8013748:	685b      	ldr	r3, [r3, #4]
 801374a:	4618      	mov	r0, r3
 801374c:	f7f8 ff54 	bl	800c5f8 <lwip_htonl>
 8013750:	4602      	mov	r2, r0
 8013752:	687b      	ldr	r3, [r7, #4]
 8013754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013756:	1ad3      	subs	r3, r2, r3
 8013758:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801375a:	8912      	ldrh	r2, [r2, #8]
 801375c:	4413      	add	r3, r2
 801375e:	69ba      	ldr	r2, [r7, #24]
 8013760:	429a      	cmp	r2, r3
 8013762:	d227      	bcs.n	80137b4 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8013764:	687b      	ldr	r3, [r7, #4]
 8013766:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801376a:	461a      	mov	r2, r3
 801376c:	69bb      	ldr	r3, [r7, #24]
 801376e:	4293      	cmp	r3, r2
 8013770:	d114      	bne.n	801379c <tcp_output+0x120>
 8013772:	687b      	ldr	r3, [r7, #4]
 8013774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013776:	2b00      	cmp	r3, #0
 8013778:	d110      	bne.n	801379c <tcp_output+0x120>
 801377a:	687b      	ldr	r3, [r7, #4]
 801377c:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8013780:	2b00      	cmp	r3, #0
 8013782:	d10b      	bne.n	801379c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	2200      	movs	r2, #0
 8013788:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 801378c:	687b      	ldr	r3, [r7, #4]
 801378e:	2201      	movs	r2, #1
 8013790:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8013794:	687b      	ldr	r3, [r7, #4]
 8013796:	2200      	movs	r2, #0
 8013798:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801379c:	687b      	ldr	r3, [r7, #4]
 801379e:	8b5b      	ldrh	r3, [r3, #26]
 80137a0:	f003 0302 	and.w	r3, r3, #2
 80137a4:	2b00      	cmp	r3, #0
 80137a6:	f000 814d 	beq.w	8013a44 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 80137aa:	6878      	ldr	r0, [r7, #4]
 80137ac:	f000 fd6c 	bl	8014288 <tcp_send_empty_ack>
 80137b0:	4603      	mov	r3, r0
 80137b2:	e152      	b.n	8013a5a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 80137b4:	687b      	ldr	r3, [r7, #4]
 80137b6:	2200      	movs	r2, #0
 80137b8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80137bc:	687b      	ldr	r3, [r7, #4]
 80137be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80137c0:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80137c2:	6a3b      	ldr	r3, [r7, #32]
 80137c4:	2b00      	cmp	r3, #0
 80137c6:	f000 811c 	beq.w	8013a02 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 80137ca:	e002      	b.n	80137d2 <tcp_output+0x156>
 80137cc:	6a3b      	ldr	r3, [r7, #32]
 80137ce:	681b      	ldr	r3, [r3, #0]
 80137d0:	623b      	str	r3, [r7, #32]
 80137d2:	6a3b      	ldr	r3, [r7, #32]
 80137d4:	681b      	ldr	r3, [r3, #0]
 80137d6:	2b00      	cmp	r3, #0
 80137d8:	d1f8      	bne.n	80137cc <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 80137da:	e112      	b.n	8013a02 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80137dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137de:	68db      	ldr	r3, [r3, #12]
 80137e0:	899b      	ldrh	r3, [r3, #12]
 80137e2:	b29b      	uxth	r3, r3
 80137e4:	4618      	mov	r0, r3
 80137e6:	f7f8 fef3 	bl	800c5d0 <lwip_htons>
 80137ea:	4603      	mov	r3, r0
 80137ec:	b2db      	uxtb	r3, r3
 80137ee:	f003 0304 	and.w	r3, r3, #4
 80137f2:	2b00      	cmp	r3, #0
 80137f4:	d006      	beq.n	8013804 <tcp_output+0x188>
 80137f6:	4b2f      	ldr	r3, [pc, #188]	; (80138b4 <tcp_output+0x238>)
 80137f8:	f240 5236 	movw	r2, #1334	; 0x536
 80137fc:	4932      	ldr	r1, [pc, #200]	; (80138c8 <tcp_output+0x24c>)
 80137fe:	482f      	ldr	r0, [pc, #188]	; (80138bc <tcp_output+0x240>)
 8013800:	f006 ffd0 	bl	801a7a4 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8013804:	687b      	ldr	r3, [r7, #4]
 8013806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013808:	2b00      	cmp	r3, #0
 801380a:	d01f      	beq.n	801384c <tcp_output+0x1d0>
 801380c:	687b      	ldr	r3, [r7, #4]
 801380e:	8b5b      	ldrh	r3, [r3, #26]
 8013810:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8013814:	2b00      	cmp	r3, #0
 8013816:	d119      	bne.n	801384c <tcp_output+0x1d0>
 8013818:	687b      	ldr	r3, [r7, #4]
 801381a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801381c:	2b00      	cmp	r3, #0
 801381e:	d00b      	beq.n	8013838 <tcp_output+0x1bc>
 8013820:	687b      	ldr	r3, [r7, #4]
 8013822:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013824:	681b      	ldr	r3, [r3, #0]
 8013826:	2b00      	cmp	r3, #0
 8013828:	d110      	bne.n	801384c <tcp_output+0x1d0>
 801382a:	687b      	ldr	r3, [r7, #4]
 801382c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801382e:	891a      	ldrh	r2, [r3, #8]
 8013830:	687b      	ldr	r3, [r7, #4]
 8013832:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013834:	429a      	cmp	r2, r3
 8013836:	d209      	bcs.n	801384c <tcp_output+0x1d0>
 8013838:	687b      	ldr	r3, [r7, #4]
 801383a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801383e:	2b00      	cmp	r3, #0
 8013840:	d004      	beq.n	801384c <tcp_output+0x1d0>
 8013842:	687b      	ldr	r3, [r7, #4]
 8013844:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013848:	2b08      	cmp	r3, #8
 801384a:	d901      	bls.n	8013850 <tcp_output+0x1d4>
 801384c:	2301      	movs	r3, #1
 801384e:	e000      	b.n	8013852 <tcp_output+0x1d6>
 8013850:	2300      	movs	r3, #0
 8013852:	2b00      	cmp	r3, #0
 8013854:	d106      	bne.n	8013864 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8013856:	687b      	ldr	r3, [r7, #4]
 8013858:	8b5b      	ldrh	r3, [r3, #26]
 801385a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801385e:	2b00      	cmp	r3, #0
 8013860:	f000 80e4 	beq.w	8013a2c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	7d1b      	ldrb	r3, [r3, #20]
 8013868:	2b02      	cmp	r3, #2
 801386a:	d00d      	beq.n	8013888 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801386c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801386e:	68db      	ldr	r3, [r3, #12]
 8013870:	899b      	ldrh	r3, [r3, #12]
 8013872:	b29c      	uxth	r4, r3
 8013874:	2010      	movs	r0, #16
 8013876:	f7f8 feab 	bl	800c5d0 <lwip_htons>
 801387a:	4603      	mov	r3, r0
 801387c:	461a      	mov	r2, r3
 801387e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013880:	68db      	ldr	r3, [r3, #12]
 8013882:	4322      	orrs	r2, r4
 8013884:	b292      	uxth	r2, r2
 8013886:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8013888:	697a      	ldr	r2, [r7, #20]
 801388a:	6879      	ldr	r1, [r7, #4]
 801388c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801388e:	f000 f909 	bl	8013aa4 <tcp_output_segment>
 8013892:	4603      	mov	r3, r0
 8013894:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8013896:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801389a:	2b00      	cmp	r3, #0
 801389c:	d016      	beq.n	80138cc <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801389e:	687b      	ldr	r3, [r7, #4]
 80138a0:	8b5b      	ldrh	r3, [r3, #26]
 80138a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80138a6:	b29a      	uxth	r2, r3
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	835a      	strh	r2, [r3, #26]
      return err;
 80138ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80138b0:	e0d3      	b.n	8013a5a <tcp_output+0x3de>
 80138b2:	bf00      	nop
 80138b4:	0801d318 	.word	0x0801d318
 80138b8:	0801d85c 	.word	0x0801d85c
 80138bc:	0801d36c 	.word	0x0801d36c
 80138c0:	0801d874 	.word	0x0801d874
 80138c4:	2000bf6c 	.word	0x2000bf6c
 80138c8:	0801d89c 	.word	0x0801d89c
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 80138cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138ce:	681a      	ldr	r2, [r3, #0]
 80138d0:	687b      	ldr	r3, [r7, #4]
 80138d2:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 80138d4:	687b      	ldr	r3, [r7, #4]
 80138d6:	7d1b      	ldrb	r3, [r3, #20]
 80138d8:	2b02      	cmp	r3, #2
 80138da:	d006      	beq.n	80138ea <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80138dc:	687b      	ldr	r3, [r7, #4]
 80138de:	8b5b      	ldrh	r3, [r3, #26]
 80138e0:	f023 0303 	bic.w	r3, r3, #3
 80138e4:	b29a      	uxth	r2, r3
 80138e6:	687b      	ldr	r3, [r7, #4]
 80138e8:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80138ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138ec:	68db      	ldr	r3, [r3, #12]
 80138ee:	685b      	ldr	r3, [r3, #4]
 80138f0:	4618      	mov	r0, r3
 80138f2:	f7f8 fe81 	bl	800c5f8 <lwip_htonl>
 80138f6:	4604      	mov	r4, r0
 80138f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138fa:	891b      	ldrh	r3, [r3, #8]
 80138fc:	461d      	mov	r5, r3
 80138fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013900:	68db      	ldr	r3, [r3, #12]
 8013902:	899b      	ldrh	r3, [r3, #12]
 8013904:	b29b      	uxth	r3, r3
 8013906:	4618      	mov	r0, r3
 8013908:	f7f8 fe62 	bl	800c5d0 <lwip_htons>
 801390c:	4603      	mov	r3, r0
 801390e:	b2db      	uxtb	r3, r3
 8013910:	f003 0303 	and.w	r3, r3, #3
 8013914:	2b00      	cmp	r3, #0
 8013916:	d001      	beq.n	801391c <tcp_output+0x2a0>
 8013918:	2301      	movs	r3, #1
 801391a:	e000      	b.n	801391e <tcp_output+0x2a2>
 801391c:	2300      	movs	r3, #0
 801391e:	442b      	add	r3, r5
 8013920:	4423      	add	r3, r4
 8013922:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8013924:	687b      	ldr	r3, [r7, #4]
 8013926:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013928:	68bb      	ldr	r3, [r7, #8]
 801392a:	1ad3      	subs	r3, r2, r3
 801392c:	2b00      	cmp	r3, #0
 801392e:	da02      	bge.n	8013936 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8013930:	687b      	ldr	r3, [r7, #4]
 8013932:	68ba      	ldr	r2, [r7, #8]
 8013934:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8013936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013938:	891b      	ldrh	r3, [r3, #8]
 801393a:	461c      	mov	r4, r3
 801393c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801393e:	68db      	ldr	r3, [r3, #12]
 8013940:	899b      	ldrh	r3, [r3, #12]
 8013942:	b29b      	uxth	r3, r3
 8013944:	4618      	mov	r0, r3
 8013946:	f7f8 fe43 	bl	800c5d0 <lwip_htons>
 801394a:	4603      	mov	r3, r0
 801394c:	b2db      	uxtb	r3, r3
 801394e:	f003 0303 	and.w	r3, r3, #3
 8013952:	2b00      	cmp	r3, #0
 8013954:	d001      	beq.n	801395a <tcp_output+0x2de>
 8013956:	2301      	movs	r3, #1
 8013958:	e000      	b.n	801395c <tcp_output+0x2e0>
 801395a:	2300      	movs	r3, #0
 801395c:	4423      	add	r3, r4
 801395e:	2b00      	cmp	r3, #0
 8013960:	d049      	beq.n	80139f6 <tcp_output+0x37a>
      seg->next = NULL;
 8013962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013964:	2200      	movs	r2, #0
 8013966:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8013968:	687b      	ldr	r3, [r7, #4]
 801396a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801396c:	2b00      	cmp	r3, #0
 801396e:	d105      	bne.n	801397c <tcp_output+0x300>
        pcb->unacked = seg;
 8013970:	687b      	ldr	r3, [r7, #4]
 8013972:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013974:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8013976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013978:	623b      	str	r3, [r7, #32]
 801397a:	e03f      	b.n	80139fc <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801397c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801397e:	68db      	ldr	r3, [r3, #12]
 8013980:	685b      	ldr	r3, [r3, #4]
 8013982:	4618      	mov	r0, r3
 8013984:	f7f8 fe38 	bl	800c5f8 <lwip_htonl>
 8013988:	4604      	mov	r4, r0
 801398a:	6a3b      	ldr	r3, [r7, #32]
 801398c:	68db      	ldr	r3, [r3, #12]
 801398e:	685b      	ldr	r3, [r3, #4]
 8013990:	4618      	mov	r0, r3
 8013992:	f7f8 fe31 	bl	800c5f8 <lwip_htonl>
 8013996:	4603      	mov	r3, r0
 8013998:	1ae3      	subs	r3, r4, r3
 801399a:	2b00      	cmp	r3, #0
 801399c:	da24      	bge.n	80139e8 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801399e:	687b      	ldr	r3, [r7, #4]
 80139a0:	3370      	adds	r3, #112	; 0x70
 80139a2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80139a4:	e002      	b.n	80139ac <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80139a6:	69fb      	ldr	r3, [r7, #28]
 80139a8:	681b      	ldr	r3, [r3, #0]
 80139aa:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80139ac:	69fb      	ldr	r3, [r7, #28]
 80139ae:	681b      	ldr	r3, [r3, #0]
 80139b0:	2b00      	cmp	r3, #0
 80139b2:	d011      	beq.n	80139d8 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80139b4:	69fb      	ldr	r3, [r7, #28]
 80139b6:	681b      	ldr	r3, [r3, #0]
 80139b8:	68db      	ldr	r3, [r3, #12]
 80139ba:	685b      	ldr	r3, [r3, #4]
 80139bc:	4618      	mov	r0, r3
 80139be:	f7f8 fe1b 	bl	800c5f8 <lwip_htonl>
 80139c2:	4604      	mov	r4, r0
 80139c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139c6:	68db      	ldr	r3, [r3, #12]
 80139c8:	685b      	ldr	r3, [r3, #4]
 80139ca:	4618      	mov	r0, r3
 80139cc:	f7f8 fe14 	bl	800c5f8 <lwip_htonl>
 80139d0:	4603      	mov	r3, r0
 80139d2:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80139d4:	2b00      	cmp	r3, #0
 80139d6:	dbe6      	blt.n	80139a6 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 80139d8:	69fb      	ldr	r3, [r7, #28]
 80139da:	681a      	ldr	r2, [r3, #0]
 80139dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139de:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80139e0:	69fb      	ldr	r3, [r7, #28]
 80139e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80139e4:	601a      	str	r2, [r3, #0]
 80139e6:	e009      	b.n	80139fc <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80139e8:	6a3b      	ldr	r3, [r7, #32]
 80139ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80139ec:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80139ee:	6a3b      	ldr	r3, [r7, #32]
 80139f0:	681b      	ldr	r3, [r3, #0]
 80139f2:	623b      	str	r3, [r7, #32]
 80139f4:	e002      	b.n	80139fc <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80139f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80139f8:	f7fb ff33 	bl	800f862 <tcp_seg_free>
    }
    seg = pcb->unsent;
 80139fc:	687b      	ldr	r3, [r7, #4]
 80139fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013a00:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8013a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a04:	2b00      	cmp	r3, #0
 8013a06:	d012      	beq.n	8013a2e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8013a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a0a:	68db      	ldr	r3, [r3, #12]
 8013a0c:	685b      	ldr	r3, [r3, #4]
 8013a0e:	4618      	mov	r0, r3
 8013a10:	f7f8 fdf2 	bl	800c5f8 <lwip_htonl>
 8013a14:	4602      	mov	r2, r0
 8013a16:	687b      	ldr	r3, [r7, #4]
 8013a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013a1a:	1ad3      	subs	r3, r2, r3
 8013a1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013a1e:	8912      	ldrh	r2, [r2, #8]
 8013a20:	4413      	add	r3, r2
  while (seg != NULL &&
 8013a22:	69ba      	ldr	r2, [r7, #24]
 8013a24:	429a      	cmp	r2, r3
 8013a26:	f4bf aed9 	bcs.w	80137dc <tcp_output+0x160>
 8013a2a:	e000      	b.n	8013a2e <tcp_output+0x3b2>
      break;
 8013a2c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8013a2e:	687b      	ldr	r3, [r7, #4]
 8013a30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013a32:	2b00      	cmp	r3, #0
 8013a34:	d108      	bne.n	8013a48 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8013a36:	687b      	ldr	r3, [r7, #4]
 8013a38:	2200      	movs	r2, #0
 8013a3a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8013a3e:	e004      	b.n	8013a4a <tcp_output+0x3ce>
    goto output_done;
 8013a40:	bf00      	nop
 8013a42:	e002      	b.n	8013a4a <tcp_output+0x3ce>
    goto output_done;
 8013a44:	bf00      	nop
 8013a46:	e000      	b.n	8013a4a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8013a48:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8013a4a:	687b      	ldr	r3, [r7, #4]
 8013a4c:	8b5b      	ldrh	r3, [r3, #26]
 8013a4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013a52:	b29a      	uxth	r2, r3
 8013a54:	687b      	ldr	r3, [r7, #4]
 8013a56:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8013a58:	2300      	movs	r3, #0
}
 8013a5a:	4618      	mov	r0, r3
 8013a5c:	3728      	adds	r7, #40	; 0x28
 8013a5e:	46bd      	mov	sp, r7
 8013a60:	bdb0      	pop	{r4, r5, r7, pc}
 8013a62:	bf00      	nop

08013a64 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8013a64:	b580      	push	{r7, lr}
 8013a66:	b082      	sub	sp, #8
 8013a68:	af00      	add	r7, sp, #0
 8013a6a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8013a6c:	687b      	ldr	r3, [r7, #4]
 8013a6e:	2b00      	cmp	r3, #0
 8013a70:	d106      	bne.n	8013a80 <tcp_output_segment_busy+0x1c>
 8013a72:	4b09      	ldr	r3, [pc, #36]	; (8013a98 <tcp_output_segment_busy+0x34>)
 8013a74:	f240 529a 	movw	r2, #1434	; 0x59a
 8013a78:	4908      	ldr	r1, [pc, #32]	; (8013a9c <tcp_output_segment_busy+0x38>)
 8013a7a:	4809      	ldr	r0, [pc, #36]	; (8013aa0 <tcp_output_segment_busy+0x3c>)
 8013a7c:	f006 fe92 	bl	801a7a4 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8013a80:	687b      	ldr	r3, [r7, #4]
 8013a82:	685b      	ldr	r3, [r3, #4]
 8013a84:	7b9b      	ldrb	r3, [r3, #14]
 8013a86:	2b01      	cmp	r3, #1
 8013a88:	d001      	beq.n	8013a8e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8013a8a:	2301      	movs	r3, #1
 8013a8c:	e000      	b.n	8013a90 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8013a8e:	2300      	movs	r3, #0
}
 8013a90:	4618      	mov	r0, r3
 8013a92:	3708      	adds	r7, #8
 8013a94:	46bd      	mov	sp, r7
 8013a96:	bd80      	pop	{r7, pc}
 8013a98:	0801d318 	.word	0x0801d318
 8013a9c:	0801d8b4 	.word	0x0801d8b4
 8013aa0:	0801d36c 	.word	0x0801d36c

08013aa4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8013aa4:	b5b0      	push	{r4, r5, r7, lr}
 8013aa6:	b08c      	sub	sp, #48	; 0x30
 8013aa8:	af04      	add	r7, sp, #16
 8013aaa:	60f8      	str	r0, [r7, #12]
 8013aac:	60b9      	str	r1, [r7, #8]
 8013aae:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8013ab0:	68fb      	ldr	r3, [r7, #12]
 8013ab2:	2b00      	cmp	r3, #0
 8013ab4:	d106      	bne.n	8013ac4 <tcp_output_segment+0x20>
 8013ab6:	4b63      	ldr	r3, [pc, #396]	; (8013c44 <tcp_output_segment+0x1a0>)
 8013ab8:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8013abc:	4962      	ldr	r1, [pc, #392]	; (8013c48 <tcp_output_segment+0x1a4>)
 8013abe:	4863      	ldr	r0, [pc, #396]	; (8013c4c <tcp_output_segment+0x1a8>)
 8013ac0:	f006 fe70 	bl	801a7a4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8013ac4:	68bb      	ldr	r3, [r7, #8]
 8013ac6:	2b00      	cmp	r3, #0
 8013ac8:	d106      	bne.n	8013ad8 <tcp_output_segment+0x34>
 8013aca:	4b5e      	ldr	r3, [pc, #376]	; (8013c44 <tcp_output_segment+0x1a0>)
 8013acc:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8013ad0:	495f      	ldr	r1, [pc, #380]	; (8013c50 <tcp_output_segment+0x1ac>)
 8013ad2:	485e      	ldr	r0, [pc, #376]	; (8013c4c <tcp_output_segment+0x1a8>)
 8013ad4:	f006 fe66 	bl	801a7a4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8013ad8:	687b      	ldr	r3, [r7, #4]
 8013ada:	2b00      	cmp	r3, #0
 8013adc:	d106      	bne.n	8013aec <tcp_output_segment+0x48>
 8013ade:	4b59      	ldr	r3, [pc, #356]	; (8013c44 <tcp_output_segment+0x1a0>)
 8013ae0:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8013ae4:	495b      	ldr	r1, [pc, #364]	; (8013c54 <tcp_output_segment+0x1b0>)
 8013ae6:	4859      	ldr	r0, [pc, #356]	; (8013c4c <tcp_output_segment+0x1a8>)
 8013ae8:	f006 fe5c 	bl	801a7a4 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8013aec:	68f8      	ldr	r0, [r7, #12]
 8013aee:	f7ff ffb9 	bl	8013a64 <tcp_output_segment_busy>
 8013af2:	4603      	mov	r3, r0
 8013af4:	2b00      	cmp	r3, #0
 8013af6:	d001      	beq.n	8013afc <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8013af8:	2300      	movs	r3, #0
 8013afa:	e09f      	b.n	8013c3c <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8013afc:	68bb      	ldr	r3, [r7, #8]
 8013afe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013b00:	68fb      	ldr	r3, [r7, #12]
 8013b02:	68dc      	ldr	r4, [r3, #12]
 8013b04:	4610      	mov	r0, r2
 8013b06:	f7f8 fd77 	bl	800c5f8 <lwip_htonl>
 8013b0a:	4603      	mov	r3, r0
 8013b0c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8013b0e:	68bb      	ldr	r3, [r7, #8]
 8013b10:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8013b12:	68fb      	ldr	r3, [r7, #12]
 8013b14:	68dc      	ldr	r4, [r3, #12]
 8013b16:	4610      	mov	r0, r2
 8013b18:	f7f8 fd5a 	bl	800c5d0 <lwip_htons>
 8013b1c:	4603      	mov	r3, r0
 8013b1e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8013b20:	68bb      	ldr	r3, [r7, #8]
 8013b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013b24:	68ba      	ldr	r2, [r7, #8]
 8013b26:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8013b28:	441a      	add	r2, r3
 8013b2a:	68bb      	ldr	r3, [r7, #8]
 8013b2c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8013b2e:	68fb      	ldr	r3, [r7, #12]
 8013b30:	68db      	ldr	r3, [r3, #12]
 8013b32:	3314      	adds	r3, #20
 8013b34:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8013b36:	68fb      	ldr	r3, [r7, #12]
 8013b38:	7a9b      	ldrb	r3, [r3, #10]
 8013b3a:	f003 0301 	and.w	r3, r3, #1
 8013b3e:	2b00      	cmp	r3, #0
 8013b40:	d015      	beq.n	8013b6e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8013b42:	68bb      	ldr	r3, [r7, #8]
 8013b44:	3304      	adds	r3, #4
 8013b46:	461a      	mov	r2, r3
 8013b48:	6879      	ldr	r1, [r7, #4]
 8013b4a:	f44f 7006 	mov.w	r0, #536	; 0x218
 8013b4e:	f7fc fa33 	bl	800ffb8 <tcp_eff_send_mss_netif>
 8013b52:	4603      	mov	r3, r0
 8013b54:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8013b56:	8b7b      	ldrh	r3, [r7, #26]
 8013b58:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8013b5c:	4618      	mov	r0, r3
 8013b5e:	f7f8 fd4b 	bl	800c5f8 <lwip_htonl>
 8013b62:	4602      	mov	r2, r0
 8013b64:	69fb      	ldr	r3, [r7, #28]
 8013b66:	601a      	str	r2, [r3, #0]
    opts += 1;
 8013b68:	69fb      	ldr	r3, [r7, #28]
 8013b6a:	3304      	adds	r3, #4
 8013b6c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8013b6e:	68bb      	ldr	r3, [r7, #8]
 8013b70:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8013b74:	2b00      	cmp	r3, #0
 8013b76:	da02      	bge.n	8013b7e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8013b78:	68bb      	ldr	r3, [r7, #8]
 8013b7a:	2200      	movs	r2, #0
 8013b7c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8013b7e:	68bb      	ldr	r3, [r7, #8]
 8013b80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013b82:	2b00      	cmp	r3, #0
 8013b84:	d10c      	bne.n	8013ba0 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8013b86:	4b34      	ldr	r3, [pc, #208]	; (8013c58 <tcp_output_segment+0x1b4>)
 8013b88:	681a      	ldr	r2, [r3, #0]
 8013b8a:	68bb      	ldr	r3, [r7, #8]
 8013b8c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8013b8e:	68fb      	ldr	r3, [r7, #12]
 8013b90:	68db      	ldr	r3, [r3, #12]
 8013b92:	685b      	ldr	r3, [r3, #4]
 8013b94:	4618      	mov	r0, r3
 8013b96:	f7f8 fd2f 	bl	800c5f8 <lwip_htonl>
 8013b9a:	4602      	mov	r2, r0
 8013b9c:	68bb      	ldr	r3, [r7, #8]
 8013b9e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8013ba0:	68fb      	ldr	r3, [r7, #12]
 8013ba2:	68da      	ldr	r2, [r3, #12]
 8013ba4:	68fb      	ldr	r3, [r7, #12]
 8013ba6:	685b      	ldr	r3, [r3, #4]
 8013ba8:	685b      	ldr	r3, [r3, #4]
 8013baa:	1ad3      	subs	r3, r2, r3
 8013bac:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8013bae:	68fb      	ldr	r3, [r7, #12]
 8013bb0:	685b      	ldr	r3, [r3, #4]
 8013bb2:	8959      	ldrh	r1, [r3, #10]
 8013bb4:	68fb      	ldr	r3, [r7, #12]
 8013bb6:	685b      	ldr	r3, [r3, #4]
 8013bb8:	8b3a      	ldrh	r2, [r7, #24]
 8013bba:	1a8a      	subs	r2, r1, r2
 8013bbc:	b292      	uxth	r2, r2
 8013bbe:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8013bc0:	68fb      	ldr	r3, [r7, #12]
 8013bc2:	685b      	ldr	r3, [r3, #4]
 8013bc4:	8919      	ldrh	r1, [r3, #8]
 8013bc6:	68fb      	ldr	r3, [r7, #12]
 8013bc8:	685b      	ldr	r3, [r3, #4]
 8013bca:	8b3a      	ldrh	r2, [r7, #24]
 8013bcc:	1a8a      	subs	r2, r1, r2
 8013bce:	b292      	uxth	r2, r2
 8013bd0:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8013bd2:	68fb      	ldr	r3, [r7, #12]
 8013bd4:	685b      	ldr	r3, [r3, #4]
 8013bd6:	68fa      	ldr	r2, [r7, #12]
 8013bd8:	68d2      	ldr	r2, [r2, #12]
 8013bda:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8013bdc:	68fb      	ldr	r3, [r7, #12]
 8013bde:	68db      	ldr	r3, [r3, #12]
 8013be0:	2200      	movs	r2, #0
 8013be2:	741a      	strb	r2, [r3, #16]
 8013be4:	2200      	movs	r2, #0
 8013be6:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8013be8:	68fb      	ldr	r3, [r7, #12]
 8013bea:	68db      	ldr	r3, [r3, #12]
 8013bec:	f103 0214 	add.w	r2, r3, #20
 8013bf0:	68fb      	ldr	r3, [r7, #12]
 8013bf2:	7a9b      	ldrb	r3, [r3, #10]
 8013bf4:	009b      	lsls	r3, r3, #2
 8013bf6:	f003 0304 	and.w	r3, r3, #4
 8013bfa:	4413      	add	r3, r2
 8013bfc:	69fa      	ldr	r2, [r7, #28]
 8013bfe:	429a      	cmp	r2, r3
 8013c00:	d006      	beq.n	8013c10 <tcp_output_segment+0x16c>
 8013c02:	4b10      	ldr	r3, [pc, #64]	; (8013c44 <tcp_output_segment+0x1a0>)
 8013c04:	f240 621c 	movw	r2, #1564	; 0x61c
 8013c08:	4914      	ldr	r1, [pc, #80]	; (8013c5c <tcp_output_segment+0x1b8>)
 8013c0a:	4810      	ldr	r0, [pc, #64]	; (8013c4c <tcp_output_segment+0x1a8>)
 8013c0c:	f006 fdca 	bl	801a7a4 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8013c10:	68fb      	ldr	r3, [r7, #12]
 8013c12:	6858      	ldr	r0, [r3, #4]
 8013c14:	68b9      	ldr	r1, [r7, #8]
 8013c16:	68bb      	ldr	r3, [r7, #8]
 8013c18:	1d1c      	adds	r4, r3, #4
 8013c1a:	68bb      	ldr	r3, [r7, #8]
 8013c1c:	7add      	ldrb	r5, [r3, #11]
 8013c1e:	68bb      	ldr	r3, [r7, #8]
 8013c20:	7a9b      	ldrb	r3, [r3, #10]
 8013c22:	687a      	ldr	r2, [r7, #4]
 8013c24:	9202      	str	r2, [sp, #8]
 8013c26:	2206      	movs	r2, #6
 8013c28:	9201      	str	r2, [sp, #4]
 8013c2a:	9300      	str	r3, [sp, #0]
 8013c2c:	462b      	mov	r3, r5
 8013c2e:	4622      	mov	r2, r4
 8013c30:	f004 fc3c 	bl	80184ac <ip4_output_if>
 8013c34:	4603      	mov	r3, r0
 8013c36:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8013c38:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013c3c:	4618      	mov	r0, r3
 8013c3e:	3720      	adds	r7, #32
 8013c40:	46bd      	mov	sp, r7
 8013c42:	bdb0      	pop	{r4, r5, r7, pc}
 8013c44:	0801d318 	.word	0x0801d318
 8013c48:	0801d8dc 	.word	0x0801d8dc
 8013c4c:	0801d36c 	.word	0x0801d36c
 8013c50:	0801d8fc 	.word	0x0801d8fc
 8013c54:	0801d91c 	.word	0x0801d91c
 8013c58:	2000bf20 	.word	0x2000bf20
 8013c5c:	0801d940 	.word	0x0801d940

08013c60 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8013c60:	b5b0      	push	{r4, r5, r7, lr}
 8013c62:	b084      	sub	sp, #16
 8013c64:	af00      	add	r7, sp, #0
 8013c66:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8013c68:	687b      	ldr	r3, [r7, #4]
 8013c6a:	2b00      	cmp	r3, #0
 8013c6c:	d106      	bne.n	8013c7c <tcp_rexmit_rto_prepare+0x1c>
 8013c6e:	4b31      	ldr	r3, [pc, #196]	; (8013d34 <tcp_rexmit_rto_prepare+0xd4>)
 8013c70:	f240 6263 	movw	r2, #1635	; 0x663
 8013c74:	4930      	ldr	r1, [pc, #192]	; (8013d38 <tcp_rexmit_rto_prepare+0xd8>)
 8013c76:	4831      	ldr	r0, [pc, #196]	; (8013d3c <tcp_rexmit_rto_prepare+0xdc>)
 8013c78:	f006 fd94 	bl	801a7a4 <iprintf>

  if (pcb->unacked == NULL) {
 8013c7c:	687b      	ldr	r3, [r7, #4]
 8013c7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013c80:	2b00      	cmp	r3, #0
 8013c82:	d102      	bne.n	8013c8a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8013c84:	f06f 0305 	mvn.w	r3, #5
 8013c88:	e050      	b.n	8013d2c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8013c8a:	687b      	ldr	r3, [r7, #4]
 8013c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013c8e:	60fb      	str	r3, [r7, #12]
 8013c90:	e00b      	b.n	8013caa <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8013c92:	68f8      	ldr	r0, [r7, #12]
 8013c94:	f7ff fee6 	bl	8013a64 <tcp_output_segment_busy>
 8013c98:	4603      	mov	r3, r0
 8013c9a:	2b00      	cmp	r3, #0
 8013c9c:	d002      	beq.n	8013ca4 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8013c9e:	f06f 0305 	mvn.w	r3, #5
 8013ca2:	e043      	b.n	8013d2c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8013ca4:	68fb      	ldr	r3, [r7, #12]
 8013ca6:	681b      	ldr	r3, [r3, #0]
 8013ca8:	60fb      	str	r3, [r7, #12]
 8013caa:	68fb      	ldr	r3, [r7, #12]
 8013cac:	681b      	ldr	r3, [r3, #0]
 8013cae:	2b00      	cmp	r3, #0
 8013cb0:	d1ef      	bne.n	8013c92 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8013cb2:	68f8      	ldr	r0, [r7, #12]
 8013cb4:	f7ff fed6 	bl	8013a64 <tcp_output_segment_busy>
 8013cb8:	4603      	mov	r3, r0
 8013cba:	2b00      	cmp	r3, #0
 8013cbc:	d002      	beq.n	8013cc4 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8013cbe:	f06f 0305 	mvn.w	r3, #5
 8013cc2:	e033      	b.n	8013d2c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8013cc4:	687b      	ldr	r3, [r7, #4]
 8013cc6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8013cc8:	68fb      	ldr	r3, [r7, #12]
 8013cca:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8013ccc:	687b      	ldr	r3, [r7, #4]
 8013cce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8013cd0:	687b      	ldr	r3, [r7, #4]
 8013cd2:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8013cd4:	687b      	ldr	r3, [r7, #4]
 8013cd6:	2200      	movs	r2, #0
 8013cd8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8013cda:	687b      	ldr	r3, [r7, #4]
 8013cdc:	8b5b      	ldrh	r3, [r3, #26]
 8013cde:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8013ce2:	b29a      	uxth	r2, r3
 8013ce4:	687b      	ldr	r3, [r7, #4]
 8013ce6:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8013ce8:	68fb      	ldr	r3, [r7, #12]
 8013cea:	68db      	ldr	r3, [r3, #12]
 8013cec:	685b      	ldr	r3, [r3, #4]
 8013cee:	4618      	mov	r0, r3
 8013cf0:	f7f8 fc82 	bl	800c5f8 <lwip_htonl>
 8013cf4:	4604      	mov	r4, r0
 8013cf6:	68fb      	ldr	r3, [r7, #12]
 8013cf8:	891b      	ldrh	r3, [r3, #8]
 8013cfa:	461d      	mov	r5, r3
 8013cfc:	68fb      	ldr	r3, [r7, #12]
 8013cfe:	68db      	ldr	r3, [r3, #12]
 8013d00:	899b      	ldrh	r3, [r3, #12]
 8013d02:	b29b      	uxth	r3, r3
 8013d04:	4618      	mov	r0, r3
 8013d06:	f7f8 fc63 	bl	800c5d0 <lwip_htons>
 8013d0a:	4603      	mov	r3, r0
 8013d0c:	b2db      	uxtb	r3, r3
 8013d0e:	f003 0303 	and.w	r3, r3, #3
 8013d12:	2b00      	cmp	r3, #0
 8013d14:	d001      	beq.n	8013d1a <tcp_rexmit_rto_prepare+0xba>
 8013d16:	2301      	movs	r3, #1
 8013d18:	e000      	b.n	8013d1c <tcp_rexmit_rto_prepare+0xbc>
 8013d1a:	2300      	movs	r3, #0
 8013d1c:	442b      	add	r3, r5
 8013d1e:	18e2      	adds	r2, r4, r3
 8013d20:	687b      	ldr	r3, [r7, #4]
 8013d22:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8013d24:	687b      	ldr	r3, [r7, #4]
 8013d26:	2200      	movs	r2, #0
 8013d28:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8013d2a:	2300      	movs	r3, #0
}
 8013d2c:	4618      	mov	r0, r3
 8013d2e:	3710      	adds	r7, #16
 8013d30:	46bd      	mov	sp, r7
 8013d32:	bdb0      	pop	{r4, r5, r7, pc}
 8013d34:	0801d318 	.word	0x0801d318
 8013d38:	0801d954 	.word	0x0801d954
 8013d3c:	0801d36c 	.word	0x0801d36c

08013d40 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8013d40:	b580      	push	{r7, lr}
 8013d42:	b082      	sub	sp, #8
 8013d44:	af00      	add	r7, sp, #0
 8013d46:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8013d48:	687b      	ldr	r3, [r7, #4]
 8013d4a:	2b00      	cmp	r3, #0
 8013d4c:	d106      	bne.n	8013d5c <tcp_rexmit_rto_commit+0x1c>
 8013d4e:	4b0d      	ldr	r3, [pc, #52]	; (8013d84 <tcp_rexmit_rto_commit+0x44>)
 8013d50:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8013d54:	490c      	ldr	r1, [pc, #48]	; (8013d88 <tcp_rexmit_rto_commit+0x48>)
 8013d56:	480d      	ldr	r0, [pc, #52]	; (8013d8c <tcp_rexmit_rto_commit+0x4c>)
 8013d58:	f006 fd24 	bl	801a7a4 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013d62:	2bff      	cmp	r3, #255	; 0xff
 8013d64:	d007      	beq.n	8013d76 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8013d66:	687b      	ldr	r3, [r7, #4]
 8013d68:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013d6c:	3301      	adds	r3, #1
 8013d6e:	b2da      	uxtb	r2, r3
 8013d70:	687b      	ldr	r3, [r7, #4]
 8013d72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8013d76:	6878      	ldr	r0, [r7, #4]
 8013d78:	f7ff fc80 	bl	801367c <tcp_output>
}
 8013d7c:	bf00      	nop
 8013d7e:	3708      	adds	r7, #8
 8013d80:	46bd      	mov	sp, r7
 8013d82:	bd80      	pop	{r7, pc}
 8013d84:	0801d318 	.word	0x0801d318
 8013d88:	0801d978 	.word	0x0801d978
 8013d8c:	0801d36c 	.word	0x0801d36c

08013d90 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8013d90:	b580      	push	{r7, lr}
 8013d92:	b082      	sub	sp, #8
 8013d94:	af00      	add	r7, sp, #0
 8013d96:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8013d98:	687b      	ldr	r3, [r7, #4]
 8013d9a:	2b00      	cmp	r3, #0
 8013d9c:	d106      	bne.n	8013dac <tcp_rexmit_rto+0x1c>
 8013d9e:	4b0a      	ldr	r3, [pc, #40]	; (8013dc8 <tcp_rexmit_rto+0x38>)
 8013da0:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8013da4:	4909      	ldr	r1, [pc, #36]	; (8013dcc <tcp_rexmit_rto+0x3c>)
 8013da6:	480a      	ldr	r0, [pc, #40]	; (8013dd0 <tcp_rexmit_rto+0x40>)
 8013da8:	f006 fcfc 	bl	801a7a4 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8013dac:	6878      	ldr	r0, [r7, #4]
 8013dae:	f7ff ff57 	bl	8013c60 <tcp_rexmit_rto_prepare>
 8013db2:	4603      	mov	r3, r0
 8013db4:	2b00      	cmp	r3, #0
 8013db6:	d102      	bne.n	8013dbe <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8013db8:	6878      	ldr	r0, [r7, #4]
 8013dba:	f7ff ffc1 	bl	8013d40 <tcp_rexmit_rto_commit>
  }
}
 8013dbe:	bf00      	nop
 8013dc0:	3708      	adds	r7, #8
 8013dc2:	46bd      	mov	sp, r7
 8013dc4:	bd80      	pop	{r7, pc}
 8013dc6:	bf00      	nop
 8013dc8:	0801d318 	.word	0x0801d318
 8013dcc:	0801d99c 	.word	0x0801d99c
 8013dd0:	0801d36c 	.word	0x0801d36c

08013dd4 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8013dd4:	b590      	push	{r4, r7, lr}
 8013dd6:	b085      	sub	sp, #20
 8013dd8:	af00      	add	r7, sp, #0
 8013dda:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8013ddc:	687b      	ldr	r3, [r7, #4]
 8013dde:	2b00      	cmp	r3, #0
 8013de0:	d106      	bne.n	8013df0 <tcp_rexmit+0x1c>
 8013de2:	4b2f      	ldr	r3, [pc, #188]	; (8013ea0 <tcp_rexmit+0xcc>)
 8013de4:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8013de8:	492e      	ldr	r1, [pc, #184]	; (8013ea4 <tcp_rexmit+0xd0>)
 8013dea:	482f      	ldr	r0, [pc, #188]	; (8013ea8 <tcp_rexmit+0xd4>)
 8013dec:	f006 fcda 	bl	801a7a4 <iprintf>

  if (pcb->unacked == NULL) {
 8013df0:	687b      	ldr	r3, [r7, #4]
 8013df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013df4:	2b00      	cmp	r3, #0
 8013df6:	d102      	bne.n	8013dfe <tcp_rexmit+0x2a>
    return ERR_VAL;
 8013df8:	f06f 0305 	mvn.w	r3, #5
 8013dfc:	e04c      	b.n	8013e98 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8013dfe:	687b      	ldr	r3, [r7, #4]
 8013e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013e02:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8013e04:	68b8      	ldr	r0, [r7, #8]
 8013e06:	f7ff fe2d 	bl	8013a64 <tcp_output_segment_busy>
 8013e0a:	4603      	mov	r3, r0
 8013e0c:	2b00      	cmp	r3, #0
 8013e0e:	d002      	beq.n	8013e16 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8013e10:	f06f 0305 	mvn.w	r3, #5
 8013e14:	e040      	b.n	8013e98 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8013e16:	68bb      	ldr	r3, [r7, #8]
 8013e18:	681a      	ldr	r2, [r3, #0]
 8013e1a:	687b      	ldr	r3, [r7, #4]
 8013e1c:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8013e1e:	687b      	ldr	r3, [r7, #4]
 8013e20:	336c      	adds	r3, #108	; 0x6c
 8013e22:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8013e24:	e002      	b.n	8013e2c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8013e26:	68fb      	ldr	r3, [r7, #12]
 8013e28:	681b      	ldr	r3, [r3, #0]
 8013e2a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8013e2c:	68fb      	ldr	r3, [r7, #12]
 8013e2e:	681b      	ldr	r3, [r3, #0]
 8013e30:	2b00      	cmp	r3, #0
 8013e32:	d011      	beq.n	8013e58 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8013e34:	68fb      	ldr	r3, [r7, #12]
 8013e36:	681b      	ldr	r3, [r3, #0]
 8013e38:	68db      	ldr	r3, [r3, #12]
 8013e3a:	685b      	ldr	r3, [r3, #4]
 8013e3c:	4618      	mov	r0, r3
 8013e3e:	f7f8 fbdb 	bl	800c5f8 <lwip_htonl>
 8013e42:	4604      	mov	r4, r0
 8013e44:	68bb      	ldr	r3, [r7, #8]
 8013e46:	68db      	ldr	r3, [r3, #12]
 8013e48:	685b      	ldr	r3, [r3, #4]
 8013e4a:	4618      	mov	r0, r3
 8013e4c:	f7f8 fbd4 	bl	800c5f8 <lwip_htonl>
 8013e50:	4603      	mov	r3, r0
 8013e52:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8013e54:	2b00      	cmp	r3, #0
 8013e56:	dbe6      	blt.n	8013e26 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8013e58:	68fb      	ldr	r3, [r7, #12]
 8013e5a:	681a      	ldr	r2, [r3, #0]
 8013e5c:	68bb      	ldr	r3, [r7, #8]
 8013e5e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8013e60:	68fb      	ldr	r3, [r7, #12]
 8013e62:	68ba      	ldr	r2, [r7, #8]
 8013e64:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8013e66:	68bb      	ldr	r3, [r7, #8]
 8013e68:	681b      	ldr	r3, [r3, #0]
 8013e6a:	2b00      	cmp	r3, #0
 8013e6c:	d103      	bne.n	8013e76 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8013e6e:	687b      	ldr	r3, [r7, #4]
 8013e70:	2200      	movs	r2, #0
 8013e72:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8013e76:	687b      	ldr	r3, [r7, #4]
 8013e78:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013e7c:	2bff      	cmp	r3, #255	; 0xff
 8013e7e:	d007      	beq.n	8013e90 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8013e80:	687b      	ldr	r3, [r7, #4]
 8013e82:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013e86:	3301      	adds	r3, #1
 8013e88:	b2da      	uxtb	r2, r3
 8013e8a:	687b      	ldr	r3, [r7, #4]
 8013e8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8013e90:	687b      	ldr	r3, [r7, #4]
 8013e92:	2200      	movs	r2, #0
 8013e94:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8013e96:	2300      	movs	r3, #0
}
 8013e98:	4618      	mov	r0, r3
 8013e9a:	3714      	adds	r7, #20
 8013e9c:	46bd      	mov	sp, r7
 8013e9e:	bd90      	pop	{r4, r7, pc}
 8013ea0:	0801d318 	.word	0x0801d318
 8013ea4:	0801d9b8 	.word	0x0801d9b8
 8013ea8:	0801d36c 	.word	0x0801d36c

08013eac <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8013eac:	b580      	push	{r7, lr}
 8013eae:	b082      	sub	sp, #8
 8013eb0:	af00      	add	r7, sp, #0
 8013eb2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	2b00      	cmp	r3, #0
 8013eb8:	d106      	bne.n	8013ec8 <tcp_rexmit_fast+0x1c>
 8013eba:	4b2a      	ldr	r3, [pc, #168]	; (8013f64 <tcp_rexmit_fast+0xb8>)
 8013ebc:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8013ec0:	4929      	ldr	r1, [pc, #164]	; (8013f68 <tcp_rexmit_fast+0xbc>)
 8013ec2:	482a      	ldr	r0, [pc, #168]	; (8013f6c <tcp_rexmit_fast+0xc0>)
 8013ec4:	f006 fc6e 	bl	801a7a4 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8013ec8:	687b      	ldr	r3, [r7, #4]
 8013eca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013ecc:	2b00      	cmp	r3, #0
 8013ece:	d044      	beq.n	8013f5a <tcp_rexmit_fast+0xae>
 8013ed0:	687b      	ldr	r3, [r7, #4]
 8013ed2:	8b5b      	ldrh	r3, [r3, #26]
 8013ed4:	f003 0304 	and.w	r3, r3, #4
 8013ed8:	2b00      	cmp	r3, #0
 8013eda:	d13e      	bne.n	8013f5a <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8013edc:	6878      	ldr	r0, [r7, #4]
 8013ede:	f7ff ff79 	bl	8013dd4 <tcp_rexmit>
 8013ee2:	4603      	mov	r3, r0
 8013ee4:	2b00      	cmp	r3, #0
 8013ee6:	d138      	bne.n	8013f5a <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8013ee8:	687b      	ldr	r3, [r7, #4]
 8013eea:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8013eee:	687b      	ldr	r3, [r7, #4]
 8013ef0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013ef4:	4293      	cmp	r3, r2
 8013ef6:	bf28      	it	cs
 8013ef8:	4613      	movcs	r3, r2
 8013efa:	b29b      	uxth	r3, r3
 8013efc:	0fda      	lsrs	r2, r3, #31
 8013efe:	4413      	add	r3, r2
 8013f00:	105b      	asrs	r3, r3, #1
 8013f02:	b29a      	uxth	r2, r3
 8013f04:	687b      	ldr	r3, [r7, #4]
 8013f06:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8013f0a:	687b      	ldr	r3, [r7, #4]
 8013f0c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8013f10:	461a      	mov	r2, r3
 8013f12:	687b      	ldr	r3, [r7, #4]
 8013f14:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013f16:	005b      	lsls	r3, r3, #1
 8013f18:	429a      	cmp	r2, r3
 8013f1a:	d206      	bcs.n	8013f2a <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8013f1c:	687b      	ldr	r3, [r7, #4]
 8013f1e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013f20:	005b      	lsls	r3, r3, #1
 8013f22:	b29a      	uxth	r2, r3
 8013f24:	687b      	ldr	r3, [r7, #4]
 8013f26:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8013f2a:	687b      	ldr	r3, [r7, #4]
 8013f2c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8013f30:	687b      	ldr	r3, [r7, #4]
 8013f32:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013f34:	4619      	mov	r1, r3
 8013f36:	0049      	lsls	r1, r1, #1
 8013f38:	440b      	add	r3, r1
 8013f3a:	b29b      	uxth	r3, r3
 8013f3c:	4413      	add	r3, r2
 8013f3e:	b29a      	uxth	r2, r3
 8013f40:	687b      	ldr	r3, [r7, #4]
 8013f42:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8013f46:	687b      	ldr	r3, [r7, #4]
 8013f48:	8b5b      	ldrh	r3, [r3, #26]
 8013f4a:	f043 0304 	orr.w	r3, r3, #4
 8013f4e:	b29a      	uxth	r2, r3
 8013f50:	687b      	ldr	r3, [r7, #4]
 8013f52:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8013f54:	687b      	ldr	r3, [r7, #4]
 8013f56:	2200      	movs	r2, #0
 8013f58:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8013f5a:	bf00      	nop
 8013f5c:	3708      	adds	r7, #8
 8013f5e:	46bd      	mov	sp, r7
 8013f60:	bd80      	pop	{r7, pc}
 8013f62:	bf00      	nop
 8013f64:	0801d318 	.word	0x0801d318
 8013f68:	0801d9d0 	.word	0x0801d9d0
 8013f6c:	0801d36c 	.word	0x0801d36c

08013f70 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8013f70:	b580      	push	{r7, lr}
 8013f72:	b086      	sub	sp, #24
 8013f74:	af00      	add	r7, sp, #0
 8013f76:	60f8      	str	r0, [r7, #12]
 8013f78:	607b      	str	r3, [r7, #4]
 8013f7a:	460b      	mov	r3, r1
 8013f7c:	817b      	strh	r3, [r7, #10]
 8013f7e:	4613      	mov	r3, r2
 8013f80:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8013f82:	897a      	ldrh	r2, [r7, #10]
 8013f84:	893b      	ldrh	r3, [r7, #8]
 8013f86:	4413      	add	r3, r2
 8013f88:	b29b      	uxth	r3, r3
 8013f8a:	3314      	adds	r3, #20
 8013f8c:	b29b      	uxth	r3, r3
 8013f8e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013f92:	4619      	mov	r1, r3
 8013f94:	2022      	movs	r0, #34	; 0x22
 8013f96:	f7f9 fc9b 	bl	800d8d0 <pbuf_alloc>
 8013f9a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8013f9c:	697b      	ldr	r3, [r7, #20]
 8013f9e:	2b00      	cmp	r3, #0
 8013fa0:	d04d      	beq.n	801403e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8013fa2:	897b      	ldrh	r3, [r7, #10]
 8013fa4:	3313      	adds	r3, #19
 8013fa6:	697a      	ldr	r2, [r7, #20]
 8013fa8:	8952      	ldrh	r2, [r2, #10]
 8013faa:	4293      	cmp	r3, r2
 8013fac:	db06      	blt.n	8013fbc <tcp_output_alloc_header_common+0x4c>
 8013fae:	4b26      	ldr	r3, [pc, #152]	; (8014048 <tcp_output_alloc_header_common+0xd8>)
 8013fb0:	f240 7223 	movw	r2, #1827	; 0x723
 8013fb4:	4925      	ldr	r1, [pc, #148]	; (801404c <tcp_output_alloc_header_common+0xdc>)
 8013fb6:	4826      	ldr	r0, [pc, #152]	; (8014050 <tcp_output_alloc_header_common+0xe0>)
 8013fb8:	f006 fbf4 	bl	801a7a4 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8013fbc:	697b      	ldr	r3, [r7, #20]
 8013fbe:	685b      	ldr	r3, [r3, #4]
 8013fc0:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8013fc2:	8c3b      	ldrh	r3, [r7, #32]
 8013fc4:	4618      	mov	r0, r3
 8013fc6:	f7f8 fb03 	bl	800c5d0 <lwip_htons>
 8013fca:	4603      	mov	r3, r0
 8013fcc:	461a      	mov	r2, r3
 8013fce:	693b      	ldr	r3, [r7, #16]
 8013fd0:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8013fd2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013fd4:	4618      	mov	r0, r3
 8013fd6:	f7f8 fafb 	bl	800c5d0 <lwip_htons>
 8013fda:	4603      	mov	r3, r0
 8013fdc:	461a      	mov	r2, r3
 8013fde:	693b      	ldr	r3, [r7, #16]
 8013fe0:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8013fe2:	693b      	ldr	r3, [r7, #16]
 8013fe4:	687a      	ldr	r2, [r7, #4]
 8013fe6:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8013fe8:	68f8      	ldr	r0, [r7, #12]
 8013fea:	f7f8 fb05 	bl	800c5f8 <lwip_htonl>
 8013fee:	4602      	mov	r2, r0
 8013ff0:	693b      	ldr	r3, [r7, #16]
 8013ff2:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8013ff4:	897b      	ldrh	r3, [r7, #10]
 8013ff6:	089b      	lsrs	r3, r3, #2
 8013ff8:	b29b      	uxth	r3, r3
 8013ffa:	3305      	adds	r3, #5
 8013ffc:	b29b      	uxth	r3, r3
 8013ffe:	031b      	lsls	r3, r3, #12
 8014000:	b29a      	uxth	r2, r3
 8014002:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8014006:	b29b      	uxth	r3, r3
 8014008:	4313      	orrs	r3, r2
 801400a:	b29b      	uxth	r3, r3
 801400c:	4618      	mov	r0, r3
 801400e:	f7f8 fadf 	bl	800c5d0 <lwip_htons>
 8014012:	4603      	mov	r3, r0
 8014014:	461a      	mov	r2, r3
 8014016:	693b      	ldr	r3, [r7, #16]
 8014018:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801401a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801401c:	4618      	mov	r0, r3
 801401e:	f7f8 fad7 	bl	800c5d0 <lwip_htons>
 8014022:	4603      	mov	r3, r0
 8014024:	461a      	mov	r2, r3
 8014026:	693b      	ldr	r3, [r7, #16]
 8014028:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801402a:	693b      	ldr	r3, [r7, #16]
 801402c:	2200      	movs	r2, #0
 801402e:	741a      	strb	r2, [r3, #16]
 8014030:	2200      	movs	r2, #0
 8014032:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8014034:	693b      	ldr	r3, [r7, #16]
 8014036:	2200      	movs	r2, #0
 8014038:	749a      	strb	r2, [r3, #18]
 801403a:	2200      	movs	r2, #0
 801403c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801403e:	697b      	ldr	r3, [r7, #20]
}
 8014040:	4618      	mov	r0, r3
 8014042:	3718      	adds	r7, #24
 8014044:	46bd      	mov	sp, r7
 8014046:	bd80      	pop	{r7, pc}
 8014048:	0801d318 	.word	0x0801d318
 801404c:	0801d9f0 	.word	0x0801d9f0
 8014050:	0801d36c 	.word	0x0801d36c

08014054 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8014054:	b5b0      	push	{r4, r5, r7, lr}
 8014056:	b08a      	sub	sp, #40	; 0x28
 8014058:	af04      	add	r7, sp, #16
 801405a:	60f8      	str	r0, [r7, #12]
 801405c:	607b      	str	r3, [r7, #4]
 801405e:	460b      	mov	r3, r1
 8014060:	817b      	strh	r3, [r7, #10]
 8014062:	4613      	mov	r3, r2
 8014064:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8014066:	68fb      	ldr	r3, [r7, #12]
 8014068:	2b00      	cmp	r3, #0
 801406a:	d106      	bne.n	801407a <tcp_output_alloc_header+0x26>
 801406c:	4b15      	ldr	r3, [pc, #84]	; (80140c4 <tcp_output_alloc_header+0x70>)
 801406e:	f240 7242 	movw	r2, #1858	; 0x742
 8014072:	4915      	ldr	r1, [pc, #84]	; (80140c8 <tcp_output_alloc_header+0x74>)
 8014074:	4815      	ldr	r0, [pc, #84]	; (80140cc <tcp_output_alloc_header+0x78>)
 8014076:	f006 fb95 	bl	801a7a4 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801407a:	68fb      	ldr	r3, [r7, #12]
 801407c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801407e:	68fb      	ldr	r3, [r7, #12]
 8014080:	8adb      	ldrh	r3, [r3, #22]
 8014082:	68fa      	ldr	r2, [r7, #12]
 8014084:	8b12      	ldrh	r2, [r2, #24]
 8014086:	68f9      	ldr	r1, [r7, #12]
 8014088:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801408a:	893d      	ldrh	r5, [r7, #8]
 801408c:	897c      	ldrh	r4, [r7, #10]
 801408e:	9103      	str	r1, [sp, #12]
 8014090:	2110      	movs	r1, #16
 8014092:	9102      	str	r1, [sp, #8]
 8014094:	9201      	str	r2, [sp, #4]
 8014096:	9300      	str	r3, [sp, #0]
 8014098:	687b      	ldr	r3, [r7, #4]
 801409a:	462a      	mov	r2, r5
 801409c:	4621      	mov	r1, r4
 801409e:	f7ff ff67 	bl	8013f70 <tcp_output_alloc_header_common>
 80140a2:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80140a4:	697b      	ldr	r3, [r7, #20]
 80140a6:	2b00      	cmp	r3, #0
 80140a8:	d006      	beq.n	80140b8 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80140aa:	68fb      	ldr	r3, [r7, #12]
 80140ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80140ae:	68fa      	ldr	r2, [r7, #12]
 80140b0:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80140b2:	441a      	add	r2, r3
 80140b4:	68fb      	ldr	r3, [r7, #12]
 80140b6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 80140b8:	697b      	ldr	r3, [r7, #20]
}
 80140ba:	4618      	mov	r0, r3
 80140bc:	3718      	adds	r7, #24
 80140be:	46bd      	mov	sp, r7
 80140c0:	bdb0      	pop	{r4, r5, r7, pc}
 80140c2:	bf00      	nop
 80140c4:	0801d318 	.word	0x0801d318
 80140c8:	0801da20 	.word	0x0801da20
 80140cc:	0801d36c 	.word	0x0801d36c

080140d0 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80140d0:	b580      	push	{r7, lr}
 80140d2:	b088      	sub	sp, #32
 80140d4:	af00      	add	r7, sp, #0
 80140d6:	60f8      	str	r0, [r7, #12]
 80140d8:	60b9      	str	r1, [r7, #8]
 80140da:	4611      	mov	r1, r2
 80140dc:	461a      	mov	r2, r3
 80140de:	460b      	mov	r3, r1
 80140e0:	71fb      	strb	r3, [r7, #7]
 80140e2:	4613      	mov	r3, r2
 80140e4:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80140e6:	2300      	movs	r3, #0
 80140e8:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80140ea:	68bb      	ldr	r3, [r7, #8]
 80140ec:	2b00      	cmp	r3, #0
 80140ee:	d106      	bne.n	80140fe <tcp_output_fill_options+0x2e>
 80140f0:	4b13      	ldr	r3, [pc, #76]	; (8014140 <tcp_output_fill_options+0x70>)
 80140f2:	f240 7256 	movw	r2, #1878	; 0x756
 80140f6:	4913      	ldr	r1, [pc, #76]	; (8014144 <tcp_output_fill_options+0x74>)
 80140f8:	4813      	ldr	r0, [pc, #76]	; (8014148 <tcp_output_fill_options+0x78>)
 80140fa:	f006 fb53 	bl	801a7a4 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80140fe:	68bb      	ldr	r3, [r7, #8]
 8014100:	685b      	ldr	r3, [r3, #4]
 8014102:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8014104:	69bb      	ldr	r3, [r7, #24]
 8014106:	3314      	adds	r3, #20
 8014108:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801410a:	69bb      	ldr	r3, [r7, #24]
 801410c:	f103 0214 	add.w	r2, r3, #20
 8014110:	8bfb      	ldrh	r3, [r7, #30]
 8014112:	009b      	lsls	r3, r3, #2
 8014114:	4619      	mov	r1, r3
 8014116:	79fb      	ldrb	r3, [r7, #7]
 8014118:	009b      	lsls	r3, r3, #2
 801411a:	f003 0304 	and.w	r3, r3, #4
 801411e:	440b      	add	r3, r1
 8014120:	4413      	add	r3, r2
 8014122:	697a      	ldr	r2, [r7, #20]
 8014124:	429a      	cmp	r2, r3
 8014126:	d006      	beq.n	8014136 <tcp_output_fill_options+0x66>
 8014128:	4b05      	ldr	r3, [pc, #20]	; (8014140 <tcp_output_fill_options+0x70>)
 801412a:	f240 7275 	movw	r2, #1909	; 0x775
 801412e:	4907      	ldr	r1, [pc, #28]	; (801414c <tcp_output_fill_options+0x7c>)
 8014130:	4805      	ldr	r0, [pc, #20]	; (8014148 <tcp_output_fill_options+0x78>)
 8014132:	f006 fb37 	bl	801a7a4 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8014136:	bf00      	nop
 8014138:	3720      	adds	r7, #32
 801413a:	46bd      	mov	sp, r7
 801413c:	bd80      	pop	{r7, pc}
 801413e:	bf00      	nop
 8014140:	0801d318 	.word	0x0801d318
 8014144:	0801da48 	.word	0x0801da48
 8014148:	0801d36c 	.word	0x0801d36c
 801414c:	0801d940 	.word	0x0801d940

08014150 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8014150:	b580      	push	{r7, lr}
 8014152:	b08a      	sub	sp, #40	; 0x28
 8014154:	af04      	add	r7, sp, #16
 8014156:	60f8      	str	r0, [r7, #12]
 8014158:	60b9      	str	r1, [r7, #8]
 801415a:	607a      	str	r2, [r7, #4]
 801415c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801415e:	68bb      	ldr	r3, [r7, #8]
 8014160:	2b00      	cmp	r3, #0
 8014162:	d106      	bne.n	8014172 <tcp_output_control_segment+0x22>
 8014164:	4b1c      	ldr	r3, [pc, #112]	; (80141d8 <tcp_output_control_segment+0x88>)
 8014166:	f240 7287 	movw	r2, #1927	; 0x787
 801416a:	491c      	ldr	r1, [pc, #112]	; (80141dc <tcp_output_control_segment+0x8c>)
 801416c:	481c      	ldr	r0, [pc, #112]	; (80141e0 <tcp_output_control_segment+0x90>)
 801416e:	f006 fb19 	bl	801a7a4 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8014172:	683a      	ldr	r2, [r7, #0]
 8014174:	6879      	ldr	r1, [r7, #4]
 8014176:	68f8      	ldr	r0, [r7, #12]
 8014178:	f7fe fae8 	bl	801274c <tcp_route>
 801417c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801417e:	693b      	ldr	r3, [r7, #16]
 8014180:	2b00      	cmp	r3, #0
 8014182:	d102      	bne.n	801418a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8014184:	23fc      	movs	r3, #252	; 0xfc
 8014186:	75fb      	strb	r3, [r7, #23]
 8014188:	e01c      	b.n	80141c4 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801418a:	68fb      	ldr	r3, [r7, #12]
 801418c:	2b00      	cmp	r3, #0
 801418e:	d006      	beq.n	801419e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8014190:	68fb      	ldr	r3, [r7, #12]
 8014192:	7adb      	ldrb	r3, [r3, #11]
 8014194:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8014196:	68fb      	ldr	r3, [r7, #12]
 8014198:	7a9b      	ldrb	r3, [r3, #10]
 801419a:	757b      	strb	r3, [r7, #21]
 801419c:	e003      	b.n	80141a6 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801419e:	23ff      	movs	r3, #255	; 0xff
 80141a0:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 80141a2:	2300      	movs	r3, #0
 80141a4:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80141a6:	7dba      	ldrb	r2, [r7, #22]
 80141a8:	693b      	ldr	r3, [r7, #16]
 80141aa:	9302      	str	r3, [sp, #8]
 80141ac:	2306      	movs	r3, #6
 80141ae:	9301      	str	r3, [sp, #4]
 80141b0:	7d7b      	ldrb	r3, [r7, #21]
 80141b2:	9300      	str	r3, [sp, #0]
 80141b4:	4613      	mov	r3, r2
 80141b6:	683a      	ldr	r2, [r7, #0]
 80141b8:	6879      	ldr	r1, [r7, #4]
 80141ba:	68b8      	ldr	r0, [r7, #8]
 80141bc:	f004 f976 	bl	80184ac <ip4_output_if>
 80141c0:	4603      	mov	r3, r0
 80141c2:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80141c4:	68b8      	ldr	r0, [r7, #8]
 80141c6:	f7f9 fe67 	bl	800de98 <pbuf_free>
  return err;
 80141ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80141ce:	4618      	mov	r0, r3
 80141d0:	3718      	adds	r7, #24
 80141d2:	46bd      	mov	sp, r7
 80141d4:	bd80      	pop	{r7, pc}
 80141d6:	bf00      	nop
 80141d8:	0801d318 	.word	0x0801d318
 80141dc:	0801da70 	.word	0x0801da70
 80141e0:	0801d36c 	.word	0x0801d36c

080141e4 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80141e4:	b590      	push	{r4, r7, lr}
 80141e6:	b08b      	sub	sp, #44	; 0x2c
 80141e8:	af04      	add	r7, sp, #16
 80141ea:	60f8      	str	r0, [r7, #12]
 80141ec:	60b9      	str	r1, [r7, #8]
 80141ee:	607a      	str	r2, [r7, #4]
 80141f0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80141f2:	683b      	ldr	r3, [r7, #0]
 80141f4:	2b00      	cmp	r3, #0
 80141f6:	d106      	bne.n	8014206 <tcp_rst+0x22>
 80141f8:	4b1f      	ldr	r3, [pc, #124]	; (8014278 <tcp_rst+0x94>)
 80141fa:	f240 72c4 	movw	r2, #1988	; 0x7c4
 80141fe:	491f      	ldr	r1, [pc, #124]	; (801427c <tcp_rst+0x98>)
 8014200:	481f      	ldr	r0, [pc, #124]	; (8014280 <tcp_rst+0x9c>)
 8014202:	f006 facf 	bl	801a7a4 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8014206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014208:	2b00      	cmp	r3, #0
 801420a:	d106      	bne.n	801421a <tcp_rst+0x36>
 801420c:	4b1a      	ldr	r3, [pc, #104]	; (8014278 <tcp_rst+0x94>)
 801420e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8014212:	491c      	ldr	r1, [pc, #112]	; (8014284 <tcp_rst+0xa0>)
 8014214:	481a      	ldr	r0, [pc, #104]	; (8014280 <tcp_rst+0x9c>)
 8014216:	f006 fac5 	bl	801a7a4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801421a:	2300      	movs	r3, #0
 801421c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801421e:	f246 0308 	movw	r3, #24584	; 0x6008
 8014222:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8014224:	7dfb      	ldrb	r3, [r7, #23]
 8014226:	b29c      	uxth	r4, r3
 8014228:	68b8      	ldr	r0, [r7, #8]
 801422a:	f7f8 f9e5 	bl	800c5f8 <lwip_htonl>
 801422e:	4602      	mov	r2, r0
 8014230:	8abb      	ldrh	r3, [r7, #20]
 8014232:	9303      	str	r3, [sp, #12]
 8014234:	2314      	movs	r3, #20
 8014236:	9302      	str	r3, [sp, #8]
 8014238:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801423a:	9301      	str	r3, [sp, #4]
 801423c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801423e:	9300      	str	r3, [sp, #0]
 8014240:	4613      	mov	r3, r2
 8014242:	2200      	movs	r2, #0
 8014244:	4621      	mov	r1, r4
 8014246:	6878      	ldr	r0, [r7, #4]
 8014248:	f7ff fe92 	bl	8013f70 <tcp_output_alloc_header_common>
 801424c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801424e:	693b      	ldr	r3, [r7, #16]
 8014250:	2b00      	cmp	r3, #0
 8014252:	d00c      	beq.n	801426e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014254:	7dfb      	ldrb	r3, [r7, #23]
 8014256:	2200      	movs	r2, #0
 8014258:	6939      	ldr	r1, [r7, #16]
 801425a:	68f8      	ldr	r0, [r7, #12]
 801425c:	f7ff ff38 	bl	80140d0 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8014260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014262:	683a      	ldr	r2, [r7, #0]
 8014264:	6939      	ldr	r1, [r7, #16]
 8014266:	68f8      	ldr	r0, [r7, #12]
 8014268:	f7ff ff72 	bl	8014150 <tcp_output_control_segment>
 801426c:	e000      	b.n	8014270 <tcp_rst+0x8c>
    return;
 801426e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8014270:	371c      	adds	r7, #28
 8014272:	46bd      	mov	sp, r7
 8014274:	bd90      	pop	{r4, r7, pc}
 8014276:	bf00      	nop
 8014278:	0801d318 	.word	0x0801d318
 801427c:	0801da9c 	.word	0x0801da9c
 8014280:	0801d36c 	.word	0x0801d36c
 8014284:	0801dab8 	.word	0x0801dab8

08014288 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8014288:	b590      	push	{r4, r7, lr}
 801428a:	b087      	sub	sp, #28
 801428c:	af00      	add	r7, sp, #0
 801428e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8014290:	2300      	movs	r3, #0
 8014292:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8014294:	2300      	movs	r3, #0
 8014296:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8014298:	687b      	ldr	r3, [r7, #4]
 801429a:	2b00      	cmp	r3, #0
 801429c:	d106      	bne.n	80142ac <tcp_send_empty_ack+0x24>
 801429e:	4b28      	ldr	r3, [pc, #160]	; (8014340 <tcp_send_empty_ack+0xb8>)
 80142a0:	f240 72ea 	movw	r2, #2026	; 0x7ea
 80142a4:	4927      	ldr	r1, [pc, #156]	; (8014344 <tcp_send_empty_ack+0xbc>)
 80142a6:	4828      	ldr	r0, [pc, #160]	; (8014348 <tcp_send_empty_ack+0xc0>)
 80142a8:	f006 fa7c 	bl	801a7a4 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80142ac:	7dfb      	ldrb	r3, [r7, #23]
 80142ae:	009b      	lsls	r3, r3, #2
 80142b0:	b2db      	uxtb	r3, r3
 80142b2:	f003 0304 	and.w	r3, r3, #4
 80142b6:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80142b8:	7d7b      	ldrb	r3, [r7, #21]
 80142ba:	b29c      	uxth	r4, r3
 80142bc:	687b      	ldr	r3, [r7, #4]
 80142be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80142c0:	4618      	mov	r0, r3
 80142c2:	f7f8 f999 	bl	800c5f8 <lwip_htonl>
 80142c6:	4603      	mov	r3, r0
 80142c8:	2200      	movs	r2, #0
 80142ca:	4621      	mov	r1, r4
 80142cc:	6878      	ldr	r0, [r7, #4]
 80142ce:	f7ff fec1 	bl	8014054 <tcp_output_alloc_header>
 80142d2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80142d4:	693b      	ldr	r3, [r7, #16]
 80142d6:	2b00      	cmp	r3, #0
 80142d8:	d109      	bne.n	80142ee <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80142da:	687b      	ldr	r3, [r7, #4]
 80142dc:	8b5b      	ldrh	r3, [r3, #26]
 80142de:	f043 0303 	orr.w	r3, r3, #3
 80142e2:	b29a      	uxth	r2, r3
 80142e4:	687b      	ldr	r3, [r7, #4]
 80142e6:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80142e8:	f06f 0301 	mvn.w	r3, #1
 80142ec:	e023      	b.n	8014336 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80142ee:	7dbb      	ldrb	r3, [r7, #22]
 80142f0:	7dfa      	ldrb	r2, [r7, #23]
 80142f2:	6939      	ldr	r1, [r7, #16]
 80142f4:	6878      	ldr	r0, [r7, #4]
 80142f6:	f7ff feeb 	bl	80140d0 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80142fa:	687a      	ldr	r2, [r7, #4]
 80142fc:	687b      	ldr	r3, [r7, #4]
 80142fe:	3304      	adds	r3, #4
 8014300:	6939      	ldr	r1, [r7, #16]
 8014302:	6878      	ldr	r0, [r7, #4]
 8014304:	f7ff ff24 	bl	8014150 <tcp_output_control_segment>
 8014308:	4603      	mov	r3, r0
 801430a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801430c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014310:	2b00      	cmp	r3, #0
 8014312:	d007      	beq.n	8014324 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014314:	687b      	ldr	r3, [r7, #4]
 8014316:	8b5b      	ldrh	r3, [r3, #26]
 8014318:	f043 0303 	orr.w	r3, r3, #3
 801431c:	b29a      	uxth	r2, r3
 801431e:	687b      	ldr	r3, [r7, #4]
 8014320:	835a      	strh	r2, [r3, #26]
 8014322:	e006      	b.n	8014332 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014324:	687b      	ldr	r3, [r7, #4]
 8014326:	8b5b      	ldrh	r3, [r3, #26]
 8014328:	f023 0303 	bic.w	r3, r3, #3
 801432c:	b29a      	uxth	r2, r3
 801432e:	687b      	ldr	r3, [r7, #4]
 8014330:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8014332:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014336:	4618      	mov	r0, r3
 8014338:	371c      	adds	r7, #28
 801433a:	46bd      	mov	sp, r7
 801433c:	bd90      	pop	{r4, r7, pc}
 801433e:	bf00      	nop
 8014340:	0801d318 	.word	0x0801d318
 8014344:	0801dad4 	.word	0x0801dad4
 8014348:	0801d36c 	.word	0x0801d36c

0801434c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801434c:	b590      	push	{r4, r7, lr}
 801434e:	b087      	sub	sp, #28
 8014350:	af00      	add	r7, sp, #0
 8014352:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014354:	2300      	movs	r3, #0
 8014356:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8014358:	687b      	ldr	r3, [r7, #4]
 801435a:	2b00      	cmp	r3, #0
 801435c:	d106      	bne.n	801436c <tcp_keepalive+0x20>
 801435e:	4b18      	ldr	r3, [pc, #96]	; (80143c0 <tcp_keepalive+0x74>)
 8014360:	f640 0224 	movw	r2, #2084	; 0x824
 8014364:	4917      	ldr	r1, [pc, #92]	; (80143c4 <tcp_keepalive+0x78>)
 8014366:	4818      	ldr	r0, [pc, #96]	; (80143c8 <tcp_keepalive+0x7c>)
 8014368:	f006 fa1c 	bl	801a7a4 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801436c:	7dfb      	ldrb	r3, [r7, #23]
 801436e:	b29c      	uxth	r4, r3
 8014370:	687b      	ldr	r3, [r7, #4]
 8014372:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014374:	3b01      	subs	r3, #1
 8014376:	4618      	mov	r0, r3
 8014378:	f7f8 f93e 	bl	800c5f8 <lwip_htonl>
 801437c:	4603      	mov	r3, r0
 801437e:	2200      	movs	r2, #0
 8014380:	4621      	mov	r1, r4
 8014382:	6878      	ldr	r0, [r7, #4]
 8014384:	f7ff fe66 	bl	8014054 <tcp_output_alloc_header>
 8014388:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801438a:	693b      	ldr	r3, [r7, #16]
 801438c:	2b00      	cmp	r3, #0
 801438e:	d102      	bne.n	8014396 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8014390:	f04f 33ff 	mov.w	r3, #4294967295
 8014394:	e010      	b.n	80143b8 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014396:	7dfb      	ldrb	r3, [r7, #23]
 8014398:	2200      	movs	r2, #0
 801439a:	6939      	ldr	r1, [r7, #16]
 801439c:	6878      	ldr	r0, [r7, #4]
 801439e:	f7ff fe97 	bl	80140d0 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80143a2:	687a      	ldr	r2, [r7, #4]
 80143a4:	687b      	ldr	r3, [r7, #4]
 80143a6:	3304      	adds	r3, #4
 80143a8:	6939      	ldr	r1, [r7, #16]
 80143aa:	6878      	ldr	r0, [r7, #4]
 80143ac:	f7ff fed0 	bl	8014150 <tcp_output_control_segment>
 80143b0:	4603      	mov	r3, r0
 80143b2:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80143b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80143b8:	4618      	mov	r0, r3
 80143ba:	371c      	adds	r7, #28
 80143bc:	46bd      	mov	sp, r7
 80143be:	bd90      	pop	{r4, r7, pc}
 80143c0:	0801d318 	.word	0x0801d318
 80143c4:	0801daf4 	.word	0x0801daf4
 80143c8:	0801d36c 	.word	0x0801d36c

080143cc <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80143cc:	b590      	push	{r4, r7, lr}
 80143ce:	b08b      	sub	sp, #44	; 0x2c
 80143d0:	af00      	add	r7, sp, #0
 80143d2:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80143d4:	2300      	movs	r3, #0
 80143d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80143da:	687b      	ldr	r3, [r7, #4]
 80143dc:	2b00      	cmp	r3, #0
 80143de:	d106      	bne.n	80143ee <tcp_zero_window_probe+0x22>
 80143e0:	4b4c      	ldr	r3, [pc, #304]	; (8014514 <tcp_zero_window_probe+0x148>)
 80143e2:	f640 024f 	movw	r2, #2127	; 0x84f
 80143e6:	494c      	ldr	r1, [pc, #304]	; (8014518 <tcp_zero_window_probe+0x14c>)
 80143e8:	484c      	ldr	r0, [pc, #304]	; (801451c <tcp_zero_window_probe+0x150>)
 80143ea:	f006 f9db 	bl	801a7a4 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80143ee:	687b      	ldr	r3, [r7, #4]
 80143f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80143f2:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80143f4:	6a3b      	ldr	r3, [r7, #32]
 80143f6:	2b00      	cmp	r3, #0
 80143f8:	d101      	bne.n	80143fe <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80143fa:	2300      	movs	r3, #0
 80143fc:	e086      	b.n	801450c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80143fe:	687b      	ldr	r3, [r7, #4]
 8014400:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8014404:	2bff      	cmp	r3, #255	; 0xff
 8014406:	d007      	beq.n	8014418 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8014408:	687b      	ldr	r3, [r7, #4]
 801440a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801440e:	3301      	adds	r3, #1
 8014410:	b2da      	uxtb	r2, r3
 8014412:	687b      	ldr	r3, [r7, #4]
 8014414:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8014418:	6a3b      	ldr	r3, [r7, #32]
 801441a:	68db      	ldr	r3, [r3, #12]
 801441c:	899b      	ldrh	r3, [r3, #12]
 801441e:	b29b      	uxth	r3, r3
 8014420:	4618      	mov	r0, r3
 8014422:	f7f8 f8d5 	bl	800c5d0 <lwip_htons>
 8014426:	4603      	mov	r3, r0
 8014428:	b2db      	uxtb	r3, r3
 801442a:	f003 0301 	and.w	r3, r3, #1
 801442e:	2b00      	cmp	r3, #0
 8014430:	d005      	beq.n	801443e <tcp_zero_window_probe+0x72>
 8014432:	6a3b      	ldr	r3, [r7, #32]
 8014434:	891b      	ldrh	r3, [r3, #8]
 8014436:	2b00      	cmp	r3, #0
 8014438:	d101      	bne.n	801443e <tcp_zero_window_probe+0x72>
 801443a:	2301      	movs	r3, #1
 801443c:	e000      	b.n	8014440 <tcp_zero_window_probe+0x74>
 801443e:	2300      	movs	r3, #0
 8014440:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8014442:	7ffb      	ldrb	r3, [r7, #31]
 8014444:	2b00      	cmp	r3, #0
 8014446:	bf0c      	ite	eq
 8014448:	2301      	moveq	r3, #1
 801444a:	2300      	movne	r3, #0
 801444c:	b2db      	uxtb	r3, r3
 801444e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8014450:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014454:	b299      	uxth	r1, r3
 8014456:	6a3b      	ldr	r3, [r7, #32]
 8014458:	68db      	ldr	r3, [r3, #12]
 801445a:	685b      	ldr	r3, [r3, #4]
 801445c:	8bba      	ldrh	r2, [r7, #28]
 801445e:	6878      	ldr	r0, [r7, #4]
 8014460:	f7ff fdf8 	bl	8014054 <tcp_output_alloc_header>
 8014464:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8014466:	69bb      	ldr	r3, [r7, #24]
 8014468:	2b00      	cmp	r3, #0
 801446a:	d102      	bne.n	8014472 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801446c:	f04f 33ff 	mov.w	r3, #4294967295
 8014470:	e04c      	b.n	801450c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8014472:	69bb      	ldr	r3, [r7, #24]
 8014474:	685b      	ldr	r3, [r3, #4]
 8014476:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8014478:	7ffb      	ldrb	r3, [r7, #31]
 801447a:	2b00      	cmp	r3, #0
 801447c:	d011      	beq.n	80144a2 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801447e:	697b      	ldr	r3, [r7, #20]
 8014480:	899b      	ldrh	r3, [r3, #12]
 8014482:	b29b      	uxth	r3, r3
 8014484:	b21b      	sxth	r3, r3
 8014486:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801448a:	b21c      	sxth	r4, r3
 801448c:	2011      	movs	r0, #17
 801448e:	f7f8 f89f 	bl	800c5d0 <lwip_htons>
 8014492:	4603      	mov	r3, r0
 8014494:	b21b      	sxth	r3, r3
 8014496:	4323      	orrs	r3, r4
 8014498:	b21b      	sxth	r3, r3
 801449a:	b29a      	uxth	r2, r3
 801449c:	697b      	ldr	r3, [r7, #20]
 801449e:	819a      	strh	r2, [r3, #12]
 80144a0:	e010      	b.n	80144c4 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80144a2:	69bb      	ldr	r3, [r7, #24]
 80144a4:	685b      	ldr	r3, [r3, #4]
 80144a6:	3314      	adds	r3, #20
 80144a8:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80144aa:	6a3b      	ldr	r3, [r7, #32]
 80144ac:	6858      	ldr	r0, [r3, #4]
 80144ae:	6a3b      	ldr	r3, [r7, #32]
 80144b0:	685b      	ldr	r3, [r3, #4]
 80144b2:	891a      	ldrh	r2, [r3, #8]
 80144b4:	6a3b      	ldr	r3, [r7, #32]
 80144b6:	891b      	ldrh	r3, [r3, #8]
 80144b8:	1ad3      	subs	r3, r2, r3
 80144ba:	b29b      	uxth	r3, r3
 80144bc:	2201      	movs	r2, #1
 80144be:	6939      	ldr	r1, [r7, #16]
 80144c0:	f7f9 feee 	bl	800e2a0 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80144c4:	6a3b      	ldr	r3, [r7, #32]
 80144c6:	68db      	ldr	r3, [r3, #12]
 80144c8:	685b      	ldr	r3, [r3, #4]
 80144ca:	4618      	mov	r0, r3
 80144cc:	f7f8 f894 	bl	800c5f8 <lwip_htonl>
 80144d0:	4603      	mov	r3, r0
 80144d2:	3301      	adds	r3, #1
 80144d4:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80144d6:	687b      	ldr	r3, [r7, #4]
 80144d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80144da:	68fb      	ldr	r3, [r7, #12]
 80144dc:	1ad3      	subs	r3, r2, r3
 80144de:	2b00      	cmp	r3, #0
 80144e0:	da02      	bge.n	80144e8 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 80144e2:	687b      	ldr	r3, [r7, #4]
 80144e4:	68fa      	ldr	r2, [r7, #12]
 80144e6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80144e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80144ec:	2200      	movs	r2, #0
 80144ee:	69b9      	ldr	r1, [r7, #24]
 80144f0:	6878      	ldr	r0, [r7, #4]
 80144f2:	f7ff fded 	bl	80140d0 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80144f6:	687a      	ldr	r2, [r7, #4]
 80144f8:	687b      	ldr	r3, [r7, #4]
 80144fa:	3304      	adds	r3, #4
 80144fc:	69b9      	ldr	r1, [r7, #24]
 80144fe:	6878      	ldr	r0, [r7, #4]
 8014500:	f7ff fe26 	bl	8014150 <tcp_output_control_segment>
 8014504:	4603      	mov	r3, r0
 8014506:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8014508:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801450c:	4618      	mov	r0, r3
 801450e:	372c      	adds	r7, #44	; 0x2c
 8014510:	46bd      	mov	sp, r7
 8014512:	bd90      	pop	{r4, r7, pc}
 8014514:	0801d318 	.word	0x0801d318
 8014518:	0801db10 	.word	0x0801db10
 801451c:	0801d36c 	.word	0x0801d36c

08014520 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8014520:	b580      	push	{r7, lr}
 8014522:	b082      	sub	sp, #8
 8014524:	af00      	add	r7, sp, #0
 8014526:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8014528:	f7fa f80a 	bl	800e540 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801452c:	4b0a      	ldr	r3, [pc, #40]	; (8014558 <tcpip_tcp_timer+0x38>)
 801452e:	681b      	ldr	r3, [r3, #0]
 8014530:	2b00      	cmp	r3, #0
 8014532:	d103      	bne.n	801453c <tcpip_tcp_timer+0x1c>
 8014534:	4b09      	ldr	r3, [pc, #36]	; (801455c <tcpip_tcp_timer+0x3c>)
 8014536:	681b      	ldr	r3, [r3, #0]
 8014538:	2b00      	cmp	r3, #0
 801453a:	d005      	beq.n	8014548 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801453c:	2200      	movs	r2, #0
 801453e:	4908      	ldr	r1, [pc, #32]	; (8014560 <tcpip_tcp_timer+0x40>)
 8014540:	20fa      	movs	r0, #250	; 0xfa
 8014542:	f000 f8f3 	bl	801472c <sys_timeout>
 8014546:	e003      	b.n	8014550 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8014548:	4b06      	ldr	r3, [pc, #24]	; (8014564 <tcpip_tcp_timer+0x44>)
 801454a:	2200      	movs	r2, #0
 801454c:	601a      	str	r2, [r3, #0]
  }
}
 801454e:	bf00      	nop
 8014550:	bf00      	nop
 8014552:	3708      	adds	r7, #8
 8014554:	46bd      	mov	sp, r7
 8014556:	bd80      	pop	{r7, pc}
 8014558:	2000bf2c 	.word	0x2000bf2c
 801455c:	2000bf30 	.word	0x2000bf30
 8014560:	08014521 	.word	0x08014521
 8014564:	2000bf78 	.word	0x2000bf78

08014568 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8014568:	b580      	push	{r7, lr}
 801456a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801456c:	4b0a      	ldr	r3, [pc, #40]	; (8014598 <tcp_timer_needed+0x30>)
 801456e:	681b      	ldr	r3, [r3, #0]
 8014570:	2b00      	cmp	r3, #0
 8014572:	d10f      	bne.n	8014594 <tcp_timer_needed+0x2c>
 8014574:	4b09      	ldr	r3, [pc, #36]	; (801459c <tcp_timer_needed+0x34>)
 8014576:	681b      	ldr	r3, [r3, #0]
 8014578:	2b00      	cmp	r3, #0
 801457a:	d103      	bne.n	8014584 <tcp_timer_needed+0x1c>
 801457c:	4b08      	ldr	r3, [pc, #32]	; (80145a0 <tcp_timer_needed+0x38>)
 801457e:	681b      	ldr	r3, [r3, #0]
 8014580:	2b00      	cmp	r3, #0
 8014582:	d007      	beq.n	8014594 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8014584:	4b04      	ldr	r3, [pc, #16]	; (8014598 <tcp_timer_needed+0x30>)
 8014586:	2201      	movs	r2, #1
 8014588:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801458a:	2200      	movs	r2, #0
 801458c:	4905      	ldr	r1, [pc, #20]	; (80145a4 <tcp_timer_needed+0x3c>)
 801458e:	20fa      	movs	r0, #250	; 0xfa
 8014590:	f000 f8cc 	bl	801472c <sys_timeout>
  }
}
 8014594:	bf00      	nop
 8014596:	bd80      	pop	{r7, pc}
 8014598:	2000bf78 	.word	0x2000bf78
 801459c:	2000bf2c 	.word	0x2000bf2c
 80145a0:	2000bf30 	.word	0x2000bf30
 80145a4:	08014521 	.word	0x08014521

080145a8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80145a8:	b580      	push	{r7, lr}
 80145aa:	b086      	sub	sp, #24
 80145ac:	af00      	add	r7, sp, #0
 80145ae:	60f8      	str	r0, [r7, #12]
 80145b0:	60b9      	str	r1, [r7, #8]
 80145b2:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80145b4:	200a      	movs	r0, #10
 80145b6:	f7f8 fdbb 	bl	800d130 <memp_malloc>
 80145ba:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 80145bc:	693b      	ldr	r3, [r7, #16]
 80145be:	2b00      	cmp	r3, #0
 80145c0:	d109      	bne.n	80145d6 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80145c2:	693b      	ldr	r3, [r7, #16]
 80145c4:	2b00      	cmp	r3, #0
 80145c6:	d151      	bne.n	801466c <sys_timeout_abs+0xc4>
 80145c8:	4b2a      	ldr	r3, [pc, #168]	; (8014674 <sys_timeout_abs+0xcc>)
 80145ca:	22be      	movs	r2, #190	; 0xbe
 80145cc:	492a      	ldr	r1, [pc, #168]	; (8014678 <sys_timeout_abs+0xd0>)
 80145ce:	482b      	ldr	r0, [pc, #172]	; (801467c <sys_timeout_abs+0xd4>)
 80145d0:	f006 f8e8 	bl	801a7a4 <iprintf>
    return;
 80145d4:	e04a      	b.n	801466c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80145d6:	693b      	ldr	r3, [r7, #16]
 80145d8:	2200      	movs	r2, #0
 80145da:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80145dc:	693b      	ldr	r3, [r7, #16]
 80145de:	68ba      	ldr	r2, [r7, #8]
 80145e0:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80145e2:	693b      	ldr	r3, [r7, #16]
 80145e4:	687a      	ldr	r2, [r7, #4]
 80145e6:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 80145e8:	693b      	ldr	r3, [r7, #16]
 80145ea:	68fa      	ldr	r2, [r7, #12]
 80145ec:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80145ee:	4b24      	ldr	r3, [pc, #144]	; (8014680 <sys_timeout_abs+0xd8>)
 80145f0:	681b      	ldr	r3, [r3, #0]
 80145f2:	2b00      	cmp	r3, #0
 80145f4:	d103      	bne.n	80145fe <sys_timeout_abs+0x56>
    next_timeout = timeout;
 80145f6:	4a22      	ldr	r2, [pc, #136]	; (8014680 <sys_timeout_abs+0xd8>)
 80145f8:	693b      	ldr	r3, [r7, #16]
 80145fa:	6013      	str	r3, [r2, #0]
    return;
 80145fc:	e037      	b.n	801466e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80145fe:	693b      	ldr	r3, [r7, #16]
 8014600:	685a      	ldr	r2, [r3, #4]
 8014602:	4b1f      	ldr	r3, [pc, #124]	; (8014680 <sys_timeout_abs+0xd8>)
 8014604:	681b      	ldr	r3, [r3, #0]
 8014606:	685b      	ldr	r3, [r3, #4]
 8014608:	1ad3      	subs	r3, r2, r3
 801460a:	0fdb      	lsrs	r3, r3, #31
 801460c:	f003 0301 	and.w	r3, r3, #1
 8014610:	b2db      	uxtb	r3, r3
 8014612:	2b00      	cmp	r3, #0
 8014614:	d007      	beq.n	8014626 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8014616:	4b1a      	ldr	r3, [pc, #104]	; (8014680 <sys_timeout_abs+0xd8>)
 8014618:	681a      	ldr	r2, [r3, #0]
 801461a:	693b      	ldr	r3, [r7, #16]
 801461c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801461e:	4a18      	ldr	r2, [pc, #96]	; (8014680 <sys_timeout_abs+0xd8>)
 8014620:	693b      	ldr	r3, [r7, #16]
 8014622:	6013      	str	r3, [r2, #0]
 8014624:	e023      	b.n	801466e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8014626:	4b16      	ldr	r3, [pc, #88]	; (8014680 <sys_timeout_abs+0xd8>)
 8014628:	681b      	ldr	r3, [r3, #0]
 801462a:	617b      	str	r3, [r7, #20]
 801462c:	e01a      	b.n	8014664 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801462e:	697b      	ldr	r3, [r7, #20]
 8014630:	681b      	ldr	r3, [r3, #0]
 8014632:	2b00      	cmp	r3, #0
 8014634:	d00b      	beq.n	801464e <sys_timeout_abs+0xa6>
 8014636:	693b      	ldr	r3, [r7, #16]
 8014638:	685a      	ldr	r2, [r3, #4]
 801463a:	697b      	ldr	r3, [r7, #20]
 801463c:	681b      	ldr	r3, [r3, #0]
 801463e:	685b      	ldr	r3, [r3, #4]
 8014640:	1ad3      	subs	r3, r2, r3
 8014642:	0fdb      	lsrs	r3, r3, #31
 8014644:	f003 0301 	and.w	r3, r3, #1
 8014648:	b2db      	uxtb	r3, r3
 801464a:	2b00      	cmp	r3, #0
 801464c:	d007      	beq.n	801465e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801464e:	697b      	ldr	r3, [r7, #20]
 8014650:	681a      	ldr	r2, [r3, #0]
 8014652:	693b      	ldr	r3, [r7, #16]
 8014654:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8014656:	697b      	ldr	r3, [r7, #20]
 8014658:	693a      	ldr	r2, [r7, #16]
 801465a:	601a      	str	r2, [r3, #0]
        break;
 801465c:	e007      	b.n	801466e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801465e:	697b      	ldr	r3, [r7, #20]
 8014660:	681b      	ldr	r3, [r3, #0]
 8014662:	617b      	str	r3, [r7, #20]
 8014664:	697b      	ldr	r3, [r7, #20]
 8014666:	2b00      	cmp	r3, #0
 8014668:	d1e1      	bne.n	801462e <sys_timeout_abs+0x86>
 801466a:	e000      	b.n	801466e <sys_timeout_abs+0xc6>
    return;
 801466c:	bf00      	nop
      }
    }
  }
}
 801466e:	3718      	adds	r7, #24
 8014670:	46bd      	mov	sp, r7
 8014672:	bd80      	pop	{r7, pc}
 8014674:	0801db34 	.word	0x0801db34
 8014678:	0801db68 	.word	0x0801db68
 801467c:	0801dba8 	.word	0x0801dba8
 8014680:	2000bf70 	.word	0x2000bf70

08014684 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8014684:	b580      	push	{r7, lr}
 8014686:	b086      	sub	sp, #24
 8014688:	af00      	add	r7, sp, #0
 801468a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801468c:	687b      	ldr	r3, [r7, #4]
 801468e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8014690:	697b      	ldr	r3, [r7, #20]
 8014692:	685b      	ldr	r3, [r3, #4]
 8014694:	4798      	blx	r3

  now = sys_now();
 8014696:	f7f1 fcc5 	bl	8006024 <sys_now>
 801469a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801469c:	697b      	ldr	r3, [r7, #20]
 801469e:	681a      	ldr	r2, [r3, #0]
 80146a0:	4b0f      	ldr	r3, [pc, #60]	; (80146e0 <lwip_cyclic_timer+0x5c>)
 80146a2:	681b      	ldr	r3, [r3, #0]
 80146a4:	4413      	add	r3, r2
 80146a6:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80146a8:	68fa      	ldr	r2, [r7, #12]
 80146aa:	693b      	ldr	r3, [r7, #16]
 80146ac:	1ad3      	subs	r3, r2, r3
 80146ae:	0fdb      	lsrs	r3, r3, #31
 80146b0:	f003 0301 	and.w	r3, r3, #1
 80146b4:	b2db      	uxtb	r3, r3
 80146b6:	2b00      	cmp	r3, #0
 80146b8:	d009      	beq.n	80146ce <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80146ba:	697b      	ldr	r3, [r7, #20]
 80146bc:	681a      	ldr	r2, [r3, #0]
 80146be:	693b      	ldr	r3, [r7, #16]
 80146c0:	4413      	add	r3, r2
 80146c2:	687a      	ldr	r2, [r7, #4]
 80146c4:	4907      	ldr	r1, [pc, #28]	; (80146e4 <lwip_cyclic_timer+0x60>)
 80146c6:	4618      	mov	r0, r3
 80146c8:	f7ff ff6e 	bl	80145a8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80146cc:	e004      	b.n	80146d8 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80146ce:	687a      	ldr	r2, [r7, #4]
 80146d0:	4904      	ldr	r1, [pc, #16]	; (80146e4 <lwip_cyclic_timer+0x60>)
 80146d2:	68f8      	ldr	r0, [r7, #12]
 80146d4:	f7ff ff68 	bl	80145a8 <sys_timeout_abs>
}
 80146d8:	bf00      	nop
 80146da:	3718      	adds	r7, #24
 80146dc:	46bd      	mov	sp, r7
 80146de:	bd80      	pop	{r7, pc}
 80146e0:	2000bf74 	.word	0x2000bf74
 80146e4:	08014685 	.word	0x08014685

080146e8 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80146e8:	b580      	push	{r7, lr}
 80146ea:	b082      	sub	sp, #8
 80146ec:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80146ee:	2301      	movs	r3, #1
 80146f0:	607b      	str	r3, [r7, #4]
 80146f2:	e00e      	b.n	8014712 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80146f4:	4a0b      	ldr	r2, [pc, #44]	; (8014724 <sys_timeouts_init+0x3c>)
 80146f6:	687b      	ldr	r3, [r7, #4]
 80146f8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80146fc:	687b      	ldr	r3, [r7, #4]
 80146fe:	00db      	lsls	r3, r3, #3
 8014700:	4a08      	ldr	r2, [pc, #32]	; (8014724 <sys_timeouts_init+0x3c>)
 8014702:	4413      	add	r3, r2
 8014704:	461a      	mov	r2, r3
 8014706:	4908      	ldr	r1, [pc, #32]	; (8014728 <sys_timeouts_init+0x40>)
 8014708:	f000 f810 	bl	801472c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801470c:	687b      	ldr	r3, [r7, #4]
 801470e:	3301      	adds	r3, #1
 8014710:	607b      	str	r3, [r7, #4]
 8014712:	687b      	ldr	r3, [r7, #4]
 8014714:	2b04      	cmp	r3, #4
 8014716:	d9ed      	bls.n	80146f4 <sys_timeouts_init+0xc>
  }
}
 8014718:	bf00      	nop
 801471a:	bf00      	nop
 801471c:	3708      	adds	r7, #8
 801471e:	46bd      	mov	sp, r7
 8014720:	bd80      	pop	{r7, pc}
 8014722:	bf00      	nop
 8014724:	0801eb54 	.word	0x0801eb54
 8014728:	08014685 	.word	0x08014685

0801472c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801472c:	b580      	push	{r7, lr}
 801472e:	b086      	sub	sp, #24
 8014730:	af00      	add	r7, sp, #0
 8014732:	60f8      	str	r0, [r7, #12]
 8014734:	60b9      	str	r1, [r7, #8]
 8014736:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8014738:	68fb      	ldr	r3, [r7, #12]
 801473a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801473e:	d306      	bcc.n	801474e <sys_timeout+0x22>
 8014740:	4b0a      	ldr	r3, [pc, #40]	; (801476c <sys_timeout+0x40>)
 8014742:	f240 1229 	movw	r2, #297	; 0x129
 8014746:	490a      	ldr	r1, [pc, #40]	; (8014770 <sys_timeout+0x44>)
 8014748:	480a      	ldr	r0, [pc, #40]	; (8014774 <sys_timeout+0x48>)
 801474a:	f006 f82b 	bl	801a7a4 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801474e:	f7f1 fc69 	bl	8006024 <sys_now>
 8014752:	4602      	mov	r2, r0
 8014754:	68fb      	ldr	r3, [r7, #12]
 8014756:	4413      	add	r3, r2
 8014758:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801475a:	687a      	ldr	r2, [r7, #4]
 801475c:	68b9      	ldr	r1, [r7, #8]
 801475e:	6978      	ldr	r0, [r7, #20]
 8014760:	f7ff ff22 	bl	80145a8 <sys_timeout_abs>
#endif
}
 8014764:	bf00      	nop
 8014766:	3718      	adds	r7, #24
 8014768:	46bd      	mov	sp, r7
 801476a:	bd80      	pop	{r7, pc}
 801476c:	0801db34 	.word	0x0801db34
 8014770:	0801dbd0 	.word	0x0801dbd0
 8014774:	0801dba8 	.word	0x0801dba8

08014778 <sys_untimeout>:
 * @param handler callback function that would be called by the timeout
 * @param arg callback argument that would be passed to handler
*/
void
sys_untimeout(sys_timeout_handler handler, void *arg)
{
 8014778:	b580      	push	{r7, lr}
 801477a:	b084      	sub	sp, #16
 801477c:	af00      	add	r7, sp, #0
 801477e:	6078      	str	r0, [r7, #4]
 8014780:	6039      	str	r1, [r7, #0]
  struct sys_timeo *prev_t, *t;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8014782:	4b19      	ldr	r3, [pc, #100]	; (80147e8 <sys_untimeout+0x70>)
 8014784:	681b      	ldr	r3, [r3, #0]
 8014786:	2b00      	cmp	r3, #0
 8014788:	d029      	beq.n	80147de <sys_untimeout+0x66>
    return;
  }

  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 801478a:	4b17      	ldr	r3, [pc, #92]	; (80147e8 <sys_untimeout+0x70>)
 801478c:	681b      	ldr	r3, [r3, #0]
 801478e:	60bb      	str	r3, [r7, #8]
 8014790:	2300      	movs	r3, #0
 8014792:	60fb      	str	r3, [r7, #12]
 8014794:	e01f      	b.n	80147d6 <sys_untimeout+0x5e>
    if ((t->h == handler) && (t->arg == arg)) {
 8014796:	68bb      	ldr	r3, [r7, #8]
 8014798:	689b      	ldr	r3, [r3, #8]
 801479a:	687a      	ldr	r2, [r7, #4]
 801479c:	429a      	cmp	r2, r3
 801479e:	d115      	bne.n	80147cc <sys_untimeout+0x54>
 80147a0:	68bb      	ldr	r3, [r7, #8]
 80147a2:	68db      	ldr	r3, [r3, #12]
 80147a4:	683a      	ldr	r2, [r7, #0]
 80147a6:	429a      	cmp	r2, r3
 80147a8:	d110      	bne.n	80147cc <sys_untimeout+0x54>
      /* We have a match */
      /* Unlink from previous in list */
      if (prev_t == NULL) {
 80147aa:	68fb      	ldr	r3, [r7, #12]
 80147ac:	2b00      	cmp	r3, #0
 80147ae:	d104      	bne.n	80147ba <sys_untimeout+0x42>
        next_timeout = t->next;
 80147b0:	68bb      	ldr	r3, [r7, #8]
 80147b2:	681b      	ldr	r3, [r3, #0]
 80147b4:	4a0c      	ldr	r2, [pc, #48]	; (80147e8 <sys_untimeout+0x70>)
 80147b6:	6013      	str	r3, [r2, #0]
 80147b8:	e003      	b.n	80147c2 <sys_untimeout+0x4a>
      } else {
        prev_t->next = t->next;
 80147ba:	68bb      	ldr	r3, [r7, #8]
 80147bc:	681a      	ldr	r2, [r3, #0]
 80147be:	68fb      	ldr	r3, [r7, #12]
 80147c0:	601a      	str	r2, [r3, #0]
      }
      memp_free(MEMP_SYS_TIMEOUT, t);
 80147c2:	68b9      	ldr	r1, [r7, #8]
 80147c4:	200a      	movs	r0, #10
 80147c6:	f7f8 fd29 	bl	800d21c <memp_free>
      return;
 80147ca:	e009      	b.n	80147e0 <sys_untimeout+0x68>
  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 80147cc:	68bb      	ldr	r3, [r7, #8]
 80147ce:	60fb      	str	r3, [r7, #12]
 80147d0:	68bb      	ldr	r3, [r7, #8]
 80147d2:	681b      	ldr	r3, [r3, #0]
 80147d4:	60bb      	str	r3, [r7, #8]
 80147d6:	68bb      	ldr	r3, [r7, #8]
 80147d8:	2b00      	cmp	r3, #0
 80147da:	d1dc      	bne.n	8014796 <sys_untimeout+0x1e>
    }
  }
  return;
 80147dc:	e000      	b.n	80147e0 <sys_untimeout+0x68>
    return;
 80147de:	bf00      	nop
}
 80147e0:	3710      	adds	r7, #16
 80147e2:	46bd      	mov	sp, r7
 80147e4:	bd80      	pop	{r7, pc}
 80147e6:	bf00      	nop
 80147e8:	2000bf70 	.word	0x2000bf70

080147ec <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80147ec:	b580      	push	{r7, lr}
 80147ee:	b084      	sub	sp, #16
 80147f0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80147f2:	f7f1 fc17 	bl	8006024 <sys_now>
 80147f6:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 80147f8:	4b17      	ldr	r3, [pc, #92]	; (8014858 <sys_check_timeouts+0x6c>)
 80147fa:	681b      	ldr	r3, [r3, #0]
 80147fc:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80147fe:	68bb      	ldr	r3, [r7, #8]
 8014800:	2b00      	cmp	r3, #0
 8014802:	d022      	beq.n	801484a <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8014804:	68bb      	ldr	r3, [r7, #8]
 8014806:	685b      	ldr	r3, [r3, #4]
 8014808:	68fa      	ldr	r2, [r7, #12]
 801480a:	1ad3      	subs	r3, r2, r3
 801480c:	0fdb      	lsrs	r3, r3, #31
 801480e:	f003 0301 	and.w	r3, r3, #1
 8014812:	b2db      	uxtb	r3, r3
 8014814:	2b00      	cmp	r3, #0
 8014816:	d11a      	bne.n	801484e <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8014818:	68bb      	ldr	r3, [r7, #8]
 801481a:	681b      	ldr	r3, [r3, #0]
 801481c:	4a0e      	ldr	r2, [pc, #56]	; (8014858 <sys_check_timeouts+0x6c>)
 801481e:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8014820:	68bb      	ldr	r3, [r7, #8]
 8014822:	689b      	ldr	r3, [r3, #8]
 8014824:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8014826:	68bb      	ldr	r3, [r7, #8]
 8014828:	68db      	ldr	r3, [r3, #12]
 801482a:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801482c:	68bb      	ldr	r3, [r7, #8]
 801482e:	685b      	ldr	r3, [r3, #4]
 8014830:	4a0a      	ldr	r2, [pc, #40]	; (801485c <sys_check_timeouts+0x70>)
 8014832:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8014834:	68b9      	ldr	r1, [r7, #8]
 8014836:	200a      	movs	r0, #10
 8014838:	f7f8 fcf0 	bl	800d21c <memp_free>
    if (handler != NULL) {
 801483c:	687b      	ldr	r3, [r7, #4]
 801483e:	2b00      	cmp	r3, #0
 8014840:	d0da      	beq.n	80147f8 <sys_check_timeouts+0xc>
      handler(arg);
 8014842:	687b      	ldr	r3, [r7, #4]
 8014844:	6838      	ldr	r0, [r7, #0]
 8014846:	4798      	blx	r3
  do {
 8014848:	e7d6      	b.n	80147f8 <sys_check_timeouts+0xc>
      return;
 801484a:	bf00      	nop
 801484c:	e000      	b.n	8014850 <sys_check_timeouts+0x64>
      return;
 801484e:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8014850:	3710      	adds	r7, #16
 8014852:	46bd      	mov	sp, r7
 8014854:	bd80      	pop	{r7, pc}
 8014856:	bf00      	nop
 8014858:	2000bf70 	.word	0x2000bf70
 801485c:	2000bf74 	.word	0x2000bf74

08014860 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8014860:	b580      	push	{r7, lr}
 8014862:	b082      	sub	sp, #8
 8014864:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8014866:	4b16      	ldr	r3, [pc, #88]	; (80148c0 <sys_timeouts_sleeptime+0x60>)
 8014868:	681b      	ldr	r3, [r3, #0]
 801486a:	2b00      	cmp	r3, #0
 801486c:	d102      	bne.n	8014874 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801486e:	f04f 33ff 	mov.w	r3, #4294967295
 8014872:	e020      	b.n	80148b6 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8014874:	f7f1 fbd6 	bl	8006024 <sys_now>
 8014878:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801487a:	4b11      	ldr	r3, [pc, #68]	; (80148c0 <sys_timeouts_sleeptime+0x60>)
 801487c:	681b      	ldr	r3, [r3, #0]
 801487e:	685a      	ldr	r2, [r3, #4]
 8014880:	687b      	ldr	r3, [r7, #4]
 8014882:	1ad3      	subs	r3, r2, r3
 8014884:	0fdb      	lsrs	r3, r3, #31
 8014886:	f003 0301 	and.w	r3, r3, #1
 801488a:	b2db      	uxtb	r3, r3
 801488c:	2b00      	cmp	r3, #0
 801488e:	d001      	beq.n	8014894 <sys_timeouts_sleeptime+0x34>
    return 0;
 8014890:	2300      	movs	r3, #0
 8014892:	e010      	b.n	80148b6 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8014894:	4b0a      	ldr	r3, [pc, #40]	; (80148c0 <sys_timeouts_sleeptime+0x60>)
 8014896:	681b      	ldr	r3, [r3, #0]
 8014898:	685a      	ldr	r2, [r3, #4]
 801489a:	687b      	ldr	r3, [r7, #4]
 801489c:	1ad3      	subs	r3, r2, r3
 801489e:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 80148a0:	683b      	ldr	r3, [r7, #0]
 80148a2:	2b00      	cmp	r3, #0
 80148a4:	da06      	bge.n	80148b4 <sys_timeouts_sleeptime+0x54>
 80148a6:	4b07      	ldr	r3, [pc, #28]	; (80148c4 <sys_timeouts_sleeptime+0x64>)
 80148a8:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80148ac:	4906      	ldr	r1, [pc, #24]	; (80148c8 <sys_timeouts_sleeptime+0x68>)
 80148ae:	4807      	ldr	r0, [pc, #28]	; (80148cc <sys_timeouts_sleeptime+0x6c>)
 80148b0:	f005 ff78 	bl	801a7a4 <iprintf>
    return ret;
 80148b4:	683b      	ldr	r3, [r7, #0]
  }
}
 80148b6:	4618      	mov	r0, r3
 80148b8:	3708      	adds	r7, #8
 80148ba:	46bd      	mov	sp, r7
 80148bc:	bd80      	pop	{r7, pc}
 80148be:	bf00      	nop
 80148c0:	2000bf70 	.word	0x2000bf70
 80148c4:	0801db34 	.word	0x0801db34
 80148c8:	0801dc08 	.word	0x0801dc08
 80148cc:	0801dba8 	.word	0x0801dba8

080148d0 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80148d0:	b580      	push	{r7, lr}
 80148d2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80148d4:	f005 ff7e 	bl	801a7d4 <rand>
 80148d8:	4603      	mov	r3, r0
 80148da:	b29b      	uxth	r3, r3
 80148dc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80148e0:	b29b      	uxth	r3, r3
 80148e2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80148e6:	b29a      	uxth	r2, r3
 80148e8:	4b01      	ldr	r3, [pc, #4]	; (80148f0 <udp_init+0x20>)
 80148ea:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80148ec:	bf00      	nop
 80148ee:	bd80      	pop	{r7, pc}
 80148f0:	200000a4 	.word	0x200000a4

080148f4 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80148f4:	b480      	push	{r7}
 80148f6:	b083      	sub	sp, #12
 80148f8:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80148fa:	2300      	movs	r3, #0
 80148fc:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80148fe:	4b17      	ldr	r3, [pc, #92]	; (801495c <udp_new_port+0x68>)
 8014900:	881b      	ldrh	r3, [r3, #0]
 8014902:	1c5a      	adds	r2, r3, #1
 8014904:	b291      	uxth	r1, r2
 8014906:	4a15      	ldr	r2, [pc, #84]	; (801495c <udp_new_port+0x68>)
 8014908:	8011      	strh	r1, [r2, #0]
 801490a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801490e:	4293      	cmp	r3, r2
 8014910:	d103      	bne.n	801491a <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8014912:	4b12      	ldr	r3, [pc, #72]	; (801495c <udp_new_port+0x68>)
 8014914:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8014918:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801491a:	4b11      	ldr	r3, [pc, #68]	; (8014960 <udp_new_port+0x6c>)
 801491c:	681b      	ldr	r3, [r3, #0]
 801491e:	603b      	str	r3, [r7, #0]
 8014920:	e011      	b.n	8014946 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8014922:	683b      	ldr	r3, [r7, #0]
 8014924:	8a5a      	ldrh	r2, [r3, #18]
 8014926:	4b0d      	ldr	r3, [pc, #52]	; (801495c <udp_new_port+0x68>)
 8014928:	881b      	ldrh	r3, [r3, #0]
 801492a:	429a      	cmp	r2, r3
 801492c:	d108      	bne.n	8014940 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801492e:	88fb      	ldrh	r3, [r7, #6]
 8014930:	3301      	adds	r3, #1
 8014932:	80fb      	strh	r3, [r7, #6]
 8014934:	88fb      	ldrh	r3, [r7, #6]
 8014936:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801493a:	d3e0      	bcc.n	80148fe <udp_new_port+0xa>
        return 0;
 801493c:	2300      	movs	r3, #0
 801493e:	e007      	b.n	8014950 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014940:	683b      	ldr	r3, [r7, #0]
 8014942:	68db      	ldr	r3, [r3, #12]
 8014944:	603b      	str	r3, [r7, #0]
 8014946:	683b      	ldr	r3, [r7, #0]
 8014948:	2b00      	cmp	r3, #0
 801494a:	d1ea      	bne.n	8014922 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801494c:	4b03      	ldr	r3, [pc, #12]	; (801495c <udp_new_port+0x68>)
 801494e:	881b      	ldrh	r3, [r3, #0]
}
 8014950:	4618      	mov	r0, r3
 8014952:	370c      	adds	r7, #12
 8014954:	46bd      	mov	sp, r7
 8014956:	bc80      	pop	{r7}
 8014958:	4770      	bx	lr
 801495a:	bf00      	nop
 801495c:	200000a4 	.word	0x200000a4
 8014960:	2000bf7c 	.word	0x2000bf7c

08014964 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8014964:	b580      	push	{r7, lr}
 8014966:	b084      	sub	sp, #16
 8014968:	af00      	add	r7, sp, #0
 801496a:	60f8      	str	r0, [r7, #12]
 801496c:	60b9      	str	r1, [r7, #8]
 801496e:	4613      	mov	r3, r2
 8014970:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8014972:	68fb      	ldr	r3, [r7, #12]
 8014974:	2b00      	cmp	r3, #0
 8014976:	d105      	bne.n	8014984 <udp_input_local_match+0x20>
 8014978:	4b27      	ldr	r3, [pc, #156]	; (8014a18 <udp_input_local_match+0xb4>)
 801497a:	2287      	movs	r2, #135	; 0x87
 801497c:	4927      	ldr	r1, [pc, #156]	; (8014a1c <udp_input_local_match+0xb8>)
 801497e:	4828      	ldr	r0, [pc, #160]	; (8014a20 <udp_input_local_match+0xbc>)
 8014980:	f005 ff10 	bl	801a7a4 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8014984:	68bb      	ldr	r3, [r7, #8]
 8014986:	2b00      	cmp	r3, #0
 8014988:	d105      	bne.n	8014996 <udp_input_local_match+0x32>
 801498a:	4b23      	ldr	r3, [pc, #140]	; (8014a18 <udp_input_local_match+0xb4>)
 801498c:	2288      	movs	r2, #136	; 0x88
 801498e:	4925      	ldr	r1, [pc, #148]	; (8014a24 <udp_input_local_match+0xc0>)
 8014990:	4823      	ldr	r0, [pc, #140]	; (8014a20 <udp_input_local_match+0xbc>)
 8014992:	f005 ff07 	bl	801a7a4 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8014996:	68fb      	ldr	r3, [r7, #12]
 8014998:	7a1b      	ldrb	r3, [r3, #8]
 801499a:	2b00      	cmp	r3, #0
 801499c:	d00b      	beq.n	80149b6 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801499e:	68fb      	ldr	r3, [r7, #12]
 80149a0:	7a1a      	ldrb	r2, [r3, #8]
 80149a2:	4b21      	ldr	r3, [pc, #132]	; (8014a28 <udp_input_local_match+0xc4>)
 80149a4:	685b      	ldr	r3, [r3, #4]
 80149a6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80149aa:	3301      	adds	r3, #1
 80149ac:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80149ae:	429a      	cmp	r2, r3
 80149b0:	d001      	beq.n	80149b6 <udp_input_local_match+0x52>
    return 0;
 80149b2:	2300      	movs	r3, #0
 80149b4:	e02b      	b.n	8014a0e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80149b6:	79fb      	ldrb	r3, [r7, #7]
 80149b8:	2b00      	cmp	r3, #0
 80149ba:	d018      	beq.n	80149ee <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80149bc:	68fb      	ldr	r3, [r7, #12]
 80149be:	2b00      	cmp	r3, #0
 80149c0:	d013      	beq.n	80149ea <udp_input_local_match+0x86>
 80149c2:	68fb      	ldr	r3, [r7, #12]
 80149c4:	681b      	ldr	r3, [r3, #0]
 80149c6:	2b00      	cmp	r3, #0
 80149c8:	d00f      	beq.n	80149ea <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80149ca:	4b17      	ldr	r3, [pc, #92]	; (8014a28 <udp_input_local_match+0xc4>)
 80149cc:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80149ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80149d2:	d00a      	beq.n	80149ea <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80149d4:	68fb      	ldr	r3, [r7, #12]
 80149d6:	681a      	ldr	r2, [r3, #0]
 80149d8:	4b13      	ldr	r3, [pc, #76]	; (8014a28 <udp_input_local_match+0xc4>)
 80149da:	695b      	ldr	r3, [r3, #20]
 80149dc:	405a      	eors	r2, r3
 80149de:	68bb      	ldr	r3, [r7, #8]
 80149e0:	3308      	adds	r3, #8
 80149e2:	681b      	ldr	r3, [r3, #0]
 80149e4:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80149e6:	2b00      	cmp	r3, #0
 80149e8:	d110      	bne.n	8014a0c <udp_input_local_match+0xa8>
          return 1;
 80149ea:	2301      	movs	r3, #1
 80149ec:	e00f      	b.n	8014a0e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80149ee:	68fb      	ldr	r3, [r7, #12]
 80149f0:	2b00      	cmp	r3, #0
 80149f2:	d009      	beq.n	8014a08 <udp_input_local_match+0xa4>
 80149f4:	68fb      	ldr	r3, [r7, #12]
 80149f6:	681b      	ldr	r3, [r3, #0]
 80149f8:	2b00      	cmp	r3, #0
 80149fa:	d005      	beq.n	8014a08 <udp_input_local_match+0xa4>
 80149fc:	68fb      	ldr	r3, [r7, #12]
 80149fe:	681a      	ldr	r2, [r3, #0]
 8014a00:	4b09      	ldr	r3, [pc, #36]	; (8014a28 <udp_input_local_match+0xc4>)
 8014a02:	695b      	ldr	r3, [r3, #20]
 8014a04:	429a      	cmp	r2, r3
 8014a06:	d101      	bne.n	8014a0c <udp_input_local_match+0xa8>
        return 1;
 8014a08:	2301      	movs	r3, #1
 8014a0a:	e000      	b.n	8014a0e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8014a0c:	2300      	movs	r3, #0
}
 8014a0e:	4618      	mov	r0, r3
 8014a10:	3710      	adds	r7, #16
 8014a12:	46bd      	mov	sp, r7
 8014a14:	bd80      	pop	{r7, pc}
 8014a16:	bf00      	nop
 8014a18:	0801dc1c 	.word	0x0801dc1c
 8014a1c:	0801dc4c 	.word	0x0801dc4c
 8014a20:	0801dc70 	.word	0x0801dc70
 8014a24:	0801dc98 	.word	0x0801dc98
 8014a28:	20008e00 	.word	0x20008e00

08014a2c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8014a2c:	b590      	push	{r4, r7, lr}
 8014a2e:	b08d      	sub	sp, #52	; 0x34
 8014a30:	af02      	add	r7, sp, #8
 8014a32:	6078      	str	r0, [r7, #4]
 8014a34:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8014a36:	2300      	movs	r3, #0
 8014a38:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8014a3a:	687b      	ldr	r3, [r7, #4]
 8014a3c:	2b00      	cmp	r3, #0
 8014a3e:	d105      	bne.n	8014a4c <udp_input+0x20>
 8014a40:	4b7c      	ldr	r3, [pc, #496]	; (8014c34 <udp_input+0x208>)
 8014a42:	22cf      	movs	r2, #207	; 0xcf
 8014a44:	497c      	ldr	r1, [pc, #496]	; (8014c38 <udp_input+0x20c>)
 8014a46:	487d      	ldr	r0, [pc, #500]	; (8014c3c <udp_input+0x210>)
 8014a48:	f005 feac 	bl	801a7a4 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8014a4c:	683b      	ldr	r3, [r7, #0]
 8014a4e:	2b00      	cmp	r3, #0
 8014a50:	d105      	bne.n	8014a5e <udp_input+0x32>
 8014a52:	4b78      	ldr	r3, [pc, #480]	; (8014c34 <udp_input+0x208>)
 8014a54:	22d0      	movs	r2, #208	; 0xd0
 8014a56:	497a      	ldr	r1, [pc, #488]	; (8014c40 <udp_input+0x214>)
 8014a58:	4878      	ldr	r0, [pc, #480]	; (8014c3c <udp_input+0x210>)
 8014a5a:	f005 fea3 	bl	801a7a4 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8014a5e:	687b      	ldr	r3, [r7, #4]
 8014a60:	895b      	ldrh	r3, [r3, #10]
 8014a62:	2b07      	cmp	r3, #7
 8014a64:	d803      	bhi.n	8014a6e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8014a66:	6878      	ldr	r0, [r7, #4]
 8014a68:	f7f9 fa16 	bl	800de98 <pbuf_free>
    goto end;
 8014a6c:	e0de      	b.n	8014c2c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8014a6e:	687b      	ldr	r3, [r7, #4]
 8014a70:	685b      	ldr	r3, [r3, #4]
 8014a72:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8014a74:	4b73      	ldr	r3, [pc, #460]	; (8014c44 <udp_input+0x218>)
 8014a76:	695b      	ldr	r3, [r3, #20]
 8014a78:	4a72      	ldr	r2, [pc, #456]	; (8014c44 <udp_input+0x218>)
 8014a7a:	6812      	ldr	r2, [r2, #0]
 8014a7c:	4611      	mov	r1, r2
 8014a7e:	4618      	mov	r0, r3
 8014a80:	f003 fdec 	bl	801865c <ip4_addr_isbroadcast_u32>
 8014a84:	4603      	mov	r3, r0
 8014a86:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8014a88:	697b      	ldr	r3, [r7, #20]
 8014a8a:	881b      	ldrh	r3, [r3, #0]
 8014a8c:	b29b      	uxth	r3, r3
 8014a8e:	4618      	mov	r0, r3
 8014a90:	f7f7 fd9e 	bl	800c5d0 <lwip_htons>
 8014a94:	4603      	mov	r3, r0
 8014a96:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8014a98:	697b      	ldr	r3, [r7, #20]
 8014a9a:	885b      	ldrh	r3, [r3, #2]
 8014a9c:	b29b      	uxth	r3, r3
 8014a9e:	4618      	mov	r0, r3
 8014aa0:	f7f7 fd96 	bl	800c5d0 <lwip_htons>
 8014aa4:	4603      	mov	r3, r0
 8014aa6:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8014aa8:	2300      	movs	r3, #0
 8014aaa:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8014aac:	2300      	movs	r3, #0
 8014aae:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8014ab0:	2300      	movs	r3, #0
 8014ab2:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014ab4:	4b64      	ldr	r3, [pc, #400]	; (8014c48 <udp_input+0x21c>)
 8014ab6:	681b      	ldr	r3, [r3, #0]
 8014ab8:	627b      	str	r3, [r7, #36]	; 0x24
 8014aba:	e054      	b.n	8014b66 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8014abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014abe:	8a5b      	ldrh	r3, [r3, #18]
 8014ac0:	89fa      	ldrh	r2, [r7, #14]
 8014ac2:	429a      	cmp	r2, r3
 8014ac4:	d14a      	bne.n	8014b5c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8014ac6:	7cfb      	ldrb	r3, [r7, #19]
 8014ac8:	461a      	mov	r2, r3
 8014aca:	6839      	ldr	r1, [r7, #0]
 8014acc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014ace:	f7ff ff49 	bl	8014964 <udp_input_local_match>
 8014ad2:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8014ad4:	2b00      	cmp	r3, #0
 8014ad6:	d041      	beq.n	8014b5c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8014ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ada:	7c1b      	ldrb	r3, [r3, #16]
 8014adc:	f003 0304 	and.w	r3, r3, #4
 8014ae0:	2b00      	cmp	r3, #0
 8014ae2:	d11d      	bne.n	8014b20 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8014ae4:	69fb      	ldr	r3, [r7, #28]
 8014ae6:	2b00      	cmp	r3, #0
 8014ae8:	d102      	bne.n	8014af0 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8014aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014aec:	61fb      	str	r3, [r7, #28]
 8014aee:	e017      	b.n	8014b20 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8014af0:	7cfb      	ldrb	r3, [r7, #19]
 8014af2:	2b00      	cmp	r3, #0
 8014af4:	d014      	beq.n	8014b20 <udp_input+0xf4>
 8014af6:	4b53      	ldr	r3, [pc, #332]	; (8014c44 <udp_input+0x218>)
 8014af8:	695b      	ldr	r3, [r3, #20]
 8014afa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014afe:	d10f      	bne.n	8014b20 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8014b00:	69fb      	ldr	r3, [r7, #28]
 8014b02:	681a      	ldr	r2, [r3, #0]
 8014b04:	683b      	ldr	r3, [r7, #0]
 8014b06:	3304      	adds	r3, #4
 8014b08:	681b      	ldr	r3, [r3, #0]
 8014b0a:	429a      	cmp	r2, r3
 8014b0c:	d008      	beq.n	8014b20 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8014b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b10:	681a      	ldr	r2, [r3, #0]
 8014b12:	683b      	ldr	r3, [r7, #0]
 8014b14:	3304      	adds	r3, #4
 8014b16:	681b      	ldr	r3, [r3, #0]
 8014b18:	429a      	cmp	r2, r3
 8014b1a:	d101      	bne.n	8014b20 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8014b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b1e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8014b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b22:	8a9b      	ldrh	r3, [r3, #20]
 8014b24:	8a3a      	ldrh	r2, [r7, #16]
 8014b26:	429a      	cmp	r2, r3
 8014b28:	d118      	bne.n	8014b5c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8014b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b2c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8014b2e:	2b00      	cmp	r3, #0
 8014b30:	d005      	beq.n	8014b3e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8014b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b34:	685a      	ldr	r2, [r3, #4]
 8014b36:	4b43      	ldr	r3, [pc, #268]	; (8014c44 <udp_input+0x218>)
 8014b38:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8014b3a:	429a      	cmp	r2, r3
 8014b3c:	d10e      	bne.n	8014b5c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8014b3e:	6a3b      	ldr	r3, [r7, #32]
 8014b40:	2b00      	cmp	r3, #0
 8014b42:	d014      	beq.n	8014b6e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8014b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b46:	68da      	ldr	r2, [r3, #12]
 8014b48:	6a3b      	ldr	r3, [r7, #32]
 8014b4a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8014b4c:	4b3e      	ldr	r3, [pc, #248]	; (8014c48 <udp_input+0x21c>)
 8014b4e:	681a      	ldr	r2, [r3, #0]
 8014b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b52:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8014b54:	4a3c      	ldr	r2, [pc, #240]	; (8014c48 <udp_input+0x21c>)
 8014b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b58:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8014b5a:	e008      	b.n	8014b6e <udp_input+0x142>
      }
    }

    prev = pcb;
 8014b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b5e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b62:	68db      	ldr	r3, [r3, #12]
 8014b64:	627b      	str	r3, [r7, #36]	; 0x24
 8014b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b68:	2b00      	cmp	r3, #0
 8014b6a:	d1a7      	bne.n	8014abc <udp_input+0x90>
 8014b6c:	e000      	b.n	8014b70 <udp_input+0x144>
        break;
 8014b6e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8014b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b72:	2b00      	cmp	r3, #0
 8014b74:	d101      	bne.n	8014b7a <udp_input+0x14e>
    pcb = uncon_pcb;
 8014b76:	69fb      	ldr	r3, [r7, #28]
 8014b78:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8014b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b7c:	2b00      	cmp	r3, #0
 8014b7e:	d002      	beq.n	8014b86 <udp_input+0x15a>
    for_us = 1;
 8014b80:	2301      	movs	r3, #1
 8014b82:	76fb      	strb	r3, [r7, #27]
 8014b84:	e00a      	b.n	8014b9c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8014b86:	683b      	ldr	r3, [r7, #0]
 8014b88:	3304      	adds	r3, #4
 8014b8a:	681a      	ldr	r2, [r3, #0]
 8014b8c:	4b2d      	ldr	r3, [pc, #180]	; (8014c44 <udp_input+0x218>)
 8014b8e:	695b      	ldr	r3, [r3, #20]
 8014b90:	429a      	cmp	r2, r3
 8014b92:	bf0c      	ite	eq
 8014b94:	2301      	moveq	r3, #1
 8014b96:	2300      	movne	r3, #0
 8014b98:	b2db      	uxtb	r3, r3
 8014b9a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8014b9c:	7efb      	ldrb	r3, [r7, #27]
 8014b9e:	2b00      	cmp	r3, #0
 8014ba0:	d041      	beq.n	8014c26 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8014ba2:	2108      	movs	r1, #8
 8014ba4:	6878      	ldr	r0, [r7, #4]
 8014ba6:	f7f9 f8f1 	bl	800dd8c <pbuf_remove_header>
 8014baa:	4603      	mov	r3, r0
 8014bac:	2b00      	cmp	r3, #0
 8014bae:	d00a      	beq.n	8014bc6 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8014bb0:	4b20      	ldr	r3, [pc, #128]	; (8014c34 <udp_input+0x208>)
 8014bb2:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8014bb6:	4925      	ldr	r1, [pc, #148]	; (8014c4c <udp_input+0x220>)
 8014bb8:	4820      	ldr	r0, [pc, #128]	; (8014c3c <udp_input+0x210>)
 8014bba:	f005 fdf3 	bl	801a7a4 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8014bbe:	6878      	ldr	r0, [r7, #4]
 8014bc0:	f7f9 f96a 	bl	800de98 <pbuf_free>
      goto end;
 8014bc4:	e032      	b.n	8014c2c <udp_input+0x200>
    }

    if (pcb != NULL) {
 8014bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014bc8:	2b00      	cmp	r3, #0
 8014bca:	d012      	beq.n	8014bf2 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8014bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014bce:	699b      	ldr	r3, [r3, #24]
 8014bd0:	2b00      	cmp	r3, #0
 8014bd2:	d00a      	beq.n	8014bea <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8014bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014bd6:	699c      	ldr	r4, [r3, #24]
 8014bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014bda:	69d8      	ldr	r0, [r3, #28]
 8014bdc:	8a3b      	ldrh	r3, [r7, #16]
 8014bde:	9300      	str	r3, [sp, #0]
 8014be0:	4b1b      	ldr	r3, [pc, #108]	; (8014c50 <udp_input+0x224>)
 8014be2:	687a      	ldr	r2, [r7, #4]
 8014be4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014be6:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8014be8:	e021      	b.n	8014c2e <udp_input+0x202>
        pbuf_free(p);
 8014bea:	6878      	ldr	r0, [r7, #4]
 8014bec:	f7f9 f954 	bl	800de98 <pbuf_free>
        goto end;
 8014bf0:	e01c      	b.n	8014c2c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8014bf2:	7cfb      	ldrb	r3, [r7, #19]
 8014bf4:	2b00      	cmp	r3, #0
 8014bf6:	d112      	bne.n	8014c1e <udp_input+0x1f2>
 8014bf8:	4b12      	ldr	r3, [pc, #72]	; (8014c44 <udp_input+0x218>)
 8014bfa:	695b      	ldr	r3, [r3, #20]
 8014bfc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014c00:	2be0      	cmp	r3, #224	; 0xe0
 8014c02:	d00c      	beq.n	8014c1e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8014c04:	4b0f      	ldr	r3, [pc, #60]	; (8014c44 <udp_input+0x218>)
 8014c06:	899b      	ldrh	r3, [r3, #12]
 8014c08:	3308      	adds	r3, #8
 8014c0a:	b29b      	uxth	r3, r3
 8014c0c:	b21b      	sxth	r3, r3
 8014c0e:	4619      	mov	r1, r3
 8014c10:	6878      	ldr	r0, [r7, #4]
 8014c12:	f7f9 f92e 	bl	800de72 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8014c16:	2103      	movs	r1, #3
 8014c18:	6878      	ldr	r0, [r7, #4]
 8014c1a:	f003 f9d9 	bl	8017fd0 <icmp_dest_unreach>
      pbuf_free(p);
 8014c1e:	6878      	ldr	r0, [r7, #4]
 8014c20:	f7f9 f93a 	bl	800de98 <pbuf_free>
  return;
 8014c24:	e003      	b.n	8014c2e <udp_input+0x202>
    pbuf_free(p);
 8014c26:	6878      	ldr	r0, [r7, #4]
 8014c28:	f7f9 f936 	bl	800de98 <pbuf_free>
  return;
 8014c2c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8014c2e:	372c      	adds	r7, #44	; 0x2c
 8014c30:	46bd      	mov	sp, r7
 8014c32:	bd90      	pop	{r4, r7, pc}
 8014c34:	0801dc1c 	.word	0x0801dc1c
 8014c38:	0801dcc0 	.word	0x0801dcc0
 8014c3c:	0801dc70 	.word	0x0801dc70
 8014c40:	0801dcd8 	.word	0x0801dcd8
 8014c44:	20008e00 	.word	0x20008e00
 8014c48:	2000bf7c 	.word	0x2000bf7c
 8014c4c:	0801dcf4 	.word	0x0801dcf4
 8014c50:	20008e10 	.word	0x20008e10

08014c54 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8014c54:	b580      	push	{r7, lr}
 8014c56:	b088      	sub	sp, #32
 8014c58:	af02      	add	r7, sp, #8
 8014c5a:	60f8      	str	r0, [r7, #12]
 8014c5c:	60b9      	str	r1, [r7, #8]
 8014c5e:	607a      	str	r2, [r7, #4]
 8014c60:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8014c62:	68fb      	ldr	r3, [r7, #12]
 8014c64:	2b00      	cmp	r3, #0
 8014c66:	d109      	bne.n	8014c7c <udp_sendto_if+0x28>
 8014c68:	4b2e      	ldr	r3, [pc, #184]	; (8014d24 <udp_sendto_if+0xd0>)
 8014c6a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014c6e:	492e      	ldr	r1, [pc, #184]	; (8014d28 <udp_sendto_if+0xd4>)
 8014c70:	482e      	ldr	r0, [pc, #184]	; (8014d2c <udp_sendto_if+0xd8>)
 8014c72:	f005 fd97 	bl	801a7a4 <iprintf>
 8014c76:	f06f 030f 	mvn.w	r3, #15
 8014c7a:	e04f      	b.n	8014d1c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8014c7c:	68bb      	ldr	r3, [r7, #8]
 8014c7e:	2b00      	cmp	r3, #0
 8014c80:	d109      	bne.n	8014c96 <udp_sendto_if+0x42>
 8014c82:	4b28      	ldr	r3, [pc, #160]	; (8014d24 <udp_sendto_if+0xd0>)
 8014c84:	f240 2281 	movw	r2, #641	; 0x281
 8014c88:	4929      	ldr	r1, [pc, #164]	; (8014d30 <udp_sendto_if+0xdc>)
 8014c8a:	4828      	ldr	r0, [pc, #160]	; (8014d2c <udp_sendto_if+0xd8>)
 8014c8c:	f005 fd8a 	bl	801a7a4 <iprintf>
 8014c90:	f06f 030f 	mvn.w	r3, #15
 8014c94:	e042      	b.n	8014d1c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8014c96:	687b      	ldr	r3, [r7, #4]
 8014c98:	2b00      	cmp	r3, #0
 8014c9a:	d109      	bne.n	8014cb0 <udp_sendto_if+0x5c>
 8014c9c:	4b21      	ldr	r3, [pc, #132]	; (8014d24 <udp_sendto_if+0xd0>)
 8014c9e:	f240 2282 	movw	r2, #642	; 0x282
 8014ca2:	4924      	ldr	r1, [pc, #144]	; (8014d34 <udp_sendto_if+0xe0>)
 8014ca4:	4821      	ldr	r0, [pc, #132]	; (8014d2c <udp_sendto_if+0xd8>)
 8014ca6:	f005 fd7d 	bl	801a7a4 <iprintf>
 8014caa:	f06f 030f 	mvn.w	r3, #15
 8014cae:	e035      	b.n	8014d1c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8014cb0:	6a3b      	ldr	r3, [r7, #32]
 8014cb2:	2b00      	cmp	r3, #0
 8014cb4:	d109      	bne.n	8014cca <udp_sendto_if+0x76>
 8014cb6:	4b1b      	ldr	r3, [pc, #108]	; (8014d24 <udp_sendto_if+0xd0>)
 8014cb8:	f240 2283 	movw	r2, #643	; 0x283
 8014cbc:	491e      	ldr	r1, [pc, #120]	; (8014d38 <udp_sendto_if+0xe4>)
 8014cbe:	481b      	ldr	r0, [pc, #108]	; (8014d2c <udp_sendto_if+0xd8>)
 8014cc0:	f005 fd70 	bl	801a7a4 <iprintf>
 8014cc4:	f06f 030f 	mvn.w	r3, #15
 8014cc8:	e028      	b.n	8014d1c <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8014cca:	68fb      	ldr	r3, [r7, #12]
 8014ccc:	2b00      	cmp	r3, #0
 8014cce:	d009      	beq.n	8014ce4 <udp_sendto_if+0x90>
 8014cd0:	68fb      	ldr	r3, [r7, #12]
 8014cd2:	681b      	ldr	r3, [r3, #0]
 8014cd4:	2b00      	cmp	r3, #0
 8014cd6:	d005      	beq.n	8014ce4 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8014cd8:	68fb      	ldr	r3, [r7, #12]
 8014cda:	681b      	ldr	r3, [r3, #0]
 8014cdc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8014ce0:	2be0      	cmp	r3, #224	; 0xe0
 8014ce2:	d103      	bne.n	8014cec <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8014ce4:	6a3b      	ldr	r3, [r7, #32]
 8014ce6:	3304      	adds	r3, #4
 8014ce8:	617b      	str	r3, [r7, #20]
 8014cea:	e00b      	b.n	8014d04 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8014cec:	68fb      	ldr	r3, [r7, #12]
 8014cee:	681a      	ldr	r2, [r3, #0]
 8014cf0:	6a3b      	ldr	r3, [r7, #32]
 8014cf2:	3304      	adds	r3, #4
 8014cf4:	681b      	ldr	r3, [r3, #0]
 8014cf6:	429a      	cmp	r2, r3
 8014cf8:	d002      	beq.n	8014d00 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8014cfa:	f06f 0303 	mvn.w	r3, #3
 8014cfe:	e00d      	b.n	8014d1c <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8014d00:	68fb      	ldr	r3, [r7, #12]
 8014d02:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8014d04:	887a      	ldrh	r2, [r7, #2]
 8014d06:	697b      	ldr	r3, [r7, #20]
 8014d08:	9301      	str	r3, [sp, #4]
 8014d0a:	6a3b      	ldr	r3, [r7, #32]
 8014d0c:	9300      	str	r3, [sp, #0]
 8014d0e:	4613      	mov	r3, r2
 8014d10:	687a      	ldr	r2, [r7, #4]
 8014d12:	68b9      	ldr	r1, [r7, #8]
 8014d14:	68f8      	ldr	r0, [r7, #12]
 8014d16:	f000 f811 	bl	8014d3c <udp_sendto_if_src>
 8014d1a:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8014d1c:	4618      	mov	r0, r3
 8014d1e:	3718      	adds	r7, #24
 8014d20:	46bd      	mov	sp, r7
 8014d22:	bd80      	pop	{r7, pc}
 8014d24:	0801dc1c 	.word	0x0801dc1c
 8014d28:	0801dd90 	.word	0x0801dd90
 8014d2c:	0801dc70 	.word	0x0801dc70
 8014d30:	0801ddac 	.word	0x0801ddac
 8014d34:	0801ddc8 	.word	0x0801ddc8
 8014d38:	0801dde8 	.word	0x0801dde8

08014d3c <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8014d3c:	b580      	push	{r7, lr}
 8014d3e:	b08c      	sub	sp, #48	; 0x30
 8014d40:	af04      	add	r7, sp, #16
 8014d42:	60f8      	str	r0, [r7, #12]
 8014d44:	60b9      	str	r1, [r7, #8]
 8014d46:	607a      	str	r2, [r7, #4]
 8014d48:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8014d4a:	68fb      	ldr	r3, [r7, #12]
 8014d4c:	2b00      	cmp	r3, #0
 8014d4e:	d109      	bne.n	8014d64 <udp_sendto_if_src+0x28>
 8014d50:	4b65      	ldr	r3, [pc, #404]	; (8014ee8 <udp_sendto_if_src+0x1ac>)
 8014d52:	f240 22d1 	movw	r2, #721	; 0x2d1
 8014d56:	4965      	ldr	r1, [pc, #404]	; (8014eec <udp_sendto_if_src+0x1b0>)
 8014d58:	4865      	ldr	r0, [pc, #404]	; (8014ef0 <udp_sendto_if_src+0x1b4>)
 8014d5a:	f005 fd23 	bl	801a7a4 <iprintf>
 8014d5e:	f06f 030f 	mvn.w	r3, #15
 8014d62:	e0bc      	b.n	8014ede <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8014d64:	68bb      	ldr	r3, [r7, #8]
 8014d66:	2b00      	cmp	r3, #0
 8014d68:	d109      	bne.n	8014d7e <udp_sendto_if_src+0x42>
 8014d6a:	4b5f      	ldr	r3, [pc, #380]	; (8014ee8 <udp_sendto_if_src+0x1ac>)
 8014d6c:	f240 22d2 	movw	r2, #722	; 0x2d2
 8014d70:	4960      	ldr	r1, [pc, #384]	; (8014ef4 <udp_sendto_if_src+0x1b8>)
 8014d72:	485f      	ldr	r0, [pc, #380]	; (8014ef0 <udp_sendto_if_src+0x1b4>)
 8014d74:	f005 fd16 	bl	801a7a4 <iprintf>
 8014d78:	f06f 030f 	mvn.w	r3, #15
 8014d7c:	e0af      	b.n	8014ede <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8014d7e:	687b      	ldr	r3, [r7, #4]
 8014d80:	2b00      	cmp	r3, #0
 8014d82:	d109      	bne.n	8014d98 <udp_sendto_if_src+0x5c>
 8014d84:	4b58      	ldr	r3, [pc, #352]	; (8014ee8 <udp_sendto_if_src+0x1ac>)
 8014d86:	f240 22d3 	movw	r2, #723	; 0x2d3
 8014d8a:	495b      	ldr	r1, [pc, #364]	; (8014ef8 <udp_sendto_if_src+0x1bc>)
 8014d8c:	4858      	ldr	r0, [pc, #352]	; (8014ef0 <udp_sendto_if_src+0x1b4>)
 8014d8e:	f005 fd09 	bl	801a7a4 <iprintf>
 8014d92:	f06f 030f 	mvn.w	r3, #15
 8014d96:	e0a2      	b.n	8014ede <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8014d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d9a:	2b00      	cmp	r3, #0
 8014d9c:	d109      	bne.n	8014db2 <udp_sendto_if_src+0x76>
 8014d9e:	4b52      	ldr	r3, [pc, #328]	; (8014ee8 <udp_sendto_if_src+0x1ac>)
 8014da0:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8014da4:	4955      	ldr	r1, [pc, #340]	; (8014efc <udp_sendto_if_src+0x1c0>)
 8014da6:	4852      	ldr	r0, [pc, #328]	; (8014ef0 <udp_sendto_if_src+0x1b4>)
 8014da8:	f005 fcfc 	bl	801a7a4 <iprintf>
 8014dac:	f06f 030f 	mvn.w	r3, #15
 8014db0:	e095      	b.n	8014ede <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8014db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014db4:	2b00      	cmp	r3, #0
 8014db6:	d109      	bne.n	8014dcc <udp_sendto_if_src+0x90>
 8014db8:	4b4b      	ldr	r3, [pc, #300]	; (8014ee8 <udp_sendto_if_src+0x1ac>)
 8014dba:	f240 22d5 	movw	r2, #725	; 0x2d5
 8014dbe:	4950      	ldr	r1, [pc, #320]	; (8014f00 <udp_sendto_if_src+0x1c4>)
 8014dc0:	484b      	ldr	r0, [pc, #300]	; (8014ef0 <udp_sendto_if_src+0x1b4>)
 8014dc2:	f005 fcef 	bl	801a7a4 <iprintf>
 8014dc6:	f06f 030f 	mvn.w	r3, #15
 8014dca:	e088      	b.n	8014ede <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8014dcc:	68fb      	ldr	r3, [r7, #12]
 8014dce:	8a5b      	ldrh	r3, [r3, #18]
 8014dd0:	2b00      	cmp	r3, #0
 8014dd2:	d10f      	bne.n	8014df4 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8014dd4:	68f9      	ldr	r1, [r7, #12]
 8014dd6:	68fb      	ldr	r3, [r7, #12]
 8014dd8:	8a5b      	ldrh	r3, [r3, #18]
 8014dda:	461a      	mov	r2, r3
 8014ddc:	68f8      	ldr	r0, [r7, #12]
 8014dde:	f000 f893 	bl	8014f08 <udp_bind>
 8014de2:	4603      	mov	r3, r0
 8014de4:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8014de6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8014dea:	2b00      	cmp	r3, #0
 8014dec:	d002      	beq.n	8014df4 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8014dee:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8014df2:	e074      	b.n	8014ede <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8014df4:	68bb      	ldr	r3, [r7, #8]
 8014df6:	891b      	ldrh	r3, [r3, #8]
 8014df8:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8014dfc:	4293      	cmp	r3, r2
 8014dfe:	d902      	bls.n	8014e06 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8014e00:	f04f 33ff 	mov.w	r3, #4294967295
 8014e04:	e06b      	b.n	8014ede <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8014e06:	2108      	movs	r1, #8
 8014e08:	68b8      	ldr	r0, [r7, #8]
 8014e0a:	f7f8 ffaf 	bl	800dd6c <pbuf_add_header>
 8014e0e:	4603      	mov	r3, r0
 8014e10:	2b00      	cmp	r3, #0
 8014e12:	d015      	beq.n	8014e40 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8014e14:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014e18:	2108      	movs	r1, #8
 8014e1a:	2022      	movs	r0, #34	; 0x22
 8014e1c:	f7f8 fd58 	bl	800d8d0 <pbuf_alloc>
 8014e20:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8014e22:	69fb      	ldr	r3, [r7, #28]
 8014e24:	2b00      	cmp	r3, #0
 8014e26:	d102      	bne.n	8014e2e <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8014e28:	f04f 33ff 	mov.w	r3, #4294967295
 8014e2c:	e057      	b.n	8014ede <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8014e2e:	68bb      	ldr	r3, [r7, #8]
 8014e30:	891b      	ldrh	r3, [r3, #8]
 8014e32:	2b00      	cmp	r3, #0
 8014e34:	d006      	beq.n	8014e44 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8014e36:	68b9      	ldr	r1, [r7, #8]
 8014e38:	69f8      	ldr	r0, [r7, #28]
 8014e3a:	f7f9 f94f 	bl	800e0dc <pbuf_chain>
 8014e3e:	e001      	b.n	8014e44 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8014e40:	68bb      	ldr	r3, [r7, #8]
 8014e42:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8014e44:	69fb      	ldr	r3, [r7, #28]
 8014e46:	895b      	ldrh	r3, [r3, #10]
 8014e48:	2b07      	cmp	r3, #7
 8014e4a:	d806      	bhi.n	8014e5a <udp_sendto_if_src+0x11e>
 8014e4c:	4b26      	ldr	r3, [pc, #152]	; (8014ee8 <udp_sendto_if_src+0x1ac>)
 8014e4e:	f240 320d 	movw	r2, #781	; 0x30d
 8014e52:	492c      	ldr	r1, [pc, #176]	; (8014f04 <udp_sendto_if_src+0x1c8>)
 8014e54:	4826      	ldr	r0, [pc, #152]	; (8014ef0 <udp_sendto_if_src+0x1b4>)
 8014e56:	f005 fca5 	bl	801a7a4 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8014e5a:	69fb      	ldr	r3, [r7, #28]
 8014e5c:	685b      	ldr	r3, [r3, #4]
 8014e5e:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8014e60:	68fb      	ldr	r3, [r7, #12]
 8014e62:	8a5b      	ldrh	r3, [r3, #18]
 8014e64:	4618      	mov	r0, r3
 8014e66:	f7f7 fbb3 	bl	800c5d0 <lwip_htons>
 8014e6a:	4603      	mov	r3, r0
 8014e6c:	461a      	mov	r2, r3
 8014e6e:	697b      	ldr	r3, [r7, #20]
 8014e70:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8014e72:	887b      	ldrh	r3, [r7, #2]
 8014e74:	4618      	mov	r0, r3
 8014e76:	f7f7 fbab 	bl	800c5d0 <lwip_htons>
 8014e7a:	4603      	mov	r3, r0
 8014e7c:	461a      	mov	r2, r3
 8014e7e:	697b      	ldr	r3, [r7, #20]
 8014e80:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8014e82:	697b      	ldr	r3, [r7, #20]
 8014e84:	2200      	movs	r2, #0
 8014e86:	719a      	strb	r2, [r3, #6]
 8014e88:	2200      	movs	r2, #0
 8014e8a:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8014e8c:	69fb      	ldr	r3, [r7, #28]
 8014e8e:	891b      	ldrh	r3, [r3, #8]
 8014e90:	4618      	mov	r0, r3
 8014e92:	f7f7 fb9d 	bl	800c5d0 <lwip_htons>
 8014e96:	4603      	mov	r3, r0
 8014e98:	461a      	mov	r2, r3
 8014e9a:	697b      	ldr	r3, [r7, #20]
 8014e9c:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8014e9e:	2311      	movs	r3, #17
 8014ea0:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8014ea2:	68fb      	ldr	r3, [r7, #12]
 8014ea4:	7adb      	ldrb	r3, [r3, #11]
 8014ea6:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8014ea8:	68fb      	ldr	r3, [r7, #12]
 8014eaa:	7a9b      	ldrb	r3, [r3, #10]
 8014eac:	7cb9      	ldrb	r1, [r7, #18]
 8014eae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014eb0:	9202      	str	r2, [sp, #8]
 8014eb2:	7cfa      	ldrb	r2, [r7, #19]
 8014eb4:	9201      	str	r2, [sp, #4]
 8014eb6:	9300      	str	r3, [sp, #0]
 8014eb8:	460b      	mov	r3, r1
 8014eba:	687a      	ldr	r2, [r7, #4]
 8014ebc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014ebe:	69f8      	ldr	r0, [r7, #28]
 8014ec0:	f003 fb1e 	bl	8018500 <ip4_output_if_src>
 8014ec4:	4603      	mov	r3, r0
 8014ec6:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8014ec8:	69fa      	ldr	r2, [r7, #28]
 8014eca:	68bb      	ldr	r3, [r7, #8]
 8014ecc:	429a      	cmp	r2, r3
 8014ece:	d004      	beq.n	8014eda <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8014ed0:	69f8      	ldr	r0, [r7, #28]
 8014ed2:	f7f8 ffe1 	bl	800de98 <pbuf_free>
    q = NULL;
 8014ed6:	2300      	movs	r3, #0
 8014ed8:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8014eda:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8014ede:	4618      	mov	r0, r3
 8014ee0:	3720      	adds	r7, #32
 8014ee2:	46bd      	mov	sp, r7
 8014ee4:	bd80      	pop	{r7, pc}
 8014ee6:	bf00      	nop
 8014ee8:	0801dc1c 	.word	0x0801dc1c
 8014eec:	0801de08 	.word	0x0801de08
 8014ef0:	0801dc70 	.word	0x0801dc70
 8014ef4:	0801de28 	.word	0x0801de28
 8014ef8:	0801de48 	.word	0x0801de48
 8014efc:	0801de6c 	.word	0x0801de6c
 8014f00:	0801de90 	.word	0x0801de90
 8014f04:	0801deb4 	.word	0x0801deb4

08014f08 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8014f08:	b580      	push	{r7, lr}
 8014f0a:	b086      	sub	sp, #24
 8014f0c:	af00      	add	r7, sp, #0
 8014f0e:	60f8      	str	r0, [r7, #12]
 8014f10:	60b9      	str	r1, [r7, #8]
 8014f12:	4613      	mov	r3, r2
 8014f14:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8014f16:	68bb      	ldr	r3, [r7, #8]
 8014f18:	2b00      	cmp	r3, #0
 8014f1a:	d101      	bne.n	8014f20 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8014f1c:	4b39      	ldr	r3, [pc, #228]	; (8015004 <udp_bind+0xfc>)
 8014f1e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8014f20:	68fb      	ldr	r3, [r7, #12]
 8014f22:	2b00      	cmp	r3, #0
 8014f24:	d109      	bne.n	8014f3a <udp_bind+0x32>
 8014f26:	4b38      	ldr	r3, [pc, #224]	; (8015008 <udp_bind+0x100>)
 8014f28:	f240 32b7 	movw	r2, #951	; 0x3b7
 8014f2c:	4937      	ldr	r1, [pc, #220]	; (801500c <udp_bind+0x104>)
 8014f2e:	4838      	ldr	r0, [pc, #224]	; (8015010 <udp_bind+0x108>)
 8014f30:	f005 fc38 	bl	801a7a4 <iprintf>
 8014f34:	f06f 030f 	mvn.w	r3, #15
 8014f38:	e060      	b.n	8014ffc <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8014f3a:	2300      	movs	r3, #0
 8014f3c:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014f3e:	4b35      	ldr	r3, [pc, #212]	; (8015014 <udp_bind+0x10c>)
 8014f40:	681b      	ldr	r3, [r3, #0]
 8014f42:	617b      	str	r3, [r7, #20]
 8014f44:	e009      	b.n	8014f5a <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8014f46:	68fa      	ldr	r2, [r7, #12]
 8014f48:	697b      	ldr	r3, [r7, #20]
 8014f4a:	429a      	cmp	r2, r3
 8014f4c:	d102      	bne.n	8014f54 <udp_bind+0x4c>
      rebind = 1;
 8014f4e:	2301      	movs	r3, #1
 8014f50:	74fb      	strb	r3, [r7, #19]
      break;
 8014f52:	e005      	b.n	8014f60 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014f54:	697b      	ldr	r3, [r7, #20]
 8014f56:	68db      	ldr	r3, [r3, #12]
 8014f58:	617b      	str	r3, [r7, #20]
 8014f5a:	697b      	ldr	r3, [r7, #20]
 8014f5c:	2b00      	cmp	r3, #0
 8014f5e:	d1f2      	bne.n	8014f46 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8014f60:	88fb      	ldrh	r3, [r7, #6]
 8014f62:	2b00      	cmp	r3, #0
 8014f64:	d109      	bne.n	8014f7a <udp_bind+0x72>
    port = udp_new_port();
 8014f66:	f7ff fcc5 	bl	80148f4 <udp_new_port>
 8014f6a:	4603      	mov	r3, r0
 8014f6c:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8014f6e:	88fb      	ldrh	r3, [r7, #6]
 8014f70:	2b00      	cmp	r3, #0
 8014f72:	d12c      	bne.n	8014fce <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8014f74:	f06f 0307 	mvn.w	r3, #7
 8014f78:	e040      	b.n	8014ffc <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014f7a:	4b26      	ldr	r3, [pc, #152]	; (8015014 <udp_bind+0x10c>)
 8014f7c:	681b      	ldr	r3, [r3, #0]
 8014f7e:	617b      	str	r3, [r7, #20]
 8014f80:	e022      	b.n	8014fc8 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8014f82:	68fa      	ldr	r2, [r7, #12]
 8014f84:	697b      	ldr	r3, [r7, #20]
 8014f86:	429a      	cmp	r2, r3
 8014f88:	d01b      	beq.n	8014fc2 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8014f8a:	697b      	ldr	r3, [r7, #20]
 8014f8c:	8a5b      	ldrh	r3, [r3, #18]
 8014f8e:	88fa      	ldrh	r2, [r7, #6]
 8014f90:	429a      	cmp	r2, r3
 8014f92:	d116      	bne.n	8014fc2 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8014f94:	697b      	ldr	r3, [r7, #20]
 8014f96:	681a      	ldr	r2, [r3, #0]
 8014f98:	68bb      	ldr	r3, [r7, #8]
 8014f9a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8014f9c:	429a      	cmp	r2, r3
 8014f9e:	d00d      	beq.n	8014fbc <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8014fa0:	68bb      	ldr	r3, [r7, #8]
 8014fa2:	2b00      	cmp	r3, #0
 8014fa4:	d00a      	beq.n	8014fbc <udp_bind+0xb4>
 8014fa6:	68bb      	ldr	r3, [r7, #8]
 8014fa8:	681b      	ldr	r3, [r3, #0]
 8014faa:	2b00      	cmp	r3, #0
 8014fac:	d006      	beq.n	8014fbc <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8014fae:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8014fb0:	2b00      	cmp	r3, #0
 8014fb2:	d003      	beq.n	8014fbc <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8014fb4:	697b      	ldr	r3, [r7, #20]
 8014fb6:	681b      	ldr	r3, [r3, #0]
 8014fb8:	2b00      	cmp	r3, #0
 8014fba:	d102      	bne.n	8014fc2 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8014fbc:	f06f 0307 	mvn.w	r3, #7
 8014fc0:	e01c      	b.n	8014ffc <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014fc2:	697b      	ldr	r3, [r7, #20]
 8014fc4:	68db      	ldr	r3, [r3, #12]
 8014fc6:	617b      	str	r3, [r7, #20]
 8014fc8:	697b      	ldr	r3, [r7, #20]
 8014fca:	2b00      	cmp	r3, #0
 8014fcc:	d1d9      	bne.n	8014f82 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8014fce:	68bb      	ldr	r3, [r7, #8]
 8014fd0:	2b00      	cmp	r3, #0
 8014fd2:	d002      	beq.n	8014fda <udp_bind+0xd2>
 8014fd4:	68bb      	ldr	r3, [r7, #8]
 8014fd6:	681b      	ldr	r3, [r3, #0]
 8014fd8:	e000      	b.n	8014fdc <udp_bind+0xd4>
 8014fda:	2300      	movs	r3, #0
 8014fdc:	68fa      	ldr	r2, [r7, #12]
 8014fde:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8014fe0:	68fb      	ldr	r3, [r7, #12]
 8014fe2:	88fa      	ldrh	r2, [r7, #6]
 8014fe4:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8014fe6:	7cfb      	ldrb	r3, [r7, #19]
 8014fe8:	2b00      	cmp	r3, #0
 8014fea:	d106      	bne.n	8014ffa <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8014fec:	4b09      	ldr	r3, [pc, #36]	; (8015014 <udp_bind+0x10c>)
 8014fee:	681a      	ldr	r2, [r3, #0]
 8014ff0:	68fb      	ldr	r3, [r7, #12]
 8014ff2:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8014ff4:	4a07      	ldr	r2, [pc, #28]	; (8015014 <udp_bind+0x10c>)
 8014ff6:	68fb      	ldr	r3, [r7, #12]
 8014ff8:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8014ffa:	2300      	movs	r3, #0
}
 8014ffc:	4618      	mov	r0, r3
 8014ffe:	3718      	adds	r7, #24
 8015000:	46bd      	mov	sp, r7
 8015002:	bd80      	pop	{r7, pc}
 8015004:	0801eb7c 	.word	0x0801eb7c
 8015008:	0801dc1c 	.word	0x0801dc1c
 801500c:	0801dee4 	.word	0x0801dee4
 8015010:	0801dc70 	.word	0x0801dc70
 8015014:	2000bf7c 	.word	0x2000bf7c

08015018 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8015018:	b580      	push	{r7, lr}
 801501a:	b086      	sub	sp, #24
 801501c:	af00      	add	r7, sp, #0
 801501e:	60f8      	str	r0, [r7, #12]
 8015020:	60b9      	str	r1, [r7, #8]
 8015022:	4613      	mov	r3, r2
 8015024:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8015026:	68fb      	ldr	r3, [r7, #12]
 8015028:	2b00      	cmp	r3, #0
 801502a:	d109      	bne.n	8015040 <udp_connect+0x28>
 801502c:	4b2c      	ldr	r3, [pc, #176]	; (80150e0 <udp_connect+0xc8>)
 801502e:	f240 4235 	movw	r2, #1077	; 0x435
 8015032:	492c      	ldr	r1, [pc, #176]	; (80150e4 <udp_connect+0xcc>)
 8015034:	482c      	ldr	r0, [pc, #176]	; (80150e8 <udp_connect+0xd0>)
 8015036:	f005 fbb5 	bl	801a7a4 <iprintf>
 801503a:	f06f 030f 	mvn.w	r3, #15
 801503e:	e04b      	b.n	80150d8 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8015040:	68bb      	ldr	r3, [r7, #8]
 8015042:	2b00      	cmp	r3, #0
 8015044:	d109      	bne.n	801505a <udp_connect+0x42>
 8015046:	4b26      	ldr	r3, [pc, #152]	; (80150e0 <udp_connect+0xc8>)
 8015048:	f240 4236 	movw	r2, #1078	; 0x436
 801504c:	4927      	ldr	r1, [pc, #156]	; (80150ec <udp_connect+0xd4>)
 801504e:	4826      	ldr	r0, [pc, #152]	; (80150e8 <udp_connect+0xd0>)
 8015050:	f005 fba8 	bl	801a7a4 <iprintf>
 8015054:	f06f 030f 	mvn.w	r3, #15
 8015058:	e03e      	b.n	80150d8 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 801505a:	68fb      	ldr	r3, [r7, #12]
 801505c:	8a5b      	ldrh	r3, [r3, #18]
 801505e:	2b00      	cmp	r3, #0
 8015060:	d10f      	bne.n	8015082 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8015062:	68f9      	ldr	r1, [r7, #12]
 8015064:	68fb      	ldr	r3, [r7, #12]
 8015066:	8a5b      	ldrh	r3, [r3, #18]
 8015068:	461a      	mov	r2, r3
 801506a:	68f8      	ldr	r0, [r7, #12]
 801506c:	f7ff ff4c 	bl	8014f08 <udp_bind>
 8015070:	4603      	mov	r3, r0
 8015072:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8015074:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015078:	2b00      	cmp	r3, #0
 801507a:	d002      	beq.n	8015082 <udp_connect+0x6a>
      return err;
 801507c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015080:	e02a      	b.n	80150d8 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8015082:	68bb      	ldr	r3, [r7, #8]
 8015084:	2b00      	cmp	r3, #0
 8015086:	d002      	beq.n	801508e <udp_connect+0x76>
 8015088:	68bb      	ldr	r3, [r7, #8]
 801508a:	681b      	ldr	r3, [r3, #0]
 801508c:	e000      	b.n	8015090 <udp_connect+0x78>
 801508e:	2300      	movs	r3, #0
 8015090:	68fa      	ldr	r2, [r7, #12]
 8015092:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8015094:	68fb      	ldr	r3, [r7, #12]
 8015096:	88fa      	ldrh	r2, [r7, #6]
 8015098:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801509a:	68fb      	ldr	r3, [r7, #12]
 801509c:	7c1b      	ldrb	r3, [r3, #16]
 801509e:	f043 0304 	orr.w	r3, r3, #4
 80150a2:	b2da      	uxtb	r2, r3
 80150a4:	68fb      	ldr	r3, [r7, #12]
 80150a6:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80150a8:	4b11      	ldr	r3, [pc, #68]	; (80150f0 <udp_connect+0xd8>)
 80150aa:	681b      	ldr	r3, [r3, #0]
 80150ac:	617b      	str	r3, [r7, #20]
 80150ae:	e008      	b.n	80150c2 <udp_connect+0xaa>
    if (pcb == ipcb) {
 80150b0:	68fa      	ldr	r2, [r7, #12]
 80150b2:	697b      	ldr	r3, [r7, #20]
 80150b4:	429a      	cmp	r2, r3
 80150b6:	d101      	bne.n	80150bc <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 80150b8:	2300      	movs	r3, #0
 80150ba:	e00d      	b.n	80150d8 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80150bc:	697b      	ldr	r3, [r7, #20]
 80150be:	68db      	ldr	r3, [r3, #12]
 80150c0:	617b      	str	r3, [r7, #20]
 80150c2:	697b      	ldr	r3, [r7, #20]
 80150c4:	2b00      	cmp	r3, #0
 80150c6:	d1f3      	bne.n	80150b0 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 80150c8:	4b09      	ldr	r3, [pc, #36]	; (80150f0 <udp_connect+0xd8>)
 80150ca:	681a      	ldr	r2, [r3, #0]
 80150cc:	68fb      	ldr	r3, [r7, #12]
 80150ce:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 80150d0:	4a07      	ldr	r2, [pc, #28]	; (80150f0 <udp_connect+0xd8>)
 80150d2:	68fb      	ldr	r3, [r7, #12]
 80150d4:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 80150d6:	2300      	movs	r3, #0
}
 80150d8:	4618      	mov	r0, r3
 80150da:	3718      	adds	r7, #24
 80150dc:	46bd      	mov	sp, r7
 80150de:	bd80      	pop	{r7, pc}
 80150e0:	0801dc1c 	.word	0x0801dc1c
 80150e4:	0801defc 	.word	0x0801defc
 80150e8:	0801dc70 	.word	0x0801dc70
 80150ec:	0801df18 	.word	0x0801df18
 80150f0:	2000bf7c 	.word	0x2000bf7c

080150f4 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80150f4:	b580      	push	{r7, lr}
 80150f6:	b084      	sub	sp, #16
 80150f8:	af00      	add	r7, sp, #0
 80150fa:	60f8      	str	r0, [r7, #12]
 80150fc:	60b9      	str	r1, [r7, #8]
 80150fe:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8015100:	68fb      	ldr	r3, [r7, #12]
 8015102:	2b00      	cmp	r3, #0
 8015104:	d107      	bne.n	8015116 <udp_recv+0x22>
 8015106:	4b08      	ldr	r3, [pc, #32]	; (8015128 <udp_recv+0x34>)
 8015108:	f240 428a 	movw	r2, #1162	; 0x48a
 801510c:	4907      	ldr	r1, [pc, #28]	; (801512c <udp_recv+0x38>)
 801510e:	4808      	ldr	r0, [pc, #32]	; (8015130 <udp_recv+0x3c>)
 8015110:	f005 fb48 	bl	801a7a4 <iprintf>
 8015114:	e005      	b.n	8015122 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8015116:	68fb      	ldr	r3, [r7, #12]
 8015118:	68ba      	ldr	r2, [r7, #8]
 801511a:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801511c:	68fb      	ldr	r3, [r7, #12]
 801511e:	687a      	ldr	r2, [r7, #4]
 8015120:	61da      	str	r2, [r3, #28]
}
 8015122:	3710      	adds	r7, #16
 8015124:	46bd      	mov	sp, r7
 8015126:	bd80      	pop	{r7, pc}
 8015128:	0801dc1c 	.word	0x0801dc1c
 801512c:	0801df50 	.word	0x0801df50
 8015130:	0801dc70 	.word	0x0801dc70

08015134 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8015134:	b580      	push	{r7, lr}
 8015136:	b084      	sub	sp, #16
 8015138:	af00      	add	r7, sp, #0
 801513a:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801513c:	687b      	ldr	r3, [r7, #4]
 801513e:	2b00      	cmp	r3, #0
 8015140:	d107      	bne.n	8015152 <udp_remove+0x1e>
 8015142:	4b19      	ldr	r3, [pc, #100]	; (80151a8 <udp_remove+0x74>)
 8015144:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8015148:	4918      	ldr	r1, [pc, #96]	; (80151ac <udp_remove+0x78>)
 801514a:	4819      	ldr	r0, [pc, #100]	; (80151b0 <udp_remove+0x7c>)
 801514c:	f005 fb2a 	bl	801a7a4 <iprintf>
 8015150:	e026      	b.n	80151a0 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8015152:	4b18      	ldr	r3, [pc, #96]	; (80151b4 <udp_remove+0x80>)
 8015154:	681b      	ldr	r3, [r3, #0]
 8015156:	687a      	ldr	r2, [r7, #4]
 8015158:	429a      	cmp	r2, r3
 801515a:	d105      	bne.n	8015168 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801515c:	4b15      	ldr	r3, [pc, #84]	; (80151b4 <udp_remove+0x80>)
 801515e:	681b      	ldr	r3, [r3, #0]
 8015160:	68db      	ldr	r3, [r3, #12]
 8015162:	4a14      	ldr	r2, [pc, #80]	; (80151b4 <udp_remove+0x80>)
 8015164:	6013      	str	r3, [r2, #0]
 8015166:	e017      	b.n	8015198 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8015168:	4b12      	ldr	r3, [pc, #72]	; (80151b4 <udp_remove+0x80>)
 801516a:	681b      	ldr	r3, [r3, #0]
 801516c:	60fb      	str	r3, [r7, #12]
 801516e:	e010      	b.n	8015192 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8015170:	68fb      	ldr	r3, [r7, #12]
 8015172:	68db      	ldr	r3, [r3, #12]
 8015174:	2b00      	cmp	r3, #0
 8015176:	d009      	beq.n	801518c <udp_remove+0x58>
 8015178:	68fb      	ldr	r3, [r7, #12]
 801517a:	68db      	ldr	r3, [r3, #12]
 801517c:	687a      	ldr	r2, [r7, #4]
 801517e:	429a      	cmp	r2, r3
 8015180:	d104      	bne.n	801518c <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8015182:	687b      	ldr	r3, [r7, #4]
 8015184:	68da      	ldr	r2, [r3, #12]
 8015186:	68fb      	ldr	r3, [r7, #12]
 8015188:	60da      	str	r2, [r3, #12]
        break;
 801518a:	e005      	b.n	8015198 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801518c:	68fb      	ldr	r3, [r7, #12]
 801518e:	68db      	ldr	r3, [r3, #12]
 8015190:	60fb      	str	r3, [r7, #12]
 8015192:	68fb      	ldr	r3, [r7, #12]
 8015194:	2b00      	cmp	r3, #0
 8015196:	d1eb      	bne.n	8015170 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8015198:	6879      	ldr	r1, [r7, #4]
 801519a:	2000      	movs	r0, #0
 801519c:	f7f8 f83e 	bl	800d21c <memp_free>
}
 80151a0:	3710      	adds	r7, #16
 80151a2:	46bd      	mov	sp, r7
 80151a4:	bd80      	pop	{r7, pc}
 80151a6:	bf00      	nop
 80151a8:	0801dc1c 	.word	0x0801dc1c
 80151ac:	0801df68 	.word	0x0801df68
 80151b0:	0801dc70 	.word	0x0801dc70
 80151b4:	2000bf7c 	.word	0x2000bf7c

080151b8 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80151b8:	b580      	push	{r7, lr}
 80151ba:	b082      	sub	sp, #8
 80151bc:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80151be:	2000      	movs	r0, #0
 80151c0:	f7f7 ffb6 	bl	800d130 <memp_malloc>
 80151c4:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80151c6:	687b      	ldr	r3, [r7, #4]
 80151c8:	2b00      	cmp	r3, #0
 80151ca:	d007      	beq.n	80151dc <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80151cc:	2220      	movs	r2, #32
 80151ce:	2100      	movs	r1, #0
 80151d0:	6878      	ldr	r0, [r7, #4]
 80151d2:	f005 fa01 	bl	801a5d8 <memset>
    pcb->ttl = UDP_TTL;
 80151d6:	687b      	ldr	r3, [r7, #4]
 80151d8:	22ff      	movs	r2, #255	; 0xff
 80151da:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 80151dc:	687b      	ldr	r3, [r7, #4]
}
 80151de:	4618      	mov	r0, r3
 80151e0:	3708      	adds	r7, #8
 80151e2:	46bd      	mov	sp, r7
 80151e4:	bd80      	pop	{r7, pc}
	...

080151e8 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80151e8:	b480      	push	{r7}
 80151ea:	b085      	sub	sp, #20
 80151ec:	af00      	add	r7, sp, #0
 80151ee:	6078      	str	r0, [r7, #4]
 80151f0:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80151f2:	687b      	ldr	r3, [r7, #4]
 80151f4:	2b00      	cmp	r3, #0
 80151f6:	d01e      	beq.n	8015236 <udp_netif_ip_addr_changed+0x4e>
 80151f8:	687b      	ldr	r3, [r7, #4]
 80151fa:	681b      	ldr	r3, [r3, #0]
 80151fc:	2b00      	cmp	r3, #0
 80151fe:	d01a      	beq.n	8015236 <udp_netif_ip_addr_changed+0x4e>
 8015200:	683b      	ldr	r3, [r7, #0]
 8015202:	2b00      	cmp	r3, #0
 8015204:	d017      	beq.n	8015236 <udp_netif_ip_addr_changed+0x4e>
 8015206:	683b      	ldr	r3, [r7, #0]
 8015208:	681b      	ldr	r3, [r3, #0]
 801520a:	2b00      	cmp	r3, #0
 801520c:	d013      	beq.n	8015236 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801520e:	4b0c      	ldr	r3, [pc, #48]	; (8015240 <udp_netif_ip_addr_changed+0x58>)
 8015210:	681b      	ldr	r3, [r3, #0]
 8015212:	60fb      	str	r3, [r7, #12]
 8015214:	e00c      	b.n	8015230 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8015216:	68fb      	ldr	r3, [r7, #12]
 8015218:	681a      	ldr	r2, [r3, #0]
 801521a:	687b      	ldr	r3, [r7, #4]
 801521c:	681b      	ldr	r3, [r3, #0]
 801521e:	429a      	cmp	r2, r3
 8015220:	d103      	bne.n	801522a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8015222:	683b      	ldr	r3, [r7, #0]
 8015224:	681a      	ldr	r2, [r3, #0]
 8015226:	68fb      	ldr	r3, [r7, #12]
 8015228:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801522a:	68fb      	ldr	r3, [r7, #12]
 801522c:	68db      	ldr	r3, [r3, #12]
 801522e:	60fb      	str	r3, [r7, #12]
 8015230:	68fb      	ldr	r3, [r7, #12]
 8015232:	2b00      	cmp	r3, #0
 8015234:	d1ef      	bne.n	8015216 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8015236:	bf00      	nop
 8015238:	3714      	adds	r7, #20
 801523a:	46bd      	mov	sp, r7
 801523c:	bc80      	pop	{r7}
 801523e:	4770      	bx	lr
 8015240:	2000bf7c 	.word	0x2000bf7c

08015244 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8015244:	b580      	push	{r7, lr}
 8015246:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8015248:	4b20      	ldr	r3, [pc, #128]	; (80152cc <dhcp_inc_pcb_refcount+0x88>)
 801524a:	781b      	ldrb	r3, [r3, #0]
 801524c:	2b00      	cmp	r3, #0
 801524e:	d133      	bne.n	80152b8 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8015250:	4b1f      	ldr	r3, [pc, #124]	; (80152d0 <dhcp_inc_pcb_refcount+0x8c>)
 8015252:	681b      	ldr	r3, [r3, #0]
 8015254:	2b00      	cmp	r3, #0
 8015256:	d005      	beq.n	8015264 <dhcp_inc_pcb_refcount+0x20>
 8015258:	4b1e      	ldr	r3, [pc, #120]	; (80152d4 <dhcp_inc_pcb_refcount+0x90>)
 801525a:	22e5      	movs	r2, #229	; 0xe5
 801525c:	491e      	ldr	r1, [pc, #120]	; (80152d8 <dhcp_inc_pcb_refcount+0x94>)
 801525e:	481f      	ldr	r0, [pc, #124]	; (80152dc <dhcp_inc_pcb_refcount+0x98>)
 8015260:	f005 faa0 	bl	801a7a4 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8015264:	f7ff ffa8 	bl	80151b8 <udp_new>
 8015268:	4603      	mov	r3, r0
 801526a:	4a19      	ldr	r2, [pc, #100]	; (80152d0 <dhcp_inc_pcb_refcount+0x8c>)
 801526c:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 801526e:	4b18      	ldr	r3, [pc, #96]	; (80152d0 <dhcp_inc_pcb_refcount+0x8c>)
 8015270:	681b      	ldr	r3, [r3, #0]
 8015272:	2b00      	cmp	r3, #0
 8015274:	d102      	bne.n	801527c <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 8015276:	f04f 33ff 	mov.w	r3, #4294967295
 801527a:	e024      	b.n	80152c6 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 801527c:	4b14      	ldr	r3, [pc, #80]	; (80152d0 <dhcp_inc_pcb_refcount+0x8c>)
 801527e:	681b      	ldr	r3, [r3, #0]
 8015280:	7a5a      	ldrb	r2, [r3, #9]
 8015282:	4b13      	ldr	r3, [pc, #76]	; (80152d0 <dhcp_inc_pcb_refcount+0x8c>)
 8015284:	681b      	ldr	r3, [r3, #0]
 8015286:	f042 0220 	orr.w	r2, r2, #32
 801528a:	b2d2      	uxtb	r2, r2
 801528c:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 801528e:	4b10      	ldr	r3, [pc, #64]	; (80152d0 <dhcp_inc_pcb_refcount+0x8c>)
 8015290:	681b      	ldr	r3, [r3, #0]
 8015292:	2244      	movs	r2, #68	; 0x44
 8015294:	4912      	ldr	r1, [pc, #72]	; (80152e0 <dhcp_inc_pcb_refcount+0x9c>)
 8015296:	4618      	mov	r0, r3
 8015298:	f7ff fe36 	bl	8014f08 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 801529c:	4b0c      	ldr	r3, [pc, #48]	; (80152d0 <dhcp_inc_pcb_refcount+0x8c>)
 801529e:	681b      	ldr	r3, [r3, #0]
 80152a0:	2243      	movs	r2, #67	; 0x43
 80152a2:	490f      	ldr	r1, [pc, #60]	; (80152e0 <dhcp_inc_pcb_refcount+0x9c>)
 80152a4:	4618      	mov	r0, r3
 80152a6:	f7ff feb7 	bl	8015018 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 80152aa:	4b09      	ldr	r3, [pc, #36]	; (80152d0 <dhcp_inc_pcb_refcount+0x8c>)
 80152ac:	681b      	ldr	r3, [r3, #0]
 80152ae:	2200      	movs	r2, #0
 80152b0:	490c      	ldr	r1, [pc, #48]	; (80152e4 <dhcp_inc_pcb_refcount+0xa0>)
 80152b2:	4618      	mov	r0, r3
 80152b4:	f7ff ff1e 	bl	80150f4 <udp_recv>
  }

  dhcp_pcb_refcount++;
 80152b8:	4b04      	ldr	r3, [pc, #16]	; (80152cc <dhcp_inc_pcb_refcount+0x88>)
 80152ba:	781b      	ldrb	r3, [r3, #0]
 80152bc:	3301      	adds	r3, #1
 80152be:	b2da      	uxtb	r2, r3
 80152c0:	4b02      	ldr	r3, [pc, #8]	; (80152cc <dhcp_inc_pcb_refcount+0x88>)
 80152c2:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 80152c4:	2300      	movs	r3, #0
}
 80152c6:	4618      	mov	r0, r3
 80152c8:	bd80      	pop	{r7, pc}
 80152ca:	bf00      	nop
 80152cc:	2000bfac 	.word	0x2000bfac
 80152d0:	2000bfa8 	.word	0x2000bfa8
 80152d4:	0801df80 	.word	0x0801df80
 80152d8:	0801dfb8 	.word	0x0801dfb8
 80152dc:	0801dfe0 	.word	0x0801dfe0
 80152e0:	0801eb7c 	.word	0x0801eb7c
 80152e4:	08016b01 	.word	0x08016b01

080152e8 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 80152e8:	b580      	push	{r7, lr}
 80152ea:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 80152ec:	4b0e      	ldr	r3, [pc, #56]	; (8015328 <dhcp_dec_pcb_refcount+0x40>)
 80152ee:	781b      	ldrb	r3, [r3, #0]
 80152f0:	2b00      	cmp	r3, #0
 80152f2:	d105      	bne.n	8015300 <dhcp_dec_pcb_refcount+0x18>
 80152f4:	4b0d      	ldr	r3, [pc, #52]	; (801532c <dhcp_dec_pcb_refcount+0x44>)
 80152f6:	22ff      	movs	r2, #255	; 0xff
 80152f8:	490d      	ldr	r1, [pc, #52]	; (8015330 <dhcp_dec_pcb_refcount+0x48>)
 80152fa:	480e      	ldr	r0, [pc, #56]	; (8015334 <dhcp_dec_pcb_refcount+0x4c>)
 80152fc:	f005 fa52 	bl	801a7a4 <iprintf>
  dhcp_pcb_refcount--;
 8015300:	4b09      	ldr	r3, [pc, #36]	; (8015328 <dhcp_dec_pcb_refcount+0x40>)
 8015302:	781b      	ldrb	r3, [r3, #0]
 8015304:	3b01      	subs	r3, #1
 8015306:	b2da      	uxtb	r2, r3
 8015308:	4b07      	ldr	r3, [pc, #28]	; (8015328 <dhcp_dec_pcb_refcount+0x40>)
 801530a:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 801530c:	4b06      	ldr	r3, [pc, #24]	; (8015328 <dhcp_dec_pcb_refcount+0x40>)
 801530e:	781b      	ldrb	r3, [r3, #0]
 8015310:	2b00      	cmp	r3, #0
 8015312:	d107      	bne.n	8015324 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8015314:	4b08      	ldr	r3, [pc, #32]	; (8015338 <dhcp_dec_pcb_refcount+0x50>)
 8015316:	681b      	ldr	r3, [r3, #0]
 8015318:	4618      	mov	r0, r3
 801531a:	f7ff ff0b 	bl	8015134 <udp_remove>
    dhcp_pcb = NULL;
 801531e:	4b06      	ldr	r3, [pc, #24]	; (8015338 <dhcp_dec_pcb_refcount+0x50>)
 8015320:	2200      	movs	r2, #0
 8015322:	601a      	str	r2, [r3, #0]
  }
}
 8015324:	bf00      	nop
 8015326:	bd80      	pop	{r7, pc}
 8015328:	2000bfac 	.word	0x2000bfac
 801532c:	0801df80 	.word	0x0801df80
 8015330:	0801e008 	.word	0x0801e008
 8015334:	0801dfe0 	.word	0x0801dfe0
 8015338:	2000bfa8 	.word	0x2000bfa8

0801533c <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 801533c:	b580      	push	{r7, lr}
 801533e:	b084      	sub	sp, #16
 8015340:	af00      	add	r7, sp, #0
 8015342:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015344:	687b      	ldr	r3, [r7, #4]
 8015346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015348:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801534a:	210c      	movs	r1, #12
 801534c:	68f8      	ldr	r0, [r7, #12]
 801534e:	f001 f819 	bl	8016384 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8015352:	4b06      	ldr	r3, [pc, #24]	; (801536c <dhcp_handle_nak+0x30>)
 8015354:	4a05      	ldr	r2, [pc, #20]	; (801536c <dhcp_handle_nak+0x30>)
 8015356:	4905      	ldr	r1, [pc, #20]	; (801536c <dhcp_handle_nak+0x30>)
 8015358:	6878      	ldr	r0, [r7, #4]
 801535a:	f7f8 f8fd 	bl	800d558 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 801535e:	6878      	ldr	r0, [r7, #4]
 8015360:	f000 fc0c 	bl	8015b7c <dhcp_discover>
}
 8015364:	bf00      	nop
 8015366:	3710      	adds	r7, #16
 8015368:	46bd      	mov	sp, r7
 801536a:	bd80      	pop	{r7, pc}
 801536c:	0801eb7c 	.word	0x0801eb7c

08015370 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8015370:	b580      	push	{r7, lr}
 8015372:	b084      	sub	sp, #16
 8015374:	af00      	add	r7, sp, #0
 8015376:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015378:	687b      	ldr	r3, [r7, #4]
 801537a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801537c:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 801537e:	2108      	movs	r1, #8
 8015380:	68f8      	ldr	r0, [r7, #12]
 8015382:	f000 ffff 	bl	8016384 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8015386:	68fb      	ldr	r3, [r7, #12]
 8015388:	331c      	adds	r3, #28
 801538a:	2200      	movs	r2, #0
 801538c:	4619      	mov	r1, r3
 801538e:	6878      	ldr	r0, [r7, #4]
 8015390:	f002 fb00 	bl	8017994 <etharp_query>
 8015394:	4603      	mov	r3, r0
 8015396:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8015398:	68fb      	ldr	r3, [r7, #12]
 801539a:	799b      	ldrb	r3, [r3, #6]
 801539c:	2bff      	cmp	r3, #255	; 0xff
 801539e:	d005      	beq.n	80153ac <dhcp_check+0x3c>
    dhcp->tries++;
 80153a0:	68fb      	ldr	r3, [r7, #12]
 80153a2:	799b      	ldrb	r3, [r3, #6]
 80153a4:	3301      	adds	r3, #1
 80153a6:	b2da      	uxtb	r2, r3
 80153a8:	68fb      	ldr	r3, [r7, #12]
 80153aa:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 80153ac:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80153b0:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80153b2:	893b      	ldrh	r3, [r7, #8]
 80153b4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80153b8:	4a06      	ldr	r2, [pc, #24]	; (80153d4 <dhcp_check+0x64>)
 80153ba:	fb82 1203 	smull	r1, r2, r2, r3
 80153be:	1152      	asrs	r2, r2, #5
 80153c0:	17db      	asrs	r3, r3, #31
 80153c2:	1ad3      	subs	r3, r2, r3
 80153c4:	b29a      	uxth	r2, r3
 80153c6:	68fb      	ldr	r3, [r7, #12]
 80153c8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 80153ca:	bf00      	nop
 80153cc:	3710      	adds	r7, #16
 80153ce:	46bd      	mov	sp, r7
 80153d0:	bd80      	pop	{r7, pc}
 80153d2:	bf00      	nop
 80153d4:	10624dd3 	.word	0x10624dd3

080153d8 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 80153d8:	b580      	push	{r7, lr}
 80153da:	b084      	sub	sp, #16
 80153dc:	af00      	add	r7, sp, #0
 80153de:	6078      	str	r0, [r7, #4]
 80153e0:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80153e2:	687b      	ldr	r3, [r7, #4]
 80153e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80153e6:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 80153e8:	4b0c      	ldr	r3, [pc, #48]	; (801541c <dhcp_handle_offer+0x44>)
 80153ea:	789b      	ldrb	r3, [r3, #2]
 80153ec:	2b00      	cmp	r3, #0
 80153ee:	d011      	beq.n	8015414 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 80153f0:	68fb      	ldr	r3, [r7, #12]
 80153f2:	2200      	movs	r2, #0
 80153f4:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 80153f6:	4b0a      	ldr	r3, [pc, #40]	; (8015420 <dhcp_handle_offer+0x48>)
 80153f8:	689b      	ldr	r3, [r3, #8]
 80153fa:	4618      	mov	r0, r3
 80153fc:	f7f7 f8fc 	bl	800c5f8 <lwip_htonl>
 8015400:	4602      	mov	r2, r0
 8015402:	68fb      	ldr	r3, [r7, #12]
 8015404:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8015406:	683b      	ldr	r3, [r7, #0]
 8015408:	691a      	ldr	r2, [r3, #16]
 801540a:	68fb      	ldr	r3, [r7, #12]
 801540c:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 801540e:	6878      	ldr	r0, [r7, #4]
 8015410:	f000 f808 	bl	8015424 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8015414:	bf00      	nop
 8015416:	3710      	adds	r7, #16
 8015418:	46bd      	mov	sp, r7
 801541a:	bd80      	pop	{r7, pc}
 801541c:	2000bfa0 	.word	0x2000bfa0
 8015420:	2000bf80 	.word	0x2000bf80

08015424 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8015424:	b5b0      	push	{r4, r5, r7, lr}
 8015426:	b08a      	sub	sp, #40	; 0x28
 8015428:	af02      	add	r7, sp, #8
 801542a:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 801542c:	687b      	ldr	r3, [r7, #4]
 801542e:	2b00      	cmp	r3, #0
 8015430:	d109      	bne.n	8015446 <dhcp_select+0x22>
 8015432:	4b71      	ldr	r3, [pc, #452]	; (80155f8 <dhcp_select+0x1d4>)
 8015434:	f240 1277 	movw	r2, #375	; 0x177
 8015438:	4970      	ldr	r1, [pc, #448]	; (80155fc <dhcp_select+0x1d8>)
 801543a:	4871      	ldr	r0, [pc, #452]	; (8015600 <dhcp_select+0x1dc>)
 801543c:	f005 f9b2 	bl	801a7a4 <iprintf>
 8015440:	f06f 030f 	mvn.w	r3, #15
 8015444:	e0d3      	b.n	80155ee <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 8015446:	687b      	ldr	r3, [r7, #4]
 8015448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801544a:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 801544c:	69bb      	ldr	r3, [r7, #24]
 801544e:	2b00      	cmp	r3, #0
 8015450:	d109      	bne.n	8015466 <dhcp_select+0x42>
 8015452:	4b69      	ldr	r3, [pc, #420]	; (80155f8 <dhcp_select+0x1d4>)
 8015454:	f240 1279 	movw	r2, #377	; 0x179
 8015458:	496a      	ldr	r1, [pc, #424]	; (8015604 <dhcp_select+0x1e0>)
 801545a:	4869      	ldr	r0, [pc, #420]	; (8015600 <dhcp_select+0x1dc>)
 801545c:	f005 f9a2 	bl	801a7a4 <iprintf>
 8015460:	f06f 0305 	mvn.w	r3, #5
 8015464:	e0c3      	b.n	80155ee <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8015466:	2101      	movs	r1, #1
 8015468:	69b8      	ldr	r0, [r7, #24]
 801546a:	f000 ff8b 	bl	8016384 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801546e:	f107 030c 	add.w	r3, r7, #12
 8015472:	2203      	movs	r2, #3
 8015474:	69b9      	ldr	r1, [r7, #24]
 8015476:	6878      	ldr	r0, [r7, #4]
 8015478:	f001 fc10 	bl	8016c9c <dhcp_create_msg>
 801547c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801547e:	697b      	ldr	r3, [r7, #20]
 8015480:	2b00      	cmp	r3, #0
 8015482:	f000 8085 	beq.w	8015590 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8015486:	697b      	ldr	r3, [r7, #20]
 8015488:	685b      	ldr	r3, [r3, #4]
 801548a:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801548c:	89b8      	ldrh	r0, [r7, #12]
 801548e:	693b      	ldr	r3, [r7, #16]
 8015490:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015494:	2302      	movs	r3, #2
 8015496:	2239      	movs	r2, #57	; 0x39
 8015498:	f000 ff8e 	bl	80163b8 <dhcp_option>
 801549c:	4603      	mov	r3, r0
 801549e:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80154a0:	89b8      	ldrh	r0, [r7, #12]
 80154a2:	693b      	ldr	r3, [r7, #16]
 80154a4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80154a8:	687b      	ldr	r3, [r7, #4]
 80154aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80154ac:	461a      	mov	r2, r3
 80154ae:	f000 ffdd 	bl	801646c <dhcp_option_short>
 80154b2:	4603      	mov	r3, r0
 80154b4:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80154b6:	89b8      	ldrh	r0, [r7, #12]
 80154b8:	693b      	ldr	r3, [r7, #16]
 80154ba:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80154be:	2304      	movs	r3, #4
 80154c0:	2232      	movs	r2, #50	; 0x32
 80154c2:	f000 ff79 	bl	80163b8 <dhcp_option>
 80154c6:	4603      	mov	r3, r0
 80154c8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80154ca:	89bc      	ldrh	r4, [r7, #12]
 80154cc:	693b      	ldr	r3, [r7, #16]
 80154ce:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80154d2:	69bb      	ldr	r3, [r7, #24]
 80154d4:	69db      	ldr	r3, [r3, #28]
 80154d6:	4618      	mov	r0, r3
 80154d8:	f7f7 f88e 	bl	800c5f8 <lwip_htonl>
 80154dc:	4603      	mov	r3, r0
 80154de:	461a      	mov	r2, r3
 80154e0:	4629      	mov	r1, r5
 80154e2:	4620      	mov	r0, r4
 80154e4:	f000 fff4 	bl	80164d0 <dhcp_option_long>
 80154e8:	4603      	mov	r3, r0
 80154ea:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 80154ec:	89b8      	ldrh	r0, [r7, #12]
 80154ee:	693b      	ldr	r3, [r7, #16]
 80154f0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80154f4:	2304      	movs	r3, #4
 80154f6:	2236      	movs	r2, #54	; 0x36
 80154f8:	f000 ff5e 	bl	80163b8 <dhcp_option>
 80154fc:	4603      	mov	r3, r0
 80154fe:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8015500:	89bc      	ldrh	r4, [r7, #12]
 8015502:	693b      	ldr	r3, [r7, #16]
 8015504:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8015508:	69bb      	ldr	r3, [r7, #24]
 801550a:	699b      	ldr	r3, [r3, #24]
 801550c:	4618      	mov	r0, r3
 801550e:	f7f7 f873 	bl	800c5f8 <lwip_htonl>
 8015512:	4603      	mov	r3, r0
 8015514:	461a      	mov	r2, r3
 8015516:	4629      	mov	r1, r5
 8015518:	4620      	mov	r0, r4
 801551a:	f000 ffd9 	bl	80164d0 <dhcp_option_long>
 801551e:	4603      	mov	r3, r0
 8015520:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8015522:	89b8      	ldrh	r0, [r7, #12]
 8015524:	693b      	ldr	r3, [r7, #16]
 8015526:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801552a:	2303      	movs	r3, #3
 801552c:	2237      	movs	r2, #55	; 0x37
 801552e:	f000 ff43 	bl	80163b8 <dhcp_option>
 8015532:	4603      	mov	r3, r0
 8015534:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015536:	2300      	movs	r3, #0
 8015538:	77bb      	strb	r3, [r7, #30]
 801553a:	e00e      	b.n	801555a <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801553c:	89b8      	ldrh	r0, [r7, #12]
 801553e:	693b      	ldr	r3, [r7, #16]
 8015540:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015544:	7fbb      	ldrb	r3, [r7, #30]
 8015546:	4a30      	ldr	r2, [pc, #192]	; (8015608 <dhcp_select+0x1e4>)
 8015548:	5cd3      	ldrb	r3, [r2, r3]
 801554a:	461a      	mov	r2, r3
 801554c:	f000 ff68 	bl	8016420 <dhcp_option_byte>
 8015550:	4603      	mov	r3, r0
 8015552:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015554:	7fbb      	ldrb	r3, [r7, #30]
 8015556:	3301      	adds	r3, #1
 8015558:	77bb      	strb	r3, [r7, #30]
 801555a:	7fbb      	ldrb	r3, [r7, #30]
 801555c:	2b02      	cmp	r3, #2
 801555e:	d9ed      	bls.n	801553c <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8015560:	89b8      	ldrh	r0, [r7, #12]
 8015562:	693b      	ldr	r3, [r7, #16]
 8015564:	33f0      	adds	r3, #240	; 0xf0
 8015566:	697a      	ldr	r2, [r7, #20]
 8015568:	4619      	mov	r1, r3
 801556a:	f001 fc6d 	bl	8016e48 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801556e:	4b27      	ldr	r3, [pc, #156]	; (801560c <dhcp_select+0x1e8>)
 8015570:	6818      	ldr	r0, [r3, #0]
 8015572:	4b27      	ldr	r3, [pc, #156]	; (8015610 <dhcp_select+0x1ec>)
 8015574:	9301      	str	r3, [sp, #4]
 8015576:	687b      	ldr	r3, [r7, #4]
 8015578:	9300      	str	r3, [sp, #0]
 801557a:	2343      	movs	r3, #67	; 0x43
 801557c:	4a25      	ldr	r2, [pc, #148]	; (8015614 <dhcp_select+0x1f0>)
 801557e:	6979      	ldr	r1, [r7, #20]
 8015580:	f7ff fbdc 	bl	8014d3c <udp_sendto_if_src>
 8015584:	4603      	mov	r3, r0
 8015586:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8015588:	6978      	ldr	r0, [r7, #20]
 801558a:	f7f8 fc85 	bl	800de98 <pbuf_free>
 801558e:	e001      	b.n	8015594 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8015590:	23ff      	movs	r3, #255	; 0xff
 8015592:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8015594:	69bb      	ldr	r3, [r7, #24]
 8015596:	799b      	ldrb	r3, [r3, #6]
 8015598:	2bff      	cmp	r3, #255	; 0xff
 801559a:	d005      	beq.n	80155a8 <dhcp_select+0x184>
    dhcp->tries++;
 801559c:	69bb      	ldr	r3, [r7, #24]
 801559e:	799b      	ldrb	r3, [r3, #6]
 80155a0:	3301      	adds	r3, #1
 80155a2:	b2da      	uxtb	r2, r3
 80155a4:	69bb      	ldr	r3, [r7, #24]
 80155a6:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 80155a8:	69bb      	ldr	r3, [r7, #24]
 80155aa:	799b      	ldrb	r3, [r3, #6]
 80155ac:	2b05      	cmp	r3, #5
 80155ae:	d80d      	bhi.n	80155cc <dhcp_select+0x1a8>
 80155b0:	69bb      	ldr	r3, [r7, #24]
 80155b2:	799b      	ldrb	r3, [r3, #6]
 80155b4:	461a      	mov	r2, r3
 80155b6:	2301      	movs	r3, #1
 80155b8:	4093      	lsls	r3, r2
 80155ba:	b29b      	uxth	r3, r3
 80155bc:	461a      	mov	r2, r3
 80155be:	0152      	lsls	r2, r2, #5
 80155c0:	1ad2      	subs	r2, r2, r3
 80155c2:	0092      	lsls	r2, r2, #2
 80155c4:	4413      	add	r3, r2
 80155c6:	00db      	lsls	r3, r3, #3
 80155c8:	b29b      	uxth	r3, r3
 80155ca:	e001      	b.n	80155d0 <dhcp_select+0x1ac>
 80155cc:	f64e 2360 	movw	r3, #60000	; 0xea60
 80155d0:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80155d2:	89fb      	ldrh	r3, [r7, #14]
 80155d4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80155d8:	4a0f      	ldr	r2, [pc, #60]	; (8015618 <dhcp_select+0x1f4>)
 80155da:	fb82 1203 	smull	r1, r2, r2, r3
 80155de:	1152      	asrs	r2, r2, #5
 80155e0:	17db      	asrs	r3, r3, #31
 80155e2:	1ad3      	subs	r3, r2, r3
 80155e4:	b29a      	uxth	r2, r3
 80155e6:	69bb      	ldr	r3, [r7, #24]
 80155e8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80155ea:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80155ee:	4618      	mov	r0, r3
 80155f0:	3720      	adds	r7, #32
 80155f2:	46bd      	mov	sp, r7
 80155f4:	bdb0      	pop	{r4, r5, r7, pc}
 80155f6:	bf00      	nop
 80155f8:	0801df80 	.word	0x0801df80
 80155fc:	0801e02c 	.word	0x0801e02c
 8015600:	0801dfe0 	.word	0x0801dfe0
 8015604:	0801e048 	.word	0x0801e048
 8015608:	200000a8 	.word	0x200000a8
 801560c:	2000bfa8 	.word	0x2000bfa8
 8015610:	0801eb7c 	.word	0x0801eb7c
 8015614:	0801eb80 	.word	0x0801eb80
 8015618:	10624dd3 	.word	0x10624dd3

0801561c <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 801561c:	b580      	push	{r7, lr}
 801561e:	b082      	sub	sp, #8
 8015620:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 8015622:	4b27      	ldr	r3, [pc, #156]	; (80156c0 <dhcp_coarse_tmr+0xa4>)
 8015624:	681b      	ldr	r3, [r3, #0]
 8015626:	607b      	str	r3, [r7, #4]
 8015628:	e042      	b.n	80156b0 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801562a:	687b      	ldr	r3, [r7, #4]
 801562c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801562e:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8015630:	683b      	ldr	r3, [r7, #0]
 8015632:	2b00      	cmp	r3, #0
 8015634:	d039      	beq.n	80156aa <dhcp_coarse_tmr+0x8e>
 8015636:	683b      	ldr	r3, [r7, #0]
 8015638:	795b      	ldrb	r3, [r3, #5]
 801563a:	2b00      	cmp	r3, #0
 801563c:	d035      	beq.n	80156aa <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 801563e:	683b      	ldr	r3, [r7, #0]
 8015640:	8a9b      	ldrh	r3, [r3, #20]
 8015642:	2b00      	cmp	r3, #0
 8015644:	d012      	beq.n	801566c <dhcp_coarse_tmr+0x50>
 8015646:	683b      	ldr	r3, [r7, #0]
 8015648:	8a5b      	ldrh	r3, [r3, #18]
 801564a:	3301      	adds	r3, #1
 801564c:	b29a      	uxth	r2, r3
 801564e:	683b      	ldr	r3, [r7, #0]
 8015650:	825a      	strh	r2, [r3, #18]
 8015652:	683b      	ldr	r3, [r7, #0]
 8015654:	8a5a      	ldrh	r2, [r3, #18]
 8015656:	683b      	ldr	r3, [r7, #0]
 8015658:	8a9b      	ldrh	r3, [r3, #20]
 801565a:	429a      	cmp	r2, r3
 801565c:	d106      	bne.n	801566c <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 801565e:	6878      	ldr	r0, [r7, #4]
 8015660:	f000 fdf6 	bl	8016250 <dhcp_release_and_stop>
        dhcp_start(netif);
 8015664:	6878      	ldr	r0, [r7, #4]
 8015666:	f000 f969 	bl	801593c <dhcp_start>
 801566a:	e01e      	b.n	80156aa <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 801566c:	683b      	ldr	r3, [r7, #0]
 801566e:	8a1b      	ldrh	r3, [r3, #16]
 8015670:	2b00      	cmp	r3, #0
 8015672:	d00b      	beq.n	801568c <dhcp_coarse_tmr+0x70>
 8015674:	683b      	ldr	r3, [r7, #0]
 8015676:	8a1b      	ldrh	r3, [r3, #16]
 8015678:	1e5a      	subs	r2, r3, #1
 801567a:	b291      	uxth	r1, r2
 801567c:	683a      	ldr	r2, [r7, #0]
 801567e:	8211      	strh	r1, [r2, #16]
 8015680:	2b01      	cmp	r3, #1
 8015682:	d103      	bne.n	801568c <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8015684:	6878      	ldr	r0, [r7, #4]
 8015686:	f000 f8c6 	bl	8015816 <dhcp_t2_timeout>
 801568a:	e00e      	b.n	80156aa <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 801568c:	683b      	ldr	r3, [r7, #0]
 801568e:	89db      	ldrh	r3, [r3, #14]
 8015690:	2b00      	cmp	r3, #0
 8015692:	d00a      	beq.n	80156aa <dhcp_coarse_tmr+0x8e>
 8015694:	683b      	ldr	r3, [r7, #0]
 8015696:	89db      	ldrh	r3, [r3, #14]
 8015698:	1e5a      	subs	r2, r3, #1
 801569a:	b291      	uxth	r1, r2
 801569c:	683a      	ldr	r2, [r7, #0]
 801569e:	81d1      	strh	r1, [r2, #14]
 80156a0:	2b01      	cmp	r3, #1
 80156a2:	d102      	bne.n	80156aa <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 80156a4:	6878      	ldr	r0, [r7, #4]
 80156a6:	f000 f888 	bl	80157ba <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 80156aa:	687b      	ldr	r3, [r7, #4]
 80156ac:	681b      	ldr	r3, [r3, #0]
 80156ae:	607b      	str	r3, [r7, #4]
 80156b0:	687b      	ldr	r3, [r7, #4]
 80156b2:	2b00      	cmp	r3, #0
 80156b4:	d1b9      	bne.n	801562a <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 80156b6:	bf00      	nop
 80156b8:	bf00      	nop
 80156ba:	3708      	adds	r7, #8
 80156bc:	46bd      	mov	sp, r7
 80156be:	bd80      	pop	{r7, pc}
 80156c0:	2000bf14 	.word	0x2000bf14

080156c4 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 80156c4:	b580      	push	{r7, lr}
 80156c6:	b082      	sub	sp, #8
 80156c8:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 80156ca:	4b16      	ldr	r3, [pc, #88]	; (8015724 <dhcp_fine_tmr+0x60>)
 80156cc:	681b      	ldr	r3, [r3, #0]
 80156ce:	607b      	str	r3, [r7, #4]
 80156d0:	e020      	b.n	8015714 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80156d2:	687b      	ldr	r3, [r7, #4]
 80156d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80156d6:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 80156d8:	683b      	ldr	r3, [r7, #0]
 80156da:	2b00      	cmp	r3, #0
 80156dc:	d017      	beq.n	801570e <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 80156de:	683b      	ldr	r3, [r7, #0]
 80156e0:	891b      	ldrh	r3, [r3, #8]
 80156e2:	2b01      	cmp	r3, #1
 80156e4:	d906      	bls.n	80156f4 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 80156e6:	683b      	ldr	r3, [r7, #0]
 80156e8:	891b      	ldrh	r3, [r3, #8]
 80156ea:	3b01      	subs	r3, #1
 80156ec:	b29a      	uxth	r2, r3
 80156ee:	683b      	ldr	r3, [r7, #0]
 80156f0:	811a      	strh	r2, [r3, #8]
 80156f2:	e00c      	b.n	801570e <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 80156f4:	683b      	ldr	r3, [r7, #0]
 80156f6:	891b      	ldrh	r3, [r3, #8]
 80156f8:	2b01      	cmp	r3, #1
 80156fa:	d108      	bne.n	801570e <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 80156fc:	683b      	ldr	r3, [r7, #0]
 80156fe:	891b      	ldrh	r3, [r3, #8]
 8015700:	3b01      	subs	r3, #1
 8015702:	b29a      	uxth	r2, r3
 8015704:	683b      	ldr	r3, [r7, #0]
 8015706:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8015708:	6878      	ldr	r0, [r7, #4]
 801570a:	f000 f80d 	bl	8015728 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 801570e:	687b      	ldr	r3, [r7, #4]
 8015710:	681b      	ldr	r3, [r3, #0]
 8015712:	607b      	str	r3, [r7, #4]
 8015714:	687b      	ldr	r3, [r7, #4]
 8015716:	2b00      	cmp	r3, #0
 8015718:	d1db      	bne.n	80156d2 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 801571a:	bf00      	nop
 801571c:	bf00      	nop
 801571e:	3708      	adds	r7, #8
 8015720:	46bd      	mov	sp, r7
 8015722:	bd80      	pop	{r7, pc}
 8015724:	2000bf14 	.word	0x2000bf14

08015728 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8015728:	b580      	push	{r7, lr}
 801572a:	b084      	sub	sp, #16
 801572c:	af00      	add	r7, sp, #0
 801572e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015730:	687b      	ldr	r3, [r7, #4]
 8015732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015734:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8015736:	68fb      	ldr	r3, [r7, #12]
 8015738:	795b      	ldrb	r3, [r3, #5]
 801573a:	2b0c      	cmp	r3, #12
 801573c:	d003      	beq.n	8015746 <dhcp_timeout+0x1e>
 801573e:	68fb      	ldr	r3, [r7, #12]
 8015740:	795b      	ldrb	r3, [r3, #5]
 8015742:	2b06      	cmp	r3, #6
 8015744:	d103      	bne.n	801574e <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 8015746:	6878      	ldr	r0, [r7, #4]
 8015748:	f000 fa18 	bl	8015b7c <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 801574c:	e031      	b.n	80157b2 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 801574e:	68fb      	ldr	r3, [r7, #12]
 8015750:	795b      	ldrb	r3, [r3, #5]
 8015752:	2b01      	cmp	r3, #1
 8015754:	d10e      	bne.n	8015774 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 8015756:	68fb      	ldr	r3, [r7, #12]
 8015758:	799b      	ldrb	r3, [r3, #6]
 801575a:	2b05      	cmp	r3, #5
 801575c:	d803      	bhi.n	8015766 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 801575e:	6878      	ldr	r0, [r7, #4]
 8015760:	f7ff fe60 	bl	8015424 <dhcp_select>
}
 8015764:	e025      	b.n	80157b2 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 8015766:	6878      	ldr	r0, [r7, #4]
 8015768:	f000 fd72 	bl	8016250 <dhcp_release_and_stop>
      dhcp_start(netif);
 801576c:	6878      	ldr	r0, [r7, #4]
 801576e:	f000 f8e5 	bl	801593c <dhcp_start>
}
 8015772:	e01e      	b.n	80157b2 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8015774:	68fb      	ldr	r3, [r7, #12]
 8015776:	795b      	ldrb	r3, [r3, #5]
 8015778:	2b08      	cmp	r3, #8
 801577a:	d10b      	bne.n	8015794 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 801577c:	68fb      	ldr	r3, [r7, #12]
 801577e:	799b      	ldrb	r3, [r3, #6]
 8015780:	2b01      	cmp	r3, #1
 8015782:	d803      	bhi.n	801578c <dhcp_timeout+0x64>
      dhcp_check(netif);
 8015784:	6878      	ldr	r0, [r7, #4]
 8015786:	f7ff fdf3 	bl	8015370 <dhcp_check>
}
 801578a:	e012      	b.n	80157b2 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 801578c:	6878      	ldr	r0, [r7, #4]
 801578e:	f000 fa97 	bl	8015cc0 <dhcp_bind>
}
 8015792:	e00e      	b.n	80157b2 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8015794:	68fb      	ldr	r3, [r7, #12]
 8015796:	795b      	ldrb	r3, [r3, #5]
 8015798:	2b03      	cmp	r3, #3
 801579a:	d10a      	bne.n	80157b2 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 801579c:	68fb      	ldr	r3, [r7, #12]
 801579e:	799b      	ldrb	r3, [r3, #6]
 80157a0:	2b01      	cmp	r3, #1
 80157a2:	d803      	bhi.n	80157ac <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 80157a4:	6878      	ldr	r0, [r7, #4]
 80157a6:	f000 fc9d 	bl	80160e4 <dhcp_reboot>
}
 80157aa:	e002      	b.n	80157b2 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 80157ac:	6878      	ldr	r0, [r7, #4]
 80157ae:	f000 f9e5 	bl	8015b7c <dhcp_discover>
}
 80157b2:	bf00      	nop
 80157b4:	3710      	adds	r7, #16
 80157b6:	46bd      	mov	sp, r7
 80157b8:	bd80      	pop	{r7, pc}

080157ba <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 80157ba:	b580      	push	{r7, lr}
 80157bc:	b084      	sub	sp, #16
 80157be:	af00      	add	r7, sp, #0
 80157c0:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80157c2:	687b      	ldr	r3, [r7, #4]
 80157c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80157c6:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80157c8:	68fb      	ldr	r3, [r7, #12]
 80157ca:	795b      	ldrb	r3, [r3, #5]
 80157cc:	2b01      	cmp	r3, #1
 80157ce:	d007      	beq.n	80157e0 <dhcp_t1_timeout+0x26>
 80157d0:	68fb      	ldr	r3, [r7, #12]
 80157d2:	795b      	ldrb	r3, [r3, #5]
 80157d4:	2b0a      	cmp	r3, #10
 80157d6:	d003      	beq.n	80157e0 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 80157d8:	68fb      	ldr	r3, [r7, #12]
 80157da:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80157dc:	2b05      	cmp	r3, #5
 80157de:	d116      	bne.n	801580e <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 80157e0:	6878      	ldr	r0, [r7, #4]
 80157e2:	f000 fb47 	bl	8015e74 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 80157e6:	68fb      	ldr	r3, [r7, #12]
 80157e8:	899b      	ldrh	r3, [r3, #12]
 80157ea:	461a      	mov	r2, r3
 80157ec:	68fb      	ldr	r3, [r7, #12]
 80157ee:	8a5b      	ldrh	r3, [r3, #18]
 80157f0:	1ad3      	subs	r3, r2, r3
 80157f2:	2b01      	cmp	r3, #1
 80157f4:	dd0b      	ble.n	801580e <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 80157f6:	68fb      	ldr	r3, [r7, #12]
 80157f8:	899b      	ldrh	r3, [r3, #12]
 80157fa:	461a      	mov	r2, r3
 80157fc:	68fb      	ldr	r3, [r7, #12]
 80157fe:	8a5b      	ldrh	r3, [r3, #18]
 8015800:	1ad3      	subs	r3, r2, r3
 8015802:	0fda      	lsrs	r2, r3, #31
 8015804:	4413      	add	r3, r2
 8015806:	105b      	asrs	r3, r3, #1
 8015808:	b29a      	uxth	r2, r3
 801580a:	68fb      	ldr	r3, [r7, #12]
 801580c:	81da      	strh	r2, [r3, #14]
    }
  }
}
 801580e:	bf00      	nop
 8015810:	3710      	adds	r7, #16
 8015812:	46bd      	mov	sp, r7
 8015814:	bd80      	pop	{r7, pc}

08015816 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8015816:	b580      	push	{r7, lr}
 8015818:	b084      	sub	sp, #16
 801581a:	af00      	add	r7, sp, #0
 801581c:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801581e:	687b      	ldr	r3, [r7, #4]
 8015820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015822:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8015824:	68fb      	ldr	r3, [r7, #12]
 8015826:	795b      	ldrb	r3, [r3, #5]
 8015828:	2b01      	cmp	r3, #1
 801582a:	d00b      	beq.n	8015844 <dhcp_t2_timeout+0x2e>
 801582c:	68fb      	ldr	r3, [r7, #12]
 801582e:	795b      	ldrb	r3, [r3, #5]
 8015830:	2b0a      	cmp	r3, #10
 8015832:	d007      	beq.n	8015844 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8015834:	68fb      	ldr	r3, [r7, #12]
 8015836:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8015838:	2b05      	cmp	r3, #5
 801583a:	d003      	beq.n	8015844 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 801583c:	68fb      	ldr	r3, [r7, #12]
 801583e:	795b      	ldrb	r3, [r3, #5]
 8015840:	2b04      	cmp	r3, #4
 8015842:	d116      	bne.n	8015872 <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8015844:	6878      	ldr	r0, [r7, #4]
 8015846:	f000 fbb1 	bl	8015fac <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801584a:	68fb      	ldr	r3, [r7, #12]
 801584c:	8a9b      	ldrh	r3, [r3, #20]
 801584e:	461a      	mov	r2, r3
 8015850:	68fb      	ldr	r3, [r7, #12]
 8015852:	8a5b      	ldrh	r3, [r3, #18]
 8015854:	1ad3      	subs	r3, r2, r3
 8015856:	2b01      	cmp	r3, #1
 8015858:	dd0b      	ble.n	8015872 <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 801585a:	68fb      	ldr	r3, [r7, #12]
 801585c:	8a9b      	ldrh	r3, [r3, #20]
 801585e:	461a      	mov	r2, r3
 8015860:	68fb      	ldr	r3, [r7, #12]
 8015862:	8a5b      	ldrh	r3, [r3, #18]
 8015864:	1ad3      	subs	r3, r2, r3
 8015866:	0fda      	lsrs	r2, r3, #31
 8015868:	4413      	add	r3, r2
 801586a:	105b      	asrs	r3, r3, #1
 801586c:	b29a      	uxth	r2, r3
 801586e:	68fb      	ldr	r3, [r7, #12]
 8015870:	821a      	strh	r2, [r3, #16]
    }
  }
}
 8015872:	bf00      	nop
 8015874:	3710      	adds	r7, #16
 8015876:	46bd      	mov	sp, r7
 8015878:	bd80      	pop	{r7, pc}
	...

0801587c <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 801587c:	b580      	push	{r7, lr}
 801587e:	b084      	sub	sp, #16
 8015880:	af00      	add	r7, sp, #0
 8015882:	6078      	str	r0, [r7, #4]
 8015884:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015886:	687b      	ldr	r3, [r7, #4]
 8015888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801588a:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 801588c:	68fb      	ldr	r3, [r7, #12]
 801588e:	2200      	movs	r2, #0
 8015890:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8015892:	68fb      	ldr	r3, [r7, #12]
 8015894:	2200      	movs	r2, #0
 8015896:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8015898:	4b26      	ldr	r3, [pc, #152]	; (8015934 <dhcp_handle_ack+0xb8>)
 801589a:	78db      	ldrb	r3, [r3, #3]
 801589c:	2b00      	cmp	r3, #0
 801589e:	d003      	beq.n	80158a8 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 80158a0:	4b25      	ldr	r3, [pc, #148]	; (8015938 <dhcp_handle_ack+0xbc>)
 80158a2:	68da      	ldr	r2, [r3, #12]
 80158a4:	68fb      	ldr	r3, [r7, #12]
 80158a6:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 80158a8:	4b22      	ldr	r3, [pc, #136]	; (8015934 <dhcp_handle_ack+0xb8>)
 80158aa:	791b      	ldrb	r3, [r3, #4]
 80158ac:	2b00      	cmp	r3, #0
 80158ae:	d004      	beq.n	80158ba <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 80158b0:	4b21      	ldr	r3, [pc, #132]	; (8015938 <dhcp_handle_ack+0xbc>)
 80158b2:	691a      	ldr	r2, [r3, #16]
 80158b4:	68fb      	ldr	r3, [r7, #12]
 80158b6:	62da      	str	r2, [r3, #44]	; 0x2c
 80158b8:	e004      	b.n	80158c4 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 80158ba:	68fb      	ldr	r3, [r7, #12]
 80158bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80158be:	085a      	lsrs	r2, r3, #1
 80158c0:	68fb      	ldr	r3, [r7, #12]
 80158c2:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 80158c4:	4b1b      	ldr	r3, [pc, #108]	; (8015934 <dhcp_handle_ack+0xb8>)
 80158c6:	795b      	ldrb	r3, [r3, #5]
 80158c8:	2b00      	cmp	r3, #0
 80158ca:	d004      	beq.n	80158d6 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 80158cc:	4b1a      	ldr	r3, [pc, #104]	; (8015938 <dhcp_handle_ack+0xbc>)
 80158ce:	695a      	ldr	r2, [r3, #20]
 80158d0:	68fb      	ldr	r3, [r7, #12]
 80158d2:	631a      	str	r2, [r3, #48]	; 0x30
 80158d4:	e007      	b.n	80158e6 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 80158d6:	68fb      	ldr	r3, [r7, #12]
 80158d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80158da:	4613      	mov	r3, r2
 80158dc:	00db      	lsls	r3, r3, #3
 80158de:	1a9b      	subs	r3, r3, r2
 80158e0:	08da      	lsrs	r2, r3, #3
 80158e2:	68fb      	ldr	r3, [r7, #12]
 80158e4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 80158e6:	683b      	ldr	r3, [r7, #0]
 80158e8:	691a      	ldr	r2, [r3, #16]
 80158ea:	68fb      	ldr	r3, [r7, #12]
 80158ec:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 80158ee:	4b11      	ldr	r3, [pc, #68]	; (8015934 <dhcp_handle_ack+0xb8>)
 80158f0:	799b      	ldrb	r3, [r3, #6]
 80158f2:	2b00      	cmp	r3, #0
 80158f4:	d00b      	beq.n	801590e <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 80158f6:	4b10      	ldr	r3, [pc, #64]	; (8015938 <dhcp_handle_ack+0xbc>)
 80158f8:	699b      	ldr	r3, [r3, #24]
 80158fa:	4618      	mov	r0, r3
 80158fc:	f7f6 fe7c 	bl	800c5f8 <lwip_htonl>
 8015900:	4602      	mov	r2, r0
 8015902:	68fb      	ldr	r3, [r7, #12]
 8015904:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 8015906:	68fb      	ldr	r3, [r7, #12]
 8015908:	2201      	movs	r2, #1
 801590a:	71da      	strb	r2, [r3, #7]
 801590c:	e002      	b.n	8015914 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 801590e:	68fb      	ldr	r3, [r7, #12]
 8015910:	2200      	movs	r2, #0
 8015912:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8015914:	4b07      	ldr	r3, [pc, #28]	; (8015934 <dhcp_handle_ack+0xb8>)
 8015916:	79db      	ldrb	r3, [r3, #7]
 8015918:	2b00      	cmp	r3, #0
 801591a:	d007      	beq.n	801592c <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 801591c:	4b06      	ldr	r3, [pc, #24]	; (8015938 <dhcp_handle_ack+0xbc>)
 801591e:	69db      	ldr	r3, [r3, #28]
 8015920:	4618      	mov	r0, r3
 8015922:	f7f6 fe69 	bl	800c5f8 <lwip_htonl>
 8015926:	4602      	mov	r2, r0
 8015928:	68fb      	ldr	r3, [r7, #12]
 801592a:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 801592c:	bf00      	nop
 801592e:	3710      	adds	r7, #16
 8015930:	46bd      	mov	sp, r7
 8015932:	bd80      	pop	{r7, pc}
 8015934:	2000bfa0 	.word	0x2000bfa0
 8015938:	2000bf80 	.word	0x2000bf80

0801593c <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 801593c:	b580      	push	{r7, lr}
 801593e:	b084      	sub	sp, #16
 8015940:	af00      	add	r7, sp, #0
 8015942:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8015944:	687b      	ldr	r3, [r7, #4]
 8015946:	2b00      	cmp	r3, #0
 8015948:	d109      	bne.n	801595e <dhcp_start+0x22>
 801594a:	4b37      	ldr	r3, [pc, #220]	; (8015a28 <dhcp_start+0xec>)
 801594c:	f240 22e7 	movw	r2, #743	; 0x2e7
 8015950:	4936      	ldr	r1, [pc, #216]	; (8015a2c <dhcp_start+0xf0>)
 8015952:	4837      	ldr	r0, [pc, #220]	; (8015a30 <dhcp_start+0xf4>)
 8015954:	f004 ff26 	bl	801a7a4 <iprintf>
 8015958:	f06f 030f 	mvn.w	r3, #15
 801595c:	e060      	b.n	8015a20 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 801595e:	687b      	ldr	r3, [r7, #4]
 8015960:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015964:	f003 0301 	and.w	r3, r3, #1
 8015968:	2b00      	cmp	r3, #0
 801596a:	d109      	bne.n	8015980 <dhcp_start+0x44>
 801596c:	4b2e      	ldr	r3, [pc, #184]	; (8015a28 <dhcp_start+0xec>)
 801596e:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 8015972:	4930      	ldr	r1, [pc, #192]	; (8015a34 <dhcp_start+0xf8>)
 8015974:	482e      	ldr	r0, [pc, #184]	; (8015a30 <dhcp_start+0xf4>)
 8015976:	f004 ff15 	bl	801a7a4 <iprintf>
 801597a:	f06f 030f 	mvn.w	r3, #15
 801597e:	e04f      	b.n	8015a20 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 8015980:	687b      	ldr	r3, [r7, #4]
 8015982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015984:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8015986:	687b      	ldr	r3, [r7, #4]
 8015988:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801598a:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 801598e:	d202      	bcs.n	8015996 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8015990:	f04f 33ff 	mov.w	r3, #4294967295
 8015994:	e044      	b.n	8015a20 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 8015996:	68fb      	ldr	r3, [r7, #12]
 8015998:	2b00      	cmp	r3, #0
 801599a:	d10d      	bne.n	80159b8 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 801599c:	2034      	movs	r0, #52	; 0x34
 801599e:	f7f7 f9fb 	bl	800cd98 <mem_malloc>
 80159a2:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 80159a4:	68fb      	ldr	r3, [r7, #12]
 80159a6:	2b00      	cmp	r3, #0
 80159a8:	d102      	bne.n	80159b0 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 80159aa:	f04f 33ff 	mov.w	r3, #4294967295
 80159ae:	e037      	b.n	8015a20 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 80159b0:	687b      	ldr	r3, [r7, #4]
 80159b2:	68fa      	ldr	r2, [r7, #12]
 80159b4:	625a      	str	r2, [r3, #36]	; 0x24
 80159b6:	e005      	b.n	80159c4 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 80159b8:	68fb      	ldr	r3, [r7, #12]
 80159ba:	791b      	ldrb	r3, [r3, #4]
 80159bc:	2b00      	cmp	r3, #0
 80159be:	d001      	beq.n	80159c4 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 80159c0:	f7ff fc92 	bl	80152e8 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 80159c4:	2234      	movs	r2, #52	; 0x34
 80159c6:	2100      	movs	r1, #0
 80159c8:	68f8      	ldr	r0, [r7, #12]
 80159ca:	f004 fe05 	bl	801a5d8 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 80159ce:	f7ff fc39 	bl	8015244 <dhcp_inc_pcb_refcount>
 80159d2:	4603      	mov	r3, r0
 80159d4:	2b00      	cmp	r3, #0
 80159d6:	d002      	beq.n	80159de <dhcp_start+0xa2>
    return ERR_MEM;
 80159d8:	f04f 33ff 	mov.w	r3, #4294967295
 80159dc:	e020      	b.n	8015a20 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 80159de:	68fb      	ldr	r3, [r7, #12]
 80159e0:	2201      	movs	r2, #1
 80159e2:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 80159e4:	687b      	ldr	r3, [r7, #4]
 80159e6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80159ea:	f003 0304 	and.w	r3, r3, #4
 80159ee:	2b00      	cmp	r3, #0
 80159f0:	d105      	bne.n	80159fe <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 80159f2:	2102      	movs	r1, #2
 80159f4:	68f8      	ldr	r0, [r7, #12]
 80159f6:	f000 fcc5 	bl	8016384 <dhcp_set_state>
    return ERR_OK;
 80159fa:	2300      	movs	r3, #0
 80159fc:	e010      	b.n	8015a20 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 80159fe:	6878      	ldr	r0, [r7, #4]
 8015a00:	f000 f8bc 	bl	8015b7c <dhcp_discover>
 8015a04:	4603      	mov	r3, r0
 8015a06:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8015a08:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8015a0c:	2b00      	cmp	r3, #0
 8015a0e:	d005      	beq.n	8015a1c <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8015a10:	6878      	ldr	r0, [r7, #4]
 8015a12:	f000 fc1d 	bl	8016250 <dhcp_release_and_stop>
    return ERR_MEM;
 8015a16:	f04f 33ff 	mov.w	r3, #4294967295
 8015a1a:	e001      	b.n	8015a20 <dhcp_start+0xe4>
  }
  return result;
 8015a1c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8015a20:	4618      	mov	r0, r3
 8015a22:	3710      	adds	r7, #16
 8015a24:	46bd      	mov	sp, r7
 8015a26:	bd80      	pop	{r7, pc}
 8015a28:	0801df80 	.word	0x0801df80
 8015a2c:	0801e064 	.word	0x0801e064
 8015a30:	0801dfe0 	.word	0x0801dfe0
 8015a34:	0801e0a8 	.word	0x0801e0a8

08015a38 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8015a38:	b580      	push	{r7, lr}
 8015a3a:	b084      	sub	sp, #16
 8015a3c:	af00      	add	r7, sp, #0
 8015a3e:	6078      	str	r0, [r7, #4]
 8015a40:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8015a42:	687b      	ldr	r3, [r7, #4]
 8015a44:	2b00      	cmp	r3, #0
 8015a46:	d107      	bne.n	8015a58 <dhcp_arp_reply+0x20>
 8015a48:	4b0e      	ldr	r3, [pc, #56]	; (8015a84 <dhcp_arp_reply+0x4c>)
 8015a4a:	f240 328b 	movw	r2, #907	; 0x38b
 8015a4e:	490e      	ldr	r1, [pc, #56]	; (8015a88 <dhcp_arp_reply+0x50>)
 8015a50:	480e      	ldr	r0, [pc, #56]	; (8015a8c <dhcp_arp_reply+0x54>)
 8015a52:	f004 fea7 	bl	801a7a4 <iprintf>
 8015a56:	e012      	b.n	8015a7e <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8015a58:	687b      	ldr	r3, [r7, #4]
 8015a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015a5c:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8015a5e:	68fb      	ldr	r3, [r7, #12]
 8015a60:	2b00      	cmp	r3, #0
 8015a62:	d00c      	beq.n	8015a7e <dhcp_arp_reply+0x46>
 8015a64:	68fb      	ldr	r3, [r7, #12]
 8015a66:	795b      	ldrb	r3, [r3, #5]
 8015a68:	2b08      	cmp	r3, #8
 8015a6a:	d108      	bne.n	8015a7e <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8015a6c:	683b      	ldr	r3, [r7, #0]
 8015a6e:	681a      	ldr	r2, [r3, #0]
 8015a70:	68fb      	ldr	r3, [r7, #12]
 8015a72:	69db      	ldr	r3, [r3, #28]
 8015a74:	429a      	cmp	r2, r3
 8015a76:	d102      	bne.n	8015a7e <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8015a78:	6878      	ldr	r0, [r7, #4]
 8015a7a:	f000 f809 	bl	8015a90 <dhcp_decline>
    }
  }
}
 8015a7e:	3710      	adds	r7, #16
 8015a80:	46bd      	mov	sp, r7
 8015a82:	bd80      	pop	{r7, pc}
 8015a84:	0801df80 	.word	0x0801df80
 8015a88:	0801e064 	.word	0x0801e064
 8015a8c:	0801dfe0 	.word	0x0801dfe0

08015a90 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8015a90:	b5b0      	push	{r4, r5, r7, lr}
 8015a92:	b08a      	sub	sp, #40	; 0x28
 8015a94:	af02      	add	r7, sp, #8
 8015a96:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015a98:	687b      	ldr	r3, [r7, #4]
 8015a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015a9c:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8015a9e:	210c      	movs	r1, #12
 8015aa0:	69b8      	ldr	r0, [r7, #24]
 8015aa2:	f000 fc6f 	bl	8016384 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8015aa6:	f107 030c 	add.w	r3, r7, #12
 8015aaa:	2204      	movs	r2, #4
 8015aac:	69b9      	ldr	r1, [r7, #24]
 8015aae:	6878      	ldr	r0, [r7, #4]
 8015ab0:	f001 f8f4 	bl	8016c9c <dhcp_create_msg>
 8015ab4:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8015ab6:	697b      	ldr	r3, [r7, #20]
 8015ab8:	2b00      	cmp	r3, #0
 8015aba:	d035      	beq.n	8015b28 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8015abc:	697b      	ldr	r3, [r7, #20]
 8015abe:	685b      	ldr	r3, [r3, #4]
 8015ac0:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8015ac2:	89b8      	ldrh	r0, [r7, #12]
 8015ac4:	693b      	ldr	r3, [r7, #16]
 8015ac6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015aca:	2304      	movs	r3, #4
 8015acc:	2232      	movs	r2, #50	; 0x32
 8015ace:	f000 fc73 	bl	80163b8 <dhcp_option>
 8015ad2:	4603      	mov	r3, r0
 8015ad4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8015ad6:	89bc      	ldrh	r4, [r7, #12]
 8015ad8:	693b      	ldr	r3, [r7, #16]
 8015ada:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8015ade:	69bb      	ldr	r3, [r7, #24]
 8015ae0:	69db      	ldr	r3, [r3, #28]
 8015ae2:	4618      	mov	r0, r3
 8015ae4:	f7f6 fd88 	bl	800c5f8 <lwip_htonl>
 8015ae8:	4603      	mov	r3, r0
 8015aea:	461a      	mov	r2, r3
 8015aec:	4629      	mov	r1, r5
 8015aee:	4620      	mov	r0, r4
 8015af0:	f000 fcee 	bl	80164d0 <dhcp_option_long>
 8015af4:	4603      	mov	r3, r0
 8015af6:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8015af8:	89b8      	ldrh	r0, [r7, #12]
 8015afa:	693b      	ldr	r3, [r7, #16]
 8015afc:	33f0      	adds	r3, #240	; 0xf0
 8015afe:	697a      	ldr	r2, [r7, #20]
 8015b00:	4619      	mov	r1, r3
 8015b02:	f001 f9a1 	bl	8016e48 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8015b06:	4b19      	ldr	r3, [pc, #100]	; (8015b6c <dhcp_decline+0xdc>)
 8015b08:	6818      	ldr	r0, [r3, #0]
 8015b0a:	4b19      	ldr	r3, [pc, #100]	; (8015b70 <dhcp_decline+0xe0>)
 8015b0c:	9301      	str	r3, [sp, #4]
 8015b0e:	687b      	ldr	r3, [r7, #4]
 8015b10:	9300      	str	r3, [sp, #0]
 8015b12:	2343      	movs	r3, #67	; 0x43
 8015b14:	4a17      	ldr	r2, [pc, #92]	; (8015b74 <dhcp_decline+0xe4>)
 8015b16:	6979      	ldr	r1, [r7, #20]
 8015b18:	f7ff f910 	bl	8014d3c <udp_sendto_if_src>
 8015b1c:	4603      	mov	r3, r0
 8015b1e:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8015b20:	6978      	ldr	r0, [r7, #20]
 8015b22:	f7f8 f9b9 	bl	800de98 <pbuf_free>
 8015b26:	e001      	b.n	8015b2c <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8015b28:	23ff      	movs	r3, #255	; 0xff
 8015b2a:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8015b2c:	69bb      	ldr	r3, [r7, #24]
 8015b2e:	799b      	ldrb	r3, [r3, #6]
 8015b30:	2bff      	cmp	r3, #255	; 0xff
 8015b32:	d005      	beq.n	8015b40 <dhcp_decline+0xb0>
    dhcp->tries++;
 8015b34:	69bb      	ldr	r3, [r7, #24]
 8015b36:	799b      	ldrb	r3, [r3, #6]
 8015b38:	3301      	adds	r3, #1
 8015b3a:	b2da      	uxtb	r2, r3
 8015b3c:	69bb      	ldr	r3, [r7, #24]
 8015b3e:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8015b40:	f242 7310 	movw	r3, #10000	; 0x2710
 8015b44:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8015b46:	89fb      	ldrh	r3, [r7, #14]
 8015b48:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8015b4c:	4a0a      	ldr	r2, [pc, #40]	; (8015b78 <dhcp_decline+0xe8>)
 8015b4e:	fb82 1203 	smull	r1, r2, r2, r3
 8015b52:	1152      	asrs	r2, r2, #5
 8015b54:	17db      	asrs	r3, r3, #31
 8015b56:	1ad3      	subs	r3, r2, r3
 8015b58:	b29a      	uxth	r2, r3
 8015b5a:	69bb      	ldr	r3, [r7, #24]
 8015b5c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8015b5e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015b62:	4618      	mov	r0, r3
 8015b64:	3720      	adds	r7, #32
 8015b66:	46bd      	mov	sp, r7
 8015b68:	bdb0      	pop	{r4, r5, r7, pc}
 8015b6a:	bf00      	nop
 8015b6c:	2000bfa8 	.word	0x2000bfa8
 8015b70:	0801eb7c 	.word	0x0801eb7c
 8015b74:	0801eb80 	.word	0x0801eb80
 8015b78:	10624dd3 	.word	0x10624dd3

08015b7c <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8015b7c:	b580      	push	{r7, lr}
 8015b7e:	b08a      	sub	sp, #40	; 0x28
 8015b80:	af02      	add	r7, sp, #8
 8015b82:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015b84:	687b      	ldr	r3, [r7, #4]
 8015b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b88:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 8015b8a:	2300      	movs	r3, #0
 8015b8c:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8015b8e:	69bb      	ldr	r3, [r7, #24]
 8015b90:	2200      	movs	r2, #0
 8015b92:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8015b94:	2106      	movs	r1, #6
 8015b96:	69b8      	ldr	r0, [r7, #24]
 8015b98:	f000 fbf4 	bl	8016384 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8015b9c:	f107 0308 	add.w	r3, r7, #8
 8015ba0:	2201      	movs	r2, #1
 8015ba2:	69b9      	ldr	r1, [r7, #24]
 8015ba4:	6878      	ldr	r0, [r7, #4]
 8015ba6:	f001 f879 	bl	8016c9c <dhcp_create_msg>
 8015baa:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8015bac:	693b      	ldr	r3, [r7, #16]
 8015bae:	2b00      	cmp	r3, #0
 8015bb0:	d04b      	beq.n	8015c4a <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8015bb2:	693b      	ldr	r3, [r7, #16]
 8015bb4:	685b      	ldr	r3, [r3, #4]
 8015bb6:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8015bb8:	8938      	ldrh	r0, [r7, #8]
 8015bba:	68fb      	ldr	r3, [r7, #12]
 8015bbc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015bc0:	2302      	movs	r3, #2
 8015bc2:	2239      	movs	r2, #57	; 0x39
 8015bc4:	f000 fbf8 	bl	80163b8 <dhcp_option>
 8015bc8:	4603      	mov	r3, r0
 8015bca:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8015bcc:	8938      	ldrh	r0, [r7, #8]
 8015bce:	68fb      	ldr	r3, [r7, #12]
 8015bd0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015bd4:	687b      	ldr	r3, [r7, #4]
 8015bd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015bd8:	461a      	mov	r2, r3
 8015bda:	f000 fc47 	bl	801646c <dhcp_option_short>
 8015bde:	4603      	mov	r3, r0
 8015be0:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8015be2:	8938      	ldrh	r0, [r7, #8]
 8015be4:	68fb      	ldr	r3, [r7, #12]
 8015be6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015bea:	2303      	movs	r3, #3
 8015bec:	2237      	movs	r2, #55	; 0x37
 8015bee:	f000 fbe3 	bl	80163b8 <dhcp_option>
 8015bf2:	4603      	mov	r3, r0
 8015bf4:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015bf6:	2300      	movs	r3, #0
 8015bf8:	77fb      	strb	r3, [r7, #31]
 8015bfa:	e00e      	b.n	8015c1a <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8015bfc:	8938      	ldrh	r0, [r7, #8]
 8015bfe:	68fb      	ldr	r3, [r7, #12]
 8015c00:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015c04:	7ffb      	ldrb	r3, [r7, #31]
 8015c06:	4a29      	ldr	r2, [pc, #164]	; (8015cac <dhcp_discover+0x130>)
 8015c08:	5cd3      	ldrb	r3, [r2, r3]
 8015c0a:	461a      	mov	r2, r3
 8015c0c:	f000 fc08 	bl	8016420 <dhcp_option_byte>
 8015c10:	4603      	mov	r3, r0
 8015c12:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015c14:	7ffb      	ldrb	r3, [r7, #31]
 8015c16:	3301      	adds	r3, #1
 8015c18:	77fb      	strb	r3, [r7, #31]
 8015c1a:	7ffb      	ldrb	r3, [r7, #31]
 8015c1c:	2b02      	cmp	r3, #2
 8015c1e:	d9ed      	bls.n	8015bfc <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8015c20:	8938      	ldrh	r0, [r7, #8]
 8015c22:	68fb      	ldr	r3, [r7, #12]
 8015c24:	33f0      	adds	r3, #240	; 0xf0
 8015c26:	693a      	ldr	r2, [r7, #16]
 8015c28:	4619      	mov	r1, r3
 8015c2a:	f001 f90d 	bl	8016e48 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8015c2e:	4b20      	ldr	r3, [pc, #128]	; (8015cb0 <dhcp_discover+0x134>)
 8015c30:	6818      	ldr	r0, [r3, #0]
 8015c32:	4b20      	ldr	r3, [pc, #128]	; (8015cb4 <dhcp_discover+0x138>)
 8015c34:	9301      	str	r3, [sp, #4]
 8015c36:	687b      	ldr	r3, [r7, #4]
 8015c38:	9300      	str	r3, [sp, #0]
 8015c3a:	2343      	movs	r3, #67	; 0x43
 8015c3c:	4a1e      	ldr	r2, [pc, #120]	; (8015cb8 <dhcp_discover+0x13c>)
 8015c3e:	6939      	ldr	r1, [r7, #16]
 8015c40:	f7ff f87c 	bl	8014d3c <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 8015c44:	6938      	ldr	r0, [r7, #16]
 8015c46:	f7f8 f927 	bl	800de98 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8015c4a:	69bb      	ldr	r3, [r7, #24]
 8015c4c:	799b      	ldrb	r3, [r3, #6]
 8015c4e:	2bff      	cmp	r3, #255	; 0xff
 8015c50:	d005      	beq.n	8015c5e <dhcp_discover+0xe2>
    dhcp->tries++;
 8015c52:	69bb      	ldr	r3, [r7, #24]
 8015c54:	799b      	ldrb	r3, [r3, #6]
 8015c56:	3301      	adds	r3, #1
 8015c58:	b2da      	uxtb	r2, r3
 8015c5a:	69bb      	ldr	r3, [r7, #24]
 8015c5c:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8015c5e:	69bb      	ldr	r3, [r7, #24]
 8015c60:	799b      	ldrb	r3, [r3, #6]
 8015c62:	2b05      	cmp	r3, #5
 8015c64:	d80d      	bhi.n	8015c82 <dhcp_discover+0x106>
 8015c66:	69bb      	ldr	r3, [r7, #24]
 8015c68:	799b      	ldrb	r3, [r3, #6]
 8015c6a:	461a      	mov	r2, r3
 8015c6c:	2301      	movs	r3, #1
 8015c6e:	4093      	lsls	r3, r2
 8015c70:	b29b      	uxth	r3, r3
 8015c72:	461a      	mov	r2, r3
 8015c74:	0152      	lsls	r2, r2, #5
 8015c76:	1ad2      	subs	r2, r2, r3
 8015c78:	0092      	lsls	r2, r2, #2
 8015c7a:	4413      	add	r3, r2
 8015c7c:	00db      	lsls	r3, r3, #3
 8015c7e:	b29b      	uxth	r3, r3
 8015c80:	e001      	b.n	8015c86 <dhcp_discover+0x10a>
 8015c82:	f64e 2360 	movw	r3, #60000	; 0xea60
 8015c86:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8015c88:	897b      	ldrh	r3, [r7, #10]
 8015c8a:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8015c8e:	4a0b      	ldr	r2, [pc, #44]	; (8015cbc <dhcp_discover+0x140>)
 8015c90:	fb82 1203 	smull	r1, r2, r2, r3
 8015c94:	1152      	asrs	r2, r2, #5
 8015c96:	17db      	asrs	r3, r3, #31
 8015c98:	1ad3      	subs	r3, r2, r3
 8015c9a:	b29a      	uxth	r2, r3
 8015c9c:	69bb      	ldr	r3, [r7, #24]
 8015c9e:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8015ca0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015ca4:	4618      	mov	r0, r3
 8015ca6:	3720      	adds	r7, #32
 8015ca8:	46bd      	mov	sp, r7
 8015caa:	bd80      	pop	{r7, pc}
 8015cac:	200000a8 	.word	0x200000a8
 8015cb0:	2000bfa8 	.word	0x2000bfa8
 8015cb4:	0801eb7c 	.word	0x0801eb7c
 8015cb8:	0801eb80 	.word	0x0801eb80
 8015cbc:	10624dd3 	.word	0x10624dd3

08015cc0 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8015cc0:	b580      	push	{r7, lr}
 8015cc2:	b088      	sub	sp, #32
 8015cc4:	af00      	add	r7, sp, #0
 8015cc6:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8015cc8:	687b      	ldr	r3, [r7, #4]
 8015cca:	2b00      	cmp	r3, #0
 8015ccc:	d107      	bne.n	8015cde <dhcp_bind+0x1e>
 8015cce:	4b64      	ldr	r3, [pc, #400]	; (8015e60 <dhcp_bind+0x1a0>)
 8015cd0:	f240 4215 	movw	r2, #1045	; 0x415
 8015cd4:	4963      	ldr	r1, [pc, #396]	; (8015e64 <dhcp_bind+0x1a4>)
 8015cd6:	4864      	ldr	r0, [pc, #400]	; (8015e68 <dhcp_bind+0x1a8>)
 8015cd8:	f004 fd64 	bl	801a7a4 <iprintf>
 8015cdc:	e0bc      	b.n	8015e58 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 8015cde:	687b      	ldr	r3, [r7, #4]
 8015ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015ce2:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8015ce4:	69bb      	ldr	r3, [r7, #24]
 8015ce6:	2b00      	cmp	r3, #0
 8015ce8:	d107      	bne.n	8015cfa <dhcp_bind+0x3a>
 8015cea:	4b5d      	ldr	r3, [pc, #372]	; (8015e60 <dhcp_bind+0x1a0>)
 8015cec:	f240 4217 	movw	r2, #1047	; 0x417
 8015cf0:	495e      	ldr	r1, [pc, #376]	; (8015e6c <dhcp_bind+0x1ac>)
 8015cf2:	485d      	ldr	r0, [pc, #372]	; (8015e68 <dhcp_bind+0x1a8>)
 8015cf4:	f004 fd56 	bl	801a7a4 <iprintf>
 8015cf8:	e0ae      	b.n	8015e58 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 8015cfa:	69bb      	ldr	r3, [r7, #24]
 8015cfc:	2200      	movs	r2, #0
 8015cfe:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8015d00:	69bb      	ldr	r3, [r7, #24]
 8015d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015d08:	d019      	beq.n	8015d3e <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8015d0a:	69bb      	ldr	r3, [r7, #24]
 8015d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015d0e:	331e      	adds	r3, #30
 8015d10:	4a57      	ldr	r2, [pc, #348]	; (8015e70 <dhcp_bind+0x1b0>)
 8015d12:	fba2 2303 	umull	r2, r3, r2, r3
 8015d16:	095b      	lsrs	r3, r3, #5
 8015d18:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8015d1a:	69fb      	ldr	r3, [r7, #28]
 8015d1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015d20:	d302      	bcc.n	8015d28 <dhcp_bind+0x68>
      timeout = 0xffff;
 8015d22:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015d26:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 8015d28:	69fb      	ldr	r3, [r7, #28]
 8015d2a:	b29a      	uxth	r2, r3
 8015d2c:	69bb      	ldr	r3, [r7, #24]
 8015d2e:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 8015d30:	69bb      	ldr	r3, [r7, #24]
 8015d32:	8a9b      	ldrh	r3, [r3, #20]
 8015d34:	2b00      	cmp	r3, #0
 8015d36:	d102      	bne.n	8015d3e <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 8015d38:	69bb      	ldr	r3, [r7, #24]
 8015d3a:	2201      	movs	r2, #1
 8015d3c:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8015d3e:	69bb      	ldr	r3, [r7, #24]
 8015d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015d42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015d46:	d01d      	beq.n	8015d84 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8015d48:	69bb      	ldr	r3, [r7, #24]
 8015d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015d4c:	331e      	adds	r3, #30
 8015d4e:	4a48      	ldr	r2, [pc, #288]	; (8015e70 <dhcp_bind+0x1b0>)
 8015d50:	fba2 2303 	umull	r2, r3, r2, r3
 8015d54:	095b      	lsrs	r3, r3, #5
 8015d56:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8015d58:	69fb      	ldr	r3, [r7, #28]
 8015d5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015d5e:	d302      	bcc.n	8015d66 <dhcp_bind+0xa6>
      timeout = 0xffff;
 8015d60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015d64:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 8015d66:	69fb      	ldr	r3, [r7, #28]
 8015d68:	b29a      	uxth	r2, r3
 8015d6a:	69bb      	ldr	r3, [r7, #24]
 8015d6c:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 8015d6e:	69bb      	ldr	r3, [r7, #24]
 8015d70:	895b      	ldrh	r3, [r3, #10]
 8015d72:	2b00      	cmp	r3, #0
 8015d74:	d102      	bne.n	8015d7c <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 8015d76:	69bb      	ldr	r3, [r7, #24]
 8015d78:	2201      	movs	r2, #1
 8015d7a:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8015d7c:	69bb      	ldr	r3, [r7, #24]
 8015d7e:	895a      	ldrh	r2, [r3, #10]
 8015d80:	69bb      	ldr	r3, [r7, #24]
 8015d82:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8015d84:	69bb      	ldr	r3, [r7, #24]
 8015d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015d8c:	d01d      	beq.n	8015dca <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8015d8e:	69bb      	ldr	r3, [r7, #24]
 8015d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015d92:	331e      	adds	r3, #30
 8015d94:	4a36      	ldr	r2, [pc, #216]	; (8015e70 <dhcp_bind+0x1b0>)
 8015d96:	fba2 2303 	umull	r2, r3, r2, r3
 8015d9a:	095b      	lsrs	r3, r3, #5
 8015d9c:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8015d9e:	69fb      	ldr	r3, [r7, #28]
 8015da0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015da4:	d302      	bcc.n	8015dac <dhcp_bind+0xec>
      timeout = 0xffff;
 8015da6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015daa:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8015dac:	69fb      	ldr	r3, [r7, #28]
 8015dae:	b29a      	uxth	r2, r3
 8015db0:	69bb      	ldr	r3, [r7, #24]
 8015db2:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 8015db4:	69bb      	ldr	r3, [r7, #24]
 8015db6:	899b      	ldrh	r3, [r3, #12]
 8015db8:	2b00      	cmp	r3, #0
 8015dba:	d102      	bne.n	8015dc2 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 8015dbc:	69bb      	ldr	r3, [r7, #24]
 8015dbe:	2201      	movs	r2, #1
 8015dc0:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8015dc2:	69bb      	ldr	r3, [r7, #24]
 8015dc4:	899a      	ldrh	r2, [r3, #12]
 8015dc6:	69bb      	ldr	r3, [r7, #24]
 8015dc8:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8015dca:	69bb      	ldr	r3, [r7, #24]
 8015dcc:	895a      	ldrh	r2, [r3, #10]
 8015dce:	69bb      	ldr	r3, [r7, #24]
 8015dd0:	899b      	ldrh	r3, [r3, #12]
 8015dd2:	429a      	cmp	r2, r3
 8015dd4:	d306      	bcc.n	8015de4 <dhcp_bind+0x124>
 8015dd6:	69bb      	ldr	r3, [r7, #24]
 8015dd8:	899b      	ldrh	r3, [r3, #12]
 8015dda:	2b00      	cmp	r3, #0
 8015ddc:	d002      	beq.n	8015de4 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 8015dde:	69bb      	ldr	r3, [r7, #24]
 8015de0:	2200      	movs	r2, #0
 8015de2:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 8015de4:	69bb      	ldr	r3, [r7, #24]
 8015de6:	79db      	ldrb	r3, [r3, #7]
 8015de8:	2b00      	cmp	r3, #0
 8015dea:	d003      	beq.n	8015df4 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8015dec:	69bb      	ldr	r3, [r7, #24]
 8015dee:	6a1b      	ldr	r3, [r3, #32]
 8015df0:	613b      	str	r3, [r7, #16]
 8015df2:	e014      	b.n	8015e1e <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8015df4:	69bb      	ldr	r3, [r7, #24]
 8015df6:	331c      	adds	r3, #28
 8015df8:	781b      	ldrb	r3, [r3, #0]
 8015dfa:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 8015dfc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8015e00:	2b00      	cmp	r3, #0
 8015e02:	db02      	blt.n	8015e0a <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8015e04:	23ff      	movs	r3, #255	; 0xff
 8015e06:	613b      	str	r3, [r7, #16]
 8015e08:	e009      	b.n	8015e1e <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 8015e0a:	7dfb      	ldrb	r3, [r7, #23]
 8015e0c:	2bbf      	cmp	r3, #191	; 0xbf
 8015e0e:	d903      	bls.n	8015e18 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8015e10:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8015e14:	613b      	str	r3, [r7, #16]
 8015e16:	e002      	b.n	8015e1e <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8015e18:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015e1c:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 8015e1e:	69bb      	ldr	r3, [r7, #24]
 8015e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e22:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 8015e24:	68fb      	ldr	r3, [r7, #12]
 8015e26:	2b00      	cmp	r3, #0
 8015e28:	d108      	bne.n	8015e3c <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 8015e2a:	69bb      	ldr	r3, [r7, #24]
 8015e2c:	69da      	ldr	r2, [r3, #28]
 8015e2e:	693b      	ldr	r3, [r7, #16]
 8015e30:	4013      	ands	r3, r2
 8015e32:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8015e34:	68fb      	ldr	r3, [r7, #12]
 8015e36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8015e3a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8015e3c:	210a      	movs	r1, #10
 8015e3e:	69b8      	ldr	r0, [r7, #24]
 8015e40:	f000 faa0 	bl	8016384 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8015e44:	69bb      	ldr	r3, [r7, #24]
 8015e46:	f103 011c 	add.w	r1, r3, #28
 8015e4a:	f107 030c 	add.w	r3, r7, #12
 8015e4e:	f107 0210 	add.w	r2, r7, #16
 8015e52:	6878      	ldr	r0, [r7, #4]
 8015e54:	f7f7 fb80 	bl	800d558 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8015e58:	3720      	adds	r7, #32
 8015e5a:	46bd      	mov	sp, r7
 8015e5c:	bd80      	pop	{r7, pc}
 8015e5e:	bf00      	nop
 8015e60:	0801df80 	.word	0x0801df80
 8015e64:	0801e0e0 	.word	0x0801e0e0
 8015e68:	0801dfe0 	.word	0x0801dfe0
 8015e6c:	0801e0fc 	.word	0x0801e0fc
 8015e70:	88888889 	.word	0x88888889

08015e74 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8015e74:	b580      	push	{r7, lr}
 8015e76:	b08a      	sub	sp, #40	; 0x28
 8015e78:	af02      	add	r7, sp, #8
 8015e7a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015e7c:	687b      	ldr	r3, [r7, #4]
 8015e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e80:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8015e82:	2105      	movs	r1, #5
 8015e84:	69b8      	ldr	r0, [r7, #24]
 8015e86:	f000 fa7d 	bl	8016384 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8015e8a:	f107 030c 	add.w	r3, r7, #12
 8015e8e:	2203      	movs	r2, #3
 8015e90:	69b9      	ldr	r1, [r7, #24]
 8015e92:	6878      	ldr	r0, [r7, #4]
 8015e94:	f000 ff02 	bl	8016c9c <dhcp_create_msg>
 8015e98:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8015e9a:	697b      	ldr	r3, [r7, #20]
 8015e9c:	2b00      	cmp	r3, #0
 8015e9e:	d04e      	beq.n	8015f3e <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8015ea0:	697b      	ldr	r3, [r7, #20]
 8015ea2:	685b      	ldr	r3, [r3, #4]
 8015ea4:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8015ea6:	89b8      	ldrh	r0, [r7, #12]
 8015ea8:	693b      	ldr	r3, [r7, #16]
 8015eaa:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015eae:	2302      	movs	r3, #2
 8015eb0:	2239      	movs	r2, #57	; 0x39
 8015eb2:	f000 fa81 	bl	80163b8 <dhcp_option>
 8015eb6:	4603      	mov	r3, r0
 8015eb8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8015eba:	89b8      	ldrh	r0, [r7, #12]
 8015ebc:	693b      	ldr	r3, [r7, #16]
 8015ebe:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015ec2:	687b      	ldr	r3, [r7, #4]
 8015ec4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015ec6:	461a      	mov	r2, r3
 8015ec8:	f000 fad0 	bl	801646c <dhcp_option_short>
 8015ecc:	4603      	mov	r3, r0
 8015ece:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8015ed0:	89b8      	ldrh	r0, [r7, #12]
 8015ed2:	693b      	ldr	r3, [r7, #16]
 8015ed4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015ed8:	2303      	movs	r3, #3
 8015eda:	2237      	movs	r2, #55	; 0x37
 8015edc:	f000 fa6c 	bl	80163b8 <dhcp_option>
 8015ee0:	4603      	mov	r3, r0
 8015ee2:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015ee4:	2300      	movs	r3, #0
 8015ee6:	77bb      	strb	r3, [r7, #30]
 8015ee8:	e00e      	b.n	8015f08 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8015eea:	89b8      	ldrh	r0, [r7, #12]
 8015eec:	693b      	ldr	r3, [r7, #16]
 8015eee:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015ef2:	7fbb      	ldrb	r3, [r7, #30]
 8015ef4:	4a2a      	ldr	r2, [pc, #168]	; (8015fa0 <dhcp_renew+0x12c>)
 8015ef6:	5cd3      	ldrb	r3, [r2, r3]
 8015ef8:	461a      	mov	r2, r3
 8015efa:	f000 fa91 	bl	8016420 <dhcp_option_byte>
 8015efe:	4603      	mov	r3, r0
 8015f00:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015f02:	7fbb      	ldrb	r3, [r7, #30]
 8015f04:	3301      	adds	r3, #1
 8015f06:	77bb      	strb	r3, [r7, #30]
 8015f08:	7fbb      	ldrb	r3, [r7, #30]
 8015f0a:	2b02      	cmp	r3, #2
 8015f0c:	d9ed      	bls.n	8015eea <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8015f0e:	89b8      	ldrh	r0, [r7, #12]
 8015f10:	693b      	ldr	r3, [r7, #16]
 8015f12:	33f0      	adds	r3, #240	; 0xf0
 8015f14:	697a      	ldr	r2, [r7, #20]
 8015f16:	4619      	mov	r1, r3
 8015f18:	f000 ff96 	bl	8016e48 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8015f1c:	4b21      	ldr	r3, [pc, #132]	; (8015fa4 <dhcp_renew+0x130>)
 8015f1e:	6818      	ldr	r0, [r3, #0]
 8015f20:	69bb      	ldr	r3, [r7, #24]
 8015f22:	f103 0218 	add.w	r2, r3, #24
 8015f26:	687b      	ldr	r3, [r7, #4]
 8015f28:	9300      	str	r3, [sp, #0]
 8015f2a:	2343      	movs	r3, #67	; 0x43
 8015f2c:	6979      	ldr	r1, [r7, #20]
 8015f2e:	f7fe fe91 	bl	8014c54 <udp_sendto_if>
 8015f32:	4603      	mov	r3, r0
 8015f34:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8015f36:	6978      	ldr	r0, [r7, #20]
 8015f38:	f7f7 ffae 	bl	800de98 <pbuf_free>
 8015f3c:	e001      	b.n	8015f42 <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8015f3e:	23ff      	movs	r3, #255	; 0xff
 8015f40:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8015f42:	69bb      	ldr	r3, [r7, #24]
 8015f44:	799b      	ldrb	r3, [r3, #6]
 8015f46:	2bff      	cmp	r3, #255	; 0xff
 8015f48:	d005      	beq.n	8015f56 <dhcp_renew+0xe2>
    dhcp->tries++;
 8015f4a:	69bb      	ldr	r3, [r7, #24]
 8015f4c:	799b      	ldrb	r3, [r3, #6]
 8015f4e:	3301      	adds	r3, #1
 8015f50:	b2da      	uxtb	r2, r3
 8015f52:	69bb      	ldr	r3, [r7, #24]
 8015f54:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8015f56:	69bb      	ldr	r3, [r7, #24]
 8015f58:	799b      	ldrb	r3, [r3, #6]
 8015f5a:	2b09      	cmp	r3, #9
 8015f5c:	d80a      	bhi.n	8015f74 <dhcp_renew+0x100>
 8015f5e:	69bb      	ldr	r3, [r7, #24]
 8015f60:	799b      	ldrb	r3, [r3, #6]
 8015f62:	b29b      	uxth	r3, r3
 8015f64:	461a      	mov	r2, r3
 8015f66:	0152      	lsls	r2, r2, #5
 8015f68:	1ad2      	subs	r2, r2, r3
 8015f6a:	0092      	lsls	r2, r2, #2
 8015f6c:	4413      	add	r3, r2
 8015f6e:	011b      	lsls	r3, r3, #4
 8015f70:	b29b      	uxth	r3, r3
 8015f72:	e001      	b.n	8015f78 <dhcp_renew+0x104>
 8015f74:	f644 6320 	movw	r3, #20000	; 0x4e20
 8015f78:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8015f7a:	89fb      	ldrh	r3, [r7, #14]
 8015f7c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8015f80:	4a09      	ldr	r2, [pc, #36]	; (8015fa8 <dhcp_renew+0x134>)
 8015f82:	fb82 1203 	smull	r1, r2, r2, r3
 8015f86:	1152      	asrs	r2, r2, #5
 8015f88:	17db      	asrs	r3, r3, #31
 8015f8a:	1ad3      	subs	r3, r2, r3
 8015f8c:	b29a      	uxth	r2, r3
 8015f8e:	69bb      	ldr	r3, [r7, #24]
 8015f90:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8015f92:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015f96:	4618      	mov	r0, r3
 8015f98:	3720      	adds	r7, #32
 8015f9a:	46bd      	mov	sp, r7
 8015f9c:	bd80      	pop	{r7, pc}
 8015f9e:	bf00      	nop
 8015fa0:	200000a8 	.word	0x200000a8
 8015fa4:	2000bfa8 	.word	0x2000bfa8
 8015fa8:	10624dd3 	.word	0x10624dd3

08015fac <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8015fac:	b580      	push	{r7, lr}
 8015fae:	b08a      	sub	sp, #40	; 0x28
 8015fb0:	af02      	add	r7, sp, #8
 8015fb2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015fb4:	687b      	ldr	r3, [r7, #4]
 8015fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015fb8:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 8015fba:	2104      	movs	r1, #4
 8015fbc:	69b8      	ldr	r0, [r7, #24]
 8015fbe:	f000 f9e1 	bl	8016384 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8015fc2:	f107 030c 	add.w	r3, r7, #12
 8015fc6:	2203      	movs	r2, #3
 8015fc8:	69b9      	ldr	r1, [r7, #24]
 8015fca:	6878      	ldr	r0, [r7, #4]
 8015fcc:	f000 fe66 	bl	8016c9c <dhcp_create_msg>
 8015fd0:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8015fd2:	697b      	ldr	r3, [r7, #20]
 8015fd4:	2b00      	cmp	r3, #0
 8015fd6:	d04c      	beq.n	8016072 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8015fd8:	697b      	ldr	r3, [r7, #20]
 8015fda:	685b      	ldr	r3, [r3, #4]
 8015fdc:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8015fde:	89b8      	ldrh	r0, [r7, #12]
 8015fe0:	693b      	ldr	r3, [r7, #16]
 8015fe2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015fe6:	2302      	movs	r3, #2
 8015fe8:	2239      	movs	r2, #57	; 0x39
 8015fea:	f000 f9e5 	bl	80163b8 <dhcp_option>
 8015fee:	4603      	mov	r3, r0
 8015ff0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8015ff2:	89b8      	ldrh	r0, [r7, #12]
 8015ff4:	693b      	ldr	r3, [r7, #16]
 8015ff6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015ffa:	687b      	ldr	r3, [r7, #4]
 8015ffc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015ffe:	461a      	mov	r2, r3
 8016000:	f000 fa34 	bl	801646c <dhcp_option_short>
 8016004:	4603      	mov	r3, r0
 8016006:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8016008:	89b8      	ldrh	r0, [r7, #12]
 801600a:	693b      	ldr	r3, [r7, #16]
 801600c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016010:	2303      	movs	r3, #3
 8016012:	2237      	movs	r2, #55	; 0x37
 8016014:	f000 f9d0 	bl	80163b8 <dhcp_option>
 8016018:	4603      	mov	r3, r0
 801601a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801601c:	2300      	movs	r3, #0
 801601e:	77bb      	strb	r3, [r7, #30]
 8016020:	e00e      	b.n	8016040 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8016022:	89b8      	ldrh	r0, [r7, #12]
 8016024:	693b      	ldr	r3, [r7, #16]
 8016026:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801602a:	7fbb      	ldrb	r3, [r7, #30]
 801602c:	4a29      	ldr	r2, [pc, #164]	; (80160d4 <dhcp_rebind+0x128>)
 801602e:	5cd3      	ldrb	r3, [r2, r3]
 8016030:	461a      	mov	r2, r3
 8016032:	f000 f9f5 	bl	8016420 <dhcp_option_byte>
 8016036:	4603      	mov	r3, r0
 8016038:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801603a:	7fbb      	ldrb	r3, [r7, #30]
 801603c:	3301      	adds	r3, #1
 801603e:	77bb      	strb	r3, [r7, #30]
 8016040:	7fbb      	ldrb	r3, [r7, #30]
 8016042:	2b02      	cmp	r3, #2
 8016044:	d9ed      	bls.n	8016022 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8016046:	89b8      	ldrh	r0, [r7, #12]
 8016048:	693b      	ldr	r3, [r7, #16]
 801604a:	33f0      	adds	r3, #240	; 0xf0
 801604c:	697a      	ldr	r2, [r7, #20]
 801604e:	4619      	mov	r1, r3
 8016050:	f000 fefa 	bl	8016e48 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8016054:	4b20      	ldr	r3, [pc, #128]	; (80160d8 <dhcp_rebind+0x12c>)
 8016056:	6818      	ldr	r0, [r3, #0]
 8016058:	687b      	ldr	r3, [r7, #4]
 801605a:	9300      	str	r3, [sp, #0]
 801605c:	2343      	movs	r3, #67	; 0x43
 801605e:	4a1f      	ldr	r2, [pc, #124]	; (80160dc <dhcp_rebind+0x130>)
 8016060:	6979      	ldr	r1, [r7, #20]
 8016062:	f7fe fdf7 	bl	8014c54 <udp_sendto_if>
 8016066:	4603      	mov	r3, r0
 8016068:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801606a:	6978      	ldr	r0, [r7, #20]
 801606c:	f7f7 ff14 	bl	800de98 <pbuf_free>
 8016070:	e001      	b.n	8016076 <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8016072:	23ff      	movs	r3, #255	; 0xff
 8016074:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8016076:	69bb      	ldr	r3, [r7, #24]
 8016078:	799b      	ldrb	r3, [r3, #6]
 801607a:	2bff      	cmp	r3, #255	; 0xff
 801607c:	d005      	beq.n	801608a <dhcp_rebind+0xde>
    dhcp->tries++;
 801607e:	69bb      	ldr	r3, [r7, #24]
 8016080:	799b      	ldrb	r3, [r3, #6]
 8016082:	3301      	adds	r3, #1
 8016084:	b2da      	uxtb	r2, r3
 8016086:	69bb      	ldr	r3, [r7, #24]
 8016088:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801608a:	69bb      	ldr	r3, [r7, #24]
 801608c:	799b      	ldrb	r3, [r3, #6]
 801608e:	2b09      	cmp	r3, #9
 8016090:	d80a      	bhi.n	80160a8 <dhcp_rebind+0xfc>
 8016092:	69bb      	ldr	r3, [r7, #24]
 8016094:	799b      	ldrb	r3, [r3, #6]
 8016096:	b29b      	uxth	r3, r3
 8016098:	461a      	mov	r2, r3
 801609a:	0152      	lsls	r2, r2, #5
 801609c:	1ad2      	subs	r2, r2, r3
 801609e:	0092      	lsls	r2, r2, #2
 80160a0:	4413      	add	r3, r2
 80160a2:	00db      	lsls	r3, r3, #3
 80160a4:	b29b      	uxth	r3, r3
 80160a6:	e001      	b.n	80160ac <dhcp_rebind+0x100>
 80160a8:	f242 7310 	movw	r3, #10000	; 0x2710
 80160ac:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80160ae:	89fb      	ldrh	r3, [r7, #14]
 80160b0:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80160b4:	4a0a      	ldr	r2, [pc, #40]	; (80160e0 <dhcp_rebind+0x134>)
 80160b6:	fb82 1203 	smull	r1, r2, r2, r3
 80160ba:	1152      	asrs	r2, r2, #5
 80160bc:	17db      	asrs	r3, r3, #31
 80160be:	1ad3      	subs	r3, r2, r3
 80160c0:	b29a      	uxth	r2, r3
 80160c2:	69bb      	ldr	r3, [r7, #24]
 80160c4:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80160c6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80160ca:	4618      	mov	r0, r3
 80160cc:	3720      	adds	r7, #32
 80160ce:	46bd      	mov	sp, r7
 80160d0:	bd80      	pop	{r7, pc}
 80160d2:	bf00      	nop
 80160d4:	200000a8 	.word	0x200000a8
 80160d8:	2000bfa8 	.word	0x2000bfa8
 80160dc:	0801eb80 	.word	0x0801eb80
 80160e0:	10624dd3 	.word	0x10624dd3

080160e4 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 80160e4:	b5b0      	push	{r4, r5, r7, lr}
 80160e6:	b08a      	sub	sp, #40	; 0x28
 80160e8:	af02      	add	r7, sp, #8
 80160ea:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80160ec:	687b      	ldr	r3, [r7, #4]
 80160ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80160f0:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 80160f2:	2103      	movs	r1, #3
 80160f4:	69b8      	ldr	r0, [r7, #24]
 80160f6:	f000 f945 	bl	8016384 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80160fa:	f107 030c 	add.w	r3, r7, #12
 80160fe:	2203      	movs	r2, #3
 8016100:	69b9      	ldr	r1, [r7, #24]
 8016102:	6878      	ldr	r0, [r7, #4]
 8016104:	f000 fdca 	bl	8016c9c <dhcp_create_msg>
 8016108:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801610a:	697b      	ldr	r3, [r7, #20]
 801610c:	2b00      	cmp	r3, #0
 801610e:	d066      	beq.n	80161de <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8016110:	697b      	ldr	r3, [r7, #20]
 8016112:	685b      	ldr	r3, [r3, #4]
 8016114:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8016116:	89b8      	ldrh	r0, [r7, #12]
 8016118:	693b      	ldr	r3, [r7, #16]
 801611a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801611e:	2302      	movs	r3, #2
 8016120:	2239      	movs	r2, #57	; 0x39
 8016122:	f000 f949 	bl	80163b8 <dhcp_option>
 8016126:	4603      	mov	r3, r0
 8016128:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 801612a:	89b8      	ldrh	r0, [r7, #12]
 801612c:	693b      	ldr	r3, [r7, #16]
 801612e:	33f0      	adds	r3, #240	; 0xf0
 8016130:	f44f 7210 	mov.w	r2, #576	; 0x240
 8016134:	4619      	mov	r1, r3
 8016136:	f000 f999 	bl	801646c <dhcp_option_short>
 801613a:	4603      	mov	r3, r0
 801613c:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801613e:	89b8      	ldrh	r0, [r7, #12]
 8016140:	693b      	ldr	r3, [r7, #16]
 8016142:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016146:	2304      	movs	r3, #4
 8016148:	2232      	movs	r2, #50	; 0x32
 801614a:	f000 f935 	bl	80163b8 <dhcp_option>
 801614e:	4603      	mov	r3, r0
 8016150:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8016152:	89bc      	ldrh	r4, [r7, #12]
 8016154:	693b      	ldr	r3, [r7, #16]
 8016156:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801615a:	69bb      	ldr	r3, [r7, #24]
 801615c:	69db      	ldr	r3, [r3, #28]
 801615e:	4618      	mov	r0, r3
 8016160:	f7f6 fa4a 	bl	800c5f8 <lwip_htonl>
 8016164:	4603      	mov	r3, r0
 8016166:	461a      	mov	r2, r3
 8016168:	4629      	mov	r1, r5
 801616a:	4620      	mov	r0, r4
 801616c:	f000 f9b0 	bl	80164d0 <dhcp_option_long>
 8016170:	4603      	mov	r3, r0
 8016172:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8016174:	89b8      	ldrh	r0, [r7, #12]
 8016176:	693b      	ldr	r3, [r7, #16]
 8016178:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801617c:	2303      	movs	r3, #3
 801617e:	2237      	movs	r2, #55	; 0x37
 8016180:	f000 f91a 	bl	80163b8 <dhcp_option>
 8016184:	4603      	mov	r3, r0
 8016186:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8016188:	2300      	movs	r3, #0
 801618a:	77bb      	strb	r3, [r7, #30]
 801618c:	e00e      	b.n	80161ac <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801618e:	89b8      	ldrh	r0, [r7, #12]
 8016190:	693b      	ldr	r3, [r7, #16]
 8016192:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016196:	7fbb      	ldrb	r3, [r7, #30]
 8016198:	4a29      	ldr	r2, [pc, #164]	; (8016240 <dhcp_reboot+0x15c>)
 801619a:	5cd3      	ldrb	r3, [r2, r3]
 801619c:	461a      	mov	r2, r3
 801619e:	f000 f93f 	bl	8016420 <dhcp_option_byte>
 80161a2:	4603      	mov	r3, r0
 80161a4:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80161a6:	7fbb      	ldrb	r3, [r7, #30]
 80161a8:	3301      	adds	r3, #1
 80161aa:	77bb      	strb	r3, [r7, #30]
 80161ac:	7fbb      	ldrb	r3, [r7, #30]
 80161ae:	2b02      	cmp	r3, #2
 80161b0:	d9ed      	bls.n	801618e <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80161b2:	89b8      	ldrh	r0, [r7, #12]
 80161b4:	693b      	ldr	r3, [r7, #16]
 80161b6:	33f0      	adds	r3, #240	; 0xf0
 80161b8:	697a      	ldr	r2, [r7, #20]
 80161ba:	4619      	mov	r1, r3
 80161bc:	f000 fe44 	bl	8016e48 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80161c0:	4b20      	ldr	r3, [pc, #128]	; (8016244 <dhcp_reboot+0x160>)
 80161c2:	6818      	ldr	r0, [r3, #0]
 80161c4:	687b      	ldr	r3, [r7, #4]
 80161c6:	9300      	str	r3, [sp, #0]
 80161c8:	2343      	movs	r3, #67	; 0x43
 80161ca:	4a1f      	ldr	r2, [pc, #124]	; (8016248 <dhcp_reboot+0x164>)
 80161cc:	6979      	ldr	r1, [r7, #20]
 80161ce:	f7fe fd41 	bl	8014c54 <udp_sendto_if>
 80161d2:	4603      	mov	r3, r0
 80161d4:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80161d6:	6978      	ldr	r0, [r7, #20]
 80161d8:	f7f7 fe5e 	bl	800de98 <pbuf_free>
 80161dc:	e001      	b.n	80161e2 <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80161de:	23ff      	movs	r3, #255	; 0xff
 80161e0:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80161e2:	69bb      	ldr	r3, [r7, #24]
 80161e4:	799b      	ldrb	r3, [r3, #6]
 80161e6:	2bff      	cmp	r3, #255	; 0xff
 80161e8:	d005      	beq.n	80161f6 <dhcp_reboot+0x112>
    dhcp->tries++;
 80161ea:	69bb      	ldr	r3, [r7, #24]
 80161ec:	799b      	ldrb	r3, [r3, #6]
 80161ee:	3301      	adds	r3, #1
 80161f0:	b2da      	uxtb	r2, r3
 80161f2:	69bb      	ldr	r3, [r7, #24]
 80161f4:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80161f6:	69bb      	ldr	r3, [r7, #24]
 80161f8:	799b      	ldrb	r3, [r3, #6]
 80161fa:	2b09      	cmp	r3, #9
 80161fc:	d80a      	bhi.n	8016214 <dhcp_reboot+0x130>
 80161fe:	69bb      	ldr	r3, [r7, #24]
 8016200:	799b      	ldrb	r3, [r3, #6]
 8016202:	b29b      	uxth	r3, r3
 8016204:	461a      	mov	r2, r3
 8016206:	0152      	lsls	r2, r2, #5
 8016208:	1ad2      	subs	r2, r2, r3
 801620a:	0092      	lsls	r2, r2, #2
 801620c:	4413      	add	r3, r2
 801620e:	00db      	lsls	r3, r3, #3
 8016210:	b29b      	uxth	r3, r3
 8016212:	e001      	b.n	8016218 <dhcp_reboot+0x134>
 8016214:	f242 7310 	movw	r3, #10000	; 0x2710
 8016218:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801621a:	89fb      	ldrh	r3, [r7, #14]
 801621c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8016220:	4a0a      	ldr	r2, [pc, #40]	; (801624c <dhcp_reboot+0x168>)
 8016222:	fb82 1203 	smull	r1, r2, r2, r3
 8016226:	1152      	asrs	r2, r2, #5
 8016228:	17db      	asrs	r3, r3, #31
 801622a:	1ad3      	subs	r3, r2, r3
 801622c:	b29a      	uxth	r2, r3
 801622e:	69bb      	ldr	r3, [r7, #24]
 8016230:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8016232:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8016236:	4618      	mov	r0, r3
 8016238:	3720      	adds	r7, #32
 801623a:	46bd      	mov	sp, r7
 801623c:	bdb0      	pop	{r4, r5, r7, pc}
 801623e:	bf00      	nop
 8016240:	200000a8 	.word	0x200000a8
 8016244:	2000bfa8 	.word	0x2000bfa8
 8016248:	0801eb80 	.word	0x0801eb80
 801624c:	10624dd3 	.word	0x10624dd3

08016250 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8016250:	b5b0      	push	{r4, r5, r7, lr}
 8016252:	b08a      	sub	sp, #40	; 0x28
 8016254:	af02      	add	r7, sp, #8
 8016256:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016258:	687b      	ldr	r3, [r7, #4]
 801625a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801625c:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 801625e:	69fb      	ldr	r3, [r7, #28]
 8016260:	2b00      	cmp	r3, #0
 8016262:	f000 8084 	beq.w	801636e <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 8016266:	69fb      	ldr	r3, [r7, #28]
 8016268:	795b      	ldrb	r3, [r3, #5]
 801626a:	2b00      	cmp	r3, #0
 801626c:	f000 8081 	beq.w	8016372 <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8016270:	69fb      	ldr	r3, [r7, #28]
 8016272:	699b      	ldr	r3, [r3, #24]
 8016274:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8016276:	69fb      	ldr	r3, [r7, #28]
 8016278:	2200      	movs	r2, #0
 801627a:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 801627c:	69fb      	ldr	r3, [r7, #28]
 801627e:	2200      	movs	r2, #0
 8016280:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8016282:	69fb      	ldr	r3, [r7, #28]
 8016284:	2200      	movs	r2, #0
 8016286:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8016288:	69fb      	ldr	r3, [r7, #28]
 801628a:	2200      	movs	r2, #0
 801628c:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 801628e:	69fb      	ldr	r3, [r7, #28]
 8016290:	2200      	movs	r2, #0
 8016292:	631a      	str	r2, [r3, #48]	; 0x30
 8016294:	69fb      	ldr	r3, [r7, #28]
 8016296:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8016298:	69fb      	ldr	r3, [r7, #28]
 801629a:	62da      	str	r2, [r3, #44]	; 0x2c
 801629c:	69fb      	ldr	r3, [r7, #28]
 801629e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80162a0:	69fb      	ldr	r3, [r7, #28]
 80162a2:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 80162a4:	69fb      	ldr	r3, [r7, #28]
 80162a6:	2200      	movs	r2, #0
 80162a8:	829a      	strh	r2, [r3, #20]
 80162aa:	69fb      	ldr	r3, [r7, #28]
 80162ac:	8a9a      	ldrh	r2, [r3, #20]
 80162ae:	69fb      	ldr	r3, [r7, #28]
 80162b0:	825a      	strh	r2, [r3, #18]
 80162b2:	69fb      	ldr	r3, [r7, #28]
 80162b4:	8a5a      	ldrh	r2, [r3, #18]
 80162b6:	69fb      	ldr	r3, [r7, #28]
 80162b8:	821a      	strh	r2, [r3, #16]
 80162ba:	69fb      	ldr	r3, [r7, #28]
 80162bc:	8a1a      	ldrh	r2, [r3, #16]
 80162be:	69fb      	ldr	r3, [r7, #28]
 80162c0:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 80162c2:	6878      	ldr	r0, [r7, #4]
 80162c4:	f000 fdee 	bl	8016ea4 <dhcp_supplied_address>
 80162c8:	4603      	mov	r3, r0
 80162ca:	2b00      	cmp	r3, #0
 80162cc:	d03b      	beq.n	8016346 <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 80162ce:	f107 030e 	add.w	r3, r7, #14
 80162d2:	2207      	movs	r2, #7
 80162d4:	69f9      	ldr	r1, [r7, #28]
 80162d6:	6878      	ldr	r0, [r7, #4]
 80162d8:	f000 fce0 	bl	8016c9c <dhcp_create_msg>
 80162dc:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 80162de:	69bb      	ldr	r3, [r7, #24]
 80162e0:	2b00      	cmp	r3, #0
 80162e2:	d030      	beq.n	8016346 <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80162e4:	69bb      	ldr	r3, [r7, #24]
 80162e6:	685b      	ldr	r3, [r3, #4]
 80162e8:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 80162ea:	89f8      	ldrh	r0, [r7, #14]
 80162ec:	697b      	ldr	r3, [r7, #20]
 80162ee:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80162f2:	2304      	movs	r3, #4
 80162f4:	2236      	movs	r2, #54	; 0x36
 80162f6:	f000 f85f 	bl	80163b8 <dhcp_option>
 80162fa:	4603      	mov	r3, r0
 80162fc:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 80162fe:	89fc      	ldrh	r4, [r7, #14]
 8016300:	697b      	ldr	r3, [r7, #20]
 8016302:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8016306:	693b      	ldr	r3, [r7, #16]
 8016308:	4618      	mov	r0, r3
 801630a:	f7f6 f975 	bl	800c5f8 <lwip_htonl>
 801630e:	4603      	mov	r3, r0
 8016310:	461a      	mov	r2, r3
 8016312:	4629      	mov	r1, r5
 8016314:	4620      	mov	r0, r4
 8016316:	f000 f8db 	bl	80164d0 <dhcp_option_long>
 801631a:	4603      	mov	r3, r0
 801631c:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801631e:	89f8      	ldrh	r0, [r7, #14]
 8016320:	697b      	ldr	r3, [r7, #20]
 8016322:	33f0      	adds	r3, #240	; 0xf0
 8016324:	69ba      	ldr	r2, [r7, #24]
 8016326:	4619      	mov	r1, r3
 8016328:	f000 fd8e 	bl	8016e48 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801632c:	4b13      	ldr	r3, [pc, #76]	; (801637c <dhcp_release_and_stop+0x12c>)
 801632e:	6818      	ldr	r0, [r3, #0]
 8016330:	f107 0210 	add.w	r2, r7, #16
 8016334:	687b      	ldr	r3, [r7, #4]
 8016336:	9300      	str	r3, [sp, #0]
 8016338:	2343      	movs	r3, #67	; 0x43
 801633a:	69b9      	ldr	r1, [r7, #24]
 801633c:	f7fe fc8a 	bl	8014c54 <udp_sendto_if>
      pbuf_free(p_out);
 8016340:	69b8      	ldr	r0, [r7, #24]
 8016342:	f7f7 fda9 	bl	800de98 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8016346:	4b0e      	ldr	r3, [pc, #56]	; (8016380 <dhcp_release_and_stop+0x130>)
 8016348:	4a0d      	ldr	r2, [pc, #52]	; (8016380 <dhcp_release_and_stop+0x130>)
 801634a:	490d      	ldr	r1, [pc, #52]	; (8016380 <dhcp_release_and_stop+0x130>)
 801634c:	6878      	ldr	r0, [r7, #4]
 801634e:	f7f7 f903 	bl	800d558 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8016352:	2100      	movs	r1, #0
 8016354:	69f8      	ldr	r0, [r7, #28]
 8016356:	f000 f815 	bl	8016384 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 801635a:	69fb      	ldr	r3, [r7, #28]
 801635c:	791b      	ldrb	r3, [r3, #4]
 801635e:	2b00      	cmp	r3, #0
 8016360:	d008      	beq.n	8016374 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8016362:	f7fe ffc1 	bl	80152e8 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8016366:	69fb      	ldr	r3, [r7, #28]
 8016368:	2200      	movs	r2, #0
 801636a:	711a      	strb	r2, [r3, #4]
 801636c:	e002      	b.n	8016374 <dhcp_release_and_stop+0x124>
    return;
 801636e:	bf00      	nop
 8016370:	e000      	b.n	8016374 <dhcp_release_and_stop+0x124>
    return;
 8016372:	bf00      	nop
  }
}
 8016374:	3720      	adds	r7, #32
 8016376:	46bd      	mov	sp, r7
 8016378:	bdb0      	pop	{r4, r5, r7, pc}
 801637a:	bf00      	nop
 801637c:	2000bfa8 	.word	0x2000bfa8
 8016380:	0801eb7c 	.word	0x0801eb7c

08016384 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8016384:	b480      	push	{r7}
 8016386:	b083      	sub	sp, #12
 8016388:	af00      	add	r7, sp, #0
 801638a:	6078      	str	r0, [r7, #4]
 801638c:	460b      	mov	r3, r1
 801638e:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8016390:	687b      	ldr	r3, [r7, #4]
 8016392:	795b      	ldrb	r3, [r3, #5]
 8016394:	78fa      	ldrb	r2, [r7, #3]
 8016396:	429a      	cmp	r2, r3
 8016398:	d008      	beq.n	80163ac <dhcp_set_state+0x28>
    dhcp->state = new_state;
 801639a:	687b      	ldr	r3, [r7, #4]
 801639c:	78fa      	ldrb	r2, [r7, #3]
 801639e:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 80163a0:	687b      	ldr	r3, [r7, #4]
 80163a2:	2200      	movs	r2, #0
 80163a4:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 80163a6:	687b      	ldr	r3, [r7, #4]
 80163a8:	2200      	movs	r2, #0
 80163aa:	811a      	strh	r2, [r3, #8]
  }
}
 80163ac:	bf00      	nop
 80163ae:	370c      	adds	r7, #12
 80163b0:	46bd      	mov	sp, r7
 80163b2:	bc80      	pop	{r7}
 80163b4:	4770      	bx	lr
	...

080163b8 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 80163b8:	b580      	push	{r7, lr}
 80163ba:	b082      	sub	sp, #8
 80163bc:	af00      	add	r7, sp, #0
 80163be:	6039      	str	r1, [r7, #0]
 80163c0:	4611      	mov	r1, r2
 80163c2:	461a      	mov	r2, r3
 80163c4:	4603      	mov	r3, r0
 80163c6:	80fb      	strh	r3, [r7, #6]
 80163c8:	460b      	mov	r3, r1
 80163ca:	717b      	strb	r3, [r7, #5]
 80163cc:	4613      	mov	r3, r2
 80163ce:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80163d0:	88fa      	ldrh	r2, [r7, #6]
 80163d2:	793b      	ldrb	r3, [r7, #4]
 80163d4:	4413      	add	r3, r2
 80163d6:	3302      	adds	r3, #2
 80163d8:	2b44      	cmp	r3, #68	; 0x44
 80163da:	d906      	bls.n	80163ea <dhcp_option+0x32>
 80163dc:	4b0d      	ldr	r3, [pc, #52]	; (8016414 <dhcp_option+0x5c>)
 80163de:	f240 529a 	movw	r2, #1434	; 0x59a
 80163e2:	490d      	ldr	r1, [pc, #52]	; (8016418 <dhcp_option+0x60>)
 80163e4:	480d      	ldr	r0, [pc, #52]	; (801641c <dhcp_option+0x64>)
 80163e6:	f004 f9dd 	bl	801a7a4 <iprintf>
  options[options_out_len++] = option_type;
 80163ea:	88fb      	ldrh	r3, [r7, #6]
 80163ec:	1c5a      	adds	r2, r3, #1
 80163ee:	80fa      	strh	r2, [r7, #6]
 80163f0:	461a      	mov	r2, r3
 80163f2:	683b      	ldr	r3, [r7, #0]
 80163f4:	4413      	add	r3, r2
 80163f6:	797a      	ldrb	r2, [r7, #5]
 80163f8:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 80163fa:	88fb      	ldrh	r3, [r7, #6]
 80163fc:	1c5a      	adds	r2, r3, #1
 80163fe:	80fa      	strh	r2, [r7, #6]
 8016400:	461a      	mov	r2, r3
 8016402:	683b      	ldr	r3, [r7, #0]
 8016404:	4413      	add	r3, r2
 8016406:	793a      	ldrb	r2, [r7, #4]
 8016408:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801640a:	88fb      	ldrh	r3, [r7, #6]
}
 801640c:	4618      	mov	r0, r3
 801640e:	3708      	adds	r7, #8
 8016410:	46bd      	mov	sp, r7
 8016412:	bd80      	pop	{r7, pc}
 8016414:	0801df80 	.word	0x0801df80
 8016418:	0801e114 	.word	0x0801e114
 801641c:	0801dfe0 	.word	0x0801dfe0

08016420 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8016420:	b580      	push	{r7, lr}
 8016422:	b082      	sub	sp, #8
 8016424:	af00      	add	r7, sp, #0
 8016426:	4603      	mov	r3, r0
 8016428:	6039      	str	r1, [r7, #0]
 801642a:	80fb      	strh	r3, [r7, #6]
 801642c:	4613      	mov	r3, r2
 801642e:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8016430:	88fb      	ldrh	r3, [r7, #6]
 8016432:	2b43      	cmp	r3, #67	; 0x43
 8016434:	d906      	bls.n	8016444 <dhcp_option_byte+0x24>
 8016436:	4b0a      	ldr	r3, [pc, #40]	; (8016460 <dhcp_option_byte+0x40>)
 8016438:	f240 52a6 	movw	r2, #1446	; 0x5a6
 801643c:	4909      	ldr	r1, [pc, #36]	; (8016464 <dhcp_option_byte+0x44>)
 801643e:	480a      	ldr	r0, [pc, #40]	; (8016468 <dhcp_option_byte+0x48>)
 8016440:	f004 f9b0 	bl	801a7a4 <iprintf>
  options[options_out_len++] = value;
 8016444:	88fb      	ldrh	r3, [r7, #6]
 8016446:	1c5a      	adds	r2, r3, #1
 8016448:	80fa      	strh	r2, [r7, #6]
 801644a:	461a      	mov	r2, r3
 801644c:	683b      	ldr	r3, [r7, #0]
 801644e:	4413      	add	r3, r2
 8016450:	797a      	ldrb	r2, [r7, #5]
 8016452:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8016454:	88fb      	ldrh	r3, [r7, #6]
}
 8016456:	4618      	mov	r0, r3
 8016458:	3708      	adds	r7, #8
 801645a:	46bd      	mov	sp, r7
 801645c:	bd80      	pop	{r7, pc}
 801645e:	bf00      	nop
 8016460:	0801df80 	.word	0x0801df80
 8016464:	0801e158 	.word	0x0801e158
 8016468:	0801dfe0 	.word	0x0801dfe0

0801646c <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 801646c:	b580      	push	{r7, lr}
 801646e:	b082      	sub	sp, #8
 8016470:	af00      	add	r7, sp, #0
 8016472:	4603      	mov	r3, r0
 8016474:	6039      	str	r1, [r7, #0]
 8016476:	80fb      	strh	r3, [r7, #6]
 8016478:	4613      	mov	r3, r2
 801647a:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 801647c:	88fb      	ldrh	r3, [r7, #6]
 801647e:	3302      	adds	r3, #2
 8016480:	2b44      	cmp	r3, #68	; 0x44
 8016482:	d906      	bls.n	8016492 <dhcp_option_short+0x26>
 8016484:	4b0f      	ldr	r3, [pc, #60]	; (80164c4 <dhcp_option_short+0x58>)
 8016486:	f240 52ae 	movw	r2, #1454	; 0x5ae
 801648a:	490f      	ldr	r1, [pc, #60]	; (80164c8 <dhcp_option_short+0x5c>)
 801648c:	480f      	ldr	r0, [pc, #60]	; (80164cc <dhcp_option_short+0x60>)
 801648e:	f004 f989 	bl	801a7a4 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8016492:	88bb      	ldrh	r3, [r7, #4]
 8016494:	0a1b      	lsrs	r3, r3, #8
 8016496:	b29a      	uxth	r2, r3
 8016498:	88fb      	ldrh	r3, [r7, #6]
 801649a:	1c59      	adds	r1, r3, #1
 801649c:	80f9      	strh	r1, [r7, #6]
 801649e:	4619      	mov	r1, r3
 80164a0:	683b      	ldr	r3, [r7, #0]
 80164a2:	440b      	add	r3, r1
 80164a4:	b2d2      	uxtb	r2, r2
 80164a6:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 80164a8:	88fb      	ldrh	r3, [r7, #6]
 80164aa:	1c5a      	adds	r2, r3, #1
 80164ac:	80fa      	strh	r2, [r7, #6]
 80164ae:	461a      	mov	r2, r3
 80164b0:	683b      	ldr	r3, [r7, #0]
 80164b2:	4413      	add	r3, r2
 80164b4:	88ba      	ldrh	r2, [r7, #4]
 80164b6:	b2d2      	uxtb	r2, r2
 80164b8:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80164ba:	88fb      	ldrh	r3, [r7, #6]
}
 80164bc:	4618      	mov	r0, r3
 80164be:	3708      	adds	r7, #8
 80164c0:	46bd      	mov	sp, r7
 80164c2:	bd80      	pop	{r7, pc}
 80164c4:	0801df80 	.word	0x0801df80
 80164c8:	0801e190 	.word	0x0801e190
 80164cc:	0801dfe0 	.word	0x0801dfe0

080164d0 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 80164d0:	b580      	push	{r7, lr}
 80164d2:	b084      	sub	sp, #16
 80164d4:	af00      	add	r7, sp, #0
 80164d6:	4603      	mov	r3, r0
 80164d8:	60b9      	str	r1, [r7, #8]
 80164da:	607a      	str	r2, [r7, #4]
 80164dc:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 80164de:	89fb      	ldrh	r3, [r7, #14]
 80164e0:	3304      	adds	r3, #4
 80164e2:	2b44      	cmp	r3, #68	; 0x44
 80164e4:	d906      	bls.n	80164f4 <dhcp_option_long+0x24>
 80164e6:	4b19      	ldr	r3, [pc, #100]	; (801654c <dhcp_option_long+0x7c>)
 80164e8:	f240 52b7 	movw	r2, #1463	; 0x5b7
 80164ec:	4918      	ldr	r1, [pc, #96]	; (8016550 <dhcp_option_long+0x80>)
 80164ee:	4819      	ldr	r0, [pc, #100]	; (8016554 <dhcp_option_long+0x84>)
 80164f0:	f004 f958 	bl	801a7a4 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 80164f4:	687b      	ldr	r3, [r7, #4]
 80164f6:	0e1a      	lsrs	r2, r3, #24
 80164f8:	89fb      	ldrh	r3, [r7, #14]
 80164fa:	1c59      	adds	r1, r3, #1
 80164fc:	81f9      	strh	r1, [r7, #14]
 80164fe:	4619      	mov	r1, r3
 8016500:	68bb      	ldr	r3, [r7, #8]
 8016502:	440b      	add	r3, r1
 8016504:	b2d2      	uxtb	r2, r2
 8016506:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8016508:	687b      	ldr	r3, [r7, #4]
 801650a:	0c1a      	lsrs	r2, r3, #16
 801650c:	89fb      	ldrh	r3, [r7, #14]
 801650e:	1c59      	adds	r1, r3, #1
 8016510:	81f9      	strh	r1, [r7, #14]
 8016512:	4619      	mov	r1, r3
 8016514:	68bb      	ldr	r3, [r7, #8]
 8016516:	440b      	add	r3, r1
 8016518:	b2d2      	uxtb	r2, r2
 801651a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 801651c:	687b      	ldr	r3, [r7, #4]
 801651e:	0a1a      	lsrs	r2, r3, #8
 8016520:	89fb      	ldrh	r3, [r7, #14]
 8016522:	1c59      	adds	r1, r3, #1
 8016524:	81f9      	strh	r1, [r7, #14]
 8016526:	4619      	mov	r1, r3
 8016528:	68bb      	ldr	r3, [r7, #8]
 801652a:	440b      	add	r3, r1
 801652c:	b2d2      	uxtb	r2, r2
 801652e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8016530:	89fb      	ldrh	r3, [r7, #14]
 8016532:	1c5a      	adds	r2, r3, #1
 8016534:	81fa      	strh	r2, [r7, #14]
 8016536:	461a      	mov	r2, r3
 8016538:	68bb      	ldr	r3, [r7, #8]
 801653a:	4413      	add	r3, r2
 801653c:	687a      	ldr	r2, [r7, #4]
 801653e:	b2d2      	uxtb	r2, r2
 8016540:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8016542:	89fb      	ldrh	r3, [r7, #14]
}
 8016544:	4618      	mov	r0, r3
 8016546:	3710      	adds	r7, #16
 8016548:	46bd      	mov	sp, r7
 801654a:	bd80      	pop	{r7, pc}
 801654c:	0801df80 	.word	0x0801df80
 8016550:	0801e1cc 	.word	0x0801e1cc
 8016554:	0801dfe0 	.word	0x0801dfe0

08016558 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8016558:	b580      	push	{r7, lr}
 801655a:	b090      	sub	sp, #64	; 0x40
 801655c:	af00      	add	r7, sp, #0
 801655e:	6078      	str	r0, [r7, #4]
 8016560:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8016562:	2300      	movs	r3, #0
 8016564:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 8016566:	2300      	movs	r3, #0
 8016568:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 801656a:	2208      	movs	r2, #8
 801656c:	2100      	movs	r1, #0
 801656e:	48b5      	ldr	r0, [pc, #724]	; (8016844 <dhcp_parse_reply+0x2ec>)
 8016570:	f004 f832 	bl	801a5d8 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8016574:	687b      	ldr	r3, [r7, #4]
 8016576:	895b      	ldrh	r3, [r3, #10]
 8016578:	2b2b      	cmp	r3, #43	; 0x2b
 801657a:	d802      	bhi.n	8016582 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 801657c:	f06f 0301 	mvn.w	r3, #1
 8016580:	e2a7      	b.n	8016ad2 <dhcp_parse_reply+0x57a>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 8016582:	687b      	ldr	r3, [r7, #4]
 8016584:	685b      	ldr	r3, [r3, #4]
 8016586:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8016588:	23f0      	movs	r3, #240	; 0xf0
 801658a:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 801658c:	687b      	ldr	r3, [r7, #4]
 801658e:	891b      	ldrh	r3, [r3, #8]
 8016590:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 8016592:	687b      	ldr	r3, [r7, #4]
 8016594:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8016596:	e00c      	b.n	80165b2 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8016598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801659a:	895b      	ldrh	r3, [r3, #10]
 801659c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801659e:	1ad3      	subs	r3, r2, r3
 80165a0:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 80165a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80165a4:	895b      	ldrh	r3, [r3, #10]
 80165a6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80165a8:	1ad3      	subs	r3, r2, r3
 80165aa:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 80165ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80165ae:	681b      	ldr	r3, [r3, #0]
 80165b0:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 80165b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80165b4:	2b00      	cmp	r3, #0
 80165b6:	d004      	beq.n	80165c2 <dhcp_parse_reply+0x6a>
 80165b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80165ba:	895b      	ldrh	r3, [r3, #10]
 80165bc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80165be:	429a      	cmp	r2, r3
 80165c0:	d2ea      	bcs.n	8016598 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 80165c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80165c4:	2b00      	cmp	r3, #0
 80165c6:	d102      	bne.n	80165ce <dhcp_parse_reply+0x76>
    return ERR_BUF;
 80165c8:	f06f 0301 	mvn.w	r3, #1
 80165cc:	e281      	b.n	8016ad2 <dhcp_parse_reply+0x57a>
  }
  offset = options_idx;
 80165ce:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80165d0:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 80165d2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80165d4:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 80165d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80165d8:	685b      	ldr	r3, [r3, #4]
 80165da:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 80165dc:	e239      	b.n	8016a52 <dhcp_parse_reply+0x4fa>
    u8_t op = options[offset];
 80165de:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80165e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80165e2:	4413      	add	r3, r2
 80165e4:	781b      	ldrb	r3, [r3, #0]
 80165e6:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 80165e8:	2300      	movs	r3, #0
 80165ea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 80165ee:	f04f 33ff 	mov.w	r3, #4294967295
 80165f2:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 80165f4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80165f6:	3302      	adds	r3, #2
 80165f8:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 80165fa:	8bfa      	ldrh	r2, [r7, #30]
 80165fc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80165fe:	429a      	cmp	r2, r3
 8016600:	d202      	bcs.n	8016608 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 8016602:	f06f 0301 	mvn.w	r3, #1
 8016606:	e264      	b.n	8016ad2 <dhcp_parse_reply+0x57a>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8016608:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801660a:	3301      	adds	r3, #1
 801660c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801660e:	8952      	ldrh	r2, [r2, #10]
 8016610:	4293      	cmp	r3, r2
 8016612:	da07      	bge.n	8016624 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8016614:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016616:	3301      	adds	r3, #1
 8016618:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801661a:	4413      	add	r3, r2
 801661c:	781b      	ldrb	r3, [r3, #0]
 801661e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016622:	e00b      	b.n	801663c <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8016624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016626:	681b      	ldr	r3, [r3, #0]
 8016628:	2b00      	cmp	r3, #0
 801662a:	d004      	beq.n	8016636 <dhcp_parse_reply+0xde>
 801662c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801662e:	681b      	ldr	r3, [r3, #0]
 8016630:	685b      	ldr	r3, [r3, #4]
 8016632:	781b      	ldrb	r3, [r3, #0]
 8016634:	e000      	b.n	8016638 <dhcp_parse_reply+0xe0>
 8016636:	2300      	movs	r3, #0
 8016638:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 801663c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016640:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 8016644:	7dfb      	ldrb	r3, [r7, #23]
 8016646:	2b3b      	cmp	r3, #59	; 0x3b
 8016648:	f200 812c 	bhi.w	80168a4 <dhcp_parse_reply+0x34c>
 801664c:	a201      	add	r2, pc, #4	; (adr r2, 8016654 <dhcp_parse_reply+0xfc>)
 801664e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016652:	bf00      	nop
 8016654:	08016745 	.word	0x08016745
 8016658:	08016755 	.word	0x08016755
 801665c:	080168a5 	.word	0x080168a5
 8016660:	08016777 	.word	0x08016777
 8016664:	080168a5 	.word	0x080168a5
 8016668:	080168a5 	.word	0x080168a5
 801666c:	080168a5 	.word	0x080168a5
 8016670:	080168a5 	.word	0x080168a5
 8016674:	080168a5 	.word	0x080168a5
 8016678:	080168a5 	.word	0x080168a5
 801667c:	080168a5 	.word	0x080168a5
 8016680:	080168a5 	.word	0x080168a5
 8016684:	080168a5 	.word	0x080168a5
 8016688:	080168a5 	.word	0x080168a5
 801668c:	080168a5 	.word	0x080168a5
 8016690:	080168a5 	.word	0x080168a5
 8016694:	080168a5 	.word	0x080168a5
 8016698:	080168a5 	.word	0x080168a5
 801669c:	080168a5 	.word	0x080168a5
 80166a0:	080168a5 	.word	0x080168a5
 80166a4:	080168a5 	.word	0x080168a5
 80166a8:	080168a5 	.word	0x080168a5
 80166ac:	080168a5 	.word	0x080168a5
 80166b0:	080168a5 	.word	0x080168a5
 80166b4:	080168a5 	.word	0x080168a5
 80166b8:	080168a5 	.word	0x080168a5
 80166bc:	080168a5 	.word	0x080168a5
 80166c0:	080168a5 	.word	0x080168a5
 80166c4:	080168a5 	.word	0x080168a5
 80166c8:	080168a5 	.word	0x080168a5
 80166cc:	080168a5 	.word	0x080168a5
 80166d0:	080168a5 	.word	0x080168a5
 80166d4:	080168a5 	.word	0x080168a5
 80166d8:	080168a5 	.word	0x080168a5
 80166dc:	080168a5 	.word	0x080168a5
 80166e0:	080168a5 	.word	0x080168a5
 80166e4:	080168a5 	.word	0x080168a5
 80166e8:	080168a5 	.word	0x080168a5
 80166ec:	080168a5 	.word	0x080168a5
 80166f0:	080168a5 	.word	0x080168a5
 80166f4:	080168a5 	.word	0x080168a5
 80166f8:	080168a5 	.word	0x080168a5
 80166fc:	080168a5 	.word	0x080168a5
 8016700:	080168a5 	.word	0x080168a5
 8016704:	080168a5 	.word	0x080168a5
 8016708:	080168a5 	.word	0x080168a5
 801670c:	080168a5 	.word	0x080168a5
 8016710:	080168a5 	.word	0x080168a5
 8016714:	080168a5 	.word	0x080168a5
 8016718:	080168a5 	.word	0x080168a5
 801671c:	080168a5 	.word	0x080168a5
 8016720:	080167a3 	.word	0x080167a3
 8016724:	080167c5 	.word	0x080167c5
 8016728:	08016801 	.word	0x08016801
 801672c:	08016823 	.word	0x08016823
 8016730:	080168a5 	.word	0x080168a5
 8016734:	080168a5 	.word	0x080168a5
 8016738:	080168a5 	.word	0x080168a5
 801673c:	08016861 	.word	0x08016861
 8016740:	08016883 	.word	0x08016883
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8016744:	2300      	movs	r3, #0
 8016746:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801674a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801674e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 8016752:	e0ab      	b.n	80168ac <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8016754:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016758:	2b04      	cmp	r3, #4
 801675a:	d009      	beq.n	8016770 <dhcp_parse_reply+0x218>
 801675c:	4b3a      	ldr	r3, [pc, #232]	; (8016848 <dhcp_parse_reply+0x2f0>)
 801675e:	f240 622e 	movw	r2, #1582	; 0x62e
 8016762:	493a      	ldr	r1, [pc, #232]	; (801684c <dhcp_parse_reply+0x2f4>)
 8016764:	483a      	ldr	r0, [pc, #232]	; (8016850 <dhcp_parse_reply+0x2f8>)
 8016766:	f004 f81d 	bl	801a7a4 <iprintf>
 801676a:	f06f 0305 	mvn.w	r3, #5
 801676e:	e1b0      	b.n	8016ad2 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8016770:	2306      	movs	r3, #6
 8016772:	623b      	str	r3, [r7, #32]
        break;
 8016774:	e09a      	b.n	80168ac <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8016776:	2304      	movs	r3, #4
 8016778:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 801677c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8016780:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016784:	429a      	cmp	r2, r3
 8016786:	d209      	bcs.n	801679c <dhcp_parse_reply+0x244>
 8016788:	4b2f      	ldr	r3, [pc, #188]	; (8016848 <dhcp_parse_reply+0x2f0>)
 801678a:	f240 6233 	movw	r2, #1587	; 0x633
 801678e:	4931      	ldr	r1, [pc, #196]	; (8016854 <dhcp_parse_reply+0x2fc>)
 8016790:	482f      	ldr	r0, [pc, #188]	; (8016850 <dhcp_parse_reply+0x2f8>)
 8016792:	f004 f807 	bl	801a7a4 <iprintf>
 8016796:	f06f 0305 	mvn.w	r3, #5
 801679a:	e19a      	b.n	8016ad2 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 801679c:	2307      	movs	r3, #7
 801679e:	623b      	str	r3, [r7, #32]
        break;
 80167a0:	e084      	b.n	80168ac <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80167a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80167a6:	2b04      	cmp	r3, #4
 80167a8:	d009      	beq.n	80167be <dhcp_parse_reply+0x266>
 80167aa:	4b27      	ldr	r3, [pc, #156]	; (8016848 <dhcp_parse_reply+0x2f0>)
 80167ac:	f240 6241 	movw	r2, #1601	; 0x641
 80167b0:	4926      	ldr	r1, [pc, #152]	; (801684c <dhcp_parse_reply+0x2f4>)
 80167b2:	4827      	ldr	r0, [pc, #156]	; (8016850 <dhcp_parse_reply+0x2f8>)
 80167b4:	f003 fff6 	bl	801a7a4 <iprintf>
 80167b8:	f06f 0305 	mvn.w	r3, #5
 80167bc:	e189      	b.n	8016ad2 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 80167be:	2303      	movs	r3, #3
 80167c0:	623b      	str	r3, [r7, #32]
        break;
 80167c2:	e073      	b.n	80168ac <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80167c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80167c8:	2b01      	cmp	r3, #1
 80167ca:	d009      	beq.n	80167e0 <dhcp_parse_reply+0x288>
 80167cc:	4b1e      	ldr	r3, [pc, #120]	; (8016848 <dhcp_parse_reply+0x2f0>)
 80167ce:	f240 624f 	movw	r2, #1615	; 0x64f
 80167d2:	4921      	ldr	r1, [pc, #132]	; (8016858 <dhcp_parse_reply+0x300>)
 80167d4:	481e      	ldr	r0, [pc, #120]	; (8016850 <dhcp_parse_reply+0x2f8>)
 80167d6:	f003 ffe5 	bl	801a7a4 <iprintf>
 80167da:	f06f 0305 	mvn.w	r3, #5
 80167de:	e178      	b.n	8016ad2 <dhcp_parse_reply+0x57a>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 80167e0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80167e2:	2bf0      	cmp	r3, #240	; 0xf0
 80167e4:	d009      	beq.n	80167fa <dhcp_parse_reply+0x2a2>
 80167e6:	4b18      	ldr	r3, [pc, #96]	; (8016848 <dhcp_parse_reply+0x2f0>)
 80167e8:	f240 6251 	movw	r2, #1617	; 0x651
 80167ec:	491b      	ldr	r1, [pc, #108]	; (801685c <dhcp_parse_reply+0x304>)
 80167ee:	4818      	ldr	r0, [pc, #96]	; (8016850 <dhcp_parse_reply+0x2f8>)
 80167f0:	f003 ffd8 	bl	801a7a4 <iprintf>
 80167f4:	f06f 0305 	mvn.w	r3, #5
 80167f8:	e16b      	b.n	8016ad2 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 80167fa:	2300      	movs	r3, #0
 80167fc:	623b      	str	r3, [r7, #32]
        break;
 80167fe:	e055      	b.n	80168ac <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8016800:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016804:	2b01      	cmp	r3, #1
 8016806:	d009      	beq.n	801681c <dhcp_parse_reply+0x2c4>
 8016808:	4b0f      	ldr	r3, [pc, #60]	; (8016848 <dhcp_parse_reply+0x2f0>)
 801680a:	f240 6255 	movw	r2, #1621	; 0x655
 801680e:	4912      	ldr	r1, [pc, #72]	; (8016858 <dhcp_parse_reply+0x300>)
 8016810:	480f      	ldr	r0, [pc, #60]	; (8016850 <dhcp_parse_reply+0x2f8>)
 8016812:	f003 ffc7 	bl	801a7a4 <iprintf>
 8016816:	f06f 0305 	mvn.w	r3, #5
 801681a:	e15a      	b.n	8016ad2 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 801681c:	2301      	movs	r3, #1
 801681e:	623b      	str	r3, [r7, #32]
        break;
 8016820:	e044      	b.n	80168ac <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8016822:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016826:	2b04      	cmp	r3, #4
 8016828:	d009      	beq.n	801683e <dhcp_parse_reply+0x2e6>
 801682a:	4b07      	ldr	r3, [pc, #28]	; (8016848 <dhcp_parse_reply+0x2f0>)
 801682c:	f240 6259 	movw	r2, #1625	; 0x659
 8016830:	4906      	ldr	r1, [pc, #24]	; (801684c <dhcp_parse_reply+0x2f4>)
 8016832:	4807      	ldr	r0, [pc, #28]	; (8016850 <dhcp_parse_reply+0x2f8>)
 8016834:	f003 ffb6 	bl	801a7a4 <iprintf>
 8016838:	f06f 0305 	mvn.w	r3, #5
 801683c:	e149      	b.n	8016ad2 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 801683e:	2302      	movs	r3, #2
 8016840:	623b      	str	r3, [r7, #32]
        break;
 8016842:	e033      	b.n	80168ac <dhcp_parse_reply+0x354>
 8016844:	2000bfa0 	.word	0x2000bfa0
 8016848:	0801df80 	.word	0x0801df80
 801684c:	0801e208 	.word	0x0801e208
 8016850:	0801dfe0 	.word	0x0801dfe0
 8016854:	0801e214 	.word	0x0801e214
 8016858:	0801e228 	.word	0x0801e228
 801685c:	0801e234 	.word	0x0801e234
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8016860:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016864:	2b04      	cmp	r3, #4
 8016866:	d009      	beq.n	801687c <dhcp_parse_reply+0x324>
 8016868:	4b9c      	ldr	r3, [pc, #624]	; (8016adc <dhcp_parse_reply+0x584>)
 801686a:	f240 625d 	movw	r2, #1629	; 0x65d
 801686e:	499c      	ldr	r1, [pc, #624]	; (8016ae0 <dhcp_parse_reply+0x588>)
 8016870:	489c      	ldr	r0, [pc, #624]	; (8016ae4 <dhcp_parse_reply+0x58c>)
 8016872:	f003 ff97 	bl	801a7a4 <iprintf>
 8016876:	f06f 0305 	mvn.w	r3, #5
 801687a:	e12a      	b.n	8016ad2 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T1;
 801687c:	2304      	movs	r3, #4
 801687e:	623b      	str	r3, [r7, #32]
        break;
 8016880:	e014      	b.n	80168ac <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8016882:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016886:	2b04      	cmp	r3, #4
 8016888:	d009      	beq.n	801689e <dhcp_parse_reply+0x346>
 801688a:	4b94      	ldr	r3, [pc, #592]	; (8016adc <dhcp_parse_reply+0x584>)
 801688c:	f240 6261 	movw	r2, #1633	; 0x661
 8016890:	4993      	ldr	r1, [pc, #588]	; (8016ae0 <dhcp_parse_reply+0x588>)
 8016892:	4894      	ldr	r0, [pc, #592]	; (8016ae4 <dhcp_parse_reply+0x58c>)
 8016894:	f003 ff86 	bl	801a7a4 <iprintf>
 8016898:	f06f 0305 	mvn.w	r3, #5
 801689c:	e119      	b.n	8016ad2 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T2;
 801689e:	2305      	movs	r3, #5
 80168a0:	623b      	str	r3, [r7, #32]
        break;
 80168a2:	e003      	b.n	80168ac <dhcp_parse_reply+0x354>
      default:
        decode_len = 0;
 80168a4:	2300      	movs	r3, #0
 80168a6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 80168aa:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 80168ac:	7dfb      	ldrb	r3, [r7, #23]
 80168ae:	2b00      	cmp	r3, #0
 80168b0:	d103      	bne.n	80168ba <dhcp_parse_reply+0x362>
      offset++;
 80168b2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80168b4:	3301      	adds	r3, #1
 80168b6:	877b      	strh	r3, [r7, #58]	; 0x3a
 80168b8:	e0a1      	b.n	80169fe <dhcp_parse_reply+0x4a6>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 80168ba:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80168bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80168c0:	4413      	add	r3, r2
 80168c2:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 80168c6:	4293      	cmp	r3, r2
 80168c8:	dd02      	ble.n	80168d0 <dhcp_parse_reply+0x378>
        /* overflow */
        return ERR_BUF;
 80168ca:	f06f 0301 	mvn.w	r3, #1
 80168ce:	e100      	b.n	8016ad2 <dhcp_parse_reply+0x57a>
      }
      offset = (u16_t)(offset + len + 2);
 80168d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80168d4:	b29a      	uxth	r2, r3
 80168d6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80168d8:	4413      	add	r3, r2
 80168da:	b29b      	uxth	r3, r3
 80168dc:	3302      	adds	r3, #2
 80168de:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 80168e0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80168e4:	2b00      	cmp	r3, #0
 80168e6:	f000 808a 	beq.w	80169fe <dhcp_parse_reply+0x4a6>
        u32_t value = 0;
 80168ea:	2300      	movs	r3, #0
 80168ec:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 80168ee:	6a3b      	ldr	r3, [r7, #32]
 80168f0:	2b00      	cmp	r3, #0
 80168f2:	db02      	blt.n	80168fa <dhcp_parse_reply+0x3a2>
 80168f4:	6a3b      	ldr	r3, [r7, #32]
 80168f6:	2b07      	cmp	r3, #7
 80168f8:	dd06      	ble.n	8016908 <dhcp_parse_reply+0x3b0>
 80168fa:	4b78      	ldr	r3, [pc, #480]	; (8016adc <dhcp_parse_reply+0x584>)
 80168fc:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8016900:	4979      	ldr	r1, [pc, #484]	; (8016ae8 <dhcp_parse_reply+0x590>)
 8016902:	4878      	ldr	r0, [pc, #480]	; (8016ae4 <dhcp_parse_reply+0x58c>)
 8016904:	f003 ff4e 	bl	801a7a4 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8016908:	4a78      	ldr	r2, [pc, #480]	; (8016aec <dhcp_parse_reply+0x594>)
 801690a:	6a3b      	ldr	r3, [r7, #32]
 801690c:	4413      	add	r3, r2
 801690e:	781b      	ldrb	r3, [r3, #0]
 8016910:	2b00      	cmp	r3, #0
 8016912:	d174      	bne.n	80169fe <dhcp_parse_reply+0x4a6>
          copy_len = LWIP_MIN(decode_len, 4);
 8016914:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016918:	2b04      	cmp	r3, #4
 801691a:	bf28      	it	cs
 801691c:	2304      	movcs	r3, #4
 801691e:	b2db      	uxtb	r3, r3
 8016920:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8016922:	8bfb      	ldrh	r3, [r7, #30]
 8016924:	8aba      	ldrh	r2, [r7, #20]
 8016926:	f107 0108 	add.w	r1, r7, #8
 801692a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801692c:	f7f7 fcb8 	bl	800e2a0 <pbuf_copy_partial>
 8016930:	4603      	mov	r3, r0
 8016932:	461a      	mov	r2, r3
 8016934:	8abb      	ldrh	r3, [r7, #20]
 8016936:	4293      	cmp	r3, r2
 8016938:	d002      	beq.n	8016940 <dhcp_parse_reply+0x3e8>
            return ERR_BUF;
 801693a:	f06f 0301 	mvn.w	r3, #1
 801693e:	e0c8      	b.n	8016ad2 <dhcp_parse_reply+0x57a>
          }
          if (decode_len > 4) {
 8016940:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016944:	2b04      	cmp	r3, #4
 8016946:	d933      	bls.n	80169b0 <dhcp_parse_reply+0x458>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8016948:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801694c:	f003 0303 	and.w	r3, r3, #3
 8016950:	b2db      	uxtb	r3, r3
 8016952:	2b00      	cmp	r3, #0
 8016954:	d009      	beq.n	801696a <dhcp_parse_reply+0x412>
 8016956:	4b61      	ldr	r3, [pc, #388]	; (8016adc <dhcp_parse_reply+0x584>)
 8016958:	f240 6281 	movw	r2, #1665	; 0x681
 801695c:	4964      	ldr	r1, [pc, #400]	; (8016af0 <dhcp_parse_reply+0x598>)
 801695e:	4861      	ldr	r0, [pc, #388]	; (8016ae4 <dhcp_parse_reply+0x58c>)
 8016960:	f003 ff20 	bl	801a7a4 <iprintf>
 8016964:	f06f 0305 	mvn.w	r3, #5
 8016968:	e0b3      	b.n	8016ad2 <dhcp_parse_reply+0x57a>
            dhcp_got_option(dhcp, decode_idx);
 801696a:	4a60      	ldr	r2, [pc, #384]	; (8016aec <dhcp_parse_reply+0x594>)
 801696c:	6a3b      	ldr	r3, [r7, #32]
 801696e:	4413      	add	r3, r2
 8016970:	2201      	movs	r2, #1
 8016972:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8016974:	68bb      	ldr	r3, [r7, #8]
 8016976:	4618      	mov	r0, r3
 8016978:	f7f5 fe3e 	bl	800c5f8 <lwip_htonl>
 801697c:	4602      	mov	r2, r0
 801697e:	495d      	ldr	r1, [pc, #372]	; (8016af4 <dhcp_parse_reply+0x59c>)
 8016980:	6a3b      	ldr	r3, [r7, #32]
 8016982:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 8016986:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801698a:	3b04      	subs	r3, #4
 801698c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 8016990:	8bfb      	ldrh	r3, [r7, #30]
 8016992:	3304      	adds	r3, #4
 8016994:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 8016996:	8a7a      	ldrh	r2, [r7, #18]
 8016998:	8bfb      	ldrh	r3, [r7, #30]
 801699a:	429a      	cmp	r2, r3
 801699c:	d202      	bcs.n	80169a4 <dhcp_parse_reply+0x44c>
              /* overflow */
              return ERR_BUF;
 801699e:	f06f 0301 	mvn.w	r3, #1
 80169a2:	e096      	b.n	8016ad2 <dhcp_parse_reply+0x57a>
            }
            val_offset = next_val_offset;
 80169a4:	8a7b      	ldrh	r3, [r7, #18]
 80169a6:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 80169a8:	6a3b      	ldr	r3, [r7, #32]
 80169aa:	3301      	adds	r3, #1
 80169ac:	623b      	str	r3, [r7, #32]
            goto decode_next;
 80169ae:	e79e      	b.n	80168ee <dhcp_parse_reply+0x396>
          } else if (decode_len == 4) {
 80169b0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80169b4:	2b04      	cmp	r3, #4
 80169b6:	d106      	bne.n	80169c6 <dhcp_parse_reply+0x46e>
            value = lwip_ntohl(value);
 80169b8:	68bb      	ldr	r3, [r7, #8]
 80169ba:	4618      	mov	r0, r3
 80169bc:	f7f5 fe1c 	bl	800c5f8 <lwip_htonl>
 80169c0:	4603      	mov	r3, r0
 80169c2:	60bb      	str	r3, [r7, #8]
 80169c4:	e011      	b.n	80169ea <dhcp_parse_reply+0x492>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 80169c6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80169ca:	2b01      	cmp	r3, #1
 80169cc:	d009      	beq.n	80169e2 <dhcp_parse_reply+0x48a>
 80169ce:	4b43      	ldr	r3, [pc, #268]	; (8016adc <dhcp_parse_reply+0x584>)
 80169d0:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 80169d4:	4948      	ldr	r1, [pc, #288]	; (8016af8 <dhcp_parse_reply+0x5a0>)
 80169d6:	4843      	ldr	r0, [pc, #268]	; (8016ae4 <dhcp_parse_reply+0x58c>)
 80169d8:	f003 fee4 	bl	801a7a4 <iprintf>
 80169dc:	f06f 0305 	mvn.w	r3, #5
 80169e0:	e077      	b.n	8016ad2 <dhcp_parse_reply+0x57a>
            value = ((u8_t *)&value)[0];
 80169e2:	f107 0308 	add.w	r3, r7, #8
 80169e6:	781b      	ldrb	r3, [r3, #0]
 80169e8:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 80169ea:	4a40      	ldr	r2, [pc, #256]	; (8016aec <dhcp_parse_reply+0x594>)
 80169ec:	6a3b      	ldr	r3, [r7, #32]
 80169ee:	4413      	add	r3, r2
 80169f0:	2201      	movs	r2, #1
 80169f2:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 80169f4:	68ba      	ldr	r2, [r7, #8]
 80169f6:	493f      	ldr	r1, [pc, #252]	; (8016af4 <dhcp_parse_reply+0x59c>)
 80169f8:	6a3b      	ldr	r3, [r7, #32]
 80169fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 80169fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a00:	895b      	ldrh	r3, [r3, #10]
 8016a02:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8016a04:	429a      	cmp	r2, r3
 8016a06:	d324      	bcc.n	8016a52 <dhcp_parse_reply+0x4fa>
      offset = (u16_t)(offset - q->len);
 8016a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a0a:	895b      	ldrh	r3, [r3, #10]
 8016a0c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8016a0e:	1ad3      	subs	r3, r2, r3
 8016a10:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 8016a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a14:	895b      	ldrh	r3, [r3, #10]
 8016a16:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8016a18:	1ad3      	subs	r3, r2, r3
 8016a1a:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 8016a1c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8016a1e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8016a20:	429a      	cmp	r2, r3
 8016a22:	d213      	bcs.n	8016a4c <dhcp_parse_reply+0x4f4>
        q = q->next;
 8016a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a26:	681b      	ldr	r3, [r3, #0]
 8016a28:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8016a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a2c:	2b00      	cmp	r3, #0
 8016a2e:	d109      	bne.n	8016a44 <dhcp_parse_reply+0x4ec>
 8016a30:	4b2a      	ldr	r3, [pc, #168]	; (8016adc <dhcp_parse_reply+0x584>)
 8016a32:	f240 629d 	movw	r2, #1693	; 0x69d
 8016a36:	4931      	ldr	r1, [pc, #196]	; (8016afc <dhcp_parse_reply+0x5a4>)
 8016a38:	482a      	ldr	r0, [pc, #168]	; (8016ae4 <dhcp_parse_reply+0x58c>)
 8016a3a:	f003 feb3 	bl	801a7a4 <iprintf>
 8016a3e:	f06f 0305 	mvn.w	r3, #5
 8016a42:	e046      	b.n	8016ad2 <dhcp_parse_reply+0x57a>
        options = (u8_t *)q->payload;
 8016a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a46:	685b      	ldr	r3, [r3, #4]
 8016a48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8016a4a:	e002      	b.n	8016a52 <dhcp_parse_reply+0x4fa>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 8016a4c:	f06f 0301 	mvn.w	r3, #1
 8016a50:	e03f      	b.n	8016ad2 <dhcp_parse_reply+0x57a>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8016a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a54:	2b00      	cmp	r3, #0
 8016a56:	d00a      	beq.n	8016a6e <dhcp_parse_reply+0x516>
 8016a58:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8016a5a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8016a5c:	429a      	cmp	r2, r3
 8016a5e:	d206      	bcs.n	8016a6e <dhcp_parse_reply+0x516>
 8016a60:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016a62:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016a64:	4413      	add	r3, r2
 8016a66:	781b      	ldrb	r3, [r3, #0]
 8016a68:	2bff      	cmp	r3, #255	; 0xff
 8016a6a:	f47f adb8 	bne.w	80165de <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8016a6e:	4b1f      	ldr	r3, [pc, #124]	; (8016aec <dhcp_parse_reply+0x594>)
 8016a70:	781b      	ldrb	r3, [r3, #0]
 8016a72:	2b00      	cmp	r3, #0
 8016a74:	d018      	beq.n	8016aa8 <dhcp_parse_reply+0x550>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8016a76:	4b1f      	ldr	r3, [pc, #124]	; (8016af4 <dhcp_parse_reply+0x59c>)
 8016a78:	681b      	ldr	r3, [r3, #0]
 8016a7a:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8016a7c:	4b1b      	ldr	r3, [pc, #108]	; (8016aec <dhcp_parse_reply+0x594>)
 8016a7e:	2200      	movs	r2, #0
 8016a80:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8016a82:	68fb      	ldr	r3, [r7, #12]
 8016a84:	2b01      	cmp	r3, #1
 8016a86:	d102      	bne.n	8016a8e <dhcp_parse_reply+0x536>
      parse_file_as_options = 1;
 8016a88:	2301      	movs	r3, #1
 8016a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016a8c:	e00c      	b.n	8016aa8 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8016a8e:	68fb      	ldr	r3, [r7, #12]
 8016a90:	2b02      	cmp	r3, #2
 8016a92:	d102      	bne.n	8016a9a <dhcp_parse_reply+0x542>
      parse_sname_as_options = 1;
 8016a94:	2301      	movs	r3, #1
 8016a96:	62bb      	str	r3, [r7, #40]	; 0x28
 8016a98:	e006      	b.n	8016aa8 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8016a9a:	68fb      	ldr	r3, [r7, #12]
 8016a9c:	2b03      	cmp	r3, #3
 8016a9e:	d103      	bne.n	8016aa8 <dhcp_parse_reply+0x550>
      parse_sname_as_options = 1;
 8016aa0:	2301      	movs	r3, #1
 8016aa2:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 8016aa4:	2301      	movs	r3, #1
 8016aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 8016aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016aaa:	2b00      	cmp	r3, #0
 8016aac:	d006      	beq.n	8016abc <dhcp_parse_reply+0x564>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8016aae:	2300      	movs	r3, #0
 8016ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 8016ab2:	236c      	movs	r3, #108	; 0x6c
 8016ab4:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8016ab6:	23ec      	movs	r3, #236	; 0xec
 8016ab8:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 8016aba:	e56a      	b.n	8016592 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 8016abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016abe:	2b00      	cmp	r3, #0
 8016ac0:	d006      	beq.n	8016ad0 <dhcp_parse_reply+0x578>
    parse_sname_as_options = 0;
 8016ac2:	2300      	movs	r3, #0
 8016ac4:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 8016ac6:	232c      	movs	r3, #44	; 0x2c
 8016ac8:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8016aca:	236c      	movs	r3, #108	; 0x6c
 8016acc:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 8016ace:	e560      	b.n	8016592 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 8016ad0:	2300      	movs	r3, #0
}
 8016ad2:	4618      	mov	r0, r3
 8016ad4:	3740      	adds	r7, #64	; 0x40
 8016ad6:	46bd      	mov	sp, r7
 8016ad8:	bd80      	pop	{r7, pc}
 8016ada:	bf00      	nop
 8016adc:	0801df80 	.word	0x0801df80
 8016ae0:	0801e208 	.word	0x0801e208
 8016ae4:	0801dfe0 	.word	0x0801dfe0
 8016ae8:	0801e24c 	.word	0x0801e24c
 8016aec:	2000bfa0 	.word	0x2000bfa0
 8016af0:	0801e260 	.word	0x0801e260
 8016af4:	2000bf80 	.word	0x2000bf80
 8016af8:	0801e278 	.word	0x0801e278
 8016afc:	0801e28c 	.word	0x0801e28c

08016b00 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8016b00:	b580      	push	{r7, lr}
 8016b02:	b08a      	sub	sp, #40	; 0x28
 8016b04:	af00      	add	r7, sp, #0
 8016b06:	60f8      	str	r0, [r7, #12]
 8016b08:	60b9      	str	r1, [r7, #8]
 8016b0a:	607a      	str	r2, [r7, #4]
 8016b0c:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 8016b0e:	4b60      	ldr	r3, [pc, #384]	; (8016c90 <dhcp_recv+0x190>)
 8016b10:	685b      	ldr	r3, [r3, #4]
 8016b12:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016b14:	6a3b      	ldr	r3, [r7, #32]
 8016b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016b18:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8016b1a:	687b      	ldr	r3, [r7, #4]
 8016b1c:	685b      	ldr	r3, [r3, #4]
 8016b1e:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8016b20:	69fb      	ldr	r3, [r7, #28]
 8016b22:	2b00      	cmp	r3, #0
 8016b24:	f000 809d 	beq.w	8016c62 <dhcp_recv+0x162>
 8016b28:	69fb      	ldr	r3, [r7, #28]
 8016b2a:	791b      	ldrb	r3, [r3, #4]
 8016b2c:	2b00      	cmp	r3, #0
 8016b2e:	f000 8098 	beq.w	8016c62 <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8016b32:	687b      	ldr	r3, [r7, #4]
 8016b34:	895b      	ldrh	r3, [r3, #10]
 8016b36:	2b2b      	cmp	r3, #43	; 0x2b
 8016b38:	f240 8095 	bls.w	8016c66 <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8016b3c:	69bb      	ldr	r3, [r7, #24]
 8016b3e:	781b      	ldrb	r3, [r3, #0]
 8016b40:	2b02      	cmp	r3, #2
 8016b42:	f040 8092 	bne.w	8016c6a <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8016b46:	2300      	movs	r3, #0
 8016b48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016b4c:	e012      	b.n	8016b74 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8016b4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016b52:	6a3a      	ldr	r2, [r7, #32]
 8016b54:	4413      	add	r3, r2
 8016b56:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8016b5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016b5e:	69b9      	ldr	r1, [r7, #24]
 8016b60:	440b      	add	r3, r1
 8016b62:	7f1b      	ldrb	r3, [r3, #28]
 8016b64:	429a      	cmp	r2, r3
 8016b66:	f040 8082 	bne.w	8016c6e <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8016b6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016b6e:	3301      	adds	r3, #1
 8016b70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016b74:	6a3b      	ldr	r3, [r7, #32]
 8016b76:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016b7a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8016b7e:	429a      	cmp	r2, r3
 8016b80:	d203      	bcs.n	8016b8a <dhcp_recv+0x8a>
 8016b82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016b86:	2b05      	cmp	r3, #5
 8016b88:	d9e1      	bls.n	8016b4e <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8016b8a:	69bb      	ldr	r3, [r7, #24]
 8016b8c:	685b      	ldr	r3, [r3, #4]
 8016b8e:	4618      	mov	r0, r3
 8016b90:	f7f5 fd32 	bl	800c5f8 <lwip_htonl>
 8016b94:	4602      	mov	r2, r0
 8016b96:	69fb      	ldr	r3, [r7, #28]
 8016b98:	681b      	ldr	r3, [r3, #0]
 8016b9a:	429a      	cmp	r2, r3
 8016b9c:	d169      	bne.n	8016c72 <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 8016b9e:	69f9      	ldr	r1, [r7, #28]
 8016ba0:	6878      	ldr	r0, [r7, #4]
 8016ba2:	f7ff fcd9 	bl	8016558 <dhcp_parse_reply>
 8016ba6:	4603      	mov	r3, r0
 8016ba8:	2b00      	cmp	r3, #0
 8016baa:	d164      	bne.n	8016c76 <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8016bac:	4b39      	ldr	r3, [pc, #228]	; (8016c94 <dhcp_recv+0x194>)
 8016bae:	785b      	ldrb	r3, [r3, #1]
 8016bb0:	2b00      	cmp	r3, #0
 8016bb2:	d062      	beq.n	8016c7a <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8016bb4:	687b      	ldr	r3, [r7, #4]
 8016bb6:	685b      	ldr	r3, [r3, #4]
 8016bb8:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8016bba:	4b37      	ldr	r3, [pc, #220]	; (8016c98 <dhcp_recv+0x198>)
 8016bbc:	685b      	ldr	r3, [r3, #4]
 8016bbe:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8016bc0:	7cfb      	ldrb	r3, [r7, #19]
 8016bc2:	2b05      	cmp	r3, #5
 8016bc4:	d12a      	bne.n	8016c1c <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8016bc6:	69fb      	ldr	r3, [r7, #28]
 8016bc8:	795b      	ldrb	r3, [r3, #5]
 8016bca:	2b01      	cmp	r3, #1
 8016bcc:	d112      	bne.n	8016bf4 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 8016bce:	6979      	ldr	r1, [r7, #20]
 8016bd0:	6a38      	ldr	r0, [r7, #32]
 8016bd2:	f7fe fe53 	bl	801587c <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8016bd6:	6a3b      	ldr	r3, [r7, #32]
 8016bd8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016bdc:	f003 0308 	and.w	r3, r3, #8
 8016be0:	2b00      	cmp	r3, #0
 8016be2:	d003      	beq.n	8016bec <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8016be4:	6a38      	ldr	r0, [r7, #32]
 8016be6:	f7fe fbc3 	bl	8015370 <dhcp_check>
 8016bea:	e049      	b.n	8016c80 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8016bec:	6a38      	ldr	r0, [r7, #32]
 8016bee:	f7ff f867 	bl	8015cc0 <dhcp_bind>
 8016bf2:	e045      	b.n	8016c80 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8016bf4:	69fb      	ldr	r3, [r7, #28]
 8016bf6:	795b      	ldrb	r3, [r3, #5]
 8016bf8:	2b03      	cmp	r3, #3
 8016bfa:	d007      	beq.n	8016c0c <dhcp_recv+0x10c>
 8016bfc:	69fb      	ldr	r3, [r7, #28]
 8016bfe:	795b      	ldrb	r3, [r3, #5]
 8016c00:	2b04      	cmp	r3, #4
 8016c02:	d003      	beq.n	8016c0c <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8016c04:	69fb      	ldr	r3, [r7, #28]
 8016c06:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8016c08:	2b05      	cmp	r3, #5
 8016c0a:	d139      	bne.n	8016c80 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 8016c0c:	6979      	ldr	r1, [r7, #20]
 8016c0e:	6a38      	ldr	r0, [r7, #32]
 8016c10:	f7fe fe34 	bl	801587c <dhcp_handle_ack>
      dhcp_bind(netif);
 8016c14:	6a38      	ldr	r0, [r7, #32]
 8016c16:	f7ff f853 	bl	8015cc0 <dhcp_bind>
 8016c1a:	e031      	b.n	8016c80 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8016c1c:	7cfb      	ldrb	r3, [r7, #19]
 8016c1e:	2b06      	cmp	r3, #6
 8016c20:	d113      	bne.n	8016c4a <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8016c22:	69fb      	ldr	r3, [r7, #28]
 8016c24:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 8016c26:	2b03      	cmp	r3, #3
 8016c28:	d00b      	beq.n	8016c42 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8016c2a:	69fb      	ldr	r3, [r7, #28]
 8016c2c:	795b      	ldrb	r3, [r3, #5]
 8016c2e:	2b01      	cmp	r3, #1
 8016c30:	d007      	beq.n	8016c42 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8016c32:	69fb      	ldr	r3, [r7, #28]
 8016c34:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8016c36:	2b04      	cmp	r3, #4
 8016c38:	d003      	beq.n	8016c42 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8016c3a:	69fb      	ldr	r3, [r7, #28]
 8016c3c:	795b      	ldrb	r3, [r3, #5]
 8016c3e:	2b05      	cmp	r3, #5
 8016c40:	d103      	bne.n	8016c4a <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 8016c42:	6a38      	ldr	r0, [r7, #32]
 8016c44:	f7fe fb7a 	bl	801533c <dhcp_handle_nak>
 8016c48:	e01a      	b.n	8016c80 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8016c4a:	7cfb      	ldrb	r3, [r7, #19]
 8016c4c:	2b02      	cmp	r3, #2
 8016c4e:	d116      	bne.n	8016c7e <dhcp_recv+0x17e>
 8016c50:	69fb      	ldr	r3, [r7, #28]
 8016c52:	795b      	ldrb	r3, [r3, #5]
 8016c54:	2b06      	cmp	r3, #6
 8016c56:	d112      	bne.n	8016c7e <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 8016c58:	6979      	ldr	r1, [r7, #20]
 8016c5a:	6a38      	ldr	r0, [r7, #32]
 8016c5c:	f7fe fbbc 	bl	80153d8 <dhcp_handle_offer>
 8016c60:	e00e      	b.n	8016c80 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8016c62:	bf00      	nop
 8016c64:	e00c      	b.n	8016c80 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8016c66:	bf00      	nop
 8016c68:	e00a      	b.n	8016c80 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8016c6a:	bf00      	nop
 8016c6c:	e008      	b.n	8016c80 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 8016c6e:	bf00      	nop
 8016c70:	e006      	b.n	8016c80 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8016c72:	bf00      	nop
 8016c74:	e004      	b.n	8016c80 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8016c76:	bf00      	nop
 8016c78:	e002      	b.n	8016c80 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8016c7a:	bf00      	nop
 8016c7c:	e000      	b.n	8016c80 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 8016c7e:	bf00      	nop
  pbuf_free(p);
 8016c80:	6878      	ldr	r0, [r7, #4]
 8016c82:	f7f7 f909 	bl	800de98 <pbuf_free>
}
 8016c86:	bf00      	nop
 8016c88:	3728      	adds	r7, #40	; 0x28
 8016c8a:	46bd      	mov	sp, r7
 8016c8c:	bd80      	pop	{r7, pc}
 8016c8e:	bf00      	nop
 8016c90:	20008e00 	.word	0x20008e00
 8016c94:	2000bfa0 	.word	0x2000bfa0
 8016c98:	2000bf80 	.word	0x2000bf80

08016c9c <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8016c9c:	b580      	push	{r7, lr}
 8016c9e:	b088      	sub	sp, #32
 8016ca0:	af00      	add	r7, sp, #0
 8016ca2:	60f8      	str	r0, [r7, #12]
 8016ca4:	60b9      	str	r1, [r7, #8]
 8016ca6:	603b      	str	r3, [r7, #0]
 8016ca8:	4613      	mov	r3, r2
 8016caa:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8016cac:	68fb      	ldr	r3, [r7, #12]
 8016cae:	2b00      	cmp	r3, #0
 8016cb0:	d108      	bne.n	8016cc4 <dhcp_create_msg+0x28>
 8016cb2:	4b5f      	ldr	r3, [pc, #380]	; (8016e30 <dhcp_create_msg+0x194>)
 8016cb4:	f240 7269 	movw	r2, #1897	; 0x769
 8016cb8:	495e      	ldr	r1, [pc, #376]	; (8016e34 <dhcp_create_msg+0x198>)
 8016cba:	485f      	ldr	r0, [pc, #380]	; (8016e38 <dhcp_create_msg+0x19c>)
 8016cbc:	f003 fd72 	bl	801a7a4 <iprintf>
 8016cc0:	2300      	movs	r3, #0
 8016cc2:	e0b1      	b.n	8016e28 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8016cc4:	68bb      	ldr	r3, [r7, #8]
 8016cc6:	2b00      	cmp	r3, #0
 8016cc8:	d108      	bne.n	8016cdc <dhcp_create_msg+0x40>
 8016cca:	4b59      	ldr	r3, [pc, #356]	; (8016e30 <dhcp_create_msg+0x194>)
 8016ccc:	f240 726a 	movw	r2, #1898	; 0x76a
 8016cd0:	495a      	ldr	r1, [pc, #360]	; (8016e3c <dhcp_create_msg+0x1a0>)
 8016cd2:	4859      	ldr	r0, [pc, #356]	; (8016e38 <dhcp_create_msg+0x19c>)
 8016cd4:	f003 fd66 	bl	801a7a4 <iprintf>
 8016cd8:	2300      	movs	r3, #0
 8016cda:	e0a5      	b.n	8016e28 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8016cdc:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016ce0:	f44f 719a 	mov.w	r1, #308	; 0x134
 8016ce4:	2036      	movs	r0, #54	; 0x36
 8016ce6:	f7f6 fdf3 	bl	800d8d0 <pbuf_alloc>
 8016cea:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 8016cec:	69bb      	ldr	r3, [r7, #24]
 8016cee:	2b00      	cmp	r3, #0
 8016cf0:	d101      	bne.n	8016cf6 <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 8016cf2:	2300      	movs	r3, #0
 8016cf4:	e098      	b.n	8016e28 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8016cf6:	69bb      	ldr	r3, [r7, #24]
 8016cf8:	895b      	ldrh	r3, [r3, #10]
 8016cfa:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 8016cfe:	d206      	bcs.n	8016d0e <dhcp_create_msg+0x72>
 8016d00:	4b4b      	ldr	r3, [pc, #300]	; (8016e30 <dhcp_create_msg+0x194>)
 8016d02:	f240 7271 	movw	r2, #1905	; 0x771
 8016d06:	494e      	ldr	r1, [pc, #312]	; (8016e40 <dhcp_create_msg+0x1a4>)
 8016d08:	484b      	ldr	r0, [pc, #300]	; (8016e38 <dhcp_create_msg+0x19c>)
 8016d0a:	f003 fd4b 	bl	801a7a4 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8016d0e:	79fb      	ldrb	r3, [r7, #7]
 8016d10:	2b03      	cmp	r3, #3
 8016d12:	d103      	bne.n	8016d1c <dhcp_create_msg+0x80>
 8016d14:	68bb      	ldr	r3, [r7, #8]
 8016d16:	795b      	ldrb	r3, [r3, #5]
 8016d18:	2b03      	cmp	r3, #3
 8016d1a:	d10d      	bne.n	8016d38 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8016d1c:	68bb      	ldr	r3, [r7, #8]
 8016d1e:	799b      	ldrb	r3, [r3, #6]
 8016d20:	2b00      	cmp	r3, #0
 8016d22:	d105      	bne.n	8016d30 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8016d24:	f003 fd56 	bl	801a7d4 <rand>
 8016d28:	4603      	mov	r3, r0
 8016d2a:	461a      	mov	r2, r3
 8016d2c:	4b45      	ldr	r3, [pc, #276]	; (8016e44 <dhcp_create_msg+0x1a8>)
 8016d2e:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8016d30:	4b44      	ldr	r3, [pc, #272]	; (8016e44 <dhcp_create_msg+0x1a8>)
 8016d32:	681a      	ldr	r2, [r3, #0]
 8016d34:	68bb      	ldr	r3, [r7, #8]
 8016d36:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8016d38:	69bb      	ldr	r3, [r7, #24]
 8016d3a:	685b      	ldr	r3, [r3, #4]
 8016d3c:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8016d3e:	f44f 729a 	mov.w	r2, #308	; 0x134
 8016d42:	2100      	movs	r1, #0
 8016d44:	6978      	ldr	r0, [r7, #20]
 8016d46:	f003 fc47 	bl	801a5d8 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 8016d4a:	697b      	ldr	r3, [r7, #20]
 8016d4c:	2201      	movs	r2, #1
 8016d4e:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8016d50:	697b      	ldr	r3, [r7, #20]
 8016d52:	2201      	movs	r2, #1
 8016d54:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 8016d56:	68fb      	ldr	r3, [r7, #12]
 8016d58:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8016d5c:	697b      	ldr	r3, [r7, #20]
 8016d5e:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8016d60:	68bb      	ldr	r3, [r7, #8]
 8016d62:	681b      	ldr	r3, [r3, #0]
 8016d64:	4618      	mov	r0, r3
 8016d66:	f7f5 fc47 	bl	800c5f8 <lwip_htonl>
 8016d6a:	4602      	mov	r2, r0
 8016d6c:	697b      	ldr	r3, [r7, #20]
 8016d6e:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8016d70:	79fb      	ldrb	r3, [r7, #7]
 8016d72:	2b08      	cmp	r3, #8
 8016d74:	d010      	beq.n	8016d98 <dhcp_create_msg+0xfc>
 8016d76:	79fb      	ldrb	r3, [r7, #7]
 8016d78:	2b04      	cmp	r3, #4
 8016d7a:	d00d      	beq.n	8016d98 <dhcp_create_msg+0xfc>
 8016d7c:	79fb      	ldrb	r3, [r7, #7]
 8016d7e:	2b07      	cmp	r3, #7
 8016d80:	d00a      	beq.n	8016d98 <dhcp_create_msg+0xfc>
 8016d82:	79fb      	ldrb	r3, [r7, #7]
 8016d84:	2b03      	cmp	r3, #3
 8016d86:	d10c      	bne.n	8016da2 <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8016d88:	68bb      	ldr	r3, [r7, #8]
 8016d8a:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8016d8c:	2b05      	cmp	r3, #5
 8016d8e:	d003      	beq.n	8016d98 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8016d90:	68bb      	ldr	r3, [r7, #8]
 8016d92:	795b      	ldrb	r3, [r3, #5]
 8016d94:	2b04      	cmp	r3, #4
 8016d96:	d104      	bne.n	8016da2 <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8016d98:	68fb      	ldr	r3, [r7, #12]
 8016d9a:	3304      	adds	r3, #4
 8016d9c:	681a      	ldr	r2, [r3, #0]
 8016d9e:	697b      	ldr	r3, [r7, #20]
 8016da0:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8016da2:	2300      	movs	r3, #0
 8016da4:	83fb      	strh	r3, [r7, #30]
 8016da6:	e00c      	b.n	8016dc2 <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8016da8:	8bfa      	ldrh	r2, [r7, #30]
 8016daa:	8bfb      	ldrh	r3, [r7, #30]
 8016dac:	68f9      	ldr	r1, [r7, #12]
 8016dae:	440a      	add	r2, r1
 8016db0:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 8016db4:	697a      	ldr	r2, [r7, #20]
 8016db6:	4413      	add	r3, r2
 8016db8:	460a      	mov	r2, r1
 8016dba:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8016dbc:	8bfb      	ldrh	r3, [r7, #30]
 8016dbe:	3301      	adds	r3, #1
 8016dc0:	83fb      	strh	r3, [r7, #30]
 8016dc2:	8bfb      	ldrh	r3, [r7, #30]
 8016dc4:	2b05      	cmp	r3, #5
 8016dc6:	d9ef      	bls.n	8016da8 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8016dc8:	697b      	ldr	r3, [r7, #20]
 8016dca:	2200      	movs	r2, #0
 8016dcc:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8016dd0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8016dd4:	2200      	movs	r2, #0
 8016dd6:	f062 027d 	orn	r2, r2, #125	; 0x7d
 8016dda:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 8016dde:	2200      	movs	r2, #0
 8016de0:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8016de4:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8016de8:	2200      	movs	r2, #0
 8016dea:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8016dee:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8016df2:	697b      	ldr	r3, [r7, #20]
 8016df4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016df8:	2301      	movs	r3, #1
 8016dfa:	2235      	movs	r2, #53	; 0x35
 8016dfc:	2000      	movs	r0, #0
 8016dfe:	f7ff fadb 	bl	80163b8 <dhcp_option>
 8016e02:	4603      	mov	r3, r0
 8016e04:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 8016e06:	697b      	ldr	r3, [r7, #20]
 8016e08:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016e0c:	79fa      	ldrb	r2, [r7, #7]
 8016e0e:	8a7b      	ldrh	r3, [r7, #18]
 8016e10:	4618      	mov	r0, r3
 8016e12:	f7ff fb05 	bl	8016420 <dhcp_option_byte>
 8016e16:	4603      	mov	r3, r0
 8016e18:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 8016e1a:	683b      	ldr	r3, [r7, #0]
 8016e1c:	2b00      	cmp	r3, #0
 8016e1e:	d002      	beq.n	8016e26 <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 8016e20:	683b      	ldr	r3, [r7, #0]
 8016e22:	8a7a      	ldrh	r2, [r7, #18]
 8016e24:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 8016e26:	69bb      	ldr	r3, [r7, #24]
}
 8016e28:	4618      	mov	r0, r3
 8016e2a:	3720      	adds	r7, #32
 8016e2c:	46bd      	mov	sp, r7
 8016e2e:	bd80      	pop	{r7, pc}
 8016e30:	0801df80 	.word	0x0801df80
 8016e34:	0801e2a0 	.word	0x0801e2a0
 8016e38:	0801dfe0 	.word	0x0801dfe0
 8016e3c:	0801e2c0 	.word	0x0801e2c0
 8016e40:	0801e2e0 	.word	0x0801e2e0
 8016e44:	2000bfb0 	.word	0x2000bfb0

08016e48 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 8016e48:	b580      	push	{r7, lr}
 8016e4a:	b084      	sub	sp, #16
 8016e4c:	af00      	add	r7, sp, #0
 8016e4e:	4603      	mov	r3, r0
 8016e50:	60b9      	str	r1, [r7, #8]
 8016e52:	607a      	str	r2, [r7, #4]
 8016e54:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 8016e56:	89fb      	ldrh	r3, [r7, #14]
 8016e58:	1c5a      	adds	r2, r3, #1
 8016e5a:	81fa      	strh	r2, [r7, #14]
 8016e5c:	461a      	mov	r2, r3
 8016e5e:	68bb      	ldr	r3, [r7, #8]
 8016e60:	4413      	add	r3, r2
 8016e62:	22ff      	movs	r2, #255	; 0xff
 8016e64:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8016e66:	e007      	b.n	8016e78 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8016e68:	89fb      	ldrh	r3, [r7, #14]
 8016e6a:	1c5a      	adds	r2, r3, #1
 8016e6c:	81fa      	strh	r2, [r7, #14]
 8016e6e:	461a      	mov	r2, r3
 8016e70:	68bb      	ldr	r3, [r7, #8]
 8016e72:	4413      	add	r3, r2
 8016e74:	2200      	movs	r2, #0
 8016e76:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8016e78:	89fb      	ldrh	r3, [r7, #14]
 8016e7a:	2b43      	cmp	r3, #67	; 0x43
 8016e7c:	d904      	bls.n	8016e88 <dhcp_option_trailer+0x40>
 8016e7e:	89fb      	ldrh	r3, [r7, #14]
 8016e80:	f003 0303 	and.w	r3, r3, #3
 8016e84:	2b00      	cmp	r3, #0
 8016e86:	d002      	beq.n	8016e8e <dhcp_option_trailer+0x46>
 8016e88:	89fb      	ldrh	r3, [r7, #14]
 8016e8a:	2b43      	cmp	r3, #67	; 0x43
 8016e8c:	d9ec      	bls.n	8016e68 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8016e8e:	89fb      	ldrh	r3, [r7, #14]
 8016e90:	33f0      	adds	r3, #240	; 0xf0
 8016e92:	b29b      	uxth	r3, r3
 8016e94:	4619      	mov	r1, r3
 8016e96:	6878      	ldr	r0, [r7, #4]
 8016e98:	f7f6 fe78 	bl	800db8c <pbuf_realloc>
}
 8016e9c:	bf00      	nop
 8016e9e:	3710      	adds	r7, #16
 8016ea0:	46bd      	mov	sp, r7
 8016ea2:	bd80      	pop	{r7, pc}

08016ea4 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8016ea4:	b480      	push	{r7}
 8016ea6:	b085      	sub	sp, #20
 8016ea8:	af00      	add	r7, sp, #0
 8016eaa:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8016eac:	687b      	ldr	r3, [r7, #4]
 8016eae:	2b00      	cmp	r3, #0
 8016eb0:	d017      	beq.n	8016ee2 <dhcp_supplied_address+0x3e>
 8016eb2:	687b      	ldr	r3, [r7, #4]
 8016eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016eb6:	2b00      	cmp	r3, #0
 8016eb8:	d013      	beq.n	8016ee2 <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8016eba:	687b      	ldr	r3, [r7, #4]
 8016ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016ebe:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8016ec0:	68fb      	ldr	r3, [r7, #12]
 8016ec2:	795b      	ldrb	r3, [r3, #5]
 8016ec4:	2b0a      	cmp	r3, #10
 8016ec6:	d007      	beq.n	8016ed8 <dhcp_supplied_address+0x34>
 8016ec8:	68fb      	ldr	r3, [r7, #12]
 8016eca:	795b      	ldrb	r3, [r3, #5]
 8016ecc:	2b05      	cmp	r3, #5
 8016ece:	d003      	beq.n	8016ed8 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8016ed0:	68fb      	ldr	r3, [r7, #12]
 8016ed2:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8016ed4:	2b04      	cmp	r3, #4
 8016ed6:	d101      	bne.n	8016edc <dhcp_supplied_address+0x38>
 8016ed8:	2301      	movs	r3, #1
 8016eda:	e000      	b.n	8016ede <dhcp_supplied_address+0x3a>
 8016edc:	2300      	movs	r3, #0
 8016ede:	b2db      	uxtb	r3, r3
 8016ee0:	e000      	b.n	8016ee4 <dhcp_supplied_address+0x40>
  }
  return 0;
 8016ee2:	2300      	movs	r3, #0
}
 8016ee4:	4618      	mov	r0, r3
 8016ee6:	3714      	adds	r7, #20
 8016ee8:	46bd      	mov	sp, r7
 8016eea:	bc80      	pop	{r7}
 8016eec:	4770      	bx	lr
	...

08016ef0 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8016ef0:	b580      	push	{r7, lr}
 8016ef2:	b082      	sub	sp, #8
 8016ef4:	af00      	add	r7, sp, #0
 8016ef6:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8016ef8:	4915      	ldr	r1, [pc, #84]	; (8016f50 <etharp_free_entry+0x60>)
 8016efa:	687a      	ldr	r2, [r7, #4]
 8016efc:	4613      	mov	r3, r2
 8016efe:	005b      	lsls	r3, r3, #1
 8016f00:	4413      	add	r3, r2
 8016f02:	00db      	lsls	r3, r3, #3
 8016f04:	440b      	add	r3, r1
 8016f06:	681b      	ldr	r3, [r3, #0]
 8016f08:	2b00      	cmp	r3, #0
 8016f0a:	d013      	beq.n	8016f34 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8016f0c:	4910      	ldr	r1, [pc, #64]	; (8016f50 <etharp_free_entry+0x60>)
 8016f0e:	687a      	ldr	r2, [r7, #4]
 8016f10:	4613      	mov	r3, r2
 8016f12:	005b      	lsls	r3, r3, #1
 8016f14:	4413      	add	r3, r2
 8016f16:	00db      	lsls	r3, r3, #3
 8016f18:	440b      	add	r3, r1
 8016f1a:	681b      	ldr	r3, [r3, #0]
 8016f1c:	4618      	mov	r0, r3
 8016f1e:	f7f6 ffbb 	bl	800de98 <pbuf_free>
    arp_table[i].q = NULL;
 8016f22:	490b      	ldr	r1, [pc, #44]	; (8016f50 <etharp_free_entry+0x60>)
 8016f24:	687a      	ldr	r2, [r7, #4]
 8016f26:	4613      	mov	r3, r2
 8016f28:	005b      	lsls	r3, r3, #1
 8016f2a:	4413      	add	r3, r2
 8016f2c:	00db      	lsls	r3, r3, #3
 8016f2e:	440b      	add	r3, r1
 8016f30:	2200      	movs	r2, #0
 8016f32:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8016f34:	4906      	ldr	r1, [pc, #24]	; (8016f50 <etharp_free_entry+0x60>)
 8016f36:	687a      	ldr	r2, [r7, #4]
 8016f38:	4613      	mov	r3, r2
 8016f3a:	005b      	lsls	r3, r3, #1
 8016f3c:	4413      	add	r3, r2
 8016f3e:	00db      	lsls	r3, r3, #3
 8016f40:	440b      	add	r3, r1
 8016f42:	3314      	adds	r3, #20
 8016f44:	2200      	movs	r2, #0
 8016f46:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8016f48:	bf00      	nop
 8016f4a:	3708      	adds	r7, #8
 8016f4c:	46bd      	mov	sp, r7
 8016f4e:	bd80      	pop	{r7, pc}
 8016f50:	2000bfb4 	.word	0x2000bfb4

08016f54 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8016f54:	b580      	push	{r7, lr}
 8016f56:	b082      	sub	sp, #8
 8016f58:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016f5a:	2300      	movs	r3, #0
 8016f5c:	607b      	str	r3, [r7, #4]
 8016f5e:	e096      	b.n	801708e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8016f60:	494f      	ldr	r1, [pc, #316]	; (80170a0 <etharp_tmr+0x14c>)
 8016f62:	687a      	ldr	r2, [r7, #4]
 8016f64:	4613      	mov	r3, r2
 8016f66:	005b      	lsls	r3, r3, #1
 8016f68:	4413      	add	r3, r2
 8016f6a:	00db      	lsls	r3, r3, #3
 8016f6c:	440b      	add	r3, r1
 8016f6e:	3314      	adds	r3, #20
 8016f70:	781b      	ldrb	r3, [r3, #0]
 8016f72:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8016f74:	78fb      	ldrb	r3, [r7, #3]
 8016f76:	2b00      	cmp	r3, #0
 8016f78:	f000 8086 	beq.w	8017088 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8016f7c:	4948      	ldr	r1, [pc, #288]	; (80170a0 <etharp_tmr+0x14c>)
 8016f7e:	687a      	ldr	r2, [r7, #4]
 8016f80:	4613      	mov	r3, r2
 8016f82:	005b      	lsls	r3, r3, #1
 8016f84:	4413      	add	r3, r2
 8016f86:	00db      	lsls	r3, r3, #3
 8016f88:	440b      	add	r3, r1
 8016f8a:	3312      	adds	r3, #18
 8016f8c:	881b      	ldrh	r3, [r3, #0]
 8016f8e:	3301      	adds	r3, #1
 8016f90:	b298      	uxth	r0, r3
 8016f92:	4943      	ldr	r1, [pc, #268]	; (80170a0 <etharp_tmr+0x14c>)
 8016f94:	687a      	ldr	r2, [r7, #4]
 8016f96:	4613      	mov	r3, r2
 8016f98:	005b      	lsls	r3, r3, #1
 8016f9a:	4413      	add	r3, r2
 8016f9c:	00db      	lsls	r3, r3, #3
 8016f9e:	440b      	add	r3, r1
 8016fa0:	3312      	adds	r3, #18
 8016fa2:	4602      	mov	r2, r0
 8016fa4:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8016fa6:	493e      	ldr	r1, [pc, #248]	; (80170a0 <etharp_tmr+0x14c>)
 8016fa8:	687a      	ldr	r2, [r7, #4]
 8016faa:	4613      	mov	r3, r2
 8016fac:	005b      	lsls	r3, r3, #1
 8016fae:	4413      	add	r3, r2
 8016fb0:	00db      	lsls	r3, r3, #3
 8016fb2:	440b      	add	r3, r1
 8016fb4:	3312      	adds	r3, #18
 8016fb6:	881b      	ldrh	r3, [r3, #0]
 8016fb8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8016fbc:	d215      	bcs.n	8016fea <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8016fbe:	4938      	ldr	r1, [pc, #224]	; (80170a0 <etharp_tmr+0x14c>)
 8016fc0:	687a      	ldr	r2, [r7, #4]
 8016fc2:	4613      	mov	r3, r2
 8016fc4:	005b      	lsls	r3, r3, #1
 8016fc6:	4413      	add	r3, r2
 8016fc8:	00db      	lsls	r3, r3, #3
 8016fca:	440b      	add	r3, r1
 8016fcc:	3314      	adds	r3, #20
 8016fce:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8016fd0:	2b01      	cmp	r3, #1
 8016fd2:	d10e      	bne.n	8016ff2 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8016fd4:	4932      	ldr	r1, [pc, #200]	; (80170a0 <etharp_tmr+0x14c>)
 8016fd6:	687a      	ldr	r2, [r7, #4]
 8016fd8:	4613      	mov	r3, r2
 8016fda:	005b      	lsls	r3, r3, #1
 8016fdc:	4413      	add	r3, r2
 8016fde:	00db      	lsls	r3, r3, #3
 8016fe0:	440b      	add	r3, r1
 8016fe2:	3312      	adds	r3, #18
 8016fe4:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8016fe6:	2b04      	cmp	r3, #4
 8016fe8:	d903      	bls.n	8016ff2 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8016fea:	6878      	ldr	r0, [r7, #4]
 8016fec:	f7ff ff80 	bl	8016ef0 <etharp_free_entry>
 8016ff0:	e04a      	b.n	8017088 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8016ff2:	492b      	ldr	r1, [pc, #172]	; (80170a0 <etharp_tmr+0x14c>)
 8016ff4:	687a      	ldr	r2, [r7, #4]
 8016ff6:	4613      	mov	r3, r2
 8016ff8:	005b      	lsls	r3, r3, #1
 8016ffa:	4413      	add	r3, r2
 8016ffc:	00db      	lsls	r3, r3, #3
 8016ffe:	440b      	add	r3, r1
 8017000:	3314      	adds	r3, #20
 8017002:	781b      	ldrb	r3, [r3, #0]
 8017004:	2b03      	cmp	r3, #3
 8017006:	d10a      	bne.n	801701e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8017008:	4925      	ldr	r1, [pc, #148]	; (80170a0 <etharp_tmr+0x14c>)
 801700a:	687a      	ldr	r2, [r7, #4]
 801700c:	4613      	mov	r3, r2
 801700e:	005b      	lsls	r3, r3, #1
 8017010:	4413      	add	r3, r2
 8017012:	00db      	lsls	r3, r3, #3
 8017014:	440b      	add	r3, r1
 8017016:	3314      	adds	r3, #20
 8017018:	2204      	movs	r2, #4
 801701a:	701a      	strb	r2, [r3, #0]
 801701c:	e034      	b.n	8017088 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801701e:	4920      	ldr	r1, [pc, #128]	; (80170a0 <etharp_tmr+0x14c>)
 8017020:	687a      	ldr	r2, [r7, #4]
 8017022:	4613      	mov	r3, r2
 8017024:	005b      	lsls	r3, r3, #1
 8017026:	4413      	add	r3, r2
 8017028:	00db      	lsls	r3, r3, #3
 801702a:	440b      	add	r3, r1
 801702c:	3314      	adds	r3, #20
 801702e:	781b      	ldrb	r3, [r3, #0]
 8017030:	2b04      	cmp	r3, #4
 8017032:	d10a      	bne.n	801704a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8017034:	491a      	ldr	r1, [pc, #104]	; (80170a0 <etharp_tmr+0x14c>)
 8017036:	687a      	ldr	r2, [r7, #4]
 8017038:	4613      	mov	r3, r2
 801703a:	005b      	lsls	r3, r3, #1
 801703c:	4413      	add	r3, r2
 801703e:	00db      	lsls	r3, r3, #3
 8017040:	440b      	add	r3, r1
 8017042:	3314      	adds	r3, #20
 8017044:	2202      	movs	r2, #2
 8017046:	701a      	strb	r2, [r3, #0]
 8017048:	e01e      	b.n	8017088 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801704a:	4915      	ldr	r1, [pc, #84]	; (80170a0 <etharp_tmr+0x14c>)
 801704c:	687a      	ldr	r2, [r7, #4]
 801704e:	4613      	mov	r3, r2
 8017050:	005b      	lsls	r3, r3, #1
 8017052:	4413      	add	r3, r2
 8017054:	00db      	lsls	r3, r3, #3
 8017056:	440b      	add	r3, r1
 8017058:	3314      	adds	r3, #20
 801705a:	781b      	ldrb	r3, [r3, #0]
 801705c:	2b01      	cmp	r3, #1
 801705e:	d113      	bne.n	8017088 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8017060:	490f      	ldr	r1, [pc, #60]	; (80170a0 <etharp_tmr+0x14c>)
 8017062:	687a      	ldr	r2, [r7, #4]
 8017064:	4613      	mov	r3, r2
 8017066:	005b      	lsls	r3, r3, #1
 8017068:	4413      	add	r3, r2
 801706a:	00db      	lsls	r3, r3, #3
 801706c:	440b      	add	r3, r1
 801706e:	3308      	adds	r3, #8
 8017070:	6818      	ldr	r0, [r3, #0]
 8017072:	687a      	ldr	r2, [r7, #4]
 8017074:	4613      	mov	r3, r2
 8017076:	005b      	lsls	r3, r3, #1
 8017078:	4413      	add	r3, r2
 801707a:	00db      	lsls	r3, r3, #3
 801707c:	4a08      	ldr	r2, [pc, #32]	; (80170a0 <etharp_tmr+0x14c>)
 801707e:	4413      	add	r3, r2
 8017080:	3304      	adds	r3, #4
 8017082:	4619      	mov	r1, r3
 8017084:	f000 fe72 	bl	8017d6c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017088:	687b      	ldr	r3, [r7, #4]
 801708a:	3301      	adds	r3, #1
 801708c:	607b      	str	r3, [r7, #4]
 801708e:	687b      	ldr	r3, [r7, #4]
 8017090:	2b09      	cmp	r3, #9
 8017092:	f77f af65 	ble.w	8016f60 <etharp_tmr+0xc>
      }
    }
  }
}
 8017096:	bf00      	nop
 8017098:	bf00      	nop
 801709a:	3708      	adds	r7, #8
 801709c:	46bd      	mov	sp, r7
 801709e:	bd80      	pop	{r7, pc}
 80170a0:	2000bfb4 	.word	0x2000bfb4

080170a4 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80170a4:	b580      	push	{r7, lr}
 80170a6:	b08a      	sub	sp, #40	; 0x28
 80170a8:	af00      	add	r7, sp, #0
 80170aa:	60f8      	str	r0, [r7, #12]
 80170ac:	460b      	mov	r3, r1
 80170ae:	607a      	str	r2, [r7, #4]
 80170b0:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80170b2:	230a      	movs	r3, #10
 80170b4:	84fb      	strh	r3, [r7, #38]	; 0x26
 80170b6:	230a      	movs	r3, #10
 80170b8:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80170ba:	230a      	movs	r3, #10
 80170bc:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 80170be:	2300      	movs	r3, #0
 80170c0:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80170c2:	230a      	movs	r3, #10
 80170c4:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80170c6:	2300      	movs	r3, #0
 80170c8:	83bb      	strh	r3, [r7, #28]
 80170ca:	2300      	movs	r3, #0
 80170cc:	837b      	strh	r3, [r7, #26]
 80170ce:	2300      	movs	r3, #0
 80170d0:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80170d2:	2300      	movs	r3, #0
 80170d4:	843b      	strh	r3, [r7, #32]
 80170d6:	e0ae      	b.n	8017236 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80170d8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80170dc:	49a6      	ldr	r1, [pc, #664]	; (8017378 <etharp_find_entry+0x2d4>)
 80170de:	4613      	mov	r3, r2
 80170e0:	005b      	lsls	r3, r3, #1
 80170e2:	4413      	add	r3, r2
 80170e4:	00db      	lsls	r3, r3, #3
 80170e6:	440b      	add	r3, r1
 80170e8:	3314      	adds	r3, #20
 80170ea:	781b      	ldrb	r3, [r3, #0]
 80170ec:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80170ee:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80170f2:	2b0a      	cmp	r3, #10
 80170f4:	d105      	bne.n	8017102 <etharp_find_entry+0x5e>
 80170f6:	7dfb      	ldrb	r3, [r7, #23]
 80170f8:	2b00      	cmp	r3, #0
 80170fa:	d102      	bne.n	8017102 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80170fc:	8c3b      	ldrh	r3, [r7, #32]
 80170fe:	847b      	strh	r3, [r7, #34]	; 0x22
 8017100:	e095      	b.n	801722e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8017102:	7dfb      	ldrb	r3, [r7, #23]
 8017104:	2b00      	cmp	r3, #0
 8017106:	f000 8092 	beq.w	801722e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801710a:	7dfb      	ldrb	r3, [r7, #23]
 801710c:	2b01      	cmp	r3, #1
 801710e:	d009      	beq.n	8017124 <etharp_find_entry+0x80>
 8017110:	7dfb      	ldrb	r3, [r7, #23]
 8017112:	2b01      	cmp	r3, #1
 8017114:	d806      	bhi.n	8017124 <etharp_find_entry+0x80>
 8017116:	4b99      	ldr	r3, [pc, #612]	; (801737c <etharp_find_entry+0x2d8>)
 8017118:	f240 1223 	movw	r2, #291	; 0x123
 801711c:	4998      	ldr	r1, [pc, #608]	; (8017380 <etharp_find_entry+0x2dc>)
 801711e:	4899      	ldr	r0, [pc, #612]	; (8017384 <etharp_find_entry+0x2e0>)
 8017120:	f003 fb40 	bl	801a7a4 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8017124:	68fb      	ldr	r3, [r7, #12]
 8017126:	2b00      	cmp	r3, #0
 8017128:	d020      	beq.n	801716c <etharp_find_entry+0xc8>
 801712a:	68fb      	ldr	r3, [r7, #12]
 801712c:	6819      	ldr	r1, [r3, #0]
 801712e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017132:	4891      	ldr	r0, [pc, #580]	; (8017378 <etharp_find_entry+0x2d4>)
 8017134:	4613      	mov	r3, r2
 8017136:	005b      	lsls	r3, r3, #1
 8017138:	4413      	add	r3, r2
 801713a:	00db      	lsls	r3, r3, #3
 801713c:	4403      	add	r3, r0
 801713e:	3304      	adds	r3, #4
 8017140:	681b      	ldr	r3, [r3, #0]
 8017142:	4299      	cmp	r1, r3
 8017144:	d112      	bne.n	801716c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8017146:	687b      	ldr	r3, [r7, #4]
 8017148:	2b00      	cmp	r3, #0
 801714a:	d00c      	beq.n	8017166 <etharp_find_entry+0xc2>
 801714c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017150:	4989      	ldr	r1, [pc, #548]	; (8017378 <etharp_find_entry+0x2d4>)
 8017152:	4613      	mov	r3, r2
 8017154:	005b      	lsls	r3, r3, #1
 8017156:	4413      	add	r3, r2
 8017158:	00db      	lsls	r3, r3, #3
 801715a:	440b      	add	r3, r1
 801715c:	3308      	adds	r3, #8
 801715e:	681b      	ldr	r3, [r3, #0]
 8017160:	687a      	ldr	r2, [r7, #4]
 8017162:	429a      	cmp	r2, r3
 8017164:	d102      	bne.n	801716c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8017166:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801716a:	e100      	b.n	801736e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801716c:	7dfb      	ldrb	r3, [r7, #23]
 801716e:	2b01      	cmp	r3, #1
 8017170:	d140      	bne.n	80171f4 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8017172:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017176:	4980      	ldr	r1, [pc, #512]	; (8017378 <etharp_find_entry+0x2d4>)
 8017178:	4613      	mov	r3, r2
 801717a:	005b      	lsls	r3, r3, #1
 801717c:	4413      	add	r3, r2
 801717e:	00db      	lsls	r3, r3, #3
 8017180:	440b      	add	r3, r1
 8017182:	681b      	ldr	r3, [r3, #0]
 8017184:	2b00      	cmp	r3, #0
 8017186:	d01a      	beq.n	80171be <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8017188:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801718c:	497a      	ldr	r1, [pc, #488]	; (8017378 <etharp_find_entry+0x2d4>)
 801718e:	4613      	mov	r3, r2
 8017190:	005b      	lsls	r3, r3, #1
 8017192:	4413      	add	r3, r2
 8017194:	00db      	lsls	r3, r3, #3
 8017196:	440b      	add	r3, r1
 8017198:	3312      	adds	r3, #18
 801719a:	881b      	ldrh	r3, [r3, #0]
 801719c:	8bba      	ldrh	r2, [r7, #28]
 801719e:	429a      	cmp	r2, r3
 80171a0:	d845      	bhi.n	801722e <etharp_find_entry+0x18a>
            old_queue = i;
 80171a2:	8c3b      	ldrh	r3, [r7, #32]
 80171a4:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80171a6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80171aa:	4973      	ldr	r1, [pc, #460]	; (8017378 <etharp_find_entry+0x2d4>)
 80171ac:	4613      	mov	r3, r2
 80171ae:	005b      	lsls	r3, r3, #1
 80171b0:	4413      	add	r3, r2
 80171b2:	00db      	lsls	r3, r3, #3
 80171b4:	440b      	add	r3, r1
 80171b6:	3312      	adds	r3, #18
 80171b8:	881b      	ldrh	r3, [r3, #0]
 80171ba:	83bb      	strh	r3, [r7, #28]
 80171bc:	e037      	b.n	801722e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80171be:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80171c2:	496d      	ldr	r1, [pc, #436]	; (8017378 <etharp_find_entry+0x2d4>)
 80171c4:	4613      	mov	r3, r2
 80171c6:	005b      	lsls	r3, r3, #1
 80171c8:	4413      	add	r3, r2
 80171ca:	00db      	lsls	r3, r3, #3
 80171cc:	440b      	add	r3, r1
 80171ce:	3312      	adds	r3, #18
 80171d0:	881b      	ldrh	r3, [r3, #0]
 80171d2:	8b7a      	ldrh	r2, [r7, #26]
 80171d4:	429a      	cmp	r2, r3
 80171d6:	d82a      	bhi.n	801722e <etharp_find_entry+0x18a>
            old_pending = i;
 80171d8:	8c3b      	ldrh	r3, [r7, #32]
 80171da:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 80171dc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80171e0:	4965      	ldr	r1, [pc, #404]	; (8017378 <etharp_find_entry+0x2d4>)
 80171e2:	4613      	mov	r3, r2
 80171e4:	005b      	lsls	r3, r3, #1
 80171e6:	4413      	add	r3, r2
 80171e8:	00db      	lsls	r3, r3, #3
 80171ea:	440b      	add	r3, r1
 80171ec:	3312      	adds	r3, #18
 80171ee:	881b      	ldrh	r3, [r3, #0]
 80171f0:	837b      	strh	r3, [r7, #26]
 80171f2:	e01c      	b.n	801722e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80171f4:	7dfb      	ldrb	r3, [r7, #23]
 80171f6:	2b01      	cmp	r3, #1
 80171f8:	d919      	bls.n	801722e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80171fa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80171fe:	495e      	ldr	r1, [pc, #376]	; (8017378 <etharp_find_entry+0x2d4>)
 8017200:	4613      	mov	r3, r2
 8017202:	005b      	lsls	r3, r3, #1
 8017204:	4413      	add	r3, r2
 8017206:	00db      	lsls	r3, r3, #3
 8017208:	440b      	add	r3, r1
 801720a:	3312      	adds	r3, #18
 801720c:	881b      	ldrh	r3, [r3, #0]
 801720e:	8b3a      	ldrh	r2, [r7, #24]
 8017210:	429a      	cmp	r2, r3
 8017212:	d80c      	bhi.n	801722e <etharp_find_entry+0x18a>
            old_stable = i;
 8017214:	8c3b      	ldrh	r3, [r7, #32]
 8017216:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8017218:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801721c:	4956      	ldr	r1, [pc, #344]	; (8017378 <etharp_find_entry+0x2d4>)
 801721e:	4613      	mov	r3, r2
 8017220:	005b      	lsls	r3, r3, #1
 8017222:	4413      	add	r3, r2
 8017224:	00db      	lsls	r3, r3, #3
 8017226:	440b      	add	r3, r1
 8017228:	3312      	adds	r3, #18
 801722a:	881b      	ldrh	r3, [r3, #0]
 801722c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801722e:	8c3b      	ldrh	r3, [r7, #32]
 8017230:	3301      	adds	r3, #1
 8017232:	b29b      	uxth	r3, r3
 8017234:	843b      	strh	r3, [r7, #32]
 8017236:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801723a:	2b09      	cmp	r3, #9
 801723c:	f77f af4c 	ble.w	80170d8 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8017240:	7afb      	ldrb	r3, [r7, #11]
 8017242:	f003 0302 	and.w	r3, r3, #2
 8017246:	2b00      	cmp	r3, #0
 8017248:	d108      	bne.n	801725c <etharp_find_entry+0x1b8>
 801724a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801724e:	2b0a      	cmp	r3, #10
 8017250:	d107      	bne.n	8017262 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8017252:	7afb      	ldrb	r3, [r7, #11]
 8017254:	f003 0301 	and.w	r3, r3, #1
 8017258:	2b00      	cmp	r3, #0
 801725a:	d102      	bne.n	8017262 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801725c:	f04f 33ff 	mov.w	r3, #4294967295
 8017260:	e085      	b.n	801736e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8017262:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8017266:	2b09      	cmp	r3, #9
 8017268:	dc02      	bgt.n	8017270 <etharp_find_entry+0x1cc>
    i = empty;
 801726a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801726c:	843b      	strh	r3, [r7, #32]
 801726e:	e039      	b.n	80172e4 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8017270:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8017274:	2b09      	cmp	r3, #9
 8017276:	dc14      	bgt.n	80172a2 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8017278:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801727a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801727c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017280:	493d      	ldr	r1, [pc, #244]	; (8017378 <etharp_find_entry+0x2d4>)
 8017282:	4613      	mov	r3, r2
 8017284:	005b      	lsls	r3, r3, #1
 8017286:	4413      	add	r3, r2
 8017288:	00db      	lsls	r3, r3, #3
 801728a:	440b      	add	r3, r1
 801728c:	681b      	ldr	r3, [r3, #0]
 801728e:	2b00      	cmp	r3, #0
 8017290:	d018      	beq.n	80172c4 <etharp_find_entry+0x220>
 8017292:	4b3a      	ldr	r3, [pc, #232]	; (801737c <etharp_find_entry+0x2d8>)
 8017294:	f240 126d 	movw	r2, #365	; 0x16d
 8017298:	493b      	ldr	r1, [pc, #236]	; (8017388 <etharp_find_entry+0x2e4>)
 801729a:	483a      	ldr	r0, [pc, #232]	; (8017384 <etharp_find_entry+0x2e0>)
 801729c:	f003 fa82 	bl	801a7a4 <iprintf>
 80172a0:	e010      	b.n	80172c4 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80172a2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80172a6:	2b09      	cmp	r3, #9
 80172a8:	dc02      	bgt.n	80172b0 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80172aa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80172ac:	843b      	strh	r3, [r7, #32]
 80172ae:	e009      	b.n	80172c4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80172b0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80172b4:	2b09      	cmp	r3, #9
 80172b6:	dc02      	bgt.n	80172be <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80172b8:	8bfb      	ldrh	r3, [r7, #30]
 80172ba:	843b      	strh	r3, [r7, #32]
 80172bc:	e002      	b.n	80172c4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80172be:	f04f 33ff 	mov.w	r3, #4294967295
 80172c2:	e054      	b.n	801736e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80172c4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80172c8:	2b09      	cmp	r3, #9
 80172ca:	dd06      	ble.n	80172da <etharp_find_entry+0x236>
 80172cc:	4b2b      	ldr	r3, [pc, #172]	; (801737c <etharp_find_entry+0x2d8>)
 80172ce:	f240 127f 	movw	r2, #383	; 0x17f
 80172d2:	492e      	ldr	r1, [pc, #184]	; (801738c <etharp_find_entry+0x2e8>)
 80172d4:	482b      	ldr	r0, [pc, #172]	; (8017384 <etharp_find_entry+0x2e0>)
 80172d6:	f003 fa65 	bl	801a7a4 <iprintf>
    etharp_free_entry(i);
 80172da:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80172de:	4618      	mov	r0, r3
 80172e0:	f7ff fe06 	bl	8016ef0 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80172e4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80172e8:	2b09      	cmp	r3, #9
 80172ea:	dd06      	ble.n	80172fa <etharp_find_entry+0x256>
 80172ec:	4b23      	ldr	r3, [pc, #140]	; (801737c <etharp_find_entry+0x2d8>)
 80172ee:	f240 1283 	movw	r2, #387	; 0x183
 80172f2:	4926      	ldr	r1, [pc, #152]	; (801738c <etharp_find_entry+0x2e8>)
 80172f4:	4823      	ldr	r0, [pc, #140]	; (8017384 <etharp_find_entry+0x2e0>)
 80172f6:	f003 fa55 	bl	801a7a4 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80172fa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80172fe:	491e      	ldr	r1, [pc, #120]	; (8017378 <etharp_find_entry+0x2d4>)
 8017300:	4613      	mov	r3, r2
 8017302:	005b      	lsls	r3, r3, #1
 8017304:	4413      	add	r3, r2
 8017306:	00db      	lsls	r3, r3, #3
 8017308:	440b      	add	r3, r1
 801730a:	3314      	adds	r3, #20
 801730c:	781b      	ldrb	r3, [r3, #0]
 801730e:	2b00      	cmp	r3, #0
 8017310:	d006      	beq.n	8017320 <etharp_find_entry+0x27c>
 8017312:	4b1a      	ldr	r3, [pc, #104]	; (801737c <etharp_find_entry+0x2d8>)
 8017314:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8017318:	491d      	ldr	r1, [pc, #116]	; (8017390 <etharp_find_entry+0x2ec>)
 801731a:	481a      	ldr	r0, [pc, #104]	; (8017384 <etharp_find_entry+0x2e0>)
 801731c:	f003 fa42 	bl	801a7a4 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8017320:	68fb      	ldr	r3, [r7, #12]
 8017322:	2b00      	cmp	r3, #0
 8017324:	d00b      	beq.n	801733e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8017326:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801732a:	68fb      	ldr	r3, [r7, #12]
 801732c:	6819      	ldr	r1, [r3, #0]
 801732e:	4812      	ldr	r0, [pc, #72]	; (8017378 <etharp_find_entry+0x2d4>)
 8017330:	4613      	mov	r3, r2
 8017332:	005b      	lsls	r3, r3, #1
 8017334:	4413      	add	r3, r2
 8017336:	00db      	lsls	r3, r3, #3
 8017338:	4403      	add	r3, r0
 801733a:	3304      	adds	r3, #4
 801733c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801733e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017342:	490d      	ldr	r1, [pc, #52]	; (8017378 <etharp_find_entry+0x2d4>)
 8017344:	4613      	mov	r3, r2
 8017346:	005b      	lsls	r3, r3, #1
 8017348:	4413      	add	r3, r2
 801734a:	00db      	lsls	r3, r3, #3
 801734c:	440b      	add	r3, r1
 801734e:	3312      	adds	r3, #18
 8017350:	2200      	movs	r2, #0
 8017352:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8017354:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017358:	4907      	ldr	r1, [pc, #28]	; (8017378 <etharp_find_entry+0x2d4>)
 801735a:	4613      	mov	r3, r2
 801735c:	005b      	lsls	r3, r3, #1
 801735e:	4413      	add	r3, r2
 8017360:	00db      	lsls	r3, r3, #3
 8017362:	440b      	add	r3, r1
 8017364:	3308      	adds	r3, #8
 8017366:	687a      	ldr	r2, [r7, #4]
 8017368:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801736a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801736e:	4618      	mov	r0, r3
 8017370:	3728      	adds	r7, #40	; 0x28
 8017372:	46bd      	mov	sp, r7
 8017374:	bd80      	pop	{r7, pc}
 8017376:	bf00      	nop
 8017378:	2000bfb4 	.word	0x2000bfb4
 801737c:	0801e320 	.word	0x0801e320
 8017380:	0801e358 	.word	0x0801e358
 8017384:	0801e398 	.word	0x0801e398
 8017388:	0801e3c0 	.word	0x0801e3c0
 801738c:	0801e3d8 	.word	0x0801e3d8
 8017390:	0801e3ec 	.word	0x0801e3ec

08017394 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8017394:	b580      	push	{r7, lr}
 8017396:	b088      	sub	sp, #32
 8017398:	af02      	add	r7, sp, #8
 801739a:	60f8      	str	r0, [r7, #12]
 801739c:	60b9      	str	r1, [r7, #8]
 801739e:	607a      	str	r2, [r7, #4]
 80173a0:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80173a2:	68fb      	ldr	r3, [r7, #12]
 80173a4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80173a8:	2b06      	cmp	r3, #6
 80173aa:	d006      	beq.n	80173ba <etharp_update_arp_entry+0x26>
 80173ac:	4b48      	ldr	r3, [pc, #288]	; (80174d0 <etharp_update_arp_entry+0x13c>)
 80173ae:	f240 12a9 	movw	r2, #425	; 0x1a9
 80173b2:	4948      	ldr	r1, [pc, #288]	; (80174d4 <etharp_update_arp_entry+0x140>)
 80173b4:	4848      	ldr	r0, [pc, #288]	; (80174d8 <etharp_update_arp_entry+0x144>)
 80173b6:	f003 f9f5 	bl	801a7a4 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80173ba:	68bb      	ldr	r3, [r7, #8]
 80173bc:	2b00      	cmp	r3, #0
 80173be:	d012      	beq.n	80173e6 <etharp_update_arp_entry+0x52>
 80173c0:	68bb      	ldr	r3, [r7, #8]
 80173c2:	681b      	ldr	r3, [r3, #0]
 80173c4:	2b00      	cmp	r3, #0
 80173c6:	d00e      	beq.n	80173e6 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80173c8:	68bb      	ldr	r3, [r7, #8]
 80173ca:	681b      	ldr	r3, [r3, #0]
 80173cc:	68f9      	ldr	r1, [r7, #12]
 80173ce:	4618      	mov	r0, r3
 80173d0:	f001 f944 	bl	801865c <ip4_addr_isbroadcast_u32>
 80173d4:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80173d6:	2b00      	cmp	r3, #0
 80173d8:	d105      	bne.n	80173e6 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80173da:	68bb      	ldr	r3, [r7, #8]
 80173dc:	681b      	ldr	r3, [r3, #0]
 80173de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80173e2:	2be0      	cmp	r3, #224	; 0xe0
 80173e4:	d102      	bne.n	80173ec <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80173e6:	f06f 030f 	mvn.w	r3, #15
 80173ea:	e06c      	b.n	80174c6 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80173ec:	78fb      	ldrb	r3, [r7, #3]
 80173ee:	68fa      	ldr	r2, [r7, #12]
 80173f0:	4619      	mov	r1, r3
 80173f2:	68b8      	ldr	r0, [r7, #8]
 80173f4:	f7ff fe56 	bl	80170a4 <etharp_find_entry>
 80173f8:	4603      	mov	r3, r0
 80173fa:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80173fc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8017400:	2b00      	cmp	r3, #0
 8017402:	da02      	bge.n	801740a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8017404:	8afb      	ldrh	r3, [r7, #22]
 8017406:	b25b      	sxtb	r3, r3
 8017408:	e05d      	b.n	80174c6 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801740a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801740e:	4933      	ldr	r1, [pc, #204]	; (80174dc <etharp_update_arp_entry+0x148>)
 8017410:	4613      	mov	r3, r2
 8017412:	005b      	lsls	r3, r3, #1
 8017414:	4413      	add	r3, r2
 8017416:	00db      	lsls	r3, r3, #3
 8017418:	440b      	add	r3, r1
 801741a:	3314      	adds	r3, #20
 801741c:	2202      	movs	r2, #2
 801741e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8017420:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017424:	492d      	ldr	r1, [pc, #180]	; (80174dc <etharp_update_arp_entry+0x148>)
 8017426:	4613      	mov	r3, r2
 8017428:	005b      	lsls	r3, r3, #1
 801742a:	4413      	add	r3, r2
 801742c:	00db      	lsls	r3, r3, #3
 801742e:	440b      	add	r3, r1
 8017430:	3308      	adds	r3, #8
 8017432:	68fa      	ldr	r2, [r7, #12]
 8017434:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8017436:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801743a:	4613      	mov	r3, r2
 801743c:	005b      	lsls	r3, r3, #1
 801743e:	4413      	add	r3, r2
 8017440:	00db      	lsls	r3, r3, #3
 8017442:	3308      	adds	r3, #8
 8017444:	4a25      	ldr	r2, [pc, #148]	; (80174dc <etharp_update_arp_entry+0x148>)
 8017446:	4413      	add	r3, r2
 8017448:	3304      	adds	r3, #4
 801744a:	2206      	movs	r2, #6
 801744c:	6879      	ldr	r1, [r7, #4]
 801744e:	4618      	mov	r0, r3
 8017450:	f003 f8b4 	bl	801a5bc <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8017454:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017458:	4920      	ldr	r1, [pc, #128]	; (80174dc <etharp_update_arp_entry+0x148>)
 801745a:	4613      	mov	r3, r2
 801745c:	005b      	lsls	r3, r3, #1
 801745e:	4413      	add	r3, r2
 8017460:	00db      	lsls	r3, r3, #3
 8017462:	440b      	add	r3, r1
 8017464:	3312      	adds	r3, #18
 8017466:	2200      	movs	r2, #0
 8017468:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801746a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801746e:	491b      	ldr	r1, [pc, #108]	; (80174dc <etharp_update_arp_entry+0x148>)
 8017470:	4613      	mov	r3, r2
 8017472:	005b      	lsls	r3, r3, #1
 8017474:	4413      	add	r3, r2
 8017476:	00db      	lsls	r3, r3, #3
 8017478:	440b      	add	r3, r1
 801747a:	681b      	ldr	r3, [r3, #0]
 801747c:	2b00      	cmp	r3, #0
 801747e:	d021      	beq.n	80174c4 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8017480:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017484:	4915      	ldr	r1, [pc, #84]	; (80174dc <etharp_update_arp_entry+0x148>)
 8017486:	4613      	mov	r3, r2
 8017488:	005b      	lsls	r3, r3, #1
 801748a:	4413      	add	r3, r2
 801748c:	00db      	lsls	r3, r3, #3
 801748e:	440b      	add	r3, r1
 8017490:	681b      	ldr	r3, [r3, #0]
 8017492:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8017494:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017498:	4910      	ldr	r1, [pc, #64]	; (80174dc <etharp_update_arp_entry+0x148>)
 801749a:	4613      	mov	r3, r2
 801749c:	005b      	lsls	r3, r3, #1
 801749e:	4413      	add	r3, r2
 80174a0:	00db      	lsls	r3, r3, #3
 80174a2:	440b      	add	r3, r1
 80174a4:	2200      	movs	r2, #0
 80174a6:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80174a8:	68fb      	ldr	r3, [r7, #12]
 80174aa:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 80174ae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80174b2:	9300      	str	r3, [sp, #0]
 80174b4:	687b      	ldr	r3, [r7, #4]
 80174b6:	6939      	ldr	r1, [r7, #16]
 80174b8:	68f8      	ldr	r0, [r7, #12]
 80174ba:	f001 ffdb 	bl	8019474 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80174be:	6938      	ldr	r0, [r7, #16]
 80174c0:	f7f6 fcea 	bl	800de98 <pbuf_free>
  }
  return ERR_OK;
 80174c4:	2300      	movs	r3, #0
}
 80174c6:	4618      	mov	r0, r3
 80174c8:	3718      	adds	r7, #24
 80174ca:	46bd      	mov	sp, r7
 80174cc:	bd80      	pop	{r7, pc}
 80174ce:	bf00      	nop
 80174d0:	0801e320 	.word	0x0801e320
 80174d4:	0801e418 	.word	0x0801e418
 80174d8:	0801e398 	.word	0x0801e398
 80174dc:	2000bfb4 	.word	0x2000bfb4

080174e0 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80174e0:	b580      	push	{r7, lr}
 80174e2:	b084      	sub	sp, #16
 80174e4:	af00      	add	r7, sp, #0
 80174e6:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80174e8:	2300      	movs	r3, #0
 80174ea:	60fb      	str	r3, [r7, #12]
 80174ec:	e01e      	b.n	801752c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 80174ee:	4913      	ldr	r1, [pc, #76]	; (801753c <etharp_cleanup_netif+0x5c>)
 80174f0:	68fa      	ldr	r2, [r7, #12]
 80174f2:	4613      	mov	r3, r2
 80174f4:	005b      	lsls	r3, r3, #1
 80174f6:	4413      	add	r3, r2
 80174f8:	00db      	lsls	r3, r3, #3
 80174fa:	440b      	add	r3, r1
 80174fc:	3314      	adds	r3, #20
 80174fe:	781b      	ldrb	r3, [r3, #0]
 8017500:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8017502:	7afb      	ldrb	r3, [r7, #11]
 8017504:	2b00      	cmp	r3, #0
 8017506:	d00e      	beq.n	8017526 <etharp_cleanup_netif+0x46>
 8017508:	490c      	ldr	r1, [pc, #48]	; (801753c <etharp_cleanup_netif+0x5c>)
 801750a:	68fa      	ldr	r2, [r7, #12]
 801750c:	4613      	mov	r3, r2
 801750e:	005b      	lsls	r3, r3, #1
 8017510:	4413      	add	r3, r2
 8017512:	00db      	lsls	r3, r3, #3
 8017514:	440b      	add	r3, r1
 8017516:	3308      	adds	r3, #8
 8017518:	681b      	ldr	r3, [r3, #0]
 801751a:	687a      	ldr	r2, [r7, #4]
 801751c:	429a      	cmp	r2, r3
 801751e:	d102      	bne.n	8017526 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8017520:	68f8      	ldr	r0, [r7, #12]
 8017522:	f7ff fce5 	bl	8016ef0 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017526:	68fb      	ldr	r3, [r7, #12]
 8017528:	3301      	adds	r3, #1
 801752a:	60fb      	str	r3, [r7, #12]
 801752c:	68fb      	ldr	r3, [r7, #12]
 801752e:	2b09      	cmp	r3, #9
 8017530:	dddd      	ble.n	80174ee <etharp_cleanup_netif+0xe>
    }
  }
}
 8017532:	bf00      	nop
 8017534:	bf00      	nop
 8017536:	3710      	adds	r7, #16
 8017538:	46bd      	mov	sp, r7
 801753a:	bd80      	pop	{r7, pc}
 801753c:	2000bfb4 	.word	0x2000bfb4

08017540 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8017540:	b5b0      	push	{r4, r5, r7, lr}
 8017542:	b08a      	sub	sp, #40	; 0x28
 8017544:	af04      	add	r7, sp, #16
 8017546:	6078      	str	r0, [r7, #4]
 8017548:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801754a:	683b      	ldr	r3, [r7, #0]
 801754c:	2b00      	cmp	r3, #0
 801754e:	d107      	bne.n	8017560 <etharp_input+0x20>
 8017550:	4b3f      	ldr	r3, [pc, #252]	; (8017650 <etharp_input+0x110>)
 8017552:	f240 228a 	movw	r2, #650	; 0x28a
 8017556:	493f      	ldr	r1, [pc, #252]	; (8017654 <etharp_input+0x114>)
 8017558:	483f      	ldr	r0, [pc, #252]	; (8017658 <etharp_input+0x118>)
 801755a:	f003 f923 	bl	801a7a4 <iprintf>
 801755e:	e074      	b.n	801764a <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8017560:	687b      	ldr	r3, [r7, #4]
 8017562:	685b      	ldr	r3, [r3, #4]
 8017564:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8017566:	693b      	ldr	r3, [r7, #16]
 8017568:	881b      	ldrh	r3, [r3, #0]
 801756a:	b29b      	uxth	r3, r3
 801756c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017570:	d10c      	bne.n	801758c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8017572:	693b      	ldr	r3, [r7, #16]
 8017574:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8017576:	2b06      	cmp	r3, #6
 8017578:	d108      	bne.n	801758c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801757a:	693b      	ldr	r3, [r7, #16]
 801757c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801757e:	2b04      	cmp	r3, #4
 8017580:	d104      	bne.n	801758c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8017582:	693b      	ldr	r3, [r7, #16]
 8017584:	885b      	ldrh	r3, [r3, #2]
 8017586:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8017588:	2b08      	cmp	r3, #8
 801758a:	d003      	beq.n	8017594 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801758c:	6878      	ldr	r0, [r7, #4]
 801758e:	f7f6 fc83 	bl	800de98 <pbuf_free>
    return;
 8017592:	e05a      	b.n	801764a <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8017594:	693b      	ldr	r3, [r7, #16]
 8017596:	330e      	adds	r3, #14
 8017598:	681b      	ldr	r3, [r3, #0]
 801759a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801759c:	693b      	ldr	r3, [r7, #16]
 801759e:	3318      	adds	r3, #24
 80175a0:	681b      	ldr	r3, [r3, #0]
 80175a2:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80175a4:	683b      	ldr	r3, [r7, #0]
 80175a6:	3304      	adds	r3, #4
 80175a8:	681b      	ldr	r3, [r3, #0]
 80175aa:	2b00      	cmp	r3, #0
 80175ac:	d102      	bne.n	80175b4 <etharp_input+0x74>
    for_us = 0;
 80175ae:	2300      	movs	r3, #0
 80175b0:	75fb      	strb	r3, [r7, #23]
 80175b2:	e009      	b.n	80175c8 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80175b4:	68ba      	ldr	r2, [r7, #8]
 80175b6:	683b      	ldr	r3, [r7, #0]
 80175b8:	3304      	adds	r3, #4
 80175ba:	681b      	ldr	r3, [r3, #0]
 80175bc:	429a      	cmp	r2, r3
 80175be:	bf0c      	ite	eq
 80175c0:	2301      	moveq	r3, #1
 80175c2:	2300      	movne	r3, #0
 80175c4:	b2db      	uxtb	r3, r3
 80175c6:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80175c8:	693b      	ldr	r3, [r7, #16]
 80175ca:	f103 0208 	add.w	r2, r3, #8
 80175ce:	7dfb      	ldrb	r3, [r7, #23]
 80175d0:	2b00      	cmp	r3, #0
 80175d2:	d001      	beq.n	80175d8 <etharp_input+0x98>
 80175d4:	2301      	movs	r3, #1
 80175d6:	e000      	b.n	80175da <etharp_input+0x9a>
 80175d8:	2302      	movs	r3, #2
 80175da:	f107 010c 	add.w	r1, r7, #12
 80175de:	6838      	ldr	r0, [r7, #0]
 80175e0:	f7ff fed8 	bl	8017394 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80175e4:	693b      	ldr	r3, [r7, #16]
 80175e6:	88db      	ldrh	r3, [r3, #6]
 80175e8:	b29b      	uxth	r3, r3
 80175ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80175ee:	d003      	beq.n	80175f8 <etharp_input+0xb8>
 80175f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80175f4:	d01e      	beq.n	8017634 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80175f6:	e025      	b.n	8017644 <etharp_input+0x104>
      if (for_us) {
 80175f8:	7dfb      	ldrb	r3, [r7, #23]
 80175fa:	2b00      	cmp	r3, #0
 80175fc:	d021      	beq.n	8017642 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80175fe:	683b      	ldr	r3, [r7, #0]
 8017600:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8017604:	693b      	ldr	r3, [r7, #16]
 8017606:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801760a:	683b      	ldr	r3, [r7, #0]
 801760c:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 8017610:	683b      	ldr	r3, [r7, #0]
 8017612:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8017614:	693a      	ldr	r2, [r7, #16]
 8017616:	3208      	adds	r2, #8
        etharp_raw(netif,
 8017618:	2102      	movs	r1, #2
 801761a:	9103      	str	r1, [sp, #12]
 801761c:	f107 010c 	add.w	r1, r7, #12
 8017620:	9102      	str	r1, [sp, #8]
 8017622:	9201      	str	r2, [sp, #4]
 8017624:	9300      	str	r3, [sp, #0]
 8017626:	462b      	mov	r3, r5
 8017628:	4622      	mov	r2, r4
 801762a:	4601      	mov	r1, r0
 801762c:	6838      	ldr	r0, [r7, #0]
 801762e:	f000 faef 	bl	8017c10 <etharp_raw>
      break;
 8017632:	e006      	b.n	8017642 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8017634:	f107 030c 	add.w	r3, r7, #12
 8017638:	4619      	mov	r1, r3
 801763a:	6838      	ldr	r0, [r7, #0]
 801763c:	f7fe f9fc 	bl	8015a38 <dhcp_arp_reply>
      break;
 8017640:	e000      	b.n	8017644 <etharp_input+0x104>
      break;
 8017642:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8017644:	6878      	ldr	r0, [r7, #4]
 8017646:	f7f6 fc27 	bl	800de98 <pbuf_free>
}
 801764a:	3718      	adds	r7, #24
 801764c:	46bd      	mov	sp, r7
 801764e:	bdb0      	pop	{r4, r5, r7, pc}
 8017650:	0801e320 	.word	0x0801e320
 8017654:	0801e470 	.word	0x0801e470
 8017658:	0801e398 	.word	0x0801e398

0801765c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801765c:	b580      	push	{r7, lr}
 801765e:	b086      	sub	sp, #24
 8017660:	af02      	add	r7, sp, #8
 8017662:	60f8      	str	r0, [r7, #12]
 8017664:	60b9      	str	r1, [r7, #8]
 8017666:	4613      	mov	r3, r2
 8017668:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801766a:	79fa      	ldrb	r2, [r7, #7]
 801766c:	4944      	ldr	r1, [pc, #272]	; (8017780 <etharp_output_to_arp_index+0x124>)
 801766e:	4613      	mov	r3, r2
 8017670:	005b      	lsls	r3, r3, #1
 8017672:	4413      	add	r3, r2
 8017674:	00db      	lsls	r3, r3, #3
 8017676:	440b      	add	r3, r1
 8017678:	3314      	adds	r3, #20
 801767a:	781b      	ldrb	r3, [r3, #0]
 801767c:	2b01      	cmp	r3, #1
 801767e:	d806      	bhi.n	801768e <etharp_output_to_arp_index+0x32>
 8017680:	4b40      	ldr	r3, [pc, #256]	; (8017784 <etharp_output_to_arp_index+0x128>)
 8017682:	f240 22ee 	movw	r2, #750	; 0x2ee
 8017686:	4940      	ldr	r1, [pc, #256]	; (8017788 <etharp_output_to_arp_index+0x12c>)
 8017688:	4840      	ldr	r0, [pc, #256]	; (801778c <etharp_output_to_arp_index+0x130>)
 801768a:	f003 f88b 	bl	801a7a4 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801768e:	79fa      	ldrb	r2, [r7, #7]
 8017690:	493b      	ldr	r1, [pc, #236]	; (8017780 <etharp_output_to_arp_index+0x124>)
 8017692:	4613      	mov	r3, r2
 8017694:	005b      	lsls	r3, r3, #1
 8017696:	4413      	add	r3, r2
 8017698:	00db      	lsls	r3, r3, #3
 801769a:	440b      	add	r3, r1
 801769c:	3314      	adds	r3, #20
 801769e:	781b      	ldrb	r3, [r3, #0]
 80176a0:	2b02      	cmp	r3, #2
 80176a2:	d153      	bne.n	801774c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80176a4:	79fa      	ldrb	r2, [r7, #7]
 80176a6:	4936      	ldr	r1, [pc, #216]	; (8017780 <etharp_output_to_arp_index+0x124>)
 80176a8:	4613      	mov	r3, r2
 80176aa:	005b      	lsls	r3, r3, #1
 80176ac:	4413      	add	r3, r2
 80176ae:	00db      	lsls	r3, r3, #3
 80176b0:	440b      	add	r3, r1
 80176b2:	3312      	adds	r3, #18
 80176b4:	881b      	ldrh	r3, [r3, #0]
 80176b6:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80176ba:	d919      	bls.n	80176f0 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80176bc:	79fa      	ldrb	r2, [r7, #7]
 80176be:	4613      	mov	r3, r2
 80176c0:	005b      	lsls	r3, r3, #1
 80176c2:	4413      	add	r3, r2
 80176c4:	00db      	lsls	r3, r3, #3
 80176c6:	4a2e      	ldr	r2, [pc, #184]	; (8017780 <etharp_output_to_arp_index+0x124>)
 80176c8:	4413      	add	r3, r2
 80176ca:	3304      	adds	r3, #4
 80176cc:	4619      	mov	r1, r3
 80176ce:	68f8      	ldr	r0, [r7, #12]
 80176d0:	f000 fb4c 	bl	8017d6c <etharp_request>
 80176d4:	4603      	mov	r3, r0
 80176d6:	2b00      	cmp	r3, #0
 80176d8:	d138      	bne.n	801774c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80176da:	79fa      	ldrb	r2, [r7, #7]
 80176dc:	4928      	ldr	r1, [pc, #160]	; (8017780 <etharp_output_to_arp_index+0x124>)
 80176de:	4613      	mov	r3, r2
 80176e0:	005b      	lsls	r3, r3, #1
 80176e2:	4413      	add	r3, r2
 80176e4:	00db      	lsls	r3, r3, #3
 80176e6:	440b      	add	r3, r1
 80176e8:	3314      	adds	r3, #20
 80176ea:	2203      	movs	r2, #3
 80176ec:	701a      	strb	r2, [r3, #0]
 80176ee:	e02d      	b.n	801774c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80176f0:	79fa      	ldrb	r2, [r7, #7]
 80176f2:	4923      	ldr	r1, [pc, #140]	; (8017780 <etharp_output_to_arp_index+0x124>)
 80176f4:	4613      	mov	r3, r2
 80176f6:	005b      	lsls	r3, r3, #1
 80176f8:	4413      	add	r3, r2
 80176fa:	00db      	lsls	r3, r3, #3
 80176fc:	440b      	add	r3, r1
 80176fe:	3312      	adds	r3, #18
 8017700:	881b      	ldrh	r3, [r3, #0]
 8017702:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8017706:	d321      	bcc.n	801774c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8017708:	79fa      	ldrb	r2, [r7, #7]
 801770a:	4613      	mov	r3, r2
 801770c:	005b      	lsls	r3, r3, #1
 801770e:	4413      	add	r3, r2
 8017710:	00db      	lsls	r3, r3, #3
 8017712:	4a1b      	ldr	r2, [pc, #108]	; (8017780 <etharp_output_to_arp_index+0x124>)
 8017714:	4413      	add	r3, r2
 8017716:	1d19      	adds	r1, r3, #4
 8017718:	79fa      	ldrb	r2, [r7, #7]
 801771a:	4613      	mov	r3, r2
 801771c:	005b      	lsls	r3, r3, #1
 801771e:	4413      	add	r3, r2
 8017720:	00db      	lsls	r3, r3, #3
 8017722:	3308      	adds	r3, #8
 8017724:	4a16      	ldr	r2, [pc, #88]	; (8017780 <etharp_output_to_arp_index+0x124>)
 8017726:	4413      	add	r3, r2
 8017728:	3304      	adds	r3, #4
 801772a:	461a      	mov	r2, r3
 801772c:	68f8      	ldr	r0, [r7, #12]
 801772e:	f000 fafb 	bl	8017d28 <etharp_request_dst>
 8017732:	4603      	mov	r3, r0
 8017734:	2b00      	cmp	r3, #0
 8017736:	d109      	bne.n	801774c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8017738:	79fa      	ldrb	r2, [r7, #7]
 801773a:	4911      	ldr	r1, [pc, #68]	; (8017780 <etharp_output_to_arp_index+0x124>)
 801773c:	4613      	mov	r3, r2
 801773e:	005b      	lsls	r3, r3, #1
 8017740:	4413      	add	r3, r2
 8017742:	00db      	lsls	r3, r3, #3
 8017744:	440b      	add	r3, r1
 8017746:	3314      	adds	r3, #20
 8017748:	2203      	movs	r2, #3
 801774a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801774c:	68fb      	ldr	r3, [r7, #12]
 801774e:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 8017752:	79fa      	ldrb	r2, [r7, #7]
 8017754:	4613      	mov	r3, r2
 8017756:	005b      	lsls	r3, r3, #1
 8017758:	4413      	add	r3, r2
 801775a:	00db      	lsls	r3, r3, #3
 801775c:	3308      	adds	r3, #8
 801775e:	4a08      	ldr	r2, [pc, #32]	; (8017780 <etharp_output_to_arp_index+0x124>)
 8017760:	4413      	add	r3, r2
 8017762:	3304      	adds	r3, #4
 8017764:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8017768:	9200      	str	r2, [sp, #0]
 801776a:	460a      	mov	r2, r1
 801776c:	68b9      	ldr	r1, [r7, #8]
 801776e:	68f8      	ldr	r0, [r7, #12]
 8017770:	f001 fe80 	bl	8019474 <ethernet_output>
 8017774:	4603      	mov	r3, r0
}
 8017776:	4618      	mov	r0, r3
 8017778:	3710      	adds	r7, #16
 801777a:	46bd      	mov	sp, r7
 801777c:	bd80      	pop	{r7, pc}
 801777e:	bf00      	nop
 8017780:	2000bfb4 	.word	0x2000bfb4
 8017784:	0801e320 	.word	0x0801e320
 8017788:	0801e490 	.word	0x0801e490
 801778c:	0801e398 	.word	0x0801e398

08017790 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8017790:	b580      	push	{r7, lr}
 8017792:	b08a      	sub	sp, #40	; 0x28
 8017794:	af02      	add	r7, sp, #8
 8017796:	60f8      	str	r0, [r7, #12]
 8017798:	60b9      	str	r1, [r7, #8]
 801779a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801779c:	687b      	ldr	r3, [r7, #4]
 801779e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80177a0:	68fb      	ldr	r3, [r7, #12]
 80177a2:	2b00      	cmp	r3, #0
 80177a4:	d106      	bne.n	80177b4 <etharp_output+0x24>
 80177a6:	4b73      	ldr	r3, [pc, #460]	; (8017974 <etharp_output+0x1e4>)
 80177a8:	f240 321e 	movw	r2, #798	; 0x31e
 80177ac:	4972      	ldr	r1, [pc, #456]	; (8017978 <etharp_output+0x1e8>)
 80177ae:	4873      	ldr	r0, [pc, #460]	; (801797c <etharp_output+0x1ec>)
 80177b0:	f002 fff8 	bl	801a7a4 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80177b4:	68bb      	ldr	r3, [r7, #8]
 80177b6:	2b00      	cmp	r3, #0
 80177b8:	d106      	bne.n	80177c8 <etharp_output+0x38>
 80177ba:	4b6e      	ldr	r3, [pc, #440]	; (8017974 <etharp_output+0x1e4>)
 80177bc:	f240 321f 	movw	r2, #799	; 0x31f
 80177c0:	496f      	ldr	r1, [pc, #444]	; (8017980 <etharp_output+0x1f0>)
 80177c2:	486e      	ldr	r0, [pc, #440]	; (801797c <etharp_output+0x1ec>)
 80177c4:	f002 ffee 	bl	801a7a4 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80177c8:	687b      	ldr	r3, [r7, #4]
 80177ca:	2b00      	cmp	r3, #0
 80177cc:	d106      	bne.n	80177dc <etharp_output+0x4c>
 80177ce:	4b69      	ldr	r3, [pc, #420]	; (8017974 <etharp_output+0x1e4>)
 80177d0:	f44f 7248 	mov.w	r2, #800	; 0x320
 80177d4:	496b      	ldr	r1, [pc, #428]	; (8017984 <etharp_output+0x1f4>)
 80177d6:	4869      	ldr	r0, [pc, #420]	; (801797c <etharp_output+0x1ec>)
 80177d8:	f002 ffe4 	bl	801a7a4 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80177dc:	687b      	ldr	r3, [r7, #4]
 80177de:	681b      	ldr	r3, [r3, #0]
 80177e0:	68f9      	ldr	r1, [r7, #12]
 80177e2:	4618      	mov	r0, r3
 80177e4:	f000 ff3a 	bl	801865c <ip4_addr_isbroadcast_u32>
 80177e8:	4603      	mov	r3, r0
 80177ea:	2b00      	cmp	r3, #0
 80177ec:	d002      	beq.n	80177f4 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80177ee:	4b66      	ldr	r3, [pc, #408]	; (8017988 <etharp_output+0x1f8>)
 80177f0:	61fb      	str	r3, [r7, #28]
 80177f2:	e0af      	b.n	8017954 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80177f4:	687b      	ldr	r3, [r7, #4]
 80177f6:	681b      	ldr	r3, [r3, #0]
 80177f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80177fc:	2be0      	cmp	r3, #224	; 0xe0
 80177fe:	d118      	bne.n	8017832 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8017800:	2301      	movs	r3, #1
 8017802:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8017804:	2300      	movs	r3, #0
 8017806:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8017808:	235e      	movs	r3, #94	; 0x5e
 801780a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801780c:	687b      	ldr	r3, [r7, #4]
 801780e:	3301      	adds	r3, #1
 8017810:	781b      	ldrb	r3, [r3, #0]
 8017812:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017816:	b2db      	uxtb	r3, r3
 8017818:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801781a:	687b      	ldr	r3, [r7, #4]
 801781c:	3302      	adds	r3, #2
 801781e:	781b      	ldrb	r3, [r3, #0]
 8017820:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8017822:	687b      	ldr	r3, [r7, #4]
 8017824:	3303      	adds	r3, #3
 8017826:	781b      	ldrb	r3, [r3, #0]
 8017828:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801782a:	f107 0310 	add.w	r3, r7, #16
 801782e:	61fb      	str	r3, [r7, #28]
 8017830:	e090      	b.n	8017954 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8017832:	687b      	ldr	r3, [r7, #4]
 8017834:	681a      	ldr	r2, [r3, #0]
 8017836:	68fb      	ldr	r3, [r7, #12]
 8017838:	3304      	adds	r3, #4
 801783a:	681b      	ldr	r3, [r3, #0]
 801783c:	405a      	eors	r2, r3
 801783e:	68fb      	ldr	r3, [r7, #12]
 8017840:	3308      	adds	r3, #8
 8017842:	681b      	ldr	r3, [r3, #0]
 8017844:	4013      	ands	r3, r2
 8017846:	2b00      	cmp	r3, #0
 8017848:	d012      	beq.n	8017870 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801784a:	687b      	ldr	r3, [r7, #4]
 801784c:	681b      	ldr	r3, [r3, #0]
 801784e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8017850:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8017854:	4293      	cmp	r3, r2
 8017856:	d00b      	beq.n	8017870 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8017858:	68fb      	ldr	r3, [r7, #12]
 801785a:	330c      	adds	r3, #12
 801785c:	681b      	ldr	r3, [r3, #0]
 801785e:	2b00      	cmp	r3, #0
 8017860:	d003      	beq.n	801786a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8017862:	68fb      	ldr	r3, [r7, #12]
 8017864:	330c      	adds	r3, #12
 8017866:	61bb      	str	r3, [r7, #24]
 8017868:	e002      	b.n	8017870 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801786a:	f06f 0303 	mvn.w	r3, #3
 801786e:	e07d      	b.n	801796c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8017870:	4b46      	ldr	r3, [pc, #280]	; (801798c <etharp_output+0x1fc>)
 8017872:	781b      	ldrb	r3, [r3, #0]
 8017874:	4619      	mov	r1, r3
 8017876:	4a46      	ldr	r2, [pc, #280]	; (8017990 <etharp_output+0x200>)
 8017878:	460b      	mov	r3, r1
 801787a:	005b      	lsls	r3, r3, #1
 801787c:	440b      	add	r3, r1
 801787e:	00db      	lsls	r3, r3, #3
 8017880:	4413      	add	r3, r2
 8017882:	3314      	adds	r3, #20
 8017884:	781b      	ldrb	r3, [r3, #0]
 8017886:	2b01      	cmp	r3, #1
 8017888:	d925      	bls.n	80178d6 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801788a:	4b40      	ldr	r3, [pc, #256]	; (801798c <etharp_output+0x1fc>)
 801788c:	781b      	ldrb	r3, [r3, #0]
 801788e:	4619      	mov	r1, r3
 8017890:	4a3f      	ldr	r2, [pc, #252]	; (8017990 <etharp_output+0x200>)
 8017892:	460b      	mov	r3, r1
 8017894:	005b      	lsls	r3, r3, #1
 8017896:	440b      	add	r3, r1
 8017898:	00db      	lsls	r3, r3, #3
 801789a:	4413      	add	r3, r2
 801789c:	3308      	adds	r3, #8
 801789e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80178a0:	68fa      	ldr	r2, [r7, #12]
 80178a2:	429a      	cmp	r2, r3
 80178a4:	d117      	bne.n	80178d6 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80178a6:	69bb      	ldr	r3, [r7, #24]
 80178a8:	681a      	ldr	r2, [r3, #0]
 80178aa:	4b38      	ldr	r3, [pc, #224]	; (801798c <etharp_output+0x1fc>)
 80178ac:	781b      	ldrb	r3, [r3, #0]
 80178ae:	4618      	mov	r0, r3
 80178b0:	4937      	ldr	r1, [pc, #220]	; (8017990 <etharp_output+0x200>)
 80178b2:	4603      	mov	r3, r0
 80178b4:	005b      	lsls	r3, r3, #1
 80178b6:	4403      	add	r3, r0
 80178b8:	00db      	lsls	r3, r3, #3
 80178ba:	440b      	add	r3, r1
 80178bc:	3304      	adds	r3, #4
 80178be:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80178c0:	429a      	cmp	r2, r3
 80178c2:	d108      	bne.n	80178d6 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80178c4:	4b31      	ldr	r3, [pc, #196]	; (801798c <etharp_output+0x1fc>)
 80178c6:	781b      	ldrb	r3, [r3, #0]
 80178c8:	461a      	mov	r2, r3
 80178ca:	68b9      	ldr	r1, [r7, #8]
 80178cc:	68f8      	ldr	r0, [r7, #12]
 80178ce:	f7ff fec5 	bl	801765c <etharp_output_to_arp_index>
 80178d2:	4603      	mov	r3, r0
 80178d4:	e04a      	b.n	801796c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80178d6:	2300      	movs	r3, #0
 80178d8:	75fb      	strb	r3, [r7, #23]
 80178da:	e031      	b.n	8017940 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80178dc:	7dfa      	ldrb	r2, [r7, #23]
 80178de:	492c      	ldr	r1, [pc, #176]	; (8017990 <etharp_output+0x200>)
 80178e0:	4613      	mov	r3, r2
 80178e2:	005b      	lsls	r3, r3, #1
 80178e4:	4413      	add	r3, r2
 80178e6:	00db      	lsls	r3, r3, #3
 80178e8:	440b      	add	r3, r1
 80178ea:	3314      	adds	r3, #20
 80178ec:	781b      	ldrb	r3, [r3, #0]
 80178ee:	2b01      	cmp	r3, #1
 80178f0:	d923      	bls.n	801793a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80178f2:	7dfa      	ldrb	r2, [r7, #23]
 80178f4:	4926      	ldr	r1, [pc, #152]	; (8017990 <etharp_output+0x200>)
 80178f6:	4613      	mov	r3, r2
 80178f8:	005b      	lsls	r3, r3, #1
 80178fa:	4413      	add	r3, r2
 80178fc:	00db      	lsls	r3, r3, #3
 80178fe:	440b      	add	r3, r1
 8017900:	3308      	adds	r3, #8
 8017902:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8017904:	68fa      	ldr	r2, [r7, #12]
 8017906:	429a      	cmp	r2, r3
 8017908:	d117      	bne.n	801793a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801790a:	69bb      	ldr	r3, [r7, #24]
 801790c:	6819      	ldr	r1, [r3, #0]
 801790e:	7dfa      	ldrb	r2, [r7, #23]
 8017910:	481f      	ldr	r0, [pc, #124]	; (8017990 <etharp_output+0x200>)
 8017912:	4613      	mov	r3, r2
 8017914:	005b      	lsls	r3, r3, #1
 8017916:	4413      	add	r3, r2
 8017918:	00db      	lsls	r3, r3, #3
 801791a:	4403      	add	r3, r0
 801791c:	3304      	adds	r3, #4
 801791e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8017920:	4299      	cmp	r1, r3
 8017922:	d10a      	bne.n	801793a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8017924:	4a19      	ldr	r2, [pc, #100]	; (801798c <etharp_output+0x1fc>)
 8017926:	7dfb      	ldrb	r3, [r7, #23]
 8017928:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801792a:	7dfb      	ldrb	r3, [r7, #23]
 801792c:	461a      	mov	r2, r3
 801792e:	68b9      	ldr	r1, [r7, #8]
 8017930:	68f8      	ldr	r0, [r7, #12]
 8017932:	f7ff fe93 	bl	801765c <etharp_output_to_arp_index>
 8017936:	4603      	mov	r3, r0
 8017938:	e018      	b.n	801796c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801793a:	7dfb      	ldrb	r3, [r7, #23]
 801793c:	3301      	adds	r3, #1
 801793e:	75fb      	strb	r3, [r7, #23]
 8017940:	7dfb      	ldrb	r3, [r7, #23]
 8017942:	2b09      	cmp	r3, #9
 8017944:	d9ca      	bls.n	80178dc <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8017946:	68ba      	ldr	r2, [r7, #8]
 8017948:	69b9      	ldr	r1, [r7, #24]
 801794a:	68f8      	ldr	r0, [r7, #12]
 801794c:	f000 f822 	bl	8017994 <etharp_query>
 8017950:	4603      	mov	r3, r0
 8017952:	e00b      	b.n	801796c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8017954:	68fb      	ldr	r3, [r7, #12]
 8017956:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 801795a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801795e:	9300      	str	r3, [sp, #0]
 8017960:	69fb      	ldr	r3, [r7, #28]
 8017962:	68b9      	ldr	r1, [r7, #8]
 8017964:	68f8      	ldr	r0, [r7, #12]
 8017966:	f001 fd85 	bl	8019474 <ethernet_output>
 801796a:	4603      	mov	r3, r0
}
 801796c:	4618      	mov	r0, r3
 801796e:	3720      	adds	r7, #32
 8017970:	46bd      	mov	sp, r7
 8017972:	bd80      	pop	{r7, pc}
 8017974:	0801e320 	.word	0x0801e320
 8017978:	0801e470 	.word	0x0801e470
 801797c:	0801e398 	.word	0x0801e398
 8017980:	0801e4c0 	.word	0x0801e4c0
 8017984:	0801e460 	.word	0x0801e460
 8017988:	0801eb84 	.word	0x0801eb84
 801798c:	2000c0a4 	.word	0x2000c0a4
 8017990:	2000bfb4 	.word	0x2000bfb4

08017994 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8017994:	b580      	push	{r7, lr}
 8017996:	b08c      	sub	sp, #48	; 0x30
 8017998:	af02      	add	r7, sp, #8
 801799a:	60f8      	str	r0, [r7, #12]
 801799c:	60b9      	str	r1, [r7, #8]
 801799e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80179a0:	68fb      	ldr	r3, [r7, #12]
 80179a2:	332a      	adds	r3, #42	; 0x2a
 80179a4:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80179a6:	23ff      	movs	r3, #255	; 0xff
 80179a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80179ac:	2300      	movs	r3, #0
 80179ae:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80179b0:	68bb      	ldr	r3, [r7, #8]
 80179b2:	681b      	ldr	r3, [r3, #0]
 80179b4:	68f9      	ldr	r1, [r7, #12]
 80179b6:	4618      	mov	r0, r3
 80179b8:	f000 fe50 	bl	801865c <ip4_addr_isbroadcast_u32>
 80179bc:	4603      	mov	r3, r0
 80179be:	2b00      	cmp	r3, #0
 80179c0:	d10c      	bne.n	80179dc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80179c2:	68bb      	ldr	r3, [r7, #8]
 80179c4:	681b      	ldr	r3, [r3, #0]
 80179c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80179ca:	2be0      	cmp	r3, #224	; 0xe0
 80179cc:	d006      	beq.n	80179dc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80179ce:	68bb      	ldr	r3, [r7, #8]
 80179d0:	2b00      	cmp	r3, #0
 80179d2:	d003      	beq.n	80179dc <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80179d4:	68bb      	ldr	r3, [r7, #8]
 80179d6:	681b      	ldr	r3, [r3, #0]
 80179d8:	2b00      	cmp	r3, #0
 80179da:	d102      	bne.n	80179e2 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80179dc:	f06f 030f 	mvn.w	r3, #15
 80179e0:	e101      	b.n	8017be6 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80179e2:	68fa      	ldr	r2, [r7, #12]
 80179e4:	2101      	movs	r1, #1
 80179e6:	68b8      	ldr	r0, [r7, #8]
 80179e8:	f7ff fb5c 	bl	80170a4 <etharp_find_entry>
 80179ec:	4603      	mov	r3, r0
 80179ee:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80179f0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80179f4:	2b00      	cmp	r3, #0
 80179f6:	da02      	bge.n	80179fe <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80179f8:	8a7b      	ldrh	r3, [r7, #18]
 80179fa:	b25b      	sxtb	r3, r3
 80179fc:	e0f3      	b.n	8017be6 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80179fe:	8a7b      	ldrh	r3, [r7, #18]
 8017a00:	2b7e      	cmp	r3, #126	; 0x7e
 8017a02:	d906      	bls.n	8017a12 <etharp_query+0x7e>
 8017a04:	4b7a      	ldr	r3, [pc, #488]	; (8017bf0 <etharp_query+0x25c>)
 8017a06:	f240 32c1 	movw	r2, #961	; 0x3c1
 8017a0a:	497a      	ldr	r1, [pc, #488]	; (8017bf4 <etharp_query+0x260>)
 8017a0c:	487a      	ldr	r0, [pc, #488]	; (8017bf8 <etharp_query+0x264>)
 8017a0e:	f002 fec9 	bl	801a7a4 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8017a12:	8a7b      	ldrh	r3, [r7, #18]
 8017a14:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8017a16:	7c7a      	ldrb	r2, [r7, #17]
 8017a18:	4978      	ldr	r1, [pc, #480]	; (8017bfc <etharp_query+0x268>)
 8017a1a:	4613      	mov	r3, r2
 8017a1c:	005b      	lsls	r3, r3, #1
 8017a1e:	4413      	add	r3, r2
 8017a20:	00db      	lsls	r3, r3, #3
 8017a22:	440b      	add	r3, r1
 8017a24:	3314      	adds	r3, #20
 8017a26:	781b      	ldrb	r3, [r3, #0]
 8017a28:	2b00      	cmp	r3, #0
 8017a2a:	d115      	bne.n	8017a58 <etharp_query+0xc4>
    is_new_entry = 1;
 8017a2c:	2301      	movs	r3, #1
 8017a2e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8017a30:	7c7a      	ldrb	r2, [r7, #17]
 8017a32:	4972      	ldr	r1, [pc, #456]	; (8017bfc <etharp_query+0x268>)
 8017a34:	4613      	mov	r3, r2
 8017a36:	005b      	lsls	r3, r3, #1
 8017a38:	4413      	add	r3, r2
 8017a3a:	00db      	lsls	r3, r3, #3
 8017a3c:	440b      	add	r3, r1
 8017a3e:	3314      	adds	r3, #20
 8017a40:	2201      	movs	r2, #1
 8017a42:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8017a44:	7c7a      	ldrb	r2, [r7, #17]
 8017a46:	496d      	ldr	r1, [pc, #436]	; (8017bfc <etharp_query+0x268>)
 8017a48:	4613      	mov	r3, r2
 8017a4a:	005b      	lsls	r3, r3, #1
 8017a4c:	4413      	add	r3, r2
 8017a4e:	00db      	lsls	r3, r3, #3
 8017a50:	440b      	add	r3, r1
 8017a52:	3308      	adds	r3, #8
 8017a54:	68fa      	ldr	r2, [r7, #12]
 8017a56:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8017a58:	7c7a      	ldrb	r2, [r7, #17]
 8017a5a:	4968      	ldr	r1, [pc, #416]	; (8017bfc <etharp_query+0x268>)
 8017a5c:	4613      	mov	r3, r2
 8017a5e:	005b      	lsls	r3, r3, #1
 8017a60:	4413      	add	r3, r2
 8017a62:	00db      	lsls	r3, r3, #3
 8017a64:	440b      	add	r3, r1
 8017a66:	3314      	adds	r3, #20
 8017a68:	781b      	ldrb	r3, [r3, #0]
 8017a6a:	2b01      	cmp	r3, #1
 8017a6c:	d011      	beq.n	8017a92 <etharp_query+0xfe>
 8017a6e:	7c7a      	ldrb	r2, [r7, #17]
 8017a70:	4962      	ldr	r1, [pc, #392]	; (8017bfc <etharp_query+0x268>)
 8017a72:	4613      	mov	r3, r2
 8017a74:	005b      	lsls	r3, r3, #1
 8017a76:	4413      	add	r3, r2
 8017a78:	00db      	lsls	r3, r3, #3
 8017a7a:	440b      	add	r3, r1
 8017a7c:	3314      	adds	r3, #20
 8017a7e:	781b      	ldrb	r3, [r3, #0]
 8017a80:	2b01      	cmp	r3, #1
 8017a82:	d806      	bhi.n	8017a92 <etharp_query+0xfe>
 8017a84:	4b5a      	ldr	r3, [pc, #360]	; (8017bf0 <etharp_query+0x25c>)
 8017a86:	f240 32cd 	movw	r2, #973	; 0x3cd
 8017a8a:	495d      	ldr	r1, [pc, #372]	; (8017c00 <etharp_query+0x26c>)
 8017a8c:	485a      	ldr	r0, [pc, #360]	; (8017bf8 <etharp_query+0x264>)
 8017a8e:	f002 fe89 	bl	801a7a4 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8017a92:	6a3b      	ldr	r3, [r7, #32]
 8017a94:	2b00      	cmp	r3, #0
 8017a96:	d102      	bne.n	8017a9e <etharp_query+0x10a>
 8017a98:	687b      	ldr	r3, [r7, #4]
 8017a9a:	2b00      	cmp	r3, #0
 8017a9c:	d10c      	bne.n	8017ab8 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8017a9e:	68b9      	ldr	r1, [r7, #8]
 8017aa0:	68f8      	ldr	r0, [r7, #12]
 8017aa2:	f000 f963 	bl	8017d6c <etharp_request>
 8017aa6:	4603      	mov	r3, r0
 8017aa8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8017aac:	687b      	ldr	r3, [r7, #4]
 8017aae:	2b00      	cmp	r3, #0
 8017ab0:	d102      	bne.n	8017ab8 <etharp_query+0x124>
      return result;
 8017ab2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8017ab6:	e096      	b.n	8017be6 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8017ab8:	687b      	ldr	r3, [r7, #4]
 8017aba:	2b00      	cmp	r3, #0
 8017abc:	d106      	bne.n	8017acc <etharp_query+0x138>
 8017abe:	4b4c      	ldr	r3, [pc, #304]	; (8017bf0 <etharp_query+0x25c>)
 8017ac0:	f240 32e1 	movw	r2, #993	; 0x3e1
 8017ac4:	494f      	ldr	r1, [pc, #316]	; (8017c04 <etharp_query+0x270>)
 8017ac6:	484c      	ldr	r0, [pc, #304]	; (8017bf8 <etharp_query+0x264>)
 8017ac8:	f002 fe6c 	bl	801a7a4 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8017acc:	7c7a      	ldrb	r2, [r7, #17]
 8017ace:	494b      	ldr	r1, [pc, #300]	; (8017bfc <etharp_query+0x268>)
 8017ad0:	4613      	mov	r3, r2
 8017ad2:	005b      	lsls	r3, r3, #1
 8017ad4:	4413      	add	r3, r2
 8017ad6:	00db      	lsls	r3, r3, #3
 8017ad8:	440b      	add	r3, r1
 8017ada:	3314      	adds	r3, #20
 8017adc:	781b      	ldrb	r3, [r3, #0]
 8017ade:	2b01      	cmp	r3, #1
 8017ae0:	d917      	bls.n	8017b12 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8017ae2:	4a49      	ldr	r2, [pc, #292]	; (8017c08 <etharp_query+0x274>)
 8017ae4:	7c7b      	ldrb	r3, [r7, #17]
 8017ae6:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8017ae8:	7c7a      	ldrb	r2, [r7, #17]
 8017aea:	4613      	mov	r3, r2
 8017aec:	005b      	lsls	r3, r3, #1
 8017aee:	4413      	add	r3, r2
 8017af0:	00db      	lsls	r3, r3, #3
 8017af2:	3308      	adds	r3, #8
 8017af4:	4a41      	ldr	r2, [pc, #260]	; (8017bfc <etharp_query+0x268>)
 8017af6:	4413      	add	r3, r2
 8017af8:	3304      	adds	r3, #4
 8017afa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8017afe:	9200      	str	r2, [sp, #0]
 8017b00:	697a      	ldr	r2, [r7, #20]
 8017b02:	6879      	ldr	r1, [r7, #4]
 8017b04:	68f8      	ldr	r0, [r7, #12]
 8017b06:	f001 fcb5 	bl	8019474 <ethernet_output>
 8017b0a:	4603      	mov	r3, r0
 8017b0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017b10:	e067      	b.n	8017be2 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8017b12:	7c7a      	ldrb	r2, [r7, #17]
 8017b14:	4939      	ldr	r1, [pc, #228]	; (8017bfc <etharp_query+0x268>)
 8017b16:	4613      	mov	r3, r2
 8017b18:	005b      	lsls	r3, r3, #1
 8017b1a:	4413      	add	r3, r2
 8017b1c:	00db      	lsls	r3, r3, #3
 8017b1e:	440b      	add	r3, r1
 8017b20:	3314      	adds	r3, #20
 8017b22:	781b      	ldrb	r3, [r3, #0]
 8017b24:	2b01      	cmp	r3, #1
 8017b26:	d15c      	bne.n	8017be2 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8017b28:	2300      	movs	r3, #0
 8017b2a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8017b2c:	687b      	ldr	r3, [r7, #4]
 8017b2e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8017b30:	e01c      	b.n	8017b6c <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8017b32:	69fb      	ldr	r3, [r7, #28]
 8017b34:	895a      	ldrh	r2, [r3, #10]
 8017b36:	69fb      	ldr	r3, [r7, #28]
 8017b38:	891b      	ldrh	r3, [r3, #8]
 8017b3a:	429a      	cmp	r2, r3
 8017b3c:	d10a      	bne.n	8017b54 <etharp_query+0x1c0>
 8017b3e:	69fb      	ldr	r3, [r7, #28]
 8017b40:	681b      	ldr	r3, [r3, #0]
 8017b42:	2b00      	cmp	r3, #0
 8017b44:	d006      	beq.n	8017b54 <etharp_query+0x1c0>
 8017b46:	4b2a      	ldr	r3, [pc, #168]	; (8017bf0 <etharp_query+0x25c>)
 8017b48:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8017b4c:	492f      	ldr	r1, [pc, #188]	; (8017c0c <etharp_query+0x278>)
 8017b4e:	482a      	ldr	r0, [pc, #168]	; (8017bf8 <etharp_query+0x264>)
 8017b50:	f002 fe28 	bl	801a7a4 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8017b54:	69fb      	ldr	r3, [r7, #28]
 8017b56:	7b1b      	ldrb	r3, [r3, #12]
 8017b58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017b5c:	2b00      	cmp	r3, #0
 8017b5e:	d002      	beq.n	8017b66 <etharp_query+0x1d2>
        copy_needed = 1;
 8017b60:	2301      	movs	r3, #1
 8017b62:	61bb      	str	r3, [r7, #24]
        break;
 8017b64:	e005      	b.n	8017b72 <etharp_query+0x1de>
      }
      p = p->next;
 8017b66:	69fb      	ldr	r3, [r7, #28]
 8017b68:	681b      	ldr	r3, [r3, #0]
 8017b6a:	61fb      	str	r3, [r7, #28]
    while (p) {
 8017b6c:	69fb      	ldr	r3, [r7, #28]
 8017b6e:	2b00      	cmp	r3, #0
 8017b70:	d1df      	bne.n	8017b32 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8017b72:	69bb      	ldr	r3, [r7, #24]
 8017b74:	2b00      	cmp	r3, #0
 8017b76:	d007      	beq.n	8017b88 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8017b78:	687a      	ldr	r2, [r7, #4]
 8017b7a:	f44f 7120 	mov.w	r1, #640	; 0x280
 8017b7e:	200e      	movs	r0, #14
 8017b80:	f7f6 fc28 	bl	800e3d4 <pbuf_clone>
 8017b84:	61f8      	str	r0, [r7, #28]
 8017b86:	e004      	b.n	8017b92 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8017b88:	687b      	ldr	r3, [r7, #4]
 8017b8a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8017b8c:	69f8      	ldr	r0, [r7, #28]
 8017b8e:	f7f6 fa27 	bl	800dfe0 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8017b92:	69fb      	ldr	r3, [r7, #28]
 8017b94:	2b00      	cmp	r3, #0
 8017b96:	d021      	beq.n	8017bdc <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8017b98:	7c7a      	ldrb	r2, [r7, #17]
 8017b9a:	4918      	ldr	r1, [pc, #96]	; (8017bfc <etharp_query+0x268>)
 8017b9c:	4613      	mov	r3, r2
 8017b9e:	005b      	lsls	r3, r3, #1
 8017ba0:	4413      	add	r3, r2
 8017ba2:	00db      	lsls	r3, r3, #3
 8017ba4:	440b      	add	r3, r1
 8017ba6:	681b      	ldr	r3, [r3, #0]
 8017ba8:	2b00      	cmp	r3, #0
 8017baa:	d00a      	beq.n	8017bc2 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8017bac:	7c7a      	ldrb	r2, [r7, #17]
 8017bae:	4913      	ldr	r1, [pc, #76]	; (8017bfc <etharp_query+0x268>)
 8017bb0:	4613      	mov	r3, r2
 8017bb2:	005b      	lsls	r3, r3, #1
 8017bb4:	4413      	add	r3, r2
 8017bb6:	00db      	lsls	r3, r3, #3
 8017bb8:	440b      	add	r3, r1
 8017bba:	681b      	ldr	r3, [r3, #0]
 8017bbc:	4618      	mov	r0, r3
 8017bbe:	f7f6 f96b 	bl	800de98 <pbuf_free>
      }
      arp_table[i].q = p;
 8017bc2:	7c7a      	ldrb	r2, [r7, #17]
 8017bc4:	490d      	ldr	r1, [pc, #52]	; (8017bfc <etharp_query+0x268>)
 8017bc6:	4613      	mov	r3, r2
 8017bc8:	005b      	lsls	r3, r3, #1
 8017bca:	4413      	add	r3, r2
 8017bcc:	00db      	lsls	r3, r3, #3
 8017bce:	440b      	add	r3, r1
 8017bd0:	69fa      	ldr	r2, [r7, #28]
 8017bd2:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8017bd4:	2300      	movs	r3, #0
 8017bd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017bda:	e002      	b.n	8017be2 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8017bdc:	23ff      	movs	r3, #255	; 0xff
 8017bde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8017be2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8017be6:	4618      	mov	r0, r3
 8017be8:	3728      	adds	r7, #40	; 0x28
 8017bea:	46bd      	mov	sp, r7
 8017bec:	bd80      	pop	{r7, pc}
 8017bee:	bf00      	nop
 8017bf0:	0801e320 	.word	0x0801e320
 8017bf4:	0801e4cc 	.word	0x0801e4cc
 8017bf8:	0801e398 	.word	0x0801e398
 8017bfc:	2000bfb4 	.word	0x2000bfb4
 8017c00:	0801e4dc 	.word	0x0801e4dc
 8017c04:	0801e4c0 	.word	0x0801e4c0
 8017c08:	2000c0a4 	.word	0x2000c0a4
 8017c0c:	0801e504 	.word	0x0801e504

08017c10 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8017c10:	b580      	push	{r7, lr}
 8017c12:	b08a      	sub	sp, #40	; 0x28
 8017c14:	af02      	add	r7, sp, #8
 8017c16:	60f8      	str	r0, [r7, #12]
 8017c18:	60b9      	str	r1, [r7, #8]
 8017c1a:	607a      	str	r2, [r7, #4]
 8017c1c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8017c1e:	2300      	movs	r3, #0
 8017c20:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8017c22:	68fb      	ldr	r3, [r7, #12]
 8017c24:	2b00      	cmp	r3, #0
 8017c26:	d106      	bne.n	8017c36 <etharp_raw+0x26>
 8017c28:	4b3a      	ldr	r3, [pc, #232]	; (8017d14 <etharp_raw+0x104>)
 8017c2a:	f240 4257 	movw	r2, #1111	; 0x457
 8017c2e:	493a      	ldr	r1, [pc, #232]	; (8017d18 <etharp_raw+0x108>)
 8017c30:	483a      	ldr	r0, [pc, #232]	; (8017d1c <etharp_raw+0x10c>)
 8017c32:	f002 fdb7 	bl	801a7a4 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8017c36:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017c3a:	211c      	movs	r1, #28
 8017c3c:	200e      	movs	r0, #14
 8017c3e:	f7f5 fe47 	bl	800d8d0 <pbuf_alloc>
 8017c42:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8017c44:	69bb      	ldr	r3, [r7, #24]
 8017c46:	2b00      	cmp	r3, #0
 8017c48:	d102      	bne.n	8017c50 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8017c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8017c4e:	e05d      	b.n	8017d0c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8017c50:	69bb      	ldr	r3, [r7, #24]
 8017c52:	895b      	ldrh	r3, [r3, #10]
 8017c54:	2b1b      	cmp	r3, #27
 8017c56:	d806      	bhi.n	8017c66 <etharp_raw+0x56>
 8017c58:	4b2e      	ldr	r3, [pc, #184]	; (8017d14 <etharp_raw+0x104>)
 8017c5a:	f240 4262 	movw	r2, #1122	; 0x462
 8017c5e:	4930      	ldr	r1, [pc, #192]	; (8017d20 <etharp_raw+0x110>)
 8017c60:	482e      	ldr	r0, [pc, #184]	; (8017d1c <etharp_raw+0x10c>)
 8017c62:	f002 fd9f 	bl	801a7a4 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8017c66:	69bb      	ldr	r3, [r7, #24]
 8017c68:	685b      	ldr	r3, [r3, #4]
 8017c6a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8017c6c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8017c6e:	4618      	mov	r0, r3
 8017c70:	f7f4 fcae 	bl	800c5d0 <lwip_htons>
 8017c74:	4603      	mov	r3, r0
 8017c76:	461a      	mov	r2, r3
 8017c78:	697b      	ldr	r3, [r7, #20]
 8017c7a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8017c7c:	68fb      	ldr	r3, [r7, #12]
 8017c7e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017c82:	2b06      	cmp	r3, #6
 8017c84:	d006      	beq.n	8017c94 <etharp_raw+0x84>
 8017c86:	4b23      	ldr	r3, [pc, #140]	; (8017d14 <etharp_raw+0x104>)
 8017c88:	f240 4269 	movw	r2, #1129	; 0x469
 8017c8c:	4925      	ldr	r1, [pc, #148]	; (8017d24 <etharp_raw+0x114>)
 8017c8e:	4823      	ldr	r0, [pc, #140]	; (8017d1c <etharp_raw+0x10c>)
 8017c90:	f002 fd88 	bl	801a7a4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8017c94:	697b      	ldr	r3, [r7, #20]
 8017c96:	3308      	adds	r3, #8
 8017c98:	2206      	movs	r2, #6
 8017c9a:	6839      	ldr	r1, [r7, #0]
 8017c9c:	4618      	mov	r0, r3
 8017c9e:	f002 fc8d 	bl	801a5bc <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8017ca2:	697b      	ldr	r3, [r7, #20]
 8017ca4:	3312      	adds	r3, #18
 8017ca6:	2206      	movs	r2, #6
 8017ca8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017caa:	4618      	mov	r0, r3
 8017cac:	f002 fc86 	bl	801a5bc <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8017cb0:	697b      	ldr	r3, [r7, #20]
 8017cb2:	330e      	adds	r3, #14
 8017cb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017cb6:	6812      	ldr	r2, [r2, #0]
 8017cb8:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8017cba:	697b      	ldr	r3, [r7, #20]
 8017cbc:	3318      	adds	r3, #24
 8017cbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017cc0:	6812      	ldr	r2, [r2, #0]
 8017cc2:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8017cc4:	697b      	ldr	r3, [r7, #20]
 8017cc6:	2200      	movs	r2, #0
 8017cc8:	701a      	strb	r2, [r3, #0]
 8017cca:	2200      	movs	r2, #0
 8017ccc:	f042 0201 	orr.w	r2, r2, #1
 8017cd0:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8017cd2:	697b      	ldr	r3, [r7, #20]
 8017cd4:	2200      	movs	r2, #0
 8017cd6:	f042 0208 	orr.w	r2, r2, #8
 8017cda:	709a      	strb	r2, [r3, #2]
 8017cdc:	2200      	movs	r2, #0
 8017cde:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8017ce0:	697b      	ldr	r3, [r7, #20]
 8017ce2:	2206      	movs	r2, #6
 8017ce4:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8017ce6:	697b      	ldr	r3, [r7, #20]
 8017ce8:	2204      	movs	r2, #4
 8017cea:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8017cec:	f640 0306 	movw	r3, #2054	; 0x806
 8017cf0:	9300      	str	r3, [sp, #0]
 8017cf2:	687b      	ldr	r3, [r7, #4]
 8017cf4:	68ba      	ldr	r2, [r7, #8]
 8017cf6:	69b9      	ldr	r1, [r7, #24]
 8017cf8:	68f8      	ldr	r0, [r7, #12]
 8017cfa:	f001 fbbb 	bl	8019474 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8017cfe:	69b8      	ldr	r0, [r7, #24]
 8017d00:	f7f6 f8ca 	bl	800de98 <pbuf_free>
  p = NULL;
 8017d04:	2300      	movs	r3, #0
 8017d06:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8017d08:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8017d0c:	4618      	mov	r0, r3
 8017d0e:	3720      	adds	r7, #32
 8017d10:	46bd      	mov	sp, r7
 8017d12:	bd80      	pop	{r7, pc}
 8017d14:	0801e320 	.word	0x0801e320
 8017d18:	0801e470 	.word	0x0801e470
 8017d1c:	0801e398 	.word	0x0801e398
 8017d20:	0801e520 	.word	0x0801e520
 8017d24:	0801e554 	.word	0x0801e554

08017d28 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8017d28:	b580      	push	{r7, lr}
 8017d2a:	b088      	sub	sp, #32
 8017d2c:	af04      	add	r7, sp, #16
 8017d2e:	60f8      	str	r0, [r7, #12]
 8017d30:	60b9      	str	r1, [r7, #8]
 8017d32:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8017d34:	68fb      	ldr	r3, [r7, #12]
 8017d36:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8017d3a:	68fb      	ldr	r3, [r7, #12]
 8017d3c:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8017d40:	68fb      	ldr	r3, [r7, #12]
 8017d42:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8017d44:	2201      	movs	r2, #1
 8017d46:	9203      	str	r2, [sp, #12]
 8017d48:	68ba      	ldr	r2, [r7, #8]
 8017d4a:	9202      	str	r2, [sp, #8]
 8017d4c:	4a06      	ldr	r2, [pc, #24]	; (8017d68 <etharp_request_dst+0x40>)
 8017d4e:	9201      	str	r2, [sp, #4]
 8017d50:	9300      	str	r3, [sp, #0]
 8017d52:	4603      	mov	r3, r0
 8017d54:	687a      	ldr	r2, [r7, #4]
 8017d56:	68f8      	ldr	r0, [r7, #12]
 8017d58:	f7ff ff5a 	bl	8017c10 <etharp_raw>
 8017d5c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8017d5e:	4618      	mov	r0, r3
 8017d60:	3710      	adds	r7, #16
 8017d62:	46bd      	mov	sp, r7
 8017d64:	bd80      	pop	{r7, pc}
 8017d66:	bf00      	nop
 8017d68:	0801eb8c 	.word	0x0801eb8c

08017d6c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8017d6c:	b580      	push	{r7, lr}
 8017d6e:	b082      	sub	sp, #8
 8017d70:	af00      	add	r7, sp, #0
 8017d72:	6078      	str	r0, [r7, #4]
 8017d74:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8017d76:	4a05      	ldr	r2, [pc, #20]	; (8017d8c <etharp_request+0x20>)
 8017d78:	6839      	ldr	r1, [r7, #0]
 8017d7a:	6878      	ldr	r0, [r7, #4]
 8017d7c:	f7ff ffd4 	bl	8017d28 <etharp_request_dst>
 8017d80:	4603      	mov	r3, r0
}
 8017d82:	4618      	mov	r0, r3
 8017d84:	3708      	adds	r7, #8
 8017d86:	46bd      	mov	sp, r7
 8017d88:	bd80      	pop	{r7, pc}
 8017d8a:	bf00      	nop
 8017d8c:	0801eb84 	.word	0x0801eb84

08017d90 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8017d90:	b580      	push	{r7, lr}
 8017d92:	b08e      	sub	sp, #56	; 0x38
 8017d94:	af04      	add	r7, sp, #16
 8017d96:	6078      	str	r0, [r7, #4]
 8017d98:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8017d9a:	4b87      	ldr	r3, [pc, #540]	; (8017fb8 <icmp_input+0x228>)
 8017d9c:	689b      	ldr	r3, [r3, #8]
 8017d9e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8017da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017da2:	781b      	ldrb	r3, [r3, #0]
 8017da4:	f003 030f 	and.w	r3, r3, #15
 8017da8:	b2db      	uxtb	r3, r3
 8017daa:	009b      	lsls	r3, r3, #2
 8017dac:	b2db      	uxtb	r3, r3
 8017dae:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8017db0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017db2:	2b13      	cmp	r3, #19
 8017db4:	f240 80e8 	bls.w	8017f88 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8017db8:	687b      	ldr	r3, [r7, #4]
 8017dba:	895b      	ldrh	r3, [r3, #10]
 8017dbc:	2b03      	cmp	r3, #3
 8017dbe:	f240 80e5 	bls.w	8017f8c <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8017dc2:	687b      	ldr	r3, [r7, #4]
 8017dc4:	685b      	ldr	r3, [r3, #4]
 8017dc6:	781b      	ldrb	r3, [r3, #0]
 8017dc8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8017dcc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8017dd0:	2b00      	cmp	r3, #0
 8017dd2:	f000 80d2 	beq.w	8017f7a <icmp_input+0x1ea>
 8017dd6:	2b08      	cmp	r3, #8
 8017dd8:	f040 80d2 	bne.w	8017f80 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8017ddc:	4b77      	ldr	r3, [pc, #476]	; (8017fbc <icmp_input+0x22c>)
 8017dde:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017de0:	4b75      	ldr	r3, [pc, #468]	; (8017fb8 <icmp_input+0x228>)
 8017de2:	695b      	ldr	r3, [r3, #20]
 8017de4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017de8:	2be0      	cmp	r3, #224	; 0xe0
 8017dea:	f000 80d6 	beq.w	8017f9a <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8017dee:	4b72      	ldr	r3, [pc, #456]	; (8017fb8 <icmp_input+0x228>)
 8017df0:	695b      	ldr	r3, [r3, #20]
 8017df2:	4a71      	ldr	r2, [pc, #452]	; (8017fb8 <icmp_input+0x228>)
 8017df4:	6812      	ldr	r2, [r2, #0]
 8017df6:	4611      	mov	r1, r2
 8017df8:	4618      	mov	r0, r3
 8017dfa:	f000 fc2f 	bl	801865c <ip4_addr_isbroadcast_u32>
 8017dfe:	4603      	mov	r3, r0
 8017e00:	2b00      	cmp	r3, #0
 8017e02:	f040 80cc 	bne.w	8017f9e <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8017e06:	687b      	ldr	r3, [r7, #4]
 8017e08:	891b      	ldrh	r3, [r3, #8]
 8017e0a:	2b07      	cmp	r3, #7
 8017e0c:	f240 80c0 	bls.w	8017f90 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8017e10:	6878      	ldr	r0, [r7, #4]
 8017e12:	f7f4 fc77 	bl	800c704 <inet_chksum_pbuf>
 8017e16:	4603      	mov	r3, r0
 8017e18:	2b00      	cmp	r3, #0
 8017e1a:	d003      	beq.n	8017e24 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 8017e1c:	6878      	ldr	r0, [r7, #4]
 8017e1e:	f7f6 f83b 	bl	800de98 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 8017e22:	e0c5      	b.n	8017fb0 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8017e24:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017e26:	330e      	adds	r3, #14
 8017e28:	4619      	mov	r1, r3
 8017e2a:	6878      	ldr	r0, [r7, #4]
 8017e2c:	f7f5 ff9e 	bl	800dd6c <pbuf_add_header>
 8017e30:	4603      	mov	r3, r0
 8017e32:	2b00      	cmp	r3, #0
 8017e34:	d04b      	beq.n	8017ece <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8017e36:	687b      	ldr	r3, [r7, #4]
 8017e38:	891a      	ldrh	r2, [r3, #8]
 8017e3a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017e3c:	4413      	add	r3, r2
 8017e3e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8017e40:	687b      	ldr	r3, [r7, #4]
 8017e42:	891b      	ldrh	r3, [r3, #8]
 8017e44:	8b7a      	ldrh	r2, [r7, #26]
 8017e46:	429a      	cmp	r2, r3
 8017e48:	f0c0 80ab 	bcc.w	8017fa2 <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8017e4c:	8b7b      	ldrh	r3, [r7, #26]
 8017e4e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017e52:	4619      	mov	r1, r3
 8017e54:	200e      	movs	r0, #14
 8017e56:	f7f5 fd3b 	bl	800d8d0 <pbuf_alloc>
 8017e5a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8017e5c:	697b      	ldr	r3, [r7, #20]
 8017e5e:	2b00      	cmp	r3, #0
 8017e60:	f000 80a1 	beq.w	8017fa6 <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8017e64:	697b      	ldr	r3, [r7, #20]
 8017e66:	895b      	ldrh	r3, [r3, #10]
 8017e68:	461a      	mov	r2, r3
 8017e6a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017e6c:	3308      	adds	r3, #8
 8017e6e:	429a      	cmp	r2, r3
 8017e70:	d203      	bcs.n	8017e7a <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8017e72:	6978      	ldr	r0, [r7, #20]
 8017e74:	f7f6 f810 	bl	800de98 <pbuf_free>
          goto icmperr;
 8017e78:	e096      	b.n	8017fa8 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8017e7a:	697b      	ldr	r3, [r7, #20]
 8017e7c:	685b      	ldr	r3, [r3, #4]
 8017e7e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8017e80:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017e82:	4618      	mov	r0, r3
 8017e84:	f002 fb9a 	bl	801a5bc <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8017e88:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017e8a:	4619      	mov	r1, r3
 8017e8c:	6978      	ldr	r0, [r7, #20]
 8017e8e:	f7f5 ff7d 	bl	800dd8c <pbuf_remove_header>
 8017e92:	4603      	mov	r3, r0
 8017e94:	2b00      	cmp	r3, #0
 8017e96:	d009      	beq.n	8017eac <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8017e98:	4b49      	ldr	r3, [pc, #292]	; (8017fc0 <icmp_input+0x230>)
 8017e9a:	22b6      	movs	r2, #182	; 0xb6
 8017e9c:	4949      	ldr	r1, [pc, #292]	; (8017fc4 <icmp_input+0x234>)
 8017e9e:	484a      	ldr	r0, [pc, #296]	; (8017fc8 <icmp_input+0x238>)
 8017ea0:	f002 fc80 	bl	801a7a4 <iprintf>
          pbuf_free(r);
 8017ea4:	6978      	ldr	r0, [r7, #20]
 8017ea6:	f7f5 fff7 	bl	800de98 <pbuf_free>
          goto icmperr;
 8017eaa:	e07d      	b.n	8017fa8 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8017eac:	6879      	ldr	r1, [r7, #4]
 8017eae:	6978      	ldr	r0, [r7, #20]
 8017eb0:	f7f6 f924 	bl	800e0fc <pbuf_copy>
 8017eb4:	4603      	mov	r3, r0
 8017eb6:	2b00      	cmp	r3, #0
 8017eb8:	d003      	beq.n	8017ec2 <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8017eba:	6978      	ldr	r0, [r7, #20]
 8017ebc:	f7f5 ffec 	bl	800de98 <pbuf_free>
          goto icmperr;
 8017ec0:	e072      	b.n	8017fa8 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 8017ec2:	6878      	ldr	r0, [r7, #4]
 8017ec4:	f7f5 ffe8 	bl	800de98 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8017ec8:	697b      	ldr	r3, [r7, #20]
 8017eca:	607b      	str	r3, [r7, #4]
 8017ecc:	e00f      	b.n	8017eee <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8017ece:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017ed0:	330e      	adds	r3, #14
 8017ed2:	4619      	mov	r1, r3
 8017ed4:	6878      	ldr	r0, [r7, #4]
 8017ed6:	f7f5 ff59 	bl	800dd8c <pbuf_remove_header>
 8017eda:	4603      	mov	r3, r0
 8017edc:	2b00      	cmp	r3, #0
 8017ede:	d006      	beq.n	8017eee <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8017ee0:	4b37      	ldr	r3, [pc, #220]	; (8017fc0 <icmp_input+0x230>)
 8017ee2:	22c7      	movs	r2, #199	; 0xc7
 8017ee4:	4939      	ldr	r1, [pc, #228]	; (8017fcc <icmp_input+0x23c>)
 8017ee6:	4838      	ldr	r0, [pc, #224]	; (8017fc8 <icmp_input+0x238>)
 8017ee8:	f002 fc5c 	bl	801a7a4 <iprintf>
          goto icmperr;
 8017eec:	e05c      	b.n	8017fa8 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8017eee:	687b      	ldr	r3, [r7, #4]
 8017ef0:	685b      	ldr	r3, [r3, #4]
 8017ef2:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8017ef4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017ef6:	4619      	mov	r1, r3
 8017ef8:	6878      	ldr	r0, [r7, #4]
 8017efa:	f7f5 ff37 	bl	800dd6c <pbuf_add_header>
 8017efe:	4603      	mov	r3, r0
 8017f00:	2b00      	cmp	r3, #0
 8017f02:	d13c      	bne.n	8017f7e <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8017f04:	687b      	ldr	r3, [r7, #4]
 8017f06:	685b      	ldr	r3, [r3, #4]
 8017f08:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8017f0a:	69fb      	ldr	r3, [r7, #28]
 8017f0c:	681a      	ldr	r2, [r3, #0]
 8017f0e:	68fb      	ldr	r3, [r7, #12]
 8017f10:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8017f12:	4b29      	ldr	r3, [pc, #164]	; (8017fb8 <icmp_input+0x228>)
 8017f14:	691a      	ldr	r2, [r3, #16]
 8017f16:	68fb      	ldr	r3, [r7, #12]
 8017f18:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8017f1a:	693b      	ldr	r3, [r7, #16]
 8017f1c:	2200      	movs	r2, #0
 8017f1e:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8017f20:	693b      	ldr	r3, [r7, #16]
 8017f22:	885b      	ldrh	r3, [r3, #2]
 8017f24:	b29b      	uxth	r3, r3
 8017f26:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8017f2a:	4293      	cmp	r3, r2
 8017f2c:	d907      	bls.n	8017f3e <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8017f2e:	693b      	ldr	r3, [r7, #16]
 8017f30:	885b      	ldrh	r3, [r3, #2]
 8017f32:	b29b      	uxth	r3, r3
 8017f34:	3309      	adds	r3, #9
 8017f36:	b29a      	uxth	r2, r3
 8017f38:	693b      	ldr	r3, [r7, #16]
 8017f3a:	805a      	strh	r2, [r3, #2]
 8017f3c:	e006      	b.n	8017f4c <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 8017f3e:	693b      	ldr	r3, [r7, #16]
 8017f40:	885b      	ldrh	r3, [r3, #2]
 8017f42:	b29b      	uxth	r3, r3
 8017f44:	3308      	adds	r3, #8
 8017f46:	b29a      	uxth	r2, r3
 8017f48:	693b      	ldr	r3, [r7, #16]
 8017f4a:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8017f4c:	68fb      	ldr	r3, [r7, #12]
 8017f4e:	22ff      	movs	r2, #255	; 0xff
 8017f50:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8017f52:	68fb      	ldr	r3, [r7, #12]
 8017f54:	2200      	movs	r2, #0
 8017f56:	729a      	strb	r2, [r3, #10]
 8017f58:	2200      	movs	r2, #0
 8017f5a:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8017f5c:	683b      	ldr	r3, [r7, #0]
 8017f5e:	9302      	str	r3, [sp, #8]
 8017f60:	2301      	movs	r3, #1
 8017f62:	9301      	str	r3, [sp, #4]
 8017f64:	2300      	movs	r3, #0
 8017f66:	9300      	str	r3, [sp, #0]
 8017f68:	23ff      	movs	r3, #255	; 0xff
 8017f6a:	2200      	movs	r2, #0
 8017f6c:	69f9      	ldr	r1, [r7, #28]
 8017f6e:	6878      	ldr	r0, [r7, #4]
 8017f70:	f000 fa9c 	bl	80184ac <ip4_output_if>
 8017f74:	4603      	mov	r3, r0
 8017f76:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8017f78:	e001      	b.n	8017f7e <icmp_input+0x1ee>
      break;
 8017f7a:	bf00      	nop
 8017f7c:	e000      	b.n	8017f80 <icmp_input+0x1f0>
      break;
 8017f7e:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8017f80:	6878      	ldr	r0, [r7, #4]
 8017f82:	f7f5 ff89 	bl	800de98 <pbuf_free>
  return;
 8017f86:	e013      	b.n	8017fb0 <icmp_input+0x220>
    goto lenerr;
 8017f88:	bf00      	nop
 8017f8a:	e002      	b.n	8017f92 <icmp_input+0x202>
    goto lenerr;
 8017f8c:	bf00      	nop
 8017f8e:	e000      	b.n	8017f92 <icmp_input+0x202>
        goto lenerr;
 8017f90:	bf00      	nop
lenerr:
  pbuf_free(p);
 8017f92:	6878      	ldr	r0, [r7, #4]
 8017f94:	f7f5 ff80 	bl	800de98 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8017f98:	e00a      	b.n	8017fb0 <icmp_input+0x220>
        goto icmperr;
 8017f9a:	bf00      	nop
 8017f9c:	e004      	b.n	8017fa8 <icmp_input+0x218>
        goto icmperr;
 8017f9e:	bf00      	nop
 8017fa0:	e002      	b.n	8017fa8 <icmp_input+0x218>
          goto icmperr;
 8017fa2:	bf00      	nop
 8017fa4:	e000      	b.n	8017fa8 <icmp_input+0x218>
          goto icmperr;
 8017fa6:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8017fa8:	6878      	ldr	r0, [r7, #4]
 8017faa:	f7f5 ff75 	bl	800de98 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8017fae:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8017fb0:	3728      	adds	r7, #40	; 0x28
 8017fb2:	46bd      	mov	sp, r7
 8017fb4:	bd80      	pop	{r7, pc}
 8017fb6:	bf00      	nop
 8017fb8:	20008e00 	.word	0x20008e00
 8017fbc:	20008e14 	.word	0x20008e14
 8017fc0:	0801e598 	.word	0x0801e598
 8017fc4:	0801e5d0 	.word	0x0801e5d0
 8017fc8:	0801e608 	.word	0x0801e608
 8017fcc:	0801e630 	.word	0x0801e630

08017fd0 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8017fd0:	b580      	push	{r7, lr}
 8017fd2:	b082      	sub	sp, #8
 8017fd4:	af00      	add	r7, sp, #0
 8017fd6:	6078      	str	r0, [r7, #4]
 8017fd8:	460b      	mov	r3, r1
 8017fda:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8017fdc:	78fb      	ldrb	r3, [r7, #3]
 8017fde:	461a      	mov	r2, r3
 8017fe0:	2103      	movs	r1, #3
 8017fe2:	6878      	ldr	r0, [r7, #4]
 8017fe4:	f000 f814 	bl	8018010 <icmp_send_response>
}
 8017fe8:	bf00      	nop
 8017fea:	3708      	adds	r7, #8
 8017fec:	46bd      	mov	sp, r7
 8017fee:	bd80      	pop	{r7, pc}

08017ff0 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8017ff0:	b580      	push	{r7, lr}
 8017ff2:	b082      	sub	sp, #8
 8017ff4:	af00      	add	r7, sp, #0
 8017ff6:	6078      	str	r0, [r7, #4]
 8017ff8:	460b      	mov	r3, r1
 8017ffa:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8017ffc:	78fb      	ldrb	r3, [r7, #3]
 8017ffe:	461a      	mov	r2, r3
 8018000:	210b      	movs	r1, #11
 8018002:	6878      	ldr	r0, [r7, #4]
 8018004:	f000 f804 	bl	8018010 <icmp_send_response>
}
 8018008:	bf00      	nop
 801800a:	3708      	adds	r7, #8
 801800c:	46bd      	mov	sp, r7
 801800e:	bd80      	pop	{r7, pc}

08018010 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8018010:	b580      	push	{r7, lr}
 8018012:	b08c      	sub	sp, #48	; 0x30
 8018014:	af04      	add	r7, sp, #16
 8018016:	6078      	str	r0, [r7, #4]
 8018018:	460b      	mov	r3, r1
 801801a:	70fb      	strb	r3, [r7, #3]
 801801c:	4613      	mov	r3, r2
 801801e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8018020:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018024:	2124      	movs	r1, #36	; 0x24
 8018026:	2022      	movs	r0, #34	; 0x22
 8018028:	f7f5 fc52 	bl	800d8d0 <pbuf_alloc>
 801802c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801802e:	69fb      	ldr	r3, [r7, #28]
 8018030:	2b00      	cmp	r3, #0
 8018032:	d056      	beq.n	80180e2 <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8018034:	69fb      	ldr	r3, [r7, #28]
 8018036:	895b      	ldrh	r3, [r3, #10]
 8018038:	2b23      	cmp	r3, #35	; 0x23
 801803a:	d806      	bhi.n	801804a <icmp_send_response+0x3a>
 801803c:	4b2b      	ldr	r3, [pc, #172]	; (80180ec <icmp_send_response+0xdc>)
 801803e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8018042:	492b      	ldr	r1, [pc, #172]	; (80180f0 <icmp_send_response+0xe0>)
 8018044:	482b      	ldr	r0, [pc, #172]	; (80180f4 <icmp_send_response+0xe4>)
 8018046:	f002 fbad 	bl	801a7a4 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801804a:	687b      	ldr	r3, [r7, #4]
 801804c:	685b      	ldr	r3, [r3, #4]
 801804e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8018050:	69fb      	ldr	r3, [r7, #28]
 8018052:	685b      	ldr	r3, [r3, #4]
 8018054:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8018056:	697b      	ldr	r3, [r7, #20]
 8018058:	78fa      	ldrb	r2, [r7, #3]
 801805a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801805c:	697b      	ldr	r3, [r7, #20]
 801805e:	78ba      	ldrb	r2, [r7, #2]
 8018060:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8018062:	697b      	ldr	r3, [r7, #20]
 8018064:	2200      	movs	r2, #0
 8018066:	711a      	strb	r2, [r3, #4]
 8018068:	2200      	movs	r2, #0
 801806a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801806c:	697b      	ldr	r3, [r7, #20]
 801806e:	2200      	movs	r2, #0
 8018070:	719a      	strb	r2, [r3, #6]
 8018072:	2200      	movs	r2, #0
 8018074:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8018076:	69fb      	ldr	r3, [r7, #28]
 8018078:	685b      	ldr	r3, [r3, #4]
 801807a:	f103 0008 	add.w	r0, r3, #8
 801807e:	687b      	ldr	r3, [r7, #4]
 8018080:	685b      	ldr	r3, [r3, #4]
 8018082:	221c      	movs	r2, #28
 8018084:	4619      	mov	r1, r3
 8018086:	f002 fa99 	bl	801a5bc <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801808a:	69bb      	ldr	r3, [r7, #24]
 801808c:	68db      	ldr	r3, [r3, #12]
 801808e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8018090:	f107 030c 	add.w	r3, r7, #12
 8018094:	4618      	mov	r0, r3
 8018096:	f000 f82f 	bl	80180f8 <ip4_route>
 801809a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801809c:	693b      	ldr	r3, [r7, #16]
 801809e:	2b00      	cmp	r3, #0
 80180a0:	d01b      	beq.n	80180da <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80180a2:	697b      	ldr	r3, [r7, #20]
 80180a4:	2200      	movs	r2, #0
 80180a6:	709a      	strb	r2, [r3, #2]
 80180a8:	2200      	movs	r2, #0
 80180aa:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 80180ac:	69fb      	ldr	r3, [r7, #28]
 80180ae:	895b      	ldrh	r3, [r3, #10]
 80180b0:	4619      	mov	r1, r3
 80180b2:	6978      	ldr	r0, [r7, #20]
 80180b4:	f7f4 fb14 	bl	800c6e0 <inet_chksum>
 80180b8:	4603      	mov	r3, r0
 80180ba:	461a      	mov	r2, r3
 80180bc:	697b      	ldr	r3, [r7, #20]
 80180be:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80180c0:	f107 020c 	add.w	r2, r7, #12
 80180c4:	693b      	ldr	r3, [r7, #16]
 80180c6:	9302      	str	r3, [sp, #8]
 80180c8:	2301      	movs	r3, #1
 80180ca:	9301      	str	r3, [sp, #4]
 80180cc:	2300      	movs	r3, #0
 80180ce:	9300      	str	r3, [sp, #0]
 80180d0:	23ff      	movs	r3, #255	; 0xff
 80180d2:	2100      	movs	r1, #0
 80180d4:	69f8      	ldr	r0, [r7, #28]
 80180d6:	f000 f9e9 	bl	80184ac <ip4_output_if>
  }
  pbuf_free(q);
 80180da:	69f8      	ldr	r0, [r7, #28]
 80180dc:	f7f5 fedc 	bl	800de98 <pbuf_free>
 80180e0:	e000      	b.n	80180e4 <icmp_send_response+0xd4>
    return;
 80180e2:	bf00      	nop
}
 80180e4:	3720      	adds	r7, #32
 80180e6:	46bd      	mov	sp, r7
 80180e8:	bd80      	pop	{r7, pc}
 80180ea:	bf00      	nop
 80180ec:	0801e598 	.word	0x0801e598
 80180f0:	0801e664 	.word	0x0801e664
 80180f4:	0801e608 	.word	0x0801e608

080180f8 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80180f8:	b480      	push	{r7}
 80180fa:	b085      	sub	sp, #20
 80180fc:	af00      	add	r7, sp, #0
 80180fe:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8018100:	4b32      	ldr	r3, [pc, #200]	; (80181cc <ip4_route+0xd4>)
 8018102:	681b      	ldr	r3, [r3, #0]
 8018104:	60fb      	str	r3, [r7, #12]
 8018106:	e036      	b.n	8018176 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8018108:	68fb      	ldr	r3, [r7, #12]
 801810a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801810e:	f003 0301 	and.w	r3, r3, #1
 8018112:	b2db      	uxtb	r3, r3
 8018114:	2b00      	cmp	r3, #0
 8018116:	d02b      	beq.n	8018170 <ip4_route+0x78>
 8018118:	68fb      	ldr	r3, [r7, #12]
 801811a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801811e:	089b      	lsrs	r3, r3, #2
 8018120:	f003 0301 	and.w	r3, r3, #1
 8018124:	b2db      	uxtb	r3, r3
 8018126:	2b00      	cmp	r3, #0
 8018128:	d022      	beq.n	8018170 <ip4_route+0x78>
 801812a:	68fb      	ldr	r3, [r7, #12]
 801812c:	3304      	adds	r3, #4
 801812e:	681b      	ldr	r3, [r3, #0]
 8018130:	2b00      	cmp	r3, #0
 8018132:	d01d      	beq.n	8018170 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8018134:	687b      	ldr	r3, [r7, #4]
 8018136:	681a      	ldr	r2, [r3, #0]
 8018138:	68fb      	ldr	r3, [r7, #12]
 801813a:	3304      	adds	r3, #4
 801813c:	681b      	ldr	r3, [r3, #0]
 801813e:	405a      	eors	r2, r3
 8018140:	68fb      	ldr	r3, [r7, #12]
 8018142:	3308      	adds	r3, #8
 8018144:	681b      	ldr	r3, [r3, #0]
 8018146:	4013      	ands	r3, r2
 8018148:	2b00      	cmp	r3, #0
 801814a:	d101      	bne.n	8018150 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801814c:	68fb      	ldr	r3, [r7, #12]
 801814e:	e038      	b.n	80181c2 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8018150:	68fb      	ldr	r3, [r7, #12]
 8018152:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018156:	f003 0302 	and.w	r3, r3, #2
 801815a:	2b00      	cmp	r3, #0
 801815c:	d108      	bne.n	8018170 <ip4_route+0x78>
 801815e:	687b      	ldr	r3, [r7, #4]
 8018160:	681a      	ldr	r2, [r3, #0]
 8018162:	68fb      	ldr	r3, [r7, #12]
 8018164:	330c      	adds	r3, #12
 8018166:	681b      	ldr	r3, [r3, #0]
 8018168:	429a      	cmp	r2, r3
 801816a:	d101      	bne.n	8018170 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801816c:	68fb      	ldr	r3, [r7, #12]
 801816e:	e028      	b.n	80181c2 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8018170:	68fb      	ldr	r3, [r7, #12]
 8018172:	681b      	ldr	r3, [r3, #0]
 8018174:	60fb      	str	r3, [r7, #12]
 8018176:	68fb      	ldr	r3, [r7, #12]
 8018178:	2b00      	cmp	r3, #0
 801817a:	d1c5      	bne.n	8018108 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801817c:	4b14      	ldr	r3, [pc, #80]	; (80181d0 <ip4_route+0xd8>)
 801817e:	681b      	ldr	r3, [r3, #0]
 8018180:	2b00      	cmp	r3, #0
 8018182:	d01a      	beq.n	80181ba <ip4_route+0xc2>
 8018184:	4b12      	ldr	r3, [pc, #72]	; (80181d0 <ip4_route+0xd8>)
 8018186:	681b      	ldr	r3, [r3, #0]
 8018188:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801818c:	f003 0301 	and.w	r3, r3, #1
 8018190:	2b00      	cmp	r3, #0
 8018192:	d012      	beq.n	80181ba <ip4_route+0xc2>
 8018194:	4b0e      	ldr	r3, [pc, #56]	; (80181d0 <ip4_route+0xd8>)
 8018196:	681b      	ldr	r3, [r3, #0]
 8018198:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801819c:	f003 0304 	and.w	r3, r3, #4
 80181a0:	2b00      	cmp	r3, #0
 80181a2:	d00a      	beq.n	80181ba <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80181a4:	4b0a      	ldr	r3, [pc, #40]	; (80181d0 <ip4_route+0xd8>)
 80181a6:	681b      	ldr	r3, [r3, #0]
 80181a8:	3304      	adds	r3, #4
 80181aa:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80181ac:	2b00      	cmp	r3, #0
 80181ae:	d004      	beq.n	80181ba <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80181b0:	687b      	ldr	r3, [r7, #4]
 80181b2:	681b      	ldr	r3, [r3, #0]
 80181b4:	b2db      	uxtb	r3, r3
 80181b6:	2b7f      	cmp	r3, #127	; 0x7f
 80181b8:	d101      	bne.n	80181be <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80181ba:	2300      	movs	r3, #0
 80181bc:	e001      	b.n	80181c2 <ip4_route+0xca>
  }

  return netif_default;
 80181be:	4b04      	ldr	r3, [pc, #16]	; (80181d0 <ip4_route+0xd8>)
 80181c0:	681b      	ldr	r3, [r3, #0]
}
 80181c2:	4618      	mov	r0, r3
 80181c4:	3714      	adds	r7, #20
 80181c6:	46bd      	mov	sp, r7
 80181c8:	bc80      	pop	{r7}
 80181ca:	4770      	bx	lr
 80181cc:	2000bf14 	.word	0x2000bf14
 80181d0:	2000bf18 	.word	0x2000bf18

080181d4 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80181d4:	b580      	push	{r7, lr}
 80181d6:	b082      	sub	sp, #8
 80181d8:	af00      	add	r7, sp, #0
 80181da:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80181dc:	687b      	ldr	r3, [r7, #4]
 80181de:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80181e2:	f003 0301 	and.w	r3, r3, #1
 80181e6:	b2db      	uxtb	r3, r3
 80181e8:	2b00      	cmp	r3, #0
 80181ea:	d016      	beq.n	801821a <ip4_input_accept+0x46>
 80181ec:	687b      	ldr	r3, [r7, #4]
 80181ee:	3304      	adds	r3, #4
 80181f0:	681b      	ldr	r3, [r3, #0]
 80181f2:	2b00      	cmp	r3, #0
 80181f4:	d011      	beq.n	801821a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80181f6:	4b0b      	ldr	r3, [pc, #44]	; (8018224 <ip4_input_accept+0x50>)
 80181f8:	695a      	ldr	r2, [r3, #20]
 80181fa:	687b      	ldr	r3, [r7, #4]
 80181fc:	3304      	adds	r3, #4
 80181fe:	681b      	ldr	r3, [r3, #0]
 8018200:	429a      	cmp	r2, r3
 8018202:	d008      	beq.n	8018216 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8018204:	4b07      	ldr	r3, [pc, #28]	; (8018224 <ip4_input_accept+0x50>)
 8018206:	695b      	ldr	r3, [r3, #20]
 8018208:	6879      	ldr	r1, [r7, #4]
 801820a:	4618      	mov	r0, r3
 801820c:	f000 fa26 	bl	801865c <ip4_addr_isbroadcast_u32>
 8018210:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8018212:	2b00      	cmp	r3, #0
 8018214:	d001      	beq.n	801821a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8018216:	2301      	movs	r3, #1
 8018218:	e000      	b.n	801821c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801821a:	2300      	movs	r3, #0
}
 801821c:	4618      	mov	r0, r3
 801821e:	3708      	adds	r7, #8
 8018220:	46bd      	mov	sp, r7
 8018222:	bd80      	pop	{r7, pc}
 8018224:	20008e00 	.word	0x20008e00

08018228 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8018228:	b580      	push	{r7, lr}
 801822a:	b088      	sub	sp, #32
 801822c:	af00      	add	r7, sp, #0
 801822e:	6078      	str	r0, [r7, #4]
 8018230:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8018232:	2301      	movs	r3, #1
 8018234:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8018236:	687b      	ldr	r3, [r7, #4]
 8018238:	685b      	ldr	r3, [r3, #4]
 801823a:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 801823c:	69fb      	ldr	r3, [r7, #28]
 801823e:	781b      	ldrb	r3, [r3, #0]
 8018240:	091b      	lsrs	r3, r3, #4
 8018242:	b2db      	uxtb	r3, r3
 8018244:	2b04      	cmp	r3, #4
 8018246:	d004      	beq.n	8018252 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8018248:	6878      	ldr	r0, [r7, #4]
 801824a:	f7f5 fe25 	bl	800de98 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801824e:	2300      	movs	r3, #0
 8018250:	e123      	b.n	801849a <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8018252:	69fb      	ldr	r3, [r7, #28]
 8018254:	781b      	ldrb	r3, [r3, #0]
 8018256:	f003 030f 	and.w	r3, r3, #15
 801825a:	b2db      	uxtb	r3, r3
 801825c:	009b      	lsls	r3, r3, #2
 801825e:	b2db      	uxtb	r3, r3
 8018260:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8018262:	69fb      	ldr	r3, [r7, #28]
 8018264:	885b      	ldrh	r3, [r3, #2]
 8018266:	b29b      	uxth	r3, r3
 8018268:	4618      	mov	r0, r3
 801826a:	f7f4 f9b1 	bl	800c5d0 <lwip_htons>
 801826e:	4603      	mov	r3, r0
 8018270:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8018272:	687b      	ldr	r3, [r7, #4]
 8018274:	891b      	ldrh	r3, [r3, #8]
 8018276:	8a3a      	ldrh	r2, [r7, #16]
 8018278:	429a      	cmp	r2, r3
 801827a:	d204      	bcs.n	8018286 <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 801827c:	8a3b      	ldrh	r3, [r7, #16]
 801827e:	4619      	mov	r1, r3
 8018280:	6878      	ldr	r0, [r7, #4]
 8018282:	f7f5 fc83 	bl	800db8c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8018286:	687b      	ldr	r3, [r7, #4]
 8018288:	895b      	ldrh	r3, [r3, #10]
 801828a:	8a7a      	ldrh	r2, [r7, #18]
 801828c:	429a      	cmp	r2, r3
 801828e:	d807      	bhi.n	80182a0 <ip4_input+0x78>
 8018290:	687b      	ldr	r3, [r7, #4]
 8018292:	891b      	ldrh	r3, [r3, #8]
 8018294:	8a3a      	ldrh	r2, [r7, #16]
 8018296:	429a      	cmp	r2, r3
 8018298:	d802      	bhi.n	80182a0 <ip4_input+0x78>
 801829a:	8a7b      	ldrh	r3, [r7, #18]
 801829c:	2b13      	cmp	r3, #19
 801829e:	d804      	bhi.n	80182aa <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80182a0:	6878      	ldr	r0, [r7, #4]
 80182a2:	f7f5 fdf9 	bl	800de98 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80182a6:	2300      	movs	r3, #0
 80182a8:	e0f7      	b.n	801849a <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80182aa:	69fb      	ldr	r3, [r7, #28]
 80182ac:	691b      	ldr	r3, [r3, #16]
 80182ae:	4a7d      	ldr	r2, [pc, #500]	; (80184a4 <ip4_input+0x27c>)
 80182b0:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80182b2:	69fb      	ldr	r3, [r7, #28]
 80182b4:	68db      	ldr	r3, [r3, #12]
 80182b6:	4a7b      	ldr	r2, [pc, #492]	; (80184a4 <ip4_input+0x27c>)
 80182b8:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80182ba:	4b7a      	ldr	r3, [pc, #488]	; (80184a4 <ip4_input+0x27c>)
 80182bc:	695b      	ldr	r3, [r3, #20]
 80182be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80182c2:	2be0      	cmp	r3, #224	; 0xe0
 80182c4:	d112      	bne.n	80182ec <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80182c6:	683b      	ldr	r3, [r7, #0]
 80182c8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80182cc:	f003 0301 	and.w	r3, r3, #1
 80182d0:	b2db      	uxtb	r3, r3
 80182d2:	2b00      	cmp	r3, #0
 80182d4:	d007      	beq.n	80182e6 <ip4_input+0xbe>
 80182d6:	683b      	ldr	r3, [r7, #0]
 80182d8:	3304      	adds	r3, #4
 80182da:	681b      	ldr	r3, [r3, #0]
 80182dc:	2b00      	cmp	r3, #0
 80182de:	d002      	beq.n	80182e6 <ip4_input+0xbe>
      netif = inp;
 80182e0:	683b      	ldr	r3, [r7, #0]
 80182e2:	61bb      	str	r3, [r7, #24]
 80182e4:	e02a      	b.n	801833c <ip4_input+0x114>
    } else {
      netif = NULL;
 80182e6:	2300      	movs	r3, #0
 80182e8:	61bb      	str	r3, [r7, #24]
 80182ea:	e027      	b.n	801833c <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80182ec:	6838      	ldr	r0, [r7, #0]
 80182ee:	f7ff ff71 	bl	80181d4 <ip4_input_accept>
 80182f2:	4603      	mov	r3, r0
 80182f4:	2b00      	cmp	r3, #0
 80182f6:	d002      	beq.n	80182fe <ip4_input+0xd6>
      netif = inp;
 80182f8:	683b      	ldr	r3, [r7, #0]
 80182fa:	61bb      	str	r3, [r7, #24]
 80182fc:	e01e      	b.n	801833c <ip4_input+0x114>
    } else {
      netif = NULL;
 80182fe:	2300      	movs	r3, #0
 8018300:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8018302:	4b68      	ldr	r3, [pc, #416]	; (80184a4 <ip4_input+0x27c>)
 8018304:	695b      	ldr	r3, [r3, #20]
 8018306:	b2db      	uxtb	r3, r3
 8018308:	2b7f      	cmp	r3, #127	; 0x7f
 801830a:	d017      	beq.n	801833c <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801830c:	4b66      	ldr	r3, [pc, #408]	; (80184a8 <ip4_input+0x280>)
 801830e:	681b      	ldr	r3, [r3, #0]
 8018310:	61bb      	str	r3, [r7, #24]
 8018312:	e00e      	b.n	8018332 <ip4_input+0x10a>
          if (netif == inp) {
 8018314:	69ba      	ldr	r2, [r7, #24]
 8018316:	683b      	ldr	r3, [r7, #0]
 8018318:	429a      	cmp	r2, r3
 801831a:	d006      	beq.n	801832a <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801831c:	69b8      	ldr	r0, [r7, #24]
 801831e:	f7ff ff59 	bl	80181d4 <ip4_input_accept>
 8018322:	4603      	mov	r3, r0
 8018324:	2b00      	cmp	r3, #0
 8018326:	d108      	bne.n	801833a <ip4_input+0x112>
 8018328:	e000      	b.n	801832c <ip4_input+0x104>
            continue;
 801832a:	bf00      	nop
        NETIF_FOREACH(netif) {
 801832c:	69bb      	ldr	r3, [r7, #24]
 801832e:	681b      	ldr	r3, [r3, #0]
 8018330:	61bb      	str	r3, [r7, #24]
 8018332:	69bb      	ldr	r3, [r7, #24]
 8018334:	2b00      	cmp	r3, #0
 8018336:	d1ed      	bne.n	8018314 <ip4_input+0xec>
 8018338:	e000      	b.n	801833c <ip4_input+0x114>
            break;
 801833a:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 801833c:	69bb      	ldr	r3, [r7, #24]
 801833e:	2b00      	cmp	r3, #0
 8018340:	d111      	bne.n	8018366 <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8018342:	69fb      	ldr	r3, [r7, #28]
 8018344:	7a5b      	ldrb	r3, [r3, #9]
 8018346:	2b11      	cmp	r3, #17
 8018348:	d10d      	bne.n	8018366 <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 801834a:	8a7b      	ldrh	r3, [r7, #18]
 801834c:	69fa      	ldr	r2, [r7, #28]
 801834e:	4413      	add	r3, r2
 8018350:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8018352:	68fb      	ldr	r3, [r7, #12]
 8018354:	885b      	ldrh	r3, [r3, #2]
 8018356:	b29b      	uxth	r3, r3
 8018358:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 801835c:	d103      	bne.n	8018366 <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 801835e:	683b      	ldr	r3, [r7, #0]
 8018360:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 8018362:	2300      	movs	r3, #0
 8018364:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8018366:	697b      	ldr	r3, [r7, #20]
 8018368:	2b00      	cmp	r3, #0
 801836a:	d017      	beq.n	801839c <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 801836c:	4b4d      	ldr	r3, [pc, #308]	; (80184a4 <ip4_input+0x27c>)
 801836e:	691b      	ldr	r3, [r3, #16]
 8018370:	2b00      	cmp	r3, #0
 8018372:	d013      	beq.n	801839c <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8018374:	4b4b      	ldr	r3, [pc, #300]	; (80184a4 <ip4_input+0x27c>)
 8018376:	691b      	ldr	r3, [r3, #16]
 8018378:	6839      	ldr	r1, [r7, #0]
 801837a:	4618      	mov	r0, r3
 801837c:	f000 f96e 	bl	801865c <ip4_addr_isbroadcast_u32>
 8018380:	4603      	mov	r3, r0
 8018382:	2b00      	cmp	r3, #0
 8018384:	d105      	bne.n	8018392 <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8018386:	4b47      	ldr	r3, [pc, #284]	; (80184a4 <ip4_input+0x27c>)
 8018388:	691b      	ldr	r3, [r3, #16]
 801838a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801838e:	2be0      	cmp	r3, #224	; 0xe0
 8018390:	d104      	bne.n	801839c <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8018392:	6878      	ldr	r0, [r7, #4]
 8018394:	f7f5 fd80 	bl	800de98 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8018398:	2300      	movs	r3, #0
 801839a:	e07e      	b.n	801849a <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801839c:	69bb      	ldr	r3, [r7, #24]
 801839e:	2b00      	cmp	r3, #0
 80183a0:	d104      	bne.n	80183ac <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80183a2:	6878      	ldr	r0, [r7, #4]
 80183a4:	f7f5 fd78 	bl	800de98 <pbuf_free>
    return ERR_OK;
 80183a8:	2300      	movs	r3, #0
 80183aa:	e076      	b.n	801849a <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80183ac:	69fb      	ldr	r3, [r7, #28]
 80183ae:	88db      	ldrh	r3, [r3, #6]
 80183b0:	b29b      	uxth	r3, r3
 80183b2:	461a      	mov	r2, r3
 80183b4:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80183b8:	4013      	ands	r3, r2
 80183ba:	2b00      	cmp	r3, #0
 80183bc:	d00b      	beq.n	80183d6 <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80183be:	6878      	ldr	r0, [r7, #4]
 80183c0:	f000 fc90 	bl	8018ce4 <ip4_reass>
 80183c4:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80183c6:	687b      	ldr	r3, [r7, #4]
 80183c8:	2b00      	cmp	r3, #0
 80183ca:	d101      	bne.n	80183d0 <ip4_input+0x1a8>
      return ERR_OK;
 80183cc:	2300      	movs	r3, #0
 80183ce:	e064      	b.n	801849a <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80183d0:	687b      	ldr	r3, [r7, #4]
 80183d2:	685b      	ldr	r3, [r3, #4]
 80183d4:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80183d6:	4a33      	ldr	r2, [pc, #204]	; (80184a4 <ip4_input+0x27c>)
 80183d8:	69bb      	ldr	r3, [r7, #24]
 80183da:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80183dc:	4a31      	ldr	r2, [pc, #196]	; (80184a4 <ip4_input+0x27c>)
 80183de:	683b      	ldr	r3, [r7, #0]
 80183e0:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80183e2:	4a30      	ldr	r2, [pc, #192]	; (80184a4 <ip4_input+0x27c>)
 80183e4:	69fb      	ldr	r3, [r7, #28]
 80183e6:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80183e8:	69fb      	ldr	r3, [r7, #28]
 80183ea:	781b      	ldrb	r3, [r3, #0]
 80183ec:	f003 030f 	and.w	r3, r3, #15
 80183f0:	b2db      	uxtb	r3, r3
 80183f2:	009b      	lsls	r3, r3, #2
 80183f4:	b2db      	uxtb	r3, r3
 80183f6:	b29a      	uxth	r2, r3
 80183f8:	4b2a      	ldr	r3, [pc, #168]	; (80184a4 <ip4_input+0x27c>)
 80183fa:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80183fc:	8a7b      	ldrh	r3, [r7, #18]
 80183fe:	4619      	mov	r1, r3
 8018400:	6878      	ldr	r0, [r7, #4]
 8018402:	f7f5 fcc3 	bl	800dd8c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8018406:	69fb      	ldr	r3, [r7, #28]
 8018408:	7a5b      	ldrb	r3, [r3, #9]
 801840a:	2b11      	cmp	r3, #17
 801840c:	d006      	beq.n	801841c <ip4_input+0x1f4>
 801840e:	2b11      	cmp	r3, #17
 8018410:	dc13      	bgt.n	801843a <ip4_input+0x212>
 8018412:	2b01      	cmp	r3, #1
 8018414:	d00c      	beq.n	8018430 <ip4_input+0x208>
 8018416:	2b06      	cmp	r3, #6
 8018418:	d005      	beq.n	8018426 <ip4_input+0x1fe>
 801841a:	e00e      	b.n	801843a <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801841c:	6839      	ldr	r1, [r7, #0]
 801841e:	6878      	ldr	r0, [r7, #4]
 8018420:	f7fc fb04 	bl	8014a2c <udp_input>
        break;
 8018424:	e026      	b.n	8018474 <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8018426:	6839      	ldr	r1, [r7, #0]
 8018428:	6878      	ldr	r0, [r7, #4]
 801842a:	f7f7 fe83 	bl	8010134 <tcp_input>
        break;
 801842e:	e021      	b.n	8018474 <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8018430:	6839      	ldr	r1, [r7, #0]
 8018432:	6878      	ldr	r0, [r7, #4]
 8018434:	f7ff fcac 	bl	8017d90 <icmp_input>
        break;
 8018438:	e01c      	b.n	8018474 <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801843a:	4b1a      	ldr	r3, [pc, #104]	; (80184a4 <ip4_input+0x27c>)
 801843c:	695b      	ldr	r3, [r3, #20]
 801843e:	69b9      	ldr	r1, [r7, #24]
 8018440:	4618      	mov	r0, r3
 8018442:	f000 f90b 	bl	801865c <ip4_addr_isbroadcast_u32>
 8018446:	4603      	mov	r3, r0
 8018448:	2b00      	cmp	r3, #0
 801844a:	d10f      	bne.n	801846c <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801844c:	4b15      	ldr	r3, [pc, #84]	; (80184a4 <ip4_input+0x27c>)
 801844e:	695b      	ldr	r3, [r3, #20]
 8018450:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8018454:	2be0      	cmp	r3, #224	; 0xe0
 8018456:	d009      	beq.n	801846c <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8018458:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801845c:	4619      	mov	r1, r3
 801845e:	6878      	ldr	r0, [r7, #4]
 8018460:	f7f5 fd07 	bl	800de72 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8018464:	2102      	movs	r1, #2
 8018466:	6878      	ldr	r0, [r7, #4]
 8018468:	f7ff fdb2 	bl	8017fd0 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801846c:	6878      	ldr	r0, [r7, #4]
 801846e:	f7f5 fd13 	bl	800de98 <pbuf_free>
        break;
 8018472:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8018474:	4b0b      	ldr	r3, [pc, #44]	; (80184a4 <ip4_input+0x27c>)
 8018476:	2200      	movs	r2, #0
 8018478:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801847a:	4b0a      	ldr	r3, [pc, #40]	; (80184a4 <ip4_input+0x27c>)
 801847c:	2200      	movs	r2, #0
 801847e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8018480:	4b08      	ldr	r3, [pc, #32]	; (80184a4 <ip4_input+0x27c>)
 8018482:	2200      	movs	r2, #0
 8018484:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8018486:	4b07      	ldr	r3, [pc, #28]	; (80184a4 <ip4_input+0x27c>)
 8018488:	2200      	movs	r2, #0
 801848a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801848c:	4b05      	ldr	r3, [pc, #20]	; (80184a4 <ip4_input+0x27c>)
 801848e:	2200      	movs	r2, #0
 8018490:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8018492:	4b04      	ldr	r3, [pc, #16]	; (80184a4 <ip4_input+0x27c>)
 8018494:	2200      	movs	r2, #0
 8018496:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8018498:	2300      	movs	r3, #0
}
 801849a:	4618      	mov	r0, r3
 801849c:	3720      	adds	r7, #32
 801849e:	46bd      	mov	sp, r7
 80184a0:	bd80      	pop	{r7, pc}
 80184a2:	bf00      	nop
 80184a4:	20008e00 	.word	0x20008e00
 80184a8:	2000bf14 	.word	0x2000bf14

080184ac <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80184ac:	b580      	push	{r7, lr}
 80184ae:	b08a      	sub	sp, #40	; 0x28
 80184b0:	af04      	add	r7, sp, #16
 80184b2:	60f8      	str	r0, [r7, #12]
 80184b4:	60b9      	str	r1, [r7, #8]
 80184b6:	607a      	str	r2, [r7, #4]
 80184b8:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80184ba:	68bb      	ldr	r3, [r7, #8]
 80184bc:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80184be:	687b      	ldr	r3, [r7, #4]
 80184c0:	2b00      	cmp	r3, #0
 80184c2:	d009      	beq.n	80184d8 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80184c4:	68bb      	ldr	r3, [r7, #8]
 80184c6:	2b00      	cmp	r3, #0
 80184c8:	d003      	beq.n	80184d2 <ip4_output_if+0x26>
 80184ca:	68bb      	ldr	r3, [r7, #8]
 80184cc:	681b      	ldr	r3, [r3, #0]
 80184ce:	2b00      	cmp	r3, #0
 80184d0:	d102      	bne.n	80184d8 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80184d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80184d4:	3304      	adds	r3, #4
 80184d6:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80184d8:	78fa      	ldrb	r2, [r7, #3]
 80184da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80184dc:	9302      	str	r3, [sp, #8]
 80184de:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80184e2:	9301      	str	r3, [sp, #4]
 80184e4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80184e8:	9300      	str	r3, [sp, #0]
 80184ea:	4613      	mov	r3, r2
 80184ec:	687a      	ldr	r2, [r7, #4]
 80184ee:	6979      	ldr	r1, [r7, #20]
 80184f0:	68f8      	ldr	r0, [r7, #12]
 80184f2:	f000 f805 	bl	8018500 <ip4_output_if_src>
 80184f6:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80184f8:	4618      	mov	r0, r3
 80184fa:	3718      	adds	r7, #24
 80184fc:	46bd      	mov	sp, r7
 80184fe:	bd80      	pop	{r7, pc}

08018500 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8018500:	b580      	push	{r7, lr}
 8018502:	b088      	sub	sp, #32
 8018504:	af00      	add	r7, sp, #0
 8018506:	60f8      	str	r0, [r7, #12]
 8018508:	60b9      	str	r1, [r7, #8]
 801850a:	607a      	str	r2, [r7, #4]
 801850c:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801850e:	68fb      	ldr	r3, [r7, #12]
 8018510:	7b9b      	ldrb	r3, [r3, #14]
 8018512:	2b01      	cmp	r3, #1
 8018514:	d006      	beq.n	8018524 <ip4_output_if_src+0x24>
 8018516:	4b4b      	ldr	r3, [pc, #300]	; (8018644 <ip4_output_if_src+0x144>)
 8018518:	f44f 7255 	mov.w	r2, #852	; 0x354
 801851c:	494a      	ldr	r1, [pc, #296]	; (8018648 <ip4_output_if_src+0x148>)
 801851e:	484b      	ldr	r0, [pc, #300]	; (801864c <ip4_output_if_src+0x14c>)
 8018520:	f002 f940 	bl	801a7a4 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8018524:	687b      	ldr	r3, [r7, #4]
 8018526:	2b00      	cmp	r3, #0
 8018528:	d060      	beq.n	80185ec <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801852a:	2314      	movs	r3, #20
 801852c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801852e:	2114      	movs	r1, #20
 8018530:	68f8      	ldr	r0, [r7, #12]
 8018532:	f7f5 fc1b 	bl	800dd6c <pbuf_add_header>
 8018536:	4603      	mov	r3, r0
 8018538:	2b00      	cmp	r3, #0
 801853a:	d002      	beq.n	8018542 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801853c:	f06f 0301 	mvn.w	r3, #1
 8018540:	e07c      	b.n	801863c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8018542:	68fb      	ldr	r3, [r7, #12]
 8018544:	685b      	ldr	r3, [r3, #4]
 8018546:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8018548:	68fb      	ldr	r3, [r7, #12]
 801854a:	895b      	ldrh	r3, [r3, #10]
 801854c:	2b13      	cmp	r3, #19
 801854e:	d806      	bhi.n	801855e <ip4_output_if_src+0x5e>
 8018550:	4b3c      	ldr	r3, [pc, #240]	; (8018644 <ip4_output_if_src+0x144>)
 8018552:	f44f 7262 	mov.w	r2, #904	; 0x388
 8018556:	493e      	ldr	r1, [pc, #248]	; (8018650 <ip4_output_if_src+0x150>)
 8018558:	483c      	ldr	r0, [pc, #240]	; (801864c <ip4_output_if_src+0x14c>)
 801855a:	f002 f923 	bl	801a7a4 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801855e:	69fb      	ldr	r3, [r7, #28]
 8018560:	78fa      	ldrb	r2, [r7, #3]
 8018562:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8018564:	69fb      	ldr	r3, [r7, #28]
 8018566:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801856a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801856c:	687b      	ldr	r3, [r7, #4]
 801856e:	681a      	ldr	r2, [r3, #0]
 8018570:	69fb      	ldr	r3, [r7, #28]
 8018572:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8018574:	8b7b      	ldrh	r3, [r7, #26]
 8018576:	089b      	lsrs	r3, r3, #2
 8018578:	b29b      	uxth	r3, r3
 801857a:	b2db      	uxtb	r3, r3
 801857c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018580:	b2da      	uxtb	r2, r3
 8018582:	69fb      	ldr	r3, [r7, #28]
 8018584:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8018586:	69fb      	ldr	r3, [r7, #28]
 8018588:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801858c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801858e:	68fb      	ldr	r3, [r7, #12]
 8018590:	891b      	ldrh	r3, [r3, #8]
 8018592:	4618      	mov	r0, r3
 8018594:	f7f4 f81c 	bl	800c5d0 <lwip_htons>
 8018598:	4603      	mov	r3, r0
 801859a:	461a      	mov	r2, r3
 801859c:	69fb      	ldr	r3, [r7, #28]
 801859e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80185a0:	69fb      	ldr	r3, [r7, #28]
 80185a2:	2200      	movs	r2, #0
 80185a4:	719a      	strb	r2, [r3, #6]
 80185a6:	2200      	movs	r2, #0
 80185a8:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80185aa:	4b2a      	ldr	r3, [pc, #168]	; (8018654 <ip4_output_if_src+0x154>)
 80185ac:	881b      	ldrh	r3, [r3, #0]
 80185ae:	4618      	mov	r0, r3
 80185b0:	f7f4 f80e 	bl	800c5d0 <lwip_htons>
 80185b4:	4603      	mov	r3, r0
 80185b6:	461a      	mov	r2, r3
 80185b8:	69fb      	ldr	r3, [r7, #28]
 80185ba:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80185bc:	4b25      	ldr	r3, [pc, #148]	; (8018654 <ip4_output_if_src+0x154>)
 80185be:	881b      	ldrh	r3, [r3, #0]
 80185c0:	3301      	adds	r3, #1
 80185c2:	b29a      	uxth	r2, r3
 80185c4:	4b23      	ldr	r3, [pc, #140]	; (8018654 <ip4_output_if_src+0x154>)
 80185c6:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80185c8:	68bb      	ldr	r3, [r7, #8]
 80185ca:	2b00      	cmp	r3, #0
 80185cc:	d104      	bne.n	80185d8 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80185ce:	4b22      	ldr	r3, [pc, #136]	; (8018658 <ip4_output_if_src+0x158>)
 80185d0:	681a      	ldr	r2, [r3, #0]
 80185d2:	69fb      	ldr	r3, [r7, #28]
 80185d4:	60da      	str	r2, [r3, #12]
 80185d6:	e003      	b.n	80185e0 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80185d8:	68bb      	ldr	r3, [r7, #8]
 80185da:	681a      	ldr	r2, [r3, #0]
 80185dc:	69fb      	ldr	r3, [r7, #28]
 80185de:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80185e0:	69fb      	ldr	r3, [r7, #28]
 80185e2:	2200      	movs	r2, #0
 80185e4:	729a      	strb	r2, [r3, #10]
 80185e6:	2200      	movs	r2, #0
 80185e8:	72da      	strb	r2, [r3, #11]
 80185ea:	e00f      	b.n	801860c <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80185ec:	68fb      	ldr	r3, [r7, #12]
 80185ee:	895b      	ldrh	r3, [r3, #10]
 80185f0:	2b13      	cmp	r3, #19
 80185f2:	d802      	bhi.n	80185fa <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80185f4:	f06f 0301 	mvn.w	r3, #1
 80185f8:	e020      	b.n	801863c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80185fa:	68fb      	ldr	r3, [r7, #12]
 80185fc:	685b      	ldr	r3, [r3, #4]
 80185fe:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8018600:	69fb      	ldr	r3, [r7, #28]
 8018602:	691b      	ldr	r3, [r3, #16]
 8018604:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8018606:	f107 0314 	add.w	r3, r7, #20
 801860a:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801860c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801860e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018610:	2b00      	cmp	r3, #0
 8018612:	d00c      	beq.n	801862e <ip4_output_if_src+0x12e>
 8018614:	68fb      	ldr	r3, [r7, #12]
 8018616:	891a      	ldrh	r2, [r3, #8]
 8018618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801861a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801861c:	429a      	cmp	r2, r3
 801861e:	d906      	bls.n	801862e <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8018620:	687a      	ldr	r2, [r7, #4]
 8018622:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8018624:	68f8      	ldr	r0, [r7, #12]
 8018626:	f000 fd51 	bl	80190cc <ip4_frag>
 801862a:	4603      	mov	r3, r0
 801862c:	e006      	b.n	801863c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801862e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018630:	695b      	ldr	r3, [r3, #20]
 8018632:	687a      	ldr	r2, [r7, #4]
 8018634:	68f9      	ldr	r1, [r7, #12]
 8018636:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018638:	4798      	blx	r3
 801863a:	4603      	mov	r3, r0
}
 801863c:	4618      	mov	r0, r3
 801863e:	3720      	adds	r7, #32
 8018640:	46bd      	mov	sp, r7
 8018642:	bd80      	pop	{r7, pc}
 8018644:	0801e690 	.word	0x0801e690
 8018648:	0801e6c4 	.word	0x0801e6c4
 801864c:	0801e6d0 	.word	0x0801e6d0
 8018650:	0801e6f8 	.word	0x0801e6f8
 8018654:	2000c0a6 	.word	0x2000c0a6
 8018658:	0801eb7c 	.word	0x0801eb7c

0801865c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801865c:	b480      	push	{r7}
 801865e:	b085      	sub	sp, #20
 8018660:	af00      	add	r7, sp, #0
 8018662:	6078      	str	r0, [r7, #4]
 8018664:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8018666:	687b      	ldr	r3, [r7, #4]
 8018668:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801866a:	687b      	ldr	r3, [r7, #4]
 801866c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018670:	d002      	beq.n	8018678 <ip4_addr_isbroadcast_u32+0x1c>
 8018672:	687b      	ldr	r3, [r7, #4]
 8018674:	2b00      	cmp	r3, #0
 8018676:	d101      	bne.n	801867c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8018678:	2301      	movs	r3, #1
 801867a:	e02a      	b.n	80186d2 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801867c:	683b      	ldr	r3, [r7, #0]
 801867e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018682:	f003 0302 	and.w	r3, r3, #2
 8018686:	2b00      	cmp	r3, #0
 8018688:	d101      	bne.n	801868e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801868a:	2300      	movs	r3, #0
 801868c:	e021      	b.n	80186d2 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801868e:	683b      	ldr	r3, [r7, #0]
 8018690:	3304      	adds	r3, #4
 8018692:	681b      	ldr	r3, [r3, #0]
 8018694:	687a      	ldr	r2, [r7, #4]
 8018696:	429a      	cmp	r2, r3
 8018698:	d101      	bne.n	801869e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801869a:	2300      	movs	r3, #0
 801869c:	e019      	b.n	80186d2 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801869e:	68fa      	ldr	r2, [r7, #12]
 80186a0:	683b      	ldr	r3, [r7, #0]
 80186a2:	3304      	adds	r3, #4
 80186a4:	681b      	ldr	r3, [r3, #0]
 80186a6:	405a      	eors	r2, r3
 80186a8:	683b      	ldr	r3, [r7, #0]
 80186aa:	3308      	adds	r3, #8
 80186ac:	681b      	ldr	r3, [r3, #0]
 80186ae:	4013      	ands	r3, r2
 80186b0:	2b00      	cmp	r3, #0
 80186b2:	d10d      	bne.n	80186d0 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80186b4:	683b      	ldr	r3, [r7, #0]
 80186b6:	3308      	adds	r3, #8
 80186b8:	681b      	ldr	r3, [r3, #0]
 80186ba:	43da      	mvns	r2, r3
 80186bc:	687b      	ldr	r3, [r7, #4]
 80186be:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80186c0:	683b      	ldr	r3, [r7, #0]
 80186c2:	3308      	adds	r3, #8
 80186c4:	681b      	ldr	r3, [r3, #0]
 80186c6:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80186c8:	429a      	cmp	r2, r3
 80186ca:	d101      	bne.n	80186d0 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80186cc:	2301      	movs	r3, #1
 80186ce:	e000      	b.n	80186d2 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80186d0:	2300      	movs	r3, #0
  }
}
 80186d2:	4618      	mov	r0, r3
 80186d4:	3714      	adds	r7, #20
 80186d6:	46bd      	mov	sp, r7
 80186d8:	bc80      	pop	{r7}
 80186da:	4770      	bx	lr

080186dc <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80186dc:	b580      	push	{r7, lr}
 80186de:	b084      	sub	sp, #16
 80186e0:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80186e2:	2300      	movs	r3, #0
 80186e4:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80186e6:	4b12      	ldr	r3, [pc, #72]	; (8018730 <ip_reass_tmr+0x54>)
 80186e8:	681b      	ldr	r3, [r3, #0]
 80186ea:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80186ec:	e018      	b.n	8018720 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80186ee:	68fb      	ldr	r3, [r7, #12]
 80186f0:	7fdb      	ldrb	r3, [r3, #31]
 80186f2:	2b00      	cmp	r3, #0
 80186f4:	d00b      	beq.n	801870e <ip_reass_tmr+0x32>
      r->timer--;
 80186f6:	68fb      	ldr	r3, [r7, #12]
 80186f8:	7fdb      	ldrb	r3, [r3, #31]
 80186fa:	3b01      	subs	r3, #1
 80186fc:	b2da      	uxtb	r2, r3
 80186fe:	68fb      	ldr	r3, [r7, #12]
 8018700:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8018702:	68fb      	ldr	r3, [r7, #12]
 8018704:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8018706:	68fb      	ldr	r3, [r7, #12]
 8018708:	681b      	ldr	r3, [r3, #0]
 801870a:	60fb      	str	r3, [r7, #12]
 801870c:	e008      	b.n	8018720 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801870e:	68fb      	ldr	r3, [r7, #12]
 8018710:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8018712:	68fb      	ldr	r3, [r7, #12]
 8018714:	681b      	ldr	r3, [r3, #0]
 8018716:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8018718:	68b9      	ldr	r1, [r7, #8]
 801871a:	6878      	ldr	r0, [r7, #4]
 801871c:	f000 f80a 	bl	8018734 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8018720:	68fb      	ldr	r3, [r7, #12]
 8018722:	2b00      	cmp	r3, #0
 8018724:	d1e3      	bne.n	80186ee <ip_reass_tmr+0x12>
    }
  }
}
 8018726:	bf00      	nop
 8018728:	bf00      	nop
 801872a:	3710      	adds	r7, #16
 801872c:	46bd      	mov	sp, r7
 801872e:	bd80      	pop	{r7, pc}
 8018730:	2000c0a8 	.word	0x2000c0a8

08018734 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8018734:	b580      	push	{r7, lr}
 8018736:	b088      	sub	sp, #32
 8018738:	af00      	add	r7, sp, #0
 801873a:	6078      	str	r0, [r7, #4]
 801873c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801873e:	2300      	movs	r3, #0
 8018740:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8018742:	683a      	ldr	r2, [r7, #0]
 8018744:	687b      	ldr	r3, [r7, #4]
 8018746:	429a      	cmp	r2, r3
 8018748:	d105      	bne.n	8018756 <ip_reass_free_complete_datagram+0x22>
 801874a:	4b45      	ldr	r3, [pc, #276]	; (8018860 <ip_reass_free_complete_datagram+0x12c>)
 801874c:	22ab      	movs	r2, #171	; 0xab
 801874e:	4945      	ldr	r1, [pc, #276]	; (8018864 <ip_reass_free_complete_datagram+0x130>)
 8018750:	4845      	ldr	r0, [pc, #276]	; (8018868 <ip_reass_free_complete_datagram+0x134>)
 8018752:	f002 f827 	bl	801a7a4 <iprintf>
  if (prev != NULL) {
 8018756:	683b      	ldr	r3, [r7, #0]
 8018758:	2b00      	cmp	r3, #0
 801875a:	d00a      	beq.n	8018772 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801875c:	683b      	ldr	r3, [r7, #0]
 801875e:	681b      	ldr	r3, [r3, #0]
 8018760:	687a      	ldr	r2, [r7, #4]
 8018762:	429a      	cmp	r2, r3
 8018764:	d005      	beq.n	8018772 <ip_reass_free_complete_datagram+0x3e>
 8018766:	4b3e      	ldr	r3, [pc, #248]	; (8018860 <ip_reass_free_complete_datagram+0x12c>)
 8018768:	22ad      	movs	r2, #173	; 0xad
 801876a:	4940      	ldr	r1, [pc, #256]	; (801886c <ip_reass_free_complete_datagram+0x138>)
 801876c:	483e      	ldr	r0, [pc, #248]	; (8018868 <ip_reass_free_complete_datagram+0x134>)
 801876e:	f002 f819 	bl	801a7a4 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8018772:	687b      	ldr	r3, [r7, #4]
 8018774:	685b      	ldr	r3, [r3, #4]
 8018776:	685b      	ldr	r3, [r3, #4]
 8018778:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801877a:	697b      	ldr	r3, [r7, #20]
 801877c:	889b      	ldrh	r3, [r3, #4]
 801877e:	b29b      	uxth	r3, r3
 8018780:	2b00      	cmp	r3, #0
 8018782:	d12a      	bne.n	80187da <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8018784:	687b      	ldr	r3, [r7, #4]
 8018786:	685b      	ldr	r3, [r3, #4]
 8018788:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801878a:	697b      	ldr	r3, [r7, #20]
 801878c:	681a      	ldr	r2, [r3, #0]
 801878e:	687b      	ldr	r3, [r7, #4]
 8018790:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8018792:	69bb      	ldr	r3, [r7, #24]
 8018794:	6858      	ldr	r0, [r3, #4]
 8018796:	687b      	ldr	r3, [r7, #4]
 8018798:	3308      	adds	r3, #8
 801879a:	2214      	movs	r2, #20
 801879c:	4619      	mov	r1, r3
 801879e:	f001 ff0d 	bl	801a5bc <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80187a2:	2101      	movs	r1, #1
 80187a4:	69b8      	ldr	r0, [r7, #24]
 80187a6:	f7ff fc23 	bl	8017ff0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80187aa:	69b8      	ldr	r0, [r7, #24]
 80187ac:	f7f5 fc02 	bl	800dfb4 <pbuf_clen>
 80187b0:	4603      	mov	r3, r0
 80187b2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80187b4:	8bfa      	ldrh	r2, [r7, #30]
 80187b6:	8a7b      	ldrh	r3, [r7, #18]
 80187b8:	4413      	add	r3, r2
 80187ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80187be:	db05      	blt.n	80187cc <ip_reass_free_complete_datagram+0x98>
 80187c0:	4b27      	ldr	r3, [pc, #156]	; (8018860 <ip_reass_free_complete_datagram+0x12c>)
 80187c2:	22bc      	movs	r2, #188	; 0xbc
 80187c4:	492a      	ldr	r1, [pc, #168]	; (8018870 <ip_reass_free_complete_datagram+0x13c>)
 80187c6:	4828      	ldr	r0, [pc, #160]	; (8018868 <ip_reass_free_complete_datagram+0x134>)
 80187c8:	f001 ffec 	bl	801a7a4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80187cc:	8bfa      	ldrh	r2, [r7, #30]
 80187ce:	8a7b      	ldrh	r3, [r7, #18]
 80187d0:	4413      	add	r3, r2
 80187d2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80187d4:	69b8      	ldr	r0, [r7, #24]
 80187d6:	f7f5 fb5f 	bl	800de98 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80187da:	687b      	ldr	r3, [r7, #4]
 80187dc:	685b      	ldr	r3, [r3, #4]
 80187de:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80187e0:	e01f      	b.n	8018822 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80187e2:	69bb      	ldr	r3, [r7, #24]
 80187e4:	685b      	ldr	r3, [r3, #4]
 80187e6:	617b      	str	r3, [r7, #20]
    pcur = p;
 80187e8:	69bb      	ldr	r3, [r7, #24]
 80187ea:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80187ec:	697b      	ldr	r3, [r7, #20]
 80187ee:	681b      	ldr	r3, [r3, #0]
 80187f0:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80187f2:	68f8      	ldr	r0, [r7, #12]
 80187f4:	f7f5 fbde 	bl	800dfb4 <pbuf_clen>
 80187f8:	4603      	mov	r3, r0
 80187fa:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80187fc:	8bfa      	ldrh	r2, [r7, #30]
 80187fe:	8a7b      	ldrh	r3, [r7, #18]
 8018800:	4413      	add	r3, r2
 8018802:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018806:	db05      	blt.n	8018814 <ip_reass_free_complete_datagram+0xe0>
 8018808:	4b15      	ldr	r3, [pc, #84]	; (8018860 <ip_reass_free_complete_datagram+0x12c>)
 801880a:	22cc      	movs	r2, #204	; 0xcc
 801880c:	4918      	ldr	r1, [pc, #96]	; (8018870 <ip_reass_free_complete_datagram+0x13c>)
 801880e:	4816      	ldr	r0, [pc, #88]	; (8018868 <ip_reass_free_complete_datagram+0x134>)
 8018810:	f001 ffc8 	bl	801a7a4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8018814:	8bfa      	ldrh	r2, [r7, #30]
 8018816:	8a7b      	ldrh	r3, [r7, #18]
 8018818:	4413      	add	r3, r2
 801881a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801881c:	68f8      	ldr	r0, [r7, #12]
 801881e:	f7f5 fb3b 	bl	800de98 <pbuf_free>
  while (p != NULL) {
 8018822:	69bb      	ldr	r3, [r7, #24]
 8018824:	2b00      	cmp	r3, #0
 8018826:	d1dc      	bne.n	80187e2 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8018828:	6839      	ldr	r1, [r7, #0]
 801882a:	6878      	ldr	r0, [r7, #4]
 801882c:	f000 f8c2 	bl	80189b4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8018830:	4b10      	ldr	r3, [pc, #64]	; (8018874 <ip_reass_free_complete_datagram+0x140>)
 8018832:	881b      	ldrh	r3, [r3, #0]
 8018834:	8bfa      	ldrh	r2, [r7, #30]
 8018836:	429a      	cmp	r2, r3
 8018838:	d905      	bls.n	8018846 <ip_reass_free_complete_datagram+0x112>
 801883a:	4b09      	ldr	r3, [pc, #36]	; (8018860 <ip_reass_free_complete_datagram+0x12c>)
 801883c:	22d2      	movs	r2, #210	; 0xd2
 801883e:	490e      	ldr	r1, [pc, #56]	; (8018878 <ip_reass_free_complete_datagram+0x144>)
 8018840:	4809      	ldr	r0, [pc, #36]	; (8018868 <ip_reass_free_complete_datagram+0x134>)
 8018842:	f001 ffaf 	bl	801a7a4 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8018846:	4b0b      	ldr	r3, [pc, #44]	; (8018874 <ip_reass_free_complete_datagram+0x140>)
 8018848:	881a      	ldrh	r2, [r3, #0]
 801884a:	8bfb      	ldrh	r3, [r7, #30]
 801884c:	1ad3      	subs	r3, r2, r3
 801884e:	b29a      	uxth	r2, r3
 8018850:	4b08      	ldr	r3, [pc, #32]	; (8018874 <ip_reass_free_complete_datagram+0x140>)
 8018852:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8018854:	8bfb      	ldrh	r3, [r7, #30]
}
 8018856:	4618      	mov	r0, r3
 8018858:	3720      	adds	r7, #32
 801885a:	46bd      	mov	sp, r7
 801885c:	bd80      	pop	{r7, pc}
 801885e:	bf00      	nop
 8018860:	0801e728 	.word	0x0801e728
 8018864:	0801e764 	.word	0x0801e764
 8018868:	0801e770 	.word	0x0801e770
 801886c:	0801e798 	.word	0x0801e798
 8018870:	0801e7ac 	.word	0x0801e7ac
 8018874:	2000c0ac 	.word	0x2000c0ac
 8018878:	0801e7cc 	.word	0x0801e7cc

0801887c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801887c:	b580      	push	{r7, lr}
 801887e:	b08a      	sub	sp, #40	; 0x28
 8018880:	af00      	add	r7, sp, #0
 8018882:	6078      	str	r0, [r7, #4]
 8018884:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8018886:	2300      	movs	r3, #0
 8018888:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801888a:	2300      	movs	r3, #0
 801888c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801888e:	2300      	movs	r3, #0
 8018890:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8018892:	2300      	movs	r3, #0
 8018894:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8018896:	2300      	movs	r3, #0
 8018898:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801889a:	4b28      	ldr	r3, [pc, #160]	; (801893c <ip_reass_remove_oldest_datagram+0xc0>)
 801889c:	681b      	ldr	r3, [r3, #0]
 801889e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80188a0:	e030      	b.n	8018904 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80188a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80188a4:	695a      	ldr	r2, [r3, #20]
 80188a6:	687b      	ldr	r3, [r7, #4]
 80188a8:	68db      	ldr	r3, [r3, #12]
 80188aa:	429a      	cmp	r2, r3
 80188ac:	d10c      	bne.n	80188c8 <ip_reass_remove_oldest_datagram+0x4c>
 80188ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80188b0:	699a      	ldr	r2, [r3, #24]
 80188b2:	687b      	ldr	r3, [r7, #4]
 80188b4:	691b      	ldr	r3, [r3, #16]
 80188b6:	429a      	cmp	r2, r3
 80188b8:	d106      	bne.n	80188c8 <ip_reass_remove_oldest_datagram+0x4c>
 80188ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80188bc:	899a      	ldrh	r2, [r3, #12]
 80188be:	687b      	ldr	r3, [r7, #4]
 80188c0:	889b      	ldrh	r3, [r3, #4]
 80188c2:	b29b      	uxth	r3, r3
 80188c4:	429a      	cmp	r2, r3
 80188c6:	d014      	beq.n	80188f2 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80188c8:	693b      	ldr	r3, [r7, #16]
 80188ca:	3301      	adds	r3, #1
 80188cc:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80188ce:	6a3b      	ldr	r3, [r7, #32]
 80188d0:	2b00      	cmp	r3, #0
 80188d2:	d104      	bne.n	80188de <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80188d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80188d6:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80188d8:	69fb      	ldr	r3, [r7, #28]
 80188da:	61bb      	str	r3, [r7, #24]
 80188dc:	e009      	b.n	80188f2 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80188de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80188e0:	7fda      	ldrb	r2, [r3, #31]
 80188e2:	6a3b      	ldr	r3, [r7, #32]
 80188e4:	7fdb      	ldrb	r3, [r3, #31]
 80188e6:	429a      	cmp	r2, r3
 80188e8:	d803      	bhi.n	80188f2 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80188ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80188ec:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80188ee:	69fb      	ldr	r3, [r7, #28]
 80188f0:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80188f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80188f4:	681b      	ldr	r3, [r3, #0]
 80188f6:	2b00      	cmp	r3, #0
 80188f8:	d001      	beq.n	80188fe <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80188fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80188fc:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80188fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018900:	681b      	ldr	r3, [r3, #0]
 8018902:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8018904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018906:	2b00      	cmp	r3, #0
 8018908:	d1cb      	bne.n	80188a2 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801890a:	6a3b      	ldr	r3, [r7, #32]
 801890c:	2b00      	cmp	r3, #0
 801890e:	d008      	beq.n	8018922 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8018910:	69b9      	ldr	r1, [r7, #24]
 8018912:	6a38      	ldr	r0, [r7, #32]
 8018914:	f7ff ff0e 	bl	8018734 <ip_reass_free_complete_datagram>
 8018918:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801891a:	697a      	ldr	r2, [r7, #20]
 801891c:	68fb      	ldr	r3, [r7, #12]
 801891e:	4413      	add	r3, r2
 8018920:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8018922:	697a      	ldr	r2, [r7, #20]
 8018924:	683b      	ldr	r3, [r7, #0]
 8018926:	429a      	cmp	r2, r3
 8018928:	da02      	bge.n	8018930 <ip_reass_remove_oldest_datagram+0xb4>
 801892a:	693b      	ldr	r3, [r7, #16]
 801892c:	2b01      	cmp	r3, #1
 801892e:	dcac      	bgt.n	801888a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8018930:	697b      	ldr	r3, [r7, #20]
}
 8018932:	4618      	mov	r0, r3
 8018934:	3728      	adds	r7, #40	; 0x28
 8018936:	46bd      	mov	sp, r7
 8018938:	bd80      	pop	{r7, pc}
 801893a:	bf00      	nop
 801893c:	2000c0a8 	.word	0x2000c0a8

08018940 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8018940:	b580      	push	{r7, lr}
 8018942:	b084      	sub	sp, #16
 8018944:	af00      	add	r7, sp, #0
 8018946:	6078      	str	r0, [r7, #4]
 8018948:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801894a:	2004      	movs	r0, #4
 801894c:	f7f4 fbf0 	bl	800d130 <memp_malloc>
 8018950:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8018952:	68fb      	ldr	r3, [r7, #12]
 8018954:	2b00      	cmp	r3, #0
 8018956:	d110      	bne.n	801897a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8018958:	6839      	ldr	r1, [r7, #0]
 801895a:	6878      	ldr	r0, [r7, #4]
 801895c:	f7ff ff8e 	bl	801887c <ip_reass_remove_oldest_datagram>
 8018960:	4602      	mov	r2, r0
 8018962:	683b      	ldr	r3, [r7, #0]
 8018964:	4293      	cmp	r3, r2
 8018966:	dc03      	bgt.n	8018970 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8018968:	2004      	movs	r0, #4
 801896a:	f7f4 fbe1 	bl	800d130 <memp_malloc>
 801896e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8018970:	68fb      	ldr	r3, [r7, #12]
 8018972:	2b00      	cmp	r3, #0
 8018974:	d101      	bne.n	801897a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8018976:	2300      	movs	r3, #0
 8018978:	e016      	b.n	80189a8 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801897a:	2220      	movs	r2, #32
 801897c:	2100      	movs	r1, #0
 801897e:	68f8      	ldr	r0, [r7, #12]
 8018980:	f001 fe2a 	bl	801a5d8 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8018984:	68fb      	ldr	r3, [r7, #12]
 8018986:	220f      	movs	r2, #15
 8018988:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801898a:	4b09      	ldr	r3, [pc, #36]	; (80189b0 <ip_reass_enqueue_new_datagram+0x70>)
 801898c:	681a      	ldr	r2, [r3, #0]
 801898e:	68fb      	ldr	r3, [r7, #12]
 8018990:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8018992:	4a07      	ldr	r2, [pc, #28]	; (80189b0 <ip_reass_enqueue_new_datagram+0x70>)
 8018994:	68fb      	ldr	r3, [r7, #12]
 8018996:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8018998:	68fb      	ldr	r3, [r7, #12]
 801899a:	3308      	adds	r3, #8
 801899c:	2214      	movs	r2, #20
 801899e:	6879      	ldr	r1, [r7, #4]
 80189a0:	4618      	mov	r0, r3
 80189a2:	f001 fe0b 	bl	801a5bc <memcpy>
  return ipr;
 80189a6:	68fb      	ldr	r3, [r7, #12]
}
 80189a8:	4618      	mov	r0, r3
 80189aa:	3710      	adds	r7, #16
 80189ac:	46bd      	mov	sp, r7
 80189ae:	bd80      	pop	{r7, pc}
 80189b0:	2000c0a8 	.word	0x2000c0a8

080189b4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80189b4:	b580      	push	{r7, lr}
 80189b6:	b082      	sub	sp, #8
 80189b8:	af00      	add	r7, sp, #0
 80189ba:	6078      	str	r0, [r7, #4]
 80189bc:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80189be:	4b10      	ldr	r3, [pc, #64]	; (8018a00 <ip_reass_dequeue_datagram+0x4c>)
 80189c0:	681b      	ldr	r3, [r3, #0]
 80189c2:	687a      	ldr	r2, [r7, #4]
 80189c4:	429a      	cmp	r2, r3
 80189c6:	d104      	bne.n	80189d2 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80189c8:	687b      	ldr	r3, [r7, #4]
 80189ca:	681b      	ldr	r3, [r3, #0]
 80189cc:	4a0c      	ldr	r2, [pc, #48]	; (8018a00 <ip_reass_dequeue_datagram+0x4c>)
 80189ce:	6013      	str	r3, [r2, #0]
 80189d0:	e00d      	b.n	80189ee <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80189d2:	683b      	ldr	r3, [r7, #0]
 80189d4:	2b00      	cmp	r3, #0
 80189d6:	d106      	bne.n	80189e6 <ip_reass_dequeue_datagram+0x32>
 80189d8:	4b0a      	ldr	r3, [pc, #40]	; (8018a04 <ip_reass_dequeue_datagram+0x50>)
 80189da:	f240 1245 	movw	r2, #325	; 0x145
 80189de:	490a      	ldr	r1, [pc, #40]	; (8018a08 <ip_reass_dequeue_datagram+0x54>)
 80189e0:	480a      	ldr	r0, [pc, #40]	; (8018a0c <ip_reass_dequeue_datagram+0x58>)
 80189e2:	f001 fedf 	bl	801a7a4 <iprintf>
    prev->next = ipr->next;
 80189e6:	687b      	ldr	r3, [r7, #4]
 80189e8:	681a      	ldr	r2, [r3, #0]
 80189ea:	683b      	ldr	r3, [r7, #0]
 80189ec:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80189ee:	6879      	ldr	r1, [r7, #4]
 80189f0:	2004      	movs	r0, #4
 80189f2:	f7f4 fc13 	bl	800d21c <memp_free>
}
 80189f6:	bf00      	nop
 80189f8:	3708      	adds	r7, #8
 80189fa:	46bd      	mov	sp, r7
 80189fc:	bd80      	pop	{r7, pc}
 80189fe:	bf00      	nop
 8018a00:	2000c0a8 	.word	0x2000c0a8
 8018a04:	0801e728 	.word	0x0801e728
 8018a08:	0801e7f0 	.word	0x0801e7f0
 8018a0c:	0801e770 	.word	0x0801e770

08018a10 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8018a10:	b580      	push	{r7, lr}
 8018a12:	b08c      	sub	sp, #48	; 0x30
 8018a14:	af00      	add	r7, sp, #0
 8018a16:	60f8      	str	r0, [r7, #12]
 8018a18:	60b9      	str	r1, [r7, #8]
 8018a1a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8018a1c:	2300      	movs	r3, #0
 8018a1e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8018a20:	2301      	movs	r3, #1
 8018a22:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8018a24:	68bb      	ldr	r3, [r7, #8]
 8018a26:	685b      	ldr	r3, [r3, #4]
 8018a28:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8018a2a:	69fb      	ldr	r3, [r7, #28]
 8018a2c:	885b      	ldrh	r3, [r3, #2]
 8018a2e:	b29b      	uxth	r3, r3
 8018a30:	4618      	mov	r0, r3
 8018a32:	f7f3 fdcd 	bl	800c5d0 <lwip_htons>
 8018a36:	4603      	mov	r3, r0
 8018a38:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8018a3a:	69fb      	ldr	r3, [r7, #28]
 8018a3c:	781b      	ldrb	r3, [r3, #0]
 8018a3e:	f003 030f 	and.w	r3, r3, #15
 8018a42:	b2db      	uxtb	r3, r3
 8018a44:	009b      	lsls	r3, r3, #2
 8018a46:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8018a48:	7e7b      	ldrb	r3, [r7, #25]
 8018a4a:	b29b      	uxth	r3, r3
 8018a4c:	8b7a      	ldrh	r2, [r7, #26]
 8018a4e:	429a      	cmp	r2, r3
 8018a50:	d202      	bcs.n	8018a58 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018a52:	f04f 33ff 	mov.w	r3, #4294967295
 8018a56:	e135      	b.n	8018cc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8018a58:	7e7b      	ldrb	r3, [r7, #25]
 8018a5a:	b29b      	uxth	r3, r3
 8018a5c:	8b7a      	ldrh	r2, [r7, #26]
 8018a5e:	1ad3      	subs	r3, r2, r3
 8018a60:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8018a62:	69fb      	ldr	r3, [r7, #28]
 8018a64:	88db      	ldrh	r3, [r3, #6]
 8018a66:	b29b      	uxth	r3, r3
 8018a68:	4618      	mov	r0, r3
 8018a6a:	f7f3 fdb1 	bl	800c5d0 <lwip_htons>
 8018a6e:	4603      	mov	r3, r0
 8018a70:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018a74:	b29b      	uxth	r3, r3
 8018a76:	00db      	lsls	r3, r3, #3
 8018a78:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8018a7a:	68bb      	ldr	r3, [r7, #8]
 8018a7c:	685b      	ldr	r3, [r3, #4]
 8018a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8018a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018a82:	2200      	movs	r2, #0
 8018a84:	701a      	strb	r2, [r3, #0]
 8018a86:	2200      	movs	r2, #0
 8018a88:	705a      	strb	r2, [r3, #1]
 8018a8a:	2200      	movs	r2, #0
 8018a8c:	709a      	strb	r2, [r3, #2]
 8018a8e:	2200      	movs	r2, #0
 8018a90:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8018a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018a94:	8afa      	ldrh	r2, [r7, #22]
 8018a96:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8018a98:	8afa      	ldrh	r2, [r7, #22]
 8018a9a:	8b7b      	ldrh	r3, [r7, #26]
 8018a9c:	4413      	add	r3, r2
 8018a9e:	b29a      	uxth	r2, r3
 8018aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018aa2:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8018aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018aa6:	88db      	ldrh	r3, [r3, #6]
 8018aa8:	b29b      	uxth	r3, r3
 8018aaa:	8afa      	ldrh	r2, [r7, #22]
 8018aac:	429a      	cmp	r2, r3
 8018aae:	d902      	bls.n	8018ab6 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018ab0:	f04f 33ff 	mov.w	r3, #4294967295
 8018ab4:	e106      	b.n	8018cc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8018ab6:	68fb      	ldr	r3, [r7, #12]
 8018ab8:	685b      	ldr	r3, [r3, #4]
 8018aba:	627b      	str	r3, [r7, #36]	; 0x24
 8018abc:	e068      	b.n	8018b90 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8018abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ac0:	685b      	ldr	r3, [r3, #4]
 8018ac2:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8018ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018ac6:	889b      	ldrh	r3, [r3, #4]
 8018ac8:	b29a      	uxth	r2, r3
 8018aca:	693b      	ldr	r3, [r7, #16]
 8018acc:	889b      	ldrh	r3, [r3, #4]
 8018ace:	b29b      	uxth	r3, r3
 8018ad0:	429a      	cmp	r2, r3
 8018ad2:	d235      	bcs.n	8018b40 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8018ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018ad6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018ad8:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8018ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018adc:	2b00      	cmp	r3, #0
 8018ade:	d020      	beq.n	8018b22 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8018ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018ae2:	889b      	ldrh	r3, [r3, #4]
 8018ae4:	b29a      	uxth	r2, r3
 8018ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018ae8:	88db      	ldrh	r3, [r3, #6]
 8018aea:	b29b      	uxth	r3, r3
 8018aec:	429a      	cmp	r2, r3
 8018aee:	d307      	bcc.n	8018b00 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8018af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018af2:	88db      	ldrh	r3, [r3, #6]
 8018af4:	b29a      	uxth	r2, r3
 8018af6:	693b      	ldr	r3, [r7, #16]
 8018af8:	889b      	ldrh	r3, [r3, #4]
 8018afa:	b29b      	uxth	r3, r3
 8018afc:	429a      	cmp	r2, r3
 8018afe:	d902      	bls.n	8018b06 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018b00:	f04f 33ff 	mov.w	r3, #4294967295
 8018b04:	e0de      	b.n	8018cc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8018b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018b08:	68ba      	ldr	r2, [r7, #8]
 8018b0a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8018b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018b0e:	88db      	ldrh	r3, [r3, #6]
 8018b10:	b29a      	uxth	r2, r3
 8018b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018b14:	889b      	ldrh	r3, [r3, #4]
 8018b16:	b29b      	uxth	r3, r3
 8018b18:	429a      	cmp	r2, r3
 8018b1a:	d03d      	beq.n	8018b98 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8018b1c:	2300      	movs	r3, #0
 8018b1e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8018b20:	e03a      	b.n	8018b98 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8018b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018b24:	88db      	ldrh	r3, [r3, #6]
 8018b26:	b29a      	uxth	r2, r3
 8018b28:	693b      	ldr	r3, [r7, #16]
 8018b2a:	889b      	ldrh	r3, [r3, #4]
 8018b2c:	b29b      	uxth	r3, r3
 8018b2e:	429a      	cmp	r2, r3
 8018b30:	d902      	bls.n	8018b38 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018b32:	f04f 33ff 	mov.w	r3, #4294967295
 8018b36:	e0c5      	b.n	8018cc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8018b38:	68fb      	ldr	r3, [r7, #12]
 8018b3a:	68ba      	ldr	r2, [r7, #8]
 8018b3c:	605a      	str	r2, [r3, #4]
      break;
 8018b3e:	e02b      	b.n	8018b98 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8018b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018b42:	889b      	ldrh	r3, [r3, #4]
 8018b44:	b29a      	uxth	r2, r3
 8018b46:	693b      	ldr	r3, [r7, #16]
 8018b48:	889b      	ldrh	r3, [r3, #4]
 8018b4a:	b29b      	uxth	r3, r3
 8018b4c:	429a      	cmp	r2, r3
 8018b4e:	d102      	bne.n	8018b56 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018b50:	f04f 33ff 	mov.w	r3, #4294967295
 8018b54:	e0b6      	b.n	8018cc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8018b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018b58:	889b      	ldrh	r3, [r3, #4]
 8018b5a:	b29a      	uxth	r2, r3
 8018b5c:	693b      	ldr	r3, [r7, #16]
 8018b5e:	88db      	ldrh	r3, [r3, #6]
 8018b60:	b29b      	uxth	r3, r3
 8018b62:	429a      	cmp	r2, r3
 8018b64:	d202      	bcs.n	8018b6c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018b66:	f04f 33ff 	mov.w	r3, #4294967295
 8018b6a:	e0ab      	b.n	8018cc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8018b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018b6e:	2b00      	cmp	r3, #0
 8018b70:	d009      	beq.n	8018b86 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8018b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018b74:	88db      	ldrh	r3, [r3, #6]
 8018b76:	b29a      	uxth	r2, r3
 8018b78:	693b      	ldr	r3, [r7, #16]
 8018b7a:	889b      	ldrh	r3, [r3, #4]
 8018b7c:	b29b      	uxth	r3, r3
 8018b7e:	429a      	cmp	r2, r3
 8018b80:	d001      	beq.n	8018b86 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8018b82:	2300      	movs	r3, #0
 8018b84:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8018b86:	693b      	ldr	r3, [r7, #16]
 8018b88:	681b      	ldr	r3, [r3, #0]
 8018b8a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8018b8c:	693b      	ldr	r3, [r7, #16]
 8018b8e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8018b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b92:	2b00      	cmp	r3, #0
 8018b94:	d193      	bne.n	8018abe <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8018b96:	e000      	b.n	8018b9a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8018b98:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8018b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b9c:	2b00      	cmp	r3, #0
 8018b9e:	d12d      	bne.n	8018bfc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8018ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018ba2:	2b00      	cmp	r3, #0
 8018ba4:	d01c      	beq.n	8018be0 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8018ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018ba8:	88db      	ldrh	r3, [r3, #6]
 8018baa:	b29a      	uxth	r2, r3
 8018bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018bae:	889b      	ldrh	r3, [r3, #4]
 8018bb0:	b29b      	uxth	r3, r3
 8018bb2:	429a      	cmp	r2, r3
 8018bb4:	d906      	bls.n	8018bc4 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8018bb6:	4b45      	ldr	r3, [pc, #276]	; (8018ccc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018bb8:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8018bbc:	4944      	ldr	r1, [pc, #272]	; (8018cd0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8018bbe:	4845      	ldr	r0, [pc, #276]	; (8018cd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018bc0:	f001 fdf0 	bl	801a7a4 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8018bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018bc6:	68ba      	ldr	r2, [r7, #8]
 8018bc8:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8018bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018bcc:	88db      	ldrh	r3, [r3, #6]
 8018bce:	b29a      	uxth	r2, r3
 8018bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018bd2:	889b      	ldrh	r3, [r3, #4]
 8018bd4:	b29b      	uxth	r3, r3
 8018bd6:	429a      	cmp	r2, r3
 8018bd8:	d010      	beq.n	8018bfc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8018bda:	2300      	movs	r3, #0
 8018bdc:	623b      	str	r3, [r7, #32]
 8018bde:	e00d      	b.n	8018bfc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8018be0:	68fb      	ldr	r3, [r7, #12]
 8018be2:	685b      	ldr	r3, [r3, #4]
 8018be4:	2b00      	cmp	r3, #0
 8018be6:	d006      	beq.n	8018bf6 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8018be8:	4b38      	ldr	r3, [pc, #224]	; (8018ccc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018bea:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8018bee:	493a      	ldr	r1, [pc, #232]	; (8018cd8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8018bf0:	4838      	ldr	r0, [pc, #224]	; (8018cd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018bf2:	f001 fdd7 	bl	801a7a4 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8018bf6:	68fb      	ldr	r3, [r7, #12]
 8018bf8:	68ba      	ldr	r2, [r7, #8]
 8018bfa:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8018bfc:	687b      	ldr	r3, [r7, #4]
 8018bfe:	2b00      	cmp	r3, #0
 8018c00:	d105      	bne.n	8018c0e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8018c02:	68fb      	ldr	r3, [r7, #12]
 8018c04:	7f9b      	ldrb	r3, [r3, #30]
 8018c06:	f003 0301 	and.w	r3, r3, #1
 8018c0a:	2b00      	cmp	r3, #0
 8018c0c:	d059      	beq.n	8018cc2 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8018c0e:	6a3b      	ldr	r3, [r7, #32]
 8018c10:	2b00      	cmp	r3, #0
 8018c12:	d04f      	beq.n	8018cb4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8018c14:	68fb      	ldr	r3, [r7, #12]
 8018c16:	685b      	ldr	r3, [r3, #4]
 8018c18:	2b00      	cmp	r3, #0
 8018c1a:	d006      	beq.n	8018c2a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8018c1c:	68fb      	ldr	r3, [r7, #12]
 8018c1e:	685b      	ldr	r3, [r3, #4]
 8018c20:	685b      	ldr	r3, [r3, #4]
 8018c22:	889b      	ldrh	r3, [r3, #4]
 8018c24:	b29b      	uxth	r3, r3
 8018c26:	2b00      	cmp	r3, #0
 8018c28:	d002      	beq.n	8018c30 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8018c2a:	2300      	movs	r3, #0
 8018c2c:	623b      	str	r3, [r7, #32]
 8018c2e:	e041      	b.n	8018cb4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8018c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018c32:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8018c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018c36:	681b      	ldr	r3, [r3, #0]
 8018c38:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8018c3a:	e012      	b.n	8018c62 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8018c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018c3e:	685b      	ldr	r3, [r3, #4]
 8018c40:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8018c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018c44:	88db      	ldrh	r3, [r3, #6]
 8018c46:	b29a      	uxth	r2, r3
 8018c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018c4a:	889b      	ldrh	r3, [r3, #4]
 8018c4c:	b29b      	uxth	r3, r3
 8018c4e:	429a      	cmp	r2, r3
 8018c50:	d002      	beq.n	8018c58 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8018c52:	2300      	movs	r3, #0
 8018c54:	623b      	str	r3, [r7, #32]
            break;
 8018c56:	e007      	b.n	8018c68 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8018c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018c5a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8018c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018c5e:	681b      	ldr	r3, [r3, #0]
 8018c60:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8018c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018c64:	2b00      	cmp	r3, #0
 8018c66:	d1e9      	bne.n	8018c3c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8018c68:	6a3b      	ldr	r3, [r7, #32]
 8018c6a:	2b00      	cmp	r3, #0
 8018c6c:	d022      	beq.n	8018cb4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8018c6e:	68fb      	ldr	r3, [r7, #12]
 8018c70:	685b      	ldr	r3, [r3, #4]
 8018c72:	2b00      	cmp	r3, #0
 8018c74:	d106      	bne.n	8018c84 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8018c76:	4b15      	ldr	r3, [pc, #84]	; (8018ccc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018c78:	f240 12df 	movw	r2, #479	; 0x1df
 8018c7c:	4917      	ldr	r1, [pc, #92]	; (8018cdc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8018c7e:	4815      	ldr	r0, [pc, #84]	; (8018cd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018c80:	f001 fd90 	bl	801a7a4 <iprintf>
          LWIP_ASSERT("sanity check",
 8018c84:	68fb      	ldr	r3, [r7, #12]
 8018c86:	685b      	ldr	r3, [r3, #4]
 8018c88:	685b      	ldr	r3, [r3, #4]
 8018c8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018c8c:	429a      	cmp	r2, r3
 8018c8e:	d106      	bne.n	8018c9e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8018c90:	4b0e      	ldr	r3, [pc, #56]	; (8018ccc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018c92:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8018c96:	4911      	ldr	r1, [pc, #68]	; (8018cdc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8018c98:	480e      	ldr	r0, [pc, #56]	; (8018cd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018c9a:	f001 fd83 	bl	801a7a4 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8018c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018ca0:	681b      	ldr	r3, [r3, #0]
 8018ca2:	2b00      	cmp	r3, #0
 8018ca4:	d006      	beq.n	8018cb4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8018ca6:	4b09      	ldr	r3, [pc, #36]	; (8018ccc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018ca8:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8018cac:	490c      	ldr	r1, [pc, #48]	; (8018ce0 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8018cae:	4809      	ldr	r0, [pc, #36]	; (8018cd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018cb0:	f001 fd78 	bl	801a7a4 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8018cb4:	6a3b      	ldr	r3, [r7, #32]
 8018cb6:	2b00      	cmp	r3, #0
 8018cb8:	bf14      	ite	ne
 8018cba:	2301      	movne	r3, #1
 8018cbc:	2300      	moveq	r3, #0
 8018cbe:	b2db      	uxtb	r3, r3
 8018cc0:	e000      	b.n	8018cc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8018cc2:	2300      	movs	r3, #0
}
 8018cc4:	4618      	mov	r0, r3
 8018cc6:	3730      	adds	r7, #48	; 0x30
 8018cc8:	46bd      	mov	sp, r7
 8018cca:	bd80      	pop	{r7, pc}
 8018ccc:	0801e728 	.word	0x0801e728
 8018cd0:	0801e80c 	.word	0x0801e80c
 8018cd4:	0801e770 	.word	0x0801e770
 8018cd8:	0801e82c 	.word	0x0801e82c
 8018cdc:	0801e864 	.word	0x0801e864
 8018ce0:	0801e874 	.word	0x0801e874

08018ce4 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8018ce4:	b580      	push	{r7, lr}
 8018ce6:	b08e      	sub	sp, #56	; 0x38
 8018ce8:	af00      	add	r7, sp, #0
 8018cea:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8018cec:	687b      	ldr	r3, [r7, #4]
 8018cee:	685b      	ldr	r3, [r3, #4]
 8018cf0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8018cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018cf4:	781b      	ldrb	r3, [r3, #0]
 8018cf6:	f003 030f 	and.w	r3, r3, #15
 8018cfa:	b2db      	uxtb	r3, r3
 8018cfc:	009b      	lsls	r3, r3, #2
 8018cfe:	b2db      	uxtb	r3, r3
 8018d00:	2b14      	cmp	r3, #20
 8018d02:	f040 8171 	bne.w	8018fe8 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8018d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018d08:	88db      	ldrh	r3, [r3, #6]
 8018d0a:	b29b      	uxth	r3, r3
 8018d0c:	4618      	mov	r0, r3
 8018d0e:	f7f3 fc5f 	bl	800c5d0 <lwip_htons>
 8018d12:	4603      	mov	r3, r0
 8018d14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018d18:	b29b      	uxth	r3, r3
 8018d1a:	00db      	lsls	r3, r3, #3
 8018d1c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8018d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018d20:	885b      	ldrh	r3, [r3, #2]
 8018d22:	b29b      	uxth	r3, r3
 8018d24:	4618      	mov	r0, r3
 8018d26:	f7f3 fc53 	bl	800c5d0 <lwip_htons>
 8018d2a:	4603      	mov	r3, r0
 8018d2c:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8018d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018d30:	781b      	ldrb	r3, [r3, #0]
 8018d32:	f003 030f 	and.w	r3, r3, #15
 8018d36:	b2db      	uxtb	r3, r3
 8018d38:	009b      	lsls	r3, r3, #2
 8018d3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8018d3e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018d42:	b29b      	uxth	r3, r3
 8018d44:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8018d46:	429a      	cmp	r2, r3
 8018d48:	f0c0 8150 	bcc.w	8018fec <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8018d4c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018d50:	b29b      	uxth	r3, r3
 8018d52:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8018d54:	1ad3      	subs	r3, r2, r3
 8018d56:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8018d58:	6878      	ldr	r0, [r7, #4]
 8018d5a:	f7f5 f92b 	bl	800dfb4 <pbuf_clen>
 8018d5e:	4603      	mov	r3, r0
 8018d60:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8018d62:	4b8c      	ldr	r3, [pc, #560]	; (8018f94 <ip4_reass+0x2b0>)
 8018d64:	881b      	ldrh	r3, [r3, #0]
 8018d66:	461a      	mov	r2, r3
 8018d68:	8c3b      	ldrh	r3, [r7, #32]
 8018d6a:	4413      	add	r3, r2
 8018d6c:	2b0a      	cmp	r3, #10
 8018d6e:	dd10      	ble.n	8018d92 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8018d70:	8c3b      	ldrh	r3, [r7, #32]
 8018d72:	4619      	mov	r1, r3
 8018d74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018d76:	f7ff fd81 	bl	801887c <ip_reass_remove_oldest_datagram>
 8018d7a:	4603      	mov	r3, r0
 8018d7c:	2b00      	cmp	r3, #0
 8018d7e:	f000 8137 	beq.w	8018ff0 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8018d82:	4b84      	ldr	r3, [pc, #528]	; (8018f94 <ip4_reass+0x2b0>)
 8018d84:	881b      	ldrh	r3, [r3, #0]
 8018d86:	461a      	mov	r2, r3
 8018d88:	8c3b      	ldrh	r3, [r7, #32]
 8018d8a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8018d8c:	2b0a      	cmp	r3, #10
 8018d8e:	f300 812f 	bgt.w	8018ff0 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8018d92:	4b81      	ldr	r3, [pc, #516]	; (8018f98 <ip4_reass+0x2b4>)
 8018d94:	681b      	ldr	r3, [r3, #0]
 8018d96:	633b      	str	r3, [r7, #48]	; 0x30
 8018d98:	e015      	b.n	8018dc6 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8018d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018d9c:	695a      	ldr	r2, [r3, #20]
 8018d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018da0:	68db      	ldr	r3, [r3, #12]
 8018da2:	429a      	cmp	r2, r3
 8018da4:	d10c      	bne.n	8018dc0 <ip4_reass+0xdc>
 8018da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018da8:	699a      	ldr	r2, [r3, #24]
 8018daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018dac:	691b      	ldr	r3, [r3, #16]
 8018dae:	429a      	cmp	r2, r3
 8018db0:	d106      	bne.n	8018dc0 <ip4_reass+0xdc>
 8018db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018db4:	899a      	ldrh	r2, [r3, #12]
 8018db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018db8:	889b      	ldrh	r3, [r3, #4]
 8018dba:	b29b      	uxth	r3, r3
 8018dbc:	429a      	cmp	r2, r3
 8018dbe:	d006      	beq.n	8018dce <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8018dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018dc2:	681b      	ldr	r3, [r3, #0]
 8018dc4:	633b      	str	r3, [r7, #48]	; 0x30
 8018dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018dc8:	2b00      	cmp	r3, #0
 8018dca:	d1e6      	bne.n	8018d9a <ip4_reass+0xb6>
 8018dcc:	e000      	b.n	8018dd0 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8018dce:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8018dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018dd2:	2b00      	cmp	r3, #0
 8018dd4:	d109      	bne.n	8018dea <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8018dd6:	8c3b      	ldrh	r3, [r7, #32]
 8018dd8:	4619      	mov	r1, r3
 8018dda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018ddc:	f7ff fdb0 	bl	8018940 <ip_reass_enqueue_new_datagram>
 8018de0:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8018de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018de4:	2b00      	cmp	r3, #0
 8018de6:	d11c      	bne.n	8018e22 <ip4_reass+0x13e>
      goto nullreturn;
 8018de8:	e105      	b.n	8018ff6 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8018dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018dec:	88db      	ldrh	r3, [r3, #6]
 8018dee:	b29b      	uxth	r3, r3
 8018df0:	4618      	mov	r0, r3
 8018df2:	f7f3 fbed 	bl	800c5d0 <lwip_htons>
 8018df6:	4603      	mov	r3, r0
 8018df8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018dfc:	2b00      	cmp	r3, #0
 8018dfe:	d110      	bne.n	8018e22 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8018e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018e02:	89db      	ldrh	r3, [r3, #14]
 8018e04:	4618      	mov	r0, r3
 8018e06:	f7f3 fbe3 	bl	800c5d0 <lwip_htons>
 8018e0a:	4603      	mov	r3, r0
 8018e0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8018e10:	2b00      	cmp	r3, #0
 8018e12:	d006      	beq.n	8018e22 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8018e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018e16:	3308      	adds	r3, #8
 8018e18:	2214      	movs	r2, #20
 8018e1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8018e1c:	4618      	mov	r0, r3
 8018e1e:	f001 fbcd 	bl	801a5bc <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8018e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018e24:	88db      	ldrh	r3, [r3, #6]
 8018e26:	b29b      	uxth	r3, r3
 8018e28:	f003 0320 	and.w	r3, r3, #32
 8018e2c:	2b00      	cmp	r3, #0
 8018e2e:	bf0c      	ite	eq
 8018e30:	2301      	moveq	r3, #1
 8018e32:	2300      	movne	r3, #0
 8018e34:	b2db      	uxtb	r3, r3
 8018e36:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8018e38:	69fb      	ldr	r3, [r7, #28]
 8018e3a:	2b00      	cmp	r3, #0
 8018e3c:	d00e      	beq.n	8018e5c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8018e3e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8018e40:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018e42:	4413      	add	r3, r2
 8018e44:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8018e46:	8b7a      	ldrh	r2, [r7, #26]
 8018e48:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8018e4a:	429a      	cmp	r2, r3
 8018e4c:	f0c0 80a0 	bcc.w	8018f90 <ip4_reass+0x2ac>
 8018e50:	8b7b      	ldrh	r3, [r7, #26]
 8018e52:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8018e56:	4293      	cmp	r3, r2
 8018e58:	f200 809a 	bhi.w	8018f90 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8018e5c:	69fa      	ldr	r2, [r7, #28]
 8018e5e:	6879      	ldr	r1, [r7, #4]
 8018e60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018e62:	f7ff fdd5 	bl	8018a10 <ip_reass_chain_frag_into_datagram_and_validate>
 8018e66:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8018e68:	697b      	ldr	r3, [r7, #20]
 8018e6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018e6e:	f000 809b 	beq.w	8018fa8 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8018e72:	4b48      	ldr	r3, [pc, #288]	; (8018f94 <ip4_reass+0x2b0>)
 8018e74:	881a      	ldrh	r2, [r3, #0]
 8018e76:	8c3b      	ldrh	r3, [r7, #32]
 8018e78:	4413      	add	r3, r2
 8018e7a:	b29a      	uxth	r2, r3
 8018e7c:	4b45      	ldr	r3, [pc, #276]	; (8018f94 <ip4_reass+0x2b0>)
 8018e7e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8018e80:	69fb      	ldr	r3, [r7, #28]
 8018e82:	2b00      	cmp	r3, #0
 8018e84:	d00d      	beq.n	8018ea2 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8018e86:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8018e88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018e8a:	4413      	add	r3, r2
 8018e8c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8018e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018e90:	8a7a      	ldrh	r2, [r7, #18]
 8018e92:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8018e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018e96:	7f9b      	ldrb	r3, [r3, #30]
 8018e98:	f043 0301 	orr.w	r3, r3, #1
 8018e9c:	b2da      	uxtb	r2, r3
 8018e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018ea0:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8018ea2:	697b      	ldr	r3, [r7, #20]
 8018ea4:	2b01      	cmp	r3, #1
 8018ea6:	d171      	bne.n	8018f8c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8018ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018eaa:	8b9b      	ldrh	r3, [r3, #28]
 8018eac:	3314      	adds	r3, #20
 8018eae:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8018eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018eb2:	685b      	ldr	r3, [r3, #4]
 8018eb4:	685b      	ldr	r3, [r3, #4]
 8018eb6:	681b      	ldr	r3, [r3, #0]
 8018eb8:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8018eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018ebc:	685b      	ldr	r3, [r3, #4]
 8018ebe:	685b      	ldr	r3, [r3, #4]
 8018ec0:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8018ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018ec4:	3308      	adds	r3, #8
 8018ec6:	2214      	movs	r2, #20
 8018ec8:	4619      	mov	r1, r3
 8018eca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018ecc:	f001 fb76 	bl	801a5bc <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8018ed0:	8a3b      	ldrh	r3, [r7, #16]
 8018ed2:	4618      	mov	r0, r3
 8018ed4:	f7f3 fb7c 	bl	800c5d0 <lwip_htons>
 8018ed8:	4603      	mov	r3, r0
 8018eda:	461a      	mov	r2, r3
 8018edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018ede:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8018ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018ee2:	2200      	movs	r2, #0
 8018ee4:	719a      	strb	r2, [r3, #6]
 8018ee6:	2200      	movs	r2, #0
 8018ee8:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8018eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018eec:	2200      	movs	r2, #0
 8018eee:	729a      	strb	r2, [r3, #10]
 8018ef0:	2200      	movs	r2, #0
 8018ef2:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8018ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018ef6:	685b      	ldr	r3, [r3, #4]
 8018ef8:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8018efa:	e00d      	b.n	8018f18 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8018efc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018efe:	685b      	ldr	r3, [r3, #4]
 8018f00:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8018f02:	2114      	movs	r1, #20
 8018f04:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8018f06:	f7f4 ff41 	bl	800dd8c <pbuf_remove_header>
      pbuf_cat(p, r);
 8018f0a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8018f0c:	6878      	ldr	r0, [r7, #4]
 8018f0e:	f7f5 f88f 	bl	800e030 <pbuf_cat>
      r = iprh->next_pbuf;
 8018f12:	68fb      	ldr	r3, [r7, #12]
 8018f14:	681b      	ldr	r3, [r3, #0]
 8018f16:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8018f18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018f1a:	2b00      	cmp	r3, #0
 8018f1c:	d1ee      	bne.n	8018efc <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8018f1e:	4b1e      	ldr	r3, [pc, #120]	; (8018f98 <ip4_reass+0x2b4>)
 8018f20:	681b      	ldr	r3, [r3, #0]
 8018f22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018f24:	429a      	cmp	r2, r3
 8018f26:	d102      	bne.n	8018f2e <ip4_reass+0x24a>
      ipr_prev = NULL;
 8018f28:	2300      	movs	r3, #0
 8018f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018f2c:	e010      	b.n	8018f50 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8018f2e:	4b1a      	ldr	r3, [pc, #104]	; (8018f98 <ip4_reass+0x2b4>)
 8018f30:	681b      	ldr	r3, [r3, #0]
 8018f32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018f34:	e007      	b.n	8018f46 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8018f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018f38:	681b      	ldr	r3, [r3, #0]
 8018f3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018f3c:	429a      	cmp	r2, r3
 8018f3e:	d006      	beq.n	8018f4e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8018f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018f42:	681b      	ldr	r3, [r3, #0]
 8018f44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018f48:	2b00      	cmp	r3, #0
 8018f4a:	d1f4      	bne.n	8018f36 <ip4_reass+0x252>
 8018f4c:	e000      	b.n	8018f50 <ip4_reass+0x26c>
          break;
 8018f4e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8018f50:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8018f52:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018f54:	f7ff fd2e 	bl	80189b4 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8018f58:	6878      	ldr	r0, [r7, #4]
 8018f5a:	f7f5 f82b 	bl	800dfb4 <pbuf_clen>
 8018f5e:	4603      	mov	r3, r0
 8018f60:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8018f62:	4b0c      	ldr	r3, [pc, #48]	; (8018f94 <ip4_reass+0x2b0>)
 8018f64:	881b      	ldrh	r3, [r3, #0]
 8018f66:	8c3a      	ldrh	r2, [r7, #32]
 8018f68:	429a      	cmp	r2, r3
 8018f6a:	d906      	bls.n	8018f7a <ip4_reass+0x296>
 8018f6c:	4b0b      	ldr	r3, [pc, #44]	; (8018f9c <ip4_reass+0x2b8>)
 8018f6e:	f240 229b 	movw	r2, #667	; 0x29b
 8018f72:	490b      	ldr	r1, [pc, #44]	; (8018fa0 <ip4_reass+0x2bc>)
 8018f74:	480b      	ldr	r0, [pc, #44]	; (8018fa4 <ip4_reass+0x2c0>)
 8018f76:	f001 fc15 	bl	801a7a4 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8018f7a:	4b06      	ldr	r3, [pc, #24]	; (8018f94 <ip4_reass+0x2b0>)
 8018f7c:	881a      	ldrh	r2, [r3, #0]
 8018f7e:	8c3b      	ldrh	r3, [r7, #32]
 8018f80:	1ad3      	subs	r3, r2, r3
 8018f82:	b29a      	uxth	r2, r3
 8018f84:	4b03      	ldr	r3, [pc, #12]	; (8018f94 <ip4_reass+0x2b0>)
 8018f86:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8018f88:	687b      	ldr	r3, [r7, #4]
 8018f8a:	e038      	b.n	8018ffe <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8018f8c:	2300      	movs	r3, #0
 8018f8e:	e036      	b.n	8018ffe <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8018f90:	bf00      	nop
 8018f92:	e00a      	b.n	8018faa <ip4_reass+0x2c6>
 8018f94:	2000c0ac 	.word	0x2000c0ac
 8018f98:	2000c0a8 	.word	0x2000c0a8
 8018f9c:	0801e728 	.word	0x0801e728
 8018fa0:	0801e898 	.word	0x0801e898
 8018fa4:	0801e770 	.word	0x0801e770
    goto nullreturn_ipr;
 8018fa8:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8018faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018fac:	2b00      	cmp	r3, #0
 8018fae:	d106      	bne.n	8018fbe <ip4_reass+0x2da>
 8018fb0:	4b15      	ldr	r3, [pc, #84]	; (8019008 <ip4_reass+0x324>)
 8018fb2:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8018fb6:	4915      	ldr	r1, [pc, #84]	; (801900c <ip4_reass+0x328>)
 8018fb8:	4815      	ldr	r0, [pc, #84]	; (8019010 <ip4_reass+0x32c>)
 8018fba:	f001 fbf3 	bl	801a7a4 <iprintf>
  if (ipr->p == NULL) {
 8018fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018fc0:	685b      	ldr	r3, [r3, #4]
 8018fc2:	2b00      	cmp	r3, #0
 8018fc4:	d116      	bne.n	8018ff4 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8018fc6:	4b13      	ldr	r3, [pc, #76]	; (8019014 <ip4_reass+0x330>)
 8018fc8:	681b      	ldr	r3, [r3, #0]
 8018fca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018fcc:	429a      	cmp	r2, r3
 8018fce:	d006      	beq.n	8018fde <ip4_reass+0x2fa>
 8018fd0:	4b0d      	ldr	r3, [pc, #52]	; (8019008 <ip4_reass+0x324>)
 8018fd2:	f240 22ab 	movw	r2, #683	; 0x2ab
 8018fd6:	4910      	ldr	r1, [pc, #64]	; (8019018 <ip4_reass+0x334>)
 8018fd8:	480d      	ldr	r0, [pc, #52]	; (8019010 <ip4_reass+0x32c>)
 8018fda:	f001 fbe3 	bl	801a7a4 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8018fde:	2100      	movs	r1, #0
 8018fe0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018fe2:	f7ff fce7 	bl	80189b4 <ip_reass_dequeue_datagram>
 8018fe6:	e006      	b.n	8018ff6 <ip4_reass+0x312>
    goto nullreturn;
 8018fe8:	bf00      	nop
 8018fea:	e004      	b.n	8018ff6 <ip4_reass+0x312>
    goto nullreturn;
 8018fec:	bf00      	nop
 8018fee:	e002      	b.n	8018ff6 <ip4_reass+0x312>
      goto nullreturn;
 8018ff0:	bf00      	nop
 8018ff2:	e000      	b.n	8018ff6 <ip4_reass+0x312>
  }

nullreturn:
 8018ff4:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8018ff6:	6878      	ldr	r0, [r7, #4]
 8018ff8:	f7f4 ff4e 	bl	800de98 <pbuf_free>
  return NULL;
 8018ffc:	2300      	movs	r3, #0
}
 8018ffe:	4618      	mov	r0, r3
 8019000:	3738      	adds	r7, #56	; 0x38
 8019002:	46bd      	mov	sp, r7
 8019004:	bd80      	pop	{r7, pc}
 8019006:	bf00      	nop
 8019008:	0801e728 	.word	0x0801e728
 801900c:	0801e8b4 	.word	0x0801e8b4
 8019010:	0801e770 	.word	0x0801e770
 8019014:	2000c0a8 	.word	0x2000c0a8
 8019018:	0801e8c0 	.word	0x0801e8c0

0801901c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801901c:	b580      	push	{r7, lr}
 801901e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8019020:	2005      	movs	r0, #5
 8019022:	f7f4 f885 	bl	800d130 <memp_malloc>
 8019026:	4603      	mov	r3, r0
}
 8019028:	4618      	mov	r0, r3
 801902a:	bd80      	pop	{r7, pc}

0801902c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801902c:	b580      	push	{r7, lr}
 801902e:	b082      	sub	sp, #8
 8019030:	af00      	add	r7, sp, #0
 8019032:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8019034:	687b      	ldr	r3, [r7, #4]
 8019036:	2b00      	cmp	r3, #0
 8019038:	d106      	bne.n	8019048 <ip_frag_free_pbuf_custom_ref+0x1c>
 801903a:	4b07      	ldr	r3, [pc, #28]	; (8019058 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801903c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8019040:	4906      	ldr	r1, [pc, #24]	; (801905c <ip_frag_free_pbuf_custom_ref+0x30>)
 8019042:	4807      	ldr	r0, [pc, #28]	; (8019060 <ip_frag_free_pbuf_custom_ref+0x34>)
 8019044:	f001 fbae 	bl	801a7a4 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8019048:	6879      	ldr	r1, [r7, #4]
 801904a:	2005      	movs	r0, #5
 801904c:	f7f4 f8e6 	bl	800d21c <memp_free>
}
 8019050:	bf00      	nop
 8019052:	3708      	adds	r7, #8
 8019054:	46bd      	mov	sp, r7
 8019056:	bd80      	pop	{r7, pc}
 8019058:	0801e728 	.word	0x0801e728
 801905c:	0801e8e0 	.word	0x0801e8e0
 8019060:	0801e770 	.word	0x0801e770

08019064 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8019064:	b580      	push	{r7, lr}
 8019066:	b084      	sub	sp, #16
 8019068:	af00      	add	r7, sp, #0
 801906a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801906c:	687b      	ldr	r3, [r7, #4]
 801906e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8019070:	68fb      	ldr	r3, [r7, #12]
 8019072:	2b00      	cmp	r3, #0
 8019074:	d106      	bne.n	8019084 <ipfrag_free_pbuf_custom+0x20>
 8019076:	4b11      	ldr	r3, [pc, #68]	; (80190bc <ipfrag_free_pbuf_custom+0x58>)
 8019078:	f240 22ce 	movw	r2, #718	; 0x2ce
 801907c:	4910      	ldr	r1, [pc, #64]	; (80190c0 <ipfrag_free_pbuf_custom+0x5c>)
 801907e:	4811      	ldr	r0, [pc, #68]	; (80190c4 <ipfrag_free_pbuf_custom+0x60>)
 8019080:	f001 fb90 	bl	801a7a4 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8019084:	68fa      	ldr	r2, [r7, #12]
 8019086:	687b      	ldr	r3, [r7, #4]
 8019088:	429a      	cmp	r2, r3
 801908a:	d006      	beq.n	801909a <ipfrag_free_pbuf_custom+0x36>
 801908c:	4b0b      	ldr	r3, [pc, #44]	; (80190bc <ipfrag_free_pbuf_custom+0x58>)
 801908e:	f240 22cf 	movw	r2, #719	; 0x2cf
 8019092:	490d      	ldr	r1, [pc, #52]	; (80190c8 <ipfrag_free_pbuf_custom+0x64>)
 8019094:	480b      	ldr	r0, [pc, #44]	; (80190c4 <ipfrag_free_pbuf_custom+0x60>)
 8019096:	f001 fb85 	bl	801a7a4 <iprintf>
  if (pcr->original != NULL) {
 801909a:	68fb      	ldr	r3, [r7, #12]
 801909c:	695b      	ldr	r3, [r3, #20]
 801909e:	2b00      	cmp	r3, #0
 80190a0:	d004      	beq.n	80190ac <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80190a2:	68fb      	ldr	r3, [r7, #12]
 80190a4:	695b      	ldr	r3, [r3, #20]
 80190a6:	4618      	mov	r0, r3
 80190a8:	f7f4 fef6 	bl	800de98 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80190ac:	68f8      	ldr	r0, [r7, #12]
 80190ae:	f7ff ffbd 	bl	801902c <ip_frag_free_pbuf_custom_ref>
}
 80190b2:	bf00      	nop
 80190b4:	3710      	adds	r7, #16
 80190b6:	46bd      	mov	sp, r7
 80190b8:	bd80      	pop	{r7, pc}
 80190ba:	bf00      	nop
 80190bc:	0801e728 	.word	0x0801e728
 80190c0:	0801e8ec 	.word	0x0801e8ec
 80190c4:	0801e770 	.word	0x0801e770
 80190c8:	0801e8f8 	.word	0x0801e8f8

080190cc <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80190cc:	b580      	push	{r7, lr}
 80190ce:	b094      	sub	sp, #80	; 0x50
 80190d0:	af02      	add	r7, sp, #8
 80190d2:	60f8      	str	r0, [r7, #12]
 80190d4:	60b9      	str	r1, [r7, #8]
 80190d6:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80190d8:	2300      	movs	r3, #0
 80190da:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80190de:	68bb      	ldr	r3, [r7, #8]
 80190e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80190e2:	3b14      	subs	r3, #20
 80190e4:	2b00      	cmp	r3, #0
 80190e6:	da00      	bge.n	80190ea <ip4_frag+0x1e>
 80190e8:	3307      	adds	r3, #7
 80190ea:	10db      	asrs	r3, r3, #3
 80190ec:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80190ee:	2314      	movs	r3, #20
 80190f0:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80190f2:	68fb      	ldr	r3, [r7, #12]
 80190f4:	685b      	ldr	r3, [r3, #4]
 80190f6:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 80190f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80190fa:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80190fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80190fe:	781b      	ldrb	r3, [r3, #0]
 8019100:	f003 030f 	and.w	r3, r3, #15
 8019104:	b2db      	uxtb	r3, r3
 8019106:	009b      	lsls	r3, r3, #2
 8019108:	b2db      	uxtb	r3, r3
 801910a:	2b14      	cmp	r3, #20
 801910c:	d002      	beq.n	8019114 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801910e:	f06f 0305 	mvn.w	r3, #5
 8019112:	e110      	b.n	8019336 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8019114:	68fb      	ldr	r3, [r7, #12]
 8019116:	895b      	ldrh	r3, [r3, #10]
 8019118:	2b13      	cmp	r3, #19
 801911a:	d809      	bhi.n	8019130 <ip4_frag+0x64>
 801911c:	4b88      	ldr	r3, [pc, #544]	; (8019340 <ip4_frag+0x274>)
 801911e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8019122:	4988      	ldr	r1, [pc, #544]	; (8019344 <ip4_frag+0x278>)
 8019124:	4888      	ldr	r0, [pc, #544]	; (8019348 <ip4_frag+0x27c>)
 8019126:	f001 fb3d 	bl	801a7a4 <iprintf>
 801912a:	f06f 0305 	mvn.w	r3, #5
 801912e:	e102      	b.n	8019336 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8019130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019132:	88db      	ldrh	r3, [r3, #6]
 8019134:	b29b      	uxth	r3, r3
 8019136:	4618      	mov	r0, r3
 8019138:	f7f3 fa4a 	bl	800c5d0 <lwip_htons>
 801913c:	4603      	mov	r3, r0
 801913e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8019140:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8019142:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019146:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801914a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801914c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8019150:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8019152:	68fb      	ldr	r3, [r7, #12]
 8019154:	891b      	ldrh	r3, [r3, #8]
 8019156:	3b14      	subs	r3, #20
 8019158:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801915c:	e0e1      	b.n	8019322 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801915e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8019160:	00db      	lsls	r3, r3, #3
 8019162:	b29b      	uxth	r3, r3
 8019164:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8019168:	4293      	cmp	r3, r2
 801916a:	bf28      	it	cs
 801916c:	4613      	movcs	r3, r2
 801916e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8019170:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019174:	2114      	movs	r1, #20
 8019176:	200e      	movs	r0, #14
 8019178:	f7f4 fbaa 	bl	800d8d0 <pbuf_alloc>
 801917c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801917e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019180:	2b00      	cmp	r3, #0
 8019182:	f000 80d5 	beq.w	8019330 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8019186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019188:	895b      	ldrh	r3, [r3, #10]
 801918a:	2b13      	cmp	r3, #19
 801918c:	d806      	bhi.n	801919c <ip4_frag+0xd0>
 801918e:	4b6c      	ldr	r3, [pc, #432]	; (8019340 <ip4_frag+0x274>)
 8019190:	f44f 7249 	mov.w	r2, #804	; 0x324
 8019194:	496d      	ldr	r1, [pc, #436]	; (801934c <ip4_frag+0x280>)
 8019196:	486c      	ldr	r0, [pc, #432]	; (8019348 <ip4_frag+0x27c>)
 8019198:	f001 fb04 	bl	801a7a4 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801919c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801919e:	685b      	ldr	r3, [r3, #4]
 80191a0:	2214      	movs	r2, #20
 80191a2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80191a4:	4618      	mov	r0, r3
 80191a6:	f001 fa09 	bl	801a5bc <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80191aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80191ac:	685b      	ldr	r3, [r3, #4]
 80191ae:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 80191b0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80191b2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 80191b6:	e064      	b.n	8019282 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80191b8:	68fb      	ldr	r3, [r7, #12]
 80191ba:	895a      	ldrh	r2, [r3, #10]
 80191bc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80191be:	1ad3      	subs	r3, r2, r3
 80191c0:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80191c2:	68fb      	ldr	r3, [r7, #12]
 80191c4:	895b      	ldrh	r3, [r3, #10]
 80191c6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80191c8:	429a      	cmp	r2, r3
 80191ca:	d906      	bls.n	80191da <ip4_frag+0x10e>
 80191cc:	4b5c      	ldr	r3, [pc, #368]	; (8019340 <ip4_frag+0x274>)
 80191ce:	f240 322d 	movw	r2, #813	; 0x32d
 80191d2:	495f      	ldr	r1, [pc, #380]	; (8019350 <ip4_frag+0x284>)
 80191d4:	485c      	ldr	r0, [pc, #368]	; (8019348 <ip4_frag+0x27c>)
 80191d6:	f001 fae5 	bl	801a7a4 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80191da:	8bfa      	ldrh	r2, [r7, #30]
 80191dc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80191e0:	4293      	cmp	r3, r2
 80191e2:	bf28      	it	cs
 80191e4:	4613      	movcs	r3, r2
 80191e6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80191ea:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80191ee:	2b00      	cmp	r3, #0
 80191f0:	d105      	bne.n	80191fe <ip4_frag+0x132>
        poff = 0;
 80191f2:	2300      	movs	r3, #0
 80191f4:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80191f6:	68fb      	ldr	r3, [r7, #12]
 80191f8:	681b      	ldr	r3, [r3, #0]
 80191fa:	60fb      	str	r3, [r7, #12]
        continue;
 80191fc:	e041      	b.n	8019282 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80191fe:	f7ff ff0d 	bl	801901c <ip_frag_alloc_pbuf_custom_ref>
 8019202:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8019204:	69bb      	ldr	r3, [r7, #24]
 8019206:	2b00      	cmp	r3, #0
 8019208:	d103      	bne.n	8019212 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801920a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801920c:	f7f4 fe44 	bl	800de98 <pbuf_free>
        goto memerr;
 8019210:	e08f      	b.n	8019332 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8019212:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8019214:	68fb      	ldr	r3, [r7, #12]
 8019216:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8019218:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801921a:	4413      	add	r3, r2
 801921c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8019220:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8019224:	9201      	str	r2, [sp, #4]
 8019226:	9300      	str	r3, [sp, #0]
 8019228:	4603      	mov	r3, r0
 801922a:	2241      	movs	r2, #65	; 0x41
 801922c:	2000      	movs	r0, #0
 801922e:	f7f4 fc79 	bl	800db24 <pbuf_alloced_custom>
 8019232:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8019234:	697b      	ldr	r3, [r7, #20]
 8019236:	2b00      	cmp	r3, #0
 8019238:	d106      	bne.n	8019248 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801923a:	69b8      	ldr	r0, [r7, #24]
 801923c:	f7ff fef6 	bl	801902c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8019240:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019242:	f7f4 fe29 	bl	800de98 <pbuf_free>
        goto memerr;
 8019246:	e074      	b.n	8019332 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8019248:	68f8      	ldr	r0, [r7, #12]
 801924a:	f7f4 fec9 	bl	800dfe0 <pbuf_ref>
      pcr->original = p;
 801924e:	69bb      	ldr	r3, [r7, #24]
 8019250:	68fa      	ldr	r2, [r7, #12]
 8019252:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8019254:	69bb      	ldr	r3, [r7, #24]
 8019256:	4a3f      	ldr	r2, [pc, #252]	; (8019354 <ip4_frag+0x288>)
 8019258:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801925a:	6979      	ldr	r1, [r7, #20]
 801925c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801925e:	f7f4 fee7 	bl	800e030 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8019262:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8019266:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801926a:	1ad3      	subs	r3, r2, r3
 801926c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8019270:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8019274:	2b00      	cmp	r3, #0
 8019276:	d004      	beq.n	8019282 <ip4_frag+0x1b6>
        poff = 0;
 8019278:	2300      	movs	r3, #0
 801927a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801927c:	68fb      	ldr	r3, [r7, #12]
 801927e:	681b      	ldr	r3, [r3, #0]
 8019280:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8019282:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8019286:	2b00      	cmp	r3, #0
 8019288:	d196      	bne.n	80191b8 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801928a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801928c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8019290:	4413      	add	r3, r2
 8019292:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8019294:	68bb      	ldr	r3, [r7, #8]
 8019296:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019298:	f1a3 0213 	sub.w	r2, r3, #19
 801929c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80192a0:	429a      	cmp	r2, r3
 80192a2:	bfcc      	ite	gt
 80192a4:	2301      	movgt	r3, #1
 80192a6:	2300      	movle	r3, #0
 80192a8:	b2db      	uxtb	r3, r3
 80192aa:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80192ac:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80192b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80192b4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 80192b6:	6a3b      	ldr	r3, [r7, #32]
 80192b8:	2b00      	cmp	r3, #0
 80192ba:	d002      	beq.n	80192c2 <ip4_frag+0x1f6>
 80192bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80192be:	2b00      	cmp	r3, #0
 80192c0:	d003      	beq.n	80192ca <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80192c2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80192c4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80192c8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80192ca:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80192cc:	4618      	mov	r0, r3
 80192ce:	f7f3 f97f 	bl	800c5d0 <lwip_htons>
 80192d2:	4603      	mov	r3, r0
 80192d4:	461a      	mov	r2, r3
 80192d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80192d8:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80192da:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80192dc:	3314      	adds	r3, #20
 80192de:	b29b      	uxth	r3, r3
 80192e0:	4618      	mov	r0, r3
 80192e2:	f7f3 f975 	bl	800c5d0 <lwip_htons>
 80192e6:	4603      	mov	r3, r0
 80192e8:	461a      	mov	r2, r3
 80192ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80192ec:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80192ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80192f0:	2200      	movs	r2, #0
 80192f2:	729a      	strb	r2, [r3, #10]
 80192f4:	2200      	movs	r2, #0
 80192f6:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80192f8:	68bb      	ldr	r3, [r7, #8]
 80192fa:	695b      	ldr	r3, [r3, #20]
 80192fc:	687a      	ldr	r2, [r7, #4]
 80192fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019300:	68b8      	ldr	r0, [r7, #8]
 8019302:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8019304:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019306:	f7f4 fdc7 	bl	800de98 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801930a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801930e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8019310:	1ad3      	subs	r3, r2, r3
 8019312:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8019316:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801931a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801931c:	4413      	add	r3, r2
 801931e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8019322:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8019326:	2b00      	cmp	r3, #0
 8019328:	f47f af19 	bne.w	801915e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801932c:	2300      	movs	r3, #0
 801932e:	e002      	b.n	8019336 <ip4_frag+0x26a>
      goto memerr;
 8019330:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8019332:	f04f 33ff 	mov.w	r3, #4294967295
}
 8019336:	4618      	mov	r0, r3
 8019338:	3748      	adds	r7, #72	; 0x48
 801933a:	46bd      	mov	sp, r7
 801933c:	bd80      	pop	{r7, pc}
 801933e:	bf00      	nop
 8019340:	0801e728 	.word	0x0801e728
 8019344:	0801e904 	.word	0x0801e904
 8019348:	0801e770 	.word	0x0801e770
 801934c:	0801e920 	.word	0x0801e920
 8019350:	0801e940 	.word	0x0801e940
 8019354:	08019065 	.word	0x08019065

08019358 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8019358:	b580      	push	{r7, lr}
 801935a:	b086      	sub	sp, #24
 801935c:	af00      	add	r7, sp, #0
 801935e:	6078      	str	r0, [r7, #4]
 8019360:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8019362:	230e      	movs	r3, #14
 8019364:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8019366:	687b      	ldr	r3, [r7, #4]
 8019368:	895b      	ldrh	r3, [r3, #10]
 801936a:	2b0e      	cmp	r3, #14
 801936c:	d96e      	bls.n	801944c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801936e:	687b      	ldr	r3, [r7, #4]
 8019370:	7bdb      	ldrb	r3, [r3, #15]
 8019372:	2b00      	cmp	r3, #0
 8019374:	d106      	bne.n	8019384 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8019376:	683b      	ldr	r3, [r7, #0]
 8019378:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801937c:	3301      	adds	r3, #1
 801937e:	b2da      	uxtb	r2, r3
 8019380:	687b      	ldr	r3, [r7, #4]
 8019382:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8019384:	687b      	ldr	r3, [r7, #4]
 8019386:	685b      	ldr	r3, [r3, #4]
 8019388:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801938a:	693b      	ldr	r3, [r7, #16]
 801938c:	7b1a      	ldrb	r2, [r3, #12]
 801938e:	7b5b      	ldrb	r3, [r3, #13]
 8019390:	021b      	lsls	r3, r3, #8
 8019392:	4313      	orrs	r3, r2
 8019394:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8019396:	693b      	ldr	r3, [r7, #16]
 8019398:	781b      	ldrb	r3, [r3, #0]
 801939a:	f003 0301 	and.w	r3, r3, #1
 801939e:	2b00      	cmp	r3, #0
 80193a0:	d023      	beq.n	80193ea <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80193a2:	693b      	ldr	r3, [r7, #16]
 80193a4:	781b      	ldrb	r3, [r3, #0]
 80193a6:	2b01      	cmp	r3, #1
 80193a8:	d10f      	bne.n	80193ca <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80193aa:	693b      	ldr	r3, [r7, #16]
 80193ac:	785b      	ldrb	r3, [r3, #1]
 80193ae:	2b00      	cmp	r3, #0
 80193b0:	d11b      	bne.n	80193ea <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80193b2:	693b      	ldr	r3, [r7, #16]
 80193b4:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80193b6:	2b5e      	cmp	r3, #94	; 0x5e
 80193b8:	d117      	bne.n	80193ea <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80193ba:	687b      	ldr	r3, [r7, #4]
 80193bc:	7b5b      	ldrb	r3, [r3, #13]
 80193be:	f043 0310 	orr.w	r3, r3, #16
 80193c2:	b2da      	uxtb	r2, r3
 80193c4:	687b      	ldr	r3, [r7, #4]
 80193c6:	735a      	strb	r2, [r3, #13]
 80193c8:	e00f      	b.n	80193ea <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80193ca:	693b      	ldr	r3, [r7, #16]
 80193cc:	2206      	movs	r2, #6
 80193ce:	4928      	ldr	r1, [pc, #160]	; (8019470 <ethernet_input+0x118>)
 80193d0:	4618      	mov	r0, r3
 80193d2:	f001 f8e3 	bl	801a59c <memcmp>
 80193d6:	4603      	mov	r3, r0
 80193d8:	2b00      	cmp	r3, #0
 80193da:	d106      	bne.n	80193ea <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80193dc:	687b      	ldr	r3, [r7, #4]
 80193de:	7b5b      	ldrb	r3, [r3, #13]
 80193e0:	f043 0308 	orr.w	r3, r3, #8
 80193e4:	b2da      	uxtb	r2, r3
 80193e6:	687b      	ldr	r3, [r7, #4]
 80193e8:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80193ea:	89fb      	ldrh	r3, [r7, #14]
 80193ec:	2b08      	cmp	r3, #8
 80193ee:	d003      	beq.n	80193f8 <ethernet_input+0xa0>
 80193f0:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80193f4:	d014      	beq.n	8019420 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80193f6:	e032      	b.n	801945e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80193f8:	683b      	ldr	r3, [r7, #0]
 80193fa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80193fe:	f003 0308 	and.w	r3, r3, #8
 8019402:	2b00      	cmp	r3, #0
 8019404:	d024      	beq.n	8019450 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8019406:	8afb      	ldrh	r3, [r7, #22]
 8019408:	4619      	mov	r1, r3
 801940a:	6878      	ldr	r0, [r7, #4]
 801940c:	f7f4 fcbe 	bl	800dd8c <pbuf_remove_header>
 8019410:	4603      	mov	r3, r0
 8019412:	2b00      	cmp	r3, #0
 8019414:	d11e      	bne.n	8019454 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8019416:	6839      	ldr	r1, [r7, #0]
 8019418:	6878      	ldr	r0, [r7, #4]
 801941a:	f7fe ff05 	bl	8018228 <ip4_input>
      break;
 801941e:	e013      	b.n	8019448 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8019420:	683b      	ldr	r3, [r7, #0]
 8019422:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8019426:	f003 0308 	and.w	r3, r3, #8
 801942a:	2b00      	cmp	r3, #0
 801942c:	d014      	beq.n	8019458 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801942e:	8afb      	ldrh	r3, [r7, #22]
 8019430:	4619      	mov	r1, r3
 8019432:	6878      	ldr	r0, [r7, #4]
 8019434:	f7f4 fcaa 	bl	800dd8c <pbuf_remove_header>
 8019438:	4603      	mov	r3, r0
 801943a:	2b00      	cmp	r3, #0
 801943c:	d10e      	bne.n	801945c <ethernet_input+0x104>
        etharp_input(p, netif);
 801943e:	6839      	ldr	r1, [r7, #0]
 8019440:	6878      	ldr	r0, [r7, #4]
 8019442:	f7fe f87d 	bl	8017540 <etharp_input>
      break;
 8019446:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8019448:	2300      	movs	r3, #0
 801944a:	e00c      	b.n	8019466 <ethernet_input+0x10e>
    goto free_and_return;
 801944c:	bf00      	nop
 801944e:	e006      	b.n	801945e <ethernet_input+0x106>
        goto free_and_return;
 8019450:	bf00      	nop
 8019452:	e004      	b.n	801945e <ethernet_input+0x106>
        goto free_and_return;
 8019454:	bf00      	nop
 8019456:	e002      	b.n	801945e <ethernet_input+0x106>
        goto free_and_return;
 8019458:	bf00      	nop
 801945a:	e000      	b.n	801945e <ethernet_input+0x106>
        goto free_and_return;
 801945c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801945e:	6878      	ldr	r0, [r7, #4]
 8019460:	f7f4 fd1a 	bl	800de98 <pbuf_free>
  return ERR_OK;
 8019464:	2300      	movs	r3, #0
}
 8019466:	4618      	mov	r0, r3
 8019468:	3718      	adds	r7, #24
 801946a:	46bd      	mov	sp, r7
 801946c:	bd80      	pop	{r7, pc}
 801946e:	bf00      	nop
 8019470:	0801eb84 	.word	0x0801eb84

08019474 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8019474:	b580      	push	{r7, lr}
 8019476:	b086      	sub	sp, #24
 8019478:	af00      	add	r7, sp, #0
 801947a:	60f8      	str	r0, [r7, #12]
 801947c:	60b9      	str	r1, [r7, #8]
 801947e:	607a      	str	r2, [r7, #4]
 8019480:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8019482:	8c3b      	ldrh	r3, [r7, #32]
 8019484:	4618      	mov	r0, r3
 8019486:	f7f3 f8a3 	bl	800c5d0 <lwip_htons>
 801948a:	4603      	mov	r3, r0
 801948c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801948e:	210e      	movs	r1, #14
 8019490:	68b8      	ldr	r0, [r7, #8]
 8019492:	f7f4 fc6b 	bl	800dd6c <pbuf_add_header>
 8019496:	4603      	mov	r3, r0
 8019498:	2b00      	cmp	r3, #0
 801949a:	d125      	bne.n	80194e8 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801949c:	68bb      	ldr	r3, [r7, #8]
 801949e:	685b      	ldr	r3, [r3, #4]
 80194a0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80194a2:	693b      	ldr	r3, [r7, #16]
 80194a4:	8afa      	ldrh	r2, [r7, #22]
 80194a6:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80194a8:	693b      	ldr	r3, [r7, #16]
 80194aa:	2206      	movs	r2, #6
 80194ac:	6839      	ldr	r1, [r7, #0]
 80194ae:	4618      	mov	r0, r3
 80194b0:	f001 f884 	bl	801a5bc <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80194b4:	693b      	ldr	r3, [r7, #16]
 80194b6:	3306      	adds	r3, #6
 80194b8:	2206      	movs	r2, #6
 80194ba:	6879      	ldr	r1, [r7, #4]
 80194bc:	4618      	mov	r0, r3
 80194be:	f001 f87d 	bl	801a5bc <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80194c2:	68fb      	ldr	r3, [r7, #12]
 80194c4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80194c8:	2b06      	cmp	r3, #6
 80194ca:	d006      	beq.n	80194da <ethernet_output+0x66>
 80194cc:	4b0a      	ldr	r3, [pc, #40]	; (80194f8 <ethernet_output+0x84>)
 80194ce:	f44f 7299 	mov.w	r2, #306	; 0x132
 80194d2:	490a      	ldr	r1, [pc, #40]	; (80194fc <ethernet_output+0x88>)
 80194d4:	480a      	ldr	r0, [pc, #40]	; (8019500 <ethernet_output+0x8c>)
 80194d6:	f001 f965 	bl	801a7a4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80194da:	68fb      	ldr	r3, [r7, #12]
 80194dc:	699b      	ldr	r3, [r3, #24]
 80194de:	68b9      	ldr	r1, [r7, #8]
 80194e0:	68f8      	ldr	r0, [r7, #12]
 80194e2:	4798      	blx	r3
 80194e4:	4603      	mov	r3, r0
 80194e6:	e002      	b.n	80194ee <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80194e8:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80194ea:	f06f 0301 	mvn.w	r3, #1
}
 80194ee:	4618      	mov	r0, r3
 80194f0:	3718      	adds	r7, #24
 80194f2:	46bd      	mov	sp, r7
 80194f4:	bd80      	pop	{r7, pc}
 80194f6:	bf00      	nop
 80194f8:	0801e950 	.word	0x0801e950
 80194fc:	0801e988 	.word	0x0801e988
 8019500:	0801e9bc 	.word	0x0801e9bc

08019504 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8019504:	b580      	push	{r7, lr}
 8019506:	b086      	sub	sp, #24
 8019508:	af00      	add	r7, sp, #0
 801950a:	6078      	str	r0, [r7, #4]
 801950c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 801950e:	683b      	ldr	r3, [r7, #0]
 8019510:	60bb      	str	r3, [r7, #8]
 8019512:	2304      	movs	r3, #4
 8019514:	60fb      	str	r3, [r7, #12]
 8019516:	2300      	movs	r3, #0
 8019518:	613b      	str	r3, [r7, #16]
 801951a:	2300      	movs	r3, #0
 801951c:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801951e:	f107 0308 	add.w	r3, r7, #8
 8019522:	2100      	movs	r1, #0
 8019524:	4618      	mov	r0, r3
 8019526:	f7ee ff3b 	bl	80083a0 <osMessageCreate>
 801952a:	4602      	mov	r2, r0
 801952c:	687b      	ldr	r3, [r7, #4]
 801952e:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8019530:	687b      	ldr	r3, [r7, #4]
 8019532:	681b      	ldr	r3, [r3, #0]
 8019534:	2b00      	cmp	r3, #0
 8019536:	d102      	bne.n	801953e <sys_mbox_new+0x3a>
    return ERR_MEM;
 8019538:	f04f 33ff 	mov.w	r3, #4294967295
 801953c:	e000      	b.n	8019540 <sys_mbox_new+0x3c>

  return ERR_OK;
 801953e:	2300      	movs	r3, #0
}
 8019540:	4618      	mov	r0, r3
 8019542:	3718      	adds	r7, #24
 8019544:	46bd      	mov	sp, r7
 8019546:	bd80      	pop	{r7, pc}

08019548 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8019548:	b580      	push	{r7, lr}
 801954a:	b084      	sub	sp, #16
 801954c:	af00      	add	r7, sp, #0
 801954e:	6078      	str	r0, [r7, #4]
 8019550:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8019552:	687b      	ldr	r3, [r7, #4]
 8019554:	681b      	ldr	r3, [r3, #0]
 8019556:	6839      	ldr	r1, [r7, #0]
 8019558:	2200      	movs	r2, #0
 801955a:	4618      	mov	r0, r3
 801955c:	f7ee ff48 	bl	80083f0 <osMessagePut>
 8019560:	4603      	mov	r3, r0
 8019562:	2b00      	cmp	r3, #0
 8019564:	d102      	bne.n	801956c <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8019566:	2300      	movs	r3, #0
 8019568:	73fb      	strb	r3, [r7, #15]
 801956a:	e001      	b.n	8019570 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801956c:	23ff      	movs	r3, #255	; 0xff
 801956e:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8019570:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8019574:	4618      	mov	r0, r3
 8019576:	3710      	adds	r7, #16
 8019578:	46bd      	mov	sp, r7
 801957a:	bd80      	pop	{r7, pc}

0801957c <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801957c:	b580      	push	{r7, lr}
 801957e:	b08c      	sub	sp, #48	; 0x30
 8019580:	af00      	add	r7, sp, #0
 8019582:	61f8      	str	r0, [r7, #28]
 8019584:	61b9      	str	r1, [r7, #24]
 8019586:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8019588:	f7ee fd7a 	bl	8008080 <osKernelSysTick>
 801958c:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801958e:	697b      	ldr	r3, [r7, #20]
 8019590:	2b00      	cmp	r3, #0
 8019592:	d017      	beq.n	80195c4 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8019594:	69fb      	ldr	r3, [r7, #28]
 8019596:	6819      	ldr	r1, [r3, #0]
 8019598:	f107 0320 	add.w	r3, r7, #32
 801959c:	697a      	ldr	r2, [r7, #20]
 801959e:	4618      	mov	r0, r3
 80195a0:	f7ee ff66 	bl	8008470 <osMessageGet>

    if(event.status == osEventMessage)
 80195a4:	6a3b      	ldr	r3, [r7, #32]
 80195a6:	2b10      	cmp	r3, #16
 80195a8:	d109      	bne.n	80195be <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 80195aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80195ac:	461a      	mov	r2, r3
 80195ae:	69bb      	ldr	r3, [r7, #24]
 80195b0:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 80195b2:	f7ee fd65 	bl	8008080 <osKernelSysTick>
 80195b6:	4602      	mov	r2, r0
 80195b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80195ba:	1ad3      	subs	r3, r2, r3
 80195bc:	e019      	b.n	80195f2 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 80195be:	f04f 33ff 	mov.w	r3, #4294967295
 80195c2:	e016      	b.n	80195f2 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 80195c4:	69fb      	ldr	r3, [r7, #28]
 80195c6:	6819      	ldr	r1, [r3, #0]
 80195c8:	463b      	mov	r3, r7
 80195ca:	f04f 32ff 	mov.w	r2, #4294967295
 80195ce:	4618      	mov	r0, r3
 80195d0:	f7ee ff4e 	bl	8008470 <osMessageGet>
 80195d4:	f107 0320 	add.w	r3, r7, #32
 80195d8:	463a      	mov	r2, r7
 80195da:	ca07      	ldmia	r2, {r0, r1, r2}
 80195dc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 80195e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80195e2:	461a      	mov	r2, r3
 80195e4:	69bb      	ldr	r3, [r7, #24]
 80195e6:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 80195e8:	f7ee fd4a 	bl	8008080 <osKernelSysTick>
 80195ec:	4602      	mov	r2, r0
 80195ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80195f0:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 80195f2:	4618      	mov	r0, r3
 80195f4:	3730      	adds	r7, #48	; 0x30
 80195f6:	46bd      	mov	sp, r7
 80195f8:	bd80      	pop	{r7, pc}

080195fa <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 80195fa:	b480      	push	{r7}
 80195fc:	b083      	sub	sp, #12
 80195fe:	af00      	add	r7, sp, #0
 8019600:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8019602:	687b      	ldr	r3, [r7, #4]
 8019604:	681b      	ldr	r3, [r3, #0]
 8019606:	2b00      	cmp	r3, #0
 8019608:	d101      	bne.n	801960e <sys_mbox_valid+0x14>
    return 0;
 801960a:	2300      	movs	r3, #0
 801960c:	e000      	b.n	8019610 <sys_mbox_valid+0x16>
  else
    return 1;
 801960e:	2301      	movs	r3, #1
}
 8019610:	4618      	mov	r0, r3
 8019612:	370c      	adds	r7, #12
 8019614:	46bd      	mov	sp, r7
 8019616:	bc80      	pop	{r7}
 8019618:	4770      	bx	lr
	...

0801961c <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801961c:	b580      	push	{r7, lr}
 801961e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8019620:	4803      	ldr	r0, [pc, #12]	; (8019630 <sys_init+0x14>)
 8019622:	f7ee fd9d 	bl	8008160 <osMutexCreate>
 8019626:	4603      	mov	r3, r0
 8019628:	4a02      	ldr	r2, [pc, #8]	; (8019634 <sys_init+0x18>)
 801962a:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 801962c:	bf00      	nop
 801962e:	bd80      	pop	{r7, pc}
 8019630:	0801eb94 	.word	0x0801eb94
 8019634:	2000c0b0 	.word	0x2000c0b0

08019638 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8019638:	b580      	push	{r7, lr}
 801963a:	b084      	sub	sp, #16
 801963c:	af00      	add	r7, sp, #0
 801963e:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8019640:	2300      	movs	r3, #0
 8019642:	60bb      	str	r3, [r7, #8]
 8019644:	2300      	movs	r3, #0
 8019646:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8019648:	f107 0308 	add.w	r3, r7, #8
 801964c:	4618      	mov	r0, r3
 801964e:	f7ee fd87 	bl	8008160 <osMutexCreate>
 8019652:	4602      	mov	r2, r0
 8019654:	687b      	ldr	r3, [r7, #4]
 8019656:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8019658:	687b      	ldr	r3, [r7, #4]
 801965a:	681b      	ldr	r3, [r3, #0]
 801965c:	2b00      	cmp	r3, #0
 801965e:	d102      	bne.n	8019666 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8019660:	f04f 33ff 	mov.w	r3, #4294967295
 8019664:	e000      	b.n	8019668 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8019666:	2300      	movs	r3, #0
}
 8019668:	4618      	mov	r0, r3
 801966a:	3710      	adds	r7, #16
 801966c:	46bd      	mov	sp, r7
 801966e:	bd80      	pop	{r7, pc}

08019670 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8019670:	b580      	push	{r7, lr}
 8019672:	b082      	sub	sp, #8
 8019674:	af00      	add	r7, sp, #0
 8019676:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8019678:	687b      	ldr	r3, [r7, #4]
 801967a:	681b      	ldr	r3, [r3, #0]
 801967c:	f04f 31ff 	mov.w	r1, #4294967295
 8019680:	4618      	mov	r0, r3
 8019682:	f7ee fd85 	bl	8008190 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8019686:	bf00      	nop
 8019688:	3708      	adds	r7, #8
 801968a:	46bd      	mov	sp, r7
 801968c:	bd80      	pop	{r7, pc}

0801968e <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801968e:	b580      	push	{r7, lr}
 8019690:	b082      	sub	sp, #8
 8019692:	af00      	add	r7, sp, #0
 8019694:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8019696:	687b      	ldr	r3, [r7, #4]
 8019698:	681b      	ldr	r3, [r3, #0]
 801969a:	4618      	mov	r0, r3
 801969c:	f7ee fdc6 	bl	800822c <osMutexRelease>
}
 80196a0:	bf00      	nop
 80196a2:	3708      	adds	r7, #8
 80196a4:	46bd      	mov	sp, r7
 80196a6:	bd80      	pop	{r7, pc}

080196a8 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 80196a8:	b580      	push	{r7, lr}
 80196aa:	b08c      	sub	sp, #48	; 0x30
 80196ac:	af00      	add	r7, sp, #0
 80196ae:	60f8      	str	r0, [r7, #12]
 80196b0:	60b9      	str	r1, [r7, #8]
 80196b2:	607a      	str	r2, [r7, #4]
 80196b4:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 80196b6:	f107 0314 	add.w	r3, r7, #20
 80196ba:	2200      	movs	r2, #0
 80196bc:	601a      	str	r2, [r3, #0]
 80196be:	605a      	str	r2, [r3, #4]
 80196c0:	609a      	str	r2, [r3, #8]
 80196c2:	60da      	str	r2, [r3, #12]
 80196c4:	611a      	str	r2, [r3, #16]
 80196c6:	615a      	str	r2, [r3, #20]
 80196c8:	619a      	str	r2, [r3, #24]
 80196ca:	68fb      	ldr	r3, [r7, #12]
 80196cc:	617b      	str	r3, [r7, #20]
 80196ce:	68bb      	ldr	r3, [r7, #8]
 80196d0:	61bb      	str	r3, [r7, #24]
 80196d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80196d4:	b21b      	sxth	r3, r3
 80196d6:	83bb      	strh	r3, [r7, #28]
 80196d8:	683b      	ldr	r3, [r7, #0]
 80196da:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 80196dc:	f107 0314 	add.w	r3, r7, #20
 80196e0:	6879      	ldr	r1, [r7, #4]
 80196e2:	4618      	mov	r0, r3
 80196e4:	f7ee fcdc 	bl	80080a0 <osThreadCreate>
 80196e8:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 80196ea:	4618      	mov	r0, r3
 80196ec:	3730      	adds	r7, #48	; 0x30
 80196ee:	46bd      	mov	sp, r7
 80196f0:	bd80      	pop	{r7, pc}
	...

080196f4 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 80196f4:	b580      	push	{r7, lr}
 80196f6:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 80196f8:	4b04      	ldr	r3, [pc, #16]	; (801970c <sys_arch_protect+0x18>)
 80196fa:	681b      	ldr	r3, [r3, #0]
 80196fc:	f04f 31ff 	mov.w	r1, #4294967295
 8019700:	4618      	mov	r0, r3
 8019702:	f7ee fd45 	bl	8008190 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8019706:	2301      	movs	r3, #1
}
 8019708:	4618      	mov	r0, r3
 801970a:	bd80      	pop	{r7, pc}
 801970c:	2000c0b0 	.word	0x2000c0b0

08019710 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8019710:	b580      	push	{r7, lr}
 8019712:	b082      	sub	sp, #8
 8019714:	af00      	add	r7, sp, #0
 8019716:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8019718:	4b04      	ldr	r3, [pc, #16]	; (801972c <sys_arch_unprotect+0x1c>)
 801971a:	681b      	ldr	r3, [r3, #0]
 801971c:	4618      	mov	r0, r3
 801971e:	f7ee fd85 	bl	800822c <osMutexRelease>
}
 8019722:	bf00      	nop
 8019724:	3708      	adds	r7, #8
 8019726:	46bd      	mov	sp, r7
 8019728:	bd80      	pop	{r7, pc}
 801972a:	bf00      	nop
 801972c:	2000c0b0 	.word	0x2000c0b0

08019730 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8019730:	b580      	push	{r7, lr}
 8019732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8019734:	2200      	movs	r2, #0
 8019736:	4912      	ldr	r1, [pc, #72]	; (8019780 <MX_USB_DEVICE_Init+0x50>)
 8019738:	4812      	ldr	r0, [pc, #72]	; (8019784 <MX_USB_DEVICE_Init+0x54>)
 801973a:	f7ed f989 	bl	8006a50 <USBD_Init>
 801973e:	4603      	mov	r3, r0
 8019740:	2b00      	cmp	r3, #0
 8019742:	d001      	beq.n	8019748 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8019744:	f7e7 f868 	bl	8000818 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8019748:	490f      	ldr	r1, [pc, #60]	; (8019788 <MX_USB_DEVICE_Init+0x58>)
 801974a:	480e      	ldr	r0, [pc, #56]	; (8019784 <MX_USB_DEVICE_Init+0x54>)
 801974c:	f7ed f9b0 	bl	8006ab0 <USBD_RegisterClass>
 8019750:	4603      	mov	r3, r0
 8019752:	2b00      	cmp	r3, #0
 8019754:	d001      	beq.n	801975a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8019756:	f7e7 f85f 	bl	8000818 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801975a:	490c      	ldr	r1, [pc, #48]	; (801978c <MX_USB_DEVICE_Init+0x5c>)
 801975c:	4809      	ldr	r0, [pc, #36]	; (8019784 <MX_USB_DEVICE_Init+0x54>)
 801975e:	f7ed f8eb 	bl	8006938 <USBD_CDC_RegisterInterface>
 8019762:	4603      	mov	r3, r0
 8019764:	2b00      	cmp	r3, #0
 8019766:	d001      	beq.n	801976c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8019768:	f7e7 f856 	bl	8000818 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801976c:	4805      	ldr	r0, [pc, #20]	; (8019784 <MX_USB_DEVICE_Init+0x54>)
 801976e:	f7ed f9d5 	bl	8006b1c <USBD_Start>
 8019772:	4603      	mov	r3, r0
 8019774:	2b00      	cmp	r3, #0
 8019776:	d001      	beq.n	801977c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8019778:	f7e7 f84e 	bl	8000818 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801977c:	bf00      	nop
 801977e:	bd80      	pop	{r7, pc}
 8019780:	200000c0 	.word	0x200000c0
 8019784:	2000c0b4 	.word	0x2000c0b4
 8019788:	20000018 	.word	0x20000018
 801978c:	200000ac 	.word	0x200000ac

08019790 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8019790:	b580      	push	{r7, lr}
 8019792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8019794:	2200      	movs	r2, #0
 8019796:	4905      	ldr	r1, [pc, #20]	; (80197ac <CDC_Init_FS+0x1c>)
 8019798:	4805      	ldr	r0, [pc, #20]	; (80197b0 <CDC_Init_FS+0x20>)
 801979a:	f7ed f8e6 	bl	800696a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801979e:	4905      	ldr	r1, [pc, #20]	; (80197b4 <CDC_Init_FS+0x24>)
 80197a0:	4803      	ldr	r0, [pc, #12]	; (80197b0 <CDC_Init_FS+0x20>)
 80197a2:	f7ed f903 	bl	80069ac <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80197a6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80197a8:	4618      	mov	r0, r3
 80197aa:	bd80      	pop	{r7, pc}
 80197ac:	2000cb90 	.word	0x2000cb90
 80197b0:	2000c0b4 	.word	0x2000c0b4
 80197b4:	2000c390 	.word	0x2000c390

080197b8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80197b8:	b480      	push	{r7}
 80197ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80197bc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80197be:	4618      	mov	r0, r3
 80197c0:	46bd      	mov	sp, r7
 80197c2:	bc80      	pop	{r7}
 80197c4:	4770      	bx	lr
	...

080197c8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80197c8:	b480      	push	{r7}
 80197ca:	b083      	sub	sp, #12
 80197cc:	af00      	add	r7, sp, #0
 80197ce:	4603      	mov	r3, r0
 80197d0:	6039      	str	r1, [r7, #0]
 80197d2:	71fb      	strb	r3, [r7, #7]
 80197d4:	4613      	mov	r3, r2
 80197d6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80197d8:	79fb      	ldrb	r3, [r7, #7]
 80197da:	2b23      	cmp	r3, #35	; 0x23
 80197dc:	d84a      	bhi.n	8019874 <CDC_Control_FS+0xac>
 80197de:	a201      	add	r2, pc, #4	; (adr r2, 80197e4 <CDC_Control_FS+0x1c>)
 80197e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80197e4:	08019875 	.word	0x08019875
 80197e8:	08019875 	.word	0x08019875
 80197ec:	08019875 	.word	0x08019875
 80197f0:	08019875 	.word	0x08019875
 80197f4:	08019875 	.word	0x08019875
 80197f8:	08019875 	.word	0x08019875
 80197fc:	08019875 	.word	0x08019875
 8019800:	08019875 	.word	0x08019875
 8019804:	08019875 	.word	0x08019875
 8019808:	08019875 	.word	0x08019875
 801980c:	08019875 	.word	0x08019875
 8019810:	08019875 	.word	0x08019875
 8019814:	08019875 	.word	0x08019875
 8019818:	08019875 	.word	0x08019875
 801981c:	08019875 	.word	0x08019875
 8019820:	08019875 	.word	0x08019875
 8019824:	08019875 	.word	0x08019875
 8019828:	08019875 	.word	0x08019875
 801982c:	08019875 	.word	0x08019875
 8019830:	08019875 	.word	0x08019875
 8019834:	08019875 	.word	0x08019875
 8019838:	08019875 	.word	0x08019875
 801983c:	08019875 	.word	0x08019875
 8019840:	08019875 	.word	0x08019875
 8019844:	08019875 	.word	0x08019875
 8019848:	08019875 	.word	0x08019875
 801984c:	08019875 	.word	0x08019875
 8019850:	08019875 	.word	0x08019875
 8019854:	08019875 	.word	0x08019875
 8019858:	08019875 	.word	0x08019875
 801985c:	08019875 	.word	0x08019875
 8019860:	08019875 	.word	0x08019875
 8019864:	08019875 	.word	0x08019875
 8019868:	08019875 	.word	0x08019875
 801986c:	08019875 	.word	0x08019875
 8019870:	08019875 	.word	0x08019875
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8019874:	bf00      	nop
  }

  return (USBD_OK);
 8019876:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8019878:	4618      	mov	r0, r3
 801987a:	370c      	adds	r7, #12
 801987c:	46bd      	mov	sp, r7
 801987e:	bc80      	pop	{r7}
 8019880:	4770      	bx	lr
 8019882:	bf00      	nop

08019884 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8019884:	b580      	push	{r7, lr}
 8019886:	b082      	sub	sp, #8
 8019888:	af00      	add	r7, sp, #0
 801988a:	6078      	str	r0, [r7, #4]
 801988c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801988e:	6879      	ldr	r1, [r7, #4]
 8019890:	4805      	ldr	r0, [pc, #20]	; (80198a8 <CDC_Receive_FS+0x24>)
 8019892:	f7ed f88b 	bl	80069ac <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8019896:	4804      	ldr	r0, [pc, #16]	; (80198a8 <CDC_Receive_FS+0x24>)
 8019898:	f7ed f8a4 	bl	80069e4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 801989c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801989e:	4618      	mov	r0, r3
 80198a0:	3708      	adds	r7, #8
 80198a2:	46bd      	mov	sp, r7
 80198a4:	bd80      	pop	{r7, pc}
 80198a6:	bf00      	nop
 80198a8:	2000c0b4 	.word	0x2000c0b4

080198ac <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80198ac:	b480      	push	{r7}
 80198ae:	b087      	sub	sp, #28
 80198b0:	af00      	add	r7, sp, #0
 80198b2:	60f8      	str	r0, [r7, #12]
 80198b4:	60b9      	str	r1, [r7, #8]
 80198b6:	4613      	mov	r3, r2
 80198b8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80198ba:	2300      	movs	r3, #0
 80198bc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80198be:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80198c2:	4618      	mov	r0, r3
 80198c4:	371c      	adds	r7, #28
 80198c6:	46bd      	mov	sp, r7
 80198c8:	bc80      	pop	{r7}
 80198ca:	4770      	bx	lr

080198cc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80198cc:	b480      	push	{r7}
 80198ce:	b083      	sub	sp, #12
 80198d0:	af00      	add	r7, sp, #0
 80198d2:	4603      	mov	r3, r0
 80198d4:	6039      	str	r1, [r7, #0]
 80198d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80198d8:	683b      	ldr	r3, [r7, #0]
 80198da:	2212      	movs	r2, #18
 80198dc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80198de:	4b03      	ldr	r3, [pc, #12]	; (80198ec <USBD_FS_DeviceDescriptor+0x20>)
}
 80198e0:	4618      	mov	r0, r3
 80198e2:	370c      	adds	r7, #12
 80198e4:	46bd      	mov	sp, r7
 80198e6:	bc80      	pop	{r7}
 80198e8:	4770      	bx	lr
 80198ea:	bf00      	nop
 80198ec:	200000dc 	.word	0x200000dc

080198f0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80198f0:	b480      	push	{r7}
 80198f2:	b083      	sub	sp, #12
 80198f4:	af00      	add	r7, sp, #0
 80198f6:	4603      	mov	r3, r0
 80198f8:	6039      	str	r1, [r7, #0]
 80198fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80198fc:	683b      	ldr	r3, [r7, #0]
 80198fe:	2204      	movs	r2, #4
 8019900:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8019902:	4b03      	ldr	r3, [pc, #12]	; (8019910 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8019904:	4618      	mov	r0, r3
 8019906:	370c      	adds	r7, #12
 8019908:	46bd      	mov	sp, r7
 801990a:	bc80      	pop	{r7}
 801990c:	4770      	bx	lr
 801990e:	bf00      	nop
 8019910:	200000f0 	.word	0x200000f0

08019914 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019914:	b580      	push	{r7, lr}
 8019916:	b082      	sub	sp, #8
 8019918:	af00      	add	r7, sp, #0
 801991a:	4603      	mov	r3, r0
 801991c:	6039      	str	r1, [r7, #0]
 801991e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8019920:	79fb      	ldrb	r3, [r7, #7]
 8019922:	2b00      	cmp	r3, #0
 8019924:	d105      	bne.n	8019932 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8019926:	683a      	ldr	r2, [r7, #0]
 8019928:	4907      	ldr	r1, [pc, #28]	; (8019948 <USBD_FS_ProductStrDescriptor+0x34>)
 801992a:	4808      	ldr	r0, [pc, #32]	; (801994c <USBD_FS_ProductStrDescriptor+0x38>)
 801992c:	f7ee fa9a 	bl	8007e64 <USBD_GetString>
 8019930:	e004      	b.n	801993c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8019932:	683a      	ldr	r2, [r7, #0]
 8019934:	4904      	ldr	r1, [pc, #16]	; (8019948 <USBD_FS_ProductStrDescriptor+0x34>)
 8019936:	4805      	ldr	r0, [pc, #20]	; (801994c <USBD_FS_ProductStrDescriptor+0x38>)
 8019938:	f7ee fa94 	bl	8007e64 <USBD_GetString>
  }
  return USBD_StrDesc;
 801993c:	4b02      	ldr	r3, [pc, #8]	; (8019948 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801993e:	4618      	mov	r0, r3
 8019940:	3708      	adds	r7, #8
 8019942:	46bd      	mov	sp, r7
 8019944:	bd80      	pop	{r7, pc}
 8019946:	bf00      	nop
 8019948:	2000d390 	.word	0x2000d390
 801994c:	0801e9e4 	.word	0x0801e9e4

08019950 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019950:	b580      	push	{r7, lr}
 8019952:	b082      	sub	sp, #8
 8019954:	af00      	add	r7, sp, #0
 8019956:	4603      	mov	r3, r0
 8019958:	6039      	str	r1, [r7, #0]
 801995a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801995c:	683a      	ldr	r2, [r7, #0]
 801995e:	4904      	ldr	r1, [pc, #16]	; (8019970 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8019960:	4804      	ldr	r0, [pc, #16]	; (8019974 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8019962:	f7ee fa7f 	bl	8007e64 <USBD_GetString>
  return USBD_StrDesc;
 8019966:	4b02      	ldr	r3, [pc, #8]	; (8019970 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8019968:	4618      	mov	r0, r3
 801996a:	3708      	adds	r7, #8
 801996c:	46bd      	mov	sp, r7
 801996e:	bd80      	pop	{r7, pc}
 8019970:	2000d390 	.word	0x2000d390
 8019974:	0801e9fc 	.word	0x0801e9fc

08019978 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019978:	b580      	push	{r7, lr}
 801997a:	b082      	sub	sp, #8
 801997c:	af00      	add	r7, sp, #0
 801997e:	4603      	mov	r3, r0
 8019980:	6039      	str	r1, [r7, #0]
 8019982:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8019984:	683b      	ldr	r3, [r7, #0]
 8019986:	221a      	movs	r2, #26
 8019988:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801998a:	f000 f843 	bl	8019a14 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801998e:	4b02      	ldr	r3, [pc, #8]	; (8019998 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8019990:	4618      	mov	r0, r3
 8019992:	3708      	adds	r7, #8
 8019994:	46bd      	mov	sp, r7
 8019996:	bd80      	pop	{r7, pc}
 8019998:	200000f4 	.word	0x200000f4

0801999c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801999c:	b580      	push	{r7, lr}
 801999e:	b082      	sub	sp, #8
 80199a0:	af00      	add	r7, sp, #0
 80199a2:	4603      	mov	r3, r0
 80199a4:	6039      	str	r1, [r7, #0]
 80199a6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80199a8:	79fb      	ldrb	r3, [r7, #7]
 80199aa:	2b00      	cmp	r3, #0
 80199ac:	d105      	bne.n	80199ba <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80199ae:	683a      	ldr	r2, [r7, #0]
 80199b0:	4907      	ldr	r1, [pc, #28]	; (80199d0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80199b2:	4808      	ldr	r0, [pc, #32]	; (80199d4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80199b4:	f7ee fa56 	bl	8007e64 <USBD_GetString>
 80199b8:	e004      	b.n	80199c4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80199ba:	683a      	ldr	r2, [r7, #0]
 80199bc:	4904      	ldr	r1, [pc, #16]	; (80199d0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80199be:	4805      	ldr	r0, [pc, #20]	; (80199d4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80199c0:	f7ee fa50 	bl	8007e64 <USBD_GetString>
  }
  return USBD_StrDesc;
 80199c4:	4b02      	ldr	r3, [pc, #8]	; (80199d0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80199c6:	4618      	mov	r0, r3
 80199c8:	3708      	adds	r7, #8
 80199ca:	46bd      	mov	sp, r7
 80199cc:	bd80      	pop	{r7, pc}
 80199ce:	bf00      	nop
 80199d0:	2000d390 	.word	0x2000d390
 80199d4:	0801ea10 	.word	0x0801ea10

080199d8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80199d8:	b580      	push	{r7, lr}
 80199da:	b082      	sub	sp, #8
 80199dc:	af00      	add	r7, sp, #0
 80199de:	4603      	mov	r3, r0
 80199e0:	6039      	str	r1, [r7, #0]
 80199e2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80199e4:	79fb      	ldrb	r3, [r7, #7]
 80199e6:	2b00      	cmp	r3, #0
 80199e8:	d105      	bne.n	80199f6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80199ea:	683a      	ldr	r2, [r7, #0]
 80199ec:	4907      	ldr	r1, [pc, #28]	; (8019a0c <USBD_FS_InterfaceStrDescriptor+0x34>)
 80199ee:	4808      	ldr	r0, [pc, #32]	; (8019a10 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80199f0:	f7ee fa38 	bl	8007e64 <USBD_GetString>
 80199f4:	e004      	b.n	8019a00 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80199f6:	683a      	ldr	r2, [r7, #0]
 80199f8:	4904      	ldr	r1, [pc, #16]	; (8019a0c <USBD_FS_InterfaceStrDescriptor+0x34>)
 80199fa:	4805      	ldr	r0, [pc, #20]	; (8019a10 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80199fc:	f7ee fa32 	bl	8007e64 <USBD_GetString>
  }
  return USBD_StrDesc;
 8019a00:	4b02      	ldr	r3, [pc, #8]	; (8019a0c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8019a02:	4618      	mov	r0, r3
 8019a04:	3708      	adds	r7, #8
 8019a06:	46bd      	mov	sp, r7
 8019a08:	bd80      	pop	{r7, pc}
 8019a0a:	bf00      	nop
 8019a0c:	2000d390 	.word	0x2000d390
 8019a10:	0801ea1c 	.word	0x0801ea1c

08019a14 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8019a14:	b580      	push	{r7, lr}
 8019a16:	b084      	sub	sp, #16
 8019a18:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8019a1a:	4b0f      	ldr	r3, [pc, #60]	; (8019a58 <Get_SerialNum+0x44>)
 8019a1c:	681b      	ldr	r3, [r3, #0]
 8019a1e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8019a20:	4b0e      	ldr	r3, [pc, #56]	; (8019a5c <Get_SerialNum+0x48>)
 8019a22:	681b      	ldr	r3, [r3, #0]
 8019a24:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8019a26:	4b0e      	ldr	r3, [pc, #56]	; (8019a60 <Get_SerialNum+0x4c>)
 8019a28:	681b      	ldr	r3, [r3, #0]
 8019a2a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8019a2c:	68fa      	ldr	r2, [r7, #12]
 8019a2e:	687b      	ldr	r3, [r7, #4]
 8019a30:	4413      	add	r3, r2
 8019a32:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8019a34:	68fb      	ldr	r3, [r7, #12]
 8019a36:	2b00      	cmp	r3, #0
 8019a38:	d009      	beq.n	8019a4e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8019a3a:	2208      	movs	r2, #8
 8019a3c:	4909      	ldr	r1, [pc, #36]	; (8019a64 <Get_SerialNum+0x50>)
 8019a3e:	68f8      	ldr	r0, [r7, #12]
 8019a40:	f000 f814 	bl	8019a6c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8019a44:	2204      	movs	r2, #4
 8019a46:	4908      	ldr	r1, [pc, #32]	; (8019a68 <Get_SerialNum+0x54>)
 8019a48:	68b8      	ldr	r0, [r7, #8]
 8019a4a:	f000 f80f 	bl	8019a6c <IntToUnicode>
  }
}
 8019a4e:	bf00      	nop
 8019a50:	3710      	adds	r7, #16
 8019a52:	46bd      	mov	sp, r7
 8019a54:	bd80      	pop	{r7, pc}
 8019a56:	bf00      	nop
 8019a58:	1fff7a10 	.word	0x1fff7a10
 8019a5c:	1fff7a14 	.word	0x1fff7a14
 8019a60:	1fff7a18 	.word	0x1fff7a18
 8019a64:	200000f6 	.word	0x200000f6
 8019a68:	20000106 	.word	0x20000106

08019a6c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8019a6c:	b480      	push	{r7}
 8019a6e:	b087      	sub	sp, #28
 8019a70:	af00      	add	r7, sp, #0
 8019a72:	60f8      	str	r0, [r7, #12]
 8019a74:	60b9      	str	r1, [r7, #8]
 8019a76:	4613      	mov	r3, r2
 8019a78:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8019a7a:	2300      	movs	r3, #0
 8019a7c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8019a7e:	2300      	movs	r3, #0
 8019a80:	75fb      	strb	r3, [r7, #23]
 8019a82:	e027      	b.n	8019ad4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8019a84:	68fb      	ldr	r3, [r7, #12]
 8019a86:	0f1b      	lsrs	r3, r3, #28
 8019a88:	2b09      	cmp	r3, #9
 8019a8a:	d80b      	bhi.n	8019aa4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8019a8c:	68fb      	ldr	r3, [r7, #12]
 8019a8e:	0f1b      	lsrs	r3, r3, #28
 8019a90:	b2da      	uxtb	r2, r3
 8019a92:	7dfb      	ldrb	r3, [r7, #23]
 8019a94:	005b      	lsls	r3, r3, #1
 8019a96:	4619      	mov	r1, r3
 8019a98:	68bb      	ldr	r3, [r7, #8]
 8019a9a:	440b      	add	r3, r1
 8019a9c:	3230      	adds	r2, #48	; 0x30
 8019a9e:	b2d2      	uxtb	r2, r2
 8019aa0:	701a      	strb	r2, [r3, #0]
 8019aa2:	e00a      	b.n	8019aba <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8019aa4:	68fb      	ldr	r3, [r7, #12]
 8019aa6:	0f1b      	lsrs	r3, r3, #28
 8019aa8:	b2da      	uxtb	r2, r3
 8019aaa:	7dfb      	ldrb	r3, [r7, #23]
 8019aac:	005b      	lsls	r3, r3, #1
 8019aae:	4619      	mov	r1, r3
 8019ab0:	68bb      	ldr	r3, [r7, #8]
 8019ab2:	440b      	add	r3, r1
 8019ab4:	3237      	adds	r2, #55	; 0x37
 8019ab6:	b2d2      	uxtb	r2, r2
 8019ab8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8019aba:	68fb      	ldr	r3, [r7, #12]
 8019abc:	011b      	lsls	r3, r3, #4
 8019abe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8019ac0:	7dfb      	ldrb	r3, [r7, #23]
 8019ac2:	005b      	lsls	r3, r3, #1
 8019ac4:	3301      	adds	r3, #1
 8019ac6:	68ba      	ldr	r2, [r7, #8]
 8019ac8:	4413      	add	r3, r2
 8019aca:	2200      	movs	r2, #0
 8019acc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8019ace:	7dfb      	ldrb	r3, [r7, #23]
 8019ad0:	3301      	adds	r3, #1
 8019ad2:	75fb      	strb	r3, [r7, #23]
 8019ad4:	7dfa      	ldrb	r2, [r7, #23]
 8019ad6:	79fb      	ldrb	r3, [r7, #7]
 8019ad8:	429a      	cmp	r2, r3
 8019ada:	d3d3      	bcc.n	8019a84 <IntToUnicode+0x18>
  }
}
 8019adc:	bf00      	nop
 8019ade:	bf00      	nop
 8019ae0:	371c      	adds	r7, #28
 8019ae2:	46bd      	mov	sp, r7
 8019ae4:	bc80      	pop	{r7}
 8019ae6:	4770      	bx	lr

08019ae8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8019ae8:	b580      	push	{r7, lr}
 8019aea:	b08a      	sub	sp, #40	; 0x28
 8019aec:	af00      	add	r7, sp, #0
 8019aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8019af0:	f107 0314 	add.w	r3, r7, #20
 8019af4:	2200      	movs	r2, #0
 8019af6:	601a      	str	r2, [r3, #0]
 8019af8:	605a      	str	r2, [r3, #4]
 8019afa:	609a      	str	r2, [r3, #8]
 8019afc:	60da      	str	r2, [r3, #12]
 8019afe:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8019b00:	687b      	ldr	r3, [r7, #4]
 8019b02:	681b      	ldr	r3, [r3, #0]
 8019b04:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8019b08:	d13a      	bne.n	8019b80 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8019b0a:	2300      	movs	r3, #0
 8019b0c:	613b      	str	r3, [r7, #16]
 8019b0e:	4b1e      	ldr	r3, [pc, #120]	; (8019b88 <HAL_PCD_MspInit+0xa0>)
 8019b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019b12:	4a1d      	ldr	r2, [pc, #116]	; (8019b88 <HAL_PCD_MspInit+0xa0>)
 8019b14:	f043 0301 	orr.w	r3, r3, #1
 8019b18:	6313      	str	r3, [r2, #48]	; 0x30
 8019b1a:	4b1b      	ldr	r3, [pc, #108]	; (8019b88 <HAL_PCD_MspInit+0xa0>)
 8019b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019b1e:	f003 0301 	and.w	r3, r3, #1
 8019b22:	613b      	str	r3, [r7, #16]
 8019b24:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8019b26:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8019b2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8019b2c:	2302      	movs	r3, #2
 8019b2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8019b30:	2300      	movs	r3, #0
 8019b32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8019b34:	2303      	movs	r3, #3
 8019b36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8019b38:	230a      	movs	r3, #10
 8019b3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8019b3c:	f107 0314 	add.w	r3, r7, #20
 8019b40:	4619      	mov	r1, r3
 8019b42:	4812      	ldr	r0, [pc, #72]	; (8019b8c <HAL_PCD_MspInit+0xa4>)
 8019b44:	f7e8 f85a 	bl	8001bfc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8019b48:	4b0f      	ldr	r3, [pc, #60]	; (8019b88 <HAL_PCD_MspInit+0xa0>)
 8019b4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019b4c:	4a0e      	ldr	r2, [pc, #56]	; (8019b88 <HAL_PCD_MspInit+0xa0>)
 8019b4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019b52:	6353      	str	r3, [r2, #52]	; 0x34
 8019b54:	2300      	movs	r3, #0
 8019b56:	60fb      	str	r3, [r7, #12]
 8019b58:	4b0b      	ldr	r3, [pc, #44]	; (8019b88 <HAL_PCD_MspInit+0xa0>)
 8019b5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019b5c:	4a0a      	ldr	r2, [pc, #40]	; (8019b88 <HAL_PCD_MspInit+0xa0>)
 8019b5e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8019b62:	6453      	str	r3, [r2, #68]	; 0x44
 8019b64:	4b08      	ldr	r3, [pc, #32]	; (8019b88 <HAL_PCD_MspInit+0xa0>)
 8019b66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019b68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8019b6c:	60fb      	str	r3, [r7, #12]
 8019b6e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8019b70:	2200      	movs	r2, #0
 8019b72:	2105      	movs	r1, #5
 8019b74:	2043      	movs	r0, #67	; 0x43
 8019b76:	f7e7 f9da 	bl	8000f2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8019b7a:	2043      	movs	r0, #67	; 0x43
 8019b7c:	f7e7 f9f3 	bl	8000f66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8019b80:	bf00      	nop
 8019b82:	3728      	adds	r7, #40	; 0x28
 8019b84:	46bd      	mov	sp, r7
 8019b86:	bd80      	pop	{r7, pc}
 8019b88:	40023800 	.word	0x40023800
 8019b8c:	40020000 	.word	0x40020000

08019b90 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019b90:	b580      	push	{r7, lr}
 8019b92:	b082      	sub	sp, #8
 8019b94:	af00      	add	r7, sp, #0
 8019b96:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8019b98:	687b      	ldr	r3, [r7, #4]
 8019b9a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8019b9e:	687b      	ldr	r3, [r7, #4]
 8019ba0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8019ba4:	4619      	mov	r1, r3
 8019ba6:	4610      	mov	r0, r2
 8019ba8:	f7ed f804 	bl	8006bb4 <USBD_LL_SetupStage>
}
 8019bac:	bf00      	nop
 8019bae:	3708      	adds	r7, #8
 8019bb0:	46bd      	mov	sp, r7
 8019bb2:	bd80      	pop	{r7, pc}

08019bb4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019bb4:	b580      	push	{r7, lr}
 8019bb6:	b082      	sub	sp, #8
 8019bb8:	af00      	add	r7, sp, #0
 8019bba:	6078      	str	r0, [r7, #4]
 8019bbc:	460b      	mov	r3, r1
 8019bbe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8019bc0:	687b      	ldr	r3, [r7, #4]
 8019bc2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8019bc6:	78fa      	ldrb	r2, [r7, #3]
 8019bc8:	6879      	ldr	r1, [r7, #4]
 8019bca:	4613      	mov	r3, r2
 8019bcc:	00db      	lsls	r3, r3, #3
 8019bce:	4413      	add	r3, r2
 8019bd0:	009b      	lsls	r3, r3, #2
 8019bd2:	440b      	add	r3, r1
 8019bd4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8019bd8:	681a      	ldr	r2, [r3, #0]
 8019bda:	78fb      	ldrb	r3, [r7, #3]
 8019bdc:	4619      	mov	r1, r3
 8019bde:	f7ed f83e 	bl	8006c5e <USBD_LL_DataOutStage>
}
 8019be2:	bf00      	nop
 8019be4:	3708      	adds	r7, #8
 8019be6:	46bd      	mov	sp, r7
 8019be8:	bd80      	pop	{r7, pc}

08019bea <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019bea:	b580      	push	{r7, lr}
 8019bec:	b082      	sub	sp, #8
 8019bee:	af00      	add	r7, sp, #0
 8019bf0:	6078      	str	r0, [r7, #4]
 8019bf2:	460b      	mov	r3, r1
 8019bf4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8019bf6:	687b      	ldr	r3, [r7, #4]
 8019bf8:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8019bfc:	78fa      	ldrb	r2, [r7, #3]
 8019bfe:	6879      	ldr	r1, [r7, #4]
 8019c00:	4613      	mov	r3, r2
 8019c02:	00db      	lsls	r3, r3, #3
 8019c04:	4413      	add	r3, r2
 8019c06:	009b      	lsls	r3, r3, #2
 8019c08:	440b      	add	r3, r1
 8019c0a:	334c      	adds	r3, #76	; 0x4c
 8019c0c:	681a      	ldr	r2, [r3, #0]
 8019c0e:	78fb      	ldrb	r3, [r7, #3]
 8019c10:	4619      	mov	r1, r3
 8019c12:	f7ed f8d7 	bl	8006dc4 <USBD_LL_DataInStage>
}
 8019c16:	bf00      	nop
 8019c18:	3708      	adds	r7, #8
 8019c1a:	46bd      	mov	sp, r7
 8019c1c:	bd80      	pop	{r7, pc}

08019c1e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019c1e:	b580      	push	{r7, lr}
 8019c20:	b082      	sub	sp, #8
 8019c22:	af00      	add	r7, sp, #0
 8019c24:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8019c26:	687b      	ldr	r3, [r7, #4]
 8019c28:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8019c2c:	4618      	mov	r0, r3
 8019c2e:	f7ed fa08 	bl	8007042 <USBD_LL_SOF>
}
 8019c32:	bf00      	nop
 8019c34:	3708      	adds	r7, #8
 8019c36:	46bd      	mov	sp, r7
 8019c38:	bd80      	pop	{r7, pc}

08019c3a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019c3a:	b580      	push	{r7, lr}
 8019c3c:	b084      	sub	sp, #16
 8019c3e:	af00      	add	r7, sp, #0
 8019c40:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8019c42:	2301      	movs	r3, #1
 8019c44:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8019c46:	687b      	ldr	r3, [r7, #4]
 8019c48:	68db      	ldr	r3, [r3, #12]
 8019c4a:	2b00      	cmp	r3, #0
 8019c4c:	d102      	bne.n	8019c54 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8019c4e:	2300      	movs	r3, #0
 8019c50:	73fb      	strb	r3, [r7, #15]
 8019c52:	e008      	b.n	8019c66 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8019c54:	687b      	ldr	r3, [r7, #4]
 8019c56:	68db      	ldr	r3, [r3, #12]
 8019c58:	2b02      	cmp	r3, #2
 8019c5a:	d102      	bne.n	8019c62 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8019c5c:	2301      	movs	r3, #1
 8019c5e:	73fb      	strb	r3, [r7, #15]
 8019c60:	e001      	b.n	8019c66 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8019c62:	f7e6 fdd9 	bl	8000818 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8019c66:	687b      	ldr	r3, [r7, #4]
 8019c68:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8019c6c:	7bfa      	ldrb	r2, [r7, #15]
 8019c6e:	4611      	mov	r1, r2
 8019c70:	4618      	mov	r0, r3
 8019c72:	f7ed f9ab 	bl	8006fcc <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8019c76:	687b      	ldr	r3, [r7, #4]
 8019c78:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8019c7c:	4618      	mov	r0, r3
 8019c7e:	f7ed f953 	bl	8006f28 <USBD_LL_Reset>
}
 8019c82:	bf00      	nop
 8019c84:	3710      	adds	r7, #16
 8019c86:	46bd      	mov	sp, r7
 8019c88:	bd80      	pop	{r7, pc}
	...

08019c8c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019c8c:	b580      	push	{r7, lr}
 8019c8e:	b082      	sub	sp, #8
 8019c90:	af00      	add	r7, sp, #0
 8019c92:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8019c94:	687b      	ldr	r3, [r7, #4]
 8019c96:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8019c9a:	4618      	mov	r0, r3
 8019c9c:	f7ed f9a5 	bl	8006fea <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8019ca0:	687b      	ldr	r3, [r7, #4]
 8019ca2:	681b      	ldr	r3, [r3, #0]
 8019ca4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8019ca8:	681b      	ldr	r3, [r3, #0]
 8019caa:	687a      	ldr	r2, [r7, #4]
 8019cac:	6812      	ldr	r2, [r2, #0]
 8019cae:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8019cb2:	f043 0301 	orr.w	r3, r3, #1
 8019cb6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8019cb8:	687b      	ldr	r3, [r7, #4]
 8019cba:	6a1b      	ldr	r3, [r3, #32]
 8019cbc:	2b00      	cmp	r3, #0
 8019cbe:	d005      	beq.n	8019ccc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8019cc0:	4b04      	ldr	r3, [pc, #16]	; (8019cd4 <HAL_PCD_SuspendCallback+0x48>)
 8019cc2:	691b      	ldr	r3, [r3, #16]
 8019cc4:	4a03      	ldr	r2, [pc, #12]	; (8019cd4 <HAL_PCD_SuspendCallback+0x48>)
 8019cc6:	f043 0306 	orr.w	r3, r3, #6
 8019cca:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8019ccc:	bf00      	nop
 8019cce:	3708      	adds	r7, #8
 8019cd0:	46bd      	mov	sp, r7
 8019cd2:	bd80      	pop	{r7, pc}
 8019cd4:	e000ed00 	.word	0xe000ed00

08019cd8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019cd8:	b580      	push	{r7, lr}
 8019cda:	b082      	sub	sp, #8
 8019cdc:	af00      	add	r7, sp, #0
 8019cde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8019ce0:	687b      	ldr	r3, [r7, #4]
 8019ce2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8019ce6:	4618      	mov	r0, r3
 8019ce8:	f7ed f994 	bl	8007014 <USBD_LL_Resume>
}
 8019cec:	bf00      	nop
 8019cee:	3708      	adds	r7, #8
 8019cf0:	46bd      	mov	sp, r7
 8019cf2:	bd80      	pop	{r7, pc}

08019cf4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019cf4:	b580      	push	{r7, lr}
 8019cf6:	b082      	sub	sp, #8
 8019cf8:	af00      	add	r7, sp, #0
 8019cfa:	6078      	str	r0, [r7, #4]
 8019cfc:	460b      	mov	r3, r1
 8019cfe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8019d00:	687b      	ldr	r3, [r7, #4]
 8019d02:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8019d06:	78fa      	ldrb	r2, [r7, #3]
 8019d08:	4611      	mov	r1, r2
 8019d0a:	4618      	mov	r0, r3
 8019d0c:	f7ed f9eb 	bl	80070e6 <USBD_LL_IsoOUTIncomplete>
}
 8019d10:	bf00      	nop
 8019d12:	3708      	adds	r7, #8
 8019d14:	46bd      	mov	sp, r7
 8019d16:	bd80      	pop	{r7, pc}

08019d18 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019d18:	b580      	push	{r7, lr}
 8019d1a:	b082      	sub	sp, #8
 8019d1c:	af00      	add	r7, sp, #0
 8019d1e:	6078      	str	r0, [r7, #4]
 8019d20:	460b      	mov	r3, r1
 8019d22:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8019d24:	687b      	ldr	r3, [r7, #4]
 8019d26:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8019d2a:	78fa      	ldrb	r2, [r7, #3]
 8019d2c:	4611      	mov	r1, r2
 8019d2e:	4618      	mov	r0, r3
 8019d30:	f7ed f9a7 	bl	8007082 <USBD_LL_IsoINIncomplete>
}
 8019d34:	bf00      	nop
 8019d36:	3708      	adds	r7, #8
 8019d38:	46bd      	mov	sp, r7
 8019d3a:	bd80      	pop	{r7, pc}

08019d3c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019d3c:	b580      	push	{r7, lr}
 8019d3e:	b082      	sub	sp, #8
 8019d40:	af00      	add	r7, sp, #0
 8019d42:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8019d44:	687b      	ldr	r3, [r7, #4]
 8019d46:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8019d4a:	4618      	mov	r0, r3
 8019d4c:	f7ed f9fd 	bl	800714a <USBD_LL_DevConnected>
}
 8019d50:	bf00      	nop
 8019d52:	3708      	adds	r7, #8
 8019d54:	46bd      	mov	sp, r7
 8019d56:	bd80      	pop	{r7, pc}

08019d58 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019d58:	b580      	push	{r7, lr}
 8019d5a:	b082      	sub	sp, #8
 8019d5c:	af00      	add	r7, sp, #0
 8019d5e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8019d60:	687b      	ldr	r3, [r7, #4]
 8019d62:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8019d66:	4618      	mov	r0, r3
 8019d68:	f7ed f9f9 	bl	800715e <USBD_LL_DevDisconnected>
}
 8019d6c:	bf00      	nop
 8019d6e:	3708      	adds	r7, #8
 8019d70:	46bd      	mov	sp, r7
 8019d72:	bd80      	pop	{r7, pc}

08019d74 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8019d74:	b580      	push	{r7, lr}
 8019d76:	b082      	sub	sp, #8
 8019d78:	af00      	add	r7, sp, #0
 8019d7a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8019d7c:	687b      	ldr	r3, [r7, #4]
 8019d7e:	781b      	ldrb	r3, [r3, #0]
 8019d80:	2b00      	cmp	r3, #0
 8019d82:	d13c      	bne.n	8019dfe <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8019d84:	4a20      	ldr	r2, [pc, #128]	; (8019e08 <USBD_LL_Init+0x94>)
 8019d86:	687b      	ldr	r3, [r7, #4]
 8019d88:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8019d8c:	687b      	ldr	r3, [r7, #4]
 8019d8e:	4a1e      	ldr	r2, [pc, #120]	; (8019e08 <USBD_LL_Init+0x94>)
 8019d90:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8019d94:	4b1c      	ldr	r3, [pc, #112]	; (8019e08 <USBD_LL_Init+0x94>)
 8019d96:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8019d9a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8019d9c:	4b1a      	ldr	r3, [pc, #104]	; (8019e08 <USBD_LL_Init+0x94>)
 8019d9e:	2204      	movs	r2, #4
 8019da0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8019da2:	4b19      	ldr	r3, [pc, #100]	; (8019e08 <USBD_LL_Init+0x94>)
 8019da4:	2202      	movs	r2, #2
 8019da6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8019da8:	4b17      	ldr	r3, [pc, #92]	; (8019e08 <USBD_LL_Init+0x94>)
 8019daa:	2200      	movs	r2, #0
 8019dac:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8019dae:	4b16      	ldr	r3, [pc, #88]	; (8019e08 <USBD_LL_Init+0x94>)
 8019db0:	2202      	movs	r2, #2
 8019db2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8019db4:	4b14      	ldr	r3, [pc, #80]	; (8019e08 <USBD_LL_Init+0x94>)
 8019db6:	2200      	movs	r2, #0
 8019db8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8019dba:	4b13      	ldr	r3, [pc, #76]	; (8019e08 <USBD_LL_Init+0x94>)
 8019dbc:	2200      	movs	r2, #0
 8019dbe:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8019dc0:	4b11      	ldr	r3, [pc, #68]	; (8019e08 <USBD_LL_Init+0x94>)
 8019dc2:	2200      	movs	r2, #0
 8019dc4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8019dc6:	4b10      	ldr	r3, [pc, #64]	; (8019e08 <USBD_LL_Init+0x94>)
 8019dc8:	2200      	movs	r2, #0
 8019dca:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8019dcc:	4b0e      	ldr	r3, [pc, #56]	; (8019e08 <USBD_LL_Init+0x94>)
 8019dce:	2200      	movs	r2, #0
 8019dd0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8019dd2:	480d      	ldr	r0, [pc, #52]	; (8019e08 <USBD_LL_Init+0x94>)
 8019dd4:	f7e8 f8e6 	bl	8001fa4 <HAL_PCD_Init>
 8019dd8:	4603      	mov	r3, r0
 8019dda:	2b00      	cmp	r3, #0
 8019ddc:	d001      	beq.n	8019de2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8019dde:	f7e6 fd1b 	bl	8000818 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8019de2:	2180      	movs	r1, #128	; 0x80
 8019de4:	4808      	ldr	r0, [pc, #32]	; (8019e08 <USBD_LL_Init+0x94>)
 8019de6:	f7e9 fb3b 	bl	8003460 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8019dea:	2240      	movs	r2, #64	; 0x40
 8019dec:	2100      	movs	r1, #0
 8019dee:	4806      	ldr	r0, [pc, #24]	; (8019e08 <USBD_LL_Init+0x94>)
 8019df0:	f7e9 faf0 	bl	80033d4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8019df4:	2280      	movs	r2, #128	; 0x80
 8019df6:	2101      	movs	r1, #1
 8019df8:	4803      	ldr	r0, [pc, #12]	; (8019e08 <USBD_LL_Init+0x94>)
 8019dfa:	f7e9 faeb 	bl	80033d4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8019dfe:	2300      	movs	r3, #0
}
 8019e00:	4618      	mov	r0, r3
 8019e02:	3708      	adds	r7, #8
 8019e04:	46bd      	mov	sp, r7
 8019e06:	bd80      	pop	{r7, pc}
 8019e08:	2000d590 	.word	0x2000d590

08019e0c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8019e0c:	b580      	push	{r7, lr}
 8019e0e:	b084      	sub	sp, #16
 8019e10:	af00      	add	r7, sp, #0
 8019e12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019e14:	2300      	movs	r3, #0
 8019e16:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019e18:	2300      	movs	r3, #0
 8019e1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8019e1c:	687b      	ldr	r3, [r7, #4]
 8019e1e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8019e22:	4618      	mov	r0, r3
 8019e24:	f7e8 f9db 	bl	80021de <HAL_PCD_Start>
 8019e28:	4603      	mov	r3, r0
 8019e2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019e2c:	7bfb      	ldrb	r3, [r7, #15]
 8019e2e:	4618      	mov	r0, r3
 8019e30:	f000 f940 	bl	801a0b4 <USBD_Get_USB_Status>
 8019e34:	4603      	mov	r3, r0
 8019e36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019e38:	7bbb      	ldrb	r3, [r7, #14]
}
 8019e3a:	4618      	mov	r0, r3
 8019e3c:	3710      	adds	r7, #16
 8019e3e:	46bd      	mov	sp, r7
 8019e40:	bd80      	pop	{r7, pc}

08019e42 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8019e42:	b580      	push	{r7, lr}
 8019e44:	b084      	sub	sp, #16
 8019e46:	af00      	add	r7, sp, #0
 8019e48:	6078      	str	r0, [r7, #4]
 8019e4a:	4608      	mov	r0, r1
 8019e4c:	4611      	mov	r1, r2
 8019e4e:	461a      	mov	r2, r3
 8019e50:	4603      	mov	r3, r0
 8019e52:	70fb      	strb	r3, [r7, #3]
 8019e54:	460b      	mov	r3, r1
 8019e56:	70bb      	strb	r3, [r7, #2]
 8019e58:	4613      	mov	r3, r2
 8019e5a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019e5c:	2300      	movs	r3, #0
 8019e5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019e60:	2300      	movs	r3, #0
 8019e62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8019e64:	687b      	ldr	r3, [r7, #4]
 8019e66:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8019e6a:	78bb      	ldrb	r3, [r7, #2]
 8019e6c:	883a      	ldrh	r2, [r7, #0]
 8019e6e:	78f9      	ldrb	r1, [r7, #3]
 8019e70:	f7e8 feac 	bl	8002bcc <HAL_PCD_EP_Open>
 8019e74:	4603      	mov	r3, r0
 8019e76:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019e78:	7bfb      	ldrb	r3, [r7, #15]
 8019e7a:	4618      	mov	r0, r3
 8019e7c:	f000 f91a 	bl	801a0b4 <USBD_Get_USB_Status>
 8019e80:	4603      	mov	r3, r0
 8019e82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019e84:	7bbb      	ldrb	r3, [r7, #14]
}
 8019e86:	4618      	mov	r0, r3
 8019e88:	3710      	adds	r7, #16
 8019e8a:	46bd      	mov	sp, r7
 8019e8c:	bd80      	pop	{r7, pc}

08019e8e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019e8e:	b580      	push	{r7, lr}
 8019e90:	b084      	sub	sp, #16
 8019e92:	af00      	add	r7, sp, #0
 8019e94:	6078      	str	r0, [r7, #4]
 8019e96:	460b      	mov	r3, r1
 8019e98:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019e9a:	2300      	movs	r3, #0
 8019e9c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019e9e:	2300      	movs	r3, #0
 8019ea0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8019ea2:	687b      	ldr	r3, [r7, #4]
 8019ea4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8019ea8:	78fa      	ldrb	r2, [r7, #3]
 8019eaa:	4611      	mov	r1, r2
 8019eac:	4618      	mov	r0, r3
 8019eae:	f7e8 fef5 	bl	8002c9c <HAL_PCD_EP_Close>
 8019eb2:	4603      	mov	r3, r0
 8019eb4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019eb6:	7bfb      	ldrb	r3, [r7, #15]
 8019eb8:	4618      	mov	r0, r3
 8019eba:	f000 f8fb 	bl	801a0b4 <USBD_Get_USB_Status>
 8019ebe:	4603      	mov	r3, r0
 8019ec0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019ec2:	7bbb      	ldrb	r3, [r7, #14]
}
 8019ec4:	4618      	mov	r0, r3
 8019ec6:	3710      	adds	r7, #16
 8019ec8:	46bd      	mov	sp, r7
 8019eca:	bd80      	pop	{r7, pc}

08019ecc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019ecc:	b580      	push	{r7, lr}
 8019ece:	b084      	sub	sp, #16
 8019ed0:	af00      	add	r7, sp, #0
 8019ed2:	6078      	str	r0, [r7, #4]
 8019ed4:	460b      	mov	r3, r1
 8019ed6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019ed8:	2300      	movs	r3, #0
 8019eda:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019edc:	2300      	movs	r3, #0
 8019ede:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8019ee0:	687b      	ldr	r3, [r7, #4]
 8019ee2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8019ee6:	78fa      	ldrb	r2, [r7, #3]
 8019ee8:	4611      	mov	r1, r2
 8019eea:	4618      	mov	r0, r3
 8019eec:	f7e8 ffcc 	bl	8002e88 <HAL_PCD_EP_SetStall>
 8019ef0:	4603      	mov	r3, r0
 8019ef2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019ef4:	7bfb      	ldrb	r3, [r7, #15]
 8019ef6:	4618      	mov	r0, r3
 8019ef8:	f000 f8dc 	bl	801a0b4 <USBD_Get_USB_Status>
 8019efc:	4603      	mov	r3, r0
 8019efe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019f00:	7bbb      	ldrb	r3, [r7, #14]
}
 8019f02:	4618      	mov	r0, r3
 8019f04:	3710      	adds	r7, #16
 8019f06:	46bd      	mov	sp, r7
 8019f08:	bd80      	pop	{r7, pc}

08019f0a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019f0a:	b580      	push	{r7, lr}
 8019f0c:	b084      	sub	sp, #16
 8019f0e:	af00      	add	r7, sp, #0
 8019f10:	6078      	str	r0, [r7, #4]
 8019f12:	460b      	mov	r3, r1
 8019f14:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019f16:	2300      	movs	r3, #0
 8019f18:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019f1a:	2300      	movs	r3, #0
 8019f1c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8019f1e:	687b      	ldr	r3, [r7, #4]
 8019f20:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8019f24:	78fa      	ldrb	r2, [r7, #3]
 8019f26:	4611      	mov	r1, r2
 8019f28:	4618      	mov	r0, r3
 8019f2a:	f7e9 f811 	bl	8002f50 <HAL_PCD_EP_ClrStall>
 8019f2e:	4603      	mov	r3, r0
 8019f30:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019f32:	7bfb      	ldrb	r3, [r7, #15]
 8019f34:	4618      	mov	r0, r3
 8019f36:	f000 f8bd 	bl	801a0b4 <USBD_Get_USB_Status>
 8019f3a:	4603      	mov	r3, r0
 8019f3c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019f3e:	7bbb      	ldrb	r3, [r7, #14]
}
 8019f40:	4618      	mov	r0, r3
 8019f42:	3710      	adds	r7, #16
 8019f44:	46bd      	mov	sp, r7
 8019f46:	bd80      	pop	{r7, pc}

08019f48 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019f48:	b480      	push	{r7}
 8019f4a:	b085      	sub	sp, #20
 8019f4c:	af00      	add	r7, sp, #0
 8019f4e:	6078      	str	r0, [r7, #4]
 8019f50:	460b      	mov	r3, r1
 8019f52:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8019f54:	687b      	ldr	r3, [r7, #4]
 8019f56:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8019f5a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8019f5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8019f60:	2b00      	cmp	r3, #0
 8019f62:	da0b      	bge.n	8019f7c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8019f64:	78fb      	ldrb	r3, [r7, #3]
 8019f66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8019f6a:	68f9      	ldr	r1, [r7, #12]
 8019f6c:	4613      	mov	r3, r2
 8019f6e:	00db      	lsls	r3, r3, #3
 8019f70:	4413      	add	r3, r2
 8019f72:	009b      	lsls	r3, r3, #2
 8019f74:	440b      	add	r3, r1
 8019f76:	333e      	adds	r3, #62	; 0x3e
 8019f78:	781b      	ldrb	r3, [r3, #0]
 8019f7a:	e00b      	b.n	8019f94 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8019f7c:	78fb      	ldrb	r3, [r7, #3]
 8019f7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8019f82:	68f9      	ldr	r1, [r7, #12]
 8019f84:	4613      	mov	r3, r2
 8019f86:	00db      	lsls	r3, r3, #3
 8019f88:	4413      	add	r3, r2
 8019f8a:	009b      	lsls	r3, r3, #2
 8019f8c:	440b      	add	r3, r1
 8019f8e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8019f92:	781b      	ldrb	r3, [r3, #0]
  }
}
 8019f94:	4618      	mov	r0, r3
 8019f96:	3714      	adds	r7, #20
 8019f98:	46bd      	mov	sp, r7
 8019f9a:	bc80      	pop	{r7}
 8019f9c:	4770      	bx	lr

08019f9e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8019f9e:	b580      	push	{r7, lr}
 8019fa0:	b084      	sub	sp, #16
 8019fa2:	af00      	add	r7, sp, #0
 8019fa4:	6078      	str	r0, [r7, #4]
 8019fa6:	460b      	mov	r3, r1
 8019fa8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019faa:	2300      	movs	r3, #0
 8019fac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019fae:	2300      	movs	r3, #0
 8019fb0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8019fb2:	687b      	ldr	r3, [r7, #4]
 8019fb4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8019fb8:	78fa      	ldrb	r2, [r7, #3]
 8019fba:	4611      	mov	r1, r2
 8019fbc:	4618      	mov	r0, r3
 8019fbe:	f7e8 fde0 	bl	8002b82 <HAL_PCD_SetAddress>
 8019fc2:	4603      	mov	r3, r0
 8019fc4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019fc6:	7bfb      	ldrb	r3, [r7, #15]
 8019fc8:	4618      	mov	r0, r3
 8019fca:	f000 f873 	bl	801a0b4 <USBD_Get_USB_Status>
 8019fce:	4603      	mov	r3, r0
 8019fd0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019fd2:	7bbb      	ldrb	r3, [r7, #14]
}
 8019fd4:	4618      	mov	r0, r3
 8019fd6:	3710      	adds	r7, #16
 8019fd8:	46bd      	mov	sp, r7
 8019fda:	bd80      	pop	{r7, pc}

08019fdc <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8019fdc:	b580      	push	{r7, lr}
 8019fde:	b086      	sub	sp, #24
 8019fe0:	af00      	add	r7, sp, #0
 8019fe2:	60f8      	str	r0, [r7, #12]
 8019fe4:	607a      	str	r2, [r7, #4]
 8019fe6:	603b      	str	r3, [r7, #0]
 8019fe8:	460b      	mov	r3, r1
 8019fea:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019fec:	2300      	movs	r3, #0
 8019fee:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019ff0:	2300      	movs	r3, #0
 8019ff2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8019ff4:	68fb      	ldr	r3, [r7, #12]
 8019ff6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8019ffa:	7af9      	ldrb	r1, [r7, #11]
 8019ffc:	683b      	ldr	r3, [r7, #0]
 8019ffe:	687a      	ldr	r2, [r7, #4]
 801a000:	f7e8 fef8 	bl	8002df4 <HAL_PCD_EP_Transmit>
 801a004:	4603      	mov	r3, r0
 801a006:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801a008:	7dfb      	ldrb	r3, [r7, #23]
 801a00a:	4618      	mov	r0, r3
 801a00c:	f000 f852 	bl	801a0b4 <USBD_Get_USB_Status>
 801a010:	4603      	mov	r3, r0
 801a012:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801a014:	7dbb      	ldrb	r3, [r7, #22]
}
 801a016:	4618      	mov	r0, r3
 801a018:	3718      	adds	r7, #24
 801a01a:	46bd      	mov	sp, r7
 801a01c:	bd80      	pop	{r7, pc}

0801a01e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801a01e:	b580      	push	{r7, lr}
 801a020:	b086      	sub	sp, #24
 801a022:	af00      	add	r7, sp, #0
 801a024:	60f8      	str	r0, [r7, #12]
 801a026:	607a      	str	r2, [r7, #4]
 801a028:	603b      	str	r3, [r7, #0]
 801a02a:	460b      	mov	r3, r1
 801a02c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a02e:	2300      	movs	r3, #0
 801a030:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a032:	2300      	movs	r3, #0
 801a034:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801a036:	68fb      	ldr	r3, [r7, #12]
 801a038:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801a03c:	7af9      	ldrb	r1, [r7, #11]
 801a03e:	683b      	ldr	r3, [r7, #0]
 801a040:	687a      	ldr	r2, [r7, #4]
 801a042:	f7e8 fe75 	bl	8002d30 <HAL_PCD_EP_Receive>
 801a046:	4603      	mov	r3, r0
 801a048:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801a04a:	7dfb      	ldrb	r3, [r7, #23]
 801a04c:	4618      	mov	r0, r3
 801a04e:	f000 f831 	bl	801a0b4 <USBD_Get_USB_Status>
 801a052:	4603      	mov	r3, r0
 801a054:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801a056:	7dbb      	ldrb	r3, [r7, #22]
}
 801a058:	4618      	mov	r0, r3
 801a05a:	3718      	adds	r7, #24
 801a05c:	46bd      	mov	sp, r7
 801a05e:	bd80      	pop	{r7, pc}

0801a060 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801a060:	b580      	push	{r7, lr}
 801a062:	b082      	sub	sp, #8
 801a064:	af00      	add	r7, sp, #0
 801a066:	6078      	str	r0, [r7, #4]
 801a068:	460b      	mov	r3, r1
 801a06a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801a06c:	687b      	ldr	r3, [r7, #4]
 801a06e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801a072:	78fa      	ldrb	r2, [r7, #3]
 801a074:	4611      	mov	r1, r2
 801a076:	4618      	mov	r0, r3
 801a078:	f7e8 fea5 	bl	8002dc6 <HAL_PCD_EP_GetRxCount>
 801a07c:	4603      	mov	r3, r0
}
 801a07e:	4618      	mov	r0, r3
 801a080:	3708      	adds	r7, #8
 801a082:	46bd      	mov	sp, r7
 801a084:	bd80      	pop	{r7, pc}
	...

0801a088 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801a088:	b480      	push	{r7}
 801a08a:	b083      	sub	sp, #12
 801a08c:	af00      	add	r7, sp, #0
 801a08e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801a090:	4b02      	ldr	r3, [pc, #8]	; (801a09c <USBD_static_malloc+0x14>)
}
 801a092:	4618      	mov	r0, r3
 801a094:	370c      	adds	r7, #12
 801a096:	46bd      	mov	sp, r7
 801a098:	bc80      	pop	{r7}
 801a09a:	4770      	bx	lr
 801a09c:	2000da9c 	.word	0x2000da9c

0801a0a0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801a0a0:	b480      	push	{r7}
 801a0a2:	b083      	sub	sp, #12
 801a0a4:	af00      	add	r7, sp, #0
 801a0a6:	6078      	str	r0, [r7, #4]

}
 801a0a8:	bf00      	nop
 801a0aa:	370c      	adds	r7, #12
 801a0ac:	46bd      	mov	sp, r7
 801a0ae:	bc80      	pop	{r7}
 801a0b0:	4770      	bx	lr
	...

0801a0b4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801a0b4:	b480      	push	{r7}
 801a0b6:	b085      	sub	sp, #20
 801a0b8:	af00      	add	r7, sp, #0
 801a0ba:	4603      	mov	r3, r0
 801a0bc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a0be:	2300      	movs	r3, #0
 801a0c0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801a0c2:	79fb      	ldrb	r3, [r7, #7]
 801a0c4:	2b03      	cmp	r3, #3
 801a0c6:	d817      	bhi.n	801a0f8 <USBD_Get_USB_Status+0x44>
 801a0c8:	a201      	add	r2, pc, #4	; (adr r2, 801a0d0 <USBD_Get_USB_Status+0x1c>)
 801a0ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a0ce:	bf00      	nop
 801a0d0:	0801a0e1 	.word	0x0801a0e1
 801a0d4:	0801a0e7 	.word	0x0801a0e7
 801a0d8:	0801a0ed 	.word	0x0801a0ed
 801a0dc:	0801a0f3 	.word	0x0801a0f3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801a0e0:	2300      	movs	r3, #0
 801a0e2:	73fb      	strb	r3, [r7, #15]
    break;
 801a0e4:	e00b      	b.n	801a0fe <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801a0e6:	2303      	movs	r3, #3
 801a0e8:	73fb      	strb	r3, [r7, #15]
    break;
 801a0ea:	e008      	b.n	801a0fe <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801a0ec:	2301      	movs	r3, #1
 801a0ee:	73fb      	strb	r3, [r7, #15]
    break;
 801a0f0:	e005      	b.n	801a0fe <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801a0f2:	2303      	movs	r3, #3
 801a0f4:	73fb      	strb	r3, [r7, #15]
    break;
 801a0f6:	e002      	b.n	801a0fe <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801a0f8:	2303      	movs	r3, #3
 801a0fa:	73fb      	strb	r3, [r7, #15]
    break;
 801a0fc:	bf00      	nop
  }
  return usb_status;
 801a0fe:	7bfb      	ldrb	r3, [r7, #15]
}
 801a100:	4618      	mov	r0, r3
 801a102:	3714      	adds	r7, #20
 801a104:	46bd      	mov	sp, r7
 801a106:	bc80      	pop	{r7}
 801a108:	4770      	bx	lr
 801a10a:	bf00      	nop

0801a10c <__sflush_r>:
 801a10c:	898a      	ldrh	r2, [r1, #12]
 801a10e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a110:	4605      	mov	r5, r0
 801a112:	0710      	lsls	r0, r2, #28
 801a114:	460c      	mov	r4, r1
 801a116:	d457      	bmi.n	801a1c8 <__sflush_r+0xbc>
 801a118:	684b      	ldr	r3, [r1, #4]
 801a11a:	2b00      	cmp	r3, #0
 801a11c:	dc04      	bgt.n	801a128 <__sflush_r+0x1c>
 801a11e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801a120:	2b00      	cmp	r3, #0
 801a122:	dc01      	bgt.n	801a128 <__sflush_r+0x1c>
 801a124:	2000      	movs	r0, #0
 801a126:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a128:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a12a:	2e00      	cmp	r6, #0
 801a12c:	d0fa      	beq.n	801a124 <__sflush_r+0x18>
 801a12e:	2300      	movs	r3, #0
 801a130:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801a134:	682f      	ldr	r7, [r5, #0]
 801a136:	602b      	str	r3, [r5, #0]
 801a138:	d032      	beq.n	801a1a0 <__sflush_r+0x94>
 801a13a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801a13c:	89a3      	ldrh	r3, [r4, #12]
 801a13e:	075a      	lsls	r2, r3, #29
 801a140:	d505      	bpl.n	801a14e <__sflush_r+0x42>
 801a142:	6863      	ldr	r3, [r4, #4]
 801a144:	1ac0      	subs	r0, r0, r3
 801a146:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801a148:	b10b      	cbz	r3, 801a14e <__sflush_r+0x42>
 801a14a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801a14c:	1ac0      	subs	r0, r0, r3
 801a14e:	2300      	movs	r3, #0
 801a150:	4602      	mov	r2, r0
 801a152:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a154:	6a21      	ldr	r1, [r4, #32]
 801a156:	4628      	mov	r0, r5
 801a158:	47b0      	blx	r6
 801a15a:	1c43      	adds	r3, r0, #1
 801a15c:	89a3      	ldrh	r3, [r4, #12]
 801a15e:	d106      	bne.n	801a16e <__sflush_r+0x62>
 801a160:	6829      	ldr	r1, [r5, #0]
 801a162:	291d      	cmp	r1, #29
 801a164:	d82c      	bhi.n	801a1c0 <__sflush_r+0xb4>
 801a166:	4a29      	ldr	r2, [pc, #164]	; (801a20c <__sflush_r+0x100>)
 801a168:	40ca      	lsrs	r2, r1
 801a16a:	07d6      	lsls	r6, r2, #31
 801a16c:	d528      	bpl.n	801a1c0 <__sflush_r+0xb4>
 801a16e:	2200      	movs	r2, #0
 801a170:	6062      	str	r2, [r4, #4]
 801a172:	04d9      	lsls	r1, r3, #19
 801a174:	6922      	ldr	r2, [r4, #16]
 801a176:	6022      	str	r2, [r4, #0]
 801a178:	d504      	bpl.n	801a184 <__sflush_r+0x78>
 801a17a:	1c42      	adds	r2, r0, #1
 801a17c:	d101      	bne.n	801a182 <__sflush_r+0x76>
 801a17e:	682b      	ldr	r3, [r5, #0]
 801a180:	b903      	cbnz	r3, 801a184 <__sflush_r+0x78>
 801a182:	6560      	str	r0, [r4, #84]	; 0x54
 801a184:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a186:	602f      	str	r7, [r5, #0]
 801a188:	2900      	cmp	r1, #0
 801a18a:	d0cb      	beq.n	801a124 <__sflush_r+0x18>
 801a18c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a190:	4299      	cmp	r1, r3
 801a192:	d002      	beq.n	801a19a <__sflush_r+0x8e>
 801a194:	4628      	mov	r0, r5
 801a196:	f000 fa27 	bl	801a5e8 <_free_r>
 801a19a:	2000      	movs	r0, #0
 801a19c:	6360      	str	r0, [r4, #52]	; 0x34
 801a19e:	e7c2      	b.n	801a126 <__sflush_r+0x1a>
 801a1a0:	6a21      	ldr	r1, [r4, #32]
 801a1a2:	2301      	movs	r3, #1
 801a1a4:	4628      	mov	r0, r5
 801a1a6:	47b0      	blx	r6
 801a1a8:	1c41      	adds	r1, r0, #1
 801a1aa:	d1c7      	bne.n	801a13c <__sflush_r+0x30>
 801a1ac:	682b      	ldr	r3, [r5, #0]
 801a1ae:	2b00      	cmp	r3, #0
 801a1b0:	d0c4      	beq.n	801a13c <__sflush_r+0x30>
 801a1b2:	2b1d      	cmp	r3, #29
 801a1b4:	d001      	beq.n	801a1ba <__sflush_r+0xae>
 801a1b6:	2b16      	cmp	r3, #22
 801a1b8:	d101      	bne.n	801a1be <__sflush_r+0xb2>
 801a1ba:	602f      	str	r7, [r5, #0]
 801a1bc:	e7b2      	b.n	801a124 <__sflush_r+0x18>
 801a1be:	89a3      	ldrh	r3, [r4, #12]
 801a1c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a1c4:	81a3      	strh	r3, [r4, #12]
 801a1c6:	e7ae      	b.n	801a126 <__sflush_r+0x1a>
 801a1c8:	690f      	ldr	r7, [r1, #16]
 801a1ca:	2f00      	cmp	r7, #0
 801a1cc:	d0aa      	beq.n	801a124 <__sflush_r+0x18>
 801a1ce:	0793      	lsls	r3, r2, #30
 801a1d0:	680e      	ldr	r6, [r1, #0]
 801a1d2:	bf08      	it	eq
 801a1d4:	694b      	ldreq	r3, [r1, #20]
 801a1d6:	600f      	str	r7, [r1, #0]
 801a1d8:	bf18      	it	ne
 801a1da:	2300      	movne	r3, #0
 801a1dc:	1bf6      	subs	r6, r6, r7
 801a1de:	608b      	str	r3, [r1, #8]
 801a1e0:	2e00      	cmp	r6, #0
 801a1e2:	dd9f      	ble.n	801a124 <__sflush_r+0x18>
 801a1e4:	6a21      	ldr	r1, [r4, #32]
 801a1e6:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 801a1ea:	4633      	mov	r3, r6
 801a1ec:	463a      	mov	r2, r7
 801a1ee:	4628      	mov	r0, r5
 801a1f0:	47e0      	blx	ip
 801a1f2:	2800      	cmp	r0, #0
 801a1f4:	dc06      	bgt.n	801a204 <__sflush_r+0xf8>
 801a1f6:	89a3      	ldrh	r3, [r4, #12]
 801a1f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a1fc:	81a3      	strh	r3, [r4, #12]
 801a1fe:	f04f 30ff 	mov.w	r0, #4294967295
 801a202:	e790      	b.n	801a126 <__sflush_r+0x1a>
 801a204:	4407      	add	r7, r0
 801a206:	1a36      	subs	r6, r6, r0
 801a208:	e7ea      	b.n	801a1e0 <__sflush_r+0xd4>
 801a20a:	bf00      	nop
 801a20c:	20400001 	.word	0x20400001

0801a210 <_fflush_r>:
 801a210:	b538      	push	{r3, r4, r5, lr}
 801a212:	690b      	ldr	r3, [r1, #16]
 801a214:	4605      	mov	r5, r0
 801a216:	460c      	mov	r4, r1
 801a218:	b913      	cbnz	r3, 801a220 <_fflush_r+0x10>
 801a21a:	2500      	movs	r5, #0
 801a21c:	4628      	mov	r0, r5
 801a21e:	bd38      	pop	{r3, r4, r5, pc}
 801a220:	b118      	cbz	r0, 801a22a <_fflush_r+0x1a>
 801a222:	6983      	ldr	r3, [r0, #24]
 801a224:	b90b      	cbnz	r3, 801a22a <_fflush_r+0x1a>
 801a226:	f000 f887 	bl	801a338 <__sinit>
 801a22a:	4b14      	ldr	r3, [pc, #80]	; (801a27c <_fflush_r+0x6c>)
 801a22c:	429c      	cmp	r4, r3
 801a22e:	d11b      	bne.n	801a268 <_fflush_r+0x58>
 801a230:	686c      	ldr	r4, [r5, #4]
 801a232:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a236:	2b00      	cmp	r3, #0
 801a238:	d0ef      	beq.n	801a21a <_fflush_r+0xa>
 801a23a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801a23c:	07d0      	lsls	r0, r2, #31
 801a23e:	d404      	bmi.n	801a24a <_fflush_r+0x3a>
 801a240:	0599      	lsls	r1, r3, #22
 801a242:	d402      	bmi.n	801a24a <_fflush_r+0x3a>
 801a244:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a246:	f000 f93a 	bl	801a4be <__retarget_lock_acquire_recursive>
 801a24a:	4628      	mov	r0, r5
 801a24c:	4621      	mov	r1, r4
 801a24e:	f7ff ff5d 	bl	801a10c <__sflush_r>
 801a252:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a254:	07da      	lsls	r2, r3, #31
 801a256:	4605      	mov	r5, r0
 801a258:	d4e0      	bmi.n	801a21c <_fflush_r+0xc>
 801a25a:	89a3      	ldrh	r3, [r4, #12]
 801a25c:	059b      	lsls	r3, r3, #22
 801a25e:	d4dd      	bmi.n	801a21c <_fflush_r+0xc>
 801a260:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a262:	f000 f92d 	bl	801a4c0 <__retarget_lock_release_recursive>
 801a266:	e7d9      	b.n	801a21c <_fflush_r+0xc>
 801a268:	4b05      	ldr	r3, [pc, #20]	; (801a280 <_fflush_r+0x70>)
 801a26a:	429c      	cmp	r4, r3
 801a26c:	d101      	bne.n	801a272 <_fflush_r+0x62>
 801a26e:	68ac      	ldr	r4, [r5, #8]
 801a270:	e7df      	b.n	801a232 <_fflush_r+0x22>
 801a272:	4b04      	ldr	r3, [pc, #16]	; (801a284 <_fflush_r+0x74>)
 801a274:	429c      	cmp	r4, r3
 801a276:	bf08      	it	eq
 801a278:	68ec      	ldreq	r4, [r5, #12]
 801a27a:	e7da      	b.n	801a232 <_fflush_r+0x22>
 801a27c:	0801ebbc 	.word	0x0801ebbc
 801a280:	0801ebdc 	.word	0x0801ebdc
 801a284:	0801eb9c 	.word	0x0801eb9c

0801a288 <std>:
 801a288:	2300      	movs	r3, #0
 801a28a:	b510      	push	{r4, lr}
 801a28c:	4604      	mov	r4, r0
 801a28e:	e9c0 3300 	strd	r3, r3, [r0]
 801a292:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801a296:	6083      	str	r3, [r0, #8]
 801a298:	8181      	strh	r1, [r0, #12]
 801a29a:	6643      	str	r3, [r0, #100]	; 0x64
 801a29c:	81c2      	strh	r2, [r0, #14]
 801a29e:	6183      	str	r3, [r0, #24]
 801a2a0:	4619      	mov	r1, r3
 801a2a2:	2208      	movs	r2, #8
 801a2a4:	305c      	adds	r0, #92	; 0x5c
 801a2a6:	f000 f997 	bl	801a5d8 <memset>
 801a2aa:	4b05      	ldr	r3, [pc, #20]	; (801a2c0 <std+0x38>)
 801a2ac:	6263      	str	r3, [r4, #36]	; 0x24
 801a2ae:	4b05      	ldr	r3, [pc, #20]	; (801a2c4 <std+0x3c>)
 801a2b0:	62a3      	str	r3, [r4, #40]	; 0x28
 801a2b2:	4b05      	ldr	r3, [pc, #20]	; (801a2c8 <std+0x40>)
 801a2b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 801a2b6:	4b05      	ldr	r3, [pc, #20]	; (801a2cc <std+0x44>)
 801a2b8:	6224      	str	r4, [r4, #32]
 801a2ba:	6323      	str	r3, [r4, #48]	; 0x30
 801a2bc:	bd10      	pop	{r4, pc}
 801a2be:	bf00      	nop
 801a2c0:	0801a945 	.word	0x0801a945
 801a2c4:	0801a967 	.word	0x0801a967
 801a2c8:	0801a99f 	.word	0x0801a99f
 801a2cc:	0801a9c3 	.word	0x0801a9c3

0801a2d0 <_cleanup_r>:
 801a2d0:	4901      	ldr	r1, [pc, #4]	; (801a2d8 <_cleanup_r+0x8>)
 801a2d2:	f000 b8af 	b.w	801a434 <_fwalk_reent>
 801a2d6:	bf00      	nop
 801a2d8:	0801a211 	.word	0x0801a211

0801a2dc <__sfmoreglue>:
 801a2dc:	b570      	push	{r4, r5, r6, lr}
 801a2de:	2268      	movs	r2, #104	; 0x68
 801a2e0:	1e4d      	subs	r5, r1, #1
 801a2e2:	4355      	muls	r5, r2
 801a2e4:	460e      	mov	r6, r1
 801a2e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801a2ea:	f000 f9e7 	bl	801a6bc <_malloc_r>
 801a2ee:	4604      	mov	r4, r0
 801a2f0:	b140      	cbz	r0, 801a304 <__sfmoreglue+0x28>
 801a2f2:	2100      	movs	r1, #0
 801a2f4:	e9c0 1600 	strd	r1, r6, [r0]
 801a2f8:	300c      	adds	r0, #12
 801a2fa:	60a0      	str	r0, [r4, #8]
 801a2fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801a300:	f000 f96a 	bl	801a5d8 <memset>
 801a304:	4620      	mov	r0, r4
 801a306:	bd70      	pop	{r4, r5, r6, pc}

0801a308 <__sfp_lock_acquire>:
 801a308:	4801      	ldr	r0, [pc, #4]	; (801a310 <__sfp_lock_acquire+0x8>)
 801a30a:	f000 b8d8 	b.w	801a4be <__retarget_lock_acquire_recursive>
 801a30e:	bf00      	nop
 801a310:	2000dcbd 	.word	0x2000dcbd

0801a314 <__sfp_lock_release>:
 801a314:	4801      	ldr	r0, [pc, #4]	; (801a31c <__sfp_lock_release+0x8>)
 801a316:	f000 b8d3 	b.w	801a4c0 <__retarget_lock_release_recursive>
 801a31a:	bf00      	nop
 801a31c:	2000dcbd 	.word	0x2000dcbd

0801a320 <__sinit_lock_acquire>:
 801a320:	4801      	ldr	r0, [pc, #4]	; (801a328 <__sinit_lock_acquire+0x8>)
 801a322:	f000 b8cc 	b.w	801a4be <__retarget_lock_acquire_recursive>
 801a326:	bf00      	nop
 801a328:	2000dcbe 	.word	0x2000dcbe

0801a32c <__sinit_lock_release>:
 801a32c:	4801      	ldr	r0, [pc, #4]	; (801a334 <__sinit_lock_release+0x8>)
 801a32e:	f000 b8c7 	b.w	801a4c0 <__retarget_lock_release_recursive>
 801a332:	bf00      	nop
 801a334:	2000dcbe 	.word	0x2000dcbe

0801a338 <__sinit>:
 801a338:	b510      	push	{r4, lr}
 801a33a:	4604      	mov	r4, r0
 801a33c:	f7ff fff0 	bl	801a320 <__sinit_lock_acquire>
 801a340:	69a3      	ldr	r3, [r4, #24]
 801a342:	b11b      	cbz	r3, 801a34c <__sinit+0x14>
 801a344:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a348:	f7ff bff0 	b.w	801a32c <__sinit_lock_release>
 801a34c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801a350:	6523      	str	r3, [r4, #80]	; 0x50
 801a352:	4b13      	ldr	r3, [pc, #76]	; (801a3a0 <__sinit+0x68>)
 801a354:	4a13      	ldr	r2, [pc, #76]	; (801a3a4 <__sinit+0x6c>)
 801a356:	681b      	ldr	r3, [r3, #0]
 801a358:	62a2      	str	r2, [r4, #40]	; 0x28
 801a35a:	42a3      	cmp	r3, r4
 801a35c:	bf04      	itt	eq
 801a35e:	2301      	moveq	r3, #1
 801a360:	61a3      	streq	r3, [r4, #24]
 801a362:	4620      	mov	r0, r4
 801a364:	f000 f820 	bl	801a3a8 <__sfp>
 801a368:	6060      	str	r0, [r4, #4]
 801a36a:	4620      	mov	r0, r4
 801a36c:	f000 f81c 	bl	801a3a8 <__sfp>
 801a370:	60a0      	str	r0, [r4, #8]
 801a372:	4620      	mov	r0, r4
 801a374:	f000 f818 	bl	801a3a8 <__sfp>
 801a378:	2200      	movs	r2, #0
 801a37a:	60e0      	str	r0, [r4, #12]
 801a37c:	2104      	movs	r1, #4
 801a37e:	6860      	ldr	r0, [r4, #4]
 801a380:	f7ff ff82 	bl	801a288 <std>
 801a384:	68a0      	ldr	r0, [r4, #8]
 801a386:	2201      	movs	r2, #1
 801a388:	2109      	movs	r1, #9
 801a38a:	f7ff ff7d 	bl	801a288 <std>
 801a38e:	68e0      	ldr	r0, [r4, #12]
 801a390:	2202      	movs	r2, #2
 801a392:	2112      	movs	r1, #18
 801a394:	f7ff ff78 	bl	801a288 <std>
 801a398:	2301      	movs	r3, #1
 801a39a:	61a3      	str	r3, [r4, #24]
 801a39c:	e7d2      	b.n	801a344 <__sinit+0xc>
 801a39e:	bf00      	nop
 801a3a0:	0801ebfc 	.word	0x0801ebfc
 801a3a4:	0801a2d1 	.word	0x0801a2d1

0801a3a8 <__sfp>:
 801a3a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a3aa:	4607      	mov	r7, r0
 801a3ac:	f7ff ffac 	bl	801a308 <__sfp_lock_acquire>
 801a3b0:	4b1e      	ldr	r3, [pc, #120]	; (801a42c <__sfp+0x84>)
 801a3b2:	681e      	ldr	r6, [r3, #0]
 801a3b4:	69b3      	ldr	r3, [r6, #24]
 801a3b6:	b913      	cbnz	r3, 801a3be <__sfp+0x16>
 801a3b8:	4630      	mov	r0, r6
 801a3ba:	f7ff ffbd 	bl	801a338 <__sinit>
 801a3be:	3648      	adds	r6, #72	; 0x48
 801a3c0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801a3c4:	3b01      	subs	r3, #1
 801a3c6:	d503      	bpl.n	801a3d0 <__sfp+0x28>
 801a3c8:	6833      	ldr	r3, [r6, #0]
 801a3ca:	b30b      	cbz	r3, 801a410 <__sfp+0x68>
 801a3cc:	6836      	ldr	r6, [r6, #0]
 801a3ce:	e7f7      	b.n	801a3c0 <__sfp+0x18>
 801a3d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801a3d4:	b9d5      	cbnz	r5, 801a40c <__sfp+0x64>
 801a3d6:	4b16      	ldr	r3, [pc, #88]	; (801a430 <__sfp+0x88>)
 801a3d8:	60e3      	str	r3, [r4, #12]
 801a3da:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801a3de:	6665      	str	r5, [r4, #100]	; 0x64
 801a3e0:	f000 f86c 	bl	801a4bc <__retarget_lock_init_recursive>
 801a3e4:	f7ff ff96 	bl	801a314 <__sfp_lock_release>
 801a3e8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801a3ec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801a3f0:	6025      	str	r5, [r4, #0]
 801a3f2:	61a5      	str	r5, [r4, #24]
 801a3f4:	2208      	movs	r2, #8
 801a3f6:	4629      	mov	r1, r5
 801a3f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801a3fc:	f000 f8ec 	bl	801a5d8 <memset>
 801a400:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801a404:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801a408:	4620      	mov	r0, r4
 801a40a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a40c:	3468      	adds	r4, #104	; 0x68
 801a40e:	e7d9      	b.n	801a3c4 <__sfp+0x1c>
 801a410:	2104      	movs	r1, #4
 801a412:	4638      	mov	r0, r7
 801a414:	f7ff ff62 	bl	801a2dc <__sfmoreglue>
 801a418:	4604      	mov	r4, r0
 801a41a:	6030      	str	r0, [r6, #0]
 801a41c:	2800      	cmp	r0, #0
 801a41e:	d1d5      	bne.n	801a3cc <__sfp+0x24>
 801a420:	f7ff ff78 	bl	801a314 <__sfp_lock_release>
 801a424:	230c      	movs	r3, #12
 801a426:	603b      	str	r3, [r7, #0]
 801a428:	e7ee      	b.n	801a408 <__sfp+0x60>
 801a42a:	bf00      	nop
 801a42c:	0801ebfc 	.word	0x0801ebfc
 801a430:	ffff0001 	.word	0xffff0001

0801a434 <_fwalk_reent>:
 801a434:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a438:	4606      	mov	r6, r0
 801a43a:	4688      	mov	r8, r1
 801a43c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801a440:	2700      	movs	r7, #0
 801a442:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801a446:	f1b9 0901 	subs.w	r9, r9, #1
 801a44a:	d505      	bpl.n	801a458 <_fwalk_reent+0x24>
 801a44c:	6824      	ldr	r4, [r4, #0]
 801a44e:	2c00      	cmp	r4, #0
 801a450:	d1f7      	bne.n	801a442 <_fwalk_reent+0xe>
 801a452:	4638      	mov	r0, r7
 801a454:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a458:	89ab      	ldrh	r3, [r5, #12]
 801a45a:	2b01      	cmp	r3, #1
 801a45c:	d907      	bls.n	801a46e <_fwalk_reent+0x3a>
 801a45e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801a462:	3301      	adds	r3, #1
 801a464:	d003      	beq.n	801a46e <_fwalk_reent+0x3a>
 801a466:	4629      	mov	r1, r5
 801a468:	4630      	mov	r0, r6
 801a46a:	47c0      	blx	r8
 801a46c:	4307      	orrs	r7, r0
 801a46e:	3568      	adds	r5, #104	; 0x68
 801a470:	e7e9      	b.n	801a446 <_fwalk_reent+0x12>
	...

0801a474 <__libc_init_array>:
 801a474:	b570      	push	{r4, r5, r6, lr}
 801a476:	4d0d      	ldr	r5, [pc, #52]	; (801a4ac <__libc_init_array+0x38>)
 801a478:	4c0d      	ldr	r4, [pc, #52]	; (801a4b0 <__libc_init_array+0x3c>)
 801a47a:	1b64      	subs	r4, r4, r5
 801a47c:	10a4      	asrs	r4, r4, #2
 801a47e:	2600      	movs	r6, #0
 801a480:	42a6      	cmp	r6, r4
 801a482:	d109      	bne.n	801a498 <__libc_init_array+0x24>
 801a484:	4d0b      	ldr	r5, [pc, #44]	; (801a4b4 <__libc_init_array+0x40>)
 801a486:	4c0c      	ldr	r4, [pc, #48]	; (801a4b8 <__libc_init_array+0x44>)
 801a488:	f000 ff3c 	bl	801b304 <_init>
 801a48c:	1b64      	subs	r4, r4, r5
 801a48e:	10a4      	asrs	r4, r4, #2
 801a490:	2600      	movs	r6, #0
 801a492:	42a6      	cmp	r6, r4
 801a494:	d105      	bne.n	801a4a2 <__libc_init_array+0x2e>
 801a496:	bd70      	pop	{r4, r5, r6, pc}
 801a498:	f855 3b04 	ldr.w	r3, [r5], #4
 801a49c:	4798      	blx	r3
 801a49e:	3601      	adds	r6, #1
 801a4a0:	e7ee      	b.n	801a480 <__libc_init_array+0xc>
 801a4a2:	f855 3b04 	ldr.w	r3, [r5], #4
 801a4a6:	4798      	blx	r3
 801a4a8:	3601      	adds	r6, #1
 801a4aa:	e7f2      	b.n	801a492 <__libc_init_array+0x1e>
 801a4ac:	0801ecec 	.word	0x0801ecec
 801a4b0:	0801ecec 	.word	0x0801ecec
 801a4b4:	0801ecec 	.word	0x0801ecec
 801a4b8:	0801ecf0 	.word	0x0801ecf0

0801a4bc <__retarget_lock_init_recursive>:
 801a4bc:	4770      	bx	lr

0801a4be <__retarget_lock_acquire_recursive>:
 801a4be:	4770      	bx	lr

0801a4c0 <__retarget_lock_release_recursive>:
 801a4c0:	4770      	bx	lr

0801a4c2 <__swhatbuf_r>:
 801a4c2:	b570      	push	{r4, r5, r6, lr}
 801a4c4:	460e      	mov	r6, r1
 801a4c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a4ca:	2900      	cmp	r1, #0
 801a4cc:	b096      	sub	sp, #88	; 0x58
 801a4ce:	4614      	mov	r4, r2
 801a4d0:	461d      	mov	r5, r3
 801a4d2:	da08      	bge.n	801a4e6 <__swhatbuf_r+0x24>
 801a4d4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801a4d8:	2200      	movs	r2, #0
 801a4da:	602a      	str	r2, [r5, #0]
 801a4dc:	061a      	lsls	r2, r3, #24
 801a4de:	d410      	bmi.n	801a502 <__swhatbuf_r+0x40>
 801a4e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a4e4:	e00e      	b.n	801a504 <__swhatbuf_r+0x42>
 801a4e6:	466a      	mov	r2, sp
 801a4e8:	f000 fb82 	bl	801abf0 <_fstat_r>
 801a4ec:	2800      	cmp	r0, #0
 801a4ee:	dbf1      	blt.n	801a4d4 <__swhatbuf_r+0x12>
 801a4f0:	9a01      	ldr	r2, [sp, #4]
 801a4f2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801a4f6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801a4fa:	425a      	negs	r2, r3
 801a4fc:	415a      	adcs	r2, r3
 801a4fe:	602a      	str	r2, [r5, #0]
 801a500:	e7ee      	b.n	801a4e0 <__swhatbuf_r+0x1e>
 801a502:	2340      	movs	r3, #64	; 0x40
 801a504:	2000      	movs	r0, #0
 801a506:	6023      	str	r3, [r4, #0]
 801a508:	b016      	add	sp, #88	; 0x58
 801a50a:	bd70      	pop	{r4, r5, r6, pc}

0801a50c <__smakebuf_r>:
 801a50c:	898b      	ldrh	r3, [r1, #12]
 801a50e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a510:	079d      	lsls	r5, r3, #30
 801a512:	4606      	mov	r6, r0
 801a514:	460c      	mov	r4, r1
 801a516:	d507      	bpl.n	801a528 <__smakebuf_r+0x1c>
 801a518:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801a51c:	6023      	str	r3, [r4, #0]
 801a51e:	6123      	str	r3, [r4, #16]
 801a520:	2301      	movs	r3, #1
 801a522:	6163      	str	r3, [r4, #20]
 801a524:	b002      	add	sp, #8
 801a526:	bd70      	pop	{r4, r5, r6, pc}
 801a528:	ab01      	add	r3, sp, #4
 801a52a:	466a      	mov	r2, sp
 801a52c:	f7ff ffc9 	bl	801a4c2 <__swhatbuf_r>
 801a530:	9900      	ldr	r1, [sp, #0]
 801a532:	4605      	mov	r5, r0
 801a534:	4630      	mov	r0, r6
 801a536:	f000 f8c1 	bl	801a6bc <_malloc_r>
 801a53a:	b948      	cbnz	r0, 801a550 <__smakebuf_r+0x44>
 801a53c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a540:	059a      	lsls	r2, r3, #22
 801a542:	d4ef      	bmi.n	801a524 <__smakebuf_r+0x18>
 801a544:	f023 0303 	bic.w	r3, r3, #3
 801a548:	f043 0302 	orr.w	r3, r3, #2
 801a54c:	81a3      	strh	r3, [r4, #12]
 801a54e:	e7e3      	b.n	801a518 <__smakebuf_r+0xc>
 801a550:	4b0d      	ldr	r3, [pc, #52]	; (801a588 <__smakebuf_r+0x7c>)
 801a552:	62b3      	str	r3, [r6, #40]	; 0x28
 801a554:	89a3      	ldrh	r3, [r4, #12]
 801a556:	6020      	str	r0, [r4, #0]
 801a558:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a55c:	81a3      	strh	r3, [r4, #12]
 801a55e:	9b00      	ldr	r3, [sp, #0]
 801a560:	6163      	str	r3, [r4, #20]
 801a562:	9b01      	ldr	r3, [sp, #4]
 801a564:	6120      	str	r0, [r4, #16]
 801a566:	b15b      	cbz	r3, 801a580 <__smakebuf_r+0x74>
 801a568:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a56c:	4630      	mov	r0, r6
 801a56e:	f000 fb51 	bl	801ac14 <_isatty_r>
 801a572:	b128      	cbz	r0, 801a580 <__smakebuf_r+0x74>
 801a574:	89a3      	ldrh	r3, [r4, #12]
 801a576:	f023 0303 	bic.w	r3, r3, #3
 801a57a:	f043 0301 	orr.w	r3, r3, #1
 801a57e:	81a3      	strh	r3, [r4, #12]
 801a580:	89a0      	ldrh	r0, [r4, #12]
 801a582:	4305      	orrs	r5, r0
 801a584:	81a5      	strh	r5, [r4, #12]
 801a586:	e7cd      	b.n	801a524 <__smakebuf_r+0x18>
 801a588:	0801a2d1 	.word	0x0801a2d1

0801a58c <malloc>:
 801a58c:	4b02      	ldr	r3, [pc, #8]	; (801a598 <malloc+0xc>)
 801a58e:	4601      	mov	r1, r0
 801a590:	6818      	ldr	r0, [r3, #0]
 801a592:	f000 b893 	b.w	801a6bc <_malloc_r>
 801a596:	bf00      	nop
 801a598:	20000110 	.word	0x20000110

0801a59c <memcmp>:
 801a59c:	b510      	push	{r4, lr}
 801a59e:	3901      	subs	r1, #1
 801a5a0:	4402      	add	r2, r0
 801a5a2:	4290      	cmp	r0, r2
 801a5a4:	d101      	bne.n	801a5aa <memcmp+0xe>
 801a5a6:	2000      	movs	r0, #0
 801a5a8:	e005      	b.n	801a5b6 <memcmp+0x1a>
 801a5aa:	7803      	ldrb	r3, [r0, #0]
 801a5ac:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801a5b0:	42a3      	cmp	r3, r4
 801a5b2:	d001      	beq.n	801a5b8 <memcmp+0x1c>
 801a5b4:	1b18      	subs	r0, r3, r4
 801a5b6:	bd10      	pop	{r4, pc}
 801a5b8:	3001      	adds	r0, #1
 801a5ba:	e7f2      	b.n	801a5a2 <memcmp+0x6>

0801a5bc <memcpy>:
 801a5bc:	440a      	add	r2, r1
 801a5be:	4291      	cmp	r1, r2
 801a5c0:	f100 33ff 	add.w	r3, r0, #4294967295
 801a5c4:	d100      	bne.n	801a5c8 <memcpy+0xc>
 801a5c6:	4770      	bx	lr
 801a5c8:	b510      	push	{r4, lr}
 801a5ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a5ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a5d2:	4291      	cmp	r1, r2
 801a5d4:	d1f9      	bne.n	801a5ca <memcpy+0xe>
 801a5d6:	bd10      	pop	{r4, pc}

0801a5d8 <memset>:
 801a5d8:	4402      	add	r2, r0
 801a5da:	4603      	mov	r3, r0
 801a5dc:	4293      	cmp	r3, r2
 801a5de:	d100      	bne.n	801a5e2 <memset+0xa>
 801a5e0:	4770      	bx	lr
 801a5e2:	f803 1b01 	strb.w	r1, [r3], #1
 801a5e6:	e7f9      	b.n	801a5dc <memset+0x4>

0801a5e8 <_free_r>:
 801a5e8:	b538      	push	{r3, r4, r5, lr}
 801a5ea:	4605      	mov	r5, r0
 801a5ec:	2900      	cmp	r1, #0
 801a5ee:	d041      	beq.n	801a674 <_free_r+0x8c>
 801a5f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a5f4:	1f0c      	subs	r4, r1, #4
 801a5f6:	2b00      	cmp	r3, #0
 801a5f8:	bfb8      	it	lt
 801a5fa:	18e4      	addlt	r4, r4, r3
 801a5fc:	f000 fb2c 	bl	801ac58 <__malloc_lock>
 801a600:	4a1d      	ldr	r2, [pc, #116]	; (801a678 <_free_r+0x90>)
 801a602:	6813      	ldr	r3, [r2, #0]
 801a604:	b933      	cbnz	r3, 801a614 <_free_r+0x2c>
 801a606:	6063      	str	r3, [r4, #4]
 801a608:	6014      	str	r4, [r2, #0]
 801a60a:	4628      	mov	r0, r5
 801a60c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a610:	f000 bb28 	b.w	801ac64 <__malloc_unlock>
 801a614:	42a3      	cmp	r3, r4
 801a616:	d908      	bls.n	801a62a <_free_r+0x42>
 801a618:	6820      	ldr	r0, [r4, #0]
 801a61a:	1821      	adds	r1, r4, r0
 801a61c:	428b      	cmp	r3, r1
 801a61e:	bf01      	itttt	eq
 801a620:	6819      	ldreq	r1, [r3, #0]
 801a622:	685b      	ldreq	r3, [r3, #4]
 801a624:	1809      	addeq	r1, r1, r0
 801a626:	6021      	streq	r1, [r4, #0]
 801a628:	e7ed      	b.n	801a606 <_free_r+0x1e>
 801a62a:	461a      	mov	r2, r3
 801a62c:	685b      	ldr	r3, [r3, #4]
 801a62e:	b10b      	cbz	r3, 801a634 <_free_r+0x4c>
 801a630:	42a3      	cmp	r3, r4
 801a632:	d9fa      	bls.n	801a62a <_free_r+0x42>
 801a634:	6811      	ldr	r1, [r2, #0]
 801a636:	1850      	adds	r0, r2, r1
 801a638:	42a0      	cmp	r0, r4
 801a63a:	d10b      	bne.n	801a654 <_free_r+0x6c>
 801a63c:	6820      	ldr	r0, [r4, #0]
 801a63e:	4401      	add	r1, r0
 801a640:	1850      	adds	r0, r2, r1
 801a642:	4283      	cmp	r3, r0
 801a644:	6011      	str	r1, [r2, #0]
 801a646:	d1e0      	bne.n	801a60a <_free_r+0x22>
 801a648:	6818      	ldr	r0, [r3, #0]
 801a64a:	685b      	ldr	r3, [r3, #4]
 801a64c:	6053      	str	r3, [r2, #4]
 801a64e:	4401      	add	r1, r0
 801a650:	6011      	str	r1, [r2, #0]
 801a652:	e7da      	b.n	801a60a <_free_r+0x22>
 801a654:	d902      	bls.n	801a65c <_free_r+0x74>
 801a656:	230c      	movs	r3, #12
 801a658:	602b      	str	r3, [r5, #0]
 801a65a:	e7d6      	b.n	801a60a <_free_r+0x22>
 801a65c:	6820      	ldr	r0, [r4, #0]
 801a65e:	1821      	adds	r1, r4, r0
 801a660:	428b      	cmp	r3, r1
 801a662:	bf04      	itt	eq
 801a664:	6819      	ldreq	r1, [r3, #0]
 801a666:	685b      	ldreq	r3, [r3, #4]
 801a668:	6063      	str	r3, [r4, #4]
 801a66a:	bf04      	itt	eq
 801a66c:	1809      	addeq	r1, r1, r0
 801a66e:	6021      	streq	r1, [r4, #0]
 801a670:	6054      	str	r4, [r2, #4]
 801a672:	e7ca      	b.n	801a60a <_free_r+0x22>
 801a674:	bd38      	pop	{r3, r4, r5, pc}
 801a676:	bf00      	nop
 801a678:	2000dcc0 	.word	0x2000dcc0

0801a67c <sbrk_aligned>:
 801a67c:	b570      	push	{r4, r5, r6, lr}
 801a67e:	4e0e      	ldr	r6, [pc, #56]	; (801a6b8 <sbrk_aligned+0x3c>)
 801a680:	460c      	mov	r4, r1
 801a682:	6831      	ldr	r1, [r6, #0]
 801a684:	4605      	mov	r5, r0
 801a686:	b911      	cbnz	r1, 801a68e <sbrk_aligned+0x12>
 801a688:	f000 f94c 	bl	801a924 <_sbrk_r>
 801a68c:	6030      	str	r0, [r6, #0]
 801a68e:	4621      	mov	r1, r4
 801a690:	4628      	mov	r0, r5
 801a692:	f000 f947 	bl	801a924 <_sbrk_r>
 801a696:	1c43      	adds	r3, r0, #1
 801a698:	d00a      	beq.n	801a6b0 <sbrk_aligned+0x34>
 801a69a:	1cc4      	adds	r4, r0, #3
 801a69c:	f024 0403 	bic.w	r4, r4, #3
 801a6a0:	42a0      	cmp	r0, r4
 801a6a2:	d007      	beq.n	801a6b4 <sbrk_aligned+0x38>
 801a6a4:	1a21      	subs	r1, r4, r0
 801a6a6:	4628      	mov	r0, r5
 801a6a8:	f000 f93c 	bl	801a924 <_sbrk_r>
 801a6ac:	3001      	adds	r0, #1
 801a6ae:	d101      	bne.n	801a6b4 <sbrk_aligned+0x38>
 801a6b0:	f04f 34ff 	mov.w	r4, #4294967295
 801a6b4:	4620      	mov	r0, r4
 801a6b6:	bd70      	pop	{r4, r5, r6, pc}
 801a6b8:	2000dcc4 	.word	0x2000dcc4

0801a6bc <_malloc_r>:
 801a6bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a6c0:	1ccd      	adds	r5, r1, #3
 801a6c2:	f025 0503 	bic.w	r5, r5, #3
 801a6c6:	3508      	adds	r5, #8
 801a6c8:	2d0c      	cmp	r5, #12
 801a6ca:	bf38      	it	cc
 801a6cc:	250c      	movcc	r5, #12
 801a6ce:	2d00      	cmp	r5, #0
 801a6d0:	4607      	mov	r7, r0
 801a6d2:	db01      	blt.n	801a6d8 <_malloc_r+0x1c>
 801a6d4:	42a9      	cmp	r1, r5
 801a6d6:	d905      	bls.n	801a6e4 <_malloc_r+0x28>
 801a6d8:	230c      	movs	r3, #12
 801a6da:	603b      	str	r3, [r7, #0]
 801a6dc:	2600      	movs	r6, #0
 801a6de:	4630      	mov	r0, r6
 801a6e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a6e4:	4e2e      	ldr	r6, [pc, #184]	; (801a7a0 <_malloc_r+0xe4>)
 801a6e6:	f000 fab7 	bl	801ac58 <__malloc_lock>
 801a6ea:	6833      	ldr	r3, [r6, #0]
 801a6ec:	461c      	mov	r4, r3
 801a6ee:	bb34      	cbnz	r4, 801a73e <_malloc_r+0x82>
 801a6f0:	4629      	mov	r1, r5
 801a6f2:	4638      	mov	r0, r7
 801a6f4:	f7ff ffc2 	bl	801a67c <sbrk_aligned>
 801a6f8:	1c43      	adds	r3, r0, #1
 801a6fa:	4604      	mov	r4, r0
 801a6fc:	d14d      	bne.n	801a79a <_malloc_r+0xde>
 801a6fe:	6834      	ldr	r4, [r6, #0]
 801a700:	4626      	mov	r6, r4
 801a702:	2e00      	cmp	r6, #0
 801a704:	d140      	bne.n	801a788 <_malloc_r+0xcc>
 801a706:	6823      	ldr	r3, [r4, #0]
 801a708:	4631      	mov	r1, r6
 801a70a:	4638      	mov	r0, r7
 801a70c:	eb04 0803 	add.w	r8, r4, r3
 801a710:	f000 f908 	bl	801a924 <_sbrk_r>
 801a714:	4580      	cmp	r8, r0
 801a716:	d13a      	bne.n	801a78e <_malloc_r+0xd2>
 801a718:	6821      	ldr	r1, [r4, #0]
 801a71a:	3503      	adds	r5, #3
 801a71c:	1a6d      	subs	r5, r5, r1
 801a71e:	f025 0503 	bic.w	r5, r5, #3
 801a722:	3508      	adds	r5, #8
 801a724:	2d0c      	cmp	r5, #12
 801a726:	bf38      	it	cc
 801a728:	250c      	movcc	r5, #12
 801a72a:	4629      	mov	r1, r5
 801a72c:	4638      	mov	r0, r7
 801a72e:	f7ff ffa5 	bl	801a67c <sbrk_aligned>
 801a732:	3001      	adds	r0, #1
 801a734:	d02b      	beq.n	801a78e <_malloc_r+0xd2>
 801a736:	6823      	ldr	r3, [r4, #0]
 801a738:	442b      	add	r3, r5
 801a73a:	6023      	str	r3, [r4, #0]
 801a73c:	e00e      	b.n	801a75c <_malloc_r+0xa0>
 801a73e:	6822      	ldr	r2, [r4, #0]
 801a740:	1b52      	subs	r2, r2, r5
 801a742:	d41e      	bmi.n	801a782 <_malloc_r+0xc6>
 801a744:	2a0b      	cmp	r2, #11
 801a746:	d916      	bls.n	801a776 <_malloc_r+0xba>
 801a748:	1961      	adds	r1, r4, r5
 801a74a:	42a3      	cmp	r3, r4
 801a74c:	6025      	str	r5, [r4, #0]
 801a74e:	bf18      	it	ne
 801a750:	6059      	strne	r1, [r3, #4]
 801a752:	6863      	ldr	r3, [r4, #4]
 801a754:	bf08      	it	eq
 801a756:	6031      	streq	r1, [r6, #0]
 801a758:	5162      	str	r2, [r4, r5]
 801a75a:	604b      	str	r3, [r1, #4]
 801a75c:	4638      	mov	r0, r7
 801a75e:	f104 060b 	add.w	r6, r4, #11
 801a762:	f000 fa7f 	bl	801ac64 <__malloc_unlock>
 801a766:	f026 0607 	bic.w	r6, r6, #7
 801a76a:	1d23      	adds	r3, r4, #4
 801a76c:	1af2      	subs	r2, r6, r3
 801a76e:	d0b6      	beq.n	801a6de <_malloc_r+0x22>
 801a770:	1b9b      	subs	r3, r3, r6
 801a772:	50a3      	str	r3, [r4, r2]
 801a774:	e7b3      	b.n	801a6de <_malloc_r+0x22>
 801a776:	6862      	ldr	r2, [r4, #4]
 801a778:	42a3      	cmp	r3, r4
 801a77a:	bf0c      	ite	eq
 801a77c:	6032      	streq	r2, [r6, #0]
 801a77e:	605a      	strne	r2, [r3, #4]
 801a780:	e7ec      	b.n	801a75c <_malloc_r+0xa0>
 801a782:	4623      	mov	r3, r4
 801a784:	6864      	ldr	r4, [r4, #4]
 801a786:	e7b2      	b.n	801a6ee <_malloc_r+0x32>
 801a788:	4634      	mov	r4, r6
 801a78a:	6876      	ldr	r6, [r6, #4]
 801a78c:	e7b9      	b.n	801a702 <_malloc_r+0x46>
 801a78e:	230c      	movs	r3, #12
 801a790:	603b      	str	r3, [r7, #0]
 801a792:	4638      	mov	r0, r7
 801a794:	f000 fa66 	bl	801ac64 <__malloc_unlock>
 801a798:	e7a1      	b.n	801a6de <_malloc_r+0x22>
 801a79a:	6025      	str	r5, [r4, #0]
 801a79c:	e7de      	b.n	801a75c <_malloc_r+0xa0>
 801a79e:	bf00      	nop
 801a7a0:	2000dcc0 	.word	0x2000dcc0

0801a7a4 <iprintf>:
 801a7a4:	b40f      	push	{r0, r1, r2, r3}
 801a7a6:	4b0a      	ldr	r3, [pc, #40]	; (801a7d0 <iprintf+0x2c>)
 801a7a8:	b513      	push	{r0, r1, r4, lr}
 801a7aa:	681c      	ldr	r4, [r3, #0]
 801a7ac:	b124      	cbz	r4, 801a7b8 <iprintf+0x14>
 801a7ae:	69a3      	ldr	r3, [r4, #24]
 801a7b0:	b913      	cbnz	r3, 801a7b8 <iprintf+0x14>
 801a7b2:	4620      	mov	r0, r4
 801a7b4:	f7ff fdc0 	bl	801a338 <__sinit>
 801a7b8:	ab05      	add	r3, sp, #20
 801a7ba:	9a04      	ldr	r2, [sp, #16]
 801a7bc:	68a1      	ldr	r1, [r4, #8]
 801a7be:	9301      	str	r3, [sp, #4]
 801a7c0:	4620      	mov	r0, r4
 801a7c2:	f000 fa7d 	bl	801acc0 <_vfiprintf_r>
 801a7c6:	b002      	add	sp, #8
 801a7c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a7cc:	b004      	add	sp, #16
 801a7ce:	4770      	bx	lr
 801a7d0:	20000110 	.word	0x20000110

0801a7d4 <rand>:
 801a7d4:	4b16      	ldr	r3, [pc, #88]	; (801a830 <rand+0x5c>)
 801a7d6:	b510      	push	{r4, lr}
 801a7d8:	681c      	ldr	r4, [r3, #0]
 801a7da:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801a7dc:	b9b3      	cbnz	r3, 801a80c <rand+0x38>
 801a7de:	2018      	movs	r0, #24
 801a7e0:	f7ff fed4 	bl	801a58c <malloc>
 801a7e4:	4602      	mov	r2, r0
 801a7e6:	63a0      	str	r0, [r4, #56]	; 0x38
 801a7e8:	b920      	cbnz	r0, 801a7f4 <rand+0x20>
 801a7ea:	4b12      	ldr	r3, [pc, #72]	; (801a834 <rand+0x60>)
 801a7ec:	4812      	ldr	r0, [pc, #72]	; (801a838 <rand+0x64>)
 801a7ee:	214e      	movs	r1, #78	; 0x4e
 801a7f0:	f000 f9be 	bl	801ab70 <__assert_func>
 801a7f4:	4911      	ldr	r1, [pc, #68]	; (801a83c <rand+0x68>)
 801a7f6:	4b12      	ldr	r3, [pc, #72]	; (801a840 <rand+0x6c>)
 801a7f8:	e9c0 1300 	strd	r1, r3, [r0]
 801a7fc:	4b11      	ldr	r3, [pc, #68]	; (801a844 <rand+0x70>)
 801a7fe:	6083      	str	r3, [r0, #8]
 801a800:	230b      	movs	r3, #11
 801a802:	8183      	strh	r3, [r0, #12]
 801a804:	2100      	movs	r1, #0
 801a806:	2001      	movs	r0, #1
 801a808:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801a80c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 801a80e:	4a0e      	ldr	r2, [pc, #56]	; (801a848 <rand+0x74>)
 801a810:	6920      	ldr	r0, [r4, #16]
 801a812:	6963      	ldr	r3, [r4, #20]
 801a814:	490d      	ldr	r1, [pc, #52]	; (801a84c <rand+0x78>)
 801a816:	4342      	muls	r2, r0
 801a818:	fb01 2203 	mla	r2, r1, r3, r2
 801a81c:	fba0 0101 	umull	r0, r1, r0, r1
 801a820:	1c43      	adds	r3, r0, #1
 801a822:	eb42 0001 	adc.w	r0, r2, r1
 801a826:	e9c4 3004 	strd	r3, r0, [r4, #16]
 801a82a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801a82e:	bd10      	pop	{r4, pc}
 801a830:	20000110 	.word	0x20000110
 801a834:	0801ec00 	.word	0x0801ec00
 801a838:	0801ec17 	.word	0x0801ec17
 801a83c:	abcd330e 	.word	0xabcd330e
 801a840:	e66d1234 	.word	0xe66d1234
 801a844:	0005deec 	.word	0x0005deec
 801a848:	5851f42d 	.word	0x5851f42d
 801a84c:	4c957f2d 	.word	0x4c957f2d

0801a850 <cleanup_glue>:
 801a850:	b538      	push	{r3, r4, r5, lr}
 801a852:	460c      	mov	r4, r1
 801a854:	6809      	ldr	r1, [r1, #0]
 801a856:	4605      	mov	r5, r0
 801a858:	b109      	cbz	r1, 801a85e <cleanup_glue+0xe>
 801a85a:	f7ff fff9 	bl	801a850 <cleanup_glue>
 801a85e:	4621      	mov	r1, r4
 801a860:	4628      	mov	r0, r5
 801a862:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a866:	f7ff bebf 	b.w	801a5e8 <_free_r>
	...

0801a86c <_reclaim_reent>:
 801a86c:	4b2c      	ldr	r3, [pc, #176]	; (801a920 <_reclaim_reent+0xb4>)
 801a86e:	681b      	ldr	r3, [r3, #0]
 801a870:	4283      	cmp	r3, r0
 801a872:	b570      	push	{r4, r5, r6, lr}
 801a874:	4604      	mov	r4, r0
 801a876:	d051      	beq.n	801a91c <_reclaim_reent+0xb0>
 801a878:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801a87a:	b143      	cbz	r3, 801a88e <_reclaim_reent+0x22>
 801a87c:	68db      	ldr	r3, [r3, #12]
 801a87e:	2b00      	cmp	r3, #0
 801a880:	d14a      	bne.n	801a918 <_reclaim_reent+0xac>
 801a882:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a884:	6819      	ldr	r1, [r3, #0]
 801a886:	b111      	cbz	r1, 801a88e <_reclaim_reent+0x22>
 801a888:	4620      	mov	r0, r4
 801a88a:	f7ff fead 	bl	801a5e8 <_free_r>
 801a88e:	6961      	ldr	r1, [r4, #20]
 801a890:	b111      	cbz	r1, 801a898 <_reclaim_reent+0x2c>
 801a892:	4620      	mov	r0, r4
 801a894:	f7ff fea8 	bl	801a5e8 <_free_r>
 801a898:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801a89a:	b111      	cbz	r1, 801a8a2 <_reclaim_reent+0x36>
 801a89c:	4620      	mov	r0, r4
 801a89e:	f7ff fea3 	bl	801a5e8 <_free_r>
 801a8a2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801a8a4:	b111      	cbz	r1, 801a8ac <_reclaim_reent+0x40>
 801a8a6:	4620      	mov	r0, r4
 801a8a8:	f7ff fe9e 	bl	801a5e8 <_free_r>
 801a8ac:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801a8ae:	b111      	cbz	r1, 801a8b6 <_reclaim_reent+0x4a>
 801a8b0:	4620      	mov	r0, r4
 801a8b2:	f7ff fe99 	bl	801a5e8 <_free_r>
 801a8b6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801a8b8:	b111      	cbz	r1, 801a8c0 <_reclaim_reent+0x54>
 801a8ba:	4620      	mov	r0, r4
 801a8bc:	f7ff fe94 	bl	801a5e8 <_free_r>
 801a8c0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801a8c2:	b111      	cbz	r1, 801a8ca <_reclaim_reent+0x5e>
 801a8c4:	4620      	mov	r0, r4
 801a8c6:	f7ff fe8f 	bl	801a5e8 <_free_r>
 801a8ca:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801a8cc:	b111      	cbz	r1, 801a8d4 <_reclaim_reent+0x68>
 801a8ce:	4620      	mov	r0, r4
 801a8d0:	f7ff fe8a 	bl	801a5e8 <_free_r>
 801a8d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a8d6:	b111      	cbz	r1, 801a8de <_reclaim_reent+0x72>
 801a8d8:	4620      	mov	r0, r4
 801a8da:	f7ff fe85 	bl	801a5e8 <_free_r>
 801a8de:	69a3      	ldr	r3, [r4, #24]
 801a8e0:	b1e3      	cbz	r3, 801a91c <_reclaim_reent+0xb0>
 801a8e2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801a8e4:	4620      	mov	r0, r4
 801a8e6:	4798      	blx	r3
 801a8e8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801a8ea:	b1b9      	cbz	r1, 801a91c <_reclaim_reent+0xb0>
 801a8ec:	4620      	mov	r0, r4
 801a8ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a8f2:	f7ff bfad 	b.w	801a850 <cleanup_glue>
 801a8f6:	5949      	ldr	r1, [r1, r5]
 801a8f8:	b941      	cbnz	r1, 801a90c <_reclaim_reent+0xa0>
 801a8fa:	3504      	adds	r5, #4
 801a8fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a8fe:	2d80      	cmp	r5, #128	; 0x80
 801a900:	68d9      	ldr	r1, [r3, #12]
 801a902:	d1f8      	bne.n	801a8f6 <_reclaim_reent+0x8a>
 801a904:	4620      	mov	r0, r4
 801a906:	f7ff fe6f 	bl	801a5e8 <_free_r>
 801a90a:	e7ba      	b.n	801a882 <_reclaim_reent+0x16>
 801a90c:	680e      	ldr	r6, [r1, #0]
 801a90e:	4620      	mov	r0, r4
 801a910:	f7ff fe6a 	bl	801a5e8 <_free_r>
 801a914:	4631      	mov	r1, r6
 801a916:	e7ef      	b.n	801a8f8 <_reclaim_reent+0x8c>
 801a918:	2500      	movs	r5, #0
 801a91a:	e7ef      	b.n	801a8fc <_reclaim_reent+0x90>
 801a91c:	bd70      	pop	{r4, r5, r6, pc}
 801a91e:	bf00      	nop
 801a920:	20000110 	.word	0x20000110

0801a924 <_sbrk_r>:
 801a924:	b538      	push	{r3, r4, r5, lr}
 801a926:	4d06      	ldr	r5, [pc, #24]	; (801a940 <_sbrk_r+0x1c>)
 801a928:	2300      	movs	r3, #0
 801a92a:	4604      	mov	r4, r0
 801a92c:	4608      	mov	r0, r1
 801a92e:	602b      	str	r3, [r5, #0]
 801a930:	f7e6 f8bc 	bl	8000aac <_sbrk>
 801a934:	1c43      	adds	r3, r0, #1
 801a936:	d102      	bne.n	801a93e <_sbrk_r+0x1a>
 801a938:	682b      	ldr	r3, [r5, #0]
 801a93a:	b103      	cbz	r3, 801a93e <_sbrk_r+0x1a>
 801a93c:	6023      	str	r3, [r4, #0]
 801a93e:	bd38      	pop	{r3, r4, r5, pc}
 801a940:	2000dcc8 	.word	0x2000dcc8

0801a944 <__sread>:
 801a944:	b510      	push	{r4, lr}
 801a946:	460c      	mov	r4, r1
 801a948:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a94c:	f000 fc7c 	bl	801b248 <_read_r>
 801a950:	2800      	cmp	r0, #0
 801a952:	bfab      	itete	ge
 801a954:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801a956:	89a3      	ldrhlt	r3, [r4, #12]
 801a958:	181b      	addge	r3, r3, r0
 801a95a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801a95e:	bfac      	ite	ge
 801a960:	6563      	strge	r3, [r4, #84]	; 0x54
 801a962:	81a3      	strhlt	r3, [r4, #12]
 801a964:	bd10      	pop	{r4, pc}

0801a966 <__swrite>:
 801a966:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a96a:	461f      	mov	r7, r3
 801a96c:	898b      	ldrh	r3, [r1, #12]
 801a96e:	05db      	lsls	r3, r3, #23
 801a970:	4605      	mov	r5, r0
 801a972:	460c      	mov	r4, r1
 801a974:	4616      	mov	r6, r2
 801a976:	d505      	bpl.n	801a984 <__swrite+0x1e>
 801a978:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a97c:	2302      	movs	r3, #2
 801a97e:	2200      	movs	r2, #0
 801a980:	f000 f958 	bl	801ac34 <_lseek_r>
 801a984:	89a3      	ldrh	r3, [r4, #12]
 801a986:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a98a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801a98e:	81a3      	strh	r3, [r4, #12]
 801a990:	4632      	mov	r2, r6
 801a992:	463b      	mov	r3, r7
 801a994:	4628      	mov	r0, r5
 801a996:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a99a:	f000 b869 	b.w	801aa70 <_write_r>

0801a99e <__sseek>:
 801a99e:	b510      	push	{r4, lr}
 801a9a0:	460c      	mov	r4, r1
 801a9a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a9a6:	f000 f945 	bl	801ac34 <_lseek_r>
 801a9aa:	1c43      	adds	r3, r0, #1
 801a9ac:	89a3      	ldrh	r3, [r4, #12]
 801a9ae:	bf15      	itete	ne
 801a9b0:	6560      	strne	r0, [r4, #84]	; 0x54
 801a9b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801a9b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801a9ba:	81a3      	strheq	r3, [r4, #12]
 801a9bc:	bf18      	it	ne
 801a9be:	81a3      	strhne	r3, [r4, #12]
 801a9c0:	bd10      	pop	{r4, pc}

0801a9c2 <__sclose>:
 801a9c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a9c6:	f000 b8f1 	b.w	801abac <_close_r>
	...

0801a9cc <__swbuf_r>:
 801a9cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a9ce:	460e      	mov	r6, r1
 801a9d0:	4614      	mov	r4, r2
 801a9d2:	4605      	mov	r5, r0
 801a9d4:	b118      	cbz	r0, 801a9de <__swbuf_r+0x12>
 801a9d6:	6983      	ldr	r3, [r0, #24]
 801a9d8:	b90b      	cbnz	r3, 801a9de <__swbuf_r+0x12>
 801a9da:	f7ff fcad 	bl	801a338 <__sinit>
 801a9de:	4b21      	ldr	r3, [pc, #132]	; (801aa64 <__swbuf_r+0x98>)
 801a9e0:	429c      	cmp	r4, r3
 801a9e2:	d12b      	bne.n	801aa3c <__swbuf_r+0x70>
 801a9e4:	686c      	ldr	r4, [r5, #4]
 801a9e6:	69a3      	ldr	r3, [r4, #24]
 801a9e8:	60a3      	str	r3, [r4, #8]
 801a9ea:	89a3      	ldrh	r3, [r4, #12]
 801a9ec:	071a      	lsls	r2, r3, #28
 801a9ee:	d52f      	bpl.n	801aa50 <__swbuf_r+0x84>
 801a9f0:	6923      	ldr	r3, [r4, #16]
 801a9f2:	b36b      	cbz	r3, 801aa50 <__swbuf_r+0x84>
 801a9f4:	6923      	ldr	r3, [r4, #16]
 801a9f6:	6820      	ldr	r0, [r4, #0]
 801a9f8:	1ac0      	subs	r0, r0, r3
 801a9fa:	6963      	ldr	r3, [r4, #20]
 801a9fc:	b2f6      	uxtb	r6, r6
 801a9fe:	4283      	cmp	r3, r0
 801aa00:	4637      	mov	r7, r6
 801aa02:	dc04      	bgt.n	801aa0e <__swbuf_r+0x42>
 801aa04:	4621      	mov	r1, r4
 801aa06:	4628      	mov	r0, r5
 801aa08:	f7ff fc02 	bl	801a210 <_fflush_r>
 801aa0c:	bb30      	cbnz	r0, 801aa5c <__swbuf_r+0x90>
 801aa0e:	68a3      	ldr	r3, [r4, #8]
 801aa10:	3b01      	subs	r3, #1
 801aa12:	60a3      	str	r3, [r4, #8]
 801aa14:	6823      	ldr	r3, [r4, #0]
 801aa16:	1c5a      	adds	r2, r3, #1
 801aa18:	6022      	str	r2, [r4, #0]
 801aa1a:	701e      	strb	r6, [r3, #0]
 801aa1c:	6963      	ldr	r3, [r4, #20]
 801aa1e:	3001      	adds	r0, #1
 801aa20:	4283      	cmp	r3, r0
 801aa22:	d004      	beq.n	801aa2e <__swbuf_r+0x62>
 801aa24:	89a3      	ldrh	r3, [r4, #12]
 801aa26:	07db      	lsls	r3, r3, #31
 801aa28:	d506      	bpl.n	801aa38 <__swbuf_r+0x6c>
 801aa2a:	2e0a      	cmp	r6, #10
 801aa2c:	d104      	bne.n	801aa38 <__swbuf_r+0x6c>
 801aa2e:	4621      	mov	r1, r4
 801aa30:	4628      	mov	r0, r5
 801aa32:	f7ff fbed 	bl	801a210 <_fflush_r>
 801aa36:	b988      	cbnz	r0, 801aa5c <__swbuf_r+0x90>
 801aa38:	4638      	mov	r0, r7
 801aa3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801aa3c:	4b0a      	ldr	r3, [pc, #40]	; (801aa68 <__swbuf_r+0x9c>)
 801aa3e:	429c      	cmp	r4, r3
 801aa40:	d101      	bne.n	801aa46 <__swbuf_r+0x7a>
 801aa42:	68ac      	ldr	r4, [r5, #8]
 801aa44:	e7cf      	b.n	801a9e6 <__swbuf_r+0x1a>
 801aa46:	4b09      	ldr	r3, [pc, #36]	; (801aa6c <__swbuf_r+0xa0>)
 801aa48:	429c      	cmp	r4, r3
 801aa4a:	bf08      	it	eq
 801aa4c:	68ec      	ldreq	r4, [r5, #12]
 801aa4e:	e7ca      	b.n	801a9e6 <__swbuf_r+0x1a>
 801aa50:	4621      	mov	r1, r4
 801aa52:	4628      	mov	r0, r5
 801aa54:	f000 f81e 	bl	801aa94 <__swsetup_r>
 801aa58:	2800      	cmp	r0, #0
 801aa5a:	d0cb      	beq.n	801a9f4 <__swbuf_r+0x28>
 801aa5c:	f04f 37ff 	mov.w	r7, #4294967295
 801aa60:	e7ea      	b.n	801aa38 <__swbuf_r+0x6c>
 801aa62:	bf00      	nop
 801aa64:	0801ebbc 	.word	0x0801ebbc
 801aa68:	0801ebdc 	.word	0x0801ebdc
 801aa6c:	0801eb9c 	.word	0x0801eb9c

0801aa70 <_write_r>:
 801aa70:	b538      	push	{r3, r4, r5, lr}
 801aa72:	4d07      	ldr	r5, [pc, #28]	; (801aa90 <_write_r+0x20>)
 801aa74:	4604      	mov	r4, r0
 801aa76:	4608      	mov	r0, r1
 801aa78:	4611      	mov	r1, r2
 801aa7a:	2200      	movs	r2, #0
 801aa7c:	602a      	str	r2, [r5, #0]
 801aa7e:	461a      	mov	r2, r3
 801aa80:	f7e5 ffc7 	bl	8000a12 <_write>
 801aa84:	1c43      	adds	r3, r0, #1
 801aa86:	d102      	bne.n	801aa8e <_write_r+0x1e>
 801aa88:	682b      	ldr	r3, [r5, #0]
 801aa8a:	b103      	cbz	r3, 801aa8e <_write_r+0x1e>
 801aa8c:	6023      	str	r3, [r4, #0]
 801aa8e:	bd38      	pop	{r3, r4, r5, pc}
 801aa90:	2000dcc8 	.word	0x2000dcc8

0801aa94 <__swsetup_r>:
 801aa94:	4b32      	ldr	r3, [pc, #200]	; (801ab60 <__swsetup_r+0xcc>)
 801aa96:	b570      	push	{r4, r5, r6, lr}
 801aa98:	681d      	ldr	r5, [r3, #0]
 801aa9a:	4606      	mov	r6, r0
 801aa9c:	460c      	mov	r4, r1
 801aa9e:	b125      	cbz	r5, 801aaaa <__swsetup_r+0x16>
 801aaa0:	69ab      	ldr	r3, [r5, #24]
 801aaa2:	b913      	cbnz	r3, 801aaaa <__swsetup_r+0x16>
 801aaa4:	4628      	mov	r0, r5
 801aaa6:	f7ff fc47 	bl	801a338 <__sinit>
 801aaaa:	4b2e      	ldr	r3, [pc, #184]	; (801ab64 <__swsetup_r+0xd0>)
 801aaac:	429c      	cmp	r4, r3
 801aaae:	d10f      	bne.n	801aad0 <__swsetup_r+0x3c>
 801aab0:	686c      	ldr	r4, [r5, #4]
 801aab2:	89a3      	ldrh	r3, [r4, #12]
 801aab4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801aab8:	0719      	lsls	r1, r3, #28
 801aaba:	d42c      	bmi.n	801ab16 <__swsetup_r+0x82>
 801aabc:	06dd      	lsls	r5, r3, #27
 801aabe:	d411      	bmi.n	801aae4 <__swsetup_r+0x50>
 801aac0:	2309      	movs	r3, #9
 801aac2:	6033      	str	r3, [r6, #0]
 801aac4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801aac8:	81a3      	strh	r3, [r4, #12]
 801aaca:	f04f 30ff 	mov.w	r0, #4294967295
 801aace:	e03e      	b.n	801ab4e <__swsetup_r+0xba>
 801aad0:	4b25      	ldr	r3, [pc, #148]	; (801ab68 <__swsetup_r+0xd4>)
 801aad2:	429c      	cmp	r4, r3
 801aad4:	d101      	bne.n	801aada <__swsetup_r+0x46>
 801aad6:	68ac      	ldr	r4, [r5, #8]
 801aad8:	e7eb      	b.n	801aab2 <__swsetup_r+0x1e>
 801aada:	4b24      	ldr	r3, [pc, #144]	; (801ab6c <__swsetup_r+0xd8>)
 801aadc:	429c      	cmp	r4, r3
 801aade:	bf08      	it	eq
 801aae0:	68ec      	ldreq	r4, [r5, #12]
 801aae2:	e7e6      	b.n	801aab2 <__swsetup_r+0x1e>
 801aae4:	0758      	lsls	r0, r3, #29
 801aae6:	d512      	bpl.n	801ab0e <__swsetup_r+0x7a>
 801aae8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801aaea:	b141      	cbz	r1, 801aafe <__swsetup_r+0x6a>
 801aaec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801aaf0:	4299      	cmp	r1, r3
 801aaf2:	d002      	beq.n	801aafa <__swsetup_r+0x66>
 801aaf4:	4630      	mov	r0, r6
 801aaf6:	f7ff fd77 	bl	801a5e8 <_free_r>
 801aafa:	2300      	movs	r3, #0
 801aafc:	6363      	str	r3, [r4, #52]	; 0x34
 801aafe:	89a3      	ldrh	r3, [r4, #12]
 801ab00:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801ab04:	81a3      	strh	r3, [r4, #12]
 801ab06:	2300      	movs	r3, #0
 801ab08:	6063      	str	r3, [r4, #4]
 801ab0a:	6923      	ldr	r3, [r4, #16]
 801ab0c:	6023      	str	r3, [r4, #0]
 801ab0e:	89a3      	ldrh	r3, [r4, #12]
 801ab10:	f043 0308 	orr.w	r3, r3, #8
 801ab14:	81a3      	strh	r3, [r4, #12]
 801ab16:	6923      	ldr	r3, [r4, #16]
 801ab18:	b94b      	cbnz	r3, 801ab2e <__swsetup_r+0x9a>
 801ab1a:	89a3      	ldrh	r3, [r4, #12]
 801ab1c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801ab20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801ab24:	d003      	beq.n	801ab2e <__swsetup_r+0x9a>
 801ab26:	4621      	mov	r1, r4
 801ab28:	4630      	mov	r0, r6
 801ab2a:	f7ff fcef 	bl	801a50c <__smakebuf_r>
 801ab2e:	89a0      	ldrh	r0, [r4, #12]
 801ab30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801ab34:	f010 0301 	ands.w	r3, r0, #1
 801ab38:	d00a      	beq.n	801ab50 <__swsetup_r+0xbc>
 801ab3a:	2300      	movs	r3, #0
 801ab3c:	60a3      	str	r3, [r4, #8]
 801ab3e:	6963      	ldr	r3, [r4, #20]
 801ab40:	425b      	negs	r3, r3
 801ab42:	61a3      	str	r3, [r4, #24]
 801ab44:	6923      	ldr	r3, [r4, #16]
 801ab46:	b943      	cbnz	r3, 801ab5a <__swsetup_r+0xc6>
 801ab48:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801ab4c:	d1ba      	bne.n	801aac4 <__swsetup_r+0x30>
 801ab4e:	bd70      	pop	{r4, r5, r6, pc}
 801ab50:	0781      	lsls	r1, r0, #30
 801ab52:	bf58      	it	pl
 801ab54:	6963      	ldrpl	r3, [r4, #20]
 801ab56:	60a3      	str	r3, [r4, #8]
 801ab58:	e7f4      	b.n	801ab44 <__swsetup_r+0xb0>
 801ab5a:	2000      	movs	r0, #0
 801ab5c:	e7f7      	b.n	801ab4e <__swsetup_r+0xba>
 801ab5e:	bf00      	nop
 801ab60:	20000110 	.word	0x20000110
 801ab64:	0801ebbc 	.word	0x0801ebbc
 801ab68:	0801ebdc 	.word	0x0801ebdc
 801ab6c:	0801eb9c 	.word	0x0801eb9c

0801ab70 <__assert_func>:
 801ab70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801ab72:	4614      	mov	r4, r2
 801ab74:	461a      	mov	r2, r3
 801ab76:	4b09      	ldr	r3, [pc, #36]	; (801ab9c <__assert_func+0x2c>)
 801ab78:	681b      	ldr	r3, [r3, #0]
 801ab7a:	4605      	mov	r5, r0
 801ab7c:	68d8      	ldr	r0, [r3, #12]
 801ab7e:	b14c      	cbz	r4, 801ab94 <__assert_func+0x24>
 801ab80:	4b07      	ldr	r3, [pc, #28]	; (801aba0 <__assert_func+0x30>)
 801ab82:	9100      	str	r1, [sp, #0]
 801ab84:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801ab88:	4906      	ldr	r1, [pc, #24]	; (801aba4 <__assert_func+0x34>)
 801ab8a:	462b      	mov	r3, r5
 801ab8c:	f000 f81e 	bl	801abcc <fiprintf>
 801ab90:	f000 fb6c 	bl	801b26c <abort>
 801ab94:	4b04      	ldr	r3, [pc, #16]	; (801aba8 <__assert_func+0x38>)
 801ab96:	461c      	mov	r4, r3
 801ab98:	e7f3      	b.n	801ab82 <__assert_func+0x12>
 801ab9a:	bf00      	nop
 801ab9c:	20000110 	.word	0x20000110
 801aba0:	0801ec72 	.word	0x0801ec72
 801aba4:	0801ec7f 	.word	0x0801ec7f
 801aba8:	0801ecad 	.word	0x0801ecad

0801abac <_close_r>:
 801abac:	b538      	push	{r3, r4, r5, lr}
 801abae:	4d06      	ldr	r5, [pc, #24]	; (801abc8 <_close_r+0x1c>)
 801abb0:	2300      	movs	r3, #0
 801abb2:	4604      	mov	r4, r0
 801abb4:	4608      	mov	r0, r1
 801abb6:	602b      	str	r3, [r5, #0]
 801abb8:	f7e5 ff47 	bl	8000a4a <_close>
 801abbc:	1c43      	adds	r3, r0, #1
 801abbe:	d102      	bne.n	801abc6 <_close_r+0x1a>
 801abc0:	682b      	ldr	r3, [r5, #0]
 801abc2:	b103      	cbz	r3, 801abc6 <_close_r+0x1a>
 801abc4:	6023      	str	r3, [r4, #0]
 801abc6:	bd38      	pop	{r3, r4, r5, pc}
 801abc8:	2000dcc8 	.word	0x2000dcc8

0801abcc <fiprintf>:
 801abcc:	b40e      	push	{r1, r2, r3}
 801abce:	b503      	push	{r0, r1, lr}
 801abd0:	4601      	mov	r1, r0
 801abd2:	ab03      	add	r3, sp, #12
 801abd4:	4805      	ldr	r0, [pc, #20]	; (801abec <fiprintf+0x20>)
 801abd6:	f853 2b04 	ldr.w	r2, [r3], #4
 801abda:	6800      	ldr	r0, [r0, #0]
 801abdc:	9301      	str	r3, [sp, #4]
 801abde:	f000 f86f 	bl	801acc0 <_vfiprintf_r>
 801abe2:	b002      	add	sp, #8
 801abe4:	f85d eb04 	ldr.w	lr, [sp], #4
 801abe8:	b003      	add	sp, #12
 801abea:	4770      	bx	lr
 801abec:	20000110 	.word	0x20000110

0801abf0 <_fstat_r>:
 801abf0:	b538      	push	{r3, r4, r5, lr}
 801abf2:	4d07      	ldr	r5, [pc, #28]	; (801ac10 <_fstat_r+0x20>)
 801abf4:	2300      	movs	r3, #0
 801abf6:	4604      	mov	r4, r0
 801abf8:	4608      	mov	r0, r1
 801abfa:	4611      	mov	r1, r2
 801abfc:	602b      	str	r3, [r5, #0]
 801abfe:	f7e5 ff2f 	bl	8000a60 <_fstat>
 801ac02:	1c43      	adds	r3, r0, #1
 801ac04:	d102      	bne.n	801ac0c <_fstat_r+0x1c>
 801ac06:	682b      	ldr	r3, [r5, #0]
 801ac08:	b103      	cbz	r3, 801ac0c <_fstat_r+0x1c>
 801ac0a:	6023      	str	r3, [r4, #0]
 801ac0c:	bd38      	pop	{r3, r4, r5, pc}
 801ac0e:	bf00      	nop
 801ac10:	2000dcc8 	.word	0x2000dcc8

0801ac14 <_isatty_r>:
 801ac14:	b538      	push	{r3, r4, r5, lr}
 801ac16:	4d06      	ldr	r5, [pc, #24]	; (801ac30 <_isatty_r+0x1c>)
 801ac18:	2300      	movs	r3, #0
 801ac1a:	4604      	mov	r4, r0
 801ac1c:	4608      	mov	r0, r1
 801ac1e:	602b      	str	r3, [r5, #0]
 801ac20:	f7e5 ff2d 	bl	8000a7e <_isatty>
 801ac24:	1c43      	adds	r3, r0, #1
 801ac26:	d102      	bne.n	801ac2e <_isatty_r+0x1a>
 801ac28:	682b      	ldr	r3, [r5, #0]
 801ac2a:	b103      	cbz	r3, 801ac2e <_isatty_r+0x1a>
 801ac2c:	6023      	str	r3, [r4, #0]
 801ac2e:	bd38      	pop	{r3, r4, r5, pc}
 801ac30:	2000dcc8 	.word	0x2000dcc8

0801ac34 <_lseek_r>:
 801ac34:	b538      	push	{r3, r4, r5, lr}
 801ac36:	4d07      	ldr	r5, [pc, #28]	; (801ac54 <_lseek_r+0x20>)
 801ac38:	4604      	mov	r4, r0
 801ac3a:	4608      	mov	r0, r1
 801ac3c:	4611      	mov	r1, r2
 801ac3e:	2200      	movs	r2, #0
 801ac40:	602a      	str	r2, [r5, #0]
 801ac42:	461a      	mov	r2, r3
 801ac44:	f7e5 ff25 	bl	8000a92 <_lseek>
 801ac48:	1c43      	adds	r3, r0, #1
 801ac4a:	d102      	bne.n	801ac52 <_lseek_r+0x1e>
 801ac4c:	682b      	ldr	r3, [r5, #0]
 801ac4e:	b103      	cbz	r3, 801ac52 <_lseek_r+0x1e>
 801ac50:	6023      	str	r3, [r4, #0]
 801ac52:	bd38      	pop	{r3, r4, r5, pc}
 801ac54:	2000dcc8 	.word	0x2000dcc8

0801ac58 <__malloc_lock>:
 801ac58:	4801      	ldr	r0, [pc, #4]	; (801ac60 <__malloc_lock+0x8>)
 801ac5a:	f7ff bc30 	b.w	801a4be <__retarget_lock_acquire_recursive>
 801ac5e:	bf00      	nop
 801ac60:	2000dcbc 	.word	0x2000dcbc

0801ac64 <__malloc_unlock>:
 801ac64:	4801      	ldr	r0, [pc, #4]	; (801ac6c <__malloc_unlock+0x8>)
 801ac66:	f7ff bc2b 	b.w	801a4c0 <__retarget_lock_release_recursive>
 801ac6a:	bf00      	nop
 801ac6c:	2000dcbc 	.word	0x2000dcbc

0801ac70 <__sfputc_r>:
 801ac70:	6893      	ldr	r3, [r2, #8]
 801ac72:	3b01      	subs	r3, #1
 801ac74:	2b00      	cmp	r3, #0
 801ac76:	b410      	push	{r4}
 801ac78:	6093      	str	r3, [r2, #8]
 801ac7a:	da07      	bge.n	801ac8c <__sfputc_r+0x1c>
 801ac7c:	6994      	ldr	r4, [r2, #24]
 801ac7e:	42a3      	cmp	r3, r4
 801ac80:	db01      	blt.n	801ac86 <__sfputc_r+0x16>
 801ac82:	290a      	cmp	r1, #10
 801ac84:	d102      	bne.n	801ac8c <__sfputc_r+0x1c>
 801ac86:	bc10      	pop	{r4}
 801ac88:	f7ff bea0 	b.w	801a9cc <__swbuf_r>
 801ac8c:	6813      	ldr	r3, [r2, #0]
 801ac8e:	1c58      	adds	r0, r3, #1
 801ac90:	6010      	str	r0, [r2, #0]
 801ac92:	7019      	strb	r1, [r3, #0]
 801ac94:	4608      	mov	r0, r1
 801ac96:	bc10      	pop	{r4}
 801ac98:	4770      	bx	lr

0801ac9a <__sfputs_r>:
 801ac9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ac9c:	4606      	mov	r6, r0
 801ac9e:	460f      	mov	r7, r1
 801aca0:	4614      	mov	r4, r2
 801aca2:	18d5      	adds	r5, r2, r3
 801aca4:	42ac      	cmp	r4, r5
 801aca6:	d101      	bne.n	801acac <__sfputs_r+0x12>
 801aca8:	2000      	movs	r0, #0
 801acaa:	e007      	b.n	801acbc <__sfputs_r+0x22>
 801acac:	f814 1b01 	ldrb.w	r1, [r4], #1
 801acb0:	463a      	mov	r2, r7
 801acb2:	4630      	mov	r0, r6
 801acb4:	f7ff ffdc 	bl	801ac70 <__sfputc_r>
 801acb8:	1c43      	adds	r3, r0, #1
 801acba:	d1f3      	bne.n	801aca4 <__sfputs_r+0xa>
 801acbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801acc0 <_vfiprintf_r>:
 801acc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801acc4:	460d      	mov	r5, r1
 801acc6:	b09d      	sub	sp, #116	; 0x74
 801acc8:	4614      	mov	r4, r2
 801acca:	4698      	mov	r8, r3
 801accc:	4606      	mov	r6, r0
 801acce:	b118      	cbz	r0, 801acd8 <_vfiprintf_r+0x18>
 801acd0:	6983      	ldr	r3, [r0, #24]
 801acd2:	b90b      	cbnz	r3, 801acd8 <_vfiprintf_r+0x18>
 801acd4:	f7ff fb30 	bl	801a338 <__sinit>
 801acd8:	4b89      	ldr	r3, [pc, #548]	; (801af00 <_vfiprintf_r+0x240>)
 801acda:	429d      	cmp	r5, r3
 801acdc:	d11b      	bne.n	801ad16 <_vfiprintf_r+0x56>
 801acde:	6875      	ldr	r5, [r6, #4]
 801ace0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ace2:	07d9      	lsls	r1, r3, #31
 801ace4:	d405      	bmi.n	801acf2 <_vfiprintf_r+0x32>
 801ace6:	89ab      	ldrh	r3, [r5, #12]
 801ace8:	059a      	lsls	r2, r3, #22
 801acea:	d402      	bmi.n	801acf2 <_vfiprintf_r+0x32>
 801acec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801acee:	f7ff fbe6 	bl	801a4be <__retarget_lock_acquire_recursive>
 801acf2:	89ab      	ldrh	r3, [r5, #12]
 801acf4:	071b      	lsls	r3, r3, #28
 801acf6:	d501      	bpl.n	801acfc <_vfiprintf_r+0x3c>
 801acf8:	692b      	ldr	r3, [r5, #16]
 801acfa:	b9eb      	cbnz	r3, 801ad38 <_vfiprintf_r+0x78>
 801acfc:	4629      	mov	r1, r5
 801acfe:	4630      	mov	r0, r6
 801ad00:	f7ff fec8 	bl	801aa94 <__swsetup_r>
 801ad04:	b1c0      	cbz	r0, 801ad38 <_vfiprintf_r+0x78>
 801ad06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ad08:	07dc      	lsls	r4, r3, #31
 801ad0a:	d50e      	bpl.n	801ad2a <_vfiprintf_r+0x6a>
 801ad0c:	f04f 30ff 	mov.w	r0, #4294967295
 801ad10:	b01d      	add	sp, #116	; 0x74
 801ad12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ad16:	4b7b      	ldr	r3, [pc, #492]	; (801af04 <_vfiprintf_r+0x244>)
 801ad18:	429d      	cmp	r5, r3
 801ad1a:	d101      	bne.n	801ad20 <_vfiprintf_r+0x60>
 801ad1c:	68b5      	ldr	r5, [r6, #8]
 801ad1e:	e7df      	b.n	801ace0 <_vfiprintf_r+0x20>
 801ad20:	4b79      	ldr	r3, [pc, #484]	; (801af08 <_vfiprintf_r+0x248>)
 801ad22:	429d      	cmp	r5, r3
 801ad24:	bf08      	it	eq
 801ad26:	68f5      	ldreq	r5, [r6, #12]
 801ad28:	e7da      	b.n	801ace0 <_vfiprintf_r+0x20>
 801ad2a:	89ab      	ldrh	r3, [r5, #12]
 801ad2c:	0598      	lsls	r0, r3, #22
 801ad2e:	d4ed      	bmi.n	801ad0c <_vfiprintf_r+0x4c>
 801ad30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ad32:	f7ff fbc5 	bl	801a4c0 <__retarget_lock_release_recursive>
 801ad36:	e7e9      	b.n	801ad0c <_vfiprintf_r+0x4c>
 801ad38:	2300      	movs	r3, #0
 801ad3a:	9309      	str	r3, [sp, #36]	; 0x24
 801ad3c:	2320      	movs	r3, #32
 801ad3e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801ad42:	f8cd 800c 	str.w	r8, [sp, #12]
 801ad46:	2330      	movs	r3, #48	; 0x30
 801ad48:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801af0c <_vfiprintf_r+0x24c>
 801ad4c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801ad50:	f04f 0901 	mov.w	r9, #1
 801ad54:	4623      	mov	r3, r4
 801ad56:	469a      	mov	sl, r3
 801ad58:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ad5c:	b10a      	cbz	r2, 801ad62 <_vfiprintf_r+0xa2>
 801ad5e:	2a25      	cmp	r2, #37	; 0x25
 801ad60:	d1f9      	bne.n	801ad56 <_vfiprintf_r+0x96>
 801ad62:	ebba 0b04 	subs.w	fp, sl, r4
 801ad66:	d00b      	beq.n	801ad80 <_vfiprintf_r+0xc0>
 801ad68:	465b      	mov	r3, fp
 801ad6a:	4622      	mov	r2, r4
 801ad6c:	4629      	mov	r1, r5
 801ad6e:	4630      	mov	r0, r6
 801ad70:	f7ff ff93 	bl	801ac9a <__sfputs_r>
 801ad74:	3001      	adds	r0, #1
 801ad76:	f000 80aa 	beq.w	801aece <_vfiprintf_r+0x20e>
 801ad7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ad7c:	445a      	add	r2, fp
 801ad7e:	9209      	str	r2, [sp, #36]	; 0x24
 801ad80:	f89a 3000 	ldrb.w	r3, [sl]
 801ad84:	2b00      	cmp	r3, #0
 801ad86:	f000 80a2 	beq.w	801aece <_vfiprintf_r+0x20e>
 801ad8a:	2300      	movs	r3, #0
 801ad8c:	f04f 32ff 	mov.w	r2, #4294967295
 801ad90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ad94:	f10a 0a01 	add.w	sl, sl, #1
 801ad98:	9304      	str	r3, [sp, #16]
 801ad9a:	9307      	str	r3, [sp, #28]
 801ad9c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801ada0:	931a      	str	r3, [sp, #104]	; 0x68
 801ada2:	4654      	mov	r4, sl
 801ada4:	2205      	movs	r2, #5
 801ada6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801adaa:	4858      	ldr	r0, [pc, #352]	; (801af0c <_vfiprintf_r+0x24c>)
 801adac:	f7e5 fa10 	bl	80001d0 <memchr>
 801adb0:	9a04      	ldr	r2, [sp, #16]
 801adb2:	b9d8      	cbnz	r0, 801adec <_vfiprintf_r+0x12c>
 801adb4:	06d1      	lsls	r1, r2, #27
 801adb6:	bf44      	itt	mi
 801adb8:	2320      	movmi	r3, #32
 801adba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801adbe:	0713      	lsls	r3, r2, #28
 801adc0:	bf44      	itt	mi
 801adc2:	232b      	movmi	r3, #43	; 0x2b
 801adc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801adc8:	f89a 3000 	ldrb.w	r3, [sl]
 801adcc:	2b2a      	cmp	r3, #42	; 0x2a
 801adce:	d015      	beq.n	801adfc <_vfiprintf_r+0x13c>
 801add0:	9a07      	ldr	r2, [sp, #28]
 801add2:	4654      	mov	r4, sl
 801add4:	2000      	movs	r0, #0
 801add6:	f04f 0c0a 	mov.w	ip, #10
 801adda:	4621      	mov	r1, r4
 801addc:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ade0:	3b30      	subs	r3, #48	; 0x30
 801ade2:	2b09      	cmp	r3, #9
 801ade4:	d94e      	bls.n	801ae84 <_vfiprintf_r+0x1c4>
 801ade6:	b1b0      	cbz	r0, 801ae16 <_vfiprintf_r+0x156>
 801ade8:	9207      	str	r2, [sp, #28]
 801adea:	e014      	b.n	801ae16 <_vfiprintf_r+0x156>
 801adec:	eba0 0308 	sub.w	r3, r0, r8
 801adf0:	fa09 f303 	lsl.w	r3, r9, r3
 801adf4:	4313      	orrs	r3, r2
 801adf6:	9304      	str	r3, [sp, #16]
 801adf8:	46a2      	mov	sl, r4
 801adfa:	e7d2      	b.n	801ada2 <_vfiprintf_r+0xe2>
 801adfc:	9b03      	ldr	r3, [sp, #12]
 801adfe:	1d19      	adds	r1, r3, #4
 801ae00:	681b      	ldr	r3, [r3, #0]
 801ae02:	9103      	str	r1, [sp, #12]
 801ae04:	2b00      	cmp	r3, #0
 801ae06:	bfbb      	ittet	lt
 801ae08:	425b      	neglt	r3, r3
 801ae0a:	f042 0202 	orrlt.w	r2, r2, #2
 801ae0e:	9307      	strge	r3, [sp, #28]
 801ae10:	9307      	strlt	r3, [sp, #28]
 801ae12:	bfb8      	it	lt
 801ae14:	9204      	strlt	r2, [sp, #16]
 801ae16:	7823      	ldrb	r3, [r4, #0]
 801ae18:	2b2e      	cmp	r3, #46	; 0x2e
 801ae1a:	d10c      	bne.n	801ae36 <_vfiprintf_r+0x176>
 801ae1c:	7863      	ldrb	r3, [r4, #1]
 801ae1e:	2b2a      	cmp	r3, #42	; 0x2a
 801ae20:	d135      	bne.n	801ae8e <_vfiprintf_r+0x1ce>
 801ae22:	9b03      	ldr	r3, [sp, #12]
 801ae24:	1d1a      	adds	r2, r3, #4
 801ae26:	681b      	ldr	r3, [r3, #0]
 801ae28:	9203      	str	r2, [sp, #12]
 801ae2a:	2b00      	cmp	r3, #0
 801ae2c:	bfb8      	it	lt
 801ae2e:	f04f 33ff 	movlt.w	r3, #4294967295
 801ae32:	3402      	adds	r4, #2
 801ae34:	9305      	str	r3, [sp, #20]
 801ae36:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 801af10 <_vfiprintf_r+0x250>
 801ae3a:	7821      	ldrb	r1, [r4, #0]
 801ae3c:	2203      	movs	r2, #3
 801ae3e:	4650      	mov	r0, sl
 801ae40:	f7e5 f9c6 	bl	80001d0 <memchr>
 801ae44:	b140      	cbz	r0, 801ae58 <_vfiprintf_r+0x198>
 801ae46:	2340      	movs	r3, #64	; 0x40
 801ae48:	eba0 000a 	sub.w	r0, r0, sl
 801ae4c:	fa03 f000 	lsl.w	r0, r3, r0
 801ae50:	9b04      	ldr	r3, [sp, #16]
 801ae52:	4303      	orrs	r3, r0
 801ae54:	3401      	adds	r4, #1
 801ae56:	9304      	str	r3, [sp, #16]
 801ae58:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ae5c:	482d      	ldr	r0, [pc, #180]	; (801af14 <_vfiprintf_r+0x254>)
 801ae5e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801ae62:	2206      	movs	r2, #6
 801ae64:	f7e5 f9b4 	bl	80001d0 <memchr>
 801ae68:	2800      	cmp	r0, #0
 801ae6a:	d03f      	beq.n	801aeec <_vfiprintf_r+0x22c>
 801ae6c:	4b2a      	ldr	r3, [pc, #168]	; (801af18 <_vfiprintf_r+0x258>)
 801ae6e:	bb1b      	cbnz	r3, 801aeb8 <_vfiprintf_r+0x1f8>
 801ae70:	9b03      	ldr	r3, [sp, #12]
 801ae72:	3307      	adds	r3, #7
 801ae74:	f023 0307 	bic.w	r3, r3, #7
 801ae78:	3308      	adds	r3, #8
 801ae7a:	9303      	str	r3, [sp, #12]
 801ae7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ae7e:	443b      	add	r3, r7
 801ae80:	9309      	str	r3, [sp, #36]	; 0x24
 801ae82:	e767      	b.n	801ad54 <_vfiprintf_r+0x94>
 801ae84:	fb0c 3202 	mla	r2, ip, r2, r3
 801ae88:	460c      	mov	r4, r1
 801ae8a:	2001      	movs	r0, #1
 801ae8c:	e7a5      	b.n	801adda <_vfiprintf_r+0x11a>
 801ae8e:	2300      	movs	r3, #0
 801ae90:	3401      	adds	r4, #1
 801ae92:	9305      	str	r3, [sp, #20]
 801ae94:	4619      	mov	r1, r3
 801ae96:	f04f 0c0a 	mov.w	ip, #10
 801ae9a:	4620      	mov	r0, r4
 801ae9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801aea0:	3a30      	subs	r2, #48	; 0x30
 801aea2:	2a09      	cmp	r2, #9
 801aea4:	d903      	bls.n	801aeae <_vfiprintf_r+0x1ee>
 801aea6:	2b00      	cmp	r3, #0
 801aea8:	d0c5      	beq.n	801ae36 <_vfiprintf_r+0x176>
 801aeaa:	9105      	str	r1, [sp, #20]
 801aeac:	e7c3      	b.n	801ae36 <_vfiprintf_r+0x176>
 801aeae:	fb0c 2101 	mla	r1, ip, r1, r2
 801aeb2:	4604      	mov	r4, r0
 801aeb4:	2301      	movs	r3, #1
 801aeb6:	e7f0      	b.n	801ae9a <_vfiprintf_r+0x1da>
 801aeb8:	ab03      	add	r3, sp, #12
 801aeba:	9300      	str	r3, [sp, #0]
 801aebc:	462a      	mov	r2, r5
 801aebe:	4b17      	ldr	r3, [pc, #92]	; (801af1c <_vfiprintf_r+0x25c>)
 801aec0:	a904      	add	r1, sp, #16
 801aec2:	4630      	mov	r0, r6
 801aec4:	f3af 8000 	nop.w
 801aec8:	4607      	mov	r7, r0
 801aeca:	1c78      	adds	r0, r7, #1
 801aecc:	d1d6      	bne.n	801ae7c <_vfiprintf_r+0x1bc>
 801aece:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801aed0:	07d9      	lsls	r1, r3, #31
 801aed2:	d405      	bmi.n	801aee0 <_vfiprintf_r+0x220>
 801aed4:	89ab      	ldrh	r3, [r5, #12]
 801aed6:	059a      	lsls	r2, r3, #22
 801aed8:	d402      	bmi.n	801aee0 <_vfiprintf_r+0x220>
 801aeda:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801aedc:	f7ff faf0 	bl	801a4c0 <__retarget_lock_release_recursive>
 801aee0:	89ab      	ldrh	r3, [r5, #12]
 801aee2:	065b      	lsls	r3, r3, #25
 801aee4:	f53f af12 	bmi.w	801ad0c <_vfiprintf_r+0x4c>
 801aee8:	9809      	ldr	r0, [sp, #36]	; 0x24
 801aeea:	e711      	b.n	801ad10 <_vfiprintf_r+0x50>
 801aeec:	ab03      	add	r3, sp, #12
 801aeee:	9300      	str	r3, [sp, #0]
 801aef0:	462a      	mov	r2, r5
 801aef2:	4b0a      	ldr	r3, [pc, #40]	; (801af1c <_vfiprintf_r+0x25c>)
 801aef4:	a904      	add	r1, sp, #16
 801aef6:	4630      	mov	r0, r6
 801aef8:	f000 f880 	bl	801affc <_printf_i>
 801aefc:	e7e4      	b.n	801aec8 <_vfiprintf_r+0x208>
 801aefe:	bf00      	nop
 801af00:	0801ebbc 	.word	0x0801ebbc
 801af04:	0801ebdc 	.word	0x0801ebdc
 801af08:	0801eb9c 	.word	0x0801eb9c
 801af0c:	0801ecae 	.word	0x0801ecae
 801af10:	0801ecb4 	.word	0x0801ecb4
 801af14:	0801ecb8 	.word	0x0801ecb8
 801af18:	00000000 	.word	0x00000000
 801af1c:	0801ac9b 	.word	0x0801ac9b

0801af20 <_printf_common>:
 801af20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801af24:	4616      	mov	r6, r2
 801af26:	4699      	mov	r9, r3
 801af28:	688a      	ldr	r2, [r1, #8]
 801af2a:	690b      	ldr	r3, [r1, #16]
 801af2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801af30:	4293      	cmp	r3, r2
 801af32:	bfb8      	it	lt
 801af34:	4613      	movlt	r3, r2
 801af36:	6033      	str	r3, [r6, #0]
 801af38:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801af3c:	4607      	mov	r7, r0
 801af3e:	460c      	mov	r4, r1
 801af40:	b10a      	cbz	r2, 801af46 <_printf_common+0x26>
 801af42:	3301      	adds	r3, #1
 801af44:	6033      	str	r3, [r6, #0]
 801af46:	6823      	ldr	r3, [r4, #0]
 801af48:	0699      	lsls	r1, r3, #26
 801af4a:	bf42      	ittt	mi
 801af4c:	6833      	ldrmi	r3, [r6, #0]
 801af4e:	3302      	addmi	r3, #2
 801af50:	6033      	strmi	r3, [r6, #0]
 801af52:	6825      	ldr	r5, [r4, #0]
 801af54:	f015 0506 	ands.w	r5, r5, #6
 801af58:	d106      	bne.n	801af68 <_printf_common+0x48>
 801af5a:	f104 0a19 	add.w	sl, r4, #25
 801af5e:	68e3      	ldr	r3, [r4, #12]
 801af60:	6832      	ldr	r2, [r6, #0]
 801af62:	1a9b      	subs	r3, r3, r2
 801af64:	42ab      	cmp	r3, r5
 801af66:	dc26      	bgt.n	801afb6 <_printf_common+0x96>
 801af68:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801af6c:	1e13      	subs	r3, r2, #0
 801af6e:	6822      	ldr	r2, [r4, #0]
 801af70:	bf18      	it	ne
 801af72:	2301      	movne	r3, #1
 801af74:	0692      	lsls	r2, r2, #26
 801af76:	d42b      	bmi.n	801afd0 <_printf_common+0xb0>
 801af78:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801af7c:	4649      	mov	r1, r9
 801af7e:	4638      	mov	r0, r7
 801af80:	47c0      	blx	r8
 801af82:	3001      	adds	r0, #1
 801af84:	d01e      	beq.n	801afc4 <_printf_common+0xa4>
 801af86:	6823      	ldr	r3, [r4, #0]
 801af88:	68e5      	ldr	r5, [r4, #12]
 801af8a:	6832      	ldr	r2, [r6, #0]
 801af8c:	f003 0306 	and.w	r3, r3, #6
 801af90:	2b04      	cmp	r3, #4
 801af92:	bf08      	it	eq
 801af94:	1aad      	subeq	r5, r5, r2
 801af96:	68a3      	ldr	r3, [r4, #8]
 801af98:	6922      	ldr	r2, [r4, #16]
 801af9a:	bf0c      	ite	eq
 801af9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801afa0:	2500      	movne	r5, #0
 801afa2:	4293      	cmp	r3, r2
 801afa4:	bfc4      	itt	gt
 801afa6:	1a9b      	subgt	r3, r3, r2
 801afa8:	18ed      	addgt	r5, r5, r3
 801afaa:	2600      	movs	r6, #0
 801afac:	341a      	adds	r4, #26
 801afae:	42b5      	cmp	r5, r6
 801afb0:	d11a      	bne.n	801afe8 <_printf_common+0xc8>
 801afb2:	2000      	movs	r0, #0
 801afb4:	e008      	b.n	801afc8 <_printf_common+0xa8>
 801afb6:	2301      	movs	r3, #1
 801afb8:	4652      	mov	r2, sl
 801afba:	4649      	mov	r1, r9
 801afbc:	4638      	mov	r0, r7
 801afbe:	47c0      	blx	r8
 801afc0:	3001      	adds	r0, #1
 801afc2:	d103      	bne.n	801afcc <_printf_common+0xac>
 801afc4:	f04f 30ff 	mov.w	r0, #4294967295
 801afc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801afcc:	3501      	adds	r5, #1
 801afce:	e7c6      	b.n	801af5e <_printf_common+0x3e>
 801afd0:	18e1      	adds	r1, r4, r3
 801afd2:	1c5a      	adds	r2, r3, #1
 801afd4:	2030      	movs	r0, #48	; 0x30
 801afd6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801afda:	4422      	add	r2, r4
 801afdc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801afe0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801afe4:	3302      	adds	r3, #2
 801afe6:	e7c7      	b.n	801af78 <_printf_common+0x58>
 801afe8:	2301      	movs	r3, #1
 801afea:	4622      	mov	r2, r4
 801afec:	4649      	mov	r1, r9
 801afee:	4638      	mov	r0, r7
 801aff0:	47c0      	blx	r8
 801aff2:	3001      	adds	r0, #1
 801aff4:	d0e6      	beq.n	801afc4 <_printf_common+0xa4>
 801aff6:	3601      	adds	r6, #1
 801aff8:	e7d9      	b.n	801afae <_printf_common+0x8e>
	...

0801affc <_printf_i>:
 801affc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801b000:	7e0f      	ldrb	r7, [r1, #24]
 801b002:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801b004:	2f78      	cmp	r7, #120	; 0x78
 801b006:	4691      	mov	r9, r2
 801b008:	4680      	mov	r8, r0
 801b00a:	460c      	mov	r4, r1
 801b00c:	469a      	mov	sl, r3
 801b00e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801b012:	d807      	bhi.n	801b024 <_printf_i+0x28>
 801b014:	2f62      	cmp	r7, #98	; 0x62
 801b016:	d80a      	bhi.n	801b02e <_printf_i+0x32>
 801b018:	2f00      	cmp	r7, #0
 801b01a:	f000 80d8 	beq.w	801b1ce <_printf_i+0x1d2>
 801b01e:	2f58      	cmp	r7, #88	; 0x58
 801b020:	f000 80a3 	beq.w	801b16a <_printf_i+0x16e>
 801b024:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b028:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801b02c:	e03a      	b.n	801b0a4 <_printf_i+0xa8>
 801b02e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801b032:	2b15      	cmp	r3, #21
 801b034:	d8f6      	bhi.n	801b024 <_printf_i+0x28>
 801b036:	a101      	add	r1, pc, #4	; (adr r1, 801b03c <_printf_i+0x40>)
 801b038:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801b03c:	0801b095 	.word	0x0801b095
 801b040:	0801b0a9 	.word	0x0801b0a9
 801b044:	0801b025 	.word	0x0801b025
 801b048:	0801b025 	.word	0x0801b025
 801b04c:	0801b025 	.word	0x0801b025
 801b050:	0801b025 	.word	0x0801b025
 801b054:	0801b0a9 	.word	0x0801b0a9
 801b058:	0801b025 	.word	0x0801b025
 801b05c:	0801b025 	.word	0x0801b025
 801b060:	0801b025 	.word	0x0801b025
 801b064:	0801b025 	.word	0x0801b025
 801b068:	0801b1b5 	.word	0x0801b1b5
 801b06c:	0801b0d9 	.word	0x0801b0d9
 801b070:	0801b197 	.word	0x0801b197
 801b074:	0801b025 	.word	0x0801b025
 801b078:	0801b025 	.word	0x0801b025
 801b07c:	0801b1d7 	.word	0x0801b1d7
 801b080:	0801b025 	.word	0x0801b025
 801b084:	0801b0d9 	.word	0x0801b0d9
 801b088:	0801b025 	.word	0x0801b025
 801b08c:	0801b025 	.word	0x0801b025
 801b090:	0801b19f 	.word	0x0801b19f
 801b094:	682b      	ldr	r3, [r5, #0]
 801b096:	1d1a      	adds	r2, r3, #4
 801b098:	681b      	ldr	r3, [r3, #0]
 801b09a:	602a      	str	r2, [r5, #0]
 801b09c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b0a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801b0a4:	2301      	movs	r3, #1
 801b0a6:	e0a3      	b.n	801b1f0 <_printf_i+0x1f4>
 801b0a8:	6820      	ldr	r0, [r4, #0]
 801b0aa:	6829      	ldr	r1, [r5, #0]
 801b0ac:	0606      	lsls	r6, r0, #24
 801b0ae:	f101 0304 	add.w	r3, r1, #4
 801b0b2:	d50a      	bpl.n	801b0ca <_printf_i+0xce>
 801b0b4:	680e      	ldr	r6, [r1, #0]
 801b0b6:	602b      	str	r3, [r5, #0]
 801b0b8:	2e00      	cmp	r6, #0
 801b0ba:	da03      	bge.n	801b0c4 <_printf_i+0xc8>
 801b0bc:	232d      	movs	r3, #45	; 0x2d
 801b0be:	4276      	negs	r6, r6
 801b0c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b0c4:	485e      	ldr	r0, [pc, #376]	; (801b240 <_printf_i+0x244>)
 801b0c6:	230a      	movs	r3, #10
 801b0c8:	e019      	b.n	801b0fe <_printf_i+0x102>
 801b0ca:	680e      	ldr	r6, [r1, #0]
 801b0cc:	602b      	str	r3, [r5, #0]
 801b0ce:	f010 0f40 	tst.w	r0, #64	; 0x40
 801b0d2:	bf18      	it	ne
 801b0d4:	b236      	sxthne	r6, r6
 801b0d6:	e7ef      	b.n	801b0b8 <_printf_i+0xbc>
 801b0d8:	682b      	ldr	r3, [r5, #0]
 801b0da:	6820      	ldr	r0, [r4, #0]
 801b0dc:	1d19      	adds	r1, r3, #4
 801b0de:	6029      	str	r1, [r5, #0]
 801b0e0:	0601      	lsls	r1, r0, #24
 801b0e2:	d501      	bpl.n	801b0e8 <_printf_i+0xec>
 801b0e4:	681e      	ldr	r6, [r3, #0]
 801b0e6:	e002      	b.n	801b0ee <_printf_i+0xf2>
 801b0e8:	0646      	lsls	r6, r0, #25
 801b0ea:	d5fb      	bpl.n	801b0e4 <_printf_i+0xe8>
 801b0ec:	881e      	ldrh	r6, [r3, #0]
 801b0ee:	4854      	ldr	r0, [pc, #336]	; (801b240 <_printf_i+0x244>)
 801b0f0:	2f6f      	cmp	r7, #111	; 0x6f
 801b0f2:	bf0c      	ite	eq
 801b0f4:	2308      	moveq	r3, #8
 801b0f6:	230a      	movne	r3, #10
 801b0f8:	2100      	movs	r1, #0
 801b0fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801b0fe:	6865      	ldr	r5, [r4, #4]
 801b100:	60a5      	str	r5, [r4, #8]
 801b102:	2d00      	cmp	r5, #0
 801b104:	bfa2      	ittt	ge
 801b106:	6821      	ldrge	r1, [r4, #0]
 801b108:	f021 0104 	bicge.w	r1, r1, #4
 801b10c:	6021      	strge	r1, [r4, #0]
 801b10e:	b90e      	cbnz	r6, 801b114 <_printf_i+0x118>
 801b110:	2d00      	cmp	r5, #0
 801b112:	d04d      	beq.n	801b1b0 <_printf_i+0x1b4>
 801b114:	4615      	mov	r5, r2
 801b116:	fbb6 f1f3 	udiv	r1, r6, r3
 801b11a:	fb03 6711 	mls	r7, r3, r1, r6
 801b11e:	5dc7      	ldrb	r7, [r0, r7]
 801b120:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801b124:	4637      	mov	r7, r6
 801b126:	42bb      	cmp	r3, r7
 801b128:	460e      	mov	r6, r1
 801b12a:	d9f4      	bls.n	801b116 <_printf_i+0x11a>
 801b12c:	2b08      	cmp	r3, #8
 801b12e:	d10b      	bne.n	801b148 <_printf_i+0x14c>
 801b130:	6823      	ldr	r3, [r4, #0]
 801b132:	07de      	lsls	r6, r3, #31
 801b134:	d508      	bpl.n	801b148 <_printf_i+0x14c>
 801b136:	6923      	ldr	r3, [r4, #16]
 801b138:	6861      	ldr	r1, [r4, #4]
 801b13a:	4299      	cmp	r1, r3
 801b13c:	bfde      	ittt	le
 801b13e:	2330      	movle	r3, #48	; 0x30
 801b140:	f805 3c01 	strble.w	r3, [r5, #-1]
 801b144:	f105 35ff 	addle.w	r5, r5, #4294967295
 801b148:	1b52      	subs	r2, r2, r5
 801b14a:	6122      	str	r2, [r4, #16]
 801b14c:	f8cd a000 	str.w	sl, [sp]
 801b150:	464b      	mov	r3, r9
 801b152:	aa03      	add	r2, sp, #12
 801b154:	4621      	mov	r1, r4
 801b156:	4640      	mov	r0, r8
 801b158:	f7ff fee2 	bl	801af20 <_printf_common>
 801b15c:	3001      	adds	r0, #1
 801b15e:	d14c      	bne.n	801b1fa <_printf_i+0x1fe>
 801b160:	f04f 30ff 	mov.w	r0, #4294967295
 801b164:	b004      	add	sp, #16
 801b166:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b16a:	4835      	ldr	r0, [pc, #212]	; (801b240 <_printf_i+0x244>)
 801b16c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801b170:	6829      	ldr	r1, [r5, #0]
 801b172:	6823      	ldr	r3, [r4, #0]
 801b174:	f851 6b04 	ldr.w	r6, [r1], #4
 801b178:	6029      	str	r1, [r5, #0]
 801b17a:	061d      	lsls	r5, r3, #24
 801b17c:	d514      	bpl.n	801b1a8 <_printf_i+0x1ac>
 801b17e:	07df      	lsls	r7, r3, #31
 801b180:	bf44      	itt	mi
 801b182:	f043 0320 	orrmi.w	r3, r3, #32
 801b186:	6023      	strmi	r3, [r4, #0]
 801b188:	b91e      	cbnz	r6, 801b192 <_printf_i+0x196>
 801b18a:	6823      	ldr	r3, [r4, #0]
 801b18c:	f023 0320 	bic.w	r3, r3, #32
 801b190:	6023      	str	r3, [r4, #0]
 801b192:	2310      	movs	r3, #16
 801b194:	e7b0      	b.n	801b0f8 <_printf_i+0xfc>
 801b196:	6823      	ldr	r3, [r4, #0]
 801b198:	f043 0320 	orr.w	r3, r3, #32
 801b19c:	6023      	str	r3, [r4, #0]
 801b19e:	2378      	movs	r3, #120	; 0x78
 801b1a0:	4828      	ldr	r0, [pc, #160]	; (801b244 <_printf_i+0x248>)
 801b1a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801b1a6:	e7e3      	b.n	801b170 <_printf_i+0x174>
 801b1a8:	0659      	lsls	r1, r3, #25
 801b1aa:	bf48      	it	mi
 801b1ac:	b2b6      	uxthmi	r6, r6
 801b1ae:	e7e6      	b.n	801b17e <_printf_i+0x182>
 801b1b0:	4615      	mov	r5, r2
 801b1b2:	e7bb      	b.n	801b12c <_printf_i+0x130>
 801b1b4:	682b      	ldr	r3, [r5, #0]
 801b1b6:	6826      	ldr	r6, [r4, #0]
 801b1b8:	6961      	ldr	r1, [r4, #20]
 801b1ba:	1d18      	adds	r0, r3, #4
 801b1bc:	6028      	str	r0, [r5, #0]
 801b1be:	0635      	lsls	r5, r6, #24
 801b1c0:	681b      	ldr	r3, [r3, #0]
 801b1c2:	d501      	bpl.n	801b1c8 <_printf_i+0x1cc>
 801b1c4:	6019      	str	r1, [r3, #0]
 801b1c6:	e002      	b.n	801b1ce <_printf_i+0x1d2>
 801b1c8:	0670      	lsls	r0, r6, #25
 801b1ca:	d5fb      	bpl.n	801b1c4 <_printf_i+0x1c8>
 801b1cc:	8019      	strh	r1, [r3, #0]
 801b1ce:	2300      	movs	r3, #0
 801b1d0:	6123      	str	r3, [r4, #16]
 801b1d2:	4615      	mov	r5, r2
 801b1d4:	e7ba      	b.n	801b14c <_printf_i+0x150>
 801b1d6:	682b      	ldr	r3, [r5, #0]
 801b1d8:	1d1a      	adds	r2, r3, #4
 801b1da:	602a      	str	r2, [r5, #0]
 801b1dc:	681d      	ldr	r5, [r3, #0]
 801b1de:	6862      	ldr	r2, [r4, #4]
 801b1e0:	2100      	movs	r1, #0
 801b1e2:	4628      	mov	r0, r5
 801b1e4:	f7e4 fff4 	bl	80001d0 <memchr>
 801b1e8:	b108      	cbz	r0, 801b1ee <_printf_i+0x1f2>
 801b1ea:	1b40      	subs	r0, r0, r5
 801b1ec:	6060      	str	r0, [r4, #4]
 801b1ee:	6863      	ldr	r3, [r4, #4]
 801b1f0:	6123      	str	r3, [r4, #16]
 801b1f2:	2300      	movs	r3, #0
 801b1f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b1f8:	e7a8      	b.n	801b14c <_printf_i+0x150>
 801b1fa:	6923      	ldr	r3, [r4, #16]
 801b1fc:	462a      	mov	r2, r5
 801b1fe:	4649      	mov	r1, r9
 801b200:	4640      	mov	r0, r8
 801b202:	47d0      	blx	sl
 801b204:	3001      	adds	r0, #1
 801b206:	d0ab      	beq.n	801b160 <_printf_i+0x164>
 801b208:	6823      	ldr	r3, [r4, #0]
 801b20a:	079b      	lsls	r3, r3, #30
 801b20c:	d413      	bmi.n	801b236 <_printf_i+0x23a>
 801b20e:	68e0      	ldr	r0, [r4, #12]
 801b210:	9b03      	ldr	r3, [sp, #12]
 801b212:	4298      	cmp	r0, r3
 801b214:	bfb8      	it	lt
 801b216:	4618      	movlt	r0, r3
 801b218:	e7a4      	b.n	801b164 <_printf_i+0x168>
 801b21a:	2301      	movs	r3, #1
 801b21c:	4632      	mov	r2, r6
 801b21e:	4649      	mov	r1, r9
 801b220:	4640      	mov	r0, r8
 801b222:	47d0      	blx	sl
 801b224:	3001      	adds	r0, #1
 801b226:	d09b      	beq.n	801b160 <_printf_i+0x164>
 801b228:	3501      	adds	r5, #1
 801b22a:	68e3      	ldr	r3, [r4, #12]
 801b22c:	9903      	ldr	r1, [sp, #12]
 801b22e:	1a5b      	subs	r3, r3, r1
 801b230:	42ab      	cmp	r3, r5
 801b232:	dcf2      	bgt.n	801b21a <_printf_i+0x21e>
 801b234:	e7eb      	b.n	801b20e <_printf_i+0x212>
 801b236:	2500      	movs	r5, #0
 801b238:	f104 0619 	add.w	r6, r4, #25
 801b23c:	e7f5      	b.n	801b22a <_printf_i+0x22e>
 801b23e:	bf00      	nop
 801b240:	0801ecbf 	.word	0x0801ecbf
 801b244:	0801ecd0 	.word	0x0801ecd0

0801b248 <_read_r>:
 801b248:	b538      	push	{r3, r4, r5, lr}
 801b24a:	4d07      	ldr	r5, [pc, #28]	; (801b268 <_read_r+0x20>)
 801b24c:	4604      	mov	r4, r0
 801b24e:	4608      	mov	r0, r1
 801b250:	4611      	mov	r1, r2
 801b252:	2200      	movs	r2, #0
 801b254:	602a      	str	r2, [r5, #0]
 801b256:	461a      	mov	r2, r3
 801b258:	f7e5 fbbe 	bl	80009d8 <_read>
 801b25c:	1c43      	adds	r3, r0, #1
 801b25e:	d102      	bne.n	801b266 <_read_r+0x1e>
 801b260:	682b      	ldr	r3, [r5, #0]
 801b262:	b103      	cbz	r3, 801b266 <_read_r+0x1e>
 801b264:	6023      	str	r3, [r4, #0]
 801b266:	bd38      	pop	{r3, r4, r5, pc}
 801b268:	2000dcc8 	.word	0x2000dcc8

0801b26c <abort>:
 801b26c:	b508      	push	{r3, lr}
 801b26e:	2006      	movs	r0, #6
 801b270:	f000 f82c 	bl	801b2cc <raise>
 801b274:	2001      	movs	r0, #1
 801b276:	f7e5 fba5 	bl	80009c4 <_exit>

0801b27a <_raise_r>:
 801b27a:	291f      	cmp	r1, #31
 801b27c:	b538      	push	{r3, r4, r5, lr}
 801b27e:	4604      	mov	r4, r0
 801b280:	460d      	mov	r5, r1
 801b282:	d904      	bls.n	801b28e <_raise_r+0x14>
 801b284:	2316      	movs	r3, #22
 801b286:	6003      	str	r3, [r0, #0]
 801b288:	f04f 30ff 	mov.w	r0, #4294967295
 801b28c:	bd38      	pop	{r3, r4, r5, pc}
 801b28e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801b290:	b112      	cbz	r2, 801b298 <_raise_r+0x1e>
 801b292:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801b296:	b94b      	cbnz	r3, 801b2ac <_raise_r+0x32>
 801b298:	4620      	mov	r0, r4
 801b29a:	f000 f831 	bl	801b300 <_getpid_r>
 801b29e:	462a      	mov	r2, r5
 801b2a0:	4601      	mov	r1, r0
 801b2a2:	4620      	mov	r0, r4
 801b2a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b2a8:	f000 b818 	b.w	801b2dc <_kill_r>
 801b2ac:	2b01      	cmp	r3, #1
 801b2ae:	d00a      	beq.n	801b2c6 <_raise_r+0x4c>
 801b2b0:	1c59      	adds	r1, r3, #1
 801b2b2:	d103      	bne.n	801b2bc <_raise_r+0x42>
 801b2b4:	2316      	movs	r3, #22
 801b2b6:	6003      	str	r3, [r0, #0]
 801b2b8:	2001      	movs	r0, #1
 801b2ba:	e7e7      	b.n	801b28c <_raise_r+0x12>
 801b2bc:	2400      	movs	r4, #0
 801b2be:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801b2c2:	4628      	mov	r0, r5
 801b2c4:	4798      	blx	r3
 801b2c6:	2000      	movs	r0, #0
 801b2c8:	e7e0      	b.n	801b28c <_raise_r+0x12>
	...

0801b2cc <raise>:
 801b2cc:	4b02      	ldr	r3, [pc, #8]	; (801b2d8 <raise+0xc>)
 801b2ce:	4601      	mov	r1, r0
 801b2d0:	6818      	ldr	r0, [r3, #0]
 801b2d2:	f7ff bfd2 	b.w	801b27a <_raise_r>
 801b2d6:	bf00      	nop
 801b2d8:	20000110 	.word	0x20000110

0801b2dc <_kill_r>:
 801b2dc:	b538      	push	{r3, r4, r5, lr}
 801b2de:	4d07      	ldr	r5, [pc, #28]	; (801b2fc <_kill_r+0x20>)
 801b2e0:	2300      	movs	r3, #0
 801b2e2:	4604      	mov	r4, r0
 801b2e4:	4608      	mov	r0, r1
 801b2e6:	4611      	mov	r1, r2
 801b2e8:	602b      	str	r3, [r5, #0]
 801b2ea:	f7e5 fb59 	bl	80009a0 <_kill>
 801b2ee:	1c43      	adds	r3, r0, #1
 801b2f0:	d102      	bne.n	801b2f8 <_kill_r+0x1c>
 801b2f2:	682b      	ldr	r3, [r5, #0]
 801b2f4:	b103      	cbz	r3, 801b2f8 <_kill_r+0x1c>
 801b2f6:	6023      	str	r3, [r4, #0]
 801b2f8:	bd38      	pop	{r3, r4, r5, pc}
 801b2fa:	bf00      	nop
 801b2fc:	2000dcc8 	.word	0x2000dcc8

0801b300 <_getpid_r>:
 801b300:	f7e5 bb46 	b.w	8000990 <_getpid>

0801b304 <_init>:
 801b304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b306:	bf00      	nop
 801b308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b30a:	bc08      	pop	{r3}
 801b30c:	469e      	mov	lr, r3
 801b30e:	4770      	bx	lr

0801b310 <_fini>:
 801b310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b312:	bf00      	nop
 801b314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b316:	bc08      	pop	{r3}
 801b318:	469e      	mov	lr, r3
 801b31a:	4770      	bx	lr
