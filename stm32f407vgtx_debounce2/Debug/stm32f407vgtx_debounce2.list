
stm32f407vgtx_debounce2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017668  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000035cc  080177f8  080177f8  000277f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801adc4  0801adc4  00030080  2**0
                  CONTENTS
  4 .ARM          00000008  0801adc4  0801adc4  0002adc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801adcc  0801adcc  00030080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801adcc  0801adcc  0002adcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801add0  0801add0  0002add0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0801add4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030080  2**0
                  CONTENTS
 10 .bss          0000c40c  20000080  20000080  00030080  2**2
                  ALLOC
 11 ._user_heap_stack 00006004  2000c48c  2000c48c  00030080  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00030080  2**0
                  CONTENTS, READONLY
 13 .debug_info   00032600  00000000  00000000  000300aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00007ddf  00000000  00000000  000626aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000021e0  00000000  00000000  0006a490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002098  00000000  00000000  0006c670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00032b3a  00000000  00000000  0006e708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000357ee  00000000  00000000  000a1242  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eca5c  00000000  00000000  000d6a30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001c348c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000093bc  00000000  00000000  001c34dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stabstr      0000004e  00000000  00000000  001cc898  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080177e0 	.word	0x080177e0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	080177e0 	.word	0x080177e0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14d      	bne.n	800035c <__udivmoddi4+0xac>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d968      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b152      	cbz	r2, 80002e2 <__udivmoddi4+0x32>
 80002cc:	fa01 f302 	lsl.w	r3, r1, r2
 80002d0:	f1c2 0120 	rsb	r1, r2, #32
 80002d4:	fa20 f101 	lsr.w	r1, r0, r1
 80002d8:	fa0c fc02 	lsl.w	ip, ip, r2
 80002dc:	ea41 0803 	orr.w	r8, r1, r3
 80002e0:	4094      	lsls	r4, r2
 80002e2:	ea4f 451c 	mov.w	r5, ip, lsr #16
 80002e6:	0c21      	lsrs	r1, r4, #16
 80002e8:	fbb8 fef5 	udiv	lr, r8, r5
 80002ec:	fa1f f78c 	uxth.w	r7, ip
 80002f0:	fb05 831e 	mls	r3, r5, lr, r8
 80002f4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f8:	fb0e f107 	mul.w	r1, lr, r7
 80002fc:	4299      	cmp	r1, r3
 80002fe:	d90b      	bls.n	8000318 <__udivmoddi4+0x68>
 8000300:	eb1c 0303 	adds.w	r3, ip, r3
 8000304:	f10e 30ff 	add.w	r0, lr, #4294967295
 8000308:	f080 811e 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030c:	4299      	cmp	r1, r3
 800030e:	f240 811b 	bls.w	8000548 <__udivmoddi4+0x298>
 8000312:	f1ae 0e02 	sub.w	lr, lr, #2
 8000316:	4463      	add	r3, ip
 8000318:	1a5b      	subs	r3, r3, r1
 800031a:	b2a4      	uxth	r4, r4
 800031c:	fbb3 f0f5 	udiv	r0, r3, r5
 8000320:	fb05 3310 	mls	r3, r5, r0, r3
 8000324:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000328:	fb00 f707 	mul.w	r7, r0, r7
 800032c:	42a7      	cmp	r7, r4
 800032e:	d90a      	bls.n	8000346 <__udivmoddi4+0x96>
 8000330:	eb1c 0404 	adds.w	r4, ip, r4
 8000334:	f100 33ff 	add.w	r3, r0, #4294967295
 8000338:	f080 8108 	bcs.w	800054c <__udivmoddi4+0x29c>
 800033c:	42a7      	cmp	r7, r4
 800033e:	f240 8105 	bls.w	800054c <__udivmoddi4+0x29c>
 8000342:	4464      	add	r4, ip
 8000344:	3802      	subs	r0, #2
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 800034c:	2100      	movs	r1, #0
 800034e:	b11e      	cbz	r6, 8000358 <__udivmoddi4+0xa8>
 8000350:	40d4      	lsrs	r4, r2
 8000352:	2300      	movs	r3, #0
 8000354:	e9c6 4300 	strd	r4, r3, [r6]
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	428b      	cmp	r3, r1
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0xc2>
 8000360:	2e00      	cmp	r6, #0
 8000362:	f000 80ee 	beq.w	8000542 <__udivmoddi4+0x292>
 8000366:	2100      	movs	r1, #0
 8000368:	e9c6 0500 	strd	r0, r5, [r6]
 800036c:	4608      	mov	r0, r1
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f183 	clz	r1, r3
 8000376:	2900      	cmp	r1, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	42ab      	cmp	r3, r5
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb65 0303 	sbc.w	r3, r5, r3
 800038a:	2001      	movs	r0, #1
 800038c:	4698      	mov	r8, r3
 800038e:	2e00      	cmp	r6, #0
 8000390:	d0e2      	beq.n	8000358 <__udivmoddi4+0xa8>
 8000392:	e9c6 4800 	strd	r4, r8, [r6]
 8000396:	e7df      	b.n	8000358 <__udivmoddi4+0xa8>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8091 	bne.w	80004c8 <__udivmoddi4+0x218>
 80003a6:	eba1 050c 	sub.w	r5, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2101      	movs	r1, #1
 80003b4:	fbb5 f3f7 	udiv	r3, r5, r7
 80003b8:	fb07 5013 	mls	r0, r7, r3, r5
 80003bc:	0c25      	lsrs	r5, r4, #16
 80003be:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	42a8      	cmp	r0, r5
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0505 	adds.w	r5, ip, r5
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	42a8      	cmp	r0, r5
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a2d      	subs	r5, r5, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb5 f0f7 	udiv	r0, r5, r7
 80003e4:	fb07 5510 	mls	r5, r7, r0, r5
 80003e8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 35ff 	add.w	r5, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4628      	mov	r0, r5
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79e      	b.n	800034e <__udivmoddi4+0x9e>
 8000410:	f1c1 0720 	rsb	r7, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa05 f301 	lsl.w	r3, r5, r1
 8000426:	431c      	orrs	r4, r3
 8000428:	40fd      	lsrs	r5, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f301 	lsl.w	r3, r0, r1
 8000432:	fbb5 f8f9 	udiv	r8, r5, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 5518 	mls	r5, r9, r8, r5
 8000440:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	42a8      	cmp	r0, r5
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0505 	adds.w	r5, ip, r5
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	42a8      	cmp	r0, r5
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4465      	add	r5, ip
 8000468:	1a2d      	subs	r5, r5, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb5 f0f9 	udiv	r0, r5, r9
 8000470:	fb09 5510 	mls	r5, r9, r0, r5
 8000474:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	45ae      	cmp	lr, r5
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0505 	adds.w	r5, ip, r5
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	45ae      	cmp	lr, r5
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4465      	add	r5, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba5 050e 	sub.w	r5, r5, lr
 800049e:	42a5      	cmp	r5, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15e      	cbz	r6, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb65 050e 	sbc.w	r5, r5, lr
 80004b2:	fa05 f707 	lsl.w	r7, r5, r7
 80004b6:	fa22 f301 	lsr.w	r3, r2, r1
 80004ba:	40cd      	lsrs	r5, r1
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c6 7500 	strd	r7, r5, [r6]
 80004c2:	2100      	movs	r1, #0
 80004c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c8:	f1c2 0320 	rsb	r3, r2, #32
 80004cc:	fa20 f103 	lsr.w	r1, r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa25 f303 	lsr.w	r3, r5, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	430d      	orrs	r5, r1
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f1f7 	udiv	r1, r3, r7
 80004e8:	fb07 3011 	mls	r0, r7, r1, r3
 80004ec:	0c2b      	lsrs	r3, r5, #16
 80004ee:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80004f2:	fb01 f00e 	mul.w	r0, r1, lr
 80004f6:	4298      	cmp	r0, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f101 38ff 	add.w	r8, r1, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	4298      	cmp	r0, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3902      	subs	r1, #2
 800050e:	4463      	add	r3, ip
 8000510:	1a1b      	subs	r3, r3, r0
 8000512:	b2ad      	uxth	r5, r5
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3310 	mls	r3, r7, r0, r3
 800051c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000520:	fb00 f30e 	mul.w	r3, r0, lr
 8000524:	42ab      	cmp	r3, r5
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0505 	adds.w	r5, ip, r5
 800052c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	42ab      	cmp	r3, r5
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3802      	subs	r0, #2
 8000538:	4465      	add	r5, ip
 800053a:	1aed      	subs	r5, r5, r3
 800053c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	4631      	mov	r1, r6
 8000544:	4630      	mov	r0, r6
 8000546:	e707      	b.n	8000358 <__udivmoddi4+0xa8>
 8000548:	4686      	mov	lr, r0
 800054a:	e6e5      	b.n	8000318 <__udivmoddi4+0x68>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fa      	b.n	8000346 <__udivmoddi4+0x96>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4640      	mov	r0, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4641      	mov	r1, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4465      	add	r5, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4608      	mov	r0, r1
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000584:	b480      	push	{r7}
 8000586:	b085      	sub	sp, #20
 8000588:	af00      	add	r7, sp, #0
 800058a:	60f8      	str	r0, [r7, #12]
 800058c:	60b9      	str	r1, [r7, #8]
 800058e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	4a06      	ldr	r2, [pc, #24]	; (80005ac <vApplicationGetIdleTaskMemory+0x28>)
 8000594:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000596:	68bb      	ldr	r3, [r7, #8]
 8000598:	4a05      	ldr	r2, [pc, #20]	; (80005b0 <vApplicationGetIdleTaskMemory+0x2c>)
 800059a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	2280      	movs	r2, #128	; 0x80
 80005a0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005a2:	bf00      	nop
 80005a4:	3714      	adds	r7, #20
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bc80      	pop	{r7}
 80005aa:	4770      	bx	lr
 80005ac:	2000009c 	.word	0x2000009c
 80005b0:	20000150 	.word	0x20000150

080005b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b4:	b5b0      	push	{r4, r5, r7, lr}
 80005b6:	b088      	sub	sp, #32
 80005b8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ba:	f000 fbe3 	bl	8000d84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005be:	f000 f81d 	bl	80005fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c2:	f000 f8af 	bl	8000724 <MX_GPIO_Init>
  //MX_CAN1_Init();
  MX_USART1_UART_Init();
 80005c6:	f000 f883 	bl	80006d0 <MX_USART1_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005ca:	4b0a      	ldr	r3, [pc, #40]	; (80005f4 <main+0x40>)
 80005cc:	1d3c      	adds	r4, r7, #4
 80005ce:	461d      	mov	r5, r3
 80005d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005d4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005dc:	1d3b      	adds	r3, r7, #4
 80005de:	2100      	movs	r1, #0
 80005e0:	4618      	mov	r0, r3
 80005e2:	f006 fc71 	bl	8006ec8 <osThreadCreate>
 80005e6:	4603      	mov	r3, r0
 80005e8:	4a03      	ldr	r2, [pc, #12]	; (80005f8 <main+0x44>)
 80005ea:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005ec:	f006 fc55 	bl	8006e9a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005f0:	e7fe      	b.n	80005f0 <main+0x3c>
 80005f2:	bf00      	nop
 80005f4:	08017804 	.word	0x08017804
 80005f8:	20000394 	.word	0x20000394

080005fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b094      	sub	sp, #80	; 0x50
 8000600:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000602:	f107 0320 	add.w	r3, r7, #32
 8000606:	2230      	movs	r2, #48	; 0x30
 8000608:	2100      	movs	r1, #0
 800060a:	4618      	mov	r0, r3
 800060c:	f016 fa52 	bl	8016ab4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000610:	f107 030c 	add.w	r3, r7, #12
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
 8000618:	605a      	str	r2, [r3, #4]
 800061a:	609a      	str	r2, [r3, #8]
 800061c:	60da      	str	r2, [r3, #12]
 800061e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000620:	2300      	movs	r3, #0
 8000622:	60bb      	str	r3, [r7, #8]
 8000624:	4b28      	ldr	r3, [pc, #160]	; (80006c8 <SystemClock_Config+0xcc>)
 8000626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000628:	4a27      	ldr	r2, [pc, #156]	; (80006c8 <SystemClock_Config+0xcc>)
 800062a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800062e:	6413      	str	r3, [r2, #64]	; 0x40
 8000630:	4b25      	ldr	r3, [pc, #148]	; (80006c8 <SystemClock_Config+0xcc>)
 8000632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000634:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000638:	60bb      	str	r3, [r7, #8]
 800063a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800063c:	2300      	movs	r3, #0
 800063e:	607b      	str	r3, [r7, #4]
 8000640:	4b22      	ldr	r3, [pc, #136]	; (80006cc <SystemClock_Config+0xd0>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a21      	ldr	r2, [pc, #132]	; (80006cc <SystemClock_Config+0xd0>)
 8000646:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800064a:	6013      	str	r3, [r2, #0]
 800064c:	4b1f      	ldr	r3, [pc, #124]	; (80006cc <SystemClock_Config+0xd0>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000654:	607b      	str	r3, [r7, #4]
 8000656:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000658:	2301      	movs	r3, #1
 800065a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800065c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000660:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000662:	2302      	movs	r3, #2
 8000664:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000666:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800066a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800066c:	2308      	movs	r3, #8
 800066e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000670:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000674:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000676:	2302      	movs	r3, #2
 8000678:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800067a:	2307      	movs	r3, #7
 800067c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800067e:	f107 0320 	add.w	r3, r7, #32
 8000682:	4618      	mov	r0, r3
 8000684:	f002 fe82 	bl	800338c <HAL_RCC_OscConfig>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800068e:	f000 f90b 	bl	80008a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000692:	230f      	movs	r3, #15
 8000694:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000696:	2302      	movs	r3, #2
 8000698:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800069a:	2300      	movs	r3, #0
 800069c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800069e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006a2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006a8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006aa:	f107 030c 	add.w	r3, r7, #12
 80006ae:	2105      	movs	r1, #5
 80006b0:	4618      	mov	r0, r3
 80006b2:	f003 f8e3 	bl	800387c <HAL_RCC_ClockConfig>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006bc:	f000 f8f4 	bl	80008a8 <Error_Handler>
  }
}
 80006c0:	bf00      	nop
 80006c2:	3750      	adds	r7, #80	; 0x50
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	40023800 	.word	0x40023800
 80006cc:	40007000 	.word	0x40007000

080006d0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006d4:	4b11      	ldr	r3, [pc, #68]	; (800071c <MX_USART1_UART_Init+0x4c>)
 80006d6:	4a12      	ldr	r2, [pc, #72]	; (8000720 <MX_USART1_UART_Init+0x50>)
 80006d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006da:	4b10      	ldr	r3, [pc, #64]	; (800071c <MX_USART1_UART_Init+0x4c>)
 80006dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006e2:	4b0e      	ldr	r3, [pc, #56]	; (800071c <MX_USART1_UART_Init+0x4c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006e8:	4b0c      	ldr	r3, [pc, #48]	; (800071c <MX_USART1_UART_Init+0x4c>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006ee:	4b0b      	ldr	r3, [pc, #44]	; (800071c <MX_USART1_UART_Init+0x4c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006f4:	4b09      	ldr	r3, [pc, #36]	; (800071c <MX_USART1_UART_Init+0x4c>)
 80006f6:	220c      	movs	r2, #12
 80006f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006fa:	4b08      	ldr	r3, [pc, #32]	; (800071c <MX_USART1_UART_Init+0x4c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000700:	4b06      	ldr	r3, [pc, #24]	; (800071c <MX_USART1_UART_Init+0x4c>)
 8000702:	2200      	movs	r2, #0
 8000704:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000706:	4805      	ldr	r0, [pc, #20]	; (800071c <MX_USART1_UART_Init+0x4c>)
 8000708:	f003 fadc 	bl	8003cc4 <HAL_UART_Init>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000712:	f000 f8c9 	bl	80008a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000716:	bf00      	nop
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	20000350 	.word	0x20000350
 8000720:	40011000 	.word	0x40011000

08000724 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b08c      	sub	sp, #48	; 0x30
 8000728:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072a:	f107 031c 	add.w	r3, r7, #28
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]
 8000734:	609a      	str	r2, [r3, #8]
 8000736:	60da      	str	r2, [r3, #12]
 8000738:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	61bb      	str	r3, [r7, #24]
 800073e:	4b50      	ldr	r3, [pc, #320]	; (8000880 <MX_GPIO_Init+0x15c>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4a4f      	ldr	r2, [pc, #316]	; (8000880 <MX_GPIO_Init+0x15c>)
 8000744:	f043 0310 	orr.w	r3, r3, #16
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4b4d      	ldr	r3, [pc, #308]	; (8000880 <MX_GPIO_Init+0x15c>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f003 0310 	and.w	r3, r3, #16
 8000752:	61bb      	str	r3, [r7, #24]
 8000754:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	617b      	str	r3, [r7, #20]
 800075a:	4b49      	ldr	r3, [pc, #292]	; (8000880 <MX_GPIO_Init+0x15c>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a48      	ldr	r2, [pc, #288]	; (8000880 <MX_GPIO_Init+0x15c>)
 8000760:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
 8000766:	4b46      	ldr	r3, [pc, #280]	; (8000880 <MX_GPIO_Init+0x15c>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800076e:	617b      	str	r3, [r7, #20]
 8000770:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	613b      	str	r3, [r7, #16]
 8000776:	4b42      	ldr	r3, [pc, #264]	; (8000880 <MX_GPIO_Init+0x15c>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	4a41      	ldr	r2, [pc, #260]	; (8000880 <MX_GPIO_Init+0x15c>)
 800077c:	f043 0304 	orr.w	r3, r3, #4
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
 8000782:	4b3f      	ldr	r3, [pc, #252]	; (8000880 <MX_GPIO_Init+0x15c>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	f003 0304 	and.w	r3, r3, #4
 800078a:	613b      	str	r3, [r7, #16]
 800078c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	60fb      	str	r3, [r7, #12]
 8000792:	4b3b      	ldr	r3, [pc, #236]	; (8000880 <MX_GPIO_Init+0x15c>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4a3a      	ldr	r2, [pc, #232]	; (8000880 <MX_GPIO_Init+0x15c>)
 8000798:	f043 0301 	orr.w	r3, r3, #1
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b38      	ldr	r3, [pc, #224]	; (8000880 <MX_GPIO_Init+0x15c>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0301 	and.w	r3, r3, #1
 80007a6:	60fb      	str	r3, [r7, #12]
 80007a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	60bb      	str	r3, [r7, #8]
 80007ae:	4b34      	ldr	r3, [pc, #208]	; (8000880 <MX_GPIO_Init+0x15c>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a33      	ldr	r2, [pc, #204]	; (8000880 <MX_GPIO_Init+0x15c>)
 80007b4:	f043 0302 	orr.w	r3, r3, #2
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b31      	ldr	r3, [pc, #196]	; (8000880 <MX_GPIO_Init+0x15c>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0302 	and.w	r3, r3, #2
 80007c2:	60bb      	str	r3, [r7, #8]
 80007c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	607b      	str	r3, [r7, #4]
 80007ca:	4b2d      	ldr	r3, [pc, #180]	; (8000880 <MX_GPIO_Init+0x15c>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a2c      	ldr	r2, [pc, #176]	; (8000880 <MX_GPIO_Init+0x15c>)
 80007d0:	f043 0308 	orr.w	r3, r3, #8
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b2a      	ldr	r3, [pc, #168]	; (8000880 <MX_GPIO_Init+0x15c>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0308 	and.w	r3, r3, #8
 80007de:	607b      	str	r3, [r7, #4]
 80007e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED0_Pin|LED1_Pin, GPIO_PIN_RESET);
 80007e2:	2200      	movs	r2, #0
 80007e4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80007e8:	4826      	ldr	r0, [pc, #152]	; (8000884 <MX_GPIO_Init+0x160>)
 80007ea:	f001 fd21 	bl	8002230 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80007ee:	2200      	movs	r2, #0
 80007f0:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80007f4:	4824      	ldr	r0, [pc, #144]	; (8000888 <MX_GPIO_Init+0x164>)
 80007f6:	f001 fd1b 	bl	8002230 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : KEY2_Pin KEY1_Pin KEY0_Pin */
  GPIO_InitStruct.Pin = KEY2_Pin|KEY1_Pin|KEY0_Pin;
 80007fa:	231c      	movs	r3, #28
 80007fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007fe:	2300      	movs	r3, #0
 8000800:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000802:	2300      	movs	r3, #0
 8000804:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000806:	f107 031c 	add.w	r3, r7, #28
 800080a:	4619      	mov	r1, r3
 800080c:	481d      	ldr	r0, [pc, #116]	; (8000884 <MX_GPIO_Init+0x160>)
 800080e:	f001 fb75 	bl	8001efc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000812:	2301      	movs	r3, #1
 8000814:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000816:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800081a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081c:	2300      	movs	r3, #0
 800081e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000820:	f107 031c 	add.w	r3, r7, #28
 8000824:	4619      	mov	r1, r3
 8000826:	4819      	ldr	r0, [pc, #100]	; (800088c <MX_GPIO_Init+0x168>)
 8000828:	f001 fb68 	bl	8001efc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED0_Pin LED1_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin;
 800082c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000830:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000832:	2301      	movs	r3, #1
 8000834:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000836:	2300      	movs	r3, #0
 8000838:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083a:	2300      	movs	r3, #0
 800083c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800083e:	f107 031c 	add.w	r3, r7, #28
 8000842:	4619      	mov	r1, r3
 8000844:	480f      	ldr	r0, [pc, #60]	; (8000884 <MX_GPIO_Init+0x160>)
 8000846:	f001 fb59 	bl	8001efc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800084a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800084e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000850:	2301      	movs	r3, #1
 8000852:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000854:	2300      	movs	r3, #0
 8000856:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000858:	2300      	movs	r3, #0
 800085a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800085c:	f107 031c 	add.w	r3, r7, #28
 8000860:	4619      	mov	r1, r3
 8000862:	4809      	ldr	r0, [pc, #36]	; (8000888 <MX_GPIO_Init+0x164>)
 8000864:	f001 fb4a 	bl	8001efc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000868:	2200      	movs	r2, #0
 800086a:	2105      	movs	r1, #5
 800086c:	2006      	movs	r0, #6
 800086e:	f000 fbf2 	bl	8001056 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000872:	2006      	movs	r0, #6
 8000874:	f000 fc0b 	bl	800108e <HAL_NVIC_EnableIRQ>

}
 8000878:	bf00      	nop
 800087a:	3730      	adds	r7, #48	; 0x30
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	40023800 	.word	0x40023800
 8000884:	40021000 	.word	0x40021000
 8000888:	40020c00 	.word	0x40020c00
 800088c:	40020000 	.word	0x40020000

08000890 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  //MX_USB_DEVICE_Init();

  /* init code for LWIP */
  MX_LWIP_Init();
 8000898:	f004 fd4a 	bl	8005330 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  START_TEST();
 800089c:	f000 f9dc 	bl	8000c58 <START_TEST>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80008a0:	2001      	movs	r0, #1
 80008a2:	f006 fb5d 	bl	8006f60 <osDelay>
 80008a6:	e7fb      	b.n	80008a0 <StartDefaultTask+0x10>

080008a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008ac:	b672      	cpsid	i
}
 80008ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008b0:	e7fe      	b.n	80008b0 <Error_Handler+0x8>
	...

080008b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	607b      	str	r3, [r7, #4]
 80008be:	4b12      	ldr	r3, [pc, #72]	; (8000908 <HAL_MspInit+0x54>)
 80008c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008c2:	4a11      	ldr	r2, [pc, #68]	; (8000908 <HAL_MspInit+0x54>)
 80008c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008c8:	6453      	str	r3, [r2, #68]	; 0x44
 80008ca:	4b0f      	ldr	r3, [pc, #60]	; (8000908 <HAL_MspInit+0x54>)
 80008cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008d2:	607b      	str	r3, [r7, #4]
 80008d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	603b      	str	r3, [r7, #0]
 80008da:	4b0b      	ldr	r3, [pc, #44]	; (8000908 <HAL_MspInit+0x54>)
 80008dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008de:	4a0a      	ldr	r2, [pc, #40]	; (8000908 <HAL_MspInit+0x54>)
 80008e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008e4:	6413      	str	r3, [r2, #64]	; 0x40
 80008e6:	4b08      	ldr	r3, [pc, #32]	; (8000908 <HAL_MspInit+0x54>)
 80008e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ee:	603b      	str	r3, [r7, #0]
 80008f0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008f2:	2200      	movs	r2, #0
 80008f4:	210f      	movs	r1, #15
 80008f6:	f06f 0001 	mvn.w	r0, #1
 80008fa:	f000 fbac 	bl	8001056 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008fe:	bf00      	nop
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	40023800 	.word	0x40023800

0800090c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b08a      	sub	sp, #40	; 0x28
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000914:	f107 0314 	add.w	r3, r7, #20
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	605a      	str	r2, [r3, #4]
 800091e:	609a      	str	r2, [r3, #8]
 8000920:	60da      	str	r2, [r3, #12]
 8000922:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a19      	ldr	r2, [pc, #100]	; (8000990 <HAL_UART_MspInit+0x84>)
 800092a:	4293      	cmp	r3, r2
 800092c:	d12c      	bne.n	8000988 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	613b      	str	r3, [r7, #16]
 8000932:	4b18      	ldr	r3, [pc, #96]	; (8000994 <HAL_UART_MspInit+0x88>)
 8000934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000936:	4a17      	ldr	r2, [pc, #92]	; (8000994 <HAL_UART_MspInit+0x88>)
 8000938:	f043 0310 	orr.w	r3, r3, #16
 800093c:	6453      	str	r3, [r2, #68]	; 0x44
 800093e:	4b15      	ldr	r3, [pc, #84]	; (8000994 <HAL_UART_MspInit+0x88>)
 8000940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000942:	f003 0310 	and.w	r3, r3, #16
 8000946:	613b      	str	r3, [r7, #16]
 8000948:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	60fb      	str	r3, [r7, #12]
 800094e:	4b11      	ldr	r3, [pc, #68]	; (8000994 <HAL_UART_MspInit+0x88>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	4a10      	ldr	r2, [pc, #64]	; (8000994 <HAL_UART_MspInit+0x88>)
 8000954:	f043 0301 	orr.w	r3, r3, #1
 8000958:	6313      	str	r3, [r2, #48]	; 0x30
 800095a:	4b0e      	ldr	r3, [pc, #56]	; (8000994 <HAL_UART_MspInit+0x88>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	f003 0301 	and.w	r3, r3, #1
 8000962:	60fb      	str	r3, [r7, #12]
 8000964:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000966:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800096a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096c:	2302      	movs	r3, #2
 800096e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	2300      	movs	r3, #0
 8000972:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000974:	2303      	movs	r3, #3
 8000976:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000978:	2307      	movs	r3, #7
 800097a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800097c:	f107 0314 	add.w	r3, r7, #20
 8000980:	4619      	mov	r1, r3
 8000982:	4805      	ldr	r0, [pc, #20]	; (8000998 <HAL_UART_MspInit+0x8c>)
 8000984:	f001 faba 	bl	8001efc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000988:	bf00      	nop
 800098a:	3728      	adds	r7, #40	; 0x28
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	40011000 	.word	0x40011000
 8000994:	40023800 	.word	0x40023800
 8000998:	40020000 	.word	0x40020000

0800099c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009a0:	e7fe      	b.n	80009a0 <NMI_Handler+0x4>

080009a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009a2:	b480      	push	{r7}
 80009a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009a6:	e7fe      	b.n	80009a6 <HardFault_Handler+0x4>

080009a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009ac:	e7fe      	b.n	80009ac <MemManage_Handler+0x4>

080009ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ae:	b480      	push	{r7}
 80009b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009b2:	e7fe      	b.n	80009b2 <BusFault_Handler+0x4>

080009b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009b8:	e7fe      	b.n	80009b8 <UsageFault_Handler+0x4>

080009ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ba:	b480      	push	{r7}
 80009bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009be:	bf00      	nop
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bc80      	pop	{r7}
 80009c4:	4770      	bx	lr

080009c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009c6:	b580      	push	{r7, lr}
 80009c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009ca:	f000 fa2d 	bl	8000e28 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80009ce:	f008 fab3 	bl	8008f38 <xTaskGetSchedulerState>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b01      	cmp	r3, #1
 80009d6:	d001      	beq.n	80009dc <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80009d8:	f008 fe36 	bl	8009648 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009dc:	bf00      	nop
 80009de:	bd80      	pop	{r7, pc}

080009e0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80009e4:	2001      	movs	r0, #1
 80009e6:	f001 fc3b 	bl	8002260 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80009ea:	bf00      	nop
 80009ec:	bd80      	pop	{r7, pc}
	...

080009f0 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80009f4:	4802      	ldr	r0, [pc, #8]	; (8000a00 <ETH_IRQHandler+0x10>)
 80009f6:	f000 fdd9 	bl	80015ac <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80009fa:	bf00      	nop
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	20004ec0 	.word	0x20004ec0

08000a04 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000a08:	4802      	ldr	r0, [pc, #8]	; (8000a14 <OTG_FS_IRQHandler+0x10>)
 8000a0a:	f001 fc4b 	bl	80022a4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000a0e:	bf00      	nop
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	2000bf70 	.word	0x2000bf70

08000a18 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
	return 1;
 8000a1c:	2301      	movs	r3, #1
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bc80      	pop	{r7}
 8000a24:	4770      	bx	lr
	...

08000a28 <_kill>:

int _kill(int pid, int sig)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
 8000a30:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000a32:	4b05      	ldr	r3, [pc, #20]	; (8000a48 <_kill+0x20>)
 8000a34:	2216      	movs	r2, #22
 8000a36:	601a      	str	r2, [r3, #0]
	return -1;
 8000a38:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	370c      	adds	r7, #12
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bc80      	pop	{r7}
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	2000c488 	.word	0x2000c488

08000a4c <_exit>:

void _exit (int status)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000a54:	f04f 31ff 	mov.w	r1, #4294967295
 8000a58:	6878      	ldr	r0, [r7, #4]
 8000a5a:	f7ff ffe5 	bl	8000a28 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000a5e:	e7fe      	b.n	8000a5e <_exit+0x12>

08000a60 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b086      	sub	sp, #24
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	60f8      	str	r0, [r7, #12]
 8000a68:	60b9      	str	r1, [r7, #8]
 8000a6a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	617b      	str	r3, [r7, #20]
 8000a70:	e00a      	b.n	8000a88 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a72:	f3af 8000 	nop.w
 8000a76:	4601      	mov	r1, r0
 8000a78:	68bb      	ldr	r3, [r7, #8]
 8000a7a:	1c5a      	adds	r2, r3, #1
 8000a7c:	60ba      	str	r2, [r7, #8]
 8000a7e:	b2ca      	uxtb	r2, r1
 8000a80:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a82:	697b      	ldr	r3, [r7, #20]
 8000a84:	3301      	adds	r3, #1
 8000a86:	617b      	str	r3, [r7, #20]
 8000a88:	697a      	ldr	r2, [r7, #20]
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	429a      	cmp	r2, r3
 8000a8e:	dbf0      	blt.n	8000a72 <_read+0x12>
	}

return len;
 8000a90:	687b      	ldr	r3, [r7, #4]
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	3718      	adds	r7, #24
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}

08000a9a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a9a:	b580      	push	{r7, lr}
 8000a9c:	b086      	sub	sp, #24
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	60f8      	str	r0, [r7, #12]
 8000aa2:	60b9      	str	r1, [r7, #8]
 8000aa4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	617b      	str	r3, [r7, #20]
 8000aaa:	e009      	b.n	8000ac0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000aac:	68bb      	ldr	r3, [r7, #8]
 8000aae:	1c5a      	adds	r2, r3, #1
 8000ab0:	60ba      	str	r2, [r7, #8]
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aba:	697b      	ldr	r3, [r7, #20]
 8000abc:	3301      	adds	r3, #1
 8000abe:	617b      	str	r3, [r7, #20]
 8000ac0:	697a      	ldr	r2, [r7, #20]
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	429a      	cmp	r2, r3
 8000ac6:	dbf1      	blt.n	8000aac <_write+0x12>
	}
	return len;
 8000ac8:	687b      	ldr	r3, [r7, #4]
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	3718      	adds	r7, #24
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}

08000ad2 <_close>:

int _close(int file)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	b083      	sub	sp, #12
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	6078      	str	r0, [r7, #4]
	return -1;
 8000ada:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	370c      	adds	r7, #12
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bc80      	pop	{r7}
 8000ae6:	4770      	bx	lr

08000ae8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
 8000af0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000af8:	605a      	str	r2, [r3, #4]
	return 0;
 8000afa:	2300      	movs	r3, #0
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	370c      	adds	r7, #12
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bc80      	pop	{r7}
 8000b04:	4770      	bx	lr

08000b06 <_isatty>:

int _isatty(int file)
{
 8000b06:	b480      	push	{r7}
 8000b08:	b083      	sub	sp, #12
 8000b0a:	af00      	add	r7, sp, #0
 8000b0c:	6078      	str	r0, [r7, #4]
	return 1;
 8000b0e:	2301      	movs	r3, #1
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	370c      	adds	r7, #12
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bc80      	pop	{r7}
 8000b18:	4770      	bx	lr

08000b1a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	b085      	sub	sp, #20
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	60f8      	str	r0, [r7, #12]
 8000b22:	60b9      	str	r1, [r7, #8]
 8000b24:	607a      	str	r2, [r7, #4]
	return 0;
 8000b26:	2300      	movs	r3, #0
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	3714      	adds	r7, #20
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bc80      	pop	{r7}
 8000b30:	4770      	bx	lr
	...

08000b34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b087      	sub	sp, #28
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b3c:	4a14      	ldr	r2, [pc, #80]	; (8000b90 <_sbrk+0x5c>)
 8000b3e:	4b15      	ldr	r3, [pc, #84]	; (8000b94 <_sbrk+0x60>)
 8000b40:	1ad3      	subs	r3, r2, r3
 8000b42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b48:	4b13      	ldr	r3, [pc, #76]	; (8000b98 <_sbrk+0x64>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d102      	bne.n	8000b56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b50:	4b11      	ldr	r3, [pc, #68]	; (8000b98 <_sbrk+0x64>)
 8000b52:	4a12      	ldr	r2, [pc, #72]	; (8000b9c <_sbrk+0x68>)
 8000b54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b56:	4b10      	ldr	r3, [pc, #64]	; (8000b98 <_sbrk+0x64>)
 8000b58:	681a      	ldr	r2, [r3, #0]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	4413      	add	r3, r2
 8000b5e:	693a      	ldr	r2, [r7, #16]
 8000b60:	429a      	cmp	r2, r3
 8000b62:	d205      	bcs.n	8000b70 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000b64:	4b0e      	ldr	r3, [pc, #56]	; (8000ba0 <_sbrk+0x6c>)
 8000b66:	220c      	movs	r2, #12
 8000b68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b6e:	e009      	b.n	8000b84 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b70:	4b09      	ldr	r3, [pc, #36]	; (8000b98 <_sbrk+0x64>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b76:	4b08      	ldr	r3, [pc, #32]	; (8000b98 <_sbrk+0x64>)
 8000b78:	681a      	ldr	r2, [r3, #0]
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	4413      	add	r3, r2
 8000b7e:	4a06      	ldr	r2, [pc, #24]	; (8000b98 <_sbrk+0x64>)
 8000b80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b82:	68fb      	ldr	r3, [r7, #12]
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	371c      	adds	r7, #28
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bc80      	pop	{r7}
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	20020000 	.word	0x20020000
 8000b94:	00004000 	.word	0x00004000
 8000b98:	20000398 	.word	0x20000398
 8000b9c:	2000c490 	.word	0x2000c490
 8000ba0:	2000c488 	.word	0x2000c488

08000ba4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ba8:	bf00      	nop
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bc80      	pop	{r7}
 8000bae:	4770      	bx	lr

08000bb0 <test_mqtt_netif_output>:
const ip_addr_t test_mqtt_remote_ip = IPADDR4_INIT_BYTES(192, 168, 220, 1);
const ip_addr_t test_mqtt_netmask = IPADDR4_INIT_BYTES(255, 255, 255, 0);

static err_t test_mqtt_netif_output(struct netif *netif, struct pbuf *p,
       const ip4_addr_t *ipaddr)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b085      	sub	sp, #20
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	60f8      	str	r0, [r7, #12]
 8000bb8:	60b9      	str	r1, [r7, #8]
 8000bba:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(ipaddr);
  LWIP_UNUSED_ARG(p);
  return ERR_OK;
 8000bbc:	2300      	movs	r3, #0
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3714      	adds	r7, #20
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bc80      	pop	{r7}
 8000bc6:	4770      	bx	lr

08000bc8 <test_mqtt_init_netif>:

static void
test_mqtt_init_netif(struct netif *netif, const ip_addr_t *ip_addr, const ip_addr_t *netmask)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b086      	sub	sp, #24
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	60f8      	str	r0, [r7, #12]
 8000bd0:	60b9      	str	r1, [r7, #8]
 8000bd2:	607a      	str	r2, [r7, #4]
  struct netif *n;
  memset(netif, 0, sizeof(struct netif));
 8000bd4:	2234      	movs	r2, #52	; 0x34
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	68f8      	ldr	r0, [r7, #12]
 8000bda:	f015 ff6b 	bl	8016ab4 <memset>
  netif->output = test_mqtt_netif_output;
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	4a15      	ldr	r2, [pc, #84]	; (8000c38 <test_mqtt_init_netif+0x70>)
 8000be2:	615a      	str	r2, [r3, #20]
  netif->flags |= NETIF_FLAG_UP | NETIF_FLAG_LINK_UP;
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8000bea:	f043 0305 	orr.w	r3, r3, #5
 8000bee:	b2da      	uxtb	r2, r3
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  ip_addr_copy_from_ip4(netif->netmask, *ip_2_ip4(netmask));
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681a      	ldr	r2, [r3, #0]
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	609a      	str	r2, [r3, #8]
  ip_addr_copy_from_ip4(netif->ip_addr, *ip_2_ip4(ip_addr));
 8000bfe:	68bb      	ldr	r3, [r7, #8]
 8000c00:	681a      	ldr	r2, [r3, #0]
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	605a      	str	r2, [r3, #4]
  for (n = netif_list; n != NULL; n = n->next) {
 8000c06:	4b0d      	ldr	r3, [pc, #52]	; (8000c3c <test_mqtt_init_netif+0x74>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	617b      	str	r3, [r7, #20]
 8000c0c:	e006      	b.n	8000c1c <test_mqtt_init_netif+0x54>
    if (n == netif) {
 8000c0e:	697a      	ldr	r2, [r7, #20]
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	429a      	cmp	r2, r3
 8000c14:	d00c      	beq.n	8000c30 <test_mqtt_init_netif+0x68>
  for (n = netif_list; n != NULL; n = n->next) {
 8000c16:	697b      	ldr	r3, [r7, #20]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	617b      	str	r3, [r7, #20]
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d1f5      	bne.n	8000c0e <test_mqtt_init_netif+0x46>
      return;
    }
  }
  netif->next = NULL;
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8000c28:	4a04      	ldr	r2, [pc, #16]	; (8000c3c <test_mqtt_init_netif+0x74>)
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	6013      	str	r3, [r2, #0]
 8000c2e:	e000      	b.n	8000c32 <test_mqtt_init_netif+0x6a>
      return;
 8000c30:	bf00      	nop
}
 8000c32:	3718      	adds	r7, #24
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	08000bb1 	.word	0x08000bb1
 8000c3c:	2000be04 	.word	0x2000be04

08000c40 <test_mqtt_connection_cb>:
  netif_default = old_netif_default;
  lwip_check_ensure_no_alloc(SKIP_POOL(MEMP_SYS_TIMEOUT));
}

static void test_mqtt_connection_cb(mqtt_client_t *client, void *arg, mqtt_connection_status_t status)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b085      	sub	sp, #20
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	60f8      	str	r0, [r7, #12]
 8000c48:	60b9      	str	r1, [r7, #8]
 8000c4a:	4613      	mov	r3, r2
 8000c4c:	80fb      	strh	r3, [r7, #6]
  LWIP_UNUSED_ARG(client);
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(status);
}
 8000c4e:	bf00      	nop
 8000c50:	3714      	adds	r7, #20
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bc80      	pop	{r7}
 8000c56:	4770      	bx	lr

08000c58 <START_TEST>:

void START_TEST(void)
{
 8000c58:	b5b0      	push	{r4, r5, r7, lr}
 8000c5a:	b09a      	sub	sp, #104	; 0x68
 8000c5c:	af02      	add	r7, sp, #8
  mqtt_client_t* client;
  struct netif netif;
  err_t err;
  struct mqtt_connect_client_info_t client_info = {
 8000c5e:	4b2f      	ldr	r3, [pc, #188]	; (8000d1c <START_TEST+0xc4>)
 8000c60:	1d3c      	adds	r4, r7, #4
 8000c62:	461d      	mov	r5, r3
 8000c64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c68:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c6c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    NULL, NULL,
    10,
    NULL, NULL, 0, 0
  };
  struct pbuf *p;
  unsigned char rxbuf[] = {0x20, 0x02, 0x00, 0x00};
 8000c70:	f44f 7308 	mov.w	r3, #544	; 0x220
 8000c74:	603b      	str	r3, [r7, #0]
  //LWIP_UNUSED_ARG(_i);

  test_mqtt_init_netif(&netif, &test_mqtt_local_ip, &test_mqtt_netmask);
 8000c76:	f107 0320 	add.w	r3, r7, #32
 8000c7a:	4a29      	ldr	r2, [pc, #164]	; (8000d20 <START_TEST+0xc8>)
 8000c7c:	4929      	ldr	r1, [pc, #164]	; (8000d24 <START_TEST+0xcc>)
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f7ff ffa2 	bl	8000bc8 <test_mqtt_init_netif>

  client = mqtt_client_new();
 8000c84:	f00a f8da 	bl	800ae3c <mqtt_client_new>
 8000c88:	65f8      	str	r0, [r7, #92]	; 0x5c
  //fail_unless(client != NULL);
  err = mqtt_client_connect(client, &test_mqtt_remote_ip, 1883, test_mqtt_connection_cb, NULL, &client_info);
 8000c8a:	1d3b      	adds	r3, r7, #4
 8000c8c:	9301      	str	r3, [sp, #4]
 8000c8e:	2300      	movs	r3, #0
 8000c90:	9300      	str	r3, [sp, #0]
 8000c92:	4b25      	ldr	r3, [pc, #148]	; (8000d28 <START_TEST+0xd0>)
 8000c94:	f240 725b 	movw	r2, #1883	; 0x75b
 8000c98:	4924      	ldr	r1, [pc, #144]	; (8000d2c <START_TEST+0xd4>)
 8000c9a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8000c9c:	f00a f8d8 	bl	800ae50 <mqtt_client_connect>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
  //fail_unless(err == ERR_OK);

  client->conn->connected(client->conn->callback_arg, client->conn, ERR_OK);
 8000ca6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000ca8:	68db      	ldr	r3, [r3, #12]
 8000caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cae:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000cb0:	68d2      	ldr	r2, [r2, #12]
 8000cb2:	6910      	ldr	r0, [r2, #16]
 8000cb4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000cb6:	68d1      	ldr	r1, [r2, #12]
 8000cb8:	2200      	movs	r2, #0
 8000cba:	4798      	blx	r3
  p = pbuf_alloc(PBUF_RAW, sizeof(rxbuf), PBUF_REF);
 8000cbc:	2241      	movs	r2, #65	; 0x41
 8000cbe:	2104      	movs	r1, #4
 8000cc0:	2000      	movs	r0, #0
 8000cc2:	f00b fcdd 	bl	800c680 <pbuf_alloc>
 8000cc6:	6578      	str	r0, [r7, #84]	; 0x54
  //fail_unless(p != NULL);
  p->payload = rxbuf;
 8000cc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000cca:	463a      	mov	r2, r7
 8000ccc:	605a      	str	r2, [r3, #4]
  /* since we hack the rx path, we have to hack the rx window, too: */
  client->conn->rcv_wnd -= p->tot_len;
 8000cce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000cd0:	68db      	ldr	r3, [r3, #12]
 8000cd2:	8d19      	ldrh	r1, [r3, #40]	; 0x28
 8000cd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000cd6:	891a      	ldrh	r2, [r3, #8]
 8000cd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000cda:	68db      	ldr	r3, [r3, #12]
 8000cdc:	1a8a      	subs	r2, r1, r2
 8000cde:	b292      	uxth	r2, r2
 8000ce0:	851a      	strh	r2, [r3, #40]	; 0x28
  if (client->conn->recv(client->conn->callback_arg, client->conn, p, ERR_OK) != ERR_OK) {
 8000ce2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000ce4:	68db      	ldr	r3, [r3, #12]
 8000ce6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8000cea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000cec:	68db      	ldr	r3, [r3, #12]
 8000cee:	6918      	ldr	r0, [r3, #16]
 8000cf0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000cf2:	68d9      	ldr	r1, [r3, #12]
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000cf8:	47a0      	blx	r4
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d002      	beq.n	8000d06 <START_TEST+0xae>
    pbuf_free(p);
 8000d00:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8000d02:	f00b ffa1 	bl	800cc48 <pbuf_free>
  }

  mqtt_disconnect(client);
 8000d06:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8000d08:	f00a fb1e 	bl	800b348 <mqtt_disconnect>
  /* fixme: mqtt_client_fre() is missing... */
  mem_free(client);
 8000d0c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8000d0e:	f00a fd89 	bl	800b824 <mem_free>
}
 8000d12:	bf00      	nop
 8000d14:	3760      	adds	r7, #96	; 0x60
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bdb0      	pop	{r4, r5, r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	08017828 	.word	0x08017828
 8000d20:	0801ab40 	.word	0x0801ab40
 8000d24:	0801ab38 	.word	0x0801ab38
 8000d28:	08000c41 	.word	0x08000c41
 8000d2c:	0801ab3c 	.word	0x0801ab3c

08000d30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d68 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d34:	480d      	ldr	r0, [pc, #52]	; (8000d6c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d36:	490e      	ldr	r1, [pc, #56]	; (8000d70 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d38:	4a0e      	ldr	r2, [pc, #56]	; (8000d74 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d3c:	e002      	b.n	8000d44 <LoopCopyDataInit>

08000d3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d42:	3304      	adds	r3, #4

08000d44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d48:	d3f9      	bcc.n	8000d3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d4a:	4a0b      	ldr	r2, [pc, #44]	; (8000d78 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d4c:	4c0b      	ldr	r4, [pc, #44]	; (8000d7c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d50:	e001      	b.n	8000d56 <LoopFillZerobss>

08000d52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d54:	3204      	adds	r2, #4

08000d56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d58:	d3fb      	bcc.n	8000d52 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d5a:	f7ff ff23 	bl	8000ba4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d5e:	f015 fdf7 	bl	8016950 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d62:	f7ff fc27 	bl	80005b4 <main>
  bx  lr    
 8000d66:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d68:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d70:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8000d74:	0801add4 	.word	0x0801add4
  ldr r2, =_sbss
 8000d78:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000d7c:	2000c48c 	.word	0x2000c48c

08000d80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d80:	e7fe      	b.n	8000d80 <ADC_IRQHandler>
	...

08000d84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d88:	4b0e      	ldr	r3, [pc, #56]	; (8000dc4 <HAL_Init+0x40>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a0d      	ldr	r2, [pc, #52]	; (8000dc4 <HAL_Init+0x40>)
 8000d8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d94:	4b0b      	ldr	r3, [pc, #44]	; (8000dc4 <HAL_Init+0x40>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a0a      	ldr	r2, [pc, #40]	; (8000dc4 <HAL_Init+0x40>)
 8000d9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000da0:	4b08      	ldr	r3, [pc, #32]	; (8000dc4 <HAL_Init+0x40>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a07      	ldr	r2, [pc, #28]	; (8000dc4 <HAL_Init+0x40>)
 8000da6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000daa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dac:	2003      	movs	r0, #3
 8000dae:	f000 f947 	bl	8001040 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000db2:	200f      	movs	r0, #15
 8000db4:	f000 f808 	bl	8000dc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000db8:	f7ff fd7c 	bl	80008b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dbc:	2300      	movs	r3, #0
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	40023c00 	.word	0x40023c00

08000dc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dd0:	4b12      	ldr	r3, [pc, #72]	; (8000e1c <HAL_InitTick+0x54>)
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	4b12      	ldr	r3, [pc, #72]	; (8000e20 <HAL_InitTick+0x58>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	4619      	mov	r1, r3
 8000dda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dde:	fbb3 f3f1 	udiv	r3, r3, r1
 8000de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000de6:	4618      	mov	r0, r3
 8000de8:	f000 f95f 	bl	80010aa <HAL_SYSTICK_Config>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000df2:	2301      	movs	r3, #1
 8000df4:	e00e      	b.n	8000e14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	2b0f      	cmp	r3, #15
 8000dfa:	d80a      	bhi.n	8000e12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	6879      	ldr	r1, [r7, #4]
 8000e00:	f04f 30ff 	mov.w	r0, #4294967295
 8000e04:	f000 f927 	bl	8001056 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e08:	4a06      	ldr	r2, [pc, #24]	; (8000e24 <HAL_InitTick+0x5c>)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	e000      	b.n	8000e14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e12:	2301      	movs	r3, #1
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	3708      	adds	r7, #8
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	20000000 	.word	0x20000000
 8000e20:	20000008 	.word	0x20000008
 8000e24:	20000004 	.word	0x20000004

08000e28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e2c:	4b05      	ldr	r3, [pc, #20]	; (8000e44 <HAL_IncTick+0x1c>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	461a      	mov	r2, r3
 8000e32:	4b05      	ldr	r3, [pc, #20]	; (8000e48 <HAL_IncTick+0x20>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4413      	add	r3, r2
 8000e38:	4a03      	ldr	r2, [pc, #12]	; (8000e48 <HAL_IncTick+0x20>)
 8000e3a:	6013      	str	r3, [r2, #0]
}
 8000e3c:	bf00      	nop
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bc80      	pop	{r7}
 8000e42:	4770      	bx	lr
 8000e44:	20000008 	.word	0x20000008
 8000e48:	2000039c 	.word	0x2000039c

08000e4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e50:	4b02      	ldr	r3, [pc, #8]	; (8000e5c <HAL_GetTick+0x10>)
 8000e52:	681b      	ldr	r3, [r3, #0]
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bc80      	pop	{r7}
 8000e5a:	4770      	bx	lr
 8000e5c:	2000039c 	.word	0x2000039c

08000e60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b084      	sub	sp, #16
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e68:	f7ff fff0 	bl	8000e4c <HAL_GetTick>
 8000e6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e78:	d005      	beq.n	8000e86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e7a:	4b0a      	ldr	r3, [pc, #40]	; (8000ea4 <HAL_Delay+0x44>)
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	461a      	mov	r2, r3
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	4413      	add	r3, r2
 8000e84:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e86:	bf00      	nop
 8000e88:	f7ff ffe0 	bl	8000e4c <HAL_GetTick>
 8000e8c:	4602      	mov	r2, r0
 8000e8e:	68bb      	ldr	r3, [r7, #8]
 8000e90:	1ad3      	subs	r3, r2, r3
 8000e92:	68fa      	ldr	r2, [r7, #12]
 8000e94:	429a      	cmp	r2, r3
 8000e96:	d8f7      	bhi.n	8000e88 <HAL_Delay+0x28>
  {
  }
}
 8000e98:	bf00      	nop
 8000e9a:	bf00      	nop
 8000e9c:	3710      	adds	r7, #16
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	20000008 	.word	0x20000008

08000ea8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b085      	sub	sp, #20
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	f003 0307 	and.w	r3, r3, #7
 8000eb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eb8:	4b0c      	ldr	r3, [pc, #48]	; (8000eec <__NVIC_SetPriorityGrouping+0x44>)
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ebe:	68ba      	ldr	r2, [r7, #8]
 8000ec0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ed0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ed4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ed8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eda:	4a04      	ldr	r2, [pc, #16]	; (8000eec <__NVIC_SetPriorityGrouping+0x44>)
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	60d3      	str	r3, [r2, #12]
}
 8000ee0:	bf00      	nop
 8000ee2:	3714      	adds	r7, #20
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bc80      	pop	{r7}
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	e000ed00 	.word	0xe000ed00

08000ef0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ef4:	4b04      	ldr	r3, [pc, #16]	; (8000f08 <__NVIC_GetPriorityGrouping+0x18>)
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	0a1b      	lsrs	r3, r3, #8
 8000efa:	f003 0307 	and.w	r3, r3, #7
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bc80      	pop	{r7}
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	e000ed00 	.word	0xe000ed00

08000f0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	4603      	mov	r3, r0
 8000f14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	db0b      	blt.n	8000f36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f1e:	79fb      	ldrb	r3, [r7, #7]
 8000f20:	f003 021f 	and.w	r2, r3, #31
 8000f24:	4906      	ldr	r1, [pc, #24]	; (8000f40 <__NVIC_EnableIRQ+0x34>)
 8000f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2a:	095b      	lsrs	r3, r3, #5
 8000f2c:	2001      	movs	r0, #1
 8000f2e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f36:	bf00      	nop
 8000f38:	370c      	adds	r7, #12
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bc80      	pop	{r7}
 8000f3e:	4770      	bx	lr
 8000f40:	e000e100 	.word	0xe000e100

08000f44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	6039      	str	r1, [r7, #0]
 8000f4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	db0a      	blt.n	8000f6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	b2da      	uxtb	r2, r3
 8000f5c:	490c      	ldr	r1, [pc, #48]	; (8000f90 <__NVIC_SetPriority+0x4c>)
 8000f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f62:	0112      	lsls	r2, r2, #4
 8000f64:	b2d2      	uxtb	r2, r2
 8000f66:	440b      	add	r3, r1
 8000f68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f6c:	e00a      	b.n	8000f84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	b2da      	uxtb	r2, r3
 8000f72:	4908      	ldr	r1, [pc, #32]	; (8000f94 <__NVIC_SetPriority+0x50>)
 8000f74:	79fb      	ldrb	r3, [r7, #7]
 8000f76:	f003 030f 	and.w	r3, r3, #15
 8000f7a:	3b04      	subs	r3, #4
 8000f7c:	0112      	lsls	r2, r2, #4
 8000f7e:	b2d2      	uxtb	r2, r2
 8000f80:	440b      	add	r3, r1
 8000f82:	761a      	strb	r2, [r3, #24]
}
 8000f84:	bf00      	nop
 8000f86:	370c      	adds	r7, #12
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bc80      	pop	{r7}
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	e000e100 	.word	0xe000e100
 8000f94:	e000ed00 	.word	0xe000ed00

08000f98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b089      	sub	sp, #36	; 0x24
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	60f8      	str	r0, [r7, #12]
 8000fa0:	60b9      	str	r1, [r7, #8]
 8000fa2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	f003 0307 	and.w	r3, r3, #7
 8000faa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fac:	69fb      	ldr	r3, [r7, #28]
 8000fae:	f1c3 0307 	rsb	r3, r3, #7
 8000fb2:	2b04      	cmp	r3, #4
 8000fb4:	bf28      	it	cs
 8000fb6:	2304      	movcs	r3, #4
 8000fb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	3304      	adds	r3, #4
 8000fbe:	2b06      	cmp	r3, #6
 8000fc0:	d902      	bls.n	8000fc8 <NVIC_EncodePriority+0x30>
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	3b03      	subs	r3, #3
 8000fc6:	e000      	b.n	8000fca <NVIC_EncodePriority+0x32>
 8000fc8:	2300      	movs	r3, #0
 8000fca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fcc:	f04f 32ff 	mov.w	r2, #4294967295
 8000fd0:	69bb      	ldr	r3, [r7, #24]
 8000fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd6:	43da      	mvns	r2, r3
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	401a      	ands	r2, r3
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fe0:	f04f 31ff 	mov.w	r1, #4294967295
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fea:	43d9      	mvns	r1, r3
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff0:	4313      	orrs	r3, r2
         );
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3724      	adds	r7, #36	; 0x24
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bc80      	pop	{r7}
 8000ffa:	4770      	bx	lr

08000ffc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	3b01      	subs	r3, #1
 8001008:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800100c:	d301      	bcc.n	8001012 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800100e:	2301      	movs	r3, #1
 8001010:	e00f      	b.n	8001032 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001012:	4a0a      	ldr	r2, [pc, #40]	; (800103c <SysTick_Config+0x40>)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	3b01      	subs	r3, #1
 8001018:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800101a:	210f      	movs	r1, #15
 800101c:	f04f 30ff 	mov.w	r0, #4294967295
 8001020:	f7ff ff90 	bl	8000f44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001024:	4b05      	ldr	r3, [pc, #20]	; (800103c <SysTick_Config+0x40>)
 8001026:	2200      	movs	r2, #0
 8001028:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800102a:	4b04      	ldr	r3, [pc, #16]	; (800103c <SysTick_Config+0x40>)
 800102c:	2207      	movs	r2, #7
 800102e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001030:	2300      	movs	r3, #0
}
 8001032:	4618      	mov	r0, r3
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	e000e010 	.word	0xe000e010

08001040 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001048:	6878      	ldr	r0, [r7, #4]
 800104a:	f7ff ff2d 	bl	8000ea8 <__NVIC_SetPriorityGrouping>
}
 800104e:	bf00      	nop
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}

08001056 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001056:	b580      	push	{r7, lr}
 8001058:	b086      	sub	sp, #24
 800105a:	af00      	add	r7, sp, #0
 800105c:	4603      	mov	r3, r0
 800105e:	60b9      	str	r1, [r7, #8]
 8001060:	607a      	str	r2, [r7, #4]
 8001062:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001064:	2300      	movs	r3, #0
 8001066:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001068:	f7ff ff42 	bl	8000ef0 <__NVIC_GetPriorityGrouping>
 800106c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800106e:	687a      	ldr	r2, [r7, #4]
 8001070:	68b9      	ldr	r1, [r7, #8]
 8001072:	6978      	ldr	r0, [r7, #20]
 8001074:	f7ff ff90 	bl	8000f98 <NVIC_EncodePriority>
 8001078:	4602      	mov	r2, r0
 800107a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800107e:	4611      	mov	r1, r2
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff ff5f 	bl	8000f44 <__NVIC_SetPriority>
}
 8001086:	bf00      	nop
 8001088:	3718      	adds	r7, #24
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800108e:	b580      	push	{r7, lr}
 8001090:	b082      	sub	sp, #8
 8001092:	af00      	add	r7, sp, #0
 8001094:	4603      	mov	r3, r0
 8001096:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001098:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109c:	4618      	mov	r0, r3
 800109e:	f7ff ff35 	bl	8000f0c <__NVIC_EnableIRQ>
}
 80010a2:	bf00      	nop
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}

080010aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b082      	sub	sp, #8
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f7ff ffa2 	bl	8000ffc <SysTick_Config>
 80010b8:	4603      	mov	r3, r0
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
	...

080010c4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d101      	bne.n	80010d6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
 80010d4:	e06c      	b.n	80011b0 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d106      	bne.n	80010ee <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2223      	movs	r2, #35	; 0x23
 80010e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f000 f869 	bl	80011c0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ee:	2300      	movs	r3, #0
 80010f0:	60bb      	str	r3, [r7, #8]
 80010f2:	4b31      	ldr	r3, [pc, #196]	; (80011b8 <HAL_ETH_Init+0xf4>)
 80010f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f6:	4a30      	ldr	r2, [pc, #192]	; (80011b8 <HAL_ETH_Init+0xf4>)
 80010f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010fc:	6453      	str	r3, [r2, #68]	; 0x44
 80010fe:	4b2e      	ldr	r3, [pc, #184]	; (80011b8 <HAL_ETH_Init+0xf4>)
 8001100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001102:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001106:	60bb      	str	r3, [r7, #8]
 8001108:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800110a:	4b2c      	ldr	r3, [pc, #176]	; (80011bc <HAL_ETH_Init+0xf8>)
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	4a2b      	ldr	r2, [pc, #172]	; (80011bc <HAL_ETH_Init+0xf8>)
 8001110:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001114:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001116:	4b29      	ldr	r3, [pc, #164]	; (80011bc <HAL_ETH_Init+0xf8>)
 8001118:	685a      	ldr	r2, [r3, #4]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	689b      	ldr	r3, [r3, #8]
 800111e:	4927      	ldr	r1, [pc, #156]	; (80011bc <HAL_ETH_Init+0xf8>)
 8001120:	4313      	orrs	r3, r2
 8001122:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001124:	4b25      	ldr	r3, [pc, #148]	; (80011bc <HAL_ETH_Init+0xf8>)
 8001126:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	687a      	ldr	r2, [r7, #4]
 8001134:	6812      	ldr	r2, [r2, #0]
 8001136:	f043 0301 	orr.w	r3, r3, #1
 800113a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800113e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001140:	f7ff fe84 	bl	8000e4c <HAL_GetTick>
 8001144:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001146:	e011      	b.n	800116c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001148:	f7ff fe80 	bl	8000e4c <HAL_GetTick>
 800114c:	4602      	mov	r2, r0
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	1ad3      	subs	r3, r2, r3
 8001152:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001156:	d909      	bls.n	800116c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2204      	movs	r2, #4
 800115c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	22e0      	movs	r2, #224	; 0xe0
 8001164:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001168:	2301      	movs	r3, #1
 800116a:	e021      	b.n	80011b0 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f003 0301 	and.w	r3, r3, #1
 800117a:	2b00      	cmp	r3, #0
 800117c:	d1e4      	bne.n	8001148 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f000 fc1a 	bl	80019b8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f000 fcbf 	bl	8001b08 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f000 fd14 	bl	8001bb8 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	461a      	mov	r2, r3
 8001196:	2100      	movs	r1, #0
 8001198:	6878      	ldr	r0, [r7, #4]
 800119a:	f000 fc7f 	bl	8001a9c <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2200      	movs	r2, #0
 80011a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2210      	movs	r2, #16
 80011aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80011ae:	2300      	movs	r3, #0
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3710      	adds	r7, #16
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	40023800 	.word	0x40023800
 80011bc:	40013800 	.word	0x40013800

080011c0 <HAL_ETH_MspInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_MspInit(ETH_HandleTypeDef *heth)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_MspInit could be implemented in the user file
  */
}
 80011c8:	bf00      	nop
 80011ca:	370c      	adds	r7, #12
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bc80      	pop	{r7}
 80011d0:	4770      	bx	lr

080011d2 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 80011d2:	b580      	push	{r7, lr}
 80011d4:	b082      	sub	sp, #8
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	6078      	str	r0, [r7, #4]
 80011da:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d109      	bne.n	80011f6 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011e8:	f043 0201 	orr.w	r2, r3, #1
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80011f2:	2301      	movs	r3, #1
 80011f4:	e045      	b.n	8001282 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80011fc:	2b23      	cmp	r3, #35	; 0x23
 80011fe:	d13f      	bne.n	8001280 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8001208:	2201      	movs	r2, #1
 800120a:	6839      	ldr	r1, [r7, #0]
 800120c:	6878      	ldr	r0, [r7, #4]
 800120e:	f000 fd3f 	bl	8001c90 <ETH_Prepare_Tx_Descriptors>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d009      	beq.n	800122c <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800121e:	f043 0202 	orr.w	r2, r3, #2
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8001228:	2301      	movs	r3, #1
 800122a:	e02a      	b.n	8001282 <HAL_ETH_Transmit_IT+0xb0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800122c:	f3bf 8f4f 	dsb	sy
}
 8001230:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001236:	1c5a      	adds	r2, r3, #1
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	629a      	str	r2, [r3, #40]	; 0x28
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001240:	2b03      	cmp	r3, #3
 8001242:	d904      	bls.n	800124e <HAL_ETH_Transmit_IT+0x7c>
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001248:	1f1a      	subs	r2, r3, #4
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001256:	695b      	ldr	r3, [r3, #20]
 8001258:	f003 0304 	and.w	r3, r3, #4
 800125c:	2b00      	cmp	r3, #0
 800125e:	d00d      	beq.n	800127c <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001268:	461a      	mov	r2, r3
 800126a:	2304      	movs	r3, #4
 800126c:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001276:	461a      	mov	r2, r3
 8001278:	2300      	movs	r3, #0
 800127a:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 800127c:	2300      	movs	r3, #0
 800127e:	e000      	b.n	8001282 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8001280:	2301      	movs	r3, #1
  }
}
 8001282:	4618      	mov	r0, r3
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}

0800128a <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 800128a:	b580      	push	{r7, lr}
 800128c:	b088      	sub	sp, #32
 800128e:	af00      	add	r7, sp, #0
 8001290:	6078      	str	r0, [r7, #4]
 8001292:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001294:	2300      	movs	r3, #0
 8001296:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001298:	2300      	movs	r3, #0
 800129a:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d109      	bne.n	80012b6 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012a8:	f043 0201 	orr.w	r2, r3, #1
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	e0a8      	b.n	8001408 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80012bc:	2b23      	cmp	r3, #35	; 0x23
 80012be:	d001      	beq.n	80012c4 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 80012c0:	2301      	movs	r3, #1
 80012c2:	e0a1      	b.n	8001408 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012c8:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	69fa      	ldr	r2, [r7, #28]
 80012ce:	3212      	adds	r2, #18
 80012d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012d4:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80012da:	f1c3 0304 	rsb	r3, r3, #4
 80012de:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80012e0:	e06a      	b.n	80013b8 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 80012e2:	69bb      	ldr	r3, [r7, #24]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d007      	beq.n	80012fe <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 80012ee:	69bb      	ldr	r3, [r7, #24]
 80012f0:	699a      	ldr	r2, [r3, #24]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 80012f6:	69bb      	ldr	r3, [r7, #24]
 80012f8:	69da      	ldr	r2, [r3, #28]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 80012fe:	69bb      	ldr	r3, [r7, #24]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001306:	2b00      	cmp	r3, #0
 8001308:	d103      	bne.n	8001312 <HAL_ETH_ReadData+0x88>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800130e:	2b00      	cmp	r3, #0
 8001310:	d040      	beq.n	8001394 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001312:	69bb      	ldr	r3, [r7, #24]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800131a:	2b00      	cmp	r3, #0
 800131c:	d005      	beq.n	800132a <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2200      	movs	r2, #0
 8001322:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2200      	movs	r2, #0
 8001328:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	695b      	ldr	r3, [r3, #20]
 800132e:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8001330:	69bb      	ldr	r3, [r7, #24]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001338:	2b00      	cmp	r3, #0
 800133a:	d00c      	beq.n	8001356 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 800133c:	69bb      	ldr	r3, [r7, #24]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	0c1b      	lsrs	r3, r3, #16
 8001342:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001346:	3b04      	subs	r3, #4
 8001348:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 800134a:	69bb      	ldr	r3, [r7, #24]
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8001352:	2301      	movs	r3, #1
 8001354:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8001356:	69bb      	ldr	r3, [r7, #24]
 8001358:	689a      	ldr	r2, [r3, #8]
 800135a:	69bb      	ldr	r3, [r7, #24]
 800135c:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 800136a:	69bb      	ldr	r3, [r7, #24]
 800136c:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800136e:	461a      	mov	r2, r3
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	b29b      	uxth	r3, r3
 8001374:	f004 fb7a 	bl	8005a6c <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800137c:	1c5a      	adds	r2, r3, #1
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	441a      	add	r2, r3
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 800138e:	69bb      	ldr	r3, [r7, #24]
 8001390:	2200      	movs	r2, #0
 8001392:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	3301      	adds	r3, #1
 8001398:	61fb      	str	r3, [r7, #28]
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	2b03      	cmp	r3, #3
 800139e:	d902      	bls.n	80013a6 <HAL_ETH_ReadData+0x11c>
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	3b04      	subs	r3, #4
 80013a4:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	69fa      	ldr	r2, [r7, #28]
 80013aa:	3212      	adds	r2, #18
 80013ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013b0:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	3301      	adds	r3, #1
 80013b6:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80013b8:	69bb      	ldr	r3, [r7, #24]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	db06      	blt.n	80013ce <HAL_ETH_ReadData+0x144>
 80013c0:	697a      	ldr	r2, [r7, #20]
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d202      	bcs.n	80013ce <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 80013c8:	7bfb      	ldrb	r3, [r7, #15]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d089      	beq.n	80012e2 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	441a      	add	r2, r3
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d002      	beq.n	80013e8 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f000 f814 	bl	8001410 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	69fa      	ldr	r2, [r7, #28]
 80013ec:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 80013ee:	7bfb      	ldrb	r3, [r7, #15]
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d108      	bne.n	8001406 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2200      	movs	r2, #0
 8001400:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8001402:	2300      	movs	r3, #0
 8001404:	e000      	b.n	8001408 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
}
 8001408:	4618      	mov	r0, r3
 800140a:	3720      	adds	r7, #32
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}

08001410 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b088      	sub	sp, #32
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001418:	2300      	movs	r3, #0
 800141a:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 800141c:	2301      	movs	r3, #1
 800141e:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001424:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	69fa      	ldr	r2, [r7, #28]
 800142a:	3212      	adds	r2, #18
 800142c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001430:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001436:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001438:	e03e      	b.n	80014b8 <ETH_UpdateDescriptor+0xa8>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	6a1b      	ldr	r3, [r3, #32]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d112      	bne.n	8001468 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001442:	f107 030c 	add.w	r3, r7, #12
 8001446:	4618      	mov	r0, r3
 8001448:	f004 fae0 	bl	8005a0c <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d102      	bne.n	8001458 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001452:	2300      	movs	r3, #0
 8001454:	74fb      	strb	r3, [r7, #19]
 8001456:	e007      	b.n	8001468 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	461a      	mov	r2, r3
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	461a      	mov	r2, r3
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8001468:	7cfb      	ldrb	r3, [r7, #19]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d024      	beq.n	80014b8 <ETH_UpdateDescriptor+0xa8>
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800146e:	f3bf 8f5f 	dmb	sy
}
 8001472:	bf00      	nop
    {
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();

      WRITE_REG(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800147a:	601a      	str	r2, [r3, #0]

      if (heth->RxDescList.ItMode == 0U)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001480:	2b00      	cmp	r3, #0
 8001482:	d103      	bne.n	800148c <ETH_UpdateDescriptor+0x7c>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | 1000U | ETH_DMARXDESC_RCH);
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	4a1a      	ldr	r2, [pc, #104]	; (80014f0 <ETH_UpdateDescriptor+0xe0>)
 8001488:	605a      	str	r2, [r3, #4]
 800148a:	e003      	b.n	8001494 <ETH_UpdateDescriptor+0x84>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, 1000U | ETH_DMARXDESC_RCH);
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	f244 32e8 	movw	r2, #17384	; 0x43e8
 8001492:	605a      	str	r2, [r3, #4]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	3301      	adds	r3, #1
 8001498:	61fb      	str	r3, [r7, #28]
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	2b03      	cmp	r3, #3
 800149e:	d902      	bls.n	80014a6 <ETH_UpdateDescriptor+0x96>
 80014a0:	69fb      	ldr	r3, [r7, #28]
 80014a2:	3b04      	subs	r3, #4
 80014a4:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	69fa      	ldr	r2, [r7, #28]
 80014aa:	3212      	adds	r2, #18
 80014ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014b0:	617b      	str	r3, [r7, #20]
      desccount--;
 80014b2:	69bb      	ldr	r3, [r7, #24]
 80014b4:	3b01      	subs	r3, #1
 80014b6:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80014b8:	69bb      	ldr	r3, [r7, #24]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d002      	beq.n	80014c4 <ETH_UpdateDescriptor+0xb4>
 80014be:	7cfb      	ldrb	r3, [r7, #19]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d1ba      	bne.n	800143a <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	429a      	cmp	r2, r3
 80014cc:	d00c      	beq.n	80014e8 <ETH_UpdateDescriptor+0xd8>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014d6:	461a      	mov	r2, r3
 80014d8:	2300      	movs	r3, #0
 80014da:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	69fa      	ldr	r2, [r7, #28]
 80014e0:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	69ba      	ldr	r2, [r7, #24]
 80014e6:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 80014e8:	bf00      	nop
 80014ea:	3720      	adds	r7, #32
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	800043e8 	.word	0x800043e8

080014f4 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b086      	sub	sp, #24
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	3318      	adds	r3, #24
 8001500:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001506:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800150c:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 800150e:	2301      	movs	r3, #1
 8001510:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001512:	e03f      	b.n	8001594 <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 8001514:	2301      	movs	r3, #1
 8001516:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	3b01      	subs	r3, #1
 800151c:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 800151e:	68ba      	ldr	r2, [r7, #8]
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	3304      	adds	r3, #4
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	4413      	add	r3, r2
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d106      	bne.n	800153c <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	3301      	adds	r3, #1
 8001532:	f003 0303 	and.w	r3, r3, #3
 8001536:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8001538:	2300      	movs	r3, #0
 800153a:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 800153c:	7bbb      	ldrb	r3, [r7, #14]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d028      	beq.n	8001594 <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	68d9      	ldr	r1, [r3, #12]
 8001546:	693a      	ldr	r2, [r7, #16]
 8001548:	4613      	mov	r3, r2
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	4413      	add	r3, r2
 800154e:	00db      	lsls	r3, r3, #3
 8001550:	440b      	add	r3, r1
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	2b00      	cmp	r3, #0
 8001556:	db1b      	blt.n	8001590 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8001558:	68ba      	ldr	r2, [r7, #8]
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	3304      	adds	r3, #4
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	4413      	add	r3, r2
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	4618      	mov	r0, r3
 8001566:	f004 fac0 	bl	8005aea <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 800156a:	68ba      	ldr	r2, [r7, #8]
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	3304      	adds	r3, #4
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	4413      	add	r3, r2
 8001574:	2200      	movs	r2, #0
 8001576:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	3301      	adds	r3, #1
 800157c:	f003 0303 	and.w	r3, r3, #3
 8001580:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8001582:	68bb      	ldr	r3, [r7, #8]
 8001584:	697a      	ldr	r2, [r7, #20]
 8001586:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	693a      	ldr	r2, [r7, #16]
 800158c:	62da      	str	r2, [r3, #44]	; 0x2c
 800158e:	e001      	b.n	8001594 <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8001590:	2300      	movs	r3, #0
 8001592:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d002      	beq.n	80015a0 <HAL_ETH_ReleaseTxPacket+0xac>
 800159a:	7bfb      	ldrb	r3, [r7, #15]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d1b9      	bne.n	8001514 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 80015a0:	2300      	movs	r3, #0
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3718      	adds	r7, #24
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
	...

080015ac <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015bc:	695b      	ldr	r3, [r3, #20]
 80015be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015c2:	2b40      	cmp	r3, #64	; 0x40
 80015c4:	d112      	bne.n	80015ec <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015ce:	69db      	ldr	r3, [r3, #28]
 80015d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015d4:	2b40      	cmp	r3, #64	; 0x40
 80015d6:	d109      	bne.n	80015ec <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015e0:	461a      	mov	r2, r3
 80015e2:	4b50      	ldr	r3, [pc, #320]	; (8001724 <HAL_ETH_IRQHandler+0x178>)
 80015e4:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f003 fff2 	bl	80055d0 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015f4:	695b      	ldr	r3, [r3, #20]
 80015f6:	f003 0301 	and.w	r3, r3, #1
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	d113      	bne.n	8001626 <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001606:	69db      	ldr	r3, [r3, #28]
 8001608:	f003 0301 	and.w	r3, r3, #1
 800160c:	2b01      	cmp	r3, #1
 800160e:	d10a      	bne.n	8001626 <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001618:	461a      	mov	r2, r3
 800161a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 800161e:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f003 ffe5 	bl	80055f0 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800162e:	695b      	ldr	r3, [r3, #20]
 8001630:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001634:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001638:	d14c      	bne.n	80016d4 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001642:	69db      	ldr	r3, [r3, #28]
 8001644:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001648:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800164c:	d142      	bne.n	80016d4 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001654:	f043 0208 	orr.w	r2, r3, #8
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001666:	695b      	ldr	r3, [r3, #20]
 8001668:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800166c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001670:	d11a      	bne.n	80016a8 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800167a:	695a      	ldr	r2, [r3, #20]
 800167c:	4b2a      	ldr	r3, [pc, #168]	; (8001728 <HAL_ETH_IRQHandler+0x17c>)
 800167e:	4013      	ands	r3, r2
 8001680:	687a      	ldr	r2, [r7, #4]
 8001682:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800168e:	69db      	ldr	r3, [r3, #28]
 8001690:	687a      	ldr	r2, [r7, #4]
 8001692:	6812      	ldr	r2, [r2, #0]
 8001694:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8001698:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800169c:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	22e0      	movs	r2, #224	; 0xe0
 80016a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80016a6:	e012      	b.n	80016ce <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016b0:	695a      	ldr	r2, [r3, #20]
 80016b2:	f248 6380 	movw	r3, #34432	; 0x8680
 80016b6:	4013      	ands	r3, r2
 80016b8:	687a      	ldr	r2, [r7, #4]
 80016ba:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016c6:	461a      	mov	r2, r3
 80016c8:	f248 6380 	movw	r3, #34432	; 0x8680
 80016cc:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f003 ff9e 	bl	8005610 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016da:	f003 0308 	and.w	r3, r3, #8
 80016de:	2b08      	cmp	r3, #8
 80016e0:	d10e      	bne.n	8001700 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e8:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	f000 f81c 	bl	8001730 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2200      	movs	r2, #0
 80016fc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8001700:	4b0a      	ldr	r3, [pc, #40]	; (800172c <HAL_ETH_IRQHandler+0x180>)
 8001702:	695b      	ldr	r3, [r3, #20]
 8001704:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001708:	2b00      	cmp	r3, #0
 800170a:	d006      	beq.n	800171a <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 800170c:	4b07      	ldr	r3, [pc, #28]	; (800172c <HAL_ETH_IRQHandler+0x180>)
 800170e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001712:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f000 f814 	bl	8001742 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 800171a:	bf00      	nop
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	00010040 	.word	0x00010040
 8001728:	007e2000 	.word	0x007e2000
 800172c:	40013c00 	.word	0x40013c00

08001730 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8001738:	bf00      	nop
 800173a:	370c      	adds	r7, #12
 800173c:	46bd      	mov	sp, r7
 800173e:	bc80      	pop	{r7}
 8001740:	4770      	bx	lr

08001742 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8001742:	b480      	push	{r7}
 8001744:	b083      	sub	sp, #12
 8001746:	af00      	add	r7, sp, #0
 8001748:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 800174a:	bf00      	nop
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	bc80      	pop	{r7}
 8001752:	4770      	bx	lr

08001754 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 8001762:	4618      	mov	r0, r3
 8001764:	370c      	adds	r7, #12
 8001766:	46bd      	mov	sp, r7
 8001768:	bc80      	pop	{r7}
 800176a:	4770      	bx	lr

0800176c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800177e:	68fa      	ldr	r2, [r7, #12]
 8001780:	4b47      	ldr	r3, [pc, #284]	; (80018a0 <ETH_SetMACConfig+0x134>)
 8001782:	4013      	ands	r3, r2
 8001784:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	7c1b      	ldrb	r3, [r3, #16]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d102      	bne.n	8001794 <ETH_SetMACConfig+0x28>
 800178e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001792:	e000      	b.n	8001796 <ETH_SetMACConfig+0x2a>
 8001794:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	7c5b      	ldrb	r3, [r3, #17]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d102      	bne.n	80017a4 <ETH_SetMACConfig+0x38>
 800179e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017a2:	e000      	b.n	80017a6 <ETH_SetMACConfig+0x3a>
 80017a4:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80017a6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80017ac:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	7fdb      	ldrb	r3, [r3, #31]
 80017b2:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80017b4:	431a      	orrs	r2, r3
                        macconf->Speed |
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80017ba:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80017bc:	683a      	ldr	r2, [r7, #0]
 80017be:	7f92      	ldrb	r2, [r2, #30]
 80017c0:	2a00      	cmp	r2, #0
 80017c2:	d102      	bne.n	80017ca <ETH_SetMACConfig+0x5e>
 80017c4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017c8:	e000      	b.n	80017cc <ETH_SetMACConfig+0x60>
 80017ca:	2200      	movs	r2, #0
                        macconf->Speed |
 80017cc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	7f1b      	ldrb	r3, [r3, #28]
 80017d2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80017d4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80017da:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	791b      	ldrb	r3, [r3, #4]
 80017e0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80017e2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80017e4:	683a      	ldr	r2, [r7, #0]
 80017e6:	f892 2020 	ldrb.w	r2, [r2, #32]
 80017ea:	2a00      	cmp	r2, #0
 80017ec:	d102      	bne.n	80017f4 <ETH_SetMACConfig+0x88>
 80017ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017f2:	e000      	b.n	80017f6 <ETH_SetMACConfig+0x8a>
 80017f4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80017f6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	7bdb      	ldrb	r3, [r3, #15]
 80017fc:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80017fe:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001804:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800180c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800180e:	4313      	orrs	r3, r2
 8001810:	68fa      	ldr	r2, [r7, #12]
 8001812:	4313      	orrs	r3, r2
 8001814:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	68fa      	ldr	r2, [r7, #12]
 800181c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001826:	2001      	movs	r0, #1
 8001828:	f7ff fb1a 	bl	8000e60 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	68fa      	ldr	r2, [r7, #12]
 8001832:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	699b      	ldr	r3, [r3, #24]
 800183a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800183c:	68fa      	ldr	r2, [r7, #12]
 800183e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001842:	4013      	ands	r3, r2
 8001844:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800184a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->ZeroQuantaPause |
 800184c:	683a      	ldr	r2, [r7, #0]
 800184e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001852:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        (uint32_t)macconf->ZeroQuantaPause |
 8001858:	4313      	orrs	r3, r2
                        (uint32_t)macconf->UnicastSlowProtocolPacketDetect |
 800185a:	683a      	ldr	r2, [r7, #0]
 800185c:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
                        macconf->PauseLowThreshold |
 8001860:	4313      	orrs	r3, r2
                        (uint32_t)macconf->ReceiveFlowControl |
 8001862:	683a      	ldr	r2, [r7, #0]
 8001864:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
                        (uint32_t)macconf->UnicastSlowProtocolPacketDetect |
 8001868:	4313      	orrs	r3, r2
                        (uint32_t)macconf->TransmitFlowControl);
 800186a:	683a      	ldr	r2, [r7, #0]
 800186c:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001870:	4313      	orrs	r3, r2
 8001872:	68fa      	ldr	r2, [r7, #12]
 8001874:	4313      	orrs	r3, r2
 8001876:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	68fa      	ldr	r2, [r7, #12]
 800187e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	699b      	ldr	r3, [r3, #24]
 8001886:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001888:	2001      	movs	r0, #1
 800188a:	f7ff fae9 	bl	8000e60 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	68fa      	ldr	r2, [r7, #12]
 8001894:	619a      	str	r2, [r3, #24]
}
 8001896:	bf00      	nop
 8001898:	3710      	adds	r7, #16
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	ff20810f 	.word	0xff20810f

080018a4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018b6:	699b      	ldr	r3, [r3, #24]
 80018b8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80018ba:	68fa      	ldr	r2, [r7, #12]
 80018bc:	4b3d      	ldr	r3, [pc, #244]	; (80019b4 <ETH_SetDMAConfig+0x110>)
 80018be:	4013      	ands	r3, r2
 80018c0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	7b1b      	ldrb	r3, [r3, #12]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d102      	bne.n	80018d0 <ETH_SetDMAConfig+0x2c>
 80018ca:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80018ce:	e000      	b.n	80018d2 <ETH_SetDMAConfig+0x2e>
 80018d0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	7b5b      	ldrb	r3, [r3, #13]
 80018d6:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80018d8:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80018da:	683a      	ldr	r2, [r7, #0]
 80018dc:	7f52      	ldrb	r2, [r2, #29]
 80018de:	2a00      	cmp	r2, #0
 80018e0:	d102      	bne.n	80018e8 <ETH_SetDMAConfig+0x44>
 80018e2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80018e6:	e000      	b.n	80018ea <ETH_SetDMAConfig+0x46>
 80018e8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80018ea:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	7b9b      	ldrb	r3, [r3, #14]
 80018f0:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80018f2:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80018f8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	7f1b      	ldrb	r3, [r3, #28]
 80018fe:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001900:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	7f9b      	ldrb	r3, [r3, #30]
 8001906:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001908:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800190e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001916:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001918:	4313      	orrs	r3, r2
 800191a:	68fa      	ldr	r2, [r7, #12]
 800191c:	4313      	orrs	r3, r2
 800191e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001928:	461a      	mov	r2, r3
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001936:	699b      	ldr	r3, [r3, #24]
 8001938:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800193a:	2001      	movs	r0, #1
 800193c:	f7ff fa90 	bl	8000e60 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001948:	461a      	mov	r2, r3
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	791b      	ldrb	r3, [r3, #4]
 8001952:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001958:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800195e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001964:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800196c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800196e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001974:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001976:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800197c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	6812      	ldr	r2, [r2, #0]
 8001982:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001986:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800198a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001998:	2001      	movs	r0, #1
 800199a:	f7ff fa61 	bl	8000e60 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019a6:	461a      	mov	r2, r3
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	6013      	str	r3, [r2, #0]
}
 80019ac:	bf00      	nop
 80019ae:	3710      	adds	r7, #16
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	f8de3f23 	.word	0xf8de3f23

080019b8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b0a6      	sub	sp, #152	; 0x98
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80019c0:	2301      	movs	r3, #1
 80019c2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80019c6:	2301      	movs	r3, #1
 80019c8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80019cc:	2300      	movs	r3, #0
 80019ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80019d0:	2300      	movs	r3, #0
 80019d2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80019d6:	2301      	movs	r3, #1
 80019d8:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80019dc:	2300      	movs	r3, #0
 80019de:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80019e2:	2301      	movs	r3, #1
 80019e4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80019e8:	2300      	movs	r3, #0
 80019ea:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80019ee:	2300      	movs	r3, #0
 80019f0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80019f4:	2300      	movs	r3, #0
 80019f6:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80019f8:	2300      	movs	r3, #0
 80019fa:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80019fe:	2300      	movs	r3, #0
 8001a00:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001a02:	2300      	movs	r3, #0
 8001a04:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001a14:	2300      	movs	r3, #0
 8001a16:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001a1a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a1e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001a20:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a24:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001a26:	2300      	movs	r3, #0
 8001a28:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001a2c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a30:	4619      	mov	r1, r3
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f7ff fe9a 	bl	800176c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001a40:	2301      	movs	r3, #1
 8001a42:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001a46:	2301      	movs	r3, #1
 8001a48:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001a54:	2300      	movs	r3, #0
 8001a56:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001a64:	2301      	movs	r3, #1
 8001a66:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001a68:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a6c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001a6e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a72:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001a74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a78:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001a80:	2300      	movs	r3, #0
 8001a82:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001a84:	2300      	movs	r3, #0
 8001a86:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001a88:	f107 0308 	add.w	r3, r7, #8
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f7ff ff08 	bl	80018a4 <ETH_SetDMAConfig>
}
 8001a94:	bf00      	nop
 8001a96:	3798      	adds	r7, #152	; 0x98
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b087      	sub	sp, #28
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	60f8      	str	r0, [r7, #12]
 8001aa4:	60b9      	str	r1, [r7, #8]
 8001aa6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	3305      	adds	r3, #5
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	021b      	lsls	r3, r3, #8
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	3204      	adds	r2, #4
 8001ab4:	7812      	ldrb	r2, [r2, #0]
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001aba:	68ba      	ldr	r2, [r7, #8]
 8001abc:	4b10      	ldr	r3, [pc, #64]	; (8001b00 <ETH_MACAddressConfig+0x64>)
 8001abe:	4413      	add	r3, r2
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	3303      	adds	r3, #3
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	061a      	lsls	r2, r3, #24
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	3302      	adds	r3, #2
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	041b      	lsls	r3, r3, #16
 8001ad6:	431a      	orrs	r2, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	3301      	adds	r3, #1
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	021b      	lsls	r3, r3, #8
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	687a      	ldr	r2, [r7, #4]
 8001ae4:	7812      	ldrb	r2, [r2, #0]
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001aea:	68ba      	ldr	r2, [r7, #8]
 8001aec:	4b05      	ldr	r3, [pc, #20]	; (8001b04 <ETH_MACAddressConfig+0x68>)
 8001aee:	4413      	add	r3, r2
 8001af0:	461a      	mov	r2, r3
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	6013      	str	r3, [r2, #0]
}
 8001af6:	bf00      	nop
 8001af8:	371c      	adds	r7, #28
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bc80      	pop	{r7}
 8001afe:	4770      	bx	lr
 8001b00:	40028040 	.word	0x40028040
 8001b04:	40028044 	.word	0x40028044

08001b08 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b085      	sub	sp, #20
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001b10:	2300      	movs	r3, #0
 8001b12:	60fb      	str	r3, [r7, #12]
 8001b14:	e03e      	b.n	8001b94 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	68d9      	ldr	r1, [r3, #12]
 8001b1a:	68fa      	ldr	r2, [r7, #12]
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	4413      	add	r3, r2
 8001b22:	00db      	lsls	r3, r3, #3
 8001b24:	440b      	add	r3, r1
 8001b26:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	2200      	movs	r2, #0
 8001b32:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	2200      	movs	r2, #0
 8001b38:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001b40:	68b9      	ldr	r1, [r7, #8]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	68fa      	ldr	r2, [r7, #12]
 8001b46:	3206      	adds	r2, #6
 8001b48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d80c      	bhi.n	8001b78 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	68d9      	ldr	r1, [r3, #12]
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	1c5a      	adds	r2, r3, #1
 8001b66:	4613      	mov	r3, r2
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	4413      	add	r3, r2
 8001b6c:	00db      	lsls	r3, r3, #3
 8001b6e:	440b      	add	r3, r1
 8001b70:	461a      	mov	r2, r3
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	60da      	str	r2, [r3, #12]
 8001b76:	e004      	b.n	8001b82 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	3301      	adds	r3, #1
 8001b92:	60fb      	str	r3, [r7, #12]
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	2b03      	cmp	r3, #3
 8001b98:	d9bd      	bls.n	8001b16 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	68da      	ldr	r2, [r3, #12]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bac:	611a      	str	r2, [r3, #16]
}
 8001bae:	bf00      	nop
 8001bb0:	3714      	adds	r7, #20
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bc80      	pop	{r7}
 8001bb6:	4770      	bx	lr

08001bb8 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b085      	sub	sp, #20
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	60fb      	str	r3, [r7, #12]
 8001bc4:	e046      	b.n	8001c54 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6919      	ldr	r1, [r3, #16]
 8001bca:	68fa      	ldr	r2, [r7, #12]
 8001bcc:	4613      	mov	r3, r2
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	4413      	add	r3, r2
 8001bd2:	00db      	lsls	r3, r3, #3
 8001bd4:	440b      	add	r3, r1
 8001bd6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	2200      	movs	r2, #0
 8001be2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	2200      	movs	r2, #0
 8001be8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	2200      	movs	r2, #0
 8001bee:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001c02:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8001c0a:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001c18:	68b9      	ldr	r1, [r7, #8]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	68fa      	ldr	r2, [r7, #12]
 8001c1e:	3212      	adds	r2, #18
 8001c20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d80c      	bhi.n	8001c44 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6919      	ldr	r1, [r3, #16]
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	1c5a      	adds	r2, r3, #1
 8001c32:	4613      	mov	r3, r2
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	4413      	add	r3, r2
 8001c38:	00db      	lsls	r3, r3, #3
 8001c3a:	440b      	add	r3, r1
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	60da      	str	r2, [r3, #12]
 8001c42:	e004      	b.n	8001c4e <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	691b      	ldr	r3, [r3, #16]
 8001c48:	461a      	mov	r2, r3
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	3301      	adds	r3, #1
 8001c52:	60fb      	str	r3, [r7, #12]
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	2b03      	cmp	r3, #3
 8001c58:	d9b5      	bls.n	8001bc6 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2200      	movs	r2, #0
 8001c64:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2200      	movs	r2, #0
 8001c76:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	691a      	ldr	r2, [r3, #16]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c84:	60da      	str	r2, [r3, #12]
}
 8001c86:	bf00      	nop
 8001c88:	3714      	adds	r7, #20
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bc80      	pop	{r7}
 8001c8e:	4770      	bx	lr

08001c90 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b08d      	sub	sp, #52	; 0x34
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	60f8      	str	r0, [r7, #12]
 8001c98:	60b9      	str	r1, [r7, #8]
 8001c9a:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	3318      	adds	r3, #24
 8001ca0:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	691b      	ldr	r3, [r3, #16]
 8001ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	691b      	ldr	r3, [r3, #16]
 8001cac:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001cb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cba:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8001cc6:	6a3b      	ldr	r3, [r7, #32]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001cce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001cd2:	d007      	beq.n	8001ce4 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8001cd4:	697a      	ldr	r2, [r7, #20]
 8001cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cd8:	3304      	adds	r3, #4
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	4413      	add	r3, r2
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d001      	beq.n	8001ce8 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	e103      	b.n	8001ef0 <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 8001ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cea:	3301      	adds	r3, #1
 8001cec:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	6a3b      	ldr	r3, [r7, #32]
 8001cf6:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8001cf8:	6a3b      	ldr	r3, [r7, #32]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8001d00:	f023 031f 	bic.w	r3, r3, #31
 8001d04:	69fa      	ldr	r2, [r7, #28]
 8001d06:	6852      	ldr	r2, [r2, #4]
 8001d08:	431a      	orrs	r2, r3
 8001d0a:	6a3b      	ldr	r3, [r7, #32]
 8001d0c:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 0301 	and.w	r3, r3, #1
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d008      	beq.n	8001d2c <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8001d1a:	6a3b      	ldr	r3, [r7, #32]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	695b      	ldr	r3, [r3, #20]
 8001d26:	431a      	orrs	r2, r3
 8001d28:	6a3b      	ldr	r3, [r7, #32]
 8001d2a:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0320 	and.w	r3, r3, #32
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d008      	beq.n	8001d4a <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8001d38:	6a3b      	ldr	r3, [r7, #32]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	691b      	ldr	r3, [r3, #16]
 8001d44:	431a      	orrs	r2, r3
 8001d46:	6a3b      	ldr	r3, [r7, #32]
 8001d48:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0304 	and.w	r3, r3, #4
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d005      	beq.n	8001d62 <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8001d56:	6a3b      	ldr	r3, [r7, #32]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001d5e:	6a3b      	ldr	r3, [r7, #32]
 8001d60:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8001d62:	6a3b      	ldr	r3, [r7, #32]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001d6a:	6a3b      	ldr	r3, [r7, #32]
 8001d6c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8001d6e:	f3bf 8f5f 	dmb	sy
}
 8001d72:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8001d74:	6a3b      	ldr	r3, [r7, #32]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001d7c:	6a3b      	ldr	r3, [r7, #32]
 8001d7e:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8001d80:	e084      	b.n	8001e8c <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8001d82:	6a3b      	ldr	r3, [r7, #32]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8001d8a:	6a3b      	ldr	r3, [r7, #32]
 8001d8c:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d006      	beq.n	8001da2 <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8001d94:	6a3b      	ldr	r3, [r7, #32]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8001d9c:	6a3b      	ldr	r3, [r7, #32]
 8001d9e:	601a      	str	r2, [r3, #0]
 8001da0:	e005      	b.n	8001dae <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8001da2:	6a3b      	ldr	r3, [r7, #32]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8001daa:	6a3b      	ldr	r3, [r7, #32]
 8001dac:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8001dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001db0:	3301      	adds	r3, #1
 8001db2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001db6:	2b03      	cmp	r3, #3
 8001db8:	d902      	bls.n	8001dc0 <ETH_Prepare_Tx_Descriptors+0x130>
 8001dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dbc:	3b04      	subs	r3, #4
 8001dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001dc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dc8:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8001dca:	6a3b      	ldr	r3, [r7, #32]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001dd2:	6a3b      	ldr	r3, [r7, #32]
 8001dd4:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8001dd6:	6a3b      	ldr	r3, [r7, #32]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001dde:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001de2:	d007      	beq.n	8001df4 <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8001de4:	697a      	ldr	r2, [r7, #20]
 8001de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001de8:	3304      	adds	r3, #4
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	4413      	add	r3, r2
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d029      	beq.n	8001e48 <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001dfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e00:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8001e02:	2300      	movs	r3, #0
 8001e04:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e06:	e019      	b.n	8001e3c <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 8001e08:	f3bf 8f5f 	dmb	sy
}
 8001e0c:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8001e0e:	6a3b      	ldr	r3, [r7, #32]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001e16:	6a3b      	ldr	r3, [r7, #32]
 8001e18:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8001e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e22:	2b03      	cmp	r3, #3
 8001e24:	d902      	bls.n	8001e2c <ETH_Prepare_Tx_Descriptors+0x19c>
 8001e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e28:	3b04      	subs	r3, #4
 8001e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e34:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8001e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e38:	3301      	adds	r3, #1
 8001e3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d3e1      	bcc.n	8001e08 <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 8001e44:	2302      	movs	r3, #2
 8001e46:	e053      	b.n	8001ef0 <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 8001e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	461a      	mov	r2, r3
 8001e5a:	6a3b      	ldr	r3, [r7, #32]
 8001e5c:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8001e5e:	6a3b      	ldr	r3, [r7, #32]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8001e66:	f023 031f 	bic.w	r3, r3, #31
 8001e6a:	69fa      	ldr	r2, [r7, #28]
 8001e6c:	6852      	ldr	r2, [r2, #4]
 8001e6e:	431a      	orrs	r2, r3
 8001e70:	6a3b      	ldr	r3, [r7, #32]
 8001e72:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8001e74:	69bb      	ldr	r3, [r7, #24]
 8001e76:	3301      	adds	r3, #1
 8001e78:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8001e7a:	f3bf 8f5f 	dmb	sy
}
 8001e7e:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8001e80:	6a3b      	ldr	r3, [r7, #32]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001e88:	6a3b      	ldr	r3, [r7, #32]
 8001e8a:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	f47f af76 	bne.w	8001d82 <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d006      	beq.n	8001eaa <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8001e9c:	6a3b      	ldr	r3, [r7, #32]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8001ea4:	6a3b      	ldr	r3, [r7, #32]
 8001ea6:	601a      	str	r2, [r3, #0]
 8001ea8:	e005      	b.n	8001eb6 <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8001eaa:	6a3b      	ldr	r3, [r7, #32]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8001eb2:	6a3b      	ldr	r3, [r7, #32]
 8001eb4:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8001eb6:	6a3b      	ldr	r3, [r7, #32]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8001ebe:	6a3b      	ldr	r3, [r7, #32]
 8001ec0:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ec6:	6979      	ldr	r1, [r7, #20]
 8001ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eca:	3304      	adds	r3, #4
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	440b      	add	r3, r1
 8001ed0:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ed6:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8001ed8:	b672      	cpsid	i
}
 8001eda:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ee0:	69bb      	ldr	r3, [r7, #24]
 8001ee2:	4413      	add	r3, r2
 8001ee4:	1c5a      	adds	r2, r3, #1
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8001eea:	b662      	cpsie	i
}
 8001eec:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8001eee:	2300      	movs	r3, #0
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3734      	adds	r7, #52	; 0x34
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bc80      	pop	{r7}
 8001ef8:	4770      	bx	lr
	...

08001efc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b089      	sub	sp, #36	; 0x24
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
 8001f04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f06:	2300      	movs	r3, #0
 8001f08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f12:	2300      	movs	r3, #0
 8001f14:	61fb      	str	r3, [r7, #28]
 8001f16:	e16b      	b.n	80021f0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f18:	2201      	movs	r2, #1
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	697a      	ldr	r2, [r7, #20]
 8001f28:	4013      	ands	r3, r2
 8001f2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f2c:	693a      	ldr	r2, [r7, #16]
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	f040 815a 	bne.w	80021ea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f003 0303 	and.w	r3, r3, #3
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d005      	beq.n	8001f4e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d130      	bne.n	8001fb0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	2203      	movs	r2, #3
 8001f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5e:	43db      	mvns	r3, r3
 8001f60:	69ba      	ldr	r2, [r7, #24]
 8001f62:	4013      	ands	r3, r2
 8001f64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	68da      	ldr	r2, [r3, #12]
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	005b      	lsls	r3, r3, #1
 8001f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f72:	69ba      	ldr	r2, [r7, #24]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	69ba      	ldr	r2, [r7, #24]
 8001f7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f84:	2201      	movs	r2, #1
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8c:	43db      	mvns	r3, r3
 8001f8e:	69ba      	ldr	r2, [r7, #24]
 8001f90:	4013      	ands	r3, r2
 8001f92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	091b      	lsrs	r3, r3, #4
 8001f9a:	f003 0201 	and.w	r2, r3, #1
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f003 0303 	and.w	r3, r3, #3
 8001fb8:	2b03      	cmp	r3, #3
 8001fba:	d017      	beq.n	8001fec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	005b      	lsls	r3, r3, #1
 8001fc6:	2203      	movs	r2, #3
 8001fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fcc:	43db      	mvns	r3, r3
 8001fce:	69ba      	ldr	r2, [r7, #24]
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	689a      	ldr	r2, [r3, #8]
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	005b      	lsls	r3, r3, #1
 8001fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe0:	69ba      	ldr	r2, [r7, #24]
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	69ba      	ldr	r2, [r7, #24]
 8001fea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f003 0303 	and.w	r3, r3, #3
 8001ff4:	2b02      	cmp	r3, #2
 8001ff6:	d123      	bne.n	8002040 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	08da      	lsrs	r2, r3, #3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	3208      	adds	r2, #8
 8002000:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002004:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	f003 0307 	and.w	r3, r3, #7
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	220f      	movs	r2, #15
 8002010:	fa02 f303 	lsl.w	r3, r2, r3
 8002014:	43db      	mvns	r3, r3
 8002016:	69ba      	ldr	r2, [r7, #24]
 8002018:	4013      	ands	r3, r2
 800201a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	691a      	ldr	r2, [r3, #16]
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	f003 0307 	and.w	r3, r3, #7
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	fa02 f303 	lsl.w	r3, r2, r3
 800202c:	69ba      	ldr	r2, [r7, #24]
 800202e:	4313      	orrs	r3, r2
 8002030:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	08da      	lsrs	r2, r3, #3
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	3208      	adds	r2, #8
 800203a:	69b9      	ldr	r1, [r7, #24]
 800203c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	005b      	lsls	r3, r3, #1
 800204a:	2203      	movs	r2, #3
 800204c:	fa02 f303 	lsl.w	r3, r2, r3
 8002050:	43db      	mvns	r3, r3
 8002052:	69ba      	ldr	r2, [r7, #24]
 8002054:	4013      	ands	r3, r2
 8002056:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f003 0203 	and.w	r2, r3, #3
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	005b      	lsls	r3, r3, #1
 8002064:	fa02 f303 	lsl.w	r3, r2, r3
 8002068:	69ba      	ldr	r2, [r7, #24]
 800206a:	4313      	orrs	r3, r2
 800206c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	69ba      	ldr	r2, [r7, #24]
 8002072:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800207c:	2b00      	cmp	r3, #0
 800207e:	f000 80b4 	beq.w	80021ea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002082:	2300      	movs	r3, #0
 8002084:	60fb      	str	r3, [r7, #12]
 8002086:	4b5f      	ldr	r3, [pc, #380]	; (8002204 <HAL_GPIO_Init+0x308>)
 8002088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800208a:	4a5e      	ldr	r2, [pc, #376]	; (8002204 <HAL_GPIO_Init+0x308>)
 800208c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002090:	6453      	str	r3, [r2, #68]	; 0x44
 8002092:	4b5c      	ldr	r3, [pc, #368]	; (8002204 <HAL_GPIO_Init+0x308>)
 8002094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002096:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800209a:	60fb      	str	r3, [r7, #12]
 800209c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800209e:	4a5a      	ldr	r2, [pc, #360]	; (8002208 <HAL_GPIO_Init+0x30c>)
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	089b      	lsrs	r3, r3, #2
 80020a4:	3302      	adds	r3, #2
 80020a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	f003 0303 	and.w	r3, r3, #3
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	220f      	movs	r2, #15
 80020b6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ba:	43db      	mvns	r3, r3
 80020bc:	69ba      	ldr	r2, [r7, #24]
 80020be:	4013      	ands	r3, r2
 80020c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a51      	ldr	r2, [pc, #324]	; (800220c <HAL_GPIO_Init+0x310>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d02b      	beq.n	8002122 <HAL_GPIO_Init+0x226>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a50      	ldr	r2, [pc, #320]	; (8002210 <HAL_GPIO_Init+0x314>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d025      	beq.n	800211e <HAL_GPIO_Init+0x222>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a4f      	ldr	r2, [pc, #316]	; (8002214 <HAL_GPIO_Init+0x318>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d01f      	beq.n	800211a <HAL_GPIO_Init+0x21e>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a4e      	ldr	r2, [pc, #312]	; (8002218 <HAL_GPIO_Init+0x31c>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d019      	beq.n	8002116 <HAL_GPIO_Init+0x21a>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a4d      	ldr	r2, [pc, #308]	; (800221c <HAL_GPIO_Init+0x320>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d013      	beq.n	8002112 <HAL_GPIO_Init+0x216>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a4c      	ldr	r2, [pc, #304]	; (8002220 <HAL_GPIO_Init+0x324>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d00d      	beq.n	800210e <HAL_GPIO_Init+0x212>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a4b      	ldr	r2, [pc, #300]	; (8002224 <HAL_GPIO_Init+0x328>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d007      	beq.n	800210a <HAL_GPIO_Init+0x20e>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a4a      	ldr	r2, [pc, #296]	; (8002228 <HAL_GPIO_Init+0x32c>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d101      	bne.n	8002106 <HAL_GPIO_Init+0x20a>
 8002102:	2307      	movs	r3, #7
 8002104:	e00e      	b.n	8002124 <HAL_GPIO_Init+0x228>
 8002106:	2308      	movs	r3, #8
 8002108:	e00c      	b.n	8002124 <HAL_GPIO_Init+0x228>
 800210a:	2306      	movs	r3, #6
 800210c:	e00a      	b.n	8002124 <HAL_GPIO_Init+0x228>
 800210e:	2305      	movs	r3, #5
 8002110:	e008      	b.n	8002124 <HAL_GPIO_Init+0x228>
 8002112:	2304      	movs	r3, #4
 8002114:	e006      	b.n	8002124 <HAL_GPIO_Init+0x228>
 8002116:	2303      	movs	r3, #3
 8002118:	e004      	b.n	8002124 <HAL_GPIO_Init+0x228>
 800211a:	2302      	movs	r3, #2
 800211c:	e002      	b.n	8002124 <HAL_GPIO_Init+0x228>
 800211e:	2301      	movs	r3, #1
 8002120:	e000      	b.n	8002124 <HAL_GPIO_Init+0x228>
 8002122:	2300      	movs	r3, #0
 8002124:	69fa      	ldr	r2, [r7, #28]
 8002126:	f002 0203 	and.w	r2, r2, #3
 800212a:	0092      	lsls	r2, r2, #2
 800212c:	4093      	lsls	r3, r2
 800212e:	69ba      	ldr	r2, [r7, #24]
 8002130:	4313      	orrs	r3, r2
 8002132:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002134:	4934      	ldr	r1, [pc, #208]	; (8002208 <HAL_GPIO_Init+0x30c>)
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	089b      	lsrs	r3, r3, #2
 800213a:	3302      	adds	r3, #2
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002142:	4b3a      	ldr	r3, [pc, #232]	; (800222c <HAL_GPIO_Init+0x330>)
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	43db      	mvns	r3, r3
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	4013      	ands	r3, r2
 8002150:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d003      	beq.n	8002166 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800215e:	69ba      	ldr	r2, [r7, #24]
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	4313      	orrs	r3, r2
 8002164:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002166:	4a31      	ldr	r2, [pc, #196]	; (800222c <HAL_GPIO_Init+0x330>)
 8002168:	69bb      	ldr	r3, [r7, #24]
 800216a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800216c:	4b2f      	ldr	r3, [pc, #188]	; (800222c <HAL_GPIO_Init+0x330>)
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	43db      	mvns	r3, r3
 8002176:	69ba      	ldr	r2, [r7, #24]
 8002178:	4013      	ands	r3, r2
 800217a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002184:	2b00      	cmp	r3, #0
 8002186:	d003      	beq.n	8002190 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002188:	69ba      	ldr	r2, [r7, #24]
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	4313      	orrs	r3, r2
 800218e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002190:	4a26      	ldr	r2, [pc, #152]	; (800222c <HAL_GPIO_Init+0x330>)
 8002192:	69bb      	ldr	r3, [r7, #24]
 8002194:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002196:	4b25      	ldr	r3, [pc, #148]	; (800222c <HAL_GPIO_Init+0x330>)
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	43db      	mvns	r3, r3
 80021a0:	69ba      	ldr	r2, [r7, #24]
 80021a2:	4013      	ands	r3, r2
 80021a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d003      	beq.n	80021ba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80021b2:	69ba      	ldr	r2, [r7, #24]
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021ba:	4a1c      	ldr	r2, [pc, #112]	; (800222c <HAL_GPIO_Init+0x330>)
 80021bc:	69bb      	ldr	r3, [r7, #24]
 80021be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021c0:	4b1a      	ldr	r3, [pc, #104]	; (800222c <HAL_GPIO_Init+0x330>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	43db      	mvns	r3, r3
 80021ca:	69ba      	ldr	r2, [r7, #24]
 80021cc:	4013      	ands	r3, r2
 80021ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d003      	beq.n	80021e4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80021dc:	69ba      	ldr	r2, [r7, #24]
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021e4:	4a11      	ldr	r2, [pc, #68]	; (800222c <HAL_GPIO_Init+0x330>)
 80021e6:	69bb      	ldr	r3, [r7, #24]
 80021e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	3301      	adds	r3, #1
 80021ee:	61fb      	str	r3, [r7, #28]
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	2b0f      	cmp	r3, #15
 80021f4:	f67f ae90 	bls.w	8001f18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021f8:	bf00      	nop
 80021fa:	bf00      	nop
 80021fc:	3724      	adds	r7, #36	; 0x24
 80021fe:	46bd      	mov	sp, r7
 8002200:	bc80      	pop	{r7}
 8002202:	4770      	bx	lr
 8002204:	40023800 	.word	0x40023800
 8002208:	40013800 	.word	0x40013800
 800220c:	40020000 	.word	0x40020000
 8002210:	40020400 	.word	0x40020400
 8002214:	40020800 	.word	0x40020800
 8002218:	40020c00 	.word	0x40020c00
 800221c:	40021000 	.word	0x40021000
 8002220:	40021400 	.word	0x40021400
 8002224:	40021800 	.word	0x40021800
 8002228:	40021c00 	.word	0x40021c00
 800222c:	40013c00 	.word	0x40013c00

08002230 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	460b      	mov	r3, r1
 800223a:	807b      	strh	r3, [r7, #2]
 800223c:	4613      	mov	r3, r2
 800223e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002240:	787b      	ldrb	r3, [r7, #1]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d003      	beq.n	800224e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002246:	887a      	ldrh	r2, [r7, #2]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800224c:	e003      	b.n	8002256 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800224e:	887b      	ldrh	r3, [r7, #2]
 8002250:	041a      	lsls	r2, r3, #16
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	619a      	str	r2, [r3, #24]
}
 8002256:	bf00      	nop
 8002258:	370c      	adds	r7, #12
 800225a:	46bd      	mov	sp, r7
 800225c:	bc80      	pop	{r7}
 800225e:	4770      	bx	lr

08002260 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	4603      	mov	r3, r0
 8002268:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800226a:	4b08      	ldr	r3, [pc, #32]	; (800228c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800226c:	695a      	ldr	r2, [r3, #20]
 800226e:	88fb      	ldrh	r3, [r7, #6]
 8002270:	4013      	ands	r3, r2
 8002272:	2b00      	cmp	r3, #0
 8002274:	d006      	beq.n	8002284 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002276:	4a05      	ldr	r2, [pc, #20]	; (800228c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002278:	88fb      	ldrh	r3, [r7, #6]
 800227a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800227c:	88fb      	ldrh	r3, [r7, #6]
 800227e:	4618      	mov	r0, r3
 8002280:	f000 f806 	bl	8002290 <HAL_GPIO_EXTI_Callback>
  }
}
 8002284:	bf00      	nop
 8002286:	3708      	adds	r7, #8
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	40013c00 	.word	0x40013c00

08002290 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	4603      	mov	r3, r0
 8002298:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800229a:	bf00      	nop
 800229c:	370c      	adds	r7, #12
 800229e:	46bd      	mov	sp, r7
 80022a0:	bc80      	pop	{r7}
 80022a2:	4770      	bx	lr

080022a4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80022a4:	b590      	push	{r4, r7, lr}
 80022a6:	b08d      	sub	sp, #52	; 0x34
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022b2:	6a3b      	ldr	r3, [r7, #32]
 80022b4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4618      	mov	r0, r3
 80022bc:	f002 ffad 	bl	800521a <USB_GetMode>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	f040 848a 	bne.w	8002bdc <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4618      	mov	r0, r3
 80022ce:	f002 ff16 	bl	80050fe <USB_ReadInterrupts>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	f000 8480 	beq.w	8002bda <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	0a1b      	lsrs	r3, r3, #8
 80022e4:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4618      	mov	r0, r3
 80022f4:	f002 ff03 	bl	80050fe <USB_ReadInterrupts>
 80022f8:	4603      	mov	r3, r0
 80022fa:	f003 0302 	and.w	r3, r3, #2
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d107      	bne.n	8002312 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	695a      	ldr	r2, [r3, #20]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f002 0202 	and.w	r2, r2, #2
 8002310:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4618      	mov	r0, r3
 8002318:	f002 fef1 	bl	80050fe <USB_ReadInterrupts>
 800231c:	4603      	mov	r3, r0
 800231e:	f003 0310 	and.w	r3, r3, #16
 8002322:	2b10      	cmp	r3, #16
 8002324:	d161      	bne.n	80023ea <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	699a      	ldr	r2, [r3, #24]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f022 0210 	bic.w	r2, r2, #16
 8002334:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002336:	6a3b      	ldr	r3, [r7, #32]
 8002338:	6a1b      	ldr	r3, [r3, #32]
 800233a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800233c:	69bb      	ldr	r3, [r7, #24]
 800233e:	f003 020f 	and.w	r2, r3, #15
 8002342:	4613      	mov	r3, r2
 8002344:	00db      	lsls	r3, r3, #3
 8002346:	4413      	add	r3, r2
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	4413      	add	r3, r2
 8002352:	3304      	adds	r3, #4
 8002354:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002356:	69bb      	ldr	r3, [r7, #24]
 8002358:	0c5b      	lsrs	r3, r3, #17
 800235a:	f003 030f 	and.w	r3, r3, #15
 800235e:	2b02      	cmp	r3, #2
 8002360:	d124      	bne.n	80023ac <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002362:	69ba      	ldr	r2, [r7, #24]
 8002364:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002368:	4013      	ands	r3, r2
 800236a:	2b00      	cmp	r3, #0
 800236c:	d035      	beq.n	80023da <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002372:	69bb      	ldr	r3, [r7, #24]
 8002374:	091b      	lsrs	r3, r3, #4
 8002376:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002378:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800237c:	b29b      	uxth	r3, r3
 800237e:	461a      	mov	r2, r3
 8002380:	6a38      	ldr	r0, [r7, #32]
 8002382:	f002 fd6e 	bl	8004e62 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	691a      	ldr	r2, [r3, #16]
 800238a:	69bb      	ldr	r3, [r7, #24]
 800238c:	091b      	lsrs	r3, r3, #4
 800238e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002392:	441a      	add	r2, r3
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	6a1a      	ldr	r2, [r3, #32]
 800239c:	69bb      	ldr	r3, [r7, #24]
 800239e:	091b      	lsrs	r3, r3, #4
 80023a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023a4:	441a      	add	r2, r3
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	621a      	str	r2, [r3, #32]
 80023aa:	e016      	b.n	80023da <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80023ac:	69bb      	ldr	r3, [r7, #24]
 80023ae:	0c5b      	lsrs	r3, r3, #17
 80023b0:	f003 030f 	and.w	r3, r3, #15
 80023b4:	2b06      	cmp	r3, #6
 80023b6:	d110      	bne.n	80023da <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80023be:	2208      	movs	r2, #8
 80023c0:	4619      	mov	r1, r3
 80023c2:	6a38      	ldr	r0, [r7, #32]
 80023c4:	f002 fd4d 	bl	8004e62 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	6a1a      	ldr	r2, [r3, #32]
 80023cc:	69bb      	ldr	r3, [r7, #24]
 80023ce:	091b      	lsrs	r3, r3, #4
 80023d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023d4:	441a      	add	r2, r3
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	699a      	ldr	r2, [r3, #24]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f042 0210 	orr.w	r2, r2, #16
 80023e8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4618      	mov	r0, r3
 80023f0:	f002 fe85 	bl	80050fe <USB_ReadInterrupts>
 80023f4:	4603      	mov	r3, r0
 80023f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023fa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80023fe:	f040 80a7 	bne.w	8002550 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002402:	2300      	movs	r3, #0
 8002404:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4618      	mov	r0, r3
 800240c:	f002 fe89 	bl	8005122 <USB_ReadDevAllOutEpInterrupt>
 8002410:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002412:	e099      	b.n	8002548 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002416:	f003 0301 	and.w	r3, r3, #1
 800241a:	2b00      	cmp	r3, #0
 800241c:	f000 808e 	beq.w	800253c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002426:	b2d2      	uxtb	r2, r2
 8002428:	4611      	mov	r1, r2
 800242a:	4618      	mov	r0, r3
 800242c:	f002 feab 	bl	8005186 <USB_ReadDevOutEPInterrupt>
 8002430:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	f003 0301 	and.w	r3, r3, #1
 8002438:	2b00      	cmp	r3, #0
 800243a:	d00c      	beq.n	8002456 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800243c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243e:	015a      	lsls	r2, r3, #5
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	4413      	add	r3, r2
 8002444:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002448:	461a      	mov	r2, r3
 800244a:	2301      	movs	r3, #1
 800244c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800244e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f000 fe61 	bl	8003118 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	f003 0308 	and.w	r3, r3, #8
 800245c:	2b00      	cmp	r3, #0
 800245e:	d00c      	beq.n	800247a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002462:	015a      	lsls	r2, r3, #5
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	4413      	add	r3, r2
 8002468:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800246c:	461a      	mov	r2, r3
 800246e:	2308      	movs	r3, #8
 8002470:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002472:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f000 ff37 	bl	80032e8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	f003 0310 	and.w	r3, r3, #16
 8002480:	2b00      	cmp	r3, #0
 8002482:	d008      	beq.n	8002496 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002486:	015a      	lsls	r2, r3, #5
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	4413      	add	r3, r2
 800248c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002490:	461a      	mov	r2, r3
 8002492:	2310      	movs	r3, #16
 8002494:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	f003 0302 	and.w	r3, r3, #2
 800249c:	2b00      	cmp	r3, #0
 800249e:	d030      	beq.n	8002502 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80024a0:	6a3b      	ldr	r3, [r7, #32]
 80024a2:	695b      	ldr	r3, [r3, #20]
 80024a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024a8:	2b80      	cmp	r3, #128	; 0x80
 80024aa:	d109      	bne.n	80024c0 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	69fa      	ldr	r2, [r7, #28]
 80024b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024be:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80024c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024c2:	4613      	mov	r3, r2
 80024c4:	00db      	lsls	r3, r3, #3
 80024c6:	4413      	add	r3, r2
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	4413      	add	r3, r2
 80024d2:	3304      	adds	r3, #4
 80024d4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	78db      	ldrb	r3, [r3, #3]
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d108      	bne.n	80024f0 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	2200      	movs	r2, #0
 80024e2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80024e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	4619      	mov	r1, r3
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f013 ff20 	bl	8016330 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80024f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f2:	015a      	lsls	r2, r3, #5
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	4413      	add	r3, r2
 80024f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024fc:	461a      	mov	r2, r3
 80024fe:	2302      	movs	r3, #2
 8002500:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	f003 0320 	and.w	r3, r3, #32
 8002508:	2b00      	cmp	r3, #0
 800250a:	d008      	beq.n	800251e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800250c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250e:	015a      	lsls	r2, r3, #5
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	4413      	add	r3, r2
 8002514:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002518:	461a      	mov	r2, r3
 800251a:	2320      	movs	r3, #32
 800251c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d009      	beq.n	800253c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252a:	015a      	lsls	r2, r3, #5
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	4413      	add	r3, r2
 8002530:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002534:	461a      	mov	r2, r3
 8002536:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800253a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800253c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253e:	3301      	adds	r3, #1
 8002540:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002544:	085b      	lsrs	r3, r3, #1
 8002546:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800254a:	2b00      	cmp	r3, #0
 800254c:	f47f af62 	bne.w	8002414 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4618      	mov	r0, r3
 8002556:	f002 fdd2 	bl	80050fe <USB_ReadInterrupts>
 800255a:	4603      	mov	r3, r0
 800255c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002560:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002564:	f040 80db 	bne.w	800271e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4618      	mov	r0, r3
 800256e:	f002 fdf1 	bl	8005154 <USB_ReadDevAllInEpInterrupt>
 8002572:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002574:	2300      	movs	r3, #0
 8002576:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002578:	e0cd      	b.n	8002716 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800257a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800257c:	f003 0301 	and.w	r3, r3, #1
 8002580:	2b00      	cmp	r3, #0
 8002582:	f000 80c2 	beq.w	800270a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800258c:	b2d2      	uxtb	r2, r2
 800258e:	4611      	mov	r1, r2
 8002590:	4618      	mov	r0, r3
 8002592:	f002 fe15 	bl	80051c0 <USB_ReadDevInEPInterrupt>
 8002596:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	f003 0301 	and.w	r3, r3, #1
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d057      	beq.n	8002652 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80025a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a4:	f003 030f 	and.w	r3, r3, #15
 80025a8:	2201      	movs	r2, #1
 80025aa:	fa02 f303 	lsl.w	r3, r2, r3
 80025ae:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	43db      	mvns	r3, r3
 80025bc:	69f9      	ldr	r1, [r7, #28]
 80025be:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80025c2:	4013      	ands	r3, r2
 80025c4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80025c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c8:	015a      	lsls	r2, r3, #5
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	4413      	add	r3, r2
 80025ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025d2:	461a      	mov	r2, r3
 80025d4:	2301      	movs	r3, #1
 80025d6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	691b      	ldr	r3, [r3, #16]
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d132      	bne.n	8002646 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80025e0:	6879      	ldr	r1, [r7, #4]
 80025e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025e4:	4613      	mov	r3, r2
 80025e6:	00db      	lsls	r3, r3, #3
 80025e8:	4413      	add	r3, r2
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	440b      	add	r3, r1
 80025ee:	334c      	adds	r3, #76	; 0x4c
 80025f0:	6819      	ldr	r1, [r3, #0]
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025f6:	4613      	mov	r3, r2
 80025f8:	00db      	lsls	r3, r3, #3
 80025fa:	4413      	add	r3, r2
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	4403      	add	r3, r0
 8002600:	3348      	adds	r3, #72	; 0x48
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4419      	add	r1, r3
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800260a:	4613      	mov	r3, r2
 800260c:	00db      	lsls	r3, r3, #3
 800260e:	4413      	add	r3, r2
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	4403      	add	r3, r0
 8002614:	334c      	adds	r3, #76	; 0x4c
 8002616:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261a:	2b00      	cmp	r3, #0
 800261c:	d113      	bne.n	8002646 <HAL_PCD_IRQHandler+0x3a2>
 800261e:	6879      	ldr	r1, [r7, #4]
 8002620:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002622:	4613      	mov	r3, r2
 8002624:	00db      	lsls	r3, r3, #3
 8002626:	4413      	add	r3, r2
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	440b      	add	r3, r1
 800262c:	3354      	adds	r3, #84	; 0x54
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d108      	bne.n	8002646 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6818      	ldr	r0, [r3, #0]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800263e:	461a      	mov	r2, r3
 8002640:	2101      	movs	r1, #1
 8002642:	f002 fe19 	bl	8005278 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002648:	b2db      	uxtb	r3, r3
 800264a:	4619      	mov	r1, r3
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f013 fdea 	bl	8016226 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	f003 0308 	and.w	r3, r3, #8
 8002658:	2b00      	cmp	r3, #0
 800265a:	d008      	beq.n	800266e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800265c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265e:	015a      	lsls	r2, r3, #5
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	4413      	add	r3, r2
 8002664:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002668:	461a      	mov	r2, r3
 800266a:	2308      	movs	r3, #8
 800266c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	f003 0310 	and.w	r3, r3, #16
 8002674:	2b00      	cmp	r3, #0
 8002676:	d008      	beq.n	800268a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267a:	015a      	lsls	r2, r3, #5
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	4413      	add	r3, r2
 8002680:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002684:	461a      	mov	r2, r3
 8002686:	2310      	movs	r3, #16
 8002688:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002690:	2b00      	cmp	r3, #0
 8002692:	d008      	beq.n	80026a6 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002696:	015a      	lsls	r2, r3, #5
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	4413      	add	r3, r2
 800269c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026a0:	461a      	mov	r2, r3
 80026a2:	2340      	movs	r3, #64	; 0x40
 80026a4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	f003 0302 	and.w	r3, r3, #2
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d023      	beq.n	80026f8 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80026b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026b2:	6a38      	ldr	r0, [r7, #32]
 80026b4:	f001 fe72 	bl	800439c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80026b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026ba:	4613      	mov	r3, r2
 80026bc:	00db      	lsls	r3, r3, #3
 80026be:	4413      	add	r3, r2
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	3338      	adds	r3, #56	; 0x38
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	4413      	add	r3, r2
 80026c8:	3304      	adds	r3, #4
 80026ca:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	78db      	ldrb	r3, [r3, #3]
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d108      	bne.n	80026e6 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	2200      	movs	r2, #0
 80026d8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80026da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	4619      	mov	r1, r3
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	f013 fe37 	bl	8016354 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80026e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e8:	015a      	lsls	r2, r3, #5
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	4413      	add	r3, r2
 80026ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026f2:	461a      	mov	r2, r3
 80026f4:	2302      	movs	r3, #2
 80026f6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d003      	beq.n	800270a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002702:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f000 fc79 	bl	8002ffc <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800270a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270c:	3301      	adds	r3, #1
 800270e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002712:	085b      	lsrs	r3, r3, #1
 8002714:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002718:	2b00      	cmp	r3, #0
 800271a:	f47f af2e 	bne.w	800257a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4618      	mov	r0, r3
 8002724:	f002 fceb 	bl	80050fe <USB_ReadInterrupts>
 8002728:	4603      	mov	r3, r0
 800272a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800272e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002732:	d122      	bne.n	800277a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	69fa      	ldr	r2, [r7, #28]
 800273e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002742:	f023 0301 	bic.w	r3, r3, #1
 8002746:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800274e:	2b01      	cmp	r3, #1
 8002750:	d108      	bne.n	8002764 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2200      	movs	r2, #0
 8002756:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800275a:	2100      	movs	r1, #0
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	f000 fe09 	bl	8003374 <HAL_PCDEx_LPM_Callback>
 8002762:	e002      	b.n	800276a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f013 fdd5 	bl	8016314 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	695a      	ldr	r2, [r3, #20]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002778:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4618      	mov	r0, r3
 8002780:	f002 fcbd 	bl	80050fe <USB_ReadInterrupts>
 8002784:	4603      	mov	r3, r0
 8002786:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800278a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800278e:	d112      	bne.n	80027b6 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	f003 0301 	and.w	r3, r3, #1
 800279c:	2b01      	cmp	r3, #1
 800279e:	d102      	bne.n	80027a6 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	f013 fd91 	bl	80162c8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	695a      	ldr	r2, [r3, #20]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80027b4:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4618      	mov	r0, r3
 80027bc:	f002 fc9f 	bl	80050fe <USB_ReadInterrupts>
 80027c0:	4603      	mov	r3, r0
 80027c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027ca:	f040 80b7 	bne.w	800293c <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	69fa      	ldr	r2, [r7, #28]
 80027d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027dc:	f023 0301 	bic.w	r3, r3, #1
 80027e0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	2110      	movs	r1, #16
 80027e8:	4618      	mov	r0, r3
 80027ea:	f001 fdd7 	bl	800439c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027ee:	2300      	movs	r3, #0
 80027f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027f2:	e046      	b.n	8002882 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80027f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027f6:	015a      	lsls	r2, r3, #5
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	4413      	add	r3, r2
 80027fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002800:	461a      	mov	r2, r3
 8002802:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002806:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800280a:	015a      	lsls	r2, r3, #5
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	4413      	add	r3, r2
 8002810:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002818:	0151      	lsls	r1, r2, #5
 800281a:	69fa      	ldr	r2, [r7, #28]
 800281c:	440a      	add	r2, r1
 800281e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002822:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002826:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800282a:	015a      	lsls	r2, r3, #5
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	4413      	add	r3, r2
 8002830:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002834:	461a      	mov	r2, r3
 8002836:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800283a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800283c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800283e:	015a      	lsls	r2, r3, #5
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	4413      	add	r3, r2
 8002844:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800284c:	0151      	lsls	r1, r2, #5
 800284e:	69fa      	ldr	r2, [r7, #28]
 8002850:	440a      	add	r2, r1
 8002852:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002856:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800285a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800285c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800285e:	015a      	lsls	r2, r3, #5
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	4413      	add	r3, r2
 8002864:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800286c:	0151      	lsls	r1, r2, #5
 800286e:	69fa      	ldr	r2, [r7, #28]
 8002870:	440a      	add	r2, r1
 8002872:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002876:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800287a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800287c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800287e:	3301      	adds	r3, #1
 8002880:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002888:	429a      	cmp	r2, r3
 800288a:	d3b3      	bcc.n	80027f4 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002892:	69db      	ldr	r3, [r3, #28]
 8002894:	69fa      	ldr	r2, [r7, #28]
 8002896:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800289a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800289e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d016      	beq.n	80028d6 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028b2:	69fa      	ldr	r2, [r7, #28]
 80028b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028b8:	f043 030b 	orr.w	r3, r3, #11
 80028bc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80028c0:	69fb      	ldr	r3, [r7, #28]
 80028c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c8:	69fa      	ldr	r2, [r7, #28]
 80028ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028ce:	f043 030b 	orr.w	r3, r3, #11
 80028d2:	6453      	str	r3, [r2, #68]	; 0x44
 80028d4:	e015      	b.n	8002902 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028dc:	695b      	ldr	r3, [r3, #20]
 80028de:	69fa      	ldr	r2, [r7, #28]
 80028e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028e4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80028e8:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80028ec:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028f4:	691b      	ldr	r3, [r3, #16]
 80028f6:	69fa      	ldr	r2, [r7, #28]
 80028f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028fc:	f043 030b 	orr.w	r3, r3, #11
 8002900:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	69fa      	ldr	r2, [r7, #28]
 800290c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002910:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002914:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6818      	ldr	r0, [r3, #0]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	691b      	ldr	r3, [r3, #16]
 800291e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002926:	461a      	mov	r2, r3
 8002928:	f002 fca6 	bl	8005278 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	695a      	ldr	r2, [r3, #20]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800293a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4618      	mov	r0, r3
 8002942:	f002 fbdc 	bl	80050fe <USB_ReadInterrupts>
 8002946:	4603      	mov	r3, r0
 8002948:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800294c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002950:	d124      	bne.n	800299c <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4618      	mov	r0, r3
 8002958:	f002 fc6c 	bl	8005234 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4618      	mov	r0, r3
 8002962:	f001 fd4f 	bl	8004404 <USB_GetDevSpeed>
 8002966:	4603      	mov	r3, r0
 8002968:	461a      	mov	r2, r3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681c      	ldr	r4, [r3, #0]
 8002972:	f001 f975 	bl	8003c60 <HAL_RCC_GetHCLKFreq>
 8002976:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800297c:	b2db      	uxtb	r3, r3
 800297e:	461a      	mov	r2, r3
 8002980:	4620      	mov	r0, r4
 8002982:	f001 fc69 	bl	8004258 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f013 fc75 	bl	8016276 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	695a      	ldr	r2, [r3, #20]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800299a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4618      	mov	r0, r3
 80029a2:	f002 fbac 	bl	80050fe <USB_ReadInterrupts>
 80029a6:	4603      	mov	r3, r0
 80029a8:	f003 0308 	and.w	r3, r3, #8
 80029ac:	2b08      	cmp	r3, #8
 80029ae:	d10a      	bne.n	80029c6 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	f013 fc52 	bl	801625a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	695a      	ldr	r2, [r3, #20]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f002 0208 	and.w	r2, r2, #8
 80029c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4618      	mov	r0, r3
 80029cc:	f002 fb97 	bl	80050fe <USB_ReadInterrupts>
 80029d0:	4603      	mov	r3, r0
 80029d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029d6:	2b80      	cmp	r3, #128	; 0x80
 80029d8:	d122      	bne.n	8002a20 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80029da:	6a3b      	ldr	r3, [r7, #32]
 80029dc:	699b      	ldr	r3, [r3, #24]
 80029de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80029e2:	6a3b      	ldr	r3, [r7, #32]
 80029e4:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80029e6:	2301      	movs	r3, #1
 80029e8:	627b      	str	r3, [r7, #36]	; 0x24
 80029ea:	e014      	b.n	8002a16 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80029ec:	6879      	ldr	r1, [r7, #4]
 80029ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029f0:	4613      	mov	r3, r2
 80029f2:	00db      	lsls	r3, r3, #3
 80029f4:	4413      	add	r3, r2
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	440b      	add	r3, r1
 80029fa:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d105      	bne.n	8002a10 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	4619      	mov	r1, r3
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f000 fac5 	bl	8002f9a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a12:	3301      	adds	r3, #1
 8002a14:	627b      	str	r3, [r7, #36]	; 0x24
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d3e5      	bcc.n	80029ec <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4618      	mov	r0, r3
 8002a26:	f002 fb6a 	bl	80050fe <USB_ReadInterrupts>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a34:	d13b      	bne.n	8002aae <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a36:	2301      	movs	r3, #1
 8002a38:	627b      	str	r3, [r7, #36]	; 0x24
 8002a3a:	e02b      	b.n	8002a94 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3e:	015a      	lsls	r2, r3, #5
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	4413      	add	r3, r2
 8002a44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a4c:	6879      	ldr	r1, [r7, #4]
 8002a4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a50:	4613      	mov	r3, r2
 8002a52:	00db      	lsls	r3, r3, #3
 8002a54:	4413      	add	r3, r2
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	440b      	add	r3, r1
 8002a5a:	3340      	adds	r3, #64	; 0x40
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d115      	bne.n	8002a8e <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002a62:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	da12      	bge.n	8002a8e <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002a68:	6879      	ldr	r1, [r7, #4]
 8002a6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	00db      	lsls	r3, r3, #3
 8002a70:	4413      	add	r3, r2
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	440b      	add	r3, r1
 8002a76:	333f      	adds	r3, #63	; 0x3f
 8002a78:	2201      	movs	r2, #1
 8002a7a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	4619      	mov	r1, r3
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f000 fa86 	bl	8002f9a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a90:	3301      	adds	r3, #1
 8002a92:	627b      	str	r3, [r7, #36]	; 0x24
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d3ce      	bcc.n	8002a3c <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	695a      	ldr	r2, [r3, #20]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002aac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f002 fb23 	bl	80050fe <USB_ReadInterrupts>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002abe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002ac2:	d155      	bne.n	8002b70 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	627b      	str	r3, [r7, #36]	; 0x24
 8002ac8:	e045      	b.n	8002b56 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002acc:	015a      	lsls	r2, r3, #5
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	4413      	add	r3, r2
 8002ad2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002ada:	6879      	ldr	r1, [r7, #4]
 8002adc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ade:	4613      	mov	r3, r2
 8002ae0:	00db      	lsls	r3, r3, #3
 8002ae2:	4413      	add	r3, r2
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	440b      	add	r3, r1
 8002ae8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d12e      	bne.n	8002b50 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002af2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	da2b      	bge.n	8002b50 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002af8:	69bb      	ldr	r3, [r7, #24]
 8002afa:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002b04:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d121      	bne.n	8002b50 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002b0c:	6879      	ldr	r1, [r7, #4]
 8002b0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b10:	4613      	mov	r3, r2
 8002b12:	00db      	lsls	r3, r3, #3
 8002b14:	4413      	add	r3, r2
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	440b      	add	r3, r1
 8002b1a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002b1e:	2201      	movs	r2, #1
 8002b20:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002b22:	6a3b      	ldr	r3, [r7, #32]
 8002b24:	699b      	ldr	r3, [r3, #24]
 8002b26:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002b2a:	6a3b      	ldr	r3, [r7, #32]
 8002b2c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002b2e:	6a3b      	ldr	r3, [r7, #32]
 8002b30:	695b      	ldr	r3, [r3, #20]
 8002b32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d10a      	bne.n	8002b50 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	69fa      	ldr	r2, [r7, #28]
 8002b44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b48:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b4c:	6053      	str	r3, [r2, #4]
            break;
 8002b4e:	e007      	b.n	8002b60 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b52:	3301      	adds	r3, #1
 8002b54:	627b      	str	r3, [r7, #36]	; 0x24
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d3b4      	bcc.n	8002aca <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	695a      	ldr	r2, [r3, #20]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002b6e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4618      	mov	r0, r3
 8002b76:	f002 fac2 	bl	80050fe <USB_ReadInterrupts>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002b80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b84:	d10a      	bne.n	8002b9c <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f013 fbf6 	bl	8016378 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	695a      	ldr	r2, [r3, #20]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002b9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f002 faac 	bl	80050fe <USB_ReadInterrupts>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	f003 0304 	and.w	r3, r3, #4
 8002bac:	2b04      	cmp	r3, #4
 8002bae:	d115      	bne.n	8002bdc <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002bb8:	69bb      	ldr	r3, [r7, #24]
 8002bba:	f003 0304 	and.w	r3, r3, #4
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d002      	beq.n	8002bc8 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f013 fbe6 	bl	8016394 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	6859      	ldr	r1, [r3, #4]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	69ba      	ldr	r2, [r7, #24]
 8002bd4:	430a      	orrs	r2, r1
 8002bd6:	605a      	str	r2, [r3, #4]
 8002bd8:	e000      	b.n	8002bdc <HAL_PCD_IRQHandler+0x938>
      return;
 8002bda:	bf00      	nop
    }
  }
}
 8002bdc:	3734      	adds	r7, #52	; 0x34
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd90      	pop	{r4, r7, pc}

08002be2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002be2:	b580      	push	{r7, lr}
 8002be4:	b082      	sub	sp, #8
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
 8002bea:	460b      	mov	r3, r1
 8002bec:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d101      	bne.n	8002bfc <HAL_PCD_SetAddress+0x1a>
 8002bf8:	2302      	movs	r3, #2
 8002bfa:	e013      	b.n	8002c24 <HAL_PCD_SetAddress+0x42>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	78fa      	ldrb	r2, [r7, #3]
 8002c08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	78fa      	ldrb	r2, [r7, #3]
 8002c12:	4611      	mov	r1, r2
 8002c14:	4618      	mov	r0, r3
 8002c16:	f002 fa4d 	bl	80050b4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002c22:	2300      	movs	r3, #0
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3708      	adds	r7, #8
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}

08002c2c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b084      	sub	sp, #16
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	4608      	mov	r0, r1
 8002c36:	4611      	mov	r1, r2
 8002c38:	461a      	mov	r2, r3
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	70fb      	strb	r3, [r7, #3]
 8002c3e:	460b      	mov	r3, r1
 8002c40:	803b      	strh	r3, [r7, #0]
 8002c42:	4613      	mov	r3, r2
 8002c44:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002c46:	2300      	movs	r3, #0
 8002c48:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002c4a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	da0f      	bge.n	8002c72 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c52:	78fb      	ldrb	r3, [r7, #3]
 8002c54:	f003 020f 	and.w	r2, r3, #15
 8002c58:	4613      	mov	r3, r2
 8002c5a:	00db      	lsls	r3, r3, #3
 8002c5c:	4413      	add	r3, r2
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	3338      	adds	r3, #56	; 0x38
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	4413      	add	r3, r2
 8002c66:	3304      	adds	r3, #4
 8002c68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	705a      	strb	r2, [r3, #1]
 8002c70:	e00f      	b.n	8002c92 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c72:	78fb      	ldrb	r3, [r7, #3]
 8002c74:	f003 020f 	and.w	r2, r3, #15
 8002c78:	4613      	mov	r3, r2
 8002c7a:	00db      	lsls	r3, r3, #3
 8002c7c:	4413      	add	r3, r2
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	4413      	add	r3, r2
 8002c88:	3304      	adds	r3, #4
 8002c8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002c92:	78fb      	ldrb	r3, [r7, #3]
 8002c94:	f003 030f 	and.w	r3, r3, #15
 8002c98:	b2da      	uxtb	r2, r3
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002c9e:	883a      	ldrh	r2, [r7, #0]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	78ba      	ldrb	r2, [r7, #2]
 8002ca8:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	785b      	ldrb	r3, [r3, #1]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d004      	beq.n	8002cbc <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	781b      	ldrb	r3, [r3, #0]
 8002cb6:	b29a      	uxth	r2, r3
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002cbc:	78bb      	ldrb	r3, [r7, #2]
 8002cbe:	2b02      	cmp	r3, #2
 8002cc0:	d102      	bne.n	8002cc8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d101      	bne.n	8002cd6 <HAL_PCD_EP_Open+0xaa>
 8002cd2:	2302      	movs	r3, #2
 8002cd4:	e00e      	b.n	8002cf4 <HAL_PCD_EP_Open+0xc8>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2201      	movs	r2, #1
 8002cda:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	68f9      	ldr	r1, [r7, #12]
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f001 fbb1 	bl	800444c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002cf2:	7afb      	ldrb	r3, [r7, #11]
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3710      	adds	r7, #16
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}

08002cfc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b086      	sub	sp, #24
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	60f8      	str	r0, [r7, #12]
 8002d04:	607a      	str	r2, [r7, #4]
 8002d06:	603b      	str	r3, [r7, #0]
 8002d08:	460b      	mov	r3, r1
 8002d0a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d0c:	7afb      	ldrb	r3, [r7, #11]
 8002d0e:	f003 020f 	and.w	r2, r3, #15
 8002d12:	4613      	mov	r3, r2
 8002d14:	00db      	lsls	r3, r3, #3
 8002d16:	4413      	add	r3, r2
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d1e:	68fa      	ldr	r2, [r7, #12]
 8002d20:	4413      	add	r3, r2
 8002d22:	3304      	adds	r3, #4
 8002d24:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	683a      	ldr	r2, [r7, #0]
 8002d30:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	2200      	movs	r2, #0
 8002d36:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d3e:	7afb      	ldrb	r3, [r7, #11]
 8002d40:	f003 030f 	and.w	r3, r3, #15
 8002d44:	b2da      	uxtb	r2, r3
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	691b      	ldr	r3, [r3, #16]
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d102      	bne.n	8002d58 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002d58:	7afb      	ldrb	r3, [r7, #11]
 8002d5a:	f003 030f 	and.w	r3, r3, #15
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d109      	bne.n	8002d76 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	6818      	ldr	r0, [r3, #0]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	691b      	ldr	r3, [r3, #16]
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	461a      	mov	r2, r3
 8002d6e:	6979      	ldr	r1, [r7, #20]
 8002d70:	f001 fe3a 	bl	80049e8 <USB_EP0StartXfer>
 8002d74:	e008      	b.n	8002d88 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	6818      	ldr	r0, [r3, #0]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	691b      	ldr	r3, [r3, #16]
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	461a      	mov	r2, r3
 8002d82:	6979      	ldr	r1, [r7, #20]
 8002d84:	f001 fbe8 	bl	8004558 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3718      	adds	r7, #24
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}

08002d92 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002d92:	b580      	push	{r7, lr}
 8002d94:	b086      	sub	sp, #24
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	60f8      	str	r0, [r7, #12]
 8002d9a:	607a      	str	r2, [r7, #4]
 8002d9c:	603b      	str	r3, [r7, #0]
 8002d9e:	460b      	mov	r3, r1
 8002da0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002da2:	7afb      	ldrb	r3, [r7, #11]
 8002da4:	f003 020f 	and.w	r2, r3, #15
 8002da8:	4613      	mov	r3, r2
 8002daa:	00db      	lsls	r3, r3, #3
 8002dac:	4413      	add	r3, r2
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	3338      	adds	r3, #56	; 0x38
 8002db2:	68fa      	ldr	r2, [r7, #12]
 8002db4:	4413      	add	r3, r2
 8002db6:	3304      	adds	r3, #4
 8002db8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	687a      	ldr	r2, [r7, #4]
 8002dbe:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	683a      	ldr	r2, [r7, #0]
 8002dc4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002dd2:	7afb      	ldrb	r3, [r7, #11]
 8002dd4:	f003 030f 	and.w	r3, r3, #15
 8002dd8:	b2da      	uxtb	r2, r3
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	691b      	ldr	r3, [r3, #16]
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d102      	bne.n	8002dec <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002dec:	7afb      	ldrb	r3, [r7, #11]
 8002dee:	f003 030f 	and.w	r3, r3, #15
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d109      	bne.n	8002e0a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	6818      	ldr	r0, [r3, #0]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	691b      	ldr	r3, [r3, #16]
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	461a      	mov	r2, r3
 8002e02:	6979      	ldr	r1, [r7, #20]
 8002e04:	f001 fdf0 	bl	80049e8 <USB_EP0StartXfer>
 8002e08:	e008      	b.n	8002e1c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	6818      	ldr	r0, [r3, #0]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	691b      	ldr	r3, [r3, #16]
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	461a      	mov	r2, r3
 8002e16:	6979      	ldr	r1, [r7, #20]
 8002e18:	f001 fb9e 	bl	8004558 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3718      	adds	r7, #24
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}

08002e26 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e26:	b580      	push	{r7, lr}
 8002e28:	b084      	sub	sp, #16
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
 8002e2e:	460b      	mov	r3, r1
 8002e30:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002e32:	78fb      	ldrb	r3, [r7, #3]
 8002e34:	f003 020f 	and.w	r2, r3, #15
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d901      	bls.n	8002e44 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e050      	b.n	8002ee6 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002e44:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	da0f      	bge.n	8002e6c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e4c:	78fb      	ldrb	r3, [r7, #3]
 8002e4e:	f003 020f 	and.w	r2, r3, #15
 8002e52:	4613      	mov	r3, r2
 8002e54:	00db      	lsls	r3, r3, #3
 8002e56:	4413      	add	r3, r2
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	3338      	adds	r3, #56	; 0x38
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	4413      	add	r3, r2
 8002e60:	3304      	adds	r3, #4
 8002e62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2201      	movs	r2, #1
 8002e68:	705a      	strb	r2, [r3, #1]
 8002e6a:	e00d      	b.n	8002e88 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002e6c:	78fa      	ldrb	r2, [r7, #3]
 8002e6e:	4613      	mov	r3, r2
 8002e70:	00db      	lsls	r3, r3, #3
 8002e72:	4413      	add	r3, r2
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	4413      	add	r3, r2
 8002e7e:	3304      	adds	r3, #4
 8002e80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2200      	movs	r2, #0
 8002e86:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e8e:	78fb      	ldrb	r3, [r7, #3]
 8002e90:	f003 030f 	and.w	r3, r3, #15
 8002e94:	b2da      	uxtb	r2, r3
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d101      	bne.n	8002ea8 <HAL_PCD_EP_SetStall+0x82>
 8002ea4:	2302      	movs	r3, #2
 8002ea6:	e01e      	b.n	8002ee6 <HAL_PCD_EP_SetStall+0xc0>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	68f9      	ldr	r1, [r7, #12]
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f002 f82a 	bl	8004f10 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002ebc:	78fb      	ldrb	r3, [r7, #3]
 8002ebe:	f003 030f 	and.w	r3, r3, #15
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d10a      	bne.n	8002edc <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6818      	ldr	r0, [r3, #0]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	691b      	ldr	r3, [r3, #16]
 8002ece:	b2d9      	uxtb	r1, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	f002 f9ce 	bl	8005278 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002ee4:	2300      	movs	r3, #0
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3710      	adds	r7, #16
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}

08002eee <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002eee:	b580      	push	{r7, lr}
 8002ef0:	b084      	sub	sp, #16
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]
 8002ef6:	460b      	mov	r3, r1
 8002ef8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002efa:	78fb      	ldrb	r3, [r7, #3]
 8002efc:	f003 020f 	and.w	r2, r3, #15
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d901      	bls.n	8002f0c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e042      	b.n	8002f92 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002f0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	da0f      	bge.n	8002f34 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f14:	78fb      	ldrb	r3, [r7, #3]
 8002f16:	f003 020f 	and.w	r2, r3, #15
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	00db      	lsls	r3, r3, #3
 8002f1e:	4413      	add	r3, r2
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	3338      	adds	r3, #56	; 0x38
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	4413      	add	r3, r2
 8002f28:	3304      	adds	r3, #4
 8002f2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	705a      	strb	r2, [r3, #1]
 8002f32:	e00f      	b.n	8002f54 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f34:	78fb      	ldrb	r3, [r7, #3]
 8002f36:	f003 020f 	and.w	r2, r3, #15
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	00db      	lsls	r3, r3, #3
 8002f3e:	4413      	add	r3, r2
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	4413      	add	r3, r2
 8002f4a:	3304      	adds	r3, #4
 8002f4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2200      	movs	r2, #0
 8002f52:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2200      	movs	r2, #0
 8002f58:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f5a:	78fb      	ldrb	r3, [r7, #3]
 8002f5c:	f003 030f 	and.w	r3, r3, #15
 8002f60:	b2da      	uxtb	r2, r3
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d101      	bne.n	8002f74 <HAL_PCD_EP_ClrStall+0x86>
 8002f70:	2302      	movs	r3, #2
 8002f72:	e00e      	b.n	8002f92 <HAL_PCD_EP_ClrStall+0xa4>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2201      	movs	r2, #1
 8002f78:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	68f9      	ldr	r1, [r7, #12]
 8002f82:	4618      	mov	r0, r3
 8002f84:	f002 f831 	bl	8004fea <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002f90:	2300      	movs	r3, #0
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3710      	adds	r7, #16
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}

08002f9a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f9a:	b580      	push	{r7, lr}
 8002f9c:	b084      	sub	sp, #16
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	6078      	str	r0, [r7, #4]
 8002fa2:	460b      	mov	r3, r1
 8002fa4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002fa6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	da0c      	bge.n	8002fc8 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fae:	78fb      	ldrb	r3, [r7, #3]
 8002fb0:	f003 020f 	and.w	r2, r3, #15
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	00db      	lsls	r3, r3, #3
 8002fb8:	4413      	add	r3, r2
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	3338      	adds	r3, #56	; 0x38
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	4413      	add	r3, r2
 8002fc2:	3304      	adds	r3, #4
 8002fc4:	60fb      	str	r3, [r7, #12]
 8002fc6:	e00c      	b.n	8002fe2 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fc8:	78fb      	ldrb	r3, [r7, #3]
 8002fca:	f003 020f 	and.w	r2, r3, #15
 8002fce:	4613      	mov	r3, r2
 8002fd0:	00db      	lsls	r3, r3, #3
 8002fd2:	4413      	add	r3, r2
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	4413      	add	r3, r2
 8002fde:	3304      	adds	r3, #4
 8002fe0:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	68f9      	ldr	r1, [r7, #12]
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f001 fe54 	bl	8004c96 <USB_EPStopXfer>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002ff2:	7afb      	ldrb	r3, [r7, #11]
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3710      	adds	r7, #16
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}

08002ffc <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b08a      	sub	sp, #40	; 0x28
 8003000:	af02      	add	r7, sp, #8
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003010:	683a      	ldr	r2, [r7, #0]
 8003012:	4613      	mov	r3, r2
 8003014:	00db      	lsls	r3, r3, #3
 8003016:	4413      	add	r3, r2
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	3338      	adds	r3, #56	; 0x38
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	4413      	add	r3, r2
 8003020:	3304      	adds	r3, #4
 8003022:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6a1a      	ldr	r2, [r3, #32]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	699b      	ldr	r3, [r3, #24]
 800302c:	429a      	cmp	r2, r3
 800302e:	d901      	bls.n	8003034 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e06c      	b.n	800310e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	699a      	ldr	r2, [r3, #24]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6a1b      	ldr	r3, [r3, #32]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	69fa      	ldr	r2, [r7, #28]
 8003046:	429a      	cmp	r2, r3
 8003048:	d902      	bls.n	8003050 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	3303      	adds	r3, #3
 8003054:	089b      	lsrs	r3, r3, #2
 8003056:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003058:	e02b      	b.n	80030b2 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	699a      	ldr	r2, [r3, #24]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	6a1b      	ldr	r3, [r3, #32]
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	68db      	ldr	r3, [r3, #12]
 800306a:	69fa      	ldr	r2, [r7, #28]
 800306c:	429a      	cmp	r2, r3
 800306e:	d902      	bls.n	8003076 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	3303      	adds	r3, #3
 800307a:	089b      	lsrs	r3, r3, #2
 800307c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	6919      	ldr	r1, [r3, #16]
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	b2da      	uxtb	r2, r3
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800308e:	b2db      	uxtb	r3, r3
 8003090:	9300      	str	r3, [sp, #0]
 8003092:	4603      	mov	r3, r0
 8003094:	6978      	ldr	r0, [r7, #20]
 8003096:	f001 fea7 	bl	8004de8 <USB_WritePacket>

    ep->xfer_buff  += len;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	691a      	ldr	r2, [r3, #16]
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	441a      	add	r2, r3
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	6a1a      	ldr	r2, [r3, #32]
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	441a      	add	r2, r3
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	015a      	lsls	r2, r3, #5
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	4413      	add	r3, r2
 80030ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030be:	699b      	ldr	r3, [r3, #24]
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	69ba      	ldr	r2, [r7, #24]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d809      	bhi.n	80030dc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6a1a      	ldr	r2, [r3, #32]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d203      	bcs.n	80030dc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	699b      	ldr	r3, [r3, #24]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d1be      	bne.n	800305a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	699a      	ldr	r2, [r3, #24]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6a1b      	ldr	r3, [r3, #32]
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d811      	bhi.n	800310c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	f003 030f 	and.w	r3, r3, #15
 80030ee:	2201      	movs	r2, #1
 80030f0:	fa02 f303 	lsl.w	r3, r2, r3
 80030f4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	43db      	mvns	r3, r3
 8003102:	6939      	ldr	r1, [r7, #16]
 8003104:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003108:	4013      	ands	r3, r2
 800310a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800310c:	2300      	movs	r3, #0
}
 800310e:	4618      	mov	r0, r3
 8003110:	3720      	adds	r7, #32
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
	...

08003118 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b088      	sub	sp, #32
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	333c      	adds	r3, #60	; 0x3c
 8003130:	3304      	adds	r3, #4
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	015a      	lsls	r2, r3, #5
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	4413      	add	r3, r2
 800313e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	691b      	ldr	r3, [r3, #16]
 800314a:	2b01      	cmp	r3, #1
 800314c:	d17b      	bne.n	8003246 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	f003 0308 	and.w	r3, r3, #8
 8003154:	2b00      	cmp	r3, #0
 8003156:	d015      	beq.n	8003184 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	4a61      	ldr	r2, [pc, #388]	; (80032e0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800315c:	4293      	cmp	r3, r2
 800315e:	f240 80b9 	bls.w	80032d4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003168:	2b00      	cmp	r3, #0
 800316a:	f000 80b3 	beq.w	80032d4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	015a      	lsls	r2, r3, #5
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	4413      	add	r3, r2
 8003176:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800317a:	461a      	mov	r2, r3
 800317c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003180:	6093      	str	r3, [r2, #8]
 8003182:	e0a7      	b.n	80032d4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	f003 0320 	and.w	r3, r3, #32
 800318a:	2b00      	cmp	r3, #0
 800318c:	d009      	beq.n	80031a2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	015a      	lsls	r2, r3, #5
 8003192:	69bb      	ldr	r3, [r7, #24]
 8003194:	4413      	add	r3, r2
 8003196:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800319a:	461a      	mov	r2, r3
 800319c:	2320      	movs	r3, #32
 800319e:	6093      	str	r3, [r2, #8]
 80031a0:	e098      	b.n	80032d4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	f040 8093 	bne.w	80032d4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	4a4b      	ldr	r2, [pc, #300]	; (80032e0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d90f      	bls.n	80031d6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d00a      	beq.n	80031d6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	015a      	lsls	r2, r3, #5
 80031c4:	69bb      	ldr	r3, [r7, #24]
 80031c6:	4413      	add	r3, r2
 80031c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031cc:	461a      	mov	r2, r3
 80031ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031d2:	6093      	str	r3, [r2, #8]
 80031d4:	e07e      	b.n	80032d4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80031d6:	683a      	ldr	r2, [r7, #0]
 80031d8:	4613      	mov	r3, r2
 80031da:	00db      	lsls	r3, r3, #3
 80031dc:	4413      	add	r3, r2
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	4413      	add	r3, r2
 80031e8:	3304      	adds	r3, #4
 80031ea:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	69da      	ldr	r2, [r3, #28]
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	0159      	lsls	r1, r3, #5
 80031f4:	69bb      	ldr	r3, [r7, #24]
 80031f6:	440b      	add	r3, r1
 80031f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031fc:	691b      	ldr	r3, [r3, #16]
 80031fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003202:	1ad2      	subs	r2, r2, r3
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d114      	bne.n	8003238 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	699b      	ldr	r3, [r3, #24]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d109      	bne.n	800322a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6818      	ldr	r0, [r3, #0]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003220:	461a      	mov	r2, r3
 8003222:	2101      	movs	r1, #1
 8003224:	f002 f828 	bl	8005278 <USB_EP0_OutStart>
 8003228:	e006      	b.n	8003238 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	691a      	ldr	r2, [r3, #16]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	6a1b      	ldr	r3, [r3, #32]
 8003232:	441a      	add	r2, r3
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	b2db      	uxtb	r3, r3
 800323c:	4619      	mov	r1, r3
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f012 ffd6 	bl	80161f0 <HAL_PCD_DataOutStageCallback>
 8003244:	e046      	b.n	80032d4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	4a26      	ldr	r2, [pc, #152]	; (80032e4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d124      	bne.n	8003298 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003254:	2b00      	cmp	r3, #0
 8003256:	d00a      	beq.n	800326e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	015a      	lsls	r2, r3, #5
 800325c:	69bb      	ldr	r3, [r7, #24]
 800325e:	4413      	add	r3, r2
 8003260:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003264:	461a      	mov	r2, r3
 8003266:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800326a:	6093      	str	r3, [r2, #8]
 800326c:	e032      	b.n	80032d4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	f003 0320 	and.w	r3, r3, #32
 8003274:	2b00      	cmp	r3, #0
 8003276:	d008      	beq.n	800328a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	015a      	lsls	r2, r3, #5
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	4413      	add	r3, r2
 8003280:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003284:	461a      	mov	r2, r3
 8003286:	2320      	movs	r3, #32
 8003288:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	b2db      	uxtb	r3, r3
 800328e:	4619      	mov	r1, r3
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f012 ffad 	bl	80161f0 <HAL_PCD_DataOutStageCallback>
 8003296:	e01d      	b.n	80032d4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d114      	bne.n	80032c8 <PCD_EP_OutXfrComplete_int+0x1b0>
 800329e:	6879      	ldr	r1, [r7, #4]
 80032a0:	683a      	ldr	r2, [r7, #0]
 80032a2:	4613      	mov	r3, r2
 80032a4:	00db      	lsls	r3, r3, #3
 80032a6:	4413      	add	r3, r2
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	440b      	add	r3, r1
 80032ac:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d108      	bne.n	80032c8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6818      	ldr	r0, [r3, #0]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80032c0:	461a      	mov	r2, r3
 80032c2:	2100      	movs	r1, #0
 80032c4:	f001 ffd8 	bl	8005278 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	4619      	mov	r1, r3
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f012 ff8e 	bl	80161f0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80032d4:	2300      	movs	r3, #0
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3720      	adds	r7, #32
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	4f54300a 	.word	0x4f54300a
 80032e4:	4f54310a 	.word	0x4f54310a

080032e8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b086      	sub	sp, #24
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	333c      	adds	r3, #60	; 0x3c
 8003300:	3304      	adds	r3, #4
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	015a      	lsls	r2, r3, #5
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	4413      	add	r3, r2
 800330e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	4a15      	ldr	r2, [pc, #84]	; (8003370 <PCD_EP_OutSetupPacket_int+0x88>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d90e      	bls.n	800333c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003324:	2b00      	cmp	r3, #0
 8003326:	d009      	beq.n	800333c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	015a      	lsls	r2, r3, #5
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	4413      	add	r3, r2
 8003330:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003334:	461a      	mov	r2, r3
 8003336:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800333a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800333c:	6878      	ldr	r0, [r7, #4]
 800333e:	f012 ff45 	bl	80161cc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	4a0a      	ldr	r2, [pc, #40]	; (8003370 <PCD_EP_OutSetupPacket_int+0x88>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d90c      	bls.n	8003364 <PCD_EP_OutSetupPacket_int+0x7c>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	691b      	ldr	r3, [r3, #16]
 800334e:	2b01      	cmp	r3, #1
 8003350:	d108      	bne.n	8003364 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6818      	ldr	r0, [r3, #0]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800335c:	461a      	mov	r2, r3
 800335e:	2101      	movs	r1, #1
 8003360:	f001 ff8a 	bl	8005278 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003364:	2300      	movs	r3, #0
}
 8003366:	4618      	mov	r0, r3
 8003368:	3718      	adds	r7, #24
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	4f54300a 	.word	0x4f54300a

08003374 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	460b      	mov	r3, r1
 800337e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003380:	bf00      	nop
 8003382:	370c      	adds	r7, #12
 8003384:	46bd      	mov	sp, r7
 8003386:	bc80      	pop	{r7}
 8003388:	4770      	bx	lr
	...

0800338c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b086      	sub	sp, #24
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d101      	bne.n	800339e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e267      	b.n	800386e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0301 	and.w	r3, r3, #1
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d075      	beq.n	8003496 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033aa:	4b88      	ldr	r3, [pc, #544]	; (80035cc <HAL_RCC_OscConfig+0x240>)
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	f003 030c 	and.w	r3, r3, #12
 80033b2:	2b04      	cmp	r3, #4
 80033b4:	d00c      	beq.n	80033d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033b6:	4b85      	ldr	r3, [pc, #532]	; (80035cc <HAL_RCC_OscConfig+0x240>)
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033be:	2b08      	cmp	r3, #8
 80033c0:	d112      	bne.n	80033e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033c2:	4b82      	ldr	r3, [pc, #520]	; (80035cc <HAL_RCC_OscConfig+0x240>)
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033ce:	d10b      	bne.n	80033e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033d0:	4b7e      	ldr	r3, [pc, #504]	; (80035cc <HAL_RCC_OscConfig+0x240>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d05b      	beq.n	8003494 <HAL_RCC_OscConfig+0x108>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d157      	bne.n	8003494 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e242      	b.n	800386e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033f0:	d106      	bne.n	8003400 <HAL_RCC_OscConfig+0x74>
 80033f2:	4b76      	ldr	r3, [pc, #472]	; (80035cc <HAL_RCC_OscConfig+0x240>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a75      	ldr	r2, [pc, #468]	; (80035cc <HAL_RCC_OscConfig+0x240>)
 80033f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033fc:	6013      	str	r3, [r2, #0]
 80033fe:	e01d      	b.n	800343c <HAL_RCC_OscConfig+0xb0>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003408:	d10c      	bne.n	8003424 <HAL_RCC_OscConfig+0x98>
 800340a:	4b70      	ldr	r3, [pc, #448]	; (80035cc <HAL_RCC_OscConfig+0x240>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a6f      	ldr	r2, [pc, #444]	; (80035cc <HAL_RCC_OscConfig+0x240>)
 8003410:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003414:	6013      	str	r3, [r2, #0]
 8003416:	4b6d      	ldr	r3, [pc, #436]	; (80035cc <HAL_RCC_OscConfig+0x240>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a6c      	ldr	r2, [pc, #432]	; (80035cc <HAL_RCC_OscConfig+0x240>)
 800341c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003420:	6013      	str	r3, [r2, #0]
 8003422:	e00b      	b.n	800343c <HAL_RCC_OscConfig+0xb0>
 8003424:	4b69      	ldr	r3, [pc, #420]	; (80035cc <HAL_RCC_OscConfig+0x240>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a68      	ldr	r2, [pc, #416]	; (80035cc <HAL_RCC_OscConfig+0x240>)
 800342a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800342e:	6013      	str	r3, [r2, #0]
 8003430:	4b66      	ldr	r3, [pc, #408]	; (80035cc <HAL_RCC_OscConfig+0x240>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a65      	ldr	r2, [pc, #404]	; (80035cc <HAL_RCC_OscConfig+0x240>)
 8003436:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800343a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d013      	beq.n	800346c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003444:	f7fd fd02 	bl	8000e4c <HAL_GetTick>
 8003448:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800344a:	e008      	b.n	800345e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800344c:	f7fd fcfe 	bl	8000e4c <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	2b64      	cmp	r3, #100	; 0x64
 8003458:	d901      	bls.n	800345e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e207      	b.n	800386e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800345e:	4b5b      	ldr	r3, [pc, #364]	; (80035cc <HAL_RCC_OscConfig+0x240>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d0f0      	beq.n	800344c <HAL_RCC_OscConfig+0xc0>
 800346a:	e014      	b.n	8003496 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800346c:	f7fd fcee 	bl	8000e4c <HAL_GetTick>
 8003470:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003472:	e008      	b.n	8003486 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003474:	f7fd fcea 	bl	8000e4c <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	2b64      	cmp	r3, #100	; 0x64
 8003480:	d901      	bls.n	8003486 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e1f3      	b.n	800386e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003486:	4b51      	ldr	r3, [pc, #324]	; (80035cc <HAL_RCC_OscConfig+0x240>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d1f0      	bne.n	8003474 <HAL_RCC_OscConfig+0xe8>
 8003492:	e000      	b.n	8003496 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003494:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0302 	and.w	r3, r3, #2
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d063      	beq.n	800356a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034a2:	4b4a      	ldr	r3, [pc, #296]	; (80035cc <HAL_RCC_OscConfig+0x240>)
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	f003 030c 	and.w	r3, r3, #12
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d00b      	beq.n	80034c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034ae:	4b47      	ldr	r3, [pc, #284]	; (80035cc <HAL_RCC_OscConfig+0x240>)
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034b6:	2b08      	cmp	r3, #8
 80034b8:	d11c      	bne.n	80034f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034ba:	4b44      	ldr	r3, [pc, #272]	; (80035cc <HAL_RCC_OscConfig+0x240>)
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d116      	bne.n	80034f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034c6:	4b41      	ldr	r3, [pc, #260]	; (80035cc <HAL_RCC_OscConfig+0x240>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0302 	and.w	r3, r3, #2
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d005      	beq.n	80034de <HAL_RCC_OscConfig+0x152>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d001      	beq.n	80034de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e1c7      	b.n	800386e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034de:	4b3b      	ldr	r3, [pc, #236]	; (80035cc <HAL_RCC_OscConfig+0x240>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	691b      	ldr	r3, [r3, #16]
 80034ea:	00db      	lsls	r3, r3, #3
 80034ec:	4937      	ldr	r1, [pc, #220]	; (80035cc <HAL_RCC_OscConfig+0x240>)
 80034ee:	4313      	orrs	r3, r2
 80034f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034f2:	e03a      	b.n	800356a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d020      	beq.n	800353e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034fc:	4b34      	ldr	r3, [pc, #208]	; (80035d0 <HAL_RCC_OscConfig+0x244>)
 80034fe:	2201      	movs	r2, #1
 8003500:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003502:	f7fd fca3 	bl	8000e4c <HAL_GetTick>
 8003506:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003508:	e008      	b.n	800351c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800350a:	f7fd fc9f 	bl	8000e4c <HAL_GetTick>
 800350e:	4602      	mov	r2, r0
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	1ad3      	subs	r3, r2, r3
 8003514:	2b02      	cmp	r3, #2
 8003516:	d901      	bls.n	800351c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003518:	2303      	movs	r3, #3
 800351a:	e1a8      	b.n	800386e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800351c:	4b2b      	ldr	r3, [pc, #172]	; (80035cc <HAL_RCC_OscConfig+0x240>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 0302 	and.w	r3, r3, #2
 8003524:	2b00      	cmp	r3, #0
 8003526:	d0f0      	beq.n	800350a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003528:	4b28      	ldr	r3, [pc, #160]	; (80035cc <HAL_RCC_OscConfig+0x240>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	691b      	ldr	r3, [r3, #16]
 8003534:	00db      	lsls	r3, r3, #3
 8003536:	4925      	ldr	r1, [pc, #148]	; (80035cc <HAL_RCC_OscConfig+0x240>)
 8003538:	4313      	orrs	r3, r2
 800353a:	600b      	str	r3, [r1, #0]
 800353c:	e015      	b.n	800356a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800353e:	4b24      	ldr	r3, [pc, #144]	; (80035d0 <HAL_RCC_OscConfig+0x244>)
 8003540:	2200      	movs	r2, #0
 8003542:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003544:	f7fd fc82 	bl	8000e4c <HAL_GetTick>
 8003548:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800354a:	e008      	b.n	800355e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800354c:	f7fd fc7e 	bl	8000e4c <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	2b02      	cmp	r3, #2
 8003558:	d901      	bls.n	800355e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e187      	b.n	800386e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800355e:	4b1b      	ldr	r3, [pc, #108]	; (80035cc <HAL_RCC_OscConfig+0x240>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0302 	and.w	r3, r3, #2
 8003566:	2b00      	cmp	r3, #0
 8003568:	d1f0      	bne.n	800354c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0308 	and.w	r3, r3, #8
 8003572:	2b00      	cmp	r3, #0
 8003574:	d036      	beq.n	80035e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	695b      	ldr	r3, [r3, #20]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d016      	beq.n	80035ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800357e:	4b15      	ldr	r3, [pc, #84]	; (80035d4 <HAL_RCC_OscConfig+0x248>)
 8003580:	2201      	movs	r2, #1
 8003582:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003584:	f7fd fc62 	bl	8000e4c <HAL_GetTick>
 8003588:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800358a:	e008      	b.n	800359e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800358c:	f7fd fc5e 	bl	8000e4c <HAL_GetTick>
 8003590:	4602      	mov	r2, r0
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	2b02      	cmp	r3, #2
 8003598:	d901      	bls.n	800359e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	e167      	b.n	800386e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800359e:	4b0b      	ldr	r3, [pc, #44]	; (80035cc <HAL_RCC_OscConfig+0x240>)
 80035a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035a2:	f003 0302 	and.w	r3, r3, #2
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d0f0      	beq.n	800358c <HAL_RCC_OscConfig+0x200>
 80035aa:	e01b      	b.n	80035e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035ac:	4b09      	ldr	r3, [pc, #36]	; (80035d4 <HAL_RCC_OscConfig+0x248>)
 80035ae:	2200      	movs	r2, #0
 80035b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035b2:	f7fd fc4b 	bl	8000e4c <HAL_GetTick>
 80035b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035b8:	e00e      	b.n	80035d8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035ba:	f7fd fc47 	bl	8000e4c <HAL_GetTick>
 80035be:	4602      	mov	r2, r0
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	1ad3      	subs	r3, r2, r3
 80035c4:	2b02      	cmp	r3, #2
 80035c6:	d907      	bls.n	80035d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80035c8:	2303      	movs	r3, #3
 80035ca:	e150      	b.n	800386e <HAL_RCC_OscConfig+0x4e2>
 80035cc:	40023800 	.word	0x40023800
 80035d0:	42470000 	.word	0x42470000
 80035d4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035d8:	4b88      	ldr	r3, [pc, #544]	; (80037fc <HAL_RCC_OscConfig+0x470>)
 80035da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035dc:	f003 0302 	and.w	r3, r3, #2
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d1ea      	bne.n	80035ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0304 	and.w	r3, r3, #4
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	f000 8097 	beq.w	8003720 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035f2:	2300      	movs	r3, #0
 80035f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035f6:	4b81      	ldr	r3, [pc, #516]	; (80037fc <HAL_RCC_OscConfig+0x470>)
 80035f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d10f      	bne.n	8003622 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003602:	2300      	movs	r3, #0
 8003604:	60bb      	str	r3, [r7, #8]
 8003606:	4b7d      	ldr	r3, [pc, #500]	; (80037fc <HAL_RCC_OscConfig+0x470>)
 8003608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360a:	4a7c      	ldr	r2, [pc, #496]	; (80037fc <HAL_RCC_OscConfig+0x470>)
 800360c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003610:	6413      	str	r3, [r2, #64]	; 0x40
 8003612:	4b7a      	ldr	r3, [pc, #488]	; (80037fc <HAL_RCC_OscConfig+0x470>)
 8003614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800361a:	60bb      	str	r3, [r7, #8]
 800361c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800361e:	2301      	movs	r3, #1
 8003620:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003622:	4b77      	ldr	r3, [pc, #476]	; (8003800 <HAL_RCC_OscConfig+0x474>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800362a:	2b00      	cmp	r3, #0
 800362c:	d118      	bne.n	8003660 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800362e:	4b74      	ldr	r3, [pc, #464]	; (8003800 <HAL_RCC_OscConfig+0x474>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a73      	ldr	r2, [pc, #460]	; (8003800 <HAL_RCC_OscConfig+0x474>)
 8003634:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003638:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800363a:	f7fd fc07 	bl	8000e4c <HAL_GetTick>
 800363e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003640:	e008      	b.n	8003654 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003642:	f7fd fc03 	bl	8000e4c <HAL_GetTick>
 8003646:	4602      	mov	r2, r0
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	1ad3      	subs	r3, r2, r3
 800364c:	2b02      	cmp	r3, #2
 800364e:	d901      	bls.n	8003654 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003650:	2303      	movs	r3, #3
 8003652:	e10c      	b.n	800386e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003654:	4b6a      	ldr	r3, [pc, #424]	; (8003800 <HAL_RCC_OscConfig+0x474>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800365c:	2b00      	cmp	r3, #0
 800365e:	d0f0      	beq.n	8003642 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	2b01      	cmp	r3, #1
 8003666:	d106      	bne.n	8003676 <HAL_RCC_OscConfig+0x2ea>
 8003668:	4b64      	ldr	r3, [pc, #400]	; (80037fc <HAL_RCC_OscConfig+0x470>)
 800366a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800366c:	4a63      	ldr	r2, [pc, #396]	; (80037fc <HAL_RCC_OscConfig+0x470>)
 800366e:	f043 0301 	orr.w	r3, r3, #1
 8003672:	6713      	str	r3, [r2, #112]	; 0x70
 8003674:	e01c      	b.n	80036b0 <HAL_RCC_OscConfig+0x324>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	2b05      	cmp	r3, #5
 800367c:	d10c      	bne.n	8003698 <HAL_RCC_OscConfig+0x30c>
 800367e:	4b5f      	ldr	r3, [pc, #380]	; (80037fc <HAL_RCC_OscConfig+0x470>)
 8003680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003682:	4a5e      	ldr	r2, [pc, #376]	; (80037fc <HAL_RCC_OscConfig+0x470>)
 8003684:	f043 0304 	orr.w	r3, r3, #4
 8003688:	6713      	str	r3, [r2, #112]	; 0x70
 800368a:	4b5c      	ldr	r3, [pc, #368]	; (80037fc <HAL_RCC_OscConfig+0x470>)
 800368c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800368e:	4a5b      	ldr	r2, [pc, #364]	; (80037fc <HAL_RCC_OscConfig+0x470>)
 8003690:	f043 0301 	orr.w	r3, r3, #1
 8003694:	6713      	str	r3, [r2, #112]	; 0x70
 8003696:	e00b      	b.n	80036b0 <HAL_RCC_OscConfig+0x324>
 8003698:	4b58      	ldr	r3, [pc, #352]	; (80037fc <HAL_RCC_OscConfig+0x470>)
 800369a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800369c:	4a57      	ldr	r2, [pc, #348]	; (80037fc <HAL_RCC_OscConfig+0x470>)
 800369e:	f023 0301 	bic.w	r3, r3, #1
 80036a2:	6713      	str	r3, [r2, #112]	; 0x70
 80036a4:	4b55      	ldr	r3, [pc, #340]	; (80037fc <HAL_RCC_OscConfig+0x470>)
 80036a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036a8:	4a54      	ldr	r2, [pc, #336]	; (80037fc <HAL_RCC_OscConfig+0x470>)
 80036aa:	f023 0304 	bic.w	r3, r3, #4
 80036ae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d015      	beq.n	80036e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036b8:	f7fd fbc8 	bl	8000e4c <HAL_GetTick>
 80036bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036be:	e00a      	b.n	80036d6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036c0:	f7fd fbc4 	bl	8000e4c <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d901      	bls.n	80036d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e0cb      	b.n	800386e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036d6:	4b49      	ldr	r3, [pc, #292]	; (80037fc <HAL_RCC_OscConfig+0x470>)
 80036d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036da:	f003 0302 	and.w	r3, r3, #2
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d0ee      	beq.n	80036c0 <HAL_RCC_OscConfig+0x334>
 80036e2:	e014      	b.n	800370e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036e4:	f7fd fbb2 	bl	8000e4c <HAL_GetTick>
 80036e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036ea:	e00a      	b.n	8003702 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036ec:	f7fd fbae 	bl	8000e4c <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d901      	bls.n	8003702 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e0b5      	b.n	800386e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003702:	4b3e      	ldr	r3, [pc, #248]	; (80037fc <HAL_RCC_OscConfig+0x470>)
 8003704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003706:	f003 0302 	and.w	r3, r3, #2
 800370a:	2b00      	cmp	r3, #0
 800370c:	d1ee      	bne.n	80036ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800370e:	7dfb      	ldrb	r3, [r7, #23]
 8003710:	2b01      	cmp	r3, #1
 8003712:	d105      	bne.n	8003720 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003714:	4b39      	ldr	r3, [pc, #228]	; (80037fc <HAL_RCC_OscConfig+0x470>)
 8003716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003718:	4a38      	ldr	r2, [pc, #224]	; (80037fc <HAL_RCC_OscConfig+0x470>)
 800371a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800371e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	699b      	ldr	r3, [r3, #24]
 8003724:	2b00      	cmp	r3, #0
 8003726:	f000 80a1 	beq.w	800386c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800372a:	4b34      	ldr	r3, [pc, #208]	; (80037fc <HAL_RCC_OscConfig+0x470>)
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	f003 030c 	and.w	r3, r3, #12
 8003732:	2b08      	cmp	r3, #8
 8003734:	d05c      	beq.n	80037f0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	699b      	ldr	r3, [r3, #24]
 800373a:	2b02      	cmp	r3, #2
 800373c:	d141      	bne.n	80037c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800373e:	4b31      	ldr	r3, [pc, #196]	; (8003804 <HAL_RCC_OscConfig+0x478>)
 8003740:	2200      	movs	r2, #0
 8003742:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003744:	f7fd fb82 	bl	8000e4c <HAL_GetTick>
 8003748:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800374a:	e008      	b.n	800375e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800374c:	f7fd fb7e 	bl	8000e4c <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	2b02      	cmp	r3, #2
 8003758:	d901      	bls.n	800375e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e087      	b.n	800386e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800375e:	4b27      	ldr	r3, [pc, #156]	; (80037fc <HAL_RCC_OscConfig+0x470>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d1f0      	bne.n	800374c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	69da      	ldr	r2, [r3, #28]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6a1b      	ldr	r3, [r3, #32]
 8003772:	431a      	orrs	r2, r3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003778:	019b      	lsls	r3, r3, #6
 800377a:	431a      	orrs	r2, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003780:	085b      	lsrs	r3, r3, #1
 8003782:	3b01      	subs	r3, #1
 8003784:	041b      	lsls	r3, r3, #16
 8003786:	431a      	orrs	r2, r3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800378c:	061b      	lsls	r3, r3, #24
 800378e:	491b      	ldr	r1, [pc, #108]	; (80037fc <HAL_RCC_OscConfig+0x470>)
 8003790:	4313      	orrs	r3, r2
 8003792:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003794:	4b1b      	ldr	r3, [pc, #108]	; (8003804 <HAL_RCC_OscConfig+0x478>)
 8003796:	2201      	movs	r2, #1
 8003798:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800379a:	f7fd fb57 	bl	8000e4c <HAL_GetTick>
 800379e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037a0:	e008      	b.n	80037b4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037a2:	f7fd fb53 	bl	8000e4c <HAL_GetTick>
 80037a6:	4602      	mov	r2, r0
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	2b02      	cmp	r3, #2
 80037ae:	d901      	bls.n	80037b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80037b0:	2303      	movs	r3, #3
 80037b2:	e05c      	b.n	800386e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037b4:	4b11      	ldr	r3, [pc, #68]	; (80037fc <HAL_RCC_OscConfig+0x470>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d0f0      	beq.n	80037a2 <HAL_RCC_OscConfig+0x416>
 80037c0:	e054      	b.n	800386c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037c2:	4b10      	ldr	r3, [pc, #64]	; (8003804 <HAL_RCC_OscConfig+0x478>)
 80037c4:	2200      	movs	r2, #0
 80037c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037c8:	f7fd fb40 	bl	8000e4c <HAL_GetTick>
 80037cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037ce:	e008      	b.n	80037e2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037d0:	f7fd fb3c 	bl	8000e4c <HAL_GetTick>
 80037d4:	4602      	mov	r2, r0
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	2b02      	cmp	r3, #2
 80037dc:	d901      	bls.n	80037e2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80037de:	2303      	movs	r3, #3
 80037e0:	e045      	b.n	800386e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037e2:	4b06      	ldr	r3, [pc, #24]	; (80037fc <HAL_RCC_OscConfig+0x470>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d1f0      	bne.n	80037d0 <HAL_RCC_OscConfig+0x444>
 80037ee:	e03d      	b.n	800386c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	699b      	ldr	r3, [r3, #24]
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d107      	bne.n	8003808 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e038      	b.n	800386e <HAL_RCC_OscConfig+0x4e2>
 80037fc:	40023800 	.word	0x40023800
 8003800:	40007000 	.word	0x40007000
 8003804:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003808:	4b1b      	ldr	r3, [pc, #108]	; (8003878 <HAL_RCC_OscConfig+0x4ec>)
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	699b      	ldr	r3, [r3, #24]
 8003812:	2b01      	cmp	r3, #1
 8003814:	d028      	beq.n	8003868 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003820:	429a      	cmp	r2, r3
 8003822:	d121      	bne.n	8003868 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800382e:	429a      	cmp	r2, r3
 8003830:	d11a      	bne.n	8003868 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003832:	68fa      	ldr	r2, [r7, #12]
 8003834:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003838:	4013      	ands	r3, r2
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800383e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003840:	4293      	cmp	r3, r2
 8003842:	d111      	bne.n	8003868 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800384e:	085b      	lsrs	r3, r3, #1
 8003850:	3b01      	subs	r3, #1
 8003852:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003854:	429a      	cmp	r2, r3
 8003856:	d107      	bne.n	8003868 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003862:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003864:	429a      	cmp	r2, r3
 8003866:	d001      	beq.n	800386c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e000      	b.n	800386e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800386c:	2300      	movs	r3, #0
}
 800386e:	4618      	mov	r0, r3
 8003870:	3718      	adds	r7, #24
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	40023800 	.word	0x40023800

0800387c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b084      	sub	sp, #16
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d101      	bne.n	8003890 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	e0cc      	b.n	8003a2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003890:	4b68      	ldr	r3, [pc, #416]	; (8003a34 <HAL_RCC_ClockConfig+0x1b8>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 0307 	and.w	r3, r3, #7
 8003898:	683a      	ldr	r2, [r7, #0]
 800389a:	429a      	cmp	r2, r3
 800389c:	d90c      	bls.n	80038b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800389e:	4b65      	ldr	r3, [pc, #404]	; (8003a34 <HAL_RCC_ClockConfig+0x1b8>)
 80038a0:	683a      	ldr	r2, [r7, #0]
 80038a2:	b2d2      	uxtb	r2, r2
 80038a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038a6:	4b63      	ldr	r3, [pc, #396]	; (8003a34 <HAL_RCC_ClockConfig+0x1b8>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0307 	and.w	r3, r3, #7
 80038ae:	683a      	ldr	r2, [r7, #0]
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d001      	beq.n	80038b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e0b8      	b.n	8003a2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0302 	and.w	r3, r3, #2
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d020      	beq.n	8003906 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0304 	and.w	r3, r3, #4
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d005      	beq.n	80038dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038d0:	4b59      	ldr	r3, [pc, #356]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	4a58      	ldr	r2, [pc, #352]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 80038d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80038da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0308 	and.w	r3, r3, #8
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d005      	beq.n	80038f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038e8:	4b53      	ldr	r3, [pc, #332]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	4a52      	ldr	r2, [pc, #328]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 80038ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80038f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038f4:	4b50      	ldr	r3, [pc, #320]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	494d      	ldr	r1, [pc, #308]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 8003902:	4313      	orrs	r3, r2
 8003904:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0301 	and.w	r3, r3, #1
 800390e:	2b00      	cmp	r3, #0
 8003910:	d044      	beq.n	800399c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	2b01      	cmp	r3, #1
 8003918:	d107      	bne.n	800392a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800391a:	4b47      	ldr	r3, [pc, #284]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d119      	bne.n	800395a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e07f      	b.n	8003a2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	2b02      	cmp	r3, #2
 8003930:	d003      	beq.n	800393a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003936:	2b03      	cmp	r3, #3
 8003938:	d107      	bne.n	800394a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800393a:	4b3f      	ldr	r3, [pc, #252]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d109      	bne.n	800395a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e06f      	b.n	8003a2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800394a:	4b3b      	ldr	r3, [pc, #236]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 0302 	and.w	r3, r3, #2
 8003952:	2b00      	cmp	r3, #0
 8003954:	d101      	bne.n	800395a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e067      	b.n	8003a2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800395a:	4b37      	ldr	r3, [pc, #220]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	f023 0203 	bic.w	r2, r3, #3
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	4934      	ldr	r1, [pc, #208]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 8003968:	4313      	orrs	r3, r2
 800396a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800396c:	f7fd fa6e 	bl	8000e4c <HAL_GetTick>
 8003970:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003972:	e00a      	b.n	800398a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003974:	f7fd fa6a 	bl	8000e4c <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003982:	4293      	cmp	r3, r2
 8003984:	d901      	bls.n	800398a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	e04f      	b.n	8003a2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800398a:	4b2b      	ldr	r3, [pc, #172]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	f003 020c 	and.w	r2, r3, #12
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	429a      	cmp	r2, r3
 800399a:	d1eb      	bne.n	8003974 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800399c:	4b25      	ldr	r3, [pc, #148]	; (8003a34 <HAL_RCC_ClockConfig+0x1b8>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0307 	and.w	r3, r3, #7
 80039a4:	683a      	ldr	r2, [r7, #0]
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d20c      	bcs.n	80039c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039aa:	4b22      	ldr	r3, [pc, #136]	; (8003a34 <HAL_RCC_ClockConfig+0x1b8>)
 80039ac:	683a      	ldr	r2, [r7, #0]
 80039ae:	b2d2      	uxtb	r2, r2
 80039b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039b2:	4b20      	ldr	r3, [pc, #128]	; (8003a34 <HAL_RCC_ClockConfig+0x1b8>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0307 	and.w	r3, r3, #7
 80039ba:	683a      	ldr	r2, [r7, #0]
 80039bc:	429a      	cmp	r2, r3
 80039be:	d001      	beq.n	80039c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e032      	b.n	8003a2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0304 	and.w	r3, r3, #4
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d008      	beq.n	80039e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039d0:	4b19      	ldr	r3, [pc, #100]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	4916      	ldr	r1, [pc, #88]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 80039de:	4313      	orrs	r3, r2
 80039e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0308 	and.w	r3, r3, #8
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d009      	beq.n	8003a02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039ee:	4b12      	ldr	r3, [pc, #72]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	691b      	ldr	r3, [r3, #16]
 80039fa:	00db      	lsls	r3, r3, #3
 80039fc:	490e      	ldr	r1, [pc, #56]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 80039fe:	4313      	orrs	r3, r2
 8003a00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a02:	f000 f821 	bl	8003a48 <HAL_RCC_GetSysClockFreq>
 8003a06:	4602      	mov	r2, r0
 8003a08:	4b0b      	ldr	r3, [pc, #44]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	091b      	lsrs	r3, r3, #4
 8003a0e:	f003 030f 	and.w	r3, r3, #15
 8003a12:	490a      	ldr	r1, [pc, #40]	; (8003a3c <HAL_RCC_ClockConfig+0x1c0>)
 8003a14:	5ccb      	ldrb	r3, [r1, r3]
 8003a16:	fa22 f303 	lsr.w	r3, r2, r3
 8003a1a:	4a09      	ldr	r2, [pc, #36]	; (8003a40 <HAL_RCC_ClockConfig+0x1c4>)
 8003a1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a1e:	4b09      	ldr	r3, [pc, #36]	; (8003a44 <HAL_RCC_ClockConfig+0x1c8>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4618      	mov	r0, r3
 8003a24:	f7fd f9d0 	bl	8000dc8 <HAL_InitTick>

  return HAL_OK;
 8003a28:	2300      	movs	r3, #0
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3710      	adds	r7, #16
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	40023c00 	.word	0x40023c00
 8003a38:	40023800 	.word	0x40023800
 8003a3c:	0801ab20 	.word	0x0801ab20
 8003a40:	20000000 	.word	0x20000000
 8003a44:	20000004 	.word	0x20000004

08003a48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a4c:	b094      	sub	sp, #80	; 0x50
 8003a4e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003a50:	2300      	movs	r3, #0
 8003a52:	647b      	str	r3, [r7, #68]	; 0x44
 8003a54:	2300      	movs	r3, #0
 8003a56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a58:	2300      	movs	r3, #0
 8003a5a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a60:	4b7c      	ldr	r3, [pc, #496]	; (8003c54 <HAL_RCC_GetSysClockFreq+0x20c>)
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	f003 030c 	and.w	r3, r3, #12
 8003a68:	2b08      	cmp	r3, #8
 8003a6a:	d00d      	beq.n	8003a88 <HAL_RCC_GetSysClockFreq+0x40>
 8003a6c:	2b08      	cmp	r3, #8
 8003a6e:	f200 80e7 	bhi.w	8003c40 <HAL_RCC_GetSysClockFreq+0x1f8>
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d002      	beq.n	8003a7c <HAL_RCC_GetSysClockFreq+0x34>
 8003a76:	2b04      	cmp	r3, #4
 8003a78:	d003      	beq.n	8003a82 <HAL_RCC_GetSysClockFreq+0x3a>
 8003a7a:	e0e1      	b.n	8003c40 <HAL_RCC_GetSysClockFreq+0x1f8>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a7c:	4b76      	ldr	r3, [pc, #472]	; (8003c58 <HAL_RCC_GetSysClockFreq+0x210>)
 8003a7e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003a80:	e0e1      	b.n	8003c46 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a82:	4b76      	ldr	r3, [pc, #472]	; (8003c5c <HAL_RCC_GetSysClockFreq+0x214>)
 8003a84:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a86:	e0de      	b.n	8003c46 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a88:	4b72      	ldr	r3, [pc, #456]	; (8003c54 <HAL_RCC_GetSysClockFreq+0x20c>)
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a90:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a92:	4b70      	ldr	r3, [pc, #448]	; (8003c54 <HAL_RCC_GetSysClockFreq+0x20c>)
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d065      	beq.n	8003b6a <HAL_RCC_GetSysClockFreq+0x122>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a9e:	4b6d      	ldr	r3, [pc, #436]	; (8003c54 <HAL_RCC_GetSysClockFreq+0x20c>)
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	099b      	lsrs	r3, r3, #6
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	63bb      	str	r3, [r7, #56]	; 0x38
 8003aa8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ab0:	633b      	str	r3, [r7, #48]	; 0x30
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	637b      	str	r3, [r7, #52]	; 0x34
 8003ab6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003aba:	4622      	mov	r2, r4
 8003abc:	462b      	mov	r3, r5
 8003abe:	f04f 0000 	mov.w	r0, #0
 8003ac2:	f04f 0100 	mov.w	r1, #0
 8003ac6:	0159      	lsls	r1, r3, #5
 8003ac8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003acc:	0150      	lsls	r0, r2, #5
 8003ace:	4602      	mov	r2, r0
 8003ad0:	460b      	mov	r3, r1
 8003ad2:	4621      	mov	r1, r4
 8003ad4:	1a51      	subs	r1, r2, r1
 8003ad6:	6139      	str	r1, [r7, #16]
 8003ad8:	4629      	mov	r1, r5
 8003ada:	eb63 0301 	sbc.w	r3, r3, r1
 8003ade:	617b      	str	r3, [r7, #20]
 8003ae0:	f04f 0200 	mov.w	r2, #0
 8003ae4:	f04f 0300 	mov.w	r3, #0
 8003ae8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003aec:	4659      	mov	r1, fp
 8003aee:	018b      	lsls	r3, r1, #6
 8003af0:	4651      	mov	r1, sl
 8003af2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003af6:	4651      	mov	r1, sl
 8003af8:	018a      	lsls	r2, r1, #6
 8003afa:	46d4      	mov	ip, sl
 8003afc:	ebb2 080c 	subs.w	r8, r2, ip
 8003b00:	4659      	mov	r1, fp
 8003b02:	eb63 0901 	sbc.w	r9, r3, r1
 8003b06:	f04f 0200 	mov.w	r2, #0
 8003b0a:	f04f 0300 	mov.w	r3, #0
 8003b0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b1a:	4690      	mov	r8, r2
 8003b1c:	4699      	mov	r9, r3
 8003b1e:	4623      	mov	r3, r4
 8003b20:	eb18 0303 	adds.w	r3, r8, r3
 8003b24:	60bb      	str	r3, [r7, #8]
 8003b26:	462b      	mov	r3, r5
 8003b28:	eb49 0303 	adc.w	r3, r9, r3
 8003b2c:	60fb      	str	r3, [r7, #12]
 8003b2e:	f04f 0200 	mov.w	r2, #0
 8003b32:	f04f 0300 	mov.w	r3, #0
 8003b36:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003b3a:	4629      	mov	r1, r5
 8003b3c:	024b      	lsls	r3, r1, #9
 8003b3e:	4620      	mov	r0, r4
 8003b40:	4629      	mov	r1, r5
 8003b42:	4604      	mov	r4, r0
 8003b44:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8003b48:	4601      	mov	r1, r0
 8003b4a:	024a      	lsls	r2, r1, #9
 8003b4c:	4610      	mov	r0, r2
 8003b4e:	4619      	mov	r1, r3
 8003b50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b52:	2200      	movs	r2, #0
 8003b54:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b56:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b58:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003b5c:	f7fc fb90 	bl	8000280 <__aeabi_uldivmod>
 8003b60:	4602      	mov	r2, r0
 8003b62:	460b      	mov	r3, r1
 8003b64:	4613      	mov	r3, r2
 8003b66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b68:	e05c      	b.n	8003c24 <HAL_RCC_GetSysClockFreq+0x1dc>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b6a:	4b3a      	ldr	r3, [pc, #232]	; (8003c54 <HAL_RCC_GetSysClockFreq+0x20c>)
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	099b      	lsrs	r3, r3, #6
 8003b70:	2200      	movs	r2, #0
 8003b72:	4618      	mov	r0, r3
 8003b74:	4611      	mov	r1, r2
 8003b76:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003b7a:	623b      	str	r3, [r7, #32]
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	627b      	str	r3, [r7, #36]	; 0x24
 8003b80:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003b84:	4642      	mov	r2, r8
 8003b86:	464b      	mov	r3, r9
 8003b88:	f04f 0000 	mov.w	r0, #0
 8003b8c:	f04f 0100 	mov.w	r1, #0
 8003b90:	0159      	lsls	r1, r3, #5
 8003b92:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b96:	0150      	lsls	r0, r2, #5
 8003b98:	4602      	mov	r2, r0
 8003b9a:	460b      	mov	r3, r1
 8003b9c:	46c4      	mov	ip, r8
 8003b9e:	ebb2 0a0c 	subs.w	sl, r2, ip
 8003ba2:	4640      	mov	r0, r8
 8003ba4:	4649      	mov	r1, r9
 8003ba6:	468c      	mov	ip, r1
 8003ba8:	eb63 0b0c 	sbc.w	fp, r3, ip
 8003bac:	f04f 0200 	mov.w	r2, #0
 8003bb0:	f04f 0300 	mov.w	r3, #0
 8003bb4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003bb8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003bbc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003bc0:	ebb2 040a 	subs.w	r4, r2, sl
 8003bc4:	eb63 050b 	sbc.w	r5, r3, fp
 8003bc8:	f04f 0200 	mov.w	r2, #0
 8003bcc:	f04f 0300 	mov.w	r3, #0
 8003bd0:	00eb      	lsls	r3, r5, #3
 8003bd2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003bd6:	00e2      	lsls	r2, r4, #3
 8003bd8:	4614      	mov	r4, r2
 8003bda:	461d      	mov	r5, r3
 8003bdc:	4603      	mov	r3, r0
 8003bde:	18e3      	adds	r3, r4, r3
 8003be0:	603b      	str	r3, [r7, #0]
 8003be2:	460b      	mov	r3, r1
 8003be4:	eb45 0303 	adc.w	r3, r5, r3
 8003be8:	607b      	str	r3, [r7, #4]
 8003bea:	f04f 0200 	mov.w	r2, #0
 8003bee:	f04f 0300 	mov.w	r3, #0
 8003bf2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003bf6:	4629      	mov	r1, r5
 8003bf8:	028b      	lsls	r3, r1, #10
 8003bfa:	4620      	mov	r0, r4
 8003bfc:	4629      	mov	r1, r5
 8003bfe:	4604      	mov	r4, r0
 8003c00:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8003c04:	4601      	mov	r1, r0
 8003c06:	028a      	lsls	r2, r1, #10
 8003c08:	4610      	mov	r0, r2
 8003c0a:	4619      	mov	r1, r3
 8003c0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c0e:	2200      	movs	r2, #0
 8003c10:	61bb      	str	r3, [r7, #24]
 8003c12:	61fa      	str	r2, [r7, #28]
 8003c14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c18:	f7fc fb32 	bl	8000280 <__aeabi_uldivmod>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	460b      	mov	r3, r1
 8003c20:	4613      	mov	r3, r2
 8003c22:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c24:	4b0b      	ldr	r3, [pc, #44]	; (8003c54 <HAL_RCC_GetSysClockFreq+0x20c>)
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	0c1b      	lsrs	r3, r3, #16
 8003c2a:	f003 0303 	and.w	r3, r3, #3
 8003c2e:	3301      	adds	r3, #1
 8003c30:	005b      	lsls	r3, r3, #1
 8003c32:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003c34:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003c36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c38:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c3c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c3e:	e002      	b.n	8003c46 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c40:	4b05      	ldr	r3, [pc, #20]	; (8003c58 <HAL_RCC_GetSysClockFreq+0x210>)
 8003c42:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3750      	adds	r7, #80	; 0x50
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c52:	bf00      	nop
 8003c54:	40023800 	.word	0x40023800
 8003c58:	00f42400 	.word	0x00f42400
 8003c5c:	007a1200 	.word	0x007a1200

08003c60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c60:	b480      	push	{r7}
 8003c62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c64:	4b02      	ldr	r3, [pc, #8]	; (8003c70 <HAL_RCC_GetHCLKFreq+0x10>)
 8003c66:	681b      	ldr	r3, [r3, #0]
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bc80      	pop	{r7}
 8003c6e:	4770      	bx	lr
 8003c70:	20000000 	.word	0x20000000

08003c74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003c78:	f7ff fff2 	bl	8003c60 <HAL_RCC_GetHCLKFreq>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	4b05      	ldr	r3, [pc, #20]	; (8003c94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	0a9b      	lsrs	r3, r3, #10
 8003c84:	f003 0307 	and.w	r3, r3, #7
 8003c88:	4903      	ldr	r1, [pc, #12]	; (8003c98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c8a:	5ccb      	ldrb	r3, [r1, r3]
 8003c8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	bd80      	pop	{r7, pc}
 8003c94:	40023800 	.word	0x40023800
 8003c98:	0801ab30 	.word	0x0801ab30

08003c9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003ca0:	f7ff ffde 	bl	8003c60 <HAL_RCC_GetHCLKFreq>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	4b05      	ldr	r3, [pc, #20]	; (8003cbc <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	0b5b      	lsrs	r3, r3, #13
 8003cac:	f003 0307 	and.w	r3, r3, #7
 8003cb0:	4903      	ldr	r1, [pc, #12]	; (8003cc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003cb2:	5ccb      	ldrb	r3, [r1, r3]
 8003cb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	bd80      	pop	{r7, pc}
 8003cbc:	40023800 	.word	0x40023800
 8003cc0:	0801ab30 	.word	0x0801ab30

08003cc4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b082      	sub	sp, #8
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d101      	bne.n	8003cd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e03f      	b.n	8003d56 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d106      	bne.n	8003cf0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f7fc fe0e 	bl	800090c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2224      	movs	r2, #36	; 0x24
 8003cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	68da      	ldr	r2, [r3, #12]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d06:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f000 f829 	bl	8003d60 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	691a      	ldr	r2, [r3, #16]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d1c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	695a      	ldr	r2, [r3, #20]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d2c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	68da      	ldr	r2, [r3, #12]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d3c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2200      	movs	r2, #0
 8003d42:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2220      	movs	r2, #32
 8003d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2220      	movs	r2, #32
 8003d50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d54:	2300      	movs	r3, #0
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3708      	adds	r7, #8
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
	...

08003d60 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d64:	b0c0      	sub	sp, #256	; 0x100
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	691b      	ldr	r3, [r3, #16]
 8003d74:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d7c:	68d9      	ldr	r1, [r3, #12]
 8003d7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	ea40 0301 	orr.w	r3, r0, r1
 8003d88:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d8e:	689a      	ldr	r2, [r3, #8]
 8003d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d94:	691b      	ldr	r3, [r3, #16]
 8003d96:	431a      	orrs	r2, r3
 8003d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d9c:	695b      	ldr	r3, [r3, #20]
 8003d9e:	431a      	orrs	r2, r3
 8003da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003da4:	69db      	ldr	r3, [r3, #28]
 8003da6:	4313      	orrs	r3, r2
 8003da8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003db8:	f021 010c 	bic.w	r1, r1, #12
 8003dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003dc6:	430b      	orrs	r3, r1
 8003dc8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003dca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	695b      	ldr	r3, [r3, #20]
 8003dd2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003dd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dda:	6999      	ldr	r1, [r3, #24]
 8003ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	ea40 0301 	orr.w	r3, r0, r1
 8003de6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	4b91      	ldr	r3, [pc, #580]	; (8004034 <UART_SetConfig+0x2d4>)
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d005      	beq.n	8003e00 <UART_SetConfig+0xa0>
 8003df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	4b8f      	ldr	r3, [pc, #572]	; (8004038 <UART_SetConfig+0x2d8>)
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d104      	bne.n	8003e0a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003e00:	f7ff ff4c 	bl	8003c9c <HAL_RCC_GetPCLK2Freq>
 8003e04:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003e08:	e003      	b.n	8003e12 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003e0a:	f7ff ff33 	bl	8003c74 <HAL_RCC_GetPCLK1Freq>
 8003e0e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e16:	69db      	ldr	r3, [r3, #28]
 8003e18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e1c:	f040 8110 	bne.w	8004040 <UART_SetConfig+0x2e0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e24:	2200      	movs	r2, #0
 8003e26:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003e2a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003e2e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003e32:	4622      	mov	r2, r4
 8003e34:	462b      	mov	r3, r5
 8003e36:	1891      	adds	r1, r2, r2
 8003e38:	65b9      	str	r1, [r7, #88]	; 0x58
 8003e3a:	415b      	adcs	r3, r3
 8003e3c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e3e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003e42:	4620      	mov	r0, r4
 8003e44:	4629      	mov	r1, r5
 8003e46:	4604      	mov	r4, r0
 8003e48:	eb12 0804 	adds.w	r8, r2, r4
 8003e4c:	460c      	mov	r4, r1
 8003e4e:	eb43 0904 	adc.w	r9, r3, r4
 8003e52:	f04f 0200 	mov.w	r2, #0
 8003e56:	f04f 0300 	mov.w	r3, #0
 8003e5a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e5e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e62:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e66:	4690      	mov	r8, r2
 8003e68:	4699      	mov	r9, r3
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	eb18 0303 	adds.w	r3, r8, r3
 8003e70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003e74:	460b      	mov	r3, r1
 8003e76:	eb49 0303 	adc.w	r3, r9, r3
 8003e7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003e7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003e8a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003e8e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003e92:	460b      	mov	r3, r1
 8003e94:	18db      	adds	r3, r3, r3
 8003e96:	653b      	str	r3, [r7, #80]	; 0x50
 8003e98:	4613      	mov	r3, r2
 8003e9a:	eb42 0303 	adc.w	r3, r2, r3
 8003e9e:	657b      	str	r3, [r7, #84]	; 0x54
 8003ea0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003ea4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003ea8:	f7fc f9ea 	bl	8000280 <__aeabi_uldivmod>
 8003eac:	4602      	mov	r2, r0
 8003eae:	460b      	mov	r3, r1
 8003eb0:	4b62      	ldr	r3, [pc, #392]	; (800403c <UART_SetConfig+0x2dc>)
 8003eb2:	fba3 2302 	umull	r2, r3, r3, r2
 8003eb6:	095b      	lsrs	r3, r3, #5
 8003eb8:	011c      	lsls	r4, r3, #4
 8003eba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003ec4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003ec8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003ecc:	4642      	mov	r2, r8
 8003ece:	464b      	mov	r3, r9
 8003ed0:	1891      	adds	r1, r2, r2
 8003ed2:	64b9      	str	r1, [r7, #72]	; 0x48
 8003ed4:	415b      	adcs	r3, r3
 8003ed6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ed8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003edc:	4645      	mov	r5, r8
 8003ede:	eb12 0a05 	adds.w	sl, r2, r5
 8003ee2:	4640      	mov	r0, r8
 8003ee4:	4649      	mov	r1, r9
 8003ee6:	460d      	mov	r5, r1
 8003ee8:	eb43 0b05 	adc.w	fp, r3, r5
 8003eec:	f04f 0200 	mov.w	r2, #0
 8003ef0:	f04f 0300 	mov.w	r3, #0
 8003ef4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003ef8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003efc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f00:	4692      	mov	sl, r2
 8003f02:	469b      	mov	fp, r3
 8003f04:	4603      	mov	r3, r0
 8003f06:	eb1a 0303 	adds.w	r3, sl, r3
 8003f0a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003f0e:	460b      	mov	r3, r1
 8003f10:	eb4b 0303 	adc.w	r3, fp, r3
 8003f14:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003f18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003f24:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003f28:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003f2c:	460b      	mov	r3, r1
 8003f2e:	18db      	adds	r3, r3, r3
 8003f30:	643b      	str	r3, [r7, #64]	; 0x40
 8003f32:	4613      	mov	r3, r2
 8003f34:	eb42 0303 	adc.w	r3, r2, r3
 8003f38:	647b      	str	r3, [r7, #68]	; 0x44
 8003f3a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003f3e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003f42:	f7fc f99d 	bl	8000280 <__aeabi_uldivmod>
 8003f46:	4602      	mov	r2, r0
 8003f48:	460b      	mov	r3, r1
 8003f4a:	4611      	mov	r1, r2
 8003f4c:	4b3b      	ldr	r3, [pc, #236]	; (800403c <UART_SetConfig+0x2dc>)
 8003f4e:	fba3 2301 	umull	r2, r3, r3, r1
 8003f52:	095b      	lsrs	r3, r3, #5
 8003f54:	2264      	movs	r2, #100	; 0x64
 8003f56:	fb02 f303 	mul.w	r3, r2, r3
 8003f5a:	1acb      	subs	r3, r1, r3
 8003f5c:	00db      	lsls	r3, r3, #3
 8003f5e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003f62:	4b36      	ldr	r3, [pc, #216]	; (800403c <UART_SetConfig+0x2dc>)
 8003f64:	fba3 2302 	umull	r2, r3, r3, r2
 8003f68:	095b      	lsrs	r3, r3, #5
 8003f6a:	005b      	lsls	r3, r3, #1
 8003f6c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003f70:	441c      	add	r4, r3
 8003f72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f76:	2200      	movs	r2, #0
 8003f78:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003f7c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003f80:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003f84:	4642      	mov	r2, r8
 8003f86:	464b      	mov	r3, r9
 8003f88:	1891      	adds	r1, r2, r2
 8003f8a:	63b9      	str	r1, [r7, #56]	; 0x38
 8003f8c:	415b      	adcs	r3, r3
 8003f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f90:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003f94:	4641      	mov	r1, r8
 8003f96:	1851      	adds	r1, r2, r1
 8003f98:	6339      	str	r1, [r7, #48]	; 0x30
 8003f9a:	4649      	mov	r1, r9
 8003f9c:	414b      	adcs	r3, r1
 8003f9e:	637b      	str	r3, [r7, #52]	; 0x34
 8003fa0:	f04f 0200 	mov.w	r2, #0
 8003fa4:	f04f 0300 	mov.w	r3, #0
 8003fa8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003fac:	4659      	mov	r1, fp
 8003fae:	00cb      	lsls	r3, r1, #3
 8003fb0:	4655      	mov	r5, sl
 8003fb2:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8003fb6:	4651      	mov	r1, sl
 8003fb8:	00ca      	lsls	r2, r1, #3
 8003fba:	4610      	mov	r0, r2
 8003fbc:	4619      	mov	r1, r3
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	4642      	mov	r2, r8
 8003fc2:	189b      	adds	r3, r3, r2
 8003fc4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003fc8:	464b      	mov	r3, r9
 8003fca:	460a      	mov	r2, r1
 8003fcc:	eb42 0303 	adc.w	r3, r2, r3
 8003fd0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003fe0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003fe4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003fe8:	460b      	mov	r3, r1
 8003fea:	18db      	adds	r3, r3, r3
 8003fec:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fee:	4613      	mov	r3, r2
 8003ff0:	eb42 0303 	adc.w	r3, r2, r3
 8003ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ff6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003ffa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003ffe:	f7fc f93f 	bl	8000280 <__aeabi_uldivmod>
 8004002:	4602      	mov	r2, r0
 8004004:	460b      	mov	r3, r1
 8004006:	4b0d      	ldr	r3, [pc, #52]	; (800403c <UART_SetConfig+0x2dc>)
 8004008:	fba3 1302 	umull	r1, r3, r3, r2
 800400c:	095b      	lsrs	r3, r3, #5
 800400e:	2164      	movs	r1, #100	; 0x64
 8004010:	fb01 f303 	mul.w	r3, r1, r3
 8004014:	1ad3      	subs	r3, r2, r3
 8004016:	00db      	lsls	r3, r3, #3
 8004018:	3332      	adds	r3, #50	; 0x32
 800401a:	4a08      	ldr	r2, [pc, #32]	; (800403c <UART_SetConfig+0x2dc>)
 800401c:	fba2 2303 	umull	r2, r3, r2, r3
 8004020:	095b      	lsrs	r3, r3, #5
 8004022:	f003 0207 	and.w	r2, r3, #7
 8004026:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4422      	add	r2, r4
 800402e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004030:	e109      	b.n	8004246 <UART_SetConfig+0x4e6>
 8004032:	bf00      	nop
 8004034:	40011000 	.word	0x40011000
 8004038:	40011400 	.word	0x40011400
 800403c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004040:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004044:	2200      	movs	r2, #0
 8004046:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800404a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800404e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004052:	4642      	mov	r2, r8
 8004054:	464b      	mov	r3, r9
 8004056:	1891      	adds	r1, r2, r2
 8004058:	6239      	str	r1, [r7, #32]
 800405a:	415b      	adcs	r3, r3
 800405c:	627b      	str	r3, [r7, #36]	; 0x24
 800405e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004062:	4641      	mov	r1, r8
 8004064:	1854      	adds	r4, r2, r1
 8004066:	46cc      	mov	ip, r9
 8004068:	eb43 050c 	adc.w	r5, r3, ip
 800406c:	f04f 0200 	mov.w	r2, #0
 8004070:	f04f 0300 	mov.w	r3, #0
 8004074:	00eb      	lsls	r3, r5, #3
 8004076:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800407a:	00e2      	lsls	r2, r4, #3
 800407c:	4614      	mov	r4, r2
 800407e:	461d      	mov	r5, r3
 8004080:	4640      	mov	r0, r8
 8004082:	4649      	mov	r1, r9
 8004084:	4603      	mov	r3, r0
 8004086:	18e3      	adds	r3, r4, r3
 8004088:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800408c:	460b      	mov	r3, r1
 800408e:	eb45 0303 	adc.w	r3, r5, r3
 8004092:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004096:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	2200      	movs	r2, #0
 800409e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80040a2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80040a6:	f04f 0200 	mov.w	r2, #0
 80040aa:	f04f 0300 	mov.w	r3, #0
 80040ae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80040b2:	4629      	mov	r1, r5
 80040b4:	008b      	lsls	r3, r1, #2
 80040b6:	4620      	mov	r0, r4
 80040b8:	4629      	mov	r1, r5
 80040ba:	4604      	mov	r4, r0
 80040bc:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80040c0:	4601      	mov	r1, r0
 80040c2:	008a      	lsls	r2, r1, #2
 80040c4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80040c8:	f7fc f8da 	bl	8000280 <__aeabi_uldivmod>
 80040cc:	4602      	mov	r2, r0
 80040ce:	460b      	mov	r3, r1
 80040d0:	4b60      	ldr	r3, [pc, #384]	; (8004254 <UART_SetConfig+0x4f4>)
 80040d2:	fba3 2302 	umull	r2, r3, r3, r2
 80040d6:	095b      	lsrs	r3, r3, #5
 80040d8:	011c      	lsls	r4, r3, #4
 80040da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040de:	2200      	movs	r2, #0
 80040e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80040e4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80040e8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80040ec:	4642      	mov	r2, r8
 80040ee:	464b      	mov	r3, r9
 80040f0:	1891      	adds	r1, r2, r2
 80040f2:	61b9      	str	r1, [r7, #24]
 80040f4:	415b      	adcs	r3, r3
 80040f6:	61fb      	str	r3, [r7, #28]
 80040f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040fc:	4641      	mov	r1, r8
 80040fe:	1851      	adds	r1, r2, r1
 8004100:	6139      	str	r1, [r7, #16]
 8004102:	4649      	mov	r1, r9
 8004104:	414b      	adcs	r3, r1
 8004106:	617b      	str	r3, [r7, #20]
 8004108:	f04f 0200 	mov.w	r2, #0
 800410c:	f04f 0300 	mov.w	r3, #0
 8004110:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004114:	4659      	mov	r1, fp
 8004116:	00cb      	lsls	r3, r1, #3
 8004118:	4655      	mov	r5, sl
 800411a:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 800411e:	4651      	mov	r1, sl
 8004120:	00ca      	lsls	r2, r1, #3
 8004122:	4610      	mov	r0, r2
 8004124:	4619      	mov	r1, r3
 8004126:	4603      	mov	r3, r0
 8004128:	4642      	mov	r2, r8
 800412a:	189b      	adds	r3, r3, r2
 800412c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004130:	464b      	mov	r3, r9
 8004132:	460a      	mov	r2, r1
 8004134:	eb42 0303 	adc.w	r3, r2, r3
 8004138:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800413c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	2200      	movs	r2, #0
 8004144:	67bb      	str	r3, [r7, #120]	; 0x78
 8004146:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004148:	f04f 0200 	mov.w	r2, #0
 800414c:	f04f 0300 	mov.w	r3, #0
 8004150:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004154:	4649      	mov	r1, r9
 8004156:	008b      	lsls	r3, r1, #2
 8004158:	4645      	mov	r5, r8
 800415a:	ea43 7395 	orr.w	r3, r3, r5, lsr #30
 800415e:	4641      	mov	r1, r8
 8004160:	008a      	lsls	r2, r1, #2
 8004162:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004166:	f7fc f88b 	bl	8000280 <__aeabi_uldivmod>
 800416a:	4602      	mov	r2, r0
 800416c:	460b      	mov	r3, r1
 800416e:	4b39      	ldr	r3, [pc, #228]	; (8004254 <UART_SetConfig+0x4f4>)
 8004170:	fba3 1302 	umull	r1, r3, r3, r2
 8004174:	095b      	lsrs	r3, r3, #5
 8004176:	2164      	movs	r1, #100	; 0x64
 8004178:	fb01 f303 	mul.w	r3, r1, r3
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	011b      	lsls	r3, r3, #4
 8004180:	3332      	adds	r3, #50	; 0x32
 8004182:	4a34      	ldr	r2, [pc, #208]	; (8004254 <UART_SetConfig+0x4f4>)
 8004184:	fba2 2303 	umull	r2, r3, r2, r3
 8004188:	095b      	lsrs	r3, r3, #5
 800418a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800418e:	441c      	add	r4, r3
 8004190:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004194:	2200      	movs	r2, #0
 8004196:	673b      	str	r3, [r7, #112]	; 0x70
 8004198:	677a      	str	r2, [r7, #116]	; 0x74
 800419a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800419e:	4642      	mov	r2, r8
 80041a0:	464b      	mov	r3, r9
 80041a2:	1891      	adds	r1, r2, r2
 80041a4:	60b9      	str	r1, [r7, #8]
 80041a6:	415b      	adcs	r3, r3
 80041a8:	60fb      	str	r3, [r7, #12]
 80041aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80041ae:	4641      	mov	r1, r8
 80041b0:	1851      	adds	r1, r2, r1
 80041b2:	6039      	str	r1, [r7, #0]
 80041b4:	4649      	mov	r1, r9
 80041b6:	414b      	adcs	r3, r1
 80041b8:	607b      	str	r3, [r7, #4]
 80041ba:	f04f 0200 	mov.w	r2, #0
 80041be:	f04f 0300 	mov.w	r3, #0
 80041c2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80041c6:	4659      	mov	r1, fp
 80041c8:	00cb      	lsls	r3, r1, #3
 80041ca:	4655      	mov	r5, sl
 80041cc:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 80041d0:	4651      	mov	r1, sl
 80041d2:	00ca      	lsls	r2, r1, #3
 80041d4:	4610      	mov	r0, r2
 80041d6:	4619      	mov	r1, r3
 80041d8:	4603      	mov	r3, r0
 80041da:	4642      	mov	r2, r8
 80041dc:	189b      	adds	r3, r3, r2
 80041de:	66bb      	str	r3, [r7, #104]	; 0x68
 80041e0:	464b      	mov	r3, r9
 80041e2:	460a      	mov	r2, r1
 80041e4:	eb42 0303 	adc.w	r3, r2, r3
 80041e8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80041ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	663b      	str	r3, [r7, #96]	; 0x60
 80041f4:	667a      	str	r2, [r7, #100]	; 0x64
 80041f6:	f04f 0200 	mov.w	r2, #0
 80041fa:	f04f 0300 	mov.w	r3, #0
 80041fe:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004202:	4649      	mov	r1, r9
 8004204:	008b      	lsls	r3, r1, #2
 8004206:	4645      	mov	r5, r8
 8004208:	ea43 7395 	orr.w	r3, r3, r5, lsr #30
 800420c:	4641      	mov	r1, r8
 800420e:	008a      	lsls	r2, r1, #2
 8004210:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004214:	f7fc f834 	bl	8000280 <__aeabi_uldivmod>
 8004218:	4602      	mov	r2, r0
 800421a:	460b      	mov	r3, r1
 800421c:	4b0d      	ldr	r3, [pc, #52]	; (8004254 <UART_SetConfig+0x4f4>)
 800421e:	fba3 1302 	umull	r1, r3, r3, r2
 8004222:	095b      	lsrs	r3, r3, #5
 8004224:	2164      	movs	r1, #100	; 0x64
 8004226:	fb01 f303 	mul.w	r3, r1, r3
 800422a:	1ad3      	subs	r3, r2, r3
 800422c:	011b      	lsls	r3, r3, #4
 800422e:	3332      	adds	r3, #50	; 0x32
 8004230:	4a08      	ldr	r2, [pc, #32]	; (8004254 <UART_SetConfig+0x4f4>)
 8004232:	fba2 2303 	umull	r2, r3, r2, r3
 8004236:	095b      	lsrs	r3, r3, #5
 8004238:	f003 020f 	and.w	r2, r3, #15
 800423c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4422      	add	r2, r4
 8004244:	609a      	str	r2, [r3, #8]
}
 8004246:	bf00      	nop
 8004248:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800424c:	46bd      	mov	sp, r7
 800424e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004252:	bf00      	nop
 8004254:	51eb851f 	.word	0x51eb851f

08004258 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004258:	b480      	push	{r7}
 800425a:	b087      	sub	sp, #28
 800425c:	af00      	add	r7, sp, #0
 800425e:	60f8      	str	r0, [r7, #12]
 8004260:	60b9      	str	r1, [r7, #8]
 8004262:	4613      	mov	r3, r2
 8004264:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004266:	79fb      	ldrb	r3, [r7, #7]
 8004268:	2b02      	cmp	r3, #2
 800426a:	d165      	bne.n	8004338 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	4a41      	ldr	r2, [pc, #260]	; (8004374 <USB_SetTurnaroundTime+0x11c>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d906      	bls.n	8004282 <USB_SetTurnaroundTime+0x2a>
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	4a40      	ldr	r2, [pc, #256]	; (8004378 <USB_SetTurnaroundTime+0x120>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d202      	bcs.n	8004282 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800427c:	230f      	movs	r3, #15
 800427e:	617b      	str	r3, [r7, #20]
 8004280:	e062      	b.n	8004348 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	4a3c      	ldr	r2, [pc, #240]	; (8004378 <USB_SetTurnaroundTime+0x120>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d306      	bcc.n	8004298 <USB_SetTurnaroundTime+0x40>
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	4a3b      	ldr	r2, [pc, #236]	; (800437c <USB_SetTurnaroundTime+0x124>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d202      	bcs.n	8004298 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004292:	230e      	movs	r3, #14
 8004294:	617b      	str	r3, [r7, #20]
 8004296:	e057      	b.n	8004348 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	4a38      	ldr	r2, [pc, #224]	; (800437c <USB_SetTurnaroundTime+0x124>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d306      	bcc.n	80042ae <USB_SetTurnaroundTime+0x56>
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	4a37      	ldr	r2, [pc, #220]	; (8004380 <USB_SetTurnaroundTime+0x128>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d202      	bcs.n	80042ae <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80042a8:	230d      	movs	r3, #13
 80042aa:	617b      	str	r3, [r7, #20]
 80042ac:	e04c      	b.n	8004348 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	4a33      	ldr	r2, [pc, #204]	; (8004380 <USB_SetTurnaroundTime+0x128>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d306      	bcc.n	80042c4 <USB_SetTurnaroundTime+0x6c>
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	4a32      	ldr	r2, [pc, #200]	; (8004384 <USB_SetTurnaroundTime+0x12c>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d802      	bhi.n	80042c4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80042be:	230c      	movs	r3, #12
 80042c0:	617b      	str	r3, [r7, #20]
 80042c2:	e041      	b.n	8004348 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	4a2f      	ldr	r2, [pc, #188]	; (8004384 <USB_SetTurnaroundTime+0x12c>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d906      	bls.n	80042da <USB_SetTurnaroundTime+0x82>
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	4a2e      	ldr	r2, [pc, #184]	; (8004388 <USB_SetTurnaroundTime+0x130>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d802      	bhi.n	80042da <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80042d4:	230b      	movs	r3, #11
 80042d6:	617b      	str	r3, [r7, #20]
 80042d8:	e036      	b.n	8004348 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	4a2a      	ldr	r2, [pc, #168]	; (8004388 <USB_SetTurnaroundTime+0x130>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d906      	bls.n	80042f0 <USB_SetTurnaroundTime+0x98>
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	4a29      	ldr	r2, [pc, #164]	; (800438c <USB_SetTurnaroundTime+0x134>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d802      	bhi.n	80042f0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80042ea:	230a      	movs	r3, #10
 80042ec:	617b      	str	r3, [r7, #20]
 80042ee:	e02b      	b.n	8004348 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	4a26      	ldr	r2, [pc, #152]	; (800438c <USB_SetTurnaroundTime+0x134>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d906      	bls.n	8004306 <USB_SetTurnaroundTime+0xae>
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	4a25      	ldr	r2, [pc, #148]	; (8004390 <USB_SetTurnaroundTime+0x138>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d202      	bcs.n	8004306 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004300:	2309      	movs	r3, #9
 8004302:	617b      	str	r3, [r7, #20]
 8004304:	e020      	b.n	8004348 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	4a21      	ldr	r2, [pc, #132]	; (8004390 <USB_SetTurnaroundTime+0x138>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d306      	bcc.n	800431c <USB_SetTurnaroundTime+0xc4>
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	4a20      	ldr	r2, [pc, #128]	; (8004394 <USB_SetTurnaroundTime+0x13c>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d802      	bhi.n	800431c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004316:	2308      	movs	r3, #8
 8004318:	617b      	str	r3, [r7, #20]
 800431a:	e015      	b.n	8004348 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	4a1d      	ldr	r2, [pc, #116]	; (8004394 <USB_SetTurnaroundTime+0x13c>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d906      	bls.n	8004332 <USB_SetTurnaroundTime+0xda>
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	4a1c      	ldr	r2, [pc, #112]	; (8004398 <USB_SetTurnaroundTime+0x140>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d202      	bcs.n	8004332 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800432c:	2307      	movs	r3, #7
 800432e:	617b      	str	r3, [r7, #20]
 8004330:	e00a      	b.n	8004348 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004332:	2306      	movs	r3, #6
 8004334:	617b      	str	r3, [r7, #20]
 8004336:	e007      	b.n	8004348 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004338:	79fb      	ldrb	r3, [r7, #7]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d102      	bne.n	8004344 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800433e:	2309      	movs	r3, #9
 8004340:	617b      	str	r3, [r7, #20]
 8004342:	e001      	b.n	8004348 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004344:	2309      	movs	r3, #9
 8004346:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	68da      	ldr	r2, [r3, #12]
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	029b      	lsls	r3, r3, #10
 800435c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004360:	431a      	orrs	r2, r3
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004366:	2300      	movs	r3, #0
}
 8004368:	4618      	mov	r0, r3
 800436a:	371c      	adds	r7, #28
 800436c:	46bd      	mov	sp, r7
 800436e:	bc80      	pop	{r7}
 8004370:	4770      	bx	lr
 8004372:	bf00      	nop
 8004374:	00d8acbf 	.word	0x00d8acbf
 8004378:	00e4e1c0 	.word	0x00e4e1c0
 800437c:	00f42400 	.word	0x00f42400
 8004380:	01067380 	.word	0x01067380
 8004384:	011a499f 	.word	0x011a499f
 8004388:	01312cff 	.word	0x01312cff
 800438c:	014ca43f 	.word	0x014ca43f
 8004390:	016e3600 	.word	0x016e3600
 8004394:	01a6ab1f 	.word	0x01a6ab1f
 8004398:	01e84800 	.word	0x01e84800

0800439c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800439c:	b480      	push	{r7}
 800439e:	b085      	sub	sp, #20
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
 80043a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80043a6:	2300      	movs	r3, #0
 80043a8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	3301      	adds	r3, #1
 80043ae:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	4a13      	ldr	r2, [pc, #76]	; (8004400 <USB_FlushTxFifo+0x64>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d901      	bls.n	80043bc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80043b8:	2303      	movs	r3, #3
 80043ba:	e01b      	b.n	80043f4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	691b      	ldr	r3, [r3, #16]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	daf2      	bge.n	80043aa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80043c4:	2300      	movs	r3, #0
 80043c6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	019b      	lsls	r3, r3, #6
 80043cc:	f043 0220 	orr.w	r2, r3, #32
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	3301      	adds	r3, #1
 80043d8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	4a08      	ldr	r2, [pc, #32]	; (8004400 <USB_FlushTxFifo+0x64>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d901      	bls.n	80043e6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80043e2:	2303      	movs	r3, #3
 80043e4:	e006      	b.n	80043f4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	691b      	ldr	r3, [r3, #16]
 80043ea:	f003 0320 	and.w	r3, r3, #32
 80043ee:	2b20      	cmp	r3, #32
 80043f0:	d0f0      	beq.n	80043d4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80043f2:	2300      	movs	r3, #0
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	3714      	adds	r7, #20
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bc80      	pop	{r7}
 80043fc:	4770      	bx	lr
 80043fe:	bf00      	nop
 8004400:	00030d40 	.word	0x00030d40

08004404 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004404:	b480      	push	{r7}
 8004406:	b087      	sub	sp, #28
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	f003 0306 	and.w	r3, r3, #6
 800441c:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d102      	bne.n	800442a <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004424:	2300      	movs	r3, #0
 8004426:	75fb      	strb	r3, [r7, #23]
 8004428:	e00a      	b.n	8004440 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2b02      	cmp	r3, #2
 800442e:	d002      	beq.n	8004436 <USB_GetDevSpeed+0x32>
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2b06      	cmp	r3, #6
 8004434:	d102      	bne.n	800443c <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004436:	2302      	movs	r3, #2
 8004438:	75fb      	strb	r3, [r7, #23]
 800443a:	e001      	b.n	8004440 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800443c:	230f      	movs	r3, #15
 800443e:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004440:	7dfb      	ldrb	r3, [r7, #23]
}
 8004442:	4618      	mov	r0, r3
 8004444:	371c      	adds	r7, #28
 8004446:	46bd      	mov	sp, r7
 8004448:	bc80      	pop	{r7}
 800444a:	4770      	bx	lr

0800444c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800444c:	b480      	push	{r7}
 800444e:	b085      	sub	sp, #20
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	781b      	ldrb	r3, [r3, #0]
 800445e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	785b      	ldrb	r3, [r3, #1]
 8004464:	2b01      	cmp	r3, #1
 8004466:	d13a      	bne.n	80044de <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800446e:	69da      	ldr	r2, [r3, #28]
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	781b      	ldrb	r3, [r3, #0]
 8004474:	f003 030f 	and.w	r3, r3, #15
 8004478:	2101      	movs	r1, #1
 800447a:	fa01 f303 	lsl.w	r3, r1, r3
 800447e:	b29b      	uxth	r3, r3
 8004480:	68f9      	ldr	r1, [r7, #12]
 8004482:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004486:	4313      	orrs	r3, r2
 8004488:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	015a      	lsls	r2, r3, #5
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	4413      	add	r3, r2
 8004492:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800449c:	2b00      	cmp	r3, #0
 800449e:	d155      	bne.n	800454c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	015a      	lsls	r2, r3, #5
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	4413      	add	r3, r2
 80044a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	791b      	ldrb	r3, [r3, #4]
 80044ba:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80044bc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	059b      	lsls	r3, r3, #22
 80044c2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80044c4:	4313      	orrs	r3, r2
 80044c6:	68ba      	ldr	r2, [r7, #8]
 80044c8:	0151      	lsls	r1, r2, #5
 80044ca:	68fa      	ldr	r2, [r7, #12]
 80044cc:	440a      	add	r2, r1
 80044ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044da:	6013      	str	r3, [r2, #0]
 80044dc:	e036      	b.n	800454c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044e4:	69da      	ldr	r2, [r3, #28]
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	781b      	ldrb	r3, [r3, #0]
 80044ea:	f003 030f 	and.w	r3, r3, #15
 80044ee:	2101      	movs	r1, #1
 80044f0:	fa01 f303 	lsl.w	r3, r1, r3
 80044f4:	041b      	lsls	r3, r3, #16
 80044f6:	68f9      	ldr	r1, [r7, #12]
 80044f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80044fc:	4313      	orrs	r3, r2
 80044fe:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	015a      	lsls	r2, r3, #5
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	4413      	add	r3, r2
 8004508:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004512:	2b00      	cmp	r3, #0
 8004514:	d11a      	bne.n	800454c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	015a      	lsls	r2, r3, #5
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	4413      	add	r3, r2
 800451e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	68db      	ldr	r3, [r3, #12]
 8004528:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	791b      	ldrb	r3, [r3, #4]
 8004530:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004532:	430b      	orrs	r3, r1
 8004534:	4313      	orrs	r3, r2
 8004536:	68ba      	ldr	r2, [r7, #8]
 8004538:	0151      	lsls	r1, r2, #5
 800453a:	68fa      	ldr	r2, [r7, #12]
 800453c:	440a      	add	r2, r1
 800453e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004542:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004546:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800454a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800454c:	2300      	movs	r3, #0
}
 800454e:	4618      	mov	r0, r3
 8004550:	3714      	adds	r7, #20
 8004552:	46bd      	mov	sp, r7
 8004554:	bc80      	pop	{r7}
 8004556:	4770      	bx	lr

08004558 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b08a      	sub	sp, #40	; 0x28
 800455c:	af02      	add	r7, sp, #8
 800455e:	60f8      	str	r0, [r7, #12]
 8004560:	60b9      	str	r1, [r7, #8]
 8004562:	4613      	mov	r3, r2
 8004564:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	781b      	ldrb	r3, [r3, #0]
 800456e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	785b      	ldrb	r3, [r3, #1]
 8004574:	2b01      	cmp	r3, #1
 8004576:	f040 815c 	bne.w	8004832 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	699b      	ldr	r3, [r3, #24]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d132      	bne.n	80045e8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004582:	69bb      	ldr	r3, [r7, #24]
 8004584:	015a      	lsls	r2, r3, #5
 8004586:	69fb      	ldr	r3, [r7, #28]
 8004588:	4413      	add	r3, r2
 800458a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800458e:	691b      	ldr	r3, [r3, #16]
 8004590:	69ba      	ldr	r2, [r7, #24]
 8004592:	0151      	lsls	r1, r2, #5
 8004594:	69fa      	ldr	r2, [r7, #28]
 8004596:	440a      	add	r2, r1
 8004598:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800459c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80045a0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80045a4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80045a6:	69bb      	ldr	r3, [r7, #24]
 80045a8:	015a      	lsls	r2, r3, #5
 80045aa:	69fb      	ldr	r3, [r7, #28]
 80045ac:	4413      	add	r3, r2
 80045ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045b2:	691b      	ldr	r3, [r3, #16]
 80045b4:	69ba      	ldr	r2, [r7, #24]
 80045b6:	0151      	lsls	r1, r2, #5
 80045b8:	69fa      	ldr	r2, [r7, #28]
 80045ba:	440a      	add	r2, r1
 80045bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80045c4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80045c6:	69bb      	ldr	r3, [r7, #24]
 80045c8:	015a      	lsls	r2, r3, #5
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	4413      	add	r3, r2
 80045ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045d2:	691b      	ldr	r3, [r3, #16]
 80045d4:	69ba      	ldr	r2, [r7, #24]
 80045d6:	0151      	lsls	r1, r2, #5
 80045d8:	69fa      	ldr	r2, [r7, #28]
 80045da:	440a      	add	r2, r1
 80045dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045e0:	0cdb      	lsrs	r3, r3, #19
 80045e2:	04db      	lsls	r3, r3, #19
 80045e4:	6113      	str	r3, [r2, #16]
 80045e6:	e074      	b.n	80046d2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80045e8:	69bb      	ldr	r3, [r7, #24]
 80045ea:	015a      	lsls	r2, r3, #5
 80045ec:	69fb      	ldr	r3, [r7, #28]
 80045ee:	4413      	add	r3, r2
 80045f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045f4:	691b      	ldr	r3, [r3, #16]
 80045f6:	69ba      	ldr	r2, [r7, #24]
 80045f8:	0151      	lsls	r1, r2, #5
 80045fa:	69fa      	ldr	r2, [r7, #28]
 80045fc:	440a      	add	r2, r1
 80045fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004602:	0cdb      	lsrs	r3, r3, #19
 8004604:	04db      	lsls	r3, r3, #19
 8004606:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004608:	69bb      	ldr	r3, [r7, #24]
 800460a:	015a      	lsls	r2, r3, #5
 800460c:	69fb      	ldr	r3, [r7, #28]
 800460e:	4413      	add	r3, r2
 8004610:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004614:	691b      	ldr	r3, [r3, #16]
 8004616:	69ba      	ldr	r2, [r7, #24]
 8004618:	0151      	lsls	r1, r2, #5
 800461a:	69fa      	ldr	r2, [r7, #28]
 800461c:	440a      	add	r2, r1
 800461e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004622:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004626:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800462a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800462c:	69bb      	ldr	r3, [r7, #24]
 800462e:	015a      	lsls	r2, r3, #5
 8004630:	69fb      	ldr	r3, [r7, #28]
 8004632:	4413      	add	r3, r2
 8004634:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004638:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	6999      	ldr	r1, [r3, #24]
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	68db      	ldr	r3, [r3, #12]
 8004642:	440b      	add	r3, r1
 8004644:	1e59      	subs	r1, r3, #1
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	68db      	ldr	r3, [r3, #12]
 800464a:	fbb1 f3f3 	udiv	r3, r1, r3
 800464e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004650:	4b9d      	ldr	r3, [pc, #628]	; (80048c8 <USB_EPStartXfer+0x370>)
 8004652:	400b      	ands	r3, r1
 8004654:	69b9      	ldr	r1, [r7, #24]
 8004656:	0148      	lsls	r0, r1, #5
 8004658:	69f9      	ldr	r1, [r7, #28]
 800465a:	4401      	add	r1, r0
 800465c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004660:	4313      	orrs	r3, r2
 8004662:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004664:	69bb      	ldr	r3, [r7, #24]
 8004666:	015a      	lsls	r2, r3, #5
 8004668:	69fb      	ldr	r3, [r7, #28]
 800466a:	4413      	add	r3, r2
 800466c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004670:	691a      	ldr	r2, [r3, #16]
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	699b      	ldr	r3, [r3, #24]
 8004676:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800467a:	69b9      	ldr	r1, [r7, #24]
 800467c:	0148      	lsls	r0, r1, #5
 800467e:	69f9      	ldr	r1, [r7, #28]
 8004680:	4401      	add	r1, r0
 8004682:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004686:	4313      	orrs	r3, r2
 8004688:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	791b      	ldrb	r3, [r3, #4]
 800468e:	2b01      	cmp	r3, #1
 8004690:	d11f      	bne.n	80046d2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004692:	69bb      	ldr	r3, [r7, #24]
 8004694:	015a      	lsls	r2, r3, #5
 8004696:	69fb      	ldr	r3, [r7, #28]
 8004698:	4413      	add	r3, r2
 800469a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800469e:	691b      	ldr	r3, [r3, #16]
 80046a0:	69ba      	ldr	r2, [r7, #24]
 80046a2:	0151      	lsls	r1, r2, #5
 80046a4:	69fa      	ldr	r2, [r7, #28]
 80046a6:	440a      	add	r2, r1
 80046a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046ac:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80046b0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80046b2:	69bb      	ldr	r3, [r7, #24]
 80046b4:	015a      	lsls	r2, r3, #5
 80046b6:	69fb      	ldr	r3, [r7, #28]
 80046b8:	4413      	add	r3, r2
 80046ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046be:	691b      	ldr	r3, [r3, #16]
 80046c0:	69ba      	ldr	r2, [r7, #24]
 80046c2:	0151      	lsls	r1, r2, #5
 80046c4:	69fa      	ldr	r2, [r7, #28]
 80046c6:	440a      	add	r2, r1
 80046c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046cc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80046d0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80046d2:	79fb      	ldrb	r3, [r7, #7]
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d14b      	bne.n	8004770 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	695b      	ldr	r3, [r3, #20]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d009      	beq.n	80046f4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80046e0:	69bb      	ldr	r3, [r7, #24]
 80046e2:	015a      	lsls	r2, r3, #5
 80046e4:	69fb      	ldr	r3, [r7, #28]
 80046e6:	4413      	add	r3, r2
 80046e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046ec:	461a      	mov	r2, r3
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	695b      	ldr	r3, [r3, #20]
 80046f2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	791b      	ldrb	r3, [r3, #4]
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d128      	bne.n	800474e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80046fc:	69fb      	ldr	r3, [r7, #28]
 80046fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004708:	2b00      	cmp	r3, #0
 800470a:	d110      	bne.n	800472e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800470c:	69bb      	ldr	r3, [r7, #24]
 800470e:	015a      	lsls	r2, r3, #5
 8004710:	69fb      	ldr	r3, [r7, #28]
 8004712:	4413      	add	r3, r2
 8004714:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	69ba      	ldr	r2, [r7, #24]
 800471c:	0151      	lsls	r1, r2, #5
 800471e:	69fa      	ldr	r2, [r7, #28]
 8004720:	440a      	add	r2, r1
 8004722:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004726:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800472a:	6013      	str	r3, [r2, #0]
 800472c:	e00f      	b.n	800474e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800472e:	69bb      	ldr	r3, [r7, #24]
 8004730:	015a      	lsls	r2, r3, #5
 8004732:	69fb      	ldr	r3, [r7, #28]
 8004734:	4413      	add	r3, r2
 8004736:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	69ba      	ldr	r2, [r7, #24]
 800473e:	0151      	lsls	r1, r2, #5
 8004740:	69fa      	ldr	r2, [r7, #28]
 8004742:	440a      	add	r2, r1
 8004744:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004748:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800474c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800474e:	69bb      	ldr	r3, [r7, #24]
 8004750:	015a      	lsls	r2, r3, #5
 8004752:	69fb      	ldr	r3, [r7, #28]
 8004754:	4413      	add	r3, r2
 8004756:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	69ba      	ldr	r2, [r7, #24]
 800475e:	0151      	lsls	r1, r2, #5
 8004760:	69fa      	ldr	r2, [r7, #28]
 8004762:	440a      	add	r2, r1
 8004764:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004768:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800476c:	6013      	str	r3, [r2, #0]
 800476e:	e133      	b.n	80049d8 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004770:	69bb      	ldr	r3, [r7, #24]
 8004772:	015a      	lsls	r2, r3, #5
 8004774:	69fb      	ldr	r3, [r7, #28]
 8004776:	4413      	add	r3, r2
 8004778:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	69ba      	ldr	r2, [r7, #24]
 8004780:	0151      	lsls	r1, r2, #5
 8004782:	69fa      	ldr	r2, [r7, #28]
 8004784:	440a      	add	r2, r1
 8004786:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800478a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800478e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	791b      	ldrb	r3, [r3, #4]
 8004794:	2b01      	cmp	r3, #1
 8004796:	d015      	beq.n	80047c4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	699b      	ldr	r3, [r3, #24]
 800479c:	2b00      	cmp	r3, #0
 800479e:	f000 811b 	beq.w	80049d8 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	781b      	ldrb	r3, [r3, #0]
 80047ae:	f003 030f 	and.w	r3, r3, #15
 80047b2:	2101      	movs	r1, #1
 80047b4:	fa01 f303 	lsl.w	r3, r1, r3
 80047b8:	69f9      	ldr	r1, [r7, #28]
 80047ba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80047be:	4313      	orrs	r3, r2
 80047c0:	634b      	str	r3, [r1, #52]	; 0x34
 80047c2:	e109      	b.n	80049d8 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80047c4:	69fb      	ldr	r3, [r7, #28]
 80047c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d110      	bne.n	80047f6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80047d4:	69bb      	ldr	r3, [r7, #24]
 80047d6:	015a      	lsls	r2, r3, #5
 80047d8:	69fb      	ldr	r3, [r7, #28]
 80047da:	4413      	add	r3, r2
 80047dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	69ba      	ldr	r2, [r7, #24]
 80047e4:	0151      	lsls	r1, r2, #5
 80047e6:	69fa      	ldr	r2, [r7, #28]
 80047e8:	440a      	add	r2, r1
 80047ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047ee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80047f2:	6013      	str	r3, [r2, #0]
 80047f4:	e00f      	b.n	8004816 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80047f6:	69bb      	ldr	r3, [r7, #24]
 80047f8:	015a      	lsls	r2, r3, #5
 80047fa:	69fb      	ldr	r3, [r7, #28]
 80047fc:	4413      	add	r3, r2
 80047fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	69ba      	ldr	r2, [r7, #24]
 8004806:	0151      	lsls	r1, r2, #5
 8004808:	69fa      	ldr	r2, [r7, #28]
 800480a:	440a      	add	r2, r1
 800480c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004810:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004814:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	6919      	ldr	r1, [r3, #16]
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	781a      	ldrb	r2, [r3, #0]
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	699b      	ldr	r3, [r3, #24]
 8004822:	b298      	uxth	r0, r3
 8004824:	79fb      	ldrb	r3, [r7, #7]
 8004826:	9300      	str	r3, [sp, #0]
 8004828:	4603      	mov	r3, r0
 800482a:	68f8      	ldr	r0, [r7, #12]
 800482c:	f000 fadc 	bl	8004de8 <USB_WritePacket>
 8004830:	e0d2      	b.n	80049d8 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004832:	69bb      	ldr	r3, [r7, #24]
 8004834:	015a      	lsls	r2, r3, #5
 8004836:	69fb      	ldr	r3, [r7, #28]
 8004838:	4413      	add	r3, r2
 800483a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800483e:	691b      	ldr	r3, [r3, #16]
 8004840:	69ba      	ldr	r2, [r7, #24]
 8004842:	0151      	lsls	r1, r2, #5
 8004844:	69fa      	ldr	r2, [r7, #28]
 8004846:	440a      	add	r2, r1
 8004848:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800484c:	0cdb      	lsrs	r3, r3, #19
 800484e:	04db      	lsls	r3, r3, #19
 8004850:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004852:	69bb      	ldr	r3, [r7, #24]
 8004854:	015a      	lsls	r2, r3, #5
 8004856:	69fb      	ldr	r3, [r7, #28]
 8004858:	4413      	add	r3, r2
 800485a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800485e:	691b      	ldr	r3, [r3, #16]
 8004860:	69ba      	ldr	r2, [r7, #24]
 8004862:	0151      	lsls	r1, r2, #5
 8004864:	69fa      	ldr	r2, [r7, #28]
 8004866:	440a      	add	r2, r1
 8004868:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800486c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004870:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004874:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	699b      	ldr	r3, [r3, #24]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d126      	bne.n	80048cc <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800487e:	69bb      	ldr	r3, [r7, #24]
 8004880:	015a      	lsls	r2, r3, #5
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	4413      	add	r3, r2
 8004886:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800488a:	691a      	ldr	r2, [r3, #16]
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004894:	69b9      	ldr	r1, [r7, #24]
 8004896:	0148      	lsls	r0, r1, #5
 8004898:	69f9      	ldr	r1, [r7, #28]
 800489a:	4401      	add	r1, r0
 800489c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80048a0:	4313      	orrs	r3, r2
 80048a2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80048a4:	69bb      	ldr	r3, [r7, #24]
 80048a6:	015a      	lsls	r2, r3, #5
 80048a8:	69fb      	ldr	r3, [r7, #28]
 80048aa:	4413      	add	r3, r2
 80048ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048b0:	691b      	ldr	r3, [r3, #16]
 80048b2:	69ba      	ldr	r2, [r7, #24]
 80048b4:	0151      	lsls	r1, r2, #5
 80048b6:	69fa      	ldr	r2, [r7, #28]
 80048b8:	440a      	add	r2, r1
 80048ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048be:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80048c2:	6113      	str	r3, [r2, #16]
 80048c4:	e03a      	b.n	800493c <USB_EPStartXfer+0x3e4>
 80048c6:	bf00      	nop
 80048c8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	699a      	ldr	r2, [r3, #24]
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	68db      	ldr	r3, [r3, #12]
 80048d4:	4413      	add	r3, r2
 80048d6:	1e5a      	subs	r2, r3, #1
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80048e0:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	68db      	ldr	r3, [r3, #12]
 80048e6:	8afa      	ldrh	r2, [r7, #22]
 80048e8:	fb03 f202 	mul.w	r2, r3, r2
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80048f0:	69bb      	ldr	r3, [r7, #24]
 80048f2:	015a      	lsls	r2, r3, #5
 80048f4:	69fb      	ldr	r3, [r7, #28]
 80048f6:	4413      	add	r3, r2
 80048f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048fc:	691a      	ldr	r2, [r3, #16]
 80048fe:	8afb      	ldrh	r3, [r7, #22]
 8004900:	04d9      	lsls	r1, r3, #19
 8004902:	4b38      	ldr	r3, [pc, #224]	; (80049e4 <USB_EPStartXfer+0x48c>)
 8004904:	400b      	ands	r3, r1
 8004906:	69b9      	ldr	r1, [r7, #24]
 8004908:	0148      	lsls	r0, r1, #5
 800490a:	69f9      	ldr	r1, [r7, #28]
 800490c:	4401      	add	r1, r0
 800490e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004912:	4313      	orrs	r3, r2
 8004914:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004916:	69bb      	ldr	r3, [r7, #24]
 8004918:	015a      	lsls	r2, r3, #5
 800491a:	69fb      	ldr	r3, [r7, #28]
 800491c:	4413      	add	r3, r2
 800491e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004922:	691a      	ldr	r2, [r3, #16]
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	69db      	ldr	r3, [r3, #28]
 8004928:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800492c:	69b9      	ldr	r1, [r7, #24]
 800492e:	0148      	lsls	r0, r1, #5
 8004930:	69f9      	ldr	r1, [r7, #28]
 8004932:	4401      	add	r1, r0
 8004934:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004938:	4313      	orrs	r3, r2
 800493a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800493c:	79fb      	ldrb	r3, [r7, #7]
 800493e:	2b01      	cmp	r3, #1
 8004940:	d10d      	bne.n	800495e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	691b      	ldr	r3, [r3, #16]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d009      	beq.n	800495e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	6919      	ldr	r1, [r3, #16]
 800494e:	69bb      	ldr	r3, [r7, #24]
 8004950:	015a      	lsls	r2, r3, #5
 8004952:	69fb      	ldr	r3, [r7, #28]
 8004954:	4413      	add	r3, r2
 8004956:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800495a:	460a      	mov	r2, r1
 800495c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	791b      	ldrb	r3, [r3, #4]
 8004962:	2b01      	cmp	r3, #1
 8004964:	d128      	bne.n	80049b8 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004966:	69fb      	ldr	r3, [r7, #28]
 8004968:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004972:	2b00      	cmp	r3, #0
 8004974:	d110      	bne.n	8004998 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004976:	69bb      	ldr	r3, [r7, #24]
 8004978:	015a      	lsls	r2, r3, #5
 800497a:	69fb      	ldr	r3, [r7, #28]
 800497c:	4413      	add	r3, r2
 800497e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	69ba      	ldr	r2, [r7, #24]
 8004986:	0151      	lsls	r1, r2, #5
 8004988:	69fa      	ldr	r2, [r7, #28]
 800498a:	440a      	add	r2, r1
 800498c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004990:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004994:	6013      	str	r3, [r2, #0]
 8004996:	e00f      	b.n	80049b8 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004998:	69bb      	ldr	r3, [r7, #24]
 800499a:	015a      	lsls	r2, r3, #5
 800499c:	69fb      	ldr	r3, [r7, #28]
 800499e:	4413      	add	r3, r2
 80049a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	69ba      	ldr	r2, [r7, #24]
 80049a8:	0151      	lsls	r1, r2, #5
 80049aa:	69fa      	ldr	r2, [r7, #28]
 80049ac:	440a      	add	r2, r1
 80049ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049b6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80049b8:	69bb      	ldr	r3, [r7, #24]
 80049ba:	015a      	lsls	r2, r3, #5
 80049bc:	69fb      	ldr	r3, [r7, #28]
 80049be:	4413      	add	r3, r2
 80049c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	69ba      	ldr	r2, [r7, #24]
 80049c8:	0151      	lsls	r1, r2, #5
 80049ca:	69fa      	ldr	r2, [r7, #28]
 80049cc:	440a      	add	r2, r1
 80049ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049d2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80049d6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80049d8:	2300      	movs	r3, #0
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3720      	adds	r7, #32
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	1ff80000 	.word	0x1ff80000

080049e8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b087      	sub	sp, #28
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	60f8      	str	r0, [r7, #12]
 80049f0:	60b9      	str	r1, [r7, #8]
 80049f2:	4613      	mov	r3, r2
 80049f4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	781b      	ldrb	r3, [r3, #0]
 80049fe:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	785b      	ldrb	r3, [r3, #1]
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	f040 80ce 	bne.w	8004ba6 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	699b      	ldr	r3, [r3, #24]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d132      	bne.n	8004a78 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	015a      	lsls	r2, r3, #5
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	4413      	add	r3, r2
 8004a1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a1e:	691b      	ldr	r3, [r3, #16]
 8004a20:	693a      	ldr	r2, [r7, #16]
 8004a22:	0151      	lsls	r1, r2, #5
 8004a24:	697a      	ldr	r2, [r7, #20]
 8004a26:	440a      	add	r2, r1
 8004a28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a2c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004a30:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004a34:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	015a      	lsls	r2, r3, #5
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	4413      	add	r3, r2
 8004a3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a42:	691b      	ldr	r3, [r3, #16]
 8004a44:	693a      	ldr	r2, [r7, #16]
 8004a46:	0151      	lsls	r1, r2, #5
 8004a48:	697a      	ldr	r2, [r7, #20]
 8004a4a:	440a      	add	r2, r1
 8004a4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a50:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004a54:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	015a      	lsls	r2, r3, #5
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	4413      	add	r3, r2
 8004a5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a62:	691b      	ldr	r3, [r3, #16]
 8004a64:	693a      	ldr	r2, [r7, #16]
 8004a66:	0151      	lsls	r1, r2, #5
 8004a68:	697a      	ldr	r2, [r7, #20]
 8004a6a:	440a      	add	r2, r1
 8004a6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a70:	0cdb      	lsrs	r3, r3, #19
 8004a72:	04db      	lsls	r3, r3, #19
 8004a74:	6113      	str	r3, [r2, #16]
 8004a76:	e04e      	b.n	8004b16 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	015a      	lsls	r2, r3, #5
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	4413      	add	r3, r2
 8004a80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a84:	691b      	ldr	r3, [r3, #16]
 8004a86:	693a      	ldr	r2, [r7, #16]
 8004a88:	0151      	lsls	r1, r2, #5
 8004a8a:	697a      	ldr	r2, [r7, #20]
 8004a8c:	440a      	add	r2, r1
 8004a8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a92:	0cdb      	lsrs	r3, r3, #19
 8004a94:	04db      	lsls	r3, r3, #19
 8004a96:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	015a      	lsls	r2, r3, #5
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	4413      	add	r3, r2
 8004aa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aa4:	691b      	ldr	r3, [r3, #16]
 8004aa6:	693a      	ldr	r2, [r7, #16]
 8004aa8:	0151      	lsls	r1, r2, #5
 8004aaa:	697a      	ldr	r2, [r7, #20]
 8004aac:	440a      	add	r2, r1
 8004aae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ab2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004ab6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004aba:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	699a      	ldr	r2, [r3, #24]
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	68db      	ldr	r3, [r3, #12]
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d903      	bls.n	8004ad0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	68da      	ldr	r2, [r3, #12]
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	015a      	lsls	r2, r3, #5
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	4413      	add	r3, r2
 8004ad8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004adc:	691b      	ldr	r3, [r3, #16]
 8004ade:	693a      	ldr	r2, [r7, #16]
 8004ae0:	0151      	lsls	r1, r2, #5
 8004ae2:	697a      	ldr	r2, [r7, #20]
 8004ae4:	440a      	add	r2, r1
 8004ae6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004aea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004aee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	015a      	lsls	r2, r3, #5
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	4413      	add	r3, r2
 8004af8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004afc:	691a      	ldr	r2, [r3, #16]
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	699b      	ldr	r3, [r3, #24]
 8004b02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b06:	6939      	ldr	r1, [r7, #16]
 8004b08:	0148      	lsls	r0, r1, #5
 8004b0a:	6979      	ldr	r1, [r7, #20]
 8004b0c:	4401      	add	r1, r0
 8004b0e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004b12:	4313      	orrs	r3, r2
 8004b14:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004b16:	79fb      	ldrb	r3, [r7, #7]
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d11e      	bne.n	8004b5a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	695b      	ldr	r3, [r3, #20]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d009      	beq.n	8004b38 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	015a      	lsls	r2, r3, #5
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	4413      	add	r3, r2
 8004b2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b30:	461a      	mov	r2, r3
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	695b      	ldr	r3, [r3, #20]
 8004b36:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	015a      	lsls	r2, r3, #5
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	4413      	add	r3, r2
 8004b40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	693a      	ldr	r2, [r7, #16]
 8004b48:	0151      	lsls	r1, r2, #5
 8004b4a:	697a      	ldr	r2, [r7, #20]
 8004b4c:	440a      	add	r2, r1
 8004b4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b52:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004b56:	6013      	str	r3, [r2, #0]
 8004b58:	e097      	b.n	8004c8a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	015a      	lsls	r2, r3, #5
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	4413      	add	r3, r2
 8004b62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	693a      	ldr	r2, [r7, #16]
 8004b6a:	0151      	lsls	r1, r2, #5
 8004b6c:	697a      	ldr	r2, [r7, #20]
 8004b6e:	440a      	add	r2, r1
 8004b70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b74:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004b78:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	699b      	ldr	r3, [r3, #24]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	f000 8083 	beq.w	8004c8a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	781b      	ldrb	r3, [r3, #0]
 8004b90:	f003 030f 	and.w	r3, r3, #15
 8004b94:	2101      	movs	r1, #1
 8004b96:	fa01 f303 	lsl.w	r3, r1, r3
 8004b9a:	6979      	ldr	r1, [r7, #20]
 8004b9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	634b      	str	r3, [r1, #52]	; 0x34
 8004ba4:	e071      	b.n	8004c8a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	015a      	lsls	r2, r3, #5
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	4413      	add	r3, r2
 8004bae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bb2:	691b      	ldr	r3, [r3, #16]
 8004bb4:	693a      	ldr	r2, [r7, #16]
 8004bb6:	0151      	lsls	r1, r2, #5
 8004bb8:	697a      	ldr	r2, [r7, #20]
 8004bba:	440a      	add	r2, r1
 8004bbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bc0:	0cdb      	lsrs	r3, r3, #19
 8004bc2:	04db      	lsls	r3, r3, #19
 8004bc4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	015a      	lsls	r2, r3, #5
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	4413      	add	r3, r2
 8004bce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bd2:	691b      	ldr	r3, [r3, #16]
 8004bd4:	693a      	ldr	r2, [r7, #16]
 8004bd6:	0151      	lsls	r1, r2, #5
 8004bd8:	697a      	ldr	r2, [r7, #20]
 8004bda:	440a      	add	r2, r1
 8004bdc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004be0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004be4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004be8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	699b      	ldr	r3, [r3, #24]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d003      	beq.n	8004bfa <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	68da      	ldr	r2, [r3, #12]
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	68da      	ldr	r2, [r3, #12]
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	015a      	lsls	r2, r3, #5
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	4413      	add	r3, r2
 8004c0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c0e:	691b      	ldr	r3, [r3, #16]
 8004c10:	693a      	ldr	r2, [r7, #16]
 8004c12:	0151      	lsls	r1, r2, #5
 8004c14:	697a      	ldr	r2, [r7, #20]
 8004c16:	440a      	add	r2, r1
 8004c18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c1c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c20:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	015a      	lsls	r2, r3, #5
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	4413      	add	r3, r2
 8004c2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c2e:	691a      	ldr	r2, [r3, #16]
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	69db      	ldr	r3, [r3, #28]
 8004c34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c38:	6939      	ldr	r1, [r7, #16]
 8004c3a:	0148      	lsls	r0, r1, #5
 8004c3c:	6979      	ldr	r1, [r7, #20]
 8004c3e:	4401      	add	r1, r0
 8004c40:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004c44:	4313      	orrs	r3, r2
 8004c46:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004c48:	79fb      	ldrb	r3, [r7, #7]
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d10d      	bne.n	8004c6a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	691b      	ldr	r3, [r3, #16]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d009      	beq.n	8004c6a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	6919      	ldr	r1, [r3, #16]
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	015a      	lsls	r2, r3, #5
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	4413      	add	r3, r2
 8004c62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c66:	460a      	mov	r2, r1
 8004c68:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	015a      	lsls	r2, r3, #5
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	4413      	add	r3, r2
 8004c72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	693a      	ldr	r2, [r7, #16]
 8004c7a:	0151      	lsls	r1, r2, #5
 8004c7c:	697a      	ldr	r2, [r7, #20]
 8004c7e:	440a      	add	r2, r1
 8004c80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c84:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004c88:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004c8a:	2300      	movs	r3, #0
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	371c      	adds	r7, #28
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bc80      	pop	{r7}
 8004c94:	4770      	bx	lr

08004c96 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004c96:	b480      	push	{r7}
 8004c98:	b087      	sub	sp, #28
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	6078      	str	r0, [r7, #4]
 8004c9e:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	785b      	ldrb	r3, [r3, #1]
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d14a      	bne.n	8004d4a <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	781b      	ldrb	r3, [r3, #0]
 8004cb8:	015a      	lsls	r2, r3, #5
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	4413      	add	r3, r2
 8004cbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004cc8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ccc:	f040 8086 	bne.w	8004ddc <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	781b      	ldrb	r3, [r3, #0]
 8004cd4:	015a      	lsls	r2, r3, #5
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	4413      	add	r3, r2
 8004cda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	683a      	ldr	r2, [r7, #0]
 8004ce2:	7812      	ldrb	r2, [r2, #0]
 8004ce4:	0151      	lsls	r1, r2, #5
 8004ce6:	693a      	ldr	r2, [r7, #16]
 8004ce8:	440a      	add	r2, r1
 8004cea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004cf2:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	781b      	ldrb	r3, [r3, #0]
 8004cf8:	015a      	lsls	r2, r3, #5
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	4413      	add	r3, r2
 8004cfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	683a      	ldr	r2, [r7, #0]
 8004d06:	7812      	ldrb	r2, [r2, #0]
 8004d08:	0151      	lsls	r1, r2, #5
 8004d0a:	693a      	ldr	r2, [r7, #16]
 8004d0c:	440a      	add	r2, r1
 8004d0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d12:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004d16:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	3301      	adds	r3, #1
 8004d1c:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	f242 7210 	movw	r2, #10000	; 0x2710
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d902      	bls.n	8004d2e <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	75fb      	strb	r3, [r7, #23]
          break;
 8004d2c:	e056      	b.n	8004ddc <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	781b      	ldrb	r3, [r3, #0]
 8004d32:	015a      	lsls	r2, r3, #5
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	4413      	add	r3, r2
 8004d38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d42:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d46:	d0e7      	beq.n	8004d18 <USB_EPStopXfer+0x82>
 8004d48:	e048      	b.n	8004ddc <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	781b      	ldrb	r3, [r3, #0]
 8004d4e:	015a      	lsls	r2, r3, #5
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	4413      	add	r3, r2
 8004d54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d62:	d13b      	bne.n	8004ddc <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	781b      	ldrb	r3, [r3, #0]
 8004d68:	015a      	lsls	r2, r3, #5
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	4413      	add	r3, r2
 8004d6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	683a      	ldr	r2, [r7, #0]
 8004d76:	7812      	ldrb	r2, [r2, #0]
 8004d78:	0151      	lsls	r1, r2, #5
 8004d7a:	693a      	ldr	r2, [r7, #16]
 8004d7c:	440a      	add	r2, r1
 8004d7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d82:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004d86:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	781b      	ldrb	r3, [r3, #0]
 8004d8c:	015a      	lsls	r2, r3, #5
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	4413      	add	r3, r2
 8004d92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	683a      	ldr	r2, [r7, #0]
 8004d9a:	7812      	ldrb	r2, [r2, #0]
 8004d9c:	0151      	lsls	r1, r2, #5
 8004d9e:	693a      	ldr	r2, [r7, #16]
 8004da0:	440a      	add	r2, r1
 8004da2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004da6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004daa:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	3301      	adds	r3, #1
 8004db0:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	f242 7210 	movw	r2, #10000	; 0x2710
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d902      	bls.n	8004dc2 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	75fb      	strb	r3, [r7, #23]
          break;
 8004dc0:	e00c      	b.n	8004ddc <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	781b      	ldrb	r3, [r3, #0]
 8004dc6:	015a      	lsls	r2, r3, #5
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	4413      	add	r3, r2
 8004dcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004dd6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004dda:	d0e7      	beq.n	8004dac <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004ddc:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	371c      	adds	r7, #28
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bc80      	pop	{r7}
 8004de6:	4770      	bx	lr

08004de8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b089      	sub	sp, #36	; 0x24
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	60f8      	str	r0, [r7, #12]
 8004df0:	60b9      	str	r1, [r7, #8]
 8004df2:	4611      	mov	r1, r2
 8004df4:	461a      	mov	r2, r3
 8004df6:	460b      	mov	r3, r1
 8004df8:	71fb      	strb	r3, [r7, #7]
 8004dfa:	4613      	mov	r3, r2
 8004dfc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004e06:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d123      	bne.n	8004e56 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004e0e:	88bb      	ldrh	r3, [r7, #4]
 8004e10:	3303      	adds	r3, #3
 8004e12:	089b      	lsrs	r3, r3, #2
 8004e14:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004e16:	2300      	movs	r3, #0
 8004e18:	61bb      	str	r3, [r7, #24]
 8004e1a:	e018      	b.n	8004e4e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004e1c:	79fb      	ldrb	r3, [r7, #7]
 8004e1e:	031a      	lsls	r2, r3, #12
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	4413      	add	r3, r2
 8004e24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e28:	461a      	mov	r2, r3
 8004e2a:	69fb      	ldr	r3, [r7, #28]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004e30:	69fb      	ldr	r3, [r7, #28]
 8004e32:	3301      	adds	r3, #1
 8004e34:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004e36:	69fb      	ldr	r3, [r7, #28]
 8004e38:	3301      	adds	r3, #1
 8004e3a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004e3c:	69fb      	ldr	r3, [r7, #28]
 8004e3e:	3301      	adds	r3, #1
 8004e40:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004e42:	69fb      	ldr	r3, [r7, #28]
 8004e44:	3301      	adds	r3, #1
 8004e46:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004e48:	69bb      	ldr	r3, [r7, #24]
 8004e4a:	3301      	adds	r3, #1
 8004e4c:	61bb      	str	r3, [r7, #24]
 8004e4e:	69ba      	ldr	r2, [r7, #24]
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	429a      	cmp	r2, r3
 8004e54:	d3e2      	bcc.n	8004e1c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004e56:	2300      	movs	r3, #0
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3724      	adds	r7, #36	; 0x24
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bc80      	pop	{r7}
 8004e60:	4770      	bx	lr

08004e62 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004e62:	b480      	push	{r7}
 8004e64:	b08b      	sub	sp, #44	; 0x2c
 8004e66:	af00      	add	r7, sp, #0
 8004e68:	60f8      	str	r0, [r7, #12]
 8004e6a:	60b9      	str	r1, [r7, #8]
 8004e6c:	4613      	mov	r3, r2
 8004e6e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004e78:	88fb      	ldrh	r3, [r7, #6]
 8004e7a:	089b      	lsrs	r3, r3, #2
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004e80:	88fb      	ldrh	r3, [r7, #6]
 8004e82:	f003 0303 	and.w	r3, r3, #3
 8004e86:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004e88:	2300      	movs	r3, #0
 8004e8a:	623b      	str	r3, [r7, #32]
 8004e8c:	e014      	b.n	8004eb8 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004e8e:	69bb      	ldr	r3, [r7, #24]
 8004e90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e98:	601a      	str	r2, [r3, #0]
    pDest++;
 8004e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9c:	3301      	adds	r3, #1
 8004e9e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea2:	3301      	adds	r3, #1
 8004ea4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea8:	3301      	adds	r3, #1
 8004eaa:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eae:	3301      	adds	r3, #1
 8004eb0:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004eb2:	6a3b      	ldr	r3, [r7, #32]
 8004eb4:	3301      	adds	r3, #1
 8004eb6:	623b      	str	r3, [r7, #32]
 8004eb8:	6a3a      	ldr	r2, [r7, #32]
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d3e6      	bcc.n	8004e8e <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004ec0:	8bfb      	ldrh	r3, [r7, #30]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d01e      	beq.n	8004f04 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004eca:	69bb      	ldr	r3, [r7, #24]
 8004ecc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	f107 0310 	add.w	r3, r7, #16
 8004ed6:	6812      	ldr	r2, [r2, #0]
 8004ed8:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004eda:	693a      	ldr	r2, [r7, #16]
 8004edc:	6a3b      	ldr	r3, [r7, #32]
 8004ede:	b2db      	uxtb	r3, r3
 8004ee0:	00db      	lsls	r3, r3, #3
 8004ee2:	fa22 f303 	lsr.w	r3, r2, r3
 8004ee6:	b2da      	uxtb	r2, r3
 8004ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eea:	701a      	strb	r2, [r3, #0]
      i++;
 8004eec:	6a3b      	ldr	r3, [r7, #32]
 8004eee:	3301      	adds	r3, #1
 8004ef0:	623b      	str	r3, [r7, #32]
      pDest++;
 8004ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef4:	3301      	adds	r3, #1
 8004ef6:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004ef8:	8bfb      	ldrh	r3, [r7, #30]
 8004efa:	3b01      	subs	r3, #1
 8004efc:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004efe:	8bfb      	ldrh	r3, [r7, #30]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d1ea      	bne.n	8004eda <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	372c      	adds	r7, #44	; 0x2c
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bc80      	pop	{r7}
 8004f0e:	4770      	bx	lr

08004f10 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b085      	sub	sp, #20
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
 8004f18:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	781b      	ldrb	r3, [r3, #0]
 8004f22:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	785b      	ldrb	r3, [r3, #1]
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d12c      	bne.n	8004f86 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	015a      	lsls	r2, r3, #5
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	4413      	add	r3, r2
 8004f34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	db12      	blt.n	8004f64 <USB_EPSetStall+0x54>
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d00f      	beq.n	8004f64 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	015a      	lsls	r2, r3, #5
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	4413      	add	r3, r2
 8004f4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	68ba      	ldr	r2, [r7, #8]
 8004f54:	0151      	lsls	r1, r2, #5
 8004f56:	68fa      	ldr	r2, [r7, #12]
 8004f58:	440a      	add	r2, r1
 8004f5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f5e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004f62:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	015a      	lsls	r2, r3, #5
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	4413      	add	r3, r2
 8004f6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	68ba      	ldr	r2, [r7, #8]
 8004f74:	0151      	lsls	r1, r2, #5
 8004f76:	68fa      	ldr	r2, [r7, #12]
 8004f78:	440a      	add	r2, r1
 8004f7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f7e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004f82:	6013      	str	r3, [r2, #0]
 8004f84:	e02b      	b.n	8004fde <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	015a      	lsls	r2, r3, #5
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	4413      	add	r3, r2
 8004f8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	db12      	blt.n	8004fbe <USB_EPSetStall+0xae>
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d00f      	beq.n	8004fbe <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	015a      	lsls	r2, r3, #5
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	4413      	add	r3, r2
 8004fa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	68ba      	ldr	r2, [r7, #8]
 8004fae:	0151      	lsls	r1, r2, #5
 8004fb0:	68fa      	ldr	r2, [r7, #12]
 8004fb2:	440a      	add	r2, r1
 8004fb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fb8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004fbc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	015a      	lsls	r2, r3, #5
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	4413      	add	r3, r2
 8004fc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	68ba      	ldr	r2, [r7, #8]
 8004fce:	0151      	lsls	r1, r2, #5
 8004fd0:	68fa      	ldr	r2, [r7, #12]
 8004fd2:	440a      	add	r2, r1
 8004fd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fd8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004fdc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004fde:	2300      	movs	r3, #0
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3714      	adds	r7, #20
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bc80      	pop	{r7}
 8004fe8:	4770      	bx	lr

08004fea <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004fea:	b480      	push	{r7}
 8004fec:	b085      	sub	sp, #20
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	6078      	str	r0, [r7, #4]
 8004ff2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	781b      	ldrb	r3, [r3, #0]
 8004ffc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	785b      	ldrb	r3, [r3, #1]
 8005002:	2b01      	cmp	r3, #1
 8005004:	d128      	bne.n	8005058 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	015a      	lsls	r2, r3, #5
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	4413      	add	r3, r2
 800500e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	68ba      	ldr	r2, [r7, #8]
 8005016:	0151      	lsls	r1, r2, #5
 8005018:	68fa      	ldr	r2, [r7, #12]
 800501a:	440a      	add	r2, r1
 800501c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005020:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005024:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	791b      	ldrb	r3, [r3, #4]
 800502a:	2b03      	cmp	r3, #3
 800502c:	d003      	beq.n	8005036 <USB_EPClearStall+0x4c>
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	791b      	ldrb	r3, [r3, #4]
 8005032:	2b02      	cmp	r3, #2
 8005034:	d138      	bne.n	80050a8 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	015a      	lsls	r2, r3, #5
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	4413      	add	r3, r2
 800503e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	68ba      	ldr	r2, [r7, #8]
 8005046:	0151      	lsls	r1, r2, #5
 8005048:	68fa      	ldr	r2, [r7, #12]
 800504a:	440a      	add	r2, r1
 800504c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005050:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005054:	6013      	str	r3, [r2, #0]
 8005056:	e027      	b.n	80050a8 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	015a      	lsls	r2, r3, #5
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	4413      	add	r3, r2
 8005060:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	68ba      	ldr	r2, [r7, #8]
 8005068:	0151      	lsls	r1, r2, #5
 800506a:	68fa      	ldr	r2, [r7, #12]
 800506c:	440a      	add	r2, r1
 800506e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005072:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005076:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	791b      	ldrb	r3, [r3, #4]
 800507c:	2b03      	cmp	r3, #3
 800507e:	d003      	beq.n	8005088 <USB_EPClearStall+0x9e>
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	791b      	ldrb	r3, [r3, #4]
 8005084:	2b02      	cmp	r3, #2
 8005086:	d10f      	bne.n	80050a8 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	015a      	lsls	r2, r3, #5
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	4413      	add	r3, r2
 8005090:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	68ba      	ldr	r2, [r7, #8]
 8005098:	0151      	lsls	r1, r2, #5
 800509a:	68fa      	ldr	r2, [r7, #12]
 800509c:	440a      	add	r2, r1
 800509e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050a6:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80050a8:	2300      	movs	r3, #0
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3714      	adds	r7, #20
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bc80      	pop	{r7}
 80050b2:	4770      	bx	lr

080050b4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b085      	sub	sp, #20
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	460b      	mov	r3, r1
 80050be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	68fa      	ldr	r2, [r7, #12]
 80050ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050d2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80050d6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	78fb      	ldrb	r3, [r7, #3]
 80050e2:	011b      	lsls	r3, r3, #4
 80050e4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80050e8:	68f9      	ldr	r1, [r7, #12]
 80050ea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80050ee:	4313      	orrs	r3, r2
 80050f0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80050f2:	2300      	movs	r3, #0
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3714      	adds	r7, #20
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bc80      	pop	{r7}
 80050fc:	4770      	bx	lr

080050fe <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80050fe:	b480      	push	{r7}
 8005100:	b085      	sub	sp, #20
 8005102:	af00      	add	r7, sp, #0
 8005104:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	695b      	ldr	r3, [r3, #20]
 800510a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	699b      	ldr	r3, [r3, #24]
 8005110:	68fa      	ldr	r2, [r7, #12]
 8005112:	4013      	ands	r3, r2
 8005114:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005116:	68fb      	ldr	r3, [r7, #12]
}
 8005118:	4618      	mov	r0, r3
 800511a:	3714      	adds	r7, #20
 800511c:	46bd      	mov	sp, r7
 800511e:	bc80      	pop	{r7}
 8005120:	4770      	bx	lr

08005122 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005122:	b480      	push	{r7}
 8005124:	b085      	sub	sp, #20
 8005126:	af00      	add	r7, sp, #0
 8005128:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005134:	699b      	ldr	r3, [r3, #24]
 8005136:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800513e:	69db      	ldr	r3, [r3, #28]
 8005140:	68ba      	ldr	r2, [r7, #8]
 8005142:	4013      	ands	r3, r2
 8005144:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	0c1b      	lsrs	r3, r3, #16
}
 800514a:	4618      	mov	r0, r3
 800514c:	3714      	adds	r7, #20
 800514e:	46bd      	mov	sp, r7
 8005150:	bc80      	pop	{r7}
 8005152:	4770      	bx	lr

08005154 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005154:	b480      	push	{r7}
 8005156:	b085      	sub	sp, #20
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005166:	699b      	ldr	r3, [r3, #24]
 8005168:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005170:	69db      	ldr	r3, [r3, #28]
 8005172:	68ba      	ldr	r2, [r7, #8]
 8005174:	4013      	ands	r3, r2
 8005176:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	b29b      	uxth	r3, r3
}
 800517c:	4618      	mov	r0, r3
 800517e:	3714      	adds	r7, #20
 8005180:	46bd      	mov	sp, r7
 8005182:	bc80      	pop	{r7}
 8005184:	4770      	bx	lr

08005186 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005186:	b480      	push	{r7}
 8005188:	b085      	sub	sp, #20
 800518a:	af00      	add	r7, sp, #0
 800518c:	6078      	str	r0, [r7, #4]
 800518e:	460b      	mov	r3, r1
 8005190:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005196:	78fb      	ldrb	r3, [r7, #3]
 8005198:	015a      	lsls	r2, r3, #5
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	4413      	add	r3, r2
 800519e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051ac:	695b      	ldr	r3, [r3, #20]
 80051ae:	68ba      	ldr	r2, [r7, #8]
 80051b0:	4013      	ands	r3, r2
 80051b2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80051b4:	68bb      	ldr	r3, [r7, #8]
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3714      	adds	r7, #20
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bc80      	pop	{r7}
 80051be:	4770      	bx	lr

080051c0 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b087      	sub	sp, #28
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
 80051c8:	460b      	mov	r3, r1
 80051ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051d6:	691b      	ldr	r3, [r3, #16]
 80051d8:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051e2:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80051e4:	78fb      	ldrb	r3, [r7, #3]
 80051e6:	f003 030f 	and.w	r3, r3, #15
 80051ea:	68fa      	ldr	r2, [r7, #12]
 80051ec:	fa22 f303 	lsr.w	r3, r2, r3
 80051f0:	01db      	lsls	r3, r3, #7
 80051f2:	b2db      	uxtb	r3, r3
 80051f4:	693a      	ldr	r2, [r7, #16]
 80051f6:	4313      	orrs	r3, r2
 80051f8:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80051fa:	78fb      	ldrb	r3, [r7, #3]
 80051fc:	015a      	lsls	r2, r3, #5
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	4413      	add	r3, r2
 8005202:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	693a      	ldr	r2, [r7, #16]
 800520a:	4013      	ands	r3, r2
 800520c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800520e:	68bb      	ldr	r3, [r7, #8]
}
 8005210:	4618      	mov	r0, r3
 8005212:	371c      	adds	r7, #28
 8005214:	46bd      	mov	sp, r7
 8005216:	bc80      	pop	{r7}
 8005218:	4770      	bx	lr

0800521a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800521a:	b480      	push	{r7}
 800521c:	b083      	sub	sp, #12
 800521e:	af00      	add	r7, sp, #0
 8005220:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	695b      	ldr	r3, [r3, #20]
 8005226:	f003 0301 	and.w	r3, r3, #1
}
 800522a:	4618      	mov	r0, r3
 800522c:	370c      	adds	r7, #12
 800522e:	46bd      	mov	sp, r7
 8005230:	bc80      	pop	{r7}
 8005232:	4770      	bx	lr

08005234 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005234:	b480      	push	{r7}
 8005236:	b085      	sub	sp, #20
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	68fa      	ldr	r2, [r7, #12]
 800524a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800524e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005252:	f023 0307 	bic.w	r3, r3, #7
 8005256:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	68fa      	ldr	r2, [r7, #12]
 8005262:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005266:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800526a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800526c:	2300      	movs	r3, #0
}
 800526e:	4618      	mov	r0, r3
 8005270:	3714      	adds	r7, #20
 8005272:	46bd      	mov	sp, r7
 8005274:	bc80      	pop	{r7}
 8005276:	4770      	bx	lr

08005278 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005278:	b480      	push	{r7}
 800527a:	b087      	sub	sp, #28
 800527c:	af00      	add	r7, sp, #0
 800527e:	60f8      	str	r0, [r7, #12]
 8005280:	460b      	mov	r3, r1
 8005282:	607a      	str	r2, [r7, #4]
 8005284:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	333c      	adds	r3, #60	; 0x3c
 800528e:	3304      	adds	r3, #4
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	4a25      	ldr	r2, [pc, #148]	; (800532c <USB_EP0_OutStart+0xb4>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d90a      	bls.n	80052b2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80052a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80052ac:	d101      	bne.n	80052b2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80052ae:	2300      	movs	r3, #0
 80052b0:	e037      	b.n	8005322 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052b8:	461a      	mov	r2, r3
 80052ba:	2300      	movs	r3, #0
 80052bc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052c4:	691b      	ldr	r3, [r3, #16]
 80052c6:	697a      	ldr	r2, [r7, #20]
 80052c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80052d0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052d8:	691b      	ldr	r3, [r3, #16]
 80052da:	697a      	ldr	r2, [r7, #20]
 80052dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052e0:	f043 0318 	orr.w	r3, r3, #24
 80052e4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052ec:	691b      	ldr	r3, [r3, #16]
 80052ee:	697a      	ldr	r2, [r7, #20]
 80052f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052f4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80052f8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80052fa:	7afb      	ldrb	r3, [r7, #11]
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d10f      	bne.n	8005320 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005306:	461a      	mov	r2, r3
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	697a      	ldr	r2, [r7, #20]
 8005316:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800531a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800531e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005320:	2300      	movs	r3, #0
}
 8005322:	4618      	mov	r0, r3
 8005324:	371c      	adds	r7, #28
 8005326:	46bd      	mov	sp, r7
 8005328:	bc80      	pop	{r7}
 800532a:	4770      	bx	lr
 800532c:	4f54300a 	.word	0x4f54300a

08005330 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8005330:	b5b0      	push	{r4, r5, r7, lr}
 8005332:	b08c      	sub	sp, #48	; 0x30
 8005334:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8005336:	4b96      	ldr	r3, [pc, #600]	; (8005590 <MX_LWIP_Init+0x260>)
 8005338:	22c0      	movs	r2, #192	; 0xc0
 800533a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800533c:	4b94      	ldr	r3, [pc, #592]	; (8005590 <MX_LWIP_Init+0x260>)
 800533e:	22a8      	movs	r2, #168	; 0xa8
 8005340:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 220;
 8005342:	4b93      	ldr	r3, [pc, #588]	; (8005590 <MX_LWIP_Init+0x260>)
 8005344:	22dc      	movs	r2, #220	; 0xdc
 8005346:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 2;
 8005348:	4b91      	ldr	r3, [pc, #580]	; (8005590 <MX_LWIP_Init+0x260>)
 800534a:	2202      	movs	r2, #2
 800534c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800534e:	4b91      	ldr	r3, [pc, #580]	; (8005594 <MX_LWIP_Init+0x264>)
 8005350:	22ff      	movs	r2, #255	; 0xff
 8005352:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8005354:	4b8f      	ldr	r3, [pc, #572]	; (8005594 <MX_LWIP_Init+0x264>)
 8005356:	22ff      	movs	r2, #255	; 0xff
 8005358:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800535a:	4b8e      	ldr	r3, [pc, #568]	; (8005594 <MX_LWIP_Init+0x264>)
 800535c:	22ff      	movs	r2, #255	; 0xff
 800535e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8005360:	4b8c      	ldr	r3, [pc, #560]	; (8005594 <MX_LWIP_Init+0x264>)
 8005362:	2200      	movs	r2, #0
 8005364:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8005366:	4b8c      	ldr	r3, [pc, #560]	; (8005598 <MX_LWIP_Init+0x268>)
 8005368:	22c0      	movs	r2, #192	; 0xc0
 800536a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 800536c:	4b8a      	ldr	r3, [pc, #552]	; (8005598 <MX_LWIP_Init+0x268>)
 800536e:	22a8      	movs	r2, #168	; 0xa8
 8005370:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 220;
 8005372:	4b89      	ldr	r3, [pc, #548]	; (8005598 <MX_LWIP_Init+0x268>)
 8005374:	22dc      	movs	r2, #220	; 0xdc
 8005376:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8005378:	4b87      	ldr	r3, [pc, #540]	; (8005598 <MX_LWIP_Init+0x268>)
 800537a:	2201      	movs	r2, #1
 800537c:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800537e:	2100      	movs	r1, #0
 8005380:	2000      	movs	r0, #0
 8005382:	f004 fd1b 	bl	8009dbc <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8005386:	4b82      	ldr	r3, [pc, #520]	; (8005590 <MX_LWIP_Init+0x260>)
 8005388:	781b      	ldrb	r3, [r3, #0]
 800538a:	061a      	lsls	r2, r3, #24
 800538c:	4b80      	ldr	r3, [pc, #512]	; (8005590 <MX_LWIP_Init+0x260>)
 800538e:	785b      	ldrb	r3, [r3, #1]
 8005390:	041b      	lsls	r3, r3, #16
 8005392:	431a      	orrs	r2, r3
 8005394:	4b7e      	ldr	r3, [pc, #504]	; (8005590 <MX_LWIP_Init+0x260>)
 8005396:	789b      	ldrb	r3, [r3, #2]
 8005398:	021b      	lsls	r3, r3, #8
 800539a:	4313      	orrs	r3, r2
 800539c:	4a7c      	ldr	r2, [pc, #496]	; (8005590 <MX_LWIP_Init+0x260>)
 800539e:	78d2      	ldrb	r2, [r2, #3]
 80053a0:	4313      	orrs	r3, r2
 80053a2:	061a      	lsls	r2, r3, #24
 80053a4:	4b7a      	ldr	r3, [pc, #488]	; (8005590 <MX_LWIP_Init+0x260>)
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	0619      	lsls	r1, r3, #24
 80053aa:	4b79      	ldr	r3, [pc, #484]	; (8005590 <MX_LWIP_Init+0x260>)
 80053ac:	785b      	ldrb	r3, [r3, #1]
 80053ae:	041b      	lsls	r3, r3, #16
 80053b0:	4319      	orrs	r1, r3
 80053b2:	4b77      	ldr	r3, [pc, #476]	; (8005590 <MX_LWIP_Init+0x260>)
 80053b4:	789b      	ldrb	r3, [r3, #2]
 80053b6:	021b      	lsls	r3, r3, #8
 80053b8:	430b      	orrs	r3, r1
 80053ba:	4975      	ldr	r1, [pc, #468]	; (8005590 <MX_LWIP_Init+0x260>)
 80053bc:	78c9      	ldrb	r1, [r1, #3]
 80053be:	430b      	orrs	r3, r1
 80053c0:	021b      	lsls	r3, r3, #8
 80053c2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80053c6:	431a      	orrs	r2, r3
 80053c8:	4b71      	ldr	r3, [pc, #452]	; (8005590 <MX_LWIP_Init+0x260>)
 80053ca:	781b      	ldrb	r3, [r3, #0]
 80053cc:	0619      	lsls	r1, r3, #24
 80053ce:	4b70      	ldr	r3, [pc, #448]	; (8005590 <MX_LWIP_Init+0x260>)
 80053d0:	785b      	ldrb	r3, [r3, #1]
 80053d2:	041b      	lsls	r3, r3, #16
 80053d4:	4319      	orrs	r1, r3
 80053d6:	4b6e      	ldr	r3, [pc, #440]	; (8005590 <MX_LWIP_Init+0x260>)
 80053d8:	789b      	ldrb	r3, [r3, #2]
 80053da:	021b      	lsls	r3, r3, #8
 80053dc:	430b      	orrs	r3, r1
 80053de:	496c      	ldr	r1, [pc, #432]	; (8005590 <MX_LWIP_Init+0x260>)
 80053e0:	78c9      	ldrb	r1, [r1, #3]
 80053e2:	430b      	orrs	r3, r1
 80053e4:	0a1b      	lsrs	r3, r3, #8
 80053e6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80053ea:	431a      	orrs	r2, r3
 80053ec:	4b68      	ldr	r3, [pc, #416]	; (8005590 <MX_LWIP_Init+0x260>)
 80053ee:	781b      	ldrb	r3, [r3, #0]
 80053f0:	0619      	lsls	r1, r3, #24
 80053f2:	4b67      	ldr	r3, [pc, #412]	; (8005590 <MX_LWIP_Init+0x260>)
 80053f4:	785b      	ldrb	r3, [r3, #1]
 80053f6:	041b      	lsls	r3, r3, #16
 80053f8:	4319      	orrs	r1, r3
 80053fa:	4b65      	ldr	r3, [pc, #404]	; (8005590 <MX_LWIP_Init+0x260>)
 80053fc:	789b      	ldrb	r3, [r3, #2]
 80053fe:	021b      	lsls	r3, r3, #8
 8005400:	430b      	orrs	r3, r1
 8005402:	4963      	ldr	r1, [pc, #396]	; (8005590 <MX_LWIP_Init+0x260>)
 8005404:	78c9      	ldrb	r1, [r1, #3]
 8005406:	430b      	orrs	r3, r1
 8005408:	0e1b      	lsrs	r3, r3, #24
 800540a:	4313      	orrs	r3, r2
 800540c:	4a63      	ldr	r2, [pc, #396]	; (800559c <MX_LWIP_Init+0x26c>)
 800540e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8005410:	4b60      	ldr	r3, [pc, #384]	; (8005594 <MX_LWIP_Init+0x264>)
 8005412:	781b      	ldrb	r3, [r3, #0]
 8005414:	061a      	lsls	r2, r3, #24
 8005416:	4b5f      	ldr	r3, [pc, #380]	; (8005594 <MX_LWIP_Init+0x264>)
 8005418:	785b      	ldrb	r3, [r3, #1]
 800541a:	041b      	lsls	r3, r3, #16
 800541c:	431a      	orrs	r2, r3
 800541e:	4b5d      	ldr	r3, [pc, #372]	; (8005594 <MX_LWIP_Init+0x264>)
 8005420:	789b      	ldrb	r3, [r3, #2]
 8005422:	021b      	lsls	r3, r3, #8
 8005424:	4313      	orrs	r3, r2
 8005426:	4a5b      	ldr	r2, [pc, #364]	; (8005594 <MX_LWIP_Init+0x264>)
 8005428:	78d2      	ldrb	r2, [r2, #3]
 800542a:	4313      	orrs	r3, r2
 800542c:	061a      	lsls	r2, r3, #24
 800542e:	4b59      	ldr	r3, [pc, #356]	; (8005594 <MX_LWIP_Init+0x264>)
 8005430:	781b      	ldrb	r3, [r3, #0]
 8005432:	0619      	lsls	r1, r3, #24
 8005434:	4b57      	ldr	r3, [pc, #348]	; (8005594 <MX_LWIP_Init+0x264>)
 8005436:	785b      	ldrb	r3, [r3, #1]
 8005438:	041b      	lsls	r3, r3, #16
 800543a:	4319      	orrs	r1, r3
 800543c:	4b55      	ldr	r3, [pc, #340]	; (8005594 <MX_LWIP_Init+0x264>)
 800543e:	789b      	ldrb	r3, [r3, #2]
 8005440:	021b      	lsls	r3, r3, #8
 8005442:	430b      	orrs	r3, r1
 8005444:	4953      	ldr	r1, [pc, #332]	; (8005594 <MX_LWIP_Init+0x264>)
 8005446:	78c9      	ldrb	r1, [r1, #3]
 8005448:	430b      	orrs	r3, r1
 800544a:	021b      	lsls	r3, r3, #8
 800544c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005450:	431a      	orrs	r2, r3
 8005452:	4b50      	ldr	r3, [pc, #320]	; (8005594 <MX_LWIP_Init+0x264>)
 8005454:	781b      	ldrb	r3, [r3, #0]
 8005456:	0619      	lsls	r1, r3, #24
 8005458:	4b4e      	ldr	r3, [pc, #312]	; (8005594 <MX_LWIP_Init+0x264>)
 800545a:	785b      	ldrb	r3, [r3, #1]
 800545c:	041b      	lsls	r3, r3, #16
 800545e:	4319      	orrs	r1, r3
 8005460:	4b4c      	ldr	r3, [pc, #304]	; (8005594 <MX_LWIP_Init+0x264>)
 8005462:	789b      	ldrb	r3, [r3, #2]
 8005464:	021b      	lsls	r3, r3, #8
 8005466:	430b      	orrs	r3, r1
 8005468:	494a      	ldr	r1, [pc, #296]	; (8005594 <MX_LWIP_Init+0x264>)
 800546a:	78c9      	ldrb	r1, [r1, #3]
 800546c:	430b      	orrs	r3, r1
 800546e:	0a1b      	lsrs	r3, r3, #8
 8005470:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005474:	431a      	orrs	r2, r3
 8005476:	4b47      	ldr	r3, [pc, #284]	; (8005594 <MX_LWIP_Init+0x264>)
 8005478:	781b      	ldrb	r3, [r3, #0]
 800547a:	0619      	lsls	r1, r3, #24
 800547c:	4b45      	ldr	r3, [pc, #276]	; (8005594 <MX_LWIP_Init+0x264>)
 800547e:	785b      	ldrb	r3, [r3, #1]
 8005480:	041b      	lsls	r3, r3, #16
 8005482:	4319      	orrs	r1, r3
 8005484:	4b43      	ldr	r3, [pc, #268]	; (8005594 <MX_LWIP_Init+0x264>)
 8005486:	789b      	ldrb	r3, [r3, #2]
 8005488:	021b      	lsls	r3, r3, #8
 800548a:	430b      	orrs	r3, r1
 800548c:	4941      	ldr	r1, [pc, #260]	; (8005594 <MX_LWIP_Init+0x264>)
 800548e:	78c9      	ldrb	r1, [r1, #3]
 8005490:	430b      	orrs	r3, r1
 8005492:	0e1b      	lsrs	r3, r3, #24
 8005494:	4313      	orrs	r3, r2
 8005496:	4a42      	ldr	r2, [pc, #264]	; (80055a0 <MX_LWIP_Init+0x270>)
 8005498:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800549a:	4b3f      	ldr	r3, [pc, #252]	; (8005598 <MX_LWIP_Init+0x268>)
 800549c:	781b      	ldrb	r3, [r3, #0]
 800549e:	061a      	lsls	r2, r3, #24
 80054a0:	4b3d      	ldr	r3, [pc, #244]	; (8005598 <MX_LWIP_Init+0x268>)
 80054a2:	785b      	ldrb	r3, [r3, #1]
 80054a4:	041b      	lsls	r3, r3, #16
 80054a6:	431a      	orrs	r2, r3
 80054a8:	4b3b      	ldr	r3, [pc, #236]	; (8005598 <MX_LWIP_Init+0x268>)
 80054aa:	789b      	ldrb	r3, [r3, #2]
 80054ac:	021b      	lsls	r3, r3, #8
 80054ae:	4313      	orrs	r3, r2
 80054b0:	4a39      	ldr	r2, [pc, #228]	; (8005598 <MX_LWIP_Init+0x268>)
 80054b2:	78d2      	ldrb	r2, [r2, #3]
 80054b4:	4313      	orrs	r3, r2
 80054b6:	061a      	lsls	r2, r3, #24
 80054b8:	4b37      	ldr	r3, [pc, #220]	; (8005598 <MX_LWIP_Init+0x268>)
 80054ba:	781b      	ldrb	r3, [r3, #0]
 80054bc:	0619      	lsls	r1, r3, #24
 80054be:	4b36      	ldr	r3, [pc, #216]	; (8005598 <MX_LWIP_Init+0x268>)
 80054c0:	785b      	ldrb	r3, [r3, #1]
 80054c2:	041b      	lsls	r3, r3, #16
 80054c4:	4319      	orrs	r1, r3
 80054c6:	4b34      	ldr	r3, [pc, #208]	; (8005598 <MX_LWIP_Init+0x268>)
 80054c8:	789b      	ldrb	r3, [r3, #2]
 80054ca:	021b      	lsls	r3, r3, #8
 80054cc:	430b      	orrs	r3, r1
 80054ce:	4932      	ldr	r1, [pc, #200]	; (8005598 <MX_LWIP_Init+0x268>)
 80054d0:	78c9      	ldrb	r1, [r1, #3]
 80054d2:	430b      	orrs	r3, r1
 80054d4:	021b      	lsls	r3, r3, #8
 80054d6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80054da:	431a      	orrs	r2, r3
 80054dc:	4b2e      	ldr	r3, [pc, #184]	; (8005598 <MX_LWIP_Init+0x268>)
 80054de:	781b      	ldrb	r3, [r3, #0]
 80054e0:	0619      	lsls	r1, r3, #24
 80054e2:	4b2d      	ldr	r3, [pc, #180]	; (8005598 <MX_LWIP_Init+0x268>)
 80054e4:	785b      	ldrb	r3, [r3, #1]
 80054e6:	041b      	lsls	r3, r3, #16
 80054e8:	4319      	orrs	r1, r3
 80054ea:	4b2b      	ldr	r3, [pc, #172]	; (8005598 <MX_LWIP_Init+0x268>)
 80054ec:	789b      	ldrb	r3, [r3, #2]
 80054ee:	021b      	lsls	r3, r3, #8
 80054f0:	430b      	orrs	r3, r1
 80054f2:	4929      	ldr	r1, [pc, #164]	; (8005598 <MX_LWIP_Init+0x268>)
 80054f4:	78c9      	ldrb	r1, [r1, #3]
 80054f6:	430b      	orrs	r3, r1
 80054f8:	0a1b      	lsrs	r3, r3, #8
 80054fa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80054fe:	431a      	orrs	r2, r3
 8005500:	4b25      	ldr	r3, [pc, #148]	; (8005598 <MX_LWIP_Init+0x268>)
 8005502:	781b      	ldrb	r3, [r3, #0]
 8005504:	0619      	lsls	r1, r3, #24
 8005506:	4b24      	ldr	r3, [pc, #144]	; (8005598 <MX_LWIP_Init+0x268>)
 8005508:	785b      	ldrb	r3, [r3, #1]
 800550a:	041b      	lsls	r3, r3, #16
 800550c:	4319      	orrs	r1, r3
 800550e:	4b22      	ldr	r3, [pc, #136]	; (8005598 <MX_LWIP_Init+0x268>)
 8005510:	789b      	ldrb	r3, [r3, #2]
 8005512:	021b      	lsls	r3, r3, #8
 8005514:	430b      	orrs	r3, r1
 8005516:	4920      	ldr	r1, [pc, #128]	; (8005598 <MX_LWIP_Init+0x268>)
 8005518:	78c9      	ldrb	r1, [r1, #3]
 800551a:	430b      	orrs	r3, r1
 800551c:	0e1b      	lsrs	r3, r3, #24
 800551e:	4313      	orrs	r3, r2
 8005520:	4a20      	ldr	r2, [pc, #128]	; (80055a4 <MX_LWIP_Init+0x274>)
 8005522:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8005524:	4b20      	ldr	r3, [pc, #128]	; (80055a8 <MX_LWIP_Init+0x278>)
 8005526:	9302      	str	r3, [sp, #8]
 8005528:	4b20      	ldr	r3, [pc, #128]	; (80055ac <MX_LWIP_Init+0x27c>)
 800552a:	9301      	str	r3, [sp, #4]
 800552c:	2300      	movs	r3, #0
 800552e:	9300      	str	r3, [sp, #0]
 8005530:	4b1c      	ldr	r3, [pc, #112]	; (80055a4 <MX_LWIP_Init+0x274>)
 8005532:	4a1b      	ldr	r2, [pc, #108]	; (80055a0 <MX_LWIP_Init+0x270>)
 8005534:	4919      	ldr	r1, [pc, #100]	; (800559c <MX_LWIP_Init+0x26c>)
 8005536:	481e      	ldr	r0, [pc, #120]	; (80055b0 <MX_LWIP_Init+0x280>)
 8005538:	f006 fd80 	bl	800c03c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800553c:	481c      	ldr	r0, [pc, #112]	; (80055b0 <MX_LWIP_Init+0x280>)
 800553e:	f006 ff2d 	bl	800c39c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8005542:	4b1b      	ldr	r3, [pc, #108]	; (80055b0 <MX_LWIP_Init+0x280>)
 8005544:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005548:	089b      	lsrs	r3, r3, #2
 800554a:	f003 0301 	and.w	r3, r3, #1
 800554e:	b2db      	uxtb	r3, r3
 8005550:	2b00      	cmp	r3, #0
 8005552:	d003      	beq.n	800555c <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8005554:	4816      	ldr	r0, [pc, #88]	; (80055b0 <MX_LWIP_Init+0x280>)
 8005556:	f006 ff2f 	bl	800c3b8 <netif_set_up>
 800555a:	e002      	b.n	8005562 <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800555c:	4814      	ldr	r0, [pc, #80]	; (80055b0 <MX_LWIP_Init+0x280>)
 800555e:	f006 ff97 	bl	800c490 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8005562:	4914      	ldr	r1, [pc, #80]	; (80055b4 <MX_LWIP_Init+0x284>)
 8005564:	4812      	ldr	r0, [pc, #72]	; (80055b0 <MX_LWIP_Init+0x280>)
 8005566:	f006 ffc5 	bl	800c4f4 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 800556a:	4b13      	ldr	r3, [pc, #76]	; (80055b8 <MX_LWIP_Init+0x288>)
 800556c:	1d3c      	adds	r4, r7, #4
 800556e:	461d      	mov	r5, r3
 8005570:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005572:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005574:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005578:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 800557c:	1d3b      	adds	r3, r7, #4
 800557e:	490c      	ldr	r1, [pc, #48]	; (80055b0 <MX_LWIP_Init+0x280>)
 8005580:	4618      	mov	r0, r3
 8005582:	f001 fca1 	bl	8006ec8 <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8005586:	bf00      	nop
 8005588:	3720      	adds	r7, #32
 800558a:	46bd      	mov	sp, r7
 800558c:	bdb0      	pop	{r4, r5, r7, pc}
 800558e:	bf00      	nop
 8005590:	200003e0 	.word	0x200003e0
 8005594:	200003e4 	.word	0x200003e4
 8005598:	200003e8 	.word	0x200003e8
 800559c:	200003d4 	.word	0x200003d4
 80055a0:	200003d8 	.word	0x200003d8
 80055a4:	200003dc 	.word	0x200003dc
 80055a8:	08009cf9 	.word	0x08009cf9
 80055ac:	08005951 	.word	0x08005951
 80055b0:	200003a0 	.word	0x200003a0
 80055b4:	080055bd 	.word	0x080055bd
 80055b8:	0801784c 	.word	0x0801784c

080055bc <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 80055bc:	b480      	push	{r7}
 80055be:	b083      	sub	sp, #12
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 80055c4:	bf00      	nop
 80055c6:	370c      	adds	r7, #12
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bc80      	pop	{r7}
 80055cc:	4770      	bx	lr
	...

080055d0 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b082      	sub	sp, #8
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 80055d8:	4b04      	ldr	r3, [pc, #16]	; (80055ec <HAL_ETH_RxCpltCallback+0x1c>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4618      	mov	r0, r3
 80055de:	f001 fdbd 	bl	800715c <osSemaphoreRelease>
}
 80055e2:	bf00      	nop
 80055e4:	3708      	adds	r7, #8
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}
 80055ea:	bf00      	nop
 80055ec:	20004eb8 	.word	0x20004eb8

080055f0 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b082      	sub	sp, #8
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 80055f8:	4b04      	ldr	r3, [pc, #16]	; (800560c <HAL_ETH_TxCpltCallback+0x1c>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4618      	mov	r0, r3
 80055fe:	f001 fdad 	bl	800715c <osSemaphoreRelease>
}
 8005602:	bf00      	nop
 8005604:	3708      	adds	r7, #8
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}
 800560a:	bf00      	nop
 800560c:	20004ebc 	.word	0x20004ebc

08005610 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b082      	sub	sp, #8
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f7fc f89b 	bl	8001754 <HAL_ETH_GetDMAError>
 800561e:	4603      	mov	r3, r0
 8005620:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005624:	2b80      	cmp	r3, #128	; 0x80
 8005626:	d104      	bne.n	8005632 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8005628:	4b04      	ldr	r3, [pc, #16]	; (800563c <HAL_ETH_ErrorCallback+0x2c>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4618      	mov	r0, r3
 800562e:	f001 fd95 	bl	800715c <osSemaphoreRelease>
  }
}
 8005632:	bf00      	nop
 8005634:	3708      	adds	r7, #8
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}
 800563a:	bf00      	nop
 800563c:	20004eb8 	.word	0x20004eb8

08005640 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8005640:	b5b0      	push	{r4, r5, r7, lr}
 8005642:	b08c      	sub	sp, #48	; 0x30
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8005648:	2300      	movs	r3, #0
 800564a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

/* USER CODE END low_level_init Variables Initialization for User BSP */
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800564e:	4b4f      	ldr	r3, [pc, #316]	; (800578c <low_level_init+0x14c>)
 8005650:	4a4f      	ldr	r2, [pc, #316]	; (8005790 <low_level_init+0x150>)
 8005652:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8005654:	2300      	movs	r3, #0
 8005656:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  MACAddr[1] = 0x80;
 800565a:	2380      	movs	r3, #128	; 0x80
 800565c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  MACAddr[2] = 0xE1;
 8005660:	23e1      	movs	r3, #225	; 0xe1
 8005662:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  MACAddr[3] = 0x00;
 8005666:	2300      	movs	r3, #0
 8005668:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  MACAddr[4] = 0x00;
 800566c:	2300      	movs	r3, #0
 800566e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  MACAddr[5] = 0x00;
 8005672:	2300      	movs	r3, #0
 8005674:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  heth.Init.MACAddr = &MACAddr[0];
 8005678:	4a44      	ldr	r2, [pc, #272]	; (800578c <low_level_init+0x14c>)
 800567a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800567e:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8005680:	4b42      	ldr	r3, [pc, #264]	; (800578c <low_level_init+0x14c>)
 8005682:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005686:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8005688:	4b40      	ldr	r3, [pc, #256]	; (800578c <low_level_init+0x14c>)
 800568a:	4a42      	ldr	r2, [pc, #264]	; (8005794 <low_level_init+0x154>)
 800568c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800568e:	4b3f      	ldr	r3, [pc, #252]	; (800578c <low_level_init+0x14c>)
 8005690:	4a41      	ldr	r2, [pc, #260]	; (8005798 <low_level_init+0x158>)
 8005692:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8005694:	4b3d      	ldr	r3, [pc, #244]	; (800578c <low_level_init+0x14c>)
 8005696:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800569a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800569c:	483b      	ldr	r0, [pc, #236]	; (800578c <low_level_init+0x14c>)
 800569e:	f7fb fd11 	bl	80010c4 <HAL_ETH_Init>
 80056a2:	4603      	mov	r3, r0
 80056a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80056a8:	2238      	movs	r2, #56	; 0x38
 80056aa:	2100      	movs	r1, #0
 80056ac:	483b      	ldr	r0, [pc, #236]	; (800579c <low_level_init+0x15c>)
 80056ae:	f011 fa01 	bl	8016ab4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80056b2:	4b3a      	ldr	r3, [pc, #232]	; (800579c <low_level_init+0x15c>)
 80056b4:	2221      	movs	r2, #33	; 0x21
 80056b6:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80056b8:	4b38      	ldr	r3, [pc, #224]	; (800579c <low_level_init+0x15c>)
 80056ba:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80056be:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80056c0:	4b36      	ldr	r3, [pc, #216]	; (800579c <low_level_init+0x15c>)
 80056c2:	2200      	movs	r2, #0
 80056c4:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 80056c6:	4836      	ldr	r0, [pc, #216]	; (80057a0 <low_level_init+0x160>)
 80056c8:	f006 fb74 	bl	800bdb4 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2206      	movs	r2, #6
 80056d0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80056d4:	4b2d      	ldr	r3, [pc, #180]	; (800578c <low_level_init+0x14c>)
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	781a      	ldrb	r2, [r3, #0]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80056e0:	4b2a      	ldr	r3, [pc, #168]	; (800578c <low_level_init+0x14c>)
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	785a      	ldrb	r2, [r3, #1]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80056ec:	4b27      	ldr	r3, [pc, #156]	; (800578c <low_level_init+0x14c>)
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	789a      	ldrb	r2, [r3, #2]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80056f8:	4b24      	ldr	r3, [pc, #144]	; (800578c <low_level_init+0x14c>)
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	78da      	ldrb	r2, [r3, #3]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8005704:	4b21      	ldr	r3, [pc, #132]	; (800578c <low_level_init+0x14c>)
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	791a      	ldrb	r2, [r3, #4]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8005710:	4b1e      	ldr	r3, [pc, #120]	; (800578c <low_level_init+0x14c>)
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	795a      	ldrb	r2, [r3, #5]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8005722:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800572a:	f043 030a 	orr.w	r3, r3, #10
 800572e:	b2da      	uxtb	r2, r3
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = xSemaphoreCreateBinary();
 8005736:	2203      	movs	r2, #3
 8005738:	2100      	movs	r1, #0
 800573a:	2001      	movs	r0, #1
 800573c:	f001 ffab 	bl	8007696 <xQueueGenericCreate>
 8005740:	4603      	mov	r3, r0
 8005742:	4a18      	ldr	r2, [pc, #96]	; (80057a4 <low_level_init+0x164>)
 8005744:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = xSemaphoreCreateBinary();
 8005746:	2203      	movs	r2, #3
 8005748:	2100      	movs	r1, #0
 800574a:	2001      	movs	r0, #1
 800574c:	f001 ffa3 	bl	8007696 <xQueueGenericCreate>
 8005750:	4603      	mov	r3, r0
 8005752:	4a15      	ldr	r2, [pc, #84]	; (80057a8 <low_level_init+0x168>)
 8005754:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8005756:	4b15      	ldr	r3, [pc, #84]	; (80057ac <low_level_init+0x16c>)
 8005758:	f107 040c 	add.w	r4, r7, #12
 800575c:	461d      	mov	r5, r3
 800575e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005760:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005762:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005766:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 800576a:	f107 030c 	add.w	r3, r7, #12
 800576e:	6879      	ldr	r1, [r7, #4]
 8005770:	4618      	mov	r0, r3
 8005772:	f001 fba9 	bl	8006ec8 <osThreadCreate>

/* USER CODE BEGIN low_level_init Code 1 for User BSP */

/* USER CODE END low_level_init Code 1 for User BSP */

  if (hal_eth_init_status == HAL_OK)
 8005776:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800577a:	2b00      	cmp	r3, #0
 800577c:	d001      	beq.n	8005782 <low_level_init+0x142>
/* USER CODE END low_level_init Code 2 for User BSP */

  }
  else
  {
    Error_Handler();
 800577e:	f7fb f893 	bl	80008a8 <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8005782:	bf00      	nop
 8005784:	3730      	adds	r7, #48	; 0x30
 8005786:	46bd      	mov	sp, r7
 8005788:	bdb0      	pop	{r4, r5, r7, pc}
 800578a:	bf00      	nop
 800578c:	20004ec0 	.word	0x20004ec0
 8005790:	40028000 	.word	0x40028000
 8005794:	20004e18 	.word	0x20004e18
 8005798:	20004d78 	.word	0x20004d78
 800579c:	20004f70 	.word	0x20004f70
 80057a0:	0801ab44 	.word	0x0801ab44
 80057a4:	20004eb8 	.word	0x20004eb8
 80057a8:	20004ebc 	.word	0x20004ebc
 80057ac:	08017870 	.word	0x08017870

080057b0 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b092      	sub	sp, #72	; 0x48
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
 80057b8:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 80057ba:	2300      	movs	r3, #0
 80057bc:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 80057be:	2300      	movs	r3, #0
 80057c0:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 80057c2:	2300      	movs	r3, #0
 80057c4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT];

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80057c8:	f107 030c 	add.w	r3, r7, #12
 80057cc:	2230      	movs	r2, #48	; 0x30
 80057ce:	2100      	movs	r1, #0
 80057d0:	4618      	mov	r0, r3
 80057d2:	f011 f96f 	bl	8016ab4 <memset>

  for(q = p; q != NULL; q = q->next)
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	643b      	str	r3, [r7, #64]	; 0x40
 80057da:	e045      	b.n	8005868 <low_level_output+0xb8>
  {
    if(i >= ETH_TX_DESC_CNT)
 80057dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057de:	2b03      	cmp	r3, #3
 80057e0:	d902      	bls.n	80057e8 <low_level_output+0x38>
      return ERR_IF;
 80057e2:	f06f 030b 	mvn.w	r3, #11
 80057e6:	e065      	b.n	80058b4 <low_level_output+0x104>

    Txbuffer[i].buffer = q->payload;
 80057e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057ea:	6859      	ldr	r1, [r3, #4]
 80057ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80057ee:	4613      	mov	r3, r2
 80057f0:	005b      	lsls	r3, r3, #1
 80057f2:	4413      	add	r3, r2
 80057f4:	009b      	lsls	r3, r3, #2
 80057f6:	3348      	adds	r3, #72	; 0x48
 80057f8:	443b      	add	r3, r7
 80057fa:	3b3c      	subs	r3, #60	; 0x3c
 80057fc:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 80057fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005800:	895b      	ldrh	r3, [r3, #10]
 8005802:	4619      	mov	r1, r3
 8005804:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005806:	4613      	mov	r3, r2
 8005808:	005b      	lsls	r3, r3, #1
 800580a:	4413      	add	r3, r2
 800580c:	009b      	lsls	r3, r3, #2
 800580e:	3348      	adds	r3, #72	; 0x48
 8005810:	443b      	add	r3, r7
 8005812:	3b38      	subs	r3, #56	; 0x38
 8005814:	6019      	str	r1, [r3, #0]

    if(i>0)
 8005816:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005818:	2b00      	cmp	r3, #0
 800581a:	d011      	beq.n	8005840 <low_level_output+0x90>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800581c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800581e:	1e5a      	subs	r2, r3, #1
 8005820:	f107 000c 	add.w	r0, r7, #12
 8005824:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005826:	460b      	mov	r3, r1
 8005828:	005b      	lsls	r3, r3, #1
 800582a:	440b      	add	r3, r1
 800582c:	009b      	lsls	r3, r3, #2
 800582e:	18c1      	adds	r1, r0, r3
 8005830:	4613      	mov	r3, r2
 8005832:	005b      	lsls	r3, r3, #1
 8005834:	4413      	add	r3, r2
 8005836:	009b      	lsls	r3, r3, #2
 8005838:	3348      	adds	r3, #72	; 0x48
 800583a:	443b      	add	r3, r7
 800583c:	3b34      	subs	r3, #52	; 0x34
 800583e:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8005840:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d109      	bne.n	800585c <low_level_output+0xac>
    {
      Txbuffer[i].next = NULL;
 8005848:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800584a:	4613      	mov	r3, r2
 800584c:	005b      	lsls	r3, r3, #1
 800584e:	4413      	add	r3, r2
 8005850:	009b      	lsls	r3, r3, #2
 8005852:	3348      	adds	r3, #72	; 0x48
 8005854:	443b      	add	r3, r7
 8005856:	3b34      	subs	r3, #52	; 0x34
 8005858:	2200      	movs	r2, #0
 800585a:	601a      	str	r2, [r3, #0]
    }

    i++;
 800585c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800585e:	3301      	adds	r3, #1
 8005860:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8005862:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	643b      	str	r3, [r7, #64]	; 0x40
 8005868:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800586a:	2b00      	cmp	r3, #0
 800586c:	d1b6      	bne.n	80057dc <low_level_output+0x2c>
  }

  TxConfig.Length = p->tot_len;
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	891b      	ldrh	r3, [r3, #8]
 8005872:	461a      	mov	r2, r3
 8005874:	4b11      	ldr	r3, [pc, #68]	; (80058bc <low_level_output+0x10c>)
 8005876:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8005878:	4a10      	ldr	r2, [pc, #64]	; (80058bc <low_level_output+0x10c>)
 800587a:	f107 030c 	add.w	r3, r7, #12
 800587e:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8005880:	4a0e      	ldr	r2, [pc, #56]	; (80058bc <low_level_output+0x10c>)
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 8005886:	6838      	ldr	r0, [r7, #0]
 8005888:	f007 fa82 	bl	800cd90 <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 800588c:	490b      	ldr	r1, [pc, #44]	; (80058bc <low_level_output+0x10c>)
 800588e:	480c      	ldr	r0, [pc, #48]	; (80058c0 <low_level_output+0x110>)
 8005890:	f7fb fc9f 	bl	80011d2 <HAL_ETH_Transmit_IT>
  while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 8005894:	bf00      	nop
 8005896:	4b0b      	ldr	r3, [pc, #44]	; (80058c4 <low_level_output+0x114>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f04f 31ff 	mov.w	r1, #4294967295
 800589e:	4618      	mov	r0, r3
 80058a0:	f001 fc0e 	bl	80070c0 <osSemaphoreWait>
 80058a4:	4603      	mov	r3, r0
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d1f5      	bne.n	8005896 <low_level_output+0xe6>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 80058aa:	4805      	ldr	r0, [pc, #20]	; (80058c0 <low_level_output+0x110>)
 80058ac:	f7fb fe22 	bl	80014f4 <HAL_ETH_ReleaseTxPacket>

  return errval;
 80058b0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3748      	adds	r7, #72	; 0x48
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}
 80058bc:	20004f70 	.word	0x20004f70
 80058c0:	20004ec0 	.word	0x20004ec0
 80058c4:	20004ebc 	.word	0x20004ebc

080058c8 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b084      	sub	sp, #16
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80058d0:	2300      	movs	r3, #0
 80058d2:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 80058d4:	4b07      	ldr	r3, [pc, #28]	; (80058f4 <low_level_input+0x2c>)
 80058d6:	781b      	ldrb	r3, [r3, #0]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d105      	bne.n	80058e8 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 80058dc:	f107 030c 	add.w	r3, r7, #12
 80058e0:	4619      	mov	r1, r3
 80058e2:	4805      	ldr	r0, [pc, #20]	; (80058f8 <low_level_input+0x30>)
 80058e4:	f7fb fcd1 	bl	800128a <HAL_ETH_ReadData>
  }

  return p;
 80058e8:	68fb      	ldr	r3, [r7, #12]
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3710      	adds	r7, #16
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}
 80058f2:	bf00      	nop
 80058f4:	20004d74 	.word	0x20004d74
 80058f8:	20004ec0 	.word	0x20004ec0

080058fc <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b084      	sub	sp, #16
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005904:	2300      	movs	r3, #0
 8005906:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800590c:	4b0f      	ldr	r3, [pc, #60]	; (800594c <ethernetif_input+0x50>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f04f 31ff 	mov.w	r1, #4294967295
 8005914:	4618      	mov	r0, r3
 8005916:	f001 fbd3 	bl	80070c0 <osSemaphoreWait>
 800591a:	4603      	mov	r3, r0
 800591c:	2b00      	cmp	r3, #0
 800591e:	d1f5      	bne.n	800590c <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8005920:	68b8      	ldr	r0, [r7, #8]
 8005922:	f7ff ffd1 	bl	80058c8 <low_level_input>
 8005926:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d00a      	beq.n	8005944 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	691b      	ldr	r3, [r3, #16]
 8005932:	68b9      	ldr	r1, [r7, #8]
 8005934:	68f8      	ldr	r0, [r7, #12]
 8005936:	4798      	blx	r3
 8005938:	4603      	mov	r3, r0
 800593a:	2b00      	cmp	r3, #0
 800593c:	d002      	beq.n	8005944 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 800593e:	68f8      	ldr	r0, [r7, #12]
 8005940:	f007 f982 	bl	800cc48 <pbuf_free>
          }
        }
      } while(p!=NULL);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d1ea      	bne.n	8005920 <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800594a:	e7df      	b.n	800590c <ethernetif_input+0x10>
 800594c:	20004eb8 	.word	0x20004eb8

08005950 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b082      	sub	sp, #8
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d106      	bne.n	800596c <ethernetif_init+0x1c>
 800595e:	4b0e      	ldr	r3, [pc, #56]	; (8005998 <ethernetif_init+0x48>)
 8005960:	f240 12a9 	movw	r2, #425	; 0x1a9
 8005964:	490d      	ldr	r1, [pc, #52]	; (800599c <ethernetif_init+0x4c>)
 8005966:	480e      	ldr	r0, [pc, #56]	; (80059a0 <ethernetif_init+0x50>)
 8005968:	f011 f98a 	bl	8016c80 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2273      	movs	r2, #115	; 0x73
 8005970:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2274      	movs	r2, #116	; 0x74
 8005978:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	4a09      	ldr	r2, [pc, #36]	; (80059a4 <ethernetif_init+0x54>)
 8005980:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	4a08      	ldr	r2, [pc, #32]	; (80059a8 <ethernetif_init+0x58>)
 8005986:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f7ff fe59 	bl	8005640 <low_level_init>

  return ERR_OK;
 800598e:	2300      	movs	r3, #0
}
 8005990:	4618      	mov	r0, r3
 8005992:	3708      	adds	r7, #8
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}
 8005998:	0801788c 	.word	0x0801788c
 800599c:	080178a8 	.word	0x080178a8
 80059a0:	080178b8 	.word	0x080178b8
 80059a4:	08014269 	.word	0x08014269
 80059a8:	080057b1 	.word	0x080057b1

080059ac <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b084      	sub	sp, #16
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 80059b8:	68f9      	ldr	r1, [r7, #12]
 80059ba:	4809      	ldr	r0, [pc, #36]	; (80059e0 <pbuf_free_custom+0x34>)
 80059bc:	f006 faea 	bl	800bf94 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 80059c0:	4b08      	ldr	r3, [pc, #32]	; (80059e4 <pbuf_free_custom+0x38>)
 80059c2:	781b      	ldrb	r3, [r3, #0]
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	d107      	bne.n	80059d8 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 80059c8:	4b06      	ldr	r3, [pc, #24]	; (80059e4 <pbuf_free_custom+0x38>)
 80059ca:	2200      	movs	r2, #0
 80059cc:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 80059ce:	4b06      	ldr	r3, [pc, #24]	; (80059e8 <pbuf_free_custom+0x3c>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4618      	mov	r0, r3
 80059d4:	f001 fbc2 	bl	800715c <osSemaphoreRelease>
  }
}
 80059d8:	bf00      	nop
 80059da:	3710      	adds	r7, #16
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd80      	pop	{r7, pc}
 80059e0:	0801ab44 	.word	0x0801ab44
 80059e4:	20004d74 	.word	0x20004d74
 80059e8:	20004eb8 	.word	0x20004eb8

080059ec <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80059f0:	f7fb fa2c 	bl	8000e4c <HAL_GetTick>
 80059f4:	4603      	mov	r3, r0
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	bd80      	pop	{r7, pc}

080059fa <ethernet_link_thread>:
  * @param  argument: netif
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 80059fa:	b580      	push	{r7, lr}
 80059fc:	b082      	sub	sp, #8
 80059fe:	af00      	add	r7, sp, #0
 8005a00:	6078      	str	r0, [r7, #4]

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8005a02:	2064      	movs	r0, #100	; 0x64
 8005a04:	f001 faac 	bl	8006f60 <osDelay>
 8005a08:	e7fb      	b.n	8005a02 <ethernet_link_thread+0x8>
	...

08005a0c <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b086      	sub	sp, #24
 8005a10:	af02      	add	r7, sp, #8
 8005a12:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */

  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8005a14:	4812      	ldr	r0, [pc, #72]	; (8005a60 <HAL_ETH_RxAllocateCallback+0x54>)
 8005a16:	f006 fa49 	bl	800beac <memp_malloc_pool>
 8005a1a:	60f8      	str	r0, [r7, #12]
  if (p)
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d014      	beq.n	8005a4c <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	f103 0220 	add.w	r2, r3, #32
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	4a0d      	ldr	r2, [pc, #52]	; (8005a64 <HAL_ETH_RxAllocateCallback+0x58>)
 8005a30:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8005a3a:	9201      	str	r2, [sp, #4]
 8005a3c:	9300      	str	r3, [sp, #0]
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2241      	movs	r2, #65	; 0x41
 8005a42:	2100      	movs	r1, #0
 8005a44:	2000      	movs	r0, #0
 8005a46:	f006 ff45 	bl	800c8d4 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8005a4a:	e005      	b.n	8005a58 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8005a4c:	4b06      	ldr	r3, [pc, #24]	; (8005a68 <HAL_ETH_RxAllocateCallback+0x5c>)
 8005a4e:	2201      	movs	r2, #1
 8005a50:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2200      	movs	r2, #0
 8005a56:	601a      	str	r2, [r3, #0]
}
 8005a58:	bf00      	nop
 8005a5a:	3710      	adds	r7, #16
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}
 8005a60:	0801ab44 	.word	0x0801ab44
 8005a64:	080059ad 	.word	0x080059ad
 8005a68:	20004d74 	.word	0x20004d74

08005a6c <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b089      	sub	sp, #36	; 0x24
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	60f8      	str	r0, [r7, #12]
 8005a74:	60b9      	str	r1, [r7, #8]
 8005a76:	607a      	str	r2, [r7, #4]
 8005a78:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8005a82:	2300      	movs	r3, #0
 8005a84:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	3b20      	subs	r3, #32
 8005a8a:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8005a8c:	69fb      	ldr	r3, [r7, #28]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8005a92:	69fb      	ldr	r3, [r7, #28]
 8005a94:	2200      	movs	r2, #0
 8005a96:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8005a98:	69fb      	ldr	r3, [r7, #28]
 8005a9a:	887a      	ldrh	r2, [r7, #2]
 8005a9c:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8005a9e:	69bb      	ldr	r3, [r7, #24]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d103      	bne.n	8005aae <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8005aa6:	69bb      	ldr	r3, [r7, #24]
 8005aa8:	69fa      	ldr	r2, [r7, #28]
 8005aaa:	601a      	str	r2, [r3, #0]
 8005aac:	e003      	b.n	8005ab6 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	69fa      	ldr	r2, [r7, #28]
 8005ab4:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	69fa      	ldr	r2, [r7, #28]
 8005aba:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8005abc:	69bb      	ldr	r3, [r7, #24]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	61fb      	str	r3, [r7, #28]
 8005ac2:	e009      	b.n	8005ad8 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8005ac4:	69fb      	ldr	r3, [r7, #28]
 8005ac6:	891a      	ldrh	r2, [r3, #8]
 8005ac8:	887b      	ldrh	r3, [r7, #2]
 8005aca:	4413      	add	r3, r2
 8005acc:	b29a      	uxth	r2, r3
 8005ace:	69fb      	ldr	r3, [r7, #28]
 8005ad0:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8005ad2:	69fb      	ldr	r3, [r7, #28]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	61fb      	str	r3, [r7, #28]
 8005ad8:	69fb      	ldr	r3, [r7, #28]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d1f2      	bne.n	8005ac4 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 8005ade:	bf00      	nop
 8005ae0:	bf00      	nop
 8005ae2:	3724      	adds	r7, #36	; 0x24
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bc80      	pop	{r7}
 8005ae8:	4770      	bx	lr

08005aea <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8005aea:	b580      	push	{r7, lr}
 8005aec:	b082      	sub	sp, #8
 8005aee:	af00      	add	r7, sp, #0
 8005af0:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f007 f8a8 	bl	800cc48 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8005af8:	bf00      	nop
 8005afa:	3708      	adds	r7, #8
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}

08005b00 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b083      	sub	sp, #12
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005b08:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	370c      	adds	r7, #12
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bc80      	pop	{r7}
 8005b12:	4770      	bx	lr

08005b14 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b084      	sub	sp, #16
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
 8005b1c:	460b      	mov	r3, r1
 8005b1e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005b20:	2300      	movs	r3, #0
 8005b22:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d009      	beq.n	8005b42 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	78fa      	ldrb	r2, [r7, #3]
 8005b38:	4611      	mov	r1, r2
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	4798      	blx	r3
 8005b3e:	4603      	mov	r3, r0
 8005b40:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005b42:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3710      	adds	r7, #16
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}

08005b4c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b084      	sub	sp, #16
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
 8005b54:	460b      	mov	r3, r1
 8005b56:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	78fa      	ldrb	r2, [r7, #3]
 8005b66:	4611      	mov	r1, r2
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	4798      	blx	r3
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d001      	beq.n	8005b76 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005b72:	2303      	movs	r3, #3
 8005b74:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005b76:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	3710      	adds	r7, #16
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}

08005b80 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b084      	sub	sp, #16
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
 8005b88:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005b90:	6839      	ldr	r1, [r7, #0]
 8005b92:	4618      	mov	r0, r3
 8005b94:	f001 f8ab 	bl	8006cee <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005bb4:	f003 031f 	and.w	r3, r3, #31
 8005bb8:	2b02      	cmp	r3, #2
 8005bba:	d01a      	beq.n	8005bf2 <USBD_LL_SetupStage+0x72>
 8005bbc:	2b02      	cmp	r3, #2
 8005bbe:	d822      	bhi.n	8005c06 <USBD_LL_SetupStage+0x86>
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d002      	beq.n	8005bca <USBD_LL_SetupStage+0x4a>
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	d00a      	beq.n	8005bde <USBD_LL_SetupStage+0x5e>
 8005bc8:	e01d      	b.n	8005c06 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005bd0:	4619      	mov	r1, r3
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f000 fb02 	bl	80061dc <USBD_StdDevReq>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	73fb      	strb	r3, [r7, #15]
      break;
 8005bdc:	e020      	b.n	8005c20 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005be4:	4619      	mov	r1, r3
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f000 fb6a 	bl	80062c0 <USBD_StdItfReq>
 8005bec:	4603      	mov	r3, r0
 8005bee:	73fb      	strb	r3, [r7, #15]
      break;
 8005bf0:	e016      	b.n	8005c20 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005bf8:	4619      	mov	r1, r3
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f000 fbcc 	bl	8006398 <USBD_StdEPReq>
 8005c00:	4603      	mov	r3, r0
 8005c02:	73fb      	strb	r3, [r7, #15]
      break;
 8005c04:	e00c      	b.n	8005c20 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005c0c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005c10:	b2db      	uxtb	r3, r3
 8005c12:	4619      	mov	r1, r3
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	f010 fbf1 	bl	80163fc <USBD_LL_StallEP>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	73fb      	strb	r3, [r7, #15]
      break;
 8005c1e:	bf00      	nop
  }

  return ret;
 8005c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3710      	adds	r7, #16
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}

08005c2a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005c2a:	b580      	push	{r7, lr}
 8005c2c:	b086      	sub	sp, #24
 8005c2e:	af00      	add	r7, sp, #0
 8005c30:	60f8      	str	r0, [r7, #12]
 8005c32:	460b      	mov	r3, r1
 8005c34:	607a      	str	r2, [r7, #4]
 8005c36:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005c3c:	7afb      	ldrb	r3, [r7, #11]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d16e      	bne.n	8005d20 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005c48:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005c50:	2b03      	cmp	r3, #3
 8005c52:	f040 8098 	bne.w	8005d86 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	689a      	ldr	r2, [r3, #8]
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	68db      	ldr	r3, [r3, #12]
 8005c5e:	429a      	cmp	r2, r3
 8005c60:	d913      	bls.n	8005c8a <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	689a      	ldr	r2, [r3, #8]
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	68db      	ldr	r3, [r3, #12]
 8005c6a:	1ad2      	subs	r2, r2, r3
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	68da      	ldr	r2, [r3, #12]
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	bf28      	it	cs
 8005c7c:	4613      	movcs	r3, r2
 8005c7e:	461a      	mov	r2, r3
 8005c80:	6879      	ldr	r1, [r7, #4]
 8005c82:	68f8      	ldr	r0, [r7, #12]
 8005c84:	f001 f8aa 	bl	8006ddc <USBD_CtlContinueRx>
 8005c88:	e07d      	b.n	8005d86 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005c90:	f003 031f 	and.w	r3, r3, #31
 8005c94:	2b02      	cmp	r3, #2
 8005c96:	d014      	beq.n	8005cc2 <USBD_LL_DataOutStage+0x98>
 8005c98:	2b02      	cmp	r3, #2
 8005c9a:	d81d      	bhi.n	8005cd8 <USBD_LL_DataOutStage+0xae>
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d002      	beq.n	8005ca6 <USBD_LL_DataOutStage+0x7c>
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	d003      	beq.n	8005cac <USBD_LL_DataOutStage+0x82>
 8005ca4:	e018      	b.n	8005cd8 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	75bb      	strb	r3, [r7, #22]
            break;
 8005caa:	e018      	b.n	8005cde <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005cb2:	b2db      	uxtb	r3, r3
 8005cb4:	4619      	mov	r1, r3
 8005cb6:	68f8      	ldr	r0, [r7, #12]
 8005cb8:	f000 fa5a 	bl	8006170 <USBD_CoreFindIF>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	75bb      	strb	r3, [r7, #22]
            break;
 8005cc0:	e00d      	b.n	8005cde <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005cc8:	b2db      	uxtb	r3, r3
 8005cca:	4619      	mov	r1, r3
 8005ccc:	68f8      	ldr	r0, [r7, #12]
 8005cce:	f000 fa5b 	bl	8006188 <USBD_CoreFindEP>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	75bb      	strb	r3, [r7, #22]
            break;
 8005cd6:	e002      	b.n	8005cde <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	75bb      	strb	r3, [r7, #22]
            break;
 8005cdc:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005cde:	7dbb      	ldrb	r3, [r7, #22]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d119      	bne.n	8005d18 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005cea:	b2db      	uxtb	r3, r3
 8005cec:	2b03      	cmp	r3, #3
 8005cee:	d113      	bne.n	8005d18 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005cf0:	7dba      	ldrb	r2, [r7, #22]
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	32ae      	adds	r2, #174	; 0xae
 8005cf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cfa:	691b      	ldr	r3, [r3, #16]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d00b      	beq.n	8005d18 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005d00:	7dba      	ldrb	r2, [r7, #22]
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005d08:	7dba      	ldrb	r2, [r7, #22]
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	32ae      	adds	r2, #174	; 0xae
 8005d0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d12:	691b      	ldr	r3, [r3, #16]
 8005d14:	68f8      	ldr	r0, [r7, #12]
 8005d16:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005d18:	68f8      	ldr	r0, [r7, #12]
 8005d1a:	f001 f870 	bl	8006dfe <USBD_CtlSendStatus>
 8005d1e:	e032      	b.n	8005d86 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005d20:	7afb      	ldrb	r3, [r7, #11]
 8005d22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d26:	b2db      	uxtb	r3, r3
 8005d28:	4619      	mov	r1, r3
 8005d2a:	68f8      	ldr	r0, [r7, #12]
 8005d2c:	f000 fa2c 	bl	8006188 <USBD_CoreFindEP>
 8005d30:	4603      	mov	r3, r0
 8005d32:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005d34:	7dbb      	ldrb	r3, [r7, #22]
 8005d36:	2bff      	cmp	r3, #255	; 0xff
 8005d38:	d025      	beq.n	8005d86 <USBD_LL_DataOutStage+0x15c>
 8005d3a:	7dbb      	ldrb	r3, [r7, #22]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d122      	bne.n	8005d86 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d46:	b2db      	uxtb	r3, r3
 8005d48:	2b03      	cmp	r3, #3
 8005d4a:	d117      	bne.n	8005d7c <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005d4c:	7dba      	ldrb	r2, [r7, #22]
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	32ae      	adds	r2, #174	; 0xae
 8005d52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d56:	699b      	ldr	r3, [r3, #24]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d00f      	beq.n	8005d7c <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005d5c:	7dba      	ldrb	r2, [r7, #22]
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005d64:	7dba      	ldrb	r2, [r7, #22]
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	32ae      	adds	r2, #174	; 0xae
 8005d6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d6e:	699b      	ldr	r3, [r3, #24]
 8005d70:	7afa      	ldrb	r2, [r7, #11]
 8005d72:	4611      	mov	r1, r2
 8005d74:	68f8      	ldr	r0, [r7, #12]
 8005d76:	4798      	blx	r3
 8005d78:	4603      	mov	r3, r0
 8005d7a:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005d7c:	7dfb      	ldrb	r3, [r7, #23]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d001      	beq.n	8005d86 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005d82:	7dfb      	ldrb	r3, [r7, #23]
 8005d84:	e000      	b.n	8005d88 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005d86:	2300      	movs	r3, #0
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	3718      	adds	r7, #24
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}

08005d90 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b086      	sub	sp, #24
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	60f8      	str	r0, [r7, #12]
 8005d98:	460b      	mov	r3, r1
 8005d9a:	607a      	str	r2, [r7, #4]
 8005d9c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005d9e:	7afb      	ldrb	r3, [r7, #11]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d16f      	bne.n	8005e84 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	3314      	adds	r3, #20
 8005da8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005db0:	2b02      	cmp	r3, #2
 8005db2:	d15a      	bne.n	8005e6a <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	689a      	ldr	r2, [r3, #8]
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	68db      	ldr	r3, [r3, #12]
 8005dbc:	429a      	cmp	r2, r3
 8005dbe:	d914      	bls.n	8005dea <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	689a      	ldr	r2, [r3, #8]
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	68db      	ldr	r3, [r3, #12]
 8005dc8:	1ad2      	subs	r2, r2, r3
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	689b      	ldr	r3, [r3, #8]
 8005dd2:	461a      	mov	r2, r3
 8005dd4:	6879      	ldr	r1, [r7, #4]
 8005dd6:	68f8      	ldr	r0, [r7, #12]
 8005dd8:	f000 ffef 	bl	8006dba <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005ddc:	2300      	movs	r3, #0
 8005dde:	2200      	movs	r2, #0
 8005de0:	2100      	movs	r1, #0
 8005de2:	68f8      	ldr	r0, [r7, #12]
 8005de4:	f010 fbb3 	bl	801654e <USBD_LL_PrepareReceive>
 8005de8:	e03f      	b.n	8005e6a <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	68da      	ldr	r2, [r3, #12]
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	689b      	ldr	r3, [r3, #8]
 8005df2:	429a      	cmp	r2, r3
 8005df4:	d11c      	bne.n	8005e30 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	685a      	ldr	r2, [r3, #4]
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005dfe:	429a      	cmp	r2, r3
 8005e00:	d316      	bcc.n	8005e30 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	685a      	ldr	r2, [r3, #4]
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005e0c:	429a      	cmp	r2, r3
 8005e0e:	d20f      	bcs.n	8005e30 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005e10:	2200      	movs	r2, #0
 8005e12:	2100      	movs	r1, #0
 8005e14:	68f8      	ldr	r0, [r7, #12]
 8005e16:	f000 ffd0 	bl	8006dba <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005e22:	2300      	movs	r3, #0
 8005e24:	2200      	movs	r2, #0
 8005e26:	2100      	movs	r1, #0
 8005e28:	68f8      	ldr	r0, [r7, #12]
 8005e2a:	f010 fb90 	bl	801654e <USBD_LL_PrepareReceive>
 8005e2e:	e01c      	b.n	8005e6a <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e36:	b2db      	uxtb	r3, r3
 8005e38:	2b03      	cmp	r3, #3
 8005e3a:	d10f      	bne.n	8005e5c <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e42:	68db      	ldr	r3, [r3, #12]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d009      	beq.n	8005e5c <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e56:	68db      	ldr	r3, [r3, #12]
 8005e58:	68f8      	ldr	r0, [r7, #12]
 8005e5a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005e5c:	2180      	movs	r1, #128	; 0x80
 8005e5e:	68f8      	ldr	r0, [r7, #12]
 8005e60:	f010 facc 	bl	80163fc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005e64:	68f8      	ldr	r0, [r7, #12]
 8005e66:	f000 ffdd 	bl	8006e24 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d03a      	beq.n	8005eea <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005e74:	68f8      	ldr	r0, [r7, #12]
 8005e76:	f7ff fe43 	bl	8005b00 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005e82:	e032      	b.n	8005eea <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005e84:	7afb      	ldrb	r3, [r7, #11]
 8005e86:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005e8a:	b2db      	uxtb	r3, r3
 8005e8c:	4619      	mov	r1, r3
 8005e8e:	68f8      	ldr	r0, [r7, #12]
 8005e90:	f000 f97a 	bl	8006188 <USBD_CoreFindEP>
 8005e94:	4603      	mov	r3, r0
 8005e96:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005e98:	7dfb      	ldrb	r3, [r7, #23]
 8005e9a:	2bff      	cmp	r3, #255	; 0xff
 8005e9c:	d025      	beq.n	8005eea <USBD_LL_DataInStage+0x15a>
 8005e9e:	7dfb      	ldrb	r3, [r7, #23]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d122      	bne.n	8005eea <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005eaa:	b2db      	uxtb	r3, r3
 8005eac:	2b03      	cmp	r3, #3
 8005eae:	d11c      	bne.n	8005eea <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005eb0:	7dfa      	ldrb	r2, [r7, #23]
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	32ae      	adds	r2, #174	; 0xae
 8005eb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005eba:	695b      	ldr	r3, [r3, #20]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d014      	beq.n	8005eea <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005ec0:	7dfa      	ldrb	r2, [r7, #23]
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005ec8:	7dfa      	ldrb	r2, [r7, #23]
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	32ae      	adds	r2, #174	; 0xae
 8005ece:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ed2:	695b      	ldr	r3, [r3, #20]
 8005ed4:	7afa      	ldrb	r2, [r7, #11]
 8005ed6:	4611      	mov	r1, r2
 8005ed8:	68f8      	ldr	r0, [r7, #12]
 8005eda:	4798      	blx	r3
 8005edc:	4603      	mov	r3, r0
 8005ede:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005ee0:	7dbb      	ldrb	r3, [r7, #22]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d001      	beq.n	8005eea <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005ee6:	7dbb      	ldrb	r3, [r7, #22]
 8005ee8:	e000      	b.n	8005eec <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005eea:	2300      	movs	r3, #0
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3718      	adds	r7, #24
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}

08005ef4 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b084      	sub	sp, #16
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005efc:	2300      	movs	r3, #0
 8005efe:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2201      	movs	r2, #1
 8005f04:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2200      	movs	r2, #0
 8005f14:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2200      	movs	r2, #0
 8005f22:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d014      	beq.n	8005f5a <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d00e      	beq.n	8005f5a <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	687a      	ldr	r2, [r7, #4]
 8005f46:	6852      	ldr	r2, [r2, #4]
 8005f48:	b2d2      	uxtb	r2, r2
 8005f4a:	4611      	mov	r1, r2
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	4798      	blx	r3
 8005f50:	4603      	mov	r3, r0
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d001      	beq.n	8005f5a <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005f56:	2303      	movs	r3, #3
 8005f58:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005f5a:	2340      	movs	r3, #64	; 0x40
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	2100      	movs	r1, #0
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f010 fa25 	bl	80163b0 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2201      	movs	r2, #1
 8005f6a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2240      	movs	r2, #64	; 0x40
 8005f72:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005f76:	2340      	movs	r3, #64	; 0x40
 8005f78:	2200      	movs	r2, #0
 8005f7a:	2180      	movs	r1, #128	; 0x80
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f010 fa17 	bl	80163b0 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2201      	movs	r2, #1
 8005f86:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2240      	movs	r2, #64	; 0x40
 8005f8c:	621a      	str	r2, [r3, #32]

  return ret;
 8005f8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3710      	adds	r7, #16
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}

08005f98 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b083      	sub	sp, #12
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
 8005fa0:	460b      	mov	r3, r1
 8005fa2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	78fa      	ldrb	r2, [r7, #3]
 8005fa8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005faa:	2300      	movs	r3, #0
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	370c      	adds	r7, #12
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bc80      	pop	{r7}
 8005fb4:	4770      	bx	lr

08005fb6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005fb6:	b480      	push	{r7}
 8005fb8:	b083      	sub	sp, #12
 8005fba:	af00      	add	r7, sp, #0
 8005fbc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fc4:	b2da      	uxtb	r2, r3
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2204      	movs	r2, #4
 8005fd0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005fd4:	2300      	movs	r3, #0
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	370c      	adds	r7, #12
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bc80      	pop	{r7}
 8005fde:	4770      	bx	lr

08005fe0 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b083      	sub	sp, #12
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fee:	b2db      	uxtb	r3, r3
 8005ff0:	2b04      	cmp	r3, #4
 8005ff2:	d106      	bne.n	8006002 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005ffa:	b2da      	uxtb	r2, r3
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006002:	2300      	movs	r3, #0
}
 8006004:	4618      	mov	r0, r3
 8006006:	370c      	adds	r7, #12
 8006008:	46bd      	mov	sp, r7
 800600a:	bc80      	pop	{r7}
 800600c:	4770      	bx	lr

0800600e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800600e:	b580      	push	{r7, lr}
 8006010:	b082      	sub	sp, #8
 8006012:	af00      	add	r7, sp, #0
 8006014:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800601c:	b2db      	uxtb	r3, r3
 800601e:	2b03      	cmp	r3, #3
 8006020:	d110      	bne.n	8006044 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006028:	2b00      	cmp	r3, #0
 800602a:	d00b      	beq.n	8006044 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006032:	69db      	ldr	r3, [r3, #28]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d005      	beq.n	8006044 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800603e:	69db      	ldr	r3, [r3, #28]
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006044:	2300      	movs	r3, #0
}
 8006046:	4618      	mov	r0, r3
 8006048:	3708      	adds	r7, #8
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}

0800604e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800604e:	b580      	push	{r7, lr}
 8006050:	b082      	sub	sp, #8
 8006052:	af00      	add	r7, sp, #0
 8006054:	6078      	str	r0, [r7, #4]
 8006056:	460b      	mov	r3, r1
 8006058:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	32ae      	adds	r2, #174	; 0xae
 8006064:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d101      	bne.n	8006070 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800606c:	2303      	movs	r3, #3
 800606e:	e01c      	b.n	80060aa <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006076:	b2db      	uxtb	r3, r3
 8006078:	2b03      	cmp	r3, #3
 800607a:	d115      	bne.n	80060a8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	32ae      	adds	r2, #174	; 0xae
 8006086:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800608a:	6a1b      	ldr	r3, [r3, #32]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d00b      	beq.n	80060a8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	32ae      	adds	r2, #174	; 0xae
 800609a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800609e:	6a1b      	ldr	r3, [r3, #32]
 80060a0:	78fa      	ldrb	r2, [r7, #3]
 80060a2:	4611      	mov	r1, r2
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80060a8:	2300      	movs	r3, #0
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3708      	adds	r7, #8
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}

080060b2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80060b2:	b580      	push	{r7, lr}
 80060b4:	b082      	sub	sp, #8
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	6078      	str	r0, [r7, #4]
 80060ba:	460b      	mov	r3, r1
 80060bc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	32ae      	adds	r2, #174	; 0xae
 80060c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d101      	bne.n	80060d4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80060d0:	2303      	movs	r3, #3
 80060d2:	e01c      	b.n	800610e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060da:	b2db      	uxtb	r3, r3
 80060dc:	2b03      	cmp	r3, #3
 80060de:	d115      	bne.n	800610c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	32ae      	adds	r2, #174	; 0xae
 80060ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d00b      	beq.n	800610c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	32ae      	adds	r2, #174	; 0xae
 80060fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006104:	78fa      	ldrb	r2, [r7, #3]
 8006106:	4611      	mov	r1, r2
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800610c:	2300      	movs	r3, #0
}
 800610e:	4618      	mov	r0, r3
 8006110:	3708      	adds	r7, #8
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}

08006116 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006116:	b480      	push	{r7}
 8006118:	b083      	sub	sp, #12
 800611a:	af00      	add	r7, sp, #0
 800611c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800611e:	2300      	movs	r3, #0
}
 8006120:	4618      	mov	r0, r3
 8006122:	370c      	adds	r7, #12
 8006124:	46bd      	mov	sp, r7
 8006126:	bc80      	pop	{r7}
 8006128:	4770      	bx	lr

0800612a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800612a:	b580      	push	{r7, lr}
 800612c:	b084      	sub	sp, #16
 800612e:	af00      	add	r7, sp, #0
 8006130:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006132:	2300      	movs	r3, #0
 8006134:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2201      	movs	r2, #1
 800613a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006144:	2b00      	cmp	r3, #0
 8006146:	d00e      	beq.n	8006166 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	687a      	ldr	r2, [r7, #4]
 8006152:	6852      	ldr	r2, [r2, #4]
 8006154:	b2d2      	uxtb	r2, r2
 8006156:	4611      	mov	r1, r2
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	4798      	blx	r3
 800615c:	4603      	mov	r3, r0
 800615e:	2b00      	cmp	r3, #0
 8006160:	d001      	beq.n	8006166 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006162:	2303      	movs	r3, #3
 8006164:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006166:	7bfb      	ldrb	r3, [r7, #15]
}
 8006168:	4618      	mov	r0, r3
 800616a:	3710      	adds	r7, #16
 800616c:	46bd      	mov	sp, r7
 800616e:	bd80      	pop	{r7, pc}

08006170 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006170:	b480      	push	{r7}
 8006172:	b083      	sub	sp, #12
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
 8006178:	460b      	mov	r3, r1
 800617a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800617c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800617e:	4618      	mov	r0, r3
 8006180:	370c      	adds	r7, #12
 8006182:	46bd      	mov	sp, r7
 8006184:	bc80      	pop	{r7}
 8006186:	4770      	bx	lr

08006188 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006188:	b480      	push	{r7}
 800618a:	b083      	sub	sp, #12
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	460b      	mov	r3, r1
 8006192:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006194:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006196:	4618      	mov	r0, r3
 8006198:	370c      	adds	r7, #12
 800619a:	46bd      	mov	sp, r7
 800619c:	bc80      	pop	{r7}
 800619e:	4770      	bx	lr

080061a0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b087      	sub	sp, #28
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	781b      	ldrb	r3, [r3, #0]
 80061b0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	3301      	adds	r3, #1
 80061b6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	781b      	ldrb	r3, [r3, #0]
 80061bc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80061be:	8a3b      	ldrh	r3, [r7, #16]
 80061c0:	021b      	lsls	r3, r3, #8
 80061c2:	b21a      	sxth	r2, r3
 80061c4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80061c8:	4313      	orrs	r3, r2
 80061ca:	b21b      	sxth	r3, r3
 80061cc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80061ce:	89fb      	ldrh	r3, [r7, #14]
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	371c      	adds	r7, #28
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bc80      	pop	{r7}
 80061d8:	4770      	bx	lr
	...

080061dc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b084      	sub	sp, #16
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
 80061e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80061e6:	2300      	movs	r3, #0
 80061e8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	781b      	ldrb	r3, [r3, #0]
 80061ee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80061f2:	2b40      	cmp	r3, #64	; 0x40
 80061f4:	d005      	beq.n	8006202 <USBD_StdDevReq+0x26>
 80061f6:	2b40      	cmp	r3, #64	; 0x40
 80061f8:	d857      	bhi.n	80062aa <USBD_StdDevReq+0xce>
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d00f      	beq.n	800621e <USBD_StdDevReq+0x42>
 80061fe:	2b20      	cmp	r3, #32
 8006200:	d153      	bne.n	80062aa <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	32ae      	adds	r2, #174	; 0xae
 800620c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006210:	689b      	ldr	r3, [r3, #8]
 8006212:	6839      	ldr	r1, [r7, #0]
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	4798      	blx	r3
 8006218:	4603      	mov	r3, r0
 800621a:	73fb      	strb	r3, [r7, #15]
      break;
 800621c:	e04a      	b.n	80062b4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	785b      	ldrb	r3, [r3, #1]
 8006222:	2b09      	cmp	r3, #9
 8006224:	d83b      	bhi.n	800629e <USBD_StdDevReq+0xc2>
 8006226:	a201      	add	r2, pc, #4	; (adr r2, 800622c <USBD_StdDevReq+0x50>)
 8006228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800622c:	08006281 	.word	0x08006281
 8006230:	08006295 	.word	0x08006295
 8006234:	0800629f 	.word	0x0800629f
 8006238:	0800628b 	.word	0x0800628b
 800623c:	0800629f 	.word	0x0800629f
 8006240:	0800625f 	.word	0x0800625f
 8006244:	08006255 	.word	0x08006255
 8006248:	0800629f 	.word	0x0800629f
 800624c:	08006277 	.word	0x08006277
 8006250:	08006269 	.word	0x08006269
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006254:	6839      	ldr	r1, [r7, #0]
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	f000 fa3c 	bl	80066d4 <USBD_GetDescriptor>
          break;
 800625c:	e024      	b.n	80062a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800625e:	6839      	ldr	r1, [r7, #0]
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f000 fba1 	bl	80069a8 <USBD_SetAddress>
          break;
 8006266:	e01f      	b.n	80062a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006268:	6839      	ldr	r1, [r7, #0]
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f000 fbe0 	bl	8006a30 <USBD_SetConfig>
 8006270:	4603      	mov	r3, r0
 8006272:	73fb      	strb	r3, [r7, #15]
          break;
 8006274:	e018      	b.n	80062a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006276:	6839      	ldr	r1, [r7, #0]
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f000 fc83 	bl	8006b84 <USBD_GetConfig>
          break;
 800627e:	e013      	b.n	80062a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006280:	6839      	ldr	r1, [r7, #0]
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f000 fcb4 	bl	8006bf0 <USBD_GetStatus>
          break;
 8006288:	e00e      	b.n	80062a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800628a:	6839      	ldr	r1, [r7, #0]
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f000 fce3 	bl	8006c58 <USBD_SetFeature>
          break;
 8006292:	e009      	b.n	80062a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006294:	6839      	ldr	r1, [r7, #0]
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f000 fd07 	bl	8006caa <USBD_ClrFeature>
          break;
 800629c:	e004      	b.n	80062a8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800629e:	6839      	ldr	r1, [r7, #0]
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	f000 fd5e 	bl	8006d62 <USBD_CtlError>
          break;
 80062a6:	bf00      	nop
      }
      break;
 80062a8:	e004      	b.n	80062b4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80062aa:	6839      	ldr	r1, [r7, #0]
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f000 fd58 	bl	8006d62 <USBD_CtlError>
      break;
 80062b2:	bf00      	nop
  }

  return ret;
 80062b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3710      	adds	r7, #16
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}
 80062be:	bf00      	nop

080062c0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b084      	sub	sp, #16
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
 80062c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80062ca:	2300      	movs	r3, #0
 80062cc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	781b      	ldrb	r3, [r3, #0]
 80062d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80062d6:	2b40      	cmp	r3, #64	; 0x40
 80062d8:	d005      	beq.n	80062e6 <USBD_StdItfReq+0x26>
 80062da:	2b40      	cmp	r3, #64	; 0x40
 80062dc:	d852      	bhi.n	8006384 <USBD_StdItfReq+0xc4>
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d001      	beq.n	80062e6 <USBD_StdItfReq+0x26>
 80062e2:	2b20      	cmp	r3, #32
 80062e4:	d14e      	bne.n	8006384 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062ec:	b2db      	uxtb	r3, r3
 80062ee:	3b01      	subs	r3, #1
 80062f0:	2b02      	cmp	r3, #2
 80062f2:	d840      	bhi.n	8006376 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	889b      	ldrh	r3, [r3, #4]
 80062f8:	b2db      	uxtb	r3, r3
 80062fa:	2b01      	cmp	r3, #1
 80062fc:	d836      	bhi.n	800636c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	889b      	ldrh	r3, [r3, #4]
 8006302:	b2db      	uxtb	r3, r3
 8006304:	4619      	mov	r1, r3
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f7ff ff32 	bl	8006170 <USBD_CoreFindIF>
 800630c:	4603      	mov	r3, r0
 800630e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006310:	7bbb      	ldrb	r3, [r7, #14]
 8006312:	2bff      	cmp	r3, #255	; 0xff
 8006314:	d01d      	beq.n	8006352 <USBD_StdItfReq+0x92>
 8006316:	7bbb      	ldrb	r3, [r7, #14]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d11a      	bne.n	8006352 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800631c:	7bba      	ldrb	r2, [r7, #14]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	32ae      	adds	r2, #174	; 0xae
 8006322:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006326:	689b      	ldr	r3, [r3, #8]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d00f      	beq.n	800634c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800632c:	7bba      	ldrb	r2, [r7, #14]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006334:	7bba      	ldrb	r2, [r7, #14]
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	32ae      	adds	r2, #174	; 0xae
 800633a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800633e:	689b      	ldr	r3, [r3, #8]
 8006340:	6839      	ldr	r1, [r7, #0]
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	4798      	blx	r3
 8006346:	4603      	mov	r3, r0
 8006348:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800634a:	e004      	b.n	8006356 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800634c:	2303      	movs	r3, #3
 800634e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006350:	e001      	b.n	8006356 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006352:	2303      	movs	r3, #3
 8006354:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	88db      	ldrh	r3, [r3, #6]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d110      	bne.n	8006380 <USBD_StdItfReq+0xc0>
 800635e:	7bfb      	ldrb	r3, [r7, #15]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d10d      	bne.n	8006380 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f000 fd4a 	bl	8006dfe <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800636a:	e009      	b.n	8006380 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800636c:	6839      	ldr	r1, [r7, #0]
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f000 fcf7 	bl	8006d62 <USBD_CtlError>
          break;
 8006374:	e004      	b.n	8006380 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006376:	6839      	ldr	r1, [r7, #0]
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	f000 fcf2 	bl	8006d62 <USBD_CtlError>
          break;
 800637e:	e000      	b.n	8006382 <USBD_StdItfReq+0xc2>
          break;
 8006380:	bf00      	nop
      }
      break;
 8006382:	e004      	b.n	800638e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006384:	6839      	ldr	r1, [r7, #0]
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f000 fceb 	bl	8006d62 <USBD_CtlError>
      break;
 800638c:	bf00      	nop
  }

  return ret;
 800638e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006390:	4618      	mov	r0, r3
 8006392:	3710      	adds	r7, #16
 8006394:	46bd      	mov	sp, r7
 8006396:	bd80      	pop	{r7, pc}

08006398 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b084      	sub	sp, #16
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
 80063a0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80063a2:	2300      	movs	r3, #0
 80063a4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	889b      	ldrh	r3, [r3, #4]
 80063aa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	781b      	ldrb	r3, [r3, #0]
 80063b0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80063b4:	2b40      	cmp	r3, #64	; 0x40
 80063b6:	d007      	beq.n	80063c8 <USBD_StdEPReq+0x30>
 80063b8:	2b40      	cmp	r3, #64	; 0x40
 80063ba:	f200 817f 	bhi.w	80066bc <USBD_StdEPReq+0x324>
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d02a      	beq.n	8006418 <USBD_StdEPReq+0x80>
 80063c2:	2b20      	cmp	r3, #32
 80063c4:	f040 817a 	bne.w	80066bc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80063c8:	7bbb      	ldrb	r3, [r7, #14]
 80063ca:	4619      	mov	r1, r3
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f7ff fedb 	bl	8006188 <USBD_CoreFindEP>
 80063d2:	4603      	mov	r3, r0
 80063d4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80063d6:	7b7b      	ldrb	r3, [r7, #13]
 80063d8:	2bff      	cmp	r3, #255	; 0xff
 80063da:	f000 8174 	beq.w	80066c6 <USBD_StdEPReq+0x32e>
 80063de:	7b7b      	ldrb	r3, [r7, #13]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	f040 8170 	bne.w	80066c6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80063e6:	7b7a      	ldrb	r2, [r7, #13]
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80063ee:	7b7a      	ldrb	r2, [r7, #13]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	32ae      	adds	r2, #174	; 0xae
 80063f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063f8:	689b      	ldr	r3, [r3, #8]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	f000 8163 	beq.w	80066c6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006400:	7b7a      	ldrb	r2, [r7, #13]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	32ae      	adds	r2, #174	; 0xae
 8006406:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800640a:	689b      	ldr	r3, [r3, #8]
 800640c:	6839      	ldr	r1, [r7, #0]
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	4798      	blx	r3
 8006412:	4603      	mov	r3, r0
 8006414:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006416:	e156      	b.n	80066c6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	785b      	ldrb	r3, [r3, #1]
 800641c:	2b03      	cmp	r3, #3
 800641e:	d008      	beq.n	8006432 <USBD_StdEPReq+0x9a>
 8006420:	2b03      	cmp	r3, #3
 8006422:	f300 8145 	bgt.w	80066b0 <USBD_StdEPReq+0x318>
 8006426:	2b00      	cmp	r3, #0
 8006428:	f000 809b 	beq.w	8006562 <USBD_StdEPReq+0x1ca>
 800642c:	2b01      	cmp	r3, #1
 800642e:	d03c      	beq.n	80064aa <USBD_StdEPReq+0x112>
 8006430:	e13e      	b.n	80066b0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006438:	b2db      	uxtb	r3, r3
 800643a:	2b02      	cmp	r3, #2
 800643c:	d002      	beq.n	8006444 <USBD_StdEPReq+0xac>
 800643e:	2b03      	cmp	r3, #3
 8006440:	d016      	beq.n	8006470 <USBD_StdEPReq+0xd8>
 8006442:	e02c      	b.n	800649e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006444:	7bbb      	ldrb	r3, [r7, #14]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d00d      	beq.n	8006466 <USBD_StdEPReq+0xce>
 800644a:	7bbb      	ldrb	r3, [r7, #14]
 800644c:	2b80      	cmp	r3, #128	; 0x80
 800644e:	d00a      	beq.n	8006466 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006450:	7bbb      	ldrb	r3, [r7, #14]
 8006452:	4619      	mov	r1, r3
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f00f ffd1 	bl	80163fc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800645a:	2180      	movs	r1, #128	; 0x80
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f00f ffcd 	bl	80163fc <USBD_LL_StallEP>
 8006462:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006464:	e020      	b.n	80064a8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006466:	6839      	ldr	r1, [r7, #0]
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f000 fc7a 	bl	8006d62 <USBD_CtlError>
              break;
 800646e:	e01b      	b.n	80064a8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	885b      	ldrh	r3, [r3, #2]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d10e      	bne.n	8006496 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006478:	7bbb      	ldrb	r3, [r7, #14]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d00b      	beq.n	8006496 <USBD_StdEPReq+0xfe>
 800647e:	7bbb      	ldrb	r3, [r7, #14]
 8006480:	2b80      	cmp	r3, #128	; 0x80
 8006482:	d008      	beq.n	8006496 <USBD_StdEPReq+0xfe>
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	88db      	ldrh	r3, [r3, #6]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d104      	bne.n	8006496 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800648c:	7bbb      	ldrb	r3, [r7, #14]
 800648e:	4619      	mov	r1, r3
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f00f ffb3 	bl	80163fc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f000 fcb1 	bl	8006dfe <USBD_CtlSendStatus>

              break;
 800649c:	e004      	b.n	80064a8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800649e:	6839      	ldr	r1, [r7, #0]
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	f000 fc5e 	bl	8006d62 <USBD_CtlError>
              break;
 80064a6:	bf00      	nop
          }
          break;
 80064a8:	e107      	b.n	80066ba <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064b0:	b2db      	uxtb	r3, r3
 80064b2:	2b02      	cmp	r3, #2
 80064b4:	d002      	beq.n	80064bc <USBD_StdEPReq+0x124>
 80064b6:	2b03      	cmp	r3, #3
 80064b8:	d016      	beq.n	80064e8 <USBD_StdEPReq+0x150>
 80064ba:	e04b      	b.n	8006554 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80064bc:	7bbb      	ldrb	r3, [r7, #14]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d00d      	beq.n	80064de <USBD_StdEPReq+0x146>
 80064c2:	7bbb      	ldrb	r3, [r7, #14]
 80064c4:	2b80      	cmp	r3, #128	; 0x80
 80064c6:	d00a      	beq.n	80064de <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80064c8:	7bbb      	ldrb	r3, [r7, #14]
 80064ca:	4619      	mov	r1, r3
 80064cc:	6878      	ldr	r0, [r7, #4]
 80064ce:	f00f ff95 	bl	80163fc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80064d2:	2180      	movs	r1, #128	; 0x80
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f00f ff91 	bl	80163fc <USBD_LL_StallEP>
 80064da:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80064dc:	e040      	b.n	8006560 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80064de:	6839      	ldr	r1, [r7, #0]
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f000 fc3e 	bl	8006d62 <USBD_CtlError>
              break;
 80064e6:	e03b      	b.n	8006560 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	885b      	ldrh	r3, [r3, #2]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d136      	bne.n	800655e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80064f0:	7bbb      	ldrb	r3, [r7, #14]
 80064f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d004      	beq.n	8006504 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80064fa:	7bbb      	ldrb	r3, [r7, #14]
 80064fc:	4619      	mov	r1, r3
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f00f ff9b 	bl	801643a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	f000 fc7a 	bl	8006dfe <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800650a:	7bbb      	ldrb	r3, [r7, #14]
 800650c:	4619      	mov	r1, r3
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f7ff fe3a 	bl	8006188 <USBD_CoreFindEP>
 8006514:	4603      	mov	r3, r0
 8006516:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006518:	7b7b      	ldrb	r3, [r7, #13]
 800651a:	2bff      	cmp	r3, #255	; 0xff
 800651c:	d01f      	beq.n	800655e <USBD_StdEPReq+0x1c6>
 800651e:	7b7b      	ldrb	r3, [r7, #13]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d11c      	bne.n	800655e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006524:	7b7a      	ldrb	r2, [r7, #13]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800652c:	7b7a      	ldrb	r2, [r7, #13]
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	32ae      	adds	r2, #174	; 0xae
 8006532:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006536:	689b      	ldr	r3, [r3, #8]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d010      	beq.n	800655e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800653c:	7b7a      	ldrb	r2, [r7, #13]
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	32ae      	adds	r2, #174	; 0xae
 8006542:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006546:	689b      	ldr	r3, [r3, #8]
 8006548:	6839      	ldr	r1, [r7, #0]
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	4798      	blx	r3
 800654e:	4603      	mov	r3, r0
 8006550:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006552:	e004      	b.n	800655e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006554:	6839      	ldr	r1, [r7, #0]
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f000 fc03 	bl	8006d62 <USBD_CtlError>
              break;
 800655c:	e000      	b.n	8006560 <USBD_StdEPReq+0x1c8>
              break;
 800655e:	bf00      	nop
          }
          break;
 8006560:	e0ab      	b.n	80066ba <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006568:	b2db      	uxtb	r3, r3
 800656a:	2b02      	cmp	r3, #2
 800656c:	d002      	beq.n	8006574 <USBD_StdEPReq+0x1dc>
 800656e:	2b03      	cmp	r3, #3
 8006570:	d032      	beq.n	80065d8 <USBD_StdEPReq+0x240>
 8006572:	e097      	b.n	80066a4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006574:	7bbb      	ldrb	r3, [r7, #14]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d007      	beq.n	800658a <USBD_StdEPReq+0x1f2>
 800657a:	7bbb      	ldrb	r3, [r7, #14]
 800657c:	2b80      	cmp	r3, #128	; 0x80
 800657e:	d004      	beq.n	800658a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006580:	6839      	ldr	r1, [r7, #0]
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f000 fbed 	bl	8006d62 <USBD_CtlError>
                break;
 8006588:	e091      	b.n	80066ae <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800658a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800658e:	2b00      	cmp	r3, #0
 8006590:	da0b      	bge.n	80065aa <USBD_StdEPReq+0x212>
 8006592:	7bbb      	ldrb	r3, [r7, #14]
 8006594:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006598:	4613      	mov	r3, r2
 800659a:	009b      	lsls	r3, r3, #2
 800659c:	4413      	add	r3, r2
 800659e:	009b      	lsls	r3, r3, #2
 80065a0:	3310      	adds	r3, #16
 80065a2:	687a      	ldr	r2, [r7, #4]
 80065a4:	4413      	add	r3, r2
 80065a6:	3304      	adds	r3, #4
 80065a8:	e00b      	b.n	80065c2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80065aa:	7bbb      	ldrb	r3, [r7, #14]
 80065ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80065b0:	4613      	mov	r3, r2
 80065b2:	009b      	lsls	r3, r3, #2
 80065b4:	4413      	add	r3, r2
 80065b6:	009b      	lsls	r3, r3, #2
 80065b8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80065bc:	687a      	ldr	r2, [r7, #4]
 80065be:	4413      	add	r3, r2
 80065c0:	3304      	adds	r3, #4
 80065c2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	2200      	movs	r2, #0
 80065c8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	2202      	movs	r2, #2
 80065ce:	4619      	mov	r1, r3
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f000 fbd7 	bl	8006d84 <USBD_CtlSendData>
              break;
 80065d6:	e06a      	b.n	80066ae <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80065d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	da11      	bge.n	8006604 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80065e0:	7bbb      	ldrb	r3, [r7, #14]
 80065e2:	f003 020f 	and.w	r2, r3, #15
 80065e6:	6879      	ldr	r1, [r7, #4]
 80065e8:	4613      	mov	r3, r2
 80065ea:	009b      	lsls	r3, r3, #2
 80065ec:	4413      	add	r3, r2
 80065ee:	009b      	lsls	r3, r3, #2
 80065f0:	440b      	add	r3, r1
 80065f2:	3324      	adds	r3, #36	; 0x24
 80065f4:	881b      	ldrh	r3, [r3, #0]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d117      	bne.n	800662a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80065fa:	6839      	ldr	r1, [r7, #0]
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f000 fbb0 	bl	8006d62 <USBD_CtlError>
                  break;
 8006602:	e054      	b.n	80066ae <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006604:	7bbb      	ldrb	r3, [r7, #14]
 8006606:	f003 020f 	and.w	r2, r3, #15
 800660a:	6879      	ldr	r1, [r7, #4]
 800660c:	4613      	mov	r3, r2
 800660e:	009b      	lsls	r3, r3, #2
 8006610:	4413      	add	r3, r2
 8006612:	009b      	lsls	r3, r3, #2
 8006614:	440b      	add	r3, r1
 8006616:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800661a:	881b      	ldrh	r3, [r3, #0]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d104      	bne.n	800662a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006620:	6839      	ldr	r1, [r7, #0]
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f000 fb9d 	bl	8006d62 <USBD_CtlError>
                  break;
 8006628:	e041      	b.n	80066ae <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800662a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800662e:	2b00      	cmp	r3, #0
 8006630:	da0b      	bge.n	800664a <USBD_StdEPReq+0x2b2>
 8006632:	7bbb      	ldrb	r3, [r7, #14]
 8006634:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006638:	4613      	mov	r3, r2
 800663a:	009b      	lsls	r3, r3, #2
 800663c:	4413      	add	r3, r2
 800663e:	009b      	lsls	r3, r3, #2
 8006640:	3310      	adds	r3, #16
 8006642:	687a      	ldr	r2, [r7, #4]
 8006644:	4413      	add	r3, r2
 8006646:	3304      	adds	r3, #4
 8006648:	e00b      	b.n	8006662 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800664a:	7bbb      	ldrb	r3, [r7, #14]
 800664c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006650:	4613      	mov	r3, r2
 8006652:	009b      	lsls	r3, r3, #2
 8006654:	4413      	add	r3, r2
 8006656:	009b      	lsls	r3, r3, #2
 8006658:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800665c:	687a      	ldr	r2, [r7, #4]
 800665e:	4413      	add	r3, r2
 8006660:	3304      	adds	r3, #4
 8006662:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006664:	7bbb      	ldrb	r3, [r7, #14]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d002      	beq.n	8006670 <USBD_StdEPReq+0x2d8>
 800666a:	7bbb      	ldrb	r3, [r7, #14]
 800666c:	2b80      	cmp	r3, #128	; 0x80
 800666e:	d103      	bne.n	8006678 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	2200      	movs	r2, #0
 8006674:	601a      	str	r2, [r3, #0]
 8006676:	e00e      	b.n	8006696 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006678:	7bbb      	ldrb	r3, [r7, #14]
 800667a:	4619      	mov	r1, r3
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f00f fefb 	bl	8016478 <USBD_LL_IsStallEP>
 8006682:	4603      	mov	r3, r0
 8006684:	2b00      	cmp	r3, #0
 8006686:	d003      	beq.n	8006690 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	2201      	movs	r2, #1
 800668c:	601a      	str	r2, [r3, #0]
 800668e:	e002      	b.n	8006696 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	2200      	movs	r2, #0
 8006694:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	2202      	movs	r2, #2
 800669a:	4619      	mov	r1, r3
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f000 fb71 	bl	8006d84 <USBD_CtlSendData>
              break;
 80066a2:	e004      	b.n	80066ae <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80066a4:	6839      	ldr	r1, [r7, #0]
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f000 fb5b 	bl	8006d62 <USBD_CtlError>
              break;
 80066ac:	bf00      	nop
          }
          break;
 80066ae:	e004      	b.n	80066ba <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80066b0:	6839      	ldr	r1, [r7, #0]
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f000 fb55 	bl	8006d62 <USBD_CtlError>
          break;
 80066b8:	bf00      	nop
      }
      break;
 80066ba:	e005      	b.n	80066c8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80066bc:	6839      	ldr	r1, [r7, #0]
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f000 fb4f 	bl	8006d62 <USBD_CtlError>
      break;
 80066c4:	e000      	b.n	80066c8 <USBD_StdEPReq+0x330>
      break;
 80066c6:	bf00      	nop
  }

  return ret;
 80066c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3710      	adds	r7, #16
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}
	...

080066d4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b084      	sub	sp, #16
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
 80066dc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80066de:	2300      	movs	r3, #0
 80066e0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80066e2:	2300      	movs	r3, #0
 80066e4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80066e6:	2300      	movs	r3, #0
 80066e8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	885b      	ldrh	r3, [r3, #2]
 80066ee:	0a1b      	lsrs	r3, r3, #8
 80066f0:	b29b      	uxth	r3, r3
 80066f2:	3b01      	subs	r3, #1
 80066f4:	2b06      	cmp	r3, #6
 80066f6:	f200 8128 	bhi.w	800694a <USBD_GetDescriptor+0x276>
 80066fa:	a201      	add	r2, pc, #4	; (adr r2, 8006700 <USBD_GetDescriptor+0x2c>)
 80066fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006700:	0800671d 	.word	0x0800671d
 8006704:	08006735 	.word	0x08006735
 8006708:	08006775 	.word	0x08006775
 800670c:	0800694b 	.word	0x0800694b
 8006710:	0800694b 	.word	0x0800694b
 8006714:	080068eb 	.word	0x080068eb
 8006718:	08006917 	.word	0x08006917
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	687a      	ldr	r2, [r7, #4]
 8006726:	7c12      	ldrb	r2, [r2, #16]
 8006728:	f107 0108 	add.w	r1, r7, #8
 800672c:	4610      	mov	r0, r2
 800672e:	4798      	blx	r3
 8006730:	60f8      	str	r0, [r7, #12]
      break;
 8006732:	e112      	b.n	800695a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	7c1b      	ldrb	r3, [r3, #16]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d10d      	bne.n	8006758 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006744:	f107 0208 	add.w	r2, r7, #8
 8006748:	4610      	mov	r0, r2
 800674a:	4798      	blx	r3
 800674c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	3301      	adds	r3, #1
 8006752:	2202      	movs	r2, #2
 8006754:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006756:	e100      	b.n	800695a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800675e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006760:	f107 0208 	add.w	r2, r7, #8
 8006764:	4610      	mov	r0, r2
 8006766:	4798      	blx	r3
 8006768:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	3301      	adds	r3, #1
 800676e:	2202      	movs	r2, #2
 8006770:	701a      	strb	r2, [r3, #0]
      break;
 8006772:	e0f2      	b.n	800695a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	885b      	ldrh	r3, [r3, #2]
 8006778:	b2db      	uxtb	r3, r3
 800677a:	2b05      	cmp	r3, #5
 800677c:	f200 80ac 	bhi.w	80068d8 <USBD_GetDescriptor+0x204>
 8006780:	a201      	add	r2, pc, #4	; (adr r2, 8006788 <USBD_GetDescriptor+0xb4>)
 8006782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006786:	bf00      	nop
 8006788:	080067a1 	.word	0x080067a1
 800678c:	080067d5 	.word	0x080067d5
 8006790:	08006809 	.word	0x08006809
 8006794:	0800683d 	.word	0x0800683d
 8006798:	08006871 	.word	0x08006871
 800679c:	080068a5 	.word	0x080068a5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d00b      	beq.n	80067c4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	687a      	ldr	r2, [r7, #4]
 80067b6:	7c12      	ldrb	r2, [r2, #16]
 80067b8:	f107 0108 	add.w	r1, r7, #8
 80067bc:	4610      	mov	r0, r2
 80067be:	4798      	blx	r3
 80067c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80067c2:	e091      	b.n	80068e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80067c4:	6839      	ldr	r1, [r7, #0]
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f000 facb 	bl	8006d62 <USBD_CtlError>
            err++;
 80067cc:	7afb      	ldrb	r3, [r7, #11]
 80067ce:	3301      	adds	r3, #1
 80067d0:	72fb      	strb	r3, [r7, #11]
          break;
 80067d2:	e089      	b.n	80068e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067da:	689b      	ldr	r3, [r3, #8]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d00b      	beq.n	80067f8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067e6:	689b      	ldr	r3, [r3, #8]
 80067e8:	687a      	ldr	r2, [r7, #4]
 80067ea:	7c12      	ldrb	r2, [r2, #16]
 80067ec:	f107 0108 	add.w	r1, r7, #8
 80067f0:	4610      	mov	r0, r2
 80067f2:	4798      	blx	r3
 80067f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80067f6:	e077      	b.n	80068e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80067f8:	6839      	ldr	r1, [r7, #0]
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f000 fab1 	bl	8006d62 <USBD_CtlError>
            err++;
 8006800:	7afb      	ldrb	r3, [r7, #11]
 8006802:	3301      	adds	r3, #1
 8006804:	72fb      	strb	r3, [r7, #11]
          break;
 8006806:	e06f      	b.n	80068e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800680e:	68db      	ldr	r3, [r3, #12]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d00b      	beq.n	800682c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800681a:	68db      	ldr	r3, [r3, #12]
 800681c:	687a      	ldr	r2, [r7, #4]
 800681e:	7c12      	ldrb	r2, [r2, #16]
 8006820:	f107 0108 	add.w	r1, r7, #8
 8006824:	4610      	mov	r0, r2
 8006826:	4798      	blx	r3
 8006828:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800682a:	e05d      	b.n	80068e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800682c:	6839      	ldr	r1, [r7, #0]
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f000 fa97 	bl	8006d62 <USBD_CtlError>
            err++;
 8006834:	7afb      	ldrb	r3, [r7, #11]
 8006836:	3301      	adds	r3, #1
 8006838:	72fb      	strb	r3, [r7, #11]
          break;
 800683a:	e055      	b.n	80068e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006842:	691b      	ldr	r3, [r3, #16]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d00b      	beq.n	8006860 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800684e:	691b      	ldr	r3, [r3, #16]
 8006850:	687a      	ldr	r2, [r7, #4]
 8006852:	7c12      	ldrb	r2, [r2, #16]
 8006854:	f107 0108 	add.w	r1, r7, #8
 8006858:	4610      	mov	r0, r2
 800685a:	4798      	blx	r3
 800685c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800685e:	e043      	b.n	80068e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006860:	6839      	ldr	r1, [r7, #0]
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f000 fa7d 	bl	8006d62 <USBD_CtlError>
            err++;
 8006868:	7afb      	ldrb	r3, [r7, #11]
 800686a:	3301      	adds	r3, #1
 800686c:	72fb      	strb	r3, [r7, #11]
          break;
 800686e:	e03b      	b.n	80068e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006876:	695b      	ldr	r3, [r3, #20]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d00b      	beq.n	8006894 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006882:	695b      	ldr	r3, [r3, #20]
 8006884:	687a      	ldr	r2, [r7, #4]
 8006886:	7c12      	ldrb	r2, [r2, #16]
 8006888:	f107 0108 	add.w	r1, r7, #8
 800688c:	4610      	mov	r0, r2
 800688e:	4798      	blx	r3
 8006890:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006892:	e029      	b.n	80068e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006894:	6839      	ldr	r1, [r7, #0]
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f000 fa63 	bl	8006d62 <USBD_CtlError>
            err++;
 800689c:	7afb      	ldrb	r3, [r7, #11]
 800689e:	3301      	adds	r3, #1
 80068a0:	72fb      	strb	r3, [r7, #11]
          break;
 80068a2:	e021      	b.n	80068e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068aa:	699b      	ldr	r3, [r3, #24]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d00b      	beq.n	80068c8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068b6:	699b      	ldr	r3, [r3, #24]
 80068b8:	687a      	ldr	r2, [r7, #4]
 80068ba:	7c12      	ldrb	r2, [r2, #16]
 80068bc:	f107 0108 	add.w	r1, r7, #8
 80068c0:	4610      	mov	r0, r2
 80068c2:	4798      	blx	r3
 80068c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80068c6:	e00f      	b.n	80068e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80068c8:	6839      	ldr	r1, [r7, #0]
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f000 fa49 	bl	8006d62 <USBD_CtlError>
            err++;
 80068d0:	7afb      	ldrb	r3, [r7, #11]
 80068d2:	3301      	adds	r3, #1
 80068d4:	72fb      	strb	r3, [r7, #11]
          break;
 80068d6:	e007      	b.n	80068e8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80068d8:	6839      	ldr	r1, [r7, #0]
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f000 fa41 	bl	8006d62 <USBD_CtlError>
          err++;
 80068e0:	7afb      	ldrb	r3, [r7, #11]
 80068e2:	3301      	adds	r3, #1
 80068e4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80068e6:	bf00      	nop
      }
      break;
 80068e8:	e037      	b.n	800695a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	7c1b      	ldrb	r3, [r3, #16]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d109      	bne.n	8006906 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068fa:	f107 0208 	add.w	r2, r7, #8
 80068fe:	4610      	mov	r0, r2
 8006900:	4798      	blx	r3
 8006902:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006904:	e029      	b.n	800695a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006906:	6839      	ldr	r1, [r7, #0]
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f000 fa2a 	bl	8006d62 <USBD_CtlError>
        err++;
 800690e:	7afb      	ldrb	r3, [r7, #11]
 8006910:	3301      	adds	r3, #1
 8006912:	72fb      	strb	r3, [r7, #11]
      break;
 8006914:	e021      	b.n	800695a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	7c1b      	ldrb	r3, [r3, #16]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d10d      	bne.n	800693a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006926:	f107 0208 	add.w	r2, r7, #8
 800692a:	4610      	mov	r0, r2
 800692c:	4798      	blx	r3
 800692e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	3301      	adds	r3, #1
 8006934:	2207      	movs	r2, #7
 8006936:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006938:	e00f      	b.n	800695a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800693a:	6839      	ldr	r1, [r7, #0]
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	f000 fa10 	bl	8006d62 <USBD_CtlError>
        err++;
 8006942:	7afb      	ldrb	r3, [r7, #11]
 8006944:	3301      	adds	r3, #1
 8006946:	72fb      	strb	r3, [r7, #11]
      break;
 8006948:	e007      	b.n	800695a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800694a:	6839      	ldr	r1, [r7, #0]
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f000 fa08 	bl	8006d62 <USBD_CtlError>
      err++;
 8006952:	7afb      	ldrb	r3, [r7, #11]
 8006954:	3301      	adds	r3, #1
 8006956:	72fb      	strb	r3, [r7, #11]
      break;
 8006958:	bf00      	nop
  }

  if (err != 0U)
 800695a:	7afb      	ldrb	r3, [r7, #11]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d11e      	bne.n	800699e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	88db      	ldrh	r3, [r3, #6]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d016      	beq.n	8006996 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006968:	893b      	ldrh	r3, [r7, #8]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d00e      	beq.n	800698c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	88da      	ldrh	r2, [r3, #6]
 8006972:	893b      	ldrh	r3, [r7, #8]
 8006974:	4293      	cmp	r3, r2
 8006976:	bf28      	it	cs
 8006978:	4613      	movcs	r3, r2
 800697a:	b29b      	uxth	r3, r3
 800697c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800697e:	893b      	ldrh	r3, [r7, #8]
 8006980:	461a      	mov	r2, r3
 8006982:	68f9      	ldr	r1, [r7, #12]
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f000 f9fd 	bl	8006d84 <USBD_CtlSendData>
 800698a:	e009      	b.n	80069a0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800698c:	6839      	ldr	r1, [r7, #0]
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f000 f9e7 	bl	8006d62 <USBD_CtlError>
 8006994:	e004      	b.n	80069a0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f000 fa31 	bl	8006dfe <USBD_CtlSendStatus>
 800699c:	e000      	b.n	80069a0 <USBD_GetDescriptor+0x2cc>
    return;
 800699e:	bf00      	nop
  }
}
 80069a0:	3710      	adds	r7, #16
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}
 80069a6:	bf00      	nop

080069a8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b084      	sub	sp, #16
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
 80069b0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	889b      	ldrh	r3, [r3, #4]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d131      	bne.n	8006a1e <USBD_SetAddress+0x76>
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	88db      	ldrh	r3, [r3, #6]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d12d      	bne.n	8006a1e <USBD_SetAddress+0x76>
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	885b      	ldrh	r3, [r3, #2]
 80069c6:	2b7f      	cmp	r3, #127	; 0x7f
 80069c8:	d829      	bhi.n	8006a1e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	885b      	ldrh	r3, [r3, #2]
 80069ce:	b2db      	uxtb	r3, r3
 80069d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069d4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069dc:	b2db      	uxtb	r3, r3
 80069de:	2b03      	cmp	r3, #3
 80069e0:	d104      	bne.n	80069ec <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80069e2:	6839      	ldr	r1, [r7, #0]
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f000 f9bc 	bl	8006d62 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069ea:	e01d      	b.n	8006a28 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	7bfa      	ldrb	r2, [r7, #15]
 80069f0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80069f4:	7bfb      	ldrb	r3, [r7, #15]
 80069f6:	4619      	mov	r1, r3
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f00f fd68 	bl	80164ce <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f000 f9fd 	bl	8006dfe <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006a04:	7bfb      	ldrb	r3, [r7, #15]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d004      	beq.n	8006a14 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2202      	movs	r2, #2
 8006a0e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a12:	e009      	b.n	8006a28 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2201      	movs	r2, #1
 8006a18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a1c:	e004      	b.n	8006a28 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006a1e:	6839      	ldr	r1, [r7, #0]
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f000 f99e 	bl	8006d62 <USBD_CtlError>
  }
}
 8006a26:	bf00      	nop
 8006a28:	bf00      	nop
 8006a2a:	3710      	adds	r7, #16
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}

08006a30 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b084      	sub	sp, #16
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
 8006a38:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	885b      	ldrh	r3, [r3, #2]
 8006a42:	b2da      	uxtb	r2, r3
 8006a44:	4b4e      	ldr	r3, [pc, #312]	; (8006b80 <USBD_SetConfig+0x150>)
 8006a46:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006a48:	4b4d      	ldr	r3, [pc, #308]	; (8006b80 <USBD_SetConfig+0x150>)
 8006a4a:	781b      	ldrb	r3, [r3, #0]
 8006a4c:	2b01      	cmp	r3, #1
 8006a4e:	d905      	bls.n	8006a5c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006a50:	6839      	ldr	r1, [r7, #0]
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f000 f985 	bl	8006d62 <USBD_CtlError>
    return USBD_FAIL;
 8006a58:	2303      	movs	r3, #3
 8006a5a:	e08c      	b.n	8006b76 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a62:	b2db      	uxtb	r3, r3
 8006a64:	2b02      	cmp	r3, #2
 8006a66:	d002      	beq.n	8006a6e <USBD_SetConfig+0x3e>
 8006a68:	2b03      	cmp	r3, #3
 8006a6a:	d029      	beq.n	8006ac0 <USBD_SetConfig+0x90>
 8006a6c:	e075      	b.n	8006b5a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006a6e:	4b44      	ldr	r3, [pc, #272]	; (8006b80 <USBD_SetConfig+0x150>)
 8006a70:	781b      	ldrb	r3, [r3, #0]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d020      	beq.n	8006ab8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006a76:	4b42      	ldr	r3, [pc, #264]	; (8006b80 <USBD_SetConfig+0x150>)
 8006a78:	781b      	ldrb	r3, [r3, #0]
 8006a7a:	461a      	mov	r2, r3
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006a80:	4b3f      	ldr	r3, [pc, #252]	; (8006b80 <USBD_SetConfig+0x150>)
 8006a82:	781b      	ldrb	r3, [r3, #0]
 8006a84:	4619      	mov	r1, r3
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f7ff f844 	bl	8005b14 <USBD_SetClassConfig>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006a90:	7bfb      	ldrb	r3, [r7, #15]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d008      	beq.n	8006aa8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006a96:	6839      	ldr	r1, [r7, #0]
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f000 f962 	bl	8006d62 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2202      	movs	r2, #2
 8006aa2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006aa6:	e065      	b.n	8006b74 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f000 f9a8 	bl	8006dfe <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2203      	movs	r2, #3
 8006ab2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006ab6:	e05d      	b.n	8006b74 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f000 f9a0 	bl	8006dfe <USBD_CtlSendStatus>
      break;
 8006abe:	e059      	b.n	8006b74 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006ac0:	4b2f      	ldr	r3, [pc, #188]	; (8006b80 <USBD_SetConfig+0x150>)
 8006ac2:	781b      	ldrb	r3, [r3, #0]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d112      	bne.n	8006aee <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2202      	movs	r2, #2
 8006acc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006ad0:	4b2b      	ldr	r3, [pc, #172]	; (8006b80 <USBD_SetConfig+0x150>)
 8006ad2:	781b      	ldrb	r3, [r3, #0]
 8006ad4:	461a      	mov	r2, r3
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006ada:	4b29      	ldr	r3, [pc, #164]	; (8006b80 <USBD_SetConfig+0x150>)
 8006adc:	781b      	ldrb	r3, [r3, #0]
 8006ade:	4619      	mov	r1, r3
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f7ff f833 	bl	8005b4c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f000 f989 	bl	8006dfe <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006aec:	e042      	b.n	8006b74 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006aee:	4b24      	ldr	r3, [pc, #144]	; (8006b80 <USBD_SetConfig+0x150>)
 8006af0:	781b      	ldrb	r3, [r3, #0]
 8006af2:	461a      	mov	r2, r3
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	685b      	ldr	r3, [r3, #4]
 8006af8:	429a      	cmp	r2, r3
 8006afa:	d02a      	beq.n	8006b52 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	685b      	ldr	r3, [r3, #4]
 8006b00:	b2db      	uxtb	r3, r3
 8006b02:	4619      	mov	r1, r3
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	f7ff f821 	bl	8005b4c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006b0a:	4b1d      	ldr	r3, [pc, #116]	; (8006b80 <USBD_SetConfig+0x150>)
 8006b0c:	781b      	ldrb	r3, [r3, #0]
 8006b0e:	461a      	mov	r2, r3
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006b14:	4b1a      	ldr	r3, [pc, #104]	; (8006b80 <USBD_SetConfig+0x150>)
 8006b16:	781b      	ldrb	r3, [r3, #0]
 8006b18:	4619      	mov	r1, r3
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f7fe fffa 	bl	8005b14 <USBD_SetClassConfig>
 8006b20:	4603      	mov	r3, r0
 8006b22:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006b24:	7bfb      	ldrb	r3, [r7, #15]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d00f      	beq.n	8006b4a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006b2a:	6839      	ldr	r1, [r7, #0]
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f000 f918 	bl	8006d62 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	685b      	ldr	r3, [r3, #4]
 8006b36:	b2db      	uxtb	r3, r3
 8006b38:	4619      	mov	r1, r3
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f7ff f806 	bl	8005b4c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2202      	movs	r2, #2
 8006b44:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006b48:	e014      	b.n	8006b74 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f000 f957 	bl	8006dfe <USBD_CtlSendStatus>
      break;
 8006b50:	e010      	b.n	8006b74 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f000 f953 	bl	8006dfe <USBD_CtlSendStatus>
      break;
 8006b58:	e00c      	b.n	8006b74 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006b5a:	6839      	ldr	r1, [r7, #0]
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f000 f900 	bl	8006d62 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006b62:	4b07      	ldr	r3, [pc, #28]	; (8006b80 <USBD_SetConfig+0x150>)
 8006b64:	781b      	ldrb	r3, [r3, #0]
 8006b66:	4619      	mov	r1, r3
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f7fe ffef 	bl	8005b4c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006b6e:	2303      	movs	r3, #3
 8006b70:	73fb      	strb	r3, [r7, #15]
      break;
 8006b72:	bf00      	nop
  }

  return ret;
 8006b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3710      	adds	r7, #16
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}
 8006b7e:	bf00      	nop
 8006b80:	20004fa8 	.word	0x20004fa8

08006b84 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b082      	sub	sp, #8
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
 8006b8c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	88db      	ldrh	r3, [r3, #6]
 8006b92:	2b01      	cmp	r3, #1
 8006b94:	d004      	beq.n	8006ba0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006b96:	6839      	ldr	r1, [r7, #0]
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f000 f8e2 	bl	8006d62 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006b9e:	e023      	b.n	8006be8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ba6:	b2db      	uxtb	r3, r3
 8006ba8:	2b02      	cmp	r3, #2
 8006baa:	dc02      	bgt.n	8006bb2 <USBD_GetConfig+0x2e>
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	dc03      	bgt.n	8006bb8 <USBD_GetConfig+0x34>
 8006bb0:	e015      	b.n	8006bde <USBD_GetConfig+0x5a>
 8006bb2:	2b03      	cmp	r3, #3
 8006bb4:	d00b      	beq.n	8006bce <USBD_GetConfig+0x4a>
 8006bb6:	e012      	b.n	8006bde <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	3308      	adds	r3, #8
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	4619      	mov	r1, r3
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f000 f8dc 	bl	8006d84 <USBD_CtlSendData>
        break;
 8006bcc:	e00c      	b.n	8006be8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	3304      	adds	r3, #4
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	4619      	mov	r1, r3
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f000 f8d4 	bl	8006d84 <USBD_CtlSendData>
        break;
 8006bdc:	e004      	b.n	8006be8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006bde:	6839      	ldr	r1, [r7, #0]
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f000 f8be 	bl	8006d62 <USBD_CtlError>
        break;
 8006be6:	bf00      	nop
}
 8006be8:	bf00      	nop
 8006bea:	3708      	adds	r7, #8
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bd80      	pop	{r7, pc}

08006bf0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b082      	sub	sp, #8
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
 8006bf8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c00:	b2db      	uxtb	r3, r3
 8006c02:	3b01      	subs	r3, #1
 8006c04:	2b02      	cmp	r3, #2
 8006c06:	d81e      	bhi.n	8006c46 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	88db      	ldrh	r3, [r3, #6]
 8006c0c:	2b02      	cmp	r3, #2
 8006c0e:	d004      	beq.n	8006c1a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006c10:	6839      	ldr	r1, [r7, #0]
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f000 f8a5 	bl	8006d62 <USBD_CtlError>
        break;
 8006c18:	e01a      	b.n	8006c50 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d005      	beq.n	8006c36 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	68db      	ldr	r3, [r3, #12]
 8006c2e:	f043 0202 	orr.w	r2, r3, #2
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	330c      	adds	r3, #12
 8006c3a:	2202      	movs	r2, #2
 8006c3c:	4619      	mov	r1, r3
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f000 f8a0 	bl	8006d84 <USBD_CtlSendData>
      break;
 8006c44:	e004      	b.n	8006c50 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006c46:	6839      	ldr	r1, [r7, #0]
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f000 f88a 	bl	8006d62 <USBD_CtlError>
      break;
 8006c4e:	bf00      	nop
  }
}
 8006c50:	bf00      	nop
 8006c52:	3708      	adds	r7, #8
 8006c54:	46bd      	mov	sp, r7
 8006c56:	bd80      	pop	{r7, pc}

08006c58 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b082      	sub	sp, #8
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
 8006c60:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	885b      	ldrh	r3, [r3, #2]
 8006c66:	2b01      	cmp	r3, #1
 8006c68:	d107      	bne.n	8006c7a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2201      	movs	r2, #1
 8006c6e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f000 f8c3 	bl	8006dfe <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006c78:	e013      	b.n	8006ca2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	885b      	ldrh	r3, [r3, #2]
 8006c7e:	2b02      	cmp	r3, #2
 8006c80:	d10b      	bne.n	8006c9a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	889b      	ldrh	r3, [r3, #4]
 8006c86:	0a1b      	lsrs	r3, r3, #8
 8006c88:	b29b      	uxth	r3, r3
 8006c8a:	b2da      	uxtb	r2, r3
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f000 f8b3 	bl	8006dfe <USBD_CtlSendStatus>
}
 8006c98:	e003      	b.n	8006ca2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006c9a:	6839      	ldr	r1, [r7, #0]
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f000 f860 	bl	8006d62 <USBD_CtlError>
}
 8006ca2:	bf00      	nop
 8006ca4:	3708      	adds	r7, #8
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}

08006caa <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006caa:	b580      	push	{r7, lr}
 8006cac:	b082      	sub	sp, #8
 8006cae:	af00      	add	r7, sp, #0
 8006cb0:	6078      	str	r0, [r7, #4]
 8006cb2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cba:	b2db      	uxtb	r3, r3
 8006cbc:	3b01      	subs	r3, #1
 8006cbe:	2b02      	cmp	r3, #2
 8006cc0:	d80b      	bhi.n	8006cda <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	885b      	ldrh	r3, [r3, #2]
 8006cc6:	2b01      	cmp	r3, #1
 8006cc8:	d10c      	bne.n	8006ce4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f000 f893 	bl	8006dfe <USBD_CtlSendStatus>
      }
      break;
 8006cd8:	e004      	b.n	8006ce4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006cda:	6839      	ldr	r1, [r7, #0]
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f000 f840 	bl	8006d62 <USBD_CtlError>
      break;
 8006ce2:	e000      	b.n	8006ce6 <USBD_ClrFeature+0x3c>
      break;
 8006ce4:	bf00      	nop
  }
}
 8006ce6:	bf00      	nop
 8006ce8:	3708      	adds	r7, #8
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}

08006cee <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006cee:	b580      	push	{r7, lr}
 8006cf0:	b084      	sub	sp, #16
 8006cf2:	af00      	add	r7, sp, #0
 8006cf4:	6078      	str	r0, [r7, #4]
 8006cf6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	781a      	ldrb	r2, [r3, #0]
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	3301      	adds	r3, #1
 8006d08:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	781a      	ldrb	r2, [r3, #0]
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	3301      	adds	r3, #1
 8006d16:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006d18:	68f8      	ldr	r0, [r7, #12]
 8006d1a:	f7ff fa41 	bl	80061a0 <SWAPBYTE>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	461a      	mov	r2, r3
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	3301      	adds	r3, #1
 8006d2a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	3301      	adds	r3, #1
 8006d30:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006d32:	68f8      	ldr	r0, [r7, #12]
 8006d34:	f7ff fa34 	bl	80061a0 <SWAPBYTE>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	461a      	mov	r2, r3
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	3301      	adds	r3, #1
 8006d44:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	3301      	adds	r3, #1
 8006d4a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006d4c:	68f8      	ldr	r0, [r7, #12]
 8006d4e:	f7ff fa27 	bl	80061a0 <SWAPBYTE>
 8006d52:	4603      	mov	r3, r0
 8006d54:	461a      	mov	r2, r3
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	80da      	strh	r2, [r3, #6]
}
 8006d5a:	bf00      	nop
 8006d5c:	3710      	adds	r7, #16
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}

08006d62 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d62:	b580      	push	{r7, lr}
 8006d64:	b082      	sub	sp, #8
 8006d66:	af00      	add	r7, sp, #0
 8006d68:	6078      	str	r0, [r7, #4]
 8006d6a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006d6c:	2180      	movs	r1, #128	; 0x80
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f00f fb44 	bl	80163fc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006d74:	2100      	movs	r1, #0
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f00f fb40 	bl	80163fc <USBD_LL_StallEP>
}
 8006d7c:	bf00      	nop
 8006d7e:	3708      	adds	r7, #8
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}

08006d84 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b084      	sub	sp, #16
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	60f8      	str	r0, [r7, #12]
 8006d8c:	60b9      	str	r1, [r7, #8]
 8006d8e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	2202      	movs	r2, #2
 8006d94:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	687a      	ldr	r2, [r7, #4]
 8006d9c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	687a      	ldr	r2, [r7, #4]
 8006da2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	68ba      	ldr	r2, [r7, #8]
 8006da8:	2100      	movs	r1, #0
 8006daa:	68f8      	ldr	r0, [r7, #12]
 8006dac:	f00f fbae 	bl	801650c <USBD_LL_Transmit>

  return USBD_OK;
 8006db0:	2300      	movs	r3, #0
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	3710      	adds	r7, #16
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bd80      	pop	{r7, pc}

08006dba <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006dba:	b580      	push	{r7, lr}
 8006dbc:	b084      	sub	sp, #16
 8006dbe:	af00      	add	r7, sp, #0
 8006dc0:	60f8      	str	r0, [r7, #12]
 8006dc2:	60b9      	str	r1, [r7, #8]
 8006dc4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	68ba      	ldr	r2, [r7, #8]
 8006dca:	2100      	movs	r1, #0
 8006dcc:	68f8      	ldr	r0, [r7, #12]
 8006dce:	f00f fb9d 	bl	801650c <USBD_LL_Transmit>

  return USBD_OK;
 8006dd2:	2300      	movs	r3, #0
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	3710      	adds	r7, #16
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd80      	pop	{r7, pc}

08006ddc <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b084      	sub	sp, #16
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	60f8      	str	r0, [r7, #12]
 8006de4:	60b9      	str	r1, [r7, #8]
 8006de6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	68ba      	ldr	r2, [r7, #8]
 8006dec:	2100      	movs	r1, #0
 8006dee:	68f8      	ldr	r0, [r7, #12]
 8006df0:	f00f fbad 	bl	801654e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006df4:	2300      	movs	r3, #0
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	3710      	adds	r7, #16
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}

08006dfe <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006dfe:	b580      	push	{r7, lr}
 8006e00:	b082      	sub	sp, #8
 8006e02:	af00      	add	r7, sp, #0
 8006e04:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2204      	movs	r2, #4
 8006e0a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006e0e:	2300      	movs	r3, #0
 8006e10:	2200      	movs	r2, #0
 8006e12:	2100      	movs	r1, #0
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	f00f fb79 	bl	801650c <USBD_LL_Transmit>

  return USBD_OK;
 8006e1a:	2300      	movs	r3, #0
}
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	3708      	adds	r7, #8
 8006e20:	46bd      	mov	sp, r7
 8006e22:	bd80      	pop	{r7, pc}

08006e24 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b082      	sub	sp, #8
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2205      	movs	r2, #5
 8006e30:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006e34:	2300      	movs	r3, #0
 8006e36:	2200      	movs	r2, #0
 8006e38:	2100      	movs	r1, #0
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f00f fb87 	bl	801654e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006e40:	2300      	movs	r3, #0
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	3708      	adds	r7, #8
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}

08006e4a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006e4a:	b480      	push	{r7}
 8006e4c:	b085      	sub	sp, #20
 8006e4e:	af00      	add	r7, sp, #0
 8006e50:	4603      	mov	r3, r0
 8006e52:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006e54:	2300      	movs	r3, #0
 8006e56:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006e58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006e5c:	2b84      	cmp	r3, #132	; 0x84
 8006e5e:	d005      	beq.n	8006e6c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006e60:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	4413      	add	r3, r2
 8006e68:	3303      	adds	r3, #3
 8006e6a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	3714      	adds	r7, #20
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bc80      	pop	{r7}
 8006e76:	4770      	bx	lr

08006e78 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b083      	sub	sp, #12
 8006e7c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e7e:	f3ef 8305 	mrs	r3, IPSR
 8006e82:	607b      	str	r3, [r7, #4]
  return(result);
 8006e84:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	bf14      	ite	ne
 8006e8a:	2301      	movne	r3, #1
 8006e8c:	2300      	moveq	r3, #0
 8006e8e:	b2db      	uxtb	r3, r3
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	370c      	adds	r7, #12
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bc80      	pop	{r7}
 8006e98:	4770      	bx	lr

08006e9a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006e9a:	b580      	push	{r7, lr}
 8006e9c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006e9e:	f001 fc1f 	bl	80086e0 <vTaskStartScheduler>
  
  return osOK;
 8006ea2:	2300      	movs	r3, #0
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	bd80      	pop	{r7, pc}

08006ea8 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8006eac:	f7ff ffe4 	bl	8006e78 <inHandlerMode>
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d003      	beq.n	8006ebe <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8006eb6:	f001 fd33 	bl	8008920 <xTaskGetTickCountFromISR>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	e002      	b.n	8006ec4 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8006ebe:	f001 fd21 	bl	8008904 <xTaskGetTickCount>
 8006ec2:	4603      	mov	r3, r0
  }
}
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	bd80      	pop	{r7, pc}

08006ec8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006eca:	b089      	sub	sp, #36	; 0x24
 8006ecc:	af04      	add	r7, sp, #16
 8006ece:	6078      	str	r0, [r7, #4]
 8006ed0:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	695b      	ldr	r3, [r3, #20]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d020      	beq.n	8006f1c <osThreadCreate+0x54>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	699b      	ldr	r3, [r3, #24]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d01c      	beq.n	8006f1c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	685c      	ldr	r4, [r3, #4]
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681d      	ldr	r5, [r3, #0]
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	691e      	ldr	r6, [r3, #16]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	f7ff ffa8 	bl	8006e4a <makeFreeRtosPriority>
 8006efa:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	695b      	ldr	r3, [r3, #20]
 8006f00:	687a      	ldr	r2, [r7, #4]
 8006f02:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006f04:	9202      	str	r2, [sp, #8]
 8006f06:	9301      	str	r3, [sp, #4]
 8006f08:	9100      	str	r1, [sp, #0]
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	4632      	mov	r2, r6
 8006f0e:	4629      	mov	r1, r5
 8006f10:	4620      	mov	r0, r4
 8006f12:	f001 fa0a 	bl	800832a <xTaskCreateStatic>
 8006f16:	4603      	mov	r3, r0
 8006f18:	60fb      	str	r3, [r7, #12]
 8006f1a:	e01c      	b.n	8006f56 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	685c      	ldr	r4, [r3, #4]
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006f28:	b29e      	uxth	r6, r3
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006f30:	4618      	mov	r0, r3
 8006f32:	f7ff ff8a 	bl	8006e4a <makeFreeRtosPriority>
 8006f36:	4602      	mov	r2, r0
 8006f38:	f107 030c 	add.w	r3, r7, #12
 8006f3c:	9301      	str	r3, [sp, #4]
 8006f3e:	9200      	str	r2, [sp, #0]
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	4632      	mov	r2, r6
 8006f44:	4629      	mov	r1, r5
 8006f46:	4620      	mov	r0, r4
 8006f48:	f001 fa49 	bl	80083de <xTaskCreate>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	2b01      	cmp	r3, #1
 8006f50:	d001      	beq.n	8006f56 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006f52:	2300      	movs	r3, #0
 8006f54:	e000      	b.n	8006f58 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006f56:	68fb      	ldr	r3, [r7, #12]
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	3714      	adds	r7, #20
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006f60 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b084      	sub	sp, #16
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d001      	beq.n	8006f76 <osDelay+0x16>
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	e000      	b.n	8006f78 <osDelay+0x18>
 8006f76:	2301      	movs	r3, #1
 8006f78:	4618      	mov	r0, r3
 8006f7a:	f001 fb7d 	bl	8008678 <vTaskDelay>
  
  return osOK;
 8006f7e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	3710      	adds	r7, #16
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}

08006f88 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b082      	sub	sp, #8
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	685b      	ldr	r3, [r3, #4]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d007      	beq.n	8006fa8 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	685b      	ldr	r3, [r3, #4]
 8006f9c:	4619      	mov	r1, r3
 8006f9e:	2001      	movs	r0, #1
 8006fa0:	f000 fc03 	bl	80077aa <xQueueCreateMutexStatic>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	e003      	b.n	8006fb0 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8006fa8:	2001      	movs	r0, #1
 8006faa:	f000 fbe6 	bl	800777a <xQueueCreateMutex>
 8006fae:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3708      	adds	r7, #8
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}

08006fb8 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b084      	sub	sp, #16
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
 8006fc0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d101      	bne.n	8006fd0 <osMutexWait+0x18>
    return osErrorParameter;
 8006fcc:	2380      	movs	r3, #128	; 0x80
 8006fce:	e03a      	b.n	8007046 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fda:	d103      	bne.n	8006fe4 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8006fdc:	f04f 33ff 	mov.w	r3, #4294967295
 8006fe0:	60fb      	str	r3, [r7, #12]
 8006fe2:	e009      	b.n	8006ff8 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d006      	beq.n	8006ff8 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d101      	bne.n	8006ff8 <osMutexWait+0x40>
      ticks = 1;
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8006ff8:	f7ff ff3e 	bl	8006e78 <inHandlerMode>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d017      	beq.n	8007032 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8007002:	f107 0308 	add.w	r3, r7, #8
 8007006:	461a      	mov	r2, r3
 8007008:	2100      	movs	r1, #0
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f000 ffe8 	bl	8007fe0 <xQueueReceiveFromISR>
 8007010:	4603      	mov	r3, r0
 8007012:	2b01      	cmp	r3, #1
 8007014:	d001      	beq.n	800701a <osMutexWait+0x62>
      return osErrorOS;
 8007016:	23ff      	movs	r3, #255	; 0xff
 8007018:	e015      	b.n	8007046 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d011      	beq.n	8007044 <osMutexWait+0x8c>
 8007020:	4b0b      	ldr	r3, [pc, #44]	; (8007050 <osMutexWait+0x98>)
 8007022:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007026:	601a      	str	r2, [r3, #0]
 8007028:	f3bf 8f4f 	dsb	sy
 800702c:	f3bf 8f6f 	isb	sy
 8007030:	e008      	b.n	8007044 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8007032:	68f9      	ldr	r1, [r7, #12]
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f000 fecb 	bl	8007dd0 <xQueueSemaphoreTake>
 800703a:	4603      	mov	r3, r0
 800703c:	2b01      	cmp	r3, #1
 800703e:	d001      	beq.n	8007044 <osMutexWait+0x8c>
    return osErrorOS;
 8007040:	23ff      	movs	r3, #255	; 0xff
 8007042:	e000      	b.n	8007046 <osMutexWait+0x8e>
  }
  
  return osOK;
 8007044:	2300      	movs	r3, #0
}
 8007046:	4618      	mov	r0, r3
 8007048:	3710      	adds	r7, #16
 800704a:	46bd      	mov	sp, r7
 800704c:	bd80      	pop	{r7, pc}
 800704e:	bf00      	nop
 8007050:	e000ed04 	.word	0xe000ed04

08007054 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b084      	sub	sp, #16
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800705c:	2300      	movs	r3, #0
 800705e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8007060:	2300      	movs	r3, #0
 8007062:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8007064:	f7ff ff08 	bl	8006e78 <inHandlerMode>
 8007068:	4603      	mov	r3, r0
 800706a:	2b00      	cmp	r3, #0
 800706c:	d016      	beq.n	800709c <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800706e:	f107 0308 	add.w	r3, r7, #8
 8007072:	4619      	mov	r1, r3
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f000 fd45 	bl	8007b04 <xQueueGiveFromISR>
 800707a:	4603      	mov	r3, r0
 800707c:	2b01      	cmp	r3, #1
 800707e:	d001      	beq.n	8007084 <osMutexRelease+0x30>
      return osErrorOS;
 8007080:	23ff      	movs	r3, #255	; 0xff
 8007082:	e017      	b.n	80070b4 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d013      	beq.n	80070b2 <osMutexRelease+0x5e>
 800708a:	4b0c      	ldr	r3, [pc, #48]	; (80070bc <osMutexRelease+0x68>)
 800708c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007090:	601a      	str	r2, [r3, #0]
 8007092:	f3bf 8f4f 	dsb	sy
 8007096:	f3bf 8f6f 	isb	sy
 800709a:	e00a      	b.n	80070b2 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800709c:	2300      	movs	r3, #0
 800709e:	2200      	movs	r2, #0
 80070a0:	2100      	movs	r1, #0
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f000 fb9c 	bl	80077e0 <xQueueGenericSend>
 80070a8:	4603      	mov	r3, r0
 80070aa:	2b01      	cmp	r3, #1
 80070ac:	d001      	beq.n	80070b2 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 80070ae:	23ff      	movs	r3, #255	; 0xff
 80070b0:	60fb      	str	r3, [r7, #12]
  }
  return result;
 80070b2:	68fb      	ldr	r3, [r7, #12]
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	3710      	adds	r7, #16
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd80      	pop	{r7, pc}
 80070bc:	e000ed04 	.word	0xe000ed04

080070c0 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b084      	sub	sp, #16
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
 80070c8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80070ca:	2300      	movs	r3, #0
 80070cc:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d101      	bne.n	80070d8 <osSemaphoreWait+0x18>
    return osErrorParameter;
 80070d4:	2380      	movs	r3, #128	; 0x80
 80070d6:	e03a      	b.n	800714e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80070d8:	2300      	movs	r3, #0
 80070da:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070e2:	d103      	bne.n	80070ec <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80070e4:	f04f 33ff 	mov.w	r3, #4294967295
 80070e8:	60fb      	str	r3, [r7, #12]
 80070ea:	e009      	b.n	8007100 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d006      	beq.n	8007100 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d101      	bne.n	8007100 <osSemaphoreWait+0x40>
      ticks = 1;
 80070fc:	2301      	movs	r3, #1
 80070fe:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8007100:	f7ff feba 	bl	8006e78 <inHandlerMode>
 8007104:	4603      	mov	r3, r0
 8007106:	2b00      	cmp	r3, #0
 8007108:	d017      	beq.n	800713a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800710a:	f107 0308 	add.w	r3, r7, #8
 800710e:	461a      	mov	r2, r3
 8007110:	2100      	movs	r1, #0
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f000 ff64 	bl	8007fe0 <xQueueReceiveFromISR>
 8007118:	4603      	mov	r3, r0
 800711a:	2b01      	cmp	r3, #1
 800711c:	d001      	beq.n	8007122 <osSemaphoreWait+0x62>
      return osErrorOS;
 800711e:	23ff      	movs	r3, #255	; 0xff
 8007120:	e015      	b.n	800714e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8007122:	68bb      	ldr	r3, [r7, #8]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d011      	beq.n	800714c <osSemaphoreWait+0x8c>
 8007128:	4b0b      	ldr	r3, [pc, #44]	; (8007158 <osSemaphoreWait+0x98>)
 800712a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800712e:	601a      	str	r2, [r3, #0]
 8007130:	f3bf 8f4f 	dsb	sy
 8007134:	f3bf 8f6f 	isb	sy
 8007138:	e008      	b.n	800714c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800713a:	68f9      	ldr	r1, [r7, #12]
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f000 fe47 	bl	8007dd0 <xQueueSemaphoreTake>
 8007142:	4603      	mov	r3, r0
 8007144:	2b01      	cmp	r3, #1
 8007146:	d001      	beq.n	800714c <osSemaphoreWait+0x8c>
    return osErrorOS;
 8007148:	23ff      	movs	r3, #255	; 0xff
 800714a:	e000      	b.n	800714e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800714c:	2300      	movs	r3, #0
}
 800714e:	4618      	mov	r0, r3
 8007150:	3710      	adds	r7, #16
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}
 8007156:	bf00      	nop
 8007158:	e000ed04 	.word	0xe000ed04

0800715c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b084      	sub	sp, #16
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8007164:	2300      	movs	r3, #0
 8007166:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8007168:	2300      	movs	r3, #0
 800716a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800716c:	f7ff fe84 	bl	8006e78 <inHandlerMode>
 8007170:	4603      	mov	r3, r0
 8007172:	2b00      	cmp	r3, #0
 8007174:	d016      	beq.n	80071a4 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8007176:	f107 0308 	add.w	r3, r7, #8
 800717a:	4619      	mov	r1, r3
 800717c:	6878      	ldr	r0, [r7, #4]
 800717e:	f000 fcc1 	bl	8007b04 <xQueueGiveFromISR>
 8007182:	4603      	mov	r3, r0
 8007184:	2b01      	cmp	r3, #1
 8007186:	d001      	beq.n	800718c <osSemaphoreRelease+0x30>
      return osErrorOS;
 8007188:	23ff      	movs	r3, #255	; 0xff
 800718a:	e017      	b.n	80071bc <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d013      	beq.n	80071ba <osSemaphoreRelease+0x5e>
 8007192:	4b0c      	ldr	r3, [pc, #48]	; (80071c4 <osSemaphoreRelease+0x68>)
 8007194:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007198:	601a      	str	r2, [r3, #0]
 800719a:	f3bf 8f4f 	dsb	sy
 800719e:	f3bf 8f6f 	isb	sy
 80071a2:	e00a      	b.n	80071ba <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80071a4:	2300      	movs	r3, #0
 80071a6:	2200      	movs	r2, #0
 80071a8:	2100      	movs	r1, #0
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f000 fb18 	bl	80077e0 <xQueueGenericSend>
 80071b0:	4603      	mov	r3, r0
 80071b2:	2b01      	cmp	r3, #1
 80071b4:	d001      	beq.n	80071ba <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80071b6:	23ff      	movs	r3, #255	; 0xff
 80071b8:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80071ba:	68fb      	ldr	r3, [r7, #12]
}
 80071bc:	4618      	mov	r0, r3
 80071be:	3710      	adds	r7, #16
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bd80      	pop	{r7, pc}
 80071c4:	e000ed04 	.word	0xe000ed04

080071c8 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80071c8:	b590      	push	{r4, r7, lr}
 80071ca:	b085      	sub	sp, #20
 80071cc:	af02      	add	r7, sp, #8
 80071ce:	6078      	str	r0, [r7, #4]
 80071d0:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	689b      	ldr	r3, [r3, #8]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d011      	beq.n	80071fe <osMessageCreate+0x36>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	68db      	ldr	r3, [r3, #12]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d00d      	beq.n	80071fe <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6818      	ldr	r0, [r3, #0]
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6859      	ldr	r1, [r3, #4]
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	689a      	ldr	r2, [r3, #8]
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	68db      	ldr	r3, [r3, #12]
 80071f2:	2400      	movs	r4, #0
 80071f4:	9400      	str	r4, [sp, #0]
 80071f6:	f000 f9db 	bl	80075b0 <xQueueGenericCreateStatic>
 80071fa:	4603      	mov	r3, r0
 80071fc:	e008      	b.n	8007210 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6818      	ldr	r0, [r3, #0]
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	685b      	ldr	r3, [r3, #4]
 8007206:	2200      	movs	r2, #0
 8007208:	4619      	mov	r1, r3
 800720a:	f000 fa44 	bl	8007696 <xQueueGenericCreate>
 800720e:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8007210:	4618      	mov	r0, r3
 8007212:	370c      	adds	r7, #12
 8007214:	46bd      	mov	sp, r7
 8007216:	bd90      	pop	{r4, r7, pc}

08007218 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b086      	sub	sp, #24
 800721c:	af00      	add	r7, sp, #0
 800721e:	60f8      	str	r0, [r7, #12]
 8007220:	60b9      	str	r1, [r7, #8]
 8007222:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8007224:	2300      	movs	r3, #0
 8007226:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800722c:	697b      	ldr	r3, [r7, #20]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d101      	bne.n	8007236 <osMessagePut+0x1e>
    ticks = 1;
 8007232:	2301      	movs	r3, #1
 8007234:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8007236:	f7ff fe1f 	bl	8006e78 <inHandlerMode>
 800723a:	4603      	mov	r3, r0
 800723c:	2b00      	cmp	r3, #0
 800723e:	d018      	beq.n	8007272 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8007240:	f107 0210 	add.w	r2, r7, #16
 8007244:	f107 0108 	add.w	r1, r7, #8
 8007248:	2300      	movs	r3, #0
 800724a:	68f8      	ldr	r0, [r7, #12]
 800724c:	f000 fbc2 	bl	80079d4 <xQueueGenericSendFromISR>
 8007250:	4603      	mov	r3, r0
 8007252:	2b01      	cmp	r3, #1
 8007254:	d001      	beq.n	800725a <osMessagePut+0x42>
      return osErrorOS;
 8007256:	23ff      	movs	r3, #255	; 0xff
 8007258:	e018      	b.n	800728c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d014      	beq.n	800728a <osMessagePut+0x72>
 8007260:	4b0c      	ldr	r3, [pc, #48]	; (8007294 <osMessagePut+0x7c>)
 8007262:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007266:	601a      	str	r2, [r3, #0]
 8007268:	f3bf 8f4f 	dsb	sy
 800726c:	f3bf 8f6f 	isb	sy
 8007270:	e00b      	b.n	800728a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8007272:	f107 0108 	add.w	r1, r7, #8
 8007276:	2300      	movs	r3, #0
 8007278:	697a      	ldr	r2, [r7, #20]
 800727a:	68f8      	ldr	r0, [r7, #12]
 800727c:	f000 fab0 	bl	80077e0 <xQueueGenericSend>
 8007280:	4603      	mov	r3, r0
 8007282:	2b01      	cmp	r3, #1
 8007284:	d001      	beq.n	800728a <osMessagePut+0x72>
      return osErrorOS;
 8007286:	23ff      	movs	r3, #255	; 0xff
 8007288:	e000      	b.n	800728c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800728a:	2300      	movs	r3, #0
}
 800728c:	4618      	mov	r0, r3
 800728e:	3718      	adds	r7, #24
 8007290:	46bd      	mov	sp, r7
 8007292:	bd80      	pop	{r7, pc}
 8007294:	e000ed04 	.word	0xe000ed04

08007298 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8007298:	b590      	push	{r4, r7, lr}
 800729a:	b08b      	sub	sp, #44	; 0x2c
 800729c:	af00      	add	r7, sp, #0
 800729e:	60f8      	str	r0, [r7, #12]
 80072a0:	60b9      	str	r1, [r7, #8]
 80072a2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80072a8:	2300      	movs	r3, #0
 80072aa:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d10a      	bne.n	80072c8 <osMessageGet+0x30>
    event.status = osErrorParameter;
 80072b2:	2380      	movs	r3, #128	; 0x80
 80072b4:	617b      	str	r3, [r7, #20]
    return event;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	461c      	mov	r4, r3
 80072ba:	f107 0314 	add.w	r3, r7, #20
 80072be:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80072c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80072c6:	e054      	b.n	8007372 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80072c8:	2300      	movs	r3, #0
 80072ca:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80072cc:	2300      	movs	r3, #0
 80072ce:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072d6:	d103      	bne.n	80072e0 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80072d8:	f04f 33ff 	mov.w	r3, #4294967295
 80072dc:	627b      	str	r3, [r7, #36]	; 0x24
 80072de:	e009      	b.n	80072f4 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d006      	beq.n	80072f4 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80072ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d101      	bne.n	80072f4 <osMessageGet+0x5c>
      ticks = 1;
 80072f0:	2301      	movs	r3, #1
 80072f2:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80072f4:	f7ff fdc0 	bl	8006e78 <inHandlerMode>
 80072f8:	4603      	mov	r3, r0
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d01c      	beq.n	8007338 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80072fe:	f107 0220 	add.w	r2, r7, #32
 8007302:	f107 0314 	add.w	r3, r7, #20
 8007306:	3304      	adds	r3, #4
 8007308:	4619      	mov	r1, r3
 800730a:	68b8      	ldr	r0, [r7, #8]
 800730c:	f000 fe68 	bl	8007fe0 <xQueueReceiveFromISR>
 8007310:	4603      	mov	r3, r0
 8007312:	2b01      	cmp	r3, #1
 8007314:	d102      	bne.n	800731c <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8007316:	2310      	movs	r3, #16
 8007318:	617b      	str	r3, [r7, #20]
 800731a:	e001      	b.n	8007320 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800731c:	2300      	movs	r3, #0
 800731e:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007320:	6a3b      	ldr	r3, [r7, #32]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d01d      	beq.n	8007362 <osMessageGet+0xca>
 8007326:	4b15      	ldr	r3, [pc, #84]	; (800737c <osMessageGet+0xe4>)
 8007328:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800732c:	601a      	str	r2, [r3, #0]
 800732e:	f3bf 8f4f 	dsb	sy
 8007332:	f3bf 8f6f 	isb	sy
 8007336:	e014      	b.n	8007362 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8007338:	f107 0314 	add.w	r3, r7, #20
 800733c:	3304      	adds	r3, #4
 800733e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007340:	4619      	mov	r1, r3
 8007342:	68b8      	ldr	r0, [r7, #8]
 8007344:	f000 fc68 	bl	8007c18 <xQueueReceive>
 8007348:	4603      	mov	r3, r0
 800734a:	2b01      	cmp	r3, #1
 800734c:	d102      	bne.n	8007354 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800734e:	2310      	movs	r3, #16
 8007350:	617b      	str	r3, [r7, #20]
 8007352:	e006      	b.n	8007362 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8007354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007356:	2b00      	cmp	r3, #0
 8007358:	d101      	bne.n	800735e <osMessageGet+0xc6>
 800735a:	2300      	movs	r3, #0
 800735c:	e000      	b.n	8007360 <osMessageGet+0xc8>
 800735e:	2340      	movs	r3, #64	; 0x40
 8007360:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	461c      	mov	r4, r3
 8007366:	f107 0314 	add.w	r3, r7, #20
 800736a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800736e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8007372:	68f8      	ldr	r0, [r7, #12]
 8007374:	372c      	adds	r7, #44	; 0x2c
 8007376:	46bd      	mov	sp, r7
 8007378:	bd90      	pop	{r4, r7, pc}
 800737a:	bf00      	nop
 800737c:	e000ed04 	.word	0xe000ed04

08007380 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007380:	b480      	push	{r7}
 8007382:	b083      	sub	sp, #12
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	f103 0208 	add.w	r2, r3, #8
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f04f 32ff 	mov.w	r2, #4294967295
 8007398:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f103 0208 	add.w	r2, r3, #8
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f103 0208 	add.w	r2, r3, #8
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2200      	movs	r2, #0
 80073b2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80073b4:	bf00      	nop
 80073b6:	370c      	adds	r7, #12
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bc80      	pop	{r7}
 80073bc:	4770      	bx	lr

080073be <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80073be:	b480      	push	{r7}
 80073c0:	b083      	sub	sp, #12
 80073c2:	af00      	add	r7, sp, #0
 80073c4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2200      	movs	r2, #0
 80073ca:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80073cc:	bf00      	nop
 80073ce:	370c      	adds	r7, #12
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bc80      	pop	{r7}
 80073d4:	4770      	bx	lr

080073d6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80073d6:	b480      	push	{r7}
 80073d8:	b085      	sub	sp, #20
 80073da:	af00      	add	r7, sp, #0
 80073dc:	6078      	str	r0, [r7, #4]
 80073de:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	685b      	ldr	r3, [r3, #4]
 80073e4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	68fa      	ldr	r2, [r7, #12]
 80073ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	689a      	ldr	r2, [r3, #8]
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	689b      	ldr	r3, [r3, #8]
 80073f8:	683a      	ldr	r2, [r7, #0]
 80073fa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	683a      	ldr	r2, [r7, #0]
 8007400:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	687a      	ldr	r2, [r7, #4]
 8007406:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	1c5a      	adds	r2, r3, #1
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	601a      	str	r2, [r3, #0]
}
 8007412:	bf00      	nop
 8007414:	3714      	adds	r7, #20
 8007416:	46bd      	mov	sp, r7
 8007418:	bc80      	pop	{r7}
 800741a:	4770      	bx	lr

0800741c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800741c:	b480      	push	{r7}
 800741e:	b085      	sub	sp, #20
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
 8007424:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007432:	d103      	bne.n	800743c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	691b      	ldr	r3, [r3, #16]
 8007438:	60fb      	str	r3, [r7, #12]
 800743a:	e00c      	b.n	8007456 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	3308      	adds	r3, #8
 8007440:	60fb      	str	r3, [r7, #12]
 8007442:	e002      	b.n	800744a <vListInsert+0x2e>
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	685b      	ldr	r3, [r3, #4]
 8007448:	60fb      	str	r3, [r7, #12]
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	685b      	ldr	r3, [r3, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	68ba      	ldr	r2, [r7, #8]
 8007452:	429a      	cmp	r2, r3
 8007454:	d2f6      	bcs.n	8007444 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	685a      	ldr	r2, [r3, #4]
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	685b      	ldr	r3, [r3, #4]
 8007462:	683a      	ldr	r2, [r7, #0]
 8007464:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	68fa      	ldr	r2, [r7, #12]
 800746a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	683a      	ldr	r2, [r7, #0]
 8007470:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	687a      	ldr	r2, [r7, #4]
 8007476:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	1c5a      	adds	r2, r3, #1
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	601a      	str	r2, [r3, #0]
}
 8007482:	bf00      	nop
 8007484:	3714      	adds	r7, #20
 8007486:	46bd      	mov	sp, r7
 8007488:	bc80      	pop	{r7}
 800748a:	4770      	bx	lr

0800748c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800748c:	b480      	push	{r7}
 800748e:	b085      	sub	sp, #20
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	691b      	ldr	r3, [r3, #16]
 8007498:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	685b      	ldr	r3, [r3, #4]
 800749e:	687a      	ldr	r2, [r7, #4]
 80074a0:	6892      	ldr	r2, [r2, #8]
 80074a2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	689b      	ldr	r3, [r3, #8]
 80074a8:	687a      	ldr	r2, [r7, #4]
 80074aa:	6852      	ldr	r2, [r2, #4]
 80074ac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	685b      	ldr	r3, [r3, #4]
 80074b2:	687a      	ldr	r2, [r7, #4]
 80074b4:	429a      	cmp	r2, r3
 80074b6:	d103      	bne.n	80074c0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	689a      	ldr	r2, [r3, #8]
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2200      	movs	r2, #0
 80074c4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	1e5a      	subs	r2, r3, #1
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
}
 80074d4:	4618      	mov	r0, r3
 80074d6:	3714      	adds	r7, #20
 80074d8:	46bd      	mov	sp, r7
 80074da:	bc80      	pop	{r7}
 80074dc:	4770      	bx	lr
	...

080074e0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b084      	sub	sp, #16
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
 80074e8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d109      	bne.n	8007508 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80074f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074f8:	f383 8811 	msr	BASEPRI, r3
 80074fc:	f3bf 8f6f 	isb	sy
 8007500:	f3bf 8f4f 	dsb	sy
 8007504:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007506:	bf00      	nop

	taskENTER_CRITICAL();
 8007508:	f002 f81e 	bl	8009548 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681a      	ldr	r2, [r3, #0]
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007514:	68f9      	ldr	r1, [r7, #12]
 8007516:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007518:	fb01 f303 	mul.w	r3, r1, r3
 800751c:	441a      	add	r2, r3
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	2200      	movs	r2, #0
 8007526:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	681a      	ldr	r2, [r3, #0]
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681a      	ldr	r2, [r3, #0]
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007538:	3b01      	subs	r3, #1
 800753a:	68f9      	ldr	r1, [r7, #12]
 800753c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800753e:	fb01 f303 	mul.w	r3, r1, r3
 8007542:	441a      	add	r2, r3
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	22ff      	movs	r2, #255	; 0xff
 800754c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	22ff      	movs	r2, #255	; 0xff
 8007554:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d114      	bne.n	8007588 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	691b      	ldr	r3, [r3, #16]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d01a      	beq.n	800759c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	3310      	adds	r3, #16
 800756a:	4618      	mov	r0, r3
 800756c:	f001 fb26 	bl	8008bbc <xTaskRemoveFromEventList>
 8007570:	4603      	mov	r3, r0
 8007572:	2b00      	cmp	r3, #0
 8007574:	d012      	beq.n	800759c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007576:	4b0d      	ldr	r3, [pc, #52]	; (80075ac <xQueueGenericReset+0xcc>)
 8007578:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800757c:	601a      	str	r2, [r3, #0]
 800757e:	f3bf 8f4f 	dsb	sy
 8007582:	f3bf 8f6f 	isb	sy
 8007586:	e009      	b.n	800759c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	3310      	adds	r3, #16
 800758c:	4618      	mov	r0, r3
 800758e:	f7ff fef7 	bl	8007380 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	3324      	adds	r3, #36	; 0x24
 8007596:	4618      	mov	r0, r3
 8007598:	f7ff fef2 	bl	8007380 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800759c:	f002 f802 	bl	80095a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80075a0:	2301      	movs	r3, #1
}
 80075a2:	4618      	mov	r0, r3
 80075a4:	3710      	adds	r7, #16
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}
 80075aa:	bf00      	nop
 80075ac:	e000ed04 	.word	0xe000ed04

080075b0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b08e      	sub	sp, #56	; 0x38
 80075b4:	af02      	add	r7, sp, #8
 80075b6:	60f8      	str	r0, [r7, #12]
 80075b8:	60b9      	str	r1, [r7, #8]
 80075ba:	607a      	str	r2, [r7, #4]
 80075bc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d109      	bne.n	80075d8 <xQueueGenericCreateStatic+0x28>
	__asm volatile
 80075c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075c8:	f383 8811 	msr	BASEPRI, r3
 80075cc:	f3bf 8f6f 	isb	sy
 80075d0:	f3bf 8f4f 	dsb	sy
 80075d4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80075d6:	bf00      	nop

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d109      	bne.n	80075f2 <xQueueGenericCreateStatic+0x42>
	__asm volatile
 80075de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075e2:	f383 8811 	msr	BASEPRI, r3
 80075e6:	f3bf 8f6f 	isb	sy
 80075ea:	f3bf 8f4f 	dsb	sy
 80075ee:	627b      	str	r3, [r7, #36]	; 0x24
}
 80075f0:	bf00      	nop

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d002      	beq.n	80075fe <xQueueGenericCreateStatic+0x4e>
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d001      	beq.n	8007602 <xQueueGenericCreateStatic+0x52>
 80075fe:	2301      	movs	r3, #1
 8007600:	e000      	b.n	8007604 <xQueueGenericCreateStatic+0x54>
 8007602:	2300      	movs	r3, #0
 8007604:	2b00      	cmp	r3, #0
 8007606:	d109      	bne.n	800761c <xQueueGenericCreateStatic+0x6c>
	__asm volatile
 8007608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800760c:	f383 8811 	msr	BASEPRI, r3
 8007610:	f3bf 8f6f 	isb	sy
 8007614:	f3bf 8f4f 	dsb	sy
 8007618:	623b      	str	r3, [r7, #32]
}
 800761a:	bf00      	nop
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d102      	bne.n	8007628 <xQueueGenericCreateStatic+0x78>
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d101      	bne.n	800762c <xQueueGenericCreateStatic+0x7c>
 8007628:	2301      	movs	r3, #1
 800762a:	e000      	b.n	800762e <xQueueGenericCreateStatic+0x7e>
 800762c:	2300      	movs	r3, #0
 800762e:	2b00      	cmp	r3, #0
 8007630:	d109      	bne.n	8007646 <xQueueGenericCreateStatic+0x96>
	__asm volatile
 8007632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007636:	f383 8811 	msr	BASEPRI, r3
 800763a:	f3bf 8f6f 	isb	sy
 800763e:	f3bf 8f4f 	dsb	sy
 8007642:	61fb      	str	r3, [r7, #28]
}
 8007644:	bf00      	nop
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007646:	2348      	movs	r3, #72	; 0x48
 8007648:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	2b48      	cmp	r3, #72	; 0x48
 800764e:	d009      	beq.n	8007664 <xQueueGenericCreateStatic+0xb4>
	__asm volatile
 8007650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007654:	f383 8811 	msr	BASEPRI, r3
 8007658:	f3bf 8f6f 	isb	sy
 800765c:	f3bf 8f4f 	dsb	sy
 8007660:	61bb      	str	r3, [r7, #24]
}
 8007662:	bf00      	nop
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007664:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800766a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800766c:	2b00      	cmp	r3, #0
 800766e:	d00d      	beq.n	800768c <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007672:	2201      	movs	r2, #1
 8007674:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007678:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800767c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800767e:	9300      	str	r3, [sp, #0]
 8007680:	4613      	mov	r3, r2
 8007682:	687a      	ldr	r2, [r7, #4]
 8007684:	68b9      	ldr	r1, [r7, #8]
 8007686:	68f8      	ldr	r0, [r7, #12]
 8007688:	f000 f83e 	bl	8007708 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800768c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800768e:	4618      	mov	r0, r3
 8007690:	3730      	adds	r7, #48	; 0x30
 8007692:	46bd      	mov	sp, r7
 8007694:	bd80      	pop	{r7, pc}

08007696 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007696:	b580      	push	{r7, lr}
 8007698:	b08a      	sub	sp, #40	; 0x28
 800769a:	af02      	add	r7, sp, #8
 800769c:	60f8      	str	r0, [r7, #12]
 800769e:	60b9      	str	r1, [r7, #8]
 80076a0:	4613      	mov	r3, r2
 80076a2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d109      	bne.n	80076be <xQueueGenericCreate+0x28>
	__asm volatile
 80076aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ae:	f383 8811 	msr	BASEPRI, r3
 80076b2:	f3bf 8f6f 	isb	sy
 80076b6:	f3bf 8f4f 	dsb	sy
 80076ba:	613b      	str	r3, [r7, #16]
}
 80076bc:	bf00      	nop

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	68ba      	ldr	r2, [r7, #8]
 80076c2:	fb02 f303 	mul.w	r3, r2, r3
 80076c6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80076c8:	69fb      	ldr	r3, [r7, #28]
 80076ca:	3348      	adds	r3, #72	; 0x48
 80076cc:	4618      	mov	r0, r3
 80076ce:	f002 f83b 	bl	8009748 <pvPortMalloc>
 80076d2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80076d4:	69bb      	ldr	r3, [r7, #24]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d011      	beq.n	80076fe <xQueueGenericCreate+0x68>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80076da:	69bb      	ldr	r3, [r7, #24]
 80076dc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	3348      	adds	r3, #72	; 0x48
 80076e2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80076e4:	69bb      	ldr	r3, [r7, #24]
 80076e6:	2200      	movs	r2, #0
 80076e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80076ec:	79fa      	ldrb	r2, [r7, #7]
 80076ee:	69bb      	ldr	r3, [r7, #24]
 80076f0:	9300      	str	r3, [sp, #0]
 80076f2:	4613      	mov	r3, r2
 80076f4:	697a      	ldr	r2, [r7, #20]
 80076f6:	68b9      	ldr	r1, [r7, #8]
 80076f8:	68f8      	ldr	r0, [r7, #12]
 80076fa:	f000 f805 	bl	8007708 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80076fe:	69bb      	ldr	r3, [r7, #24]
	}
 8007700:	4618      	mov	r0, r3
 8007702:	3720      	adds	r7, #32
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}

08007708 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b084      	sub	sp, #16
 800770c:	af00      	add	r7, sp, #0
 800770e:	60f8      	str	r0, [r7, #12]
 8007710:	60b9      	str	r1, [r7, #8]
 8007712:	607a      	str	r2, [r7, #4]
 8007714:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d103      	bne.n	8007724 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800771c:	69bb      	ldr	r3, [r7, #24]
 800771e:	69ba      	ldr	r2, [r7, #24]
 8007720:	601a      	str	r2, [r3, #0]
 8007722:	e002      	b.n	800772a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007724:	69bb      	ldr	r3, [r7, #24]
 8007726:	687a      	ldr	r2, [r7, #4]
 8007728:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800772a:	69bb      	ldr	r3, [r7, #24]
 800772c:	68fa      	ldr	r2, [r7, #12]
 800772e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007730:	69bb      	ldr	r3, [r7, #24]
 8007732:	68ba      	ldr	r2, [r7, #8]
 8007734:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007736:	2101      	movs	r1, #1
 8007738:	69b8      	ldr	r0, [r7, #24]
 800773a:	f7ff fed1 	bl	80074e0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800773e:	bf00      	nop
 8007740:	3710      	adds	r7, #16
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}

08007746 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8007746:	b580      	push	{r7, lr}
 8007748:	b082      	sub	sp, #8
 800774a:	af00      	add	r7, sp, #0
 800774c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d00e      	beq.n	8007772 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2200      	movs	r2, #0
 8007758:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2200      	movs	r2, #0
 800775e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2200      	movs	r2, #0
 8007764:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007766:	2300      	movs	r3, #0
 8007768:	2200      	movs	r2, #0
 800776a:	2100      	movs	r1, #0
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	f000 f837 	bl	80077e0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8007772:	bf00      	nop
 8007774:	3708      	adds	r7, #8
 8007776:	46bd      	mov	sp, r7
 8007778:	bd80      	pop	{r7, pc}

0800777a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800777a:	b580      	push	{r7, lr}
 800777c:	b086      	sub	sp, #24
 800777e:	af00      	add	r7, sp, #0
 8007780:	4603      	mov	r3, r0
 8007782:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007784:	2301      	movs	r3, #1
 8007786:	617b      	str	r3, [r7, #20]
 8007788:	2300      	movs	r3, #0
 800778a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800778c:	79fb      	ldrb	r3, [r7, #7]
 800778e:	461a      	mov	r2, r3
 8007790:	6939      	ldr	r1, [r7, #16]
 8007792:	6978      	ldr	r0, [r7, #20]
 8007794:	f7ff ff7f 	bl	8007696 <xQueueGenericCreate>
 8007798:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800779a:	68f8      	ldr	r0, [r7, #12]
 800779c:	f7ff ffd3 	bl	8007746 <prvInitialiseMutex>

		return xNewQueue;
 80077a0:	68fb      	ldr	r3, [r7, #12]
	}
 80077a2:	4618      	mov	r0, r3
 80077a4:	3718      	adds	r7, #24
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}

080077aa <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80077aa:	b580      	push	{r7, lr}
 80077ac:	b088      	sub	sp, #32
 80077ae:	af02      	add	r7, sp, #8
 80077b0:	4603      	mov	r3, r0
 80077b2:	6039      	str	r1, [r7, #0]
 80077b4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80077b6:	2301      	movs	r3, #1
 80077b8:	617b      	str	r3, [r7, #20]
 80077ba:	2300      	movs	r3, #0
 80077bc:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80077be:	79fb      	ldrb	r3, [r7, #7]
 80077c0:	9300      	str	r3, [sp, #0]
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	2200      	movs	r2, #0
 80077c6:	6939      	ldr	r1, [r7, #16]
 80077c8:	6978      	ldr	r0, [r7, #20]
 80077ca:	f7ff fef1 	bl	80075b0 <xQueueGenericCreateStatic>
 80077ce:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80077d0:	68f8      	ldr	r0, [r7, #12]
 80077d2:	f7ff ffb8 	bl	8007746 <prvInitialiseMutex>

		return xNewQueue;
 80077d6:	68fb      	ldr	r3, [r7, #12]
	}
 80077d8:	4618      	mov	r0, r3
 80077da:	3718      	adds	r7, #24
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd80      	pop	{r7, pc}

080077e0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b08e      	sub	sp, #56	; 0x38
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	60f8      	str	r0, [r7, #12]
 80077e8:	60b9      	str	r1, [r7, #8]
 80077ea:	607a      	str	r2, [r7, #4]
 80077ec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80077ee:	2300      	movs	r3, #0
 80077f0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80077f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d109      	bne.n	8007810 <xQueueGenericSend+0x30>
	__asm volatile
 80077fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007800:	f383 8811 	msr	BASEPRI, r3
 8007804:	f3bf 8f6f 	isb	sy
 8007808:	f3bf 8f4f 	dsb	sy
 800780c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800780e:	bf00      	nop
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d103      	bne.n	800781e <xQueueGenericSend+0x3e>
 8007816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800781a:	2b00      	cmp	r3, #0
 800781c:	d101      	bne.n	8007822 <xQueueGenericSend+0x42>
 800781e:	2301      	movs	r3, #1
 8007820:	e000      	b.n	8007824 <xQueueGenericSend+0x44>
 8007822:	2300      	movs	r3, #0
 8007824:	2b00      	cmp	r3, #0
 8007826:	d109      	bne.n	800783c <xQueueGenericSend+0x5c>
	__asm volatile
 8007828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800782c:	f383 8811 	msr	BASEPRI, r3
 8007830:	f3bf 8f6f 	isb	sy
 8007834:	f3bf 8f4f 	dsb	sy
 8007838:	627b      	str	r3, [r7, #36]	; 0x24
}
 800783a:	bf00      	nop
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	2b02      	cmp	r3, #2
 8007840:	d103      	bne.n	800784a <xQueueGenericSend+0x6a>
 8007842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007846:	2b01      	cmp	r3, #1
 8007848:	d101      	bne.n	800784e <xQueueGenericSend+0x6e>
 800784a:	2301      	movs	r3, #1
 800784c:	e000      	b.n	8007850 <xQueueGenericSend+0x70>
 800784e:	2300      	movs	r3, #0
 8007850:	2b00      	cmp	r3, #0
 8007852:	d109      	bne.n	8007868 <xQueueGenericSend+0x88>
	__asm volatile
 8007854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007858:	f383 8811 	msr	BASEPRI, r3
 800785c:	f3bf 8f6f 	isb	sy
 8007860:	f3bf 8f4f 	dsb	sy
 8007864:	623b      	str	r3, [r7, #32]
}
 8007866:	bf00      	nop
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007868:	f001 fb66 	bl	8008f38 <xTaskGetSchedulerState>
 800786c:	4603      	mov	r3, r0
 800786e:	2b00      	cmp	r3, #0
 8007870:	d102      	bne.n	8007878 <xQueueGenericSend+0x98>
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d101      	bne.n	800787c <xQueueGenericSend+0x9c>
 8007878:	2301      	movs	r3, #1
 800787a:	e000      	b.n	800787e <xQueueGenericSend+0x9e>
 800787c:	2300      	movs	r3, #0
 800787e:	2b00      	cmp	r3, #0
 8007880:	d109      	bne.n	8007896 <xQueueGenericSend+0xb6>
	__asm volatile
 8007882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007886:	f383 8811 	msr	BASEPRI, r3
 800788a:	f3bf 8f6f 	isb	sy
 800788e:	f3bf 8f4f 	dsb	sy
 8007892:	61fb      	str	r3, [r7, #28]
}
 8007894:	bf00      	nop
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007896:	f001 fe57 	bl	8009548 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800789a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800789c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800789e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078a2:	429a      	cmp	r2, r3
 80078a4:	d302      	bcc.n	80078ac <xQueueGenericSend+0xcc>
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	2b02      	cmp	r3, #2
 80078aa:	d129      	bne.n	8007900 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80078ac:	683a      	ldr	r2, [r7, #0]
 80078ae:	68b9      	ldr	r1, [r7, #8]
 80078b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80078b2:	f000 fc2a 	bl	800810a <prvCopyDataToQueue>
 80078b6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80078b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d010      	beq.n	80078e2 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80078c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078c2:	3324      	adds	r3, #36	; 0x24
 80078c4:	4618      	mov	r0, r3
 80078c6:	f001 f979 	bl	8008bbc <xTaskRemoveFromEventList>
 80078ca:	4603      	mov	r3, r0
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d013      	beq.n	80078f8 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80078d0:	4b3f      	ldr	r3, [pc, #252]	; (80079d0 <xQueueGenericSend+0x1f0>)
 80078d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078d6:	601a      	str	r2, [r3, #0]
 80078d8:	f3bf 8f4f 	dsb	sy
 80078dc:	f3bf 8f6f 	isb	sy
 80078e0:	e00a      	b.n	80078f8 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80078e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d007      	beq.n	80078f8 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80078e8:	4b39      	ldr	r3, [pc, #228]	; (80079d0 <xQueueGenericSend+0x1f0>)
 80078ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078ee:	601a      	str	r2, [r3, #0]
 80078f0:	f3bf 8f4f 	dsb	sy
 80078f4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80078f8:	f001 fe54 	bl	80095a4 <vPortExitCritical>
				return pdPASS;
 80078fc:	2301      	movs	r3, #1
 80078fe:	e063      	b.n	80079c8 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d103      	bne.n	800790e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007906:	f001 fe4d 	bl	80095a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800790a:	2300      	movs	r3, #0
 800790c:	e05c      	b.n	80079c8 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800790e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007910:	2b00      	cmp	r3, #0
 8007912:	d106      	bne.n	8007922 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007914:	f107 0314 	add.w	r3, r7, #20
 8007918:	4618      	mov	r0, r3
 800791a:	f001 f9b1 	bl	8008c80 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800791e:	2301      	movs	r3, #1
 8007920:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007922:	f001 fe3f 	bl	80095a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007926:	f000 ff43 	bl	80087b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800792a:	f001 fe0d 	bl	8009548 <vPortEnterCritical>
 800792e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007930:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007934:	b25b      	sxtb	r3, r3
 8007936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800793a:	d103      	bne.n	8007944 <xQueueGenericSend+0x164>
 800793c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800793e:	2200      	movs	r2, #0
 8007940:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007946:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800794a:	b25b      	sxtb	r3, r3
 800794c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007950:	d103      	bne.n	800795a <xQueueGenericSend+0x17a>
 8007952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007954:	2200      	movs	r2, #0
 8007956:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800795a:	f001 fe23 	bl	80095a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800795e:	1d3a      	adds	r2, r7, #4
 8007960:	f107 0314 	add.w	r3, r7, #20
 8007964:	4611      	mov	r1, r2
 8007966:	4618      	mov	r0, r3
 8007968:	f001 f9a0 	bl	8008cac <xTaskCheckForTimeOut>
 800796c:	4603      	mov	r3, r0
 800796e:	2b00      	cmp	r3, #0
 8007970:	d124      	bne.n	80079bc <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007972:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007974:	f000 fcc1 	bl	80082fa <prvIsQueueFull>
 8007978:	4603      	mov	r3, r0
 800797a:	2b00      	cmp	r3, #0
 800797c:	d018      	beq.n	80079b0 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800797e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007980:	3310      	adds	r3, #16
 8007982:	687a      	ldr	r2, [r7, #4]
 8007984:	4611      	mov	r1, r2
 8007986:	4618      	mov	r0, r3
 8007988:	f001 f8f4 	bl	8008b74 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800798c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800798e:	f000 fc4c 	bl	800822a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007992:	f000 ff1b 	bl	80087cc <xTaskResumeAll>
 8007996:	4603      	mov	r3, r0
 8007998:	2b00      	cmp	r3, #0
 800799a:	f47f af7c 	bne.w	8007896 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800799e:	4b0c      	ldr	r3, [pc, #48]	; (80079d0 <xQueueGenericSend+0x1f0>)
 80079a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079a4:	601a      	str	r2, [r3, #0]
 80079a6:	f3bf 8f4f 	dsb	sy
 80079aa:	f3bf 8f6f 	isb	sy
 80079ae:	e772      	b.n	8007896 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80079b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80079b2:	f000 fc3a 	bl	800822a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80079b6:	f000 ff09 	bl	80087cc <xTaskResumeAll>
 80079ba:	e76c      	b.n	8007896 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80079bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80079be:	f000 fc34 	bl	800822a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80079c2:	f000 ff03 	bl	80087cc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80079c6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80079c8:	4618      	mov	r0, r3
 80079ca:	3738      	adds	r7, #56	; 0x38
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bd80      	pop	{r7, pc}
 80079d0:	e000ed04 	.word	0xe000ed04

080079d4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b090      	sub	sp, #64	; 0x40
 80079d8:	af00      	add	r7, sp, #0
 80079da:	60f8      	str	r0, [r7, #12]
 80079dc:	60b9      	str	r1, [r7, #8]
 80079de:	607a      	str	r2, [r7, #4]
 80079e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80079e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d109      	bne.n	8007a00 <xQueueGenericSendFromISR+0x2c>
	__asm volatile
 80079ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079f0:	f383 8811 	msr	BASEPRI, r3
 80079f4:	f3bf 8f6f 	isb	sy
 80079f8:	f3bf 8f4f 	dsb	sy
 80079fc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80079fe:	bf00      	nop
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d103      	bne.n	8007a0e <xQueueGenericSendFromISR+0x3a>
 8007a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d101      	bne.n	8007a12 <xQueueGenericSendFromISR+0x3e>
 8007a0e:	2301      	movs	r3, #1
 8007a10:	e000      	b.n	8007a14 <xQueueGenericSendFromISR+0x40>
 8007a12:	2300      	movs	r3, #0
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d109      	bne.n	8007a2c <xQueueGenericSendFromISR+0x58>
	__asm volatile
 8007a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a1c:	f383 8811 	msr	BASEPRI, r3
 8007a20:	f3bf 8f6f 	isb	sy
 8007a24:	f3bf 8f4f 	dsb	sy
 8007a28:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007a2a:	bf00      	nop
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	2b02      	cmp	r3, #2
 8007a30:	d103      	bne.n	8007a3a <xQueueGenericSendFromISR+0x66>
 8007a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a36:	2b01      	cmp	r3, #1
 8007a38:	d101      	bne.n	8007a3e <xQueueGenericSendFromISR+0x6a>
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	e000      	b.n	8007a40 <xQueueGenericSendFromISR+0x6c>
 8007a3e:	2300      	movs	r3, #0
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d109      	bne.n	8007a58 <xQueueGenericSendFromISR+0x84>
	__asm volatile
 8007a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a48:	f383 8811 	msr	BASEPRI, r3
 8007a4c:	f3bf 8f6f 	isb	sy
 8007a50:	f3bf 8f4f 	dsb	sy
 8007a54:	623b      	str	r3, [r7, #32]
}
 8007a56:	bf00      	nop
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007a58:	f001 fe3a 	bl	80096d0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007a5c:	f3ef 8211 	mrs	r2, BASEPRI
 8007a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a64:	f383 8811 	msr	BASEPRI, r3
 8007a68:	f3bf 8f6f 	isb	sy
 8007a6c:	f3bf 8f4f 	dsb	sy
 8007a70:	61fa      	str	r2, [r7, #28]
 8007a72:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007a74:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007a76:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a80:	429a      	cmp	r2, r3
 8007a82:	d302      	bcc.n	8007a8a <xQueueGenericSendFromISR+0xb6>
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	2b02      	cmp	r3, #2
 8007a88:	d12f      	bne.n	8007aea <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007a90:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a98:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007a9a:	683a      	ldr	r2, [r7, #0]
 8007a9c:	68b9      	ldr	r1, [r7, #8]
 8007a9e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007aa0:	f000 fb33 	bl	800810a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007aa4:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aac:	d112      	bne.n	8007ad4 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d016      	beq.n	8007ae4 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ab8:	3324      	adds	r3, #36	; 0x24
 8007aba:	4618      	mov	r0, r3
 8007abc:	f001 f87e 	bl	8008bbc <xTaskRemoveFromEventList>
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d00e      	beq.n	8007ae4 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d00b      	beq.n	8007ae4 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2201      	movs	r2, #1
 8007ad0:	601a      	str	r2, [r3, #0]
 8007ad2:	e007      	b.n	8007ae4 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007ad4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007ad8:	3301      	adds	r3, #1
 8007ada:	b2db      	uxtb	r3, r3
 8007adc:	b25a      	sxtb	r2, r3
 8007ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ae0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007ae4:	2301      	movs	r3, #1
 8007ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007ae8:	e001      	b.n	8007aee <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007aea:	2300      	movs	r3, #0
 8007aec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007aee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007af0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007af2:	697b      	ldr	r3, [r7, #20]
 8007af4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007af8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007afa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007afc:	4618      	mov	r0, r3
 8007afe:	3740      	adds	r7, #64	; 0x40
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd80      	pop	{r7, pc}

08007b04 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b08e      	sub	sp, #56	; 0x38
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
 8007b0c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d109      	bne.n	8007b2c <xQueueGiveFromISR+0x28>
	__asm volatile
 8007b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b1c:	f383 8811 	msr	BASEPRI, r3
 8007b20:	f3bf 8f6f 	isb	sy
 8007b24:	f3bf 8f4f 	dsb	sy
 8007b28:	623b      	str	r3, [r7, #32]
}
 8007b2a:	bf00      	nop

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d009      	beq.n	8007b48 <xQueueGiveFromISR+0x44>
	__asm volatile
 8007b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b38:	f383 8811 	msr	BASEPRI, r3
 8007b3c:	f3bf 8f6f 	isb	sy
 8007b40:	f3bf 8f4f 	dsb	sy
 8007b44:	61fb      	str	r3, [r7, #28]
}
 8007b46:	bf00      	nop

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d103      	bne.n	8007b58 <xQueueGiveFromISR+0x54>
 8007b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b52:	689b      	ldr	r3, [r3, #8]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d101      	bne.n	8007b5c <xQueueGiveFromISR+0x58>
 8007b58:	2301      	movs	r3, #1
 8007b5a:	e000      	b.n	8007b5e <xQueueGiveFromISR+0x5a>
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d109      	bne.n	8007b76 <xQueueGiveFromISR+0x72>
	__asm volatile
 8007b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b66:	f383 8811 	msr	BASEPRI, r3
 8007b6a:	f3bf 8f6f 	isb	sy
 8007b6e:	f3bf 8f4f 	dsb	sy
 8007b72:	61bb      	str	r3, [r7, #24]
}
 8007b74:	bf00      	nop
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007b76:	f001 fdab 	bl	80096d0 <vPortValidateInterruptPriority>
	__asm volatile
 8007b7a:	f3ef 8211 	mrs	r2, BASEPRI
 8007b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b82:	f383 8811 	msr	BASEPRI, r3
 8007b86:	f3bf 8f6f 	isb	sy
 8007b8a:	f3bf 8f4f 	dsb	sy
 8007b8e:	617a      	str	r2, [r7, #20]
 8007b90:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8007b92:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007b94:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b9a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ba0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ba2:	429a      	cmp	r2, r3
 8007ba4:	d22b      	bcs.n	8007bfe <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ba8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007bac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bb2:	1c5a      	adds	r2, r3, #1
 8007bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bb6:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007bb8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bc0:	d112      	bne.n	8007be8 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d016      	beq.n	8007bf8 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bcc:	3324      	adds	r3, #36	; 0x24
 8007bce:	4618      	mov	r0, r3
 8007bd0:	f000 fff4 	bl	8008bbc <xTaskRemoveFromEventList>
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d00e      	beq.n	8007bf8 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d00b      	beq.n	8007bf8 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	2201      	movs	r2, #1
 8007be4:	601a      	str	r2, [r3, #0]
 8007be6:	e007      	b.n	8007bf8 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007be8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007bec:	3301      	adds	r3, #1
 8007bee:	b2db      	uxtb	r3, r3
 8007bf0:	b25a      	sxtb	r2, r3
 8007bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bf4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	637b      	str	r3, [r7, #52]	; 0x34
 8007bfc:	e001      	b.n	8007c02 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007bfe:	2300      	movs	r3, #0
 8007c00:	637b      	str	r3, [r7, #52]	; 0x34
 8007c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c04:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	f383 8811 	msr	BASEPRI, r3
}
 8007c0c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	3738      	adds	r7, #56	; 0x38
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bd80      	pop	{r7, pc}

08007c18 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b08c      	sub	sp, #48	; 0x30
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	60f8      	str	r0, [r7, #12]
 8007c20:	60b9      	str	r1, [r7, #8]
 8007c22:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007c24:	2300      	movs	r3, #0
 8007c26:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d109      	bne.n	8007c46 <xQueueReceive+0x2e>
	__asm volatile
 8007c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c36:	f383 8811 	msr	BASEPRI, r3
 8007c3a:	f3bf 8f6f 	isb	sy
 8007c3e:	f3bf 8f4f 	dsb	sy
 8007c42:	623b      	str	r3, [r7, #32]
}
 8007c44:	bf00      	nop

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d103      	bne.n	8007c54 <xQueueReceive+0x3c>
 8007c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d101      	bne.n	8007c58 <xQueueReceive+0x40>
 8007c54:	2301      	movs	r3, #1
 8007c56:	e000      	b.n	8007c5a <xQueueReceive+0x42>
 8007c58:	2300      	movs	r3, #0
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d109      	bne.n	8007c72 <xQueueReceive+0x5a>
	__asm volatile
 8007c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c62:	f383 8811 	msr	BASEPRI, r3
 8007c66:	f3bf 8f6f 	isb	sy
 8007c6a:	f3bf 8f4f 	dsb	sy
 8007c6e:	61fb      	str	r3, [r7, #28]
}
 8007c70:	bf00      	nop

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007c72:	f001 f961 	bl	8008f38 <xTaskGetSchedulerState>
 8007c76:	4603      	mov	r3, r0
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d102      	bne.n	8007c82 <xQueueReceive+0x6a>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d101      	bne.n	8007c86 <xQueueReceive+0x6e>
 8007c82:	2301      	movs	r3, #1
 8007c84:	e000      	b.n	8007c88 <xQueueReceive+0x70>
 8007c86:	2300      	movs	r3, #0
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d109      	bne.n	8007ca0 <xQueueReceive+0x88>
	__asm volatile
 8007c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c90:	f383 8811 	msr	BASEPRI, r3
 8007c94:	f3bf 8f6f 	isb	sy
 8007c98:	f3bf 8f4f 	dsb	sy
 8007c9c:	61bb      	str	r3, [r7, #24]
}
 8007c9e:	bf00      	nop
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007ca0:	f001 fc52 	bl	8009548 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ca8:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d01f      	beq.n	8007cf0 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007cb0:	68b9      	ldr	r1, [r7, #8]
 8007cb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007cb4:	f000 fa93 	bl	80081de <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cba:	1e5a      	subs	r2, r3, #1
 8007cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cbe:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cc2:	691b      	ldr	r3, [r3, #16]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d00f      	beq.n	8007ce8 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cca:	3310      	adds	r3, #16
 8007ccc:	4618      	mov	r0, r3
 8007cce:	f000 ff75 	bl	8008bbc <xTaskRemoveFromEventList>
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d007      	beq.n	8007ce8 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007cd8:	4b3c      	ldr	r3, [pc, #240]	; (8007dcc <xQueueReceive+0x1b4>)
 8007cda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cde:	601a      	str	r2, [r3, #0]
 8007ce0:	f3bf 8f4f 	dsb	sy
 8007ce4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007ce8:	f001 fc5c 	bl	80095a4 <vPortExitCritical>
				return pdPASS;
 8007cec:	2301      	movs	r3, #1
 8007cee:	e069      	b.n	8007dc4 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d103      	bne.n	8007cfe <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007cf6:	f001 fc55 	bl	80095a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	e062      	b.n	8007dc4 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d106      	bne.n	8007d12 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007d04:	f107 0310 	add.w	r3, r7, #16
 8007d08:	4618      	mov	r0, r3
 8007d0a:	f000 ffb9 	bl	8008c80 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007d0e:	2301      	movs	r3, #1
 8007d10:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007d12:	f001 fc47 	bl	80095a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007d16:	f000 fd4b 	bl	80087b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007d1a:	f001 fc15 	bl	8009548 <vPortEnterCritical>
 8007d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d20:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007d24:	b25b      	sxtb	r3, r3
 8007d26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d2a:	d103      	bne.n	8007d34 <xQueueReceive+0x11c>
 8007d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d2e:	2200      	movs	r2, #0
 8007d30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d36:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007d3a:	b25b      	sxtb	r3, r3
 8007d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d40:	d103      	bne.n	8007d4a <xQueueReceive+0x132>
 8007d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d44:	2200      	movs	r2, #0
 8007d46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007d4a:	f001 fc2b 	bl	80095a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007d4e:	1d3a      	adds	r2, r7, #4
 8007d50:	f107 0310 	add.w	r3, r7, #16
 8007d54:	4611      	mov	r1, r2
 8007d56:	4618      	mov	r0, r3
 8007d58:	f000 ffa8 	bl	8008cac <xTaskCheckForTimeOut>
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d123      	bne.n	8007daa <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007d62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d64:	f000 fab3 	bl	80082ce <prvIsQueueEmpty>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d017      	beq.n	8007d9e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d70:	3324      	adds	r3, #36	; 0x24
 8007d72:	687a      	ldr	r2, [r7, #4]
 8007d74:	4611      	mov	r1, r2
 8007d76:	4618      	mov	r0, r3
 8007d78:	f000 fefc 	bl	8008b74 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007d7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d7e:	f000 fa54 	bl	800822a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007d82:	f000 fd23 	bl	80087cc <xTaskResumeAll>
 8007d86:	4603      	mov	r3, r0
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d189      	bne.n	8007ca0 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8007d8c:	4b0f      	ldr	r3, [pc, #60]	; (8007dcc <xQueueReceive+0x1b4>)
 8007d8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d92:	601a      	str	r2, [r3, #0]
 8007d94:	f3bf 8f4f 	dsb	sy
 8007d98:	f3bf 8f6f 	isb	sy
 8007d9c:	e780      	b.n	8007ca0 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007d9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007da0:	f000 fa43 	bl	800822a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007da4:	f000 fd12 	bl	80087cc <xTaskResumeAll>
 8007da8:	e77a      	b.n	8007ca0 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007daa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007dac:	f000 fa3d 	bl	800822a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007db0:	f000 fd0c 	bl	80087cc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007db4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007db6:	f000 fa8a 	bl	80082ce <prvIsQueueEmpty>
 8007dba:	4603      	mov	r3, r0
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	f43f af6f 	beq.w	8007ca0 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007dc2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	3730      	adds	r7, #48	; 0x30
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	bd80      	pop	{r7, pc}
 8007dcc:	e000ed04 	.word	0xe000ed04

08007dd0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b08e      	sub	sp, #56	; 0x38
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
 8007dd8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007dda:	2300      	movs	r3, #0
 8007ddc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007de2:	2300      	movs	r3, #0
 8007de4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d109      	bne.n	8007e00 <xQueueSemaphoreTake+0x30>
	__asm volatile
 8007dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007df0:	f383 8811 	msr	BASEPRI, r3
 8007df4:	f3bf 8f6f 	isb	sy
 8007df8:	f3bf 8f4f 	dsb	sy
 8007dfc:	623b      	str	r3, [r7, #32]
}
 8007dfe:	bf00      	nop

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d009      	beq.n	8007e1c <xQueueSemaphoreTake+0x4c>
	__asm volatile
 8007e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e0c:	f383 8811 	msr	BASEPRI, r3
 8007e10:	f3bf 8f6f 	isb	sy
 8007e14:	f3bf 8f4f 	dsb	sy
 8007e18:	61fb      	str	r3, [r7, #28]
}
 8007e1a:	bf00      	nop

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007e1c:	f001 f88c 	bl	8008f38 <xTaskGetSchedulerState>
 8007e20:	4603      	mov	r3, r0
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d102      	bne.n	8007e2c <xQueueSemaphoreTake+0x5c>
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d101      	bne.n	8007e30 <xQueueSemaphoreTake+0x60>
 8007e2c:	2301      	movs	r3, #1
 8007e2e:	e000      	b.n	8007e32 <xQueueSemaphoreTake+0x62>
 8007e30:	2300      	movs	r3, #0
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d109      	bne.n	8007e4a <xQueueSemaphoreTake+0x7a>
	__asm volatile
 8007e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e3a:	f383 8811 	msr	BASEPRI, r3
 8007e3e:	f3bf 8f6f 	isb	sy
 8007e42:	f3bf 8f4f 	dsb	sy
 8007e46:	61bb      	str	r3, [r7, #24]
}
 8007e48:	bf00      	nop
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007e4a:	f001 fb7d 	bl	8009548 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e52:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d024      	beq.n	8007ea4 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e5c:	1e5a      	subs	r2, r3, #1
 8007e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e60:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d104      	bne.n	8007e74 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007e6a:	f001 fa09 	bl	8009280 <pvTaskIncrementMutexHeldCount>
 8007e6e:	4602      	mov	r2, r0
 8007e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e72:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e76:	691b      	ldr	r3, [r3, #16]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d00f      	beq.n	8007e9c <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e7e:	3310      	adds	r3, #16
 8007e80:	4618      	mov	r0, r3
 8007e82:	f000 fe9b 	bl	8008bbc <xTaskRemoveFromEventList>
 8007e86:	4603      	mov	r3, r0
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d007      	beq.n	8007e9c <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007e8c:	4b53      	ldr	r3, [pc, #332]	; (8007fdc <xQueueSemaphoreTake+0x20c>)
 8007e8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e92:	601a      	str	r2, [r3, #0]
 8007e94:	f3bf 8f4f 	dsb	sy
 8007e98:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007e9c:	f001 fb82 	bl	80095a4 <vPortExitCritical>
				return pdPASS;
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	e096      	b.n	8007fd2 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d110      	bne.n	8007ecc <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d009      	beq.n	8007ec4 <xQueueSemaphoreTake+0xf4>
	__asm volatile
 8007eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eb4:	f383 8811 	msr	BASEPRI, r3
 8007eb8:	f3bf 8f6f 	isb	sy
 8007ebc:	f3bf 8f4f 	dsb	sy
 8007ec0:	617b      	str	r3, [r7, #20]
}
 8007ec2:	bf00      	nop
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007ec4:	f001 fb6e 	bl	80095a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007ec8:	2300      	movs	r3, #0
 8007eca:	e082      	b.n	8007fd2 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007ecc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d106      	bne.n	8007ee0 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007ed2:	f107 030c 	add.w	r3, r7, #12
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	f000 fed2 	bl	8008c80 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007edc:	2301      	movs	r3, #1
 8007ede:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007ee0:	f001 fb60 	bl	80095a4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007ee4:	f000 fc64 	bl	80087b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007ee8:	f001 fb2e 	bl	8009548 <vPortEnterCritical>
 8007eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007ef2:	b25b      	sxtb	r3, r3
 8007ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ef8:	d103      	bne.n	8007f02 <xQueueSemaphoreTake+0x132>
 8007efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007efc:	2200      	movs	r2, #0
 8007efe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007f08:	b25b      	sxtb	r3, r3
 8007f0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f0e:	d103      	bne.n	8007f18 <xQueueSemaphoreTake+0x148>
 8007f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f12:	2200      	movs	r2, #0
 8007f14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007f18:	f001 fb44 	bl	80095a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007f1c:	463a      	mov	r2, r7
 8007f1e:	f107 030c 	add.w	r3, r7, #12
 8007f22:	4611      	mov	r1, r2
 8007f24:	4618      	mov	r0, r3
 8007f26:	f000 fec1 	bl	8008cac <xTaskCheckForTimeOut>
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d132      	bne.n	8007f96 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007f30:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007f32:	f000 f9cc 	bl	80082ce <prvIsQueueEmpty>
 8007f36:	4603      	mov	r3, r0
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d026      	beq.n	8007f8a <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d109      	bne.n	8007f58 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8007f44:	f001 fb00 	bl	8009548 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f4a:	689b      	ldr	r3, [r3, #8]
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	f001 f811 	bl	8008f74 <xTaskPriorityInherit>
 8007f52:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007f54:	f001 fb26 	bl	80095a4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f5a:	3324      	adds	r3, #36	; 0x24
 8007f5c:	683a      	ldr	r2, [r7, #0]
 8007f5e:	4611      	mov	r1, r2
 8007f60:	4618      	mov	r0, r3
 8007f62:	f000 fe07 	bl	8008b74 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007f66:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007f68:	f000 f95f 	bl	800822a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007f6c:	f000 fc2e 	bl	80087cc <xTaskResumeAll>
 8007f70:	4603      	mov	r3, r0
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	f47f af69 	bne.w	8007e4a <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8007f78:	4b18      	ldr	r3, [pc, #96]	; (8007fdc <xQueueSemaphoreTake+0x20c>)
 8007f7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f7e:	601a      	str	r2, [r3, #0]
 8007f80:	f3bf 8f4f 	dsb	sy
 8007f84:	f3bf 8f6f 	isb	sy
 8007f88:	e75f      	b.n	8007e4a <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007f8a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007f8c:	f000 f94d 	bl	800822a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007f90:	f000 fc1c 	bl	80087cc <xTaskResumeAll>
 8007f94:	e759      	b.n	8007e4a <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007f96:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007f98:	f000 f947 	bl	800822a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007f9c:	f000 fc16 	bl	80087cc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007fa0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007fa2:	f000 f994 	bl	80082ce <prvIsQueueEmpty>
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	f43f af4e 	beq.w	8007e4a <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d00d      	beq.n	8007fd0 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8007fb4:	f001 fac8 	bl	8009548 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007fb8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007fba:	f000 f88f 	bl	80080dc <prvGetDisinheritPriorityAfterTimeout>
 8007fbe:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fc2:	689b      	ldr	r3, [r3, #8]
 8007fc4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	f001 f8ce 	bl	8009168 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007fcc:	f001 faea 	bl	80095a4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007fd0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	3738      	adds	r7, #56	; 0x38
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bd80      	pop	{r7, pc}
 8007fda:	bf00      	nop
 8007fdc:	e000ed04 	.word	0xe000ed04

08007fe0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b08e      	sub	sp, #56	; 0x38
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	60f8      	str	r0, [r7, #12]
 8007fe8:	60b9      	str	r1, [r7, #8]
 8007fea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d109      	bne.n	800800a <xQueueReceiveFromISR+0x2a>
	__asm volatile
 8007ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ffa:	f383 8811 	msr	BASEPRI, r3
 8007ffe:	f3bf 8f6f 	isb	sy
 8008002:	f3bf 8f4f 	dsb	sy
 8008006:	623b      	str	r3, [r7, #32]
}
 8008008:	bf00      	nop
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800800a:	68bb      	ldr	r3, [r7, #8]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d103      	bne.n	8008018 <xQueueReceiveFromISR+0x38>
 8008010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008014:	2b00      	cmp	r3, #0
 8008016:	d101      	bne.n	800801c <xQueueReceiveFromISR+0x3c>
 8008018:	2301      	movs	r3, #1
 800801a:	e000      	b.n	800801e <xQueueReceiveFromISR+0x3e>
 800801c:	2300      	movs	r3, #0
 800801e:	2b00      	cmp	r3, #0
 8008020:	d109      	bne.n	8008036 <xQueueReceiveFromISR+0x56>
	__asm volatile
 8008022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008026:	f383 8811 	msr	BASEPRI, r3
 800802a:	f3bf 8f6f 	isb	sy
 800802e:	f3bf 8f4f 	dsb	sy
 8008032:	61fb      	str	r3, [r7, #28]
}
 8008034:	bf00      	nop
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008036:	f001 fb4b 	bl	80096d0 <vPortValidateInterruptPriority>
	__asm volatile
 800803a:	f3ef 8211 	mrs	r2, BASEPRI
 800803e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008042:	f383 8811 	msr	BASEPRI, r3
 8008046:	f3bf 8f6f 	isb	sy
 800804a:	f3bf 8f4f 	dsb	sy
 800804e:	61ba      	str	r2, [r7, #24]
 8008050:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008052:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008054:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800805a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800805c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800805e:	2b00      	cmp	r3, #0
 8008060:	d02f      	beq.n	80080c2 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008064:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008068:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800806c:	68b9      	ldr	r1, [r7, #8]
 800806e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008070:	f000 f8b5 	bl	80081de <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008076:	1e5a      	subs	r2, r3, #1
 8008078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800807a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800807c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008084:	d112      	bne.n	80080ac <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008088:	691b      	ldr	r3, [r3, #16]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d016      	beq.n	80080bc <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800808e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008090:	3310      	adds	r3, #16
 8008092:	4618      	mov	r0, r3
 8008094:	f000 fd92 	bl	8008bbc <xTaskRemoveFromEventList>
 8008098:	4603      	mov	r3, r0
 800809a:	2b00      	cmp	r3, #0
 800809c:	d00e      	beq.n	80080bc <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d00b      	beq.n	80080bc <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2201      	movs	r2, #1
 80080a8:	601a      	str	r2, [r3, #0]
 80080aa:	e007      	b.n	80080bc <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80080ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80080b0:	3301      	adds	r3, #1
 80080b2:	b2db      	uxtb	r3, r3
 80080b4:	b25a      	sxtb	r2, r3
 80080b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80080bc:	2301      	movs	r3, #1
 80080be:	637b      	str	r3, [r7, #52]	; 0x34
 80080c0:	e001      	b.n	80080c6 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 80080c2:	2300      	movs	r3, #0
 80080c4:	637b      	str	r3, [r7, #52]	; 0x34
 80080c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080c8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80080ca:	693b      	ldr	r3, [r7, #16]
 80080cc:	f383 8811 	msr	BASEPRI, r3
}
 80080d0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80080d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80080d4:	4618      	mov	r0, r3
 80080d6:	3738      	adds	r7, #56	; 0x38
 80080d8:	46bd      	mov	sp, r7
 80080da:	bd80      	pop	{r7, pc}

080080dc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80080dc:	b480      	push	{r7}
 80080de:	b085      	sub	sp, #20
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d006      	beq.n	80080fa <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f1c3 0307 	rsb	r3, r3, #7
 80080f6:	60fb      	str	r3, [r7, #12]
 80080f8:	e001      	b.n	80080fe <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80080fa:	2300      	movs	r3, #0
 80080fc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80080fe:	68fb      	ldr	r3, [r7, #12]
	}
 8008100:	4618      	mov	r0, r3
 8008102:	3714      	adds	r7, #20
 8008104:	46bd      	mov	sp, r7
 8008106:	bc80      	pop	{r7}
 8008108:	4770      	bx	lr

0800810a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800810a:	b580      	push	{r7, lr}
 800810c:	b086      	sub	sp, #24
 800810e:	af00      	add	r7, sp, #0
 8008110:	60f8      	str	r0, [r7, #12]
 8008112:	60b9      	str	r1, [r7, #8]
 8008114:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008116:	2300      	movs	r3, #0
 8008118:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800811e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008124:	2b00      	cmp	r3, #0
 8008126:	d10d      	bne.n	8008144 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d14d      	bne.n	80081cc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	689b      	ldr	r3, [r3, #8]
 8008134:	4618      	mov	r0, r3
 8008136:	f000 ff93 	bl	8009060 <xTaskPriorityDisinherit>
 800813a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	2200      	movs	r2, #0
 8008140:	609a      	str	r2, [r3, #8]
 8008142:	e043      	b.n	80081cc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d119      	bne.n	800817e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	6858      	ldr	r0, [r3, #4]
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008152:	461a      	mov	r2, r3
 8008154:	68b9      	ldr	r1, [r7, #8]
 8008156:	f00e fc9f 	bl	8016a98 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	685a      	ldr	r2, [r3, #4]
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008162:	441a      	add	r2, r3
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	685a      	ldr	r2, [r3, #4]
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	689b      	ldr	r3, [r3, #8]
 8008170:	429a      	cmp	r2, r3
 8008172:	d32b      	bcc.n	80081cc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	681a      	ldr	r2, [r3, #0]
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	605a      	str	r2, [r3, #4]
 800817c:	e026      	b.n	80081cc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	68d8      	ldr	r0, [r3, #12]
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008186:	461a      	mov	r2, r3
 8008188:	68b9      	ldr	r1, [r7, #8]
 800818a:	f00e fc85 	bl	8016a98 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	68da      	ldr	r2, [r3, #12]
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008196:	425b      	negs	r3, r3
 8008198:	441a      	add	r2, r3
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	68da      	ldr	r2, [r3, #12]
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	429a      	cmp	r2, r3
 80081a8:	d207      	bcs.n	80081ba <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	689a      	ldr	r2, [r3, #8]
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081b2:	425b      	negs	r3, r3
 80081b4:	441a      	add	r2, r3
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2b02      	cmp	r3, #2
 80081be:	d105      	bne.n	80081cc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80081c0:	693b      	ldr	r3, [r7, #16]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d002      	beq.n	80081cc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80081c6:	693b      	ldr	r3, [r7, #16]
 80081c8:	3b01      	subs	r3, #1
 80081ca:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80081cc:	693b      	ldr	r3, [r7, #16]
 80081ce:	1c5a      	adds	r2, r3, #1
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80081d4:	697b      	ldr	r3, [r7, #20]
}
 80081d6:	4618      	mov	r0, r3
 80081d8:	3718      	adds	r7, #24
 80081da:	46bd      	mov	sp, r7
 80081dc:	bd80      	pop	{r7, pc}

080081de <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80081de:	b580      	push	{r7, lr}
 80081e0:	b082      	sub	sp, #8
 80081e2:	af00      	add	r7, sp, #0
 80081e4:	6078      	str	r0, [r7, #4]
 80081e6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d018      	beq.n	8008222 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	68da      	ldr	r2, [r3, #12]
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081f8:	441a      	add	r2, r3
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	68da      	ldr	r2, [r3, #12]
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	689b      	ldr	r3, [r3, #8]
 8008206:	429a      	cmp	r2, r3
 8008208:	d303      	bcc.n	8008212 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681a      	ldr	r2, [r3, #0]
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	68d9      	ldr	r1, [r3, #12]
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800821a:	461a      	mov	r2, r3
 800821c:	6838      	ldr	r0, [r7, #0]
 800821e:	f00e fc3b 	bl	8016a98 <memcpy>
	}
}
 8008222:	bf00      	nop
 8008224:	3708      	adds	r7, #8
 8008226:	46bd      	mov	sp, r7
 8008228:	bd80      	pop	{r7, pc}

0800822a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800822a:	b580      	push	{r7, lr}
 800822c:	b084      	sub	sp, #16
 800822e:	af00      	add	r7, sp, #0
 8008230:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008232:	f001 f989 	bl	8009548 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800823c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800823e:	e011      	b.n	8008264 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008244:	2b00      	cmp	r3, #0
 8008246:	d012      	beq.n	800826e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	3324      	adds	r3, #36	; 0x24
 800824c:	4618      	mov	r0, r3
 800824e:	f000 fcb5 	bl	8008bbc <xTaskRemoveFromEventList>
 8008252:	4603      	mov	r3, r0
 8008254:	2b00      	cmp	r3, #0
 8008256:	d001      	beq.n	800825c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008258:	f000 fd88 	bl	8008d6c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800825c:	7bfb      	ldrb	r3, [r7, #15]
 800825e:	3b01      	subs	r3, #1
 8008260:	b2db      	uxtb	r3, r3
 8008262:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008264:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008268:	2b00      	cmp	r3, #0
 800826a:	dce9      	bgt.n	8008240 <prvUnlockQueue+0x16>
 800826c:	e000      	b.n	8008270 <prvUnlockQueue+0x46>
					break;
 800826e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	22ff      	movs	r2, #255	; 0xff
 8008274:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008278:	f001 f994 	bl	80095a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800827c:	f001 f964 	bl	8009548 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008286:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008288:	e011      	b.n	80082ae <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	691b      	ldr	r3, [r3, #16]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d012      	beq.n	80082b8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	3310      	adds	r3, #16
 8008296:	4618      	mov	r0, r3
 8008298:	f000 fc90 	bl	8008bbc <xTaskRemoveFromEventList>
 800829c:	4603      	mov	r3, r0
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d001      	beq.n	80082a6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80082a2:	f000 fd63 	bl	8008d6c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80082a6:	7bbb      	ldrb	r3, [r7, #14]
 80082a8:	3b01      	subs	r3, #1
 80082aa:	b2db      	uxtb	r3, r3
 80082ac:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80082ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	dce9      	bgt.n	800828a <prvUnlockQueue+0x60>
 80082b6:	e000      	b.n	80082ba <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80082b8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	22ff      	movs	r2, #255	; 0xff
 80082be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80082c2:	f001 f96f 	bl	80095a4 <vPortExitCritical>
}
 80082c6:	bf00      	nop
 80082c8:	3710      	adds	r7, #16
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}

080082ce <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80082ce:	b580      	push	{r7, lr}
 80082d0:	b084      	sub	sp, #16
 80082d2:	af00      	add	r7, sp, #0
 80082d4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80082d6:	f001 f937 	bl	8009548 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d102      	bne.n	80082e8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80082e2:	2301      	movs	r3, #1
 80082e4:	60fb      	str	r3, [r7, #12]
 80082e6:	e001      	b.n	80082ec <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80082e8:	2300      	movs	r3, #0
 80082ea:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80082ec:	f001 f95a 	bl	80095a4 <vPortExitCritical>

	return xReturn;
 80082f0:	68fb      	ldr	r3, [r7, #12]
}
 80082f2:	4618      	mov	r0, r3
 80082f4:	3710      	adds	r7, #16
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bd80      	pop	{r7, pc}

080082fa <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80082fa:	b580      	push	{r7, lr}
 80082fc:	b084      	sub	sp, #16
 80082fe:	af00      	add	r7, sp, #0
 8008300:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008302:	f001 f921 	bl	8009548 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800830e:	429a      	cmp	r2, r3
 8008310:	d102      	bne.n	8008318 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008312:	2301      	movs	r3, #1
 8008314:	60fb      	str	r3, [r7, #12]
 8008316:	e001      	b.n	800831c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008318:	2300      	movs	r3, #0
 800831a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800831c:	f001 f942 	bl	80095a4 <vPortExitCritical>

	return xReturn;
 8008320:	68fb      	ldr	r3, [r7, #12]
}
 8008322:	4618      	mov	r0, r3
 8008324:	3710      	adds	r7, #16
 8008326:	46bd      	mov	sp, r7
 8008328:	bd80      	pop	{r7, pc}

0800832a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800832a:	b580      	push	{r7, lr}
 800832c:	b08e      	sub	sp, #56	; 0x38
 800832e:	af04      	add	r7, sp, #16
 8008330:	60f8      	str	r0, [r7, #12]
 8008332:	60b9      	str	r1, [r7, #8]
 8008334:	607a      	str	r2, [r7, #4]
 8008336:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008338:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800833a:	2b00      	cmp	r3, #0
 800833c:	d109      	bne.n	8008352 <xTaskCreateStatic+0x28>
	__asm volatile
 800833e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008342:	f383 8811 	msr	BASEPRI, r3
 8008346:	f3bf 8f6f 	isb	sy
 800834a:	f3bf 8f4f 	dsb	sy
 800834e:	623b      	str	r3, [r7, #32]
}
 8008350:	bf00      	nop
		configASSERT( pxTaskBuffer != NULL );
 8008352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008354:	2b00      	cmp	r3, #0
 8008356:	d109      	bne.n	800836c <xTaskCreateStatic+0x42>
	__asm volatile
 8008358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800835c:	f383 8811 	msr	BASEPRI, r3
 8008360:	f3bf 8f6f 	isb	sy
 8008364:	f3bf 8f4f 	dsb	sy
 8008368:	61fb      	str	r3, [r7, #28]
}
 800836a:	bf00      	nop
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800836c:	23b4      	movs	r3, #180	; 0xb4
 800836e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008370:	693b      	ldr	r3, [r7, #16]
 8008372:	2bb4      	cmp	r3, #180	; 0xb4
 8008374:	d009      	beq.n	800838a <xTaskCreateStatic+0x60>
	__asm volatile
 8008376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800837a:	f383 8811 	msr	BASEPRI, r3
 800837e:	f3bf 8f6f 	isb	sy
 8008382:	f3bf 8f4f 	dsb	sy
 8008386:	61bb      	str	r3, [r7, #24]
}
 8008388:	bf00      	nop
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800838a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800838c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800838e:	2b00      	cmp	r3, #0
 8008390:	d01e      	beq.n	80083d0 <xTaskCreateStatic+0xa6>
 8008392:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008394:	2b00      	cmp	r3, #0
 8008396:	d01b      	beq.n	80083d0 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800839a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800839c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800839e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80083a0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80083a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083a4:	2202      	movs	r2, #2
 80083a6:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80083aa:	2300      	movs	r3, #0
 80083ac:	9303      	str	r3, [sp, #12]
 80083ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083b0:	9302      	str	r3, [sp, #8]
 80083b2:	f107 0314 	add.w	r3, r7, #20
 80083b6:	9301      	str	r3, [sp, #4]
 80083b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ba:	9300      	str	r3, [sp, #0]
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	687a      	ldr	r2, [r7, #4]
 80083c0:	68b9      	ldr	r1, [r7, #8]
 80083c2:	68f8      	ldr	r0, [r7, #12]
 80083c4:	f000 f850 	bl	8008468 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80083c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80083ca:	f000 f8eb 	bl	80085a4 <prvAddNewTaskToReadyList>
 80083ce:	e001      	b.n	80083d4 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 80083d0:	2300      	movs	r3, #0
 80083d2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80083d4:	697b      	ldr	r3, [r7, #20]
	}
 80083d6:	4618      	mov	r0, r3
 80083d8:	3728      	adds	r7, #40	; 0x28
 80083da:	46bd      	mov	sp, r7
 80083dc:	bd80      	pop	{r7, pc}

080083de <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80083de:	b580      	push	{r7, lr}
 80083e0:	b08c      	sub	sp, #48	; 0x30
 80083e2:	af04      	add	r7, sp, #16
 80083e4:	60f8      	str	r0, [r7, #12]
 80083e6:	60b9      	str	r1, [r7, #8]
 80083e8:	603b      	str	r3, [r7, #0]
 80083ea:	4613      	mov	r3, r2
 80083ec:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80083ee:	88fb      	ldrh	r3, [r7, #6]
 80083f0:	009b      	lsls	r3, r3, #2
 80083f2:	4618      	mov	r0, r3
 80083f4:	f001 f9a8 	bl	8009748 <pvPortMalloc>
 80083f8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80083fa:	697b      	ldr	r3, [r7, #20]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d00e      	beq.n	800841e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008400:	20b4      	movs	r0, #180	; 0xb4
 8008402:	f001 f9a1 	bl	8009748 <pvPortMalloc>
 8008406:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008408:	69fb      	ldr	r3, [r7, #28]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d003      	beq.n	8008416 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800840e:	69fb      	ldr	r3, [r7, #28]
 8008410:	697a      	ldr	r2, [r7, #20]
 8008412:	631a      	str	r2, [r3, #48]	; 0x30
 8008414:	e005      	b.n	8008422 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008416:	6978      	ldr	r0, [r7, #20]
 8008418:	f001 fa5e 	bl	80098d8 <vPortFree>
 800841c:	e001      	b.n	8008422 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800841e:	2300      	movs	r3, #0
 8008420:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008422:	69fb      	ldr	r3, [r7, #28]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d017      	beq.n	8008458 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008428:	69fb      	ldr	r3, [r7, #28]
 800842a:	2200      	movs	r2, #0
 800842c:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008430:	88fa      	ldrh	r2, [r7, #6]
 8008432:	2300      	movs	r3, #0
 8008434:	9303      	str	r3, [sp, #12]
 8008436:	69fb      	ldr	r3, [r7, #28]
 8008438:	9302      	str	r3, [sp, #8]
 800843a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800843c:	9301      	str	r3, [sp, #4]
 800843e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008440:	9300      	str	r3, [sp, #0]
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	68b9      	ldr	r1, [r7, #8]
 8008446:	68f8      	ldr	r0, [r7, #12]
 8008448:	f000 f80e 	bl	8008468 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800844c:	69f8      	ldr	r0, [r7, #28]
 800844e:	f000 f8a9 	bl	80085a4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008452:	2301      	movs	r3, #1
 8008454:	61bb      	str	r3, [r7, #24]
 8008456:	e002      	b.n	800845e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008458:	f04f 33ff 	mov.w	r3, #4294967295
 800845c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800845e:	69bb      	ldr	r3, [r7, #24]
	}
 8008460:	4618      	mov	r0, r3
 8008462:	3720      	adds	r7, #32
 8008464:	46bd      	mov	sp, r7
 8008466:	bd80      	pop	{r7, pc}

08008468 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b088      	sub	sp, #32
 800846c:	af00      	add	r7, sp, #0
 800846e:	60f8      	str	r0, [r7, #12]
 8008470:	60b9      	str	r1, [r7, #8]
 8008472:	607a      	str	r2, [r7, #4]
 8008474:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008478:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008480:	3b01      	subs	r3, #1
 8008482:	009b      	lsls	r3, r3, #2
 8008484:	4413      	add	r3, r2
 8008486:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008488:	69bb      	ldr	r3, [r7, #24]
 800848a:	f023 0307 	bic.w	r3, r3, #7
 800848e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008490:	69bb      	ldr	r3, [r7, #24]
 8008492:	f003 0307 	and.w	r3, r3, #7
 8008496:	2b00      	cmp	r3, #0
 8008498:	d009      	beq.n	80084ae <prvInitialiseNewTask+0x46>
	__asm volatile
 800849a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800849e:	f383 8811 	msr	BASEPRI, r3
 80084a2:	f3bf 8f6f 	isb	sy
 80084a6:	f3bf 8f4f 	dsb	sy
 80084aa:	617b      	str	r3, [r7, #20]
}
 80084ac:	bf00      	nop
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80084ae:	68bb      	ldr	r3, [r7, #8]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d01f      	beq.n	80084f4 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80084b4:	2300      	movs	r3, #0
 80084b6:	61fb      	str	r3, [r7, #28]
 80084b8:	e012      	b.n	80084e0 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80084ba:	68ba      	ldr	r2, [r7, #8]
 80084bc:	69fb      	ldr	r3, [r7, #28]
 80084be:	4413      	add	r3, r2
 80084c0:	7819      	ldrb	r1, [r3, #0]
 80084c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084c4:	69fb      	ldr	r3, [r7, #28]
 80084c6:	4413      	add	r3, r2
 80084c8:	3334      	adds	r3, #52	; 0x34
 80084ca:	460a      	mov	r2, r1
 80084cc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80084ce:	68ba      	ldr	r2, [r7, #8]
 80084d0:	69fb      	ldr	r3, [r7, #28]
 80084d2:	4413      	add	r3, r2
 80084d4:	781b      	ldrb	r3, [r3, #0]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d006      	beq.n	80084e8 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80084da:	69fb      	ldr	r3, [r7, #28]
 80084dc:	3301      	adds	r3, #1
 80084de:	61fb      	str	r3, [r7, #28]
 80084e0:	69fb      	ldr	r3, [r7, #28]
 80084e2:	2b0f      	cmp	r3, #15
 80084e4:	d9e9      	bls.n	80084ba <prvInitialiseNewTask+0x52>
 80084e6:	e000      	b.n	80084ea <prvInitialiseNewTask+0x82>
			{
				break;
 80084e8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80084ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084ec:	2200      	movs	r2, #0
 80084ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80084f2:	e003      	b.n	80084fc <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80084f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084f6:	2200      	movs	r2, #0
 80084f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80084fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084fe:	2b06      	cmp	r3, #6
 8008500:	d901      	bls.n	8008506 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008502:	2306      	movs	r3, #6
 8008504:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008508:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800850a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800850c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800850e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008510:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008514:	2200      	movs	r2, #0
 8008516:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800851a:	3304      	adds	r3, #4
 800851c:	4618      	mov	r0, r3
 800851e:	f7fe ff4e 	bl	80073be <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008524:	3318      	adds	r3, #24
 8008526:	4618      	mov	r0, r3
 8008528:	f7fe ff49 	bl	80073be <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800852c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800852e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008530:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008534:	f1c3 0207 	rsb	r2, r3, #7
 8008538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800853a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800853c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800853e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008540:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008544:	2200      	movs	r2, #0
 8008546:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800854a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800854c:	2200      	movs	r2, #0
 800854e:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008554:	334c      	adds	r3, #76	; 0x4c
 8008556:	2260      	movs	r2, #96	; 0x60
 8008558:	2100      	movs	r1, #0
 800855a:	4618      	mov	r0, r3
 800855c:	f00e faaa 	bl	8016ab4 <memset>
 8008560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008562:	4a0d      	ldr	r2, [pc, #52]	; (8008598 <prvInitialiseNewTask+0x130>)
 8008564:	651a      	str	r2, [r3, #80]	; 0x50
 8008566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008568:	4a0c      	ldr	r2, [pc, #48]	; (800859c <prvInitialiseNewTask+0x134>)
 800856a:	655a      	str	r2, [r3, #84]	; 0x54
 800856c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800856e:	4a0c      	ldr	r2, [pc, #48]	; (80085a0 <prvInitialiseNewTask+0x138>)
 8008570:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008572:	683a      	ldr	r2, [r7, #0]
 8008574:	68f9      	ldr	r1, [r7, #12]
 8008576:	69b8      	ldr	r0, [r7, #24]
 8008578:	f000 fefc 	bl	8009374 <pxPortInitialiseStack>
 800857c:	4602      	mov	r2, r0
 800857e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008580:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008584:	2b00      	cmp	r3, #0
 8008586:	d002      	beq.n	800858e <prvInitialiseNewTask+0x126>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800858a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800858c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800858e:	bf00      	nop
 8008590:	3720      	adds	r7, #32
 8008592:	46bd      	mov	sp, r7
 8008594:	bd80      	pop	{r7, pc}
 8008596:	bf00      	nop
 8008598:	0801ac9c 	.word	0x0801ac9c
 800859c:	0801acbc 	.word	0x0801acbc
 80085a0:	0801ac7c 	.word	0x0801ac7c

080085a4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b082      	sub	sp, #8
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80085ac:	f000 ffcc 	bl	8009548 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80085b0:	4b2a      	ldr	r3, [pc, #168]	; (800865c <prvAddNewTaskToReadyList+0xb8>)
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	3301      	adds	r3, #1
 80085b6:	4a29      	ldr	r2, [pc, #164]	; (800865c <prvAddNewTaskToReadyList+0xb8>)
 80085b8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80085ba:	4b29      	ldr	r3, [pc, #164]	; (8008660 <prvAddNewTaskToReadyList+0xbc>)
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d109      	bne.n	80085d6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80085c2:	4a27      	ldr	r2, [pc, #156]	; (8008660 <prvAddNewTaskToReadyList+0xbc>)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80085c8:	4b24      	ldr	r3, [pc, #144]	; (800865c <prvAddNewTaskToReadyList+0xb8>)
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	2b01      	cmp	r3, #1
 80085ce:	d110      	bne.n	80085f2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80085d0:	f000 fbf0 	bl	8008db4 <prvInitialiseTaskLists>
 80085d4:	e00d      	b.n	80085f2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80085d6:	4b23      	ldr	r3, [pc, #140]	; (8008664 <prvAddNewTaskToReadyList+0xc0>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d109      	bne.n	80085f2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80085de:	4b20      	ldr	r3, [pc, #128]	; (8008660 <prvAddNewTaskToReadyList+0xbc>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085e8:	429a      	cmp	r2, r3
 80085ea:	d802      	bhi.n	80085f2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80085ec:	4a1c      	ldr	r2, [pc, #112]	; (8008660 <prvAddNewTaskToReadyList+0xbc>)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80085f2:	4b1d      	ldr	r3, [pc, #116]	; (8008668 <prvAddNewTaskToReadyList+0xc4>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	3301      	adds	r3, #1
 80085f8:	4a1b      	ldr	r2, [pc, #108]	; (8008668 <prvAddNewTaskToReadyList+0xc4>)
 80085fa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008600:	2201      	movs	r2, #1
 8008602:	409a      	lsls	r2, r3
 8008604:	4b19      	ldr	r3, [pc, #100]	; (800866c <prvAddNewTaskToReadyList+0xc8>)
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	4313      	orrs	r3, r2
 800860a:	4a18      	ldr	r2, [pc, #96]	; (800866c <prvAddNewTaskToReadyList+0xc8>)
 800860c:	6013      	str	r3, [r2, #0]
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008612:	4613      	mov	r3, r2
 8008614:	009b      	lsls	r3, r3, #2
 8008616:	4413      	add	r3, r2
 8008618:	009b      	lsls	r3, r3, #2
 800861a:	4a15      	ldr	r2, [pc, #84]	; (8008670 <prvAddNewTaskToReadyList+0xcc>)
 800861c:	441a      	add	r2, r3
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	3304      	adds	r3, #4
 8008622:	4619      	mov	r1, r3
 8008624:	4610      	mov	r0, r2
 8008626:	f7fe fed6 	bl	80073d6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800862a:	f000 ffbb 	bl	80095a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800862e:	4b0d      	ldr	r3, [pc, #52]	; (8008664 <prvAddNewTaskToReadyList+0xc0>)
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d00e      	beq.n	8008654 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008636:	4b0a      	ldr	r3, [pc, #40]	; (8008660 <prvAddNewTaskToReadyList+0xbc>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008640:	429a      	cmp	r2, r3
 8008642:	d207      	bcs.n	8008654 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008644:	4b0b      	ldr	r3, [pc, #44]	; (8008674 <prvAddNewTaskToReadyList+0xd0>)
 8008646:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800864a:	601a      	str	r2, [r3, #0]
 800864c:	f3bf 8f4f 	dsb	sy
 8008650:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008654:	bf00      	nop
 8008656:	3708      	adds	r7, #8
 8008658:	46bd      	mov	sp, r7
 800865a:	bd80      	pop	{r7, pc}
 800865c:	200050ac 	.word	0x200050ac
 8008660:	20004fac 	.word	0x20004fac
 8008664:	200050b8 	.word	0x200050b8
 8008668:	200050c8 	.word	0x200050c8
 800866c:	200050b4 	.word	0x200050b4
 8008670:	20004fb0 	.word	0x20004fb0
 8008674:	e000ed04 	.word	0xe000ed04

08008678 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008678:	b580      	push	{r7, lr}
 800867a:	b084      	sub	sp, #16
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008680:	2300      	movs	r3, #0
 8008682:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d016      	beq.n	80086b8 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800868a:	4b13      	ldr	r3, [pc, #76]	; (80086d8 <vTaskDelay+0x60>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d009      	beq.n	80086a6 <vTaskDelay+0x2e>
	__asm volatile
 8008692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008696:	f383 8811 	msr	BASEPRI, r3
 800869a:	f3bf 8f6f 	isb	sy
 800869e:	f3bf 8f4f 	dsb	sy
 80086a2:	60bb      	str	r3, [r7, #8]
}
 80086a4:	bf00      	nop
			vTaskSuspendAll();
 80086a6:	f000 f883 	bl	80087b0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80086aa:	2100      	movs	r1, #0
 80086ac:	6878      	ldr	r0, [r7, #4]
 80086ae:	f000 fdfb 	bl	80092a8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80086b2:	f000 f88b 	bl	80087cc <xTaskResumeAll>
 80086b6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d107      	bne.n	80086ce <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80086be:	4b07      	ldr	r3, [pc, #28]	; (80086dc <vTaskDelay+0x64>)
 80086c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086c4:	601a      	str	r2, [r3, #0]
 80086c6:	f3bf 8f4f 	dsb	sy
 80086ca:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80086ce:	bf00      	nop
 80086d0:	3710      	adds	r7, #16
 80086d2:	46bd      	mov	sp, r7
 80086d4:	bd80      	pop	{r7, pc}
 80086d6:	bf00      	nop
 80086d8:	200050d4 	.word	0x200050d4
 80086dc:	e000ed04 	.word	0xe000ed04

080086e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b08a      	sub	sp, #40	; 0x28
 80086e4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80086e6:	2300      	movs	r3, #0
 80086e8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80086ea:	2300      	movs	r3, #0
 80086ec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80086ee:	463a      	mov	r2, r7
 80086f0:	1d39      	adds	r1, r7, #4
 80086f2:	f107 0308 	add.w	r3, r7, #8
 80086f6:	4618      	mov	r0, r3
 80086f8:	f7f7 ff44 	bl	8000584 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80086fc:	6839      	ldr	r1, [r7, #0]
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	68ba      	ldr	r2, [r7, #8]
 8008702:	9202      	str	r2, [sp, #8]
 8008704:	9301      	str	r3, [sp, #4]
 8008706:	2300      	movs	r3, #0
 8008708:	9300      	str	r3, [sp, #0]
 800870a:	2300      	movs	r3, #0
 800870c:	460a      	mov	r2, r1
 800870e:	4920      	ldr	r1, [pc, #128]	; (8008790 <vTaskStartScheduler+0xb0>)
 8008710:	4820      	ldr	r0, [pc, #128]	; (8008794 <vTaskStartScheduler+0xb4>)
 8008712:	f7ff fe0a 	bl	800832a <xTaskCreateStatic>
 8008716:	4603      	mov	r3, r0
 8008718:	4a1f      	ldr	r2, [pc, #124]	; (8008798 <vTaskStartScheduler+0xb8>)
 800871a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800871c:	4b1e      	ldr	r3, [pc, #120]	; (8008798 <vTaskStartScheduler+0xb8>)
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d002      	beq.n	800872a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008724:	2301      	movs	r3, #1
 8008726:	617b      	str	r3, [r7, #20]
 8008728:	e001      	b.n	800872e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800872a:	2300      	movs	r3, #0
 800872c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800872e:	697b      	ldr	r3, [r7, #20]
 8008730:	2b01      	cmp	r3, #1
 8008732:	d11b      	bne.n	800876c <vTaskStartScheduler+0x8c>
	__asm volatile
 8008734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008738:	f383 8811 	msr	BASEPRI, r3
 800873c:	f3bf 8f6f 	isb	sy
 8008740:	f3bf 8f4f 	dsb	sy
 8008744:	613b      	str	r3, [r7, #16]
}
 8008746:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008748:	4b14      	ldr	r3, [pc, #80]	; (800879c <vTaskStartScheduler+0xbc>)
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	334c      	adds	r3, #76	; 0x4c
 800874e:	4a14      	ldr	r2, [pc, #80]	; (80087a0 <vTaskStartScheduler+0xc0>)
 8008750:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008752:	4b14      	ldr	r3, [pc, #80]	; (80087a4 <vTaskStartScheduler+0xc4>)
 8008754:	f04f 32ff 	mov.w	r2, #4294967295
 8008758:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800875a:	4b13      	ldr	r3, [pc, #76]	; (80087a8 <vTaskStartScheduler+0xc8>)
 800875c:	2201      	movs	r2, #1
 800875e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008760:	4b12      	ldr	r3, [pc, #72]	; (80087ac <vTaskStartScheduler+0xcc>)
 8008762:	2200      	movs	r2, #0
 8008764:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008766:	f000 fe7f 	bl	8009468 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800876a:	e00d      	b.n	8008788 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800876c:	697b      	ldr	r3, [r7, #20]
 800876e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008772:	d109      	bne.n	8008788 <vTaskStartScheduler+0xa8>
	__asm volatile
 8008774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008778:	f383 8811 	msr	BASEPRI, r3
 800877c:	f3bf 8f6f 	isb	sy
 8008780:	f3bf 8f4f 	dsb	sy
 8008784:	60fb      	str	r3, [r7, #12]
}
 8008786:	bf00      	nop
}
 8008788:	bf00      	nop
 800878a:	3718      	adds	r7, #24
 800878c:	46bd      	mov	sp, r7
 800878e:	bd80      	pop	{r7, pc}
 8008790:	080178e0 	.word	0x080178e0
 8008794:	08008d85 	.word	0x08008d85
 8008798:	200050d0 	.word	0x200050d0
 800879c:	20004fac 	.word	0x20004fac
 80087a0:	2000001c 	.word	0x2000001c
 80087a4:	200050cc 	.word	0x200050cc
 80087a8:	200050b8 	.word	0x200050b8
 80087ac:	200050b0 	.word	0x200050b0

080087b0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80087b0:	b480      	push	{r7}
 80087b2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80087b4:	4b04      	ldr	r3, [pc, #16]	; (80087c8 <vTaskSuspendAll+0x18>)
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	3301      	adds	r3, #1
 80087ba:	4a03      	ldr	r2, [pc, #12]	; (80087c8 <vTaskSuspendAll+0x18>)
 80087bc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80087be:	bf00      	nop
 80087c0:	46bd      	mov	sp, r7
 80087c2:	bc80      	pop	{r7}
 80087c4:	4770      	bx	lr
 80087c6:	bf00      	nop
 80087c8:	200050d4 	.word	0x200050d4

080087cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b084      	sub	sp, #16
 80087d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80087d2:	2300      	movs	r3, #0
 80087d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80087d6:	2300      	movs	r3, #0
 80087d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80087da:	4b41      	ldr	r3, [pc, #260]	; (80088e0 <xTaskResumeAll+0x114>)
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d109      	bne.n	80087f6 <xTaskResumeAll+0x2a>
	__asm volatile
 80087e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087e6:	f383 8811 	msr	BASEPRI, r3
 80087ea:	f3bf 8f6f 	isb	sy
 80087ee:	f3bf 8f4f 	dsb	sy
 80087f2:	603b      	str	r3, [r7, #0]
}
 80087f4:	bf00      	nop
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80087f6:	f000 fea7 	bl	8009548 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80087fa:	4b39      	ldr	r3, [pc, #228]	; (80088e0 <xTaskResumeAll+0x114>)
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	3b01      	subs	r3, #1
 8008800:	4a37      	ldr	r2, [pc, #220]	; (80088e0 <xTaskResumeAll+0x114>)
 8008802:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008804:	4b36      	ldr	r3, [pc, #216]	; (80088e0 <xTaskResumeAll+0x114>)
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d161      	bne.n	80088d0 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800880c:	4b35      	ldr	r3, [pc, #212]	; (80088e4 <xTaskResumeAll+0x118>)
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d05d      	beq.n	80088d0 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008814:	e02e      	b.n	8008874 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008816:	4b34      	ldr	r3, [pc, #208]	; (80088e8 <xTaskResumeAll+0x11c>)
 8008818:	68db      	ldr	r3, [r3, #12]
 800881a:	68db      	ldr	r3, [r3, #12]
 800881c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	3318      	adds	r3, #24
 8008822:	4618      	mov	r0, r3
 8008824:	f7fe fe32 	bl	800748c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	3304      	adds	r3, #4
 800882c:	4618      	mov	r0, r3
 800882e:	f7fe fe2d 	bl	800748c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008836:	2201      	movs	r2, #1
 8008838:	409a      	lsls	r2, r3
 800883a:	4b2c      	ldr	r3, [pc, #176]	; (80088ec <xTaskResumeAll+0x120>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	4313      	orrs	r3, r2
 8008840:	4a2a      	ldr	r2, [pc, #168]	; (80088ec <xTaskResumeAll+0x120>)
 8008842:	6013      	str	r3, [r2, #0]
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008848:	4613      	mov	r3, r2
 800884a:	009b      	lsls	r3, r3, #2
 800884c:	4413      	add	r3, r2
 800884e:	009b      	lsls	r3, r3, #2
 8008850:	4a27      	ldr	r2, [pc, #156]	; (80088f0 <xTaskResumeAll+0x124>)
 8008852:	441a      	add	r2, r3
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	3304      	adds	r3, #4
 8008858:	4619      	mov	r1, r3
 800885a:	4610      	mov	r0, r2
 800885c:	f7fe fdbb 	bl	80073d6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008864:	4b23      	ldr	r3, [pc, #140]	; (80088f4 <xTaskResumeAll+0x128>)
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800886a:	429a      	cmp	r2, r3
 800886c:	d302      	bcc.n	8008874 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800886e:	4b22      	ldr	r3, [pc, #136]	; (80088f8 <xTaskResumeAll+0x12c>)
 8008870:	2201      	movs	r2, #1
 8008872:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008874:	4b1c      	ldr	r3, [pc, #112]	; (80088e8 <xTaskResumeAll+0x11c>)
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d1cc      	bne.n	8008816 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d001      	beq.n	8008886 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008882:	f000 fb39 	bl	8008ef8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008886:	4b1d      	ldr	r3, [pc, #116]	; (80088fc <xTaskResumeAll+0x130>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d010      	beq.n	80088b4 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008892:	f000 f857 	bl	8008944 <xTaskIncrementTick>
 8008896:	4603      	mov	r3, r0
 8008898:	2b00      	cmp	r3, #0
 800889a:	d002      	beq.n	80088a2 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800889c:	4b16      	ldr	r3, [pc, #88]	; (80088f8 <xTaskResumeAll+0x12c>)
 800889e:	2201      	movs	r2, #1
 80088a0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	3b01      	subs	r3, #1
 80088a6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d1f1      	bne.n	8008892 <xTaskResumeAll+0xc6>

						xPendedTicks = 0;
 80088ae:	4b13      	ldr	r3, [pc, #76]	; (80088fc <xTaskResumeAll+0x130>)
 80088b0:	2200      	movs	r2, #0
 80088b2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80088b4:	4b10      	ldr	r3, [pc, #64]	; (80088f8 <xTaskResumeAll+0x12c>)
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d009      	beq.n	80088d0 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80088bc:	2301      	movs	r3, #1
 80088be:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80088c0:	4b0f      	ldr	r3, [pc, #60]	; (8008900 <xTaskResumeAll+0x134>)
 80088c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088c6:	601a      	str	r2, [r3, #0]
 80088c8:	f3bf 8f4f 	dsb	sy
 80088cc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80088d0:	f000 fe68 	bl	80095a4 <vPortExitCritical>

	return xAlreadyYielded;
 80088d4:	68bb      	ldr	r3, [r7, #8]
}
 80088d6:	4618      	mov	r0, r3
 80088d8:	3710      	adds	r7, #16
 80088da:	46bd      	mov	sp, r7
 80088dc:	bd80      	pop	{r7, pc}
 80088de:	bf00      	nop
 80088e0:	200050d4 	.word	0x200050d4
 80088e4:	200050ac 	.word	0x200050ac
 80088e8:	2000506c 	.word	0x2000506c
 80088ec:	200050b4 	.word	0x200050b4
 80088f0:	20004fb0 	.word	0x20004fb0
 80088f4:	20004fac 	.word	0x20004fac
 80088f8:	200050c0 	.word	0x200050c0
 80088fc:	200050bc 	.word	0x200050bc
 8008900:	e000ed04 	.word	0xe000ed04

08008904 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008904:	b480      	push	{r7}
 8008906:	b083      	sub	sp, #12
 8008908:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800890a:	4b04      	ldr	r3, [pc, #16]	; (800891c <xTaskGetTickCount+0x18>)
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008910:	687b      	ldr	r3, [r7, #4]
}
 8008912:	4618      	mov	r0, r3
 8008914:	370c      	adds	r7, #12
 8008916:	46bd      	mov	sp, r7
 8008918:	bc80      	pop	{r7}
 800891a:	4770      	bx	lr
 800891c:	200050b0 	.word	0x200050b0

08008920 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b082      	sub	sp, #8
 8008924:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008926:	f000 fed3 	bl	80096d0 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800892a:	2300      	movs	r3, #0
 800892c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800892e:	4b04      	ldr	r3, [pc, #16]	; (8008940 <xTaskGetTickCountFromISR+0x20>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008934:	683b      	ldr	r3, [r7, #0]
}
 8008936:	4618      	mov	r0, r3
 8008938:	3708      	adds	r7, #8
 800893a:	46bd      	mov	sp, r7
 800893c:	bd80      	pop	{r7, pc}
 800893e:	bf00      	nop
 8008940:	200050b0 	.word	0x200050b0

08008944 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b086      	sub	sp, #24
 8008948:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800894a:	2300      	movs	r3, #0
 800894c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800894e:	4b4e      	ldr	r3, [pc, #312]	; (8008a88 <xTaskIncrementTick+0x144>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	2b00      	cmp	r3, #0
 8008954:	f040 808d 	bne.w	8008a72 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008958:	4b4c      	ldr	r3, [pc, #304]	; (8008a8c <xTaskIncrementTick+0x148>)
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	3301      	adds	r3, #1
 800895e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008960:	4a4a      	ldr	r2, [pc, #296]	; (8008a8c <xTaskIncrementTick+0x148>)
 8008962:	693b      	ldr	r3, [r7, #16]
 8008964:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008966:	693b      	ldr	r3, [r7, #16]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d11f      	bne.n	80089ac <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800896c:	4b48      	ldr	r3, [pc, #288]	; (8008a90 <xTaskIncrementTick+0x14c>)
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d009      	beq.n	800898a <xTaskIncrementTick+0x46>
	__asm volatile
 8008976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800897a:	f383 8811 	msr	BASEPRI, r3
 800897e:	f3bf 8f6f 	isb	sy
 8008982:	f3bf 8f4f 	dsb	sy
 8008986:	603b      	str	r3, [r7, #0]
}
 8008988:	bf00      	nop
 800898a:	4b41      	ldr	r3, [pc, #260]	; (8008a90 <xTaskIncrementTick+0x14c>)
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	60fb      	str	r3, [r7, #12]
 8008990:	4b40      	ldr	r3, [pc, #256]	; (8008a94 <xTaskIncrementTick+0x150>)
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	4a3e      	ldr	r2, [pc, #248]	; (8008a90 <xTaskIncrementTick+0x14c>)
 8008996:	6013      	str	r3, [r2, #0]
 8008998:	4a3e      	ldr	r2, [pc, #248]	; (8008a94 <xTaskIncrementTick+0x150>)
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	6013      	str	r3, [r2, #0]
 800899e:	4b3e      	ldr	r3, [pc, #248]	; (8008a98 <xTaskIncrementTick+0x154>)
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	3301      	adds	r3, #1
 80089a4:	4a3c      	ldr	r2, [pc, #240]	; (8008a98 <xTaskIncrementTick+0x154>)
 80089a6:	6013      	str	r3, [r2, #0]
 80089a8:	f000 faa6 	bl	8008ef8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80089ac:	4b3b      	ldr	r3, [pc, #236]	; (8008a9c <xTaskIncrementTick+0x158>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	693a      	ldr	r2, [r7, #16]
 80089b2:	429a      	cmp	r2, r3
 80089b4:	d348      	bcc.n	8008a48 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80089b6:	4b36      	ldr	r3, [pc, #216]	; (8008a90 <xTaskIncrementTick+0x14c>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d104      	bne.n	80089ca <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80089c0:	4b36      	ldr	r3, [pc, #216]	; (8008a9c <xTaskIncrementTick+0x158>)
 80089c2:	f04f 32ff 	mov.w	r2, #4294967295
 80089c6:	601a      	str	r2, [r3, #0]
					break;
 80089c8:	e03e      	b.n	8008a48 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089ca:	4b31      	ldr	r3, [pc, #196]	; (8008a90 <xTaskIncrementTick+0x14c>)
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	68db      	ldr	r3, [r3, #12]
 80089d0:	68db      	ldr	r3, [r3, #12]
 80089d2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	685b      	ldr	r3, [r3, #4]
 80089d8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80089da:	693a      	ldr	r2, [r7, #16]
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	429a      	cmp	r2, r3
 80089e0:	d203      	bcs.n	80089ea <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80089e2:	4a2e      	ldr	r2, [pc, #184]	; (8008a9c <xTaskIncrementTick+0x158>)
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80089e8:	e02e      	b.n	8008a48 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80089ea:	68bb      	ldr	r3, [r7, #8]
 80089ec:	3304      	adds	r3, #4
 80089ee:	4618      	mov	r0, r3
 80089f0:	f7fe fd4c 	bl	800748c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80089f4:	68bb      	ldr	r3, [r7, #8]
 80089f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d004      	beq.n	8008a06 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80089fc:	68bb      	ldr	r3, [r7, #8]
 80089fe:	3318      	adds	r3, #24
 8008a00:	4618      	mov	r0, r3
 8008a02:	f7fe fd43 	bl	800748c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008a06:	68bb      	ldr	r3, [r7, #8]
 8008a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a0a:	2201      	movs	r2, #1
 8008a0c:	409a      	lsls	r2, r3
 8008a0e:	4b24      	ldr	r3, [pc, #144]	; (8008aa0 <xTaskIncrementTick+0x15c>)
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	4313      	orrs	r3, r2
 8008a14:	4a22      	ldr	r2, [pc, #136]	; (8008aa0 <xTaskIncrementTick+0x15c>)
 8008a16:	6013      	str	r3, [r2, #0]
 8008a18:	68bb      	ldr	r3, [r7, #8]
 8008a1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a1c:	4613      	mov	r3, r2
 8008a1e:	009b      	lsls	r3, r3, #2
 8008a20:	4413      	add	r3, r2
 8008a22:	009b      	lsls	r3, r3, #2
 8008a24:	4a1f      	ldr	r2, [pc, #124]	; (8008aa4 <xTaskIncrementTick+0x160>)
 8008a26:	441a      	add	r2, r3
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	3304      	adds	r3, #4
 8008a2c:	4619      	mov	r1, r3
 8008a2e:	4610      	mov	r0, r2
 8008a30:	f7fe fcd1 	bl	80073d6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008a34:	68bb      	ldr	r3, [r7, #8]
 8008a36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a38:	4b1b      	ldr	r3, [pc, #108]	; (8008aa8 <xTaskIncrementTick+0x164>)
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a3e:	429a      	cmp	r2, r3
 8008a40:	d3b9      	bcc.n	80089b6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8008a42:	2301      	movs	r3, #1
 8008a44:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008a46:	e7b6      	b.n	80089b6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008a48:	4b17      	ldr	r3, [pc, #92]	; (8008aa8 <xTaskIncrementTick+0x164>)
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a4e:	4915      	ldr	r1, [pc, #84]	; (8008aa4 <xTaskIncrementTick+0x160>)
 8008a50:	4613      	mov	r3, r2
 8008a52:	009b      	lsls	r3, r3, #2
 8008a54:	4413      	add	r3, r2
 8008a56:	009b      	lsls	r3, r3, #2
 8008a58:	440b      	add	r3, r1
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	2b01      	cmp	r3, #1
 8008a5e:	d901      	bls.n	8008a64 <xTaskIncrementTick+0x120>
			{
				xSwitchRequired = pdTRUE;
 8008a60:	2301      	movs	r3, #1
 8008a62:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008a64:	4b11      	ldr	r3, [pc, #68]	; (8008aac <xTaskIncrementTick+0x168>)
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d007      	beq.n	8008a7c <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8008a6c:	2301      	movs	r3, #1
 8008a6e:	617b      	str	r3, [r7, #20]
 8008a70:	e004      	b.n	8008a7c <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008a72:	4b0f      	ldr	r3, [pc, #60]	; (8008ab0 <xTaskIncrementTick+0x16c>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	3301      	adds	r3, #1
 8008a78:	4a0d      	ldr	r2, [pc, #52]	; (8008ab0 <xTaskIncrementTick+0x16c>)
 8008a7a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008a7c:	697b      	ldr	r3, [r7, #20]
}
 8008a7e:	4618      	mov	r0, r3
 8008a80:	3718      	adds	r7, #24
 8008a82:	46bd      	mov	sp, r7
 8008a84:	bd80      	pop	{r7, pc}
 8008a86:	bf00      	nop
 8008a88:	200050d4 	.word	0x200050d4
 8008a8c:	200050b0 	.word	0x200050b0
 8008a90:	20005064 	.word	0x20005064
 8008a94:	20005068 	.word	0x20005068
 8008a98:	200050c4 	.word	0x200050c4
 8008a9c:	200050cc 	.word	0x200050cc
 8008aa0:	200050b4 	.word	0x200050b4
 8008aa4:	20004fb0 	.word	0x20004fb0
 8008aa8:	20004fac 	.word	0x20004fac
 8008aac:	200050c0 	.word	0x200050c0
 8008ab0:	200050bc 	.word	0x200050bc

08008ab4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008ab4:	b480      	push	{r7}
 8008ab6:	b087      	sub	sp, #28
 8008ab8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008aba:	4b28      	ldr	r3, [pc, #160]	; (8008b5c <vTaskSwitchContext+0xa8>)
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d003      	beq.n	8008aca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008ac2:	4b27      	ldr	r3, [pc, #156]	; (8008b60 <vTaskSwitchContext+0xac>)
 8008ac4:	2201      	movs	r2, #1
 8008ac6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008ac8:	e043      	b.n	8008b52 <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 8008aca:	4b25      	ldr	r3, [pc, #148]	; (8008b60 <vTaskSwitchContext+0xac>)
 8008acc:	2200      	movs	r2, #0
 8008ace:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ad0:	4b24      	ldr	r3, [pc, #144]	; (8008b64 <vTaskSwitchContext+0xb0>)
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	fab3 f383 	clz	r3, r3
 8008adc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008ade:	7afb      	ldrb	r3, [r7, #11]
 8008ae0:	f1c3 031f 	rsb	r3, r3, #31
 8008ae4:	617b      	str	r3, [r7, #20]
 8008ae6:	4920      	ldr	r1, [pc, #128]	; (8008b68 <vTaskSwitchContext+0xb4>)
 8008ae8:	697a      	ldr	r2, [r7, #20]
 8008aea:	4613      	mov	r3, r2
 8008aec:	009b      	lsls	r3, r3, #2
 8008aee:	4413      	add	r3, r2
 8008af0:	009b      	lsls	r3, r3, #2
 8008af2:	440b      	add	r3, r1
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d109      	bne.n	8008b0e <vTaskSwitchContext+0x5a>
	__asm volatile
 8008afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008afe:	f383 8811 	msr	BASEPRI, r3
 8008b02:	f3bf 8f6f 	isb	sy
 8008b06:	f3bf 8f4f 	dsb	sy
 8008b0a:	607b      	str	r3, [r7, #4]
}
 8008b0c:	bf00      	nop
 8008b0e:	697a      	ldr	r2, [r7, #20]
 8008b10:	4613      	mov	r3, r2
 8008b12:	009b      	lsls	r3, r3, #2
 8008b14:	4413      	add	r3, r2
 8008b16:	009b      	lsls	r3, r3, #2
 8008b18:	4a13      	ldr	r2, [pc, #76]	; (8008b68 <vTaskSwitchContext+0xb4>)
 8008b1a:	4413      	add	r3, r2
 8008b1c:	613b      	str	r3, [r7, #16]
 8008b1e:	693b      	ldr	r3, [r7, #16]
 8008b20:	685b      	ldr	r3, [r3, #4]
 8008b22:	685a      	ldr	r2, [r3, #4]
 8008b24:	693b      	ldr	r3, [r7, #16]
 8008b26:	605a      	str	r2, [r3, #4]
 8008b28:	693b      	ldr	r3, [r7, #16]
 8008b2a:	685a      	ldr	r2, [r3, #4]
 8008b2c:	693b      	ldr	r3, [r7, #16]
 8008b2e:	3308      	adds	r3, #8
 8008b30:	429a      	cmp	r2, r3
 8008b32:	d104      	bne.n	8008b3e <vTaskSwitchContext+0x8a>
 8008b34:	693b      	ldr	r3, [r7, #16]
 8008b36:	685b      	ldr	r3, [r3, #4]
 8008b38:	685a      	ldr	r2, [r3, #4]
 8008b3a:	693b      	ldr	r3, [r7, #16]
 8008b3c:	605a      	str	r2, [r3, #4]
 8008b3e:	693b      	ldr	r3, [r7, #16]
 8008b40:	685b      	ldr	r3, [r3, #4]
 8008b42:	68db      	ldr	r3, [r3, #12]
 8008b44:	4a09      	ldr	r2, [pc, #36]	; (8008b6c <vTaskSwitchContext+0xb8>)
 8008b46:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008b48:	4b08      	ldr	r3, [pc, #32]	; (8008b6c <vTaskSwitchContext+0xb8>)
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	334c      	adds	r3, #76	; 0x4c
 8008b4e:	4a08      	ldr	r2, [pc, #32]	; (8008b70 <vTaskSwitchContext+0xbc>)
 8008b50:	6013      	str	r3, [r2, #0]
}
 8008b52:	bf00      	nop
 8008b54:	371c      	adds	r7, #28
 8008b56:	46bd      	mov	sp, r7
 8008b58:	bc80      	pop	{r7}
 8008b5a:	4770      	bx	lr
 8008b5c:	200050d4 	.word	0x200050d4
 8008b60:	200050c0 	.word	0x200050c0
 8008b64:	200050b4 	.word	0x200050b4
 8008b68:	20004fb0 	.word	0x20004fb0
 8008b6c:	20004fac 	.word	0x20004fac
 8008b70:	2000001c 	.word	0x2000001c

08008b74 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b084      	sub	sp, #16
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
 8008b7c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d109      	bne.n	8008b98 <vTaskPlaceOnEventList+0x24>
	__asm volatile
 8008b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b88:	f383 8811 	msr	BASEPRI, r3
 8008b8c:	f3bf 8f6f 	isb	sy
 8008b90:	f3bf 8f4f 	dsb	sy
 8008b94:	60fb      	str	r3, [r7, #12]
}
 8008b96:	bf00      	nop

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008b98:	4b07      	ldr	r3, [pc, #28]	; (8008bb8 <vTaskPlaceOnEventList+0x44>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	3318      	adds	r3, #24
 8008b9e:	4619      	mov	r1, r3
 8008ba0:	6878      	ldr	r0, [r7, #4]
 8008ba2:	f7fe fc3b 	bl	800741c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008ba6:	2101      	movs	r1, #1
 8008ba8:	6838      	ldr	r0, [r7, #0]
 8008baa:	f000 fb7d 	bl	80092a8 <prvAddCurrentTaskToDelayedList>
}
 8008bae:	bf00      	nop
 8008bb0:	3710      	adds	r7, #16
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}
 8008bb6:	bf00      	nop
 8008bb8:	20004fac 	.word	0x20004fac

08008bbc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b086      	sub	sp, #24
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	68db      	ldr	r3, [r3, #12]
 8008bc8:	68db      	ldr	r3, [r3, #12]
 8008bca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008bcc:	693b      	ldr	r3, [r7, #16]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d109      	bne.n	8008be6 <xTaskRemoveFromEventList+0x2a>
	__asm volatile
 8008bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bd6:	f383 8811 	msr	BASEPRI, r3
 8008bda:	f3bf 8f6f 	isb	sy
 8008bde:	f3bf 8f4f 	dsb	sy
 8008be2:	60fb      	str	r3, [r7, #12]
}
 8008be4:	bf00      	nop
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008be6:	693b      	ldr	r3, [r7, #16]
 8008be8:	3318      	adds	r3, #24
 8008bea:	4618      	mov	r0, r3
 8008bec:	f7fe fc4e 	bl	800748c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008bf0:	4b1d      	ldr	r3, [pc, #116]	; (8008c68 <xTaskRemoveFromEventList+0xac>)
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d11c      	bne.n	8008c32 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008bf8:	693b      	ldr	r3, [r7, #16]
 8008bfa:	3304      	adds	r3, #4
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	f7fe fc45 	bl	800748c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008c02:	693b      	ldr	r3, [r7, #16]
 8008c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c06:	2201      	movs	r2, #1
 8008c08:	409a      	lsls	r2, r3
 8008c0a:	4b18      	ldr	r3, [pc, #96]	; (8008c6c <xTaskRemoveFromEventList+0xb0>)
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	4313      	orrs	r3, r2
 8008c10:	4a16      	ldr	r2, [pc, #88]	; (8008c6c <xTaskRemoveFromEventList+0xb0>)
 8008c12:	6013      	str	r3, [r2, #0]
 8008c14:	693b      	ldr	r3, [r7, #16]
 8008c16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c18:	4613      	mov	r3, r2
 8008c1a:	009b      	lsls	r3, r3, #2
 8008c1c:	4413      	add	r3, r2
 8008c1e:	009b      	lsls	r3, r3, #2
 8008c20:	4a13      	ldr	r2, [pc, #76]	; (8008c70 <xTaskRemoveFromEventList+0xb4>)
 8008c22:	441a      	add	r2, r3
 8008c24:	693b      	ldr	r3, [r7, #16]
 8008c26:	3304      	adds	r3, #4
 8008c28:	4619      	mov	r1, r3
 8008c2a:	4610      	mov	r0, r2
 8008c2c:	f7fe fbd3 	bl	80073d6 <vListInsertEnd>
 8008c30:	e005      	b.n	8008c3e <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008c32:	693b      	ldr	r3, [r7, #16]
 8008c34:	3318      	adds	r3, #24
 8008c36:	4619      	mov	r1, r3
 8008c38:	480e      	ldr	r0, [pc, #56]	; (8008c74 <xTaskRemoveFromEventList+0xb8>)
 8008c3a:	f7fe fbcc 	bl	80073d6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008c3e:	693b      	ldr	r3, [r7, #16]
 8008c40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c42:	4b0d      	ldr	r3, [pc, #52]	; (8008c78 <xTaskRemoveFromEventList+0xbc>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c48:	429a      	cmp	r2, r3
 8008c4a:	d905      	bls.n	8008c58 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008c4c:	2301      	movs	r3, #1
 8008c4e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008c50:	4b0a      	ldr	r3, [pc, #40]	; (8008c7c <xTaskRemoveFromEventList+0xc0>)
 8008c52:	2201      	movs	r2, #1
 8008c54:	601a      	str	r2, [r3, #0]
 8008c56:	e001      	b.n	8008c5c <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8008c58:	2300      	movs	r3, #0
 8008c5a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008c5c:	697b      	ldr	r3, [r7, #20]
}
 8008c5e:	4618      	mov	r0, r3
 8008c60:	3718      	adds	r7, #24
 8008c62:	46bd      	mov	sp, r7
 8008c64:	bd80      	pop	{r7, pc}
 8008c66:	bf00      	nop
 8008c68:	200050d4 	.word	0x200050d4
 8008c6c:	200050b4 	.word	0x200050b4
 8008c70:	20004fb0 	.word	0x20004fb0
 8008c74:	2000506c 	.word	0x2000506c
 8008c78:	20004fac 	.word	0x20004fac
 8008c7c:	200050c0 	.word	0x200050c0

08008c80 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008c80:	b480      	push	{r7}
 8008c82:	b083      	sub	sp, #12
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008c88:	4b06      	ldr	r3, [pc, #24]	; (8008ca4 <vTaskInternalSetTimeOutState+0x24>)
 8008c8a:	681a      	ldr	r2, [r3, #0]
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008c90:	4b05      	ldr	r3, [pc, #20]	; (8008ca8 <vTaskInternalSetTimeOutState+0x28>)
 8008c92:	681a      	ldr	r2, [r3, #0]
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	605a      	str	r2, [r3, #4]
}
 8008c98:	bf00      	nop
 8008c9a:	370c      	adds	r7, #12
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	bc80      	pop	{r7}
 8008ca0:	4770      	bx	lr
 8008ca2:	bf00      	nop
 8008ca4:	200050c4 	.word	0x200050c4
 8008ca8:	200050b0 	.word	0x200050b0

08008cac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b088      	sub	sp, #32
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
 8008cb4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d109      	bne.n	8008cd0 <xTaskCheckForTimeOut+0x24>
	__asm volatile
 8008cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cc0:	f383 8811 	msr	BASEPRI, r3
 8008cc4:	f3bf 8f6f 	isb	sy
 8008cc8:	f3bf 8f4f 	dsb	sy
 8008ccc:	613b      	str	r3, [r7, #16]
}
 8008cce:	bf00      	nop
	configASSERT( pxTicksToWait );
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d109      	bne.n	8008cea <xTaskCheckForTimeOut+0x3e>
	__asm volatile
 8008cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cda:	f383 8811 	msr	BASEPRI, r3
 8008cde:	f3bf 8f6f 	isb	sy
 8008ce2:	f3bf 8f4f 	dsb	sy
 8008ce6:	60fb      	str	r3, [r7, #12]
}
 8008ce8:	bf00      	nop

	taskENTER_CRITICAL();
 8008cea:	f000 fc2d 	bl	8009548 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008cee:	4b1d      	ldr	r3, [pc, #116]	; (8008d64 <xTaskCheckForTimeOut+0xb8>)
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	685b      	ldr	r3, [r3, #4]
 8008cf8:	69ba      	ldr	r2, [r7, #24]
 8008cfa:	1ad3      	subs	r3, r2, r3
 8008cfc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d06:	d102      	bne.n	8008d0e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008d08:	2300      	movs	r3, #0
 8008d0a:	61fb      	str	r3, [r7, #28]
 8008d0c:	e023      	b.n	8008d56 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681a      	ldr	r2, [r3, #0]
 8008d12:	4b15      	ldr	r3, [pc, #84]	; (8008d68 <xTaskCheckForTimeOut+0xbc>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	429a      	cmp	r2, r3
 8008d18:	d007      	beq.n	8008d2a <xTaskCheckForTimeOut+0x7e>
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	685b      	ldr	r3, [r3, #4]
 8008d1e:	69ba      	ldr	r2, [r7, #24]
 8008d20:	429a      	cmp	r2, r3
 8008d22:	d302      	bcc.n	8008d2a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008d24:	2301      	movs	r3, #1
 8008d26:	61fb      	str	r3, [r7, #28]
 8008d28:	e015      	b.n	8008d56 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	697a      	ldr	r2, [r7, #20]
 8008d30:	429a      	cmp	r2, r3
 8008d32:	d20b      	bcs.n	8008d4c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	681a      	ldr	r2, [r3, #0]
 8008d38:	697b      	ldr	r3, [r7, #20]
 8008d3a:	1ad2      	subs	r2, r2, r3
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	f7ff ff9d 	bl	8008c80 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008d46:	2300      	movs	r3, #0
 8008d48:	61fb      	str	r3, [r7, #28]
 8008d4a:	e004      	b.n	8008d56 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	2200      	movs	r2, #0
 8008d50:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008d52:	2301      	movs	r3, #1
 8008d54:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008d56:	f000 fc25 	bl	80095a4 <vPortExitCritical>

	return xReturn;
 8008d5a:	69fb      	ldr	r3, [r7, #28]
}
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	3720      	adds	r7, #32
 8008d60:	46bd      	mov	sp, r7
 8008d62:	bd80      	pop	{r7, pc}
 8008d64:	200050b0 	.word	0x200050b0
 8008d68:	200050c4 	.word	0x200050c4

08008d6c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008d6c:	b480      	push	{r7}
 8008d6e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008d70:	4b03      	ldr	r3, [pc, #12]	; (8008d80 <vTaskMissedYield+0x14>)
 8008d72:	2201      	movs	r2, #1
 8008d74:	601a      	str	r2, [r3, #0]
}
 8008d76:	bf00      	nop
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	bc80      	pop	{r7}
 8008d7c:	4770      	bx	lr
 8008d7e:	bf00      	nop
 8008d80:	200050c0 	.word	0x200050c0

08008d84 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b082      	sub	sp, #8
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008d8c:	f000 f852 	bl	8008e34 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008d90:	4b06      	ldr	r3, [pc, #24]	; (8008dac <prvIdleTask+0x28>)
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	2b01      	cmp	r3, #1
 8008d96:	d9f9      	bls.n	8008d8c <prvIdleTask+0x8>
			{
				taskYIELD();
 8008d98:	4b05      	ldr	r3, [pc, #20]	; (8008db0 <prvIdleTask+0x2c>)
 8008d9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d9e:	601a      	str	r2, [r3, #0]
 8008da0:	f3bf 8f4f 	dsb	sy
 8008da4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008da8:	e7f0      	b.n	8008d8c <prvIdleTask+0x8>
 8008daa:	bf00      	nop
 8008dac:	20004fb0 	.word	0x20004fb0
 8008db0:	e000ed04 	.word	0xe000ed04

08008db4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b082      	sub	sp, #8
 8008db8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008dba:	2300      	movs	r3, #0
 8008dbc:	607b      	str	r3, [r7, #4]
 8008dbe:	e00c      	b.n	8008dda <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008dc0:	687a      	ldr	r2, [r7, #4]
 8008dc2:	4613      	mov	r3, r2
 8008dc4:	009b      	lsls	r3, r3, #2
 8008dc6:	4413      	add	r3, r2
 8008dc8:	009b      	lsls	r3, r3, #2
 8008dca:	4a12      	ldr	r2, [pc, #72]	; (8008e14 <prvInitialiseTaskLists+0x60>)
 8008dcc:	4413      	add	r3, r2
 8008dce:	4618      	mov	r0, r3
 8008dd0:	f7fe fad6 	bl	8007380 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	3301      	adds	r3, #1
 8008dd8:	607b      	str	r3, [r7, #4]
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2b06      	cmp	r3, #6
 8008dde:	d9ef      	bls.n	8008dc0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008de0:	480d      	ldr	r0, [pc, #52]	; (8008e18 <prvInitialiseTaskLists+0x64>)
 8008de2:	f7fe facd 	bl	8007380 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008de6:	480d      	ldr	r0, [pc, #52]	; (8008e1c <prvInitialiseTaskLists+0x68>)
 8008de8:	f7fe faca 	bl	8007380 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008dec:	480c      	ldr	r0, [pc, #48]	; (8008e20 <prvInitialiseTaskLists+0x6c>)
 8008dee:	f7fe fac7 	bl	8007380 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008df2:	480c      	ldr	r0, [pc, #48]	; (8008e24 <prvInitialiseTaskLists+0x70>)
 8008df4:	f7fe fac4 	bl	8007380 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008df8:	480b      	ldr	r0, [pc, #44]	; (8008e28 <prvInitialiseTaskLists+0x74>)
 8008dfa:	f7fe fac1 	bl	8007380 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008dfe:	4b0b      	ldr	r3, [pc, #44]	; (8008e2c <prvInitialiseTaskLists+0x78>)
 8008e00:	4a05      	ldr	r2, [pc, #20]	; (8008e18 <prvInitialiseTaskLists+0x64>)
 8008e02:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008e04:	4b0a      	ldr	r3, [pc, #40]	; (8008e30 <prvInitialiseTaskLists+0x7c>)
 8008e06:	4a05      	ldr	r2, [pc, #20]	; (8008e1c <prvInitialiseTaskLists+0x68>)
 8008e08:	601a      	str	r2, [r3, #0]
}
 8008e0a:	bf00      	nop
 8008e0c:	3708      	adds	r7, #8
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bd80      	pop	{r7, pc}
 8008e12:	bf00      	nop
 8008e14:	20004fb0 	.word	0x20004fb0
 8008e18:	2000503c 	.word	0x2000503c
 8008e1c:	20005050 	.word	0x20005050
 8008e20:	2000506c 	.word	0x2000506c
 8008e24:	20005080 	.word	0x20005080
 8008e28:	20005098 	.word	0x20005098
 8008e2c:	20005064 	.word	0x20005064
 8008e30:	20005068 	.word	0x20005068

08008e34 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b082      	sub	sp, #8
 8008e38:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008e3a:	e019      	b.n	8008e70 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008e3c:	f000 fb84 	bl	8009548 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e40:	4b10      	ldr	r3, [pc, #64]	; (8008e84 <prvCheckTasksWaitingTermination+0x50>)
 8008e42:	68db      	ldr	r3, [r3, #12]
 8008e44:	68db      	ldr	r3, [r3, #12]
 8008e46:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	3304      	adds	r3, #4
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	f7fe fb1d 	bl	800748c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008e52:	4b0d      	ldr	r3, [pc, #52]	; (8008e88 <prvCheckTasksWaitingTermination+0x54>)
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	3b01      	subs	r3, #1
 8008e58:	4a0b      	ldr	r2, [pc, #44]	; (8008e88 <prvCheckTasksWaitingTermination+0x54>)
 8008e5a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008e5c:	4b0b      	ldr	r3, [pc, #44]	; (8008e8c <prvCheckTasksWaitingTermination+0x58>)
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	3b01      	subs	r3, #1
 8008e62:	4a0a      	ldr	r2, [pc, #40]	; (8008e8c <prvCheckTasksWaitingTermination+0x58>)
 8008e64:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008e66:	f000 fb9d 	bl	80095a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008e6a:	6878      	ldr	r0, [r7, #4]
 8008e6c:	f000 f810 	bl	8008e90 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008e70:	4b06      	ldr	r3, [pc, #24]	; (8008e8c <prvCheckTasksWaitingTermination+0x58>)
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d1e1      	bne.n	8008e3c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008e78:	bf00      	nop
 8008e7a:	bf00      	nop
 8008e7c:	3708      	adds	r7, #8
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bd80      	pop	{r7, pc}
 8008e82:	bf00      	nop
 8008e84:	20005080 	.word	0x20005080
 8008e88:	200050ac 	.word	0x200050ac
 8008e8c:	20005094 	.word	0x20005094

08008e90 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b084      	sub	sp, #16
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	334c      	adds	r3, #76	; 0x4c
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	f00d ff53 	bl	8016d48 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d108      	bne.n	8008ebe <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	f000 fd11 	bl	80098d8 <vPortFree>
				vPortFree( pxTCB );
 8008eb6:	6878      	ldr	r0, [r7, #4]
 8008eb8:	f000 fd0e 	bl	80098d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008ebc:	e017      	b.n	8008eee <prvDeleteTCB+0x5e>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8008ec4:	2b01      	cmp	r3, #1
 8008ec6:	d103      	bne.n	8008ed0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008ec8:	6878      	ldr	r0, [r7, #4]
 8008eca:	f000 fd05 	bl	80098d8 <vPortFree>
	}
 8008ece:	e00e      	b.n	8008eee <prvDeleteTCB+0x5e>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8008ed6:	2b02      	cmp	r3, #2
 8008ed8:	d009      	beq.n	8008eee <prvDeleteTCB+0x5e>
	__asm volatile
 8008eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ede:	f383 8811 	msr	BASEPRI, r3
 8008ee2:	f3bf 8f6f 	isb	sy
 8008ee6:	f3bf 8f4f 	dsb	sy
 8008eea:	60fb      	str	r3, [r7, #12]
}
 8008eec:	bf00      	nop
	}
 8008eee:	bf00      	nop
 8008ef0:	3710      	adds	r7, #16
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	bd80      	pop	{r7, pc}
	...

08008ef8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008ef8:	b480      	push	{r7}
 8008efa:	b083      	sub	sp, #12
 8008efc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008efe:	4b0c      	ldr	r3, [pc, #48]	; (8008f30 <prvResetNextTaskUnblockTime+0x38>)
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d104      	bne.n	8008f12 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008f08:	4b0a      	ldr	r3, [pc, #40]	; (8008f34 <prvResetNextTaskUnblockTime+0x3c>)
 8008f0a:	f04f 32ff 	mov.w	r2, #4294967295
 8008f0e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008f10:	e008      	b.n	8008f24 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f12:	4b07      	ldr	r3, [pc, #28]	; (8008f30 <prvResetNextTaskUnblockTime+0x38>)
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	68db      	ldr	r3, [r3, #12]
 8008f18:	68db      	ldr	r3, [r3, #12]
 8008f1a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	685b      	ldr	r3, [r3, #4]
 8008f20:	4a04      	ldr	r2, [pc, #16]	; (8008f34 <prvResetNextTaskUnblockTime+0x3c>)
 8008f22:	6013      	str	r3, [r2, #0]
}
 8008f24:	bf00      	nop
 8008f26:	370c      	adds	r7, #12
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	bc80      	pop	{r7}
 8008f2c:	4770      	bx	lr
 8008f2e:	bf00      	nop
 8008f30:	20005064 	.word	0x20005064
 8008f34:	200050cc 	.word	0x200050cc

08008f38 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008f38:	b480      	push	{r7}
 8008f3a:	b083      	sub	sp, #12
 8008f3c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008f3e:	4b0b      	ldr	r3, [pc, #44]	; (8008f6c <xTaskGetSchedulerState+0x34>)
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d102      	bne.n	8008f4c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008f46:	2301      	movs	r3, #1
 8008f48:	607b      	str	r3, [r7, #4]
 8008f4a:	e008      	b.n	8008f5e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008f4c:	4b08      	ldr	r3, [pc, #32]	; (8008f70 <xTaskGetSchedulerState+0x38>)
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d102      	bne.n	8008f5a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008f54:	2302      	movs	r3, #2
 8008f56:	607b      	str	r3, [r7, #4]
 8008f58:	e001      	b.n	8008f5e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008f5e:	687b      	ldr	r3, [r7, #4]
	}
 8008f60:	4618      	mov	r0, r3
 8008f62:	370c      	adds	r7, #12
 8008f64:	46bd      	mov	sp, r7
 8008f66:	bc80      	pop	{r7}
 8008f68:	4770      	bx	lr
 8008f6a:	bf00      	nop
 8008f6c:	200050b8 	.word	0x200050b8
 8008f70:	200050d4 	.word	0x200050d4

08008f74 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b084      	sub	sp, #16
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008f80:	2300      	movs	r3, #0
 8008f82:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d05e      	beq.n	8009048 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008f8a:	68bb      	ldr	r3, [r7, #8]
 8008f8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f8e:	4b31      	ldr	r3, [pc, #196]	; (8009054 <xTaskPriorityInherit+0xe0>)
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f94:	429a      	cmp	r2, r3
 8008f96:	d24e      	bcs.n	8009036 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	699b      	ldr	r3, [r3, #24]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	db06      	blt.n	8008fae <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008fa0:	4b2c      	ldr	r3, [pc, #176]	; (8009054 <xTaskPriorityInherit+0xe0>)
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fa6:	f1c3 0207 	rsb	r2, r3, #7
 8008faa:	68bb      	ldr	r3, [r7, #8]
 8008fac:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008fae:	68bb      	ldr	r3, [r7, #8]
 8008fb0:	6959      	ldr	r1, [r3, #20]
 8008fb2:	68bb      	ldr	r3, [r7, #8]
 8008fb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fb6:	4613      	mov	r3, r2
 8008fb8:	009b      	lsls	r3, r3, #2
 8008fba:	4413      	add	r3, r2
 8008fbc:	009b      	lsls	r3, r3, #2
 8008fbe:	4a26      	ldr	r2, [pc, #152]	; (8009058 <xTaskPriorityInherit+0xe4>)
 8008fc0:	4413      	add	r3, r2
 8008fc2:	4299      	cmp	r1, r3
 8008fc4:	d12f      	bne.n	8009026 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008fc6:	68bb      	ldr	r3, [r7, #8]
 8008fc8:	3304      	adds	r3, #4
 8008fca:	4618      	mov	r0, r3
 8008fcc:	f7fe fa5e 	bl	800748c <uxListRemove>
 8008fd0:	4603      	mov	r3, r0
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d10a      	bne.n	8008fec <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8008fd6:	68bb      	ldr	r3, [r7, #8]
 8008fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fda:	2201      	movs	r2, #1
 8008fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8008fe0:	43da      	mvns	r2, r3
 8008fe2:	4b1e      	ldr	r3, [pc, #120]	; (800905c <xTaskPriorityInherit+0xe8>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	4013      	ands	r3, r2
 8008fe8:	4a1c      	ldr	r2, [pc, #112]	; (800905c <xTaskPriorityInherit+0xe8>)
 8008fea:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008fec:	4b19      	ldr	r3, [pc, #100]	; (8009054 <xTaskPriorityInherit+0xe0>)
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ff2:	68bb      	ldr	r3, [r7, #8]
 8008ff4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008ff6:	68bb      	ldr	r3, [r7, #8]
 8008ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ffa:	2201      	movs	r2, #1
 8008ffc:	409a      	lsls	r2, r3
 8008ffe:	4b17      	ldr	r3, [pc, #92]	; (800905c <xTaskPriorityInherit+0xe8>)
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	4313      	orrs	r3, r2
 8009004:	4a15      	ldr	r2, [pc, #84]	; (800905c <xTaskPriorityInherit+0xe8>)
 8009006:	6013      	str	r3, [r2, #0]
 8009008:	68bb      	ldr	r3, [r7, #8]
 800900a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800900c:	4613      	mov	r3, r2
 800900e:	009b      	lsls	r3, r3, #2
 8009010:	4413      	add	r3, r2
 8009012:	009b      	lsls	r3, r3, #2
 8009014:	4a10      	ldr	r2, [pc, #64]	; (8009058 <xTaskPriorityInherit+0xe4>)
 8009016:	441a      	add	r2, r3
 8009018:	68bb      	ldr	r3, [r7, #8]
 800901a:	3304      	adds	r3, #4
 800901c:	4619      	mov	r1, r3
 800901e:	4610      	mov	r0, r2
 8009020:	f7fe f9d9 	bl	80073d6 <vListInsertEnd>
 8009024:	e004      	b.n	8009030 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009026:	4b0b      	ldr	r3, [pc, #44]	; (8009054 <xTaskPriorityInherit+0xe0>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800902c:	68bb      	ldr	r3, [r7, #8]
 800902e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009030:	2301      	movs	r3, #1
 8009032:	60fb      	str	r3, [r7, #12]
 8009034:	e008      	b.n	8009048 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009036:	68bb      	ldr	r3, [r7, #8]
 8009038:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800903a:	4b06      	ldr	r3, [pc, #24]	; (8009054 <xTaskPriorityInherit+0xe0>)
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009040:	429a      	cmp	r2, r3
 8009042:	d201      	bcs.n	8009048 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009044:	2301      	movs	r3, #1
 8009046:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009048:	68fb      	ldr	r3, [r7, #12]
	}
 800904a:	4618      	mov	r0, r3
 800904c:	3710      	adds	r7, #16
 800904e:	46bd      	mov	sp, r7
 8009050:	bd80      	pop	{r7, pc}
 8009052:	bf00      	nop
 8009054:	20004fac 	.word	0x20004fac
 8009058:	20004fb0 	.word	0x20004fb0
 800905c:	200050b4 	.word	0x200050b4

08009060 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009060:	b580      	push	{r7, lr}
 8009062:	b086      	sub	sp, #24
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800906c:	2300      	movs	r3, #0
 800906e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d06c      	beq.n	8009150 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009076:	4b39      	ldr	r3, [pc, #228]	; (800915c <xTaskPriorityDisinherit+0xfc>)
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	693a      	ldr	r2, [r7, #16]
 800907c:	429a      	cmp	r2, r3
 800907e:	d009      	beq.n	8009094 <xTaskPriorityDisinherit+0x34>
	__asm volatile
 8009080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009084:	f383 8811 	msr	BASEPRI, r3
 8009088:	f3bf 8f6f 	isb	sy
 800908c:	f3bf 8f4f 	dsb	sy
 8009090:	60fb      	str	r3, [r7, #12]
}
 8009092:	bf00      	nop
			configASSERT( pxTCB->uxMutexesHeld );
 8009094:	693b      	ldr	r3, [r7, #16]
 8009096:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009098:	2b00      	cmp	r3, #0
 800909a:	d109      	bne.n	80090b0 <xTaskPriorityDisinherit+0x50>
	__asm volatile
 800909c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090a0:	f383 8811 	msr	BASEPRI, r3
 80090a4:	f3bf 8f6f 	isb	sy
 80090a8:	f3bf 8f4f 	dsb	sy
 80090ac:	60bb      	str	r3, [r7, #8]
}
 80090ae:	bf00      	nop
			( pxTCB->uxMutexesHeld )--;
 80090b0:	693b      	ldr	r3, [r7, #16]
 80090b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80090b4:	1e5a      	subs	r2, r3, #1
 80090b6:	693b      	ldr	r3, [r7, #16]
 80090b8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80090ba:	693b      	ldr	r3, [r7, #16]
 80090bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090be:	693b      	ldr	r3, [r7, #16]
 80090c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090c2:	429a      	cmp	r2, r3
 80090c4:	d044      	beq.n	8009150 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80090c6:	693b      	ldr	r3, [r7, #16]
 80090c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d140      	bne.n	8009150 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80090ce:	693b      	ldr	r3, [r7, #16]
 80090d0:	3304      	adds	r3, #4
 80090d2:	4618      	mov	r0, r3
 80090d4:	f7fe f9da 	bl	800748c <uxListRemove>
 80090d8:	4603      	mov	r3, r0
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d115      	bne.n	800910a <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80090de:	693b      	ldr	r3, [r7, #16]
 80090e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090e2:	491f      	ldr	r1, [pc, #124]	; (8009160 <xTaskPriorityDisinherit+0x100>)
 80090e4:	4613      	mov	r3, r2
 80090e6:	009b      	lsls	r3, r3, #2
 80090e8:	4413      	add	r3, r2
 80090ea:	009b      	lsls	r3, r3, #2
 80090ec:	440b      	add	r3, r1
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d10a      	bne.n	800910a <xTaskPriorityDisinherit+0xaa>
 80090f4:	693b      	ldr	r3, [r7, #16]
 80090f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090f8:	2201      	movs	r2, #1
 80090fa:	fa02 f303 	lsl.w	r3, r2, r3
 80090fe:	43da      	mvns	r2, r3
 8009100:	4b18      	ldr	r3, [pc, #96]	; (8009164 <xTaskPriorityDisinherit+0x104>)
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	4013      	ands	r3, r2
 8009106:	4a17      	ldr	r2, [pc, #92]	; (8009164 <xTaskPriorityDisinherit+0x104>)
 8009108:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800910a:	693b      	ldr	r3, [r7, #16]
 800910c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800910e:	693b      	ldr	r3, [r7, #16]
 8009110:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009112:	693b      	ldr	r3, [r7, #16]
 8009114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009116:	f1c3 0207 	rsb	r2, r3, #7
 800911a:	693b      	ldr	r3, [r7, #16]
 800911c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800911e:	693b      	ldr	r3, [r7, #16]
 8009120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009122:	2201      	movs	r2, #1
 8009124:	409a      	lsls	r2, r3
 8009126:	4b0f      	ldr	r3, [pc, #60]	; (8009164 <xTaskPriorityDisinherit+0x104>)
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	4313      	orrs	r3, r2
 800912c:	4a0d      	ldr	r2, [pc, #52]	; (8009164 <xTaskPriorityDisinherit+0x104>)
 800912e:	6013      	str	r3, [r2, #0]
 8009130:	693b      	ldr	r3, [r7, #16]
 8009132:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009134:	4613      	mov	r3, r2
 8009136:	009b      	lsls	r3, r3, #2
 8009138:	4413      	add	r3, r2
 800913a:	009b      	lsls	r3, r3, #2
 800913c:	4a08      	ldr	r2, [pc, #32]	; (8009160 <xTaskPriorityDisinherit+0x100>)
 800913e:	441a      	add	r2, r3
 8009140:	693b      	ldr	r3, [r7, #16]
 8009142:	3304      	adds	r3, #4
 8009144:	4619      	mov	r1, r3
 8009146:	4610      	mov	r0, r2
 8009148:	f7fe f945 	bl	80073d6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800914c:	2301      	movs	r3, #1
 800914e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009150:	697b      	ldr	r3, [r7, #20]
	}
 8009152:	4618      	mov	r0, r3
 8009154:	3718      	adds	r7, #24
 8009156:	46bd      	mov	sp, r7
 8009158:	bd80      	pop	{r7, pc}
 800915a:	bf00      	nop
 800915c:	20004fac 	.word	0x20004fac
 8009160:	20004fb0 	.word	0x20004fb0
 8009164:	200050b4 	.word	0x200050b4

08009168 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009168:	b580      	push	{r7, lr}
 800916a:	b088      	sub	sp, #32
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
 8009170:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009176:	2301      	movs	r3, #1
 8009178:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d075      	beq.n	800926c <vTaskPriorityDisinheritAfterTimeout+0x104>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009180:	69bb      	ldr	r3, [r7, #24]
 8009182:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009184:	2b00      	cmp	r3, #0
 8009186:	d109      	bne.n	800919c <vTaskPriorityDisinheritAfterTimeout+0x34>
	__asm volatile
 8009188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800918c:	f383 8811 	msr	BASEPRI, r3
 8009190:	f3bf 8f6f 	isb	sy
 8009194:	f3bf 8f4f 	dsb	sy
 8009198:	60fb      	str	r3, [r7, #12]
}
 800919a:	bf00      	nop

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800919c:	69bb      	ldr	r3, [r7, #24]
 800919e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091a0:	683a      	ldr	r2, [r7, #0]
 80091a2:	429a      	cmp	r2, r3
 80091a4:	d902      	bls.n	80091ac <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80091a6:	683b      	ldr	r3, [r7, #0]
 80091a8:	61fb      	str	r3, [r7, #28]
 80091aa:	e002      	b.n	80091b2 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80091ac:	69bb      	ldr	r3, [r7, #24]
 80091ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091b0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80091b2:	69bb      	ldr	r3, [r7, #24]
 80091b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091b6:	69fa      	ldr	r2, [r7, #28]
 80091b8:	429a      	cmp	r2, r3
 80091ba:	d057      	beq.n	800926c <vTaskPriorityDisinheritAfterTimeout+0x104>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80091bc:	69bb      	ldr	r3, [r7, #24]
 80091be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80091c0:	697a      	ldr	r2, [r7, #20]
 80091c2:	429a      	cmp	r2, r3
 80091c4:	d152      	bne.n	800926c <vTaskPriorityDisinheritAfterTimeout+0x104>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80091c6:	4b2b      	ldr	r3, [pc, #172]	; (8009274 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	69ba      	ldr	r2, [r7, #24]
 80091cc:	429a      	cmp	r2, r3
 80091ce:	d109      	bne.n	80091e4 <vTaskPriorityDisinheritAfterTimeout+0x7c>
	__asm volatile
 80091d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091d4:	f383 8811 	msr	BASEPRI, r3
 80091d8:	f3bf 8f6f 	isb	sy
 80091dc:	f3bf 8f4f 	dsb	sy
 80091e0:	60bb      	str	r3, [r7, #8]
}
 80091e2:	bf00      	nop

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80091e4:	69bb      	ldr	r3, [r7, #24]
 80091e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091e8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80091ea:	69bb      	ldr	r3, [r7, #24]
 80091ec:	69fa      	ldr	r2, [r7, #28]
 80091ee:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80091f0:	69bb      	ldr	r3, [r7, #24]
 80091f2:	699b      	ldr	r3, [r3, #24]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	db04      	blt.n	8009202 <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80091f8:	69fb      	ldr	r3, [r7, #28]
 80091fa:	f1c3 0207 	rsb	r2, r3, #7
 80091fe:	69bb      	ldr	r3, [r7, #24]
 8009200:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009202:	69bb      	ldr	r3, [r7, #24]
 8009204:	6959      	ldr	r1, [r3, #20]
 8009206:	693a      	ldr	r2, [r7, #16]
 8009208:	4613      	mov	r3, r2
 800920a:	009b      	lsls	r3, r3, #2
 800920c:	4413      	add	r3, r2
 800920e:	009b      	lsls	r3, r3, #2
 8009210:	4a19      	ldr	r2, [pc, #100]	; (8009278 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8009212:	4413      	add	r3, r2
 8009214:	4299      	cmp	r1, r3
 8009216:	d129      	bne.n	800926c <vTaskPriorityDisinheritAfterTimeout+0x104>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009218:	69bb      	ldr	r3, [r7, #24]
 800921a:	3304      	adds	r3, #4
 800921c:	4618      	mov	r0, r3
 800921e:	f7fe f935 	bl	800748c <uxListRemove>
 8009222:	4603      	mov	r3, r0
 8009224:	2b00      	cmp	r3, #0
 8009226:	d10a      	bne.n	800923e <vTaskPriorityDisinheritAfterTimeout+0xd6>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8009228:	69bb      	ldr	r3, [r7, #24]
 800922a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800922c:	2201      	movs	r2, #1
 800922e:	fa02 f303 	lsl.w	r3, r2, r3
 8009232:	43da      	mvns	r2, r3
 8009234:	4b11      	ldr	r3, [pc, #68]	; (800927c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	4013      	ands	r3, r2
 800923a:	4a10      	ldr	r2, [pc, #64]	; (800927c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800923c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800923e:	69bb      	ldr	r3, [r7, #24]
 8009240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009242:	2201      	movs	r2, #1
 8009244:	409a      	lsls	r2, r3
 8009246:	4b0d      	ldr	r3, [pc, #52]	; (800927c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	4313      	orrs	r3, r2
 800924c:	4a0b      	ldr	r2, [pc, #44]	; (800927c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800924e:	6013      	str	r3, [r2, #0]
 8009250:	69bb      	ldr	r3, [r7, #24]
 8009252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009254:	4613      	mov	r3, r2
 8009256:	009b      	lsls	r3, r3, #2
 8009258:	4413      	add	r3, r2
 800925a:	009b      	lsls	r3, r3, #2
 800925c:	4a06      	ldr	r2, [pc, #24]	; (8009278 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800925e:	441a      	add	r2, r3
 8009260:	69bb      	ldr	r3, [r7, #24]
 8009262:	3304      	adds	r3, #4
 8009264:	4619      	mov	r1, r3
 8009266:	4610      	mov	r0, r2
 8009268:	f7fe f8b5 	bl	80073d6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800926c:	bf00      	nop
 800926e:	3720      	adds	r7, #32
 8009270:	46bd      	mov	sp, r7
 8009272:	bd80      	pop	{r7, pc}
 8009274:	20004fac 	.word	0x20004fac
 8009278:	20004fb0 	.word	0x20004fb0
 800927c:	200050b4 	.word	0x200050b4

08009280 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009280:	b480      	push	{r7}
 8009282:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009284:	4b07      	ldr	r3, [pc, #28]	; (80092a4 <pvTaskIncrementMutexHeldCount+0x24>)
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d004      	beq.n	8009296 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800928c:	4b05      	ldr	r3, [pc, #20]	; (80092a4 <pvTaskIncrementMutexHeldCount+0x24>)
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009292:	3201      	adds	r2, #1
 8009294:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8009296:	4b03      	ldr	r3, [pc, #12]	; (80092a4 <pvTaskIncrementMutexHeldCount+0x24>)
 8009298:	681b      	ldr	r3, [r3, #0]
	}
 800929a:	4618      	mov	r0, r3
 800929c:	46bd      	mov	sp, r7
 800929e:	bc80      	pop	{r7}
 80092a0:	4770      	bx	lr
 80092a2:	bf00      	nop
 80092a4:	20004fac 	.word	0x20004fac

080092a8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b084      	sub	sp, #16
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
 80092b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80092b2:	4b29      	ldr	r3, [pc, #164]	; (8009358 <prvAddCurrentTaskToDelayedList+0xb0>)
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80092b8:	4b28      	ldr	r3, [pc, #160]	; (800935c <prvAddCurrentTaskToDelayedList+0xb4>)
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	3304      	adds	r3, #4
 80092be:	4618      	mov	r0, r3
 80092c0:	f7fe f8e4 	bl	800748c <uxListRemove>
 80092c4:	4603      	mov	r3, r0
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d10b      	bne.n	80092e2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80092ca:	4b24      	ldr	r3, [pc, #144]	; (800935c <prvAddCurrentTaskToDelayedList+0xb4>)
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092d0:	2201      	movs	r2, #1
 80092d2:	fa02 f303 	lsl.w	r3, r2, r3
 80092d6:	43da      	mvns	r2, r3
 80092d8:	4b21      	ldr	r3, [pc, #132]	; (8009360 <prvAddCurrentTaskToDelayedList+0xb8>)
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	4013      	ands	r3, r2
 80092de:	4a20      	ldr	r2, [pc, #128]	; (8009360 <prvAddCurrentTaskToDelayedList+0xb8>)
 80092e0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092e8:	d10a      	bne.n	8009300 <prvAddCurrentTaskToDelayedList+0x58>
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d007      	beq.n	8009300 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80092f0:	4b1a      	ldr	r3, [pc, #104]	; (800935c <prvAddCurrentTaskToDelayedList+0xb4>)
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	3304      	adds	r3, #4
 80092f6:	4619      	mov	r1, r3
 80092f8:	481a      	ldr	r0, [pc, #104]	; (8009364 <prvAddCurrentTaskToDelayedList+0xbc>)
 80092fa:	f7fe f86c 	bl	80073d6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80092fe:	e026      	b.n	800934e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009300:	68fa      	ldr	r2, [r7, #12]
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	4413      	add	r3, r2
 8009306:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009308:	4b14      	ldr	r3, [pc, #80]	; (800935c <prvAddCurrentTaskToDelayedList+0xb4>)
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	68ba      	ldr	r2, [r7, #8]
 800930e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009310:	68ba      	ldr	r2, [r7, #8]
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	429a      	cmp	r2, r3
 8009316:	d209      	bcs.n	800932c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009318:	4b13      	ldr	r3, [pc, #76]	; (8009368 <prvAddCurrentTaskToDelayedList+0xc0>)
 800931a:	681a      	ldr	r2, [r3, #0]
 800931c:	4b0f      	ldr	r3, [pc, #60]	; (800935c <prvAddCurrentTaskToDelayedList+0xb4>)
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	3304      	adds	r3, #4
 8009322:	4619      	mov	r1, r3
 8009324:	4610      	mov	r0, r2
 8009326:	f7fe f879 	bl	800741c <vListInsert>
}
 800932a:	e010      	b.n	800934e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800932c:	4b0f      	ldr	r3, [pc, #60]	; (800936c <prvAddCurrentTaskToDelayedList+0xc4>)
 800932e:	681a      	ldr	r2, [r3, #0]
 8009330:	4b0a      	ldr	r3, [pc, #40]	; (800935c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	3304      	adds	r3, #4
 8009336:	4619      	mov	r1, r3
 8009338:	4610      	mov	r0, r2
 800933a:	f7fe f86f 	bl	800741c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800933e:	4b0c      	ldr	r3, [pc, #48]	; (8009370 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	68ba      	ldr	r2, [r7, #8]
 8009344:	429a      	cmp	r2, r3
 8009346:	d202      	bcs.n	800934e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009348:	4a09      	ldr	r2, [pc, #36]	; (8009370 <prvAddCurrentTaskToDelayedList+0xc8>)
 800934a:	68bb      	ldr	r3, [r7, #8]
 800934c:	6013      	str	r3, [r2, #0]
}
 800934e:	bf00      	nop
 8009350:	3710      	adds	r7, #16
 8009352:	46bd      	mov	sp, r7
 8009354:	bd80      	pop	{r7, pc}
 8009356:	bf00      	nop
 8009358:	200050b0 	.word	0x200050b0
 800935c:	20004fac 	.word	0x20004fac
 8009360:	200050b4 	.word	0x200050b4
 8009364:	20005098 	.word	0x20005098
 8009368:	20005068 	.word	0x20005068
 800936c:	20005064 	.word	0x20005064
 8009370:	200050cc 	.word	0x200050cc

08009374 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009374:	b480      	push	{r7}
 8009376:	b085      	sub	sp, #20
 8009378:	af00      	add	r7, sp, #0
 800937a:	60f8      	str	r0, [r7, #12]
 800937c:	60b9      	str	r1, [r7, #8]
 800937e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	3b04      	subs	r3, #4
 8009384:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800938c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	3b04      	subs	r3, #4
 8009392:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009394:	68bb      	ldr	r3, [r7, #8]
 8009396:	f023 0201 	bic.w	r2, r3, #1
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	3b04      	subs	r3, #4
 80093a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80093a4:	4a08      	ldr	r2, [pc, #32]	; (80093c8 <pxPortInitialiseStack+0x54>)
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	3b14      	subs	r3, #20
 80093ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80093b0:	687a      	ldr	r2, [r7, #4]
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	3b20      	subs	r3, #32
 80093ba:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80093bc:	68fb      	ldr	r3, [r7, #12]
}
 80093be:	4618      	mov	r0, r3
 80093c0:	3714      	adds	r7, #20
 80093c2:	46bd      	mov	sp, r7
 80093c4:	bc80      	pop	{r7}
 80093c6:	4770      	bx	lr
 80093c8:	080093cd 	.word	0x080093cd

080093cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80093cc:	b480      	push	{r7}
 80093ce:	b085      	sub	sp, #20
 80093d0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80093d2:	2300      	movs	r3, #0
 80093d4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80093d6:	4b11      	ldr	r3, [pc, #68]	; (800941c <prvTaskExitError+0x50>)
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093de:	d009      	beq.n	80093f4 <prvTaskExitError+0x28>
	__asm volatile
 80093e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093e4:	f383 8811 	msr	BASEPRI, r3
 80093e8:	f3bf 8f6f 	isb	sy
 80093ec:	f3bf 8f4f 	dsb	sy
 80093f0:	60fb      	str	r3, [r7, #12]
}
 80093f2:	bf00      	nop
	__asm volatile
 80093f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093f8:	f383 8811 	msr	BASEPRI, r3
 80093fc:	f3bf 8f6f 	isb	sy
 8009400:	f3bf 8f4f 	dsb	sy
 8009404:	60bb      	str	r3, [r7, #8]
}
 8009406:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009408:	bf00      	nop
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d0fc      	beq.n	800940a <prvTaskExitError+0x3e>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009410:	bf00      	nop
 8009412:	bf00      	nop
 8009414:	3714      	adds	r7, #20
 8009416:	46bd      	mov	sp, r7
 8009418:	bc80      	pop	{r7}
 800941a:	4770      	bx	lr
 800941c:	2000000c 	.word	0x2000000c

08009420 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009420:	4b07      	ldr	r3, [pc, #28]	; (8009440 <pxCurrentTCBConst2>)
 8009422:	6819      	ldr	r1, [r3, #0]
 8009424:	6808      	ldr	r0, [r1, #0]
 8009426:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800942a:	f380 8809 	msr	PSP, r0
 800942e:	f3bf 8f6f 	isb	sy
 8009432:	f04f 0000 	mov.w	r0, #0
 8009436:	f380 8811 	msr	BASEPRI, r0
 800943a:	f04e 0e0d 	orr.w	lr, lr, #13
 800943e:	4770      	bx	lr

08009440 <pxCurrentTCBConst2>:
 8009440:	20004fac 	.word	0x20004fac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009444:	bf00      	nop
 8009446:	bf00      	nop

08009448 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8009448:	4806      	ldr	r0, [pc, #24]	; (8009464 <prvPortStartFirstTask+0x1c>)
 800944a:	6800      	ldr	r0, [r0, #0]
 800944c:	6800      	ldr	r0, [r0, #0]
 800944e:	f380 8808 	msr	MSP, r0
 8009452:	b662      	cpsie	i
 8009454:	b661      	cpsie	f
 8009456:	f3bf 8f4f 	dsb	sy
 800945a:	f3bf 8f6f 	isb	sy
 800945e:	df00      	svc	0
 8009460:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009462:	bf00      	nop
 8009464:	e000ed08 	.word	0xe000ed08

08009468 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b084      	sub	sp, #16
 800946c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800946e:	4b31      	ldr	r3, [pc, #196]	; (8009534 <xPortStartScheduler+0xcc>)
 8009470:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	781b      	ldrb	r3, [r3, #0]
 8009476:	b2db      	uxtb	r3, r3
 8009478:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	22ff      	movs	r2, #255	; 0xff
 800947e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	781b      	ldrb	r3, [r3, #0]
 8009484:	b2db      	uxtb	r3, r3
 8009486:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009488:	78fb      	ldrb	r3, [r7, #3]
 800948a:	b2db      	uxtb	r3, r3
 800948c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009490:	b2da      	uxtb	r2, r3
 8009492:	4b29      	ldr	r3, [pc, #164]	; (8009538 <xPortStartScheduler+0xd0>)
 8009494:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009496:	4b29      	ldr	r3, [pc, #164]	; (800953c <xPortStartScheduler+0xd4>)
 8009498:	2207      	movs	r2, #7
 800949a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800949c:	e009      	b.n	80094b2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800949e:	4b27      	ldr	r3, [pc, #156]	; (800953c <xPortStartScheduler+0xd4>)
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	3b01      	subs	r3, #1
 80094a4:	4a25      	ldr	r2, [pc, #148]	; (800953c <xPortStartScheduler+0xd4>)
 80094a6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80094a8:	78fb      	ldrb	r3, [r7, #3]
 80094aa:	b2db      	uxtb	r3, r3
 80094ac:	005b      	lsls	r3, r3, #1
 80094ae:	b2db      	uxtb	r3, r3
 80094b0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80094b2:	78fb      	ldrb	r3, [r7, #3]
 80094b4:	b2db      	uxtb	r3, r3
 80094b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094ba:	2b80      	cmp	r3, #128	; 0x80
 80094bc:	d0ef      	beq.n	800949e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80094be:	4b1f      	ldr	r3, [pc, #124]	; (800953c <xPortStartScheduler+0xd4>)
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	f1c3 0307 	rsb	r3, r3, #7
 80094c6:	2b04      	cmp	r3, #4
 80094c8:	d009      	beq.n	80094de <xPortStartScheduler+0x76>
	__asm volatile
 80094ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094ce:	f383 8811 	msr	BASEPRI, r3
 80094d2:	f3bf 8f6f 	isb	sy
 80094d6:	f3bf 8f4f 	dsb	sy
 80094da:	60bb      	str	r3, [r7, #8]
}
 80094dc:	bf00      	nop
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80094de:	4b17      	ldr	r3, [pc, #92]	; (800953c <xPortStartScheduler+0xd4>)
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	021b      	lsls	r3, r3, #8
 80094e4:	4a15      	ldr	r2, [pc, #84]	; (800953c <xPortStartScheduler+0xd4>)
 80094e6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80094e8:	4b14      	ldr	r3, [pc, #80]	; (800953c <xPortStartScheduler+0xd4>)
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80094f0:	4a12      	ldr	r2, [pc, #72]	; (800953c <xPortStartScheduler+0xd4>)
 80094f2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	b2da      	uxtb	r2, r3
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80094fc:	4b10      	ldr	r3, [pc, #64]	; (8009540 <xPortStartScheduler+0xd8>)
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	4a0f      	ldr	r2, [pc, #60]	; (8009540 <xPortStartScheduler+0xd8>)
 8009502:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009506:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009508:	4b0d      	ldr	r3, [pc, #52]	; (8009540 <xPortStartScheduler+0xd8>)
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	4a0c      	ldr	r2, [pc, #48]	; (8009540 <xPortStartScheduler+0xd8>)
 800950e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009512:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009514:	f000 f8ba 	bl	800968c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009518:	4b0a      	ldr	r3, [pc, #40]	; (8009544 <xPortStartScheduler+0xdc>)
 800951a:	2200      	movs	r2, #0
 800951c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800951e:	f7ff ff93 	bl	8009448 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009522:	f7ff fac7 	bl	8008ab4 <vTaskSwitchContext>
	prvTaskExitError();
 8009526:	f7ff ff51 	bl	80093cc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800952a:	2300      	movs	r3, #0
}
 800952c:	4618      	mov	r0, r3
 800952e:	3710      	adds	r7, #16
 8009530:	46bd      	mov	sp, r7
 8009532:	bd80      	pop	{r7, pc}
 8009534:	e000e400 	.word	0xe000e400
 8009538:	200050d8 	.word	0x200050d8
 800953c:	200050dc 	.word	0x200050dc
 8009540:	e000ed20 	.word	0xe000ed20
 8009544:	2000000c 	.word	0x2000000c

08009548 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009548:	b480      	push	{r7}
 800954a:	b083      	sub	sp, #12
 800954c:	af00      	add	r7, sp, #0
	__asm volatile
 800954e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009552:	f383 8811 	msr	BASEPRI, r3
 8009556:	f3bf 8f6f 	isb	sy
 800955a:	f3bf 8f4f 	dsb	sy
 800955e:	607b      	str	r3, [r7, #4]
}
 8009560:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009562:	4b0e      	ldr	r3, [pc, #56]	; (800959c <vPortEnterCritical+0x54>)
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	3301      	adds	r3, #1
 8009568:	4a0c      	ldr	r2, [pc, #48]	; (800959c <vPortEnterCritical+0x54>)
 800956a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800956c:	4b0b      	ldr	r3, [pc, #44]	; (800959c <vPortEnterCritical+0x54>)
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	2b01      	cmp	r3, #1
 8009572:	d10e      	bne.n	8009592 <vPortEnterCritical+0x4a>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009574:	4b0a      	ldr	r3, [pc, #40]	; (80095a0 <vPortEnterCritical+0x58>)
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	b2db      	uxtb	r3, r3
 800957a:	2b00      	cmp	r3, #0
 800957c:	d009      	beq.n	8009592 <vPortEnterCritical+0x4a>
	__asm volatile
 800957e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009582:	f383 8811 	msr	BASEPRI, r3
 8009586:	f3bf 8f6f 	isb	sy
 800958a:	f3bf 8f4f 	dsb	sy
 800958e:	603b      	str	r3, [r7, #0]
}
 8009590:	bf00      	nop
	}
}
 8009592:	bf00      	nop
 8009594:	370c      	adds	r7, #12
 8009596:	46bd      	mov	sp, r7
 8009598:	bc80      	pop	{r7}
 800959a:	4770      	bx	lr
 800959c:	2000000c 	.word	0x2000000c
 80095a0:	e000ed04 	.word	0xe000ed04

080095a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80095a4:	b480      	push	{r7}
 80095a6:	b083      	sub	sp, #12
 80095a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80095aa:	4b11      	ldr	r3, [pc, #68]	; (80095f0 <vPortExitCritical+0x4c>)
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d109      	bne.n	80095c6 <vPortExitCritical+0x22>
	__asm volatile
 80095b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095b6:	f383 8811 	msr	BASEPRI, r3
 80095ba:	f3bf 8f6f 	isb	sy
 80095be:	f3bf 8f4f 	dsb	sy
 80095c2:	607b      	str	r3, [r7, #4]
}
 80095c4:	bf00      	nop
	uxCriticalNesting--;
 80095c6:	4b0a      	ldr	r3, [pc, #40]	; (80095f0 <vPortExitCritical+0x4c>)
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	3b01      	subs	r3, #1
 80095cc:	4a08      	ldr	r2, [pc, #32]	; (80095f0 <vPortExitCritical+0x4c>)
 80095ce:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80095d0:	4b07      	ldr	r3, [pc, #28]	; (80095f0 <vPortExitCritical+0x4c>)
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d105      	bne.n	80095e4 <vPortExitCritical+0x40>
 80095d8:	2300      	movs	r3, #0
 80095da:	603b      	str	r3, [r7, #0]
	__asm volatile
 80095dc:	683b      	ldr	r3, [r7, #0]
 80095de:	f383 8811 	msr	BASEPRI, r3
}
 80095e2:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80095e4:	bf00      	nop
 80095e6:	370c      	adds	r7, #12
 80095e8:	46bd      	mov	sp, r7
 80095ea:	bc80      	pop	{r7}
 80095ec:	4770      	bx	lr
 80095ee:	bf00      	nop
 80095f0:	2000000c 	.word	0x2000000c
	...

08009600 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009600:	f3ef 8009 	mrs	r0, PSP
 8009604:	f3bf 8f6f 	isb	sy
 8009608:	4b0d      	ldr	r3, [pc, #52]	; (8009640 <pxCurrentTCBConst>)
 800960a:	681a      	ldr	r2, [r3, #0]
 800960c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009610:	6010      	str	r0, [r2, #0]
 8009612:	e92d 4008 	stmdb	sp!, {r3, lr}
 8009616:	f04f 0050 	mov.w	r0, #80	; 0x50
 800961a:	f380 8811 	msr	BASEPRI, r0
 800961e:	f7ff fa49 	bl	8008ab4 <vTaskSwitchContext>
 8009622:	f04f 0000 	mov.w	r0, #0
 8009626:	f380 8811 	msr	BASEPRI, r0
 800962a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800962e:	6819      	ldr	r1, [r3, #0]
 8009630:	6808      	ldr	r0, [r1, #0]
 8009632:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009636:	f380 8809 	msr	PSP, r0
 800963a:	f3bf 8f6f 	isb	sy
 800963e:	4770      	bx	lr

08009640 <pxCurrentTCBConst>:
 8009640:	20004fac 	.word	0x20004fac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009644:	bf00      	nop
 8009646:	bf00      	nop

08009648 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b082      	sub	sp, #8
 800964c:	af00      	add	r7, sp, #0
	__asm volatile
 800964e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009652:	f383 8811 	msr	BASEPRI, r3
 8009656:	f3bf 8f6f 	isb	sy
 800965a:	f3bf 8f4f 	dsb	sy
 800965e:	607b      	str	r3, [r7, #4]
}
 8009660:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009662:	f7ff f96f 	bl	8008944 <xTaskIncrementTick>
 8009666:	4603      	mov	r3, r0
 8009668:	2b00      	cmp	r3, #0
 800966a:	d003      	beq.n	8009674 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800966c:	4b06      	ldr	r3, [pc, #24]	; (8009688 <xPortSysTickHandler+0x40>)
 800966e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009672:	601a      	str	r2, [r3, #0]
 8009674:	2300      	movs	r3, #0
 8009676:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	f383 8811 	msr	BASEPRI, r3
}
 800967e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009680:	bf00      	nop
 8009682:	3708      	adds	r7, #8
 8009684:	46bd      	mov	sp, r7
 8009686:	bd80      	pop	{r7, pc}
 8009688:	e000ed04 	.word	0xe000ed04

0800968c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800968c:	b480      	push	{r7}
 800968e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009690:	4b0a      	ldr	r3, [pc, #40]	; (80096bc <vPortSetupTimerInterrupt+0x30>)
 8009692:	2200      	movs	r2, #0
 8009694:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009696:	4b0a      	ldr	r3, [pc, #40]	; (80096c0 <vPortSetupTimerInterrupt+0x34>)
 8009698:	2200      	movs	r2, #0
 800969a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800969c:	4b09      	ldr	r3, [pc, #36]	; (80096c4 <vPortSetupTimerInterrupt+0x38>)
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	4a09      	ldr	r2, [pc, #36]	; (80096c8 <vPortSetupTimerInterrupt+0x3c>)
 80096a2:	fba2 2303 	umull	r2, r3, r2, r3
 80096a6:	099b      	lsrs	r3, r3, #6
 80096a8:	4a08      	ldr	r2, [pc, #32]	; (80096cc <vPortSetupTimerInterrupt+0x40>)
 80096aa:	3b01      	subs	r3, #1
 80096ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80096ae:	4b03      	ldr	r3, [pc, #12]	; (80096bc <vPortSetupTimerInterrupt+0x30>)
 80096b0:	2207      	movs	r2, #7
 80096b2:	601a      	str	r2, [r3, #0]
}
 80096b4:	bf00      	nop
 80096b6:	46bd      	mov	sp, r7
 80096b8:	bc80      	pop	{r7}
 80096ba:	4770      	bx	lr
 80096bc:	e000e010 	.word	0xe000e010
 80096c0:	e000e018 	.word	0xe000e018
 80096c4:	20000000 	.word	0x20000000
 80096c8:	10624dd3 	.word	0x10624dd3
 80096cc:	e000e014 	.word	0xe000e014

080096d0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80096d0:	b480      	push	{r7}
 80096d2:	b085      	sub	sp, #20
 80096d4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80096d6:	f3ef 8305 	mrs	r3, IPSR
 80096da:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	2b0f      	cmp	r3, #15
 80096e0:	d913      	bls.n	800970a <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80096e2:	4a15      	ldr	r2, [pc, #84]	; (8009738 <vPortValidateInterruptPriority+0x68>)
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	4413      	add	r3, r2
 80096e8:	781b      	ldrb	r3, [r3, #0]
 80096ea:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80096ec:	4b13      	ldr	r3, [pc, #76]	; (800973c <vPortValidateInterruptPriority+0x6c>)
 80096ee:	781b      	ldrb	r3, [r3, #0]
 80096f0:	7afa      	ldrb	r2, [r7, #11]
 80096f2:	429a      	cmp	r2, r3
 80096f4:	d209      	bcs.n	800970a <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80096f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096fa:	f383 8811 	msr	BASEPRI, r3
 80096fe:	f3bf 8f6f 	isb	sy
 8009702:	f3bf 8f4f 	dsb	sy
 8009706:	607b      	str	r3, [r7, #4]
}
 8009708:	bf00      	nop
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800970a:	4b0d      	ldr	r3, [pc, #52]	; (8009740 <vPortValidateInterruptPriority+0x70>)
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009712:	4b0c      	ldr	r3, [pc, #48]	; (8009744 <vPortValidateInterruptPriority+0x74>)
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	429a      	cmp	r2, r3
 8009718:	d909      	bls.n	800972e <vPortValidateInterruptPriority+0x5e>
	__asm volatile
 800971a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800971e:	f383 8811 	msr	BASEPRI, r3
 8009722:	f3bf 8f6f 	isb	sy
 8009726:	f3bf 8f4f 	dsb	sy
 800972a:	603b      	str	r3, [r7, #0]
}
 800972c:	bf00      	nop
	}
 800972e:	bf00      	nop
 8009730:	3714      	adds	r7, #20
 8009732:	46bd      	mov	sp, r7
 8009734:	bc80      	pop	{r7}
 8009736:	4770      	bx	lr
 8009738:	e000e3f0 	.word	0xe000e3f0
 800973c:	200050d8 	.word	0x200050d8
 8009740:	e000ed0c 	.word	0xe000ed0c
 8009744:	200050dc 	.word	0x200050dc

08009748 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b08a      	sub	sp, #40	; 0x28
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009750:	2300      	movs	r3, #0
 8009752:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009754:	f7ff f82c 	bl	80087b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009758:	4b59      	ldr	r3, [pc, #356]	; (80098c0 <pvPortMalloc+0x178>)
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d101      	bne.n	8009764 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009760:	f000 f91a 	bl	8009998 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009764:	4b57      	ldr	r3, [pc, #348]	; (80098c4 <pvPortMalloc+0x17c>)
 8009766:	681a      	ldr	r2, [r3, #0]
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	4013      	ands	r3, r2
 800976c:	2b00      	cmp	r3, #0
 800976e:	f040 8091 	bne.w	8009894 <pvPortMalloc+0x14c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d01c      	beq.n	80097b2 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8009778:	2208      	movs	r2, #8
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	4413      	add	r3, r2
 800977e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	f003 0307 	and.w	r3, r3, #7
 8009786:	2b00      	cmp	r3, #0
 8009788:	d013      	beq.n	80097b2 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	f023 0307 	bic.w	r3, r3, #7
 8009790:	3308      	adds	r3, #8
 8009792:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	f003 0307 	and.w	r3, r3, #7
 800979a:	2b00      	cmp	r3, #0
 800979c:	d009      	beq.n	80097b2 <pvPortMalloc+0x6a>
	__asm volatile
 800979e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097a2:	f383 8811 	msr	BASEPRI, r3
 80097a6:	f3bf 8f6f 	isb	sy
 80097aa:	f3bf 8f4f 	dsb	sy
 80097ae:	617b      	str	r3, [r7, #20]
}
 80097b0:	bf00      	nop
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d06d      	beq.n	8009894 <pvPortMalloc+0x14c>
 80097b8:	4b43      	ldr	r3, [pc, #268]	; (80098c8 <pvPortMalloc+0x180>)
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	687a      	ldr	r2, [r7, #4]
 80097be:	429a      	cmp	r2, r3
 80097c0:	d868      	bhi.n	8009894 <pvPortMalloc+0x14c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80097c2:	4b42      	ldr	r3, [pc, #264]	; (80098cc <pvPortMalloc+0x184>)
 80097c4:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80097c6:	4b41      	ldr	r3, [pc, #260]	; (80098cc <pvPortMalloc+0x184>)
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80097cc:	e004      	b.n	80097d8 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80097ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097d0:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80097d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80097d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097da:	685b      	ldr	r3, [r3, #4]
 80097dc:	687a      	ldr	r2, [r7, #4]
 80097de:	429a      	cmp	r2, r3
 80097e0:	d903      	bls.n	80097ea <pvPortMalloc+0xa2>
 80097e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d1f1      	bne.n	80097ce <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80097ea:	4b35      	ldr	r3, [pc, #212]	; (80098c0 <pvPortMalloc+0x178>)
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097f0:	429a      	cmp	r2, r3
 80097f2:	d04f      	beq.n	8009894 <pvPortMalloc+0x14c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80097f4:	6a3b      	ldr	r3, [r7, #32]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	2208      	movs	r2, #8
 80097fa:	4413      	add	r3, r2
 80097fc:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80097fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009800:	681a      	ldr	r2, [r3, #0]
 8009802:	6a3b      	ldr	r3, [r7, #32]
 8009804:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009808:	685a      	ldr	r2, [r3, #4]
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	1ad2      	subs	r2, r2, r3
 800980e:	2308      	movs	r3, #8
 8009810:	005b      	lsls	r3, r3, #1
 8009812:	429a      	cmp	r2, r3
 8009814:	d91e      	bls.n	8009854 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009816:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	4413      	add	r3, r2
 800981c:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800981e:	69bb      	ldr	r3, [r7, #24]
 8009820:	f003 0307 	and.w	r3, r3, #7
 8009824:	2b00      	cmp	r3, #0
 8009826:	d009      	beq.n	800983c <pvPortMalloc+0xf4>
	__asm volatile
 8009828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800982c:	f383 8811 	msr	BASEPRI, r3
 8009830:	f3bf 8f6f 	isb	sy
 8009834:	f3bf 8f4f 	dsb	sy
 8009838:	613b      	str	r3, [r7, #16]
}
 800983a:	bf00      	nop

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800983c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800983e:	685a      	ldr	r2, [r3, #4]
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	1ad2      	subs	r2, r2, r3
 8009844:	69bb      	ldr	r3, [r7, #24]
 8009846:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800984a:	687a      	ldr	r2, [r7, #4]
 800984c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800984e:	69b8      	ldr	r0, [r7, #24]
 8009850:	f000 f904 	bl	8009a5c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009854:	4b1c      	ldr	r3, [pc, #112]	; (80098c8 <pvPortMalloc+0x180>)
 8009856:	681a      	ldr	r2, [r3, #0]
 8009858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800985a:	685b      	ldr	r3, [r3, #4]
 800985c:	1ad3      	subs	r3, r2, r3
 800985e:	4a1a      	ldr	r2, [pc, #104]	; (80098c8 <pvPortMalloc+0x180>)
 8009860:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009862:	4b19      	ldr	r3, [pc, #100]	; (80098c8 <pvPortMalloc+0x180>)
 8009864:	681a      	ldr	r2, [r3, #0]
 8009866:	4b1a      	ldr	r3, [pc, #104]	; (80098d0 <pvPortMalloc+0x188>)
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	429a      	cmp	r2, r3
 800986c:	d203      	bcs.n	8009876 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800986e:	4b16      	ldr	r3, [pc, #88]	; (80098c8 <pvPortMalloc+0x180>)
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	4a17      	ldr	r2, [pc, #92]	; (80098d0 <pvPortMalloc+0x188>)
 8009874:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009878:	685a      	ldr	r2, [r3, #4]
 800987a:	4b12      	ldr	r3, [pc, #72]	; (80098c4 <pvPortMalloc+0x17c>)
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	431a      	orrs	r2, r3
 8009880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009882:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009886:	2200      	movs	r2, #0
 8009888:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800988a:	4b12      	ldr	r3, [pc, #72]	; (80098d4 <pvPortMalloc+0x18c>)
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	3301      	adds	r3, #1
 8009890:	4a10      	ldr	r2, [pc, #64]	; (80098d4 <pvPortMalloc+0x18c>)
 8009892:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009894:	f7fe ff9a 	bl	80087cc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009898:	69fb      	ldr	r3, [r7, #28]
 800989a:	f003 0307 	and.w	r3, r3, #7
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d009      	beq.n	80098b6 <pvPortMalloc+0x16e>
	__asm volatile
 80098a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098a6:	f383 8811 	msr	BASEPRI, r3
 80098aa:	f3bf 8f6f 	isb	sy
 80098ae:	f3bf 8f4f 	dsb	sy
 80098b2:	60fb      	str	r3, [r7, #12]
}
 80098b4:	bf00      	nop
	return pvReturn;
 80098b6:	69fb      	ldr	r3, [r7, #28]
}
 80098b8:	4618      	mov	r0, r3
 80098ba:	3728      	adds	r7, #40	; 0x28
 80098bc:	46bd      	mov	sp, r7
 80098be:	bd80      	pop	{r7, pc}
 80098c0:	20008ce8 	.word	0x20008ce8
 80098c4:	20008cfc 	.word	0x20008cfc
 80098c8:	20008cec 	.word	0x20008cec
 80098cc:	20008ce0 	.word	0x20008ce0
 80098d0:	20008cf0 	.word	0x20008cf0
 80098d4:	20008cf4 	.word	0x20008cf4

080098d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80098d8:	b580      	push	{r7, lr}
 80098da:	b086      	sub	sp, #24
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d04b      	beq.n	8009982 <vPortFree+0xaa>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80098ea:	2308      	movs	r3, #8
 80098ec:	425b      	negs	r3, r3
 80098ee:	697a      	ldr	r2, [r7, #20]
 80098f0:	4413      	add	r3, r2
 80098f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80098f4:	697b      	ldr	r3, [r7, #20]
 80098f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80098f8:	693b      	ldr	r3, [r7, #16]
 80098fa:	685a      	ldr	r2, [r3, #4]
 80098fc:	4b23      	ldr	r3, [pc, #140]	; (800998c <vPortFree+0xb4>)
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	4013      	ands	r3, r2
 8009902:	2b00      	cmp	r3, #0
 8009904:	d109      	bne.n	800991a <vPortFree+0x42>
	__asm volatile
 8009906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800990a:	f383 8811 	msr	BASEPRI, r3
 800990e:	f3bf 8f6f 	isb	sy
 8009912:	f3bf 8f4f 	dsb	sy
 8009916:	60fb      	str	r3, [r7, #12]
}
 8009918:	bf00      	nop
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800991a:	693b      	ldr	r3, [r7, #16]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d009      	beq.n	8009936 <vPortFree+0x5e>
	__asm volatile
 8009922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009926:	f383 8811 	msr	BASEPRI, r3
 800992a:	f3bf 8f6f 	isb	sy
 800992e:	f3bf 8f4f 	dsb	sy
 8009932:	60bb      	str	r3, [r7, #8]
}
 8009934:	bf00      	nop

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009936:	693b      	ldr	r3, [r7, #16]
 8009938:	685a      	ldr	r2, [r3, #4]
 800993a:	4b14      	ldr	r3, [pc, #80]	; (800998c <vPortFree+0xb4>)
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	4013      	ands	r3, r2
 8009940:	2b00      	cmp	r3, #0
 8009942:	d01e      	beq.n	8009982 <vPortFree+0xaa>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009944:	693b      	ldr	r3, [r7, #16]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d11a      	bne.n	8009982 <vPortFree+0xaa>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800994c:	693b      	ldr	r3, [r7, #16]
 800994e:	685a      	ldr	r2, [r3, #4]
 8009950:	4b0e      	ldr	r3, [pc, #56]	; (800998c <vPortFree+0xb4>)
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	43db      	mvns	r3, r3
 8009956:	401a      	ands	r2, r3
 8009958:	693b      	ldr	r3, [r7, #16]
 800995a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800995c:	f7fe ff28 	bl	80087b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009960:	693b      	ldr	r3, [r7, #16]
 8009962:	685a      	ldr	r2, [r3, #4]
 8009964:	4b0a      	ldr	r3, [pc, #40]	; (8009990 <vPortFree+0xb8>)
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	4413      	add	r3, r2
 800996a:	4a09      	ldr	r2, [pc, #36]	; (8009990 <vPortFree+0xb8>)
 800996c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800996e:	6938      	ldr	r0, [r7, #16]
 8009970:	f000 f874 	bl	8009a5c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009974:	4b07      	ldr	r3, [pc, #28]	; (8009994 <vPortFree+0xbc>)
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	3301      	adds	r3, #1
 800997a:	4a06      	ldr	r2, [pc, #24]	; (8009994 <vPortFree+0xbc>)
 800997c:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800997e:	f7fe ff25 	bl	80087cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009982:	bf00      	nop
 8009984:	3718      	adds	r7, #24
 8009986:	46bd      	mov	sp, r7
 8009988:	bd80      	pop	{r7, pc}
 800998a:	bf00      	nop
 800998c:	20008cfc 	.word	0x20008cfc
 8009990:	20008cec 	.word	0x20008cec
 8009994:	20008cf8 	.word	0x20008cf8

08009998 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009998:	b480      	push	{r7}
 800999a:	b085      	sub	sp, #20
 800999c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800999e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80099a2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80099a4:	4b27      	ldr	r3, [pc, #156]	; (8009a44 <prvHeapInit+0xac>)
 80099a6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	f003 0307 	and.w	r3, r3, #7
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d00c      	beq.n	80099cc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	3307      	adds	r3, #7
 80099b6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	f023 0307 	bic.w	r3, r3, #7
 80099be:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80099c0:	68ba      	ldr	r2, [r7, #8]
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	1ad3      	subs	r3, r2, r3
 80099c6:	4a1f      	ldr	r2, [pc, #124]	; (8009a44 <prvHeapInit+0xac>)
 80099c8:	4413      	add	r3, r2
 80099ca:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80099d0:	4a1d      	ldr	r2, [pc, #116]	; (8009a48 <prvHeapInit+0xb0>)
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80099d6:	4b1c      	ldr	r3, [pc, #112]	; (8009a48 <prvHeapInit+0xb0>)
 80099d8:	2200      	movs	r2, #0
 80099da:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	68ba      	ldr	r2, [r7, #8]
 80099e0:	4413      	add	r3, r2
 80099e2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80099e4:	2208      	movs	r2, #8
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	1a9b      	subs	r3, r3, r2
 80099ea:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	f023 0307 	bic.w	r3, r3, #7
 80099f2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	4a15      	ldr	r2, [pc, #84]	; (8009a4c <prvHeapInit+0xb4>)
 80099f8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80099fa:	4b14      	ldr	r3, [pc, #80]	; (8009a4c <prvHeapInit+0xb4>)
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	2200      	movs	r2, #0
 8009a00:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009a02:	4b12      	ldr	r3, [pc, #72]	; (8009a4c <prvHeapInit+0xb4>)
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	2200      	movs	r2, #0
 8009a08:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009a0e:	683b      	ldr	r3, [r7, #0]
 8009a10:	68fa      	ldr	r2, [r7, #12]
 8009a12:	1ad2      	subs	r2, r2, r3
 8009a14:	683b      	ldr	r3, [r7, #0]
 8009a16:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009a18:	4b0c      	ldr	r3, [pc, #48]	; (8009a4c <prvHeapInit+0xb4>)
 8009a1a:	681a      	ldr	r2, [r3, #0]
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	685b      	ldr	r3, [r3, #4]
 8009a24:	4a0a      	ldr	r2, [pc, #40]	; (8009a50 <prvHeapInit+0xb8>)
 8009a26:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	685b      	ldr	r3, [r3, #4]
 8009a2c:	4a09      	ldr	r2, [pc, #36]	; (8009a54 <prvHeapInit+0xbc>)
 8009a2e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009a30:	4b09      	ldr	r3, [pc, #36]	; (8009a58 <prvHeapInit+0xc0>)
 8009a32:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009a36:	601a      	str	r2, [r3, #0]
}
 8009a38:	bf00      	nop
 8009a3a:	3714      	adds	r7, #20
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	bc80      	pop	{r7}
 8009a40:	4770      	bx	lr
 8009a42:	bf00      	nop
 8009a44:	200050e0 	.word	0x200050e0
 8009a48:	20008ce0 	.word	0x20008ce0
 8009a4c:	20008ce8 	.word	0x20008ce8
 8009a50:	20008cf0 	.word	0x20008cf0
 8009a54:	20008cec 	.word	0x20008cec
 8009a58:	20008cfc 	.word	0x20008cfc

08009a5c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009a5c:	b480      	push	{r7}
 8009a5e:	b085      	sub	sp, #20
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009a64:	4b27      	ldr	r3, [pc, #156]	; (8009b04 <prvInsertBlockIntoFreeList+0xa8>)
 8009a66:	60fb      	str	r3, [r7, #12]
 8009a68:	e002      	b.n	8009a70 <prvInsertBlockIntoFreeList+0x14>
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	60fb      	str	r3, [r7, #12]
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	687a      	ldr	r2, [r7, #4]
 8009a76:	429a      	cmp	r2, r3
 8009a78:	d8f7      	bhi.n	8009a6a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	685b      	ldr	r3, [r3, #4]
 8009a82:	68ba      	ldr	r2, [r7, #8]
 8009a84:	4413      	add	r3, r2
 8009a86:	687a      	ldr	r2, [r7, #4]
 8009a88:	429a      	cmp	r2, r3
 8009a8a:	d108      	bne.n	8009a9e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	685a      	ldr	r2, [r3, #4]
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	685b      	ldr	r3, [r3, #4]
 8009a94:	441a      	add	r2, r3
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	685b      	ldr	r3, [r3, #4]
 8009aa6:	68ba      	ldr	r2, [r7, #8]
 8009aa8:	441a      	add	r2, r3
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	429a      	cmp	r2, r3
 8009ab0:	d118      	bne.n	8009ae4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	681a      	ldr	r2, [r3, #0]
 8009ab6:	4b14      	ldr	r3, [pc, #80]	; (8009b08 <prvInsertBlockIntoFreeList+0xac>)
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	429a      	cmp	r2, r3
 8009abc:	d00d      	beq.n	8009ada <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	685a      	ldr	r2, [r3, #4]
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	685b      	ldr	r3, [r3, #4]
 8009ac8:	441a      	add	r2, r3
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	681a      	ldr	r2, [r3, #0]
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	601a      	str	r2, [r3, #0]
 8009ad8:	e008      	b.n	8009aec <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009ada:	4b0b      	ldr	r3, [pc, #44]	; (8009b08 <prvInsertBlockIntoFreeList+0xac>)
 8009adc:	681a      	ldr	r2, [r3, #0]
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	601a      	str	r2, [r3, #0]
 8009ae2:	e003      	b.n	8009aec <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	681a      	ldr	r2, [r3, #0]
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009aec:	68fa      	ldr	r2, [r7, #12]
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	429a      	cmp	r2, r3
 8009af2:	d002      	beq.n	8009afa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	687a      	ldr	r2, [r7, #4]
 8009af8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009afa:	bf00      	nop
 8009afc:	3714      	adds	r7, #20
 8009afe:	46bd      	mov	sp, r7
 8009b00:	bc80      	pop	{r7}
 8009b02:	4770      	bx	lr
 8009b04:	20008ce0 	.word	0x20008ce0
 8009b08:	20008ce8 	.word	0x20008ce8

08009b0c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b084      	sub	sp, #16
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
 8009b14:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8009b16:	f009 fd6b 	bl	80135f0 <sys_timeouts_sleeptime>
 8009b1a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b22:	d10b      	bne.n	8009b3c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8009b24:	4813      	ldr	r0, [pc, #76]	; (8009b74 <tcpip_timeouts_mbox_fetch+0x68>)
 8009b26:	f00c fb00 	bl	801612a <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	6839      	ldr	r1, [r7, #0]
 8009b2e:	6878      	ldr	r0, [r7, #4]
 8009b30:	f00c fa72 	bl	8016018 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8009b34:	480f      	ldr	r0, [pc, #60]	; (8009b74 <tcpip_timeouts_mbox_fetch+0x68>)
 8009b36:	f00c fae9 	bl	801610c <sys_mutex_lock>
    return;
 8009b3a:	e018      	b.n	8009b6e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d102      	bne.n	8009b48 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8009b42:	f009 fd1b 	bl	801357c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8009b46:	e7e6      	b.n	8009b16 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8009b48:	480a      	ldr	r0, [pc, #40]	; (8009b74 <tcpip_timeouts_mbox_fetch+0x68>)
 8009b4a:	f00c faee 	bl	801612a <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8009b4e:	68fa      	ldr	r2, [r7, #12]
 8009b50:	6839      	ldr	r1, [r7, #0]
 8009b52:	6878      	ldr	r0, [r7, #4]
 8009b54:	f00c fa60 	bl	8016018 <sys_arch_mbox_fetch>
 8009b58:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8009b5a:	4806      	ldr	r0, [pc, #24]	; (8009b74 <tcpip_timeouts_mbox_fetch+0x68>)
 8009b5c:	f00c fad6 	bl	801610c <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8009b60:	68bb      	ldr	r3, [r7, #8]
 8009b62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b66:	d102      	bne.n	8009b6e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8009b68:	f009 fd08 	bl	801357c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8009b6c:	e7d3      	b.n	8009b16 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8009b6e:	3710      	adds	r7, #16
 8009b70:	46bd      	mov	sp, r7
 8009b72:	bd80      	pop	{r7, pc}
 8009b74:	20008d0c 	.word	0x20008d0c

08009b78 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b084      	sub	sp, #16
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8009b80:	4810      	ldr	r0, [pc, #64]	; (8009bc4 <tcpip_thread+0x4c>)
 8009b82:	f00c fac3 	bl	801610c <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8009b86:	4b10      	ldr	r3, [pc, #64]	; (8009bc8 <tcpip_thread+0x50>)
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d005      	beq.n	8009b9a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8009b8e:	4b0e      	ldr	r3, [pc, #56]	; (8009bc8 <tcpip_thread+0x50>)
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	4a0e      	ldr	r2, [pc, #56]	; (8009bcc <tcpip_thread+0x54>)
 8009b94:	6812      	ldr	r2, [r2, #0]
 8009b96:	4610      	mov	r0, r2
 8009b98:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8009b9a:	f107 030c 	add.w	r3, r7, #12
 8009b9e:	4619      	mov	r1, r3
 8009ba0:	480b      	ldr	r0, [pc, #44]	; (8009bd0 <tcpip_thread+0x58>)
 8009ba2:	f7ff ffb3 	bl	8009b0c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d106      	bne.n	8009bba <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8009bac:	4b09      	ldr	r3, [pc, #36]	; (8009bd4 <tcpip_thread+0x5c>)
 8009bae:	2291      	movs	r2, #145	; 0x91
 8009bb0:	4909      	ldr	r1, [pc, #36]	; (8009bd8 <tcpip_thread+0x60>)
 8009bb2:	480a      	ldr	r0, [pc, #40]	; (8009bdc <tcpip_thread+0x64>)
 8009bb4:	f00d f864 	bl	8016c80 <iprintf>
      continue;
 8009bb8:	e003      	b.n	8009bc2 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	f000 f80f 	bl	8009be0 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8009bc2:	e7ea      	b.n	8009b9a <tcpip_thread+0x22>
 8009bc4:	20008d0c 	.word	0x20008d0c
 8009bc8:	20008d00 	.word	0x20008d00
 8009bcc:	20008d04 	.word	0x20008d04
 8009bd0:	20008d08 	.word	0x20008d08
 8009bd4:	080178e8 	.word	0x080178e8
 8009bd8:	08017918 	.word	0x08017918
 8009bdc:	08017938 	.word	0x08017938

08009be0 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b082      	sub	sp, #8
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	781b      	ldrb	r3, [r3, #0]
 8009bec:	2b02      	cmp	r3, #2
 8009bee:	d026      	beq.n	8009c3e <tcpip_thread_handle_msg+0x5e>
 8009bf0:	2b02      	cmp	r3, #2
 8009bf2:	dc2b      	bgt.n	8009c4c <tcpip_thread_handle_msg+0x6c>
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d002      	beq.n	8009bfe <tcpip_thread_handle_msg+0x1e>
 8009bf8:	2b01      	cmp	r3, #1
 8009bfa:	d015      	beq.n	8009c28 <tcpip_thread_handle_msg+0x48>
 8009bfc:	e026      	b.n	8009c4c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	68db      	ldr	r3, [r3, #12]
 8009c02:	687a      	ldr	r2, [r7, #4]
 8009c04:	6850      	ldr	r0, [r2, #4]
 8009c06:	687a      	ldr	r2, [r7, #4]
 8009c08:	6892      	ldr	r2, [r2, #8]
 8009c0a:	4611      	mov	r1, r2
 8009c0c:	4798      	blx	r3
 8009c0e:	4603      	mov	r3, r0
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d004      	beq.n	8009c1e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	685b      	ldr	r3, [r3, #4]
 8009c18:	4618      	mov	r0, r3
 8009c1a:	f003 f815 	bl	800cc48 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8009c1e:	6879      	ldr	r1, [r7, #4]
 8009c20:	2009      	movs	r0, #9
 8009c22:	f002 f9db 	bl	800bfdc <memp_free>
      break;
 8009c26:	e018      	b.n	8009c5a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	685b      	ldr	r3, [r3, #4]
 8009c2c:	687a      	ldr	r2, [r7, #4]
 8009c2e:	6892      	ldr	r2, [r2, #8]
 8009c30:	4610      	mov	r0, r2
 8009c32:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8009c34:	6879      	ldr	r1, [r7, #4]
 8009c36:	2008      	movs	r0, #8
 8009c38:	f002 f9d0 	bl	800bfdc <memp_free>
      break;
 8009c3c:	e00d      	b.n	8009c5a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	685b      	ldr	r3, [r3, #4]
 8009c42:	687a      	ldr	r2, [r7, #4]
 8009c44:	6892      	ldr	r2, [r2, #8]
 8009c46:	4610      	mov	r0, r2
 8009c48:	4798      	blx	r3
      break;
 8009c4a:	e006      	b.n	8009c5a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8009c4c:	4b05      	ldr	r3, [pc, #20]	; (8009c64 <tcpip_thread_handle_msg+0x84>)
 8009c4e:	22cf      	movs	r2, #207	; 0xcf
 8009c50:	4905      	ldr	r1, [pc, #20]	; (8009c68 <tcpip_thread_handle_msg+0x88>)
 8009c52:	4806      	ldr	r0, [pc, #24]	; (8009c6c <tcpip_thread_handle_msg+0x8c>)
 8009c54:	f00d f814 	bl	8016c80 <iprintf>
      break;
 8009c58:	bf00      	nop
  }
}
 8009c5a:	bf00      	nop
 8009c5c:	3708      	adds	r7, #8
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	bd80      	pop	{r7, pc}
 8009c62:	bf00      	nop
 8009c64:	080178e8 	.word	0x080178e8
 8009c68:	08017918 	.word	0x08017918
 8009c6c:	08017938 	.word	0x08017938

08009c70 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b086      	sub	sp, #24
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	60f8      	str	r0, [r7, #12]
 8009c78:	60b9      	str	r1, [r7, #8]
 8009c7a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8009c7c:	481a      	ldr	r0, [pc, #104]	; (8009ce8 <tcpip_inpkt+0x78>)
 8009c7e:	f00c fa0a 	bl	8016096 <sys_mbox_valid>
 8009c82:	4603      	mov	r3, r0
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d105      	bne.n	8009c94 <tcpip_inpkt+0x24>
 8009c88:	4b18      	ldr	r3, [pc, #96]	; (8009cec <tcpip_inpkt+0x7c>)
 8009c8a:	22fc      	movs	r2, #252	; 0xfc
 8009c8c:	4918      	ldr	r1, [pc, #96]	; (8009cf0 <tcpip_inpkt+0x80>)
 8009c8e:	4819      	ldr	r0, [pc, #100]	; (8009cf4 <tcpip_inpkt+0x84>)
 8009c90:	f00c fff6 	bl	8016c80 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8009c94:	2009      	movs	r0, #9
 8009c96:	f002 f92b 	bl	800bef0 <memp_malloc>
 8009c9a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8009c9c:	697b      	ldr	r3, [r7, #20]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d102      	bne.n	8009ca8 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8009ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8009ca6:	e01a      	b.n	8009cde <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8009ca8:	697b      	ldr	r3, [r7, #20]
 8009caa:	2200      	movs	r2, #0
 8009cac:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8009cae:	697b      	ldr	r3, [r7, #20]
 8009cb0:	68fa      	ldr	r2, [r7, #12]
 8009cb2:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8009cb4:	697b      	ldr	r3, [r7, #20]
 8009cb6:	68ba      	ldr	r2, [r7, #8]
 8009cb8:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8009cba:	697b      	ldr	r3, [r7, #20]
 8009cbc:	687a      	ldr	r2, [r7, #4]
 8009cbe:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8009cc0:	6979      	ldr	r1, [r7, #20]
 8009cc2:	4809      	ldr	r0, [pc, #36]	; (8009ce8 <tcpip_inpkt+0x78>)
 8009cc4:	f00c f98e 	bl	8015fe4 <sys_mbox_trypost>
 8009cc8:	4603      	mov	r3, r0
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d006      	beq.n	8009cdc <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8009cce:	6979      	ldr	r1, [r7, #20]
 8009cd0:	2009      	movs	r0, #9
 8009cd2:	f002 f983 	bl	800bfdc <memp_free>
    return ERR_MEM;
 8009cd6:	f04f 33ff 	mov.w	r3, #4294967295
 8009cda:	e000      	b.n	8009cde <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8009cdc:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8009cde:	4618      	mov	r0, r3
 8009ce0:	3718      	adds	r7, #24
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	bd80      	pop	{r7, pc}
 8009ce6:	bf00      	nop
 8009ce8:	20008d08 	.word	0x20008d08
 8009cec:	080178e8 	.word	0x080178e8
 8009cf0:	08017960 	.word	0x08017960
 8009cf4:	08017938 	.word	0x08017938

08009cf8 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b082      	sub	sp, #8
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
 8009d00:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8009d02:	683b      	ldr	r3, [r7, #0]
 8009d04:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009d08:	f003 0318 	and.w	r3, r3, #24
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d006      	beq.n	8009d1e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8009d10:	4a08      	ldr	r2, [pc, #32]	; (8009d34 <tcpip_input+0x3c>)
 8009d12:	6839      	ldr	r1, [r7, #0]
 8009d14:	6878      	ldr	r0, [r7, #4]
 8009d16:	f7ff ffab 	bl	8009c70 <tcpip_inpkt>
 8009d1a:	4603      	mov	r3, r0
 8009d1c:	e005      	b.n	8009d2a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8009d1e:	4a06      	ldr	r2, [pc, #24]	; (8009d38 <tcpip_input+0x40>)
 8009d20:	6839      	ldr	r1, [r7, #0]
 8009d22:	6878      	ldr	r0, [r7, #4]
 8009d24:	f7ff ffa4 	bl	8009c70 <tcpip_inpkt>
 8009d28:	4603      	mov	r3, r0
}
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	3708      	adds	r7, #8
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	bd80      	pop	{r7, pc}
 8009d32:	bf00      	nop
 8009d34:	08015df5 	.word	0x08015df5
 8009d38:	08014d01 	.word	0x08014d01

08009d3c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b084      	sub	sp, #16
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
 8009d44:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8009d46:	4819      	ldr	r0, [pc, #100]	; (8009dac <tcpip_try_callback+0x70>)
 8009d48:	f00c f9a5 	bl	8016096 <sys_mbox_valid>
 8009d4c:	4603      	mov	r3, r0
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d106      	bne.n	8009d60 <tcpip_try_callback+0x24>
 8009d52:	4b17      	ldr	r3, [pc, #92]	; (8009db0 <tcpip_try_callback+0x74>)
 8009d54:	f240 125d 	movw	r2, #349	; 0x15d
 8009d58:	4916      	ldr	r1, [pc, #88]	; (8009db4 <tcpip_try_callback+0x78>)
 8009d5a:	4817      	ldr	r0, [pc, #92]	; (8009db8 <tcpip_try_callback+0x7c>)
 8009d5c:	f00c ff90 	bl	8016c80 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8009d60:	2008      	movs	r0, #8
 8009d62:	f002 f8c5 	bl	800bef0 <memp_malloc>
 8009d66:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d102      	bne.n	8009d74 <tcpip_try_callback+0x38>
    return ERR_MEM;
 8009d6e:	f04f 33ff 	mov.w	r3, #4294967295
 8009d72:	e017      	b.n	8009da4 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	2201      	movs	r2, #1
 8009d78:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	687a      	ldr	r2, [r7, #4]
 8009d7e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	683a      	ldr	r2, [r7, #0]
 8009d84:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8009d86:	68f9      	ldr	r1, [r7, #12]
 8009d88:	4808      	ldr	r0, [pc, #32]	; (8009dac <tcpip_try_callback+0x70>)
 8009d8a:	f00c f92b 	bl	8015fe4 <sys_mbox_trypost>
 8009d8e:	4603      	mov	r3, r0
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d006      	beq.n	8009da2 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8009d94:	68f9      	ldr	r1, [r7, #12]
 8009d96:	2008      	movs	r0, #8
 8009d98:	f002 f920 	bl	800bfdc <memp_free>
    return ERR_MEM;
 8009d9c:	f04f 33ff 	mov.w	r3, #4294967295
 8009da0:	e000      	b.n	8009da4 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8009da2:	2300      	movs	r3, #0
}
 8009da4:	4618      	mov	r0, r3
 8009da6:	3710      	adds	r7, #16
 8009da8:	46bd      	mov	sp, r7
 8009daa:	bd80      	pop	{r7, pc}
 8009dac:	20008d08 	.word	0x20008d08
 8009db0:	080178e8 	.word	0x080178e8
 8009db4:	08017960 	.word	0x08017960
 8009db8:	08017938 	.word	0x08017938

08009dbc <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b084      	sub	sp, #16
 8009dc0:	af02      	add	r7, sp, #8
 8009dc2:	6078      	str	r0, [r7, #4]
 8009dc4:	6039      	str	r1, [r7, #0]
  lwip_init();
 8009dc6:	f001 fbca 	bl	800b55e <lwip_init>

  tcpip_init_done = initfunc;
 8009dca:	4a17      	ldr	r2, [pc, #92]	; (8009e28 <tcpip_init+0x6c>)
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8009dd0:	4a16      	ldr	r2, [pc, #88]	; (8009e2c <tcpip_init+0x70>)
 8009dd2:	683b      	ldr	r3, [r7, #0]
 8009dd4:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8009dd6:	2106      	movs	r1, #6
 8009dd8:	4815      	ldr	r0, [pc, #84]	; (8009e30 <tcpip_init+0x74>)
 8009dda:	f00c f8e1 	bl	8015fa0 <sys_mbox_new>
 8009dde:	4603      	mov	r3, r0
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d006      	beq.n	8009df2 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8009de4:	4b13      	ldr	r3, [pc, #76]	; (8009e34 <tcpip_init+0x78>)
 8009de6:	f240 2261 	movw	r2, #609	; 0x261
 8009dea:	4913      	ldr	r1, [pc, #76]	; (8009e38 <tcpip_init+0x7c>)
 8009dec:	4813      	ldr	r0, [pc, #76]	; (8009e3c <tcpip_init+0x80>)
 8009dee:	f00c ff47 	bl	8016c80 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8009df2:	4813      	ldr	r0, [pc, #76]	; (8009e40 <tcpip_init+0x84>)
 8009df4:	f00c f96e 	bl	80160d4 <sys_mutex_new>
 8009df8:	4603      	mov	r3, r0
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d006      	beq.n	8009e0c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8009dfe:	4b0d      	ldr	r3, [pc, #52]	; (8009e34 <tcpip_init+0x78>)
 8009e00:	f240 2265 	movw	r2, #613	; 0x265
 8009e04:	490f      	ldr	r1, [pc, #60]	; (8009e44 <tcpip_init+0x88>)
 8009e06:	480d      	ldr	r0, [pc, #52]	; (8009e3c <tcpip_init+0x80>)
 8009e08:	f00c ff3a 	bl	8016c80 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	9300      	str	r3, [sp, #0]
 8009e10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009e14:	2200      	movs	r2, #0
 8009e16:	490c      	ldr	r1, [pc, #48]	; (8009e48 <tcpip_init+0x8c>)
 8009e18:	480c      	ldr	r0, [pc, #48]	; (8009e4c <tcpip_init+0x90>)
 8009e1a:	f00c f993 	bl	8016144 <sys_thread_new>
}
 8009e1e:	bf00      	nop
 8009e20:	3708      	adds	r7, #8
 8009e22:	46bd      	mov	sp, r7
 8009e24:	bd80      	pop	{r7, pc}
 8009e26:	bf00      	nop
 8009e28:	20008d00 	.word	0x20008d00
 8009e2c:	20008d04 	.word	0x20008d04
 8009e30:	20008d08 	.word	0x20008d08
 8009e34:	080178e8 	.word	0x080178e8
 8009e38:	08017970 	.word	0x08017970
 8009e3c:	08017938 	.word	0x08017938
 8009e40:	20008d0c 	.word	0x20008d0c
 8009e44:	08017994 	.word	0x08017994
 8009e48:	08009b79 	.word	0x08009b79
 8009e4c:	080179b8 	.word	0x080179b8

08009e50 <mqtt_ringbuf_put>:
/* Output ring buffer */

/** Add single item to ring buffer */
static void
mqtt_ringbuf_put(struct mqtt_ringbuf_t *rb, u8_t item)
{
 8009e50:	b480      	push	{r7}
 8009e52:	b083      	sub	sp, #12
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
 8009e58:	460b      	mov	r3, r1
 8009e5a:	70fb      	strb	r3, [r7, #3]
  rb->buf[rb->put] = item;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	881b      	ldrh	r3, [r3, #0]
 8009e60:	461a      	mov	r2, r3
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	4413      	add	r3, r2
 8009e66:	78fa      	ldrb	r2, [r7, #3]
 8009e68:	711a      	strb	r2, [r3, #4]
  rb->put++;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	881b      	ldrh	r3, [r3, #0]
 8009e6e:	3301      	adds	r3, #1
 8009e70:	b29a      	uxth	r2, r3
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	801a      	strh	r2, [r3, #0]
  if (rb->put >= MQTT_OUTPUT_RINGBUF_SIZE) {
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	881b      	ldrh	r3, [r3, #0]
 8009e7a:	2bff      	cmp	r3, #255	; 0xff
 8009e7c:	d902      	bls.n	8009e84 <mqtt_ringbuf_put+0x34>
    rb->put = 0;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	2200      	movs	r2, #0
 8009e82:	801a      	strh	r2, [r3, #0]
  }
}
 8009e84:	bf00      	nop
 8009e86:	370c      	adds	r7, #12
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	bc80      	pop	{r7}
 8009e8c:	4770      	bx	lr

08009e8e <mqtt_ringbuf_get_ptr>:

/** Return pointer to ring buffer get position */
static u8_t *
mqtt_ringbuf_get_ptr(struct mqtt_ringbuf_t *rb)
{
 8009e8e:	b480      	push	{r7}
 8009e90:	b083      	sub	sp, #12
 8009e92:	af00      	add	r7, sp, #0
 8009e94:	6078      	str	r0, [r7, #4]
  return &rb->buf[rb->get];
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	885b      	ldrh	r3, [r3, #2]
 8009e9a:	461a      	mov	r2, r3
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	4413      	add	r3, r2
 8009ea0:	3304      	adds	r3, #4
}
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	370c      	adds	r7, #12
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	bc80      	pop	{r7}
 8009eaa:	4770      	bx	lr

08009eac <mqtt_ringbuf_advance_get_idx>:

static void
mqtt_ringbuf_advance_get_idx(struct mqtt_ringbuf_t *rb, u16_t len)
{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b082      	sub	sp, #8
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
 8009eb4:	460b      	mov	r3, r1
 8009eb6:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("mqtt_ringbuf_advance_get_idx: len < MQTT_OUTPUT_RINGBUF_SIZE", len < MQTT_OUTPUT_RINGBUF_SIZE);
 8009eb8:	887b      	ldrh	r3, [r7, #2]
 8009eba:	2bff      	cmp	r3, #255	; 0xff
 8009ebc:	d905      	bls.n	8009eca <mqtt_ringbuf_advance_get_idx+0x1e>
 8009ebe:	4b0e      	ldr	r3, [pc, #56]	; (8009ef8 <mqtt_ringbuf_advance_get_idx+0x4c>)
 8009ec0:	22cb      	movs	r2, #203	; 0xcb
 8009ec2:	490e      	ldr	r1, [pc, #56]	; (8009efc <mqtt_ringbuf_advance_get_idx+0x50>)
 8009ec4:	480e      	ldr	r0, [pc, #56]	; (8009f00 <mqtt_ringbuf_advance_get_idx+0x54>)
 8009ec6:	f00c fedb 	bl	8016c80 <iprintf>

  rb->get += len;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	885a      	ldrh	r2, [r3, #2]
 8009ece:	887b      	ldrh	r3, [r7, #2]
 8009ed0:	4413      	add	r3, r2
 8009ed2:	b29a      	uxth	r2, r3
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	805a      	strh	r2, [r3, #2]
  if (rb->get >= MQTT_OUTPUT_RINGBUF_SIZE) {
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	885b      	ldrh	r3, [r3, #2]
 8009edc:	2bff      	cmp	r3, #255	; 0xff
 8009ede:	d906      	bls.n	8009eee <mqtt_ringbuf_advance_get_idx+0x42>
    rb->get = rb->get - MQTT_OUTPUT_RINGBUF_SIZE;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	885b      	ldrh	r3, [r3, #2]
 8009ee4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8009ee8:	b29a      	uxth	r2, r3
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	805a      	strh	r2, [r3, #2]
  }
}
 8009eee:	bf00      	nop
 8009ef0:	3708      	adds	r7, #8
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	bd80      	pop	{r7, pc}
 8009ef6:	bf00      	nop
 8009ef8:	080179c8 	.word	0x080179c8
 8009efc:	08017a00 	.word	0x08017a00
 8009f00:	08017a40 	.word	0x08017a40

08009f04 <mqtt_ringbuf_len>:

/** Return number of bytes in ring buffer */
static u16_t
mqtt_ringbuf_len(struct mqtt_ringbuf_t *rb)
{
 8009f04:	b480      	push	{r7}
 8009f06:	b085      	sub	sp, #20
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
  u32_t len = rb->put - rb->get;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	881b      	ldrh	r3, [r3, #0]
 8009f10:	461a      	mov	r2, r3
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	885b      	ldrh	r3, [r3, #2]
 8009f16:	1ad3      	subs	r3, r2, r3
 8009f18:	60fb      	str	r3, [r7, #12]
  if (len > 0xFFFF) {
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f20:	d303      	bcc.n	8009f2a <mqtt_ringbuf_len+0x26>
    len += MQTT_OUTPUT_RINGBUF_SIZE;
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8009f28:	60fb      	str	r3, [r7, #12]
  }
  return (u16_t)len;
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	b29b      	uxth	r3, r3
}
 8009f2e:	4618      	mov	r0, r3
 8009f30:	3714      	adds	r7, #20
 8009f32:	46bd      	mov	sp, r7
 8009f34:	bc80      	pop	{r7}
 8009f36:	4770      	bx	lr

08009f38 <mqtt_output_send>:
 * @param rb Output ring buffer
 * @param tpcb TCP connection handle
 */
static void
mqtt_output_send(struct mqtt_ringbuf_t *rb, struct altcp_pcb *tpcb)
{
 8009f38:	b590      	push	{r4, r7, lr}
 8009f3a:	b085      	sub	sp, #20
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
 8009f40:	6039      	str	r1, [r7, #0]
  err_t err;
  u8_t wrap = 0;
 8009f42:	2300      	movs	r3, #0
 8009f44:	73bb      	strb	r3, [r7, #14]
  u16_t ringbuf_lin_len = mqtt_ringbuf_linear_read_length(rb);
 8009f46:	6878      	ldr	r0, [r7, #4]
 8009f48:	f7ff ffdc 	bl	8009f04 <mqtt_ringbuf_len>
 8009f4c:	4603      	mov	r3, r0
 8009f4e:	461a      	mov	r2, r3
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	885b      	ldrh	r3, [r3, #2]
 8009f54:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8009f58:	429a      	cmp	r2, r3
 8009f5a:	da04      	bge.n	8009f66 <mqtt_output_send+0x2e>
 8009f5c:	6878      	ldr	r0, [r7, #4]
 8009f5e:	f7ff ffd1 	bl	8009f04 <mqtt_ringbuf_len>
 8009f62:	4603      	mov	r3, r0
 8009f64:	e004      	b.n	8009f70 <mqtt_output_send+0x38>
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	885b      	ldrh	r3, [r3, #2]
 8009f6a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8009f6e:	b29b      	uxth	r3, r3
 8009f70:	817b      	strh	r3, [r7, #10]
  u16_t send_len = altcp_sndbuf(tpcb);
 8009f72:	683b      	ldr	r3, [r7, #0]
 8009f74:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009f78:	81bb      	strh	r3, [r7, #12]
  LWIP_ASSERT("mqtt_output_send: tpcb != NULL", tpcb != NULL);
 8009f7a:	683b      	ldr	r3, [r7, #0]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d105      	bne.n	8009f8c <mqtt_output_send+0x54>
 8009f80:	4b44      	ldr	r3, [pc, #272]	; (800a094 <mqtt_output_send+0x15c>)
 8009f82:	22f0      	movs	r2, #240	; 0xf0
 8009f84:	4944      	ldr	r1, [pc, #272]	; (800a098 <mqtt_output_send+0x160>)
 8009f86:	4845      	ldr	r0, [pc, #276]	; (800a09c <mqtt_output_send+0x164>)
 8009f88:	f00c fe7a 	bl	8016c80 <iprintf>

  if (send_len == 0 || ringbuf_lin_len == 0) {
 8009f8c:	89bb      	ldrh	r3, [r7, #12]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d07c      	beq.n	800a08c <mqtt_output_send+0x154>
 8009f92:	897b      	ldrh	r3, [r7, #10]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d079      	beq.n	800a08c <mqtt_output_send+0x154>
  }

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_output_send: tcp_sndbuf: %d bytes, ringbuf_linear_available: %d, get %d, put %d\n",
                                 send_len, ringbuf_lin_len, rb->get, rb->put));

  if (send_len > ringbuf_lin_len) {
 8009f98:	89ba      	ldrh	r2, [r7, #12]
 8009f9a:	897b      	ldrh	r3, [r7, #10]
 8009f9c:	429a      	cmp	r2, r3
 8009f9e:	d90d      	bls.n	8009fbc <mqtt_output_send+0x84>
    /* Space in TCP output buffer is larger than available in ring buffer linear portion */
    send_len = ringbuf_lin_len;
 8009fa0:	897b      	ldrh	r3, [r7, #10]
 8009fa2:	81bb      	strh	r3, [r7, #12]
    /* Wrap around if more data in ring buffer after linear portion */
    wrap = (mqtt_ringbuf_len(rb) > ringbuf_lin_len);
 8009fa4:	6878      	ldr	r0, [r7, #4]
 8009fa6:	f7ff ffad 	bl	8009f04 <mqtt_ringbuf_len>
 8009faa:	4603      	mov	r3, r0
 8009fac:	461a      	mov	r2, r3
 8009fae:	897b      	ldrh	r3, [r7, #10]
 8009fb0:	4293      	cmp	r3, r2
 8009fb2:	bf34      	ite	cc
 8009fb4:	2301      	movcc	r3, #1
 8009fb6:	2300      	movcs	r3, #0
 8009fb8:	b2db      	uxtb	r3, r3
 8009fba:	73bb      	strb	r3, [r7, #14]
  }
  err = altcp_write(tpcb, mqtt_ringbuf_get_ptr(rb), send_len, TCP_WRITE_FLAG_COPY | (wrap ? TCP_WRITE_FLAG_MORE : 0));
 8009fbc:	6878      	ldr	r0, [r7, #4]
 8009fbe:	f7ff ff66 	bl	8009e8e <mqtt_ringbuf_get_ptr>
 8009fc2:	4601      	mov	r1, r0
 8009fc4:	7bbb      	ldrb	r3, [r7, #14]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d001      	beq.n	8009fce <mqtt_output_send+0x96>
 8009fca:	2303      	movs	r3, #3
 8009fcc:	e000      	b.n	8009fd0 <mqtt_output_send+0x98>
 8009fce:	2301      	movs	r3, #1
 8009fd0:	89ba      	ldrh	r2, [r7, #12]
 8009fd2:	6838      	ldr	r0, [r7, #0]
 8009fd4:	f007 fc30 	bl	8011838 <tcp_write>
 8009fd8:	4603      	mov	r3, r0
 8009fda:	73fb      	strb	r3, [r7, #15]
  if ((err == ERR_OK) && wrap) {
 8009fdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d146      	bne.n	800a072 <mqtt_output_send+0x13a>
 8009fe4:	7bbb      	ldrb	r3, [r7, #14]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d043      	beq.n	800a072 <mqtt_output_send+0x13a>
    mqtt_ringbuf_advance_get_idx(rb, send_len);
 8009fea:	89bb      	ldrh	r3, [r7, #12]
 8009fec:	4619      	mov	r1, r3
 8009fee:	6878      	ldr	r0, [r7, #4]
 8009ff0:	f7ff ff5c 	bl	8009eac <mqtt_ringbuf_advance_get_idx>
    /* Use the lesser one of ring buffer linear length and TCP send buffer size */
    send_len = LWIP_MIN(altcp_sndbuf(tpcb), mqtt_ringbuf_linear_read_length(rb));
 8009ff4:	683b      	ldr	r3, [r7, #0]
 8009ff6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009ffa:	461c      	mov	r4, r3
 8009ffc:	6878      	ldr	r0, [r7, #4]
 8009ffe:	f7ff ff81 	bl	8009f04 <mqtt_ringbuf_len>
 800a002:	4603      	mov	r3, r0
 800a004:	461a      	mov	r2, r3
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	885b      	ldrh	r3, [r3, #2]
 800a00a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800a00e:	429a      	cmp	r2, r3
 800a010:	da04      	bge.n	800a01c <mqtt_output_send+0xe4>
 800a012:	6878      	ldr	r0, [r7, #4]
 800a014:	f7ff ff76 	bl	8009f04 <mqtt_ringbuf_len>
 800a018:	4603      	mov	r3, r0
 800a01a:	e003      	b.n	800a024 <mqtt_output_send+0xec>
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	885b      	ldrh	r3, [r3, #2]
 800a020:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800a024:	42a3      	cmp	r3, r4
 800a026:	dd03      	ble.n	800a030 <mqtt_output_send+0xf8>
 800a028:	683b      	ldr	r3, [r7, #0]
 800a02a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a02e:	e014      	b.n	800a05a <mqtt_output_send+0x122>
 800a030:	6878      	ldr	r0, [r7, #4]
 800a032:	f7ff ff67 	bl	8009f04 <mqtt_ringbuf_len>
 800a036:	4603      	mov	r3, r0
 800a038:	461a      	mov	r2, r3
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	885b      	ldrh	r3, [r3, #2]
 800a03e:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800a042:	429a      	cmp	r2, r3
 800a044:	da04      	bge.n	800a050 <mqtt_output_send+0x118>
 800a046:	6878      	ldr	r0, [r7, #4]
 800a048:	f7ff ff5c 	bl	8009f04 <mqtt_ringbuf_len>
 800a04c:	4603      	mov	r3, r0
 800a04e:	e004      	b.n	800a05a <mqtt_output_send+0x122>
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	885b      	ldrh	r3, [r3, #2]
 800a054:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800a058:	b29b      	uxth	r3, r3
 800a05a:	81bb      	strh	r3, [r7, #12]
    err = altcp_write(tpcb, mqtt_ringbuf_get_ptr(rb), send_len, TCP_WRITE_FLAG_COPY);
 800a05c:	6878      	ldr	r0, [r7, #4]
 800a05e:	f7ff ff16 	bl	8009e8e <mqtt_ringbuf_get_ptr>
 800a062:	4601      	mov	r1, r0
 800a064:	89ba      	ldrh	r2, [r7, #12]
 800a066:	2301      	movs	r3, #1
 800a068:	6838      	ldr	r0, [r7, #0]
 800a06a:	f007 fbe5 	bl	8011838 <tcp_write>
 800a06e:	4603      	mov	r3, r0
 800a070:	73fb      	strb	r3, [r7, #15]
  }

  if (err == ERR_OK) {
 800a072:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d109      	bne.n	800a08e <mqtt_output_send+0x156>
    mqtt_ringbuf_advance_get_idx(rb, send_len);
 800a07a:	89bb      	ldrh	r3, [r7, #12]
 800a07c:	4619      	mov	r1, r3
 800a07e:	6878      	ldr	r0, [r7, #4]
 800a080:	f7ff ff14 	bl	8009eac <mqtt_ringbuf_advance_get_idx>
    /* Flush */
    altcp_output(tpcb);
 800a084:	6838      	ldr	r0, [r7, #0]
 800a086:	f008 f9c1 	bl	801240c <tcp_output>
 800a08a:	e000      	b.n	800a08e <mqtt_output_send+0x156>
    return;
 800a08c:	bf00      	nop
  } else {
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_output_send: Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
  }
}
 800a08e:	3714      	adds	r7, #20
 800a090:	46bd      	mov	sp, r7
 800a092:	bd90      	pop	{r4, r7, pc}
 800a094:	080179c8 	.word	0x080179c8
 800a098:	08017a68 	.word	0x08017a68
 800a09c:	08017a40 	.word	0x08017a40

0800a0a0 <mqtt_delete_request>:
 * Delete request item
 * @param r Request item to delete
 */
static void
mqtt_delete_request(struct mqtt_request_t *r)
{
 800a0a0:	b480      	push	{r7}
 800a0a2:	b083      	sub	sp, #12
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
  if (r != NULL) {
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d002      	beq.n	800a0b4 <mqtt_delete_request+0x14>
    r->next = r;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	687a      	ldr	r2, [r7, #4]
 800a0b2:	601a      	str	r2, [r3, #0]
  }
}
 800a0b4:	bf00      	nop
 800a0b6:	370c      	adds	r7, #12
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	bc80      	pop	{r7}
 800a0bc:	4770      	bx	lr
	...

0800a0c0 <mqtt_take_request>:
 * @param pkt_id Packet identifier of request to take
 * @return Request item if found, NULL if not
 */
static struct mqtt_request_t *
mqtt_take_request(struct mqtt_request_t **tail, u16_t pkt_id)
{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b084      	sub	sp, #16
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
 800a0c8:	460b      	mov	r3, r1
 800a0ca:	807b      	strh	r3, [r7, #2]
  struct mqtt_request_t *iter = NULL, *prev = NULL;
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	60fb      	str	r3, [r7, #12]
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	60bb      	str	r3, [r7, #8]
  LWIP_ASSERT("mqtt_take_request: tail != NULL", tail != NULL);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d106      	bne.n	800a0e8 <mqtt_take_request+0x28>
 800a0da:	4b1f      	ldr	r3, [pc, #124]	; (800a158 <mqtt_take_request+0x98>)
 800a0dc:	f240 1267 	movw	r2, #359	; 0x167
 800a0e0:	491e      	ldr	r1, [pc, #120]	; (800a15c <mqtt_take_request+0x9c>)
 800a0e2:	481f      	ldr	r0, [pc, #124]	; (800a160 <mqtt_take_request+0xa0>)
 800a0e4:	f00c fdcc 	bl	8016c80 <iprintf>
  /* Search all request for pkt_id */
  for (iter = *tail; iter != NULL; iter = iter->next) {
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	60fb      	str	r3, [r7, #12]
 800a0ee:	e009      	b.n	800a104 <mqtt_take_request+0x44>
    if (iter->pkt_id == pkt_id) {
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	899b      	ldrh	r3, [r3, #12]
 800a0f4:	887a      	ldrh	r2, [r7, #2]
 800a0f6:	429a      	cmp	r2, r3
 800a0f8:	d008      	beq.n	800a10c <mqtt_take_request+0x4c>
      break;
    }
    prev = iter;
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	60bb      	str	r3, [r7, #8]
  for (iter = *tail; iter != NULL; iter = iter->next) {
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	60fb      	str	r3, [r7, #12]
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d1f2      	bne.n	800a0f0 <mqtt_take_request+0x30>
 800a10a:	e000      	b.n	800a10e <mqtt_take_request+0x4e>
      break;
 800a10c:	bf00      	nop
  }

  /* If request was found */
  if (iter != NULL) {
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d01c      	beq.n	800a14e <mqtt_take_request+0x8e>
    /* unchain */
    if (prev == NULL) {
 800a114:	68bb      	ldr	r3, [r7, #8]
 800a116:	2b00      	cmp	r3, #0
 800a118:	d104      	bne.n	800a124 <mqtt_take_request+0x64>
      *tail = iter->next;
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	681a      	ldr	r2, [r3, #0]
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	601a      	str	r2, [r3, #0]
 800a122:	e003      	b.n	800a12c <mqtt_take_request+0x6c>
    } else {
      prev->next = iter->next;
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	681a      	ldr	r2, [r3, #0]
 800a128:	68bb      	ldr	r3, [r7, #8]
 800a12a:	601a      	str	r2, [r3, #0]
    }
    /* If exists, add remaining timeout time for the request to next */
    if (iter->next != NULL) {
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d009      	beq.n	800a148 <mqtt_take_request+0x88>
      iter->next->timeout_diff += iter->timeout_diff;
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	89d9      	ldrh	r1, [r3, #14]
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	89da      	ldrh	r2, [r3, #14]
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	440a      	add	r2, r1
 800a144:	b292      	uxth	r2, r2
 800a146:	81da      	strh	r2, [r3, #14]
    }
    iter->next = NULL;
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	2200      	movs	r2, #0
 800a14c:	601a      	str	r2, [r3, #0]
  }
  return iter;
 800a14e:	68fb      	ldr	r3, [r7, #12]
}
 800a150:	4618      	mov	r0, r3
 800a152:	3710      	adds	r7, #16
 800a154:	46bd      	mov	sp, r7
 800a156:	bd80      	pop	{r7, pc}
 800a158:	080179c8 	.word	0x080179c8
 800a15c:	08017b08 	.word	0x08017b08
 800a160:	08017a40 	.word	0x08017a40

0800a164 <mqtt_request_time_elapsed>:
 * @param tail Pointer to request queue tail pointer
 * @param t Time since last call in seconds
 */
static void
mqtt_request_time_elapsed(struct mqtt_request_t **tail, u8_t t)
{
 800a164:	b580      	push	{r7, lr}
 800a166:	b084      	sub	sp, #16
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
 800a16c:	460b      	mov	r3, r1
 800a16e:	70fb      	strb	r3, [r7, #3]
  struct mqtt_request_t *r;
  LWIP_ASSERT("mqtt_request_time_elapsed: tail != NULL", tail != NULL);
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2b00      	cmp	r3, #0
 800a174:	d106      	bne.n	800a184 <mqtt_request_time_elapsed+0x20>
 800a176:	4b21      	ldr	r3, [pc, #132]	; (800a1fc <mqtt_request_time_elapsed+0x98>)
 800a178:	f44f 72c5 	mov.w	r2, #394	; 0x18a
 800a17c:	4920      	ldr	r1, [pc, #128]	; (800a200 <mqtt_request_time_elapsed+0x9c>)
 800a17e:	4821      	ldr	r0, [pc, #132]	; (800a204 <mqtt_request_time_elapsed+0xa0>)
 800a180:	f00c fd7e 	bl	8016c80 <iprintf>
  r = *tail;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	60fb      	str	r3, [r7, #12]
  while (t > 0 && r != NULL) {
 800a18a:	e02c      	b.n	800a1e6 <mqtt_request_time_elapsed+0x82>
    if (t >= r->timeout_diff) {
 800a18c:	78fb      	ldrb	r3, [r7, #3]
 800a18e:	b29a      	uxth	r2, r3
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	89db      	ldrh	r3, [r3, #14]
 800a194:	429a      	cmp	r2, r3
 800a196:	d31c      	bcc.n	800a1d2 <mqtt_request_time_elapsed+0x6e>
      t -= (u8_t)r->timeout_diff;
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	89db      	ldrh	r3, [r3, #14]
 800a19c:	b2db      	uxtb	r3, r3
 800a19e:	78fa      	ldrb	r2, [r7, #3]
 800a1a0:	1ad3      	subs	r3, r2, r3
 800a1a2:	70fb      	strb	r3, [r7, #3]
      /* Unchain */
      *tail = r->next;
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	681a      	ldr	r2, [r3, #0]
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	601a      	str	r2, [r3, #0]
      /* Notify upper layer about timeout */
      if (r->cb != NULL) {
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	685b      	ldr	r3, [r3, #4]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d007      	beq.n	800a1c4 <mqtt_request_time_elapsed+0x60>
        r->cb(r->arg, ERR_TIMEOUT);
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	685b      	ldr	r3, [r3, #4]
 800a1b8:	68fa      	ldr	r2, [r7, #12]
 800a1ba:	6892      	ldr	r2, [r2, #8]
 800a1bc:	f06f 0102 	mvn.w	r1, #2
 800a1c0:	4610      	mov	r0, r2
 800a1c2:	4798      	blx	r3
      }
      mqtt_delete_request(r);
 800a1c4:	68f8      	ldr	r0, [r7, #12]
 800a1c6:	f7ff ff6b 	bl	800a0a0 <mqtt_delete_request>
      /* Tail might be be modified in callback, so re-read it in every iteration */
      r = *(struct mqtt_request_t *const volatile *)tail;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	60fb      	str	r3, [r7, #12]
 800a1d0:	e009      	b.n	800a1e6 <mqtt_request_time_elapsed+0x82>
    } else {
      r->timeout_diff -= t;
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	89da      	ldrh	r2, [r3, #14]
 800a1d6:	78fb      	ldrb	r3, [r7, #3]
 800a1d8:	b29b      	uxth	r3, r3
 800a1da:	1ad3      	subs	r3, r2, r3
 800a1dc:	b29a      	uxth	r2, r3
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	81da      	strh	r2, [r3, #14]
      t = 0;
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	70fb      	strb	r3, [r7, #3]
  while (t > 0 && r != NULL) {
 800a1e6:	78fb      	ldrb	r3, [r7, #3]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d002      	beq.n	800a1f2 <mqtt_request_time_elapsed+0x8e>
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d1cc      	bne.n	800a18c <mqtt_request_time_elapsed+0x28>
    }
  }
}
 800a1f2:	bf00      	nop
 800a1f4:	3710      	adds	r7, #16
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	bd80      	pop	{r7, pc}
 800a1fa:	bf00      	nop
 800a1fc:	080179c8 	.word	0x080179c8
 800a200:	08017b28 	.word	0x08017b28
 800a204:	08017a40 	.word	0x08017a40

0800a208 <mqtt_clear_requests>:
 * Free all request items
 * @param tail Pointer to request queue tail pointer
 */
static void
mqtt_clear_requests(struct mqtt_request_t **tail)
{
 800a208:	b580      	push	{r7, lr}
 800a20a:	b084      	sub	sp, #16
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
  struct mqtt_request_t *iter, *next;
  LWIP_ASSERT("mqtt_clear_requests: tail != NULL", tail != NULL);
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d106      	bne.n	800a224 <mqtt_clear_requests+0x1c>
 800a216:	4b0e      	ldr	r3, [pc, #56]	; (800a250 <mqtt_clear_requests+0x48>)
 800a218:	f240 12a7 	movw	r2, #423	; 0x1a7
 800a21c:	490d      	ldr	r1, [pc, #52]	; (800a254 <mqtt_clear_requests+0x4c>)
 800a21e:	480e      	ldr	r0, [pc, #56]	; (800a258 <mqtt_clear_requests+0x50>)
 800a220:	f00c fd2e 	bl	8016c80 <iprintf>
  for (iter = *tail; iter != NULL; iter = next) {
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	60fb      	str	r3, [r7, #12]
 800a22a:	e007      	b.n	800a23c <mqtt_clear_requests+0x34>
    next = iter->next;
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	60bb      	str	r3, [r7, #8]
    mqtt_delete_request(iter);
 800a232:	68f8      	ldr	r0, [r7, #12]
 800a234:	f7ff ff34 	bl	800a0a0 <mqtt_delete_request>
  for (iter = *tail; iter != NULL; iter = next) {
 800a238:	68bb      	ldr	r3, [r7, #8]
 800a23a:	60fb      	str	r3, [r7, #12]
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d1f4      	bne.n	800a22c <mqtt_clear_requests+0x24>
  }
  *tail = NULL;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	2200      	movs	r2, #0
 800a246:	601a      	str	r2, [r3, #0]
}
 800a248:	bf00      	nop
 800a24a:	3710      	adds	r7, #16
 800a24c:	46bd      	mov	sp, r7
 800a24e:	bd80      	pop	{r7, pc}
 800a250:	080179c8 	.word	0x080179c8
 800a254:	08017b50 	.word	0x08017b50
 800a258:	08017a40 	.word	0x08017a40

0800a25c <mqtt_init_requests>:
 * @param r_objs Pointer to request objects
 * @param r_objs_len Number of array entries
 */
static void
mqtt_init_requests(struct mqtt_request_t *r_objs, size_t r_objs_len)
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b084      	sub	sp, #16
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
 800a264:	6039      	str	r1, [r7, #0]
  u8_t n;
  LWIP_ASSERT("mqtt_init_requests: r_objs != NULL", r_objs != NULL);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d106      	bne.n	800a27a <mqtt_init_requests+0x1e>
 800a26c:	4b0f      	ldr	r3, [pc, #60]	; (800a2ac <mqtt_init_requests+0x50>)
 800a26e:	f240 12b7 	movw	r2, #439	; 0x1b7
 800a272:	490f      	ldr	r1, [pc, #60]	; (800a2b0 <mqtt_init_requests+0x54>)
 800a274:	480f      	ldr	r0, [pc, #60]	; (800a2b4 <mqtt_init_requests+0x58>)
 800a276:	f00c fd03 	bl	8016c80 <iprintf>
  for (n = 0; n < r_objs_len; n++) {
 800a27a:	2300      	movs	r3, #0
 800a27c:	73fb      	strb	r3, [r7, #15]
 800a27e:	e00b      	b.n	800a298 <mqtt_init_requests+0x3c>
    /* Item pointing to itself indicates unused */
    r_objs[n].next = &r_objs[n];
 800a280:	7bfb      	ldrb	r3, [r7, #15]
 800a282:	011a      	lsls	r2, r3, #4
 800a284:	7bfb      	ldrb	r3, [r7, #15]
 800a286:	011b      	lsls	r3, r3, #4
 800a288:	6879      	ldr	r1, [r7, #4]
 800a28a:	440b      	add	r3, r1
 800a28c:	6879      	ldr	r1, [r7, #4]
 800a28e:	440a      	add	r2, r1
 800a290:	601a      	str	r2, [r3, #0]
  for (n = 0; n < r_objs_len; n++) {
 800a292:	7bfb      	ldrb	r3, [r7, #15]
 800a294:	3301      	adds	r3, #1
 800a296:	73fb      	strb	r3, [r7, #15]
 800a298:	7bfb      	ldrb	r3, [r7, #15]
 800a29a:	683a      	ldr	r2, [r7, #0]
 800a29c:	429a      	cmp	r2, r3
 800a29e:	d8ef      	bhi.n	800a280 <mqtt_init_requests+0x24>
  }
}
 800a2a0:	bf00      	nop
 800a2a2:	bf00      	nop
 800a2a4:	3710      	adds	r7, #16
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	bd80      	pop	{r7, pc}
 800a2aa:	bf00      	nop
 800a2ac:	080179c8 	.word	0x080179c8
 800a2b0:	08017b74 	.word	0x08017b74
 800a2b4:	08017a40 	.word	0x08017a40

0800a2b8 <mqtt_output_append_u8>:
/* Output message build helpers */


static void
mqtt_output_append_u8(struct mqtt_ringbuf_t *rb, u8_t value)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b082      	sub	sp, #8
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
 800a2c0:	460b      	mov	r3, r1
 800a2c2:	70fb      	strb	r3, [r7, #3]
  mqtt_ringbuf_put(rb, value);
 800a2c4:	78fb      	ldrb	r3, [r7, #3]
 800a2c6:	4619      	mov	r1, r3
 800a2c8:	6878      	ldr	r0, [r7, #4]
 800a2ca:	f7ff fdc1 	bl	8009e50 <mqtt_ringbuf_put>
}
 800a2ce:	bf00      	nop
 800a2d0:	3708      	adds	r7, #8
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	bd80      	pop	{r7, pc}

0800a2d6 <mqtt_output_append_u16>:

static
void mqtt_output_append_u16(struct mqtt_ringbuf_t *rb, u16_t value)
{
 800a2d6:	b580      	push	{r7, lr}
 800a2d8:	b082      	sub	sp, #8
 800a2da:	af00      	add	r7, sp, #0
 800a2dc:	6078      	str	r0, [r7, #4]
 800a2de:	460b      	mov	r3, r1
 800a2e0:	807b      	strh	r3, [r7, #2]
  mqtt_ringbuf_put(rb, value >> 8);
 800a2e2:	887b      	ldrh	r3, [r7, #2]
 800a2e4:	0a1b      	lsrs	r3, r3, #8
 800a2e6:	b29b      	uxth	r3, r3
 800a2e8:	b2db      	uxtb	r3, r3
 800a2ea:	4619      	mov	r1, r3
 800a2ec:	6878      	ldr	r0, [r7, #4]
 800a2ee:	f7ff fdaf 	bl	8009e50 <mqtt_ringbuf_put>
  mqtt_ringbuf_put(rb, value & 0xff);
 800a2f2:	887b      	ldrh	r3, [r7, #2]
 800a2f4:	b2db      	uxtb	r3, r3
 800a2f6:	4619      	mov	r1, r3
 800a2f8:	6878      	ldr	r0, [r7, #4]
 800a2fa:	f7ff fda9 	bl	8009e50 <mqtt_ringbuf_put>
}
 800a2fe:	bf00      	nop
 800a300:	3708      	adds	r7, #8
 800a302:	46bd      	mov	sp, r7
 800a304:	bd80      	pop	{r7, pc}

0800a306 <mqtt_output_append_string>:
  }
}

static void
mqtt_output_append_string(struct mqtt_ringbuf_t *rb, const char *str, u16_t length)
{
 800a306:	b580      	push	{r7, lr}
 800a308:	b086      	sub	sp, #24
 800a30a:	af00      	add	r7, sp, #0
 800a30c:	60f8      	str	r0, [r7, #12]
 800a30e:	60b9      	str	r1, [r7, #8]
 800a310:	4613      	mov	r3, r2
 800a312:	80fb      	strh	r3, [r7, #6]
  u16_t n;
  mqtt_ringbuf_put(rb, length >> 8);
 800a314:	88fb      	ldrh	r3, [r7, #6]
 800a316:	0a1b      	lsrs	r3, r3, #8
 800a318:	b29b      	uxth	r3, r3
 800a31a:	b2db      	uxtb	r3, r3
 800a31c:	4619      	mov	r1, r3
 800a31e:	68f8      	ldr	r0, [r7, #12]
 800a320:	f7ff fd96 	bl	8009e50 <mqtt_ringbuf_put>
  mqtt_ringbuf_put(rb, length & 0xff);
 800a324:	88fb      	ldrh	r3, [r7, #6]
 800a326:	b2db      	uxtb	r3, r3
 800a328:	4619      	mov	r1, r3
 800a32a:	68f8      	ldr	r0, [r7, #12]
 800a32c:	f7ff fd90 	bl	8009e50 <mqtt_ringbuf_put>
  for (n = 0; n < length; n++) {
 800a330:	2300      	movs	r3, #0
 800a332:	82fb      	strh	r3, [r7, #22]
 800a334:	e00a      	b.n	800a34c <mqtt_output_append_string+0x46>
    mqtt_ringbuf_put(rb, str[n]);
 800a336:	8afb      	ldrh	r3, [r7, #22]
 800a338:	68ba      	ldr	r2, [r7, #8]
 800a33a:	4413      	add	r3, r2
 800a33c:	781b      	ldrb	r3, [r3, #0]
 800a33e:	4619      	mov	r1, r3
 800a340:	68f8      	ldr	r0, [r7, #12]
 800a342:	f7ff fd85 	bl	8009e50 <mqtt_ringbuf_put>
  for (n = 0; n < length; n++) {
 800a346:	8afb      	ldrh	r3, [r7, #22]
 800a348:	3301      	adds	r3, #1
 800a34a:	82fb      	strh	r3, [r7, #22]
 800a34c:	8afa      	ldrh	r2, [r7, #22]
 800a34e:	88fb      	ldrh	r3, [r7, #6]
 800a350:	429a      	cmp	r2, r3
 800a352:	d3f0      	bcc.n	800a336 <mqtt_output_append_string+0x30>
  }
}
 800a354:	bf00      	nop
 800a356:	bf00      	nop
 800a358:	3718      	adds	r7, #24
 800a35a:	46bd      	mov	sp, r7
 800a35c:	bd80      	pop	{r7, pc}

0800a35e <mqtt_output_append_fixed_header>:
 */

static void
mqtt_output_append_fixed_header(struct mqtt_ringbuf_t *rb, u8_t msg_type, u8_t fdup,
                                u8_t fqos, u8_t fretain, u16_t r_length)
{
 800a35e:	b580      	push	{r7, lr}
 800a360:	b082      	sub	sp, #8
 800a362:	af00      	add	r7, sp, #0
 800a364:	6078      	str	r0, [r7, #4]
 800a366:	4608      	mov	r0, r1
 800a368:	4611      	mov	r1, r2
 800a36a:	461a      	mov	r2, r3
 800a36c:	4603      	mov	r3, r0
 800a36e:	70fb      	strb	r3, [r7, #3]
 800a370:	460b      	mov	r3, r1
 800a372:	70bb      	strb	r3, [r7, #2]
 800a374:	4613      	mov	r3, r2
 800a376:	707b      	strb	r3, [r7, #1]
  /* Start with control byte */
  mqtt_output_append_u8(rb, (((msg_type & 0x0f) << 4) | ((fdup & 1) << 3) | ((fqos & 3) << 1) | (fretain & 1)));
 800a378:	78fb      	ldrb	r3, [r7, #3]
 800a37a:	011b      	lsls	r3, r3, #4
 800a37c:	b25a      	sxtb	r2, r3
 800a37e:	78bb      	ldrb	r3, [r7, #2]
 800a380:	00db      	lsls	r3, r3, #3
 800a382:	b25b      	sxtb	r3, r3
 800a384:	f003 0308 	and.w	r3, r3, #8
 800a388:	b25b      	sxtb	r3, r3
 800a38a:	4313      	orrs	r3, r2
 800a38c:	b25a      	sxtb	r2, r3
 800a38e:	787b      	ldrb	r3, [r7, #1]
 800a390:	005b      	lsls	r3, r3, #1
 800a392:	b25b      	sxtb	r3, r3
 800a394:	f003 0306 	and.w	r3, r3, #6
 800a398:	b25b      	sxtb	r3, r3
 800a39a:	4313      	orrs	r3, r2
 800a39c:	b25a      	sxtb	r2, r3
 800a39e:	f997 3010 	ldrsb.w	r3, [r7, #16]
 800a3a2:	f003 0301 	and.w	r3, r3, #1
 800a3a6:	b25b      	sxtb	r3, r3
 800a3a8:	4313      	orrs	r3, r2
 800a3aa:	b25b      	sxtb	r3, r3
 800a3ac:	b2db      	uxtb	r3, r3
 800a3ae:	4619      	mov	r1, r3
 800a3b0:	6878      	ldr	r0, [r7, #4]
 800a3b2:	f7ff ff81 	bl	800a2b8 <mqtt_output_append_u8>
  /* Encode remaining length field */
  do {
    mqtt_output_append_u8(rb, (r_length & 0x7f) | (r_length >= 128 ? 0x80 : 0));
 800a3b6:	8abb      	ldrh	r3, [r7, #20]
 800a3b8:	b25b      	sxtb	r3, r3
 800a3ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a3be:	b25b      	sxtb	r3, r3
 800a3c0:	8aba      	ldrh	r2, [r7, #20]
 800a3c2:	2a7f      	cmp	r2, #127	; 0x7f
 800a3c4:	d902      	bls.n	800a3cc <mqtt_output_append_fixed_header+0x6e>
 800a3c6:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 800a3ca:	e000      	b.n	800a3ce <mqtt_output_append_fixed_header+0x70>
 800a3cc:	2200      	movs	r2, #0
 800a3ce:	4313      	orrs	r3, r2
 800a3d0:	b25b      	sxtb	r3, r3
 800a3d2:	b2db      	uxtb	r3, r3
 800a3d4:	4619      	mov	r1, r3
 800a3d6:	6878      	ldr	r0, [r7, #4]
 800a3d8:	f7ff ff6e 	bl	800a2b8 <mqtt_output_append_u8>
    r_length >>= 7;
 800a3dc:	8abb      	ldrh	r3, [r7, #20]
 800a3de:	09db      	lsrs	r3, r3, #7
 800a3e0:	82bb      	strh	r3, [r7, #20]
  } while (r_length > 0);
 800a3e2:	8abb      	ldrh	r3, [r7, #20]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d1e6      	bne.n	800a3b6 <mqtt_output_append_fixed_header+0x58>
}
 800a3e8:	bf00      	nop
 800a3ea:	bf00      	nop
 800a3ec:	3708      	adds	r7, #8
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	bd80      	pop	{r7, pc}
	...

0800a3f4 <mqtt_output_check_space>:
 * @param r_length Remaining length after fixed header
 * @return 1 if message will fit, 0 if not enough buffer space
 */
static u8_t
mqtt_output_check_space(struct mqtt_ringbuf_t *rb, u16_t r_length)
{
 800a3f4:	b590      	push	{r4, r7, lr}
 800a3f6:	b085      	sub	sp, #20
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]
 800a3fc:	460b      	mov	r3, r1
 800a3fe:	807b      	strh	r3, [r7, #2]
  /* Start with length of type byte + remaining length */
  u16_t total_len = 1 + r_length;
 800a400:	887b      	ldrh	r3, [r7, #2]
 800a402:	3301      	adds	r3, #1
 800a404:	81fb      	strh	r3, [r7, #14]

  LWIP_ASSERT("mqtt_output_check_space: rb != NULL", rb != NULL);
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d106      	bne.n	800a41a <mqtt_output_check_space+0x26>
 800a40c:	4b0f      	ldr	r3, [pc, #60]	; (800a44c <mqtt_output_check_space+0x58>)
 800a40e:	f240 2207 	movw	r2, #519	; 0x207
 800a412:	490f      	ldr	r1, [pc, #60]	; (800a450 <mqtt_output_check_space+0x5c>)
 800a414:	480f      	ldr	r0, [pc, #60]	; (800a454 <mqtt_output_check_space+0x60>)
 800a416:	f00c fc33 	bl	8016c80 <iprintf>

  /* Calculate number of required bytes to contain the remaining bytes field and add to total*/
  do {
    total_len++;
 800a41a:	89fb      	ldrh	r3, [r7, #14]
 800a41c:	3301      	adds	r3, #1
 800a41e:	81fb      	strh	r3, [r7, #14]
    r_length >>= 7;
 800a420:	887b      	ldrh	r3, [r7, #2]
 800a422:	09db      	lsrs	r3, r3, #7
 800a424:	807b      	strh	r3, [r7, #2]
  } while (r_length > 0);
 800a426:	887b      	ldrh	r3, [r7, #2]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d1f6      	bne.n	800a41a <mqtt_output_check_space+0x26>

  return (total_len <= mqtt_ringbuf_free(rb));
 800a42c:	89fc      	ldrh	r4, [r7, #14]
 800a42e:	6878      	ldr	r0, [r7, #4]
 800a430:	f7ff fd68 	bl	8009f04 <mqtt_ringbuf_len>
 800a434:	4603      	mov	r3, r0
 800a436:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800a43a:	429c      	cmp	r4, r3
 800a43c:	bfd4      	ite	le
 800a43e:	2301      	movle	r3, #1
 800a440:	2300      	movgt	r3, #0
 800a442:	b2db      	uxtb	r3, r3
}
 800a444:	4618      	mov	r0, r3
 800a446:	3714      	adds	r7, #20
 800a448:	46bd      	mov	sp, r7
 800a44a:	bd90      	pop	{r4, r7, pc}
 800a44c:	080179c8 	.word	0x080179c8
 800a450:	08017b98 	.word	0x08017b98
 800a454:	08017a40 	.word	0x08017a40

0800a458 <mqtt_close>:
 * @param client MQTT client
 * @param reason Reason for disconnection
 */
static void
mqtt_close(mqtt_client_t *client, mqtt_connection_status_t reason)
{
 800a458:	b580      	push	{r7, lr}
 800a45a:	b084      	sub	sp, #16
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
 800a460:	460b      	mov	r3, r1
 800a462:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("mqtt_close: client != NULL", client != NULL);
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d106      	bne.n	800a478 <mqtt_close+0x20>
 800a46a:	4b27      	ldr	r3, [pc, #156]	; (800a508 <mqtt_close+0xb0>)
 800a46c:	f240 221b 	movw	r2, #539	; 0x21b
 800a470:	4926      	ldr	r1, [pc, #152]	; (800a50c <mqtt_close+0xb4>)
 800a472:	4827      	ldr	r0, [pc, #156]	; (800a510 <mqtt_close+0xb8>)
 800a474:	f00c fc04 	bl	8016c80 <iprintf>

  /* Bring down TCP connection if not already done */
  if (client->conn != NULL) {
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	68db      	ldr	r3, [r3, #12]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d024      	beq.n	800a4ca <mqtt_close+0x72>
    err_t res;
    altcp_recv(client->conn, NULL);
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	68db      	ldr	r3, [r3, #12]
 800a484:	2100      	movs	r1, #0
 800a486:	4618      	mov	r0, r3
 800a488:	f004 fabe 	bl	800ea08 <tcp_recv>
    altcp_err(client->conn,  NULL);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	68db      	ldr	r3, [r3, #12]
 800a490:	2100      	movs	r1, #0
 800a492:	4618      	mov	r0, r3
 800a494:	f004 fafc 	bl	800ea90 <tcp_err>
    altcp_sent(client->conn, NULL);
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	68db      	ldr	r3, [r3, #12]
 800a49c:	2100      	movs	r1, #0
 800a49e:	4618      	mov	r0, r3
 800a4a0:	f004 fad4 	bl	800ea4c <tcp_sent>
    res = altcp_close(client->conn);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	68db      	ldr	r3, [r3, #12]
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	f003 f8d7 	bl	800d65c <tcp_close>
 800a4ae:	4603      	mov	r3, r0
 800a4b0:	73fb      	strb	r3, [r7, #15]
    if (res != ERR_OK) {
 800a4b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d004      	beq.n	800a4c4 <mqtt_close+0x6c>
      altcp_abort(client->conn);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	68db      	ldr	r3, [r3, #12]
 800a4be:	4618      	mov	r0, r3
 800a4c0:	f003 f9b6 	bl	800d830 <tcp_abort>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_close: Close err=%s\n", lwip_strerr(res)));
    }
    client->conn = NULL;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	60da      	str	r2, [r3, #12]
  }

  /* Remove all pending requests */
  mqtt_clear_requests(&client->pend_req_queue);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	3318      	adds	r3, #24
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	f7ff fe9a 	bl	800a208 <mqtt_clear_requests>
  /* Stop cyclic timer */
  sys_untimeout(mqtt_cyclic_timer, client);
 800a4d4:	6879      	ldr	r1, [r7, #4]
 800a4d6:	480f      	ldr	r0, [pc, #60]	; (800a514 <mqtt_close+0xbc>)
 800a4d8:	f009 f816 	bl	8013508 <sys_untimeout>

  /* Notify upper layer of disconnection if changed state */
  if (client->conn_state != TCP_DISCONNECTED) {
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	7a9b      	ldrb	r3, [r3, #10]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d00d      	beq.n	800a500 <mqtt_close+0xa8>

    client->conn_state = TCP_DISCONNECTED;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	729a      	strb	r2, [r3, #10]
    if (client->connect_cb != NULL) {
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	695b      	ldr	r3, [r3, #20]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d006      	beq.n	800a500 <mqtt_close+0xa8>
      client->connect_cb(client, client->connect_arg, reason);
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	695b      	ldr	r3, [r3, #20]
 800a4f6:	687a      	ldr	r2, [r7, #4]
 800a4f8:	6911      	ldr	r1, [r2, #16]
 800a4fa:	887a      	ldrh	r2, [r7, #2]
 800a4fc:	6878      	ldr	r0, [r7, #4]
 800a4fe:	4798      	blx	r3
    }
  }
}
 800a500:	bf00      	nop
 800a502:	3710      	adds	r7, #16
 800a504:	46bd      	mov	sp, r7
 800a506:	bd80      	pop	{r7, pc}
 800a508:	080179c8 	.word	0x080179c8
 800a50c:	08017bbc 	.word	0x08017bbc
 800a510:	08017a40 	.word	0x08017a40
 800a514:	0800a519 	.word	0x0800a519

0800a518 <mqtt_cyclic_timer>:
 * Interval timer, called every MQTT_CYCLIC_TIMER_INTERVAL seconds in MQTT_CONNECTING and MQTT_CONNECTED states
 * @param arg MQTT client
 */
static void
mqtt_cyclic_timer(void *arg)
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	b086      	sub	sp, #24
 800a51c:	af02      	add	r7, sp, #8
 800a51e:	6078      	str	r0, [r7, #4]
  u8_t restart_timer = 1;
 800a520:	2301      	movs	r3, #1
 800a522:	73fb      	strb	r3, [r7, #15]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	60bb      	str	r3, [r7, #8]
  LWIP_ASSERT("mqtt_cyclic_timer: client != NULL", client != NULL);
 800a528:	68bb      	ldr	r3, [r7, #8]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d106      	bne.n	800a53c <mqtt_cyclic_timer+0x24>
 800a52e:	4b42      	ldr	r3, [pc, #264]	; (800a638 <mqtt_cyclic_timer+0x120>)
 800a530:	f44f 7211 	mov.w	r2, #580	; 0x244
 800a534:	4941      	ldr	r1, [pc, #260]	; (800a63c <mqtt_cyclic_timer+0x124>)
 800a536:	4842      	ldr	r0, [pc, #264]	; (800a640 <mqtt_cyclic_timer+0x128>)
 800a538:	f00c fba2 	bl	8016c80 <iprintf>

  if (client->conn_state == MQTT_CONNECTING) {
 800a53c:	68bb      	ldr	r3, [r7, #8]
 800a53e:	7a9b      	ldrb	r3, [r3, #10]
 800a540:	2b02      	cmp	r3, #2
 800a542:	d115      	bne.n	800a570 <mqtt_cyclic_timer+0x58>
    client->cyclic_tick++;
 800a544:	68bb      	ldr	r3, [r7, #8]
 800a546:	881b      	ldrh	r3, [r3, #0]
 800a548:	3301      	adds	r3, #1
 800a54a:	b29a      	uxth	r2, r3
 800a54c:	68bb      	ldr	r3, [r7, #8]
 800a54e:	801a      	strh	r2, [r3, #0]
    if ((client->cyclic_tick * MQTT_CYCLIC_TIMER_INTERVAL) >= MQTT_CONNECT_TIMOUT) {
 800a550:	68bb      	ldr	r3, [r7, #8]
 800a552:	881b      	ldrh	r3, [r3, #0]
 800a554:	461a      	mov	r2, r3
 800a556:	4613      	mov	r3, r2
 800a558:	009b      	lsls	r3, r3, #2
 800a55a:	4413      	add	r3, r2
 800a55c:	2b63      	cmp	r3, #99	; 0x63
 800a55e:	dd5e      	ble.n	800a61e <mqtt_cyclic_timer+0x106>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_cyclic_timer: CONNECT attempt to server timed out\n"));
      /* Disconnect TCP */
      mqtt_close(client, MQTT_CONNECT_TIMEOUT);
 800a560:	f240 1101 	movw	r1, #257	; 0x101
 800a564:	68b8      	ldr	r0, [r7, #8]
 800a566:	f7ff ff77 	bl	800a458 <mqtt_close>
      restart_timer = 0;
 800a56a:	2300      	movs	r3, #0
 800a56c:	73fb      	strb	r3, [r7, #15]
 800a56e:	e056      	b.n	800a61e <mqtt_cyclic_timer+0x106>
    }
  } else if (client->conn_state == MQTT_CONNECTED) {
 800a570:	68bb      	ldr	r3, [r7, #8]
 800a572:	7a9b      	ldrb	r3, [r3, #10]
 800a574:	2b03      	cmp	r3, #3
 800a576:	d150      	bne.n	800a61a <mqtt_cyclic_timer+0x102>
    /* Handle timeout for pending requests */
    mqtt_request_time_elapsed(&client->pend_req_queue, MQTT_CYCLIC_TIMER_INTERVAL);
 800a578:	68bb      	ldr	r3, [r7, #8]
 800a57a:	3318      	adds	r3, #24
 800a57c:	2105      	movs	r1, #5
 800a57e:	4618      	mov	r0, r3
 800a580:	f7ff fdf0 	bl	800a164 <mqtt_request_time_elapsed>

    /* keep_alive > 0 means keep alive functionality shall be used */
    if (client->keep_alive > 0) {
 800a584:	68bb      	ldr	r3, [r7, #8]
 800a586:	885b      	ldrh	r3, [r3, #2]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d048      	beq.n	800a61e <mqtt_cyclic_timer+0x106>

      client->server_watchdog++;
 800a58c:	68bb      	ldr	r3, [r7, #8]
 800a58e:	889b      	ldrh	r3, [r3, #4]
 800a590:	3301      	adds	r3, #1
 800a592:	b29a      	uxth	r2, r3
 800a594:	68bb      	ldr	r3, [r7, #8]
 800a596:	809a      	strh	r2, [r3, #4]
      /* If reception from server has been idle for 1.5*keep_alive time, server is considered unresponsive */
      if ((client->server_watchdog * MQTT_CYCLIC_TIMER_INTERVAL) > (client->keep_alive + client->keep_alive / 2)) {
 800a598:	68bb      	ldr	r3, [r7, #8]
 800a59a:	889b      	ldrh	r3, [r3, #4]
 800a59c:	461a      	mov	r2, r3
 800a59e:	4613      	mov	r3, r2
 800a5a0:	009b      	lsls	r3, r3, #2
 800a5a2:	441a      	add	r2, r3
 800a5a4:	68bb      	ldr	r3, [r7, #8]
 800a5a6:	885b      	ldrh	r3, [r3, #2]
 800a5a8:	4619      	mov	r1, r3
 800a5aa:	68bb      	ldr	r3, [r7, #8]
 800a5ac:	885b      	ldrh	r3, [r3, #2]
 800a5ae:	085b      	lsrs	r3, r3, #1
 800a5b0:	b29b      	uxth	r3, r3
 800a5b2:	440b      	add	r3, r1
 800a5b4:	429a      	cmp	r2, r3
 800a5b6:	dd06      	ble.n	800a5c6 <mqtt_cyclic_timer+0xae>
        LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_cyclic_timer: Server incoming keep-alive timeout\n"));
        mqtt_close(client, MQTT_CONNECT_TIMEOUT);
 800a5b8:	f240 1101 	movw	r1, #257	; 0x101
 800a5bc:	68b8      	ldr	r0, [r7, #8]
 800a5be:	f7ff ff4b 	bl	800a458 <mqtt_close>
        restart_timer = 0;
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	73fb      	strb	r3, [r7, #15]
      }

      /* If time for a keep alive message to be sent, transmission has been idle for keep_alive time */
      if ((client->cyclic_tick * MQTT_CYCLIC_TIMER_INTERVAL) >= client->keep_alive) {
 800a5c6:	68bb      	ldr	r3, [r7, #8]
 800a5c8:	881b      	ldrh	r3, [r3, #0]
 800a5ca:	461a      	mov	r2, r3
 800a5cc:	4613      	mov	r3, r2
 800a5ce:	009b      	lsls	r3, r3, #2
 800a5d0:	4413      	add	r3, r2
 800a5d2:	68ba      	ldr	r2, [r7, #8]
 800a5d4:	8852      	ldrh	r2, [r2, #2]
 800a5d6:	4293      	cmp	r3, r2
 800a5d8:	db18      	blt.n	800a60c <mqtt_cyclic_timer+0xf4>
        LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_cyclic_timer: Sending keep-alive message to server\n"));
        if (mqtt_output_check_space(&client->output, 0) != 0) {
 800a5da:	68bb      	ldr	r3, [r7, #8]
 800a5dc:	33ec      	adds	r3, #236	; 0xec
 800a5de:	2100      	movs	r1, #0
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	f7ff ff07 	bl	800a3f4 <mqtt_output_check_space>
 800a5e6:	4603      	mov	r3, r0
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d018      	beq.n	800a61e <mqtt_cyclic_timer+0x106>
          mqtt_output_append_fixed_header(&client->output, MQTT_MSG_TYPE_PINGREQ, 0, 0, 0, 0);
 800a5ec:	68bb      	ldr	r3, [r7, #8]
 800a5ee:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	9301      	str	r3, [sp, #4]
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	9300      	str	r3, [sp, #0]
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	210c      	movs	r1, #12
 800a600:	f7ff fead 	bl	800a35e <mqtt_output_append_fixed_header>
          client->cyclic_tick = 0;
 800a604:	68bb      	ldr	r3, [r7, #8]
 800a606:	2200      	movs	r2, #0
 800a608:	801a      	strh	r2, [r3, #0]
 800a60a:	e008      	b.n	800a61e <mqtt_cyclic_timer+0x106>
        }
      } else {
        client->cyclic_tick++;
 800a60c:	68bb      	ldr	r3, [r7, #8]
 800a60e:	881b      	ldrh	r3, [r3, #0]
 800a610:	3301      	adds	r3, #1
 800a612:	b29a      	uxth	r2, r3
 800a614:	68bb      	ldr	r3, [r7, #8]
 800a616:	801a      	strh	r2, [r3, #0]
 800a618:	e001      	b.n	800a61e <mqtt_cyclic_timer+0x106>
      }
    }
  } else {
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_cyclic_timer: Timer should not be running in state %d\n", client->conn_state));
    restart_timer = 0;
 800a61a:	2300      	movs	r3, #0
 800a61c:	73fb      	strb	r3, [r7, #15]
  }
  if (restart_timer) {
 800a61e:	7bfb      	ldrb	r3, [r7, #15]
 800a620:	2b00      	cmp	r3, #0
 800a622:	d005      	beq.n	800a630 <mqtt_cyclic_timer+0x118>
    sys_timeout(MQTT_CYCLIC_TIMER_INTERVAL * 1000, mqtt_cyclic_timer, arg);
 800a624:	687a      	ldr	r2, [r7, #4]
 800a626:	4907      	ldr	r1, [pc, #28]	; (800a644 <mqtt_cyclic_timer+0x12c>)
 800a628:	f241 3088 	movw	r0, #5000	; 0x1388
 800a62c:	f008 ff46 	bl	80134bc <sys_timeout>
  }
}
 800a630:	bf00      	nop
 800a632:	3710      	adds	r7, #16
 800a634:	46bd      	mov	sp, r7
 800a636:	bd80      	pop	{r7, pc}
 800a638:	080179c8 	.word	0x080179c8
 800a63c:	08017bd8 	.word	0x08017bd8
 800a640:	08017a40 	.word	0x08017a40
 800a644:	0800a519 	.word	0x0800a519

0800a648 <pub_ack_rec_rel_response>:
 * @param qos QoS value
 * @return ERR_OK if successful, ERR_MEM if out of memory
 */
static err_t
pub_ack_rec_rel_response(mqtt_client_t *client, u8_t msg, u16_t pkt_id, u8_t qos)
{
 800a648:	b580      	push	{r7, lr}
 800a64a:	b086      	sub	sp, #24
 800a64c:	af02      	add	r7, sp, #8
 800a64e:	6078      	str	r0, [r7, #4]
 800a650:	4608      	mov	r0, r1
 800a652:	4611      	mov	r1, r2
 800a654:	461a      	mov	r2, r3
 800a656:	4603      	mov	r3, r0
 800a658:	70fb      	strb	r3, [r7, #3]
 800a65a:	460b      	mov	r3, r1
 800a65c:	803b      	strh	r3, [r7, #0]
 800a65e:	4613      	mov	r3, r2
 800a660:	70bb      	strb	r3, [r7, #2]
  err_t err = ERR_OK;
 800a662:	2300      	movs	r3, #0
 800a664:	73fb      	strb	r3, [r7, #15]
  if (mqtt_output_check_space(&client->output, 2)) {
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	33ec      	adds	r3, #236	; 0xec
 800a66a:	2102      	movs	r1, #2
 800a66c:	4618      	mov	r0, r3
 800a66e:	f7ff fec1 	bl	800a3f4 <mqtt_output_check_space>
 800a672:	4603      	mov	r3, r0
 800a674:	2b00      	cmp	r3, #0
 800a676:	d01c      	beq.n	800a6b2 <pub_ack_rec_rel_response+0x6a>
    mqtt_output_append_fixed_header(&client->output, msg, 0, qos, 0, 2);
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 800a67e:	78bb      	ldrb	r3, [r7, #2]
 800a680:	78f9      	ldrb	r1, [r7, #3]
 800a682:	2202      	movs	r2, #2
 800a684:	9201      	str	r2, [sp, #4]
 800a686:	2200      	movs	r2, #0
 800a688:	9200      	str	r2, [sp, #0]
 800a68a:	2200      	movs	r2, #0
 800a68c:	f7ff fe67 	bl	800a35e <mqtt_output_append_fixed_header>
    mqtt_output_append_u16(&client->output, pkt_id);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	33ec      	adds	r3, #236	; 0xec
 800a694:	883a      	ldrh	r2, [r7, #0]
 800a696:	4611      	mov	r1, r2
 800a698:	4618      	mov	r0, r3
 800a69a:	f7ff fe1c 	bl	800a2d6 <mqtt_output_append_u16>
    mqtt_output_send(&client->output, client->conn);
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	68db      	ldr	r3, [r3, #12]
 800a6a8:	4619      	mov	r1, r3
 800a6aa:	4610      	mov	r0, r2
 800a6ac:	f7ff fc44 	bl	8009f38 <mqtt_output_send>
 800a6b0:	e001      	b.n	800a6b6 <pub_ack_rec_rel_response+0x6e>
  } else {
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("pub_ack_rec_rel_response: OOM creating response: %s with pkt_id: %d\n",
                                   mqtt_msg_type_to_str(msg), pkt_id));
    err = ERR_MEM;
 800a6b2:	23ff      	movs	r3, #255	; 0xff
 800a6b4:	73fb      	strb	r3, [r7, #15]
  }
  return err;
 800a6b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	3710      	adds	r7, #16
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	bd80      	pop	{r7, pc}

0800a6c2 <mqtt_incomming_suback>:
 * @param r Matching request
 * @param result Result code from server
 */
static void
mqtt_incomming_suback(struct mqtt_request_t *r, u8_t result)
{
 800a6c2:	b580      	push	{r7, lr}
 800a6c4:	b082      	sub	sp, #8
 800a6c6:	af00      	add	r7, sp, #0
 800a6c8:	6078      	str	r0, [r7, #4]
 800a6ca:	460b      	mov	r3, r1
 800a6cc:	70fb      	strb	r3, [r7, #3]
  if (r->cb != NULL) {
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	685b      	ldr	r3, [r3, #4]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d00c      	beq.n	800a6f0 <mqtt_incomming_suback+0x2e>
    r->cb(r->arg, result < 3 ? ERR_OK : ERR_ABRT);
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	685b      	ldr	r3, [r3, #4]
 800a6da:	687a      	ldr	r2, [r7, #4]
 800a6dc:	6890      	ldr	r0, [r2, #8]
 800a6de:	78fa      	ldrb	r2, [r7, #3]
 800a6e0:	2a02      	cmp	r2, #2
 800a6e2:	d801      	bhi.n	800a6e8 <mqtt_incomming_suback+0x26>
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	e001      	b.n	800a6ec <mqtt_incomming_suback+0x2a>
 800a6e8:	f06f 020c 	mvn.w	r2, #12
 800a6ec:	4611      	mov	r1, r2
 800a6ee:	4798      	blx	r3
  }
}
 800a6f0:	bf00      	nop
 800a6f2:	3708      	adds	r7, #8
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	bd80      	pop	{r7, pc}

0800a6f8 <mqtt_message_received>:
 * @param length length received part
 * @param remaining_length Remaining length of complete message
 */
static mqtt_connection_status_t
mqtt_message_received(mqtt_client_t *client, u8_t fixed_hdr_idx, u16_t length, u32_t remaining_length)
{
 800a6f8:	b590      	push	{r4, r7, lr}
 800a6fa:	b08f      	sub	sp, #60	; 0x3c
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	60f8      	str	r0, [r7, #12]
 800a700:	607b      	str	r3, [r7, #4]
 800a702:	460b      	mov	r3, r1
 800a704:	72fb      	strb	r3, [r7, #11]
 800a706:	4613      	mov	r3, r2
 800a708:	813b      	strh	r3, [r7, #8]
  mqtt_connection_status_t res = MQTT_CONNECT_ACCEPTED;
 800a70a:	2300      	movs	r3, #0
 800a70c:	86fb      	strh	r3, [r7, #54]	; 0x36

  u8_t *var_hdr_payload = client->rx_buffer + fixed_hdr_idx;
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 800a714:	7afb      	ldrb	r3, [r7, #11]
 800a716:	4413      	add	r3, r2
 800a718:	62fb      	str	r3, [r7, #44]	; 0x2c
  size_t var_hdr_payload_bufsize = sizeof(client->rx_buffer) - fixed_hdr_idx;
 800a71a:	7afb      	ldrb	r3, [r7, #11]
 800a71c:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800a720:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Control packet type */
  u8_t pkt_type = MQTT_CTL_PACKET_TYPE(client->rx_buffer[0]);
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800a728:	091b      	lsrs	r3, r3, #4
 800a72a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  u16_t pkt_id = 0;
 800a72e:	2300      	movs	r3, #0
 800a730:	84bb      	strh	r3, [r7, #36]	; 0x24

  LWIP_ASSERT("client->msg_idx < MQTT_VAR_HEADER_BUFFER_LEN", client->msg_idx < MQTT_VAR_HEADER_BUFFER_LEN);
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a736:	2b7f      	cmp	r3, #127	; 0x7f
 800a738:	d906      	bls.n	800a748 <mqtt_message_received+0x50>
 800a73a:	4b97      	ldr	r3, [pc, #604]	; (800a998 <mqtt_message_received+0x2a0>)
 800a73c:	f240 22ab 	movw	r2, #683	; 0x2ab
 800a740:	4996      	ldr	r1, [pc, #600]	; (800a99c <mqtt_message_received+0x2a4>)
 800a742:	4897      	ldr	r0, [pc, #604]	; (800a9a0 <mqtt_message_received+0x2a8>)
 800a744:	f00c fa9c 	bl	8016c80 <iprintf>
  LWIP_ASSERT("fixed_hdr_idx <= client->msg_idx", fixed_hdr_idx <= client->msg_idx);
 800a748:	7afa      	ldrb	r2, [r7, #11]
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a74e:	429a      	cmp	r2, r3
 800a750:	d906      	bls.n	800a760 <mqtt_message_received+0x68>
 800a752:	4b91      	ldr	r3, [pc, #580]	; (800a998 <mqtt_message_received+0x2a0>)
 800a754:	f44f 722b 	mov.w	r2, #684	; 0x2ac
 800a758:	4992      	ldr	r1, [pc, #584]	; (800a9a4 <mqtt_message_received+0x2ac>)
 800a75a:	4891      	ldr	r0, [pc, #580]	; (800a9a0 <mqtt_message_received+0x2a8>)
 800a75c:	f00c fa90 	bl	8016c80 <iprintf>
  LWIP_ERROR("buffer length mismatch", fixed_hdr_idx + length <= MQTT_VAR_HEADER_BUFFER_LEN,
 800a760:	7afa      	ldrb	r2, [r7, #11]
 800a762:	893b      	ldrh	r3, [r7, #8]
 800a764:	4413      	add	r3, r2
 800a766:	2b80      	cmp	r3, #128	; 0x80
 800a768:	dd09      	ble.n	800a77e <mqtt_message_received+0x86>
 800a76a:	4b8b      	ldr	r3, [pc, #556]	; (800a998 <mqtt_message_received+0x2a0>)
 800a76c:	f240 22ad 	movw	r2, #685	; 0x2ad
 800a770:	498d      	ldr	r1, [pc, #564]	; (800a9a8 <mqtt_message_received+0x2b0>)
 800a772:	488b      	ldr	r0, [pc, #556]	; (800a9a0 <mqtt_message_received+0x2a8>)
 800a774:	f00c fa84 	bl	8016c80 <iprintf>
 800a778:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a77c:	e16f      	b.n	800aa5e <mqtt_message_received+0x366>
             return MQTT_CONNECT_DISCONNECTED);

  if (pkt_type == MQTT_MSG_TYPE_CONNACK) {
 800a77e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a782:	2b02      	cmp	r3, #2
 800a784:	d123      	bne.n	800a7ce <mqtt_message_received+0xd6>
    if (client->conn_state == MQTT_CONNECTING) {
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	7a9b      	ldrb	r3, [r3, #10]
 800a78a:	2b02      	cmp	r3, #2
 800a78c:	f040 8152 	bne.w	800aa34 <mqtt_message_received+0x33c>
      if (length < 2) {
 800a790:	893b      	ldrh	r3, [r7, #8]
 800a792:	2b01      	cmp	r3, #1
 800a794:	f240 8150 	bls.w	800aa38 <mqtt_message_received+0x340>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short CONNACK message\n"));
        goto out_disconnect;
      }
      /* Get result code from CONNACK */
      res = (mqtt_connection_status_t)var_hdr_payload[1];
 800a798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a79a:	3301      	adds	r3, #1
 800a79c:	781b      	ldrb	r3, [r3, #0]
 800a79e:	86fb      	strh	r3, [r7, #54]	; 0x36
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: Connect response code %d\n", res));
      if (res == MQTT_CONNECT_ACCEPTED) {
 800a7a0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	f040 8146 	bne.w	800aa34 <mqtt_message_received+0x33c>
        /* Reset cyclic_tick when changing to connected state */
        client->cyclic_tick = 0;
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	801a      	strh	r2, [r3, #0]
        client->conn_state = MQTT_CONNECTED;
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	2203      	movs	r2, #3
 800a7b2:	729a      	strb	r2, [r3, #10]
        /* Notify upper layer */
        if (client->connect_cb != 0) {
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	695b      	ldr	r3, [r3, #20]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	f000 813b 	beq.w	800aa34 <mqtt_message_received+0x33c>
          client->connect_cb(client, client->connect_arg, res);
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	695b      	ldr	r3, [r3, #20]
 800a7c2:	68fa      	ldr	r2, [r7, #12]
 800a7c4:	6911      	ldr	r1, [r2, #16]
 800a7c6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800a7c8:	68f8      	ldr	r0, [r7, #12]
 800a7ca:	4798      	blx	r3
 800a7cc:	e132      	b.n	800aa34 <mqtt_message_received+0x33c>
        }
      }
    } else {
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: Received CONNACK in connected state\n"));
    }
  } else if (pkt_type == MQTT_MSG_TYPE_PINGRESP) {
 800a7ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a7d2:	2b0d      	cmp	r3, #13
 800a7d4:	f000 812e 	beq.w	800aa34 <mqtt_message_received+0x33c>
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ( "mqtt_message_received: Received PINGRESP from server\n"));

  } else if (pkt_type == MQTT_MSG_TYPE_PUBLISH) {
 800a7d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a7dc:	2b03      	cmp	r3, #3
 800a7de:	f040 80c0 	bne.w	800a962 <mqtt_message_received+0x26a>
    u16_t payload_offset = 0;
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	86bb      	strh	r3, [r7, #52]	; 0x34
    u16_t payload_length = length;
 800a7e6:	893b      	ldrh	r3, [r7, #8]
 800a7e8:	867b      	strh	r3, [r7, #50]	; 0x32
    u8_t qos = MQTT_CTL_PACKET_QOS(client->rx_buffer[0]);
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800a7f0:	105b      	asrs	r3, r3, #1
 800a7f2:	b2db      	uxtb	r3, r3
 800a7f4:	f003 0303 	and.w	r3, r3, #3
 800a7f8:	77fb      	strb	r3, [r7, #31]

    if (client->msg_idx <= MQTT_VAR_HEADER_BUFFER_LEN) {
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a7fe:	2b80      	cmp	r3, #128	; 0x80
 800a800:	d87d      	bhi.n	800a8fe <mqtt_message_received+0x206>
      /* Should have topic and pkt id*/
      u8_t *topic;
      u16_t after_topic;
      u8_t bkp;
      u16_t topic_len;
      u16_t qos_len = (qos ? 2U : 0U);
 800a802:	7ffb      	ldrb	r3, [r7, #31]
 800a804:	2b00      	cmp	r3, #0
 800a806:	d001      	beq.n	800a80c <mqtt_message_received+0x114>
 800a808:	2302      	movs	r3, #2
 800a80a:	e000      	b.n	800a80e <mqtt_message_received+0x116>
 800a80c:	2300      	movs	r3, #0
 800a80e:	83bb      	strh	r3, [r7, #28]
      if (length < 2 + qos_len) {
 800a810:	8bbb      	ldrh	r3, [r7, #28]
 800a812:	1c5a      	adds	r2, r3, #1
 800a814:	893b      	ldrh	r3, [r7, #8]
 800a816:	429a      	cmp	r2, r3
 800a818:	f280 8110 	bge.w	800aa3c <mqtt_message_received+0x344>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short PUBLISH packet\n"));
        goto out_disconnect;
      }
      topic_len = var_hdr_payload[0];
 800a81c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a81e:	781b      	ldrb	r3, [r3, #0]
 800a820:	837b      	strh	r3, [r7, #26]
      topic_len = (topic_len << 8) + (u16_t)(var_hdr_payload[1]);
 800a822:	8b7b      	ldrh	r3, [r7, #26]
 800a824:	021b      	lsls	r3, r3, #8
 800a826:	b29a      	uxth	r2, r3
 800a828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a82a:	3301      	adds	r3, #1
 800a82c:	781b      	ldrb	r3, [r3, #0]
 800a82e:	b29b      	uxth	r3, r3
 800a830:	4413      	add	r3, r2
 800a832:	837b      	strh	r3, [r7, #26]
      if ((topic_len > length - (2 + qos_len)) ||
 800a834:	8b7a      	ldrh	r2, [r7, #26]
 800a836:	8939      	ldrh	r1, [r7, #8]
 800a838:	8bbb      	ldrh	r3, [r7, #28]
 800a83a:	3302      	adds	r3, #2
 800a83c:	1acb      	subs	r3, r1, r3
 800a83e:	429a      	cmp	r2, r3
 800a840:	f300 80fe 	bgt.w	800aa40 <mqtt_message_received+0x348>
          (topic_len > var_hdr_payload_bufsize - (2 + qos_len))) {
 800a844:	8b7a      	ldrh	r2, [r7, #26]
 800a846:	8bbb      	ldrh	r3, [r7, #28]
 800a848:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a84a:	1acb      	subs	r3, r1, r3
 800a84c:	3b02      	subs	r3, #2
      if ((topic_len > length - (2 + qos_len)) ||
 800a84e:	429a      	cmp	r2, r3
 800a850:	f200 80f6 	bhi.w	800aa40 <mqtt_message_received+0x348>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short PUBLISH packet (topic)\n"));
        goto out_disconnect;
      }

      topic = var_hdr_payload + 2;
 800a854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a856:	3302      	adds	r3, #2
 800a858:	617b      	str	r3, [r7, #20]
      after_topic = 2 + topic_len;
 800a85a:	8b7b      	ldrh	r3, [r7, #26]
 800a85c:	3302      	adds	r3, #2
 800a85e:	863b      	strh	r3, [r7, #48]	; 0x30
      /* Check buffer length, add one byte even for QoS 0 so that zero termination will fit */
      if ((after_topic + (qos ? 2U : 1U)) > var_hdr_payload_bufsize) {
 800a860:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800a862:	7ffa      	ldrb	r2, [r7, #31]
 800a864:	2a00      	cmp	r2, #0
 800a866:	d001      	beq.n	800a86c <mqtt_message_received+0x174>
 800a868:	2202      	movs	r2, #2
 800a86a:	e000      	b.n	800a86e <mqtt_message_received+0x176>
 800a86c:	2201      	movs	r2, #1
 800a86e:	4413      	add	r3, r2
 800a870:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a872:	429a      	cmp	r2, r3
 800a874:	f0c0 80e6 	bcc.w	800aa44 <mqtt_message_received+0x34c>
        LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: Receive buffer can not fit topic + pkt_id\n"));
        goto out_disconnect;
      }

      /* id for QoS 1 and 2 */
      if (qos > 0) {
 800a878:	7ffb      	ldrb	r3, [r7, #31]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d01a      	beq.n	800a8b4 <mqtt_message_received+0x1bc>
        if (length < after_topic + 2U) {
 800a87e:	893a      	ldrh	r2, [r7, #8]
 800a880:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800a882:	3302      	adds	r3, #2
 800a884:	429a      	cmp	r2, r3
 800a886:	f0c0 80df 	bcc.w	800aa48 <mqtt_message_received+0x350>
          LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short PUBLISH packet (after_topic)\n"));
          goto out_disconnect;
        }
        client->inpub_pkt_id = ((u16_t)var_hdr_payload[after_topic] << 8) + (u16_t)var_hdr_payload[after_topic + 1];
 800a88a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800a88c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a88e:	4413      	add	r3, r2
 800a890:	781b      	ldrb	r3, [r3, #0]
 800a892:	b29b      	uxth	r3, r3
 800a894:	021b      	lsls	r3, r3, #8
 800a896:	b29a      	uxth	r2, r3
 800a898:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800a89a:	3301      	adds	r3, #1
 800a89c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a89e:	440b      	add	r3, r1
 800a8a0:	781b      	ldrb	r3, [r3, #0]
 800a8a2:	b29b      	uxth	r3, r3
 800a8a4:	4413      	add	r3, r2
 800a8a6:	b29a      	uxth	r2, r3
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	811a      	strh	r2, [r3, #8]
        after_topic += 2;
 800a8ac:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800a8ae:	3302      	adds	r3, #2
 800a8b0:	863b      	strh	r3, [r7, #48]	; 0x30
 800a8b2:	e002      	b.n	800a8ba <mqtt_message_received+0x1c2>
      } else {
        client->inpub_pkt_id = 0;
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	811a      	strh	r2, [r3, #8]
      }
      /* Take backup of byte after topic */
      bkp = topic[topic_len];
 800a8ba:	8b7b      	ldrh	r3, [r7, #26]
 800a8bc:	697a      	ldr	r2, [r7, #20]
 800a8be:	4413      	add	r3, r2
 800a8c0:	781b      	ldrb	r3, [r3, #0]
 800a8c2:	74fb      	strb	r3, [r7, #19]
      /* Zero terminate string */
      topic[topic_len] = 0;
 800a8c4:	8b7b      	ldrh	r3, [r7, #26]
 800a8c6:	697a      	ldr	r2, [r7, #20]
 800a8c8:	4413      	add	r3, r2
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	701a      	strb	r2, [r3, #0]
      /* Payload data remaining in receive buffer */
      payload_length = length - after_topic;
 800a8ce:	893a      	ldrh	r2, [r7, #8]
 800a8d0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800a8d2:	1ad3      	subs	r3, r2, r3
 800a8d4:	867b      	strh	r3, [r7, #50]	; 0x32
      payload_offset = after_topic;
 800a8d6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800a8d8:	86bb      	strh	r3, [r7, #52]	; 0x34

      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_incomming_publish: Received message with QoS %d at topic: %s, payload length %"U32_F"\n",
                                     qos, topic, remaining_length + payload_length));
      if (client->pub_cb != NULL) {
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d008      	beq.n	800a8f4 <mqtt_message_received+0x1fc>
        client->pub_cb(client->inpub_arg, (const char *)topic, remaining_length + payload_length);
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a8e6:	68fa      	ldr	r2, [r7, #12]
 800a8e8:	6dd0      	ldr	r0, [r2, #92]	; 0x5c
 800a8ea:	8e79      	ldrh	r1, [r7, #50]	; 0x32
 800a8ec:	687a      	ldr	r2, [r7, #4]
 800a8ee:	440a      	add	r2, r1
 800a8f0:	6979      	ldr	r1, [r7, #20]
 800a8f2:	4798      	blx	r3
      }
      /* Restore byte after topic */
      topic[topic_len] = bkp;
 800a8f4:	8b7b      	ldrh	r3, [r7, #26]
 800a8f6:	697a      	ldr	r2, [r7, #20]
 800a8f8:	4413      	add	r3, r2
 800a8fa:	7cfa      	ldrb	r2, [r7, #19]
 800a8fc:	701a      	strb	r2, [r3, #0]
    }
    if (payload_length > 0 || remaining_length == 0) {
 800a8fe:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800a900:	2b00      	cmp	r3, #0
 800a902:	d103      	bne.n	800a90c <mqtt_message_received+0x214>
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	2b00      	cmp	r3, #0
 800a908:	f040 8094 	bne.w	800aa34 <mqtt_message_received+0x33c>
      if (length < (size_t)(payload_offset + payload_length)) {
 800a90c:	893b      	ldrh	r3, [r7, #8]
 800a90e:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 800a910:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800a912:	440a      	add	r2, r1
 800a914:	4293      	cmp	r3, r2
 800a916:	f0c0 8099 	bcc.w	800aa4c <mqtt_message_received+0x354>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short packet (payload)\n"));
        goto out_disconnect;
      }
      client->data_cb(client->inpub_arg, var_hdr_payload + payload_offset, payload_length, remaining_length == 0 ? MQTT_DATA_FLAG_LAST : 0);
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 800a922:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800a924:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a926:	18d1      	adds	r1, r2, r3
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	bf0c      	ite	eq
 800a92e:	2301      	moveq	r3, #1
 800a930:	2300      	movne	r3, #0
 800a932:	b2db      	uxtb	r3, r3
 800a934:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800a936:	47a0      	blx	r4
      /* Reply if QoS > 0 */
      if (remaining_length == 0 && qos > 0) {
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d17a      	bne.n	800aa34 <mqtt_message_received+0x33c>
 800a93e:	7ffb      	ldrb	r3, [r7, #31]
 800a940:	2b00      	cmp	r3, #0
 800a942:	d077      	beq.n	800aa34 <mqtt_message_received+0x33c>
        /* Send PUBACK for QoS 1 or PUBREC for QoS 2 */
        u8_t resp_msg = (qos == 1) ? MQTT_MSG_TYPE_PUBACK : MQTT_MSG_TYPE_PUBREC;
 800a944:	7ffb      	ldrb	r3, [r7, #31]
 800a946:	2b01      	cmp	r3, #1
 800a948:	d101      	bne.n	800a94e <mqtt_message_received+0x256>
 800a94a:	2304      	movs	r3, #4
 800a94c:	e000      	b.n	800a950 <mqtt_message_received+0x258>
 800a94e:	2305      	movs	r3, #5
 800a950:	74bb      	strb	r3, [r7, #18]
        LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_incomming_publish: Sending publish response: %s with pkt_id: %d\n",
                                       mqtt_msg_type_to_str(resp_msg), client->inpub_pkt_id));
        pub_ack_rec_rel_response(client, resp_msg, client->inpub_pkt_id, 0);
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	891a      	ldrh	r2, [r3, #8]
 800a956:	7cb9      	ldrb	r1, [r7, #18]
 800a958:	2300      	movs	r3, #0
 800a95a:	68f8      	ldr	r0, [r7, #12]
 800a95c:	f7ff fe74 	bl	800a648 <pub_ack_rec_rel_response>
 800a960:	e068      	b.n	800aa34 <mqtt_message_received+0x33c>
      }
    }
  } else {
    /* Get packet identifier */
    pkt_id = (u16_t)var_hdr_payload[0] << 8;
 800a962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a964:	781b      	ldrb	r3, [r3, #0]
 800a966:	b29b      	uxth	r3, r3
 800a968:	021b      	lsls	r3, r3, #8
 800a96a:	84bb      	strh	r3, [r7, #36]	; 0x24
    pkt_id |= (u16_t)var_hdr_payload[1];
 800a96c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a96e:	3301      	adds	r3, #1
 800a970:	781b      	ldrb	r3, [r3, #0]
 800a972:	b29a      	uxth	r2, r3
 800a974:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a976:	4313      	orrs	r3, r2
 800a978:	84bb      	strh	r3, [r7, #36]	; 0x24
    if (pkt_id == 0) {
 800a97a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d067      	beq.n	800aa50 <mqtt_message_received+0x358>
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: Got message with illegal packet identifier: 0\n"));
      goto out_disconnect;
    }
    if (pkt_type == MQTT_MSG_TYPE_PUBREC) {
 800a980:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a984:	2b05      	cmp	r3, #5
 800a986:	d111      	bne.n	800a9ac <mqtt_message_received+0x2b4>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: PUBREC, sending PUBREL with pkt_id: %d\n", pkt_id));
      pub_ack_rec_rel_response(client, MQTT_MSG_TYPE_PUBREL, pkt_id, 1);
 800a988:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a98a:	2301      	movs	r3, #1
 800a98c:	2106      	movs	r1, #6
 800a98e:	68f8      	ldr	r0, [r7, #12]
 800a990:	f7ff fe5a 	bl	800a648 <pub_ack_rec_rel_response>
 800a994:	e04e      	b.n	800aa34 <mqtt_message_received+0x33c>
 800a996:	bf00      	nop
 800a998:	080179c8 	.word	0x080179c8
 800a99c:	08017bfc 	.word	0x08017bfc
 800a9a0:	08017a40 	.word	0x08017a40
 800a9a4:	08017c2c 	.word	0x08017c2c
 800a9a8:	08017c50 	.word	0x08017c50

    } else if (pkt_type == MQTT_MSG_TYPE_PUBREL) {
 800a9ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a9b0:	2b06      	cmp	r3, #6
 800a9b2:	d106      	bne.n	800a9c2 <mqtt_message_received+0x2ca>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: PUBREL, sending PUBCOMP response with pkt_id: %d\n", pkt_id));
      pub_ack_rec_rel_response(client, MQTT_MSG_TYPE_PUBCOMP, pkt_id, 0);
 800a9b4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	2107      	movs	r1, #7
 800a9ba:	68f8      	ldr	r0, [r7, #12]
 800a9bc:	f7ff fe44 	bl	800a648 <pub_ack_rec_rel_response>
 800a9c0:	e038      	b.n	800aa34 <mqtt_message_received+0x33c>

    } else if (pkt_type == MQTT_MSG_TYPE_SUBACK || pkt_type == MQTT_MSG_TYPE_UNSUBACK ||
 800a9c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a9c6:	2b09      	cmp	r3, #9
 800a9c8:	d00b      	beq.n	800a9e2 <mqtt_message_received+0x2ea>
 800a9ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a9ce:	2b0b      	cmp	r3, #11
 800a9d0:	d007      	beq.n	800a9e2 <mqtt_message_received+0x2ea>
 800a9d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a9d6:	2b07      	cmp	r3, #7
 800a9d8:	d003      	beq.n	800a9e2 <mqtt_message_received+0x2ea>
               pkt_type == MQTT_MSG_TYPE_PUBCOMP || pkt_type == MQTT_MSG_TYPE_PUBACK) {
 800a9da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a9de:	2b04      	cmp	r3, #4
 800a9e0:	d138      	bne.n	800aa54 <mqtt_message_received+0x35c>
      struct mqtt_request_t *r = mqtt_take_request(&client->pend_req_queue, pkt_id);
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	3318      	adds	r3, #24
 800a9e6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a9e8:	4611      	mov	r1, r2
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	f7ff fb68 	bl	800a0c0 <mqtt_take_request>
 800a9f0:	6238      	str	r0, [r7, #32]
      if (r != NULL) {
 800a9f2:	6a3b      	ldr	r3, [r7, #32]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d01c      	beq.n	800aa32 <mqtt_message_received+0x33a>
        LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: %s response with id %d\n", mqtt_msg_type_to_str(pkt_type), pkt_id));
        if (pkt_type == MQTT_MSG_TYPE_SUBACK) {
 800a9f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a9fc:	2b09      	cmp	r3, #9
 800a9fe:	d10a      	bne.n	800aa16 <mqtt_message_received+0x31e>
          if (length < 3) {
 800aa00:	893b      	ldrh	r3, [r7, #8]
 800aa02:	2b02      	cmp	r3, #2
 800aa04:	d928      	bls.n	800aa58 <mqtt_message_received+0x360>
            LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: To small SUBACK packet\n"));
            goto out_disconnect;
          } else {
            mqtt_incomming_suback(r, var_hdr_payload[2]);
 800aa06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa08:	3302      	adds	r3, #2
 800aa0a:	781b      	ldrb	r3, [r3, #0]
 800aa0c:	4619      	mov	r1, r3
 800aa0e:	6a38      	ldr	r0, [r7, #32]
 800aa10:	f7ff fe57 	bl	800a6c2 <mqtt_incomming_suback>
 800aa14:	e00a      	b.n	800aa2c <mqtt_message_received+0x334>
          }
        } else if (r->cb != NULL) {
 800aa16:	6a3b      	ldr	r3, [r7, #32]
 800aa18:	685b      	ldr	r3, [r3, #4]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d006      	beq.n	800aa2c <mqtt_message_received+0x334>
          r->cb(r->arg, ERR_OK);
 800aa1e:	6a3b      	ldr	r3, [r7, #32]
 800aa20:	685b      	ldr	r3, [r3, #4]
 800aa22:	6a3a      	ldr	r2, [r7, #32]
 800aa24:	6892      	ldr	r2, [r2, #8]
 800aa26:	2100      	movs	r1, #0
 800aa28:	4610      	mov	r0, r2
 800aa2a:	4798      	blx	r3
        }
        mqtt_delete_request(r);
 800aa2c:	6a38      	ldr	r0, [r7, #32]
 800aa2e:	f7ff fb37 	bl	800a0a0 <mqtt_delete_request>
               pkt_type == MQTT_MSG_TYPE_PUBCOMP || pkt_type == MQTT_MSG_TYPE_PUBACK) {
 800aa32:	bf00      	nop
    } else {
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ( "mqtt_message_received: Received unknown message type: %d\n", pkt_type));
      goto out_disconnect;
    }
  }
  return res;
 800aa34:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800aa36:	e012      	b.n	800aa5e <mqtt_message_received+0x366>
        goto out_disconnect;
 800aa38:	bf00      	nop
 800aa3a:	e00e      	b.n	800aa5a <mqtt_message_received+0x362>
        goto out_disconnect;
 800aa3c:	bf00      	nop
 800aa3e:	e00c      	b.n	800aa5a <mqtt_message_received+0x362>
        goto out_disconnect;
 800aa40:	bf00      	nop
 800aa42:	e00a      	b.n	800aa5a <mqtt_message_received+0x362>
        goto out_disconnect;
 800aa44:	bf00      	nop
 800aa46:	e008      	b.n	800aa5a <mqtt_message_received+0x362>
          goto out_disconnect;
 800aa48:	bf00      	nop
 800aa4a:	e006      	b.n	800aa5a <mqtt_message_received+0x362>
        goto out_disconnect;
 800aa4c:	bf00      	nop
 800aa4e:	e004      	b.n	800aa5a <mqtt_message_received+0x362>
      goto out_disconnect;
 800aa50:	bf00      	nop
 800aa52:	e002      	b.n	800aa5a <mqtt_message_received+0x362>
      goto out_disconnect;
 800aa54:	bf00      	nop
 800aa56:	e000      	b.n	800aa5a <mqtt_message_received+0x362>
            goto out_disconnect;
 800aa58:	bf00      	nop
out_disconnect:
  return MQTT_CONNECT_DISCONNECTED;
 800aa5a:	f44f 7380 	mov.w	r3, #256	; 0x100
}
 800aa5e:	4618      	mov	r0, r3
 800aa60:	373c      	adds	r7, #60	; 0x3c
 800aa62:	46bd      	mov	sp, r7
 800aa64:	bd90      	pop	{r4, r7, pc}
 800aa66:	bf00      	nop

0800aa68 <mqtt_parse_incoming>:
 * @param p PBUF chain of received data
 * @return Connection status
 */
static mqtt_connection_status_t
mqtt_parse_incoming(mqtt_client_t *client, struct pbuf *p)
{
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	b088      	sub	sp, #32
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
 800aa70:	6039      	str	r1, [r7, #0]
  u16_t in_offset = 0;
 800aa72:	2300      	movs	r3, #0
 800aa74:	83fb      	strh	r3, [r7, #30]
  u32_t msg_rem_len = 0;
 800aa76:	2300      	movs	r3, #0
 800aa78:	61bb      	str	r3, [r7, #24]
  u8_t fixed_hdr_idx = 0;
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	75fb      	strb	r3, [r7, #23]
  u8_t b = 0;
 800aa7e:	2300      	movs	r3, #0
 800aa80:	75bb      	strb	r3, [r7, #22]

  while (p->tot_len > in_offset) {
 800aa82:	e0bc      	b.n	800abfe <mqtt_parse_incoming+0x196>
    /* We ALWAYS parse the header here first. Even if the header was not
       included in this segment, we re-parse it here by buffering it in
       client->rx_buffer. client->msg_idx keeps track of this. */
    if ((fixed_hdr_idx < 2) || ((b & 0x80) != 0)) {
 800aa84:	7dfb      	ldrb	r3, [r7, #23]
 800aa86:	2b01      	cmp	r3, #1
 800aa88:	d903      	bls.n	800aa92 <mqtt_parse_incoming+0x2a>
 800aa8a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	da4d      	bge.n	800ab2e <mqtt_parse_incoming+0xc6>

      if (fixed_hdr_idx < client->msg_idx) {
 800aa92:	7dfa      	ldrb	r2, [r7, #23]
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aa98:	429a      	cmp	r2, r3
 800aa9a:	d206      	bcs.n	800aaaa <mqtt_parse_incoming+0x42>
        /* parse header from old pbuf (buffered in client->rx_buffer) */
        b = client->rx_buffer[fixed_hdr_idx];
 800aa9c:	7dfb      	ldrb	r3, [r7, #23]
 800aa9e:	687a      	ldr	r2, [r7, #4]
 800aaa0:	4413      	add	r3, r2
 800aaa2:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800aaa6:	75bb      	strb	r3, [r7, #22]
 800aaa8:	e012      	b.n	800aad0 <mqtt_parse_incoming+0x68>
      } else {
        /* parse header from this pbuf and save it in client->rx_buffer in case
           it comes in segmented */
        b = pbuf_get_at(p, in_offset++);
 800aaaa:	8bfb      	ldrh	r3, [r7, #30]
 800aaac:	1c5a      	adds	r2, r3, #1
 800aaae:	83fa      	strh	r2, [r7, #30]
 800aab0:	4619      	mov	r1, r3
 800aab2:	6838      	ldr	r0, [r7, #0]
 800aab4:	f002 fb88 	bl	800d1c8 <pbuf_get_at>
 800aab8:	4603      	mov	r3, r0
 800aaba:	75bb      	strb	r3, [r7, #22]
        client->rx_buffer[client->msg_idx++] = b;
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aac0:	1c59      	adds	r1, r3, #1
 800aac2:	687a      	ldr	r2, [r7, #4]
 800aac4:	6691      	str	r1, [r2, #104]	; 0x68
 800aac6:	687a      	ldr	r2, [r7, #4]
 800aac8:	4413      	add	r3, r2
 800aaca:	7dba      	ldrb	r2, [r7, #22]
 800aacc:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
      }
      fixed_hdr_idx++;
 800aad0:	7dfb      	ldrb	r3, [r7, #23]
 800aad2:	3301      	adds	r3, #1
 800aad4:	75fb      	strb	r3, [r7, #23]

      if (fixed_hdr_idx >= 2) {
 800aad6:	7dfb      	ldrb	r3, [r7, #23]
 800aad8:	2b01      	cmp	r3, #1
 800aada:	f240 8090 	bls.w	800abfe <mqtt_parse_incoming+0x196>
        /* fixed header contains at least 2 bytes but can contain more, depending on
           'remaining length'. All bytes but the last of this have 0x80 set to
           indicate more bytes are coming. */
        msg_rem_len |= (u32_t)(b & 0x7f) << ((fixed_hdr_idx - 2) * 7);
 800aade:	7dbb      	ldrb	r3, [r7, #22]
 800aae0:	f003 017f 	and.w	r1, r3, #127	; 0x7f
 800aae4:	7dfb      	ldrb	r3, [r7, #23]
 800aae6:	1e9a      	subs	r2, r3, #2
 800aae8:	4613      	mov	r3, r2
 800aaea:	00db      	lsls	r3, r3, #3
 800aaec:	1a9b      	subs	r3, r3, r2
 800aaee:	fa01 f303 	lsl.w	r3, r1, r3
 800aaf2:	69ba      	ldr	r2, [r7, #24]
 800aaf4:	4313      	orrs	r3, r2
 800aaf6:	61bb      	str	r3, [r7, #24]
        if ((b & 0x80) == 0) {
 800aaf8:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	db7e      	blt.n	800abfe <mqtt_parse_incoming+0x196>
          /* fixed header is done */
          LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_parse_incoming: Remaining length after fixed header: %"U32_F"\n", msg_rem_len));
          if (msg_rem_len == 0) {
 800ab00:	69bb      	ldr	r3, [r7, #24]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d10b      	bne.n	800ab1e <mqtt_parse_incoming+0xb6>
            /* Complete message with no extra headers of payload received */
            mqtt_message_received(client, fixed_hdr_idx, 0, 0);
 800ab06:	7df9      	ldrb	r1, [r7, #23]
 800ab08:	2300      	movs	r3, #0
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	6878      	ldr	r0, [r7, #4]
 800ab0e:	f7ff fdf3 	bl	800a6f8 <mqtt_message_received>
            client->msg_idx = 0;
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	2200      	movs	r2, #0
 800ab16:	669a      	str	r2, [r3, #104]	; 0x68
            fixed_hdr_idx = 0;
 800ab18:	2300      	movs	r3, #0
 800ab1a:	75fb      	strb	r3, [r7, #23]
 800ab1c:	e06f      	b.n	800abfe <mqtt_parse_incoming+0x196>
          } else {
            /* Bytes remaining in message (changes remaining length if this is
               not the first segment of this message) */
            msg_rem_len = (msg_rem_len + fixed_hdr_idx) - client->msg_idx;
 800ab1e:	7dfa      	ldrb	r2, [r7, #23]
 800ab20:	69bb      	ldr	r3, [r7, #24]
 800ab22:	441a      	add	r2, r3
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ab28:	1ad3      	subs	r3, r2, r3
 800ab2a:	61bb      	str	r3, [r7, #24]
      if (fixed_hdr_idx >= 2) {
 800ab2c:	e067      	b.n	800abfe <mqtt_parse_incoming+0x196>
      }
    } else {
      /* Fixed header has been parsed, parse variable header */
      u16_t cpy_len, cpy_start, buffer_space;

      cpy_start = (client->msg_idx - fixed_hdr_idx) % (MQTT_VAR_HEADER_BUFFER_LEN - fixed_hdr_idx) + fixed_hdr_idx;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800ab32:	7dfb      	ldrb	r3, [r7, #23]
 800ab34:	1ad3      	subs	r3, r2, r3
 800ab36:	7dfa      	ldrb	r2, [r7, #23]
 800ab38:	f1c2 0280 	rsb	r2, r2, #128	; 0x80
 800ab3c:	fbb3 f1f2 	udiv	r1, r3, r2
 800ab40:	fb01 f202 	mul.w	r2, r1, r2
 800ab44:	1a9b      	subs	r3, r3, r2
 800ab46:	b29a      	uxth	r2, r3
 800ab48:	7dfb      	ldrb	r3, [r7, #23]
 800ab4a:	b29b      	uxth	r3, r3
 800ab4c:	4413      	add	r3, r2
 800ab4e:	827b      	strh	r3, [r7, #18]

      /* Allow to copy the lesser one of available length in input data or bytes remaining in message */
      cpy_len = (u16_t)LWIP_MIN((u16_t)(p->tot_len - in_offset), msg_rem_len);
 800ab50:	683b      	ldr	r3, [r7, #0]
 800ab52:	891a      	ldrh	r2, [r3, #8]
 800ab54:	8bfb      	ldrh	r3, [r7, #30]
 800ab56:	1ad3      	subs	r3, r2, r3
 800ab58:	b29b      	uxth	r3, r3
 800ab5a:	461a      	mov	r2, r3
 800ab5c:	69bb      	ldr	r3, [r7, #24]
 800ab5e:	4293      	cmp	r3, r2
 800ab60:	d905      	bls.n	800ab6e <mqtt_parse_incoming+0x106>
 800ab62:	683b      	ldr	r3, [r7, #0]
 800ab64:	891a      	ldrh	r2, [r3, #8]
 800ab66:	8bfb      	ldrh	r3, [r7, #30]
 800ab68:	1ad3      	subs	r3, r2, r3
 800ab6a:	b29b      	uxth	r3, r3
 800ab6c:	e001      	b.n	800ab72 <mqtt_parse_incoming+0x10a>
 800ab6e:	69bb      	ldr	r3, [r7, #24]
 800ab70:	b29b      	uxth	r3, r3
 800ab72:	82bb      	strh	r3, [r7, #20]

      /* Limit to available space in buffer */
      buffer_space = MQTT_VAR_HEADER_BUFFER_LEN - cpy_start;
 800ab74:	8a7b      	ldrh	r3, [r7, #18]
 800ab76:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800ab7a:	823b      	strh	r3, [r7, #16]
      if (cpy_len > buffer_space) {
 800ab7c:	8aba      	ldrh	r2, [r7, #20]
 800ab7e:	8a3b      	ldrh	r3, [r7, #16]
 800ab80:	429a      	cmp	r2, r3
 800ab82:	d901      	bls.n	800ab88 <mqtt_parse_incoming+0x120>
        cpy_len = buffer_space;
 800ab84:	8a3b      	ldrh	r3, [r7, #16]
 800ab86:	82bb      	strh	r3, [r7, #20]
      }
      pbuf_copy_partial(p, client->rx_buffer + cpy_start, cpy_len, in_offset);
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 800ab8e:	8a7b      	ldrh	r3, [r7, #18]
 800ab90:	18d1      	adds	r1, r2, r3
 800ab92:	8bfb      	ldrh	r3, [r7, #30]
 800ab94:	8aba      	ldrh	r2, [r7, #20]
 800ab96:	6838      	ldr	r0, [r7, #0]
 800ab98:	f002 fa4a 	bl	800d030 <pbuf_copy_partial>

      /* Advance get and put indexes  */
      client->msg_idx += cpy_len;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800aba0:	8abb      	ldrh	r3, [r7, #20]
 800aba2:	441a      	add	r2, r3
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	669a      	str	r2, [r3, #104]	; 0x68
      in_offset += cpy_len;
 800aba8:	8bfa      	ldrh	r2, [r7, #30]
 800abaa:	8abb      	ldrh	r3, [r7, #20]
 800abac:	4413      	add	r3, r2
 800abae:	83fb      	strh	r3, [r7, #30]
      msg_rem_len -= cpy_len;
 800abb0:	8abb      	ldrh	r3, [r7, #20]
 800abb2:	69ba      	ldr	r2, [r7, #24]
 800abb4:	1ad3      	subs	r3, r2, r3
 800abb6:	61bb      	str	r3, [r7, #24]

      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_parse_incoming: msg_idx: %"U32_F", cpy_len: %"U16_F", remaining %"U32_F"\n", client->msg_idx, cpy_len, msg_rem_len));
      if ((msg_rem_len == 0) || (cpy_len == buffer_space)) {
 800abb8:	69bb      	ldr	r3, [r7, #24]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d003      	beq.n	800abc6 <mqtt_parse_incoming+0x15e>
 800abbe:	8aba      	ldrh	r2, [r7, #20]
 800abc0:	8a3b      	ldrh	r3, [r7, #16]
 800abc2:	429a      	cmp	r2, r3
 800abc4:	d11b      	bne.n	800abfe <mqtt_parse_incoming+0x196>
        /* Whole message received or buffer is full */
        mqtt_connection_status_t res = mqtt_message_received(client, fixed_hdr_idx, (cpy_start + cpy_len) - fixed_hdr_idx, msg_rem_len);
 800abc6:	8a7a      	ldrh	r2, [r7, #18]
 800abc8:	8abb      	ldrh	r3, [r7, #20]
 800abca:	4413      	add	r3, r2
 800abcc:	b29a      	uxth	r2, r3
 800abce:	7dfb      	ldrb	r3, [r7, #23]
 800abd0:	b29b      	uxth	r3, r3
 800abd2:	1ad3      	subs	r3, r2, r3
 800abd4:	b29a      	uxth	r2, r3
 800abd6:	7df9      	ldrb	r1, [r7, #23]
 800abd8:	69bb      	ldr	r3, [r7, #24]
 800abda:	6878      	ldr	r0, [r7, #4]
 800abdc:	f7ff fd8c 	bl	800a6f8 <mqtt_message_received>
 800abe0:	4603      	mov	r3, r0
 800abe2:	81fb      	strh	r3, [r7, #14]
        if (res != MQTT_CONNECT_ACCEPTED) {
 800abe4:	89fb      	ldrh	r3, [r7, #14]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d001      	beq.n	800abee <mqtt_parse_incoming+0x186>
          return res;
 800abea:	89fb      	ldrh	r3, [r7, #14]
 800abec:	e00e      	b.n	800ac0c <mqtt_parse_incoming+0x1a4>
        }
        if (msg_rem_len == 0) {
 800abee:	69bb      	ldr	r3, [r7, #24]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d104      	bne.n	800abfe <mqtt_parse_incoming+0x196>
          /* Reset parser state */
          client->msg_idx = 0;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	2200      	movs	r2, #0
 800abf8:	669a      	str	r2, [r3, #104]	; 0x68
          /* msg_tot_len = 0; */
          fixed_hdr_idx = 0;
 800abfa:	2300      	movs	r3, #0
 800abfc:	75fb      	strb	r3, [r7, #23]
  while (p->tot_len > in_offset) {
 800abfe:	683b      	ldr	r3, [r7, #0]
 800ac00:	891b      	ldrh	r3, [r3, #8]
 800ac02:	8bfa      	ldrh	r2, [r7, #30]
 800ac04:	429a      	cmp	r2, r3
 800ac06:	f4ff af3d 	bcc.w	800aa84 <mqtt_parse_incoming+0x1c>
        }
      }
    }
  }
  return MQTT_CONNECT_ACCEPTED;
 800ac0a:	2300      	movs	r3, #0
}
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	3720      	adds	r7, #32
 800ac10:	46bd      	mov	sp, r7
 800ac12:	bd80      	pop	{r7, pc}

0800ac14 <mqtt_tcp_recv_cb>:
 * @param err Passed as return value if not ERR_OK
 * @return ERR_OK or err passed into callback
 */
static err_t
mqtt_tcp_recv_cb(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800ac14:	b580      	push	{r7, lr}
 800ac16:	b086      	sub	sp, #24
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	60f8      	str	r0, [r7, #12]
 800ac1c:	60b9      	str	r1, [r7, #8]
 800ac1e:	607a      	str	r2, [r7, #4]
 800ac20:	70fb      	strb	r3, [r7, #3]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	617b      	str	r3, [r7, #20]
  LWIP_ASSERT("mqtt_tcp_recv_cb: client != NULL", client != NULL);
 800ac26:	697b      	ldr	r3, [r7, #20]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d106      	bne.n	800ac3a <mqtt_tcp_recv_cb+0x26>
 800ac2c:	4b24      	ldr	r3, [pc, #144]	; (800acc0 <mqtt_tcp_recv_cb+0xac>)
 800ac2e:	f240 32a7 	movw	r2, #935	; 0x3a7
 800ac32:	4924      	ldr	r1, [pc, #144]	; (800acc4 <mqtt_tcp_recv_cb+0xb0>)
 800ac34:	4824      	ldr	r0, [pc, #144]	; (800acc8 <mqtt_tcp_recv_cb+0xb4>)
 800ac36:	f00c f823 	bl	8016c80 <iprintf>
  LWIP_ASSERT("mqtt_tcp_recv_cb: client->conn == pcb", client->conn == pcb);
 800ac3a:	697b      	ldr	r3, [r7, #20]
 800ac3c:	68db      	ldr	r3, [r3, #12]
 800ac3e:	68ba      	ldr	r2, [r7, #8]
 800ac40:	429a      	cmp	r2, r3
 800ac42:	d006      	beq.n	800ac52 <mqtt_tcp_recv_cb+0x3e>
 800ac44:	4b1e      	ldr	r3, [pc, #120]	; (800acc0 <mqtt_tcp_recv_cb+0xac>)
 800ac46:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800ac4a:	4920      	ldr	r1, [pc, #128]	; (800accc <mqtt_tcp_recv_cb+0xb8>)
 800ac4c:	481e      	ldr	r0, [pc, #120]	; (800acc8 <mqtt_tcp_recv_cb+0xb4>)
 800ac4e:	f00c f817 	bl	8016c80 <iprintf>

  if (p == NULL) {
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d105      	bne.n	800ac64 <mqtt_tcp_recv_cb+0x50>
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_recv_cb: Recv pbuf=NULL, remote has closed connection\n"));
    mqtt_close(client, MQTT_CONNECT_DISCONNECTED);
 800ac58:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ac5c:	6978      	ldr	r0, [r7, #20]
 800ac5e:	f7ff fbfb 	bl	800a458 <mqtt_close>
 800ac62:	e027      	b.n	800acb4 <mqtt_tcp_recv_cb+0xa0>
  } else {
    mqtt_connection_status_t res;
    if (err != ERR_OK) {
 800ac64:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d005      	beq.n	800ac78 <mqtt_tcp_recv_cb+0x64>
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_tcp_recv_cb: Recv err=%d\n", err));
      pbuf_free(p);
 800ac6c:	6878      	ldr	r0, [r7, #4]
 800ac6e:	f001 ffeb 	bl	800cc48 <pbuf_free>
      return err;
 800ac72:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ac76:	e01e      	b.n	800acb6 <mqtt_tcp_recv_cb+0xa2>
    }

    /* Tell remote that data has been received */
    altcp_recved(pcb, p->tot_len);
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	891b      	ldrh	r3, [r3, #8]
 800ac7c:	4619      	mov	r1, r3
 800ac7e:	68b8      	ldr	r0, [r7, #8]
 800ac80:	f002 fed4 	bl	800da2c <tcp_recved>
    res = mqtt_parse_incoming(client, p);
 800ac84:	6879      	ldr	r1, [r7, #4]
 800ac86:	6978      	ldr	r0, [r7, #20]
 800ac88:	f7ff feee 	bl	800aa68 <mqtt_parse_incoming>
 800ac8c:	4603      	mov	r3, r0
 800ac8e:	827b      	strh	r3, [r7, #18]
    pbuf_free(p);
 800ac90:	6878      	ldr	r0, [r7, #4]
 800ac92:	f001 ffd9 	bl	800cc48 <pbuf_free>

    if (res != MQTT_CONNECT_ACCEPTED) {
 800ac96:	8a7b      	ldrh	r3, [r7, #18]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d004      	beq.n	800aca6 <mqtt_tcp_recv_cb+0x92>
      mqtt_close(client, res);
 800ac9c:	8a7b      	ldrh	r3, [r7, #18]
 800ac9e:	4619      	mov	r1, r3
 800aca0:	6978      	ldr	r0, [r7, #20]
 800aca2:	f7ff fbd9 	bl	800a458 <mqtt_close>
    }
    /* If keep alive functionality is used */
    if (client->keep_alive != 0) {
 800aca6:	697b      	ldr	r3, [r7, #20]
 800aca8:	885b      	ldrh	r3, [r3, #2]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d002      	beq.n	800acb4 <mqtt_tcp_recv_cb+0xa0>
      /* Reset server alive watchdog */
      client->server_watchdog = 0;
 800acae:	697b      	ldr	r3, [r7, #20]
 800acb0:	2200      	movs	r2, #0
 800acb2:	809a      	strh	r2, [r3, #4]
    }

  }
  return ERR_OK;
 800acb4:	2300      	movs	r3, #0
}
 800acb6:	4618      	mov	r0, r3
 800acb8:	3718      	adds	r7, #24
 800acba:	46bd      	mov	sp, r7
 800acbc:	bd80      	pop	{r7, pc}
 800acbe:	bf00      	nop
 800acc0:	080179c8 	.word	0x080179c8
 800acc4:	08017c68 	.word	0x08017c68
 800acc8:	08017a40 	.word	0x08017a40
 800accc:	08017c8c 	.word	0x08017c8c

0800acd0 <mqtt_tcp_sent_cb>:
 * @param len Number of bytes sent
 * @return ERR_OK
 */
static err_t
mqtt_tcp_sent_cb(void *arg, struct altcp_pcb *tpcb, u16_t len)
{
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b086      	sub	sp, #24
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	60f8      	str	r0, [r7, #12]
 800acd8:	60b9      	str	r1, [r7, #8]
 800acda:	4613      	mov	r3, r2
 800acdc:	80fb      	strh	r3, [r7, #6]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(tpcb);
  LWIP_UNUSED_ARG(len);

  if (client->conn_state == MQTT_CONNECTED) {
 800ace2:	697b      	ldr	r3, [r7, #20]
 800ace4:	7a9b      	ldrb	r3, [r3, #10]
 800ace6:	2b03      	cmp	r3, #3
 800ace8:	d127      	bne.n	800ad3a <mqtt_tcp_sent_cb+0x6a>
    struct mqtt_request_t *r;

    /* Reset keep-alive send timer and server watchdog */
    client->cyclic_tick = 0;
 800acea:	697b      	ldr	r3, [r7, #20]
 800acec:	2200      	movs	r2, #0
 800acee:	801a      	strh	r2, [r3, #0]
    client->server_watchdog = 0;
 800acf0:	697b      	ldr	r3, [r7, #20]
 800acf2:	2200      	movs	r2, #0
 800acf4:	809a      	strh	r2, [r3, #4]
    /* QoS 0 publish has no response from server, so call its callbacks here */
    while ((r = mqtt_take_request(&client->pend_req_queue, 0)) != NULL) {
 800acf6:	e00d      	b.n	800ad14 <mqtt_tcp_sent_cb+0x44>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_sent_cb: Calling QoS 0 publish complete callback\n"));
      if (r->cb != NULL) {
 800acf8:	693b      	ldr	r3, [r7, #16]
 800acfa:	685b      	ldr	r3, [r3, #4]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d006      	beq.n	800ad0e <mqtt_tcp_sent_cb+0x3e>
        r->cb(r->arg, ERR_OK);
 800ad00:	693b      	ldr	r3, [r7, #16]
 800ad02:	685b      	ldr	r3, [r3, #4]
 800ad04:	693a      	ldr	r2, [r7, #16]
 800ad06:	6892      	ldr	r2, [r2, #8]
 800ad08:	2100      	movs	r1, #0
 800ad0a:	4610      	mov	r0, r2
 800ad0c:	4798      	blx	r3
      }
      mqtt_delete_request(r);
 800ad0e:	6938      	ldr	r0, [r7, #16]
 800ad10:	f7ff f9c6 	bl	800a0a0 <mqtt_delete_request>
    while ((r = mqtt_take_request(&client->pend_req_queue, 0)) != NULL) {
 800ad14:	697b      	ldr	r3, [r7, #20]
 800ad16:	3318      	adds	r3, #24
 800ad18:	2100      	movs	r1, #0
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	f7ff f9d0 	bl	800a0c0 <mqtt_take_request>
 800ad20:	6138      	str	r0, [r7, #16]
 800ad22:	693b      	ldr	r3, [r7, #16]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d1e7      	bne.n	800acf8 <mqtt_tcp_sent_cb+0x28>
    }
    /* Try send any remaining buffers from output queue */
    mqtt_output_send(&client->output, client->conn);
 800ad28:	697b      	ldr	r3, [r7, #20]
 800ad2a:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 800ad2e:	697b      	ldr	r3, [r7, #20]
 800ad30:	68db      	ldr	r3, [r3, #12]
 800ad32:	4619      	mov	r1, r3
 800ad34:	4610      	mov	r0, r2
 800ad36:	f7ff f8ff 	bl	8009f38 <mqtt_output_send>
  }
  return ERR_OK;
 800ad3a:	2300      	movs	r3, #0
}
 800ad3c:	4618      	mov	r0, r3
 800ad3e:	3718      	adds	r7, #24
 800ad40:	46bd      	mov	sp, r7
 800ad42:	bd80      	pop	{r7, pc}

0800ad44 <mqtt_tcp_err_cb>:
 * @param arg MQTT client
 * @param err Error encountered
 */
static void
mqtt_tcp_err_cb(void *arg, err_t err)
{
 800ad44:	b580      	push	{r7, lr}
 800ad46:	b084      	sub	sp, #16
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	6078      	str	r0, [r7, #4]
 800ad4c:	460b      	mov	r3, r1
 800ad4e:	70fb      	strb	r3, [r7, #3]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err); /* only used for debug output */
  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_err_cb: TCP error callback: error %d, arg: %p\n", err, arg));
  LWIP_ASSERT("mqtt_tcp_err_cb: client != NULL", client != NULL);
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d106      	bne.n	800ad68 <mqtt_tcp_err_cb+0x24>
 800ad5a:	4b09      	ldr	r3, [pc, #36]	; (800ad80 <mqtt_tcp_err_cb+0x3c>)
 800ad5c:	f240 32f6 	movw	r2, #1014	; 0x3f6
 800ad60:	4908      	ldr	r1, [pc, #32]	; (800ad84 <mqtt_tcp_err_cb+0x40>)
 800ad62:	4809      	ldr	r0, [pc, #36]	; (800ad88 <mqtt_tcp_err_cb+0x44>)
 800ad64:	f00b ff8c 	bl	8016c80 <iprintf>
  /* Set conn to null before calling close as pcb is already deallocated*/
  client->conn = 0;
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	60da      	str	r2, [r3, #12]
  mqtt_close(client, MQTT_CONNECT_DISCONNECTED);
 800ad6e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ad72:	68f8      	ldr	r0, [r7, #12]
 800ad74:	f7ff fb70 	bl	800a458 <mqtt_close>
}
 800ad78:	bf00      	nop
 800ad7a:	3710      	adds	r7, #16
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	bd80      	pop	{r7, pc}
 800ad80:	080179c8 	.word	0x080179c8
 800ad84:	08017cb4 	.word	0x08017cb4
 800ad88:	08017a40 	.word	0x08017a40

0800ad8c <mqtt_tcp_poll_cb>:
 * @param tpcb TCP connection handle
 * @return err ERR_OK
 */
static err_t
mqtt_tcp_poll_cb(void *arg, struct altcp_pcb *tpcb)
{
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	b084      	sub	sp, #16
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]
 800ad94:	6039      	str	r1, [r7, #0]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	60fb      	str	r3, [r7, #12]
  if (client->conn_state == MQTT_CONNECTED) {
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	7a9b      	ldrb	r3, [r3, #10]
 800ad9e:	2b03      	cmp	r3, #3
 800ada0:	d105      	bne.n	800adae <mqtt_tcp_poll_cb+0x22>
    /* Try send any remaining buffers from output queue */
    mqtt_output_send(&client->output, tpcb);
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	33ec      	adds	r3, #236	; 0xec
 800ada6:	6839      	ldr	r1, [r7, #0]
 800ada8:	4618      	mov	r0, r3
 800adaa:	f7ff f8c5 	bl	8009f38 <mqtt_output_send>
  }
  return ERR_OK;
 800adae:	2300      	movs	r3, #0
}
 800adb0:	4618      	mov	r0, r3
 800adb2:	3710      	adds	r7, #16
 800adb4:	46bd      	mov	sp, r7
 800adb6:	bd80      	pop	{r7, pc}

0800adb8 <mqtt_tcp_connect_cb>:
 * @param err Always ERR_OK, mqtt_tcp_err_cb is called in case of error
 * @return ERR_OK
 */
static err_t
mqtt_tcp_connect_cb(void *arg, struct altcp_pcb *tpcb, err_t err)
{
 800adb8:	b580      	push	{r7, lr}
 800adba:	b086      	sub	sp, #24
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	60f8      	str	r0, [r7, #12]
 800adc0:	60b9      	str	r1, [r7, #8]
 800adc2:	4613      	mov	r3, r2
 800adc4:	71fb      	strb	r3, [r7, #7]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	617b      	str	r3, [r7, #20]

  if (err != ERR_OK) {
 800adca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800adce:	2b00      	cmp	r3, #0
 800add0:	d002      	beq.n	800add8 <mqtt_tcp_connect_cb+0x20>
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_tcp_connect_cb: TCP connect error %d\n", err));
    return err;
 800add2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800add6:	e025      	b.n	800ae24 <mqtt_tcp_connect_cb+0x6c>
  }

  /* Initiate receiver state */
  client->msg_idx = 0;
 800add8:	697b      	ldr	r3, [r7, #20]
 800adda:	2200      	movs	r2, #0
 800addc:	669a      	str	r2, [r3, #104]	; 0x68

  /* Setup TCP callbacks */
  altcp_recv(tpcb, mqtt_tcp_recv_cb);
 800adde:	4913      	ldr	r1, [pc, #76]	; (800ae2c <mqtt_tcp_connect_cb+0x74>)
 800ade0:	68b8      	ldr	r0, [r7, #8]
 800ade2:	f003 fe11 	bl	800ea08 <tcp_recv>
  altcp_sent(tpcb, mqtt_tcp_sent_cb);
 800ade6:	4912      	ldr	r1, [pc, #72]	; (800ae30 <mqtt_tcp_connect_cb+0x78>)
 800ade8:	68b8      	ldr	r0, [r7, #8]
 800adea:	f003 fe2f 	bl	800ea4c <tcp_sent>
  altcp_poll(tpcb, mqtt_tcp_poll_cb, 2);
 800adee:	2202      	movs	r2, #2
 800adf0:	4910      	ldr	r1, [pc, #64]	; (800ae34 <mqtt_tcp_connect_cb+0x7c>)
 800adf2:	68b8      	ldr	r0, [r7, #8]
 800adf4:	f003 fe6e 	bl	800ead4 <tcp_poll>

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_connect_cb: TCP connection established to server\n"));
  /* Enter MQTT connect state */
  client->conn_state = MQTT_CONNECTING;
 800adf8:	697b      	ldr	r3, [r7, #20]
 800adfa:	2202      	movs	r2, #2
 800adfc:	729a      	strb	r2, [r3, #10]

  /* Start cyclic timer */
  sys_timeout(MQTT_CYCLIC_TIMER_INTERVAL * 1000, mqtt_cyclic_timer, client);
 800adfe:	697a      	ldr	r2, [r7, #20]
 800ae00:	490d      	ldr	r1, [pc, #52]	; (800ae38 <mqtt_tcp_connect_cb+0x80>)
 800ae02:	f241 3088 	movw	r0, #5000	; 0x1388
 800ae06:	f008 fb59 	bl	80134bc <sys_timeout>
  client->cyclic_tick = 0;
 800ae0a:	697b      	ldr	r3, [r7, #20]
 800ae0c:	2200      	movs	r2, #0
 800ae0e:	801a      	strh	r2, [r3, #0]

  /* Start transmission from output queue, connect message is the first one out*/
  mqtt_output_send(&client->output, client->conn);
 800ae10:	697b      	ldr	r3, [r7, #20]
 800ae12:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 800ae16:	697b      	ldr	r3, [r7, #20]
 800ae18:	68db      	ldr	r3, [r3, #12]
 800ae1a:	4619      	mov	r1, r3
 800ae1c:	4610      	mov	r0, r2
 800ae1e:	f7ff f88b 	bl	8009f38 <mqtt_output_send>

  return ERR_OK;
 800ae22:	2300      	movs	r3, #0
}
 800ae24:	4618      	mov	r0, r3
 800ae26:	3718      	adds	r7, #24
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	bd80      	pop	{r7, pc}
 800ae2c:	0800ac15 	.word	0x0800ac15
 800ae30:	0800acd1 	.word	0x0800acd1
 800ae34:	0800ad8d 	.word	0x0800ad8d
 800ae38:	0800a519 	.word	0x0800a519

0800ae3c <mqtt_client_new>:
 * Create a new MQTT client instance
 * @return Pointer to instance on success, NULL otherwise
 */
mqtt_client_t *
mqtt_client_new(void)
{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();
  return (mqtt_client_t *)mem_calloc(1, sizeof(mqtt_client_t));
 800ae40:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 800ae44:	2001      	movs	r0, #1
 800ae46:	f000 ff8d 	bl	800bd64 <mem_calloc>
 800ae4a:	4603      	mov	r3, r0
}
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	bd80      	pop	{r7, pc}

0800ae50 <mqtt_client_connect>:
 * @return ERR_OK if successful, @see err_t enum for other results
 */
err_t
mqtt_client_connect(mqtt_client_t *client, const ip_addr_t *ip_addr, u16_t port, mqtt_connection_cb_t cb, void *arg,
                    const struct mqtt_connect_client_info_t *client_info)
{
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b08c      	sub	sp, #48	; 0x30
 800ae54:	af02      	add	r7, sp, #8
 800ae56:	60f8      	str	r0, [r7, #12]
 800ae58:	60b9      	str	r1, [r7, #8]
 800ae5a:	603b      	str	r3, [r7, #0]
 800ae5c:	4613      	mov	r3, r2
 800ae5e:	80fb      	strh	r3, [r7, #6]
  err_t err;
  size_t len;
  u16_t client_id_length;
  /* Length is the sum of 2+"MQTT", protocol level, flags and keep alive */
  u16_t remaining_length = 2 + 4 + 1 + 1 + 2;
 800ae60:	230a      	movs	r3, #10
 800ae62:	84bb      	strh	r3, [r7, #36]	; 0x24
  u8_t flags = 0, will_topic_len = 0, will_msg_len = 0;
 800ae64:	2300      	movs	r3, #0
 800ae66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800ae70:	2300      	movs	r3, #0
 800ae72:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  u16_t client_user_len = 0, client_pass_len = 0;
 800ae76:	2300      	movs	r3, #0
 800ae78:	83fb      	strh	r3, [r7, #30]
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	83bb      	strh	r3, [r7, #28]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_client_connect: client != NULL", client != NULL);
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d106      	bne.n	800ae92 <mqtt_client_connect+0x42>
 800ae84:	4b9e      	ldr	r3, [pc, #632]	; (800b100 <mqtt_client_connect+0x2b0>)
 800ae86:	f240 520f 	movw	r2, #1295	; 0x50f
 800ae8a:	499e      	ldr	r1, [pc, #632]	; (800b104 <mqtt_client_connect+0x2b4>)
 800ae8c:	489e      	ldr	r0, [pc, #632]	; (800b108 <mqtt_client_connect+0x2b8>)
 800ae8e:	f00b fef7 	bl	8016c80 <iprintf>
  LWIP_ASSERT("mqtt_client_connect: ip_addr != NULL", ip_addr != NULL);
 800ae92:	68bb      	ldr	r3, [r7, #8]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d106      	bne.n	800aea6 <mqtt_client_connect+0x56>
 800ae98:	4b99      	ldr	r3, [pc, #612]	; (800b100 <mqtt_client_connect+0x2b0>)
 800ae9a:	f44f 62a2 	mov.w	r2, #1296	; 0x510
 800ae9e:	499b      	ldr	r1, [pc, #620]	; (800b10c <mqtt_client_connect+0x2bc>)
 800aea0:	4899      	ldr	r0, [pc, #612]	; (800b108 <mqtt_client_connect+0x2b8>)
 800aea2:	f00b feed 	bl	8016c80 <iprintf>
  LWIP_ASSERT("mqtt_client_connect: client_info != NULL", client_info != NULL);
 800aea6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d106      	bne.n	800aeba <mqtt_client_connect+0x6a>
 800aeac:	4b94      	ldr	r3, [pc, #592]	; (800b100 <mqtt_client_connect+0x2b0>)
 800aeae:	f240 5211 	movw	r2, #1297	; 0x511
 800aeb2:	4997      	ldr	r1, [pc, #604]	; (800b110 <mqtt_client_connect+0x2c0>)
 800aeb4:	4894      	ldr	r0, [pc, #592]	; (800b108 <mqtt_client_connect+0x2b8>)
 800aeb6:	f00b fee3 	bl	8016c80 <iprintf>
  LWIP_ASSERT("mqtt_client_connect: client_info->client_id != NULL", client_info->client_id != NULL);
 800aeba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d106      	bne.n	800aed0 <mqtt_client_connect+0x80>
 800aec2:	4b8f      	ldr	r3, [pc, #572]	; (800b100 <mqtt_client_connect+0x2b0>)
 800aec4:	f240 5212 	movw	r2, #1298	; 0x512
 800aec8:	4992      	ldr	r1, [pc, #584]	; (800b114 <mqtt_client_connect+0x2c4>)
 800aeca:	488f      	ldr	r0, [pc, #572]	; (800b108 <mqtt_client_connect+0x2b8>)
 800aecc:	f00b fed8 	bl	8016c80 <iprintf>

  if (client->conn_state != TCP_DISCONNECTED) {
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	7a9b      	ldrb	r3, [r3, #10]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d002      	beq.n	800aede <mqtt_client_connect+0x8e>
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_client_connect: Already connected\n"));
    return ERR_ISCONN;
 800aed8:	f06f 0309 	mvn.w	r3, #9
 800aedc:	e21f      	b.n	800b31e <mqtt_client_connect+0x4ce>
  }

  /* Wipe clean */
  memset(client, 0, sizeof(mqtt_client_t));
 800aede:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
 800aee2:	2100      	movs	r1, #0
 800aee4:	68f8      	ldr	r0, [r7, #12]
 800aee6:	f00b fde5 	bl	8016ab4 <memset>
  client->connect_arg = arg;
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aeee:	611a      	str	r2, [r3, #16]
  client->connect_cb = cb;
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	683a      	ldr	r2, [r7, #0]
 800aef4:	615a      	str	r2, [r3, #20]
  client->keep_alive = client_info->keep_alive;
 800aef6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aef8:	899a      	ldrh	r2, [r3, #12]
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	805a      	strh	r2, [r3, #2]
  mqtt_init_requests(client->req_list, LWIP_ARRAYSIZE(client->req_list));
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	331c      	adds	r3, #28
 800af02:	2104      	movs	r1, #4
 800af04:	4618      	mov	r0, r3
 800af06:	f7ff f9a9 	bl	800a25c <mqtt_init_requests>

  /* Build connect message */
  if (client_info->will_topic != NULL && client_info->will_msg != NULL) {
 800af0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af0c:	691b      	ldr	r3, [r3, #16]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d073      	beq.n	800affa <mqtt_client_connect+0x1aa>
 800af12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af14:	695b      	ldr	r3, [r3, #20]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d06f      	beq.n	800affa <mqtt_client_connect+0x1aa>
    flags |= MQTT_CONNECT_FLAG_WILL;
 800af1a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800af1e:	f043 0304 	orr.w	r3, r3, #4
 800af22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    flags |= (client_info->will_qos & 3) << 3;
 800af26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af28:	7e1b      	ldrb	r3, [r3, #24]
 800af2a:	00db      	lsls	r3, r3, #3
 800af2c:	b25b      	sxtb	r3, r3
 800af2e:	f003 0318 	and.w	r3, r3, #24
 800af32:	b25a      	sxtb	r2, r3
 800af34:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800af38:	4313      	orrs	r3, r2
 800af3a:	b25b      	sxtb	r3, r3
 800af3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (client_info->will_retain) {
 800af40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af42:	7e5b      	ldrb	r3, [r3, #25]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d005      	beq.n	800af54 <mqtt_client_connect+0x104>
      flags |= MQTT_CONNECT_FLAG_WILL_RETAIN;
 800af48:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800af4c:	f043 0320 	orr.w	r3, r3, #32
 800af50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    }
    len = strlen(client_info->will_topic);
 800af54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af56:	691b      	ldr	r3, [r3, #16]
 800af58:	4618      	mov	r0, r3
 800af5a:	f7f5 f989 	bl	8000270 <strlen>
 800af5e:	61b8      	str	r0, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: client_info->will_topic length overflow", len <= 0xFF, return ERR_VAL);
 800af60:	69bb      	ldr	r3, [r7, #24]
 800af62:	2bff      	cmp	r3, #255	; 0xff
 800af64:	d909      	bls.n	800af7a <mqtt_client_connect+0x12a>
 800af66:	4b66      	ldr	r3, [pc, #408]	; (800b100 <mqtt_client_connect+0x2b0>)
 800af68:	f44f 62a5 	mov.w	r2, #1320	; 0x528
 800af6c:	496a      	ldr	r1, [pc, #424]	; (800b118 <mqtt_client_connect+0x2c8>)
 800af6e:	4866      	ldr	r0, [pc, #408]	; (800b108 <mqtt_client_connect+0x2b8>)
 800af70:	f00b fe86 	bl	8016c80 <iprintf>
 800af74:	f06f 0305 	mvn.w	r3, #5
 800af78:	e1d1      	b.n	800b31e <mqtt_client_connect+0x4ce>
    LWIP_ERROR("mqtt_client_connect: client_info->will_topic length must be > 0", len > 0, return ERR_VAL);
 800af7a:	69bb      	ldr	r3, [r7, #24]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d109      	bne.n	800af94 <mqtt_client_connect+0x144>
 800af80:	4b5f      	ldr	r3, [pc, #380]	; (800b100 <mqtt_client_connect+0x2b0>)
 800af82:	f240 5229 	movw	r2, #1321	; 0x529
 800af86:	4965      	ldr	r1, [pc, #404]	; (800b11c <mqtt_client_connect+0x2cc>)
 800af88:	485f      	ldr	r0, [pc, #380]	; (800b108 <mqtt_client_connect+0x2b8>)
 800af8a:	f00b fe79 	bl	8016c80 <iprintf>
 800af8e:	f06f 0305 	mvn.w	r3, #5
 800af92:	e1c4      	b.n	800b31e <mqtt_client_connect+0x4ce>
    will_topic_len = (u8_t)len;
 800af94:	69bb      	ldr	r3, [r7, #24]
 800af96:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    len = strlen(client_info->will_msg);
 800af9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af9c:	695b      	ldr	r3, [r3, #20]
 800af9e:	4618      	mov	r0, r3
 800afa0:	f7f5 f966 	bl	8000270 <strlen>
 800afa4:	61b8      	str	r0, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: client_info->will_msg length overflow", len <= 0xFF, return ERR_VAL);
 800afa6:	69bb      	ldr	r3, [r7, #24]
 800afa8:	2bff      	cmp	r3, #255	; 0xff
 800afaa:	d909      	bls.n	800afc0 <mqtt_client_connect+0x170>
 800afac:	4b54      	ldr	r3, [pc, #336]	; (800b100 <mqtt_client_connect+0x2b0>)
 800afae:	f240 522c 	movw	r2, #1324	; 0x52c
 800afb2:	495b      	ldr	r1, [pc, #364]	; (800b120 <mqtt_client_connect+0x2d0>)
 800afb4:	4854      	ldr	r0, [pc, #336]	; (800b108 <mqtt_client_connect+0x2b8>)
 800afb6:	f00b fe63 	bl	8016c80 <iprintf>
 800afba:	f06f 0305 	mvn.w	r3, #5
 800afbe:	e1ae      	b.n	800b31e <mqtt_client_connect+0x4ce>
    will_msg_len = (u8_t)len;
 800afc0:	69bb      	ldr	r3, [r7, #24]
 800afc2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    len = remaining_length + 2 + will_topic_len + 2 + will_msg_len;
 800afc6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800afc8:	1c9a      	adds	r2, r3, #2
 800afca:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800afce:	4413      	add	r3, r2
 800afd0:	1c9a      	adds	r2, r3, #2
 800afd2:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800afd6:	4413      	add	r3, r2
 800afd8:	61bb      	str	r3, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 800afda:	69bb      	ldr	r3, [r7, #24]
 800afdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800afe0:	d309      	bcc.n	800aff6 <mqtt_client_connect+0x1a6>
 800afe2:	4b47      	ldr	r3, [pc, #284]	; (800b100 <mqtt_client_connect+0x2b0>)
 800afe4:	f240 522f 	movw	r2, #1327	; 0x52f
 800afe8:	494e      	ldr	r1, [pc, #312]	; (800b124 <mqtt_client_connect+0x2d4>)
 800afea:	4847      	ldr	r0, [pc, #284]	; (800b108 <mqtt_client_connect+0x2b8>)
 800afec:	f00b fe48 	bl	8016c80 <iprintf>
 800aff0:	f06f 0305 	mvn.w	r3, #5
 800aff4:	e193      	b.n	800b31e <mqtt_client_connect+0x4ce>
    remaining_length = (u16_t)len;
 800aff6:	69bb      	ldr	r3, [r7, #24]
 800aff8:	84bb      	strh	r3, [r7, #36]	; 0x24
  }
  if (client_info->client_user != NULL) {
 800affa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800affc:	685b      	ldr	r3, [r3, #4]
 800affe:	2b00      	cmp	r3, #0
 800b000:	d03d      	beq.n	800b07e <mqtt_client_connect+0x22e>
    flags |= MQTT_CONNECT_FLAG_USERNAME;
 800b002:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b006:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b00a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    len = strlen(client_info->client_user);
 800b00e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b010:	685b      	ldr	r3, [r3, #4]
 800b012:	4618      	mov	r0, r3
 800b014:	f7f5 f92c 	bl	8000270 <strlen>
 800b018:	61b8      	str	r0, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: client_info->client_user length overflow", len <= 0xFFFF, return ERR_VAL);
 800b01a:	69bb      	ldr	r3, [r7, #24]
 800b01c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b020:	d309      	bcc.n	800b036 <mqtt_client_connect+0x1e6>
 800b022:	4b37      	ldr	r3, [pc, #220]	; (800b100 <mqtt_client_connect+0x2b0>)
 800b024:	f240 5235 	movw	r2, #1333	; 0x535
 800b028:	493f      	ldr	r1, [pc, #252]	; (800b128 <mqtt_client_connect+0x2d8>)
 800b02a:	4837      	ldr	r0, [pc, #220]	; (800b108 <mqtt_client_connect+0x2b8>)
 800b02c:	f00b fe28 	bl	8016c80 <iprintf>
 800b030:	f06f 0305 	mvn.w	r3, #5
 800b034:	e173      	b.n	800b31e <mqtt_client_connect+0x4ce>
    LWIP_ERROR("mqtt_client_connect: client_info->client_user length must be > 0", len > 0, return ERR_VAL);
 800b036:	69bb      	ldr	r3, [r7, #24]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d109      	bne.n	800b050 <mqtt_client_connect+0x200>
 800b03c:	4b30      	ldr	r3, [pc, #192]	; (800b100 <mqtt_client_connect+0x2b0>)
 800b03e:	f240 5236 	movw	r2, #1334	; 0x536
 800b042:	493a      	ldr	r1, [pc, #232]	; (800b12c <mqtt_client_connect+0x2dc>)
 800b044:	4830      	ldr	r0, [pc, #192]	; (800b108 <mqtt_client_connect+0x2b8>)
 800b046:	f00b fe1b 	bl	8016c80 <iprintf>
 800b04a:	f06f 0305 	mvn.w	r3, #5
 800b04e:	e166      	b.n	800b31e <mqtt_client_connect+0x4ce>
    client_user_len = (u16_t)len;
 800b050:	69bb      	ldr	r3, [r7, #24]
 800b052:	83fb      	strh	r3, [r7, #30]
    len = remaining_length + 2 + client_user_len;
 800b054:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b056:	1c9a      	adds	r2, r3, #2
 800b058:	8bfb      	ldrh	r3, [r7, #30]
 800b05a:	4413      	add	r3, r2
 800b05c:	61bb      	str	r3, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 800b05e:	69bb      	ldr	r3, [r7, #24]
 800b060:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b064:	d309      	bcc.n	800b07a <mqtt_client_connect+0x22a>
 800b066:	4b26      	ldr	r3, [pc, #152]	; (800b100 <mqtt_client_connect+0x2b0>)
 800b068:	f240 5239 	movw	r2, #1337	; 0x539
 800b06c:	492d      	ldr	r1, [pc, #180]	; (800b124 <mqtt_client_connect+0x2d4>)
 800b06e:	4826      	ldr	r0, [pc, #152]	; (800b108 <mqtt_client_connect+0x2b8>)
 800b070:	f00b fe06 	bl	8016c80 <iprintf>
 800b074:	f06f 0305 	mvn.w	r3, #5
 800b078:	e151      	b.n	800b31e <mqtt_client_connect+0x4ce>
    remaining_length = (u16_t)len;
 800b07a:	69bb      	ldr	r3, [r7, #24]
 800b07c:	84bb      	strh	r3, [r7, #36]	; 0x24
  }
  if (client_info->client_pass != NULL) {
 800b07e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b080:	689b      	ldr	r3, [r3, #8]
 800b082:	2b00      	cmp	r3, #0
 800b084:	d05a      	beq.n	800b13c <mqtt_client_connect+0x2ec>
    flags |= MQTT_CONNECT_FLAG_PASSWORD;
 800b086:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b08a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b08e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    len = strlen(client_info->client_pass);
 800b092:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b094:	689b      	ldr	r3, [r3, #8]
 800b096:	4618      	mov	r0, r3
 800b098:	f7f5 f8ea 	bl	8000270 <strlen>
 800b09c:	61b8      	str	r0, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: client_info->client_pass length overflow", len <= 0xFFFF, return ERR_VAL);
 800b09e:	69bb      	ldr	r3, [r7, #24]
 800b0a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b0a4:	d309      	bcc.n	800b0ba <mqtt_client_connect+0x26a>
 800b0a6:	4b16      	ldr	r3, [pc, #88]	; (800b100 <mqtt_client_connect+0x2b0>)
 800b0a8:	f240 523f 	movw	r2, #1343	; 0x53f
 800b0ac:	4920      	ldr	r1, [pc, #128]	; (800b130 <mqtt_client_connect+0x2e0>)
 800b0ae:	4816      	ldr	r0, [pc, #88]	; (800b108 <mqtt_client_connect+0x2b8>)
 800b0b0:	f00b fde6 	bl	8016c80 <iprintf>
 800b0b4:	f06f 0305 	mvn.w	r3, #5
 800b0b8:	e131      	b.n	800b31e <mqtt_client_connect+0x4ce>
    LWIP_ERROR("mqtt_client_connect: client_info->client_pass length must be > 0", len > 0, return ERR_VAL);
 800b0ba:	69bb      	ldr	r3, [r7, #24]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d109      	bne.n	800b0d4 <mqtt_client_connect+0x284>
 800b0c0:	4b0f      	ldr	r3, [pc, #60]	; (800b100 <mqtt_client_connect+0x2b0>)
 800b0c2:	f44f 62a8 	mov.w	r2, #1344	; 0x540
 800b0c6:	491b      	ldr	r1, [pc, #108]	; (800b134 <mqtt_client_connect+0x2e4>)
 800b0c8:	480f      	ldr	r0, [pc, #60]	; (800b108 <mqtt_client_connect+0x2b8>)
 800b0ca:	f00b fdd9 	bl	8016c80 <iprintf>
 800b0ce:	f06f 0305 	mvn.w	r3, #5
 800b0d2:	e124      	b.n	800b31e <mqtt_client_connect+0x4ce>
    client_pass_len = (u16_t)len;
 800b0d4:	69bb      	ldr	r3, [r7, #24]
 800b0d6:	83bb      	strh	r3, [r7, #28]
    len = remaining_length + 2 + client_pass_len;
 800b0d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b0da:	1c9a      	adds	r2, r3, #2
 800b0dc:	8bbb      	ldrh	r3, [r7, #28]
 800b0de:	4413      	add	r3, r2
 800b0e0:	61bb      	str	r3, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 800b0e2:	69bb      	ldr	r3, [r7, #24]
 800b0e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b0e8:	d326      	bcc.n	800b138 <mqtt_client_connect+0x2e8>
 800b0ea:	4b05      	ldr	r3, [pc, #20]	; (800b100 <mqtt_client_connect+0x2b0>)
 800b0ec:	f240 5243 	movw	r2, #1347	; 0x543
 800b0f0:	490c      	ldr	r1, [pc, #48]	; (800b124 <mqtt_client_connect+0x2d4>)
 800b0f2:	4805      	ldr	r0, [pc, #20]	; (800b108 <mqtt_client_connect+0x2b8>)
 800b0f4:	f00b fdc4 	bl	8016c80 <iprintf>
 800b0f8:	f06f 0305 	mvn.w	r3, #5
 800b0fc:	e10f      	b.n	800b31e <mqtt_client_connect+0x4ce>
 800b0fe:	bf00      	nop
 800b100:	080179c8 	.word	0x080179c8
 800b104:	08017e48 	.word	0x08017e48
 800b108:	08017a40 	.word	0x08017a40
 800b10c:	08017e6c 	.word	0x08017e6c
 800b110:	08017e94 	.word	0x08017e94
 800b114:	08017ec0 	.word	0x08017ec0
 800b118:	08017ef4 	.word	0x08017ef4
 800b11c:	08017f34 	.word	0x08017f34
 800b120:	08017f74 	.word	0x08017f74
 800b124:	08017fb0 	.word	0x08017fb0
 800b128:	08017fe0 	.word	0x08017fe0
 800b12c:	08018020 	.word	0x08018020
 800b130:	08018064 	.word	0x08018064
 800b134:	080180a4 	.word	0x080180a4
    remaining_length = (u16_t)len;
 800b138:	69bb      	ldr	r3, [r7, #24]
 800b13a:	84bb      	strh	r3, [r7, #36]	; 0x24
  }

  /* Don't complicate things, always connect using clean session */
  flags |= MQTT_CONNECT_FLAG_CLEAN_SESSION;
 800b13c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b140:	f043 0302 	orr.w	r3, r3, #2
 800b144:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  len = strlen(client_info->client_id);
 800b148:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	4618      	mov	r0, r3
 800b14e:	f7f5 f88f 	bl	8000270 <strlen>
 800b152:	61b8      	str	r0, [r7, #24]
  LWIP_ERROR("mqtt_client_connect: client_info->client_id length overflow", len <= 0xFFFF, return ERR_VAL);
 800b154:	69bb      	ldr	r3, [r7, #24]
 800b156:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b15a:	d309      	bcc.n	800b170 <mqtt_client_connect+0x320>
 800b15c:	4b72      	ldr	r3, [pc, #456]	; (800b328 <mqtt_client_connect+0x4d8>)
 800b15e:	f240 524b 	movw	r2, #1355	; 0x54b
 800b162:	4972      	ldr	r1, [pc, #456]	; (800b32c <mqtt_client_connect+0x4dc>)
 800b164:	4872      	ldr	r0, [pc, #456]	; (800b330 <mqtt_client_connect+0x4e0>)
 800b166:	f00b fd8b 	bl	8016c80 <iprintf>
 800b16a:	f06f 0305 	mvn.w	r3, #5
 800b16e:	e0d6      	b.n	800b31e <mqtt_client_connect+0x4ce>
  client_id_length = (u16_t)len;
 800b170:	69bb      	ldr	r3, [r7, #24]
 800b172:	82fb      	strh	r3, [r7, #22]
  len = remaining_length + 2 + client_id_length;
 800b174:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b176:	1c9a      	adds	r2, r3, #2
 800b178:	8afb      	ldrh	r3, [r7, #22]
 800b17a:	4413      	add	r3, r2
 800b17c:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 800b17e:	69bb      	ldr	r3, [r7, #24]
 800b180:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b184:	d309      	bcc.n	800b19a <mqtt_client_connect+0x34a>
 800b186:	4b68      	ldr	r3, [pc, #416]	; (800b328 <mqtt_client_connect+0x4d8>)
 800b188:	f240 524e 	movw	r2, #1358	; 0x54e
 800b18c:	4969      	ldr	r1, [pc, #420]	; (800b334 <mqtt_client_connect+0x4e4>)
 800b18e:	4868      	ldr	r0, [pc, #416]	; (800b330 <mqtt_client_connect+0x4e0>)
 800b190:	f00b fd76 	bl	8016c80 <iprintf>
 800b194:	f06f 0305 	mvn.w	r3, #5
 800b198:	e0c1      	b.n	800b31e <mqtt_client_connect+0x4ce>
  remaining_length = (u16_t)len;
 800b19a:	69bb      	ldr	r3, [r7, #24]
 800b19c:	84bb      	strh	r3, [r7, #36]	; 0x24

  if (mqtt_output_check_space(&client->output, remaining_length) == 0) {
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	33ec      	adds	r3, #236	; 0xec
 800b1a2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b1a4:	4611      	mov	r1, r2
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	f7ff f924 	bl	800a3f4 <mqtt_output_check_space>
 800b1ac:	4603      	mov	r3, r0
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d102      	bne.n	800b1b8 <mqtt_client_connect+0x368>
    return ERR_MEM;
 800b1b2:	f04f 33ff 	mov.w	r3, #4294967295
 800b1b6:	e0b2      	b.n	800b31e <mqtt_client_connect+0x4ce>
  if (client_info->tls_config) {
    client->conn = altcp_tls_new(client_info->tls_config, IP_GET_TYPE(ip_addr));
  } else
#endif
  {
    client->conn = altcp_tcp_new_ip_type(IP_GET_TYPE(ip_addr));
 800b1b8:	2000      	movs	r0, #0
 800b1ba:	f003 fc07 	bl	800e9cc <tcp_new_ip_type>
 800b1be:	4602      	mov	r2, r0
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	60da      	str	r2, [r3, #12]
  }
  if (client->conn == NULL) {
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	68db      	ldr	r3, [r3, #12]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d102      	bne.n	800b1d2 <mqtt_client_connect+0x382>
    return ERR_MEM;
 800b1cc:	f04f 33ff 	mov.w	r3, #4294967295
 800b1d0:	e0a5      	b.n	800b31e <mqtt_client_connect+0x4ce>
  }

  /* Set arg pointer for callbacks */
  altcp_arg(client->conn, client);
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	68db      	ldr	r3, [r3, #12]
 800b1d6:	68f9      	ldr	r1, [r7, #12]
 800b1d8:	4618      	mov	r0, r3
 800b1da:	f003 fc05 	bl	800e9e8 <tcp_arg>
  /* Any local address, pick random local port number */
  err = altcp_bind(client->conn, IP_ADDR_ANY, 0);
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	68db      	ldr	r3, [r3, #12]
 800b1e2:	2200      	movs	r2, #0
 800b1e4:	4954      	ldr	r1, [pc, #336]	; (800b338 <mqtt_client_connect+0x4e8>)
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	f002 fb2e 	bl	800d848 <tcp_bind>
 800b1ec:	4603      	mov	r3, r0
 800b1ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (err != ERR_OK) {
 800b1f2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	f040 8084 	bne.w	800b304 <mqtt_client_connect+0x4b4>
    goto tcp_fail;
  }
  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_client_connect: Connecting to host: %s at port:%"U16_F"\n", ipaddr_ntoa(ip_addr), port));

  /* Connect to server */
  err = altcp_connect(client->conn, ip_addr, port, mqtt_tcp_connect_cb);
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	68d8      	ldr	r0, [r3, #12]
 800b200:	88fa      	ldrh	r2, [r7, #6]
 800b202:	4b4e      	ldr	r3, [pc, #312]	; (800b33c <mqtt_client_connect+0x4ec>)
 800b204:	68b9      	ldr	r1, [r7, #8]
 800b206:	f002 fca7 	bl	800db58 <tcp_connect>
 800b20a:	4603      	mov	r3, r0
 800b20c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (err != ERR_OK) {
 800b210:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b214:	2b00      	cmp	r3, #0
 800b216:	d177      	bne.n	800b308 <mqtt_client_connect+0x4b8>
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_client_connect: Error connecting to remote ip/port, %d\n", err));
    goto tcp_fail;
  }
  /* Set error callback */
  altcp_err(client->conn, mqtt_tcp_err_cb);
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	68db      	ldr	r3, [r3, #12]
 800b21c:	4948      	ldr	r1, [pc, #288]	; (800b340 <mqtt_client_connect+0x4f0>)
 800b21e:	4618      	mov	r0, r3
 800b220:	f003 fc36 	bl	800ea90 <tcp_err>
  client->conn_state = TCP_CONNECTING;
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	2201      	movs	r2, #1
 800b228:	729a      	strb	r2, [r3, #10]

  /* Append fixed header */
  mqtt_output_append_fixed_header(&client->output, MQTT_MSG_TYPE_CONNECT, 0, 0, 0, remaining_length);
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 800b230:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b232:	9301      	str	r3, [sp, #4]
 800b234:	2300      	movs	r3, #0
 800b236:	9300      	str	r3, [sp, #0]
 800b238:	2300      	movs	r3, #0
 800b23a:	2200      	movs	r2, #0
 800b23c:	2101      	movs	r1, #1
 800b23e:	f7ff f88e 	bl	800a35e <mqtt_output_append_fixed_header>
  /* Append Protocol string */
  mqtt_output_append_string(&client->output, "MQTT", 4);
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	33ec      	adds	r3, #236	; 0xec
 800b246:	2204      	movs	r2, #4
 800b248:	493e      	ldr	r1, [pc, #248]	; (800b344 <mqtt_client_connect+0x4f4>)
 800b24a:	4618      	mov	r0, r3
 800b24c:	f7ff f85b 	bl	800a306 <mqtt_output_append_string>
  /* Append Protocol level */
  mqtt_output_append_u8(&client->output, 4);
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	33ec      	adds	r3, #236	; 0xec
 800b254:	2104      	movs	r1, #4
 800b256:	4618      	mov	r0, r3
 800b258:	f7ff f82e 	bl	800a2b8 <mqtt_output_append_u8>
  /* Append connect flags */
  mqtt_output_append_u8(&client->output, flags);
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	33ec      	adds	r3, #236	; 0xec
 800b260:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800b264:	4611      	mov	r1, r2
 800b266:	4618      	mov	r0, r3
 800b268:	f7ff f826 	bl	800a2b8 <mqtt_output_append_u8>
  /* Append keep-alive */
  mqtt_output_append_u16(&client->output, client_info->keep_alive);
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 800b272:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b274:	899b      	ldrh	r3, [r3, #12]
 800b276:	4619      	mov	r1, r3
 800b278:	4610      	mov	r0, r2
 800b27a:	f7ff f82c 	bl	800a2d6 <mqtt_output_append_u16>
  /* Append client id */
  mqtt_output_append_string(&client->output, client_info->client_id, client_id_length);
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 800b284:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	8afa      	ldrh	r2, [r7, #22]
 800b28a:	4619      	mov	r1, r3
 800b28c:	f7ff f83b 	bl	800a306 <mqtt_output_append_string>
  /* Append will message if used */
  if ((flags & MQTT_CONNECT_FLAG_WILL) != 0) {
 800b290:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b294:	f003 0304 	and.w	r3, r3, #4
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d015      	beq.n	800b2c8 <mqtt_client_connect+0x478>
    mqtt_output_append_string(&client->output, client_info->will_topic, will_topic_len);
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 800b2a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2a4:	691b      	ldr	r3, [r3, #16]
 800b2a6:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800b2aa:	b292      	uxth	r2, r2
 800b2ac:	4619      	mov	r1, r3
 800b2ae:	f7ff f82a 	bl	800a306 <mqtt_output_append_string>
    mqtt_output_append_string(&client->output, client_info->will_msg, will_msg_len);
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 800b2b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2ba:	695b      	ldr	r3, [r3, #20]
 800b2bc:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800b2c0:	b292      	uxth	r2, r2
 800b2c2:	4619      	mov	r1, r3
 800b2c4:	f7ff f81f 	bl	800a306 <mqtt_output_append_string>
  }
  /* Append user name if given */
  if ((flags & MQTT_CONNECT_FLAG_USERNAME) != 0) {
 800b2c8:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	da08      	bge.n	800b2e2 <mqtt_client_connect+0x492>
    mqtt_output_append_string(&client->output, client_info->client_user, client_user_len);
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 800b2d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2d8:	685b      	ldr	r3, [r3, #4]
 800b2da:	8bfa      	ldrh	r2, [r7, #30]
 800b2dc:	4619      	mov	r1, r3
 800b2de:	f7ff f812 	bl	800a306 <mqtt_output_append_string>
  }
  /* Append password if given */
  if ((flags & MQTT_CONNECT_FLAG_PASSWORD) != 0) {
 800b2e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b2e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d008      	beq.n	800b300 <mqtt_client_connect+0x4b0>
    mqtt_output_append_string(&client->output, client_info->client_pass, client_pass_len);
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 800b2f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2f6:	689b      	ldr	r3, [r3, #8]
 800b2f8:	8bba      	ldrh	r2, [r7, #28]
 800b2fa:	4619      	mov	r1, r3
 800b2fc:	f7ff f803 	bl	800a306 <mqtt_output_append_string>
  }
  return ERR_OK;
 800b300:	2300      	movs	r3, #0
 800b302:	e00c      	b.n	800b31e <mqtt_client_connect+0x4ce>
    goto tcp_fail;
 800b304:	bf00      	nop
 800b306:	e000      	b.n	800b30a <mqtt_client_connect+0x4ba>
    goto tcp_fail;
 800b308:	bf00      	nop

tcp_fail:
  altcp_abort(client->conn);
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	68db      	ldr	r3, [r3, #12]
 800b30e:	4618      	mov	r0, r3
 800b310:	f002 fa8e 	bl	800d830 <tcp_abort>
  client->conn = NULL;
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	2200      	movs	r2, #0
 800b318:	60da      	str	r2, [r3, #12]
  return err;
 800b31a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800b31e:	4618      	mov	r0, r3
 800b320:	3728      	adds	r7, #40	; 0x28
 800b322:	46bd      	mov	sp, r7
 800b324:	bd80      	pop	{r7, pc}
 800b326:	bf00      	nop
 800b328:	080179c8 	.word	0x080179c8
 800b32c:	080180e8 	.word	0x080180e8
 800b330:	08017a40 	.word	0x08017a40
 800b334:	08017fb0 	.word	0x08017fb0
 800b338:	0801ac60 	.word	0x0801ac60
 800b33c:	0800adb9 	.word	0x0800adb9
 800b340:	0800ad45 	.word	0x0800ad45
 800b344:	08018124 	.word	0x08018124

0800b348 <mqtt_disconnect>:
 * Disconnect from MQTT server
 * @param client MQTT client
 */
void
mqtt_disconnect(mqtt_client_t *client)
{
 800b348:	b580      	push	{r7, lr}
 800b34a:	b082      	sub	sp, #8
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_disconnect: client != NULL", client);
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d106      	bne.n	800b364 <mqtt_disconnect+0x1c>
 800b356:	4b0b      	ldr	r3, [pc, #44]	; (800b384 <mqtt_disconnect+0x3c>)
 800b358:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 800b35c:	490a      	ldr	r1, [pc, #40]	; (800b388 <mqtt_disconnect+0x40>)
 800b35e:	480b      	ldr	r0, [pc, #44]	; (800b38c <mqtt_disconnect+0x44>)
 800b360:	f00b fc8e 	bl	8016c80 <iprintf>
  /* If connection in not already closed */
  if (client->conn_state != TCP_DISCONNECTED) {
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	7a9b      	ldrb	r3, [r3, #10]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d006      	beq.n	800b37a <mqtt_disconnect+0x32>
    /* Set conn_state before calling mqtt_close to prevent callback from being called */
    client->conn_state = TCP_DISCONNECTED;
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	2200      	movs	r2, #0
 800b370:	729a      	strb	r2, [r3, #10]
    mqtt_close(client, (mqtt_connection_status_t)0);
 800b372:	2100      	movs	r1, #0
 800b374:	6878      	ldr	r0, [r7, #4]
 800b376:	f7ff f86f 	bl	800a458 <mqtt_close>
  }
}
 800b37a:	bf00      	nop
 800b37c:	3708      	adds	r7, #8
 800b37e:	46bd      	mov	sp, r7
 800b380:	bd80      	pop	{r7, pc}
 800b382:	bf00      	nop
 800b384:	080179c8 	.word	0x080179c8
 800b388:	0801812c 	.word	0x0801812c
 800b38c:	08017a40 	.word	0x08017a40

0800b390 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800b390:	b480      	push	{r7}
 800b392:	b083      	sub	sp, #12
 800b394:	af00      	add	r7, sp, #0
 800b396:	4603      	mov	r3, r0
 800b398:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800b39a:	88fb      	ldrh	r3, [r7, #6]
 800b39c:	021b      	lsls	r3, r3, #8
 800b39e:	b21a      	sxth	r2, r3
 800b3a0:	88fb      	ldrh	r3, [r7, #6]
 800b3a2:	0a1b      	lsrs	r3, r3, #8
 800b3a4:	b29b      	uxth	r3, r3
 800b3a6:	b21b      	sxth	r3, r3
 800b3a8:	4313      	orrs	r3, r2
 800b3aa:	b21b      	sxth	r3, r3
 800b3ac:	b29b      	uxth	r3, r3
}
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	370c      	adds	r7, #12
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	bc80      	pop	{r7}
 800b3b6:	4770      	bx	lr

0800b3b8 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800b3b8:	b480      	push	{r7}
 800b3ba:	b083      	sub	sp, #12
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	061a      	lsls	r2, r3, #24
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	021b      	lsls	r3, r3, #8
 800b3c8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b3cc:	431a      	orrs	r2, r3
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	0a1b      	lsrs	r3, r3, #8
 800b3d2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b3d6:	431a      	orrs	r2, r3
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	0e1b      	lsrs	r3, r3, #24
 800b3dc:	4313      	orrs	r3, r2
}
 800b3de:	4618      	mov	r0, r3
 800b3e0:	370c      	adds	r7, #12
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	bc80      	pop	{r7}
 800b3e6:	4770      	bx	lr

0800b3e8 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800b3e8:	b480      	push	{r7}
 800b3ea:	b089      	sub	sp, #36	; 0x24
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	6078      	str	r0, [r7, #4]
 800b3f0:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800b3fe:	69fb      	ldr	r3, [r7, #28]
 800b400:	f003 0301 	and.w	r3, r3, #1
 800b404:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800b406:	693b      	ldr	r3, [r7, #16]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d00d      	beq.n	800b428 <lwip_standard_chksum+0x40>
 800b40c:	683b      	ldr	r3, [r7, #0]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	dd0a      	ble.n	800b428 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800b412:	69fa      	ldr	r2, [r7, #28]
 800b414:	1c53      	adds	r3, r2, #1
 800b416:	61fb      	str	r3, [r7, #28]
 800b418:	f107 030e 	add.w	r3, r7, #14
 800b41c:	3301      	adds	r3, #1
 800b41e:	7812      	ldrb	r2, [r2, #0]
 800b420:	701a      	strb	r2, [r3, #0]
    len--;
 800b422:	683b      	ldr	r3, [r7, #0]
 800b424:	3b01      	subs	r3, #1
 800b426:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800b428:	69fb      	ldr	r3, [r7, #28]
 800b42a:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800b42c:	e00a      	b.n	800b444 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800b42e:	69bb      	ldr	r3, [r7, #24]
 800b430:	1c9a      	adds	r2, r3, #2
 800b432:	61ba      	str	r2, [r7, #24]
 800b434:	881b      	ldrh	r3, [r3, #0]
 800b436:	461a      	mov	r2, r3
 800b438:	697b      	ldr	r3, [r7, #20]
 800b43a:	4413      	add	r3, r2
 800b43c:	617b      	str	r3, [r7, #20]
    len -= 2;
 800b43e:	683b      	ldr	r3, [r7, #0]
 800b440:	3b02      	subs	r3, #2
 800b442:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800b444:	683b      	ldr	r3, [r7, #0]
 800b446:	2b01      	cmp	r3, #1
 800b448:	dcf1      	bgt.n	800b42e <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800b44a:	683b      	ldr	r3, [r7, #0]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	dd04      	ble.n	800b45a <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800b450:	f107 030e 	add.w	r3, r7, #14
 800b454:	69ba      	ldr	r2, [r7, #24]
 800b456:	7812      	ldrb	r2, [r2, #0]
 800b458:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800b45a:	89fb      	ldrh	r3, [r7, #14]
 800b45c:	461a      	mov	r2, r3
 800b45e:	697b      	ldr	r3, [r7, #20]
 800b460:	4413      	add	r3, r2
 800b462:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800b464:	697b      	ldr	r3, [r7, #20]
 800b466:	0c1a      	lsrs	r2, r3, #16
 800b468:	697b      	ldr	r3, [r7, #20]
 800b46a:	b29b      	uxth	r3, r3
 800b46c:	4413      	add	r3, r2
 800b46e:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800b470:	697b      	ldr	r3, [r7, #20]
 800b472:	0c1a      	lsrs	r2, r3, #16
 800b474:	697b      	ldr	r3, [r7, #20]
 800b476:	b29b      	uxth	r3, r3
 800b478:	4413      	add	r3, r2
 800b47a:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800b47c:	693b      	ldr	r3, [r7, #16]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d007      	beq.n	800b492 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800b482:	697b      	ldr	r3, [r7, #20]
 800b484:	021b      	lsls	r3, r3, #8
 800b486:	b29a      	uxth	r2, r3
 800b488:	697b      	ldr	r3, [r7, #20]
 800b48a:	0a1b      	lsrs	r3, r3, #8
 800b48c:	b2db      	uxtb	r3, r3
 800b48e:	4313      	orrs	r3, r2
 800b490:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800b492:	697b      	ldr	r3, [r7, #20]
 800b494:	b29b      	uxth	r3, r3
}
 800b496:	4618      	mov	r0, r3
 800b498:	3724      	adds	r7, #36	; 0x24
 800b49a:	46bd      	mov	sp, r7
 800b49c:	bc80      	pop	{r7}
 800b49e:	4770      	bx	lr

0800b4a0 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	b082      	sub	sp, #8
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	6078      	str	r0, [r7, #4]
 800b4a8:	460b      	mov	r3, r1
 800b4aa:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800b4ac:	887b      	ldrh	r3, [r7, #2]
 800b4ae:	4619      	mov	r1, r3
 800b4b0:	6878      	ldr	r0, [r7, #4]
 800b4b2:	f7ff ff99 	bl	800b3e8 <lwip_standard_chksum>
 800b4b6:	4603      	mov	r3, r0
 800b4b8:	43db      	mvns	r3, r3
 800b4ba:	b29b      	uxth	r3, r3
}
 800b4bc:	4618      	mov	r0, r3
 800b4be:	3708      	adds	r7, #8
 800b4c0:	46bd      	mov	sp, r7
 800b4c2:	bd80      	pop	{r7, pc}

0800b4c4 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800b4c4:	b580      	push	{r7, lr}
 800b4c6:	b086      	sub	sp, #24
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	60fb      	str	r3, [r7, #12]

  acc = 0;
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	613b      	str	r3, [r7, #16]
 800b4d8:	e02b      	b.n	800b532 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 800b4da:	693b      	ldr	r3, [r7, #16]
 800b4dc:	685a      	ldr	r2, [r3, #4]
 800b4de:	693b      	ldr	r3, [r7, #16]
 800b4e0:	895b      	ldrh	r3, [r3, #10]
 800b4e2:	4619      	mov	r1, r3
 800b4e4:	4610      	mov	r0, r2
 800b4e6:	f7ff ff7f 	bl	800b3e8 <lwip_standard_chksum>
 800b4ea:	4603      	mov	r3, r0
 800b4ec:	461a      	mov	r2, r3
 800b4ee:	697b      	ldr	r3, [r7, #20]
 800b4f0:	4413      	add	r3, r2
 800b4f2:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800b4f4:	697b      	ldr	r3, [r7, #20]
 800b4f6:	0c1a      	lsrs	r2, r3, #16
 800b4f8:	697b      	ldr	r3, [r7, #20]
 800b4fa:	b29b      	uxth	r3, r3
 800b4fc:	4413      	add	r3, r2
 800b4fe:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800b500:	693b      	ldr	r3, [r7, #16]
 800b502:	895b      	ldrh	r3, [r3, #10]
 800b504:	f003 0301 	and.w	r3, r3, #1
 800b508:	b29b      	uxth	r3, r3
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d00e      	beq.n	800b52c <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	2b00      	cmp	r3, #0
 800b512:	bf0c      	ite	eq
 800b514:	2301      	moveq	r3, #1
 800b516:	2300      	movne	r3, #0
 800b518:	b2db      	uxtb	r3, r3
 800b51a:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 800b51c:	697b      	ldr	r3, [r7, #20]
 800b51e:	021b      	lsls	r3, r3, #8
 800b520:	b29a      	uxth	r2, r3
 800b522:	697b      	ldr	r3, [r7, #20]
 800b524:	0a1b      	lsrs	r3, r3, #8
 800b526:	b2db      	uxtb	r3, r3
 800b528:	4313      	orrs	r3, r2
 800b52a:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800b52c:	693b      	ldr	r3, [r7, #16]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	613b      	str	r3, [r7, #16]
 800b532:	693b      	ldr	r3, [r7, #16]
 800b534:	2b00      	cmp	r3, #0
 800b536:	d1d0      	bne.n	800b4da <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d007      	beq.n	800b54e <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 800b53e:	697b      	ldr	r3, [r7, #20]
 800b540:	021b      	lsls	r3, r3, #8
 800b542:	b29a      	uxth	r2, r3
 800b544:	697b      	ldr	r3, [r7, #20]
 800b546:	0a1b      	lsrs	r3, r3, #8
 800b548:	b2db      	uxtb	r3, r3
 800b54a:	4313      	orrs	r3, r2
 800b54c:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 800b54e:	697b      	ldr	r3, [r7, #20]
 800b550:	b29b      	uxth	r3, r3
 800b552:	43db      	mvns	r3, r3
 800b554:	b29b      	uxth	r3, r3
}
 800b556:	4618      	mov	r0, r3
 800b558:	3718      	adds	r7, #24
 800b55a:	46bd      	mov	sp, r7
 800b55c:	bd80      	pop	{r7, pc}

0800b55e <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800b55e:	b580      	push	{r7, lr}
 800b560:	b082      	sub	sp, #8
 800b562:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800b564:	2300      	movs	r3, #0
 800b566:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800b568:	f00a fda6 	bl	80160b8 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800b56c:	f000 f8d0 	bl	800b710 <mem_init>
  memp_init();
 800b570:	f000 fc50 	bl	800be14 <memp_init>
  pbuf_init();
  netif_init();
 800b574:	f000 fd5c 	bl	800c030 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800b578:	f008 f872 	bl	8013660 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800b57c:	f001 fe5e 	bl	800d23c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800b580:	f007 ff7a 	bl	8013478 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800b584:	bf00      	nop
 800b586:	3708      	adds	r7, #8
 800b588:	46bd      	mov	sp, r7
 800b58a:	bd80      	pop	{r7, pc}

0800b58c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800b58c:	b480      	push	{r7}
 800b58e:	b083      	sub	sp, #12
 800b590:	af00      	add	r7, sp, #0
 800b592:	4603      	mov	r3, r0
 800b594:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800b596:	4b04      	ldr	r3, [pc, #16]	; (800b5a8 <ptr_to_mem+0x1c>)
 800b598:	681a      	ldr	r2, [r3, #0]
 800b59a:	88fb      	ldrh	r3, [r7, #6]
 800b59c:	4413      	add	r3, r2
}
 800b59e:	4618      	mov	r0, r3
 800b5a0:	370c      	adds	r7, #12
 800b5a2:	46bd      	mov	sp, r7
 800b5a4:	bc80      	pop	{r7}
 800b5a6:	4770      	bx	lr
 800b5a8:	20008d28 	.word	0x20008d28

0800b5ac <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800b5ac:	b480      	push	{r7}
 800b5ae:	b083      	sub	sp, #12
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800b5b4:	4b04      	ldr	r3, [pc, #16]	; (800b5c8 <mem_to_ptr+0x1c>)
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	687a      	ldr	r2, [r7, #4]
 800b5ba:	1ad3      	subs	r3, r2, r3
 800b5bc:	b29b      	uxth	r3, r3
}
 800b5be:	4618      	mov	r0, r3
 800b5c0:	370c      	adds	r7, #12
 800b5c2:	46bd      	mov	sp, r7
 800b5c4:	bc80      	pop	{r7}
 800b5c6:	4770      	bx	lr
 800b5c8:	20008d28 	.word	0x20008d28

0800b5cc <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800b5cc:	b590      	push	{r4, r7, lr}
 800b5ce:	b085      	sub	sp, #20
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800b5d4:	4b45      	ldr	r3, [pc, #276]	; (800b6ec <plug_holes+0x120>)
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	687a      	ldr	r2, [r7, #4]
 800b5da:	429a      	cmp	r2, r3
 800b5dc:	d206      	bcs.n	800b5ec <plug_holes+0x20>
 800b5de:	4b44      	ldr	r3, [pc, #272]	; (800b6f0 <plug_holes+0x124>)
 800b5e0:	f240 12df 	movw	r2, #479	; 0x1df
 800b5e4:	4943      	ldr	r1, [pc, #268]	; (800b6f4 <plug_holes+0x128>)
 800b5e6:	4844      	ldr	r0, [pc, #272]	; (800b6f8 <plug_holes+0x12c>)
 800b5e8:	f00b fb4a 	bl	8016c80 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800b5ec:	4b43      	ldr	r3, [pc, #268]	; (800b6fc <plug_holes+0x130>)
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	687a      	ldr	r2, [r7, #4]
 800b5f2:	429a      	cmp	r2, r3
 800b5f4:	d306      	bcc.n	800b604 <plug_holes+0x38>
 800b5f6:	4b3e      	ldr	r3, [pc, #248]	; (800b6f0 <plug_holes+0x124>)
 800b5f8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800b5fc:	4940      	ldr	r1, [pc, #256]	; (800b700 <plug_holes+0x134>)
 800b5fe:	483e      	ldr	r0, [pc, #248]	; (800b6f8 <plug_holes+0x12c>)
 800b600:	f00b fb3e 	bl	8016c80 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	791b      	ldrb	r3, [r3, #4]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d006      	beq.n	800b61a <plug_holes+0x4e>
 800b60c:	4b38      	ldr	r3, [pc, #224]	; (800b6f0 <plug_holes+0x124>)
 800b60e:	f240 12e1 	movw	r2, #481	; 0x1e1
 800b612:	493c      	ldr	r1, [pc, #240]	; (800b704 <plug_holes+0x138>)
 800b614:	4838      	ldr	r0, [pc, #224]	; (800b6f8 <plug_holes+0x12c>)
 800b616:	f00b fb33 	bl	8016c80 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	881b      	ldrh	r3, [r3, #0]
 800b61e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b622:	d906      	bls.n	800b632 <plug_holes+0x66>
 800b624:	4b32      	ldr	r3, [pc, #200]	; (800b6f0 <plug_holes+0x124>)
 800b626:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800b62a:	4937      	ldr	r1, [pc, #220]	; (800b708 <plug_holes+0x13c>)
 800b62c:	4832      	ldr	r0, [pc, #200]	; (800b6f8 <plug_holes+0x12c>)
 800b62e:	f00b fb27 	bl	8016c80 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	881b      	ldrh	r3, [r3, #0]
 800b636:	4618      	mov	r0, r3
 800b638:	f7ff ffa8 	bl	800b58c <ptr_to_mem>
 800b63c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800b63e:	687a      	ldr	r2, [r7, #4]
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	429a      	cmp	r2, r3
 800b644:	d024      	beq.n	800b690 <plug_holes+0xc4>
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	791b      	ldrb	r3, [r3, #4]
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d120      	bne.n	800b690 <plug_holes+0xc4>
 800b64e:	4b2b      	ldr	r3, [pc, #172]	; (800b6fc <plug_holes+0x130>)
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	68fa      	ldr	r2, [r7, #12]
 800b654:	429a      	cmp	r2, r3
 800b656:	d01b      	beq.n	800b690 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800b658:	4b2c      	ldr	r3, [pc, #176]	; (800b70c <plug_holes+0x140>)
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	68fa      	ldr	r2, [r7, #12]
 800b65e:	429a      	cmp	r2, r3
 800b660:	d102      	bne.n	800b668 <plug_holes+0x9c>
      lfree = mem;
 800b662:	4a2a      	ldr	r2, [pc, #168]	; (800b70c <plug_holes+0x140>)
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	881a      	ldrh	r2, [r3, #0]
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	881b      	ldrh	r3, [r3, #0]
 800b674:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b678:	d00a      	beq.n	800b690 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	881b      	ldrh	r3, [r3, #0]
 800b67e:	4618      	mov	r0, r3
 800b680:	f7ff ff84 	bl	800b58c <ptr_to_mem>
 800b684:	4604      	mov	r4, r0
 800b686:	6878      	ldr	r0, [r7, #4]
 800b688:	f7ff ff90 	bl	800b5ac <mem_to_ptr>
 800b68c:	4603      	mov	r3, r0
 800b68e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	885b      	ldrh	r3, [r3, #2]
 800b694:	4618      	mov	r0, r3
 800b696:	f7ff ff79 	bl	800b58c <ptr_to_mem>
 800b69a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800b69c:	68ba      	ldr	r2, [r7, #8]
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	429a      	cmp	r2, r3
 800b6a2:	d01f      	beq.n	800b6e4 <plug_holes+0x118>
 800b6a4:	68bb      	ldr	r3, [r7, #8]
 800b6a6:	791b      	ldrb	r3, [r3, #4]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d11b      	bne.n	800b6e4 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800b6ac:	4b17      	ldr	r3, [pc, #92]	; (800b70c <plug_holes+0x140>)
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	687a      	ldr	r2, [r7, #4]
 800b6b2:	429a      	cmp	r2, r3
 800b6b4:	d102      	bne.n	800b6bc <plug_holes+0xf0>
      lfree = pmem;
 800b6b6:	4a15      	ldr	r2, [pc, #84]	; (800b70c <plug_holes+0x140>)
 800b6b8:	68bb      	ldr	r3, [r7, #8]
 800b6ba:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	881a      	ldrh	r2, [r3, #0]
 800b6c0:	68bb      	ldr	r3, [r7, #8]
 800b6c2:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	881b      	ldrh	r3, [r3, #0]
 800b6c8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b6cc:	d00a      	beq.n	800b6e4 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	881b      	ldrh	r3, [r3, #0]
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	f7ff ff5a 	bl	800b58c <ptr_to_mem>
 800b6d8:	4604      	mov	r4, r0
 800b6da:	68b8      	ldr	r0, [r7, #8]
 800b6dc:	f7ff ff66 	bl	800b5ac <mem_to_ptr>
 800b6e0:	4603      	mov	r3, r0
 800b6e2:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800b6e4:	bf00      	nop
 800b6e6:	3714      	adds	r7, #20
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	bd90      	pop	{r4, r7, pc}
 800b6ec:	20008d28 	.word	0x20008d28
 800b6f0:	08018178 	.word	0x08018178
 800b6f4:	080181a8 	.word	0x080181a8
 800b6f8:	080181c0 	.word	0x080181c0
 800b6fc:	20008d2c 	.word	0x20008d2c
 800b700:	080181e8 	.word	0x080181e8
 800b704:	08018204 	.word	0x08018204
 800b708:	08018220 	.word	0x08018220
 800b70c:	20008d34 	.word	0x20008d34

0800b710 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800b710:	b580      	push	{r7, lr}
 800b712:	b082      	sub	sp, #8
 800b714:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800b716:	4b1d      	ldr	r3, [pc, #116]	; (800b78c <mem_init+0x7c>)
 800b718:	4a1d      	ldr	r2, [pc, #116]	; (800b790 <mem_init+0x80>)
 800b71a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800b71c:	4b1b      	ldr	r3, [pc, #108]	; (800b78c <mem_init+0x7c>)
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800b728:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	2200      	movs	r2, #0
 800b72e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	2200      	movs	r2, #0
 800b734:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800b736:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800b73a:	f7ff ff27 	bl	800b58c <ptr_to_mem>
 800b73e:	4603      	mov	r3, r0
 800b740:	4a14      	ldr	r2, [pc, #80]	; (800b794 <mem_init+0x84>)
 800b742:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800b744:	4b13      	ldr	r3, [pc, #76]	; (800b794 <mem_init+0x84>)
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	2201      	movs	r2, #1
 800b74a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800b74c:	4b11      	ldr	r3, [pc, #68]	; (800b794 <mem_init+0x84>)
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800b754:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800b756:	4b0f      	ldr	r3, [pc, #60]	; (800b794 <mem_init+0x84>)
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800b75e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800b760:	4b0a      	ldr	r3, [pc, #40]	; (800b78c <mem_init+0x7c>)
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	4a0c      	ldr	r2, [pc, #48]	; (800b798 <mem_init+0x88>)
 800b766:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800b768:	480c      	ldr	r0, [pc, #48]	; (800b79c <mem_init+0x8c>)
 800b76a:	f00a fcb3 	bl	80160d4 <sys_mutex_new>
 800b76e:	4603      	mov	r3, r0
 800b770:	2b00      	cmp	r3, #0
 800b772:	d006      	beq.n	800b782 <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800b774:	4b0a      	ldr	r3, [pc, #40]	; (800b7a0 <mem_init+0x90>)
 800b776:	f240 221f 	movw	r2, #543	; 0x21f
 800b77a:	490a      	ldr	r1, [pc, #40]	; (800b7a4 <mem_init+0x94>)
 800b77c:	480a      	ldr	r0, [pc, #40]	; (800b7a8 <mem_init+0x98>)
 800b77e:	f00b fa7f 	bl	8016c80 <iprintf>
  }
}
 800b782:	bf00      	nop
 800b784:	3708      	adds	r7, #8
 800b786:	46bd      	mov	sp, r7
 800b788:	bd80      	pop	{r7, pc}
 800b78a:	bf00      	nop
 800b78c:	20008d28 	.word	0x20008d28
 800b790:	30044000 	.word	0x30044000
 800b794:	20008d2c 	.word	0x20008d2c
 800b798:	20008d34 	.word	0x20008d34
 800b79c:	20008d30 	.word	0x20008d30
 800b7a0:	08018178 	.word	0x08018178
 800b7a4:	0801824c 	.word	0x0801824c
 800b7a8:	080181c0 	.word	0x080181c0

0800b7ac <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800b7ac:	b580      	push	{r7, lr}
 800b7ae:	b086      	sub	sp, #24
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800b7b4:	6878      	ldr	r0, [r7, #4]
 800b7b6:	f7ff fef9 	bl	800b5ac <mem_to_ptr>
 800b7ba:	4603      	mov	r3, r0
 800b7bc:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	881b      	ldrh	r3, [r3, #0]
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	f7ff fee2 	bl	800b58c <ptr_to_mem>
 800b7c8:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	885b      	ldrh	r3, [r3, #2]
 800b7ce:	4618      	mov	r0, r3
 800b7d0:	f7ff fedc 	bl	800b58c <ptr_to_mem>
 800b7d4:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	881b      	ldrh	r3, [r3, #0]
 800b7da:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b7de:	d818      	bhi.n	800b812 <mem_link_valid+0x66>
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	885b      	ldrh	r3, [r3, #2]
 800b7e4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b7e8:	d813      	bhi.n	800b812 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800b7ee:	8afa      	ldrh	r2, [r7, #22]
 800b7f0:	429a      	cmp	r2, r3
 800b7f2:	d004      	beq.n	800b7fe <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	881b      	ldrh	r3, [r3, #0]
 800b7f8:	8afa      	ldrh	r2, [r7, #22]
 800b7fa:	429a      	cmp	r2, r3
 800b7fc:	d109      	bne.n	800b812 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800b7fe:	4b08      	ldr	r3, [pc, #32]	; (800b820 <mem_link_valid+0x74>)
 800b800:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800b802:	693a      	ldr	r2, [r7, #16]
 800b804:	429a      	cmp	r2, r3
 800b806:	d006      	beq.n	800b816 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800b808:	693b      	ldr	r3, [r7, #16]
 800b80a:	885b      	ldrh	r3, [r3, #2]
 800b80c:	8afa      	ldrh	r2, [r7, #22]
 800b80e:	429a      	cmp	r2, r3
 800b810:	d001      	beq.n	800b816 <mem_link_valid+0x6a>
    return 0;
 800b812:	2300      	movs	r3, #0
 800b814:	e000      	b.n	800b818 <mem_link_valid+0x6c>
  }
  return 1;
 800b816:	2301      	movs	r3, #1
}
 800b818:	4618      	mov	r0, r3
 800b81a:	3718      	adds	r7, #24
 800b81c:	46bd      	mov	sp, r7
 800b81e:	bd80      	pop	{r7, pc}
 800b820:	20008d2c 	.word	0x20008d2c

0800b824 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800b824:	b580      	push	{r7, lr}
 800b826:	b088      	sub	sp, #32
 800b828:	af00      	add	r7, sp, #0
 800b82a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d070      	beq.n	800b914 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	f003 0303 	and.w	r3, r3, #3
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d00d      	beq.n	800b858 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800b83c:	4b37      	ldr	r3, [pc, #220]	; (800b91c <mem_free+0xf8>)
 800b83e:	f240 2273 	movw	r2, #627	; 0x273
 800b842:	4937      	ldr	r1, [pc, #220]	; (800b920 <mem_free+0xfc>)
 800b844:	4837      	ldr	r0, [pc, #220]	; (800b924 <mem_free+0x100>)
 800b846:	f00b fa1b 	bl	8016c80 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b84a:	f00a fca1 	bl	8016190 <sys_arch_protect>
 800b84e:	60f8      	str	r0, [r7, #12]
 800b850:	68f8      	ldr	r0, [r7, #12]
 800b852:	f00a fcab 	bl	80161ac <sys_arch_unprotect>
    return;
 800b856:	e05e      	b.n	800b916 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	3b08      	subs	r3, #8
 800b85c:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800b85e:	4b32      	ldr	r3, [pc, #200]	; (800b928 <mem_free+0x104>)
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	69fa      	ldr	r2, [r7, #28]
 800b864:	429a      	cmp	r2, r3
 800b866:	d306      	bcc.n	800b876 <mem_free+0x52>
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	f103 020c 	add.w	r2, r3, #12
 800b86e:	4b2f      	ldr	r3, [pc, #188]	; (800b92c <mem_free+0x108>)
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	429a      	cmp	r2, r3
 800b874:	d90d      	bls.n	800b892 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800b876:	4b29      	ldr	r3, [pc, #164]	; (800b91c <mem_free+0xf8>)
 800b878:	f240 227f 	movw	r2, #639	; 0x27f
 800b87c:	492c      	ldr	r1, [pc, #176]	; (800b930 <mem_free+0x10c>)
 800b87e:	4829      	ldr	r0, [pc, #164]	; (800b924 <mem_free+0x100>)
 800b880:	f00b f9fe 	bl	8016c80 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b884:	f00a fc84 	bl	8016190 <sys_arch_protect>
 800b888:	6138      	str	r0, [r7, #16]
 800b88a:	6938      	ldr	r0, [r7, #16]
 800b88c:	f00a fc8e 	bl	80161ac <sys_arch_unprotect>
    return;
 800b890:	e041      	b.n	800b916 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800b892:	4828      	ldr	r0, [pc, #160]	; (800b934 <mem_free+0x110>)
 800b894:	f00a fc3a 	bl	801610c <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800b898:	69fb      	ldr	r3, [r7, #28]
 800b89a:	791b      	ldrb	r3, [r3, #4]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d110      	bne.n	800b8c2 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800b8a0:	4b1e      	ldr	r3, [pc, #120]	; (800b91c <mem_free+0xf8>)
 800b8a2:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800b8a6:	4924      	ldr	r1, [pc, #144]	; (800b938 <mem_free+0x114>)
 800b8a8:	481e      	ldr	r0, [pc, #120]	; (800b924 <mem_free+0x100>)
 800b8aa:	f00b f9e9 	bl	8016c80 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800b8ae:	4821      	ldr	r0, [pc, #132]	; (800b934 <mem_free+0x110>)
 800b8b0:	f00a fc3b 	bl	801612a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b8b4:	f00a fc6c 	bl	8016190 <sys_arch_protect>
 800b8b8:	6178      	str	r0, [r7, #20]
 800b8ba:	6978      	ldr	r0, [r7, #20]
 800b8bc:	f00a fc76 	bl	80161ac <sys_arch_unprotect>
    return;
 800b8c0:	e029      	b.n	800b916 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800b8c2:	69f8      	ldr	r0, [r7, #28]
 800b8c4:	f7ff ff72 	bl	800b7ac <mem_link_valid>
 800b8c8:	4603      	mov	r3, r0
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d110      	bne.n	800b8f0 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800b8ce:	4b13      	ldr	r3, [pc, #76]	; (800b91c <mem_free+0xf8>)
 800b8d0:	f240 2295 	movw	r2, #661	; 0x295
 800b8d4:	4919      	ldr	r1, [pc, #100]	; (800b93c <mem_free+0x118>)
 800b8d6:	4813      	ldr	r0, [pc, #76]	; (800b924 <mem_free+0x100>)
 800b8d8:	f00b f9d2 	bl	8016c80 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800b8dc:	4815      	ldr	r0, [pc, #84]	; (800b934 <mem_free+0x110>)
 800b8de:	f00a fc24 	bl	801612a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b8e2:	f00a fc55 	bl	8016190 <sys_arch_protect>
 800b8e6:	61b8      	str	r0, [r7, #24]
 800b8e8:	69b8      	ldr	r0, [r7, #24]
 800b8ea:	f00a fc5f 	bl	80161ac <sys_arch_unprotect>
    return;
 800b8ee:	e012      	b.n	800b916 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800b8f0:	69fb      	ldr	r3, [r7, #28]
 800b8f2:	2200      	movs	r2, #0
 800b8f4:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800b8f6:	4b12      	ldr	r3, [pc, #72]	; (800b940 <mem_free+0x11c>)
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	69fa      	ldr	r2, [r7, #28]
 800b8fc:	429a      	cmp	r2, r3
 800b8fe:	d202      	bcs.n	800b906 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800b900:	4a0f      	ldr	r2, [pc, #60]	; (800b940 <mem_free+0x11c>)
 800b902:	69fb      	ldr	r3, [r7, #28]
 800b904:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800b906:	69f8      	ldr	r0, [r7, #28]
 800b908:	f7ff fe60 	bl	800b5cc <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800b90c:	4809      	ldr	r0, [pc, #36]	; (800b934 <mem_free+0x110>)
 800b90e:	f00a fc0c 	bl	801612a <sys_mutex_unlock>
 800b912:	e000      	b.n	800b916 <mem_free+0xf2>
    return;
 800b914:	bf00      	nop
}
 800b916:	3720      	adds	r7, #32
 800b918:	46bd      	mov	sp, r7
 800b91a:	bd80      	pop	{r7, pc}
 800b91c:	08018178 	.word	0x08018178
 800b920:	08018268 	.word	0x08018268
 800b924:	080181c0 	.word	0x080181c0
 800b928:	20008d28 	.word	0x20008d28
 800b92c:	20008d2c 	.word	0x20008d2c
 800b930:	0801828c 	.word	0x0801828c
 800b934:	20008d30 	.word	0x20008d30
 800b938:	080182a8 	.word	0x080182a8
 800b93c:	080182d0 	.word	0x080182d0
 800b940:	20008d34 	.word	0x20008d34

0800b944 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800b944:	b580      	push	{r7, lr}
 800b946:	b088      	sub	sp, #32
 800b948:	af00      	add	r7, sp, #0
 800b94a:	6078      	str	r0, [r7, #4]
 800b94c:	460b      	mov	r3, r1
 800b94e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800b950:	887b      	ldrh	r3, [r7, #2]
 800b952:	3303      	adds	r3, #3
 800b954:	b29b      	uxth	r3, r3
 800b956:	f023 0303 	bic.w	r3, r3, #3
 800b95a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800b95c:	8bfb      	ldrh	r3, [r7, #30]
 800b95e:	2b0b      	cmp	r3, #11
 800b960:	d801      	bhi.n	800b966 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800b962:	230c      	movs	r3, #12
 800b964:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800b966:	8bfb      	ldrh	r3, [r7, #30]
 800b968:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b96c:	d803      	bhi.n	800b976 <mem_trim+0x32>
 800b96e:	8bfa      	ldrh	r2, [r7, #30]
 800b970:	887b      	ldrh	r3, [r7, #2]
 800b972:	429a      	cmp	r2, r3
 800b974:	d201      	bcs.n	800b97a <mem_trim+0x36>
    return NULL;
 800b976:	2300      	movs	r3, #0
 800b978:	e0d8      	b.n	800bb2c <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800b97a:	4b6e      	ldr	r3, [pc, #440]	; (800bb34 <mem_trim+0x1f0>)
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	687a      	ldr	r2, [r7, #4]
 800b980:	429a      	cmp	r2, r3
 800b982:	d304      	bcc.n	800b98e <mem_trim+0x4a>
 800b984:	4b6c      	ldr	r3, [pc, #432]	; (800bb38 <mem_trim+0x1f4>)
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	687a      	ldr	r2, [r7, #4]
 800b98a:	429a      	cmp	r2, r3
 800b98c:	d306      	bcc.n	800b99c <mem_trim+0x58>
 800b98e:	4b6b      	ldr	r3, [pc, #428]	; (800bb3c <mem_trim+0x1f8>)
 800b990:	f240 22d1 	movw	r2, #721	; 0x2d1
 800b994:	496a      	ldr	r1, [pc, #424]	; (800bb40 <mem_trim+0x1fc>)
 800b996:	486b      	ldr	r0, [pc, #428]	; (800bb44 <mem_trim+0x200>)
 800b998:	f00b f972 	bl	8016c80 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800b99c:	4b65      	ldr	r3, [pc, #404]	; (800bb34 <mem_trim+0x1f0>)
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	687a      	ldr	r2, [r7, #4]
 800b9a2:	429a      	cmp	r2, r3
 800b9a4:	d304      	bcc.n	800b9b0 <mem_trim+0x6c>
 800b9a6:	4b64      	ldr	r3, [pc, #400]	; (800bb38 <mem_trim+0x1f4>)
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	687a      	ldr	r2, [r7, #4]
 800b9ac:	429a      	cmp	r2, r3
 800b9ae:	d307      	bcc.n	800b9c0 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b9b0:	f00a fbee 	bl	8016190 <sys_arch_protect>
 800b9b4:	60b8      	str	r0, [r7, #8]
 800b9b6:	68b8      	ldr	r0, [r7, #8]
 800b9b8:	f00a fbf8 	bl	80161ac <sys_arch_unprotect>
    return rmem;
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	e0b5      	b.n	800bb2c <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	3b08      	subs	r3, #8
 800b9c4:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800b9c6:	69b8      	ldr	r0, [r7, #24]
 800b9c8:	f7ff fdf0 	bl	800b5ac <mem_to_ptr>
 800b9cc:	4603      	mov	r3, r0
 800b9ce:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800b9d0:	69bb      	ldr	r3, [r7, #24]
 800b9d2:	881a      	ldrh	r2, [r3, #0]
 800b9d4:	8afb      	ldrh	r3, [r7, #22]
 800b9d6:	1ad3      	subs	r3, r2, r3
 800b9d8:	b29b      	uxth	r3, r3
 800b9da:	3b08      	subs	r3, #8
 800b9dc:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800b9de:	8bfa      	ldrh	r2, [r7, #30]
 800b9e0:	8abb      	ldrh	r3, [r7, #20]
 800b9e2:	429a      	cmp	r2, r3
 800b9e4:	d906      	bls.n	800b9f4 <mem_trim+0xb0>
 800b9e6:	4b55      	ldr	r3, [pc, #340]	; (800bb3c <mem_trim+0x1f8>)
 800b9e8:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800b9ec:	4956      	ldr	r1, [pc, #344]	; (800bb48 <mem_trim+0x204>)
 800b9ee:	4855      	ldr	r0, [pc, #340]	; (800bb44 <mem_trim+0x200>)
 800b9f0:	f00b f946 	bl	8016c80 <iprintf>
  if (newsize > size) {
 800b9f4:	8bfa      	ldrh	r2, [r7, #30]
 800b9f6:	8abb      	ldrh	r3, [r7, #20]
 800b9f8:	429a      	cmp	r2, r3
 800b9fa:	d901      	bls.n	800ba00 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800b9fc:	2300      	movs	r3, #0
 800b9fe:	e095      	b.n	800bb2c <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800ba00:	8bfa      	ldrh	r2, [r7, #30]
 800ba02:	8abb      	ldrh	r3, [r7, #20]
 800ba04:	429a      	cmp	r2, r3
 800ba06:	d101      	bne.n	800ba0c <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	e08f      	b.n	800bb2c <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800ba0c:	484f      	ldr	r0, [pc, #316]	; (800bb4c <mem_trim+0x208>)
 800ba0e:	f00a fb7d 	bl	801610c <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800ba12:	69bb      	ldr	r3, [r7, #24]
 800ba14:	881b      	ldrh	r3, [r3, #0]
 800ba16:	4618      	mov	r0, r3
 800ba18:	f7ff fdb8 	bl	800b58c <ptr_to_mem>
 800ba1c:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800ba1e:	693b      	ldr	r3, [r7, #16]
 800ba20:	791b      	ldrb	r3, [r3, #4]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d13f      	bne.n	800baa6 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800ba26:	69bb      	ldr	r3, [r7, #24]
 800ba28:	881b      	ldrh	r3, [r3, #0]
 800ba2a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ba2e:	d106      	bne.n	800ba3e <mem_trim+0xfa>
 800ba30:	4b42      	ldr	r3, [pc, #264]	; (800bb3c <mem_trim+0x1f8>)
 800ba32:	f240 22f5 	movw	r2, #757	; 0x2f5
 800ba36:	4946      	ldr	r1, [pc, #280]	; (800bb50 <mem_trim+0x20c>)
 800ba38:	4842      	ldr	r0, [pc, #264]	; (800bb44 <mem_trim+0x200>)
 800ba3a:	f00b f921 	bl	8016c80 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800ba3e:	693b      	ldr	r3, [r7, #16]
 800ba40:	881b      	ldrh	r3, [r3, #0]
 800ba42:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800ba44:	8afa      	ldrh	r2, [r7, #22]
 800ba46:	8bfb      	ldrh	r3, [r7, #30]
 800ba48:	4413      	add	r3, r2
 800ba4a:	b29b      	uxth	r3, r3
 800ba4c:	3308      	adds	r3, #8
 800ba4e:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800ba50:	4b40      	ldr	r3, [pc, #256]	; (800bb54 <mem_trim+0x210>)
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	693a      	ldr	r2, [r7, #16]
 800ba56:	429a      	cmp	r2, r3
 800ba58:	d106      	bne.n	800ba68 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800ba5a:	89fb      	ldrh	r3, [r7, #14]
 800ba5c:	4618      	mov	r0, r3
 800ba5e:	f7ff fd95 	bl	800b58c <ptr_to_mem>
 800ba62:	4603      	mov	r3, r0
 800ba64:	4a3b      	ldr	r2, [pc, #236]	; (800bb54 <mem_trim+0x210>)
 800ba66:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800ba68:	89fb      	ldrh	r3, [r7, #14]
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	f7ff fd8e 	bl	800b58c <ptr_to_mem>
 800ba70:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800ba72:	693b      	ldr	r3, [r7, #16]
 800ba74:	2200      	movs	r2, #0
 800ba76:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800ba78:	693b      	ldr	r3, [r7, #16]
 800ba7a:	89ba      	ldrh	r2, [r7, #12]
 800ba7c:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800ba7e:	693b      	ldr	r3, [r7, #16]
 800ba80:	8afa      	ldrh	r2, [r7, #22]
 800ba82:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800ba84:	69bb      	ldr	r3, [r7, #24]
 800ba86:	89fa      	ldrh	r2, [r7, #14]
 800ba88:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800ba8a:	693b      	ldr	r3, [r7, #16]
 800ba8c:	881b      	ldrh	r3, [r3, #0]
 800ba8e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ba92:	d047      	beq.n	800bb24 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800ba94:	693b      	ldr	r3, [r7, #16]
 800ba96:	881b      	ldrh	r3, [r3, #0]
 800ba98:	4618      	mov	r0, r3
 800ba9a:	f7ff fd77 	bl	800b58c <ptr_to_mem>
 800ba9e:	4602      	mov	r2, r0
 800baa0:	89fb      	ldrh	r3, [r7, #14]
 800baa2:	8053      	strh	r3, [r2, #2]
 800baa4:	e03e      	b.n	800bb24 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800baa6:	8bfb      	ldrh	r3, [r7, #30]
 800baa8:	f103 0214 	add.w	r2, r3, #20
 800baac:	8abb      	ldrh	r3, [r7, #20]
 800baae:	429a      	cmp	r2, r3
 800bab0:	d838      	bhi.n	800bb24 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800bab2:	8afa      	ldrh	r2, [r7, #22]
 800bab4:	8bfb      	ldrh	r3, [r7, #30]
 800bab6:	4413      	add	r3, r2
 800bab8:	b29b      	uxth	r3, r3
 800baba:	3308      	adds	r3, #8
 800babc:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800babe:	69bb      	ldr	r3, [r7, #24]
 800bac0:	881b      	ldrh	r3, [r3, #0]
 800bac2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bac6:	d106      	bne.n	800bad6 <mem_trim+0x192>
 800bac8:	4b1c      	ldr	r3, [pc, #112]	; (800bb3c <mem_trim+0x1f8>)
 800baca:	f240 3216 	movw	r2, #790	; 0x316
 800bace:	4920      	ldr	r1, [pc, #128]	; (800bb50 <mem_trim+0x20c>)
 800bad0:	481c      	ldr	r0, [pc, #112]	; (800bb44 <mem_trim+0x200>)
 800bad2:	f00b f8d5 	bl	8016c80 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800bad6:	89fb      	ldrh	r3, [r7, #14]
 800bad8:	4618      	mov	r0, r3
 800bada:	f7ff fd57 	bl	800b58c <ptr_to_mem>
 800bade:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800bae0:	4b1c      	ldr	r3, [pc, #112]	; (800bb54 <mem_trim+0x210>)
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	693a      	ldr	r2, [r7, #16]
 800bae6:	429a      	cmp	r2, r3
 800bae8:	d202      	bcs.n	800baf0 <mem_trim+0x1ac>
      lfree = mem2;
 800baea:	4a1a      	ldr	r2, [pc, #104]	; (800bb54 <mem_trim+0x210>)
 800baec:	693b      	ldr	r3, [r7, #16]
 800baee:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800baf0:	693b      	ldr	r3, [r7, #16]
 800baf2:	2200      	movs	r2, #0
 800baf4:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800baf6:	69bb      	ldr	r3, [r7, #24]
 800baf8:	881a      	ldrh	r2, [r3, #0]
 800bafa:	693b      	ldr	r3, [r7, #16]
 800bafc:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800bafe:	693b      	ldr	r3, [r7, #16]
 800bb00:	8afa      	ldrh	r2, [r7, #22]
 800bb02:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800bb04:	69bb      	ldr	r3, [r7, #24]
 800bb06:	89fa      	ldrh	r2, [r7, #14]
 800bb08:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800bb0a:	693b      	ldr	r3, [r7, #16]
 800bb0c:	881b      	ldrh	r3, [r3, #0]
 800bb0e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bb12:	d007      	beq.n	800bb24 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800bb14:	693b      	ldr	r3, [r7, #16]
 800bb16:	881b      	ldrh	r3, [r3, #0]
 800bb18:	4618      	mov	r0, r3
 800bb1a:	f7ff fd37 	bl	800b58c <ptr_to_mem>
 800bb1e:	4602      	mov	r2, r0
 800bb20:	89fb      	ldrh	r3, [r7, #14]
 800bb22:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800bb24:	4809      	ldr	r0, [pc, #36]	; (800bb4c <mem_trim+0x208>)
 800bb26:	f00a fb00 	bl	801612a <sys_mutex_unlock>
  return rmem;
 800bb2a:	687b      	ldr	r3, [r7, #4]
}
 800bb2c:	4618      	mov	r0, r3
 800bb2e:	3720      	adds	r7, #32
 800bb30:	46bd      	mov	sp, r7
 800bb32:	bd80      	pop	{r7, pc}
 800bb34:	20008d28 	.word	0x20008d28
 800bb38:	20008d2c 	.word	0x20008d2c
 800bb3c:	08018178 	.word	0x08018178
 800bb40:	08018304 	.word	0x08018304
 800bb44:	080181c0 	.word	0x080181c0
 800bb48:	0801831c 	.word	0x0801831c
 800bb4c:	20008d30 	.word	0x20008d30
 800bb50:	0801833c 	.word	0x0801833c
 800bb54:	20008d34 	.word	0x20008d34

0800bb58 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800bb58:	b580      	push	{r7, lr}
 800bb5a:	b088      	sub	sp, #32
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	4603      	mov	r3, r0
 800bb60:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800bb62:	88fb      	ldrh	r3, [r7, #6]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d101      	bne.n	800bb6c <mem_malloc+0x14>
    return NULL;
 800bb68:	2300      	movs	r3, #0
 800bb6a:	e0e2      	b.n	800bd32 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800bb6c:	88fb      	ldrh	r3, [r7, #6]
 800bb6e:	3303      	adds	r3, #3
 800bb70:	b29b      	uxth	r3, r3
 800bb72:	f023 0303 	bic.w	r3, r3, #3
 800bb76:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800bb78:	8bbb      	ldrh	r3, [r7, #28]
 800bb7a:	2b0b      	cmp	r3, #11
 800bb7c:	d801      	bhi.n	800bb82 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800bb7e:	230c      	movs	r3, #12
 800bb80:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800bb82:	8bbb      	ldrh	r3, [r7, #28]
 800bb84:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bb88:	d803      	bhi.n	800bb92 <mem_malloc+0x3a>
 800bb8a:	8bba      	ldrh	r2, [r7, #28]
 800bb8c:	88fb      	ldrh	r3, [r7, #6]
 800bb8e:	429a      	cmp	r2, r3
 800bb90:	d201      	bcs.n	800bb96 <mem_malloc+0x3e>
    return NULL;
 800bb92:	2300      	movs	r3, #0
 800bb94:	e0cd      	b.n	800bd32 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800bb96:	4869      	ldr	r0, [pc, #420]	; (800bd3c <mem_malloc+0x1e4>)
 800bb98:	f00a fab8 	bl	801610c <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800bb9c:	4b68      	ldr	r3, [pc, #416]	; (800bd40 <mem_malloc+0x1e8>)
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	4618      	mov	r0, r3
 800bba2:	f7ff fd03 	bl	800b5ac <mem_to_ptr>
 800bba6:	4603      	mov	r3, r0
 800bba8:	83fb      	strh	r3, [r7, #30]
 800bbaa:	e0b7      	b.n	800bd1c <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800bbac:	8bfb      	ldrh	r3, [r7, #30]
 800bbae:	4618      	mov	r0, r3
 800bbb0:	f7ff fcec 	bl	800b58c <ptr_to_mem>
 800bbb4:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800bbb6:	697b      	ldr	r3, [r7, #20]
 800bbb8:	791b      	ldrb	r3, [r3, #4]
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	f040 80a7 	bne.w	800bd0e <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800bbc0:	697b      	ldr	r3, [r7, #20]
 800bbc2:	881b      	ldrh	r3, [r3, #0]
 800bbc4:	461a      	mov	r2, r3
 800bbc6:	8bfb      	ldrh	r3, [r7, #30]
 800bbc8:	1ad3      	subs	r3, r2, r3
 800bbca:	f1a3 0208 	sub.w	r2, r3, #8
 800bbce:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800bbd0:	429a      	cmp	r2, r3
 800bbd2:	f0c0 809c 	bcc.w	800bd0e <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800bbd6:	697b      	ldr	r3, [r7, #20]
 800bbd8:	881b      	ldrh	r3, [r3, #0]
 800bbda:	461a      	mov	r2, r3
 800bbdc:	8bfb      	ldrh	r3, [r7, #30]
 800bbde:	1ad3      	subs	r3, r2, r3
 800bbe0:	f1a3 0208 	sub.w	r2, r3, #8
 800bbe4:	8bbb      	ldrh	r3, [r7, #28]
 800bbe6:	3314      	adds	r3, #20
 800bbe8:	429a      	cmp	r2, r3
 800bbea:	d333      	bcc.n	800bc54 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800bbec:	8bfa      	ldrh	r2, [r7, #30]
 800bbee:	8bbb      	ldrh	r3, [r7, #28]
 800bbf0:	4413      	add	r3, r2
 800bbf2:	b29b      	uxth	r3, r3
 800bbf4:	3308      	adds	r3, #8
 800bbf6:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800bbf8:	8a7b      	ldrh	r3, [r7, #18]
 800bbfa:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bbfe:	d106      	bne.n	800bc0e <mem_malloc+0xb6>
 800bc00:	4b50      	ldr	r3, [pc, #320]	; (800bd44 <mem_malloc+0x1ec>)
 800bc02:	f240 3287 	movw	r2, #903	; 0x387
 800bc06:	4950      	ldr	r1, [pc, #320]	; (800bd48 <mem_malloc+0x1f0>)
 800bc08:	4850      	ldr	r0, [pc, #320]	; (800bd4c <mem_malloc+0x1f4>)
 800bc0a:	f00b f839 	bl	8016c80 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800bc0e:	8a7b      	ldrh	r3, [r7, #18]
 800bc10:	4618      	mov	r0, r3
 800bc12:	f7ff fcbb 	bl	800b58c <ptr_to_mem>
 800bc16:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	2200      	movs	r2, #0
 800bc1c:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800bc1e:	697b      	ldr	r3, [r7, #20]
 800bc20:	881a      	ldrh	r2, [r3, #0]
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	8bfa      	ldrh	r2, [r7, #30]
 800bc2a:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800bc2c:	697b      	ldr	r3, [r7, #20]
 800bc2e:	8a7a      	ldrh	r2, [r7, #18]
 800bc30:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800bc32:	697b      	ldr	r3, [r7, #20]
 800bc34:	2201      	movs	r2, #1
 800bc36:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	881b      	ldrh	r3, [r3, #0]
 800bc3c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bc40:	d00b      	beq.n	800bc5a <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	881b      	ldrh	r3, [r3, #0]
 800bc46:	4618      	mov	r0, r3
 800bc48:	f7ff fca0 	bl	800b58c <ptr_to_mem>
 800bc4c:	4602      	mov	r2, r0
 800bc4e:	8a7b      	ldrh	r3, [r7, #18]
 800bc50:	8053      	strh	r3, [r2, #2]
 800bc52:	e002      	b.n	800bc5a <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800bc54:	697b      	ldr	r3, [r7, #20]
 800bc56:	2201      	movs	r2, #1
 800bc58:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800bc5a:	4b39      	ldr	r3, [pc, #228]	; (800bd40 <mem_malloc+0x1e8>)
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	697a      	ldr	r2, [r7, #20]
 800bc60:	429a      	cmp	r2, r3
 800bc62:	d127      	bne.n	800bcb4 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800bc64:	4b36      	ldr	r3, [pc, #216]	; (800bd40 <mem_malloc+0x1e8>)
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800bc6a:	e005      	b.n	800bc78 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800bc6c:	69bb      	ldr	r3, [r7, #24]
 800bc6e:	881b      	ldrh	r3, [r3, #0]
 800bc70:	4618      	mov	r0, r3
 800bc72:	f7ff fc8b 	bl	800b58c <ptr_to_mem>
 800bc76:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800bc78:	69bb      	ldr	r3, [r7, #24]
 800bc7a:	791b      	ldrb	r3, [r3, #4]
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d004      	beq.n	800bc8a <mem_malloc+0x132>
 800bc80:	4b33      	ldr	r3, [pc, #204]	; (800bd50 <mem_malloc+0x1f8>)
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	69ba      	ldr	r2, [r7, #24]
 800bc86:	429a      	cmp	r2, r3
 800bc88:	d1f0      	bne.n	800bc6c <mem_malloc+0x114>
          }
          lfree = cur;
 800bc8a:	4a2d      	ldr	r2, [pc, #180]	; (800bd40 <mem_malloc+0x1e8>)
 800bc8c:	69bb      	ldr	r3, [r7, #24]
 800bc8e:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800bc90:	4b2b      	ldr	r3, [pc, #172]	; (800bd40 <mem_malloc+0x1e8>)
 800bc92:	681a      	ldr	r2, [r3, #0]
 800bc94:	4b2e      	ldr	r3, [pc, #184]	; (800bd50 <mem_malloc+0x1f8>)
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	429a      	cmp	r2, r3
 800bc9a:	d00b      	beq.n	800bcb4 <mem_malloc+0x15c>
 800bc9c:	4b28      	ldr	r3, [pc, #160]	; (800bd40 <mem_malloc+0x1e8>)
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	791b      	ldrb	r3, [r3, #4]
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d006      	beq.n	800bcb4 <mem_malloc+0x15c>
 800bca6:	4b27      	ldr	r3, [pc, #156]	; (800bd44 <mem_malloc+0x1ec>)
 800bca8:	f240 32b5 	movw	r2, #949	; 0x3b5
 800bcac:	4929      	ldr	r1, [pc, #164]	; (800bd54 <mem_malloc+0x1fc>)
 800bcae:	4827      	ldr	r0, [pc, #156]	; (800bd4c <mem_malloc+0x1f4>)
 800bcb0:	f00a ffe6 	bl	8016c80 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800bcb4:	4821      	ldr	r0, [pc, #132]	; (800bd3c <mem_malloc+0x1e4>)
 800bcb6:	f00a fa38 	bl	801612a <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800bcba:	8bba      	ldrh	r2, [r7, #28]
 800bcbc:	697b      	ldr	r3, [r7, #20]
 800bcbe:	4413      	add	r3, r2
 800bcc0:	3308      	adds	r3, #8
 800bcc2:	4a23      	ldr	r2, [pc, #140]	; (800bd50 <mem_malloc+0x1f8>)
 800bcc4:	6812      	ldr	r2, [r2, #0]
 800bcc6:	4293      	cmp	r3, r2
 800bcc8:	d906      	bls.n	800bcd8 <mem_malloc+0x180>
 800bcca:	4b1e      	ldr	r3, [pc, #120]	; (800bd44 <mem_malloc+0x1ec>)
 800bccc:	f240 32b9 	movw	r2, #953	; 0x3b9
 800bcd0:	4921      	ldr	r1, [pc, #132]	; (800bd58 <mem_malloc+0x200>)
 800bcd2:	481e      	ldr	r0, [pc, #120]	; (800bd4c <mem_malloc+0x1f4>)
 800bcd4:	f00a ffd4 	bl	8016c80 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800bcd8:	697b      	ldr	r3, [r7, #20]
 800bcda:	f003 0303 	and.w	r3, r3, #3
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d006      	beq.n	800bcf0 <mem_malloc+0x198>
 800bce2:	4b18      	ldr	r3, [pc, #96]	; (800bd44 <mem_malloc+0x1ec>)
 800bce4:	f240 32bb 	movw	r2, #955	; 0x3bb
 800bce8:	491c      	ldr	r1, [pc, #112]	; (800bd5c <mem_malloc+0x204>)
 800bcea:	4818      	ldr	r0, [pc, #96]	; (800bd4c <mem_malloc+0x1f4>)
 800bcec:	f00a ffc8 	bl	8016c80 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800bcf0:	697b      	ldr	r3, [r7, #20]
 800bcf2:	f003 0303 	and.w	r3, r3, #3
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d006      	beq.n	800bd08 <mem_malloc+0x1b0>
 800bcfa:	4b12      	ldr	r3, [pc, #72]	; (800bd44 <mem_malloc+0x1ec>)
 800bcfc:	f240 32bd 	movw	r2, #957	; 0x3bd
 800bd00:	4917      	ldr	r1, [pc, #92]	; (800bd60 <mem_malloc+0x208>)
 800bd02:	4812      	ldr	r0, [pc, #72]	; (800bd4c <mem_malloc+0x1f4>)
 800bd04:	f00a ffbc 	bl	8016c80 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800bd08:	697b      	ldr	r3, [r7, #20]
 800bd0a:	3308      	adds	r3, #8
 800bd0c:	e011      	b.n	800bd32 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800bd0e:	8bfb      	ldrh	r3, [r7, #30]
 800bd10:	4618      	mov	r0, r3
 800bd12:	f7ff fc3b 	bl	800b58c <ptr_to_mem>
 800bd16:	4603      	mov	r3, r0
 800bd18:	881b      	ldrh	r3, [r3, #0]
 800bd1a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800bd1c:	8bfa      	ldrh	r2, [r7, #30]
 800bd1e:	8bbb      	ldrh	r3, [r7, #28]
 800bd20:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800bd24:	429a      	cmp	r2, r3
 800bd26:	f4ff af41 	bcc.w	800bbac <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800bd2a:	4804      	ldr	r0, [pc, #16]	; (800bd3c <mem_malloc+0x1e4>)
 800bd2c:	f00a f9fd 	bl	801612a <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800bd30:	2300      	movs	r3, #0
}
 800bd32:	4618      	mov	r0, r3
 800bd34:	3720      	adds	r7, #32
 800bd36:	46bd      	mov	sp, r7
 800bd38:	bd80      	pop	{r7, pc}
 800bd3a:	bf00      	nop
 800bd3c:	20008d30 	.word	0x20008d30
 800bd40:	20008d34 	.word	0x20008d34
 800bd44:	08018178 	.word	0x08018178
 800bd48:	0801833c 	.word	0x0801833c
 800bd4c:	080181c0 	.word	0x080181c0
 800bd50:	20008d2c 	.word	0x20008d2c
 800bd54:	08018350 	.word	0x08018350
 800bd58:	0801836c 	.word	0x0801836c
 800bd5c:	0801839c 	.word	0x0801839c
 800bd60:	080183cc 	.word	0x080183cc

0800bd64 <mem_calloc>:
 * @param size size of the objects to allocate
 * @return pointer to allocated memory / NULL pointer if there is an error
 */
void *
mem_calloc(mem_size_t count, mem_size_t size)
{
 800bd64:	b580      	push	{r7, lr}
 800bd66:	b084      	sub	sp, #16
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	4603      	mov	r3, r0
 800bd6c:	460a      	mov	r2, r1
 800bd6e:	80fb      	strh	r3, [r7, #6]
 800bd70:	4613      	mov	r3, r2
 800bd72:	80bb      	strh	r3, [r7, #4]
  void *p;
  size_t alloc_size = (size_t)count * (size_t)size;
 800bd74:	88fb      	ldrh	r3, [r7, #6]
 800bd76:	88ba      	ldrh	r2, [r7, #4]
 800bd78:	fb02 f303 	mul.w	r3, r2, r3
 800bd7c:	60fb      	str	r3, [r7, #12]

  if ((size_t)(mem_size_t)alloc_size != alloc_size) {
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	b29b      	uxth	r3, r3
 800bd82:	461a      	mov	r2, r3
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	4293      	cmp	r3, r2
 800bd88:	d001      	beq.n	800bd8e <mem_calloc+0x2a>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_calloc: could not allocate %"SZT_F" bytes\n", alloc_size));
    return NULL;
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	e00e      	b.n	800bdac <mem_calloc+0x48>
  }

  /* allocate 'count' objects of size 'size' */
  p = mem_malloc((mem_size_t)alloc_size);
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	b29b      	uxth	r3, r3
 800bd92:	4618      	mov	r0, r3
 800bd94:	f7ff fee0 	bl	800bb58 <mem_malloc>
 800bd98:	60b8      	str	r0, [r7, #8]
  if (p) {
 800bd9a:	68bb      	ldr	r3, [r7, #8]
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d004      	beq.n	800bdaa <mem_calloc+0x46>
    /* zero the memory */
    memset(p, 0, alloc_size);
 800bda0:	68fa      	ldr	r2, [r7, #12]
 800bda2:	2100      	movs	r1, #0
 800bda4:	68b8      	ldr	r0, [r7, #8]
 800bda6:	f00a fe85 	bl	8016ab4 <memset>
  }
  return p;
 800bdaa:	68bb      	ldr	r3, [r7, #8]
}
 800bdac:	4618      	mov	r0, r3
 800bdae:	3710      	adds	r7, #16
 800bdb0:	46bd      	mov	sp, r7
 800bdb2:	bd80      	pop	{r7, pc}

0800bdb4 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800bdb4:	b480      	push	{r7}
 800bdb6:	b085      	sub	sp, #20
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	689b      	ldr	r3, [r3, #8]
 800bdc0:	2200      	movs	r2, #0
 800bdc2:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	685b      	ldr	r3, [r3, #4]
 800bdc8:	3303      	adds	r3, #3
 800bdca:	f023 0303 	bic.w	r3, r3, #3
 800bdce:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800bdd0:	2300      	movs	r3, #0
 800bdd2:	60fb      	str	r3, [r7, #12]
 800bdd4:	e011      	b.n	800bdfa <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	689b      	ldr	r3, [r3, #8]
 800bdda:	681a      	ldr	r2, [r3, #0]
 800bddc:	68bb      	ldr	r3, [r7, #8]
 800bdde:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	689b      	ldr	r3, [r3, #8]
 800bde4:	68ba      	ldr	r2, [r7, #8]
 800bde6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	881b      	ldrh	r3, [r3, #0]
 800bdec:	461a      	mov	r2, r3
 800bdee:	68bb      	ldr	r3, [r7, #8]
 800bdf0:	4413      	add	r3, r2
 800bdf2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	3301      	adds	r3, #1
 800bdf8:	60fb      	str	r3, [r7, #12]
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	885b      	ldrh	r3, [r3, #2]
 800bdfe:	461a      	mov	r2, r3
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	4293      	cmp	r3, r2
 800be04:	dbe7      	blt.n	800bdd6 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800be06:	bf00      	nop
 800be08:	bf00      	nop
 800be0a:	3714      	adds	r7, #20
 800be0c:	46bd      	mov	sp, r7
 800be0e:	bc80      	pop	{r7}
 800be10:	4770      	bx	lr
	...

0800be14 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800be14:	b580      	push	{r7, lr}
 800be16:	b082      	sub	sp, #8
 800be18:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800be1a:	2300      	movs	r3, #0
 800be1c:	80fb      	strh	r3, [r7, #6]
 800be1e:	e009      	b.n	800be34 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800be20:	88fb      	ldrh	r3, [r7, #6]
 800be22:	4a08      	ldr	r2, [pc, #32]	; (800be44 <memp_init+0x30>)
 800be24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800be28:	4618      	mov	r0, r3
 800be2a:	f7ff ffc3 	bl	800bdb4 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800be2e:	88fb      	ldrh	r3, [r7, #6]
 800be30:	3301      	adds	r3, #1
 800be32:	80fb      	strh	r3, [r7, #6]
 800be34:	88fb      	ldrh	r3, [r7, #6]
 800be36:	2b0c      	cmp	r3, #12
 800be38:	d9f2      	bls.n	800be20 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800be3a:	bf00      	nop
 800be3c:	bf00      	nop
 800be3e:	3708      	adds	r7, #8
 800be40:	46bd      	mov	sp, r7
 800be42:	bd80      	pop	{r7, pc}
 800be44:	0801abec 	.word	0x0801abec

0800be48 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800be48:	b580      	push	{r7, lr}
 800be4a:	b084      	sub	sp, #16
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800be50:	f00a f99e 	bl	8016190 <sys_arch_protect>
 800be54:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	689b      	ldr	r3, [r3, #8]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800be5e:	68bb      	ldr	r3, [r7, #8]
 800be60:	2b00      	cmp	r3, #0
 800be62:	d015      	beq.n	800be90 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	689b      	ldr	r3, [r3, #8]
 800be68:	68ba      	ldr	r2, [r7, #8]
 800be6a:	6812      	ldr	r2, [r2, #0]
 800be6c:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800be6e:	68bb      	ldr	r3, [r7, #8]
 800be70:	f003 0303 	and.w	r3, r3, #3
 800be74:	2b00      	cmp	r3, #0
 800be76:	d006      	beq.n	800be86 <do_memp_malloc_pool+0x3e>
 800be78:	4b09      	ldr	r3, [pc, #36]	; (800bea0 <do_memp_malloc_pool+0x58>)
 800be7a:	f44f 728c 	mov.w	r2, #280	; 0x118
 800be7e:	4909      	ldr	r1, [pc, #36]	; (800bea4 <do_memp_malloc_pool+0x5c>)
 800be80:	4809      	ldr	r0, [pc, #36]	; (800bea8 <do_memp_malloc_pool+0x60>)
 800be82:	f00a fefd 	bl	8016c80 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800be86:	68f8      	ldr	r0, [r7, #12]
 800be88:	f00a f990 	bl	80161ac <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800be8c:	68bb      	ldr	r3, [r7, #8]
 800be8e:	e003      	b.n	800be98 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800be90:	68f8      	ldr	r0, [r7, #12]
 800be92:	f00a f98b 	bl	80161ac <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800be96:	2300      	movs	r3, #0
}
 800be98:	4618      	mov	r0, r3
 800be9a:	3710      	adds	r7, #16
 800be9c:	46bd      	mov	sp, r7
 800be9e:	bd80      	pop	{r7, pc}
 800bea0:	080183f0 	.word	0x080183f0
 800bea4:	08018420 	.word	0x08018420
 800bea8:	08018444 	.word	0x08018444

0800beac <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800beac:	b580      	push	{r7, lr}
 800beae:	b082      	sub	sp, #8
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d106      	bne.n	800bec8 <memp_malloc_pool+0x1c>
 800beba:	4b0a      	ldr	r3, [pc, #40]	; (800bee4 <memp_malloc_pool+0x38>)
 800bebc:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800bec0:	4909      	ldr	r1, [pc, #36]	; (800bee8 <memp_malloc_pool+0x3c>)
 800bec2:	480a      	ldr	r0, [pc, #40]	; (800beec <memp_malloc_pool+0x40>)
 800bec4:	f00a fedc 	bl	8016c80 <iprintf>
  if (desc == NULL) {
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	2b00      	cmp	r3, #0
 800becc:	d101      	bne.n	800bed2 <memp_malloc_pool+0x26>
    return NULL;
 800bece:	2300      	movs	r3, #0
 800bed0:	e003      	b.n	800beda <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800bed2:	6878      	ldr	r0, [r7, #4]
 800bed4:	f7ff ffb8 	bl	800be48 <do_memp_malloc_pool>
 800bed8:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800beda:	4618      	mov	r0, r3
 800bedc:	3708      	adds	r7, #8
 800bede:	46bd      	mov	sp, r7
 800bee0:	bd80      	pop	{r7, pc}
 800bee2:	bf00      	nop
 800bee4:	080183f0 	.word	0x080183f0
 800bee8:	0801846c 	.word	0x0801846c
 800beec:	08018444 	.word	0x08018444

0800bef0 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800bef0:	b580      	push	{r7, lr}
 800bef2:	b084      	sub	sp, #16
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	4603      	mov	r3, r0
 800bef8:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800befa:	79fb      	ldrb	r3, [r7, #7]
 800befc:	2b0c      	cmp	r3, #12
 800befe:	d908      	bls.n	800bf12 <memp_malloc+0x22>
 800bf00:	4b0a      	ldr	r3, [pc, #40]	; (800bf2c <memp_malloc+0x3c>)
 800bf02:	f240 1257 	movw	r2, #343	; 0x157
 800bf06:	490a      	ldr	r1, [pc, #40]	; (800bf30 <memp_malloc+0x40>)
 800bf08:	480a      	ldr	r0, [pc, #40]	; (800bf34 <memp_malloc+0x44>)
 800bf0a:	f00a feb9 	bl	8016c80 <iprintf>
 800bf0e:	2300      	movs	r3, #0
 800bf10:	e008      	b.n	800bf24 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800bf12:	79fb      	ldrb	r3, [r7, #7]
 800bf14:	4a08      	ldr	r2, [pc, #32]	; (800bf38 <memp_malloc+0x48>)
 800bf16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bf1a:	4618      	mov	r0, r3
 800bf1c:	f7ff ff94 	bl	800be48 <do_memp_malloc_pool>
 800bf20:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800bf22:	68fb      	ldr	r3, [r7, #12]
}
 800bf24:	4618      	mov	r0, r3
 800bf26:	3710      	adds	r7, #16
 800bf28:	46bd      	mov	sp, r7
 800bf2a:	bd80      	pop	{r7, pc}
 800bf2c:	080183f0 	.word	0x080183f0
 800bf30:	08018480 	.word	0x08018480
 800bf34:	08018444 	.word	0x08018444
 800bf38:	0801abec 	.word	0x0801abec

0800bf3c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b084      	sub	sp, #16
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	6078      	str	r0, [r7, #4]
 800bf44:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800bf46:	683b      	ldr	r3, [r7, #0]
 800bf48:	f003 0303 	and.w	r3, r3, #3
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d006      	beq.n	800bf5e <do_memp_free_pool+0x22>
 800bf50:	4b0d      	ldr	r3, [pc, #52]	; (800bf88 <do_memp_free_pool+0x4c>)
 800bf52:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800bf56:	490d      	ldr	r1, [pc, #52]	; (800bf8c <do_memp_free_pool+0x50>)
 800bf58:	480d      	ldr	r0, [pc, #52]	; (800bf90 <do_memp_free_pool+0x54>)
 800bf5a:	f00a fe91 	bl	8016c80 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800bf5e:	683b      	ldr	r3, [r7, #0]
 800bf60:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800bf62:	f00a f915 	bl	8016190 <sys_arch_protect>
 800bf66:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	689b      	ldr	r3, [r3, #8]
 800bf6c:	681a      	ldr	r2, [r3, #0]
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	689b      	ldr	r3, [r3, #8]
 800bf76:	68fa      	ldr	r2, [r7, #12]
 800bf78:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800bf7a:	68b8      	ldr	r0, [r7, #8]
 800bf7c:	f00a f916 	bl	80161ac <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800bf80:	bf00      	nop
 800bf82:	3710      	adds	r7, #16
 800bf84:	46bd      	mov	sp, r7
 800bf86:	bd80      	pop	{r7, pc}
 800bf88:	080183f0 	.word	0x080183f0
 800bf8c:	080184a0 	.word	0x080184a0
 800bf90:	08018444 	.word	0x08018444

0800bf94 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800bf94:	b580      	push	{r7, lr}
 800bf96:	b082      	sub	sp, #8
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	6078      	str	r0, [r7, #4]
 800bf9c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d106      	bne.n	800bfb2 <memp_free_pool+0x1e>
 800bfa4:	4b0a      	ldr	r3, [pc, #40]	; (800bfd0 <memp_free_pool+0x3c>)
 800bfa6:	f240 1295 	movw	r2, #405	; 0x195
 800bfaa:	490a      	ldr	r1, [pc, #40]	; (800bfd4 <memp_free_pool+0x40>)
 800bfac:	480a      	ldr	r0, [pc, #40]	; (800bfd8 <memp_free_pool+0x44>)
 800bfae:	f00a fe67 	bl	8016c80 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d007      	beq.n	800bfc8 <memp_free_pool+0x34>
 800bfb8:	683b      	ldr	r3, [r7, #0]
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d004      	beq.n	800bfc8 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800bfbe:	6839      	ldr	r1, [r7, #0]
 800bfc0:	6878      	ldr	r0, [r7, #4]
 800bfc2:	f7ff ffbb 	bl	800bf3c <do_memp_free_pool>
 800bfc6:	e000      	b.n	800bfca <memp_free_pool+0x36>
    return;
 800bfc8:	bf00      	nop
}
 800bfca:	3708      	adds	r7, #8
 800bfcc:	46bd      	mov	sp, r7
 800bfce:	bd80      	pop	{r7, pc}
 800bfd0:	080183f0 	.word	0x080183f0
 800bfd4:	0801846c 	.word	0x0801846c
 800bfd8:	08018444 	.word	0x08018444

0800bfdc <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800bfdc:	b580      	push	{r7, lr}
 800bfde:	b082      	sub	sp, #8
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	4603      	mov	r3, r0
 800bfe4:	6039      	str	r1, [r7, #0]
 800bfe6:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800bfe8:	79fb      	ldrb	r3, [r7, #7]
 800bfea:	2b0c      	cmp	r3, #12
 800bfec:	d907      	bls.n	800bffe <memp_free+0x22>
 800bfee:	4b0c      	ldr	r3, [pc, #48]	; (800c020 <memp_free+0x44>)
 800bff0:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800bff4:	490b      	ldr	r1, [pc, #44]	; (800c024 <memp_free+0x48>)
 800bff6:	480c      	ldr	r0, [pc, #48]	; (800c028 <memp_free+0x4c>)
 800bff8:	f00a fe42 	bl	8016c80 <iprintf>
 800bffc:	e00c      	b.n	800c018 <memp_free+0x3c>

  if (mem == NULL) {
 800bffe:	683b      	ldr	r3, [r7, #0]
 800c000:	2b00      	cmp	r3, #0
 800c002:	d008      	beq.n	800c016 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800c004:	79fb      	ldrb	r3, [r7, #7]
 800c006:	4a09      	ldr	r2, [pc, #36]	; (800c02c <memp_free+0x50>)
 800c008:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c00c:	6839      	ldr	r1, [r7, #0]
 800c00e:	4618      	mov	r0, r3
 800c010:	f7ff ff94 	bl	800bf3c <do_memp_free_pool>
 800c014:	e000      	b.n	800c018 <memp_free+0x3c>
    return;
 800c016:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800c018:	3708      	adds	r7, #8
 800c01a:	46bd      	mov	sp, r7
 800c01c:	bd80      	pop	{r7, pc}
 800c01e:	bf00      	nop
 800c020:	080183f0 	.word	0x080183f0
 800c024:	080184c0 	.word	0x080184c0
 800c028:	08018444 	.word	0x08018444
 800c02c:	0801abec 	.word	0x0801abec

0800c030 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800c030:	b480      	push	{r7}
 800c032:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800c034:	bf00      	nop
 800c036:	46bd      	mov	sp, r7
 800c038:	bc80      	pop	{r7}
 800c03a:	4770      	bx	lr

0800c03c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800c03c:	b580      	push	{r7, lr}
 800c03e:	b086      	sub	sp, #24
 800c040:	af00      	add	r7, sp, #0
 800c042:	60f8      	str	r0, [r7, #12]
 800c044:	60b9      	str	r1, [r7, #8]
 800c046:	607a      	str	r2, [r7, #4]
 800c048:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d108      	bne.n	800c062 <netif_add+0x26>
 800c050:	4b57      	ldr	r3, [pc, #348]	; (800c1b0 <netif_add+0x174>)
 800c052:	f240 1227 	movw	r2, #295	; 0x127
 800c056:	4957      	ldr	r1, [pc, #348]	; (800c1b4 <netif_add+0x178>)
 800c058:	4857      	ldr	r0, [pc, #348]	; (800c1b8 <netif_add+0x17c>)
 800c05a:	f00a fe11 	bl	8016c80 <iprintf>
 800c05e:	2300      	movs	r3, #0
 800c060:	e0a2      	b.n	800c1a8 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800c062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c064:	2b00      	cmp	r3, #0
 800c066:	d108      	bne.n	800c07a <netif_add+0x3e>
 800c068:	4b51      	ldr	r3, [pc, #324]	; (800c1b0 <netif_add+0x174>)
 800c06a:	f44f 7294 	mov.w	r2, #296	; 0x128
 800c06e:	4953      	ldr	r1, [pc, #332]	; (800c1bc <netif_add+0x180>)
 800c070:	4851      	ldr	r0, [pc, #324]	; (800c1b8 <netif_add+0x17c>)
 800c072:	f00a fe05 	bl	8016c80 <iprintf>
 800c076:	2300      	movs	r3, #0
 800c078:	e096      	b.n	800c1a8 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800c07a:	68bb      	ldr	r3, [r7, #8]
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d101      	bne.n	800c084 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800c080:	4b4f      	ldr	r3, [pc, #316]	; (800c1c0 <netif_add+0x184>)
 800c082:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	2b00      	cmp	r3, #0
 800c088:	d101      	bne.n	800c08e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800c08a:	4b4d      	ldr	r3, [pc, #308]	; (800c1c0 <netif_add+0x184>)
 800c08c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800c08e:	683b      	ldr	r3, [r7, #0]
 800c090:	2b00      	cmp	r3, #0
 800c092:	d101      	bne.n	800c098 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800c094:	4b4a      	ldr	r3, [pc, #296]	; (800c1c0 <netif_add+0x184>)
 800c096:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	2200      	movs	r2, #0
 800c09c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	2200      	movs	r2, #0
 800c0a2:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	2200      	movs	r2, #0
 800c0a8:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	4a45      	ldr	r2, [pc, #276]	; (800c1c4 <netif_add+0x188>)
 800c0ae:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	2200      	movs	r2, #0
 800c0b4:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	2200      	movs	r2, #0
 800c0ba:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	2200      	movs	r2, #0
 800c0c2:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	6a3a      	ldr	r2, [r7, #32]
 800c0c8:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800c0ca:	4b3f      	ldr	r3, [pc, #252]	; (800c1c8 <netif_add+0x18c>)
 800c0cc:	781a      	ldrb	r2, [r3, #0]
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c0d8:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800c0da:	683b      	ldr	r3, [r7, #0]
 800c0dc:	687a      	ldr	r2, [r7, #4]
 800c0de:	68b9      	ldr	r1, [r7, #8]
 800c0e0:	68f8      	ldr	r0, [r7, #12]
 800c0e2:	f000 f911 	bl	800c308 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800c0e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0e8:	68f8      	ldr	r0, [r7, #12]
 800c0ea:	4798      	blx	r3
 800c0ec:	4603      	mov	r3, r0
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d001      	beq.n	800c0f6 <netif_add+0xba>
    return NULL;
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	e058      	b.n	800c1a8 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c0fc:	2bff      	cmp	r3, #255	; 0xff
 800c0fe:	d103      	bne.n	800c108 <netif_add+0xcc>
        netif->num = 0;
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	2200      	movs	r2, #0
 800c104:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800c108:	2300      	movs	r3, #0
 800c10a:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c10c:	4b2f      	ldr	r3, [pc, #188]	; (800c1cc <netif_add+0x190>)
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	617b      	str	r3, [r7, #20]
 800c112:	e02b      	b.n	800c16c <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800c114:	697a      	ldr	r2, [r7, #20]
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	429a      	cmp	r2, r3
 800c11a:	d106      	bne.n	800c12a <netif_add+0xee>
 800c11c:	4b24      	ldr	r3, [pc, #144]	; (800c1b0 <netif_add+0x174>)
 800c11e:	f240 128b 	movw	r2, #395	; 0x18b
 800c122:	492b      	ldr	r1, [pc, #172]	; (800c1d0 <netif_add+0x194>)
 800c124:	4824      	ldr	r0, [pc, #144]	; (800c1b8 <netif_add+0x17c>)
 800c126:	f00a fdab 	bl	8016c80 <iprintf>
        num_netifs++;
 800c12a:	693b      	ldr	r3, [r7, #16]
 800c12c:	3301      	adds	r3, #1
 800c12e:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800c130:	693b      	ldr	r3, [r7, #16]
 800c132:	2bff      	cmp	r3, #255	; 0xff
 800c134:	dd06      	ble.n	800c144 <netif_add+0x108>
 800c136:	4b1e      	ldr	r3, [pc, #120]	; (800c1b0 <netif_add+0x174>)
 800c138:	f240 128d 	movw	r2, #397	; 0x18d
 800c13c:	4925      	ldr	r1, [pc, #148]	; (800c1d4 <netif_add+0x198>)
 800c13e:	481e      	ldr	r0, [pc, #120]	; (800c1b8 <netif_add+0x17c>)
 800c140:	f00a fd9e 	bl	8016c80 <iprintf>
        if (netif2->num == netif->num) {
 800c144:	697b      	ldr	r3, [r7, #20]
 800c146:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c150:	429a      	cmp	r2, r3
 800c152:	d108      	bne.n	800c166 <netif_add+0x12a>
          netif->num++;
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c15a:	3301      	adds	r3, #1
 800c15c:	b2da      	uxtb	r2, r3
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800c164:	e005      	b.n	800c172 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c166:	697b      	ldr	r3, [r7, #20]
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	617b      	str	r3, [r7, #20]
 800c16c:	697b      	ldr	r3, [r7, #20]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d1d0      	bne.n	800c114 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800c172:	697b      	ldr	r3, [r7, #20]
 800c174:	2b00      	cmp	r3, #0
 800c176:	d1be      	bne.n	800c0f6 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c17e:	2bfe      	cmp	r3, #254	; 0xfe
 800c180:	d103      	bne.n	800c18a <netif_add+0x14e>
    netif_num = 0;
 800c182:	4b11      	ldr	r3, [pc, #68]	; (800c1c8 <netif_add+0x18c>)
 800c184:	2200      	movs	r2, #0
 800c186:	701a      	strb	r2, [r3, #0]
 800c188:	e006      	b.n	800c198 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c190:	3301      	adds	r3, #1
 800c192:	b2da      	uxtb	r2, r3
 800c194:	4b0c      	ldr	r3, [pc, #48]	; (800c1c8 <netif_add+0x18c>)
 800c196:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800c198:	4b0c      	ldr	r3, [pc, #48]	; (800c1cc <netif_add+0x190>)
 800c19a:	681a      	ldr	r2, [r3, #0]
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800c1a0:	4a0a      	ldr	r2, [pc, #40]	; (800c1cc <netif_add+0x190>)
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800c1a6:	68fb      	ldr	r3, [r7, #12]
}
 800c1a8:	4618      	mov	r0, r3
 800c1aa:	3718      	adds	r7, #24
 800c1ac:	46bd      	mov	sp, r7
 800c1ae:	bd80      	pop	{r7, pc}
 800c1b0:	080184dc 	.word	0x080184dc
 800c1b4:	08018570 	.word	0x08018570
 800c1b8:	0801852c 	.word	0x0801852c
 800c1bc:	0801858c 	.word	0x0801858c
 800c1c0:	0801ac60 	.word	0x0801ac60
 800c1c4:	0800c515 	.word	0x0800c515
 800c1c8:	2000be0c 	.word	0x2000be0c
 800c1cc:	2000be04 	.word	0x2000be04
 800c1d0:	080185b0 	.word	0x080185b0
 800c1d4:	080185c4 	.word	0x080185c4

0800c1d8 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c1d8:	b580      	push	{r7, lr}
 800c1da:	b082      	sub	sp, #8
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	6078      	str	r0, [r7, #4]
 800c1e0:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800c1e2:	6839      	ldr	r1, [r7, #0]
 800c1e4:	6878      	ldr	r0, [r7, #4]
 800c1e6:	f002 fe1b 	bl	800ee20 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800c1ea:	6839      	ldr	r1, [r7, #0]
 800c1ec:	6878      	ldr	r0, [r7, #4]
 800c1ee:	f007 fbc1 	bl	8013974 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800c1f2:	bf00      	nop
 800c1f4:	3708      	adds	r7, #8
 800c1f6:	46bd      	mov	sp, r7
 800c1f8:	bd80      	pop	{r7, pc}
	...

0800c1fc <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800c1fc:	b580      	push	{r7, lr}
 800c1fe:	b086      	sub	sp, #24
 800c200:	af00      	add	r7, sp, #0
 800c202:	60f8      	str	r0, [r7, #12]
 800c204:	60b9      	str	r1, [r7, #8]
 800c206:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800c208:	68bb      	ldr	r3, [r7, #8]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d106      	bne.n	800c21c <netif_do_set_ipaddr+0x20>
 800c20e:	4b1d      	ldr	r3, [pc, #116]	; (800c284 <netif_do_set_ipaddr+0x88>)
 800c210:	f240 12cb 	movw	r2, #459	; 0x1cb
 800c214:	491c      	ldr	r1, [pc, #112]	; (800c288 <netif_do_set_ipaddr+0x8c>)
 800c216:	481d      	ldr	r0, [pc, #116]	; (800c28c <netif_do_set_ipaddr+0x90>)
 800c218:	f00a fd32 	bl	8016c80 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d106      	bne.n	800c230 <netif_do_set_ipaddr+0x34>
 800c222:	4b18      	ldr	r3, [pc, #96]	; (800c284 <netif_do_set_ipaddr+0x88>)
 800c224:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800c228:	4917      	ldr	r1, [pc, #92]	; (800c288 <netif_do_set_ipaddr+0x8c>)
 800c22a:	4818      	ldr	r0, [pc, #96]	; (800c28c <netif_do_set_ipaddr+0x90>)
 800c22c:	f00a fd28 	bl	8016c80 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800c230:	68bb      	ldr	r3, [r7, #8]
 800c232:	681a      	ldr	r2, [r3, #0]
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	3304      	adds	r3, #4
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	429a      	cmp	r2, r3
 800c23c:	d01c      	beq.n	800c278 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800c23e:	68bb      	ldr	r3, [r7, #8]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	3304      	adds	r3, #4
 800c248:	681a      	ldr	r2, [r3, #0]
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800c24e:	f107 0314 	add.w	r3, r7, #20
 800c252:	4619      	mov	r1, r3
 800c254:	6878      	ldr	r0, [r7, #4]
 800c256:	f7ff ffbf 	bl	800c1d8 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800c25a:	68bb      	ldr	r3, [r7, #8]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d002      	beq.n	800c266 <netif_do_set_ipaddr+0x6a>
 800c260:	68bb      	ldr	r3, [r7, #8]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	e000      	b.n	800c268 <netif_do_set_ipaddr+0x6c>
 800c266:	2300      	movs	r3, #0
 800c268:	68fa      	ldr	r2, [r7, #12]
 800c26a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800c26c:	2101      	movs	r1, #1
 800c26e:	68f8      	ldr	r0, [r7, #12]
 800c270:	f000 f8ce 	bl	800c410 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800c274:	2301      	movs	r3, #1
 800c276:	e000      	b.n	800c27a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800c278:	2300      	movs	r3, #0
}
 800c27a:	4618      	mov	r0, r3
 800c27c:	3718      	adds	r7, #24
 800c27e:	46bd      	mov	sp, r7
 800c280:	bd80      	pop	{r7, pc}
 800c282:	bf00      	nop
 800c284:	080184dc 	.word	0x080184dc
 800c288:	080185f4 	.word	0x080185f4
 800c28c:	0801852c 	.word	0x0801852c

0800c290 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800c290:	b480      	push	{r7}
 800c292:	b085      	sub	sp, #20
 800c294:	af00      	add	r7, sp, #0
 800c296:	60f8      	str	r0, [r7, #12]
 800c298:	60b9      	str	r1, [r7, #8]
 800c29a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800c29c:	68bb      	ldr	r3, [r7, #8]
 800c29e:	681a      	ldr	r2, [r3, #0]
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	3308      	adds	r3, #8
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	429a      	cmp	r2, r3
 800c2a8:	d00a      	beq.n	800c2c0 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800c2aa:	68bb      	ldr	r3, [r7, #8]
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d002      	beq.n	800c2b6 <netif_do_set_netmask+0x26>
 800c2b0:	68bb      	ldr	r3, [r7, #8]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	e000      	b.n	800c2b8 <netif_do_set_netmask+0x28>
 800c2b6:	2300      	movs	r3, #0
 800c2b8:	68fa      	ldr	r2, [r7, #12]
 800c2ba:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800c2bc:	2301      	movs	r3, #1
 800c2be:	e000      	b.n	800c2c2 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800c2c0:	2300      	movs	r3, #0
}
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	3714      	adds	r7, #20
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	bc80      	pop	{r7}
 800c2ca:	4770      	bx	lr

0800c2cc <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800c2cc:	b480      	push	{r7}
 800c2ce:	b085      	sub	sp, #20
 800c2d0:	af00      	add	r7, sp, #0
 800c2d2:	60f8      	str	r0, [r7, #12]
 800c2d4:	60b9      	str	r1, [r7, #8]
 800c2d6:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800c2d8:	68bb      	ldr	r3, [r7, #8]
 800c2da:	681a      	ldr	r2, [r3, #0]
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	330c      	adds	r3, #12
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	429a      	cmp	r2, r3
 800c2e4:	d00a      	beq.n	800c2fc <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800c2e6:	68bb      	ldr	r3, [r7, #8]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d002      	beq.n	800c2f2 <netif_do_set_gw+0x26>
 800c2ec:	68bb      	ldr	r3, [r7, #8]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	e000      	b.n	800c2f4 <netif_do_set_gw+0x28>
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	68fa      	ldr	r2, [r7, #12]
 800c2f6:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800c2f8:	2301      	movs	r3, #1
 800c2fa:	e000      	b.n	800c2fe <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800c2fc:	2300      	movs	r3, #0
}
 800c2fe:	4618      	mov	r0, r3
 800c300:	3714      	adds	r7, #20
 800c302:	46bd      	mov	sp, r7
 800c304:	bc80      	pop	{r7}
 800c306:	4770      	bx	lr

0800c308 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800c308:	b580      	push	{r7, lr}
 800c30a:	b088      	sub	sp, #32
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	60f8      	str	r0, [r7, #12]
 800c310:	60b9      	str	r1, [r7, #8]
 800c312:	607a      	str	r2, [r7, #4]
 800c314:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800c316:	2300      	movs	r3, #0
 800c318:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800c31a:	2300      	movs	r3, #0
 800c31c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800c31e:	68bb      	ldr	r3, [r7, #8]
 800c320:	2b00      	cmp	r3, #0
 800c322:	d101      	bne.n	800c328 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800c324:	4b1c      	ldr	r3, [pc, #112]	; (800c398 <netif_set_addr+0x90>)
 800c326:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d101      	bne.n	800c332 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800c32e:	4b1a      	ldr	r3, [pc, #104]	; (800c398 <netif_set_addr+0x90>)
 800c330:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800c332:	683b      	ldr	r3, [r7, #0]
 800c334:	2b00      	cmp	r3, #0
 800c336:	d101      	bne.n	800c33c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800c338:	4b17      	ldr	r3, [pc, #92]	; (800c398 <netif_set_addr+0x90>)
 800c33a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800c33c:	68bb      	ldr	r3, [r7, #8]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d003      	beq.n	800c34a <netif_set_addr+0x42>
 800c342:	68bb      	ldr	r3, [r7, #8]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	2b00      	cmp	r3, #0
 800c348:	d101      	bne.n	800c34e <netif_set_addr+0x46>
 800c34a:	2301      	movs	r3, #1
 800c34c:	e000      	b.n	800c350 <netif_set_addr+0x48>
 800c34e:	2300      	movs	r3, #0
 800c350:	617b      	str	r3, [r7, #20]
  if (remove) {
 800c352:	697b      	ldr	r3, [r7, #20]
 800c354:	2b00      	cmp	r3, #0
 800c356:	d006      	beq.n	800c366 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800c358:	f107 0310 	add.w	r3, r7, #16
 800c35c:	461a      	mov	r2, r3
 800c35e:	68b9      	ldr	r1, [r7, #8]
 800c360:	68f8      	ldr	r0, [r7, #12]
 800c362:	f7ff ff4b 	bl	800c1fc <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800c366:	69fa      	ldr	r2, [r7, #28]
 800c368:	6879      	ldr	r1, [r7, #4]
 800c36a:	68f8      	ldr	r0, [r7, #12]
 800c36c:	f7ff ff90 	bl	800c290 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800c370:	69ba      	ldr	r2, [r7, #24]
 800c372:	6839      	ldr	r1, [r7, #0]
 800c374:	68f8      	ldr	r0, [r7, #12]
 800c376:	f7ff ffa9 	bl	800c2cc <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800c37a:	697b      	ldr	r3, [r7, #20]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d106      	bne.n	800c38e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800c380:	f107 0310 	add.w	r3, r7, #16
 800c384:	461a      	mov	r2, r3
 800c386:	68b9      	ldr	r1, [r7, #8]
 800c388:	68f8      	ldr	r0, [r7, #12]
 800c38a:	f7ff ff37 	bl	800c1fc <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800c38e:	bf00      	nop
 800c390:	3720      	adds	r7, #32
 800c392:	46bd      	mov	sp, r7
 800c394:	bd80      	pop	{r7, pc}
 800c396:	bf00      	nop
 800c398:	0801ac60 	.word	0x0801ac60

0800c39c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800c39c:	b480      	push	{r7}
 800c39e:	b083      	sub	sp, #12
 800c3a0:	af00      	add	r7, sp, #0
 800c3a2:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800c3a4:	4a03      	ldr	r2, [pc, #12]	; (800c3b4 <netif_set_default+0x18>)
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800c3aa:	bf00      	nop
 800c3ac:	370c      	adds	r7, #12
 800c3ae:	46bd      	mov	sp, r7
 800c3b0:	bc80      	pop	{r7}
 800c3b2:	4770      	bx	lr
 800c3b4:	2000be08 	.word	0x2000be08

0800c3b8 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	b082      	sub	sp, #8
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d107      	bne.n	800c3d6 <netif_set_up+0x1e>
 800c3c6:	4b0f      	ldr	r3, [pc, #60]	; (800c404 <netif_set_up+0x4c>)
 800c3c8:	f44f 7254 	mov.w	r2, #848	; 0x350
 800c3cc:	490e      	ldr	r1, [pc, #56]	; (800c408 <netif_set_up+0x50>)
 800c3ce:	480f      	ldr	r0, [pc, #60]	; (800c40c <netif_set_up+0x54>)
 800c3d0:	f00a fc56 	bl	8016c80 <iprintf>
 800c3d4:	e013      	b.n	800c3fe <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c3dc:	f003 0301 	and.w	r3, r3, #1
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d10c      	bne.n	800c3fe <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c3ea:	f043 0301 	orr.w	r3, r3, #1
 800c3ee:	b2da      	uxtb	r2, r3
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800c3f6:	2103      	movs	r1, #3
 800c3f8:	6878      	ldr	r0, [r7, #4]
 800c3fa:	f000 f809 	bl	800c410 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800c3fe:	3708      	adds	r7, #8
 800c400:	46bd      	mov	sp, r7
 800c402:	bd80      	pop	{r7, pc}
 800c404:	080184dc 	.word	0x080184dc
 800c408:	08018664 	.word	0x08018664
 800c40c:	0801852c 	.word	0x0801852c

0800c410 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800c410:	b580      	push	{r7, lr}
 800c412:	b082      	sub	sp, #8
 800c414:	af00      	add	r7, sp, #0
 800c416:	6078      	str	r0, [r7, #4]
 800c418:	460b      	mov	r3, r1
 800c41a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d106      	bne.n	800c430 <netif_issue_reports+0x20>
 800c422:	4b18      	ldr	r3, [pc, #96]	; (800c484 <netif_issue_reports+0x74>)
 800c424:	f240 326d 	movw	r2, #877	; 0x36d
 800c428:	4917      	ldr	r1, [pc, #92]	; (800c488 <netif_issue_reports+0x78>)
 800c42a:	4818      	ldr	r0, [pc, #96]	; (800c48c <netif_issue_reports+0x7c>)
 800c42c:	f00a fc28 	bl	8016c80 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c436:	f003 0304 	and.w	r3, r3, #4
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d01e      	beq.n	800c47c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c444:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d017      	beq.n	800c47c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c44c:	78fb      	ldrb	r3, [r7, #3]
 800c44e:	f003 0301 	and.w	r3, r3, #1
 800c452:	2b00      	cmp	r3, #0
 800c454:	d013      	beq.n	800c47e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	3304      	adds	r3, #4
 800c45a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d00e      	beq.n	800c47e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c466:	f003 0308 	and.w	r3, r3, #8
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d007      	beq.n	800c47e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	3304      	adds	r3, #4
 800c472:	4619      	mov	r1, r3
 800c474:	6878      	ldr	r0, [r7, #4]
 800c476:	f008 f9e5 	bl	8014844 <etharp_request>
 800c47a:	e000      	b.n	800c47e <netif_issue_reports+0x6e>
    return;
 800c47c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800c47e:	3708      	adds	r7, #8
 800c480:	46bd      	mov	sp, r7
 800c482:	bd80      	pop	{r7, pc}
 800c484:	080184dc 	.word	0x080184dc
 800c488:	08018680 	.word	0x08018680
 800c48c:	0801852c 	.word	0x0801852c

0800c490 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800c490:	b580      	push	{r7, lr}
 800c492:	b082      	sub	sp, #8
 800c494:	af00      	add	r7, sp, #0
 800c496:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d107      	bne.n	800c4ae <netif_set_down+0x1e>
 800c49e:	4b12      	ldr	r3, [pc, #72]	; (800c4e8 <netif_set_down+0x58>)
 800c4a0:	f240 329b 	movw	r2, #923	; 0x39b
 800c4a4:	4911      	ldr	r1, [pc, #68]	; (800c4ec <netif_set_down+0x5c>)
 800c4a6:	4812      	ldr	r0, [pc, #72]	; (800c4f0 <netif_set_down+0x60>)
 800c4a8:	f00a fbea 	bl	8016c80 <iprintf>
 800c4ac:	e019      	b.n	800c4e2 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c4b4:	f003 0301 	and.w	r3, r3, #1
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d012      	beq.n	800c4e2 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c4c2:	f023 0301 	bic.w	r3, r3, #1
 800c4c6:	b2da      	uxtb	r2, r3
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c4d4:	f003 0308 	and.w	r3, r3, #8
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d002      	beq.n	800c4e2 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800c4dc:	6878      	ldr	r0, [r7, #4]
 800c4de:	f007 fd6f 	bl	8013fc0 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800c4e2:	3708      	adds	r7, #8
 800c4e4:	46bd      	mov	sp, r7
 800c4e6:	bd80      	pop	{r7, pc}
 800c4e8:	080184dc 	.word	0x080184dc
 800c4ec:	080186a4 	.word	0x080186a4
 800c4f0:	0801852c 	.word	0x0801852c

0800c4f4 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800c4f4:	b480      	push	{r7}
 800c4f6:	b083      	sub	sp, #12
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	6078      	str	r0, [r7, #4]
 800c4fc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	2b00      	cmp	r3, #0
 800c502:	d002      	beq.n	800c50a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	683a      	ldr	r2, [r7, #0]
 800c508:	61da      	str	r2, [r3, #28]
  }
}
 800c50a:	bf00      	nop
 800c50c:	370c      	adds	r7, #12
 800c50e:	46bd      	mov	sp, r7
 800c510:	bc80      	pop	{r7}
 800c512:	4770      	bx	lr

0800c514 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800c514:	b480      	push	{r7}
 800c516:	b085      	sub	sp, #20
 800c518:	af00      	add	r7, sp, #0
 800c51a:	60f8      	str	r0, [r7, #12]
 800c51c:	60b9      	str	r1, [r7, #8]
 800c51e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800c520:	f06f 030b 	mvn.w	r3, #11
}
 800c524:	4618      	mov	r0, r3
 800c526:	3714      	adds	r7, #20
 800c528:	46bd      	mov	sp, r7
 800c52a:	bc80      	pop	{r7}
 800c52c:	4770      	bx	lr
	...

0800c530 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800c530:	b480      	push	{r7}
 800c532:	b085      	sub	sp, #20
 800c534:	af00      	add	r7, sp, #0
 800c536:	4603      	mov	r3, r0
 800c538:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800c53a:	79fb      	ldrb	r3, [r7, #7]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d013      	beq.n	800c568 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800c540:	4b0c      	ldr	r3, [pc, #48]	; (800c574 <netif_get_by_index+0x44>)
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	60fb      	str	r3, [r7, #12]
 800c546:	e00c      	b.n	800c562 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c54e:	3301      	adds	r3, #1
 800c550:	b2db      	uxtb	r3, r3
 800c552:	79fa      	ldrb	r2, [r7, #7]
 800c554:	429a      	cmp	r2, r3
 800c556:	d101      	bne.n	800c55c <netif_get_by_index+0x2c>
        return netif; /* found! */
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	e006      	b.n	800c56a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	60fb      	str	r3, [r7, #12]
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	2b00      	cmp	r3, #0
 800c566:	d1ef      	bne.n	800c548 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800c568:	2300      	movs	r3, #0
}
 800c56a:	4618      	mov	r0, r3
 800c56c:	3714      	adds	r7, #20
 800c56e:	46bd      	mov	sp, r7
 800c570:	bc80      	pop	{r7}
 800c572:	4770      	bx	lr
 800c574:	2000be04 	.word	0x2000be04

0800c578 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800c578:	b580      	push	{r7, lr}
 800c57a:	b082      	sub	sp, #8
 800c57c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800c57e:	f009 fe07 	bl	8016190 <sys_arch_protect>
 800c582:	6038      	str	r0, [r7, #0]
 800c584:	4b0d      	ldr	r3, [pc, #52]	; (800c5bc <pbuf_free_ooseq+0x44>)
 800c586:	2200      	movs	r2, #0
 800c588:	701a      	strb	r2, [r3, #0]
 800c58a:	6838      	ldr	r0, [r7, #0]
 800c58c:	f009 fe0e 	bl	80161ac <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800c590:	4b0b      	ldr	r3, [pc, #44]	; (800c5c0 <pbuf_free_ooseq+0x48>)
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	607b      	str	r3, [r7, #4]
 800c596:	e00a      	b.n	800c5ae <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d003      	beq.n	800c5a8 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800c5a0:	6878      	ldr	r0, [r7, #4]
 800c5a2:	f002 fc7b 	bl	800ee9c <tcp_free_ooseq>
      return;
 800c5a6:	e005      	b.n	800c5b4 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	68db      	ldr	r3, [r3, #12]
 800c5ac:	607b      	str	r3, [r7, #4]
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d1f1      	bne.n	800c598 <pbuf_free_ooseq+0x20>
    }
  }
}
 800c5b4:	3708      	adds	r7, #8
 800c5b6:	46bd      	mov	sp, r7
 800c5b8:	bd80      	pop	{r7, pc}
 800c5ba:	bf00      	nop
 800c5bc:	2000be0d 	.word	0x2000be0d
 800c5c0:	2000be1c 	.word	0x2000be1c

0800c5c4 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800c5c4:	b580      	push	{r7, lr}
 800c5c6:	b082      	sub	sp, #8
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800c5cc:	f7ff ffd4 	bl	800c578 <pbuf_free_ooseq>
}
 800c5d0:	bf00      	nop
 800c5d2:	3708      	adds	r7, #8
 800c5d4:	46bd      	mov	sp, r7
 800c5d6:	bd80      	pop	{r7, pc}

0800c5d8 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800c5d8:	b580      	push	{r7, lr}
 800c5da:	b082      	sub	sp, #8
 800c5dc:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800c5de:	f009 fdd7 	bl	8016190 <sys_arch_protect>
 800c5e2:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800c5e4:	4b0f      	ldr	r3, [pc, #60]	; (800c624 <pbuf_pool_is_empty+0x4c>)
 800c5e6:	781b      	ldrb	r3, [r3, #0]
 800c5e8:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800c5ea:	4b0e      	ldr	r3, [pc, #56]	; (800c624 <pbuf_pool_is_empty+0x4c>)
 800c5ec:	2201      	movs	r2, #1
 800c5ee:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800c5f0:	6878      	ldr	r0, [r7, #4]
 800c5f2:	f009 fddb 	bl	80161ac <sys_arch_unprotect>

  if (!queued) {
 800c5f6:	78fb      	ldrb	r3, [r7, #3]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d10f      	bne.n	800c61c <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800c5fc:	2100      	movs	r1, #0
 800c5fe:	480a      	ldr	r0, [pc, #40]	; (800c628 <pbuf_pool_is_empty+0x50>)
 800c600:	f7fd fb9c 	bl	8009d3c <tcpip_try_callback>
 800c604:	4603      	mov	r3, r0
 800c606:	2b00      	cmp	r3, #0
 800c608:	d008      	beq.n	800c61c <pbuf_pool_is_empty+0x44>
 800c60a:	f009 fdc1 	bl	8016190 <sys_arch_protect>
 800c60e:	6078      	str	r0, [r7, #4]
 800c610:	4b04      	ldr	r3, [pc, #16]	; (800c624 <pbuf_pool_is_empty+0x4c>)
 800c612:	2200      	movs	r2, #0
 800c614:	701a      	strb	r2, [r3, #0]
 800c616:	6878      	ldr	r0, [r7, #4]
 800c618:	f009 fdc8 	bl	80161ac <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800c61c:	bf00      	nop
 800c61e:	3708      	adds	r7, #8
 800c620:	46bd      	mov	sp, r7
 800c622:	bd80      	pop	{r7, pc}
 800c624:	2000be0d 	.word	0x2000be0d
 800c628:	0800c5c5 	.word	0x0800c5c5

0800c62c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800c62c:	b480      	push	{r7}
 800c62e:	b085      	sub	sp, #20
 800c630:	af00      	add	r7, sp, #0
 800c632:	60f8      	str	r0, [r7, #12]
 800c634:	60b9      	str	r1, [r7, #8]
 800c636:	4611      	mov	r1, r2
 800c638:	461a      	mov	r2, r3
 800c63a:	460b      	mov	r3, r1
 800c63c:	80fb      	strh	r3, [r7, #6]
 800c63e:	4613      	mov	r3, r2
 800c640:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	2200      	movs	r2, #0
 800c646:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	68ba      	ldr	r2, [r7, #8]
 800c64c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	88fa      	ldrh	r2, [r7, #6]
 800c652:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	88ba      	ldrh	r2, [r7, #4]
 800c658:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800c65a:	8b3b      	ldrh	r3, [r7, #24]
 800c65c:	b2da      	uxtb	r2, r3
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	7f3a      	ldrb	r2, [r7, #28]
 800c666:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	2201      	movs	r2, #1
 800c66c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	2200      	movs	r2, #0
 800c672:	73da      	strb	r2, [r3, #15]
}
 800c674:	bf00      	nop
 800c676:	3714      	adds	r7, #20
 800c678:	46bd      	mov	sp, r7
 800c67a:	bc80      	pop	{r7}
 800c67c:	4770      	bx	lr
	...

0800c680 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800c680:	b580      	push	{r7, lr}
 800c682:	b08c      	sub	sp, #48	; 0x30
 800c684:	af02      	add	r7, sp, #8
 800c686:	4603      	mov	r3, r0
 800c688:	71fb      	strb	r3, [r7, #7]
 800c68a:	460b      	mov	r3, r1
 800c68c:	80bb      	strh	r3, [r7, #4]
 800c68e:	4613      	mov	r3, r2
 800c690:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800c692:	79fb      	ldrb	r3, [r7, #7]
 800c694:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800c696:	887b      	ldrh	r3, [r7, #2]
 800c698:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800c69c:	d07f      	beq.n	800c79e <pbuf_alloc+0x11e>
 800c69e:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800c6a2:	f300 80c8 	bgt.w	800c836 <pbuf_alloc+0x1b6>
 800c6a6:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800c6aa:	d010      	beq.n	800c6ce <pbuf_alloc+0x4e>
 800c6ac:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800c6b0:	f300 80c1 	bgt.w	800c836 <pbuf_alloc+0x1b6>
 800c6b4:	2b01      	cmp	r3, #1
 800c6b6:	d002      	beq.n	800c6be <pbuf_alloc+0x3e>
 800c6b8:	2b41      	cmp	r3, #65	; 0x41
 800c6ba:	f040 80bc 	bne.w	800c836 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800c6be:	887a      	ldrh	r2, [r7, #2]
 800c6c0:	88bb      	ldrh	r3, [r7, #4]
 800c6c2:	4619      	mov	r1, r3
 800c6c4:	2000      	movs	r0, #0
 800c6c6:	f000 f8d1 	bl	800c86c <pbuf_alloc_reference>
 800c6ca:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800c6cc:	e0bd      	b.n	800c84a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800c6ce:	2300      	movs	r3, #0
 800c6d0:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800c6d2:	2300      	movs	r3, #0
 800c6d4:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800c6d6:	88bb      	ldrh	r3, [r7, #4]
 800c6d8:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800c6da:	200c      	movs	r0, #12
 800c6dc:	f7ff fc08 	bl	800bef0 <memp_malloc>
 800c6e0:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800c6e2:	693b      	ldr	r3, [r7, #16]
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d109      	bne.n	800c6fc <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800c6e8:	f7ff ff76 	bl	800c5d8 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800c6ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d002      	beq.n	800c6f8 <pbuf_alloc+0x78>
            pbuf_free(p);
 800c6f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c6f4:	f000 faa8 	bl	800cc48 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800c6f8:	2300      	movs	r3, #0
 800c6fa:	e0a7      	b.n	800c84c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800c6fc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c6fe:	3303      	adds	r3, #3
 800c700:	b29b      	uxth	r3, r3
 800c702:	f023 0303 	bic.w	r3, r3, #3
 800c706:	b29b      	uxth	r3, r3
 800c708:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800c70c:	b29b      	uxth	r3, r3
 800c70e:	8b7a      	ldrh	r2, [r7, #26]
 800c710:	4293      	cmp	r3, r2
 800c712:	bf28      	it	cs
 800c714:	4613      	movcs	r3, r2
 800c716:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800c718:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c71a:	3310      	adds	r3, #16
 800c71c:	693a      	ldr	r2, [r7, #16]
 800c71e:	4413      	add	r3, r2
 800c720:	3303      	adds	r3, #3
 800c722:	f023 0303 	bic.w	r3, r3, #3
 800c726:	4618      	mov	r0, r3
 800c728:	89f9      	ldrh	r1, [r7, #14]
 800c72a:	8b7a      	ldrh	r2, [r7, #26]
 800c72c:	2300      	movs	r3, #0
 800c72e:	9301      	str	r3, [sp, #4]
 800c730:	887b      	ldrh	r3, [r7, #2]
 800c732:	9300      	str	r3, [sp, #0]
 800c734:	460b      	mov	r3, r1
 800c736:	4601      	mov	r1, r0
 800c738:	6938      	ldr	r0, [r7, #16]
 800c73a:	f7ff ff77 	bl	800c62c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800c73e:	693b      	ldr	r3, [r7, #16]
 800c740:	685b      	ldr	r3, [r3, #4]
 800c742:	f003 0303 	and.w	r3, r3, #3
 800c746:	2b00      	cmp	r3, #0
 800c748:	d006      	beq.n	800c758 <pbuf_alloc+0xd8>
 800c74a:	4b42      	ldr	r3, [pc, #264]	; (800c854 <pbuf_alloc+0x1d4>)
 800c74c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c750:	4941      	ldr	r1, [pc, #260]	; (800c858 <pbuf_alloc+0x1d8>)
 800c752:	4842      	ldr	r0, [pc, #264]	; (800c85c <pbuf_alloc+0x1dc>)
 800c754:	f00a fa94 	bl	8016c80 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800c758:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c75a:	3303      	adds	r3, #3
 800c75c:	f023 0303 	bic.w	r3, r3, #3
 800c760:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800c764:	d106      	bne.n	800c774 <pbuf_alloc+0xf4>
 800c766:	4b3b      	ldr	r3, [pc, #236]	; (800c854 <pbuf_alloc+0x1d4>)
 800c768:	f44f 7281 	mov.w	r2, #258	; 0x102
 800c76c:	493c      	ldr	r1, [pc, #240]	; (800c860 <pbuf_alloc+0x1e0>)
 800c76e:	483b      	ldr	r0, [pc, #236]	; (800c85c <pbuf_alloc+0x1dc>)
 800c770:	f00a fa86 	bl	8016c80 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800c774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c776:	2b00      	cmp	r3, #0
 800c778:	d102      	bne.n	800c780 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800c77a:	693b      	ldr	r3, [r7, #16]
 800c77c:	627b      	str	r3, [r7, #36]	; 0x24
 800c77e:	e002      	b.n	800c786 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800c780:	69fb      	ldr	r3, [r7, #28]
 800c782:	693a      	ldr	r2, [r7, #16]
 800c784:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800c786:	693b      	ldr	r3, [r7, #16]
 800c788:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800c78a:	8b7a      	ldrh	r2, [r7, #26]
 800c78c:	89fb      	ldrh	r3, [r7, #14]
 800c78e:	1ad3      	subs	r3, r2, r3
 800c790:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800c792:	2300      	movs	r3, #0
 800c794:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800c796:	8b7b      	ldrh	r3, [r7, #26]
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d19e      	bne.n	800c6da <pbuf_alloc+0x5a>
      break;
 800c79c:	e055      	b.n	800c84a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800c79e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c7a0:	3303      	adds	r3, #3
 800c7a2:	b29b      	uxth	r3, r3
 800c7a4:	f023 0303 	bic.w	r3, r3, #3
 800c7a8:	b29a      	uxth	r2, r3
 800c7aa:	88bb      	ldrh	r3, [r7, #4]
 800c7ac:	3303      	adds	r3, #3
 800c7ae:	b29b      	uxth	r3, r3
 800c7b0:	f023 0303 	bic.w	r3, r3, #3
 800c7b4:	b29b      	uxth	r3, r3
 800c7b6:	4413      	add	r3, r2
 800c7b8:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800c7ba:	8b3b      	ldrh	r3, [r7, #24]
 800c7bc:	3310      	adds	r3, #16
 800c7be:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800c7c0:	8b3a      	ldrh	r2, [r7, #24]
 800c7c2:	88bb      	ldrh	r3, [r7, #4]
 800c7c4:	3303      	adds	r3, #3
 800c7c6:	f023 0303 	bic.w	r3, r3, #3
 800c7ca:	429a      	cmp	r2, r3
 800c7cc:	d306      	bcc.n	800c7dc <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800c7ce:	8afa      	ldrh	r2, [r7, #22]
 800c7d0:	88bb      	ldrh	r3, [r7, #4]
 800c7d2:	3303      	adds	r3, #3
 800c7d4:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800c7d8:	429a      	cmp	r2, r3
 800c7da:	d201      	bcs.n	800c7e0 <pbuf_alloc+0x160>
        return NULL;
 800c7dc:	2300      	movs	r3, #0
 800c7de:	e035      	b.n	800c84c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800c7e0:	8afb      	ldrh	r3, [r7, #22]
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	f7ff f9b8 	bl	800bb58 <mem_malloc>
 800c7e8:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800c7ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d101      	bne.n	800c7f4 <pbuf_alloc+0x174>
        return NULL;
 800c7f0:	2300      	movs	r3, #0
 800c7f2:	e02b      	b.n	800c84c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800c7f4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c7f6:	3310      	adds	r3, #16
 800c7f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c7fa:	4413      	add	r3, r2
 800c7fc:	3303      	adds	r3, #3
 800c7fe:	f023 0303 	bic.w	r3, r3, #3
 800c802:	4618      	mov	r0, r3
 800c804:	88b9      	ldrh	r1, [r7, #4]
 800c806:	88ba      	ldrh	r2, [r7, #4]
 800c808:	2300      	movs	r3, #0
 800c80a:	9301      	str	r3, [sp, #4]
 800c80c:	887b      	ldrh	r3, [r7, #2]
 800c80e:	9300      	str	r3, [sp, #0]
 800c810:	460b      	mov	r3, r1
 800c812:	4601      	mov	r1, r0
 800c814:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c816:	f7ff ff09 	bl	800c62c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800c81a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c81c:	685b      	ldr	r3, [r3, #4]
 800c81e:	f003 0303 	and.w	r3, r3, #3
 800c822:	2b00      	cmp	r3, #0
 800c824:	d010      	beq.n	800c848 <pbuf_alloc+0x1c8>
 800c826:	4b0b      	ldr	r3, [pc, #44]	; (800c854 <pbuf_alloc+0x1d4>)
 800c828:	f44f 7291 	mov.w	r2, #290	; 0x122
 800c82c:	490d      	ldr	r1, [pc, #52]	; (800c864 <pbuf_alloc+0x1e4>)
 800c82e:	480b      	ldr	r0, [pc, #44]	; (800c85c <pbuf_alloc+0x1dc>)
 800c830:	f00a fa26 	bl	8016c80 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800c834:	e008      	b.n	800c848 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800c836:	4b07      	ldr	r3, [pc, #28]	; (800c854 <pbuf_alloc+0x1d4>)
 800c838:	f240 1227 	movw	r2, #295	; 0x127
 800c83c:	490a      	ldr	r1, [pc, #40]	; (800c868 <pbuf_alloc+0x1e8>)
 800c83e:	4807      	ldr	r0, [pc, #28]	; (800c85c <pbuf_alloc+0x1dc>)
 800c840:	f00a fa1e 	bl	8016c80 <iprintf>
      return NULL;
 800c844:	2300      	movs	r3, #0
 800c846:	e001      	b.n	800c84c <pbuf_alloc+0x1cc>
      break;
 800c848:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800c84a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c84c:	4618      	mov	r0, r3
 800c84e:	3728      	adds	r7, #40	; 0x28
 800c850:	46bd      	mov	sp, r7
 800c852:	bd80      	pop	{r7, pc}
 800c854:	0801870c 	.word	0x0801870c
 800c858:	0801873c 	.word	0x0801873c
 800c85c:	0801876c 	.word	0x0801876c
 800c860:	08018794 	.word	0x08018794
 800c864:	080187c8 	.word	0x080187c8
 800c868:	080187f4 	.word	0x080187f4

0800c86c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800c86c:	b580      	push	{r7, lr}
 800c86e:	b086      	sub	sp, #24
 800c870:	af02      	add	r7, sp, #8
 800c872:	6078      	str	r0, [r7, #4]
 800c874:	460b      	mov	r3, r1
 800c876:	807b      	strh	r3, [r7, #2]
 800c878:	4613      	mov	r3, r2
 800c87a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800c87c:	883b      	ldrh	r3, [r7, #0]
 800c87e:	2b41      	cmp	r3, #65	; 0x41
 800c880:	d009      	beq.n	800c896 <pbuf_alloc_reference+0x2a>
 800c882:	883b      	ldrh	r3, [r7, #0]
 800c884:	2b01      	cmp	r3, #1
 800c886:	d006      	beq.n	800c896 <pbuf_alloc_reference+0x2a>
 800c888:	4b0f      	ldr	r3, [pc, #60]	; (800c8c8 <pbuf_alloc_reference+0x5c>)
 800c88a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800c88e:	490f      	ldr	r1, [pc, #60]	; (800c8cc <pbuf_alloc_reference+0x60>)
 800c890:	480f      	ldr	r0, [pc, #60]	; (800c8d0 <pbuf_alloc_reference+0x64>)
 800c892:	f00a f9f5 	bl	8016c80 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800c896:	200b      	movs	r0, #11
 800c898:	f7ff fb2a 	bl	800bef0 <memp_malloc>
 800c89c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d101      	bne.n	800c8a8 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800c8a4:	2300      	movs	r3, #0
 800c8a6:	e00b      	b.n	800c8c0 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800c8a8:	8879      	ldrh	r1, [r7, #2]
 800c8aa:	887a      	ldrh	r2, [r7, #2]
 800c8ac:	2300      	movs	r3, #0
 800c8ae:	9301      	str	r3, [sp, #4]
 800c8b0:	883b      	ldrh	r3, [r7, #0]
 800c8b2:	9300      	str	r3, [sp, #0]
 800c8b4:	460b      	mov	r3, r1
 800c8b6:	6879      	ldr	r1, [r7, #4]
 800c8b8:	68f8      	ldr	r0, [r7, #12]
 800c8ba:	f7ff feb7 	bl	800c62c <pbuf_init_alloced_pbuf>
  return p;
 800c8be:	68fb      	ldr	r3, [r7, #12]
}
 800c8c0:	4618      	mov	r0, r3
 800c8c2:	3710      	adds	r7, #16
 800c8c4:	46bd      	mov	sp, r7
 800c8c6:	bd80      	pop	{r7, pc}
 800c8c8:	0801870c 	.word	0x0801870c
 800c8cc:	08018810 	.word	0x08018810
 800c8d0:	0801876c 	.word	0x0801876c

0800c8d4 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800c8d4:	b580      	push	{r7, lr}
 800c8d6:	b088      	sub	sp, #32
 800c8d8:	af02      	add	r7, sp, #8
 800c8da:	607b      	str	r3, [r7, #4]
 800c8dc:	4603      	mov	r3, r0
 800c8de:	73fb      	strb	r3, [r7, #15]
 800c8e0:	460b      	mov	r3, r1
 800c8e2:	81bb      	strh	r3, [r7, #12]
 800c8e4:	4613      	mov	r3, r2
 800c8e6:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800c8e8:	7bfb      	ldrb	r3, [r7, #15]
 800c8ea:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800c8ec:	8a7b      	ldrh	r3, [r7, #18]
 800c8ee:	3303      	adds	r3, #3
 800c8f0:	f023 0203 	bic.w	r2, r3, #3
 800c8f4:	89bb      	ldrh	r3, [r7, #12]
 800c8f6:	441a      	add	r2, r3
 800c8f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c8fa:	429a      	cmp	r2, r3
 800c8fc:	d901      	bls.n	800c902 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800c8fe:	2300      	movs	r3, #0
 800c900:	e018      	b.n	800c934 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800c902:	6a3b      	ldr	r3, [r7, #32]
 800c904:	2b00      	cmp	r3, #0
 800c906:	d007      	beq.n	800c918 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800c908:	8a7b      	ldrh	r3, [r7, #18]
 800c90a:	3303      	adds	r3, #3
 800c90c:	f023 0303 	bic.w	r3, r3, #3
 800c910:	6a3a      	ldr	r2, [r7, #32]
 800c912:	4413      	add	r3, r2
 800c914:	617b      	str	r3, [r7, #20]
 800c916:	e001      	b.n	800c91c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800c918:	2300      	movs	r3, #0
 800c91a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800c91c:	6878      	ldr	r0, [r7, #4]
 800c91e:	89b9      	ldrh	r1, [r7, #12]
 800c920:	89ba      	ldrh	r2, [r7, #12]
 800c922:	2302      	movs	r3, #2
 800c924:	9301      	str	r3, [sp, #4]
 800c926:	897b      	ldrh	r3, [r7, #10]
 800c928:	9300      	str	r3, [sp, #0]
 800c92a:	460b      	mov	r3, r1
 800c92c:	6979      	ldr	r1, [r7, #20]
 800c92e:	f7ff fe7d 	bl	800c62c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800c932:	687b      	ldr	r3, [r7, #4]
}
 800c934:	4618      	mov	r0, r3
 800c936:	3718      	adds	r7, #24
 800c938:	46bd      	mov	sp, r7
 800c93a:	bd80      	pop	{r7, pc}

0800c93c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800c93c:	b580      	push	{r7, lr}
 800c93e:	b084      	sub	sp, #16
 800c940:	af00      	add	r7, sp, #0
 800c942:	6078      	str	r0, [r7, #4]
 800c944:	460b      	mov	r3, r1
 800c946:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d106      	bne.n	800c95c <pbuf_realloc+0x20>
 800c94e:	4b3a      	ldr	r3, [pc, #232]	; (800ca38 <pbuf_realloc+0xfc>)
 800c950:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800c954:	4939      	ldr	r1, [pc, #228]	; (800ca3c <pbuf_realloc+0x100>)
 800c956:	483a      	ldr	r0, [pc, #232]	; (800ca40 <pbuf_realloc+0x104>)
 800c958:	f00a f992 	bl	8016c80 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	891b      	ldrh	r3, [r3, #8]
 800c960:	887a      	ldrh	r2, [r7, #2]
 800c962:	429a      	cmp	r2, r3
 800c964:	d263      	bcs.n	800ca2e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	891a      	ldrh	r2, [r3, #8]
 800c96a:	887b      	ldrh	r3, [r7, #2]
 800c96c:	1ad3      	subs	r3, r2, r3
 800c96e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800c970:	887b      	ldrh	r3, [r7, #2]
 800c972:	817b      	strh	r3, [r7, #10]
  q = p;
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800c978:	e018      	b.n	800c9ac <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	895b      	ldrh	r3, [r3, #10]
 800c97e:	897a      	ldrh	r2, [r7, #10]
 800c980:	1ad3      	subs	r3, r2, r3
 800c982:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	891a      	ldrh	r2, [r3, #8]
 800c988:	893b      	ldrh	r3, [r7, #8]
 800c98a:	1ad3      	subs	r3, r2, r3
 800c98c:	b29a      	uxth	r2, r3
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d106      	bne.n	800c9ac <pbuf_realloc+0x70>
 800c99e:	4b26      	ldr	r3, [pc, #152]	; (800ca38 <pbuf_realloc+0xfc>)
 800c9a0:	f240 12af 	movw	r2, #431	; 0x1af
 800c9a4:	4927      	ldr	r1, [pc, #156]	; (800ca44 <pbuf_realloc+0x108>)
 800c9a6:	4826      	ldr	r0, [pc, #152]	; (800ca40 <pbuf_realloc+0x104>)
 800c9a8:	f00a f96a 	bl	8016c80 <iprintf>
  while (rem_len > q->len) {
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	895b      	ldrh	r3, [r3, #10]
 800c9b0:	897a      	ldrh	r2, [r7, #10]
 800c9b2:	429a      	cmp	r2, r3
 800c9b4:	d8e1      	bhi.n	800c97a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	7b1b      	ldrb	r3, [r3, #12]
 800c9ba:	f003 030f 	and.w	r3, r3, #15
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d121      	bne.n	800ca06 <pbuf_realloc+0xca>
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	895b      	ldrh	r3, [r3, #10]
 800c9c6:	897a      	ldrh	r2, [r7, #10]
 800c9c8:	429a      	cmp	r2, r3
 800c9ca:	d01c      	beq.n	800ca06 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	7b5b      	ldrb	r3, [r3, #13]
 800c9d0:	f003 0302 	and.w	r3, r3, #2
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d116      	bne.n	800ca06 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	685a      	ldr	r2, [r3, #4]
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	1ad3      	subs	r3, r2, r3
 800c9e0:	b29a      	uxth	r2, r3
 800c9e2:	897b      	ldrh	r3, [r7, #10]
 800c9e4:	4413      	add	r3, r2
 800c9e6:	b29b      	uxth	r3, r3
 800c9e8:	4619      	mov	r1, r3
 800c9ea:	68f8      	ldr	r0, [r7, #12]
 800c9ec:	f7fe ffaa 	bl	800b944 <mem_trim>
 800c9f0:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d106      	bne.n	800ca06 <pbuf_realloc+0xca>
 800c9f8:	4b0f      	ldr	r3, [pc, #60]	; (800ca38 <pbuf_realloc+0xfc>)
 800c9fa:	f240 12bd 	movw	r2, #445	; 0x1bd
 800c9fe:	4912      	ldr	r1, [pc, #72]	; (800ca48 <pbuf_realloc+0x10c>)
 800ca00:	480f      	ldr	r0, [pc, #60]	; (800ca40 <pbuf_realloc+0x104>)
 800ca02:	f00a f93d 	bl	8016c80 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	897a      	ldrh	r2, [r7, #10]
 800ca0a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	895a      	ldrh	r2, [r3, #10]
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d004      	beq.n	800ca26 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	4618      	mov	r0, r3
 800ca22:	f000 f911 	bl	800cc48 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	2200      	movs	r2, #0
 800ca2a:	601a      	str	r2, [r3, #0]
 800ca2c:	e000      	b.n	800ca30 <pbuf_realloc+0xf4>
    return;
 800ca2e:	bf00      	nop

}
 800ca30:	3710      	adds	r7, #16
 800ca32:	46bd      	mov	sp, r7
 800ca34:	bd80      	pop	{r7, pc}
 800ca36:	bf00      	nop
 800ca38:	0801870c 	.word	0x0801870c
 800ca3c:	08018824 	.word	0x08018824
 800ca40:	0801876c 	.word	0x0801876c
 800ca44:	0801883c 	.word	0x0801883c
 800ca48:	08018854 	.word	0x08018854

0800ca4c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800ca4c:	b580      	push	{r7, lr}
 800ca4e:	b086      	sub	sp, #24
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	60f8      	str	r0, [r7, #12]
 800ca54:	60b9      	str	r1, [r7, #8]
 800ca56:	4613      	mov	r3, r2
 800ca58:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d106      	bne.n	800ca6e <pbuf_add_header_impl+0x22>
 800ca60:	4b2b      	ldr	r3, [pc, #172]	; (800cb10 <pbuf_add_header_impl+0xc4>)
 800ca62:	f240 12df 	movw	r2, #479	; 0x1df
 800ca66:	492b      	ldr	r1, [pc, #172]	; (800cb14 <pbuf_add_header_impl+0xc8>)
 800ca68:	482b      	ldr	r0, [pc, #172]	; (800cb18 <pbuf_add_header_impl+0xcc>)
 800ca6a:	f00a f909 	bl	8016c80 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d003      	beq.n	800ca7c <pbuf_add_header_impl+0x30>
 800ca74:	68bb      	ldr	r3, [r7, #8]
 800ca76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ca7a:	d301      	bcc.n	800ca80 <pbuf_add_header_impl+0x34>
    return 1;
 800ca7c:	2301      	movs	r3, #1
 800ca7e:	e043      	b.n	800cb08 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800ca80:	68bb      	ldr	r3, [r7, #8]
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d101      	bne.n	800ca8a <pbuf_add_header_impl+0x3e>
    return 0;
 800ca86:	2300      	movs	r3, #0
 800ca88:	e03e      	b.n	800cb08 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800ca8a:	68bb      	ldr	r3, [r7, #8]
 800ca8c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	891a      	ldrh	r2, [r3, #8]
 800ca92:	8a7b      	ldrh	r3, [r7, #18]
 800ca94:	4413      	add	r3, r2
 800ca96:	b29b      	uxth	r3, r3
 800ca98:	8a7a      	ldrh	r2, [r7, #18]
 800ca9a:	429a      	cmp	r2, r3
 800ca9c:	d901      	bls.n	800caa2 <pbuf_add_header_impl+0x56>
    return 1;
 800ca9e:	2301      	movs	r3, #1
 800caa0:	e032      	b.n	800cb08 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	7b1b      	ldrb	r3, [r3, #12]
 800caa6:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800caa8:	8a3b      	ldrh	r3, [r7, #16]
 800caaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d00c      	beq.n	800cacc <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	685a      	ldr	r2, [r3, #4]
 800cab6:	68bb      	ldr	r3, [r7, #8]
 800cab8:	425b      	negs	r3, r3
 800caba:	4413      	add	r3, r2
 800cabc:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	3310      	adds	r3, #16
 800cac2:	697a      	ldr	r2, [r7, #20]
 800cac4:	429a      	cmp	r2, r3
 800cac6:	d20d      	bcs.n	800cae4 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800cac8:	2301      	movs	r3, #1
 800caca:	e01d      	b.n	800cb08 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800cacc:	79fb      	ldrb	r3, [r7, #7]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d006      	beq.n	800cae0 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	685a      	ldr	r2, [r3, #4]
 800cad6:	68bb      	ldr	r3, [r7, #8]
 800cad8:	425b      	negs	r3, r3
 800cada:	4413      	add	r3, r2
 800cadc:	617b      	str	r3, [r7, #20]
 800cade:	e001      	b.n	800cae4 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800cae0:	2301      	movs	r3, #1
 800cae2:	e011      	b.n	800cb08 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	697a      	ldr	r2, [r7, #20]
 800cae8:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	895a      	ldrh	r2, [r3, #10]
 800caee:	8a7b      	ldrh	r3, [r7, #18]
 800caf0:	4413      	add	r3, r2
 800caf2:	b29a      	uxth	r2, r3
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	891a      	ldrh	r2, [r3, #8]
 800cafc:	8a7b      	ldrh	r3, [r7, #18]
 800cafe:	4413      	add	r3, r2
 800cb00:	b29a      	uxth	r2, r3
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	811a      	strh	r2, [r3, #8]


  return 0;
 800cb06:	2300      	movs	r3, #0
}
 800cb08:	4618      	mov	r0, r3
 800cb0a:	3718      	adds	r7, #24
 800cb0c:	46bd      	mov	sp, r7
 800cb0e:	bd80      	pop	{r7, pc}
 800cb10:	0801870c 	.word	0x0801870c
 800cb14:	08018870 	.word	0x08018870
 800cb18:	0801876c 	.word	0x0801876c

0800cb1c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800cb1c:	b580      	push	{r7, lr}
 800cb1e:	b082      	sub	sp, #8
 800cb20:	af00      	add	r7, sp, #0
 800cb22:	6078      	str	r0, [r7, #4]
 800cb24:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800cb26:	2200      	movs	r2, #0
 800cb28:	6839      	ldr	r1, [r7, #0]
 800cb2a:	6878      	ldr	r0, [r7, #4]
 800cb2c:	f7ff ff8e 	bl	800ca4c <pbuf_add_header_impl>
 800cb30:	4603      	mov	r3, r0
}
 800cb32:	4618      	mov	r0, r3
 800cb34:	3708      	adds	r7, #8
 800cb36:	46bd      	mov	sp, r7
 800cb38:	bd80      	pop	{r7, pc}
	...

0800cb3c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	b084      	sub	sp, #16
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	6078      	str	r0, [r7, #4]
 800cb44:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d106      	bne.n	800cb5a <pbuf_remove_header+0x1e>
 800cb4c:	4b20      	ldr	r3, [pc, #128]	; (800cbd0 <pbuf_remove_header+0x94>)
 800cb4e:	f240 224b 	movw	r2, #587	; 0x24b
 800cb52:	4920      	ldr	r1, [pc, #128]	; (800cbd4 <pbuf_remove_header+0x98>)
 800cb54:	4820      	ldr	r0, [pc, #128]	; (800cbd8 <pbuf_remove_header+0x9c>)
 800cb56:	f00a f893 	bl	8016c80 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d003      	beq.n	800cb68 <pbuf_remove_header+0x2c>
 800cb60:	683b      	ldr	r3, [r7, #0]
 800cb62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cb66:	d301      	bcc.n	800cb6c <pbuf_remove_header+0x30>
    return 1;
 800cb68:	2301      	movs	r3, #1
 800cb6a:	e02c      	b.n	800cbc6 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800cb6c:	683b      	ldr	r3, [r7, #0]
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d101      	bne.n	800cb76 <pbuf_remove_header+0x3a>
    return 0;
 800cb72:	2300      	movs	r3, #0
 800cb74:	e027      	b.n	800cbc6 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800cb76:	683b      	ldr	r3, [r7, #0]
 800cb78:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	895b      	ldrh	r3, [r3, #10]
 800cb7e:	89fa      	ldrh	r2, [r7, #14]
 800cb80:	429a      	cmp	r2, r3
 800cb82:	d908      	bls.n	800cb96 <pbuf_remove_header+0x5a>
 800cb84:	4b12      	ldr	r3, [pc, #72]	; (800cbd0 <pbuf_remove_header+0x94>)
 800cb86:	f240 2255 	movw	r2, #597	; 0x255
 800cb8a:	4914      	ldr	r1, [pc, #80]	; (800cbdc <pbuf_remove_header+0xa0>)
 800cb8c:	4812      	ldr	r0, [pc, #72]	; (800cbd8 <pbuf_remove_header+0x9c>)
 800cb8e:	f00a f877 	bl	8016c80 <iprintf>
 800cb92:	2301      	movs	r3, #1
 800cb94:	e017      	b.n	800cbc6 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	685b      	ldr	r3, [r3, #4]
 800cb9a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	685a      	ldr	r2, [r3, #4]
 800cba0:	683b      	ldr	r3, [r7, #0]
 800cba2:	441a      	add	r2, r3
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	895a      	ldrh	r2, [r3, #10]
 800cbac:	89fb      	ldrh	r3, [r7, #14]
 800cbae:	1ad3      	subs	r3, r2, r3
 800cbb0:	b29a      	uxth	r2, r3
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	891a      	ldrh	r2, [r3, #8]
 800cbba:	89fb      	ldrh	r3, [r7, #14]
 800cbbc:	1ad3      	subs	r3, r2, r3
 800cbbe:	b29a      	uxth	r2, r3
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800cbc4:	2300      	movs	r3, #0
}
 800cbc6:	4618      	mov	r0, r3
 800cbc8:	3710      	adds	r7, #16
 800cbca:	46bd      	mov	sp, r7
 800cbcc:	bd80      	pop	{r7, pc}
 800cbce:	bf00      	nop
 800cbd0:	0801870c 	.word	0x0801870c
 800cbd4:	08018870 	.word	0x08018870
 800cbd8:	0801876c 	.word	0x0801876c
 800cbdc:	0801887c 	.word	0x0801887c

0800cbe0 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800cbe0:	b580      	push	{r7, lr}
 800cbe2:	b082      	sub	sp, #8
 800cbe4:	af00      	add	r7, sp, #0
 800cbe6:	6078      	str	r0, [r7, #4]
 800cbe8:	460b      	mov	r3, r1
 800cbea:	807b      	strh	r3, [r7, #2]
 800cbec:	4613      	mov	r3, r2
 800cbee:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800cbf0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	da08      	bge.n	800cc0a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800cbf8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cbfc:	425b      	negs	r3, r3
 800cbfe:	4619      	mov	r1, r3
 800cc00:	6878      	ldr	r0, [r7, #4]
 800cc02:	f7ff ff9b 	bl	800cb3c <pbuf_remove_header>
 800cc06:	4603      	mov	r3, r0
 800cc08:	e007      	b.n	800cc1a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800cc0a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cc0e:	787a      	ldrb	r2, [r7, #1]
 800cc10:	4619      	mov	r1, r3
 800cc12:	6878      	ldr	r0, [r7, #4]
 800cc14:	f7ff ff1a 	bl	800ca4c <pbuf_add_header_impl>
 800cc18:	4603      	mov	r3, r0
  }
}
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	3708      	adds	r7, #8
 800cc1e:	46bd      	mov	sp, r7
 800cc20:	bd80      	pop	{r7, pc}

0800cc22 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800cc22:	b580      	push	{r7, lr}
 800cc24:	b082      	sub	sp, #8
 800cc26:	af00      	add	r7, sp, #0
 800cc28:	6078      	str	r0, [r7, #4]
 800cc2a:	460b      	mov	r3, r1
 800cc2c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800cc2e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cc32:	2201      	movs	r2, #1
 800cc34:	4619      	mov	r1, r3
 800cc36:	6878      	ldr	r0, [r7, #4]
 800cc38:	f7ff ffd2 	bl	800cbe0 <pbuf_header_impl>
 800cc3c:	4603      	mov	r3, r0
}
 800cc3e:	4618      	mov	r0, r3
 800cc40:	3708      	adds	r7, #8
 800cc42:	46bd      	mov	sp, r7
 800cc44:	bd80      	pop	{r7, pc}
	...

0800cc48 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800cc48:	b580      	push	{r7, lr}
 800cc4a:	b088      	sub	sp, #32
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d10b      	bne.n	800cc6e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d106      	bne.n	800cc6a <pbuf_free+0x22>
 800cc5c:	4b3b      	ldr	r3, [pc, #236]	; (800cd4c <pbuf_free+0x104>)
 800cc5e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800cc62:	493b      	ldr	r1, [pc, #236]	; (800cd50 <pbuf_free+0x108>)
 800cc64:	483b      	ldr	r0, [pc, #236]	; (800cd54 <pbuf_free+0x10c>)
 800cc66:	f00a f80b 	bl	8016c80 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800cc6a:	2300      	movs	r3, #0
 800cc6c:	e069      	b.n	800cd42 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800cc6e:	2300      	movs	r3, #0
 800cc70:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800cc72:	e062      	b.n	800cd3a <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800cc74:	f009 fa8c 	bl	8016190 <sys_arch_protect>
 800cc78:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	7b9b      	ldrb	r3, [r3, #14]
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d106      	bne.n	800cc90 <pbuf_free+0x48>
 800cc82:	4b32      	ldr	r3, [pc, #200]	; (800cd4c <pbuf_free+0x104>)
 800cc84:	f240 22f1 	movw	r2, #753	; 0x2f1
 800cc88:	4933      	ldr	r1, [pc, #204]	; (800cd58 <pbuf_free+0x110>)
 800cc8a:	4832      	ldr	r0, [pc, #200]	; (800cd54 <pbuf_free+0x10c>)
 800cc8c:	f009 fff8 	bl	8016c80 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	7b9b      	ldrb	r3, [r3, #14]
 800cc94:	3b01      	subs	r3, #1
 800cc96:	b2da      	uxtb	r2, r3
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	739a      	strb	r2, [r3, #14]
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	7b9b      	ldrb	r3, [r3, #14]
 800cca0:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800cca2:	69b8      	ldr	r0, [r7, #24]
 800cca4:	f009 fa82 	bl	80161ac <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800cca8:	7dfb      	ldrb	r3, [r7, #23]
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d143      	bne.n	800cd36 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	7b1b      	ldrb	r3, [r3, #12]
 800ccb8:	f003 030f 	and.w	r3, r3, #15
 800ccbc:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	7b5b      	ldrb	r3, [r3, #13]
 800ccc2:	f003 0302 	and.w	r3, r3, #2
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d011      	beq.n	800ccee <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800ccce:	68bb      	ldr	r3, [r7, #8]
 800ccd0:	691b      	ldr	r3, [r3, #16]
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d106      	bne.n	800cce4 <pbuf_free+0x9c>
 800ccd6:	4b1d      	ldr	r3, [pc, #116]	; (800cd4c <pbuf_free+0x104>)
 800ccd8:	f240 22ff 	movw	r2, #767	; 0x2ff
 800ccdc:	491f      	ldr	r1, [pc, #124]	; (800cd5c <pbuf_free+0x114>)
 800ccde:	481d      	ldr	r0, [pc, #116]	; (800cd54 <pbuf_free+0x10c>)
 800cce0:	f009 ffce 	bl	8016c80 <iprintf>
        pc->custom_free_function(p);
 800cce4:	68bb      	ldr	r3, [r7, #8]
 800cce6:	691b      	ldr	r3, [r3, #16]
 800cce8:	6878      	ldr	r0, [r7, #4]
 800ccea:	4798      	blx	r3
 800ccec:	e01d      	b.n	800cd2a <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800ccee:	7bfb      	ldrb	r3, [r7, #15]
 800ccf0:	2b02      	cmp	r3, #2
 800ccf2:	d104      	bne.n	800ccfe <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800ccf4:	6879      	ldr	r1, [r7, #4]
 800ccf6:	200c      	movs	r0, #12
 800ccf8:	f7ff f970 	bl	800bfdc <memp_free>
 800ccfc:	e015      	b.n	800cd2a <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800ccfe:	7bfb      	ldrb	r3, [r7, #15]
 800cd00:	2b01      	cmp	r3, #1
 800cd02:	d104      	bne.n	800cd0e <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800cd04:	6879      	ldr	r1, [r7, #4]
 800cd06:	200b      	movs	r0, #11
 800cd08:	f7ff f968 	bl	800bfdc <memp_free>
 800cd0c:	e00d      	b.n	800cd2a <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800cd0e:	7bfb      	ldrb	r3, [r7, #15]
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d103      	bne.n	800cd1c <pbuf_free+0xd4>
          mem_free(p);
 800cd14:	6878      	ldr	r0, [r7, #4]
 800cd16:	f7fe fd85 	bl	800b824 <mem_free>
 800cd1a:	e006      	b.n	800cd2a <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800cd1c:	4b0b      	ldr	r3, [pc, #44]	; (800cd4c <pbuf_free+0x104>)
 800cd1e:	f240 320f 	movw	r2, #783	; 0x30f
 800cd22:	490f      	ldr	r1, [pc, #60]	; (800cd60 <pbuf_free+0x118>)
 800cd24:	480b      	ldr	r0, [pc, #44]	; (800cd54 <pbuf_free+0x10c>)
 800cd26:	f009 ffab 	bl	8016c80 <iprintf>
        }
      }
      count++;
 800cd2a:	7ffb      	ldrb	r3, [r7, #31]
 800cd2c:	3301      	adds	r3, #1
 800cd2e:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800cd30:	693b      	ldr	r3, [r7, #16]
 800cd32:	607b      	str	r3, [r7, #4]
 800cd34:	e001      	b.n	800cd3a <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800cd36:	2300      	movs	r3, #0
 800cd38:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d199      	bne.n	800cc74 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800cd40:	7ffb      	ldrb	r3, [r7, #31]
}
 800cd42:	4618      	mov	r0, r3
 800cd44:	3720      	adds	r7, #32
 800cd46:	46bd      	mov	sp, r7
 800cd48:	bd80      	pop	{r7, pc}
 800cd4a:	bf00      	nop
 800cd4c:	0801870c 	.word	0x0801870c
 800cd50:	08018870 	.word	0x08018870
 800cd54:	0801876c 	.word	0x0801876c
 800cd58:	0801889c 	.word	0x0801889c
 800cd5c:	080188b4 	.word	0x080188b4
 800cd60:	080188d8 	.word	0x080188d8

0800cd64 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800cd64:	b480      	push	{r7}
 800cd66:	b085      	sub	sp, #20
 800cd68:	af00      	add	r7, sp, #0
 800cd6a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800cd6c:	2300      	movs	r3, #0
 800cd6e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800cd70:	e005      	b.n	800cd7e <pbuf_clen+0x1a>
    ++len;
 800cd72:	89fb      	ldrh	r3, [r7, #14]
 800cd74:	3301      	adds	r3, #1
 800cd76:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d1f6      	bne.n	800cd72 <pbuf_clen+0xe>
  }
  return len;
 800cd84:	89fb      	ldrh	r3, [r7, #14]
}
 800cd86:	4618      	mov	r0, r3
 800cd88:	3714      	adds	r7, #20
 800cd8a:	46bd      	mov	sp, r7
 800cd8c:	bc80      	pop	{r7}
 800cd8e:	4770      	bx	lr

0800cd90 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800cd90:	b580      	push	{r7, lr}
 800cd92:	b084      	sub	sp, #16
 800cd94:	af00      	add	r7, sp, #0
 800cd96:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d016      	beq.n	800cdcc <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800cd9e:	f009 f9f7 	bl	8016190 <sys_arch_protect>
 800cda2:	60f8      	str	r0, [r7, #12]
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	7b9b      	ldrb	r3, [r3, #14]
 800cda8:	3301      	adds	r3, #1
 800cdaa:	b2da      	uxtb	r2, r3
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	739a      	strb	r2, [r3, #14]
 800cdb0:	68f8      	ldr	r0, [r7, #12]
 800cdb2:	f009 f9fb 	bl	80161ac <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	7b9b      	ldrb	r3, [r3, #14]
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d106      	bne.n	800cdcc <pbuf_ref+0x3c>
 800cdbe:	4b05      	ldr	r3, [pc, #20]	; (800cdd4 <pbuf_ref+0x44>)
 800cdc0:	f240 3242 	movw	r2, #834	; 0x342
 800cdc4:	4904      	ldr	r1, [pc, #16]	; (800cdd8 <pbuf_ref+0x48>)
 800cdc6:	4805      	ldr	r0, [pc, #20]	; (800cddc <pbuf_ref+0x4c>)
 800cdc8:	f009 ff5a 	bl	8016c80 <iprintf>
  }
}
 800cdcc:	bf00      	nop
 800cdce:	3710      	adds	r7, #16
 800cdd0:	46bd      	mov	sp, r7
 800cdd2:	bd80      	pop	{r7, pc}
 800cdd4:	0801870c 	.word	0x0801870c
 800cdd8:	080188ec 	.word	0x080188ec
 800cddc:	0801876c 	.word	0x0801876c

0800cde0 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800cde0:	b580      	push	{r7, lr}
 800cde2:	b084      	sub	sp, #16
 800cde4:	af00      	add	r7, sp, #0
 800cde6:	6078      	str	r0, [r7, #4]
 800cde8:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d002      	beq.n	800cdf6 <pbuf_cat+0x16>
 800cdf0:	683b      	ldr	r3, [r7, #0]
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d107      	bne.n	800ce06 <pbuf_cat+0x26>
 800cdf6:	4b20      	ldr	r3, [pc, #128]	; (800ce78 <pbuf_cat+0x98>)
 800cdf8:	f240 3259 	movw	r2, #857	; 0x359
 800cdfc:	491f      	ldr	r1, [pc, #124]	; (800ce7c <pbuf_cat+0x9c>)
 800cdfe:	4820      	ldr	r0, [pc, #128]	; (800ce80 <pbuf_cat+0xa0>)
 800ce00:	f009 ff3e 	bl	8016c80 <iprintf>
 800ce04:	e034      	b.n	800ce70 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	60fb      	str	r3, [r7, #12]
 800ce0a:	e00a      	b.n	800ce22 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	891a      	ldrh	r2, [r3, #8]
 800ce10:	683b      	ldr	r3, [r7, #0]
 800ce12:	891b      	ldrh	r3, [r3, #8]
 800ce14:	4413      	add	r3, r2
 800ce16:	b29a      	uxth	r2, r3
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	60fb      	str	r3, [r7, #12]
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d1f0      	bne.n	800ce0c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	891a      	ldrh	r2, [r3, #8]
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	895b      	ldrh	r3, [r3, #10]
 800ce32:	429a      	cmp	r2, r3
 800ce34:	d006      	beq.n	800ce44 <pbuf_cat+0x64>
 800ce36:	4b10      	ldr	r3, [pc, #64]	; (800ce78 <pbuf_cat+0x98>)
 800ce38:	f240 3262 	movw	r2, #866	; 0x362
 800ce3c:	4911      	ldr	r1, [pc, #68]	; (800ce84 <pbuf_cat+0xa4>)
 800ce3e:	4810      	ldr	r0, [pc, #64]	; (800ce80 <pbuf_cat+0xa0>)
 800ce40:	f009 ff1e 	bl	8016c80 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d006      	beq.n	800ce5a <pbuf_cat+0x7a>
 800ce4c:	4b0a      	ldr	r3, [pc, #40]	; (800ce78 <pbuf_cat+0x98>)
 800ce4e:	f240 3263 	movw	r2, #867	; 0x363
 800ce52:	490d      	ldr	r1, [pc, #52]	; (800ce88 <pbuf_cat+0xa8>)
 800ce54:	480a      	ldr	r0, [pc, #40]	; (800ce80 <pbuf_cat+0xa0>)
 800ce56:	f009 ff13 	bl	8016c80 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	891a      	ldrh	r2, [r3, #8]
 800ce5e:	683b      	ldr	r3, [r7, #0]
 800ce60:	891b      	ldrh	r3, [r3, #8]
 800ce62:	4413      	add	r3, r2
 800ce64:	b29a      	uxth	r2, r3
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	683a      	ldr	r2, [r7, #0]
 800ce6e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800ce70:	3710      	adds	r7, #16
 800ce72:	46bd      	mov	sp, r7
 800ce74:	bd80      	pop	{r7, pc}
 800ce76:	bf00      	nop
 800ce78:	0801870c 	.word	0x0801870c
 800ce7c:	08018900 	.word	0x08018900
 800ce80:	0801876c 	.word	0x0801876c
 800ce84:	08018938 	.word	0x08018938
 800ce88:	08018968 	.word	0x08018968

0800ce8c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800ce8c:	b580      	push	{r7, lr}
 800ce8e:	b086      	sub	sp, #24
 800ce90:	af00      	add	r7, sp, #0
 800ce92:	6078      	str	r0, [r7, #4]
 800ce94:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800ce96:	2300      	movs	r3, #0
 800ce98:	617b      	str	r3, [r7, #20]
 800ce9a:	2300      	movs	r3, #0
 800ce9c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d008      	beq.n	800ceb6 <pbuf_copy+0x2a>
 800cea4:	683b      	ldr	r3, [r7, #0]
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d005      	beq.n	800ceb6 <pbuf_copy+0x2a>
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	891a      	ldrh	r2, [r3, #8]
 800ceae:	683b      	ldr	r3, [r7, #0]
 800ceb0:	891b      	ldrh	r3, [r3, #8]
 800ceb2:	429a      	cmp	r2, r3
 800ceb4:	d209      	bcs.n	800ceca <pbuf_copy+0x3e>
 800ceb6:	4b57      	ldr	r3, [pc, #348]	; (800d014 <pbuf_copy+0x188>)
 800ceb8:	f240 32c9 	movw	r2, #969	; 0x3c9
 800cebc:	4956      	ldr	r1, [pc, #344]	; (800d018 <pbuf_copy+0x18c>)
 800cebe:	4857      	ldr	r0, [pc, #348]	; (800d01c <pbuf_copy+0x190>)
 800cec0:	f009 fede 	bl	8016c80 <iprintf>
 800cec4:	f06f 030f 	mvn.w	r3, #15
 800cec8:	e09f      	b.n	800d00a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	895b      	ldrh	r3, [r3, #10]
 800cece:	461a      	mov	r2, r3
 800ced0:	697b      	ldr	r3, [r7, #20]
 800ced2:	1ad2      	subs	r2, r2, r3
 800ced4:	683b      	ldr	r3, [r7, #0]
 800ced6:	895b      	ldrh	r3, [r3, #10]
 800ced8:	4619      	mov	r1, r3
 800ceda:	693b      	ldr	r3, [r7, #16]
 800cedc:	1acb      	subs	r3, r1, r3
 800cede:	429a      	cmp	r2, r3
 800cee0:	d306      	bcc.n	800cef0 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800cee2:	683b      	ldr	r3, [r7, #0]
 800cee4:	895b      	ldrh	r3, [r3, #10]
 800cee6:	461a      	mov	r2, r3
 800cee8:	693b      	ldr	r3, [r7, #16]
 800ceea:	1ad3      	subs	r3, r2, r3
 800ceec:	60fb      	str	r3, [r7, #12]
 800ceee:	e005      	b.n	800cefc <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	895b      	ldrh	r3, [r3, #10]
 800cef4:	461a      	mov	r2, r3
 800cef6:	697b      	ldr	r3, [r7, #20]
 800cef8:	1ad3      	subs	r3, r2, r3
 800cefa:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	685a      	ldr	r2, [r3, #4]
 800cf00:	697b      	ldr	r3, [r7, #20]
 800cf02:	18d0      	adds	r0, r2, r3
 800cf04:	683b      	ldr	r3, [r7, #0]
 800cf06:	685a      	ldr	r2, [r3, #4]
 800cf08:	693b      	ldr	r3, [r7, #16]
 800cf0a:	4413      	add	r3, r2
 800cf0c:	68fa      	ldr	r2, [r7, #12]
 800cf0e:	4619      	mov	r1, r3
 800cf10:	f009 fdc2 	bl	8016a98 <memcpy>
    offset_to += len;
 800cf14:	697a      	ldr	r2, [r7, #20]
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	4413      	add	r3, r2
 800cf1a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800cf1c:	693a      	ldr	r2, [r7, #16]
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	4413      	add	r3, r2
 800cf22:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	895b      	ldrh	r3, [r3, #10]
 800cf28:	461a      	mov	r2, r3
 800cf2a:	697b      	ldr	r3, [r7, #20]
 800cf2c:	4293      	cmp	r3, r2
 800cf2e:	d906      	bls.n	800cf3e <pbuf_copy+0xb2>
 800cf30:	4b38      	ldr	r3, [pc, #224]	; (800d014 <pbuf_copy+0x188>)
 800cf32:	f240 32d9 	movw	r2, #985	; 0x3d9
 800cf36:	493a      	ldr	r1, [pc, #232]	; (800d020 <pbuf_copy+0x194>)
 800cf38:	4838      	ldr	r0, [pc, #224]	; (800d01c <pbuf_copy+0x190>)
 800cf3a:	f009 fea1 	bl	8016c80 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800cf3e:	683b      	ldr	r3, [r7, #0]
 800cf40:	895b      	ldrh	r3, [r3, #10]
 800cf42:	461a      	mov	r2, r3
 800cf44:	693b      	ldr	r3, [r7, #16]
 800cf46:	4293      	cmp	r3, r2
 800cf48:	d906      	bls.n	800cf58 <pbuf_copy+0xcc>
 800cf4a:	4b32      	ldr	r3, [pc, #200]	; (800d014 <pbuf_copy+0x188>)
 800cf4c:	f240 32da 	movw	r2, #986	; 0x3da
 800cf50:	4934      	ldr	r1, [pc, #208]	; (800d024 <pbuf_copy+0x198>)
 800cf52:	4832      	ldr	r0, [pc, #200]	; (800d01c <pbuf_copy+0x190>)
 800cf54:	f009 fe94 	bl	8016c80 <iprintf>
    if (offset_from >= p_from->len) {
 800cf58:	683b      	ldr	r3, [r7, #0]
 800cf5a:	895b      	ldrh	r3, [r3, #10]
 800cf5c:	461a      	mov	r2, r3
 800cf5e:	693b      	ldr	r3, [r7, #16]
 800cf60:	4293      	cmp	r3, r2
 800cf62:	d304      	bcc.n	800cf6e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800cf64:	2300      	movs	r3, #0
 800cf66:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800cf68:	683b      	ldr	r3, [r7, #0]
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	895b      	ldrh	r3, [r3, #10]
 800cf72:	461a      	mov	r2, r3
 800cf74:	697b      	ldr	r3, [r7, #20]
 800cf76:	4293      	cmp	r3, r2
 800cf78:	d114      	bne.n	800cfa4 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800cf7a:	2300      	movs	r3, #0
 800cf7c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d10c      	bne.n	800cfa4 <pbuf_copy+0x118>
 800cf8a:	683b      	ldr	r3, [r7, #0]
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d009      	beq.n	800cfa4 <pbuf_copy+0x118>
 800cf90:	4b20      	ldr	r3, [pc, #128]	; (800d014 <pbuf_copy+0x188>)
 800cf92:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800cf96:	4924      	ldr	r1, [pc, #144]	; (800d028 <pbuf_copy+0x19c>)
 800cf98:	4820      	ldr	r0, [pc, #128]	; (800d01c <pbuf_copy+0x190>)
 800cf9a:	f009 fe71 	bl	8016c80 <iprintf>
 800cf9e:	f06f 030f 	mvn.w	r3, #15
 800cfa2:	e032      	b.n	800d00a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800cfa4:	683b      	ldr	r3, [r7, #0]
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d013      	beq.n	800cfd2 <pbuf_copy+0x146>
 800cfaa:	683b      	ldr	r3, [r7, #0]
 800cfac:	895a      	ldrh	r2, [r3, #10]
 800cfae:	683b      	ldr	r3, [r7, #0]
 800cfb0:	891b      	ldrh	r3, [r3, #8]
 800cfb2:	429a      	cmp	r2, r3
 800cfb4:	d10d      	bne.n	800cfd2 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800cfb6:	683b      	ldr	r3, [r7, #0]
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d009      	beq.n	800cfd2 <pbuf_copy+0x146>
 800cfbe:	4b15      	ldr	r3, [pc, #84]	; (800d014 <pbuf_copy+0x188>)
 800cfc0:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800cfc4:	4919      	ldr	r1, [pc, #100]	; (800d02c <pbuf_copy+0x1a0>)
 800cfc6:	4815      	ldr	r0, [pc, #84]	; (800d01c <pbuf_copy+0x190>)
 800cfc8:	f009 fe5a 	bl	8016c80 <iprintf>
 800cfcc:	f06f 0305 	mvn.w	r3, #5
 800cfd0:	e01b      	b.n	800d00a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d013      	beq.n	800d000 <pbuf_copy+0x174>
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	895a      	ldrh	r2, [r3, #10]
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	891b      	ldrh	r3, [r3, #8]
 800cfe0:	429a      	cmp	r2, r3
 800cfe2:	d10d      	bne.n	800d000 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d009      	beq.n	800d000 <pbuf_copy+0x174>
 800cfec:	4b09      	ldr	r3, [pc, #36]	; (800d014 <pbuf_copy+0x188>)
 800cfee:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800cff2:	490e      	ldr	r1, [pc, #56]	; (800d02c <pbuf_copy+0x1a0>)
 800cff4:	4809      	ldr	r0, [pc, #36]	; (800d01c <pbuf_copy+0x190>)
 800cff6:	f009 fe43 	bl	8016c80 <iprintf>
 800cffa:	f06f 0305 	mvn.w	r3, #5
 800cffe:	e004      	b.n	800d00a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800d000:	683b      	ldr	r3, [r7, #0]
 800d002:	2b00      	cmp	r3, #0
 800d004:	f47f af61 	bne.w	800ceca <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800d008:	2300      	movs	r3, #0
}
 800d00a:	4618      	mov	r0, r3
 800d00c:	3718      	adds	r7, #24
 800d00e:	46bd      	mov	sp, r7
 800d010:	bd80      	pop	{r7, pc}
 800d012:	bf00      	nop
 800d014:	0801870c 	.word	0x0801870c
 800d018:	080189b4 	.word	0x080189b4
 800d01c:	0801876c 	.word	0x0801876c
 800d020:	080189e4 	.word	0x080189e4
 800d024:	080189fc 	.word	0x080189fc
 800d028:	08018a18 	.word	0x08018a18
 800d02c:	08018a28 	.word	0x08018a28

0800d030 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800d030:	b580      	push	{r7, lr}
 800d032:	b088      	sub	sp, #32
 800d034:	af00      	add	r7, sp, #0
 800d036:	60f8      	str	r0, [r7, #12]
 800d038:	60b9      	str	r1, [r7, #8]
 800d03a:	4611      	mov	r1, r2
 800d03c:	461a      	mov	r2, r3
 800d03e:	460b      	mov	r3, r1
 800d040:	80fb      	strh	r3, [r7, #6]
 800d042:	4613      	mov	r3, r2
 800d044:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800d046:	2300      	movs	r3, #0
 800d048:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800d04a:	2300      	movs	r3, #0
 800d04c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	2b00      	cmp	r3, #0
 800d052:	d108      	bne.n	800d066 <pbuf_copy_partial+0x36>
 800d054:	4b2b      	ldr	r3, [pc, #172]	; (800d104 <pbuf_copy_partial+0xd4>)
 800d056:	f240 420a 	movw	r2, #1034	; 0x40a
 800d05a:	492b      	ldr	r1, [pc, #172]	; (800d108 <pbuf_copy_partial+0xd8>)
 800d05c:	482b      	ldr	r0, [pc, #172]	; (800d10c <pbuf_copy_partial+0xdc>)
 800d05e:	f009 fe0f 	bl	8016c80 <iprintf>
 800d062:	2300      	movs	r3, #0
 800d064:	e04a      	b.n	800d0fc <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800d066:	68bb      	ldr	r3, [r7, #8]
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d108      	bne.n	800d07e <pbuf_copy_partial+0x4e>
 800d06c:	4b25      	ldr	r3, [pc, #148]	; (800d104 <pbuf_copy_partial+0xd4>)
 800d06e:	f240 420b 	movw	r2, #1035	; 0x40b
 800d072:	4927      	ldr	r1, [pc, #156]	; (800d110 <pbuf_copy_partial+0xe0>)
 800d074:	4825      	ldr	r0, [pc, #148]	; (800d10c <pbuf_copy_partial+0xdc>)
 800d076:	f009 fe03 	bl	8016c80 <iprintf>
 800d07a:	2300      	movs	r3, #0
 800d07c:	e03e      	b.n	800d0fc <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	61fb      	str	r3, [r7, #28]
 800d082:	e034      	b.n	800d0ee <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800d084:	88bb      	ldrh	r3, [r7, #4]
 800d086:	2b00      	cmp	r3, #0
 800d088:	d00a      	beq.n	800d0a0 <pbuf_copy_partial+0x70>
 800d08a:	69fb      	ldr	r3, [r7, #28]
 800d08c:	895b      	ldrh	r3, [r3, #10]
 800d08e:	88ba      	ldrh	r2, [r7, #4]
 800d090:	429a      	cmp	r2, r3
 800d092:	d305      	bcc.n	800d0a0 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800d094:	69fb      	ldr	r3, [r7, #28]
 800d096:	895b      	ldrh	r3, [r3, #10]
 800d098:	88ba      	ldrh	r2, [r7, #4]
 800d09a:	1ad3      	subs	r3, r2, r3
 800d09c:	80bb      	strh	r3, [r7, #4]
 800d09e:	e023      	b.n	800d0e8 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800d0a0:	69fb      	ldr	r3, [r7, #28]
 800d0a2:	895a      	ldrh	r2, [r3, #10]
 800d0a4:	88bb      	ldrh	r3, [r7, #4]
 800d0a6:	1ad3      	subs	r3, r2, r3
 800d0a8:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800d0aa:	8b3a      	ldrh	r2, [r7, #24]
 800d0ac:	88fb      	ldrh	r3, [r7, #6]
 800d0ae:	429a      	cmp	r2, r3
 800d0b0:	d901      	bls.n	800d0b6 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800d0b2:	88fb      	ldrh	r3, [r7, #6]
 800d0b4:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800d0b6:	8b7b      	ldrh	r3, [r7, #26]
 800d0b8:	68ba      	ldr	r2, [r7, #8]
 800d0ba:	18d0      	adds	r0, r2, r3
 800d0bc:	69fb      	ldr	r3, [r7, #28]
 800d0be:	685a      	ldr	r2, [r3, #4]
 800d0c0:	88bb      	ldrh	r3, [r7, #4]
 800d0c2:	4413      	add	r3, r2
 800d0c4:	8b3a      	ldrh	r2, [r7, #24]
 800d0c6:	4619      	mov	r1, r3
 800d0c8:	f009 fce6 	bl	8016a98 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800d0cc:	8afa      	ldrh	r2, [r7, #22]
 800d0ce:	8b3b      	ldrh	r3, [r7, #24]
 800d0d0:	4413      	add	r3, r2
 800d0d2:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800d0d4:	8b7a      	ldrh	r2, [r7, #26]
 800d0d6:	8b3b      	ldrh	r3, [r7, #24]
 800d0d8:	4413      	add	r3, r2
 800d0da:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800d0dc:	88fa      	ldrh	r2, [r7, #6]
 800d0de:	8b3b      	ldrh	r3, [r7, #24]
 800d0e0:	1ad3      	subs	r3, r2, r3
 800d0e2:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800d0e4:	2300      	movs	r3, #0
 800d0e6:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d0e8:	69fb      	ldr	r3, [r7, #28]
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	61fb      	str	r3, [r7, #28]
 800d0ee:	88fb      	ldrh	r3, [r7, #6]
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d002      	beq.n	800d0fa <pbuf_copy_partial+0xca>
 800d0f4:	69fb      	ldr	r3, [r7, #28]
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d1c4      	bne.n	800d084 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800d0fa:	8afb      	ldrh	r3, [r7, #22]
}
 800d0fc:	4618      	mov	r0, r3
 800d0fe:	3720      	adds	r7, #32
 800d100:	46bd      	mov	sp, r7
 800d102:	bd80      	pop	{r7, pc}
 800d104:	0801870c 	.word	0x0801870c
 800d108:	08018a54 	.word	0x08018a54
 800d10c:	0801876c 	.word	0x0801876c
 800d110:	08018a74 	.word	0x08018a74

0800d114 <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf *
pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 800d114:	b480      	push	{r7}
 800d116:	b087      	sub	sp, #28
 800d118:	af00      	add	r7, sp, #0
 800d11a:	60f8      	str	r0, [r7, #12]
 800d11c:	460b      	mov	r3, r1
 800d11e:	607a      	str	r2, [r7, #4]
 800d120:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 800d122:	897b      	ldrh	r3, [r7, #10]
 800d124:	82fb      	strh	r3, [r7, #22]
  const struct pbuf *q = in;
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 800d12a:	e007      	b.n	800d13c <pbuf_skip_const+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 800d12c:	693b      	ldr	r3, [r7, #16]
 800d12e:	895b      	ldrh	r3, [r3, #10]
 800d130:	8afa      	ldrh	r2, [r7, #22]
 800d132:	1ad3      	subs	r3, r2, r3
 800d134:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 800d136:	693b      	ldr	r3, [r7, #16]
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 800d13c:	693b      	ldr	r3, [r7, #16]
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d004      	beq.n	800d14c <pbuf_skip_const+0x38>
 800d142:	693b      	ldr	r3, [r7, #16]
 800d144:	895b      	ldrh	r3, [r3, #10]
 800d146:	8afa      	ldrh	r2, [r7, #22]
 800d148:	429a      	cmp	r2, r3
 800d14a:	d2ef      	bcs.n	800d12c <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d002      	beq.n	800d158 <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	8afa      	ldrh	r2, [r7, #22]
 800d156:	801a      	strh	r2, [r3, #0]
  }
  return q;
 800d158:	693b      	ldr	r3, [r7, #16]
}
 800d15a:	4618      	mov	r0, r3
 800d15c:	371c      	adds	r7, #28
 800d15e:	46bd      	mov	sp, r7
 800d160:	bc80      	pop	{r7}
 800d162:	4770      	bx	lr

0800d164 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800d164:	b580      	push	{r7, lr}
 800d166:	b084      	sub	sp, #16
 800d168:	af00      	add	r7, sp, #0
 800d16a:	4603      	mov	r3, r0
 800d16c:	603a      	str	r2, [r7, #0]
 800d16e:	71fb      	strb	r3, [r7, #7]
 800d170:	460b      	mov	r3, r1
 800d172:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800d174:	683b      	ldr	r3, [r7, #0]
 800d176:	8919      	ldrh	r1, [r3, #8]
 800d178:	88ba      	ldrh	r2, [r7, #4]
 800d17a:	79fb      	ldrb	r3, [r7, #7]
 800d17c:	4618      	mov	r0, r3
 800d17e:	f7ff fa7f 	bl	800c680 <pbuf_alloc>
 800d182:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	2b00      	cmp	r3, #0
 800d188:	d101      	bne.n	800d18e <pbuf_clone+0x2a>
    return NULL;
 800d18a:	2300      	movs	r3, #0
 800d18c:	e011      	b.n	800d1b2 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800d18e:	6839      	ldr	r1, [r7, #0]
 800d190:	68f8      	ldr	r0, [r7, #12]
 800d192:	f7ff fe7b 	bl	800ce8c <pbuf_copy>
 800d196:	4603      	mov	r3, r0
 800d198:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800d19a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d006      	beq.n	800d1b0 <pbuf_clone+0x4c>
 800d1a2:	4b06      	ldr	r3, [pc, #24]	; (800d1bc <pbuf_clone+0x58>)
 800d1a4:	f240 5224 	movw	r2, #1316	; 0x524
 800d1a8:	4905      	ldr	r1, [pc, #20]	; (800d1c0 <pbuf_clone+0x5c>)
 800d1aa:	4806      	ldr	r0, [pc, #24]	; (800d1c4 <pbuf_clone+0x60>)
 800d1ac:	f009 fd68 	bl	8016c80 <iprintf>
  return q;
 800d1b0:	68fb      	ldr	r3, [r7, #12]
}
 800d1b2:	4618      	mov	r0, r3
 800d1b4:	3710      	adds	r7, #16
 800d1b6:	46bd      	mov	sp, r7
 800d1b8:	bd80      	pop	{r7, pc}
 800d1ba:	bf00      	nop
 800d1bc:	0801870c 	.word	0x0801870c
 800d1c0:	08018b80 	.word	0x08018b80
 800d1c4:	0801876c 	.word	0x0801876c

0800d1c8 <pbuf_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p OR ZERO IF 'offset' >= p->tot_len
 */
u8_t
pbuf_get_at(const struct pbuf *p, u16_t offset)
{
 800d1c8:	b580      	push	{r7, lr}
 800d1ca:	b084      	sub	sp, #16
 800d1cc:	af00      	add	r7, sp, #0
 800d1ce:	6078      	str	r0, [r7, #4]
 800d1d0:	460b      	mov	r3, r1
 800d1d2:	807b      	strh	r3, [r7, #2]
  int ret = pbuf_try_get_at(p, offset);
 800d1d4:	887b      	ldrh	r3, [r7, #2]
 800d1d6:	4619      	mov	r1, r3
 800d1d8:	6878      	ldr	r0, [r7, #4]
 800d1da:	f000 f80c 	bl	800d1f6 <pbuf_try_get_at>
 800d1de:	60f8      	str	r0, [r7, #12]
  if (ret >= 0) {
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	db02      	blt.n	800d1ec <pbuf_get_at+0x24>
    return (u8_t)ret;
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	b2db      	uxtb	r3, r3
 800d1ea:	e000      	b.n	800d1ee <pbuf_get_at+0x26>
  }
  return 0;
 800d1ec:	2300      	movs	r3, #0
}
 800d1ee:	4618      	mov	r0, r3
 800d1f0:	3710      	adds	r7, #16
 800d1f2:	46bd      	mov	sp, r7
 800d1f4:	bd80      	pop	{r7, pc}

0800d1f6 <pbuf_try_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p [0..0xFF] OR negative if 'offset' >= p->tot_len
 */
int
pbuf_try_get_at(const struct pbuf *p, u16_t offset)
{
 800d1f6:	b580      	push	{r7, lr}
 800d1f8:	b084      	sub	sp, #16
 800d1fa:	af00      	add	r7, sp, #0
 800d1fc:	6078      	str	r0, [r7, #4]
 800d1fe:	460b      	mov	r3, r1
 800d200:	807b      	strh	r3, [r7, #2]
  u16_t q_idx;
  const struct pbuf *q = pbuf_skip_const(p, offset, &q_idx);
 800d202:	f107 020a 	add.w	r2, r7, #10
 800d206:	887b      	ldrh	r3, [r7, #2]
 800d208:	4619      	mov	r1, r3
 800d20a:	6878      	ldr	r0, [r7, #4]
 800d20c:	f7ff ff82 	bl	800d114 <pbuf_skip_const>
 800d210:	60f8      	str	r0, [r7, #12]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	2b00      	cmp	r3, #0
 800d216:	d00a      	beq.n	800d22e <pbuf_try_get_at+0x38>
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	895a      	ldrh	r2, [r3, #10]
 800d21c:	897b      	ldrh	r3, [r7, #10]
 800d21e:	429a      	cmp	r2, r3
 800d220:	d905      	bls.n	800d22e <pbuf_try_get_at+0x38>
    return ((u8_t *)q->payload)[q_idx];
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	685b      	ldr	r3, [r3, #4]
 800d226:	897a      	ldrh	r2, [r7, #10]
 800d228:	4413      	add	r3, r2
 800d22a:	781b      	ldrb	r3, [r3, #0]
 800d22c:	e001      	b.n	800d232 <pbuf_try_get_at+0x3c>
  }
  return -1;
 800d22e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d232:	4618      	mov	r0, r3
 800d234:	3710      	adds	r7, #16
 800d236:	46bd      	mov	sp, r7
 800d238:	bd80      	pop	{r7, pc}
	...

0800d23c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800d23c:	b580      	push	{r7, lr}
 800d23e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800d240:	f009 fd36 	bl	8016cb0 <rand>
 800d244:	4603      	mov	r3, r0
 800d246:	b29b      	uxth	r3, r3
 800d248:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800d24c:	b29b      	uxth	r3, r3
 800d24e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800d252:	b29a      	uxth	r2, r3
 800d254:	4b01      	ldr	r3, [pc, #4]	; (800d25c <tcp_init+0x20>)
 800d256:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800d258:	bf00      	nop
 800d25a:	bd80      	pop	{r7, pc}
 800d25c:	20000010 	.word	0x20000010

0800d260 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800d260:	b580      	push	{r7, lr}
 800d262:	b082      	sub	sp, #8
 800d264:	af00      	add	r7, sp, #0
 800d266:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	7d1b      	ldrb	r3, [r3, #20]
 800d26c:	2b01      	cmp	r3, #1
 800d26e:	d105      	bne.n	800d27c <tcp_free+0x1c>
 800d270:	4b06      	ldr	r3, [pc, #24]	; (800d28c <tcp_free+0x2c>)
 800d272:	22d4      	movs	r2, #212	; 0xd4
 800d274:	4906      	ldr	r1, [pc, #24]	; (800d290 <tcp_free+0x30>)
 800d276:	4807      	ldr	r0, [pc, #28]	; (800d294 <tcp_free+0x34>)
 800d278:	f009 fd02 	bl	8016c80 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800d27c:	6879      	ldr	r1, [r7, #4]
 800d27e:	2001      	movs	r0, #1
 800d280:	f7fe feac 	bl	800bfdc <memp_free>
}
 800d284:	bf00      	nop
 800d286:	3708      	adds	r7, #8
 800d288:	46bd      	mov	sp, r7
 800d28a:	bd80      	pop	{r7, pc}
 800d28c:	08018c0c 	.word	0x08018c0c
 800d290:	08018c3c 	.word	0x08018c3c
 800d294:	08018c50 	.word	0x08018c50

0800d298 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800d298:	b580      	push	{r7, lr}
 800d29a:	b082      	sub	sp, #8
 800d29c:	af00      	add	r7, sp, #0
 800d29e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	7d1b      	ldrb	r3, [r3, #20]
 800d2a4:	2b01      	cmp	r3, #1
 800d2a6:	d105      	bne.n	800d2b4 <tcp_free_listen+0x1c>
 800d2a8:	4b06      	ldr	r3, [pc, #24]	; (800d2c4 <tcp_free_listen+0x2c>)
 800d2aa:	22df      	movs	r2, #223	; 0xdf
 800d2ac:	4906      	ldr	r1, [pc, #24]	; (800d2c8 <tcp_free_listen+0x30>)
 800d2ae:	4807      	ldr	r0, [pc, #28]	; (800d2cc <tcp_free_listen+0x34>)
 800d2b0:	f009 fce6 	bl	8016c80 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800d2b4:	6879      	ldr	r1, [r7, #4]
 800d2b6:	2002      	movs	r0, #2
 800d2b8:	f7fe fe90 	bl	800bfdc <memp_free>
}
 800d2bc:	bf00      	nop
 800d2be:	3708      	adds	r7, #8
 800d2c0:	46bd      	mov	sp, r7
 800d2c2:	bd80      	pop	{r7, pc}
 800d2c4:	08018c0c 	.word	0x08018c0c
 800d2c8:	08018c78 	.word	0x08018c78
 800d2cc:	08018c50 	.word	0x08018c50

0800d2d0 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800d2d0:	b580      	push	{r7, lr}
 800d2d2:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800d2d4:	f001 f898 	bl	800e408 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800d2d8:	4b07      	ldr	r3, [pc, #28]	; (800d2f8 <tcp_tmr+0x28>)
 800d2da:	781b      	ldrb	r3, [r3, #0]
 800d2dc:	3301      	adds	r3, #1
 800d2de:	b2da      	uxtb	r2, r3
 800d2e0:	4b05      	ldr	r3, [pc, #20]	; (800d2f8 <tcp_tmr+0x28>)
 800d2e2:	701a      	strb	r2, [r3, #0]
 800d2e4:	4b04      	ldr	r3, [pc, #16]	; (800d2f8 <tcp_tmr+0x28>)
 800d2e6:	781b      	ldrb	r3, [r3, #0]
 800d2e8:	f003 0301 	and.w	r3, r3, #1
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d001      	beq.n	800d2f4 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800d2f0:	f000 fd4a 	bl	800dd88 <tcp_slowtmr>
  }
}
 800d2f4:	bf00      	nop
 800d2f6:	bd80      	pop	{r7, pc}
 800d2f8:	2000be25 	.word	0x2000be25

0800d2fc <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800d2fc:	b580      	push	{r7, lr}
 800d2fe:	b084      	sub	sp, #16
 800d300:	af00      	add	r7, sp, #0
 800d302:	6078      	str	r0, [r7, #4]
 800d304:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800d306:	683b      	ldr	r3, [r7, #0]
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d105      	bne.n	800d318 <tcp_remove_listener+0x1c>
 800d30c:	4b0d      	ldr	r3, [pc, #52]	; (800d344 <tcp_remove_listener+0x48>)
 800d30e:	22ff      	movs	r2, #255	; 0xff
 800d310:	490d      	ldr	r1, [pc, #52]	; (800d348 <tcp_remove_listener+0x4c>)
 800d312:	480e      	ldr	r0, [pc, #56]	; (800d34c <tcp_remove_listener+0x50>)
 800d314:	f009 fcb4 	bl	8016c80 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	60fb      	str	r3, [r7, #12]
 800d31c:	e00a      	b.n	800d334 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d322:	683a      	ldr	r2, [r7, #0]
 800d324:	429a      	cmp	r2, r3
 800d326:	d102      	bne.n	800d32e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	2200      	movs	r2, #0
 800d32c:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	68db      	ldr	r3, [r3, #12]
 800d332:	60fb      	str	r3, [r7, #12]
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	2b00      	cmp	r3, #0
 800d338:	d1f1      	bne.n	800d31e <tcp_remove_listener+0x22>
    }
  }
}
 800d33a:	bf00      	nop
 800d33c:	bf00      	nop
 800d33e:	3710      	adds	r7, #16
 800d340:	46bd      	mov	sp, r7
 800d342:	bd80      	pop	{r7, pc}
 800d344:	08018c0c 	.word	0x08018c0c
 800d348:	08018c94 	.word	0x08018c94
 800d34c:	08018c50 	.word	0x08018c50

0800d350 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800d350:	b580      	push	{r7, lr}
 800d352:	b084      	sub	sp, #16
 800d354:	af00      	add	r7, sp, #0
 800d356:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d106      	bne.n	800d36c <tcp_listen_closed+0x1c>
 800d35e:	4b14      	ldr	r3, [pc, #80]	; (800d3b0 <tcp_listen_closed+0x60>)
 800d360:	f240 1211 	movw	r2, #273	; 0x111
 800d364:	4913      	ldr	r1, [pc, #76]	; (800d3b4 <tcp_listen_closed+0x64>)
 800d366:	4814      	ldr	r0, [pc, #80]	; (800d3b8 <tcp_listen_closed+0x68>)
 800d368:	f009 fc8a 	bl	8016c80 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	7d1b      	ldrb	r3, [r3, #20]
 800d370:	2b01      	cmp	r3, #1
 800d372:	d006      	beq.n	800d382 <tcp_listen_closed+0x32>
 800d374:	4b0e      	ldr	r3, [pc, #56]	; (800d3b0 <tcp_listen_closed+0x60>)
 800d376:	f44f 7289 	mov.w	r2, #274	; 0x112
 800d37a:	4910      	ldr	r1, [pc, #64]	; (800d3bc <tcp_listen_closed+0x6c>)
 800d37c:	480e      	ldr	r0, [pc, #56]	; (800d3b8 <tcp_listen_closed+0x68>)
 800d37e:	f009 fc7f 	bl	8016c80 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d382:	2301      	movs	r3, #1
 800d384:	60fb      	str	r3, [r7, #12]
 800d386:	e00b      	b.n	800d3a0 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800d388:	4a0d      	ldr	r2, [pc, #52]	; (800d3c0 <tcp_listen_closed+0x70>)
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	6879      	ldr	r1, [r7, #4]
 800d394:	4618      	mov	r0, r3
 800d396:	f7ff ffb1 	bl	800d2fc <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	3301      	adds	r3, #1
 800d39e:	60fb      	str	r3, [r7, #12]
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	2b03      	cmp	r3, #3
 800d3a4:	d9f0      	bls.n	800d388 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800d3a6:	bf00      	nop
 800d3a8:	bf00      	nop
 800d3aa:	3710      	adds	r7, #16
 800d3ac:	46bd      	mov	sp, r7
 800d3ae:	bd80      	pop	{r7, pc}
 800d3b0:	08018c0c 	.word	0x08018c0c
 800d3b4:	08018cbc 	.word	0x08018cbc
 800d3b8:	08018c50 	.word	0x08018c50
 800d3bc:	08018cc8 	.word	0x08018cc8
 800d3c0:	0801ac38 	.word	0x0801ac38

0800d3c4 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800d3c4:	b5b0      	push	{r4, r5, r7, lr}
 800d3c6:	b088      	sub	sp, #32
 800d3c8:	af04      	add	r7, sp, #16
 800d3ca:	6078      	str	r0, [r7, #4]
 800d3cc:	460b      	mov	r3, r1
 800d3ce:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d106      	bne.n	800d3e4 <tcp_close_shutdown+0x20>
 800d3d6:	4b63      	ldr	r3, [pc, #396]	; (800d564 <tcp_close_shutdown+0x1a0>)
 800d3d8:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800d3dc:	4962      	ldr	r1, [pc, #392]	; (800d568 <tcp_close_shutdown+0x1a4>)
 800d3de:	4863      	ldr	r0, [pc, #396]	; (800d56c <tcp_close_shutdown+0x1a8>)
 800d3e0:	f009 fc4e 	bl	8016c80 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800d3e4:	78fb      	ldrb	r3, [r7, #3]
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d066      	beq.n	800d4b8 <tcp_close_shutdown+0xf4>
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	7d1b      	ldrb	r3, [r3, #20]
 800d3ee:	2b04      	cmp	r3, #4
 800d3f0:	d003      	beq.n	800d3fa <tcp_close_shutdown+0x36>
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	7d1b      	ldrb	r3, [r3, #20]
 800d3f6:	2b07      	cmp	r3, #7
 800d3f8:	d15e      	bne.n	800d4b8 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d104      	bne.n	800d40c <tcp_close_shutdown+0x48>
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d406:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d40a:	d055      	beq.n	800d4b8 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	8b5b      	ldrh	r3, [r3, #26]
 800d410:	f003 0310 	and.w	r3, r3, #16
 800d414:	2b00      	cmp	r3, #0
 800d416:	d106      	bne.n	800d426 <tcp_close_shutdown+0x62>
 800d418:	4b52      	ldr	r3, [pc, #328]	; (800d564 <tcp_close_shutdown+0x1a0>)
 800d41a:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800d41e:	4954      	ldr	r1, [pc, #336]	; (800d570 <tcp_close_shutdown+0x1ac>)
 800d420:	4852      	ldr	r0, [pc, #328]	; (800d56c <tcp_close_shutdown+0x1a8>)
 800d422:	f009 fc2d 	bl	8016c80 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800d42e:	687d      	ldr	r5, [r7, #4]
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	3304      	adds	r3, #4
 800d434:	687a      	ldr	r2, [r7, #4]
 800d436:	8ad2      	ldrh	r2, [r2, #22]
 800d438:	6879      	ldr	r1, [r7, #4]
 800d43a:	8b09      	ldrh	r1, [r1, #24]
 800d43c:	9102      	str	r1, [sp, #8]
 800d43e:	9201      	str	r2, [sp, #4]
 800d440:	9300      	str	r3, [sp, #0]
 800d442:	462b      	mov	r3, r5
 800d444:	4622      	mov	r2, r4
 800d446:	4601      	mov	r1, r0
 800d448:	6878      	ldr	r0, [r7, #4]
 800d44a:	f005 fd93 	bl	8012f74 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800d44e:	6878      	ldr	r0, [r7, #4]
 800d450:	f001 fb70 	bl	800eb34 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800d454:	4b47      	ldr	r3, [pc, #284]	; (800d574 <tcp_close_shutdown+0x1b0>)
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	687a      	ldr	r2, [r7, #4]
 800d45a:	429a      	cmp	r2, r3
 800d45c:	d105      	bne.n	800d46a <tcp_close_shutdown+0xa6>
 800d45e:	4b45      	ldr	r3, [pc, #276]	; (800d574 <tcp_close_shutdown+0x1b0>)
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	68db      	ldr	r3, [r3, #12]
 800d464:	4a43      	ldr	r2, [pc, #268]	; (800d574 <tcp_close_shutdown+0x1b0>)
 800d466:	6013      	str	r3, [r2, #0]
 800d468:	e013      	b.n	800d492 <tcp_close_shutdown+0xce>
 800d46a:	4b42      	ldr	r3, [pc, #264]	; (800d574 <tcp_close_shutdown+0x1b0>)
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	60fb      	str	r3, [r7, #12]
 800d470:	e00c      	b.n	800d48c <tcp_close_shutdown+0xc8>
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	68db      	ldr	r3, [r3, #12]
 800d476:	687a      	ldr	r2, [r7, #4]
 800d478:	429a      	cmp	r2, r3
 800d47a:	d104      	bne.n	800d486 <tcp_close_shutdown+0xc2>
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	68da      	ldr	r2, [r3, #12]
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	60da      	str	r2, [r3, #12]
 800d484:	e005      	b.n	800d492 <tcp_close_shutdown+0xce>
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	68db      	ldr	r3, [r3, #12]
 800d48a:	60fb      	str	r3, [r7, #12]
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d1ef      	bne.n	800d472 <tcp_close_shutdown+0xae>
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	2200      	movs	r2, #0
 800d496:	60da      	str	r2, [r3, #12]
 800d498:	4b37      	ldr	r3, [pc, #220]	; (800d578 <tcp_close_shutdown+0x1b4>)
 800d49a:	2201      	movs	r2, #1
 800d49c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800d49e:	4b37      	ldr	r3, [pc, #220]	; (800d57c <tcp_close_shutdown+0x1b8>)
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	687a      	ldr	r2, [r7, #4]
 800d4a4:	429a      	cmp	r2, r3
 800d4a6:	d102      	bne.n	800d4ae <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800d4a8:	f004 f808 	bl	80114bc <tcp_trigger_input_pcb_close>
 800d4ac:	e002      	b.n	800d4b4 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800d4ae:	6878      	ldr	r0, [r7, #4]
 800d4b0:	f7ff fed6 	bl	800d260 <tcp_free>
      }
      return ERR_OK;
 800d4b4:	2300      	movs	r3, #0
 800d4b6:	e050      	b.n	800d55a <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	7d1b      	ldrb	r3, [r3, #20]
 800d4bc:	2b02      	cmp	r3, #2
 800d4be:	d03b      	beq.n	800d538 <tcp_close_shutdown+0x174>
 800d4c0:	2b02      	cmp	r3, #2
 800d4c2:	dc44      	bgt.n	800d54e <tcp_close_shutdown+0x18a>
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d002      	beq.n	800d4ce <tcp_close_shutdown+0x10a>
 800d4c8:	2b01      	cmp	r3, #1
 800d4ca:	d02a      	beq.n	800d522 <tcp_close_shutdown+0x15e>
 800d4cc:	e03f      	b.n	800d54e <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	8adb      	ldrh	r3, [r3, #22]
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d021      	beq.n	800d51a <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800d4d6:	4b2a      	ldr	r3, [pc, #168]	; (800d580 <tcp_close_shutdown+0x1bc>)
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	687a      	ldr	r2, [r7, #4]
 800d4dc:	429a      	cmp	r2, r3
 800d4de:	d105      	bne.n	800d4ec <tcp_close_shutdown+0x128>
 800d4e0:	4b27      	ldr	r3, [pc, #156]	; (800d580 <tcp_close_shutdown+0x1bc>)
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	68db      	ldr	r3, [r3, #12]
 800d4e6:	4a26      	ldr	r2, [pc, #152]	; (800d580 <tcp_close_shutdown+0x1bc>)
 800d4e8:	6013      	str	r3, [r2, #0]
 800d4ea:	e013      	b.n	800d514 <tcp_close_shutdown+0x150>
 800d4ec:	4b24      	ldr	r3, [pc, #144]	; (800d580 <tcp_close_shutdown+0x1bc>)
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	60bb      	str	r3, [r7, #8]
 800d4f2:	e00c      	b.n	800d50e <tcp_close_shutdown+0x14a>
 800d4f4:	68bb      	ldr	r3, [r7, #8]
 800d4f6:	68db      	ldr	r3, [r3, #12]
 800d4f8:	687a      	ldr	r2, [r7, #4]
 800d4fa:	429a      	cmp	r2, r3
 800d4fc:	d104      	bne.n	800d508 <tcp_close_shutdown+0x144>
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	68da      	ldr	r2, [r3, #12]
 800d502:	68bb      	ldr	r3, [r7, #8]
 800d504:	60da      	str	r2, [r3, #12]
 800d506:	e005      	b.n	800d514 <tcp_close_shutdown+0x150>
 800d508:	68bb      	ldr	r3, [r7, #8]
 800d50a:	68db      	ldr	r3, [r3, #12]
 800d50c:	60bb      	str	r3, [r7, #8]
 800d50e:	68bb      	ldr	r3, [r7, #8]
 800d510:	2b00      	cmp	r3, #0
 800d512:	d1ef      	bne.n	800d4f4 <tcp_close_shutdown+0x130>
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	2200      	movs	r2, #0
 800d518:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800d51a:	6878      	ldr	r0, [r7, #4]
 800d51c:	f7ff fea0 	bl	800d260 <tcp_free>
      break;
 800d520:	e01a      	b.n	800d558 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800d522:	6878      	ldr	r0, [r7, #4]
 800d524:	f7ff ff14 	bl	800d350 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800d528:	6879      	ldr	r1, [r7, #4]
 800d52a:	4816      	ldr	r0, [pc, #88]	; (800d584 <tcp_close_shutdown+0x1c0>)
 800d52c:	f001 fb52 	bl	800ebd4 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800d530:	6878      	ldr	r0, [r7, #4]
 800d532:	f7ff feb1 	bl	800d298 <tcp_free_listen>
      break;
 800d536:	e00f      	b.n	800d558 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800d538:	6879      	ldr	r1, [r7, #4]
 800d53a:	480e      	ldr	r0, [pc, #56]	; (800d574 <tcp_close_shutdown+0x1b0>)
 800d53c:	f001 fb4a 	bl	800ebd4 <tcp_pcb_remove>
 800d540:	4b0d      	ldr	r3, [pc, #52]	; (800d578 <tcp_close_shutdown+0x1b4>)
 800d542:	2201      	movs	r2, #1
 800d544:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800d546:	6878      	ldr	r0, [r7, #4]
 800d548:	f7ff fe8a 	bl	800d260 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800d54c:	e004      	b.n	800d558 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800d54e:	6878      	ldr	r0, [r7, #4]
 800d550:	f000 f81a 	bl	800d588 <tcp_close_shutdown_fin>
 800d554:	4603      	mov	r3, r0
 800d556:	e000      	b.n	800d55a <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800d558:	2300      	movs	r3, #0
}
 800d55a:	4618      	mov	r0, r3
 800d55c:	3710      	adds	r7, #16
 800d55e:	46bd      	mov	sp, r7
 800d560:	bdb0      	pop	{r4, r5, r7, pc}
 800d562:	bf00      	nop
 800d564:	08018c0c 	.word	0x08018c0c
 800d568:	08018ce0 	.word	0x08018ce0
 800d56c:	08018c50 	.word	0x08018c50
 800d570:	08018d00 	.word	0x08018d00
 800d574:	2000be1c 	.word	0x2000be1c
 800d578:	2000be24 	.word	0x2000be24
 800d57c:	2000be5c 	.word	0x2000be5c
 800d580:	2000be14 	.word	0x2000be14
 800d584:	2000be18 	.word	0x2000be18

0800d588 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800d588:	b580      	push	{r7, lr}
 800d58a:	b084      	sub	sp, #16
 800d58c:	af00      	add	r7, sp, #0
 800d58e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	2b00      	cmp	r3, #0
 800d594:	d106      	bne.n	800d5a4 <tcp_close_shutdown_fin+0x1c>
 800d596:	4b2e      	ldr	r3, [pc, #184]	; (800d650 <tcp_close_shutdown_fin+0xc8>)
 800d598:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800d59c:	492d      	ldr	r1, [pc, #180]	; (800d654 <tcp_close_shutdown_fin+0xcc>)
 800d59e:	482e      	ldr	r0, [pc, #184]	; (800d658 <tcp_close_shutdown_fin+0xd0>)
 800d5a0:	f009 fb6e 	bl	8016c80 <iprintf>

  switch (pcb->state) {
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	7d1b      	ldrb	r3, [r3, #20]
 800d5a8:	2b07      	cmp	r3, #7
 800d5aa:	d020      	beq.n	800d5ee <tcp_close_shutdown_fin+0x66>
 800d5ac:	2b07      	cmp	r3, #7
 800d5ae:	dc2b      	bgt.n	800d608 <tcp_close_shutdown_fin+0x80>
 800d5b0:	2b03      	cmp	r3, #3
 800d5b2:	d002      	beq.n	800d5ba <tcp_close_shutdown_fin+0x32>
 800d5b4:	2b04      	cmp	r3, #4
 800d5b6:	d00d      	beq.n	800d5d4 <tcp_close_shutdown_fin+0x4c>
 800d5b8:	e026      	b.n	800d608 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800d5ba:	6878      	ldr	r0, [r7, #4]
 800d5bc:	f004 fde8 	bl	8012190 <tcp_send_fin>
 800d5c0:	4603      	mov	r3, r0
 800d5c2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d5c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d11f      	bne.n	800d60c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	2205      	movs	r2, #5
 800d5d0:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d5d2:	e01b      	b.n	800d60c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800d5d4:	6878      	ldr	r0, [r7, #4]
 800d5d6:	f004 fddb 	bl	8012190 <tcp_send_fin>
 800d5da:	4603      	mov	r3, r0
 800d5dc:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d5de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d114      	bne.n	800d610 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	2205      	movs	r2, #5
 800d5ea:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d5ec:	e010      	b.n	800d610 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800d5ee:	6878      	ldr	r0, [r7, #4]
 800d5f0:	f004 fdce 	bl	8012190 <tcp_send_fin>
 800d5f4:	4603      	mov	r3, r0
 800d5f6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d5f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d109      	bne.n	800d614 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	2209      	movs	r2, #9
 800d604:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d606:	e005      	b.n	800d614 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800d608:	2300      	movs	r3, #0
 800d60a:	e01c      	b.n	800d646 <tcp_close_shutdown_fin+0xbe>
      break;
 800d60c:	bf00      	nop
 800d60e:	e002      	b.n	800d616 <tcp_close_shutdown_fin+0x8e>
      break;
 800d610:	bf00      	nop
 800d612:	e000      	b.n	800d616 <tcp_close_shutdown_fin+0x8e>
      break;
 800d614:	bf00      	nop
  }

  if (err == ERR_OK) {
 800d616:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d103      	bne.n	800d626 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800d61e:	6878      	ldr	r0, [r7, #4]
 800d620:	f004 fef4 	bl	801240c <tcp_output>
 800d624:	e00d      	b.n	800d642 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800d626:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d62a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d62e:	d108      	bne.n	800d642 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	8b5b      	ldrh	r3, [r3, #26]
 800d634:	f043 0308 	orr.w	r3, r3, #8
 800d638:	b29a      	uxth	r2, r3
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800d63e:	2300      	movs	r3, #0
 800d640:	e001      	b.n	800d646 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800d642:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d646:	4618      	mov	r0, r3
 800d648:	3710      	adds	r7, #16
 800d64a:	46bd      	mov	sp, r7
 800d64c:	bd80      	pop	{r7, pc}
 800d64e:	bf00      	nop
 800d650:	08018c0c 	.word	0x08018c0c
 800d654:	08018cbc 	.word	0x08018cbc
 800d658:	08018c50 	.word	0x08018c50

0800d65c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800d65c:	b580      	push	{r7, lr}
 800d65e:	b082      	sub	sp, #8
 800d660:	af00      	add	r7, sp, #0
 800d662:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	2b00      	cmp	r3, #0
 800d668:	d109      	bne.n	800d67e <tcp_close+0x22>
 800d66a:	4b0f      	ldr	r3, [pc, #60]	; (800d6a8 <tcp_close+0x4c>)
 800d66c:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800d670:	490e      	ldr	r1, [pc, #56]	; (800d6ac <tcp_close+0x50>)
 800d672:	480f      	ldr	r0, [pc, #60]	; (800d6b0 <tcp_close+0x54>)
 800d674:	f009 fb04 	bl	8016c80 <iprintf>
 800d678:	f06f 030f 	mvn.w	r3, #15
 800d67c:	e00f      	b.n	800d69e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	7d1b      	ldrb	r3, [r3, #20]
 800d682:	2b01      	cmp	r3, #1
 800d684:	d006      	beq.n	800d694 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	8b5b      	ldrh	r3, [r3, #26]
 800d68a:	f043 0310 	orr.w	r3, r3, #16
 800d68e:	b29a      	uxth	r2, r3
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800d694:	2101      	movs	r1, #1
 800d696:	6878      	ldr	r0, [r7, #4]
 800d698:	f7ff fe94 	bl	800d3c4 <tcp_close_shutdown>
 800d69c:	4603      	mov	r3, r0
}
 800d69e:	4618      	mov	r0, r3
 800d6a0:	3708      	adds	r7, #8
 800d6a2:	46bd      	mov	sp, r7
 800d6a4:	bd80      	pop	{r7, pc}
 800d6a6:	bf00      	nop
 800d6a8:	08018c0c 	.word	0x08018c0c
 800d6ac:	08018d1c 	.word	0x08018d1c
 800d6b0:	08018c50 	.word	0x08018c50

0800d6b4 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800d6b4:	b580      	push	{r7, lr}
 800d6b6:	b08e      	sub	sp, #56	; 0x38
 800d6b8:	af04      	add	r7, sp, #16
 800d6ba:	6078      	str	r0, [r7, #4]
 800d6bc:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d107      	bne.n	800d6d4 <tcp_abandon+0x20>
 800d6c4:	4b52      	ldr	r3, [pc, #328]	; (800d810 <tcp_abandon+0x15c>)
 800d6c6:	f240 223d 	movw	r2, #573	; 0x23d
 800d6ca:	4952      	ldr	r1, [pc, #328]	; (800d814 <tcp_abandon+0x160>)
 800d6cc:	4852      	ldr	r0, [pc, #328]	; (800d818 <tcp_abandon+0x164>)
 800d6ce:	f009 fad7 	bl	8016c80 <iprintf>
 800d6d2:	e099      	b.n	800d808 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	7d1b      	ldrb	r3, [r3, #20]
 800d6d8:	2b01      	cmp	r3, #1
 800d6da:	d106      	bne.n	800d6ea <tcp_abandon+0x36>
 800d6dc:	4b4c      	ldr	r3, [pc, #304]	; (800d810 <tcp_abandon+0x15c>)
 800d6de:	f44f 7210 	mov.w	r2, #576	; 0x240
 800d6e2:	494e      	ldr	r1, [pc, #312]	; (800d81c <tcp_abandon+0x168>)
 800d6e4:	484c      	ldr	r0, [pc, #304]	; (800d818 <tcp_abandon+0x164>)
 800d6e6:	f009 facb 	bl	8016c80 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	7d1b      	ldrb	r3, [r3, #20]
 800d6ee:	2b0a      	cmp	r3, #10
 800d6f0:	d107      	bne.n	800d702 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800d6f2:	6879      	ldr	r1, [r7, #4]
 800d6f4:	484a      	ldr	r0, [pc, #296]	; (800d820 <tcp_abandon+0x16c>)
 800d6f6:	f001 fa6d 	bl	800ebd4 <tcp_pcb_remove>
    tcp_free(pcb);
 800d6fa:	6878      	ldr	r0, [r7, #4]
 800d6fc:	f7ff fdb0 	bl	800d260 <tcp_free>
 800d700:	e082      	b.n	800d808 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800d702:	2300      	movs	r3, #0
 800d704:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800d706:	2300      	movs	r3, #0
 800d708:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d70e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d714:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d71c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	691b      	ldr	r3, [r3, #16]
 800d722:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	7d1b      	ldrb	r3, [r3, #20]
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d126      	bne.n	800d77a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	8adb      	ldrh	r3, [r3, #22]
 800d730:	2b00      	cmp	r3, #0
 800d732:	d02e      	beq.n	800d792 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800d734:	4b3b      	ldr	r3, [pc, #236]	; (800d824 <tcp_abandon+0x170>)
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	687a      	ldr	r2, [r7, #4]
 800d73a:	429a      	cmp	r2, r3
 800d73c:	d105      	bne.n	800d74a <tcp_abandon+0x96>
 800d73e:	4b39      	ldr	r3, [pc, #228]	; (800d824 <tcp_abandon+0x170>)
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	68db      	ldr	r3, [r3, #12]
 800d744:	4a37      	ldr	r2, [pc, #220]	; (800d824 <tcp_abandon+0x170>)
 800d746:	6013      	str	r3, [r2, #0]
 800d748:	e013      	b.n	800d772 <tcp_abandon+0xbe>
 800d74a:	4b36      	ldr	r3, [pc, #216]	; (800d824 <tcp_abandon+0x170>)
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	61fb      	str	r3, [r7, #28]
 800d750:	e00c      	b.n	800d76c <tcp_abandon+0xb8>
 800d752:	69fb      	ldr	r3, [r7, #28]
 800d754:	68db      	ldr	r3, [r3, #12]
 800d756:	687a      	ldr	r2, [r7, #4]
 800d758:	429a      	cmp	r2, r3
 800d75a:	d104      	bne.n	800d766 <tcp_abandon+0xb2>
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	68da      	ldr	r2, [r3, #12]
 800d760:	69fb      	ldr	r3, [r7, #28]
 800d762:	60da      	str	r2, [r3, #12]
 800d764:	e005      	b.n	800d772 <tcp_abandon+0xbe>
 800d766:	69fb      	ldr	r3, [r7, #28]
 800d768:	68db      	ldr	r3, [r3, #12]
 800d76a:	61fb      	str	r3, [r7, #28]
 800d76c:	69fb      	ldr	r3, [r7, #28]
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d1ef      	bne.n	800d752 <tcp_abandon+0x9e>
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	2200      	movs	r2, #0
 800d776:	60da      	str	r2, [r3, #12]
 800d778:	e00b      	b.n	800d792 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800d77a:	683b      	ldr	r3, [r7, #0]
 800d77c:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	8adb      	ldrh	r3, [r3, #22]
 800d782:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800d784:	6879      	ldr	r1, [r7, #4]
 800d786:	4828      	ldr	r0, [pc, #160]	; (800d828 <tcp_abandon+0x174>)
 800d788:	f001 fa24 	bl	800ebd4 <tcp_pcb_remove>
 800d78c:	4b27      	ldr	r3, [pc, #156]	; (800d82c <tcp_abandon+0x178>)
 800d78e:	2201      	movs	r2, #1
 800d790:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d796:	2b00      	cmp	r3, #0
 800d798:	d004      	beq.n	800d7a4 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d79e:	4618      	mov	r0, r3
 800d7a0:	f000 ff12 	bl	800e5c8 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d004      	beq.n	800d7b6 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d7b0:	4618      	mov	r0, r3
 800d7b2:	f000 ff09 	bl	800e5c8 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d004      	beq.n	800d7c8 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d7c2:	4618      	mov	r0, r3
 800d7c4:	f000 ff00 	bl	800e5c8 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800d7c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d00e      	beq.n	800d7ec <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800d7ce:	6879      	ldr	r1, [r7, #4]
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	3304      	adds	r3, #4
 800d7d4:	687a      	ldr	r2, [r7, #4]
 800d7d6:	8b12      	ldrh	r2, [r2, #24]
 800d7d8:	9202      	str	r2, [sp, #8]
 800d7da:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800d7dc:	9201      	str	r2, [sp, #4]
 800d7de:	9300      	str	r3, [sp, #0]
 800d7e0:	460b      	mov	r3, r1
 800d7e2:	697a      	ldr	r2, [r7, #20]
 800d7e4:	69b9      	ldr	r1, [r7, #24]
 800d7e6:	6878      	ldr	r0, [r7, #4]
 800d7e8:	f005 fbc4 	bl	8012f74 <tcp_rst>
    }
    last_state = pcb->state;
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	7d1b      	ldrb	r3, [r3, #20]
 800d7f0:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800d7f2:	6878      	ldr	r0, [r7, #4]
 800d7f4:	f7ff fd34 	bl	800d260 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800d7f8:	693b      	ldr	r3, [r7, #16]
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d004      	beq.n	800d808 <tcp_abandon+0x154>
 800d7fe:	693b      	ldr	r3, [r7, #16]
 800d800:	f06f 010c 	mvn.w	r1, #12
 800d804:	68f8      	ldr	r0, [r7, #12]
 800d806:	4798      	blx	r3
  }
}
 800d808:	3728      	adds	r7, #40	; 0x28
 800d80a:	46bd      	mov	sp, r7
 800d80c:	bd80      	pop	{r7, pc}
 800d80e:	bf00      	nop
 800d810:	08018c0c 	.word	0x08018c0c
 800d814:	08018d50 	.word	0x08018d50
 800d818:	08018c50 	.word	0x08018c50
 800d81c:	08018d6c 	.word	0x08018d6c
 800d820:	2000be20 	.word	0x2000be20
 800d824:	2000be14 	.word	0x2000be14
 800d828:	2000be1c 	.word	0x2000be1c
 800d82c:	2000be24 	.word	0x2000be24

0800d830 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800d830:	b580      	push	{r7, lr}
 800d832:	b082      	sub	sp, #8
 800d834:	af00      	add	r7, sp, #0
 800d836:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800d838:	2101      	movs	r1, #1
 800d83a:	6878      	ldr	r0, [r7, #4]
 800d83c:	f7ff ff3a 	bl	800d6b4 <tcp_abandon>
}
 800d840:	bf00      	nop
 800d842:	3708      	adds	r7, #8
 800d844:	46bd      	mov	sp, r7
 800d846:	bd80      	pop	{r7, pc}

0800d848 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800d848:	b580      	push	{r7, lr}
 800d84a:	b088      	sub	sp, #32
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	60f8      	str	r0, [r7, #12]
 800d850:	60b9      	str	r1, [r7, #8]
 800d852:	4613      	mov	r3, r2
 800d854:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800d856:	2304      	movs	r3, #4
 800d858:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800d85a:	68bb      	ldr	r3, [r7, #8]
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d101      	bne.n	800d864 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800d860:	4b3e      	ldr	r3, [pc, #248]	; (800d95c <tcp_bind+0x114>)
 800d862:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	2b00      	cmp	r3, #0
 800d868:	d109      	bne.n	800d87e <tcp_bind+0x36>
 800d86a:	4b3d      	ldr	r3, [pc, #244]	; (800d960 <tcp_bind+0x118>)
 800d86c:	f240 22a9 	movw	r2, #681	; 0x2a9
 800d870:	493c      	ldr	r1, [pc, #240]	; (800d964 <tcp_bind+0x11c>)
 800d872:	483d      	ldr	r0, [pc, #244]	; (800d968 <tcp_bind+0x120>)
 800d874:	f009 fa04 	bl	8016c80 <iprintf>
 800d878:	f06f 030f 	mvn.w	r3, #15
 800d87c:	e06a      	b.n	800d954 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	7d1b      	ldrb	r3, [r3, #20]
 800d882:	2b00      	cmp	r3, #0
 800d884:	d009      	beq.n	800d89a <tcp_bind+0x52>
 800d886:	4b36      	ldr	r3, [pc, #216]	; (800d960 <tcp_bind+0x118>)
 800d888:	f240 22ab 	movw	r2, #683	; 0x2ab
 800d88c:	4937      	ldr	r1, [pc, #220]	; (800d96c <tcp_bind+0x124>)
 800d88e:	4836      	ldr	r0, [pc, #216]	; (800d968 <tcp_bind+0x120>)
 800d890:	f009 f9f6 	bl	8016c80 <iprintf>
 800d894:	f06f 0305 	mvn.w	r3, #5
 800d898:	e05c      	b.n	800d954 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800d89a:	88fb      	ldrh	r3, [r7, #6]
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d109      	bne.n	800d8b4 <tcp_bind+0x6c>
    port = tcp_new_port();
 800d8a0:	f000 f914 	bl	800dacc <tcp_new_port>
 800d8a4:	4603      	mov	r3, r0
 800d8a6:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800d8a8:	88fb      	ldrh	r3, [r7, #6]
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d135      	bne.n	800d91a <tcp_bind+0xd2>
      return ERR_BUF;
 800d8ae:	f06f 0301 	mvn.w	r3, #1
 800d8b2:	e04f      	b.n	800d954 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800d8b4:	2300      	movs	r3, #0
 800d8b6:	61fb      	str	r3, [r7, #28]
 800d8b8:	e02b      	b.n	800d912 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800d8ba:	4a2d      	ldr	r2, [pc, #180]	; (800d970 <tcp_bind+0x128>)
 800d8bc:	69fb      	ldr	r3, [r7, #28]
 800d8be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	61bb      	str	r3, [r7, #24]
 800d8c6:	e01e      	b.n	800d906 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800d8c8:	69bb      	ldr	r3, [r7, #24]
 800d8ca:	8adb      	ldrh	r3, [r3, #22]
 800d8cc:	88fa      	ldrh	r2, [r7, #6]
 800d8ce:	429a      	cmp	r2, r3
 800d8d0:	d116      	bne.n	800d900 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800d8d2:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d010      	beq.n	800d8fa <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800d8d8:	69bb      	ldr	r3, [r7, #24]
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d00c      	beq.n	800d8fa <tcp_bind+0xb2>
 800d8e0:	68bb      	ldr	r3, [r7, #8]
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d009      	beq.n	800d8fa <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800d8e6:	68bb      	ldr	r3, [r7, #8]
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d005      	beq.n	800d8fa <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800d8ee:	69bb      	ldr	r3, [r7, #24]
 800d8f0:	681a      	ldr	r2, [r3, #0]
 800d8f2:	68bb      	ldr	r3, [r7, #8]
 800d8f4:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800d8f6:	429a      	cmp	r2, r3
 800d8f8:	d102      	bne.n	800d900 <tcp_bind+0xb8>
              return ERR_USE;
 800d8fa:	f06f 0307 	mvn.w	r3, #7
 800d8fe:	e029      	b.n	800d954 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800d900:	69bb      	ldr	r3, [r7, #24]
 800d902:	68db      	ldr	r3, [r3, #12]
 800d904:	61bb      	str	r3, [r7, #24]
 800d906:	69bb      	ldr	r3, [r7, #24]
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d1dd      	bne.n	800d8c8 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800d90c:	69fb      	ldr	r3, [r7, #28]
 800d90e:	3301      	adds	r3, #1
 800d910:	61fb      	str	r3, [r7, #28]
 800d912:	69fa      	ldr	r2, [r7, #28]
 800d914:	697b      	ldr	r3, [r7, #20]
 800d916:	429a      	cmp	r2, r3
 800d918:	dbcf      	blt.n	800d8ba <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800d91a:	68bb      	ldr	r3, [r7, #8]
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d00c      	beq.n	800d93a <tcp_bind+0xf2>
 800d920:	68bb      	ldr	r3, [r7, #8]
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	2b00      	cmp	r3, #0
 800d926:	d008      	beq.n	800d93a <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800d928:	68bb      	ldr	r3, [r7, #8]
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d002      	beq.n	800d934 <tcp_bind+0xec>
 800d92e:	68bb      	ldr	r3, [r7, #8]
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	e000      	b.n	800d936 <tcp_bind+0xee>
 800d934:	2300      	movs	r3, #0
 800d936:	68fa      	ldr	r2, [r7, #12]
 800d938:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	88fa      	ldrh	r2, [r7, #6]
 800d93e:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800d940:	4b0c      	ldr	r3, [pc, #48]	; (800d974 <tcp_bind+0x12c>)
 800d942:	681a      	ldr	r2, [r3, #0]
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	60da      	str	r2, [r3, #12]
 800d948:	4a0a      	ldr	r2, [pc, #40]	; (800d974 <tcp_bind+0x12c>)
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	6013      	str	r3, [r2, #0]
 800d94e:	f005 fcd3 	bl	80132f8 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800d952:	2300      	movs	r3, #0
}
 800d954:	4618      	mov	r0, r3
 800d956:	3720      	adds	r7, #32
 800d958:	46bd      	mov	sp, r7
 800d95a:	bd80      	pop	{r7, pc}
 800d95c:	0801ac60 	.word	0x0801ac60
 800d960:	08018c0c 	.word	0x08018c0c
 800d964:	08018da0 	.word	0x08018da0
 800d968:	08018c50 	.word	0x08018c50
 800d96c:	08018db8 	.word	0x08018db8
 800d970:	0801ac38 	.word	0x0801ac38
 800d974:	2000be14 	.word	0x2000be14

0800d978 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800d978:	b580      	push	{r7, lr}
 800d97a:	b084      	sub	sp, #16
 800d97c:	af00      	add	r7, sp, #0
 800d97e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	2b00      	cmp	r3, #0
 800d984:	d106      	bne.n	800d994 <tcp_update_rcv_ann_wnd+0x1c>
 800d986:	4b25      	ldr	r3, [pc, #148]	; (800da1c <tcp_update_rcv_ann_wnd+0xa4>)
 800d988:	f240 32a6 	movw	r2, #934	; 0x3a6
 800d98c:	4924      	ldr	r1, [pc, #144]	; (800da20 <tcp_update_rcv_ann_wnd+0xa8>)
 800d98e:	4825      	ldr	r0, [pc, #148]	; (800da24 <tcp_update_rcv_ann_wnd+0xac>)
 800d990:	f009 f976 	bl	8016c80 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d998:	687a      	ldr	r2, [r7, #4]
 800d99a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800d99c:	4413      	add	r3, r2
 800d99e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9a4:	687a      	ldr	r2, [r7, #4]
 800d9a6:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800d9a8:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800d9ac:	bf28      	it	cs
 800d9ae:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800d9b2:	b292      	uxth	r2, r2
 800d9b4:	4413      	add	r3, r2
 800d9b6:	68fa      	ldr	r2, [r7, #12]
 800d9b8:	1ad3      	subs	r3, r2, r3
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	db08      	blt.n	800d9d0 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9ca:	68fa      	ldr	r2, [r7, #12]
 800d9cc:	1ad3      	subs	r3, r2, r3
 800d9ce:	e020      	b.n	800da12 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9d8:	1ad3      	subs	r3, r2, r3
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	dd03      	ble.n	800d9e6 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	2200      	movs	r2, #0
 800d9e2:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d9e4:	e014      	b.n	800da10 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9ee:	1ad3      	subs	r3, r2, r3
 800d9f0:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800d9f2:	68bb      	ldr	r3, [r7, #8]
 800d9f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d9f8:	d306      	bcc.n	800da08 <tcp_update_rcv_ann_wnd+0x90>
 800d9fa:	4b08      	ldr	r3, [pc, #32]	; (800da1c <tcp_update_rcv_ann_wnd+0xa4>)
 800d9fc:	f240 32b6 	movw	r2, #950	; 0x3b6
 800da00:	4909      	ldr	r1, [pc, #36]	; (800da28 <tcp_update_rcv_ann_wnd+0xb0>)
 800da02:	4808      	ldr	r0, [pc, #32]	; (800da24 <tcp_update_rcv_ann_wnd+0xac>)
 800da04:	f009 f93c 	bl	8016c80 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800da08:	68bb      	ldr	r3, [r7, #8]
 800da0a:	b29a      	uxth	r2, r3
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800da10:	2300      	movs	r3, #0
  }
}
 800da12:	4618      	mov	r0, r3
 800da14:	3710      	adds	r7, #16
 800da16:	46bd      	mov	sp, r7
 800da18:	bd80      	pop	{r7, pc}
 800da1a:	bf00      	nop
 800da1c:	08018c0c 	.word	0x08018c0c
 800da20:	08018e68 	.word	0x08018e68
 800da24:	08018c50 	.word	0x08018c50
 800da28:	08018e8c 	.word	0x08018e8c

0800da2c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800da2c:	b580      	push	{r7, lr}
 800da2e:	b084      	sub	sp, #16
 800da30:	af00      	add	r7, sp, #0
 800da32:	6078      	str	r0, [r7, #4]
 800da34:	460b      	mov	r3, r1
 800da36:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d107      	bne.n	800da4e <tcp_recved+0x22>
 800da3e:	4b1f      	ldr	r3, [pc, #124]	; (800dabc <tcp_recved+0x90>)
 800da40:	f240 32cf 	movw	r2, #975	; 0x3cf
 800da44:	491e      	ldr	r1, [pc, #120]	; (800dac0 <tcp_recved+0x94>)
 800da46:	481f      	ldr	r0, [pc, #124]	; (800dac4 <tcp_recved+0x98>)
 800da48:	f009 f91a 	bl	8016c80 <iprintf>
 800da4c:	e032      	b.n	800dab4 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	7d1b      	ldrb	r3, [r3, #20]
 800da52:	2b01      	cmp	r3, #1
 800da54:	d106      	bne.n	800da64 <tcp_recved+0x38>
 800da56:	4b19      	ldr	r3, [pc, #100]	; (800dabc <tcp_recved+0x90>)
 800da58:	f240 32d2 	movw	r2, #978	; 0x3d2
 800da5c:	491a      	ldr	r1, [pc, #104]	; (800dac8 <tcp_recved+0x9c>)
 800da5e:	4819      	ldr	r0, [pc, #100]	; (800dac4 <tcp_recved+0x98>)
 800da60:	f009 f90e 	bl	8016c80 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800da68:	887b      	ldrh	r3, [r7, #2]
 800da6a:	4413      	add	r3, r2
 800da6c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800da6e:	89fb      	ldrh	r3, [r7, #14]
 800da70:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800da74:	d804      	bhi.n	800da80 <tcp_recved+0x54>
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800da7a:	89fa      	ldrh	r2, [r7, #14]
 800da7c:	429a      	cmp	r2, r3
 800da7e:	d204      	bcs.n	800da8a <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800da86:	851a      	strh	r2, [r3, #40]	; 0x28
 800da88:	e002      	b.n	800da90 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	89fa      	ldrh	r2, [r7, #14]
 800da8e:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800da90:	6878      	ldr	r0, [r7, #4]
 800da92:	f7ff ff71 	bl	800d978 <tcp_update_rcv_ann_wnd>
 800da96:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800da98:	68bb      	ldr	r3, [r7, #8]
 800da9a:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800da9e:	d309      	bcc.n	800dab4 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	8b5b      	ldrh	r3, [r3, #26]
 800daa4:	f043 0302 	orr.w	r3, r3, #2
 800daa8:	b29a      	uxth	r2, r3
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800daae:	6878      	ldr	r0, [r7, #4]
 800dab0:	f004 fcac 	bl	801240c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800dab4:	3710      	adds	r7, #16
 800dab6:	46bd      	mov	sp, r7
 800dab8:	bd80      	pop	{r7, pc}
 800daba:	bf00      	nop
 800dabc:	08018c0c 	.word	0x08018c0c
 800dac0:	08018ea8 	.word	0x08018ea8
 800dac4:	08018c50 	.word	0x08018c50
 800dac8:	08018ec0 	.word	0x08018ec0

0800dacc <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800dacc:	b480      	push	{r7}
 800dace:	b083      	sub	sp, #12
 800dad0:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800dad2:	2300      	movs	r3, #0
 800dad4:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800dad6:	4b1e      	ldr	r3, [pc, #120]	; (800db50 <tcp_new_port+0x84>)
 800dad8:	881b      	ldrh	r3, [r3, #0]
 800dada:	3301      	adds	r3, #1
 800dadc:	b29a      	uxth	r2, r3
 800dade:	4b1c      	ldr	r3, [pc, #112]	; (800db50 <tcp_new_port+0x84>)
 800dae0:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800dae2:	4b1b      	ldr	r3, [pc, #108]	; (800db50 <tcp_new_port+0x84>)
 800dae4:	881b      	ldrh	r3, [r3, #0]
 800dae6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800daea:	4293      	cmp	r3, r2
 800daec:	d103      	bne.n	800daf6 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800daee:	4b18      	ldr	r3, [pc, #96]	; (800db50 <tcp_new_port+0x84>)
 800daf0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800daf4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800daf6:	2300      	movs	r3, #0
 800daf8:	71fb      	strb	r3, [r7, #7]
 800dafa:	e01e      	b.n	800db3a <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800dafc:	79fb      	ldrb	r3, [r7, #7]
 800dafe:	4a15      	ldr	r2, [pc, #84]	; (800db54 <tcp_new_port+0x88>)
 800db00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	603b      	str	r3, [r7, #0]
 800db08:	e011      	b.n	800db2e <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800db0a:	683b      	ldr	r3, [r7, #0]
 800db0c:	8ada      	ldrh	r2, [r3, #22]
 800db0e:	4b10      	ldr	r3, [pc, #64]	; (800db50 <tcp_new_port+0x84>)
 800db10:	881b      	ldrh	r3, [r3, #0]
 800db12:	429a      	cmp	r2, r3
 800db14:	d108      	bne.n	800db28 <tcp_new_port+0x5c>
        n++;
 800db16:	88bb      	ldrh	r3, [r7, #4]
 800db18:	3301      	adds	r3, #1
 800db1a:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800db1c:	88bb      	ldrh	r3, [r7, #4]
 800db1e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800db22:	d3d8      	bcc.n	800dad6 <tcp_new_port+0xa>
          return 0;
 800db24:	2300      	movs	r3, #0
 800db26:	e00d      	b.n	800db44 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800db28:	683b      	ldr	r3, [r7, #0]
 800db2a:	68db      	ldr	r3, [r3, #12]
 800db2c:	603b      	str	r3, [r7, #0]
 800db2e:	683b      	ldr	r3, [r7, #0]
 800db30:	2b00      	cmp	r3, #0
 800db32:	d1ea      	bne.n	800db0a <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800db34:	79fb      	ldrb	r3, [r7, #7]
 800db36:	3301      	adds	r3, #1
 800db38:	71fb      	strb	r3, [r7, #7]
 800db3a:	79fb      	ldrb	r3, [r7, #7]
 800db3c:	2b03      	cmp	r3, #3
 800db3e:	d9dd      	bls.n	800dafc <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800db40:	4b03      	ldr	r3, [pc, #12]	; (800db50 <tcp_new_port+0x84>)
 800db42:	881b      	ldrh	r3, [r3, #0]
}
 800db44:	4618      	mov	r0, r3
 800db46:	370c      	adds	r7, #12
 800db48:	46bd      	mov	sp, r7
 800db4a:	bc80      	pop	{r7}
 800db4c:	4770      	bx	lr
 800db4e:	bf00      	nop
 800db50:	20000010 	.word	0x20000010
 800db54:	0801ac38 	.word	0x0801ac38

0800db58 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 800db58:	b580      	push	{r7, lr}
 800db5a:	b08a      	sub	sp, #40	; 0x28
 800db5c:	af00      	add	r7, sp, #0
 800db5e:	60f8      	str	r0, [r7, #12]
 800db60:	60b9      	str	r1, [r7, #8]
 800db62:	603b      	str	r3, [r7, #0]
 800db64:	4613      	mov	r3, r2
 800db66:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 800db68:	2300      	movs	r3, #0
 800db6a:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d109      	bne.n	800db86 <tcp_connect+0x2e>
 800db72:	4b7d      	ldr	r3, [pc, #500]	; (800dd68 <tcp_connect+0x210>)
 800db74:	f240 4235 	movw	r2, #1077	; 0x435
 800db78:	497c      	ldr	r1, [pc, #496]	; (800dd6c <tcp_connect+0x214>)
 800db7a:	487d      	ldr	r0, [pc, #500]	; (800dd70 <tcp_connect+0x218>)
 800db7c:	f009 f880 	bl	8016c80 <iprintf>
 800db80:	f06f 030f 	mvn.w	r3, #15
 800db84:	e0ec      	b.n	800dd60 <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800db86:	68bb      	ldr	r3, [r7, #8]
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d109      	bne.n	800dba0 <tcp_connect+0x48>
 800db8c:	4b76      	ldr	r3, [pc, #472]	; (800dd68 <tcp_connect+0x210>)
 800db8e:	f240 4236 	movw	r2, #1078	; 0x436
 800db92:	4978      	ldr	r1, [pc, #480]	; (800dd74 <tcp_connect+0x21c>)
 800db94:	4876      	ldr	r0, [pc, #472]	; (800dd70 <tcp_connect+0x218>)
 800db96:	f009 f873 	bl	8016c80 <iprintf>
 800db9a:	f06f 030f 	mvn.w	r3, #15
 800db9e:	e0df      	b.n	800dd60 <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	7d1b      	ldrb	r3, [r3, #20]
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d009      	beq.n	800dbbc <tcp_connect+0x64>
 800dba8:	4b6f      	ldr	r3, [pc, #444]	; (800dd68 <tcp_connect+0x210>)
 800dbaa:	f44f 6287 	mov.w	r2, #1080	; 0x438
 800dbae:	4972      	ldr	r1, [pc, #456]	; (800dd78 <tcp_connect+0x220>)
 800dbb0:	486f      	ldr	r0, [pc, #444]	; (800dd70 <tcp_connect+0x218>)
 800dbb2:	f009 f865 	bl	8016c80 <iprintf>
 800dbb6:	f06f 0309 	mvn.w	r3, #9
 800dbba:	e0d1      	b.n	800dd60 <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 800dbbc:	68bb      	ldr	r3, [r7, #8]
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d002      	beq.n	800dbc8 <tcp_connect+0x70>
 800dbc2:	68bb      	ldr	r3, [r7, #8]
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	e000      	b.n	800dbca <tcp_connect+0x72>
 800dbc8:	2300      	movs	r3, #0
 800dbca:	68fa      	ldr	r2, [r7, #12]
 800dbcc:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	88fa      	ldrh	r2, [r7, #6]
 800dbd2:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	7a1b      	ldrb	r3, [r3, #8]
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d006      	beq.n	800dbea <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	7a1b      	ldrb	r3, [r3, #8]
 800dbe0:	4618      	mov	r0, r3
 800dbe2:	f7fe fca5 	bl	800c530 <netif_get_by_index>
 800dbe6:	6278      	str	r0, [r7, #36]	; 0x24
 800dbe8:	e005      	b.n	800dbf6 <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	3304      	adds	r3, #4
 800dbee:	4618      	mov	r0, r3
 800dbf0:	f006 ffee 	bl	8014bd0 <ip4_route>
 800dbf4:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 800dbf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d102      	bne.n	800dc02 <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 800dbfc:	f06f 0303 	mvn.w	r3, #3
 800dc00:	e0ae      	b.n	800dd60 <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d003      	beq.n	800dc10 <tcp_connect+0xb8>
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d111      	bne.n	800dc34 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 800dc10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d002      	beq.n	800dc1c <tcp_connect+0xc4>
 800dc16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc18:	3304      	adds	r3, #4
 800dc1a:	e000      	b.n	800dc1e <tcp_connect+0xc6>
 800dc1c:	2300      	movs	r3, #0
 800dc1e:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 800dc20:	69fb      	ldr	r3, [r7, #28]
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d102      	bne.n	800dc2c <tcp_connect+0xd4>
      return ERR_RTE;
 800dc26:	f06f 0303 	mvn.w	r3, #3
 800dc2a:	e099      	b.n	800dd60 <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800dc2c:	69fb      	ldr	r3, [r7, #28]
 800dc2e:	681a      	ldr	r2, [r3, #0]
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	8adb      	ldrh	r3, [r3, #22]
 800dc38:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	8adb      	ldrh	r3, [r3, #22]
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d10c      	bne.n	800dc5c <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 800dc42:	f7ff ff43 	bl	800dacc <tcp_new_port>
 800dc46:	4603      	mov	r3, r0
 800dc48:	461a      	mov	r2, r3
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	8adb      	ldrh	r3, [r3, #22]
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d102      	bne.n	800dc5c <tcp_connect+0x104>
      return ERR_BUF;
 800dc56:	f06f 0301 	mvn.w	r3, #1
 800dc5a:	e081      	b.n	800dd60 <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 800dc5c:	68f8      	ldr	r0, [r7, #12]
 800dc5e:	f001 f84d 	bl	800ecfc <tcp_next_iss>
 800dc62:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	2200      	movs	r2, #0
 800dc68:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	697a      	ldr	r2, [r7, #20]
 800dc6e:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 800dc70:	697b      	ldr	r3, [r7, #20]
 800dc72:	1e5a      	subs	r2, r3, #1
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 800dc78:	697b      	ldr	r3, [r7, #20]
 800dc7a:	1e5a      	subs	r2, r3, #1
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 800dc80:	697b      	ldr	r3, [r7, #20]
 800dc82:	1e5a      	subs	r2, r3, #1
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800dc8e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800dca6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	f44f 7206 	mov.w	r2, #536	; 0x218
 800dcb0:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	3304      	adds	r3, #4
 800dcba:	461a      	mov	r2, r3
 800dcbc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dcbe:	f001 f843 	bl	800ed48 <tcp_eff_send_mss_netif>
 800dcc2:	4603      	mov	r3, r0
 800dcc4:	461a      	mov	r2, r3
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	2201      	movs	r2, #1
 800dcce:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	683a      	ldr	r2, [r7, #0]
 800dcd6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 800dcda:	2102      	movs	r1, #2
 800dcdc:	68f8      	ldr	r0, [r7, #12]
 800dcde:	f004 faa7 	bl	8012230 <tcp_enqueue_flags>
 800dce2:	4603      	mov	r3, r0
 800dce4:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 800dce6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d136      	bne.n	800dd5c <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	2202      	movs	r2, #2
 800dcf2:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 800dcf4:	8b7b      	ldrh	r3, [r7, #26]
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d021      	beq.n	800dd3e <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800dcfa:	4b20      	ldr	r3, [pc, #128]	; (800dd7c <tcp_connect+0x224>)
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	68fa      	ldr	r2, [r7, #12]
 800dd00:	429a      	cmp	r2, r3
 800dd02:	d105      	bne.n	800dd10 <tcp_connect+0x1b8>
 800dd04:	4b1d      	ldr	r3, [pc, #116]	; (800dd7c <tcp_connect+0x224>)
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	68db      	ldr	r3, [r3, #12]
 800dd0a:	4a1c      	ldr	r2, [pc, #112]	; (800dd7c <tcp_connect+0x224>)
 800dd0c:	6013      	str	r3, [r2, #0]
 800dd0e:	e013      	b.n	800dd38 <tcp_connect+0x1e0>
 800dd10:	4b1a      	ldr	r3, [pc, #104]	; (800dd7c <tcp_connect+0x224>)
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	623b      	str	r3, [r7, #32]
 800dd16:	e00c      	b.n	800dd32 <tcp_connect+0x1da>
 800dd18:	6a3b      	ldr	r3, [r7, #32]
 800dd1a:	68db      	ldr	r3, [r3, #12]
 800dd1c:	68fa      	ldr	r2, [r7, #12]
 800dd1e:	429a      	cmp	r2, r3
 800dd20:	d104      	bne.n	800dd2c <tcp_connect+0x1d4>
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	68da      	ldr	r2, [r3, #12]
 800dd26:	6a3b      	ldr	r3, [r7, #32]
 800dd28:	60da      	str	r2, [r3, #12]
 800dd2a:	e005      	b.n	800dd38 <tcp_connect+0x1e0>
 800dd2c:	6a3b      	ldr	r3, [r7, #32]
 800dd2e:	68db      	ldr	r3, [r3, #12]
 800dd30:	623b      	str	r3, [r7, #32]
 800dd32:	6a3b      	ldr	r3, [r7, #32]
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d1ef      	bne.n	800dd18 <tcp_connect+0x1c0>
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	2200      	movs	r2, #0
 800dd3c:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 800dd3e:	4b10      	ldr	r3, [pc, #64]	; (800dd80 <tcp_connect+0x228>)
 800dd40:	681a      	ldr	r2, [r3, #0]
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	60da      	str	r2, [r3, #12]
 800dd46:	4a0e      	ldr	r2, [pc, #56]	; (800dd80 <tcp_connect+0x228>)
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	6013      	str	r3, [r2, #0]
 800dd4c:	f005 fad4 	bl	80132f8 <tcp_timer_needed>
 800dd50:	4b0c      	ldr	r3, [pc, #48]	; (800dd84 <tcp_connect+0x22c>)
 800dd52:	2201      	movs	r2, #1
 800dd54:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 800dd56:	68f8      	ldr	r0, [r7, #12]
 800dd58:	f004 fb58 	bl	801240c <tcp_output>
  }
  return ret;
 800dd5c:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800dd60:	4618      	mov	r0, r3
 800dd62:	3728      	adds	r7, #40	; 0x28
 800dd64:	46bd      	mov	sp, r7
 800dd66:	bd80      	pop	{r7, pc}
 800dd68:	08018c0c 	.word	0x08018c0c
 800dd6c:	08018ee8 	.word	0x08018ee8
 800dd70:	08018c50 	.word	0x08018c50
 800dd74:	08018f04 	.word	0x08018f04
 800dd78:	08018f20 	.word	0x08018f20
 800dd7c:	2000be14 	.word	0x2000be14
 800dd80:	2000be1c 	.word	0x2000be1c
 800dd84:	2000be24 	.word	0x2000be24

0800dd88 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800dd88:	b5b0      	push	{r4, r5, r7, lr}
 800dd8a:	b090      	sub	sp, #64	; 0x40
 800dd8c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800dd8e:	2300      	movs	r3, #0
 800dd90:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800dd94:	4b94      	ldr	r3, [pc, #592]	; (800dfe8 <tcp_slowtmr+0x260>)
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	3301      	adds	r3, #1
 800dd9a:	4a93      	ldr	r2, [pc, #588]	; (800dfe8 <tcp_slowtmr+0x260>)
 800dd9c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800dd9e:	4b93      	ldr	r3, [pc, #588]	; (800dfec <tcp_slowtmr+0x264>)
 800dda0:	781b      	ldrb	r3, [r3, #0]
 800dda2:	3301      	adds	r3, #1
 800dda4:	b2da      	uxtb	r2, r3
 800dda6:	4b91      	ldr	r3, [pc, #580]	; (800dfec <tcp_slowtmr+0x264>)
 800dda8:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800ddaa:	2300      	movs	r3, #0
 800ddac:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800ddae:	4b90      	ldr	r3, [pc, #576]	; (800dff0 <tcp_slowtmr+0x268>)
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800ddb4:	e29f      	b.n	800e2f6 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800ddb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddb8:	7d1b      	ldrb	r3, [r3, #20]
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d106      	bne.n	800ddcc <tcp_slowtmr+0x44>
 800ddbe:	4b8d      	ldr	r3, [pc, #564]	; (800dff4 <tcp_slowtmr+0x26c>)
 800ddc0:	f240 42be 	movw	r2, #1214	; 0x4be
 800ddc4:	498c      	ldr	r1, [pc, #560]	; (800dff8 <tcp_slowtmr+0x270>)
 800ddc6:	488d      	ldr	r0, [pc, #564]	; (800dffc <tcp_slowtmr+0x274>)
 800ddc8:	f008 ff5a 	bl	8016c80 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800ddcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddce:	7d1b      	ldrb	r3, [r3, #20]
 800ddd0:	2b01      	cmp	r3, #1
 800ddd2:	d106      	bne.n	800dde2 <tcp_slowtmr+0x5a>
 800ddd4:	4b87      	ldr	r3, [pc, #540]	; (800dff4 <tcp_slowtmr+0x26c>)
 800ddd6:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800ddda:	4989      	ldr	r1, [pc, #548]	; (800e000 <tcp_slowtmr+0x278>)
 800dddc:	4887      	ldr	r0, [pc, #540]	; (800dffc <tcp_slowtmr+0x274>)
 800ddde:	f008 ff4f 	bl	8016c80 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800dde2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dde4:	7d1b      	ldrb	r3, [r3, #20]
 800dde6:	2b0a      	cmp	r3, #10
 800dde8:	d106      	bne.n	800ddf8 <tcp_slowtmr+0x70>
 800ddea:	4b82      	ldr	r3, [pc, #520]	; (800dff4 <tcp_slowtmr+0x26c>)
 800ddec:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800ddf0:	4984      	ldr	r1, [pc, #528]	; (800e004 <tcp_slowtmr+0x27c>)
 800ddf2:	4882      	ldr	r0, [pc, #520]	; (800dffc <tcp_slowtmr+0x274>)
 800ddf4:	f008 ff44 	bl	8016c80 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800ddf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddfa:	7f9a      	ldrb	r2, [r3, #30]
 800ddfc:	4b7b      	ldr	r3, [pc, #492]	; (800dfec <tcp_slowtmr+0x264>)
 800ddfe:	781b      	ldrb	r3, [r3, #0]
 800de00:	429a      	cmp	r2, r3
 800de02:	d105      	bne.n	800de10 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800de04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de06:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800de08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de0a:	68db      	ldr	r3, [r3, #12]
 800de0c:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800de0e:	e272      	b.n	800e2f6 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800de10:	4b76      	ldr	r3, [pc, #472]	; (800dfec <tcp_slowtmr+0x264>)
 800de12:	781a      	ldrb	r2, [r3, #0]
 800de14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de16:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800de18:	2300      	movs	r3, #0
 800de1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800de1e:	2300      	movs	r3, #0
 800de20:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800de24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de26:	7d1b      	ldrb	r3, [r3, #20]
 800de28:	2b02      	cmp	r3, #2
 800de2a:	d10a      	bne.n	800de42 <tcp_slowtmr+0xba>
 800de2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de2e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800de32:	2b05      	cmp	r3, #5
 800de34:	d905      	bls.n	800de42 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800de36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800de3a:	3301      	adds	r3, #1
 800de3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800de40:	e11e      	b.n	800e080 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800de42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de44:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800de48:	2b0b      	cmp	r3, #11
 800de4a:	d905      	bls.n	800de58 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800de4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800de50:	3301      	adds	r3, #1
 800de52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800de56:	e113      	b.n	800e080 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800de58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de5a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d075      	beq.n	800df4e <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800de62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de66:	2b00      	cmp	r3, #0
 800de68:	d006      	beq.n	800de78 <tcp_slowtmr+0xf0>
 800de6a:	4b62      	ldr	r3, [pc, #392]	; (800dff4 <tcp_slowtmr+0x26c>)
 800de6c:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800de70:	4965      	ldr	r1, [pc, #404]	; (800e008 <tcp_slowtmr+0x280>)
 800de72:	4862      	ldr	r0, [pc, #392]	; (800dffc <tcp_slowtmr+0x274>)
 800de74:	f008 ff04 	bl	8016c80 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800de78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d106      	bne.n	800de8e <tcp_slowtmr+0x106>
 800de80:	4b5c      	ldr	r3, [pc, #368]	; (800dff4 <tcp_slowtmr+0x26c>)
 800de82:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800de86:	4961      	ldr	r1, [pc, #388]	; (800e00c <tcp_slowtmr+0x284>)
 800de88:	485c      	ldr	r0, [pc, #368]	; (800dffc <tcp_slowtmr+0x274>)
 800de8a:	f008 fef9 	bl	8016c80 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800de8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de90:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800de94:	2b0b      	cmp	r3, #11
 800de96:	d905      	bls.n	800dea4 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800de98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800de9c:	3301      	adds	r3, #1
 800de9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dea2:	e0ed      	b.n	800e080 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800dea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dea6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800deaa:	3b01      	subs	r3, #1
 800deac:	4a58      	ldr	r2, [pc, #352]	; (800e010 <tcp_slowtmr+0x288>)
 800deae:	5cd3      	ldrb	r3, [r2, r3]
 800deb0:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800deb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800deb4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800deb8:	7c7a      	ldrb	r2, [r7, #17]
 800deba:	429a      	cmp	r2, r3
 800debc:	d907      	bls.n	800dece <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800debe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dec0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800dec4:	3301      	adds	r3, #1
 800dec6:	b2da      	uxtb	r2, r3
 800dec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800deca:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800dece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ded0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800ded4:	7c7a      	ldrb	r2, [r7, #17]
 800ded6:	429a      	cmp	r2, r3
 800ded8:	f200 80d2 	bhi.w	800e080 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800dedc:	2301      	movs	r3, #1
 800dede:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800dee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dee2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d108      	bne.n	800defc <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800deea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800deec:	f005 f936 	bl	801315c <tcp_zero_window_probe>
 800def0:	4603      	mov	r3, r0
 800def2:	2b00      	cmp	r3, #0
 800def4:	d014      	beq.n	800df20 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800def6:	2300      	movs	r3, #0
 800def8:	623b      	str	r3, [r7, #32]
 800defa:	e011      	b.n	800df20 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800defc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800defe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800df02:	4619      	mov	r1, r3
 800df04:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800df06:	f003 fffb 	bl	8011f00 <tcp_split_unsent_seg>
 800df0a:	4603      	mov	r3, r0
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d107      	bne.n	800df20 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800df10:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800df12:	f004 fa7b 	bl	801240c <tcp_output>
 800df16:	4603      	mov	r3, r0
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d101      	bne.n	800df20 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800df1c:	2300      	movs	r3, #0
 800df1e:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800df20:	6a3b      	ldr	r3, [r7, #32]
 800df22:	2b00      	cmp	r3, #0
 800df24:	f000 80ac 	beq.w	800e080 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800df28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df2a:	2200      	movs	r2, #0
 800df2c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800df30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df32:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800df36:	2b06      	cmp	r3, #6
 800df38:	f200 80a2 	bhi.w	800e080 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800df3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df3e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800df42:	3301      	adds	r3, #1
 800df44:	b2da      	uxtb	r2, r3
 800df46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df48:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800df4c:	e098      	b.n	800e080 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800df4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df50:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800df54:	2b00      	cmp	r3, #0
 800df56:	db0f      	blt.n	800df78 <tcp_slowtmr+0x1f0>
 800df58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df5a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800df5e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800df62:	4293      	cmp	r3, r2
 800df64:	d008      	beq.n	800df78 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800df66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df68:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800df6c:	b29b      	uxth	r3, r3
 800df6e:	3301      	adds	r3, #1
 800df70:	b29b      	uxth	r3, r3
 800df72:	b21a      	sxth	r2, r3
 800df74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df76:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800df78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df7a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800df7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df80:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800df84:	429a      	cmp	r2, r3
 800df86:	db7b      	blt.n	800e080 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800df88:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800df8a:	f004 fd31 	bl	80129f0 <tcp_rexmit_rto_prepare>
 800df8e:	4603      	mov	r3, r0
 800df90:	2b00      	cmp	r3, #0
 800df92:	d007      	beq.n	800dfa4 <tcp_slowtmr+0x21c>
 800df94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d171      	bne.n	800e080 <tcp_slowtmr+0x2f8>
 800df9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d06d      	beq.n	800e080 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800dfa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfa6:	7d1b      	ldrb	r3, [r3, #20]
 800dfa8:	2b02      	cmp	r3, #2
 800dfaa:	d03a      	beq.n	800e022 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800dfac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800dfb2:	2b0c      	cmp	r3, #12
 800dfb4:	bf28      	it	cs
 800dfb6:	230c      	movcs	r3, #12
 800dfb8:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800dfba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfbc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800dfc0:	10db      	asrs	r3, r3, #3
 800dfc2:	b21b      	sxth	r3, r3
 800dfc4:	461a      	mov	r2, r3
 800dfc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfc8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800dfcc:	4413      	add	r3, r2
 800dfce:	7efa      	ldrb	r2, [r7, #27]
 800dfd0:	4910      	ldr	r1, [pc, #64]	; (800e014 <tcp_slowtmr+0x28c>)
 800dfd2:	5c8a      	ldrb	r2, [r1, r2]
 800dfd4:	4093      	lsls	r3, r2
 800dfd6:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800dfd8:	697b      	ldr	r3, [r7, #20]
 800dfda:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800dfde:	4293      	cmp	r3, r2
 800dfe0:	dc1a      	bgt.n	800e018 <tcp_slowtmr+0x290>
 800dfe2:	697b      	ldr	r3, [r7, #20]
 800dfe4:	b21a      	sxth	r2, r3
 800dfe6:	e019      	b.n	800e01c <tcp_slowtmr+0x294>
 800dfe8:	2000be10 	.word	0x2000be10
 800dfec:	2000be26 	.word	0x2000be26
 800dff0:	2000be1c 	.word	0x2000be1c
 800dff4:	08018c0c 	.word	0x08018c0c
 800dff8:	08018f50 	.word	0x08018f50
 800dffc:	08018c50 	.word	0x08018c50
 800e000:	08018f7c 	.word	0x08018f7c
 800e004:	08018fa8 	.word	0x08018fa8
 800e008:	08018fd8 	.word	0x08018fd8
 800e00c:	0801900c 	.word	0x0801900c
 800e010:	0801ac30 	.word	0x0801ac30
 800e014:	0801ac20 	.word	0x0801ac20
 800e018:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800e01c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e01e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800e022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e024:	2200      	movs	r2, #0
 800e026:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800e028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e02a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e02e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e030:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e034:	4293      	cmp	r3, r2
 800e036:	bf28      	it	cs
 800e038:	4613      	movcs	r3, r2
 800e03a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800e03c:	8a7b      	ldrh	r3, [r7, #18]
 800e03e:	085b      	lsrs	r3, r3, #1
 800e040:	b29a      	uxth	r2, r3
 800e042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e044:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800e048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e04a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800e04e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e050:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e052:	005b      	lsls	r3, r3, #1
 800e054:	b29b      	uxth	r3, r3
 800e056:	429a      	cmp	r2, r3
 800e058:	d206      	bcs.n	800e068 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800e05a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e05c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e05e:	005b      	lsls	r3, r3, #1
 800e060:	b29a      	uxth	r2, r3
 800e062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e064:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800e068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e06a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800e06c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e06e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800e072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e074:	2200      	movs	r2, #0
 800e076:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800e07a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e07c:	f004 fd28 	bl	8012ad0 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800e080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e082:	7d1b      	ldrb	r3, [r3, #20]
 800e084:	2b06      	cmp	r3, #6
 800e086:	d111      	bne.n	800e0ac <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800e088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e08a:	8b5b      	ldrh	r3, [r3, #26]
 800e08c:	f003 0310 	and.w	r3, r3, #16
 800e090:	2b00      	cmp	r3, #0
 800e092:	d00b      	beq.n	800e0ac <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e094:	4b9d      	ldr	r3, [pc, #628]	; (800e30c <tcp_slowtmr+0x584>)
 800e096:	681a      	ldr	r2, [r3, #0]
 800e098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e09a:	6a1b      	ldr	r3, [r3, #32]
 800e09c:	1ad3      	subs	r3, r2, r3
 800e09e:	2b28      	cmp	r3, #40	; 0x28
 800e0a0:	d904      	bls.n	800e0ac <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800e0a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e0a6:	3301      	adds	r3, #1
 800e0a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e0ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0ae:	7a5b      	ldrb	r3, [r3, #9]
 800e0b0:	f003 0308 	and.w	r3, r3, #8
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d04c      	beq.n	800e152 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800e0b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0ba:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e0bc:	2b04      	cmp	r3, #4
 800e0be:	d003      	beq.n	800e0c8 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800e0c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0c2:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800e0c4:	2b07      	cmp	r3, #7
 800e0c6:	d144      	bne.n	800e152 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e0c8:	4b90      	ldr	r3, [pc, #576]	; (800e30c <tcp_slowtmr+0x584>)
 800e0ca:	681a      	ldr	r2, [r3, #0]
 800e0cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0ce:	6a1b      	ldr	r3, [r3, #32]
 800e0d0:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800e0d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e0d8:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800e0dc:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800e0e0:	498b      	ldr	r1, [pc, #556]	; (800e310 <tcp_slowtmr+0x588>)
 800e0e2:	fba1 1303 	umull	r1, r3, r1, r3
 800e0e6:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e0e8:	429a      	cmp	r2, r3
 800e0ea:	d90a      	bls.n	800e102 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800e0ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e0f0:	3301      	adds	r3, #1
 800e0f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800e0f6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e0fa:	3301      	adds	r3, #1
 800e0fc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e100:	e027      	b.n	800e152 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e102:	4b82      	ldr	r3, [pc, #520]	; (800e30c <tcp_slowtmr+0x584>)
 800e104:	681a      	ldr	r2, [r3, #0]
 800e106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e108:	6a1b      	ldr	r3, [r3, #32]
 800e10a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800e10c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e10e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800e112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e114:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800e118:	4618      	mov	r0, r3
 800e11a:	4b7e      	ldr	r3, [pc, #504]	; (800e314 <tcp_slowtmr+0x58c>)
 800e11c:	fb00 f303 	mul.w	r3, r0, r3
 800e120:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800e122:	497b      	ldr	r1, [pc, #492]	; (800e310 <tcp_slowtmr+0x588>)
 800e124:	fba1 1303 	umull	r1, r3, r1, r3
 800e128:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e12a:	429a      	cmp	r2, r3
 800e12c:	d911      	bls.n	800e152 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800e12e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e130:	f004 ffd4 	bl	80130dc <tcp_keepalive>
 800e134:	4603      	mov	r3, r0
 800e136:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800e13a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d107      	bne.n	800e152 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800e142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e144:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800e148:	3301      	adds	r3, #1
 800e14a:	b2da      	uxtb	r2, r3
 800e14c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e14e:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800e152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e154:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e156:	2b00      	cmp	r3, #0
 800e158:	d011      	beq.n	800e17e <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800e15a:	4b6c      	ldr	r3, [pc, #432]	; (800e30c <tcp_slowtmr+0x584>)
 800e15c:	681a      	ldr	r2, [r3, #0]
 800e15e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e160:	6a1b      	ldr	r3, [r3, #32]
 800e162:	1ad2      	subs	r2, r2, r3
 800e164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e166:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800e16a:	4619      	mov	r1, r3
 800e16c:	460b      	mov	r3, r1
 800e16e:	005b      	lsls	r3, r3, #1
 800e170:	440b      	add	r3, r1
 800e172:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800e174:	429a      	cmp	r2, r3
 800e176:	d302      	bcc.n	800e17e <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800e178:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e17a:	f000 fe8f 	bl	800ee9c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800e17e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e180:	7d1b      	ldrb	r3, [r3, #20]
 800e182:	2b03      	cmp	r3, #3
 800e184:	d10b      	bne.n	800e19e <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e186:	4b61      	ldr	r3, [pc, #388]	; (800e30c <tcp_slowtmr+0x584>)
 800e188:	681a      	ldr	r2, [r3, #0]
 800e18a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e18c:	6a1b      	ldr	r3, [r3, #32]
 800e18e:	1ad3      	subs	r3, r2, r3
 800e190:	2b28      	cmp	r3, #40	; 0x28
 800e192:	d904      	bls.n	800e19e <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800e194:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e198:	3301      	adds	r3, #1
 800e19a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800e19e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1a0:	7d1b      	ldrb	r3, [r3, #20]
 800e1a2:	2b09      	cmp	r3, #9
 800e1a4:	d10b      	bne.n	800e1be <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e1a6:	4b59      	ldr	r3, [pc, #356]	; (800e30c <tcp_slowtmr+0x584>)
 800e1a8:	681a      	ldr	r2, [r3, #0]
 800e1aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1ac:	6a1b      	ldr	r3, [r3, #32]
 800e1ae:	1ad3      	subs	r3, r2, r3
 800e1b0:	2bf0      	cmp	r3, #240	; 0xf0
 800e1b2:	d904      	bls.n	800e1be <tcp_slowtmr+0x436>
        ++pcb_remove;
 800e1b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e1b8:	3301      	adds	r3, #1
 800e1ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800e1be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d060      	beq.n	800e288 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800e1c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e1cc:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800e1ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e1d0:	f000 fcb0 	bl	800eb34 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800e1d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d010      	beq.n	800e1fc <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800e1da:	4b4f      	ldr	r3, [pc, #316]	; (800e318 <tcp_slowtmr+0x590>)
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e1e0:	429a      	cmp	r2, r3
 800e1e2:	d106      	bne.n	800e1f2 <tcp_slowtmr+0x46a>
 800e1e4:	4b4d      	ldr	r3, [pc, #308]	; (800e31c <tcp_slowtmr+0x594>)
 800e1e6:	f240 526d 	movw	r2, #1389	; 0x56d
 800e1ea:	494d      	ldr	r1, [pc, #308]	; (800e320 <tcp_slowtmr+0x598>)
 800e1ec:	484d      	ldr	r0, [pc, #308]	; (800e324 <tcp_slowtmr+0x59c>)
 800e1ee:	f008 fd47 	bl	8016c80 <iprintf>
        prev->next = pcb->next;
 800e1f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1f4:	68da      	ldr	r2, [r3, #12]
 800e1f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1f8:	60da      	str	r2, [r3, #12]
 800e1fa:	e00f      	b.n	800e21c <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800e1fc:	4b46      	ldr	r3, [pc, #280]	; (800e318 <tcp_slowtmr+0x590>)
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e202:	429a      	cmp	r2, r3
 800e204:	d006      	beq.n	800e214 <tcp_slowtmr+0x48c>
 800e206:	4b45      	ldr	r3, [pc, #276]	; (800e31c <tcp_slowtmr+0x594>)
 800e208:	f240 5271 	movw	r2, #1393	; 0x571
 800e20c:	4946      	ldr	r1, [pc, #280]	; (800e328 <tcp_slowtmr+0x5a0>)
 800e20e:	4845      	ldr	r0, [pc, #276]	; (800e324 <tcp_slowtmr+0x59c>)
 800e210:	f008 fd36 	bl	8016c80 <iprintf>
        tcp_active_pcbs = pcb->next;
 800e214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e216:	68db      	ldr	r3, [r3, #12]
 800e218:	4a3f      	ldr	r2, [pc, #252]	; (800e318 <tcp_slowtmr+0x590>)
 800e21a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800e21c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e220:	2b00      	cmp	r3, #0
 800e222:	d013      	beq.n	800e24c <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e226:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800e228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e22a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800e22c:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800e22e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e230:	3304      	adds	r3, #4
 800e232:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e234:	8ad2      	ldrh	r2, [r2, #22]
 800e236:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e238:	8b09      	ldrh	r1, [r1, #24]
 800e23a:	9102      	str	r1, [sp, #8]
 800e23c:	9201      	str	r2, [sp, #4]
 800e23e:	9300      	str	r3, [sp, #0]
 800e240:	462b      	mov	r3, r5
 800e242:	4622      	mov	r2, r4
 800e244:	4601      	mov	r1, r0
 800e246:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e248:	f004 fe94 	bl	8012f74 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800e24c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e24e:	691b      	ldr	r3, [r3, #16]
 800e250:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800e252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e254:	7d1b      	ldrb	r3, [r3, #20]
 800e256:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800e258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e25a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800e25c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e25e:	68db      	ldr	r3, [r3, #12]
 800e260:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800e262:	6838      	ldr	r0, [r7, #0]
 800e264:	f7fe fffc 	bl	800d260 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800e268:	4b30      	ldr	r3, [pc, #192]	; (800e32c <tcp_slowtmr+0x5a4>)
 800e26a:	2200      	movs	r2, #0
 800e26c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	2b00      	cmp	r3, #0
 800e272:	d004      	beq.n	800e27e <tcp_slowtmr+0x4f6>
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	f06f 010c 	mvn.w	r1, #12
 800e27a:	68b8      	ldr	r0, [r7, #8]
 800e27c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800e27e:	4b2b      	ldr	r3, [pc, #172]	; (800e32c <tcp_slowtmr+0x5a4>)
 800e280:	781b      	ldrb	r3, [r3, #0]
 800e282:	2b00      	cmp	r3, #0
 800e284:	d037      	beq.n	800e2f6 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800e286:	e590      	b.n	800ddaa <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800e288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e28a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e28c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e28e:	68db      	ldr	r3, [r3, #12]
 800e290:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800e292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e294:	7f1b      	ldrb	r3, [r3, #28]
 800e296:	3301      	adds	r3, #1
 800e298:	b2da      	uxtb	r2, r3
 800e29a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e29c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800e29e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2a0:	7f1a      	ldrb	r2, [r3, #28]
 800e2a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2a4:	7f5b      	ldrb	r3, [r3, #29]
 800e2a6:	429a      	cmp	r2, r3
 800e2a8:	d325      	bcc.n	800e2f6 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800e2aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2ac:	2200      	movs	r2, #0
 800e2ae:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800e2b0:	4b1e      	ldr	r3, [pc, #120]	; (800e32c <tcp_slowtmr+0x5a4>)
 800e2b2:	2200      	movs	r2, #0
 800e2b4:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800e2b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d00b      	beq.n	800e2d8 <tcp_slowtmr+0x550>
 800e2c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e2c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e2c8:	6912      	ldr	r2, [r2, #16]
 800e2ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e2cc:	4610      	mov	r0, r2
 800e2ce:	4798      	blx	r3
 800e2d0:	4603      	mov	r3, r0
 800e2d2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800e2d6:	e002      	b.n	800e2de <tcp_slowtmr+0x556>
 800e2d8:	2300      	movs	r3, #0
 800e2da:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800e2de:	4b13      	ldr	r3, [pc, #76]	; (800e32c <tcp_slowtmr+0x5a4>)
 800e2e0:	781b      	ldrb	r3, [r3, #0]
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d000      	beq.n	800e2e8 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800e2e6:	e560      	b.n	800ddaa <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800e2e8:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d102      	bne.n	800e2f6 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800e2f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e2f2:	f004 f88b 	bl	801240c <tcp_output>
  while (pcb != NULL) {
 800e2f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	f47f ad5c 	bne.w	800ddb6 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800e2fe:	2300      	movs	r3, #0
 800e300:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800e302:	4b0b      	ldr	r3, [pc, #44]	; (800e330 <tcp_slowtmr+0x5a8>)
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800e308:	e067      	b.n	800e3da <tcp_slowtmr+0x652>
 800e30a:	bf00      	nop
 800e30c:	2000be10 	.word	0x2000be10
 800e310:	10624dd3 	.word	0x10624dd3
 800e314:	000124f8 	.word	0x000124f8
 800e318:	2000be1c 	.word	0x2000be1c
 800e31c:	08018c0c 	.word	0x08018c0c
 800e320:	08019044 	.word	0x08019044
 800e324:	08018c50 	.word	0x08018c50
 800e328:	08019070 	.word	0x08019070
 800e32c:	2000be24 	.word	0x2000be24
 800e330:	2000be20 	.word	0x2000be20
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e336:	7d1b      	ldrb	r3, [r3, #20]
 800e338:	2b0a      	cmp	r3, #10
 800e33a:	d006      	beq.n	800e34a <tcp_slowtmr+0x5c2>
 800e33c:	4b2b      	ldr	r3, [pc, #172]	; (800e3ec <tcp_slowtmr+0x664>)
 800e33e:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800e342:	492b      	ldr	r1, [pc, #172]	; (800e3f0 <tcp_slowtmr+0x668>)
 800e344:	482b      	ldr	r0, [pc, #172]	; (800e3f4 <tcp_slowtmr+0x66c>)
 800e346:	f008 fc9b 	bl	8016c80 <iprintf>
    pcb_remove = 0;
 800e34a:	2300      	movs	r3, #0
 800e34c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e350:	4b29      	ldr	r3, [pc, #164]	; (800e3f8 <tcp_slowtmr+0x670>)
 800e352:	681a      	ldr	r2, [r3, #0]
 800e354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e356:	6a1b      	ldr	r3, [r3, #32]
 800e358:	1ad3      	subs	r3, r2, r3
 800e35a:	2bf0      	cmp	r3, #240	; 0xf0
 800e35c:	d904      	bls.n	800e368 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800e35e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e362:	3301      	adds	r3, #1
 800e364:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800e368:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d02f      	beq.n	800e3d0 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800e370:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e372:	f000 fbdf 	bl	800eb34 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800e376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d010      	beq.n	800e39e <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800e37c:	4b1f      	ldr	r3, [pc, #124]	; (800e3fc <tcp_slowtmr+0x674>)
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e382:	429a      	cmp	r2, r3
 800e384:	d106      	bne.n	800e394 <tcp_slowtmr+0x60c>
 800e386:	4b19      	ldr	r3, [pc, #100]	; (800e3ec <tcp_slowtmr+0x664>)
 800e388:	f240 52af 	movw	r2, #1455	; 0x5af
 800e38c:	491c      	ldr	r1, [pc, #112]	; (800e400 <tcp_slowtmr+0x678>)
 800e38e:	4819      	ldr	r0, [pc, #100]	; (800e3f4 <tcp_slowtmr+0x66c>)
 800e390:	f008 fc76 	bl	8016c80 <iprintf>
        prev->next = pcb->next;
 800e394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e396:	68da      	ldr	r2, [r3, #12]
 800e398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e39a:	60da      	str	r2, [r3, #12]
 800e39c:	e00f      	b.n	800e3be <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800e39e:	4b17      	ldr	r3, [pc, #92]	; (800e3fc <tcp_slowtmr+0x674>)
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e3a4:	429a      	cmp	r2, r3
 800e3a6:	d006      	beq.n	800e3b6 <tcp_slowtmr+0x62e>
 800e3a8:	4b10      	ldr	r3, [pc, #64]	; (800e3ec <tcp_slowtmr+0x664>)
 800e3aa:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800e3ae:	4915      	ldr	r1, [pc, #84]	; (800e404 <tcp_slowtmr+0x67c>)
 800e3b0:	4810      	ldr	r0, [pc, #64]	; (800e3f4 <tcp_slowtmr+0x66c>)
 800e3b2:	f008 fc65 	bl	8016c80 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800e3b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3b8:	68db      	ldr	r3, [r3, #12]
 800e3ba:	4a10      	ldr	r2, [pc, #64]	; (800e3fc <tcp_slowtmr+0x674>)
 800e3bc:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800e3be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3c0:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800e3c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3c4:	68db      	ldr	r3, [r3, #12]
 800e3c6:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800e3c8:	69f8      	ldr	r0, [r7, #28]
 800e3ca:	f7fe ff49 	bl	800d260 <tcp_free>
 800e3ce:	e004      	b.n	800e3da <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800e3d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3d2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e3d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3d6:	68db      	ldr	r3, [r3, #12]
 800e3d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800e3da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d1a9      	bne.n	800e334 <tcp_slowtmr+0x5ac>
    }
  }
}
 800e3e0:	bf00      	nop
 800e3e2:	bf00      	nop
 800e3e4:	3730      	adds	r7, #48	; 0x30
 800e3e6:	46bd      	mov	sp, r7
 800e3e8:	bdb0      	pop	{r4, r5, r7, pc}
 800e3ea:	bf00      	nop
 800e3ec:	08018c0c 	.word	0x08018c0c
 800e3f0:	0801909c 	.word	0x0801909c
 800e3f4:	08018c50 	.word	0x08018c50
 800e3f8:	2000be10 	.word	0x2000be10
 800e3fc:	2000be20 	.word	0x2000be20
 800e400:	080190cc 	.word	0x080190cc
 800e404:	080190f4 	.word	0x080190f4

0800e408 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800e408:	b580      	push	{r7, lr}
 800e40a:	b082      	sub	sp, #8
 800e40c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800e40e:	4b2d      	ldr	r3, [pc, #180]	; (800e4c4 <tcp_fasttmr+0xbc>)
 800e410:	781b      	ldrb	r3, [r3, #0]
 800e412:	3301      	adds	r3, #1
 800e414:	b2da      	uxtb	r2, r3
 800e416:	4b2b      	ldr	r3, [pc, #172]	; (800e4c4 <tcp_fasttmr+0xbc>)
 800e418:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800e41a:	4b2b      	ldr	r3, [pc, #172]	; (800e4c8 <tcp_fasttmr+0xc0>)
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800e420:	e048      	b.n	800e4b4 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	7f9a      	ldrb	r2, [r3, #30]
 800e426:	4b27      	ldr	r3, [pc, #156]	; (800e4c4 <tcp_fasttmr+0xbc>)
 800e428:	781b      	ldrb	r3, [r3, #0]
 800e42a:	429a      	cmp	r2, r3
 800e42c:	d03f      	beq.n	800e4ae <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800e42e:	4b25      	ldr	r3, [pc, #148]	; (800e4c4 <tcp_fasttmr+0xbc>)
 800e430:	781a      	ldrb	r2, [r3, #0]
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	8b5b      	ldrh	r3, [r3, #26]
 800e43a:	f003 0301 	and.w	r3, r3, #1
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d010      	beq.n	800e464 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	8b5b      	ldrh	r3, [r3, #26]
 800e446:	f043 0302 	orr.w	r3, r3, #2
 800e44a:	b29a      	uxth	r2, r3
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800e450:	6878      	ldr	r0, [r7, #4]
 800e452:	f003 ffdb 	bl	801240c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	8b5b      	ldrh	r3, [r3, #26]
 800e45a:	f023 0303 	bic.w	r3, r3, #3
 800e45e:	b29a      	uxth	r2, r3
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	8b5b      	ldrh	r3, [r3, #26]
 800e468:	f003 0308 	and.w	r3, r3, #8
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d009      	beq.n	800e484 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	8b5b      	ldrh	r3, [r3, #26]
 800e474:	f023 0308 	bic.w	r3, r3, #8
 800e478:	b29a      	uxth	r2, r3
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800e47e:	6878      	ldr	r0, [r7, #4]
 800e480:	f7ff f882 	bl	800d588 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	68db      	ldr	r3, [r3, #12]
 800e488:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d00a      	beq.n	800e4a8 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800e492:	4b0e      	ldr	r3, [pc, #56]	; (800e4cc <tcp_fasttmr+0xc4>)
 800e494:	2200      	movs	r2, #0
 800e496:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800e498:	6878      	ldr	r0, [r7, #4]
 800e49a:	f000 f819 	bl	800e4d0 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800e49e:	4b0b      	ldr	r3, [pc, #44]	; (800e4cc <tcp_fasttmr+0xc4>)
 800e4a0:	781b      	ldrb	r3, [r3, #0]
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d000      	beq.n	800e4a8 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800e4a6:	e7b8      	b.n	800e41a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800e4a8:	683b      	ldr	r3, [r7, #0]
 800e4aa:	607b      	str	r3, [r7, #4]
 800e4ac:	e002      	b.n	800e4b4 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	68db      	ldr	r3, [r3, #12]
 800e4b2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d1b3      	bne.n	800e422 <tcp_fasttmr+0x1a>
    }
  }
}
 800e4ba:	bf00      	nop
 800e4bc:	bf00      	nop
 800e4be:	3708      	adds	r7, #8
 800e4c0:	46bd      	mov	sp, r7
 800e4c2:	bd80      	pop	{r7, pc}
 800e4c4:	2000be26 	.word	0x2000be26
 800e4c8:	2000be1c 	.word	0x2000be1c
 800e4cc:	2000be24 	.word	0x2000be24

0800e4d0 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800e4d0:	b590      	push	{r4, r7, lr}
 800e4d2:	b085      	sub	sp, #20
 800e4d4:	af00      	add	r7, sp, #0
 800e4d6:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d109      	bne.n	800e4f2 <tcp_process_refused_data+0x22>
 800e4de:	4b37      	ldr	r3, [pc, #220]	; (800e5bc <tcp_process_refused_data+0xec>)
 800e4e0:	f240 6209 	movw	r2, #1545	; 0x609
 800e4e4:	4936      	ldr	r1, [pc, #216]	; (800e5c0 <tcp_process_refused_data+0xf0>)
 800e4e6:	4837      	ldr	r0, [pc, #220]	; (800e5c4 <tcp_process_refused_data+0xf4>)
 800e4e8:	f008 fbca 	bl	8016c80 <iprintf>
 800e4ec:	f06f 030f 	mvn.w	r3, #15
 800e4f0:	e060      	b.n	800e5b4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e4f6:	7b5b      	ldrb	r3, [r3, #13]
 800e4f8:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e4fe:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	2200      	movs	r2, #0
 800e504:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d00b      	beq.n	800e528 <tcp_process_refused_data+0x58>
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	6918      	ldr	r0, [r3, #16]
 800e51a:	2300      	movs	r3, #0
 800e51c:	68ba      	ldr	r2, [r7, #8]
 800e51e:	6879      	ldr	r1, [r7, #4]
 800e520:	47a0      	blx	r4
 800e522:	4603      	mov	r3, r0
 800e524:	73fb      	strb	r3, [r7, #15]
 800e526:	e007      	b.n	800e538 <tcp_process_refused_data+0x68>
 800e528:	2300      	movs	r3, #0
 800e52a:	68ba      	ldr	r2, [r7, #8]
 800e52c:	6879      	ldr	r1, [r7, #4]
 800e52e:	2000      	movs	r0, #0
 800e530:	f000 f8a4 	bl	800e67c <tcp_recv_null>
 800e534:	4603      	mov	r3, r0
 800e536:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800e538:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d12a      	bne.n	800e596 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800e540:	7bbb      	ldrb	r3, [r7, #14]
 800e542:	f003 0320 	and.w	r3, r3, #32
 800e546:	2b00      	cmp	r3, #0
 800e548:	d033      	beq.n	800e5b2 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e54e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e552:	d005      	beq.n	800e560 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e558:	3301      	adds	r3, #1
 800e55a:	b29a      	uxth	r2, r3
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e566:	2b00      	cmp	r3, #0
 800e568:	d00b      	beq.n	800e582 <tcp_process_refused_data+0xb2>
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	6918      	ldr	r0, [r3, #16]
 800e574:	2300      	movs	r3, #0
 800e576:	2200      	movs	r2, #0
 800e578:	6879      	ldr	r1, [r7, #4]
 800e57a:	47a0      	blx	r4
 800e57c:	4603      	mov	r3, r0
 800e57e:	73fb      	strb	r3, [r7, #15]
 800e580:	e001      	b.n	800e586 <tcp_process_refused_data+0xb6>
 800e582:	2300      	movs	r3, #0
 800e584:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800e586:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e58a:	f113 0f0d 	cmn.w	r3, #13
 800e58e:	d110      	bne.n	800e5b2 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800e590:	f06f 030c 	mvn.w	r3, #12
 800e594:	e00e      	b.n	800e5b4 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800e596:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e59a:	f113 0f0d 	cmn.w	r3, #13
 800e59e:	d102      	bne.n	800e5a6 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800e5a0:	f06f 030c 	mvn.w	r3, #12
 800e5a4:	e006      	b.n	800e5b4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	68ba      	ldr	r2, [r7, #8]
 800e5aa:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800e5ac:	f06f 0304 	mvn.w	r3, #4
 800e5b0:	e000      	b.n	800e5b4 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800e5b2:	2300      	movs	r3, #0
}
 800e5b4:	4618      	mov	r0, r3
 800e5b6:	3714      	adds	r7, #20
 800e5b8:	46bd      	mov	sp, r7
 800e5ba:	bd90      	pop	{r4, r7, pc}
 800e5bc:	08018c0c 	.word	0x08018c0c
 800e5c0:	0801911c 	.word	0x0801911c
 800e5c4:	08018c50 	.word	0x08018c50

0800e5c8 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800e5c8:	b580      	push	{r7, lr}
 800e5ca:	b084      	sub	sp, #16
 800e5cc:	af00      	add	r7, sp, #0
 800e5ce:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800e5d0:	e007      	b.n	800e5e2 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800e5d8:	6878      	ldr	r0, [r7, #4]
 800e5da:	f000 f80a 	bl	800e5f2 <tcp_seg_free>
    seg = next;
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d1f4      	bne.n	800e5d2 <tcp_segs_free+0xa>
  }
}
 800e5e8:	bf00      	nop
 800e5ea:	bf00      	nop
 800e5ec:	3710      	adds	r7, #16
 800e5ee:	46bd      	mov	sp, r7
 800e5f0:	bd80      	pop	{r7, pc}

0800e5f2 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800e5f2:	b580      	push	{r7, lr}
 800e5f4:	b082      	sub	sp, #8
 800e5f6:	af00      	add	r7, sp, #0
 800e5f8:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d00c      	beq.n	800e61a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	685b      	ldr	r3, [r3, #4]
 800e604:	2b00      	cmp	r3, #0
 800e606:	d004      	beq.n	800e612 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	685b      	ldr	r3, [r3, #4]
 800e60c:	4618      	mov	r0, r3
 800e60e:	f7fe fb1b 	bl	800cc48 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800e612:	6879      	ldr	r1, [r7, #4]
 800e614:	2003      	movs	r0, #3
 800e616:	f7fd fce1 	bl	800bfdc <memp_free>
  }
}
 800e61a:	bf00      	nop
 800e61c:	3708      	adds	r7, #8
 800e61e:	46bd      	mov	sp, r7
 800e620:	bd80      	pop	{r7, pc}
	...

0800e624 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800e624:	b580      	push	{r7, lr}
 800e626:	b084      	sub	sp, #16
 800e628:	af00      	add	r7, sp, #0
 800e62a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d106      	bne.n	800e640 <tcp_seg_copy+0x1c>
 800e632:	4b0f      	ldr	r3, [pc, #60]	; (800e670 <tcp_seg_copy+0x4c>)
 800e634:	f240 6282 	movw	r2, #1666	; 0x682
 800e638:	490e      	ldr	r1, [pc, #56]	; (800e674 <tcp_seg_copy+0x50>)
 800e63a:	480f      	ldr	r0, [pc, #60]	; (800e678 <tcp_seg_copy+0x54>)
 800e63c:	f008 fb20 	bl	8016c80 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800e640:	2003      	movs	r0, #3
 800e642:	f7fd fc55 	bl	800bef0 <memp_malloc>
 800e646:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d101      	bne.n	800e652 <tcp_seg_copy+0x2e>
    return NULL;
 800e64e:	2300      	movs	r3, #0
 800e650:	e00a      	b.n	800e668 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800e652:	2210      	movs	r2, #16
 800e654:	6879      	ldr	r1, [r7, #4]
 800e656:	68f8      	ldr	r0, [r7, #12]
 800e658:	f008 fa1e 	bl	8016a98 <memcpy>
  pbuf_ref(cseg->p);
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	685b      	ldr	r3, [r3, #4]
 800e660:	4618      	mov	r0, r3
 800e662:	f7fe fb95 	bl	800cd90 <pbuf_ref>
  return cseg;
 800e666:	68fb      	ldr	r3, [r7, #12]
}
 800e668:	4618      	mov	r0, r3
 800e66a:	3710      	adds	r7, #16
 800e66c:	46bd      	mov	sp, r7
 800e66e:	bd80      	pop	{r7, pc}
 800e670:	08018c0c 	.word	0x08018c0c
 800e674:	08019160 	.word	0x08019160
 800e678:	08018c50 	.word	0x08018c50

0800e67c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800e67c:	b580      	push	{r7, lr}
 800e67e:	b084      	sub	sp, #16
 800e680:	af00      	add	r7, sp, #0
 800e682:	60f8      	str	r0, [r7, #12]
 800e684:	60b9      	str	r1, [r7, #8]
 800e686:	607a      	str	r2, [r7, #4]
 800e688:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800e68a:	68bb      	ldr	r3, [r7, #8]
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d109      	bne.n	800e6a4 <tcp_recv_null+0x28>
 800e690:	4b12      	ldr	r3, [pc, #72]	; (800e6dc <tcp_recv_null+0x60>)
 800e692:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800e696:	4912      	ldr	r1, [pc, #72]	; (800e6e0 <tcp_recv_null+0x64>)
 800e698:	4812      	ldr	r0, [pc, #72]	; (800e6e4 <tcp_recv_null+0x68>)
 800e69a:	f008 faf1 	bl	8016c80 <iprintf>
 800e69e:	f06f 030f 	mvn.w	r3, #15
 800e6a2:	e016      	b.n	800e6d2 <tcp_recv_null+0x56>

  if (p != NULL) {
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d009      	beq.n	800e6be <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	891b      	ldrh	r3, [r3, #8]
 800e6ae:	4619      	mov	r1, r3
 800e6b0:	68b8      	ldr	r0, [r7, #8]
 800e6b2:	f7ff f9bb 	bl	800da2c <tcp_recved>
    pbuf_free(p);
 800e6b6:	6878      	ldr	r0, [r7, #4]
 800e6b8:	f7fe fac6 	bl	800cc48 <pbuf_free>
 800e6bc:	e008      	b.n	800e6d0 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800e6be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d104      	bne.n	800e6d0 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800e6c6:	68b8      	ldr	r0, [r7, #8]
 800e6c8:	f7fe ffc8 	bl	800d65c <tcp_close>
 800e6cc:	4603      	mov	r3, r0
 800e6ce:	e000      	b.n	800e6d2 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800e6d0:	2300      	movs	r3, #0
}
 800e6d2:	4618      	mov	r0, r3
 800e6d4:	3710      	adds	r7, #16
 800e6d6:	46bd      	mov	sp, r7
 800e6d8:	bd80      	pop	{r7, pc}
 800e6da:	bf00      	nop
 800e6dc:	08018c0c 	.word	0x08018c0c
 800e6e0:	0801917c 	.word	0x0801917c
 800e6e4:	08018c50 	.word	0x08018c50

0800e6e8 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800e6e8:	b580      	push	{r7, lr}
 800e6ea:	b086      	sub	sp, #24
 800e6ec:	af00      	add	r7, sp, #0
 800e6ee:	4603      	mov	r3, r0
 800e6f0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800e6f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	db01      	blt.n	800e6fe <tcp_kill_prio+0x16>
 800e6fa:	79fb      	ldrb	r3, [r7, #7]
 800e6fc:	e000      	b.n	800e700 <tcp_kill_prio+0x18>
 800e6fe:	237f      	movs	r3, #127	; 0x7f
 800e700:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800e702:	7afb      	ldrb	r3, [r7, #11]
 800e704:	2b00      	cmp	r3, #0
 800e706:	d034      	beq.n	800e772 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800e708:	7afb      	ldrb	r3, [r7, #11]
 800e70a:	3b01      	subs	r3, #1
 800e70c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800e70e:	2300      	movs	r3, #0
 800e710:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800e712:	2300      	movs	r3, #0
 800e714:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e716:	4b19      	ldr	r3, [pc, #100]	; (800e77c <tcp_kill_prio+0x94>)
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	617b      	str	r3, [r7, #20]
 800e71c:	e01f      	b.n	800e75e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800e71e:	697b      	ldr	r3, [r7, #20]
 800e720:	7d5b      	ldrb	r3, [r3, #21]
 800e722:	7afa      	ldrb	r2, [r7, #11]
 800e724:	429a      	cmp	r2, r3
 800e726:	d80c      	bhi.n	800e742 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800e728:	697b      	ldr	r3, [r7, #20]
 800e72a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800e72c:	7afa      	ldrb	r2, [r7, #11]
 800e72e:	429a      	cmp	r2, r3
 800e730:	d112      	bne.n	800e758 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800e732:	4b13      	ldr	r3, [pc, #76]	; (800e780 <tcp_kill_prio+0x98>)
 800e734:	681a      	ldr	r2, [r3, #0]
 800e736:	697b      	ldr	r3, [r7, #20]
 800e738:	6a1b      	ldr	r3, [r3, #32]
 800e73a:	1ad3      	subs	r3, r2, r3
 800e73c:	68fa      	ldr	r2, [r7, #12]
 800e73e:	429a      	cmp	r2, r3
 800e740:	d80a      	bhi.n	800e758 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800e742:	4b0f      	ldr	r3, [pc, #60]	; (800e780 <tcp_kill_prio+0x98>)
 800e744:	681a      	ldr	r2, [r3, #0]
 800e746:	697b      	ldr	r3, [r7, #20]
 800e748:	6a1b      	ldr	r3, [r3, #32]
 800e74a:	1ad3      	subs	r3, r2, r3
 800e74c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800e74e:	697b      	ldr	r3, [r7, #20]
 800e750:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800e752:	697b      	ldr	r3, [r7, #20]
 800e754:	7d5b      	ldrb	r3, [r3, #21]
 800e756:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e758:	697b      	ldr	r3, [r7, #20]
 800e75a:	68db      	ldr	r3, [r3, #12]
 800e75c:	617b      	str	r3, [r7, #20]
 800e75e:	697b      	ldr	r3, [r7, #20]
 800e760:	2b00      	cmp	r3, #0
 800e762:	d1dc      	bne.n	800e71e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800e764:	693b      	ldr	r3, [r7, #16]
 800e766:	2b00      	cmp	r3, #0
 800e768:	d004      	beq.n	800e774 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800e76a:	6938      	ldr	r0, [r7, #16]
 800e76c:	f7ff f860 	bl	800d830 <tcp_abort>
 800e770:	e000      	b.n	800e774 <tcp_kill_prio+0x8c>
    return;
 800e772:	bf00      	nop
  }
}
 800e774:	3718      	adds	r7, #24
 800e776:	46bd      	mov	sp, r7
 800e778:	bd80      	pop	{r7, pc}
 800e77a:	bf00      	nop
 800e77c:	2000be1c 	.word	0x2000be1c
 800e780:	2000be10 	.word	0x2000be10

0800e784 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800e784:	b580      	push	{r7, lr}
 800e786:	b086      	sub	sp, #24
 800e788:	af00      	add	r7, sp, #0
 800e78a:	4603      	mov	r3, r0
 800e78c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800e78e:	79fb      	ldrb	r3, [r7, #7]
 800e790:	2b08      	cmp	r3, #8
 800e792:	d009      	beq.n	800e7a8 <tcp_kill_state+0x24>
 800e794:	79fb      	ldrb	r3, [r7, #7]
 800e796:	2b09      	cmp	r3, #9
 800e798:	d006      	beq.n	800e7a8 <tcp_kill_state+0x24>
 800e79a:	4b1a      	ldr	r3, [pc, #104]	; (800e804 <tcp_kill_state+0x80>)
 800e79c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800e7a0:	4919      	ldr	r1, [pc, #100]	; (800e808 <tcp_kill_state+0x84>)
 800e7a2:	481a      	ldr	r0, [pc, #104]	; (800e80c <tcp_kill_state+0x88>)
 800e7a4:	f008 fa6c 	bl	8016c80 <iprintf>

  inactivity = 0;
 800e7a8:	2300      	movs	r3, #0
 800e7aa:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800e7ac:	2300      	movs	r3, #0
 800e7ae:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e7b0:	4b17      	ldr	r3, [pc, #92]	; (800e810 <tcp_kill_state+0x8c>)
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	617b      	str	r3, [r7, #20]
 800e7b6:	e017      	b.n	800e7e8 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800e7b8:	697b      	ldr	r3, [r7, #20]
 800e7ba:	7d1b      	ldrb	r3, [r3, #20]
 800e7bc:	79fa      	ldrb	r2, [r7, #7]
 800e7be:	429a      	cmp	r2, r3
 800e7c0:	d10f      	bne.n	800e7e2 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800e7c2:	4b14      	ldr	r3, [pc, #80]	; (800e814 <tcp_kill_state+0x90>)
 800e7c4:	681a      	ldr	r2, [r3, #0]
 800e7c6:	697b      	ldr	r3, [r7, #20]
 800e7c8:	6a1b      	ldr	r3, [r3, #32]
 800e7ca:	1ad3      	subs	r3, r2, r3
 800e7cc:	68fa      	ldr	r2, [r7, #12]
 800e7ce:	429a      	cmp	r2, r3
 800e7d0:	d807      	bhi.n	800e7e2 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800e7d2:	4b10      	ldr	r3, [pc, #64]	; (800e814 <tcp_kill_state+0x90>)
 800e7d4:	681a      	ldr	r2, [r3, #0]
 800e7d6:	697b      	ldr	r3, [r7, #20]
 800e7d8:	6a1b      	ldr	r3, [r3, #32]
 800e7da:	1ad3      	subs	r3, r2, r3
 800e7dc:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800e7de:	697b      	ldr	r3, [r7, #20]
 800e7e0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e7e2:	697b      	ldr	r3, [r7, #20]
 800e7e4:	68db      	ldr	r3, [r3, #12]
 800e7e6:	617b      	str	r3, [r7, #20]
 800e7e8:	697b      	ldr	r3, [r7, #20]
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d1e4      	bne.n	800e7b8 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800e7ee:	693b      	ldr	r3, [r7, #16]
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d003      	beq.n	800e7fc <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800e7f4:	2100      	movs	r1, #0
 800e7f6:	6938      	ldr	r0, [r7, #16]
 800e7f8:	f7fe ff5c 	bl	800d6b4 <tcp_abandon>
  }
}
 800e7fc:	bf00      	nop
 800e7fe:	3718      	adds	r7, #24
 800e800:	46bd      	mov	sp, r7
 800e802:	bd80      	pop	{r7, pc}
 800e804:	08018c0c 	.word	0x08018c0c
 800e808:	08019198 	.word	0x08019198
 800e80c:	08018c50 	.word	0x08018c50
 800e810:	2000be1c 	.word	0x2000be1c
 800e814:	2000be10 	.word	0x2000be10

0800e818 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800e818:	b580      	push	{r7, lr}
 800e81a:	b084      	sub	sp, #16
 800e81c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800e81e:	2300      	movs	r3, #0
 800e820:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800e822:	2300      	movs	r3, #0
 800e824:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e826:	4b12      	ldr	r3, [pc, #72]	; (800e870 <tcp_kill_timewait+0x58>)
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	60fb      	str	r3, [r7, #12]
 800e82c:	e012      	b.n	800e854 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800e82e:	4b11      	ldr	r3, [pc, #68]	; (800e874 <tcp_kill_timewait+0x5c>)
 800e830:	681a      	ldr	r2, [r3, #0]
 800e832:	68fb      	ldr	r3, [r7, #12]
 800e834:	6a1b      	ldr	r3, [r3, #32]
 800e836:	1ad3      	subs	r3, r2, r3
 800e838:	687a      	ldr	r2, [r7, #4]
 800e83a:	429a      	cmp	r2, r3
 800e83c:	d807      	bhi.n	800e84e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800e83e:	4b0d      	ldr	r3, [pc, #52]	; (800e874 <tcp_kill_timewait+0x5c>)
 800e840:	681a      	ldr	r2, [r3, #0]
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	6a1b      	ldr	r3, [r3, #32]
 800e846:	1ad3      	subs	r3, r2, r3
 800e848:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	68db      	ldr	r3, [r3, #12]
 800e852:	60fb      	str	r3, [r7, #12]
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	2b00      	cmp	r3, #0
 800e858:	d1e9      	bne.n	800e82e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800e85a:	68bb      	ldr	r3, [r7, #8]
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d002      	beq.n	800e866 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800e860:	68b8      	ldr	r0, [r7, #8]
 800e862:	f7fe ffe5 	bl	800d830 <tcp_abort>
  }
}
 800e866:	bf00      	nop
 800e868:	3710      	adds	r7, #16
 800e86a:	46bd      	mov	sp, r7
 800e86c:	bd80      	pop	{r7, pc}
 800e86e:	bf00      	nop
 800e870:	2000be20 	.word	0x2000be20
 800e874:	2000be10 	.word	0x2000be10

0800e878 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800e878:	b580      	push	{r7, lr}
 800e87a:	b082      	sub	sp, #8
 800e87c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800e87e:	4b10      	ldr	r3, [pc, #64]	; (800e8c0 <tcp_handle_closepend+0x48>)
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800e884:	e014      	b.n	800e8b0 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	68db      	ldr	r3, [r3, #12]
 800e88a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	8b5b      	ldrh	r3, [r3, #26]
 800e890:	f003 0308 	and.w	r3, r3, #8
 800e894:	2b00      	cmp	r3, #0
 800e896:	d009      	beq.n	800e8ac <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	8b5b      	ldrh	r3, [r3, #26]
 800e89c:	f023 0308 	bic.w	r3, r3, #8
 800e8a0:	b29a      	uxth	r2, r3
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800e8a6:	6878      	ldr	r0, [r7, #4]
 800e8a8:	f7fe fe6e 	bl	800d588 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800e8ac:	683b      	ldr	r3, [r7, #0]
 800e8ae:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d1e7      	bne.n	800e886 <tcp_handle_closepend+0xe>
  }
}
 800e8b6:	bf00      	nop
 800e8b8:	bf00      	nop
 800e8ba:	3708      	adds	r7, #8
 800e8bc:	46bd      	mov	sp, r7
 800e8be:	bd80      	pop	{r7, pc}
 800e8c0:	2000be1c 	.word	0x2000be1c

0800e8c4 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800e8c4:	b580      	push	{r7, lr}
 800e8c6:	b084      	sub	sp, #16
 800e8c8:	af00      	add	r7, sp, #0
 800e8ca:	4603      	mov	r3, r0
 800e8cc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e8ce:	2001      	movs	r0, #1
 800e8d0:	f7fd fb0e 	bl	800bef0 <memp_malloc>
 800e8d4:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d126      	bne.n	800e92a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800e8dc:	f7ff ffcc 	bl	800e878 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800e8e0:	f7ff ff9a 	bl	800e818 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e8e4:	2001      	movs	r0, #1
 800e8e6:	f7fd fb03 	bl	800bef0 <memp_malloc>
 800e8ea:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d11b      	bne.n	800e92a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800e8f2:	2009      	movs	r0, #9
 800e8f4:	f7ff ff46 	bl	800e784 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e8f8:	2001      	movs	r0, #1
 800e8fa:	f7fd faf9 	bl	800bef0 <memp_malloc>
 800e8fe:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	2b00      	cmp	r3, #0
 800e904:	d111      	bne.n	800e92a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800e906:	2008      	movs	r0, #8
 800e908:	f7ff ff3c 	bl	800e784 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e90c:	2001      	movs	r0, #1
 800e90e:	f7fd faef 	bl	800bef0 <memp_malloc>
 800e912:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	2b00      	cmp	r3, #0
 800e918:	d107      	bne.n	800e92a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800e91a:	79fb      	ldrb	r3, [r7, #7]
 800e91c:	4618      	mov	r0, r3
 800e91e:	f7ff fee3 	bl	800e6e8 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e922:	2001      	movs	r0, #1
 800e924:	f7fd fae4 	bl	800bef0 <memp_malloc>
 800e928:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d03f      	beq.n	800e9b0 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800e930:	229c      	movs	r2, #156	; 0x9c
 800e932:	2100      	movs	r1, #0
 800e934:	68f8      	ldr	r0, [r7, #12]
 800e936:	f008 f8bd 	bl	8016ab4 <memset>
    pcb->prio = prio;
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	79fa      	ldrb	r2, [r7, #7]
 800e93e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800e946:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800e950:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800e95a:	68fb      	ldr	r3, [r7, #12]
 800e95c:	22ff      	movs	r2, #255	; 0xff
 800e95e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	f44f 7206 	mov.w	r2, #536	; 0x218
 800e966:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	2206      	movs	r2, #6
 800e96c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	2206      	movs	r2, #6
 800e974:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800e976:	68fb      	ldr	r3, [r7, #12]
 800e978:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e97c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800e97e:	68fb      	ldr	r3, [r7, #12]
 800e980:	2201      	movs	r2, #1
 800e982:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800e986:	4b0d      	ldr	r3, [pc, #52]	; (800e9bc <tcp_alloc+0xf8>)
 800e988:	681a      	ldr	r2, [r3, #0]
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800e98e:	4b0c      	ldr	r3, [pc, #48]	; (800e9c0 <tcp_alloc+0xfc>)
 800e990:	781a      	ldrb	r2, [r3, #0]
 800e992:	68fb      	ldr	r3, [r7, #12]
 800e994:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800e996:	68fb      	ldr	r3, [r7, #12]
 800e998:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800e99c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	4a08      	ldr	r2, [pc, #32]	; (800e9c4 <tcp_alloc+0x100>)
 800e9a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800e9a8:	68fb      	ldr	r3, [r7, #12]
 800e9aa:	4a07      	ldr	r2, [pc, #28]	; (800e9c8 <tcp_alloc+0x104>)
 800e9ac:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800e9b0:	68fb      	ldr	r3, [r7, #12]
}
 800e9b2:	4618      	mov	r0, r3
 800e9b4:	3710      	adds	r7, #16
 800e9b6:	46bd      	mov	sp, r7
 800e9b8:	bd80      	pop	{r7, pc}
 800e9ba:	bf00      	nop
 800e9bc:	2000be10 	.word	0x2000be10
 800e9c0:	2000be26 	.word	0x2000be26
 800e9c4:	0800e67d 	.word	0x0800e67d
 800e9c8:	006ddd00 	.word	0x006ddd00

0800e9cc <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800e9cc:	b580      	push	{r7, lr}
 800e9ce:	b084      	sub	sp, #16
 800e9d0:	af00      	add	r7, sp, #0
 800e9d2:	4603      	mov	r3, r0
 800e9d4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800e9d6:	2040      	movs	r0, #64	; 0x40
 800e9d8:	f7ff ff74 	bl	800e8c4 <tcp_alloc>
 800e9dc:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800e9de:	68fb      	ldr	r3, [r7, #12]
}
 800e9e0:	4618      	mov	r0, r3
 800e9e2:	3710      	adds	r7, #16
 800e9e4:	46bd      	mov	sp, r7
 800e9e6:	bd80      	pop	{r7, pc}

0800e9e8 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800e9e8:	b480      	push	{r7}
 800e9ea:	b083      	sub	sp, #12
 800e9ec:	af00      	add	r7, sp, #0
 800e9ee:	6078      	str	r0, [r7, #4]
 800e9f0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d002      	beq.n	800e9fe <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	683a      	ldr	r2, [r7, #0]
 800e9fc:	611a      	str	r2, [r3, #16]
  }
}
 800e9fe:	bf00      	nop
 800ea00:	370c      	adds	r7, #12
 800ea02:	46bd      	mov	sp, r7
 800ea04:	bc80      	pop	{r7}
 800ea06:	4770      	bx	lr

0800ea08 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800ea08:	b580      	push	{r7, lr}
 800ea0a:	b082      	sub	sp, #8
 800ea0c:	af00      	add	r7, sp, #0
 800ea0e:	6078      	str	r0, [r7, #4]
 800ea10:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d00e      	beq.n	800ea36 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	7d1b      	ldrb	r3, [r3, #20]
 800ea1c:	2b01      	cmp	r3, #1
 800ea1e:	d106      	bne.n	800ea2e <tcp_recv+0x26>
 800ea20:	4b07      	ldr	r3, [pc, #28]	; (800ea40 <tcp_recv+0x38>)
 800ea22:	f240 72df 	movw	r2, #2015	; 0x7df
 800ea26:	4907      	ldr	r1, [pc, #28]	; (800ea44 <tcp_recv+0x3c>)
 800ea28:	4807      	ldr	r0, [pc, #28]	; (800ea48 <tcp_recv+0x40>)
 800ea2a:	f008 f929 	bl	8016c80 <iprintf>
    pcb->recv = recv;
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	683a      	ldr	r2, [r7, #0]
 800ea32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800ea36:	bf00      	nop
 800ea38:	3708      	adds	r7, #8
 800ea3a:	46bd      	mov	sp, r7
 800ea3c:	bd80      	pop	{r7, pc}
 800ea3e:	bf00      	nop
 800ea40:	08018c0c 	.word	0x08018c0c
 800ea44:	080191a8 	.word	0x080191a8
 800ea48:	08018c50 	.word	0x08018c50

0800ea4c <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800ea4c:	b580      	push	{r7, lr}
 800ea4e:	b082      	sub	sp, #8
 800ea50:	af00      	add	r7, sp, #0
 800ea52:	6078      	str	r0, [r7, #4]
 800ea54:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d00e      	beq.n	800ea7a <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	7d1b      	ldrb	r3, [r3, #20]
 800ea60:	2b01      	cmp	r3, #1
 800ea62:	d106      	bne.n	800ea72 <tcp_sent+0x26>
 800ea64:	4b07      	ldr	r3, [pc, #28]	; (800ea84 <tcp_sent+0x38>)
 800ea66:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800ea6a:	4907      	ldr	r1, [pc, #28]	; (800ea88 <tcp_sent+0x3c>)
 800ea6c:	4807      	ldr	r0, [pc, #28]	; (800ea8c <tcp_sent+0x40>)
 800ea6e:	f008 f907 	bl	8016c80 <iprintf>
    pcb->sent = sent;
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	683a      	ldr	r2, [r7, #0]
 800ea76:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800ea7a:	bf00      	nop
 800ea7c:	3708      	adds	r7, #8
 800ea7e:	46bd      	mov	sp, r7
 800ea80:	bd80      	pop	{r7, pc}
 800ea82:	bf00      	nop
 800ea84:	08018c0c 	.word	0x08018c0c
 800ea88:	080191d0 	.word	0x080191d0
 800ea8c:	08018c50 	.word	0x08018c50

0800ea90 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800ea90:	b580      	push	{r7, lr}
 800ea92:	b082      	sub	sp, #8
 800ea94:	af00      	add	r7, sp, #0
 800ea96:	6078      	str	r0, [r7, #4]
 800ea98:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d00e      	beq.n	800eabe <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	7d1b      	ldrb	r3, [r3, #20]
 800eaa4:	2b01      	cmp	r3, #1
 800eaa6:	d106      	bne.n	800eab6 <tcp_err+0x26>
 800eaa8:	4b07      	ldr	r3, [pc, #28]	; (800eac8 <tcp_err+0x38>)
 800eaaa:	f640 020d 	movw	r2, #2061	; 0x80d
 800eaae:	4907      	ldr	r1, [pc, #28]	; (800eacc <tcp_err+0x3c>)
 800eab0:	4807      	ldr	r0, [pc, #28]	; (800ead0 <tcp_err+0x40>)
 800eab2:	f008 f8e5 	bl	8016c80 <iprintf>
    pcb->errf = err;
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	683a      	ldr	r2, [r7, #0]
 800eaba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800eabe:	bf00      	nop
 800eac0:	3708      	adds	r7, #8
 800eac2:	46bd      	mov	sp, r7
 800eac4:	bd80      	pop	{r7, pc}
 800eac6:	bf00      	nop
 800eac8:	08018c0c 	.word	0x08018c0c
 800eacc:	080191f8 	.word	0x080191f8
 800ead0:	08018c50 	.word	0x08018c50

0800ead4 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800ead4:	b580      	push	{r7, lr}
 800ead6:	b084      	sub	sp, #16
 800ead8:	af00      	add	r7, sp, #0
 800eada:	60f8      	str	r0, [r7, #12]
 800eadc:	60b9      	str	r1, [r7, #8]
 800eade:	4613      	mov	r3, r2
 800eae0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d107      	bne.n	800eaf8 <tcp_poll+0x24>
 800eae8:	4b0e      	ldr	r3, [pc, #56]	; (800eb24 <tcp_poll+0x50>)
 800eaea:	f640 023d 	movw	r2, #2109	; 0x83d
 800eaee:	490e      	ldr	r1, [pc, #56]	; (800eb28 <tcp_poll+0x54>)
 800eaf0:	480e      	ldr	r0, [pc, #56]	; (800eb2c <tcp_poll+0x58>)
 800eaf2:	f008 f8c5 	bl	8016c80 <iprintf>
 800eaf6:	e011      	b.n	800eb1c <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	7d1b      	ldrb	r3, [r3, #20]
 800eafc:	2b01      	cmp	r3, #1
 800eafe:	d106      	bne.n	800eb0e <tcp_poll+0x3a>
 800eb00:	4b08      	ldr	r3, [pc, #32]	; (800eb24 <tcp_poll+0x50>)
 800eb02:	f640 023e 	movw	r2, #2110	; 0x83e
 800eb06:	490a      	ldr	r1, [pc, #40]	; (800eb30 <tcp_poll+0x5c>)
 800eb08:	4808      	ldr	r0, [pc, #32]	; (800eb2c <tcp_poll+0x58>)
 800eb0a:	f008 f8b9 	bl	8016c80 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	68ba      	ldr	r2, [r7, #8]
 800eb12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	79fa      	ldrb	r2, [r7, #7]
 800eb1a:	775a      	strb	r2, [r3, #29]
}
 800eb1c:	3710      	adds	r7, #16
 800eb1e:	46bd      	mov	sp, r7
 800eb20:	bd80      	pop	{r7, pc}
 800eb22:	bf00      	nop
 800eb24:	08018c0c 	.word	0x08018c0c
 800eb28:	08019220 	.word	0x08019220
 800eb2c:	08018c50 	.word	0x08018c50
 800eb30:	08019238 	.word	0x08019238

0800eb34 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800eb34:	b580      	push	{r7, lr}
 800eb36:	b082      	sub	sp, #8
 800eb38:	af00      	add	r7, sp, #0
 800eb3a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d107      	bne.n	800eb52 <tcp_pcb_purge+0x1e>
 800eb42:	4b21      	ldr	r3, [pc, #132]	; (800ebc8 <tcp_pcb_purge+0x94>)
 800eb44:	f640 0251 	movw	r2, #2129	; 0x851
 800eb48:	4920      	ldr	r1, [pc, #128]	; (800ebcc <tcp_pcb_purge+0x98>)
 800eb4a:	4821      	ldr	r0, [pc, #132]	; (800ebd0 <tcp_pcb_purge+0x9c>)
 800eb4c:	f008 f898 	bl	8016c80 <iprintf>
 800eb50:	e037      	b.n	800ebc2 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	7d1b      	ldrb	r3, [r3, #20]
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d033      	beq.n	800ebc2 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800eb5e:	2b0a      	cmp	r3, #10
 800eb60:	d02f      	beq.n	800ebc2 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800eb66:	2b01      	cmp	r3, #1
 800eb68:	d02b      	beq.n	800ebc2 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d007      	beq.n	800eb82 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800eb76:	4618      	mov	r0, r3
 800eb78:	f7fe f866 	bl	800cc48 <pbuf_free>
      pcb->refused_data = NULL;
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	2200      	movs	r2, #0
 800eb80:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d002      	beq.n	800eb90 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800eb8a:	6878      	ldr	r0, [r7, #4]
 800eb8c:	f000 f986 	bl	800ee9c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800eb96:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eb9c:	4618      	mov	r0, r3
 800eb9e:	f7ff fd13 	bl	800e5c8 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eba6:	4618      	mov	r0, r3
 800eba8:	f7ff fd0e 	bl	800e5c8 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	2200      	movs	r2, #0
 800ebb0:	66da      	str	r2, [r3, #108]	; 0x6c
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	2200      	movs	r2, #0
 800ebbe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800ebc2:	3708      	adds	r7, #8
 800ebc4:	46bd      	mov	sp, r7
 800ebc6:	bd80      	pop	{r7, pc}
 800ebc8:	08018c0c 	.word	0x08018c0c
 800ebcc:	08019258 	.word	0x08019258
 800ebd0:	08018c50 	.word	0x08018c50

0800ebd4 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800ebd4:	b580      	push	{r7, lr}
 800ebd6:	b084      	sub	sp, #16
 800ebd8:	af00      	add	r7, sp, #0
 800ebda:	6078      	str	r0, [r7, #4]
 800ebdc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800ebde:	683b      	ldr	r3, [r7, #0]
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d106      	bne.n	800ebf2 <tcp_pcb_remove+0x1e>
 800ebe4:	4b3e      	ldr	r3, [pc, #248]	; (800ece0 <tcp_pcb_remove+0x10c>)
 800ebe6:	f640 0283 	movw	r2, #2179	; 0x883
 800ebea:	493e      	ldr	r1, [pc, #248]	; (800ece4 <tcp_pcb_remove+0x110>)
 800ebec:	483e      	ldr	r0, [pc, #248]	; (800ece8 <tcp_pcb_remove+0x114>)
 800ebee:	f008 f847 	bl	8016c80 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d106      	bne.n	800ec06 <tcp_pcb_remove+0x32>
 800ebf8:	4b39      	ldr	r3, [pc, #228]	; (800ece0 <tcp_pcb_remove+0x10c>)
 800ebfa:	f640 0284 	movw	r2, #2180	; 0x884
 800ebfe:	493b      	ldr	r1, [pc, #236]	; (800ecec <tcp_pcb_remove+0x118>)
 800ec00:	4839      	ldr	r0, [pc, #228]	; (800ece8 <tcp_pcb_remove+0x114>)
 800ec02:	f008 f83d 	bl	8016c80 <iprintf>

  TCP_RMV(pcblist, pcb);
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	683a      	ldr	r2, [r7, #0]
 800ec0c:	429a      	cmp	r2, r3
 800ec0e:	d105      	bne.n	800ec1c <tcp_pcb_remove+0x48>
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	681b      	ldr	r3, [r3, #0]
 800ec14:	68da      	ldr	r2, [r3, #12]
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	601a      	str	r2, [r3, #0]
 800ec1a:	e013      	b.n	800ec44 <tcp_pcb_remove+0x70>
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	60fb      	str	r3, [r7, #12]
 800ec22:	e00c      	b.n	800ec3e <tcp_pcb_remove+0x6a>
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	68db      	ldr	r3, [r3, #12]
 800ec28:	683a      	ldr	r2, [r7, #0]
 800ec2a:	429a      	cmp	r2, r3
 800ec2c:	d104      	bne.n	800ec38 <tcp_pcb_remove+0x64>
 800ec2e:	683b      	ldr	r3, [r7, #0]
 800ec30:	68da      	ldr	r2, [r3, #12]
 800ec32:	68fb      	ldr	r3, [r7, #12]
 800ec34:	60da      	str	r2, [r3, #12]
 800ec36:	e005      	b.n	800ec44 <tcp_pcb_remove+0x70>
 800ec38:	68fb      	ldr	r3, [r7, #12]
 800ec3a:	68db      	ldr	r3, [r3, #12]
 800ec3c:	60fb      	str	r3, [r7, #12]
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	d1ef      	bne.n	800ec24 <tcp_pcb_remove+0x50>
 800ec44:	683b      	ldr	r3, [r7, #0]
 800ec46:	2200      	movs	r2, #0
 800ec48:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800ec4a:	6838      	ldr	r0, [r7, #0]
 800ec4c:	f7ff ff72 	bl	800eb34 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800ec50:	683b      	ldr	r3, [r7, #0]
 800ec52:	7d1b      	ldrb	r3, [r3, #20]
 800ec54:	2b0a      	cmp	r3, #10
 800ec56:	d013      	beq.n	800ec80 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800ec58:	683b      	ldr	r3, [r7, #0]
 800ec5a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800ec5c:	2b01      	cmp	r3, #1
 800ec5e:	d00f      	beq.n	800ec80 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800ec60:	683b      	ldr	r3, [r7, #0]
 800ec62:	8b5b      	ldrh	r3, [r3, #26]
 800ec64:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d009      	beq.n	800ec80 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800ec6c:	683b      	ldr	r3, [r7, #0]
 800ec6e:	8b5b      	ldrh	r3, [r3, #26]
 800ec70:	f043 0302 	orr.w	r3, r3, #2
 800ec74:	b29a      	uxth	r2, r3
 800ec76:	683b      	ldr	r3, [r7, #0]
 800ec78:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800ec7a:	6838      	ldr	r0, [r7, #0]
 800ec7c:	f003 fbc6 	bl	801240c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800ec80:	683b      	ldr	r3, [r7, #0]
 800ec82:	7d1b      	ldrb	r3, [r3, #20]
 800ec84:	2b01      	cmp	r3, #1
 800ec86:	d020      	beq.n	800ecca <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800ec88:	683b      	ldr	r3, [r7, #0]
 800ec8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d006      	beq.n	800ec9e <tcp_pcb_remove+0xca>
 800ec90:	4b13      	ldr	r3, [pc, #76]	; (800ece0 <tcp_pcb_remove+0x10c>)
 800ec92:	f640 0293 	movw	r2, #2195	; 0x893
 800ec96:	4916      	ldr	r1, [pc, #88]	; (800ecf0 <tcp_pcb_remove+0x11c>)
 800ec98:	4813      	ldr	r0, [pc, #76]	; (800ece8 <tcp_pcb_remove+0x114>)
 800ec9a:	f007 fff1 	bl	8016c80 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800ec9e:	683b      	ldr	r3, [r7, #0]
 800eca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d006      	beq.n	800ecb4 <tcp_pcb_remove+0xe0>
 800eca6:	4b0e      	ldr	r3, [pc, #56]	; (800ece0 <tcp_pcb_remove+0x10c>)
 800eca8:	f640 0294 	movw	r2, #2196	; 0x894
 800ecac:	4911      	ldr	r1, [pc, #68]	; (800ecf4 <tcp_pcb_remove+0x120>)
 800ecae:	480e      	ldr	r0, [pc, #56]	; (800ece8 <tcp_pcb_remove+0x114>)
 800ecb0:	f007 ffe6 	bl	8016c80 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800ecb4:	683b      	ldr	r3, [r7, #0]
 800ecb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d006      	beq.n	800ecca <tcp_pcb_remove+0xf6>
 800ecbc:	4b08      	ldr	r3, [pc, #32]	; (800ece0 <tcp_pcb_remove+0x10c>)
 800ecbe:	f640 0296 	movw	r2, #2198	; 0x896
 800ecc2:	490d      	ldr	r1, [pc, #52]	; (800ecf8 <tcp_pcb_remove+0x124>)
 800ecc4:	4808      	ldr	r0, [pc, #32]	; (800ece8 <tcp_pcb_remove+0x114>)
 800ecc6:	f007 ffdb 	bl	8016c80 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800ecca:	683b      	ldr	r3, [r7, #0]
 800eccc:	2200      	movs	r2, #0
 800ecce:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800ecd0:	683b      	ldr	r3, [r7, #0]
 800ecd2:	2200      	movs	r2, #0
 800ecd4:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800ecd6:	bf00      	nop
 800ecd8:	3710      	adds	r7, #16
 800ecda:	46bd      	mov	sp, r7
 800ecdc:	bd80      	pop	{r7, pc}
 800ecde:	bf00      	nop
 800ece0:	08018c0c 	.word	0x08018c0c
 800ece4:	08019274 	.word	0x08019274
 800ece8:	08018c50 	.word	0x08018c50
 800ecec:	08019290 	.word	0x08019290
 800ecf0:	080192b0 	.word	0x080192b0
 800ecf4:	080192c8 	.word	0x080192c8
 800ecf8:	080192e4 	.word	0x080192e4

0800ecfc <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800ecfc:	b580      	push	{r7, lr}
 800ecfe:	b082      	sub	sp, #8
 800ed00:	af00      	add	r7, sp, #0
 800ed02:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d106      	bne.n	800ed18 <tcp_next_iss+0x1c>
 800ed0a:	4b0a      	ldr	r3, [pc, #40]	; (800ed34 <tcp_next_iss+0x38>)
 800ed0c:	f640 02af 	movw	r2, #2223	; 0x8af
 800ed10:	4909      	ldr	r1, [pc, #36]	; (800ed38 <tcp_next_iss+0x3c>)
 800ed12:	480a      	ldr	r0, [pc, #40]	; (800ed3c <tcp_next_iss+0x40>)
 800ed14:	f007 ffb4 	bl	8016c80 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800ed18:	4b09      	ldr	r3, [pc, #36]	; (800ed40 <tcp_next_iss+0x44>)
 800ed1a:	681a      	ldr	r2, [r3, #0]
 800ed1c:	4b09      	ldr	r3, [pc, #36]	; (800ed44 <tcp_next_iss+0x48>)
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	4413      	add	r3, r2
 800ed22:	4a07      	ldr	r2, [pc, #28]	; (800ed40 <tcp_next_iss+0x44>)
 800ed24:	6013      	str	r3, [r2, #0]
  return iss;
 800ed26:	4b06      	ldr	r3, [pc, #24]	; (800ed40 <tcp_next_iss+0x44>)
 800ed28:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800ed2a:	4618      	mov	r0, r3
 800ed2c:	3708      	adds	r7, #8
 800ed2e:	46bd      	mov	sp, r7
 800ed30:	bd80      	pop	{r7, pc}
 800ed32:	bf00      	nop
 800ed34:	08018c0c 	.word	0x08018c0c
 800ed38:	080192fc 	.word	0x080192fc
 800ed3c:	08018c50 	.word	0x08018c50
 800ed40:	20000014 	.word	0x20000014
 800ed44:	2000be10 	.word	0x2000be10

0800ed48 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800ed48:	b580      	push	{r7, lr}
 800ed4a:	b086      	sub	sp, #24
 800ed4c:	af00      	add	r7, sp, #0
 800ed4e:	4603      	mov	r3, r0
 800ed50:	60b9      	str	r1, [r7, #8]
 800ed52:	607a      	str	r2, [r7, #4]
 800ed54:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d106      	bne.n	800ed6a <tcp_eff_send_mss_netif+0x22>
 800ed5c:	4b14      	ldr	r3, [pc, #80]	; (800edb0 <tcp_eff_send_mss_netif+0x68>)
 800ed5e:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800ed62:	4914      	ldr	r1, [pc, #80]	; (800edb4 <tcp_eff_send_mss_netif+0x6c>)
 800ed64:	4814      	ldr	r0, [pc, #80]	; (800edb8 <tcp_eff_send_mss_netif+0x70>)
 800ed66:	f007 ff8b 	bl	8016c80 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800ed6a:	68bb      	ldr	r3, [r7, #8]
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d101      	bne.n	800ed74 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800ed70:	89fb      	ldrh	r3, [r7, #14]
 800ed72:	e019      	b.n	800eda8 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800ed74:	68bb      	ldr	r3, [r7, #8]
 800ed76:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ed78:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800ed7a:	8afb      	ldrh	r3, [r7, #22]
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d012      	beq.n	800eda6 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800ed80:	2328      	movs	r3, #40	; 0x28
 800ed82:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800ed84:	8afa      	ldrh	r2, [r7, #22]
 800ed86:	8abb      	ldrh	r3, [r7, #20]
 800ed88:	429a      	cmp	r2, r3
 800ed8a:	d904      	bls.n	800ed96 <tcp_eff_send_mss_netif+0x4e>
 800ed8c:	8afa      	ldrh	r2, [r7, #22]
 800ed8e:	8abb      	ldrh	r3, [r7, #20]
 800ed90:	1ad3      	subs	r3, r2, r3
 800ed92:	b29b      	uxth	r3, r3
 800ed94:	e000      	b.n	800ed98 <tcp_eff_send_mss_netif+0x50>
 800ed96:	2300      	movs	r3, #0
 800ed98:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800ed9a:	8a7a      	ldrh	r2, [r7, #18]
 800ed9c:	89fb      	ldrh	r3, [r7, #14]
 800ed9e:	4293      	cmp	r3, r2
 800eda0:	bf28      	it	cs
 800eda2:	4613      	movcs	r3, r2
 800eda4:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800eda6:	89fb      	ldrh	r3, [r7, #14]
}
 800eda8:	4618      	mov	r0, r3
 800edaa:	3718      	adds	r7, #24
 800edac:	46bd      	mov	sp, r7
 800edae:	bd80      	pop	{r7, pc}
 800edb0:	08018c0c 	.word	0x08018c0c
 800edb4:	08019318 	.word	0x08019318
 800edb8:	08018c50 	.word	0x08018c50

0800edbc <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800edbc:	b580      	push	{r7, lr}
 800edbe:	b084      	sub	sp, #16
 800edc0:	af00      	add	r7, sp, #0
 800edc2:	6078      	str	r0, [r7, #4]
 800edc4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800edc6:	683b      	ldr	r3, [r7, #0]
 800edc8:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d119      	bne.n	800ee04 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800edd0:	4b10      	ldr	r3, [pc, #64]	; (800ee14 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800edd2:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800edd6:	4910      	ldr	r1, [pc, #64]	; (800ee18 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800edd8:	4810      	ldr	r0, [pc, #64]	; (800ee1c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800edda:	f007 ff51 	bl	8016c80 <iprintf>

  while (pcb != NULL) {
 800edde:	e011      	b.n	800ee04 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	681a      	ldr	r2, [r3, #0]
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	681b      	ldr	r3, [r3, #0]
 800ede8:	429a      	cmp	r2, r3
 800edea:	d108      	bne.n	800edfe <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800edec:	68fb      	ldr	r3, [r7, #12]
 800edee:	68db      	ldr	r3, [r3, #12]
 800edf0:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800edf2:	68f8      	ldr	r0, [r7, #12]
 800edf4:	f7fe fd1c 	bl	800d830 <tcp_abort>
      pcb = next;
 800edf8:	68bb      	ldr	r3, [r7, #8]
 800edfa:	60fb      	str	r3, [r7, #12]
 800edfc:	e002      	b.n	800ee04 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	68db      	ldr	r3, [r3, #12]
 800ee02:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d1ea      	bne.n	800ede0 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800ee0a:	bf00      	nop
 800ee0c:	bf00      	nop
 800ee0e:	3710      	adds	r7, #16
 800ee10:	46bd      	mov	sp, r7
 800ee12:	bd80      	pop	{r7, pc}
 800ee14:	08018c0c 	.word	0x08018c0c
 800ee18:	08019340 	.word	0x08019340
 800ee1c:	08018c50 	.word	0x08018c50

0800ee20 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800ee20:	b580      	push	{r7, lr}
 800ee22:	b084      	sub	sp, #16
 800ee24:	af00      	add	r7, sp, #0
 800ee26:	6078      	str	r0, [r7, #4]
 800ee28:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	d02a      	beq.n	800ee86 <tcp_netif_ip_addr_changed+0x66>
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d026      	beq.n	800ee86 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800ee38:	4b15      	ldr	r3, [pc, #84]	; (800ee90 <tcp_netif_ip_addr_changed+0x70>)
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	4619      	mov	r1, r3
 800ee3e:	6878      	ldr	r0, [r7, #4]
 800ee40:	f7ff ffbc 	bl	800edbc <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800ee44:	4b13      	ldr	r3, [pc, #76]	; (800ee94 <tcp_netif_ip_addr_changed+0x74>)
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	4619      	mov	r1, r3
 800ee4a:	6878      	ldr	r0, [r7, #4]
 800ee4c:	f7ff ffb6 	bl	800edbc <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800ee50:	683b      	ldr	r3, [r7, #0]
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	d017      	beq.n	800ee86 <tcp_netif_ip_addr_changed+0x66>
 800ee56:	683b      	ldr	r3, [r7, #0]
 800ee58:	681b      	ldr	r3, [r3, #0]
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d013      	beq.n	800ee86 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ee5e:	4b0e      	ldr	r3, [pc, #56]	; (800ee98 <tcp_netif_ip_addr_changed+0x78>)
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	60fb      	str	r3, [r7, #12]
 800ee64:	e00c      	b.n	800ee80 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800ee66:	68fb      	ldr	r3, [r7, #12]
 800ee68:	681a      	ldr	r2, [r3, #0]
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	429a      	cmp	r2, r3
 800ee70:	d103      	bne.n	800ee7a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800ee72:	683b      	ldr	r3, [r7, #0]
 800ee74:	681a      	ldr	r2, [r3, #0]
 800ee76:	68fb      	ldr	r3, [r7, #12]
 800ee78:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	68db      	ldr	r3, [r3, #12]
 800ee7e:	60fb      	str	r3, [r7, #12]
 800ee80:	68fb      	ldr	r3, [r7, #12]
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	d1ef      	bne.n	800ee66 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800ee86:	bf00      	nop
 800ee88:	3710      	adds	r7, #16
 800ee8a:	46bd      	mov	sp, r7
 800ee8c:	bd80      	pop	{r7, pc}
 800ee8e:	bf00      	nop
 800ee90:	2000be1c 	.word	0x2000be1c
 800ee94:	2000be14 	.word	0x2000be14
 800ee98:	2000be18 	.word	0x2000be18

0800ee9c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800ee9c:	b580      	push	{r7, lr}
 800ee9e:	b082      	sub	sp, #8
 800eea0:	af00      	add	r7, sp, #0
 800eea2:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	d007      	beq.n	800eebc <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eeb0:	4618      	mov	r0, r3
 800eeb2:	f7ff fb89 	bl	800e5c8 <tcp_segs_free>
    pcb->ooseq = NULL;
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	2200      	movs	r2, #0
 800eeba:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800eebc:	bf00      	nop
 800eebe:	3708      	adds	r7, #8
 800eec0:	46bd      	mov	sp, r7
 800eec2:	bd80      	pop	{r7, pc}

0800eec4 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800eec4:	b590      	push	{r4, r7, lr}
 800eec6:	b08d      	sub	sp, #52	; 0x34
 800eec8:	af04      	add	r7, sp, #16
 800eeca:	6078      	str	r0, [r7, #4]
 800eecc:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d105      	bne.n	800eee0 <tcp_input+0x1c>
 800eed4:	4b9b      	ldr	r3, [pc, #620]	; (800f144 <tcp_input+0x280>)
 800eed6:	2283      	movs	r2, #131	; 0x83
 800eed8:	499b      	ldr	r1, [pc, #620]	; (800f148 <tcp_input+0x284>)
 800eeda:	489c      	ldr	r0, [pc, #624]	; (800f14c <tcp_input+0x288>)
 800eedc:	f007 fed0 	bl	8016c80 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	685b      	ldr	r3, [r3, #4]
 800eee4:	4a9a      	ldr	r2, [pc, #616]	; (800f150 <tcp_input+0x28c>)
 800eee6:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	895b      	ldrh	r3, [r3, #10]
 800eeec:	2b13      	cmp	r3, #19
 800eeee:	f240 83d1 	bls.w	800f694 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800eef2:	4b98      	ldr	r3, [pc, #608]	; (800f154 <tcp_input+0x290>)
 800eef4:	695b      	ldr	r3, [r3, #20]
 800eef6:	4a97      	ldr	r2, [pc, #604]	; (800f154 <tcp_input+0x290>)
 800eef8:	6812      	ldr	r2, [r2, #0]
 800eefa:	4611      	mov	r1, r2
 800eefc:	4618      	mov	r0, r3
 800eefe:	f006 f8fb 	bl	80150f8 <ip4_addr_isbroadcast_u32>
 800ef02:	4603      	mov	r3, r0
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	f040 83c7 	bne.w	800f698 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800ef0a:	4b92      	ldr	r3, [pc, #584]	; (800f154 <tcp_input+0x290>)
 800ef0c:	695b      	ldr	r3, [r3, #20]
 800ef0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800ef12:	2be0      	cmp	r3, #224	; 0xe0
 800ef14:	f000 83c0 	beq.w	800f698 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800ef18:	4b8d      	ldr	r3, [pc, #564]	; (800f150 <tcp_input+0x28c>)
 800ef1a:	681b      	ldr	r3, [r3, #0]
 800ef1c:	899b      	ldrh	r3, [r3, #12]
 800ef1e:	b29b      	uxth	r3, r3
 800ef20:	4618      	mov	r0, r3
 800ef22:	f7fc fa35 	bl	800b390 <lwip_htons>
 800ef26:	4603      	mov	r3, r0
 800ef28:	0b1b      	lsrs	r3, r3, #12
 800ef2a:	b29b      	uxth	r3, r3
 800ef2c:	b2db      	uxtb	r3, r3
 800ef2e:	009b      	lsls	r3, r3, #2
 800ef30:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800ef32:	7cbb      	ldrb	r3, [r7, #18]
 800ef34:	2b13      	cmp	r3, #19
 800ef36:	f240 83b1 	bls.w	800f69c <tcp_input+0x7d8>
 800ef3a:	7cbb      	ldrb	r3, [r7, #18]
 800ef3c:	b29a      	uxth	r2, r3
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	891b      	ldrh	r3, [r3, #8]
 800ef42:	429a      	cmp	r2, r3
 800ef44:	f200 83aa 	bhi.w	800f69c <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800ef48:	7cbb      	ldrb	r3, [r7, #18]
 800ef4a:	b29b      	uxth	r3, r3
 800ef4c:	3b14      	subs	r3, #20
 800ef4e:	b29a      	uxth	r2, r3
 800ef50:	4b81      	ldr	r3, [pc, #516]	; (800f158 <tcp_input+0x294>)
 800ef52:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800ef54:	4b81      	ldr	r3, [pc, #516]	; (800f15c <tcp_input+0x298>)
 800ef56:	2200      	movs	r2, #0
 800ef58:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	895a      	ldrh	r2, [r3, #10]
 800ef5e:	7cbb      	ldrb	r3, [r7, #18]
 800ef60:	b29b      	uxth	r3, r3
 800ef62:	429a      	cmp	r2, r3
 800ef64:	d309      	bcc.n	800ef7a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800ef66:	4b7c      	ldr	r3, [pc, #496]	; (800f158 <tcp_input+0x294>)
 800ef68:	881a      	ldrh	r2, [r3, #0]
 800ef6a:	4b7d      	ldr	r3, [pc, #500]	; (800f160 <tcp_input+0x29c>)
 800ef6c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800ef6e:	7cbb      	ldrb	r3, [r7, #18]
 800ef70:	4619      	mov	r1, r3
 800ef72:	6878      	ldr	r0, [r7, #4]
 800ef74:	f7fd fde2 	bl	800cb3c <pbuf_remove_header>
 800ef78:	e04e      	b.n	800f018 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d105      	bne.n	800ef8e <tcp_input+0xca>
 800ef82:	4b70      	ldr	r3, [pc, #448]	; (800f144 <tcp_input+0x280>)
 800ef84:	22c2      	movs	r2, #194	; 0xc2
 800ef86:	4977      	ldr	r1, [pc, #476]	; (800f164 <tcp_input+0x2a0>)
 800ef88:	4870      	ldr	r0, [pc, #448]	; (800f14c <tcp_input+0x288>)
 800ef8a:	f007 fe79 	bl	8016c80 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800ef8e:	2114      	movs	r1, #20
 800ef90:	6878      	ldr	r0, [r7, #4]
 800ef92:	f7fd fdd3 	bl	800cb3c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	895a      	ldrh	r2, [r3, #10]
 800ef9a:	4b71      	ldr	r3, [pc, #452]	; (800f160 <tcp_input+0x29c>)
 800ef9c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800ef9e:	4b6e      	ldr	r3, [pc, #440]	; (800f158 <tcp_input+0x294>)
 800efa0:	881a      	ldrh	r2, [r3, #0]
 800efa2:	4b6f      	ldr	r3, [pc, #444]	; (800f160 <tcp_input+0x29c>)
 800efa4:	881b      	ldrh	r3, [r3, #0]
 800efa6:	1ad3      	subs	r3, r2, r3
 800efa8:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800efaa:	4b6d      	ldr	r3, [pc, #436]	; (800f160 <tcp_input+0x29c>)
 800efac:	881b      	ldrh	r3, [r3, #0]
 800efae:	4619      	mov	r1, r3
 800efb0:	6878      	ldr	r0, [r7, #4]
 800efb2:	f7fd fdc3 	bl	800cb3c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	895b      	ldrh	r3, [r3, #10]
 800efbc:	8a3a      	ldrh	r2, [r7, #16]
 800efbe:	429a      	cmp	r2, r3
 800efc0:	f200 836e 	bhi.w	800f6a0 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	685b      	ldr	r3, [r3, #4]
 800efca:	4a64      	ldr	r2, [pc, #400]	; (800f15c <tcp_input+0x298>)
 800efcc:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	8a3a      	ldrh	r2, [r7, #16]
 800efd4:	4611      	mov	r1, r2
 800efd6:	4618      	mov	r0, r3
 800efd8:	f7fd fdb0 	bl	800cb3c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	891a      	ldrh	r2, [r3, #8]
 800efe0:	8a3b      	ldrh	r3, [r7, #16]
 800efe2:	1ad3      	subs	r3, r2, r3
 800efe4:	b29a      	uxth	r2, r3
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	895b      	ldrh	r3, [r3, #10]
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d005      	beq.n	800effe <tcp_input+0x13a>
 800eff2:	4b54      	ldr	r3, [pc, #336]	; (800f144 <tcp_input+0x280>)
 800eff4:	22df      	movs	r2, #223	; 0xdf
 800eff6:	495c      	ldr	r1, [pc, #368]	; (800f168 <tcp_input+0x2a4>)
 800eff8:	4854      	ldr	r0, [pc, #336]	; (800f14c <tcp_input+0x288>)
 800effa:	f007 fe41 	bl	8016c80 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	891a      	ldrh	r2, [r3, #8]
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	891b      	ldrh	r3, [r3, #8]
 800f008:	429a      	cmp	r2, r3
 800f00a:	d005      	beq.n	800f018 <tcp_input+0x154>
 800f00c:	4b4d      	ldr	r3, [pc, #308]	; (800f144 <tcp_input+0x280>)
 800f00e:	22e0      	movs	r2, #224	; 0xe0
 800f010:	4956      	ldr	r1, [pc, #344]	; (800f16c <tcp_input+0x2a8>)
 800f012:	484e      	ldr	r0, [pc, #312]	; (800f14c <tcp_input+0x288>)
 800f014:	f007 fe34 	bl	8016c80 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800f018:	4b4d      	ldr	r3, [pc, #308]	; (800f150 <tcp_input+0x28c>)
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	881b      	ldrh	r3, [r3, #0]
 800f01e:	b29b      	uxth	r3, r3
 800f020:	4a4b      	ldr	r2, [pc, #300]	; (800f150 <tcp_input+0x28c>)
 800f022:	6814      	ldr	r4, [r2, #0]
 800f024:	4618      	mov	r0, r3
 800f026:	f7fc f9b3 	bl	800b390 <lwip_htons>
 800f02a:	4603      	mov	r3, r0
 800f02c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800f02e:	4b48      	ldr	r3, [pc, #288]	; (800f150 <tcp_input+0x28c>)
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	885b      	ldrh	r3, [r3, #2]
 800f034:	b29b      	uxth	r3, r3
 800f036:	4a46      	ldr	r2, [pc, #280]	; (800f150 <tcp_input+0x28c>)
 800f038:	6814      	ldr	r4, [r2, #0]
 800f03a:	4618      	mov	r0, r3
 800f03c:	f7fc f9a8 	bl	800b390 <lwip_htons>
 800f040:	4603      	mov	r3, r0
 800f042:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800f044:	4b42      	ldr	r3, [pc, #264]	; (800f150 <tcp_input+0x28c>)
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	685b      	ldr	r3, [r3, #4]
 800f04a:	4a41      	ldr	r2, [pc, #260]	; (800f150 <tcp_input+0x28c>)
 800f04c:	6814      	ldr	r4, [r2, #0]
 800f04e:	4618      	mov	r0, r3
 800f050:	f7fc f9b2 	bl	800b3b8 <lwip_htonl>
 800f054:	4603      	mov	r3, r0
 800f056:	6063      	str	r3, [r4, #4]
 800f058:	6863      	ldr	r3, [r4, #4]
 800f05a:	4a45      	ldr	r2, [pc, #276]	; (800f170 <tcp_input+0x2ac>)
 800f05c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800f05e:	4b3c      	ldr	r3, [pc, #240]	; (800f150 <tcp_input+0x28c>)
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	689b      	ldr	r3, [r3, #8]
 800f064:	4a3a      	ldr	r2, [pc, #232]	; (800f150 <tcp_input+0x28c>)
 800f066:	6814      	ldr	r4, [r2, #0]
 800f068:	4618      	mov	r0, r3
 800f06a:	f7fc f9a5 	bl	800b3b8 <lwip_htonl>
 800f06e:	4603      	mov	r3, r0
 800f070:	60a3      	str	r3, [r4, #8]
 800f072:	68a3      	ldr	r3, [r4, #8]
 800f074:	4a3f      	ldr	r2, [pc, #252]	; (800f174 <tcp_input+0x2b0>)
 800f076:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800f078:	4b35      	ldr	r3, [pc, #212]	; (800f150 <tcp_input+0x28c>)
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	89db      	ldrh	r3, [r3, #14]
 800f07e:	b29b      	uxth	r3, r3
 800f080:	4a33      	ldr	r2, [pc, #204]	; (800f150 <tcp_input+0x28c>)
 800f082:	6814      	ldr	r4, [r2, #0]
 800f084:	4618      	mov	r0, r3
 800f086:	f7fc f983 	bl	800b390 <lwip_htons>
 800f08a:	4603      	mov	r3, r0
 800f08c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800f08e:	4b30      	ldr	r3, [pc, #192]	; (800f150 <tcp_input+0x28c>)
 800f090:	681b      	ldr	r3, [r3, #0]
 800f092:	899b      	ldrh	r3, [r3, #12]
 800f094:	b29b      	uxth	r3, r3
 800f096:	4618      	mov	r0, r3
 800f098:	f7fc f97a 	bl	800b390 <lwip_htons>
 800f09c:	4603      	mov	r3, r0
 800f09e:	b2db      	uxtb	r3, r3
 800f0a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f0a4:	b2da      	uxtb	r2, r3
 800f0a6:	4b34      	ldr	r3, [pc, #208]	; (800f178 <tcp_input+0x2b4>)
 800f0a8:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	891a      	ldrh	r2, [r3, #8]
 800f0ae:	4b33      	ldr	r3, [pc, #204]	; (800f17c <tcp_input+0x2b8>)
 800f0b0:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800f0b2:	4b31      	ldr	r3, [pc, #196]	; (800f178 <tcp_input+0x2b4>)
 800f0b4:	781b      	ldrb	r3, [r3, #0]
 800f0b6:	f003 0303 	and.w	r3, r3, #3
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d00c      	beq.n	800f0d8 <tcp_input+0x214>
    tcplen++;
 800f0be:	4b2f      	ldr	r3, [pc, #188]	; (800f17c <tcp_input+0x2b8>)
 800f0c0:	881b      	ldrh	r3, [r3, #0]
 800f0c2:	3301      	adds	r3, #1
 800f0c4:	b29a      	uxth	r2, r3
 800f0c6:	4b2d      	ldr	r3, [pc, #180]	; (800f17c <tcp_input+0x2b8>)
 800f0c8:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	891a      	ldrh	r2, [r3, #8]
 800f0ce:	4b2b      	ldr	r3, [pc, #172]	; (800f17c <tcp_input+0x2b8>)
 800f0d0:	881b      	ldrh	r3, [r3, #0]
 800f0d2:	429a      	cmp	r2, r3
 800f0d4:	f200 82e6 	bhi.w	800f6a4 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800f0d8:	2300      	movs	r3, #0
 800f0da:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f0dc:	4b28      	ldr	r3, [pc, #160]	; (800f180 <tcp_input+0x2bc>)
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	61fb      	str	r3, [r7, #28]
 800f0e2:	e09d      	b.n	800f220 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800f0e4:	69fb      	ldr	r3, [r7, #28]
 800f0e6:	7d1b      	ldrb	r3, [r3, #20]
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d105      	bne.n	800f0f8 <tcp_input+0x234>
 800f0ec:	4b15      	ldr	r3, [pc, #84]	; (800f144 <tcp_input+0x280>)
 800f0ee:	22fb      	movs	r2, #251	; 0xfb
 800f0f0:	4924      	ldr	r1, [pc, #144]	; (800f184 <tcp_input+0x2c0>)
 800f0f2:	4816      	ldr	r0, [pc, #88]	; (800f14c <tcp_input+0x288>)
 800f0f4:	f007 fdc4 	bl	8016c80 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800f0f8:	69fb      	ldr	r3, [r7, #28]
 800f0fa:	7d1b      	ldrb	r3, [r3, #20]
 800f0fc:	2b0a      	cmp	r3, #10
 800f0fe:	d105      	bne.n	800f10c <tcp_input+0x248>
 800f100:	4b10      	ldr	r3, [pc, #64]	; (800f144 <tcp_input+0x280>)
 800f102:	22fc      	movs	r2, #252	; 0xfc
 800f104:	4920      	ldr	r1, [pc, #128]	; (800f188 <tcp_input+0x2c4>)
 800f106:	4811      	ldr	r0, [pc, #68]	; (800f14c <tcp_input+0x288>)
 800f108:	f007 fdba 	bl	8016c80 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800f10c:	69fb      	ldr	r3, [r7, #28]
 800f10e:	7d1b      	ldrb	r3, [r3, #20]
 800f110:	2b01      	cmp	r3, #1
 800f112:	d105      	bne.n	800f120 <tcp_input+0x25c>
 800f114:	4b0b      	ldr	r3, [pc, #44]	; (800f144 <tcp_input+0x280>)
 800f116:	22fd      	movs	r2, #253	; 0xfd
 800f118:	491c      	ldr	r1, [pc, #112]	; (800f18c <tcp_input+0x2c8>)
 800f11a:	480c      	ldr	r0, [pc, #48]	; (800f14c <tcp_input+0x288>)
 800f11c:	f007 fdb0 	bl	8016c80 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f120:	69fb      	ldr	r3, [r7, #28]
 800f122:	7a1b      	ldrb	r3, [r3, #8]
 800f124:	2b00      	cmp	r3, #0
 800f126:	d033      	beq.n	800f190 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f128:	69fb      	ldr	r3, [r7, #28]
 800f12a:	7a1a      	ldrb	r2, [r3, #8]
 800f12c:	4b09      	ldr	r3, [pc, #36]	; (800f154 <tcp_input+0x290>)
 800f12e:	685b      	ldr	r3, [r3, #4]
 800f130:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f134:	3301      	adds	r3, #1
 800f136:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f138:	429a      	cmp	r2, r3
 800f13a:	d029      	beq.n	800f190 <tcp_input+0x2cc>
      prev = pcb;
 800f13c:	69fb      	ldr	r3, [r7, #28]
 800f13e:	61bb      	str	r3, [r7, #24]
      continue;
 800f140:	e06b      	b.n	800f21a <tcp_input+0x356>
 800f142:	bf00      	nop
 800f144:	08019374 	.word	0x08019374
 800f148:	080193a8 	.word	0x080193a8
 800f14c:	080193c0 	.word	0x080193c0
 800f150:	2000be38 	.word	0x2000be38
 800f154:	20008d10 	.word	0x20008d10
 800f158:	2000be3c 	.word	0x2000be3c
 800f15c:	2000be40 	.word	0x2000be40
 800f160:	2000be3e 	.word	0x2000be3e
 800f164:	080193e8 	.word	0x080193e8
 800f168:	080193f8 	.word	0x080193f8
 800f16c:	08019404 	.word	0x08019404
 800f170:	2000be48 	.word	0x2000be48
 800f174:	2000be4c 	.word	0x2000be4c
 800f178:	2000be54 	.word	0x2000be54
 800f17c:	2000be52 	.word	0x2000be52
 800f180:	2000be1c 	.word	0x2000be1c
 800f184:	08019424 	.word	0x08019424
 800f188:	0801944c 	.word	0x0801944c
 800f18c:	08019478 	.word	0x08019478
    }

    if (pcb->remote_port == tcphdr->src &&
 800f190:	69fb      	ldr	r3, [r7, #28]
 800f192:	8b1a      	ldrh	r2, [r3, #24]
 800f194:	4b72      	ldr	r3, [pc, #456]	; (800f360 <tcp_input+0x49c>)
 800f196:	681b      	ldr	r3, [r3, #0]
 800f198:	881b      	ldrh	r3, [r3, #0]
 800f19a:	b29b      	uxth	r3, r3
 800f19c:	429a      	cmp	r2, r3
 800f19e:	d13a      	bne.n	800f216 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800f1a0:	69fb      	ldr	r3, [r7, #28]
 800f1a2:	8ada      	ldrh	r2, [r3, #22]
 800f1a4:	4b6e      	ldr	r3, [pc, #440]	; (800f360 <tcp_input+0x49c>)
 800f1a6:	681b      	ldr	r3, [r3, #0]
 800f1a8:	885b      	ldrh	r3, [r3, #2]
 800f1aa:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800f1ac:	429a      	cmp	r2, r3
 800f1ae:	d132      	bne.n	800f216 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f1b0:	69fb      	ldr	r3, [r7, #28]
 800f1b2:	685a      	ldr	r2, [r3, #4]
 800f1b4:	4b6b      	ldr	r3, [pc, #428]	; (800f364 <tcp_input+0x4a0>)
 800f1b6:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800f1b8:	429a      	cmp	r2, r3
 800f1ba:	d12c      	bne.n	800f216 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f1bc:	69fb      	ldr	r3, [r7, #28]
 800f1be:	681a      	ldr	r2, [r3, #0]
 800f1c0:	4b68      	ldr	r3, [pc, #416]	; (800f364 <tcp_input+0x4a0>)
 800f1c2:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f1c4:	429a      	cmp	r2, r3
 800f1c6:	d126      	bne.n	800f216 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800f1c8:	69fb      	ldr	r3, [r7, #28]
 800f1ca:	68db      	ldr	r3, [r3, #12]
 800f1cc:	69fa      	ldr	r2, [r7, #28]
 800f1ce:	429a      	cmp	r2, r3
 800f1d0:	d106      	bne.n	800f1e0 <tcp_input+0x31c>
 800f1d2:	4b65      	ldr	r3, [pc, #404]	; (800f368 <tcp_input+0x4a4>)
 800f1d4:	f240 120d 	movw	r2, #269	; 0x10d
 800f1d8:	4964      	ldr	r1, [pc, #400]	; (800f36c <tcp_input+0x4a8>)
 800f1da:	4865      	ldr	r0, [pc, #404]	; (800f370 <tcp_input+0x4ac>)
 800f1dc:	f007 fd50 	bl	8016c80 <iprintf>
      if (prev != NULL) {
 800f1e0:	69bb      	ldr	r3, [r7, #24]
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d00a      	beq.n	800f1fc <tcp_input+0x338>
        prev->next = pcb->next;
 800f1e6:	69fb      	ldr	r3, [r7, #28]
 800f1e8:	68da      	ldr	r2, [r3, #12]
 800f1ea:	69bb      	ldr	r3, [r7, #24]
 800f1ec:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800f1ee:	4b61      	ldr	r3, [pc, #388]	; (800f374 <tcp_input+0x4b0>)
 800f1f0:	681a      	ldr	r2, [r3, #0]
 800f1f2:	69fb      	ldr	r3, [r7, #28]
 800f1f4:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800f1f6:	4a5f      	ldr	r2, [pc, #380]	; (800f374 <tcp_input+0x4b0>)
 800f1f8:	69fb      	ldr	r3, [r7, #28]
 800f1fa:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800f1fc:	69fb      	ldr	r3, [r7, #28]
 800f1fe:	68db      	ldr	r3, [r3, #12]
 800f200:	69fa      	ldr	r2, [r7, #28]
 800f202:	429a      	cmp	r2, r3
 800f204:	d111      	bne.n	800f22a <tcp_input+0x366>
 800f206:	4b58      	ldr	r3, [pc, #352]	; (800f368 <tcp_input+0x4a4>)
 800f208:	f240 1215 	movw	r2, #277	; 0x115
 800f20c:	495a      	ldr	r1, [pc, #360]	; (800f378 <tcp_input+0x4b4>)
 800f20e:	4858      	ldr	r0, [pc, #352]	; (800f370 <tcp_input+0x4ac>)
 800f210:	f007 fd36 	bl	8016c80 <iprintf>
      break;
 800f214:	e009      	b.n	800f22a <tcp_input+0x366>
    }
    prev = pcb;
 800f216:	69fb      	ldr	r3, [r7, #28]
 800f218:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f21a:	69fb      	ldr	r3, [r7, #28]
 800f21c:	68db      	ldr	r3, [r3, #12]
 800f21e:	61fb      	str	r3, [r7, #28]
 800f220:	69fb      	ldr	r3, [r7, #28]
 800f222:	2b00      	cmp	r3, #0
 800f224:	f47f af5e 	bne.w	800f0e4 <tcp_input+0x220>
 800f228:	e000      	b.n	800f22c <tcp_input+0x368>
      break;
 800f22a:	bf00      	nop
  }

  if (pcb == NULL) {
 800f22c:	69fb      	ldr	r3, [r7, #28]
 800f22e:	2b00      	cmp	r3, #0
 800f230:	f040 80aa 	bne.w	800f388 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f234:	4b51      	ldr	r3, [pc, #324]	; (800f37c <tcp_input+0x4b8>)
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	61fb      	str	r3, [r7, #28]
 800f23a:	e03f      	b.n	800f2bc <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f23c:	69fb      	ldr	r3, [r7, #28]
 800f23e:	7d1b      	ldrb	r3, [r3, #20]
 800f240:	2b0a      	cmp	r3, #10
 800f242:	d006      	beq.n	800f252 <tcp_input+0x38e>
 800f244:	4b48      	ldr	r3, [pc, #288]	; (800f368 <tcp_input+0x4a4>)
 800f246:	f240 121f 	movw	r2, #287	; 0x11f
 800f24a:	494d      	ldr	r1, [pc, #308]	; (800f380 <tcp_input+0x4bc>)
 800f24c:	4848      	ldr	r0, [pc, #288]	; (800f370 <tcp_input+0x4ac>)
 800f24e:	f007 fd17 	bl	8016c80 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f252:	69fb      	ldr	r3, [r7, #28]
 800f254:	7a1b      	ldrb	r3, [r3, #8]
 800f256:	2b00      	cmp	r3, #0
 800f258:	d009      	beq.n	800f26e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f25a:	69fb      	ldr	r3, [r7, #28]
 800f25c:	7a1a      	ldrb	r2, [r3, #8]
 800f25e:	4b41      	ldr	r3, [pc, #260]	; (800f364 <tcp_input+0x4a0>)
 800f260:	685b      	ldr	r3, [r3, #4]
 800f262:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f266:	3301      	adds	r3, #1
 800f268:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f26a:	429a      	cmp	r2, r3
 800f26c:	d122      	bne.n	800f2b4 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800f26e:	69fb      	ldr	r3, [r7, #28]
 800f270:	8b1a      	ldrh	r2, [r3, #24]
 800f272:	4b3b      	ldr	r3, [pc, #236]	; (800f360 <tcp_input+0x49c>)
 800f274:	681b      	ldr	r3, [r3, #0]
 800f276:	881b      	ldrh	r3, [r3, #0]
 800f278:	b29b      	uxth	r3, r3
 800f27a:	429a      	cmp	r2, r3
 800f27c:	d11b      	bne.n	800f2b6 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800f27e:	69fb      	ldr	r3, [r7, #28]
 800f280:	8ada      	ldrh	r2, [r3, #22]
 800f282:	4b37      	ldr	r3, [pc, #220]	; (800f360 <tcp_input+0x49c>)
 800f284:	681b      	ldr	r3, [r3, #0]
 800f286:	885b      	ldrh	r3, [r3, #2]
 800f288:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800f28a:	429a      	cmp	r2, r3
 800f28c:	d113      	bne.n	800f2b6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f28e:	69fb      	ldr	r3, [r7, #28]
 800f290:	685a      	ldr	r2, [r3, #4]
 800f292:	4b34      	ldr	r3, [pc, #208]	; (800f364 <tcp_input+0x4a0>)
 800f294:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800f296:	429a      	cmp	r2, r3
 800f298:	d10d      	bne.n	800f2b6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f29a:	69fb      	ldr	r3, [r7, #28]
 800f29c:	681a      	ldr	r2, [r3, #0]
 800f29e:	4b31      	ldr	r3, [pc, #196]	; (800f364 <tcp_input+0x4a0>)
 800f2a0:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f2a2:	429a      	cmp	r2, r3
 800f2a4:	d107      	bne.n	800f2b6 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800f2a6:	69f8      	ldr	r0, [r7, #28]
 800f2a8:	f000 fb56 	bl	800f958 <tcp_timewait_input>
        }
        pbuf_free(p);
 800f2ac:	6878      	ldr	r0, [r7, #4]
 800f2ae:	f7fd fccb 	bl	800cc48 <pbuf_free>
        return;
 800f2b2:	e1fd      	b.n	800f6b0 <tcp_input+0x7ec>
        continue;
 800f2b4:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f2b6:	69fb      	ldr	r3, [r7, #28]
 800f2b8:	68db      	ldr	r3, [r3, #12]
 800f2ba:	61fb      	str	r3, [r7, #28]
 800f2bc:	69fb      	ldr	r3, [r7, #28]
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d1bc      	bne.n	800f23c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800f2c2:	2300      	movs	r3, #0
 800f2c4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f2c6:	4b2f      	ldr	r3, [pc, #188]	; (800f384 <tcp_input+0x4c0>)
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	617b      	str	r3, [r7, #20]
 800f2cc:	e02a      	b.n	800f324 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f2ce:	697b      	ldr	r3, [r7, #20]
 800f2d0:	7a1b      	ldrb	r3, [r3, #8]
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d00c      	beq.n	800f2f0 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f2d6:	697b      	ldr	r3, [r7, #20]
 800f2d8:	7a1a      	ldrb	r2, [r3, #8]
 800f2da:	4b22      	ldr	r3, [pc, #136]	; (800f364 <tcp_input+0x4a0>)
 800f2dc:	685b      	ldr	r3, [r3, #4]
 800f2de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f2e2:	3301      	adds	r3, #1
 800f2e4:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f2e6:	429a      	cmp	r2, r3
 800f2e8:	d002      	beq.n	800f2f0 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800f2ea:	697b      	ldr	r3, [r7, #20]
 800f2ec:	61bb      	str	r3, [r7, #24]
        continue;
 800f2ee:	e016      	b.n	800f31e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800f2f0:	697b      	ldr	r3, [r7, #20]
 800f2f2:	8ada      	ldrh	r2, [r3, #22]
 800f2f4:	4b1a      	ldr	r3, [pc, #104]	; (800f360 <tcp_input+0x49c>)
 800f2f6:	681b      	ldr	r3, [r3, #0]
 800f2f8:	885b      	ldrh	r3, [r3, #2]
 800f2fa:	b29b      	uxth	r3, r3
 800f2fc:	429a      	cmp	r2, r3
 800f2fe:	d10c      	bne.n	800f31a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800f300:	697b      	ldr	r3, [r7, #20]
 800f302:	681a      	ldr	r2, [r3, #0]
 800f304:	4b17      	ldr	r3, [pc, #92]	; (800f364 <tcp_input+0x4a0>)
 800f306:	695b      	ldr	r3, [r3, #20]
 800f308:	429a      	cmp	r2, r3
 800f30a:	d00f      	beq.n	800f32c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800f30c:	697b      	ldr	r3, [r7, #20]
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d00d      	beq.n	800f32e <tcp_input+0x46a>
 800f312:	697b      	ldr	r3, [r7, #20]
 800f314:	681b      	ldr	r3, [r3, #0]
 800f316:	2b00      	cmp	r3, #0
 800f318:	d009      	beq.n	800f32e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800f31a:	697b      	ldr	r3, [r7, #20]
 800f31c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f31e:	697b      	ldr	r3, [r7, #20]
 800f320:	68db      	ldr	r3, [r3, #12]
 800f322:	617b      	str	r3, [r7, #20]
 800f324:	697b      	ldr	r3, [r7, #20]
 800f326:	2b00      	cmp	r3, #0
 800f328:	d1d1      	bne.n	800f2ce <tcp_input+0x40a>
 800f32a:	e000      	b.n	800f32e <tcp_input+0x46a>
            break;
 800f32c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800f32e:	697b      	ldr	r3, [r7, #20]
 800f330:	2b00      	cmp	r3, #0
 800f332:	d029      	beq.n	800f388 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800f334:	69bb      	ldr	r3, [r7, #24]
 800f336:	2b00      	cmp	r3, #0
 800f338:	d00a      	beq.n	800f350 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800f33a:	697b      	ldr	r3, [r7, #20]
 800f33c:	68da      	ldr	r2, [r3, #12]
 800f33e:	69bb      	ldr	r3, [r7, #24]
 800f340:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800f342:	4b10      	ldr	r3, [pc, #64]	; (800f384 <tcp_input+0x4c0>)
 800f344:	681a      	ldr	r2, [r3, #0]
 800f346:	697b      	ldr	r3, [r7, #20]
 800f348:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800f34a:	4a0e      	ldr	r2, [pc, #56]	; (800f384 <tcp_input+0x4c0>)
 800f34c:	697b      	ldr	r3, [r7, #20]
 800f34e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800f350:	6978      	ldr	r0, [r7, #20]
 800f352:	f000 fa03 	bl	800f75c <tcp_listen_input>
      }
      pbuf_free(p);
 800f356:	6878      	ldr	r0, [r7, #4]
 800f358:	f7fd fc76 	bl	800cc48 <pbuf_free>
      return;
 800f35c:	e1a8      	b.n	800f6b0 <tcp_input+0x7ec>
 800f35e:	bf00      	nop
 800f360:	2000be38 	.word	0x2000be38
 800f364:	20008d10 	.word	0x20008d10
 800f368:	08019374 	.word	0x08019374
 800f36c:	080194a0 	.word	0x080194a0
 800f370:	080193c0 	.word	0x080193c0
 800f374:	2000be1c 	.word	0x2000be1c
 800f378:	080194cc 	.word	0x080194cc
 800f37c:	2000be20 	.word	0x2000be20
 800f380:	080194f8 	.word	0x080194f8
 800f384:	2000be18 	.word	0x2000be18
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800f388:	69fb      	ldr	r3, [r7, #28]
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	f000 8158 	beq.w	800f640 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800f390:	4b95      	ldr	r3, [pc, #596]	; (800f5e8 <tcp_input+0x724>)
 800f392:	2200      	movs	r2, #0
 800f394:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	891a      	ldrh	r2, [r3, #8]
 800f39a:	4b93      	ldr	r3, [pc, #588]	; (800f5e8 <tcp_input+0x724>)
 800f39c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800f39e:	4a92      	ldr	r2, [pc, #584]	; (800f5e8 <tcp_input+0x724>)
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800f3a4:	4b91      	ldr	r3, [pc, #580]	; (800f5ec <tcp_input+0x728>)
 800f3a6:	681b      	ldr	r3, [r3, #0]
 800f3a8:	4a8f      	ldr	r2, [pc, #572]	; (800f5e8 <tcp_input+0x724>)
 800f3aa:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800f3ac:	4b90      	ldr	r3, [pc, #576]	; (800f5f0 <tcp_input+0x72c>)
 800f3ae:	2200      	movs	r2, #0
 800f3b0:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800f3b2:	4b90      	ldr	r3, [pc, #576]	; (800f5f4 <tcp_input+0x730>)
 800f3b4:	2200      	movs	r2, #0
 800f3b6:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800f3b8:	4b8f      	ldr	r3, [pc, #572]	; (800f5f8 <tcp_input+0x734>)
 800f3ba:	2200      	movs	r2, #0
 800f3bc:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800f3be:	4b8f      	ldr	r3, [pc, #572]	; (800f5fc <tcp_input+0x738>)
 800f3c0:	781b      	ldrb	r3, [r3, #0]
 800f3c2:	f003 0308 	and.w	r3, r3, #8
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d006      	beq.n	800f3d8 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	7b5b      	ldrb	r3, [r3, #13]
 800f3ce:	f043 0301 	orr.w	r3, r3, #1
 800f3d2:	b2da      	uxtb	r2, r3
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800f3d8:	69fb      	ldr	r3, [r7, #28]
 800f3da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d017      	beq.n	800f410 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f3e0:	69f8      	ldr	r0, [r7, #28]
 800f3e2:	f7ff f875 	bl	800e4d0 <tcp_process_refused_data>
 800f3e6:	4603      	mov	r3, r0
 800f3e8:	f113 0f0d 	cmn.w	r3, #13
 800f3ec:	d007      	beq.n	800f3fe <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f3ee:	69fb      	ldr	r3, [r7, #28]
 800f3f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	d00c      	beq.n	800f410 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f3f6:	4b82      	ldr	r3, [pc, #520]	; (800f600 <tcp_input+0x73c>)
 800f3f8:	881b      	ldrh	r3, [r3, #0]
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	d008      	beq.n	800f410 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800f3fe:	69fb      	ldr	r3, [r7, #28]
 800f400:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f402:	2b00      	cmp	r3, #0
 800f404:	f040 80e3 	bne.w	800f5ce <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800f408:	69f8      	ldr	r0, [r7, #28]
 800f40a:	f003 fe05 	bl	8013018 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800f40e:	e0de      	b.n	800f5ce <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800f410:	4a7c      	ldr	r2, [pc, #496]	; (800f604 <tcp_input+0x740>)
 800f412:	69fb      	ldr	r3, [r7, #28]
 800f414:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800f416:	69f8      	ldr	r0, [r7, #28]
 800f418:	f000 fb18 	bl	800fa4c <tcp_process>
 800f41c:	4603      	mov	r3, r0
 800f41e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800f420:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f424:	f113 0f0d 	cmn.w	r3, #13
 800f428:	f000 80d3 	beq.w	800f5d2 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800f42c:	4b71      	ldr	r3, [pc, #452]	; (800f5f4 <tcp_input+0x730>)
 800f42e:	781b      	ldrb	r3, [r3, #0]
 800f430:	f003 0308 	and.w	r3, r3, #8
 800f434:	2b00      	cmp	r3, #0
 800f436:	d015      	beq.n	800f464 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800f438:	69fb      	ldr	r3, [r7, #28]
 800f43a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d008      	beq.n	800f454 <tcp_input+0x590>
 800f442:	69fb      	ldr	r3, [r7, #28]
 800f444:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f448:	69fa      	ldr	r2, [r7, #28]
 800f44a:	6912      	ldr	r2, [r2, #16]
 800f44c:	f06f 010d 	mvn.w	r1, #13
 800f450:	4610      	mov	r0, r2
 800f452:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800f454:	69f9      	ldr	r1, [r7, #28]
 800f456:	486c      	ldr	r0, [pc, #432]	; (800f608 <tcp_input+0x744>)
 800f458:	f7ff fbbc 	bl	800ebd4 <tcp_pcb_remove>
        tcp_free(pcb);
 800f45c:	69f8      	ldr	r0, [r7, #28]
 800f45e:	f7fd feff 	bl	800d260 <tcp_free>
 800f462:	e0da      	b.n	800f61a <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800f464:	2300      	movs	r3, #0
 800f466:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800f468:	4b63      	ldr	r3, [pc, #396]	; (800f5f8 <tcp_input+0x734>)
 800f46a:	881b      	ldrh	r3, [r3, #0]
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d01d      	beq.n	800f4ac <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800f470:	4b61      	ldr	r3, [pc, #388]	; (800f5f8 <tcp_input+0x734>)
 800f472:	881b      	ldrh	r3, [r3, #0]
 800f474:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800f476:	69fb      	ldr	r3, [r7, #28]
 800f478:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d00a      	beq.n	800f496 <tcp_input+0x5d2>
 800f480:	69fb      	ldr	r3, [r7, #28]
 800f482:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f486:	69fa      	ldr	r2, [r7, #28]
 800f488:	6910      	ldr	r0, [r2, #16]
 800f48a:	89fa      	ldrh	r2, [r7, #14]
 800f48c:	69f9      	ldr	r1, [r7, #28]
 800f48e:	4798      	blx	r3
 800f490:	4603      	mov	r3, r0
 800f492:	74fb      	strb	r3, [r7, #19]
 800f494:	e001      	b.n	800f49a <tcp_input+0x5d6>
 800f496:	2300      	movs	r3, #0
 800f498:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800f49a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f49e:	f113 0f0d 	cmn.w	r3, #13
 800f4a2:	f000 8098 	beq.w	800f5d6 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800f4a6:	4b54      	ldr	r3, [pc, #336]	; (800f5f8 <tcp_input+0x734>)
 800f4a8:	2200      	movs	r2, #0
 800f4aa:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800f4ac:	69f8      	ldr	r0, [r7, #28]
 800f4ae:	f000 f915 	bl	800f6dc <tcp_input_delayed_close>
 800f4b2:	4603      	mov	r3, r0
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	f040 8090 	bne.w	800f5da <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800f4ba:	4b4d      	ldr	r3, [pc, #308]	; (800f5f0 <tcp_input+0x72c>)
 800f4bc:	681b      	ldr	r3, [r3, #0]
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d041      	beq.n	800f546 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800f4c2:	69fb      	ldr	r3, [r7, #28]
 800f4c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d006      	beq.n	800f4d8 <tcp_input+0x614>
 800f4ca:	4b50      	ldr	r3, [pc, #320]	; (800f60c <tcp_input+0x748>)
 800f4cc:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800f4d0:	494f      	ldr	r1, [pc, #316]	; (800f610 <tcp_input+0x74c>)
 800f4d2:	4850      	ldr	r0, [pc, #320]	; (800f614 <tcp_input+0x750>)
 800f4d4:	f007 fbd4 	bl	8016c80 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800f4d8:	69fb      	ldr	r3, [r7, #28]
 800f4da:	8b5b      	ldrh	r3, [r3, #26]
 800f4dc:	f003 0310 	and.w	r3, r3, #16
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d008      	beq.n	800f4f6 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800f4e4:	4b42      	ldr	r3, [pc, #264]	; (800f5f0 <tcp_input+0x72c>)
 800f4e6:	681b      	ldr	r3, [r3, #0]
 800f4e8:	4618      	mov	r0, r3
 800f4ea:	f7fd fbad 	bl	800cc48 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800f4ee:	69f8      	ldr	r0, [r7, #28]
 800f4f0:	f7fe f99e 	bl	800d830 <tcp_abort>
            goto aborted;
 800f4f4:	e091      	b.n	800f61a <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800f4f6:	69fb      	ldr	r3, [r7, #28]
 800f4f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d00c      	beq.n	800f51a <tcp_input+0x656>
 800f500:	69fb      	ldr	r3, [r7, #28]
 800f502:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f506:	69fb      	ldr	r3, [r7, #28]
 800f508:	6918      	ldr	r0, [r3, #16]
 800f50a:	4b39      	ldr	r3, [pc, #228]	; (800f5f0 <tcp_input+0x72c>)
 800f50c:	681a      	ldr	r2, [r3, #0]
 800f50e:	2300      	movs	r3, #0
 800f510:	69f9      	ldr	r1, [r7, #28]
 800f512:	47a0      	blx	r4
 800f514:	4603      	mov	r3, r0
 800f516:	74fb      	strb	r3, [r7, #19]
 800f518:	e008      	b.n	800f52c <tcp_input+0x668>
 800f51a:	4b35      	ldr	r3, [pc, #212]	; (800f5f0 <tcp_input+0x72c>)
 800f51c:	681a      	ldr	r2, [r3, #0]
 800f51e:	2300      	movs	r3, #0
 800f520:	69f9      	ldr	r1, [r7, #28]
 800f522:	2000      	movs	r0, #0
 800f524:	f7ff f8aa 	bl	800e67c <tcp_recv_null>
 800f528:	4603      	mov	r3, r0
 800f52a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800f52c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f530:	f113 0f0d 	cmn.w	r3, #13
 800f534:	d053      	beq.n	800f5de <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800f536:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d003      	beq.n	800f546 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800f53e:	4b2c      	ldr	r3, [pc, #176]	; (800f5f0 <tcp_input+0x72c>)
 800f540:	681a      	ldr	r2, [r3, #0]
 800f542:	69fb      	ldr	r3, [r7, #28]
 800f544:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800f546:	4b2b      	ldr	r3, [pc, #172]	; (800f5f4 <tcp_input+0x730>)
 800f548:	781b      	ldrb	r3, [r3, #0]
 800f54a:	f003 0320 	and.w	r3, r3, #32
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d030      	beq.n	800f5b4 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800f552:	69fb      	ldr	r3, [r7, #28]
 800f554:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f556:	2b00      	cmp	r3, #0
 800f558:	d009      	beq.n	800f56e <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800f55a:	69fb      	ldr	r3, [r7, #28]
 800f55c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f55e:	7b5a      	ldrb	r2, [r3, #13]
 800f560:	69fb      	ldr	r3, [r7, #28]
 800f562:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f564:	f042 0220 	orr.w	r2, r2, #32
 800f568:	b2d2      	uxtb	r2, r2
 800f56a:	735a      	strb	r2, [r3, #13]
 800f56c:	e022      	b.n	800f5b4 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800f56e:	69fb      	ldr	r3, [r7, #28]
 800f570:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f572:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f576:	d005      	beq.n	800f584 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800f578:	69fb      	ldr	r3, [r7, #28]
 800f57a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f57c:	3301      	adds	r3, #1
 800f57e:	b29a      	uxth	r2, r3
 800f580:	69fb      	ldr	r3, [r7, #28]
 800f582:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800f584:	69fb      	ldr	r3, [r7, #28]
 800f586:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d00b      	beq.n	800f5a6 <tcp_input+0x6e2>
 800f58e:	69fb      	ldr	r3, [r7, #28]
 800f590:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f594:	69fb      	ldr	r3, [r7, #28]
 800f596:	6918      	ldr	r0, [r3, #16]
 800f598:	2300      	movs	r3, #0
 800f59a:	2200      	movs	r2, #0
 800f59c:	69f9      	ldr	r1, [r7, #28]
 800f59e:	47a0      	blx	r4
 800f5a0:	4603      	mov	r3, r0
 800f5a2:	74fb      	strb	r3, [r7, #19]
 800f5a4:	e001      	b.n	800f5aa <tcp_input+0x6e6>
 800f5a6:	2300      	movs	r3, #0
 800f5a8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800f5aa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f5ae:	f113 0f0d 	cmn.w	r3, #13
 800f5b2:	d016      	beq.n	800f5e2 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800f5b4:	4b13      	ldr	r3, [pc, #76]	; (800f604 <tcp_input+0x740>)
 800f5b6:	2200      	movs	r2, #0
 800f5b8:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800f5ba:	69f8      	ldr	r0, [r7, #28]
 800f5bc:	f000 f88e 	bl	800f6dc <tcp_input_delayed_close>
 800f5c0:	4603      	mov	r3, r0
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	d128      	bne.n	800f618 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800f5c6:	69f8      	ldr	r0, [r7, #28]
 800f5c8:	f002 ff20 	bl	801240c <tcp_output>
 800f5cc:	e025      	b.n	800f61a <tcp_input+0x756>
        goto aborted;
 800f5ce:	bf00      	nop
 800f5d0:	e023      	b.n	800f61a <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800f5d2:	bf00      	nop
 800f5d4:	e021      	b.n	800f61a <tcp_input+0x756>
              goto aborted;
 800f5d6:	bf00      	nop
 800f5d8:	e01f      	b.n	800f61a <tcp_input+0x756>
          goto aborted;
 800f5da:	bf00      	nop
 800f5dc:	e01d      	b.n	800f61a <tcp_input+0x756>
            goto aborted;
 800f5de:	bf00      	nop
 800f5e0:	e01b      	b.n	800f61a <tcp_input+0x756>
              goto aborted;
 800f5e2:	bf00      	nop
 800f5e4:	e019      	b.n	800f61a <tcp_input+0x756>
 800f5e6:	bf00      	nop
 800f5e8:	2000be28 	.word	0x2000be28
 800f5ec:	2000be38 	.word	0x2000be38
 800f5f0:	2000be58 	.word	0x2000be58
 800f5f4:	2000be55 	.word	0x2000be55
 800f5f8:	2000be50 	.word	0x2000be50
 800f5fc:	2000be54 	.word	0x2000be54
 800f600:	2000be52 	.word	0x2000be52
 800f604:	2000be5c 	.word	0x2000be5c
 800f608:	2000be1c 	.word	0x2000be1c
 800f60c:	08019374 	.word	0x08019374
 800f610:	08019528 	.word	0x08019528
 800f614:	080193c0 	.word	0x080193c0
          goto aborted;
 800f618:	bf00      	nop
    tcp_input_pcb = NULL;
 800f61a:	4b27      	ldr	r3, [pc, #156]	; (800f6b8 <tcp_input+0x7f4>)
 800f61c:	2200      	movs	r2, #0
 800f61e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800f620:	4b26      	ldr	r3, [pc, #152]	; (800f6bc <tcp_input+0x7f8>)
 800f622:	2200      	movs	r2, #0
 800f624:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800f626:	4b26      	ldr	r3, [pc, #152]	; (800f6c0 <tcp_input+0x7fc>)
 800f628:	685b      	ldr	r3, [r3, #4]
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	d03f      	beq.n	800f6ae <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800f62e:	4b24      	ldr	r3, [pc, #144]	; (800f6c0 <tcp_input+0x7fc>)
 800f630:	685b      	ldr	r3, [r3, #4]
 800f632:	4618      	mov	r0, r3
 800f634:	f7fd fb08 	bl	800cc48 <pbuf_free>
      inseg.p = NULL;
 800f638:	4b21      	ldr	r3, [pc, #132]	; (800f6c0 <tcp_input+0x7fc>)
 800f63a:	2200      	movs	r2, #0
 800f63c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800f63e:	e036      	b.n	800f6ae <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800f640:	4b20      	ldr	r3, [pc, #128]	; (800f6c4 <tcp_input+0x800>)
 800f642:	681b      	ldr	r3, [r3, #0]
 800f644:	899b      	ldrh	r3, [r3, #12]
 800f646:	b29b      	uxth	r3, r3
 800f648:	4618      	mov	r0, r3
 800f64a:	f7fb fea1 	bl	800b390 <lwip_htons>
 800f64e:	4603      	mov	r3, r0
 800f650:	b2db      	uxtb	r3, r3
 800f652:	f003 0304 	and.w	r3, r3, #4
 800f656:	2b00      	cmp	r3, #0
 800f658:	d118      	bne.n	800f68c <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f65a:	4b1b      	ldr	r3, [pc, #108]	; (800f6c8 <tcp_input+0x804>)
 800f65c:	6819      	ldr	r1, [r3, #0]
 800f65e:	4b1b      	ldr	r3, [pc, #108]	; (800f6cc <tcp_input+0x808>)
 800f660:	881b      	ldrh	r3, [r3, #0]
 800f662:	461a      	mov	r2, r3
 800f664:	4b1a      	ldr	r3, [pc, #104]	; (800f6d0 <tcp_input+0x80c>)
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f66a:	4b16      	ldr	r3, [pc, #88]	; (800f6c4 <tcp_input+0x800>)
 800f66c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f66e:	885b      	ldrh	r3, [r3, #2]
 800f670:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f672:	4a14      	ldr	r2, [pc, #80]	; (800f6c4 <tcp_input+0x800>)
 800f674:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f676:	8812      	ldrh	r2, [r2, #0]
 800f678:	b292      	uxth	r2, r2
 800f67a:	9202      	str	r2, [sp, #8]
 800f67c:	9301      	str	r3, [sp, #4]
 800f67e:	4b15      	ldr	r3, [pc, #84]	; (800f6d4 <tcp_input+0x810>)
 800f680:	9300      	str	r3, [sp, #0]
 800f682:	4b15      	ldr	r3, [pc, #84]	; (800f6d8 <tcp_input+0x814>)
 800f684:	4602      	mov	r2, r0
 800f686:	2000      	movs	r0, #0
 800f688:	f003 fc74 	bl	8012f74 <tcp_rst>
    pbuf_free(p);
 800f68c:	6878      	ldr	r0, [r7, #4]
 800f68e:	f7fd fadb 	bl	800cc48 <pbuf_free>
  return;
 800f692:	e00c      	b.n	800f6ae <tcp_input+0x7ea>
    goto dropped;
 800f694:	bf00      	nop
 800f696:	e006      	b.n	800f6a6 <tcp_input+0x7e2>
    goto dropped;
 800f698:	bf00      	nop
 800f69a:	e004      	b.n	800f6a6 <tcp_input+0x7e2>
    goto dropped;
 800f69c:	bf00      	nop
 800f69e:	e002      	b.n	800f6a6 <tcp_input+0x7e2>
      goto dropped;
 800f6a0:	bf00      	nop
 800f6a2:	e000      	b.n	800f6a6 <tcp_input+0x7e2>
      goto dropped;
 800f6a4:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800f6a6:	6878      	ldr	r0, [r7, #4]
 800f6a8:	f7fd face 	bl	800cc48 <pbuf_free>
 800f6ac:	e000      	b.n	800f6b0 <tcp_input+0x7ec>
  return;
 800f6ae:	bf00      	nop
}
 800f6b0:	3724      	adds	r7, #36	; 0x24
 800f6b2:	46bd      	mov	sp, r7
 800f6b4:	bd90      	pop	{r4, r7, pc}
 800f6b6:	bf00      	nop
 800f6b8:	2000be5c 	.word	0x2000be5c
 800f6bc:	2000be58 	.word	0x2000be58
 800f6c0:	2000be28 	.word	0x2000be28
 800f6c4:	2000be38 	.word	0x2000be38
 800f6c8:	2000be4c 	.word	0x2000be4c
 800f6cc:	2000be52 	.word	0x2000be52
 800f6d0:	2000be48 	.word	0x2000be48
 800f6d4:	20008d20 	.word	0x20008d20
 800f6d8:	20008d24 	.word	0x20008d24

0800f6dc <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800f6dc:	b580      	push	{r7, lr}
 800f6de:	b082      	sub	sp, #8
 800f6e0:	af00      	add	r7, sp, #0
 800f6e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	d106      	bne.n	800f6f8 <tcp_input_delayed_close+0x1c>
 800f6ea:	4b17      	ldr	r3, [pc, #92]	; (800f748 <tcp_input_delayed_close+0x6c>)
 800f6ec:	f240 225a 	movw	r2, #602	; 0x25a
 800f6f0:	4916      	ldr	r1, [pc, #88]	; (800f74c <tcp_input_delayed_close+0x70>)
 800f6f2:	4817      	ldr	r0, [pc, #92]	; (800f750 <tcp_input_delayed_close+0x74>)
 800f6f4:	f007 fac4 	bl	8016c80 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800f6f8:	4b16      	ldr	r3, [pc, #88]	; (800f754 <tcp_input_delayed_close+0x78>)
 800f6fa:	781b      	ldrb	r3, [r3, #0]
 800f6fc:	f003 0310 	and.w	r3, r3, #16
 800f700:	2b00      	cmp	r3, #0
 800f702:	d01c      	beq.n	800f73e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	8b5b      	ldrh	r3, [r3, #26]
 800f708:	f003 0310 	and.w	r3, r3, #16
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d10d      	bne.n	800f72c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f716:	2b00      	cmp	r3, #0
 800f718:	d008      	beq.n	800f72c <tcp_input_delayed_close+0x50>
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f720:	687a      	ldr	r2, [r7, #4]
 800f722:	6912      	ldr	r2, [r2, #16]
 800f724:	f06f 010e 	mvn.w	r1, #14
 800f728:	4610      	mov	r0, r2
 800f72a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800f72c:	6879      	ldr	r1, [r7, #4]
 800f72e:	480a      	ldr	r0, [pc, #40]	; (800f758 <tcp_input_delayed_close+0x7c>)
 800f730:	f7ff fa50 	bl	800ebd4 <tcp_pcb_remove>
    tcp_free(pcb);
 800f734:	6878      	ldr	r0, [r7, #4]
 800f736:	f7fd fd93 	bl	800d260 <tcp_free>
    return 1;
 800f73a:	2301      	movs	r3, #1
 800f73c:	e000      	b.n	800f740 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800f73e:	2300      	movs	r3, #0
}
 800f740:	4618      	mov	r0, r3
 800f742:	3708      	adds	r7, #8
 800f744:	46bd      	mov	sp, r7
 800f746:	bd80      	pop	{r7, pc}
 800f748:	08019374 	.word	0x08019374
 800f74c:	08019544 	.word	0x08019544
 800f750:	080193c0 	.word	0x080193c0
 800f754:	2000be55 	.word	0x2000be55
 800f758:	2000be1c 	.word	0x2000be1c

0800f75c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800f75c:	b590      	push	{r4, r7, lr}
 800f75e:	b08b      	sub	sp, #44	; 0x2c
 800f760:	af04      	add	r7, sp, #16
 800f762:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800f764:	4b6f      	ldr	r3, [pc, #444]	; (800f924 <tcp_listen_input+0x1c8>)
 800f766:	781b      	ldrb	r3, [r3, #0]
 800f768:	f003 0304 	and.w	r3, r3, #4
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	f040 80d2 	bne.w	800f916 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	2b00      	cmp	r3, #0
 800f776:	d106      	bne.n	800f786 <tcp_listen_input+0x2a>
 800f778:	4b6b      	ldr	r3, [pc, #428]	; (800f928 <tcp_listen_input+0x1cc>)
 800f77a:	f240 2281 	movw	r2, #641	; 0x281
 800f77e:	496b      	ldr	r1, [pc, #428]	; (800f92c <tcp_listen_input+0x1d0>)
 800f780:	486b      	ldr	r0, [pc, #428]	; (800f930 <tcp_listen_input+0x1d4>)
 800f782:	f007 fa7d 	bl	8016c80 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800f786:	4b67      	ldr	r3, [pc, #412]	; (800f924 <tcp_listen_input+0x1c8>)
 800f788:	781b      	ldrb	r3, [r3, #0]
 800f78a:	f003 0310 	and.w	r3, r3, #16
 800f78e:	2b00      	cmp	r3, #0
 800f790:	d019      	beq.n	800f7c6 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f792:	4b68      	ldr	r3, [pc, #416]	; (800f934 <tcp_listen_input+0x1d8>)
 800f794:	6819      	ldr	r1, [r3, #0]
 800f796:	4b68      	ldr	r3, [pc, #416]	; (800f938 <tcp_listen_input+0x1dc>)
 800f798:	881b      	ldrh	r3, [r3, #0]
 800f79a:	461a      	mov	r2, r3
 800f79c:	4b67      	ldr	r3, [pc, #412]	; (800f93c <tcp_listen_input+0x1e0>)
 800f79e:	681b      	ldr	r3, [r3, #0]
 800f7a0:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f7a2:	4b67      	ldr	r3, [pc, #412]	; (800f940 <tcp_listen_input+0x1e4>)
 800f7a4:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f7a6:	885b      	ldrh	r3, [r3, #2]
 800f7a8:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f7aa:	4a65      	ldr	r2, [pc, #404]	; (800f940 <tcp_listen_input+0x1e4>)
 800f7ac:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f7ae:	8812      	ldrh	r2, [r2, #0]
 800f7b0:	b292      	uxth	r2, r2
 800f7b2:	9202      	str	r2, [sp, #8]
 800f7b4:	9301      	str	r3, [sp, #4]
 800f7b6:	4b63      	ldr	r3, [pc, #396]	; (800f944 <tcp_listen_input+0x1e8>)
 800f7b8:	9300      	str	r3, [sp, #0]
 800f7ba:	4b63      	ldr	r3, [pc, #396]	; (800f948 <tcp_listen_input+0x1ec>)
 800f7bc:	4602      	mov	r2, r0
 800f7be:	6878      	ldr	r0, [r7, #4]
 800f7c0:	f003 fbd8 	bl	8012f74 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800f7c4:	e0a9      	b.n	800f91a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800f7c6:	4b57      	ldr	r3, [pc, #348]	; (800f924 <tcp_listen_input+0x1c8>)
 800f7c8:	781b      	ldrb	r3, [r3, #0]
 800f7ca:	f003 0302 	and.w	r3, r3, #2
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	f000 80a3 	beq.w	800f91a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	7d5b      	ldrb	r3, [r3, #21]
 800f7d8:	4618      	mov	r0, r3
 800f7da:	f7ff f873 	bl	800e8c4 <tcp_alloc>
 800f7de:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800f7e0:	697b      	ldr	r3, [r7, #20]
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	d111      	bne.n	800f80a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	699b      	ldr	r3, [r3, #24]
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d00a      	beq.n	800f804 <tcp_listen_input+0xa8>
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	699b      	ldr	r3, [r3, #24]
 800f7f2:	687a      	ldr	r2, [r7, #4]
 800f7f4:	6910      	ldr	r0, [r2, #16]
 800f7f6:	f04f 32ff 	mov.w	r2, #4294967295
 800f7fa:	2100      	movs	r1, #0
 800f7fc:	4798      	blx	r3
 800f7fe:	4603      	mov	r3, r0
 800f800:	73bb      	strb	r3, [r7, #14]
      return;
 800f802:	e08b      	b.n	800f91c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800f804:	23f0      	movs	r3, #240	; 0xf0
 800f806:	73bb      	strb	r3, [r7, #14]
      return;
 800f808:	e088      	b.n	800f91c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800f80a:	4b50      	ldr	r3, [pc, #320]	; (800f94c <tcp_listen_input+0x1f0>)
 800f80c:	695a      	ldr	r2, [r3, #20]
 800f80e:	697b      	ldr	r3, [r7, #20]
 800f810:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800f812:	4b4e      	ldr	r3, [pc, #312]	; (800f94c <tcp_listen_input+0x1f0>)
 800f814:	691a      	ldr	r2, [r3, #16]
 800f816:	697b      	ldr	r3, [r7, #20]
 800f818:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	8ada      	ldrh	r2, [r3, #22]
 800f81e:	697b      	ldr	r3, [r7, #20]
 800f820:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800f822:	4b47      	ldr	r3, [pc, #284]	; (800f940 <tcp_listen_input+0x1e4>)
 800f824:	681b      	ldr	r3, [r3, #0]
 800f826:	881b      	ldrh	r3, [r3, #0]
 800f828:	b29a      	uxth	r2, r3
 800f82a:	697b      	ldr	r3, [r7, #20]
 800f82c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800f82e:	697b      	ldr	r3, [r7, #20]
 800f830:	2203      	movs	r2, #3
 800f832:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800f834:	4b41      	ldr	r3, [pc, #260]	; (800f93c <tcp_listen_input+0x1e0>)
 800f836:	681b      	ldr	r3, [r3, #0]
 800f838:	1c5a      	adds	r2, r3, #1
 800f83a:	697b      	ldr	r3, [r7, #20]
 800f83c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800f83e:	697b      	ldr	r3, [r7, #20]
 800f840:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f842:	697b      	ldr	r3, [r7, #20]
 800f844:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800f846:	6978      	ldr	r0, [r7, #20]
 800f848:	f7ff fa58 	bl	800ecfc <tcp_next_iss>
 800f84c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800f84e:	697b      	ldr	r3, [r7, #20]
 800f850:	693a      	ldr	r2, [r7, #16]
 800f852:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800f854:	697b      	ldr	r3, [r7, #20]
 800f856:	693a      	ldr	r2, [r7, #16]
 800f858:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800f85a:	697b      	ldr	r3, [r7, #20]
 800f85c:	693a      	ldr	r2, [r7, #16]
 800f85e:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800f860:	697b      	ldr	r3, [r7, #20]
 800f862:	693a      	ldr	r2, [r7, #16]
 800f864:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800f866:	4b35      	ldr	r3, [pc, #212]	; (800f93c <tcp_listen_input+0x1e0>)
 800f868:	681b      	ldr	r3, [r3, #0]
 800f86a:	1e5a      	subs	r2, r3, #1
 800f86c:	697b      	ldr	r3, [r7, #20]
 800f86e:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	691a      	ldr	r2, [r3, #16]
 800f874:	697b      	ldr	r3, [r7, #20]
 800f876:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800f878:	697b      	ldr	r3, [r7, #20]
 800f87a:	687a      	ldr	r2, [r7, #4]
 800f87c:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	7a5b      	ldrb	r3, [r3, #9]
 800f882:	f003 030c 	and.w	r3, r3, #12
 800f886:	b2da      	uxtb	r2, r3
 800f888:	697b      	ldr	r3, [r7, #20]
 800f88a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	7a1a      	ldrb	r2, [r3, #8]
 800f890:	697b      	ldr	r3, [r7, #20]
 800f892:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800f894:	4b2e      	ldr	r3, [pc, #184]	; (800f950 <tcp_listen_input+0x1f4>)
 800f896:	681a      	ldr	r2, [r3, #0]
 800f898:	697b      	ldr	r3, [r7, #20]
 800f89a:	60da      	str	r2, [r3, #12]
 800f89c:	4a2c      	ldr	r2, [pc, #176]	; (800f950 <tcp_listen_input+0x1f4>)
 800f89e:	697b      	ldr	r3, [r7, #20]
 800f8a0:	6013      	str	r3, [r2, #0]
 800f8a2:	f003 fd29 	bl	80132f8 <tcp_timer_needed>
 800f8a6:	4b2b      	ldr	r3, [pc, #172]	; (800f954 <tcp_listen_input+0x1f8>)
 800f8a8:	2201      	movs	r2, #1
 800f8aa:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800f8ac:	6978      	ldr	r0, [r7, #20]
 800f8ae:	f001 fd8f 	bl	80113d0 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800f8b2:	4b23      	ldr	r3, [pc, #140]	; (800f940 <tcp_listen_input+0x1e4>)
 800f8b4:	681b      	ldr	r3, [r3, #0]
 800f8b6:	89db      	ldrh	r3, [r3, #14]
 800f8b8:	b29a      	uxth	r2, r3
 800f8ba:	697b      	ldr	r3, [r7, #20]
 800f8bc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800f8c0:	697b      	ldr	r3, [r7, #20]
 800f8c2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f8c6:	697b      	ldr	r3, [r7, #20]
 800f8c8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800f8cc:	697b      	ldr	r3, [r7, #20]
 800f8ce:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800f8d0:	697b      	ldr	r3, [r7, #20]
 800f8d2:	3304      	adds	r3, #4
 800f8d4:	4618      	mov	r0, r3
 800f8d6:	f005 f97b 	bl	8014bd0 <ip4_route>
 800f8da:	4601      	mov	r1, r0
 800f8dc:	697b      	ldr	r3, [r7, #20]
 800f8de:	3304      	adds	r3, #4
 800f8e0:	461a      	mov	r2, r3
 800f8e2:	4620      	mov	r0, r4
 800f8e4:	f7ff fa30 	bl	800ed48 <tcp_eff_send_mss_netif>
 800f8e8:	4603      	mov	r3, r0
 800f8ea:	461a      	mov	r2, r3
 800f8ec:	697b      	ldr	r3, [r7, #20]
 800f8ee:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800f8f0:	2112      	movs	r1, #18
 800f8f2:	6978      	ldr	r0, [r7, #20]
 800f8f4:	f002 fc9c 	bl	8012230 <tcp_enqueue_flags>
 800f8f8:	4603      	mov	r3, r0
 800f8fa:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800f8fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f900:	2b00      	cmp	r3, #0
 800f902:	d004      	beq.n	800f90e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800f904:	2100      	movs	r1, #0
 800f906:	6978      	ldr	r0, [r7, #20]
 800f908:	f7fd fed4 	bl	800d6b4 <tcp_abandon>
      return;
 800f90c:	e006      	b.n	800f91c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800f90e:	6978      	ldr	r0, [r7, #20]
 800f910:	f002 fd7c 	bl	801240c <tcp_output>
  return;
 800f914:	e001      	b.n	800f91a <tcp_listen_input+0x1be>
    return;
 800f916:	bf00      	nop
 800f918:	e000      	b.n	800f91c <tcp_listen_input+0x1c0>
  return;
 800f91a:	bf00      	nop
}
 800f91c:	371c      	adds	r7, #28
 800f91e:	46bd      	mov	sp, r7
 800f920:	bd90      	pop	{r4, r7, pc}
 800f922:	bf00      	nop
 800f924:	2000be54 	.word	0x2000be54
 800f928:	08019374 	.word	0x08019374
 800f92c:	0801956c 	.word	0x0801956c
 800f930:	080193c0 	.word	0x080193c0
 800f934:	2000be4c 	.word	0x2000be4c
 800f938:	2000be52 	.word	0x2000be52
 800f93c:	2000be48 	.word	0x2000be48
 800f940:	2000be38 	.word	0x2000be38
 800f944:	20008d20 	.word	0x20008d20
 800f948:	20008d24 	.word	0x20008d24
 800f94c:	20008d10 	.word	0x20008d10
 800f950:	2000be1c 	.word	0x2000be1c
 800f954:	2000be24 	.word	0x2000be24

0800f958 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800f958:	b580      	push	{r7, lr}
 800f95a:	b086      	sub	sp, #24
 800f95c:	af04      	add	r7, sp, #16
 800f95e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800f960:	4b2f      	ldr	r3, [pc, #188]	; (800fa20 <tcp_timewait_input+0xc8>)
 800f962:	781b      	ldrb	r3, [r3, #0]
 800f964:	f003 0304 	and.w	r3, r3, #4
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d153      	bne.n	800fa14 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	2b00      	cmp	r3, #0
 800f970:	d106      	bne.n	800f980 <tcp_timewait_input+0x28>
 800f972:	4b2c      	ldr	r3, [pc, #176]	; (800fa24 <tcp_timewait_input+0xcc>)
 800f974:	f240 22ee 	movw	r2, #750	; 0x2ee
 800f978:	492b      	ldr	r1, [pc, #172]	; (800fa28 <tcp_timewait_input+0xd0>)
 800f97a:	482c      	ldr	r0, [pc, #176]	; (800fa2c <tcp_timewait_input+0xd4>)
 800f97c:	f007 f980 	bl	8016c80 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800f980:	4b27      	ldr	r3, [pc, #156]	; (800fa20 <tcp_timewait_input+0xc8>)
 800f982:	781b      	ldrb	r3, [r3, #0]
 800f984:	f003 0302 	and.w	r3, r3, #2
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d02a      	beq.n	800f9e2 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800f98c:	4b28      	ldr	r3, [pc, #160]	; (800fa30 <tcp_timewait_input+0xd8>)
 800f98e:	681a      	ldr	r2, [r3, #0]
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f994:	1ad3      	subs	r3, r2, r3
 800f996:	2b00      	cmp	r3, #0
 800f998:	db2d      	blt.n	800f9f6 <tcp_timewait_input+0x9e>
 800f99a:	4b25      	ldr	r3, [pc, #148]	; (800fa30 <tcp_timewait_input+0xd8>)
 800f99c:	681a      	ldr	r2, [r3, #0]
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9a2:	6879      	ldr	r1, [r7, #4]
 800f9a4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f9a6:	440b      	add	r3, r1
 800f9a8:	1ad3      	subs	r3, r2, r3
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	dc23      	bgt.n	800f9f6 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f9ae:	4b21      	ldr	r3, [pc, #132]	; (800fa34 <tcp_timewait_input+0xdc>)
 800f9b0:	6819      	ldr	r1, [r3, #0]
 800f9b2:	4b21      	ldr	r3, [pc, #132]	; (800fa38 <tcp_timewait_input+0xe0>)
 800f9b4:	881b      	ldrh	r3, [r3, #0]
 800f9b6:	461a      	mov	r2, r3
 800f9b8:	4b1d      	ldr	r3, [pc, #116]	; (800fa30 <tcp_timewait_input+0xd8>)
 800f9ba:	681b      	ldr	r3, [r3, #0]
 800f9bc:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f9be:	4b1f      	ldr	r3, [pc, #124]	; (800fa3c <tcp_timewait_input+0xe4>)
 800f9c0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f9c2:	885b      	ldrh	r3, [r3, #2]
 800f9c4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f9c6:	4a1d      	ldr	r2, [pc, #116]	; (800fa3c <tcp_timewait_input+0xe4>)
 800f9c8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f9ca:	8812      	ldrh	r2, [r2, #0]
 800f9cc:	b292      	uxth	r2, r2
 800f9ce:	9202      	str	r2, [sp, #8]
 800f9d0:	9301      	str	r3, [sp, #4]
 800f9d2:	4b1b      	ldr	r3, [pc, #108]	; (800fa40 <tcp_timewait_input+0xe8>)
 800f9d4:	9300      	str	r3, [sp, #0]
 800f9d6:	4b1b      	ldr	r3, [pc, #108]	; (800fa44 <tcp_timewait_input+0xec>)
 800f9d8:	4602      	mov	r2, r0
 800f9da:	6878      	ldr	r0, [r7, #4]
 800f9dc:	f003 faca 	bl	8012f74 <tcp_rst>
      return;
 800f9e0:	e01b      	b.n	800fa1a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800f9e2:	4b0f      	ldr	r3, [pc, #60]	; (800fa20 <tcp_timewait_input+0xc8>)
 800f9e4:	781b      	ldrb	r3, [r3, #0]
 800f9e6:	f003 0301 	and.w	r3, r3, #1
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d003      	beq.n	800f9f6 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800f9ee:	4b16      	ldr	r3, [pc, #88]	; (800fa48 <tcp_timewait_input+0xf0>)
 800f9f0:	681a      	ldr	r2, [r3, #0]
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800f9f6:	4b10      	ldr	r3, [pc, #64]	; (800fa38 <tcp_timewait_input+0xe0>)
 800f9f8:	881b      	ldrh	r3, [r3, #0]
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d00c      	beq.n	800fa18 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	8b5b      	ldrh	r3, [r3, #26]
 800fa02:	f043 0302 	orr.w	r3, r3, #2
 800fa06:	b29a      	uxth	r2, r3
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800fa0c:	6878      	ldr	r0, [r7, #4]
 800fa0e:	f002 fcfd 	bl	801240c <tcp_output>
  }
  return;
 800fa12:	e001      	b.n	800fa18 <tcp_timewait_input+0xc0>
    return;
 800fa14:	bf00      	nop
 800fa16:	e000      	b.n	800fa1a <tcp_timewait_input+0xc2>
  return;
 800fa18:	bf00      	nop
}
 800fa1a:	3708      	adds	r7, #8
 800fa1c:	46bd      	mov	sp, r7
 800fa1e:	bd80      	pop	{r7, pc}
 800fa20:	2000be54 	.word	0x2000be54
 800fa24:	08019374 	.word	0x08019374
 800fa28:	0801958c 	.word	0x0801958c
 800fa2c:	080193c0 	.word	0x080193c0
 800fa30:	2000be48 	.word	0x2000be48
 800fa34:	2000be4c 	.word	0x2000be4c
 800fa38:	2000be52 	.word	0x2000be52
 800fa3c:	2000be38 	.word	0x2000be38
 800fa40:	20008d20 	.word	0x20008d20
 800fa44:	20008d24 	.word	0x20008d24
 800fa48:	2000be10 	.word	0x2000be10

0800fa4c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800fa4c:	b590      	push	{r4, r7, lr}
 800fa4e:	b08d      	sub	sp, #52	; 0x34
 800fa50:	af04      	add	r7, sp, #16
 800fa52:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800fa54:	2300      	movs	r3, #0
 800fa56:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800fa58:	2300      	movs	r3, #0
 800fa5a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	d106      	bne.n	800fa70 <tcp_process+0x24>
 800fa62:	4b9d      	ldr	r3, [pc, #628]	; (800fcd8 <tcp_process+0x28c>)
 800fa64:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800fa68:	499c      	ldr	r1, [pc, #624]	; (800fcdc <tcp_process+0x290>)
 800fa6a:	489d      	ldr	r0, [pc, #628]	; (800fce0 <tcp_process+0x294>)
 800fa6c:	f007 f908 	bl	8016c80 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800fa70:	4b9c      	ldr	r3, [pc, #624]	; (800fce4 <tcp_process+0x298>)
 800fa72:	781b      	ldrb	r3, [r3, #0]
 800fa74:	f003 0304 	and.w	r3, r3, #4
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d04e      	beq.n	800fb1a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	7d1b      	ldrb	r3, [r3, #20]
 800fa80:	2b02      	cmp	r3, #2
 800fa82:	d108      	bne.n	800fa96 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fa88:	4b97      	ldr	r3, [pc, #604]	; (800fce8 <tcp_process+0x29c>)
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	429a      	cmp	r2, r3
 800fa8e:	d123      	bne.n	800fad8 <tcp_process+0x8c>
        acceptable = 1;
 800fa90:	2301      	movs	r3, #1
 800fa92:	76fb      	strb	r3, [r7, #27]
 800fa94:	e020      	b.n	800fad8 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fa9a:	4b94      	ldr	r3, [pc, #592]	; (800fcec <tcp_process+0x2a0>)
 800fa9c:	681b      	ldr	r3, [r3, #0]
 800fa9e:	429a      	cmp	r2, r3
 800faa0:	d102      	bne.n	800faa8 <tcp_process+0x5c>
        acceptable = 1;
 800faa2:	2301      	movs	r3, #1
 800faa4:	76fb      	strb	r3, [r7, #27]
 800faa6:	e017      	b.n	800fad8 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800faa8:	4b90      	ldr	r3, [pc, #576]	; (800fcec <tcp_process+0x2a0>)
 800faaa:	681a      	ldr	r2, [r3, #0]
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fab0:	1ad3      	subs	r3, r2, r3
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	db10      	blt.n	800fad8 <tcp_process+0x8c>
 800fab6:	4b8d      	ldr	r3, [pc, #564]	; (800fcec <tcp_process+0x2a0>)
 800fab8:	681a      	ldr	r2, [r3, #0]
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fabe:	6879      	ldr	r1, [r7, #4]
 800fac0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fac2:	440b      	add	r3, r1
 800fac4:	1ad3      	subs	r3, r2, r3
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	dc06      	bgt.n	800fad8 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	8b5b      	ldrh	r3, [r3, #26]
 800face:	f043 0302 	orr.w	r3, r3, #2
 800fad2:	b29a      	uxth	r2, r3
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800fad8:	7efb      	ldrb	r3, [r7, #27]
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d01b      	beq.n	800fb16 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	7d1b      	ldrb	r3, [r3, #20]
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	d106      	bne.n	800faf4 <tcp_process+0xa8>
 800fae6:	4b7c      	ldr	r3, [pc, #496]	; (800fcd8 <tcp_process+0x28c>)
 800fae8:	f44f 724e 	mov.w	r2, #824	; 0x338
 800faec:	4980      	ldr	r1, [pc, #512]	; (800fcf0 <tcp_process+0x2a4>)
 800faee:	487c      	ldr	r0, [pc, #496]	; (800fce0 <tcp_process+0x294>)
 800faf0:	f007 f8c6 	bl	8016c80 <iprintf>
      recv_flags |= TF_RESET;
 800faf4:	4b7f      	ldr	r3, [pc, #508]	; (800fcf4 <tcp_process+0x2a8>)
 800faf6:	781b      	ldrb	r3, [r3, #0]
 800faf8:	f043 0308 	orr.w	r3, r3, #8
 800fafc:	b2da      	uxtb	r2, r3
 800fafe:	4b7d      	ldr	r3, [pc, #500]	; (800fcf4 <tcp_process+0x2a8>)
 800fb00:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	8b5b      	ldrh	r3, [r3, #26]
 800fb06:	f023 0301 	bic.w	r3, r3, #1
 800fb0a:	b29a      	uxth	r2, r3
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800fb10:	f06f 030d 	mvn.w	r3, #13
 800fb14:	e37a      	b.n	801020c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800fb16:	2300      	movs	r3, #0
 800fb18:	e378      	b.n	801020c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800fb1a:	4b72      	ldr	r3, [pc, #456]	; (800fce4 <tcp_process+0x298>)
 800fb1c:	781b      	ldrb	r3, [r3, #0]
 800fb1e:	f003 0302 	and.w	r3, r3, #2
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	d010      	beq.n	800fb48 <tcp_process+0xfc>
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	7d1b      	ldrb	r3, [r3, #20]
 800fb2a:	2b02      	cmp	r3, #2
 800fb2c:	d00c      	beq.n	800fb48 <tcp_process+0xfc>
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	7d1b      	ldrb	r3, [r3, #20]
 800fb32:	2b03      	cmp	r3, #3
 800fb34:	d008      	beq.n	800fb48 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	8b5b      	ldrh	r3, [r3, #26]
 800fb3a:	f043 0302 	orr.w	r3, r3, #2
 800fb3e:	b29a      	uxth	r2, r3
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800fb44:	2300      	movs	r3, #0
 800fb46:	e361      	b.n	801020c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	8b5b      	ldrh	r3, [r3, #26]
 800fb4c:	f003 0310 	and.w	r3, r3, #16
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	d103      	bne.n	800fb5c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800fb54:	4b68      	ldr	r3, [pc, #416]	; (800fcf8 <tcp_process+0x2ac>)
 800fb56:	681a      	ldr	r2, [r3, #0]
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	2200      	movs	r2, #0
 800fb60:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	2200      	movs	r2, #0
 800fb68:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800fb6c:	6878      	ldr	r0, [r7, #4]
 800fb6e:	f001 fc2f 	bl	80113d0 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	7d1b      	ldrb	r3, [r3, #20]
 800fb76:	3b02      	subs	r3, #2
 800fb78:	2b07      	cmp	r3, #7
 800fb7a:	f200 8337 	bhi.w	80101ec <tcp_process+0x7a0>
 800fb7e:	a201      	add	r2, pc, #4	; (adr r2, 800fb84 <tcp_process+0x138>)
 800fb80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb84:	0800fba5 	.word	0x0800fba5
 800fb88:	0800fdd5 	.word	0x0800fdd5
 800fb8c:	0800ff4d 	.word	0x0800ff4d
 800fb90:	0800ff77 	.word	0x0800ff77
 800fb94:	0801009b 	.word	0x0801009b
 800fb98:	0800ff4d 	.word	0x0800ff4d
 800fb9c:	08010127 	.word	0x08010127
 800fba0:	080101b7 	.word	0x080101b7
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800fba4:	4b4f      	ldr	r3, [pc, #316]	; (800fce4 <tcp_process+0x298>)
 800fba6:	781b      	ldrb	r3, [r3, #0]
 800fba8:	f003 0310 	and.w	r3, r3, #16
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	f000 80e4 	beq.w	800fd7a <tcp_process+0x32e>
 800fbb2:	4b4c      	ldr	r3, [pc, #304]	; (800fce4 <tcp_process+0x298>)
 800fbb4:	781b      	ldrb	r3, [r3, #0]
 800fbb6:	f003 0302 	and.w	r3, r3, #2
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	f000 80dd 	beq.w	800fd7a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fbc4:	1c5a      	adds	r2, r3, #1
 800fbc6:	4b48      	ldr	r3, [pc, #288]	; (800fce8 <tcp_process+0x29c>)
 800fbc8:	681b      	ldr	r3, [r3, #0]
 800fbca:	429a      	cmp	r2, r3
 800fbcc:	f040 80d5 	bne.w	800fd7a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800fbd0:	4b46      	ldr	r3, [pc, #280]	; (800fcec <tcp_process+0x2a0>)
 800fbd2:	681b      	ldr	r3, [r3, #0]
 800fbd4:	1c5a      	adds	r2, r3, #1
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800fbe2:	4b41      	ldr	r3, [pc, #260]	; (800fce8 <tcp_process+0x29c>)
 800fbe4:	681a      	ldr	r2, [r3, #0]
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800fbea:	4b44      	ldr	r3, [pc, #272]	; (800fcfc <tcp_process+0x2b0>)
 800fbec:	681b      	ldr	r3, [r3, #0]
 800fbee:	89db      	ldrh	r3, [r3, #14]
 800fbf0:	b29a      	uxth	r2, r3
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800fc04:	4b39      	ldr	r3, [pc, #228]	; (800fcec <tcp_process+0x2a0>)
 800fc06:	681b      	ldr	r3, [r3, #0]
 800fc08:	1e5a      	subs	r2, r3, #1
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	2204      	movs	r2, #4
 800fc12:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	3304      	adds	r3, #4
 800fc1c:	4618      	mov	r0, r3
 800fc1e:	f004 ffd7 	bl	8014bd0 <ip4_route>
 800fc22:	4601      	mov	r1, r0
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	3304      	adds	r3, #4
 800fc28:	461a      	mov	r2, r3
 800fc2a:	4620      	mov	r0, r4
 800fc2c:	f7ff f88c 	bl	800ed48 <tcp_eff_send_mss_netif>
 800fc30:	4603      	mov	r3, r0
 800fc32:	461a      	mov	r2, r3
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fc3c:	009a      	lsls	r2, r3, #2
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fc42:	005b      	lsls	r3, r3, #1
 800fc44:	f241 111c 	movw	r1, #4380	; 0x111c
 800fc48:	428b      	cmp	r3, r1
 800fc4a:	bf38      	it	cc
 800fc4c:	460b      	movcc	r3, r1
 800fc4e:	429a      	cmp	r2, r3
 800fc50:	d204      	bcs.n	800fc5c <tcp_process+0x210>
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fc56:	009b      	lsls	r3, r3, #2
 800fc58:	b29b      	uxth	r3, r3
 800fc5a:	e00d      	b.n	800fc78 <tcp_process+0x22c>
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fc60:	005b      	lsls	r3, r3, #1
 800fc62:	f241 121c 	movw	r2, #4380	; 0x111c
 800fc66:	4293      	cmp	r3, r2
 800fc68:	d904      	bls.n	800fc74 <tcp_process+0x228>
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fc6e:	005b      	lsls	r3, r3, #1
 800fc70:	b29b      	uxth	r3, r3
 800fc72:	e001      	b.n	800fc78 <tcp_process+0x22c>
 800fc74:	f241 131c 	movw	r3, #4380	; 0x111c
 800fc78:	687a      	ldr	r2, [r7, #4]
 800fc7a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fc84:	2b00      	cmp	r3, #0
 800fc86:	d106      	bne.n	800fc96 <tcp_process+0x24a>
 800fc88:	4b13      	ldr	r3, [pc, #76]	; (800fcd8 <tcp_process+0x28c>)
 800fc8a:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800fc8e:	491c      	ldr	r1, [pc, #112]	; (800fd00 <tcp_process+0x2b4>)
 800fc90:	4813      	ldr	r0, [pc, #76]	; (800fce0 <tcp_process+0x294>)
 800fc92:	f006 fff5 	bl	8016c80 <iprintf>
        --pcb->snd_queuelen;
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fc9c:	3b01      	subs	r3, #1
 800fc9e:	b29a      	uxth	r2, r3
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fcaa:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800fcac:	69fb      	ldr	r3, [r7, #28]
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	d12a      	bne.n	800fd08 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fcb6:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800fcb8:	69fb      	ldr	r3, [r7, #28]
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	d106      	bne.n	800fccc <tcp_process+0x280>
 800fcbe:	4b06      	ldr	r3, [pc, #24]	; (800fcd8 <tcp_process+0x28c>)
 800fcc0:	f44f 725d 	mov.w	r2, #884	; 0x374
 800fcc4:	490f      	ldr	r1, [pc, #60]	; (800fd04 <tcp_process+0x2b8>)
 800fcc6:	4806      	ldr	r0, [pc, #24]	; (800fce0 <tcp_process+0x294>)
 800fcc8:	f006 ffda 	bl	8016c80 <iprintf>
          pcb->unsent = rseg->next;
 800fccc:	69fb      	ldr	r3, [r7, #28]
 800fcce:	681a      	ldr	r2, [r3, #0]
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	66da      	str	r2, [r3, #108]	; 0x6c
 800fcd4:	e01c      	b.n	800fd10 <tcp_process+0x2c4>
 800fcd6:	bf00      	nop
 800fcd8:	08019374 	.word	0x08019374
 800fcdc:	080195ac 	.word	0x080195ac
 800fce0:	080193c0 	.word	0x080193c0
 800fce4:	2000be54 	.word	0x2000be54
 800fce8:	2000be4c 	.word	0x2000be4c
 800fcec:	2000be48 	.word	0x2000be48
 800fcf0:	080195c8 	.word	0x080195c8
 800fcf4:	2000be55 	.word	0x2000be55
 800fcf8:	2000be10 	.word	0x2000be10
 800fcfc:	2000be38 	.word	0x2000be38
 800fd00:	080195e8 	.word	0x080195e8
 800fd04:	08019600 	.word	0x08019600
        } else {
          pcb->unacked = rseg->next;
 800fd08:	69fb      	ldr	r3, [r7, #28]
 800fd0a:	681a      	ldr	r2, [r3, #0]
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800fd10:	69f8      	ldr	r0, [r7, #28]
 800fd12:	f7fe fc6e 	bl	800e5f2 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	d104      	bne.n	800fd28 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fd24:	861a      	strh	r2, [r3, #48]	; 0x30
 800fd26:	e006      	b.n	800fd36 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	2200      	movs	r2, #0
 800fd2c:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	2200      	movs	r2, #0
 800fd32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d00a      	beq.n	800fd56 <tcp_process+0x30a>
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fd46:	687a      	ldr	r2, [r7, #4]
 800fd48:	6910      	ldr	r0, [r2, #16]
 800fd4a:	2200      	movs	r2, #0
 800fd4c:	6879      	ldr	r1, [r7, #4]
 800fd4e:	4798      	blx	r3
 800fd50:	4603      	mov	r3, r0
 800fd52:	76bb      	strb	r3, [r7, #26]
 800fd54:	e001      	b.n	800fd5a <tcp_process+0x30e>
 800fd56:	2300      	movs	r3, #0
 800fd58:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800fd5a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800fd5e:	f113 0f0d 	cmn.w	r3, #13
 800fd62:	d102      	bne.n	800fd6a <tcp_process+0x31e>
          return ERR_ABRT;
 800fd64:	f06f 030c 	mvn.w	r3, #12
 800fd68:	e250      	b.n	801020c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	8b5b      	ldrh	r3, [r3, #26]
 800fd6e:	f043 0302 	orr.w	r3, r3, #2
 800fd72:	b29a      	uxth	r2, r3
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800fd78:	e23a      	b.n	80101f0 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800fd7a:	4b98      	ldr	r3, [pc, #608]	; (800ffdc <tcp_process+0x590>)
 800fd7c:	781b      	ldrb	r3, [r3, #0]
 800fd7e:	f003 0310 	and.w	r3, r3, #16
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	f000 8234 	beq.w	80101f0 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fd88:	4b95      	ldr	r3, [pc, #596]	; (800ffe0 <tcp_process+0x594>)
 800fd8a:	6819      	ldr	r1, [r3, #0]
 800fd8c:	4b95      	ldr	r3, [pc, #596]	; (800ffe4 <tcp_process+0x598>)
 800fd8e:	881b      	ldrh	r3, [r3, #0]
 800fd90:	461a      	mov	r2, r3
 800fd92:	4b95      	ldr	r3, [pc, #596]	; (800ffe8 <tcp_process+0x59c>)
 800fd94:	681b      	ldr	r3, [r3, #0]
 800fd96:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fd98:	4b94      	ldr	r3, [pc, #592]	; (800ffec <tcp_process+0x5a0>)
 800fd9a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fd9c:	885b      	ldrh	r3, [r3, #2]
 800fd9e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fda0:	4a92      	ldr	r2, [pc, #584]	; (800ffec <tcp_process+0x5a0>)
 800fda2:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fda4:	8812      	ldrh	r2, [r2, #0]
 800fda6:	b292      	uxth	r2, r2
 800fda8:	9202      	str	r2, [sp, #8]
 800fdaa:	9301      	str	r3, [sp, #4]
 800fdac:	4b90      	ldr	r3, [pc, #576]	; (800fff0 <tcp_process+0x5a4>)
 800fdae:	9300      	str	r3, [sp, #0]
 800fdb0:	4b90      	ldr	r3, [pc, #576]	; (800fff4 <tcp_process+0x5a8>)
 800fdb2:	4602      	mov	r2, r0
 800fdb4:	6878      	ldr	r0, [r7, #4]
 800fdb6:	f003 f8dd 	bl	8012f74 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fdc0:	2b05      	cmp	r3, #5
 800fdc2:	f200 8215 	bhi.w	80101f0 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	2200      	movs	r2, #0
 800fdca:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800fdcc:	6878      	ldr	r0, [r7, #4]
 800fdce:	f002 fea7 	bl	8012b20 <tcp_rexmit_rto>
      break;
 800fdd2:	e20d      	b.n	80101f0 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800fdd4:	4b81      	ldr	r3, [pc, #516]	; (800ffdc <tcp_process+0x590>)
 800fdd6:	781b      	ldrb	r3, [r3, #0]
 800fdd8:	f003 0310 	and.w	r3, r3, #16
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	f000 80a1 	beq.w	800ff24 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800fde2:	4b7f      	ldr	r3, [pc, #508]	; (800ffe0 <tcp_process+0x594>)
 800fde4:	681a      	ldr	r2, [r3, #0]
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fdea:	1ad3      	subs	r3, r2, r3
 800fdec:	3b01      	subs	r3, #1
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	db7e      	blt.n	800fef0 <tcp_process+0x4a4>
 800fdf2:	4b7b      	ldr	r3, [pc, #492]	; (800ffe0 <tcp_process+0x594>)
 800fdf4:	681a      	ldr	r2, [r3, #0]
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fdfa:	1ad3      	subs	r3, r2, r3
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	dc77      	bgt.n	800fef0 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	2204      	movs	r2, #4
 800fe04:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d102      	bne.n	800fe14 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800fe0e:	23fa      	movs	r3, #250	; 0xfa
 800fe10:	76bb      	strb	r3, [r7, #26]
 800fe12:	e01d      	b.n	800fe50 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fe18:	699b      	ldr	r3, [r3, #24]
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d106      	bne.n	800fe2c <tcp_process+0x3e0>
 800fe1e:	4b76      	ldr	r3, [pc, #472]	; (800fff8 <tcp_process+0x5ac>)
 800fe20:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800fe24:	4975      	ldr	r1, [pc, #468]	; (800fffc <tcp_process+0x5b0>)
 800fe26:	4876      	ldr	r0, [pc, #472]	; (8010000 <tcp_process+0x5b4>)
 800fe28:	f006 ff2a 	bl	8016c80 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fe30:	699b      	ldr	r3, [r3, #24]
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d00a      	beq.n	800fe4c <tcp_process+0x400>
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fe3a:	699b      	ldr	r3, [r3, #24]
 800fe3c:	687a      	ldr	r2, [r7, #4]
 800fe3e:	6910      	ldr	r0, [r2, #16]
 800fe40:	2200      	movs	r2, #0
 800fe42:	6879      	ldr	r1, [r7, #4]
 800fe44:	4798      	blx	r3
 800fe46:	4603      	mov	r3, r0
 800fe48:	76bb      	strb	r3, [r7, #26]
 800fe4a:	e001      	b.n	800fe50 <tcp_process+0x404>
 800fe4c:	23f0      	movs	r3, #240	; 0xf0
 800fe4e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800fe50:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	d00a      	beq.n	800fe6e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800fe58:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800fe5c:	f113 0f0d 	cmn.w	r3, #13
 800fe60:	d002      	beq.n	800fe68 <tcp_process+0x41c>
              tcp_abort(pcb);
 800fe62:	6878      	ldr	r0, [r7, #4]
 800fe64:	f7fd fce4 	bl	800d830 <tcp_abort>
            }
            return ERR_ABRT;
 800fe68:	f06f 030c 	mvn.w	r3, #12
 800fe6c:	e1ce      	b.n	801020c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800fe6e:	6878      	ldr	r0, [r7, #4]
 800fe70:	f000 fae0 	bl	8010434 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800fe74:	4b63      	ldr	r3, [pc, #396]	; (8010004 <tcp_process+0x5b8>)
 800fe76:	881b      	ldrh	r3, [r3, #0]
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	d005      	beq.n	800fe88 <tcp_process+0x43c>
            recv_acked--;
 800fe7c:	4b61      	ldr	r3, [pc, #388]	; (8010004 <tcp_process+0x5b8>)
 800fe7e:	881b      	ldrh	r3, [r3, #0]
 800fe80:	3b01      	subs	r3, #1
 800fe82:	b29a      	uxth	r2, r3
 800fe84:	4b5f      	ldr	r3, [pc, #380]	; (8010004 <tcp_process+0x5b8>)
 800fe86:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fe8c:	009a      	lsls	r2, r3, #2
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fe92:	005b      	lsls	r3, r3, #1
 800fe94:	f241 111c 	movw	r1, #4380	; 0x111c
 800fe98:	428b      	cmp	r3, r1
 800fe9a:	bf38      	it	cc
 800fe9c:	460b      	movcc	r3, r1
 800fe9e:	429a      	cmp	r2, r3
 800fea0:	d204      	bcs.n	800feac <tcp_process+0x460>
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fea6:	009b      	lsls	r3, r3, #2
 800fea8:	b29b      	uxth	r3, r3
 800feaa:	e00d      	b.n	800fec8 <tcp_process+0x47c>
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800feb0:	005b      	lsls	r3, r3, #1
 800feb2:	f241 121c 	movw	r2, #4380	; 0x111c
 800feb6:	4293      	cmp	r3, r2
 800feb8:	d904      	bls.n	800fec4 <tcp_process+0x478>
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800febe:	005b      	lsls	r3, r3, #1
 800fec0:	b29b      	uxth	r3, r3
 800fec2:	e001      	b.n	800fec8 <tcp_process+0x47c>
 800fec4:	f241 131c 	movw	r3, #4380	; 0x111c
 800fec8:	687a      	ldr	r2, [r7, #4]
 800feca:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800fece:	4b4e      	ldr	r3, [pc, #312]	; (8010008 <tcp_process+0x5bc>)
 800fed0:	781b      	ldrb	r3, [r3, #0]
 800fed2:	f003 0320 	and.w	r3, r3, #32
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d037      	beq.n	800ff4a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	8b5b      	ldrh	r3, [r3, #26]
 800fede:	f043 0302 	orr.w	r3, r3, #2
 800fee2:	b29a      	uxth	r2, r3
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	2207      	movs	r2, #7
 800feec:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800feee:	e02c      	b.n	800ff4a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fef0:	4b3b      	ldr	r3, [pc, #236]	; (800ffe0 <tcp_process+0x594>)
 800fef2:	6819      	ldr	r1, [r3, #0]
 800fef4:	4b3b      	ldr	r3, [pc, #236]	; (800ffe4 <tcp_process+0x598>)
 800fef6:	881b      	ldrh	r3, [r3, #0]
 800fef8:	461a      	mov	r2, r3
 800fefa:	4b3b      	ldr	r3, [pc, #236]	; (800ffe8 <tcp_process+0x59c>)
 800fefc:	681b      	ldr	r3, [r3, #0]
 800fefe:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ff00:	4b3a      	ldr	r3, [pc, #232]	; (800ffec <tcp_process+0x5a0>)
 800ff02:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ff04:	885b      	ldrh	r3, [r3, #2]
 800ff06:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ff08:	4a38      	ldr	r2, [pc, #224]	; (800ffec <tcp_process+0x5a0>)
 800ff0a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ff0c:	8812      	ldrh	r2, [r2, #0]
 800ff0e:	b292      	uxth	r2, r2
 800ff10:	9202      	str	r2, [sp, #8]
 800ff12:	9301      	str	r3, [sp, #4]
 800ff14:	4b36      	ldr	r3, [pc, #216]	; (800fff0 <tcp_process+0x5a4>)
 800ff16:	9300      	str	r3, [sp, #0]
 800ff18:	4b36      	ldr	r3, [pc, #216]	; (800fff4 <tcp_process+0x5a8>)
 800ff1a:	4602      	mov	r2, r0
 800ff1c:	6878      	ldr	r0, [r7, #4]
 800ff1e:	f003 f829 	bl	8012f74 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800ff22:	e167      	b.n	80101f4 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800ff24:	4b2d      	ldr	r3, [pc, #180]	; (800ffdc <tcp_process+0x590>)
 800ff26:	781b      	ldrb	r3, [r3, #0]
 800ff28:	f003 0302 	and.w	r3, r3, #2
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	f000 8161 	beq.w	80101f4 <tcp_process+0x7a8>
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff36:	1e5a      	subs	r2, r3, #1
 800ff38:	4b2b      	ldr	r3, [pc, #172]	; (800ffe8 <tcp_process+0x59c>)
 800ff3a:	681b      	ldr	r3, [r3, #0]
 800ff3c:	429a      	cmp	r2, r3
 800ff3e:	f040 8159 	bne.w	80101f4 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800ff42:	6878      	ldr	r0, [r7, #4]
 800ff44:	f002 fe0e 	bl	8012b64 <tcp_rexmit>
      break;
 800ff48:	e154      	b.n	80101f4 <tcp_process+0x7a8>
 800ff4a:	e153      	b.n	80101f4 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800ff4c:	6878      	ldr	r0, [r7, #4]
 800ff4e:	f000 fa71 	bl	8010434 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800ff52:	4b2d      	ldr	r3, [pc, #180]	; (8010008 <tcp_process+0x5bc>)
 800ff54:	781b      	ldrb	r3, [r3, #0]
 800ff56:	f003 0320 	and.w	r3, r3, #32
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	f000 814c 	beq.w	80101f8 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	8b5b      	ldrh	r3, [r3, #26]
 800ff64:	f043 0302 	orr.w	r3, r3, #2
 800ff68:	b29a      	uxth	r2, r3
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	2207      	movs	r2, #7
 800ff72:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ff74:	e140      	b.n	80101f8 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800ff76:	6878      	ldr	r0, [r7, #4]
 800ff78:	f000 fa5c 	bl	8010434 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800ff7c:	4b22      	ldr	r3, [pc, #136]	; (8010008 <tcp_process+0x5bc>)
 800ff7e:	781b      	ldrb	r3, [r3, #0]
 800ff80:	f003 0320 	and.w	r3, r3, #32
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	d071      	beq.n	801006c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ff88:	4b14      	ldr	r3, [pc, #80]	; (800ffdc <tcp_process+0x590>)
 800ff8a:	781b      	ldrb	r3, [r3, #0]
 800ff8c:	f003 0310 	and.w	r3, r3, #16
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	d060      	beq.n	8010056 <tcp_process+0x60a>
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ff98:	4b11      	ldr	r3, [pc, #68]	; (800ffe0 <tcp_process+0x594>)
 800ff9a:	681b      	ldr	r3, [r3, #0]
 800ff9c:	429a      	cmp	r2, r3
 800ff9e:	d15a      	bne.n	8010056 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d156      	bne.n	8010056 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	8b5b      	ldrh	r3, [r3, #26]
 800ffac:	f043 0302 	orr.w	r3, r3, #2
 800ffb0:	b29a      	uxth	r2, r3
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800ffb6:	6878      	ldr	r0, [r7, #4]
 800ffb8:	f7fe fdbc 	bl	800eb34 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800ffbc:	4b13      	ldr	r3, [pc, #76]	; (801000c <tcp_process+0x5c0>)
 800ffbe:	681b      	ldr	r3, [r3, #0]
 800ffc0:	687a      	ldr	r2, [r7, #4]
 800ffc2:	429a      	cmp	r2, r3
 800ffc4:	d105      	bne.n	800ffd2 <tcp_process+0x586>
 800ffc6:	4b11      	ldr	r3, [pc, #68]	; (801000c <tcp_process+0x5c0>)
 800ffc8:	681b      	ldr	r3, [r3, #0]
 800ffca:	68db      	ldr	r3, [r3, #12]
 800ffcc:	4a0f      	ldr	r2, [pc, #60]	; (801000c <tcp_process+0x5c0>)
 800ffce:	6013      	str	r3, [r2, #0]
 800ffd0:	e02e      	b.n	8010030 <tcp_process+0x5e4>
 800ffd2:	4b0e      	ldr	r3, [pc, #56]	; (801000c <tcp_process+0x5c0>)
 800ffd4:	681b      	ldr	r3, [r3, #0]
 800ffd6:	617b      	str	r3, [r7, #20]
 800ffd8:	e027      	b.n	801002a <tcp_process+0x5de>
 800ffda:	bf00      	nop
 800ffdc:	2000be54 	.word	0x2000be54
 800ffe0:	2000be4c 	.word	0x2000be4c
 800ffe4:	2000be52 	.word	0x2000be52
 800ffe8:	2000be48 	.word	0x2000be48
 800ffec:	2000be38 	.word	0x2000be38
 800fff0:	20008d20 	.word	0x20008d20
 800fff4:	20008d24 	.word	0x20008d24
 800fff8:	08019374 	.word	0x08019374
 800fffc:	08019614 	.word	0x08019614
 8010000:	080193c0 	.word	0x080193c0
 8010004:	2000be50 	.word	0x2000be50
 8010008:	2000be55 	.word	0x2000be55
 801000c:	2000be1c 	.word	0x2000be1c
 8010010:	697b      	ldr	r3, [r7, #20]
 8010012:	68db      	ldr	r3, [r3, #12]
 8010014:	687a      	ldr	r2, [r7, #4]
 8010016:	429a      	cmp	r2, r3
 8010018:	d104      	bne.n	8010024 <tcp_process+0x5d8>
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	68da      	ldr	r2, [r3, #12]
 801001e:	697b      	ldr	r3, [r7, #20]
 8010020:	60da      	str	r2, [r3, #12]
 8010022:	e005      	b.n	8010030 <tcp_process+0x5e4>
 8010024:	697b      	ldr	r3, [r7, #20]
 8010026:	68db      	ldr	r3, [r3, #12]
 8010028:	617b      	str	r3, [r7, #20]
 801002a:	697b      	ldr	r3, [r7, #20]
 801002c:	2b00      	cmp	r3, #0
 801002e:	d1ef      	bne.n	8010010 <tcp_process+0x5c4>
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	2200      	movs	r2, #0
 8010034:	60da      	str	r2, [r3, #12]
 8010036:	4b77      	ldr	r3, [pc, #476]	; (8010214 <tcp_process+0x7c8>)
 8010038:	2201      	movs	r2, #1
 801003a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	220a      	movs	r2, #10
 8010040:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8010042:	4b75      	ldr	r3, [pc, #468]	; (8010218 <tcp_process+0x7cc>)
 8010044:	681a      	ldr	r2, [r3, #0]
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	60da      	str	r2, [r3, #12]
 801004a:	4a73      	ldr	r2, [pc, #460]	; (8010218 <tcp_process+0x7cc>)
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	6013      	str	r3, [r2, #0]
 8010050:	f003 f952 	bl	80132f8 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8010054:	e0d2      	b.n	80101fc <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	8b5b      	ldrh	r3, [r3, #26]
 801005a:	f043 0302 	orr.w	r3, r3, #2
 801005e:	b29a      	uxth	r2, r3
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	2208      	movs	r2, #8
 8010068:	751a      	strb	r2, [r3, #20]
      break;
 801006a:	e0c7      	b.n	80101fc <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801006c:	4b6b      	ldr	r3, [pc, #428]	; (801021c <tcp_process+0x7d0>)
 801006e:	781b      	ldrb	r3, [r3, #0]
 8010070:	f003 0310 	and.w	r3, r3, #16
 8010074:	2b00      	cmp	r3, #0
 8010076:	f000 80c1 	beq.w	80101fc <tcp_process+0x7b0>
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801007e:	4b68      	ldr	r3, [pc, #416]	; (8010220 <tcp_process+0x7d4>)
 8010080:	681b      	ldr	r3, [r3, #0]
 8010082:	429a      	cmp	r2, r3
 8010084:	f040 80ba 	bne.w	80101fc <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801008c:	2b00      	cmp	r3, #0
 801008e:	f040 80b5 	bne.w	80101fc <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	2206      	movs	r2, #6
 8010096:	751a      	strb	r2, [r3, #20]
      break;
 8010098:	e0b0      	b.n	80101fc <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801009a:	6878      	ldr	r0, [r7, #4]
 801009c:	f000 f9ca 	bl	8010434 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80100a0:	4b60      	ldr	r3, [pc, #384]	; (8010224 <tcp_process+0x7d8>)
 80100a2:	781b      	ldrb	r3, [r3, #0]
 80100a4:	f003 0320 	and.w	r3, r3, #32
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	f000 80a9 	beq.w	8010200 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	8b5b      	ldrh	r3, [r3, #26]
 80100b2:	f043 0302 	orr.w	r3, r3, #2
 80100b6:	b29a      	uxth	r2, r3
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80100bc:	6878      	ldr	r0, [r7, #4]
 80100be:	f7fe fd39 	bl	800eb34 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80100c2:	4b59      	ldr	r3, [pc, #356]	; (8010228 <tcp_process+0x7dc>)
 80100c4:	681b      	ldr	r3, [r3, #0]
 80100c6:	687a      	ldr	r2, [r7, #4]
 80100c8:	429a      	cmp	r2, r3
 80100ca:	d105      	bne.n	80100d8 <tcp_process+0x68c>
 80100cc:	4b56      	ldr	r3, [pc, #344]	; (8010228 <tcp_process+0x7dc>)
 80100ce:	681b      	ldr	r3, [r3, #0]
 80100d0:	68db      	ldr	r3, [r3, #12]
 80100d2:	4a55      	ldr	r2, [pc, #340]	; (8010228 <tcp_process+0x7dc>)
 80100d4:	6013      	str	r3, [r2, #0]
 80100d6:	e013      	b.n	8010100 <tcp_process+0x6b4>
 80100d8:	4b53      	ldr	r3, [pc, #332]	; (8010228 <tcp_process+0x7dc>)
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	613b      	str	r3, [r7, #16]
 80100de:	e00c      	b.n	80100fa <tcp_process+0x6ae>
 80100e0:	693b      	ldr	r3, [r7, #16]
 80100e2:	68db      	ldr	r3, [r3, #12]
 80100e4:	687a      	ldr	r2, [r7, #4]
 80100e6:	429a      	cmp	r2, r3
 80100e8:	d104      	bne.n	80100f4 <tcp_process+0x6a8>
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	68da      	ldr	r2, [r3, #12]
 80100ee:	693b      	ldr	r3, [r7, #16]
 80100f0:	60da      	str	r2, [r3, #12]
 80100f2:	e005      	b.n	8010100 <tcp_process+0x6b4>
 80100f4:	693b      	ldr	r3, [r7, #16]
 80100f6:	68db      	ldr	r3, [r3, #12]
 80100f8:	613b      	str	r3, [r7, #16]
 80100fa:	693b      	ldr	r3, [r7, #16]
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d1ef      	bne.n	80100e0 <tcp_process+0x694>
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	2200      	movs	r2, #0
 8010104:	60da      	str	r2, [r3, #12]
 8010106:	4b43      	ldr	r3, [pc, #268]	; (8010214 <tcp_process+0x7c8>)
 8010108:	2201      	movs	r2, #1
 801010a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	220a      	movs	r2, #10
 8010110:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8010112:	4b41      	ldr	r3, [pc, #260]	; (8010218 <tcp_process+0x7cc>)
 8010114:	681a      	ldr	r2, [r3, #0]
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	60da      	str	r2, [r3, #12]
 801011a:	4a3f      	ldr	r2, [pc, #252]	; (8010218 <tcp_process+0x7cc>)
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	6013      	str	r3, [r2, #0]
 8010120:	f003 f8ea 	bl	80132f8 <tcp_timer_needed>
      }
      break;
 8010124:	e06c      	b.n	8010200 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8010126:	6878      	ldr	r0, [r7, #4]
 8010128:	f000 f984 	bl	8010434 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801012c:	4b3b      	ldr	r3, [pc, #236]	; (801021c <tcp_process+0x7d0>)
 801012e:	781b      	ldrb	r3, [r3, #0]
 8010130:	f003 0310 	and.w	r3, r3, #16
 8010134:	2b00      	cmp	r3, #0
 8010136:	d065      	beq.n	8010204 <tcp_process+0x7b8>
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801013c:	4b38      	ldr	r3, [pc, #224]	; (8010220 <tcp_process+0x7d4>)
 801013e:	681b      	ldr	r3, [r3, #0]
 8010140:	429a      	cmp	r2, r3
 8010142:	d15f      	bne.n	8010204 <tcp_process+0x7b8>
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010148:	2b00      	cmp	r3, #0
 801014a:	d15b      	bne.n	8010204 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 801014c:	6878      	ldr	r0, [r7, #4]
 801014e:	f7fe fcf1 	bl	800eb34 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8010152:	4b35      	ldr	r3, [pc, #212]	; (8010228 <tcp_process+0x7dc>)
 8010154:	681b      	ldr	r3, [r3, #0]
 8010156:	687a      	ldr	r2, [r7, #4]
 8010158:	429a      	cmp	r2, r3
 801015a:	d105      	bne.n	8010168 <tcp_process+0x71c>
 801015c:	4b32      	ldr	r3, [pc, #200]	; (8010228 <tcp_process+0x7dc>)
 801015e:	681b      	ldr	r3, [r3, #0]
 8010160:	68db      	ldr	r3, [r3, #12]
 8010162:	4a31      	ldr	r2, [pc, #196]	; (8010228 <tcp_process+0x7dc>)
 8010164:	6013      	str	r3, [r2, #0]
 8010166:	e013      	b.n	8010190 <tcp_process+0x744>
 8010168:	4b2f      	ldr	r3, [pc, #188]	; (8010228 <tcp_process+0x7dc>)
 801016a:	681b      	ldr	r3, [r3, #0]
 801016c:	60fb      	str	r3, [r7, #12]
 801016e:	e00c      	b.n	801018a <tcp_process+0x73e>
 8010170:	68fb      	ldr	r3, [r7, #12]
 8010172:	68db      	ldr	r3, [r3, #12]
 8010174:	687a      	ldr	r2, [r7, #4]
 8010176:	429a      	cmp	r2, r3
 8010178:	d104      	bne.n	8010184 <tcp_process+0x738>
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	68da      	ldr	r2, [r3, #12]
 801017e:	68fb      	ldr	r3, [r7, #12]
 8010180:	60da      	str	r2, [r3, #12]
 8010182:	e005      	b.n	8010190 <tcp_process+0x744>
 8010184:	68fb      	ldr	r3, [r7, #12]
 8010186:	68db      	ldr	r3, [r3, #12]
 8010188:	60fb      	str	r3, [r7, #12]
 801018a:	68fb      	ldr	r3, [r7, #12]
 801018c:	2b00      	cmp	r3, #0
 801018e:	d1ef      	bne.n	8010170 <tcp_process+0x724>
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	2200      	movs	r2, #0
 8010194:	60da      	str	r2, [r3, #12]
 8010196:	4b1f      	ldr	r3, [pc, #124]	; (8010214 <tcp_process+0x7c8>)
 8010198:	2201      	movs	r2, #1
 801019a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	220a      	movs	r2, #10
 80101a0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80101a2:	4b1d      	ldr	r3, [pc, #116]	; (8010218 <tcp_process+0x7cc>)
 80101a4:	681a      	ldr	r2, [r3, #0]
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	60da      	str	r2, [r3, #12]
 80101aa:	4a1b      	ldr	r2, [pc, #108]	; (8010218 <tcp_process+0x7cc>)
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	6013      	str	r3, [r2, #0]
 80101b0:	f003 f8a2 	bl	80132f8 <tcp_timer_needed>
      }
      break;
 80101b4:	e026      	b.n	8010204 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80101b6:	6878      	ldr	r0, [r7, #4]
 80101b8:	f000 f93c 	bl	8010434 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80101bc:	4b17      	ldr	r3, [pc, #92]	; (801021c <tcp_process+0x7d0>)
 80101be:	781b      	ldrb	r3, [r3, #0]
 80101c0:	f003 0310 	and.w	r3, r3, #16
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	d01f      	beq.n	8010208 <tcp_process+0x7bc>
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80101cc:	4b14      	ldr	r3, [pc, #80]	; (8010220 <tcp_process+0x7d4>)
 80101ce:	681b      	ldr	r3, [r3, #0]
 80101d0:	429a      	cmp	r2, r3
 80101d2:	d119      	bne.n	8010208 <tcp_process+0x7bc>
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80101d8:	2b00      	cmp	r3, #0
 80101da:	d115      	bne.n	8010208 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80101dc:	4b11      	ldr	r3, [pc, #68]	; (8010224 <tcp_process+0x7d8>)
 80101de:	781b      	ldrb	r3, [r3, #0]
 80101e0:	f043 0310 	orr.w	r3, r3, #16
 80101e4:	b2da      	uxtb	r2, r3
 80101e6:	4b0f      	ldr	r3, [pc, #60]	; (8010224 <tcp_process+0x7d8>)
 80101e8:	701a      	strb	r2, [r3, #0]
      }
      break;
 80101ea:	e00d      	b.n	8010208 <tcp_process+0x7bc>
    default:
      break;
 80101ec:	bf00      	nop
 80101ee:	e00c      	b.n	801020a <tcp_process+0x7be>
      break;
 80101f0:	bf00      	nop
 80101f2:	e00a      	b.n	801020a <tcp_process+0x7be>
      break;
 80101f4:	bf00      	nop
 80101f6:	e008      	b.n	801020a <tcp_process+0x7be>
      break;
 80101f8:	bf00      	nop
 80101fa:	e006      	b.n	801020a <tcp_process+0x7be>
      break;
 80101fc:	bf00      	nop
 80101fe:	e004      	b.n	801020a <tcp_process+0x7be>
      break;
 8010200:	bf00      	nop
 8010202:	e002      	b.n	801020a <tcp_process+0x7be>
      break;
 8010204:	bf00      	nop
 8010206:	e000      	b.n	801020a <tcp_process+0x7be>
      break;
 8010208:	bf00      	nop
  }
  return ERR_OK;
 801020a:	2300      	movs	r3, #0
}
 801020c:	4618      	mov	r0, r3
 801020e:	3724      	adds	r7, #36	; 0x24
 8010210:	46bd      	mov	sp, r7
 8010212:	bd90      	pop	{r4, r7, pc}
 8010214:	2000be24 	.word	0x2000be24
 8010218:	2000be20 	.word	0x2000be20
 801021c:	2000be54 	.word	0x2000be54
 8010220:	2000be4c 	.word	0x2000be4c
 8010224:	2000be55 	.word	0x2000be55
 8010228:	2000be1c 	.word	0x2000be1c

0801022c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 801022c:	b590      	push	{r4, r7, lr}
 801022e:	b085      	sub	sp, #20
 8010230:	af00      	add	r7, sp, #0
 8010232:	6078      	str	r0, [r7, #4]
 8010234:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	2b00      	cmp	r3, #0
 801023a:	d106      	bne.n	801024a <tcp_oos_insert_segment+0x1e>
 801023c:	4b3b      	ldr	r3, [pc, #236]	; (801032c <tcp_oos_insert_segment+0x100>)
 801023e:	f240 421f 	movw	r2, #1055	; 0x41f
 8010242:	493b      	ldr	r1, [pc, #236]	; (8010330 <tcp_oos_insert_segment+0x104>)
 8010244:	483b      	ldr	r0, [pc, #236]	; (8010334 <tcp_oos_insert_segment+0x108>)
 8010246:	f006 fd1b 	bl	8016c80 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	68db      	ldr	r3, [r3, #12]
 801024e:	899b      	ldrh	r3, [r3, #12]
 8010250:	b29b      	uxth	r3, r3
 8010252:	4618      	mov	r0, r3
 8010254:	f7fb f89c 	bl	800b390 <lwip_htons>
 8010258:	4603      	mov	r3, r0
 801025a:	b2db      	uxtb	r3, r3
 801025c:	f003 0301 	and.w	r3, r3, #1
 8010260:	2b00      	cmp	r3, #0
 8010262:	d028      	beq.n	80102b6 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8010264:	6838      	ldr	r0, [r7, #0]
 8010266:	f7fe f9af 	bl	800e5c8 <tcp_segs_free>
    next = NULL;
 801026a:	2300      	movs	r3, #0
 801026c:	603b      	str	r3, [r7, #0]
 801026e:	e056      	b.n	801031e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8010270:	683b      	ldr	r3, [r7, #0]
 8010272:	68db      	ldr	r3, [r3, #12]
 8010274:	899b      	ldrh	r3, [r3, #12]
 8010276:	b29b      	uxth	r3, r3
 8010278:	4618      	mov	r0, r3
 801027a:	f7fb f889 	bl	800b390 <lwip_htons>
 801027e:	4603      	mov	r3, r0
 8010280:	b2db      	uxtb	r3, r3
 8010282:	f003 0301 	and.w	r3, r3, #1
 8010286:	2b00      	cmp	r3, #0
 8010288:	d00d      	beq.n	80102a6 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	68db      	ldr	r3, [r3, #12]
 801028e:	899b      	ldrh	r3, [r3, #12]
 8010290:	b29c      	uxth	r4, r3
 8010292:	2001      	movs	r0, #1
 8010294:	f7fb f87c 	bl	800b390 <lwip_htons>
 8010298:	4603      	mov	r3, r0
 801029a:	461a      	mov	r2, r3
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	68db      	ldr	r3, [r3, #12]
 80102a0:	4322      	orrs	r2, r4
 80102a2:	b292      	uxth	r2, r2
 80102a4:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80102a6:	683b      	ldr	r3, [r7, #0]
 80102a8:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80102aa:	683b      	ldr	r3, [r7, #0]
 80102ac:	681b      	ldr	r3, [r3, #0]
 80102ae:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80102b0:	68f8      	ldr	r0, [r7, #12]
 80102b2:	f7fe f99e 	bl	800e5f2 <tcp_seg_free>
    while (next &&
 80102b6:	683b      	ldr	r3, [r7, #0]
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	d00e      	beq.n	80102da <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	891b      	ldrh	r3, [r3, #8]
 80102c0:	461a      	mov	r2, r3
 80102c2:	4b1d      	ldr	r3, [pc, #116]	; (8010338 <tcp_oos_insert_segment+0x10c>)
 80102c4:	681b      	ldr	r3, [r3, #0]
 80102c6:	441a      	add	r2, r3
 80102c8:	683b      	ldr	r3, [r7, #0]
 80102ca:	68db      	ldr	r3, [r3, #12]
 80102cc:	685b      	ldr	r3, [r3, #4]
 80102ce:	6839      	ldr	r1, [r7, #0]
 80102d0:	8909      	ldrh	r1, [r1, #8]
 80102d2:	440b      	add	r3, r1
 80102d4:	1ad3      	subs	r3, r2, r3
    while (next &&
 80102d6:	2b00      	cmp	r3, #0
 80102d8:	daca      	bge.n	8010270 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80102da:	683b      	ldr	r3, [r7, #0]
 80102dc:	2b00      	cmp	r3, #0
 80102de:	d01e      	beq.n	801031e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	891b      	ldrh	r3, [r3, #8]
 80102e4:	461a      	mov	r2, r3
 80102e6:	4b14      	ldr	r3, [pc, #80]	; (8010338 <tcp_oos_insert_segment+0x10c>)
 80102e8:	681b      	ldr	r3, [r3, #0]
 80102ea:	441a      	add	r2, r3
 80102ec:	683b      	ldr	r3, [r7, #0]
 80102ee:	68db      	ldr	r3, [r3, #12]
 80102f0:	685b      	ldr	r3, [r3, #4]
 80102f2:	1ad3      	subs	r3, r2, r3
    if (next &&
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	dd12      	ble.n	801031e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80102f8:	683b      	ldr	r3, [r7, #0]
 80102fa:	68db      	ldr	r3, [r3, #12]
 80102fc:	685b      	ldr	r3, [r3, #4]
 80102fe:	b29a      	uxth	r2, r3
 8010300:	4b0d      	ldr	r3, [pc, #52]	; (8010338 <tcp_oos_insert_segment+0x10c>)
 8010302:	681b      	ldr	r3, [r3, #0]
 8010304:	b29b      	uxth	r3, r3
 8010306:	1ad3      	subs	r3, r2, r3
 8010308:	b29a      	uxth	r2, r3
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	685a      	ldr	r2, [r3, #4]
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	891b      	ldrh	r3, [r3, #8]
 8010316:	4619      	mov	r1, r3
 8010318:	4610      	mov	r0, r2
 801031a:	f7fc fb0f 	bl	800c93c <pbuf_realloc>
    }
  }
  cseg->next = next;
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	683a      	ldr	r2, [r7, #0]
 8010322:	601a      	str	r2, [r3, #0]
}
 8010324:	bf00      	nop
 8010326:	3714      	adds	r7, #20
 8010328:	46bd      	mov	sp, r7
 801032a:	bd90      	pop	{r4, r7, pc}
 801032c:	08019374 	.word	0x08019374
 8010330:	08019634 	.word	0x08019634
 8010334:	080193c0 	.word	0x080193c0
 8010338:	2000be48 	.word	0x2000be48

0801033c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 801033c:	b5b0      	push	{r4, r5, r7, lr}
 801033e:	b086      	sub	sp, #24
 8010340:	af00      	add	r7, sp, #0
 8010342:	60f8      	str	r0, [r7, #12]
 8010344:	60b9      	str	r1, [r7, #8]
 8010346:	607a      	str	r2, [r7, #4]
 8010348:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801034a:	e03e      	b.n	80103ca <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 801034c:	68bb      	ldr	r3, [r7, #8]
 801034e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8010350:	68bb      	ldr	r3, [r7, #8]
 8010352:	681b      	ldr	r3, [r3, #0]
 8010354:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8010356:	697b      	ldr	r3, [r7, #20]
 8010358:	685b      	ldr	r3, [r3, #4]
 801035a:	4618      	mov	r0, r3
 801035c:	f7fc fd02 	bl	800cd64 <pbuf_clen>
 8010360:	4603      	mov	r3, r0
 8010362:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8010364:	68fb      	ldr	r3, [r7, #12]
 8010366:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801036a:	8a7a      	ldrh	r2, [r7, #18]
 801036c:	429a      	cmp	r2, r3
 801036e:	d906      	bls.n	801037e <tcp_free_acked_segments+0x42>
 8010370:	4b2a      	ldr	r3, [pc, #168]	; (801041c <tcp_free_acked_segments+0xe0>)
 8010372:	f240 4257 	movw	r2, #1111	; 0x457
 8010376:	492a      	ldr	r1, [pc, #168]	; (8010420 <tcp_free_acked_segments+0xe4>)
 8010378:	482a      	ldr	r0, [pc, #168]	; (8010424 <tcp_free_acked_segments+0xe8>)
 801037a:	f006 fc81 	bl	8016c80 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801037e:	68fb      	ldr	r3, [r7, #12]
 8010380:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8010384:	8a7b      	ldrh	r3, [r7, #18]
 8010386:	1ad3      	subs	r3, r2, r3
 8010388:	b29a      	uxth	r2, r3
 801038a:	68fb      	ldr	r3, [r7, #12]
 801038c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8010390:	697b      	ldr	r3, [r7, #20]
 8010392:	891a      	ldrh	r2, [r3, #8]
 8010394:	4b24      	ldr	r3, [pc, #144]	; (8010428 <tcp_free_acked_segments+0xec>)
 8010396:	881b      	ldrh	r3, [r3, #0]
 8010398:	4413      	add	r3, r2
 801039a:	b29a      	uxth	r2, r3
 801039c:	4b22      	ldr	r3, [pc, #136]	; (8010428 <tcp_free_acked_segments+0xec>)
 801039e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80103a0:	6978      	ldr	r0, [r7, #20]
 80103a2:	f7fe f926 	bl	800e5f2 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80103a6:	68fb      	ldr	r3, [r7, #12]
 80103a8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	d00c      	beq.n	80103ca <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80103b0:	68bb      	ldr	r3, [r7, #8]
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	d109      	bne.n	80103ca <tcp_free_acked_segments+0x8e>
 80103b6:	683b      	ldr	r3, [r7, #0]
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d106      	bne.n	80103ca <tcp_free_acked_segments+0x8e>
 80103bc:	4b17      	ldr	r3, [pc, #92]	; (801041c <tcp_free_acked_segments+0xe0>)
 80103be:	f240 4261 	movw	r2, #1121	; 0x461
 80103c2:	491a      	ldr	r1, [pc, #104]	; (801042c <tcp_free_acked_segments+0xf0>)
 80103c4:	4817      	ldr	r0, [pc, #92]	; (8010424 <tcp_free_acked_segments+0xe8>)
 80103c6:	f006 fc5b 	bl	8016c80 <iprintf>
  while (seg_list != NULL &&
 80103ca:	68bb      	ldr	r3, [r7, #8]
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	d020      	beq.n	8010412 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80103d0:	68bb      	ldr	r3, [r7, #8]
 80103d2:	68db      	ldr	r3, [r3, #12]
 80103d4:	685b      	ldr	r3, [r3, #4]
 80103d6:	4618      	mov	r0, r3
 80103d8:	f7fa ffee 	bl	800b3b8 <lwip_htonl>
 80103dc:	4604      	mov	r4, r0
 80103de:	68bb      	ldr	r3, [r7, #8]
 80103e0:	891b      	ldrh	r3, [r3, #8]
 80103e2:	461d      	mov	r5, r3
 80103e4:	68bb      	ldr	r3, [r7, #8]
 80103e6:	68db      	ldr	r3, [r3, #12]
 80103e8:	899b      	ldrh	r3, [r3, #12]
 80103ea:	b29b      	uxth	r3, r3
 80103ec:	4618      	mov	r0, r3
 80103ee:	f7fa ffcf 	bl	800b390 <lwip_htons>
 80103f2:	4603      	mov	r3, r0
 80103f4:	b2db      	uxtb	r3, r3
 80103f6:	f003 0303 	and.w	r3, r3, #3
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	d001      	beq.n	8010402 <tcp_free_acked_segments+0xc6>
 80103fe:	2301      	movs	r3, #1
 8010400:	e000      	b.n	8010404 <tcp_free_acked_segments+0xc8>
 8010402:	2300      	movs	r3, #0
 8010404:	442b      	add	r3, r5
 8010406:	18e2      	adds	r2, r4, r3
 8010408:	4b09      	ldr	r3, [pc, #36]	; (8010430 <tcp_free_acked_segments+0xf4>)
 801040a:	681b      	ldr	r3, [r3, #0]
 801040c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801040e:	2b00      	cmp	r3, #0
 8010410:	dd9c      	ble.n	801034c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8010412:	68bb      	ldr	r3, [r7, #8]
}
 8010414:	4618      	mov	r0, r3
 8010416:	3718      	adds	r7, #24
 8010418:	46bd      	mov	sp, r7
 801041a:	bdb0      	pop	{r4, r5, r7, pc}
 801041c:	08019374 	.word	0x08019374
 8010420:	0801965c 	.word	0x0801965c
 8010424:	080193c0 	.word	0x080193c0
 8010428:	2000be50 	.word	0x2000be50
 801042c:	08019684 	.word	0x08019684
 8010430:	2000be4c 	.word	0x2000be4c

08010434 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8010434:	b5b0      	push	{r4, r5, r7, lr}
 8010436:	b094      	sub	sp, #80	; 0x50
 8010438:	af00      	add	r7, sp, #0
 801043a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 801043c:	2300      	movs	r3, #0
 801043e:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	2b00      	cmp	r3, #0
 8010444:	d106      	bne.n	8010454 <tcp_receive+0x20>
 8010446:	4b91      	ldr	r3, [pc, #580]	; (801068c <tcp_receive+0x258>)
 8010448:	f240 427b 	movw	r2, #1147	; 0x47b
 801044c:	4990      	ldr	r1, [pc, #576]	; (8010690 <tcp_receive+0x25c>)
 801044e:	4891      	ldr	r0, [pc, #580]	; (8010694 <tcp_receive+0x260>)
 8010450:	f006 fc16 	bl	8016c80 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	7d1b      	ldrb	r3, [r3, #20]
 8010458:	2b03      	cmp	r3, #3
 801045a:	d806      	bhi.n	801046a <tcp_receive+0x36>
 801045c:	4b8b      	ldr	r3, [pc, #556]	; (801068c <tcp_receive+0x258>)
 801045e:	f240 427c 	movw	r2, #1148	; 0x47c
 8010462:	498d      	ldr	r1, [pc, #564]	; (8010698 <tcp_receive+0x264>)
 8010464:	488b      	ldr	r0, [pc, #556]	; (8010694 <tcp_receive+0x260>)
 8010466:	f006 fc0b 	bl	8016c80 <iprintf>

  if (flags & TCP_ACK) {
 801046a:	4b8c      	ldr	r3, [pc, #560]	; (801069c <tcp_receive+0x268>)
 801046c:	781b      	ldrb	r3, [r3, #0]
 801046e:	f003 0310 	and.w	r3, r3, #16
 8010472:	2b00      	cmp	r3, #0
 8010474:	f000 8264 	beq.w	8010940 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801047e:	461a      	mov	r2, r3
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010484:	4413      	add	r3, r2
 8010486:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801048c:	4b84      	ldr	r3, [pc, #528]	; (80106a0 <tcp_receive+0x26c>)
 801048e:	681b      	ldr	r3, [r3, #0]
 8010490:	1ad3      	subs	r3, r2, r3
 8010492:	2b00      	cmp	r3, #0
 8010494:	db1b      	blt.n	80104ce <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801049a:	4b81      	ldr	r3, [pc, #516]	; (80106a0 <tcp_receive+0x26c>)
 801049c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801049e:	429a      	cmp	r2, r3
 80104a0:	d106      	bne.n	80104b0 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80104a6:	4b7f      	ldr	r3, [pc, #508]	; (80106a4 <tcp_receive+0x270>)
 80104a8:	681b      	ldr	r3, [r3, #0]
 80104aa:	1ad3      	subs	r3, r2, r3
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	db0e      	blt.n	80104ce <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80104b4:	4b7b      	ldr	r3, [pc, #492]	; (80106a4 <tcp_receive+0x270>)
 80104b6:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80104b8:	429a      	cmp	r2, r3
 80104ba:	d125      	bne.n	8010508 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80104bc:	4b7a      	ldr	r3, [pc, #488]	; (80106a8 <tcp_receive+0x274>)
 80104be:	681b      	ldr	r3, [r3, #0]
 80104c0:	89db      	ldrh	r3, [r3, #14]
 80104c2:	b29a      	uxth	r2, r3
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80104ca:	429a      	cmp	r2, r3
 80104cc:	d91c      	bls.n	8010508 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80104ce:	4b76      	ldr	r3, [pc, #472]	; (80106a8 <tcp_receive+0x274>)
 80104d0:	681b      	ldr	r3, [r3, #0]
 80104d2:	89db      	ldrh	r3, [r3, #14]
 80104d4:	b29a      	uxth	r2, r3
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80104e8:	429a      	cmp	r2, r3
 80104ea:	d205      	bcs.n	80104f8 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 80104f8:	4b69      	ldr	r3, [pc, #420]	; (80106a0 <tcp_receive+0x26c>)
 80104fa:	681a      	ldr	r2, [r3, #0]
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8010500:	4b68      	ldr	r3, [pc, #416]	; (80106a4 <tcp_receive+0x270>)
 8010502:	681a      	ldr	r2, [r3, #0]
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8010508:	4b66      	ldr	r3, [pc, #408]	; (80106a4 <tcp_receive+0x270>)
 801050a:	681a      	ldr	r2, [r3, #0]
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010510:	1ad3      	subs	r3, r2, r3
 8010512:	2b00      	cmp	r3, #0
 8010514:	dc58      	bgt.n	80105c8 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8010516:	4b65      	ldr	r3, [pc, #404]	; (80106ac <tcp_receive+0x278>)
 8010518:	881b      	ldrh	r3, [r3, #0]
 801051a:	2b00      	cmp	r3, #0
 801051c:	d14b      	bne.n	80105b6 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010522:	687a      	ldr	r2, [r7, #4]
 8010524:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8010528:	4413      	add	r3, r2
 801052a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801052c:	429a      	cmp	r2, r3
 801052e:	d142      	bne.n	80105b6 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010536:	2b00      	cmp	r3, #0
 8010538:	db3d      	blt.n	80105b6 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801053e:	4b59      	ldr	r3, [pc, #356]	; (80106a4 <tcp_receive+0x270>)
 8010540:	681b      	ldr	r3, [r3, #0]
 8010542:	429a      	cmp	r2, r3
 8010544:	d137      	bne.n	80105b6 <tcp_receive+0x182>
              found_dupack = 1;
 8010546:	2301      	movs	r3, #1
 8010548:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010550:	2bff      	cmp	r3, #255	; 0xff
 8010552:	d007      	beq.n	8010564 <tcp_receive+0x130>
                ++pcb->dupacks;
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801055a:	3301      	adds	r3, #1
 801055c:	b2da      	uxtb	r2, r3
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801056a:	2b03      	cmp	r3, #3
 801056c:	d91b      	bls.n	80105a6 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010578:	4413      	add	r3, r2
 801057a:	b29a      	uxth	r2, r3
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010582:	429a      	cmp	r2, r3
 8010584:	d30a      	bcc.n	801059c <tcp_receive+0x168>
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010590:	4413      	add	r3, r2
 8010592:	b29a      	uxth	r2, r3
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801059a:	e004      	b.n	80105a6 <tcp_receive+0x172>
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80105a2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80105ac:	2b02      	cmp	r3, #2
 80105ae:	d902      	bls.n	80105b6 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80105b0:	6878      	ldr	r0, [r7, #4]
 80105b2:	f002 fb43 	bl	8012c3c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80105b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	f040 8161 	bne.w	8010880 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	2200      	movs	r2, #0
 80105c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80105c6:	e15b      	b.n	8010880 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80105c8:	4b36      	ldr	r3, [pc, #216]	; (80106a4 <tcp_receive+0x270>)
 80105ca:	681a      	ldr	r2, [r3, #0]
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80105d0:	1ad3      	subs	r3, r2, r3
 80105d2:	3b01      	subs	r3, #1
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	f2c0 814e 	blt.w	8010876 <tcp_receive+0x442>
 80105da:	4b32      	ldr	r3, [pc, #200]	; (80106a4 <tcp_receive+0x270>)
 80105dc:	681a      	ldr	r2, [r3, #0]
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80105e2:	1ad3      	subs	r3, r2, r3
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	f300 8146 	bgt.w	8010876 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	8b5b      	ldrh	r3, [r3, #26]
 80105ee:	f003 0304 	and.w	r3, r3, #4
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	d010      	beq.n	8010618 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	8b5b      	ldrh	r3, [r3, #26]
 80105fa:	f023 0304 	bic.w	r3, r3, #4
 80105fe:	b29a      	uxth	r2, r3
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	2200      	movs	r2, #0
 8010614:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	2200      	movs	r2, #0
 801061c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010626:	10db      	asrs	r3, r3, #3
 8010628:	b21b      	sxth	r3, r3
 801062a:	b29a      	uxth	r2, r3
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010632:	b29b      	uxth	r3, r3
 8010634:	4413      	add	r3, r2
 8010636:	b29b      	uxth	r3, r3
 8010638:	b21a      	sxth	r2, r3
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8010640:	4b18      	ldr	r3, [pc, #96]	; (80106a4 <tcp_receive+0x270>)
 8010642:	681b      	ldr	r3, [r3, #0]
 8010644:	b29a      	uxth	r2, r3
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801064a:	b29b      	uxth	r3, r3
 801064c:	1ad3      	subs	r3, r2, r3
 801064e:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	2200      	movs	r2, #0
 8010654:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8010658:	4b12      	ldr	r3, [pc, #72]	; (80106a4 <tcp_receive+0x270>)
 801065a:	681a      	ldr	r2, [r3, #0]
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	7d1b      	ldrb	r3, [r3, #20]
 8010664:	2b03      	cmp	r3, #3
 8010666:	f240 8097 	bls.w	8010798 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8010676:	429a      	cmp	r2, r3
 8010678:	d245      	bcs.n	8010706 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	8b5b      	ldrh	r3, [r3, #26]
 801067e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010682:	2b00      	cmp	r3, #0
 8010684:	d014      	beq.n	80106b0 <tcp_receive+0x27c>
 8010686:	2301      	movs	r3, #1
 8010688:	e013      	b.n	80106b2 <tcp_receive+0x27e>
 801068a:	bf00      	nop
 801068c:	08019374 	.word	0x08019374
 8010690:	080196a4 	.word	0x080196a4
 8010694:	080193c0 	.word	0x080193c0
 8010698:	080196c0 	.word	0x080196c0
 801069c:	2000be54 	.word	0x2000be54
 80106a0:	2000be48 	.word	0x2000be48
 80106a4:	2000be4c 	.word	0x2000be4c
 80106a8:	2000be38 	.word	0x2000be38
 80106ac:	2000be52 	.word	0x2000be52
 80106b0:	2302      	movs	r3, #2
 80106b2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80106b6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80106ba:	b29a      	uxth	r2, r3
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80106c0:	fb12 f303 	smulbb	r3, r2, r3
 80106c4:	b29b      	uxth	r3, r3
 80106c6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80106c8:	4293      	cmp	r3, r2
 80106ca:	bf28      	it	cs
 80106cc:	4613      	movcs	r3, r2
 80106ce:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80106d6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80106d8:	4413      	add	r3, r2
 80106da:	b29a      	uxth	r2, r3
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80106e2:	429a      	cmp	r2, r3
 80106e4:	d309      	bcc.n	80106fa <tcp_receive+0x2c6>
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80106ec:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80106ee:	4413      	add	r3, r2
 80106f0:	b29a      	uxth	r2, r3
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80106f8:	e04e      	b.n	8010798 <tcp_receive+0x364>
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010700:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010704:	e048      	b.n	8010798 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801070c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801070e:	4413      	add	r3, r2
 8010710:	b29a      	uxth	r2, r3
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010718:	429a      	cmp	r2, r3
 801071a:	d309      	bcc.n	8010730 <tcp_receive+0x2fc>
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010722:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010724:	4413      	add	r3, r2
 8010726:	b29a      	uxth	r2, r3
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 801072e:	e004      	b.n	801073a <tcp_receive+0x306>
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010736:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010746:	429a      	cmp	r2, r3
 8010748:	d326      	bcc.n	8010798 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010756:	1ad3      	subs	r3, r2, r3
 8010758:	b29a      	uxth	r2, r3
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801076a:	4413      	add	r3, r2
 801076c:	b29a      	uxth	r2, r3
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010774:	429a      	cmp	r2, r3
 8010776:	d30a      	bcc.n	801078e <tcp_receive+0x35a>
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010782:	4413      	add	r3, r2
 8010784:	b29a      	uxth	r2, r3
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801078c:	e004      	b.n	8010798 <tcp_receive+0x364>
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010794:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	6f19      	ldr	r1, [r3, #112]	; 0x70
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80107a0:	4a98      	ldr	r2, [pc, #608]	; (8010a04 <tcp_receive+0x5d0>)
 80107a2:	6878      	ldr	r0, [r7, #4]
 80107a4:	f7ff fdca 	bl	801033c <tcp_free_acked_segments>
 80107a8:	4602      	mov	r2, r0
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80107b6:	4a94      	ldr	r2, [pc, #592]	; (8010a08 <tcp_receive+0x5d4>)
 80107b8:	6878      	ldr	r0, [r7, #4]
 80107ba:	f7ff fdbf 	bl	801033c <tcp_free_acked_segments>
 80107be:	4602      	mov	r2, r0
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	d104      	bne.n	80107d6 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80107d2:	861a      	strh	r2, [r3, #48]	; 0x30
 80107d4:	e002      	b.n	80107dc <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	2200      	movs	r2, #0
 80107da:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	2200      	movs	r2, #0
 80107e0:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	d103      	bne.n	80107f2 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	2200      	movs	r2, #0
 80107ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80107f8:	4b84      	ldr	r3, [pc, #528]	; (8010a0c <tcp_receive+0x5d8>)
 80107fa:	881b      	ldrh	r3, [r3, #0]
 80107fc:	4413      	add	r3, r2
 80107fe:	b29a      	uxth	r2, r3
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	8b5b      	ldrh	r3, [r3, #26]
 801080a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801080e:	2b00      	cmp	r3, #0
 8010810:	d035      	beq.n	801087e <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010816:	2b00      	cmp	r3, #0
 8010818:	d118      	bne.n	801084c <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801081e:	2b00      	cmp	r3, #0
 8010820:	d00c      	beq.n	801083c <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801082a:	68db      	ldr	r3, [r3, #12]
 801082c:	685b      	ldr	r3, [r3, #4]
 801082e:	4618      	mov	r0, r3
 8010830:	f7fa fdc2 	bl	800b3b8 <lwip_htonl>
 8010834:	4603      	mov	r3, r0
 8010836:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8010838:	2b00      	cmp	r3, #0
 801083a:	dc20      	bgt.n	801087e <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	8b5b      	ldrh	r3, [r3, #26]
 8010840:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010844:	b29a      	uxth	r2, r3
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801084a:	e018      	b.n	801087e <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010854:	68db      	ldr	r3, [r3, #12]
 8010856:	685b      	ldr	r3, [r3, #4]
 8010858:	4618      	mov	r0, r3
 801085a:	f7fa fdad 	bl	800b3b8 <lwip_htonl>
 801085e:	4603      	mov	r3, r0
 8010860:	1ae3      	subs	r3, r4, r3
 8010862:	2b00      	cmp	r3, #0
 8010864:	dc0b      	bgt.n	801087e <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	8b5b      	ldrh	r3, [r3, #26]
 801086a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801086e:	b29a      	uxth	r2, r3
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010874:	e003      	b.n	801087e <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8010876:	6878      	ldr	r0, [r7, #4]
 8010878:	f002 fbce 	bl	8013018 <tcp_send_empty_ack>
 801087c:	e000      	b.n	8010880 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801087e:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010884:	2b00      	cmp	r3, #0
 8010886:	d05b      	beq.n	8010940 <tcp_receive+0x50c>
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801088c:	4b60      	ldr	r3, [pc, #384]	; (8010a10 <tcp_receive+0x5dc>)
 801088e:	681b      	ldr	r3, [r3, #0]
 8010890:	1ad3      	subs	r3, r2, r3
 8010892:	2b00      	cmp	r3, #0
 8010894:	da54      	bge.n	8010940 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8010896:	4b5f      	ldr	r3, [pc, #380]	; (8010a14 <tcp_receive+0x5e0>)
 8010898:	681b      	ldr	r3, [r3, #0]
 801089a:	b29a      	uxth	r2, r3
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80108a0:	b29b      	uxth	r3, r3
 80108a2:	1ad3      	subs	r3, r2, r3
 80108a4:	b29b      	uxth	r3, r3
 80108a6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80108aa:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80108b4:	10db      	asrs	r3, r3, #3
 80108b6:	b21b      	sxth	r3, r3
 80108b8:	b29b      	uxth	r3, r3
 80108ba:	1ad3      	subs	r3, r2, r3
 80108bc:	b29b      	uxth	r3, r3
 80108be:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80108c8:	b29a      	uxth	r2, r3
 80108ca:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80108ce:	4413      	add	r3, r2
 80108d0:	b29b      	uxth	r3, r3
 80108d2:	b21a      	sxth	r2, r3
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 80108d8:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80108dc:	2b00      	cmp	r3, #0
 80108de:	da05      	bge.n	80108ec <tcp_receive+0x4b8>
        m = (s16_t) - m;
 80108e0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80108e4:	425b      	negs	r3, r3
 80108e6:	b29b      	uxth	r3, r3
 80108e8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80108ec:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80108f6:	109b      	asrs	r3, r3, #2
 80108f8:	b21b      	sxth	r3, r3
 80108fa:	b29b      	uxth	r3, r3
 80108fc:	1ad3      	subs	r3, r2, r3
 80108fe:	b29b      	uxth	r3, r3
 8010900:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801090a:	b29a      	uxth	r2, r3
 801090c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010910:	4413      	add	r3, r2
 8010912:	b29b      	uxth	r3, r3
 8010914:	b21a      	sxth	r2, r3
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010920:	10db      	asrs	r3, r3, #3
 8010922:	b21b      	sxth	r3, r3
 8010924:	b29a      	uxth	r2, r3
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801092c:	b29b      	uxth	r3, r3
 801092e:	4413      	add	r3, r2
 8010930:	b29b      	uxth	r3, r3
 8010932:	b21a      	sxth	r2, r3
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	2200      	movs	r2, #0
 801093e:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8010940:	4b35      	ldr	r3, [pc, #212]	; (8010a18 <tcp_receive+0x5e4>)
 8010942:	881b      	ldrh	r3, [r3, #0]
 8010944:	2b00      	cmp	r3, #0
 8010946:	f000 84e2 	beq.w	801130e <tcp_receive+0xeda>
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	7d1b      	ldrb	r3, [r3, #20]
 801094e:	2b06      	cmp	r3, #6
 8010950:	f200 84dd 	bhi.w	801130e <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010958:	4b30      	ldr	r3, [pc, #192]	; (8010a1c <tcp_receive+0x5e8>)
 801095a:	681b      	ldr	r3, [r3, #0]
 801095c:	1ad3      	subs	r3, r2, r3
 801095e:	3b01      	subs	r3, #1
 8010960:	2b00      	cmp	r3, #0
 8010962:	f2c0 808f 	blt.w	8010a84 <tcp_receive+0x650>
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801096a:	4b2b      	ldr	r3, [pc, #172]	; (8010a18 <tcp_receive+0x5e4>)
 801096c:	881b      	ldrh	r3, [r3, #0]
 801096e:	4619      	mov	r1, r3
 8010970:	4b2a      	ldr	r3, [pc, #168]	; (8010a1c <tcp_receive+0x5e8>)
 8010972:	681b      	ldr	r3, [r3, #0]
 8010974:	440b      	add	r3, r1
 8010976:	1ad3      	subs	r3, r2, r3
 8010978:	3301      	adds	r3, #1
 801097a:	2b00      	cmp	r3, #0
 801097c:	f300 8082 	bgt.w	8010a84 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8010980:	4b27      	ldr	r3, [pc, #156]	; (8010a20 <tcp_receive+0x5ec>)
 8010982:	685b      	ldr	r3, [r3, #4]
 8010984:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801098a:	4b24      	ldr	r3, [pc, #144]	; (8010a1c <tcp_receive+0x5e8>)
 801098c:	681b      	ldr	r3, [r3, #0]
 801098e:	1ad3      	subs	r3, r2, r3
 8010990:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8010992:	4b23      	ldr	r3, [pc, #140]	; (8010a20 <tcp_receive+0x5ec>)
 8010994:	685b      	ldr	r3, [r3, #4]
 8010996:	2b00      	cmp	r3, #0
 8010998:	d106      	bne.n	80109a8 <tcp_receive+0x574>
 801099a:	4b22      	ldr	r3, [pc, #136]	; (8010a24 <tcp_receive+0x5f0>)
 801099c:	f240 5294 	movw	r2, #1428	; 0x594
 80109a0:	4921      	ldr	r1, [pc, #132]	; (8010a28 <tcp_receive+0x5f4>)
 80109a2:	4822      	ldr	r0, [pc, #136]	; (8010a2c <tcp_receive+0x5f8>)
 80109a4:	f006 f96c 	bl	8016c80 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 80109a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109aa:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80109ae:	4293      	cmp	r3, r2
 80109b0:	d906      	bls.n	80109c0 <tcp_receive+0x58c>
 80109b2:	4b1c      	ldr	r3, [pc, #112]	; (8010a24 <tcp_receive+0x5f0>)
 80109b4:	f240 5295 	movw	r2, #1429	; 0x595
 80109b8:	491d      	ldr	r1, [pc, #116]	; (8010a30 <tcp_receive+0x5fc>)
 80109ba:	481c      	ldr	r0, [pc, #112]	; (8010a2c <tcp_receive+0x5f8>)
 80109bc:	f006 f960 	bl	8016c80 <iprintf>
      off = (u16_t)off32;
 80109c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109c2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80109c6:	4b16      	ldr	r3, [pc, #88]	; (8010a20 <tcp_receive+0x5ec>)
 80109c8:	685b      	ldr	r3, [r3, #4]
 80109ca:	891b      	ldrh	r3, [r3, #8]
 80109cc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80109d0:	429a      	cmp	r2, r3
 80109d2:	d906      	bls.n	80109e2 <tcp_receive+0x5ae>
 80109d4:	4b13      	ldr	r3, [pc, #76]	; (8010a24 <tcp_receive+0x5f0>)
 80109d6:	f240 5297 	movw	r2, #1431	; 0x597
 80109da:	4916      	ldr	r1, [pc, #88]	; (8010a34 <tcp_receive+0x600>)
 80109dc:	4813      	ldr	r0, [pc, #76]	; (8010a2c <tcp_receive+0x5f8>)
 80109de:	f006 f94f 	bl	8016c80 <iprintf>
      inseg.len -= off;
 80109e2:	4b0f      	ldr	r3, [pc, #60]	; (8010a20 <tcp_receive+0x5ec>)
 80109e4:	891a      	ldrh	r2, [r3, #8]
 80109e6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80109ea:	1ad3      	subs	r3, r2, r3
 80109ec:	b29a      	uxth	r2, r3
 80109ee:	4b0c      	ldr	r3, [pc, #48]	; (8010a20 <tcp_receive+0x5ec>)
 80109f0:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80109f2:	4b0b      	ldr	r3, [pc, #44]	; (8010a20 <tcp_receive+0x5ec>)
 80109f4:	685b      	ldr	r3, [r3, #4]
 80109f6:	891a      	ldrh	r2, [r3, #8]
 80109f8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80109fc:	1ad3      	subs	r3, r2, r3
 80109fe:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8010a00:	e02a      	b.n	8010a58 <tcp_receive+0x624>
 8010a02:	bf00      	nop
 8010a04:	080196dc 	.word	0x080196dc
 8010a08:	080196e4 	.word	0x080196e4
 8010a0c:	2000be50 	.word	0x2000be50
 8010a10:	2000be4c 	.word	0x2000be4c
 8010a14:	2000be10 	.word	0x2000be10
 8010a18:	2000be52 	.word	0x2000be52
 8010a1c:	2000be48 	.word	0x2000be48
 8010a20:	2000be28 	.word	0x2000be28
 8010a24:	08019374 	.word	0x08019374
 8010a28:	080196ec 	.word	0x080196ec
 8010a2c:	080193c0 	.word	0x080193c0
 8010a30:	080196fc 	.word	0x080196fc
 8010a34:	0801970c 	.word	0x0801970c
        off -= p->len;
 8010a38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010a3a:	895b      	ldrh	r3, [r3, #10]
 8010a3c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010a40:	1ad3      	subs	r3, r2, r3
 8010a42:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8010a46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010a48:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010a4a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8010a4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010a4e:	2200      	movs	r2, #0
 8010a50:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8010a52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010a54:	681b      	ldr	r3, [r3, #0]
 8010a56:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8010a58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010a5a:	895b      	ldrh	r3, [r3, #10]
 8010a5c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010a60:	429a      	cmp	r2, r3
 8010a62:	d8e9      	bhi.n	8010a38 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8010a64:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010a68:	4619      	mov	r1, r3
 8010a6a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8010a6c:	f7fc f866 	bl	800cb3c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a74:	4a91      	ldr	r2, [pc, #580]	; (8010cbc <tcp_receive+0x888>)
 8010a76:	6013      	str	r3, [r2, #0]
 8010a78:	4b91      	ldr	r3, [pc, #580]	; (8010cc0 <tcp_receive+0x88c>)
 8010a7a:	68db      	ldr	r3, [r3, #12]
 8010a7c:	4a8f      	ldr	r2, [pc, #572]	; (8010cbc <tcp_receive+0x888>)
 8010a7e:	6812      	ldr	r2, [r2, #0]
 8010a80:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010a82:	e00d      	b.n	8010aa0 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8010a84:	4b8d      	ldr	r3, [pc, #564]	; (8010cbc <tcp_receive+0x888>)
 8010a86:	681a      	ldr	r2, [r3, #0]
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a8c:	1ad3      	subs	r3, r2, r3
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	da06      	bge.n	8010aa0 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	8b5b      	ldrh	r3, [r3, #26]
 8010a96:	f043 0302 	orr.w	r3, r3, #2
 8010a9a:	b29a      	uxth	r2, r3
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010aa0:	4b86      	ldr	r3, [pc, #536]	; (8010cbc <tcp_receive+0x888>)
 8010aa2:	681a      	ldr	r2, [r3, #0]
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010aa8:	1ad3      	subs	r3, r2, r3
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	f2c0 842a 	blt.w	8011304 <tcp_receive+0xed0>
 8010ab0:	4b82      	ldr	r3, [pc, #520]	; (8010cbc <tcp_receive+0x888>)
 8010ab2:	681a      	ldr	r2, [r3, #0]
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ab8:	6879      	ldr	r1, [r7, #4]
 8010aba:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010abc:	440b      	add	r3, r1
 8010abe:	1ad3      	subs	r3, r2, r3
 8010ac0:	3301      	adds	r3, #1
 8010ac2:	2b00      	cmp	r3, #0
 8010ac4:	f300 841e 	bgt.w	8011304 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010acc:	4b7b      	ldr	r3, [pc, #492]	; (8010cbc <tcp_receive+0x888>)
 8010ace:	681b      	ldr	r3, [r3, #0]
 8010ad0:	429a      	cmp	r2, r3
 8010ad2:	f040 829a 	bne.w	801100a <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8010ad6:	4b7a      	ldr	r3, [pc, #488]	; (8010cc0 <tcp_receive+0x88c>)
 8010ad8:	891c      	ldrh	r4, [r3, #8]
 8010ada:	4b79      	ldr	r3, [pc, #484]	; (8010cc0 <tcp_receive+0x88c>)
 8010adc:	68db      	ldr	r3, [r3, #12]
 8010ade:	899b      	ldrh	r3, [r3, #12]
 8010ae0:	b29b      	uxth	r3, r3
 8010ae2:	4618      	mov	r0, r3
 8010ae4:	f7fa fc54 	bl	800b390 <lwip_htons>
 8010ae8:	4603      	mov	r3, r0
 8010aea:	b2db      	uxtb	r3, r3
 8010aec:	f003 0303 	and.w	r3, r3, #3
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	d001      	beq.n	8010af8 <tcp_receive+0x6c4>
 8010af4:	2301      	movs	r3, #1
 8010af6:	e000      	b.n	8010afa <tcp_receive+0x6c6>
 8010af8:	2300      	movs	r3, #0
 8010afa:	4423      	add	r3, r4
 8010afc:	b29a      	uxth	r2, r3
 8010afe:	4b71      	ldr	r3, [pc, #452]	; (8010cc4 <tcp_receive+0x890>)
 8010b00:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010b06:	4b6f      	ldr	r3, [pc, #444]	; (8010cc4 <tcp_receive+0x890>)
 8010b08:	881b      	ldrh	r3, [r3, #0]
 8010b0a:	429a      	cmp	r2, r3
 8010b0c:	d275      	bcs.n	8010bfa <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010b0e:	4b6c      	ldr	r3, [pc, #432]	; (8010cc0 <tcp_receive+0x88c>)
 8010b10:	68db      	ldr	r3, [r3, #12]
 8010b12:	899b      	ldrh	r3, [r3, #12]
 8010b14:	b29b      	uxth	r3, r3
 8010b16:	4618      	mov	r0, r3
 8010b18:	f7fa fc3a 	bl	800b390 <lwip_htons>
 8010b1c:	4603      	mov	r3, r0
 8010b1e:	b2db      	uxtb	r3, r3
 8010b20:	f003 0301 	and.w	r3, r3, #1
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	d01f      	beq.n	8010b68 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8010b28:	4b65      	ldr	r3, [pc, #404]	; (8010cc0 <tcp_receive+0x88c>)
 8010b2a:	68db      	ldr	r3, [r3, #12]
 8010b2c:	899b      	ldrh	r3, [r3, #12]
 8010b2e:	b29b      	uxth	r3, r3
 8010b30:	b21b      	sxth	r3, r3
 8010b32:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8010b36:	b21c      	sxth	r4, r3
 8010b38:	4b61      	ldr	r3, [pc, #388]	; (8010cc0 <tcp_receive+0x88c>)
 8010b3a:	68db      	ldr	r3, [r3, #12]
 8010b3c:	899b      	ldrh	r3, [r3, #12]
 8010b3e:	b29b      	uxth	r3, r3
 8010b40:	4618      	mov	r0, r3
 8010b42:	f7fa fc25 	bl	800b390 <lwip_htons>
 8010b46:	4603      	mov	r3, r0
 8010b48:	b2db      	uxtb	r3, r3
 8010b4a:	b29b      	uxth	r3, r3
 8010b4c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8010b50:	b29b      	uxth	r3, r3
 8010b52:	4618      	mov	r0, r3
 8010b54:	f7fa fc1c 	bl	800b390 <lwip_htons>
 8010b58:	4603      	mov	r3, r0
 8010b5a:	b21b      	sxth	r3, r3
 8010b5c:	4323      	orrs	r3, r4
 8010b5e:	b21a      	sxth	r2, r3
 8010b60:	4b57      	ldr	r3, [pc, #348]	; (8010cc0 <tcp_receive+0x88c>)
 8010b62:	68db      	ldr	r3, [r3, #12]
 8010b64:	b292      	uxth	r2, r2
 8010b66:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010b6c:	4b54      	ldr	r3, [pc, #336]	; (8010cc0 <tcp_receive+0x88c>)
 8010b6e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8010b70:	4b53      	ldr	r3, [pc, #332]	; (8010cc0 <tcp_receive+0x88c>)
 8010b72:	68db      	ldr	r3, [r3, #12]
 8010b74:	899b      	ldrh	r3, [r3, #12]
 8010b76:	b29b      	uxth	r3, r3
 8010b78:	4618      	mov	r0, r3
 8010b7a:	f7fa fc09 	bl	800b390 <lwip_htons>
 8010b7e:	4603      	mov	r3, r0
 8010b80:	b2db      	uxtb	r3, r3
 8010b82:	f003 0302 	and.w	r3, r3, #2
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d005      	beq.n	8010b96 <tcp_receive+0x762>
            inseg.len -= 1;
 8010b8a:	4b4d      	ldr	r3, [pc, #308]	; (8010cc0 <tcp_receive+0x88c>)
 8010b8c:	891b      	ldrh	r3, [r3, #8]
 8010b8e:	3b01      	subs	r3, #1
 8010b90:	b29a      	uxth	r2, r3
 8010b92:	4b4b      	ldr	r3, [pc, #300]	; (8010cc0 <tcp_receive+0x88c>)
 8010b94:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8010b96:	4b4a      	ldr	r3, [pc, #296]	; (8010cc0 <tcp_receive+0x88c>)
 8010b98:	685b      	ldr	r3, [r3, #4]
 8010b9a:	4a49      	ldr	r2, [pc, #292]	; (8010cc0 <tcp_receive+0x88c>)
 8010b9c:	8912      	ldrh	r2, [r2, #8]
 8010b9e:	4611      	mov	r1, r2
 8010ba0:	4618      	mov	r0, r3
 8010ba2:	f7fb fecb 	bl	800c93c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8010ba6:	4b46      	ldr	r3, [pc, #280]	; (8010cc0 <tcp_receive+0x88c>)
 8010ba8:	891c      	ldrh	r4, [r3, #8]
 8010baa:	4b45      	ldr	r3, [pc, #276]	; (8010cc0 <tcp_receive+0x88c>)
 8010bac:	68db      	ldr	r3, [r3, #12]
 8010bae:	899b      	ldrh	r3, [r3, #12]
 8010bb0:	b29b      	uxth	r3, r3
 8010bb2:	4618      	mov	r0, r3
 8010bb4:	f7fa fbec 	bl	800b390 <lwip_htons>
 8010bb8:	4603      	mov	r3, r0
 8010bba:	b2db      	uxtb	r3, r3
 8010bbc:	f003 0303 	and.w	r3, r3, #3
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	d001      	beq.n	8010bc8 <tcp_receive+0x794>
 8010bc4:	2301      	movs	r3, #1
 8010bc6:	e000      	b.n	8010bca <tcp_receive+0x796>
 8010bc8:	2300      	movs	r3, #0
 8010bca:	4423      	add	r3, r4
 8010bcc:	b29a      	uxth	r2, r3
 8010bce:	4b3d      	ldr	r3, [pc, #244]	; (8010cc4 <tcp_receive+0x890>)
 8010bd0:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8010bd2:	4b3c      	ldr	r3, [pc, #240]	; (8010cc4 <tcp_receive+0x890>)
 8010bd4:	881b      	ldrh	r3, [r3, #0]
 8010bd6:	461a      	mov	r2, r3
 8010bd8:	4b38      	ldr	r3, [pc, #224]	; (8010cbc <tcp_receive+0x888>)
 8010bda:	681b      	ldr	r3, [r3, #0]
 8010bdc:	441a      	add	r2, r3
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010be2:	6879      	ldr	r1, [r7, #4]
 8010be4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010be6:	440b      	add	r3, r1
 8010be8:	429a      	cmp	r2, r3
 8010bea:	d006      	beq.n	8010bfa <tcp_receive+0x7c6>
 8010bec:	4b36      	ldr	r3, [pc, #216]	; (8010cc8 <tcp_receive+0x894>)
 8010bee:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8010bf2:	4936      	ldr	r1, [pc, #216]	; (8010ccc <tcp_receive+0x898>)
 8010bf4:	4836      	ldr	r0, [pc, #216]	; (8010cd0 <tcp_receive+0x89c>)
 8010bf6:	f006 f843 	bl	8016c80 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	f000 80e7 	beq.w	8010dd2 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010c04:	4b2e      	ldr	r3, [pc, #184]	; (8010cc0 <tcp_receive+0x88c>)
 8010c06:	68db      	ldr	r3, [r3, #12]
 8010c08:	899b      	ldrh	r3, [r3, #12]
 8010c0a:	b29b      	uxth	r3, r3
 8010c0c:	4618      	mov	r0, r3
 8010c0e:	f7fa fbbf 	bl	800b390 <lwip_htons>
 8010c12:	4603      	mov	r3, r0
 8010c14:	b2db      	uxtb	r3, r3
 8010c16:	f003 0301 	and.w	r3, r3, #1
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	d010      	beq.n	8010c40 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8010c1e:	e00a      	b.n	8010c36 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010c24:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010c2a:	681a      	ldr	r2, [r3, #0]
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8010c30:	68f8      	ldr	r0, [r7, #12]
 8010c32:	f7fd fcde 	bl	800e5f2 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010c3a:	2b00      	cmp	r3, #0
 8010c3c:	d1f0      	bne.n	8010c20 <tcp_receive+0x7ec>
 8010c3e:	e0c8      	b.n	8010dd2 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010c44:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8010c46:	e052      	b.n	8010cee <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8010c48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c4a:	68db      	ldr	r3, [r3, #12]
 8010c4c:	899b      	ldrh	r3, [r3, #12]
 8010c4e:	b29b      	uxth	r3, r3
 8010c50:	4618      	mov	r0, r3
 8010c52:	f7fa fb9d 	bl	800b390 <lwip_htons>
 8010c56:	4603      	mov	r3, r0
 8010c58:	b2db      	uxtb	r3, r3
 8010c5a:	f003 0301 	and.w	r3, r3, #1
 8010c5e:	2b00      	cmp	r3, #0
 8010c60:	d03d      	beq.n	8010cde <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8010c62:	4b17      	ldr	r3, [pc, #92]	; (8010cc0 <tcp_receive+0x88c>)
 8010c64:	68db      	ldr	r3, [r3, #12]
 8010c66:	899b      	ldrh	r3, [r3, #12]
 8010c68:	b29b      	uxth	r3, r3
 8010c6a:	4618      	mov	r0, r3
 8010c6c:	f7fa fb90 	bl	800b390 <lwip_htons>
 8010c70:	4603      	mov	r3, r0
 8010c72:	b2db      	uxtb	r3, r3
 8010c74:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8010c78:	2b00      	cmp	r3, #0
 8010c7a:	d130      	bne.n	8010cde <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8010c7c:	4b10      	ldr	r3, [pc, #64]	; (8010cc0 <tcp_receive+0x88c>)
 8010c7e:	68db      	ldr	r3, [r3, #12]
 8010c80:	899b      	ldrh	r3, [r3, #12]
 8010c82:	b29c      	uxth	r4, r3
 8010c84:	2001      	movs	r0, #1
 8010c86:	f7fa fb83 	bl	800b390 <lwip_htons>
 8010c8a:	4603      	mov	r3, r0
 8010c8c:	461a      	mov	r2, r3
 8010c8e:	4b0c      	ldr	r3, [pc, #48]	; (8010cc0 <tcp_receive+0x88c>)
 8010c90:	68db      	ldr	r3, [r3, #12]
 8010c92:	4322      	orrs	r2, r4
 8010c94:	b292      	uxth	r2, r2
 8010c96:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8010c98:	4b09      	ldr	r3, [pc, #36]	; (8010cc0 <tcp_receive+0x88c>)
 8010c9a:	891c      	ldrh	r4, [r3, #8]
 8010c9c:	4b08      	ldr	r3, [pc, #32]	; (8010cc0 <tcp_receive+0x88c>)
 8010c9e:	68db      	ldr	r3, [r3, #12]
 8010ca0:	899b      	ldrh	r3, [r3, #12]
 8010ca2:	b29b      	uxth	r3, r3
 8010ca4:	4618      	mov	r0, r3
 8010ca6:	f7fa fb73 	bl	800b390 <lwip_htons>
 8010caa:	4603      	mov	r3, r0
 8010cac:	b2db      	uxtb	r3, r3
 8010cae:	f003 0303 	and.w	r3, r3, #3
 8010cb2:	2b00      	cmp	r3, #0
 8010cb4:	d00e      	beq.n	8010cd4 <tcp_receive+0x8a0>
 8010cb6:	2301      	movs	r3, #1
 8010cb8:	e00d      	b.n	8010cd6 <tcp_receive+0x8a2>
 8010cba:	bf00      	nop
 8010cbc:	2000be48 	.word	0x2000be48
 8010cc0:	2000be28 	.word	0x2000be28
 8010cc4:	2000be52 	.word	0x2000be52
 8010cc8:	08019374 	.word	0x08019374
 8010ccc:	0801971c 	.word	0x0801971c
 8010cd0:	080193c0 	.word	0x080193c0
 8010cd4:	2300      	movs	r3, #0
 8010cd6:	4423      	add	r3, r4
 8010cd8:	b29a      	uxth	r2, r3
 8010cda:	4b98      	ldr	r3, [pc, #608]	; (8010f3c <tcp_receive+0xb08>)
 8010cdc:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8010cde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010ce0:	613b      	str	r3, [r7, #16]
              next = next->next;
 8010ce2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010ce4:	681b      	ldr	r3, [r3, #0]
 8010ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8010ce8:	6938      	ldr	r0, [r7, #16]
 8010cea:	f7fd fc82 	bl	800e5f2 <tcp_seg_free>
            while (next &&
 8010cee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	d00e      	beq.n	8010d12 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8010cf4:	4b91      	ldr	r3, [pc, #580]	; (8010f3c <tcp_receive+0xb08>)
 8010cf6:	881b      	ldrh	r3, [r3, #0]
 8010cf8:	461a      	mov	r2, r3
 8010cfa:	4b91      	ldr	r3, [pc, #580]	; (8010f40 <tcp_receive+0xb0c>)
 8010cfc:	681b      	ldr	r3, [r3, #0]
 8010cfe:	441a      	add	r2, r3
 8010d00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010d02:	68db      	ldr	r3, [r3, #12]
 8010d04:	685b      	ldr	r3, [r3, #4]
 8010d06:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010d08:	8909      	ldrh	r1, [r1, #8]
 8010d0a:	440b      	add	r3, r1
 8010d0c:	1ad3      	subs	r3, r2, r3
            while (next &&
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	da9a      	bge.n	8010c48 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8010d12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010d14:	2b00      	cmp	r3, #0
 8010d16:	d059      	beq.n	8010dcc <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8010d18:	4b88      	ldr	r3, [pc, #544]	; (8010f3c <tcp_receive+0xb08>)
 8010d1a:	881b      	ldrh	r3, [r3, #0]
 8010d1c:	461a      	mov	r2, r3
 8010d1e:	4b88      	ldr	r3, [pc, #544]	; (8010f40 <tcp_receive+0xb0c>)
 8010d20:	681b      	ldr	r3, [r3, #0]
 8010d22:	441a      	add	r2, r3
 8010d24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010d26:	68db      	ldr	r3, [r3, #12]
 8010d28:	685b      	ldr	r3, [r3, #4]
 8010d2a:	1ad3      	subs	r3, r2, r3
            if (next &&
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	dd4d      	ble.n	8010dcc <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8010d30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010d32:	68db      	ldr	r3, [r3, #12]
 8010d34:	685b      	ldr	r3, [r3, #4]
 8010d36:	b29a      	uxth	r2, r3
 8010d38:	4b81      	ldr	r3, [pc, #516]	; (8010f40 <tcp_receive+0xb0c>)
 8010d3a:	681b      	ldr	r3, [r3, #0]
 8010d3c:	b29b      	uxth	r3, r3
 8010d3e:	1ad3      	subs	r3, r2, r3
 8010d40:	b29a      	uxth	r2, r3
 8010d42:	4b80      	ldr	r3, [pc, #512]	; (8010f44 <tcp_receive+0xb10>)
 8010d44:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8010d46:	4b7f      	ldr	r3, [pc, #508]	; (8010f44 <tcp_receive+0xb10>)
 8010d48:	68db      	ldr	r3, [r3, #12]
 8010d4a:	899b      	ldrh	r3, [r3, #12]
 8010d4c:	b29b      	uxth	r3, r3
 8010d4e:	4618      	mov	r0, r3
 8010d50:	f7fa fb1e 	bl	800b390 <lwip_htons>
 8010d54:	4603      	mov	r3, r0
 8010d56:	b2db      	uxtb	r3, r3
 8010d58:	f003 0302 	and.w	r3, r3, #2
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	d005      	beq.n	8010d6c <tcp_receive+0x938>
                inseg.len -= 1;
 8010d60:	4b78      	ldr	r3, [pc, #480]	; (8010f44 <tcp_receive+0xb10>)
 8010d62:	891b      	ldrh	r3, [r3, #8]
 8010d64:	3b01      	subs	r3, #1
 8010d66:	b29a      	uxth	r2, r3
 8010d68:	4b76      	ldr	r3, [pc, #472]	; (8010f44 <tcp_receive+0xb10>)
 8010d6a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8010d6c:	4b75      	ldr	r3, [pc, #468]	; (8010f44 <tcp_receive+0xb10>)
 8010d6e:	685b      	ldr	r3, [r3, #4]
 8010d70:	4a74      	ldr	r2, [pc, #464]	; (8010f44 <tcp_receive+0xb10>)
 8010d72:	8912      	ldrh	r2, [r2, #8]
 8010d74:	4611      	mov	r1, r2
 8010d76:	4618      	mov	r0, r3
 8010d78:	f7fb fde0 	bl	800c93c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8010d7c:	4b71      	ldr	r3, [pc, #452]	; (8010f44 <tcp_receive+0xb10>)
 8010d7e:	891c      	ldrh	r4, [r3, #8]
 8010d80:	4b70      	ldr	r3, [pc, #448]	; (8010f44 <tcp_receive+0xb10>)
 8010d82:	68db      	ldr	r3, [r3, #12]
 8010d84:	899b      	ldrh	r3, [r3, #12]
 8010d86:	b29b      	uxth	r3, r3
 8010d88:	4618      	mov	r0, r3
 8010d8a:	f7fa fb01 	bl	800b390 <lwip_htons>
 8010d8e:	4603      	mov	r3, r0
 8010d90:	b2db      	uxtb	r3, r3
 8010d92:	f003 0303 	and.w	r3, r3, #3
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	d001      	beq.n	8010d9e <tcp_receive+0x96a>
 8010d9a:	2301      	movs	r3, #1
 8010d9c:	e000      	b.n	8010da0 <tcp_receive+0x96c>
 8010d9e:	2300      	movs	r3, #0
 8010da0:	4423      	add	r3, r4
 8010da2:	b29a      	uxth	r2, r3
 8010da4:	4b65      	ldr	r3, [pc, #404]	; (8010f3c <tcp_receive+0xb08>)
 8010da6:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8010da8:	4b64      	ldr	r3, [pc, #400]	; (8010f3c <tcp_receive+0xb08>)
 8010daa:	881b      	ldrh	r3, [r3, #0]
 8010dac:	461a      	mov	r2, r3
 8010dae:	4b64      	ldr	r3, [pc, #400]	; (8010f40 <tcp_receive+0xb0c>)
 8010db0:	681b      	ldr	r3, [r3, #0]
 8010db2:	441a      	add	r2, r3
 8010db4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010db6:	68db      	ldr	r3, [r3, #12]
 8010db8:	685b      	ldr	r3, [r3, #4]
 8010dba:	429a      	cmp	r2, r3
 8010dbc:	d006      	beq.n	8010dcc <tcp_receive+0x998>
 8010dbe:	4b62      	ldr	r3, [pc, #392]	; (8010f48 <tcp_receive+0xb14>)
 8010dc0:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8010dc4:	4961      	ldr	r1, [pc, #388]	; (8010f4c <tcp_receive+0xb18>)
 8010dc6:	4862      	ldr	r0, [pc, #392]	; (8010f50 <tcp_receive+0xb1c>)
 8010dc8:	f005 ff5a 	bl	8016c80 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010dd0:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8010dd2:	4b5a      	ldr	r3, [pc, #360]	; (8010f3c <tcp_receive+0xb08>)
 8010dd4:	881b      	ldrh	r3, [r3, #0]
 8010dd6:	461a      	mov	r2, r3
 8010dd8:	4b59      	ldr	r3, [pc, #356]	; (8010f40 <tcp_receive+0xb0c>)
 8010dda:	681b      	ldr	r3, [r3, #0]
 8010ddc:	441a      	add	r2, r3
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010de6:	4b55      	ldr	r3, [pc, #340]	; (8010f3c <tcp_receive+0xb08>)
 8010de8:	881b      	ldrh	r3, [r3, #0]
 8010dea:	429a      	cmp	r2, r3
 8010dec:	d206      	bcs.n	8010dfc <tcp_receive+0x9c8>
 8010dee:	4b56      	ldr	r3, [pc, #344]	; (8010f48 <tcp_receive+0xb14>)
 8010df0:	f240 6207 	movw	r2, #1543	; 0x607
 8010df4:	4957      	ldr	r1, [pc, #348]	; (8010f54 <tcp_receive+0xb20>)
 8010df6:	4856      	ldr	r0, [pc, #344]	; (8010f50 <tcp_receive+0xb1c>)
 8010df8:	f005 ff42 	bl	8016c80 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010e00:	4b4e      	ldr	r3, [pc, #312]	; (8010f3c <tcp_receive+0xb08>)
 8010e02:	881b      	ldrh	r3, [r3, #0]
 8010e04:	1ad3      	subs	r3, r2, r3
 8010e06:	b29a      	uxth	r2, r3
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8010e0c:	6878      	ldr	r0, [r7, #4]
 8010e0e:	f7fc fdb3 	bl	800d978 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8010e12:	4b4c      	ldr	r3, [pc, #304]	; (8010f44 <tcp_receive+0xb10>)
 8010e14:	685b      	ldr	r3, [r3, #4]
 8010e16:	891b      	ldrh	r3, [r3, #8]
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	d006      	beq.n	8010e2a <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8010e1c:	4b49      	ldr	r3, [pc, #292]	; (8010f44 <tcp_receive+0xb10>)
 8010e1e:	685b      	ldr	r3, [r3, #4]
 8010e20:	4a4d      	ldr	r2, [pc, #308]	; (8010f58 <tcp_receive+0xb24>)
 8010e22:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8010e24:	4b47      	ldr	r3, [pc, #284]	; (8010f44 <tcp_receive+0xb10>)
 8010e26:	2200      	movs	r2, #0
 8010e28:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010e2a:	4b46      	ldr	r3, [pc, #280]	; (8010f44 <tcp_receive+0xb10>)
 8010e2c:	68db      	ldr	r3, [r3, #12]
 8010e2e:	899b      	ldrh	r3, [r3, #12]
 8010e30:	b29b      	uxth	r3, r3
 8010e32:	4618      	mov	r0, r3
 8010e34:	f7fa faac 	bl	800b390 <lwip_htons>
 8010e38:	4603      	mov	r3, r0
 8010e3a:	b2db      	uxtb	r3, r3
 8010e3c:	f003 0301 	and.w	r3, r3, #1
 8010e40:	2b00      	cmp	r3, #0
 8010e42:	f000 80b8 	beq.w	8010fb6 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8010e46:	4b45      	ldr	r3, [pc, #276]	; (8010f5c <tcp_receive+0xb28>)
 8010e48:	781b      	ldrb	r3, [r3, #0]
 8010e4a:	f043 0320 	orr.w	r3, r3, #32
 8010e4e:	b2da      	uxtb	r2, r3
 8010e50:	4b42      	ldr	r3, [pc, #264]	; (8010f5c <tcp_receive+0xb28>)
 8010e52:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8010e54:	e0af      	b.n	8010fb6 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010e5a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010e60:	68db      	ldr	r3, [r3, #12]
 8010e62:	685b      	ldr	r3, [r3, #4]
 8010e64:	4a36      	ldr	r2, [pc, #216]	; (8010f40 <tcp_receive+0xb0c>)
 8010e66:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8010e68:	68bb      	ldr	r3, [r7, #8]
 8010e6a:	891b      	ldrh	r3, [r3, #8]
 8010e6c:	461c      	mov	r4, r3
 8010e6e:	68bb      	ldr	r3, [r7, #8]
 8010e70:	68db      	ldr	r3, [r3, #12]
 8010e72:	899b      	ldrh	r3, [r3, #12]
 8010e74:	b29b      	uxth	r3, r3
 8010e76:	4618      	mov	r0, r3
 8010e78:	f7fa fa8a 	bl	800b390 <lwip_htons>
 8010e7c:	4603      	mov	r3, r0
 8010e7e:	b2db      	uxtb	r3, r3
 8010e80:	f003 0303 	and.w	r3, r3, #3
 8010e84:	2b00      	cmp	r3, #0
 8010e86:	d001      	beq.n	8010e8c <tcp_receive+0xa58>
 8010e88:	2301      	movs	r3, #1
 8010e8a:	e000      	b.n	8010e8e <tcp_receive+0xa5a>
 8010e8c:	2300      	movs	r3, #0
 8010e8e:	191a      	adds	r2, r3, r4
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e94:	441a      	add	r2, r3
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010e9e:	461c      	mov	r4, r3
 8010ea0:	68bb      	ldr	r3, [r7, #8]
 8010ea2:	891b      	ldrh	r3, [r3, #8]
 8010ea4:	461d      	mov	r5, r3
 8010ea6:	68bb      	ldr	r3, [r7, #8]
 8010ea8:	68db      	ldr	r3, [r3, #12]
 8010eaa:	899b      	ldrh	r3, [r3, #12]
 8010eac:	b29b      	uxth	r3, r3
 8010eae:	4618      	mov	r0, r3
 8010eb0:	f7fa fa6e 	bl	800b390 <lwip_htons>
 8010eb4:	4603      	mov	r3, r0
 8010eb6:	b2db      	uxtb	r3, r3
 8010eb8:	f003 0303 	and.w	r3, r3, #3
 8010ebc:	2b00      	cmp	r3, #0
 8010ebe:	d001      	beq.n	8010ec4 <tcp_receive+0xa90>
 8010ec0:	2301      	movs	r3, #1
 8010ec2:	e000      	b.n	8010ec6 <tcp_receive+0xa92>
 8010ec4:	2300      	movs	r3, #0
 8010ec6:	442b      	add	r3, r5
 8010ec8:	429c      	cmp	r4, r3
 8010eca:	d206      	bcs.n	8010eda <tcp_receive+0xaa6>
 8010ecc:	4b1e      	ldr	r3, [pc, #120]	; (8010f48 <tcp_receive+0xb14>)
 8010ece:	f240 622b 	movw	r2, #1579	; 0x62b
 8010ed2:	4923      	ldr	r1, [pc, #140]	; (8010f60 <tcp_receive+0xb2c>)
 8010ed4:	481e      	ldr	r0, [pc, #120]	; (8010f50 <tcp_receive+0xb1c>)
 8010ed6:	f005 fed3 	bl	8016c80 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8010eda:	68bb      	ldr	r3, [r7, #8]
 8010edc:	891b      	ldrh	r3, [r3, #8]
 8010ede:	461c      	mov	r4, r3
 8010ee0:	68bb      	ldr	r3, [r7, #8]
 8010ee2:	68db      	ldr	r3, [r3, #12]
 8010ee4:	899b      	ldrh	r3, [r3, #12]
 8010ee6:	b29b      	uxth	r3, r3
 8010ee8:	4618      	mov	r0, r3
 8010eea:	f7fa fa51 	bl	800b390 <lwip_htons>
 8010eee:	4603      	mov	r3, r0
 8010ef0:	b2db      	uxtb	r3, r3
 8010ef2:	f003 0303 	and.w	r3, r3, #3
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	d001      	beq.n	8010efe <tcp_receive+0xaca>
 8010efa:	2301      	movs	r3, #1
 8010efc:	e000      	b.n	8010f00 <tcp_receive+0xacc>
 8010efe:	2300      	movs	r3, #0
 8010f00:	1919      	adds	r1, r3, r4
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010f06:	b28b      	uxth	r3, r1
 8010f08:	1ad3      	subs	r3, r2, r3
 8010f0a:	b29a      	uxth	r2, r3
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8010f10:	6878      	ldr	r0, [r7, #4]
 8010f12:	f7fc fd31 	bl	800d978 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8010f16:	68bb      	ldr	r3, [r7, #8]
 8010f18:	685b      	ldr	r3, [r3, #4]
 8010f1a:	891b      	ldrh	r3, [r3, #8]
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	d028      	beq.n	8010f72 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8010f20:	4b0d      	ldr	r3, [pc, #52]	; (8010f58 <tcp_receive+0xb24>)
 8010f22:	681b      	ldr	r3, [r3, #0]
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	d01d      	beq.n	8010f64 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8010f28:	4b0b      	ldr	r3, [pc, #44]	; (8010f58 <tcp_receive+0xb24>)
 8010f2a:	681a      	ldr	r2, [r3, #0]
 8010f2c:	68bb      	ldr	r3, [r7, #8]
 8010f2e:	685b      	ldr	r3, [r3, #4]
 8010f30:	4619      	mov	r1, r3
 8010f32:	4610      	mov	r0, r2
 8010f34:	f7fb ff54 	bl	800cde0 <pbuf_cat>
 8010f38:	e018      	b.n	8010f6c <tcp_receive+0xb38>
 8010f3a:	bf00      	nop
 8010f3c:	2000be52 	.word	0x2000be52
 8010f40:	2000be48 	.word	0x2000be48
 8010f44:	2000be28 	.word	0x2000be28
 8010f48:	08019374 	.word	0x08019374
 8010f4c:	08019754 	.word	0x08019754
 8010f50:	080193c0 	.word	0x080193c0
 8010f54:	08019790 	.word	0x08019790
 8010f58:	2000be58 	.word	0x2000be58
 8010f5c:	2000be55 	.word	0x2000be55
 8010f60:	080197b0 	.word	0x080197b0
            } else {
              recv_data = cseg->p;
 8010f64:	68bb      	ldr	r3, [r7, #8]
 8010f66:	685b      	ldr	r3, [r3, #4]
 8010f68:	4a70      	ldr	r2, [pc, #448]	; (801112c <tcp_receive+0xcf8>)
 8010f6a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8010f6c:	68bb      	ldr	r3, [r7, #8]
 8010f6e:	2200      	movs	r2, #0
 8010f70:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8010f72:	68bb      	ldr	r3, [r7, #8]
 8010f74:	68db      	ldr	r3, [r3, #12]
 8010f76:	899b      	ldrh	r3, [r3, #12]
 8010f78:	b29b      	uxth	r3, r3
 8010f7a:	4618      	mov	r0, r3
 8010f7c:	f7fa fa08 	bl	800b390 <lwip_htons>
 8010f80:	4603      	mov	r3, r0
 8010f82:	b2db      	uxtb	r3, r3
 8010f84:	f003 0301 	and.w	r3, r3, #1
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	d00d      	beq.n	8010fa8 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8010f8c:	4b68      	ldr	r3, [pc, #416]	; (8011130 <tcp_receive+0xcfc>)
 8010f8e:	781b      	ldrb	r3, [r3, #0]
 8010f90:	f043 0320 	orr.w	r3, r3, #32
 8010f94:	b2da      	uxtb	r2, r3
 8010f96:	4b66      	ldr	r3, [pc, #408]	; (8011130 <tcp_receive+0xcfc>)
 8010f98:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	7d1b      	ldrb	r3, [r3, #20]
 8010f9e:	2b04      	cmp	r3, #4
 8010fa0:	d102      	bne.n	8010fa8 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	2207      	movs	r2, #7
 8010fa6:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8010fa8:	68bb      	ldr	r3, [r7, #8]
 8010faa:	681a      	ldr	r2, [r3, #0]
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8010fb0:	68b8      	ldr	r0, [r7, #8]
 8010fb2:	f7fd fb1e 	bl	800e5f2 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	d008      	beq.n	8010fd0 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010fc2:	68db      	ldr	r3, [r3, #12]
 8010fc4:	685a      	ldr	r2, [r3, #4]
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8010fca:	429a      	cmp	r2, r3
 8010fcc:	f43f af43 	beq.w	8010e56 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	8b5b      	ldrh	r3, [r3, #26]
 8010fd4:	f003 0301 	and.w	r3, r3, #1
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	d00e      	beq.n	8010ffa <tcp_receive+0xbc6>
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	8b5b      	ldrh	r3, [r3, #26]
 8010fe0:	f023 0301 	bic.w	r3, r3, #1
 8010fe4:	b29a      	uxth	r2, r3
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	835a      	strh	r2, [r3, #26]
 8010fea:	687b      	ldr	r3, [r7, #4]
 8010fec:	8b5b      	ldrh	r3, [r3, #26]
 8010fee:	f043 0302 	orr.w	r3, r3, #2
 8010ff2:	b29a      	uxth	r2, r3
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8010ff8:	e188      	b.n	801130c <tcp_receive+0xed8>
        tcp_ack(pcb);
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	8b5b      	ldrh	r3, [r3, #26]
 8010ffe:	f043 0301 	orr.w	r3, r3, #1
 8011002:	b29a      	uxth	r2, r3
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011008:	e180      	b.n	801130c <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801100e:	2b00      	cmp	r3, #0
 8011010:	d106      	bne.n	8011020 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8011012:	4848      	ldr	r0, [pc, #288]	; (8011134 <tcp_receive+0xd00>)
 8011014:	f7fd fb06 	bl	800e624 <tcp_seg_copy>
 8011018:	4602      	mov	r2, r0
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	675a      	str	r2, [r3, #116]	; 0x74
 801101e:	e16d      	b.n	80112fc <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8011020:	2300      	movs	r3, #0
 8011022:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011028:	63bb      	str	r3, [r7, #56]	; 0x38
 801102a:	e157      	b.n	80112dc <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 801102c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801102e:	68db      	ldr	r3, [r3, #12]
 8011030:	685a      	ldr	r2, [r3, #4]
 8011032:	4b41      	ldr	r3, [pc, #260]	; (8011138 <tcp_receive+0xd04>)
 8011034:	681b      	ldr	r3, [r3, #0]
 8011036:	429a      	cmp	r2, r3
 8011038:	d11d      	bne.n	8011076 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801103a:	4b3e      	ldr	r3, [pc, #248]	; (8011134 <tcp_receive+0xd00>)
 801103c:	891a      	ldrh	r2, [r3, #8]
 801103e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011040:	891b      	ldrh	r3, [r3, #8]
 8011042:	429a      	cmp	r2, r3
 8011044:	f240 814f 	bls.w	80112e6 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011048:	483a      	ldr	r0, [pc, #232]	; (8011134 <tcp_receive+0xd00>)
 801104a:	f7fd faeb 	bl	800e624 <tcp_seg_copy>
 801104e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8011050:	697b      	ldr	r3, [r7, #20]
 8011052:	2b00      	cmp	r3, #0
 8011054:	f000 8149 	beq.w	80112ea <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8011058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801105a:	2b00      	cmp	r3, #0
 801105c:	d003      	beq.n	8011066 <tcp_receive+0xc32>
                    prev->next = cseg;
 801105e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011060:	697a      	ldr	r2, [r7, #20]
 8011062:	601a      	str	r2, [r3, #0]
 8011064:	e002      	b.n	801106c <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	697a      	ldr	r2, [r7, #20]
 801106a:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 801106c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801106e:	6978      	ldr	r0, [r7, #20]
 8011070:	f7ff f8dc 	bl	801022c <tcp_oos_insert_segment>
                }
                break;
 8011074:	e139      	b.n	80112ea <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8011076:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011078:	2b00      	cmp	r3, #0
 801107a:	d117      	bne.n	80110ac <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801107c:	4b2e      	ldr	r3, [pc, #184]	; (8011138 <tcp_receive+0xd04>)
 801107e:	681a      	ldr	r2, [r3, #0]
 8011080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011082:	68db      	ldr	r3, [r3, #12]
 8011084:	685b      	ldr	r3, [r3, #4]
 8011086:	1ad3      	subs	r3, r2, r3
 8011088:	2b00      	cmp	r3, #0
 801108a:	da57      	bge.n	801113c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801108c:	4829      	ldr	r0, [pc, #164]	; (8011134 <tcp_receive+0xd00>)
 801108e:	f7fd fac9 	bl	800e624 <tcp_seg_copy>
 8011092:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8011094:	69bb      	ldr	r3, [r7, #24]
 8011096:	2b00      	cmp	r3, #0
 8011098:	f000 8129 	beq.w	80112ee <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	69ba      	ldr	r2, [r7, #24]
 80110a0:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 80110a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80110a4:	69b8      	ldr	r0, [r7, #24]
 80110a6:	f7ff f8c1 	bl	801022c <tcp_oos_insert_segment>
                  }
                  break;
 80110aa:	e120      	b.n	80112ee <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80110ac:	4b22      	ldr	r3, [pc, #136]	; (8011138 <tcp_receive+0xd04>)
 80110ae:	681a      	ldr	r2, [r3, #0]
 80110b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110b2:	68db      	ldr	r3, [r3, #12]
 80110b4:	685b      	ldr	r3, [r3, #4]
 80110b6:	1ad3      	subs	r3, r2, r3
 80110b8:	3b01      	subs	r3, #1
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	db3e      	blt.n	801113c <tcp_receive+0xd08>
 80110be:	4b1e      	ldr	r3, [pc, #120]	; (8011138 <tcp_receive+0xd04>)
 80110c0:	681a      	ldr	r2, [r3, #0]
 80110c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110c4:	68db      	ldr	r3, [r3, #12]
 80110c6:	685b      	ldr	r3, [r3, #4]
 80110c8:	1ad3      	subs	r3, r2, r3
 80110ca:	3301      	adds	r3, #1
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	dc35      	bgt.n	801113c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80110d0:	4818      	ldr	r0, [pc, #96]	; (8011134 <tcp_receive+0xd00>)
 80110d2:	f7fd faa7 	bl	800e624 <tcp_seg_copy>
 80110d6:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 80110d8:	69fb      	ldr	r3, [r7, #28]
 80110da:	2b00      	cmp	r3, #0
 80110dc:	f000 8109 	beq.w	80112f2 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80110e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110e2:	68db      	ldr	r3, [r3, #12]
 80110e4:	685b      	ldr	r3, [r3, #4]
 80110e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80110e8:	8912      	ldrh	r2, [r2, #8]
 80110ea:	441a      	add	r2, r3
 80110ec:	4b12      	ldr	r3, [pc, #72]	; (8011138 <tcp_receive+0xd04>)
 80110ee:	681b      	ldr	r3, [r3, #0]
 80110f0:	1ad3      	subs	r3, r2, r3
 80110f2:	2b00      	cmp	r3, #0
 80110f4:	dd12      	ble.n	801111c <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80110f6:	4b10      	ldr	r3, [pc, #64]	; (8011138 <tcp_receive+0xd04>)
 80110f8:	681b      	ldr	r3, [r3, #0]
 80110fa:	b29a      	uxth	r2, r3
 80110fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110fe:	68db      	ldr	r3, [r3, #12]
 8011100:	685b      	ldr	r3, [r3, #4]
 8011102:	b29b      	uxth	r3, r3
 8011104:	1ad3      	subs	r3, r2, r3
 8011106:	b29a      	uxth	r2, r3
 8011108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801110a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 801110c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801110e:	685a      	ldr	r2, [r3, #4]
 8011110:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011112:	891b      	ldrh	r3, [r3, #8]
 8011114:	4619      	mov	r1, r3
 8011116:	4610      	mov	r0, r2
 8011118:	f7fb fc10 	bl	800c93c <pbuf_realloc>
                    }
                    prev->next = cseg;
 801111c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801111e:	69fa      	ldr	r2, [r7, #28]
 8011120:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8011122:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011124:	69f8      	ldr	r0, [r7, #28]
 8011126:	f7ff f881 	bl	801022c <tcp_oos_insert_segment>
                  }
                  break;
 801112a:	e0e2      	b.n	80112f2 <tcp_receive+0xebe>
 801112c:	2000be58 	.word	0x2000be58
 8011130:	2000be55 	.word	0x2000be55
 8011134:	2000be28 	.word	0x2000be28
 8011138:	2000be48 	.word	0x2000be48
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 801113c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801113e:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8011140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011142:	681b      	ldr	r3, [r3, #0]
 8011144:	2b00      	cmp	r3, #0
 8011146:	f040 80c6 	bne.w	80112d6 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801114a:	4b80      	ldr	r3, [pc, #512]	; (801134c <tcp_receive+0xf18>)
 801114c:	681a      	ldr	r2, [r3, #0]
 801114e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011150:	68db      	ldr	r3, [r3, #12]
 8011152:	685b      	ldr	r3, [r3, #4]
 8011154:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8011156:	2b00      	cmp	r3, #0
 8011158:	f340 80bd 	ble.w	80112d6 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801115c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801115e:	68db      	ldr	r3, [r3, #12]
 8011160:	899b      	ldrh	r3, [r3, #12]
 8011162:	b29b      	uxth	r3, r3
 8011164:	4618      	mov	r0, r3
 8011166:	f7fa f913 	bl	800b390 <lwip_htons>
 801116a:	4603      	mov	r3, r0
 801116c:	b2db      	uxtb	r3, r3
 801116e:	f003 0301 	and.w	r3, r3, #1
 8011172:	2b00      	cmp	r3, #0
 8011174:	f040 80bf 	bne.w	80112f6 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8011178:	4875      	ldr	r0, [pc, #468]	; (8011350 <tcp_receive+0xf1c>)
 801117a:	f7fd fa53 	bl	800e624 <tcp_seg_copy>
 801117e:	4602      	mov	r2, r0
 8011180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011182:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8011184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011186:	681b      	ldr	r3, [r3, #0]
 8011188:	2b00      	cmp	r3, #0
 801118a:	f000 80b6 	beq.w	80112fa <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801118e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011190:	68db      	ldr	r3, [r3, #12]
 8011192:	685b      	ldr	r3, [r3, #4]
 8011194:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011196:	8912      	ldrh	r2, [r2, #8]
 8011198:	441a      	add	r2, r3
 801119a:	4b6c      	ldr	r3, [pc, #432]	; (801134c <tcp_receive+0xf18>)
 801119c:	681b      	ldr	r3, [r3, #0]
 801119e:	1ad3      	subs	r3, r2, r3
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	dd12      	ble.n	80111ca <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80111a4:	4b69      	ldr	r3, [pc, #420]	; (801134c <tcp_receive+0xf18>)
 80111a6:	681b      	ldr	r3, [r3, #0]
 80111a8:	b29a      	uxth	r2, r3
 80111aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111ac:	68db      	ldr	r3, [r3, #12]
 80111ae:	685b      	ldr	r3, [r3, #4]
 80111b0:	b29b      	uxth	r3, r3
 80111b2:	1ad3      	subs	r3, r2, r3
 80111b4:	b29a      	uxth	r2, r3
 80111b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111b8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80111ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111bc:	685a      	ldr	r2, [r3, #4]
 80111be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111c0:	891b      	ldrh	r3, [r3, #8]
 80111c2:	4619      	mov	r1, r3
 80111c4:	4610      	mov	r0, r2
 80111c6:	f7fb fbb9 	bl	800c93c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80111ca:	4b62      	ldr	r3, [pc, #392]	; (8011354 <tcp_receive+0xf20>)
 80111cc:	881b      	ldrh	r3, [r3, #0]
 80111ce:	461a      	mov	r2, r3
 80111d0:	4b5e      	ldr	r3, [pc, #376]	; (801134c <tcp_receive+0xf18>)
 80111d2:	681b      	ldr	r3, [r3, #0]
 80111d4:	441a      	add	r2, r3
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80111da:	6879      	ldr	r1, [r7, #4]
 80111dc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80111de:	440b      	add	r3, r1
 80111e0:	1ad3      	subs	r3, r2, r3
 80111e2:	2b00      	cmp	r3, #0
 80111e4:	f340 8089 	ble.w	80112fa <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80111e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111ea:	681b      	ldr	r3, [r3, #0]
 80111ec:	68db      	ldr	r3, [r3, #12]
 80111ee:	899b      	ldrh	r3, [r3, #12]
 80111f0:	b29b      	uxth	r3, r3
 80111f2:	4618      	mov	r0, r3
 80111f4:	f7fa f8cc 	bl	800b390 <lwip_htons>
 80111f8:	4603      	mov	r3, r0
 80111fa:	b2db      	uxtb	r3, r3
 80111fc:	f003 0301 	and.w	r3, r3, #1
 8011200:	2b00      	cmp	r3, #0
 8011202:	d022      	beq.n	801124a <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8011204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011206:	681b      	ldr	r3, [r3, #0]
 8011208:	68db      	ldr	r3, [r3, #12]
 801120a:	899b      	ldrh	r3, [r3, #12]
 801120c:	b29b      	uxth	r3, r3
 801120e:	b21b      	sxth	r3, r3
 8011210:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011214:	b21c      	sxth	r4, r3
 8011216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011218:	681b      	ldr	r3, [r3, #0]
 801121a:	68db      	ldr	r3, [r3, #12]
 801121c:	899b      	ldrh	r3, [r3, #12]
 801121e:	b29b      	uxth	r3, r3
 8011220:	4618      	mov	r0, r3
 8011222:	f7fa f8b5 	bl	800b390 <lwip_htons>
 8011226:	4603      	mov	r3, r0
 8011228:	b2db      	uxtb	r3, r3
 801122a:	b29b      	uxth	r3, r3
 801122c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8011230:	b29b      	uxth	r3, r3
 8011232:	4618      	mov	r0, r3
 8011234:	f7fa f8ac 	bl	800b390 <lwip_htons>
 8011238:	4603      	mov	r3, r0
 801123a:	b21b      	sxth	r3, r3
 801123c:	4323      	orrs	r3, r4
 801123e:	b21a      	sxth	r2, r3
 8011240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011242:	681b      	ldr	r3, [r3, #0]
 8011244:	68db      	ldr	r3, [r3, #12]
 8011246:	b292      	uxth	r2, r2
 8011248:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801124e:	b29a      	uxth	r2, r3
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011254:	4413      	add	r3, r2
 8011256:	b299      	uxth	r1, r3
 8011258:	4b3c      	ldr	r3, [pc, #240]	; (801134c <tcp_receive+0xf18>)
 801125a:	681b      	ldr	r3, [r3, #0]
 801125c:	b29a      	uxth	r2, r3
 801125e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011260:	681b      	ldr	r3, [r3, #0]
 8011262:	1a8a      	subs	r2, r1, r2
 8011264:	b292      	uxth	r2, r2
 8011266:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8011268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801126a:	681b      	ldr	r3, [r3, #0]
 801126c:	685a      	ldr	r2, [r3, #4]
 801126e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011270:	681b      	ldr	r3, [r3, #0]
 8011272:	891b      	ldrh	r3, [r3, #8]
 8011274:	4619      	mov	r1, r3
 8011276:	4610      	mov	r0, r2
 8011278:	f7fb fb60 	bl	800c93c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801127c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801127e:	681b      	ldr	r3, [r3, #0]
 8011280:	891c      	ldrh	r4, [r3, #8]
 8011282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011284:	681b      	ldr	r3, [r3, #0]
 8011286:	68db      	ldr	r3, [r3, #12]
 8011288:	899b      	ldrh	r3, [r3, #12]
 801128a:	b29b      	uxth	r3, r3
 801128c:	4618      	mov	r0, r3
 801128e:	f7fa f87f 	bl	800b390 <lwip_htons>
 8011292:	4603      	mov	r3, r0
 8011294:	b2db      	uxtb	r3, r3
 8011296:	f003 0303 	and.w	r3, r3, #3
 801129a:	2b00      	cmp	r3, #0
 801129c:	d001      	beq.n	80112a2 <tcp_receive+0xe6e>
 801129e:	2301      	movs	r3, #1
 80112a0:	e000      	b.n	80112a4 <tcp_receive+0xe70>
 80112a2:	2300      	movs	r3, #0
 80112a4:	4423      	add	r3, r4
 80112a6:	b29a      	uxth	r2, r3
 80112a8:	4b2a      	ldr	r3, [pc, #168]	; (8011354 <tcp_receive+0xf20>)
 80112aa:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80112ac:	4b29      	ldr	r3, [pc, #164]	; (8011354 <tcp_receive+0xf20>)
 80112ae:	881b      	ldrh	r3, [r3, #0]
 80112b0:	461a      	mov	r2, r3
 80112b2:	4b26      	ldr	r3, [pc, #152]	; (801134c <tcp_receive+0xf18>)
 80112b4:	681b      	ldr	r3, [r3, #0]
 80112b6:	441a      	add	r2, r3
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80112bc:	6879      	ldr	r1, [r7, #4]
 80112be:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80112c0:	440b      	add	r3, r1
 80112c2:	429a      	cmp	r2, r3
 80112c4:	d019      	beq.n	80112fa <tcp_receive+0xec6>
 80112c6:	4b24      	ldr	r3, [pc, #144]	; (8011358 <tcp_receive+0xf24>)
 80112c8:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 80112cc:	4923      	ldr	r1, [pc, #140]	; (801135c <tcp_receive+0xf28>)
 80112ce:	4824      	ldr	r0, [pc, #144]	; (8011360 <tcp_receive+0xf2c>)
 80112d0:	f005 fcd6 	bl	8016c80 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80112d4:	e011      	b.n	80112fa <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80112d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112d8:	681b      	ldr	r3, [r3, #0]
 80112da:	63bb      	str	r3, [r7, #56]	; 0x38
 80112dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112de:	2b00      	cmp	r3, #0
 80112e0:	f47f aea4 	bne.w	801102c <tcp_receive+0xbf8>
 80112e4:	e00a      	b.n	80112fc <tcp_receive+0xec8>
                break;
 80112e6:	bf00      	nop
 80112e8:	e008      	b.n	80112fc <tcp_receive+0xec8>
                break;
 80112ea:	bf00      	nop
 80112ec:	e006      	b.n	80112fc <tcp_receive+0xec8>
                  break;
 80112ee:	bf00      	nop
 80112f0:	e004      	b.n	80112fc <tcp_receive+0xec8>
                  break;
 80112f2:	bf00      	nop
 80112f4:	e002      	b.n	80112fc <tcp_receive+0xec8>
                  break;
 80112f6:	bf00      	nop
 80112f8:	e000      	b.n	80112fc <tcp_receive+0xec8>
                break;
 80112fa:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80112fc:	6878      	ldr	r0, [r7, #4]
 80112fe:	f001 fe8b 	bl	8013018 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8011302:	e003      	b.n	801130c <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8011304:	6878      	ldr	r0, [r7, #4]
 8011306:	f001 fe87 	bl	8013018 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801130a:	e01a      	b.n	8011342 <tcp_receive+0xf0e>
 801130c:	e019      	b.n	8011342 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801130e:	4b0f      	ldr	r3, [pc, #60]	; (801134c <tcp_receive+0xf18>)
 8011310:	681a      	ldr	r2, [r3, #0]
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011316:	1ad3      	subs	r3, r2, r3
 8011318:	2b00      	cmp	r3, #0
 801131a:	db0a      	blt.n	8011332 <tcp_receive+0xefe>
 801131c:	4b0b      	ldr	r3, [pc, #44]	; (801134c <tcp_receive+0xf18>)
 801131e:	681a      	ldr	r2, [r3, #0]
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011324:	6879      	ldr	r1, [r7, #4]
 8011326:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011328:	440b      	add	r3, r1
 801132a:	1ad3      	subs	r3, r2, r3
 801132c:	3301      	adds	r3, #1
 801132e:	2b00      	cmp	r3, #0
 8011330:	dd07      	ble.n	8011342 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	8b5b      	ldrh	r3, [r3, #26]
 8011336:	f043 0302 	orr.w	r3, r3, #2
 801133a:	b29a      	uxth	r2, r3
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8011340:	e7ff      	b.n	8011342 <tcp_receive+0xf0e>
 8011342:	bf00      	nop
 8011344:	3750      	adds	r7, #80	; 0x50
 8011346:	46bd      	mov	sp, r7
 8011348:	bdb0      	pop	{r4, r5, r7, pc}
 801134a:	bf00      	nop
 801134c:	2000be48 	.word	0x2000be48
 8011350:	2000be28 	.word	0x2000be28
 8011354:	2000be52 	.word	0x2000be52
 8011358:	08019374 	.word	0x08019374
 801135c:	0801971c 	.word	0x0801971c
 8011360:	080193c0 	.word	0x080193c0

08011364 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8011364:	b480      	push	{r7}
 8011366:	b083      	sub	sp, #12
 8011368:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801136a:	4b15      	ldr	r3, [pc, #84]	; (80113c0 <tcp_get_next_optbyte+0x5c>)
 801136c:	881b      	ldrh	r3, [r3, #0]
 801136e:	1c5a      	adds	r2, r3, #1
 8011370:	b291      	uxth	r1, r2
 8011372:	4a13      	ldr	r2, [pc, #76]	; (80113c0 <tcp_get_next_optbyte+0x5c>)
 8011374:	8011      	strh	r1, [r2, #0]
 8011376:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8011378:	4b12      	ldr	r3, [pc, #72]	; (80113c4 <tcp_get_next_optbyte+0x60>)
 801137a:	681b      	ldr	r3, [r3, #0]
 801137c:	2b00      	cmp	r3, #0
 801137e:	d004      	beq.n	801138a <tcp_get_next_optbyte+0x26>
 8011380:	4b11      	ldr	r3, [pc, #68]	; (80113c8 <tcp_get_next_optbyte+0x64>)
 8011382:	881b      	ldrh	r3, [r3, #0]
 8011384:	88fa      	ldrh	r2, [r7, #6]
 8011386:	429a      	cmp	r2, r3
 8011388:	d208      	bcs.n	801139c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801138a:	4b10      	ldr	r3, [pc, #64]	; (80113cc <tcp_get_next_optbyte+0x68>)
 801138c:	681b      	ldr	r3, [r3, #0]
 801138e:	3314      	adds	r3, #20
 8011390:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8011392:	88fb      	ldrh	r3, [r7, #6]
 8011394:	683a      	ldr	r2, [r7, #0]
 8011396:	4413      	add	r3, r2
 8011398:	781b      	ldrb	r3, [r3, #0]
 801139a:	e00b      	b.n	80113b4 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801139c:	88fb      	ldrh	r3, [r7, #6]
 801139e:	b2da      	uxtb	r2, r3
 80113a0:	4b09      	ldr	r3, [pc, #36]	; (80113c8 <tcp_get_next_optbyte+0x64>)
 80113a2:	881b      	ldrh	r3, [r3, #0]
 80113a4:	b2db      	uxtb	r3, r3
 80113a6:	1ad3      	subs	r3, r2, r3
 80113a8:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80113aa:	4b06      	ldr	r3, [pc, #24]	; (80113c4 <tcp_get_next_optbyte+0x60>)
 80113ac:	681a      	ldr	r2, [r3, #0]
 80113ae:	797b      	ldrb	r3, [r7, #5]
 80113b0:	4413      	add	r3, r2
 80113b2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80113b4:	4618      	mov	r0, r3
 80113b6:	370c      	adds	r7, #12
 80113b8:	46bd      	mov	sp, r7
 80113ba:	bc80      	pop	{r7}
 80113bc:	4770      	bx	lr
 80113be:	bf00      	nop
 80113c0:	2000be44 	.word	0x2000be44
 80113c4:	2000be40 	.word	0x2000be40
 80113c8:	2000be3e 	.word	0x2000be3e
 80113cc:	2000be38 	.word	0x2000be38

080113d0 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80113d0:	b580      	push	{r7, lr}
 80113d2:	b084      	sub	sp, #16
 80113d4:	af00      	add	r7, sp, #0
 80113d6:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	2b00      	cmp	r3, #0
 80113dc:	d106      	bne.n	80113ec <tcp_parseopt+0x1c>
 80113de:	4b32      	ldr	r3, [pc, #200]	; (80114a8 <tcp_parseopt+0xd8>)
 80113e0:	f240 727d 	movw	r2, #1917	; 0x77d
 80113e4:	4931      	ldr	r1, [pc, #196]	; (80114ac <tcp_parseopt+0xdc>)
 80113e6:	4832      	ldr	r0, [pc, #200]	; (80114b0 <tcp_parseopt+0xe0>)
 80113e8:	f005 fc4a 	bl	8016c80 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80113ec:	4b31      	ldr	r3, [pc, #196]	; (80114b4 <tcp_parseopt+0xe4>)
 80113ee:	881b      	ldrh	r3, [r3, #0]
 80113f0:	2b00      	cmp	r3, #0
 80113f2:	d055      	beq.n	80114a0 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80113f4:	4b30      	ldr	r3, [pc, #192]	; (80114b8 <tcp_parseopt+0xe8>)
 80113f6:	2200      	movs	r2, #0
 80113f8:	801a      	strh	r2, [r3, #0]
 80113fa:	e045      	b.n	8011488 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 80113fc:	f7ff ffb2 	bl	8011364 <tcp_get_next_optbyte>
 8011400:	4603      	mov	r3, r0
 8011402:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8011404:	7bfb      	ldrb	r3, [r7, #15]
 8011406:	2b02      	cmp	r3, #2
 8011408:	d006      	beq.n	8011418 <tcp_parseopt+0x48>
 801140a:	2b02      	cmp	r3, #2
 801140c:	dc2b      	bgt.n	8011466 <tcp_parseopt+0x96>
 801140e:	2b00      	cmp	r3, #0
 8011410:	d041      	beq.n	8011496 <tcp_parseopt+0xc6>
 8011412:	2b01      	cmp	r3, #1
 8011414:	d127      	bne.n	8011466 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8011416:	e037      	b.n	8011488 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8011418:	f7ff ffa4 	bl	8011364 <tcp_get_next_optbyte>
 801141c:	4603      	mov	r3, r0
 801141e:	2b04      	cmp	r3, #4
 8011420:	d13b      	bne.n	801149a <tcp_parseopt+0xca>
 8011422:	4b25      	ldr	r3, [pc, #148]	; (80114b8 <tcp_parseopt+0xe8>)
 8011424:	881b      	ldrh	r3, [r3, #0]
 8011426:	3301      	adds	r3, #1
 8011428:	4a22      	ldr	r2, [pc, #136]	; (80114b4 <tcp_parseopt+0xe4>)
 801142a:	8812      	ldrh	r2, [r2, #0]
 801142c:	4293      	cmp	r3, r2
 801142e:	da34      	bge.n	801149a <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8011430:	f7ff ff98 	bl	8011364 <tcp_get_next_optbyte>
 8011434:	4603      	mov	r3, r0
 8011436:	b29b      	uxth	r3, r3
 8011438:	021b      	lsls	r3, r3, #8
 801143a:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 801143c:	f7ff ff92 	bl	8011364 <tcp_get_next_optbyte>
 8011440:	4603      	mov	r3, r0
 8011442:	b29a      	uxth	r2, r3
 8011444:	89bb      	ldrh	r3, [r7, #12]
 8011446:	4313      	orrs	r3, r2
 8011448:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801144a:	89bb      	ldrh	r3, [r7, #12]
 801144c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8011450:	d804      	bhi.n	801145c <tcp_parseopt+0x8c>
 8011452:	89bb      	ldrh	r3, [r7, #12]
 8011454:	2b00      	cmp	r3, #0
 8011456:	d001      	beq.n	801145c <tcp_parseopt+0x8c>
 8011458:	89ba      	ldrh	r2, [r7, #12]
 801145a:	e001      	b.n	8011460 <tcp_parseopt+0x90>
 801145c:	f44f 7206 	mov.w	r2, #536	; 0x218
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8011464:	e010      	b.n	8011488 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8011466:	f7ff ff7d 	bl	8011364 <tcp_get_next_optbyte>
 801146a:	4603      	mov	r3, r0
 801146c:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801146e:	7afb      	ldrb	r3, [r7, #11]
 8011470:	2b01      	cmp	r3, #1
 8011472:	d914      	bls.n	801149e <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8011474:	7afb      	ldrb	r3, [r7, #11]
 8011476:	b29a      	uxth	r2, r3
 8011478:	4b0f      	ldr	r3, [pc, #60]	; (80114b8 <tcp_parseopt+0xe8>)
 801147a:	881b      	ldrh	r3, [r3, #0]
 801147c:	4413      	add	r3, r2
 801147e:	b29b      	uxth	r3, r3
 8011480:	3b02      	subs	r3, #2
 8011482:	b29a      	uxth	r2, r3
 8011484:	4b0c      	ldr	r3, [pc, #48]	; (80114b8 <tcp_parseopt+0xe8>)
 8011486:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011488:	4b0b      	ldr	r3, [pc, #44]	; (80114b8 <tcp_parseopt+0xe8>)
 801148a:	881a      	ldrh	r2, [r3, #0]
 801148c:	4b09      	ldr	r3, [pc, #36]	; (80114b4 <tcp_parseopt+0xe4>)
 801148e:	881b      	ldrh	r3, [r3, #0]
 8011490:	429a      	cmp	r2, r3
 8011492:	d3b3      	bcc.n	80113fc <tcp_parseopt+0x2c>
 8011494:	e004      	b.n	80114a0 <tcp_parseopt+0xd0>
          return;
 8011496:	bf00      	nop
 8011498:	e002      	b.n	80114a0 <tcp_parseopt+0xd0>
            return;
 801149a:	bf00      	nop
 801149c:	e000      	b.n	80114a0 <tcp_parseopt+0xd0>
            return;
 801149e:	bf00      	nop
      }
    }
  }
}
 80114a0:	3710      	adds	r7, #16
 80114a2:	46bd      	mov	sp, r7
 80114a4:	bd80      	pop	{r7, pc}
 80114a6:	bf00      	nop
 80114a8:	08019374 	.word	0x08019374
 80114ac:	080197d8 	.word	0x080197d8
 80114b0:	080193c0 	.word	0x080193c0
 80114b4:	2000be3c 	.word	0x2000be3c
 80114b8:	2000be44 	.word	0x2000be44

080114bc <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80114bc:	b480      	push	{r7}
 80114be:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80114c0:	4b05      	ldr	r3, [pc, #20]	; (80114d8 <tcp_trigger_input_pcb_close+0x1c>)
 80114c2:	781b      	ldrb	r3, [r3, #0]
 80114c4:	f043 0310 	orr.w	r3, r3, #16
 80114c8:	b2da      	uxtb	r2, r3
 80114ca:	4b03      	ldr	r3, [pc, #12]	; (80114d8 <tcp_trigger_input_pcb_close+0x1c>)
 80114cc:	701a      	strb	r2, [r3, #0]
}
 80114ce:	bf00      	nop
 80114d0:	46bd      	mov	sp, r7
 80114d2:	bc80      	pop	{r7}
 80114d4:	4770      	bx	lr
 80114d6:	bf00      	nop
 80114d8:	2000be55 	.word	0x2000be55

080114dc <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80114dc:	b580      	push	{r7, lr}
 80114de:	b084      	sub	sp, #16
 80114e0:	af00      	add	r7, sp, #0
 80114e2:	60f8      	str	r0, [r7, #12]
 80114e4:	60b9      	str	r1, [r7, #8]
 80114e6:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80114e8:	68fb      	ldr	r3, [r7, #12]
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	d00a      	beq.n	8011504 <tcp_route+0x28>
 80114ee:	68fb      	ldr	r3, [r7, #12]
 80114f0:	7a1b      	ldrb	r3, [r3, #8]
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	d006      	beq.n	8011504 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80114f6:	68fb      	ldr	r3, [r7, #12]
 80114f8:	7a1b      	ldrb	r3, [r3, #8]
 80114fa:	4618      	mov	r0, r3
 80114fc:	f7fb f818 	bl	800c530 <netif_get_by_index>
 8011500:	4603      	mov	r3, r0
 8011502:	e003      	b.n	801150c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8011504:	6878      	ldr	r0, [r7, #4]
 8011506:	f003 fb63 	bl	8014bd0 <ip4_route>
 801150a:	4603      	mov	r3, r0
  }
}
 801150c:	4618      	mov	r0, r3
 801150e:	3710      	adds	r7, #16
 8011510:	46bd      	mov	sp, r7
 8011512:	bd80      	pop	{r7, pc}

08011514 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8011514:	b590      	push	{r4, r7, lr}
 8011516:	b087      	sub	sp, #28
 8011518:	af00      	add	r7, sp, #0
 801151a:	60f8      	str	r0, [r7, #12]
 801151c:	60b9      	str	r1, [r7, #8]
 801151e:	603b      	str	r3, [r7, #0]
 8011520:	4613      	mov	r3, r2
 8011522:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8011524:	68fb      	ldr	r3, [r7, #12]
 8011526:	2b00      	cmp	r3, #0
 8011528:	d105      	bne.n	8011536 <tcp_create_segment+0x22>
 801152a:	4b44      	ldr	r3, [pc, #272]	; (801163c <tcp_create_segment+0x128>)
 801152c:	22a3      	movs	r2, #163	; 0xa3
 801152e:	4944      	ldr	r1, [pc, #272]	; (8011640 <tcp_create_segment+0x12c>)
 8011530:	4844      	ldr	r0, [pc, #272]	; (8011644 <tcp_create_segment+0x130>)
 8011532:	f005 fba5 	bl	8016c80 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8011536:	68bb      	ldr	r3, [r7, #8]
 8011538:	2b00      	cmp	r3, #0
 801153a:	d105      	bne.n	8011548 <tcp_create_segment+0x34>
 801153c:	4b3f      	ldr	r3, [pc, #252]	; (801163c <tcp_create_segment+0x128>)
 801153e:	22a4      	movs	r2, #164	; 0xa4
 8011540:	4941      	ldr	r1, [pc, #260]	; (8011648 <tcp_create_segment+0x134>)
 8011542:	4840      	ldr	r0, [pc, #256]	; (8011644 <tcp_create_segment+0x130>)
 8011544:	f005 fb9c 	bl	8016c80 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011548:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801154c:	009b      	lsls	r3, r3, #2
 801154e:	b2db      	uxtb	r3, r3
 8011550:	f003 0304 	and.w	r3, r3, #4
 8011554:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8011556:	2003      	movs	r0, #3
 8011558:	f7fa fcca 	bl	800bef0 <memp_malloc>
 801155c:	6138      	str	r0, [r7, #16]
 801155e:	693b      	ldr	r3, [r7, #16]
 8011560:	2b00      	cmp	r3, #0
 8011562:	d104      	bne.n	801156e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8011564:	68b8      	ldr	r0, [r7, #8]
 8011566:	f7fb fb6f 	bl	800cc48 <pbuf_free>
    return NULL;
 801156a:	2300      	movs	r3, #0
 801156c:	e061      	b.n	8011632 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801156e:	693b      	ldr	r3, [r7, #16]
 8011570:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8011574:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8011576:	693b      	ldr	r3, [r7, #16]
 8011578:	2200      	movs	r2, #0
 801157a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801157c:	693b      	ldr	r3, [r7, #16]
 801157e:	68ba      	ldr	r2, [r7, #8]
 8011580:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8011582:	68bb      	ldr	r3, [r7, #8]
 8011584:	891a      	ldrh	r2, [r3, #8]
 8011586:	7dfb      	ldrb	r3, [r7, #23]
 8011588:	b29b      	uxth	r3, r3
 801158a:	429a      	cmp	r2, r3
 801158c:	d205      	bcs.n	801159a <tcp_create_segment+0x86>
 801158e:	4b2b      	ldr	r3, [pc, #172]	; (801163c <tcp_create_segment+0x128>)
 8011590:	22b0      	movs	r2, #176	; 0xb0
 8011592:	492e      	ldr	r1, [pc, #184]	; (801164c <tcp_create_segment+0x138>)
 8011594:	482b      	ldr	r0, [pc, #172]	; (8011644 <tcp_create_segment+0x130>)
 8011596:	f005 fb73 	bl	8016c80 <iprintf>
  seg->len = p->tot_len - optlen;
 801159a:	68bb      	ldr	r3, [r7, #8]
 801159c:	891a      	ldrh	r2, [r3, #8]
 801159e:	7dfb      	ldrb	r3, [r7, #23]
 80115a0:	b29b      	uxth	r3, r3
 80115a2:	1ad3      	subs	r3, r2, r3
 80115a4:	b29a      	uxth	r2, r3
 80115a6:	693b      	ldr	r3, [r7, #16]
 80115a8:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 80115aa:	2114      	movs	r1, #20
 80115ac:	68b8      	ldr	r0, [r7, #8]
 80115ae:	f7fb fab5 	bl	800cb1c <pbuf_add_header>
 80115b2:	4603      	mov	r3, r0
 80115b4:	2b00      	cmp	r3, #0
 80115b6:	d004      	beq.n	80115c2 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80115b8:	6938      	ldr	r0, [r7, #16]
 80115ba:	f7fd f81a 	bl	800e5f2 <tcp_seg_free>
    return NULL;
 80115be:	2300      	movs	r3, #0
 80115c0:	e037      	b.n	8011632 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80115c2:	693b      	ldr	r3, [r7, #16]
 80115c4:	685b      	ldr	r3, [r3, #4]
 80115c6:	685a      	ldr	r2, [r3, #4]
 80115c8:	693b      	ldr	r3, [r7, #16]
 80115ca:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80115cc:	68fb      	ldr	r3, [r7, #12]
 80115ce:	8ada      	ldrh	r2, [r3, #22]
 80115d0:	693b      	ldr	r3, [r7, #16]
 80115d2:	68dc      	ldr	r4, [r3, #12]
 80115d4:	4610      	mov	r0, r2
 80115d6:	f7f9 fedb 	bl	800b390 <lwip_htons>
 80115da:	4603      	mov	r3, r0
 80115dc:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80115de:	68fb      	ldr	r3, [r7, #12]
 80115e0:	8b1a      	ldrh	r2, [r3, #24]
 80115e2:	693b      	ldr	r3, [r7, #16]
 80115e4:	68dc      	ldr	r4, [r3, #12]
 80115e6:	4610      	mov	r0, r2
 80115e8:	f7f9 fed2 	bl	800b390 <lwip_htons>
 80115ec:	4603      	mov	r3, r0
 80115ee:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80115f0:	693b      	ldr	r3, [r7, #16]
 80115f2:	68dc      	ldr	r4, [r3, #12]
 80115f4:	6838      	ldr	r0, [r7, #0]
 80115f6:	f7f9 fedf 	bl	800b3b8 <lwip_htonl>
 80115fa:	4603      	mov	r3, r0
 80115fc:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80115fe:	7dfb      	ldrb	r3, [r7, #23]
 8011600:	089b      	lsrs	r3, r3, #2
 8011602:	b2db      	uxtb	r3, r3
 8011604:	b29b      	uxth	r3, r3
 8011606:	3305      	adds	r3, #5
 8011608:	b29b      	uxth	r3, r3
 801160a:	031b      	lsls	r3, r3, #12
 801160c:	b29a      	uxth	r2, r3
 801160e:	79fb      	ldrb	r3, [r7, #7]
 8011610:	b29b      	uxth	r3, r3
 8011612:	4313      	orrs	r3, r2
 8011614:	b29a      	uxth	r2, r3
 8011616:	693b      	ldr	r3, [r7, #16]
 8011618:	68dc      	ldr	r4, [r3, #12]
 801161a:	4610      	mov	r0, r2
 801161c:	f7f9 feb8 	bl	800b390 <lwip_htons>
 8011620:	4603      	mov	r3, r0
 8011622:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8011624:	693b      	ldr	r3, [r7, #16]
 8011626:	68db      	ldr	r3, [r3, #12]
 8011628:	2200      	movs	r2, #0
 801162a:	749a      	strb	r2, [r3, #18]
 801162c:	2200      	movs	r2, #0
 801162e:	74da      	strb	r2, [r3, #19]
  return seg;
 8011630:	693b      	ldr	r3, [r7, #16]
}
 8011632:	4618      	mov	r0, r3
 8011634:	371c      	adds	r7, #28
 8011636:	46bd      	mov	sp, r7
 8011638:	bd90      	pop	{r4, r7, pc}
 801163a:	bf00      	nop
 801163c:	080197f4 	.word	0x080197f4
 8011640:	08019828 	.word	0x08019828
 8011644:	08019848 	.word	0x08019848
 8011648:	08019870 	.word	0x08019870
 801164c:	08019894 	.word	0x08019894

08011650 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8011650:	b580      	push	{r7, lr}
 8011652:	b086      	sub	sp, #24
 8011654:	af00      	add	r7, sp, #0
 8011656:	607b      	str	r3, [r7, #4]
 8011658:	4603      	mov	r3, r0
 801165a:	73fb      	strb	r3, [r7, #15]
 801165c:	460b      	mov	r3, r1
 801165e:	81bb      	strh	r3, [r7, #12]
 8011660:	4613      	mov	r3, r2
 8011662:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8011664:	89bb      	ldrh	r3, [r7, #12]
 8011666:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	2b00      	cmp	r3, #0
 801166c:	d105      	bne.n	801167a <tcp_pbuf_prealloc+0x2a>
 801166e:	4b30      	ldr	r3, [pc, #192]	; (8011730 <tcp_pbuf_prealloc+0xe0>)
 8011670:	22e8      	movs	r2, #232	; 0xe8
 8011672:	4930      	ldr	r1, [pc, #192]	; (8011734 <tcp_pbuf_prealloc+0xe4>)
 8011674:	4830      	ldr	r0, [pc, #192]	; (8011738 <tcp_pbuf_prealloc+0xe8>)
 8011676:	f005 fb03 	bl	8016c80 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801167a:	6a3b      	ldr	r3, [r7, #32]
 801167c:	2b00      	cmp	r3, #0
 801167e:	d105      	bne.n	801168c <tcp_pbuf_prealloc+0x3c>
 8011680:	4b2b      	ldr	r3, [pc, #172]	; (8011730 <tcp_pbuf_prealloc+0xe0>)
 8011682:	22e9      	movs	r2, #233	; 0xe9
 8011684:	492d      	ldr	r1, [pc, #180]	; (801173c <tcp_pbuf_prealloc+0xec>)
 8011686:	482c      	ldr	r0, [pc, #176]	; (8011738 <tcp_pbuf_prealloc+0xe8>)
 8011688:	f005 fafa 	bl	8016c80 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 801168c:	89ba      	ldrh	r2, [r7, #12]
 801168e:	897b      	ldrh	r3, [r7, #10]
 8011690:	429a      	cmp	r2, r3
 8011692:	d221      	bcs.n	80116d8 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8011694:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011698:	f003 0302 	and.w	r3, r3, #2
 801169c:	2b00      	cmp	r3, #0
 801169e:	d111      	bne.n	80116c4 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 80116a0:	6a3b      	ldr	r3, [r7, #32]
 80116a2:	8b5b      	ldrh	r3, [r3, #26]
 80116a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80116a8:	2b00      	cmp	r3, #0
 80116aa:	d115      	bne.n	80116d8 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 80116ac:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80116b0:	2b00      	cmp	r3, #0
 80116b2:	d007      	beq.n	80116c4 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 80116b4:	6a3b      	ldr	r3, [r7, #32]
 80116b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 80116b8:	2b00      	cmp	r3, #0
 80116ba:	d103      	bne.n	80116c4 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 80116bc:	6a3b      	ldr	r3, [r7, #32]
 80116be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	d009      	beq.n	80116d8 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 80116c4:	89bb      	ldrh	r3, [r7, #12]
 80116c6:	f203 231b 	addw	r3, r3, #539	; 0x21b
 80116ca:	f023 0203 	bic.w	r2, r3, #3
 80116ce:	897b      	ldrh	r3, [r7, #10]
 80116d0:	4293      	cmp	r3, r2
 80116d2:	bf28      	it	cs
 80116d4:	4613      	movcs	r3, r2
 80116d6:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 80116d8:	8af9      	ldrh	r1, [r7, #22]
 80116da:	7bfb      	ldrb	r3, [r7, #15]
 80116dc:	f44f 7220 	mov.w	r2, #640	; 0x280
 80116e0:	4618      	mov	r0, r3
 80116e2:	f7fa ffcd 	bl	800c680 <pbuf_alloc>
 80116e6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80116e8:	693b      	ldr	r3, [r7, #16]
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	d101      	bne.n	80116f2 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 80116ee:	2300      	movs	r3, #0
 80116f0:	e019      	b.n	8011726 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 80116f2:	693b      	ldr	r3, [r7, #16]
 80116f4:	681b      	ldr	r3, [r3, #0]
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	d006      	beq.n	8011708 <tcp_pbuf_prealloc+0xb8>
 80116fa:	4b0d      	ldr	r3, [pc, #52]	; (8011730 <tcp_pbuf_prealloc+0xe0>)
 80116fc:	f240 120b 	movw	r2, #267	; 0x10b
 8011700:	490f      	ldr	r1, [pc, #60]	; (8011740 <tcp_pbuf_prealloc+0xf0>)
 8011702:	480d      	ldr	r0, [pc, #52]	; (8011738 <tcp_pbuf_prealloc+0xe8>)
 8011704:	f005 fabc 	bl	8016c80 <iprintf>
  *oversize = p->len - length;
 8011708:	693b      	ldr	r3, [r7, #16]
 801170a:	895a      	ldrh	r2, [r3, #10]
 801170c:	89bb      	ldrh	r3, [r7, #12]
 801170e:	1ad3      	subs	r3, r2, r3
 8011710:	b29a      	uxth	r2, r3
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8011716:	693b      	ldr	r3, [r7, #16]
 8011718:	89ba      	ldrh	r2, [r7, #12]
 801171a:	811a      	strh	r2, [r3, #8]
 801171c:	693b      	ldr	r3, [r7, #16]
 801171e:	891a      	ldrh	r2, [r3, #8]
 8011720:	693b      	ldr	r3, [r7, #16]
 8011722:	815a      	strh	r2, [r3, #10]
  return p;
 8011724:	693b      	ldr	r3, [r7, #16]
}
 8011726:	4618      	mov	r0, r3
 8011728:	3718      	adds	r7, #24
 801172a:	46bd      	mov	sp, r7
 801172c:	bd80      	pop	{r7, pc}
 801172e:	bf00      	nop
 8011730:	080197f4 	.word	0x080197f4
 8011734:	080198ac 	.word	0x080198ac
 8011738:	08019848 	.word	0x08019848
 801173c:	080198d0 	.word	0x080198d0
 8011740:	080198f0 	.word	0x080198f0

08011744 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8011744:	b580      	push	{r7, lr}
 8011746:	b082      	sub	sp, #8
 8011748:	af00      	add	r7, sp, #0
 801174a:	6078      	str	r0, [r7, #4]
 801174c:	460b      	mov	r3, r1
 801174e:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	2b00      	cmp	r3, #0
 8011754:	d106      	bne.n	8011764 <tcp_write_checks+0x20>
 8011756:	4b33      	ldr	r3, [pc, #204]	; (8011824 <tcp_write_checks+0xe0>)
 8011758:	f240 1233 	movw	r2, #307	; 0x133
 801175c:	4932      	ldr	r1, [pc, #200]	; (8011828 <tcp_write_checks+0xe4>)
 801175e:	4833      	ldr	r0, [pc, #204]	; (801182c <tcp_write_checks+0xe8>)
 8011760:	f005 fa8e 	bl	8016c80 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	7d1b      	ldrb	r3, [r3, #20]
 8011768:	2b04      	cmp	r3, #4
 801176a:	d00e      	beq.n	801178a <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8011770:	2b07      	cmp	r3, #7
 8011772:	d00a      	beq.n	801178a <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8011778:	2b02      	cmp	r3, #2
 801177a:	d006      	beq.n	801178a <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8011780:	2b03      	cmp	r3, #3
 8011782:	d002      	beq.n	801178a <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8011784:	f06f 030a 	mvn.w	r3, #10
 8011788:	e048      	b.n	801181c <tcp_write_checks+0xd8>
  } else if (len == 0) {
 801178a:	887b      	ldrh	r3, [r7, #2]
 801178c:	2b00      	cmp	r3, #0
 801178e:	d101      	bne.n	8011794 <tcp_write_checks+0x50>
    return ERR_OK;
 8011790:	2300      	movs	r3, #0
 8011792:	e043      	b.n	801181c <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801179a:	887a      	ldrh	r2, [r7, #2]
 801179c:	429a      	cmp	r2, r3
 801179e:	d909      	bls.n	80117b4 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	8b5b      	ldrh	r3, [r3, #26]
 80117a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80117a8:	b29a      	uxth	r2, r3
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80117ae:	f04f 33ff 	mov.w	r3, #4294967295
 80117b2:	e033      	b.n	801181c <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80117ba:	2b08      	cmp	r3, #8
 80117bc:	d909      	bls.n	80117d2 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	8b5b      	ldrh	r3, [r3, #26]
 80117c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80117c6:	b29a      	uxth	r2, r3
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80117cc:	f04f 33ff 	mov.w	r3, #4294967295
 80117d0:	e024      	b.n	801181c <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80117d8:	2b00      	cmp	r3, #0
 80117da:	d00f      	beq.n	80117fc <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80117e0:	2b00      	cmp	r3, #0
 80117e2:	d11a      	bne.n	801181a <tcp_write_checks+0xd6>
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80117e8:	2b00      	cmp	r3, #0
 80117ea:	d116      	bne.n	801181a <tcp_write_checks+0xd6>
 80117ec:	4b0d      	ldr	r3, [pc, #52]	; (8011824 <tcp_write_checks+0xe0>)
 80117ee:	f240 1255 	movw	r2, #341	; 0x155
 80117f2:	490f      	ldr	r1, [pc, #60]	; (8011830 <tcp_write_checks+0xec>)
 80117f4:	480d      	ldr	r0, [pc, #52]	; (801182c <tcp_write_checks+0xe8>)
 80117f6:	f005 fa43 	bl	8016c80 <iprintf>
 80117fa:	e00e      	b.n	801181a <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011800:	2b00      	cmp	r3, #0
 8011802:	d103      	bne.n	801180c <tcp_write_checks+0xc8>
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011808:	2b00      	cmp	r3, #0
 801180a:	d006      	beq.n	801181a <tcp_write_checks+0xd6>
 801180c:	4b05      	ldr	r3, [pc, #20]	; (8011824 <tcp_write_checks+0xe0>)
 801180e:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8011812:	4908      	ldr	r1, [pc, #32]	; (8011834 <tcp_write_checks+0xf0>)
 8011814:	4805      	ldr	r0, [pc, #20]	; (801182c <tcp_write_checks+0xe8>)
 8011816:	f005 fa33 	bl	8016c80 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801181a:	2300      	movs	r3, #0
}
 801181c:	4618      	mov	r0, r3
 801181e:	3708      	adds	r7, #8
 8011820:	46bd      	mov	sp, r7
 8011822:	bd80      	pop	{r7, pc}
 8011824:	080197f4 	.word	0x080197f4
 8011828:	08019904 	.word	0x08019904
 801182c:	08019848 	.word	0x08019848
 8011830:	08019924 	.word	0x08019924
 8011834:	08019960 	.word	0x08019960

08011838 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8011838:	b590      	push	{r4, r7, lr}
 801183a:	b09b      	sub	sp, #108	; 0x6c
 801183c:	af04      	add	r7, sp, #16
 801183e:	60f8      	str	r0, [r7, #12]
 8011840:	60b9      	str	r1, [r7, #8]
 8011842:	4611      	mov	r1, r2
 8011844:	461a      	mov	r2, r3
 8011846:	460b      	mov	r3, r1
 8011848:	80fb      	strh	r3, [r7, #6]
 801184a:	4613      	mov	r3, r2
 801184c:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801184e:	2300      	movs	r3, #0
 8011850:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8011852:	2300      	movs	r3, #0
 8011854:	653b      	str	r3, [r7, #80]	; 0x50
 8011856:	2300      	movs	r3, #0
 8011858:	64fb      	str	r3, [r7, #76]	; 0x4c
 801185a:	2300      	movs	r3, #0
 801185c:	64bb      	str	r3, [r7, #72]	; 0x48
 801185e:	2300      	movs	r3, #0
 8011860:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8011862:	2300      	movs	r3, #0
 8011864:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8011868:	2300      	movs	r3, #0
 801186a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801186e:	2300      	movs	r3, #0
 8011870:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8011872:	2300      	movs	r3, #0
 8011874:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8011876:	2300      	movs	r3, #0
 8011878:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801187a:	68fb      	ldr	r3, [r7, #12]
 801187c:	2b00      	cmp	r3, #0
 801187e:	d109      	bne.n	8011894 <tcp_write+0x5c>
 8011880:	4ba4      	ldr	r3, [pc, #656]	; (8011b14 <tcp_write+0x2dc>)
 8011882:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8011886:	49a4      	ldr	r1, [pc, #656]	; (8011b18 <tcp_write+0x2e0>)
 8011888:	48a4      	ldr	r0, [pc, #656]	; (8011b1c <tcp_write+0x2e4>)
 801188a:	f005 f9f9 	bl	8016c80 <iprintf>
 801188e:	f06f 030f 	mvn.w	r3, #15
 8011892:	e32a      	b.n	8011eea <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8011894:	68fb      	ldr	r3, [r7, #12]
 8011896:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801189a:	085b      	lsrs	r3, r3, #1
 801189c:	b29a      	uxth	r2, r3
 801189e:	68fb      	ldr	r3, [r7, #12]
 80118a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80118a2:	4293      	cmp	r3, r2
 80118a4:	bf28      	it	cs
 80118a6:	4613      	movcs	r3, r2
 80118a8:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 80118aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80118ac:	2b00      	cmp	r3, #0
 80118ae:	d102      	bne.n	80118b6 <tcp_write+0x7e>
 80118b0:	68fb      	ldr	r3, [r7, #12]
 80118b2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80118b4:	e000      	b.n	80118b8 <tcp_write+0x80>
 80118b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80118b8:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 80118ba:	68bb      	ldr	r3, [r7, #8]
 80118bc:	2b00      	cmp	r3, #0
 80118be:	d109      	bne.n	80118d4 <tcp_write+0x9c>
 80118c0:	4b94      	ldr	r3, [pc, #592]	; (8011b14 <tcp_write+0x2dc>)
 80118c2:	f240 12ad 	movw	r2, #429	; 0x1ad
 80118c6:	4996      	ldr	r1, [pc, #600]	; (8011b20 <tcp_write+0x2e8>)
 80118c8:	4894      	ldr	r0, [pc, #592]	; (8011b1c <tcp_write+0x2e4>)
 80118ca:	f005 f9d9 	bl	8016c80 <iprintf>
 80118ce:	f06f 030f 	mvn.w	r3, #15
 80118d2:	e30a      	b.n	8011eea <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 80118d4:	88fb      	ldrh	r3, [r7, #6]
 80118d6:	4619      	mov	r1, r3
 80118d8:	68f8      	ldr	r0, [r7, #12]
 80118da:	f7ff ff33 	bl	8011744 <tcp_write_checks>
 80118de:	4603      	mov	r3, r0
 80118e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 80118e4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80118e8:	2b00      	cmp	r3, #0
 80118ea:	d002      	beq.n	80118f2 <tcp_write+0xba>
    return err;
 80118ec:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80118f0:	e2fb      	b.n	8011eea <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 80118f2:	68fb      	ldr	r3, [r7, #12]
 80118f4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80118f8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80118fc:	2300      	movs	r3, #0
 80118fe:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8011902:	68fb      	ldr	r3, [r7, #12]
 8011904:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011906:	2b00      	cmp	r3, #0
 8011908:	f000 80f6 	beq.w	8011af8 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801190c:	68fb      	ldr	r3, [r7, #12]
 801190e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011910:	653b      	str	r3, [r7, #80]	; 0x50
 8011912:	e002      	b.n	801191a <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8011914:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011916:	681b      	ldr	r3, [r3, #0]
 8011918:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801191a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801191c:	681b      	ldr	r3, [r3, #0]
 801191e:	2b00      	cmp	r3, #0
 8011920:	d1f8      	bne.n	8011914 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8011922:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011924:	7a9b      	ldrb	r3, [r3, #10]
 8011926:	009b      	lsls	r3, r3, #2
 8011928:	b29b      	uxth	r3, r3
 801192a:	f003 0304 	and.w	r3, r3, #4
 801192e:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8011930:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011932:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011934:	891b      	ldrh	r3, [r3, #8]
 8011936:	4619      	mov	r1, r3
 8011938:	8c3b      	ldrh	r3, [r7, #32]
 801193a:	440b      	add	r3, r1
 801193c:	429a      	cmp	r2, r3
 801193e:	da06      	bge.n	801194e <tcp_write+0x116>
 8011940:	4b74      	ldr	r3, [pc, #464]	; (8011b14 <tcp_write+0x2dc>)
 8011942:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8011946:	4977      	ldr	r1, [pc, #476]	; (8011b24 <tcp_write+0x2ec>)
 8011948:	4874      	ldr	r0, [pc, #464]	; (8011b1c <tcp_write+0x2e4>)
 801194a:	f005 f999 	bl	8016c80 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801194e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011950:	891a      	ldrh	r2, [r3, #8]
 8011952:	8c3b      	ldrh	r3, [r7, #32]
 8011954:	4413      	add	r3, r2
 8011956:	b29b      	uxth	r3, r3
 8011958:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801195a:	1ad3      	subs	r3, r2, r3
 801195c:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801195e:	68fb      	ldr	r3, [r7, #12]
 8011960:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011964:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8011966:	8a7b      	ldrh	r3, [r7, #18]
 8011968:	2b00      	cmp	r3, #0
 801196a:	d026      	beq.n	80119ba <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801196c:	8a7b      	ldrh	r3, [r7, #18]
 801196e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011970:	429a      	cmp	r2, r3
 8011972:	d206      	bcs.n	8011982 <tcp_write+0x14a>
 8011974:	4b67      	ldr	r3, [pc, #412]	; (8011b14 <tcp_write+0x2dc>)
 8011976:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 801197a:	496b      	ldr	r1, [pc, #428]	; (8011b28 <tcp_write+0x2f0>)
 801197c:	4867      	ldr	r0, [pc, #412]	; (8011b1c <tcp_write+0x2e4>)
 801197e:	f005 f97f 	bl	8016c80 <iprintf>
      seg = last_unsent;
 8011982:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011984:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8011986:	8a7b      	ldrh	r3, [r7, #18]
 8011988:	88fa      	ldrh	r2, [r7, #6]
 801198a:	4293      	cmp	r3, r2
 801198c:	bf28      	it	cs
 801198e:	4613      	movcs	r3, r2
 8011990:	b29b      	uxth	r3, r3
 8011992:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011994:	4293      	cmp	r3, r2
 8011996:	bf28      	it	cs
 8011998:	4613      	movcs	r3, r2
 801199a:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 801199c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80119a0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80119a2:	4413      	add	r3, r2
 80119a4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 80119a8:	8a7a      	ldrh	r2, [r7, #18]
 80119aa:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80119ac:	1ad3      	subs	r3, r2, r3
 80119ae:	b29b      	uxth	r3, r3
 80119b0:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 80119b2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80119b4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80119b6:	1ad3      	subs	r3, r2, r3
 80119b8:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 80119ba:	8a7b      	ldrh	r3, [r7, #18]
 80119bc:	2b00      	cmp	r3, #0
 80119be:	d00b      	beq.n	80119d8 <tcp_write+0x1a0>
 80119c0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80119c4:	88fb      	ldrh	r3, [r7, #6]
 80119c6:	429a      	cmp	r2, r3
 80119c8:	d006      	beq.n	80119d8 <tcp_write+0x1a0>
 80119ca:	4b52      	ldr	r3, [pc, #328]	; (8011b14 <tcp_write+0x2dc>)
 80119cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80119d0:	4956      	ldr	r1, [pc, #344]	; (8011b2c <tcp_write+0x2f4>)
 80119d2:	4852      	ldr	r0, [pc, #328]	; (8011b1c <tcp_write+0x2e4>)
 80119d4:	f005 f954 	bl	8016c80 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 80119d8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80119dc:	88fb      	ldrh	r3, [r7, #6]
 80119de:	429a      	cmp	r2, r3
 80119e0:	f080 8167 	bcs.w	8011cb2 <tcp_write+0x47a>
 80119e4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80119e6:	2b00      	cmp	r3, #0
 80119e8:	f000 8163 	beq.w	8011cb2 <tcp_write+0x47a>
 80119ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80119ee:	891b      	ldrh	r3, [r3, #8]
 80119f0:	2b00      	cmp	r3, #0
 80119f2:	f000 815e 	beq.w	8011cb2 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 80119f6:	88fa      	ldrh	r2, [r7, #6]
 80119f8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80119fc:	1ad2      	subs	r2, r2, r3
 80119fe:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011a00:	4293      	cmp	r3, r2
 8011a02:	bfa8      	it	ge
 8011a04:	4613      	movge	r3, r2
 8011a06:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8011a08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011a0a:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8011a0c:	797b      	ldrb	r3, [r7, #5]
 8011a0e:	f003 0301 	and.w	r3, r3, #1
 8011a12:	2b00      	cmp	r3, #0
 8011a14:	d027      	beq.n	8011a66 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8011a16:	f107 0012 	add.w	r0, r7, #18
 8011a1a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011a1c:	8bf9      	ldrh	r1, [r7, #30]
 8011a1e:	2301      	movs	r3, #1
 8011a20:	9302      	str	r3, [sp, #8]
 8011a22:	797b      	ldrb	r3, [r7, #5]
 8011a24:	9301      	str	r3, [sp, #4]
 8011a26:	68fb      	ldr	r3, [r7, #12]
 8011a28:	9300      	str	r3, [sp, #0]
 8011a2a:	4603      	mov	r3, r0
 8011a2c:	2000      	movs	r0, #0
 8011a2e:	f7ff fe0f 	bl	8011650 <tcp_pbuf_prealloc>
 8011a32:	6578      	str	r0, [r7, #84]	; 0x54
 8011a34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011a36:	2b00      	cmp	r3, #0
 8011a38:	f000 8225 	beq.w	8011e86 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8011a3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011a3e:	6858      	ldr	r0, [r3, #4]
 8011a40:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011a44:	68ba      	ldr	r2, [r7, #8]
 8011a46:	4413      	add	r3, r2
 8011a48:	8bfa      	ldrh	r2, [r7, #30]
 8011a4a:	4619      	mov	r1, r3
 8011a4c:	f005 f824 	bl	8016a98 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8011a50:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8011a52:	f7fb f987 	bl	800cd64 <pbuf_clen>
 8011a56:	4603      	mov	r3, r0
 8011a58:	461a      	mov	r2, r3
 8011a5a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011a5e:	4413      	add	r3, r2
 8011a60:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8011a64:	e041      	b.n	8011aea <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8011a66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011a68:	685b      	ldr	r3, [r3, #4]
 8011a6a:	637b      	str	r3, [r7, #52]	; 0x34
 8011a6c:	e002      	b.n	8011a74 <tcp_write+0x23c>
 8011a6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a70:	681b      	ldr	r3, [r3, #0]
 8011a72:	637b      	str	r3, [r7, #52]	; 0x34
 8011a74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a76:	681b      	ldr	r3, [r3, #0]
 8011a78:	2b00      	cmp	r3, #0
 8011a7a:	d1f8      	bne.n	8011a6e <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8011a7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a7e:	7b1b      	ldrb	r3, [r3, #12]
 8011a80:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	d115      	bne.n	8011ab4 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8011a88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a8a:	685b      	ldr	r3, [r3, #4]
 8011a8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011a8e:	8952      	ldrh	r2, [r2, #10]
 8011a90:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8011a92:	68ba      	ldr	r2, [r7, #8]
 8011a94:	429a      	cmp	r2, r3
 8011a96:	d10d      	bne.n	8011ab4 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8011a98:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011a9c:	2b00      	cmp	r3, #0
 8011a9e:	d006      	beq.n	8011aae <tcp_write+0x276>
 8011aa0:	4b1c      	ldr	r3, [pc, #112]	; (8011b14 <tcp_write+0x2dc>)
 8011aa2:	f240 2231 	movw	r2, #561	; 0x231
 8011aa6:	4922      	ldr	r1, [pc, #136]	; (8011b30 <tcp_write+0x2f8>)
 8011aa8:	481c      	ldr	r0, [pc, #112]	; (8011b1c <tcp_write+0x2e4>)
 8011aaa:	f005 f8e9 	bl	8016c80 <iprintf>
          extendlen = seglen;
 8011aae:	8bfb      	ldrh	r3, [r7, #30]
 8011ab0:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8011ab2:	e01a      	b.n	8011aea <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8011ab4:	8bfb      	ldrh	r3, [r7, #30]
 8011ab6:	2201      	movs	r2, #1
 8011ab8:	4619      	mov	r1, r3
 8011aba:	2000      	movs	r0, #0
 8011abc:	f7fa fde0 	bl	800c680 <pbuf_alloc>
 8011ac0:	6578      	str	r0, [r7, #84]	; 0x54
 8011ac2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011ac4:	2b00      	cmp	r3, #0
 8011ac6:	f000 81e0 	beq.w	8011e8a <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8011aca:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011ace:	68ba      	ldr	r2, [r7, #8]
 8011ad0:	441a      	add	r2, r3
 8011ad2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011ad4:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8011ad6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8011ad8:	f7fb f944 	bl	800cd64 <pbuf_clen>
 8011adc:	4603      	mov	r3, r0
 8011ade:	461a      	mov	r2, r3
 8011ae0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011ae4:	4413      	add	r3, r2
 8011ae6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8011aea:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011aee:	8bfb      	ldrh	r3, [r7, #30]
 8011af0:	4413      	add	r3, r2
 8011af2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8011af6:	e0dc      	b.n	8011cb2 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8011af8:	68fb      	ldr	r3, [r7, #12]
 8011afa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011afe:	2b00      	cmp	r3, #0
 8011b00:	f000 80d7 	beq.w	8011cb2 <tcp_write+0x47a>
 8011b04:	4b03      	ldr	r3, [pc, #12]	; (8011b14 <tcp_write+0x2dc>)
 8011b06:	f240 224a 	movw	r2, #586	; 0x24a
 8011b0a:	490a      	ldr	r1, [pc, #40]	; (8011b34 <tcp_write+0x2fc>)
 8011b0c:	4803      	ldr	r0, [pc, #12]	; (8011b1c <tcp_write+0x2e4>)
 8011b0e:	f005 f8b7 	bl	8016c80 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8011b12:	e0ce      	b.n	8011cb2 <tcp_write+0x47a>
 8011b14:	080197f4 	.word	0x080197f4
 8011b18:	08019994 	.word	0x08019994
 8011b1c:	08019848 	.word	0x08019848
 8011b20:	080199ac 	.word	0x080199ac
 8011b24:	080199e0 	.word	0x080199e0
 8011b28:	080199f8 	.word	0x080199f8
 8011b2c:	08019a18 	.word	0x08019a18
 8011b30:	08019a38 	.word	0x08019a38
 8011b34:	08019a64 	.word	0x08019a64
    struct pbuf *p;
    u16_t left = len - pos;
 8011b38:	88fa      	ldrh	r2, [r7, #6]
 8011b3a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011b3e:	1ad3      	subs	r3, r2, r3
 8011b40:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8011b42:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011b46:	b29b      	uxth	r3, r3
 8011b48:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011b4a:	1ad3      	subs	r3, r2, r3
 8011b4c:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8011b4e:	8b7a      	ldrh	r2, [r7, #26]
 8011b50:	8bbb      	ldrh	r3, [r7, #28]
 8011b52:	4293      	cmp	r3, r2
 8011b54:	bf28      	it	cs
 8011b56:	4613      	movcs	r3, r2
 8011b58:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8011b5a:	797b      	ldrb	r3, [r7, #5]
 8011b5c:	f003 0301 	and.w	r3, r3, #1
 8011b60:	2b00      	cmp	r3, #0
 8011b62:	d036      	beq.n	8011bd2 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8011b64:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011b68:	b29a      	uxth	r2, r3
 8011b6a:	8b3b      	ldrh	r3, [r7, #24]
 8011b6c:	4413      	add	r3, r2
 8011b6e:	b299      	uxth	r1, r3
 8011b70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011b72:	2b00      	cmp	r3, #0
 8011b74:	bf0c      	ite	eq
 8011b76:	2301      	moveq	r3, #1
 8011b78:	2300      	movne	r3, #0
 8011b7a:	b2db      	uxtb	r3, r3
 8011b7c:	f107 0012 	add.w	r0, r7, #18
 8011b80:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011b82:	9302      	str	r3, [sp, #8]
 8011b84:	797b      	ldrb	r3, [r7, #5]
 8011b86:	9301      	str	r3, [sp, #4]
 8011b88:	68fb      	ldr	r3, [r7, #12]
 8011b8a:	9300      	str	r3, [sp, #0]
 8011b8c:	4603      	mov	r3, r0
 8011b8e:	2036      	movs	r0, #54	; 0x36
 8011b90:	f7ff fd5e 	bl	8011650 <tcp_pbuf_prealloc>
 8011b94:	6338      	str	r0, [r7, #48]	; 0x30
 8011b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	f000 8178 	beq.w	8011e8e <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8011b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ba0:	895b      	ldrh	r3, [r3, #10]
 8011ba2:	8b3a      	ldrh	r2, [r7, #24]
 8011ba4:	429a      	cmp	r2, r3
 8011ba6:	d906      	bls.n	8011bb6 <tcp_write+0x37e>
 8011ba8:	4b8c      	ldr	r3, [pc, #560]	; (8011ddc <tcp_write+0x5a4>)
 8011baa:	f240 2266 	movw	r2, #614	; 0x266
 8011bae:	498c      	ldr	r1, [pc, #560]	; (8011de0 <tcp_write+0x5a8>)
 8011bb0:	488c      	ldr	r0, [pc, #560]	; (8011de4 <tcp_write+0x5ac>)
 8011bb2:	f005 f865 	bl	8016c80 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8011bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bb8:	685a      	ldr	r2, [r3, #4]
 8011bba:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011bbe:	18d0      	adds	r0, r2, r3
 8011bc0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011bc4:	68ba      	ldr	r2, [r7, #8]
 8011bc6:	4413      	add	r3, r2
 8011bc8:	8b3a      	ldrh	r2, [r7, #24]
 8011bca:	4619      	mov	r1, r3
 8011bcc:	f004 ff64 	bl	8016a98 <memcpy>
 8011bd0:	e02f      	b.n	8011c32 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8011bd2:	8a7b      	ldrh	r3, [r7, #18]
 8011bd4:	2b00      	cmp	r3, #0
 8011bd6:	d006      	beq.n	8011be6 <tcp_write+0x3ae>
 8011bd8:	4b80      	ldr	r3, [pc, #512]	; (8011ddc <tcp_write+0x5a4>)
 8011bda:	f240 2271 	movw	r2, #625	; 0x271
 8011bde:	4982      	ldr	r1, [pc, #520]	; (8011de8 <tcp_write+0x5b0>)
 8011be0:	4880      	ldr	r0, [pc, #512]	; (8011de4 <tcp_write+0x5ac>)
 8011be2:	f005 f84d 	bl	8016c80 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8011be6:	8b3b      	ldrh	r3, [r7, #24]
 8011be8:	2201      	movs	r2, #1
 8011bea:	4619      	mov	r1, r3
 8011bec:	2036      	movs	r0, #54	; 0x36
 8011bee:	f7fa fd47 	bl	800c680 <pbuf_alloc>
 8011bf2:	6178      	str	r0, [r7, #20]
 8011bf4:	697b      	ldr	r3, [r7, #20]
 8011bf6:	2b00      	cmp	r3, #0
 8011bf8:	f000 814b 	beq.w	8011e92 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8011bfc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011c00:	68ba      	ldr	r2, [r7, #8]
 8011c02:	441a      	add	r2, r3
 8011c04:	697b      	ldr	r3, [r7, #20]
 8011c06:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8011c08:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011c0c:	b29b      	uxth	r3, r3
 8011c0e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011c12:	4619      	mov	r1, r3
 8011c14:	2036      	movs	r0, #54	; 0x36
 8011c16:	f7fa fd33 	bl	800c680 <pbuf_alloc>
 8011c1a:	6338      	str	r0, [r7, #48]	; 0x30
 8011c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c1e:	2b00      	cmp	r3, #0
 8011c20:	d103      	bne.n	8011c2a <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8011c22:	6978      	ldr	r0, [r7, #20]
 8011c24:	f7fb f810 	bl	800cc48 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8011c28:	e136      	b.n	8011e98 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8011c2a:	6979      	ldr	r1, [r7, #20]
 8011c2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011c2e:	f7fb f8d7 	bl	800cde0 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8011c32:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011c34:	f7fb f896 	bl	800cd64 <pbuf_clen>
 8011c38:	4603      	mov	r3, r0
 8011c3a:	461a      	mov	r2, r3
 8011c3c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011c40:	4413      	add	r3, r2
 8011c42:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8011c46:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011c4a:	2b09      	cmp	r3, #9
 8011c4c:	d903      	bls.n	8011c56 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8011c4e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011c50:	f7fa fffa 	bl	800cc48 <pbuf_free>
      goto memerr;
 8011c54:	e120      	b.n	8011e98 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8011c56:	68fb      	ldr	r3, [r7, #12]
 8011c58:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8011c5a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011c5e:	441a      	add	r2, r3
 8011c60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011c64:	9300      	str	r3, [sp, #0]
 8011c66:	4613      	mov	r3, r2
 8011c68:	2200      	movs	r2, #0
 8011c6a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011c6c:	68f8      	ldr	r0, [r7, #12]
 8011c6e:	f7ff fc51 	bl	8011514 <tcp_create_segment>
 8011c72:	64f8      	str	r0, [r7, #76]	; 0x4c
 8011c74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011c76:	2b00      	cmp	r3, #0
 8011c78:	f000 810d 	beq.w	8011e96 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8011c7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011c7e:	2b00      	cmp	r3, #0
 8011c80:	d102      	bne.n	8011c88 <tcp_write+0x450>
      queue = seg;
 8011c82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011c84:	647b      	str	r3, [r7, #68]	; 0x44
 8011c86:	e00c      	b.n	8011ca2 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8011c88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	d106      	bne.n	8011c9c <tcp_write+0x464>
 8011c8e:	4b53      	ldr	r3, [pc, #332]	; (8011ddc <tcp_write+0x5a4>)
 8011c90:	f240 22ab 	movw	r2, #683	; 0x2ab
 8011c94:	4955      	ldr	r1, [pc, #340]	; (8011dec <tcp_write+0x5b4>)
 8011c96:	4853      	ldr	r0, [pc, #332]	; (8011de4 <tcp_write+0x5ac>)
 8011c98:	f004 fff2 	bl	8016c80 <iprintf>
      prev_seg->next = seg;
 8011c9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011c9e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011ca0:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8011ca2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011ca4:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8011ca6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011caa:	8b3b      	ldrh	r3, [r7, #24]
 8011cac:	4413      	add	r3, r2
 8011cae:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8011cb2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011cb6:	88fb      	ldrh	r3, [r7, #6]
 8011cb8:	429a      	cmp	r2, r3
 8011cba:	f4ff af3d 	bcc.w	8011b38 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8011cbe:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011cc0:	2b00      	cmp	r3, #0
 8011cc2:	d02c      	beq.n	8011d1e <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8011cc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011cc6:	685b      	ldr	r3, [r3, #4]
 8011cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011cca:	e01e      	b.n	8011d0a <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8011ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cce:	891a      	ldrh	r2, [r3, #8]
 8011cd0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011cd2:	4413      	add	r3, r2
 8011cd4:	b29a      	uxth	r2, r3
 8011cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cd8:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8011cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cdc:	681b      	ldr	r3, [r3, #0]
 8011cde:	2b00      	cmp	r3, #0
 8011ce0:	d110      	bne.n	8011d04 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8011ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ce4:	685b      	ldr	r3, [r3, #4]
 8011ce6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011ce8:	8952      	ldrh	r2, [r2, #10]
 8011cea:	4413      	add	r3, r2
 8011cec:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8011cee:	68b9      	ldr	r1, [r7, #8]
 8011cf0:	4618      	mov	r0, r3
 8011cf2:	f004 fed1 	bl	8016a98 <memcpy>
        p->len += oversize_used;
 8011cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cf8:	895a      	ldrh	r2, [r3, #10]
 8011cfa:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011cfc:	4413      	add	r3, r2
 8011cfe:	b29a      	uxth	r2, r3
 8011d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d02:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8011d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d06:	681b      	ldr	r3, [r3, #0]
 8011d08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d0c:	2b00      	cmp	r3, #0
 8011d0e:	d1dd      	bne.n	8011ccc <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8011d10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011d12:	891a      	ldrh	r2, [r3, #8]
 8011d14:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011d16:	4413      	add	r3, r2
 8011d18:	b29a      	uxth	r2, r3
 8011d1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011d1c:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8011d1e:	8a7a      	ldrh	r2, [r7, #18]
 8011d20:	68fb      	ldr	r3, [r7, #12]
 8011d22:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8011d26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	d018      	beq.n	8011d5e <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8011d2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011d2e:	2b00      	cmp	r3, #0
 8011d30:	d106      	bne.n	8011d40 <tcp_write+0x508>
 8011d32:	4b2a      	ldr	r3, [pc, #168]	; (8011ddc <tcp_write+0x5a4>)
 8011d34:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8011d38:	492d      	ldr	r1, [pc, #180]	; (8011df0 <tcp_write+0x5b8>)
 8011d3a:	482a      	ldr	r0, [pc, #168]	; (8011de4 <tcp_write+0x5ac>)
 8011d3c:	f004 ffa0 	bl	8016c80 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8011d40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011d42:	685b      	ldr	r3, [r3, #4]
 8011d44:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011d46:	4618      	mov	r0, r3
 8011d48:	f7fb f84a 	bl	800cde0 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8011d4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011d4e:	891a      	ldrh	r2, [r3, #8]
 8011d50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011d52:	891b      	ldrh	r3, [r3, #8]
 8011d54:	4413      	add	r3, r2
 8011d56:	b29a      	uxth	r2, r3
 8011d58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011d5a:	811a      	strh	r2, [r3, #8]
 8011d5c:	e037      	b.n	8011dce <tcp_write+0x596>
  } else if (extendlen > 0) {
 8011d5e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011d60:	2b00      	cmp	r3, #0
 8011d62:	d034      	beq.n	8011dce <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8011d64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	d003      	beq.n	8011d72 <tcp_write+0x53a>
 8011d6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011d6c:	685b      	ldr	r3, [r3, #4]
 8011d6e:	2b00      	cmp	r3, #0
 8011d70:	d106      	bne.n	8011d80 <tcp_write+0x548>
 8011d72:	4b1a      	ldr	r3, [pc, #104]	; (8011ddc <tcp_write+0x5a4>)
 8011d74:	f240 22e6 	movw	r2, #742	; 0x2e6
 8011d78:	491e      	ldr	r1, [pc, #120]	; (8011df4 <tcp_write+0x5bc>)
 8011d7a:	481a      	ldr	r0, [pc, #104]	; (8011de4 <tcp_write+0x5ac>)
 8011d7c:	f004 ff80 	bl	8016c80 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8011d80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011d82:	685b      	ldr	r3, [r3, #4]
 8011d84:	62bb      	str	r3, [r7, #40]	; 0x28
 8011d86:	e009      	b.n	8011d9c <tcp_write+0x564>
      p->tot_len += extendlen;
 8011d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d8a:	891a      	ldrh	r2, [r3, #8]
 8011d8c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011d8e:	4413      	add	r3, r2
 8011d90:	b29a      	uxth	r2, r3
 8011d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d94:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8011d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d98:	681b      	ldr	r3, [r3, #0]
 8011d9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8011d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d9e:	681b      	ldr	r3, [r3, #0]
 8011da0:	2b00      	cmp	r3, #0
 8011da2:	d1f1      	bne.n	8011d88 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8011da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011da6:	891a      	ldrh	r2, [r3, #8]
 8011da8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011daa:	4413      	add	r3, r2
 8011dac:	b29a      	uxth	r2, r3
 8011dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011db0:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8011db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011db4:	895a      	ldrh	r2, [r3, #10]
 8011db6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011db8:	4413      	add	r3, r2
 8011dba:	b29a      	uxth	r2, r3
 8011dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011dbe:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8011dc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011dc2:	891a      	ldrh	r2, [r3, #8]
 8011dc4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011dc6:	4413      	add	r3, r2
 8011dc8:	b29a      	uxth	r2, r3
 8011dca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011dcc:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8011dce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011dd0:	2b00      	cmp	r3, #0
 8011dd2:	d111      	bne.n	8011df8 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8011dd4:	68fb      	ldr	r3, [r7, #12]
 8011dd6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011dd8:	66da      	str	r2, [r3, #108]	; 0x6c
 8011dda:	e010      	b.n	8011dfe <tcp_write+0x5c6>
 8011ddc:	080197f4 	.word	0x080197f4
 8011de0:	08019a94 	.word	0x08019a94
 8011de4:	08019848 	.word	0x08019848
 8011de8:	08019ad4 	.word	0x08019ad4
 8011dec:	08019ae4 	.word	0x08019ae4
 8011df0:	08019af8 	.word	0x08019af8
 8011df4:	08019b30 	.word	0x08019b30
  } else {
    last_unsent->next = queue;
 8011df8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011dfa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011dfc:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8011dfe:	68fb      	ldr	r3, [r7, #12]
 8011e00:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8011e02:	88fb      	ldrh	r3, [r7, #6]
 8011e04:	441a      	add	r2, r3
 8011e06:	68fb      	ldr	r3, [r7, #12]
 8011e08:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8011e0a:	68fb      	ldr	r3, [r7, #12]
 8011e0c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8011e10:	88fb      	ldrh	r3, [r7, #6]
 8011e12:	1ad3      	subs	r3, r2, r3
 8011e14:	b29a      	uxth	r2, r3
 8011e16:	68fb      	ldr	r3, [r7, #12]
 8011e18:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8011e1c:	68fb      	ldr	r3, [r7, #12]
 8011e1e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8011e22:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8011e26:	68fb      	ldr	r3, [r7, #12]
 8011e28:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	d00e      	beq.n	8011e4e <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8011e30:	68fb      	ldr	r3, [r7, #12]
 8011e32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011e34:	2b00      	cmp	r3, #0
 8011e36:	d10a      	bne.n	8011e4e <tcp_write+0x616>
 8011e38:	68fb      	ldr	r3, [r7, #12]
 8011e3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011e3c:	2b00      	cmp	r3, #0
 8011e3e:	d106      	bne.n	8011e4e <tcp_write+0x616>
 8011e40:	4b2c      	ldr	r3, [pc, #176]	; (8011ef4 <tcp_write+0x6bc>)
 8011e42:	f240 3212 	movw	r2, #786	; 0x312
 8011e46:	492c      	ldr	r1, [pc, #176]	; (8011ef8 <tcp_write+0x6c0>)
 8011e48:	482c      	ldr	r0, [pc, #176]	; (8011efc <tcp_write+0x6c4>)
 8011e4a:	f004 ff19 	bl	8016c80 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8011e4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011e50:	2b00      	cmp	r3, #0
 8011e52:	d016      	beq.n	8011e82 <tcp_write+0x64a>
 8011e54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011e56:	68db      	ldr	r3, [r3, #12]
 8011e58:	2b00      	cmp	r3, #0
 8011e5a:	d012      	beq.n	8011e82 <tcp_write+0x64a>
 8011e5c:	797b      	ldrb	r3, [r7, #5]
 8011e5e:	f003 0302 	and.w	r3, r3, #2
 8011e62:	2b00      	cmp	r3, #0
 8011e64:	d10d      	bne.n	8011e82 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8011e66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011e68:	68db      	ldr	r3, [r3, #12]
 8011e6a:	899b      	ldrh	r3, [r3, #12]
 8011e6c:	b29c      	uxth	r4, r3
 8011e6e:	2008      	movs	r0, #8
 8011e70:	f7f9 fa8e 	bl	800b390 <lwip_htons>
 8011e74:	4603      	mov	r3, r0
 8011e76:	461a      	mov	r2, r3
 8011e78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011e7a:	68db      	ldr	r3, [r3, #12]
 8011e7c:	4322      	orrs	r2, r4
 8011e7e:	b292      	uxth	r2, r2
 8011e80:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8011e82:	2300      	movs	r3, #0
 8011e84:	e031      	b.n	8011eea <tcp_write+0x6b2>
          goto memerr;
 8011e86:	bf00      	nop
 8011e88:	e006      	b.n	8011e98 <tcp_write+0x660>
            goto memerr;
 8011e8a:	bf00      	nop
 8011e8c:	e004      	b.n	8011e98 <tcp_write+0x660>
        goto memerr;
 8011e8e:	bf00      	nop
 8011e90:	e002      	b.n	8011e98 <tcp_write+0x660>
        goto memerr;
 8011e92:	bf00      	nop
 8011e94:	e000      	b.n	8011e98 <tcp_write+0x660>
      goto memerr;
 8011e96:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011e98:	68fb      	ldr	r3, [r7, #12]
 8011e9a:	8b5b      	ldrh	r3, [r3, #26]
 8011e9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011ea0:	b29a      	uxth	r2, r3
 8011ea2:	68fb      	ldr	r3, [r7, #12]
 8011ea4:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8011ea6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011ea8:	2b00      	cmp	r3, #0
 8011eaa:	d002      	beq.n	8011eb2 <tcp_write+0x67a>
    pbuf_free(concat_p);
 8011eac:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8011eae:	f7fa fecb 	bl	800cc48 <pbuf_free>
  }
  if (queue != NULL) {
 8011eb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011eb4:	2b00      	cmp	r3, #0
 8011eb6:	d002      	beq.n	8011ebe <tcp_write+0x686>
    tcp_segs_free(queue);
 8011eb8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8011eba:	f7fc fb85 	bl	800e5c8 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8011ebe:	68fb      	ldr	r3, [r7, #12]
 8011ec0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011ec4:	2b00      	cmp	r3, #0
 8011ec6:	d00e      	beq.n	8011ee6 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8011ec8:	68fb      	ldr	r3, [r7, #12]
 8011eca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011ecc:	2b00      	cmp	r3, #0
 8011ece:	d10a      	bne.n	8011ee6 <tcp_write+0x6ae>
 8011ed0:	68fb      	ldr	r3, [r7, #12]
 8011ed2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011ed4:	2b00      	cmp	r3, #0
 8011ed6:	d106      	bne.n	8011ee6 <tcp_write+0x6ae>
 8011ed8:	4b06      	ldr	r3, [pc, #24]	; (8011ef4 <tcp_write+0x6bc>)
 8011eda:	f240 3227 	movw	r2, #807	; 0x327
 8011ede:	4906      	ldr	r1, [pc, #24]	; (8011ef8 <tcp_write+0x6c0>)
 8011ee0:	4806      	ldr	r0, [pc, #24]	; (8011efc <tcp_write+0x6c4>)
 8011ee2:	f004 fecd 	bl	8016c80 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8011ee6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011eea:	4618      	mov	r0, r3
 8011eec:	375c      	adds	r7, #92	; 0x5c
 8011eee:	46bd      	mov	sp, r7
 8011ef0:	bd90      	pop	{r4, r7, pc}
 8011ef2:	bf00      	nop
 8011ef4:	080197f4 	.word	0x080197f4
 8011ef8:	08019b68 	.word	0x08019b68
 8011efc:	08019848 	.word	0x08019848

08011f00 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8011f00:	b590      	push	{r4, r7, lr}
 8011f02:	b08b      	sub	sp, #44	; 0x2c
 8011f04:	af02      	add	r7, sp, #8
 8011f06:	6078      	str	r0, [r7, #4]
 8011f08:	460b      	mov	r3, r1
 8011f0a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8011f0c:	2300      	movs	r3, #0
 8011f0e:	61fb      	str	r3, [r7, #28]
 8011f10:	2300      	movs	r3, #0
 8011f12:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8011f14:	2300      	movs	r3, #0
 8011f16:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8011f18:	687b      	ldr	r3, [r7, #4]
 8011f1a:	2b00      	cmp	r3, #0
 8011f1c:	d106      	bne.n	8011f2c <tcp_split_unsent_seg+0x2c>
 8011f1e:	4b95      	ldr	r3, [pc, #596]	; (8012174 <tcp_split_unsent_seg+0x274>)
 8011f20:	f240 324b 	movw	r2, #843	; 0x34b
 8011f24:	4994      	ldr	r1, [pc, #592]	; (8012178 <tcp_split_unsent_seg+0x278>)
 8011f26:	4895      	ldr	r0, [pc, #596]	; (801217c <tcp_split_unsent_seg+0x27c>)
 8011f28:	f004 feaa 	bl	8016c80 <iprintf>

  useg = pcb->unsent;
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011f30:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8011f32:	697b      	ldr	r3, [r7, #20]
 8011f34:	2b00      	cmp	r3, #0
 8011f36:	d102      	bne.n	8011f3e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8011f38:	f04f 33ff 	mov.w	r3, #4294967295
 8011f3c:	e116      	b.n	801216c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8011f3e:	887b      	ldrh	r3, [r7, #2]
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	d109      	bne.n	8011f58 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8011f44:	4b8b      	ldr	r3, [pc, #556]	; (8012174 <tcp_split_unsent_seg+0x274>)
 8011f46:	f240 3253 	movw	r2, #851	; 0x353
 8011f4a:	498d      	ldr	r1, [pc, #564]	; (8012180 <tcp_split_unsent_seg+0x280>)
 8011f4c:	488b      	ldr	r0, [pc, #556]	; (801217c <tcp_split_unsent_seg+0x27c>)
 8011f4e:	f004 fe97 	bl	8016c80 <iprintf>
    return ERR_VAL;
 8011f52:	f06f 0305 	mvn.w	r3, #5
 8011f56:	e109      	b.n	801216c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8011f58:	697b      	ldr	r3, [r7, #20]
 8011f5a:	891b      	ldrh	r3, [r3, #8]
 8011f5c:	887a      	ldrh	r2, [r7, #2]
 8011f5e:	429a      	cmp	r2, r3
 8011f60:	d301      	bcc.n	8011f66 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8011f62:	2300      	movs	r3, #0
 8011f64:	e102      	b.n	801216c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011f6a:	887a      	ldrh	r2, [r7, #2]
 8011f6c:	429a      	cmp	r2, r3
 8011f6e:	d906      	bls.n	8011f7e <tcp_split_unsent_seg+0x7e>
 8011f70:	4b80      	ldr	r3, [pc, #512]	; (8012174 <tcp_split_unsent_seg+0x274>)
 8011f72:	f240 325b 	movw	r2, #859	; 0x35b
 8011f76:	4983      	ldr	r1, [pc, #524]	; (8012184 <tcp_split_unsent_seg+0x284>)
 8011f78:	4880      	ldr	r0, [pc, #512]	; (801217c <tcp_split_unsent_seg+0x27c>)
 8011f7a:	f004 fe81 	bl	8016c80 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8011f7e:	697b      	ldr	r3, [r7, #20]
 8011f80:	891b      	ldrh	r3, [r3, #8]
 8011f82:	2b00      	cmp	r3, #0
 8011f84:	d106      	bne.n	8011f94 <tcp_split_unsent_seg+0x94>
 8011f86:	4b7b      	ldr	r3, [pc, #492]	; (8012174 <tcp_split_unsent_seg+0x274>)
 8011f88:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8011f8c:	497e      	ldr	r1, [pc, #504]	; (8012188 <tcp_split_unsent_seg+0x288>)
 8011f8e:	487b      	ldr	r0, [pc, #492]	; (801217c <tcp_split_unsent_seg+0x27c>)
 8011f90:	f004 fe76 	bl	8016c80 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8011f94:	697b      	ldr	r3, [r7, #20]
 8011f96:	7a9b      	ldrb	r3, [r3, #10]
 8011f98:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8011f9a:	7bfb      	ldrb	r3, [r7, #15]
 8011f9c:	009b      	lsls	r3, r3, #2
 8011f9e:	b2db      	uxtb	r3, r3
 8011fa0:	f003 0304 	and.w	r3, r3, #4
 8011fa4:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8011fa6:	697b      	ldr	r3, [r7, #20]
 8011fa8:	891a      	ldrh	r2, [r3, #8]
 8011faa:	887b      	ldrh	r3, [r7, #2]
 8011fac:	1ad3      	subs	r3, r2, r3
 8011fae:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8011fb0:	7bbb      	ldrb	r3, [r7, #14]
 8011fb2:	b29a      	uxth	r2, r3
 8011fb4:	89bb      	ldrh	r3, [r7, #12]
 8011fb6:	4413      	add	r3, r2
 8011fb8:	b29b      	uxth	r3, r3
 8011fba:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011fbe:	4619      	mov	r1, r3
 8011fc0:	2036      	movs	r0, #54	; 0x36
 8011fc2:	f7fa fb5d 	bl	800c680 <pbuf_alloc>
 8011fc6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011fc8:	693b      	ldr	r3, [r7, #16]
 8011fca:	2b00      	cmp	r3, #0
 8011fcc:	f000 80b7 	beq.w	801213e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8011fd0:	697b      	ldr	r3, [r7, #20]
 8011fd2:	685b      	ldr	r3, [r3, #4]
 8011fd4:	891a      	ldrh	r2, [r3, #8]
 8011fd6:	697b      	ldr	r3, [r7, #20]
 8011fd8:	891b      	ldrh	r3, [r3, #8]
 8011fda:	1ad3      	subs	r3, r2, r3
 8011fdc:	b29a      	uxth	r2, r3
 8011fde:	887b      	ldrh	r3, [r7, #2]
 8011fe0:	4413      	add	r3, r2
 8011fe2:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8011fe4:	697b      	ldr	r3, [r7, #20]
 8011fe6:	6858      	ldr	r0, [r3, #4]
 8011fe8:	693b      	ldr	r3, [r7, #16]
 8011fea:	685a      	ldr	r2, [r3, #4]
 8011fec:	7bbb      	ldrb	r3, [r7, #14]
 8011fee:	18d1      	adds	r1, r2, r3
 8011ff0:	897b      	ldrh	r3, [r7, #10]
 8011ff2:	89ba      	ldrh	r2, [r7, #12]
 8011ff4:	f7fb f81c 	bl	800d030 <pbuf_copy_partial>
 8011ff8:	4603      	mov	r3, r0
 8011ffa:	461a      	mov	r2, r3
 8011ffc:	89bb      	ldrh	r3, [r7, #12]
 8011ffe:	4293      	cmp	r3, r2
 8012000:	f040 809f 	bne.w	8012142 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8012004:	697b      	ldr	r3, [r7, #20]
 8012006:	68db      	ldr	r3, [r3, #12]
 8012008:	899b      	ldrh	r3, [r3, #12]
 801200a:	b29b      	uxth	r3, r3
 801200c:	4618      	mov	r0, r3
 801200e:	f7f9 f9bf 	bl	800b390 <lwip_htons>
 8012012:	4603      	mov	r3, r0
 8012014:	b2db      	uxtb	r3, r3
 8012016:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801201a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801201c:	2300      	movs	r3, #0
 801201e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8012020:	7efb      	ldrb	r3, [r7, #27]
 8012022:	f003 0308 	and.w	r3, r3, #8
 8012026:	2b00      	cmp	r3, #0
 8012028:	d007      	beq.n	801203a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801202a:	7efb      	ldrb	r3, [r7, #27]
 801202c:	f023 0308 	bic.w	r3, r3, #8
 8012030:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8012032:	7ebb      	ldrb	r3, [r7, #26]
 8012034:	f043 0308 	orr.w	r3, r3, #8
 8012038:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801203a:	7efb      	ldrb	r3, [r7, #27]
 801203c:	f003 0301 	and.w	r3, r3, #1
 8012040:	2b00      	cmp	r3, #0
 8012042:	d007      	beq.n	8012054 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8012044:	7efb      	ldrb	r3, [r7, #27]
 8012046:	f023 0301 	bic.w	r3, r3, #1
 801204a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 801204c:	7ebb      	ldrb	r3, [r7, #26]
 801204e:	f043 0301 	orr.w	r3, r3, #1
 8012052:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8012054:	697b      	ldr	r3, [r7, #20]
 8012056:	68db      	ldr	r3, [r3, #12]
 8012058:	685b      	ldr	r3, [r3, #4]
 801205a:	4618      	mov	r0, r3
 801205c:	f7f9 f9ac 	bl	800b3b8 <lwip_htonl>
 8012060:	4602      	mov	r2, r0
 8012062:	887b      	ldrh	r3, [r7, #2]
 8012064:	18d1      	adds	r1, r2, r3
 8012066:	7eba      	ldrb	r2, [r7, #26]
 8012068:	7bfb      	ldrb	r3, [r7, #15]
 801206a:	9300      	str	r3, [sp, #0]
 801206c:	460b      	mov	r3, r1
 801206e:	6939      	ldr	r1, [r7, #16]
 8012070:	6878      	ldr	r0, [r7, #4]
 8012072:	f7ff fa4f 	bl	8011514 <tcp_create_segment>
 8012076:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8012078:	69fb      	ldr	r3, [r7, #28]
 801207a:	2b00      	cmp	r3, #0
 801207c:	d063      	beq.n	8012146 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801207e:	697b      	ldr	r3, [r7, #20]
 8012080:	685b      	ldr	r3, [r3, #4]
 8012082:	4618      	mov	r0, r3
 8012084:	f7fa fe6e 	bl	800cd64 <pbuf_clen>
 8012088:	4603      	mov	r3, r0
 801208a:	461a      	mov	r2, r3
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012092:	1a9b      	subs	r3, r3, r2
 8012094:	b29a      	uxth	r2, r3
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801209c:	697b      	ldr	r3, [r7, #20]
 801209e:	6858      	ldr	r0, [r3, #4]
 80120a0:	697b      	ldr	r3, [r7, #20]
 80120a2:	685b      	ldr	r3, [r3, #4]
 80120a4:	891a      	ldrh	r2, [r3, #8]
 80120a6:	89bb      	ldrh	r3, [r7, #12]
 80120a8:	1ad3      	subs	r3, r2, r3
 80120aa:	b29b      	uxth	r3, r3
 80120ac:	4619      	mov	r1, r3
 80120ae:	f7fa fc45 	bl	800c93c <pbuf_realloc>
  useg->len -= remainder;
 80120b2:	697b      	ldr	r3, [r7, #20]
 80120b4:	891a      	ldrh	r2, [r3, #8]
 80120b6:	89bb      	ldrh	r3, [r7, #12]
 80120b8:	1ad3      	subs	r3, r2, r3
 80120ba:	b29a      	uxth	r2, r3
 80120bc:	697b      	ldr	r3, [r7, #20]
 80120be:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80120c0:	697b      	ldr	r3, [r7, #20]
 80120c2:	68db      	ldr	r3, [r3, #12]
 80120c4:	899b      	ldrh	r3, [r3, #12]
 80120c6:	b29c      	uxth	r4, r3
 80120c8:	7efb      	ldrb	r3, [r7, #27]
 80120ca:	b29b      	uxth	r3, r3
 80120cc:	4618      	mov	r0, r3
 80120ce:	f7f9 f95f 	bl	800b390 <lwip_htons>
 80120d2:	4603      	mov	r3, r0
 80120d4:	461a      	mov	r2, r3
 80120d6:	697b      	ldr	r3, [r7, #20]
 80120d8:	68db      	ldr	r3, [r3, #12]
 80120da:	4322      	orrs	r2, r4
 80120dc:	b292      	uxth	r2, r2
 80120de:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80120e0:	697b      	ldr	r3, [r7, #20]
 80120e2:	685b      	ldr	r3, [r3, #4]
 80120e4:	4618      	mov	r0, r3
 80120e6:	f7fa fe3d 	bl	800cd64 <pbuf_clen>
 80120ea:	4603      	mov	r3, r0
 80120ec:	461a      	mov	r2, r3
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80120f4:	4413      	add	r3, r2
 80120f6:	b29a      	uxth	r2, r3
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80120fe:	69fb      	ldr	r3, [r7, #28]
 8012100:	685b      	ldr	r3, [r3, #4]
 8012102:	4618      	mov	r0, r3
 8012104:	f7fa fe2e 	bl	800cd64 <pbuf_clen>
 8012108:	4603      	mov	r3, r0
 801210a:	461a      	mov	r2, r3
 801210c:	687b      	ldr	r3, [r7, #4]
 801210e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012112:	4413      	add	r3, r2
 8012114:	b29a      	uxth	r2, r3
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801211c:	697b      	ldr	r3, [r7, #20]
 801211e:	681a      	ldr	r2, [r3, #0]
 8012120:	69fb      	ldr	r3, [r7, #28]
 8012122:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8012124:	697b      	ldr	r3, [r7, #20]
 8012126:	69fa      	ldr	r2, [r7, #28]
 8012128:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801212a:	69fb      	ldr	r3, [r7, #28]
 801212c:	681b      	ldr	r3, [r3, #0]
 801212e:	2b00      	cmp	r3, #0
 8012130:	d103      	bne.n	801213a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	2200      	movs	r2, #0
 8012136:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801213a:	2300      	movs	r3, #0
 801213c:	e016      	b.n	801216c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801213e:	bf00      	nop
 8012140:	e002      	b.n	8012148 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8012142:	bf00      	nop
 8012144:	e000      	b.n	8012148 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8012146:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8012148:	69fb      	ldr	r3, [r7, #28]
 801214a:	2b00      	cmp	r3, #0
 801214c:	d006      	beq.n	801215c <tcp_split_unsent_seg+0x25c>
 801214e:	4b09      	ldr	r3, [pc, #36]	; (8012174 <tcp_split_unsent_seg+0x274>)
 8012150:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8012154:	490d      	ldr	r1, [pc, #52]	; (801218c <tcp_split_unsent_seg+0x28c>)
 8012156:	4809      	ldr	r0, [pc, #36]	; (801217c <tcp_split_unsent_seg+0x27c>)
 8012158:	f004 fd92 	bl	8016c80 <iprintf>
  if (p != NULL) {
 801215c:	693b      	ldr	r3, [r7, #16]
 801215e:	2b00      	cmp	r3, #0
 8012160:	d002      	beq.n	8012168 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8012162:	6938      	ldr	r0, [r7, #16]
 8012164:	f7fa fd70 	bl	800cc48 <pbuf_free>
  }

  return ERR_MEM;
 8012168:	f04f 33ff 	mov.w	r3, #4294967295
}
 801216c:	4618      	mov	r0, r3
 801216e:	3724      	adds	r7, #36	; 0x24
 8012170:	46bd      	mov	sp, r7
 8012172:	bd90      	pop	{r4, r7, pc}
 8012174:	080197f4 	.word	0x080197f4
 8012178:	08019b88 	.word	0x08019b88
 801217c:	08019848 	.word	0x08019848
 8012180:	08019bac 	.word	0x08019bac
 8012184:	08019bd0 	.word	0x08019bd0
 8012188:	08019be0 	.word	0x08019be0
 801218c:	08019bf0 	.word	0x08019bf0

08012190 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8012190:	b590      	push	{r4, r7, lr}
 8012192:	b085      	sub	sp, #20
 8012194:	af00      	add	r7, sp, #0
 8012196:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	2b00      	cmp	r3, #0
 801219c:	d106      	bne.n	80121ac <tcp_send_fin+0x1c>
 801219e:	4b21      	ldr	r3, [pc, #132]	; (8012224 <tcp_send_fin+0x94>)
 80121a0:	f240 32eb 	movw	r2, #1003	; 0x3eb
 80121a4:	4920      	ldr	r1, [pc, #128]	; (8012228 <tcp_send_fin+0x98>)
 80121a6:	4821      	ldr	r0, [pc, #132]	; (801222c <tcp_send_fin+0x9c>)
 80121a8:	f004 fd6a 	bl	8016c80 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80121b0:	2b00      	cmp	r3, #0
 80121b2:	d02e      	beq.n	8012212 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80121b4:	687b      	ldr	r3, [r7, #4]
 80121b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80121b8:	60fb      	str	r3, [r7, #12]
 80121ba:	e002      	b.n	80121c2 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80121bc:	68fb      	ldr	r3, [r7, #12]
 80121be:	681b      	ldr	r3, [r3, #0]
 80121c0:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80121c2:	68fb      	ldr	r3, [r7, #12]
 80121c4:	681b      	ldr	r3, [r3, #0]
 80121c6:	2b00      	cmp	r3, #0
 80121c8:	d1f8      	bne.n	80121bc <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80121ca:	68fb      	ldr	r3, [r7, #12]
 80121cc:	68db      	ldr	r3, [r3, #12]
 80121ce:	899b      	ldrh	r3, [r3, #12]
 80121d0:	b29b      	uxth	r3, r3
 80121d2:	4618      	mov	r0, r3
 80121d4:	f7f9 f8dc 	bl	800b390 <lwip_htons>
 80121d8:	4603      	mov	r3, r0
 80121da:	b2db      	uxtb	r3, r3
 80121dc:	f003 0307 	and.w	r3, r3, #7
 80121e0:	2b00      	cmp	r3, #0
 80121e2:	d116      	bne.n	8012212 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80121e4:	68fb      	ldr	r3, [r7, #12]
 80121e6:	68db      	ldr	r3, [r3, #12]
 80121e8:	899b      	ldrh	r3, [r3, #12]
 80121ea:	b29c      	uxth	r4, r3
 80121ec:	2001      	movs	r0, #1
 80121ee:	f7f9 f8cf 	bl	800b390 <lwip_htons>
 80121f2:	4603      	mov	r3, r0
 80121f4:	461a      	mov	r2, r3
 80121f6:	68fb      	ldr	r3, [r7, #12]
 80121f8:	68db      	ldr	r3, [r3, #12]
 80121fa:	4322      	orrs	r2, r4
 80121fc:	b292      	uxth	r2, r2
 80121fe:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	8b5b      	ldrh	r3, [r3, #26]
 8012204:	f043 0320 	orr.w	r3, r3, #32
 8012208:	b29a      	uxth	r2, r3
 801220a:	687b      	ldr	r3, [r7, #4]
 801220c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801220e:	2300      	movs	r3, #0
 8012210:	e004      	b.n	801221c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8012212:	2101      	movs	r1, #1
 8012214:	6878      	ldr	r0, [r7, #4]
 8012216:	f000 f80b 	bl	8012230 <tcp_enqueue_flags>
 801221a:	4603      	mov	r3, r0
}
 801221c:	4618      	mov	r0, r3
 801221e:	3714      	adds	r7, #20
 8012220:	46bd      	mov	sp, r7
 8012222:	bd90      	pop	{r4, r7, pc}
 8012224:	080197f4 	.word	0x080197f4
 8012228:	08019bfc 	.word	0x08019bfc
 801222c:	08019848 	.word	0x08019848

08012230 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8012230:	b580      	push	{r7, lr}
 8012232:	b08a      	sub	sp, #40	; 0x28
 8012234:	af02      	add	r7, sp, #8
 8012236:	6078      	str	r0, [r7, #4]
 8012238:	460b      	mov	r3, r1
 801223a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801223c:	2300      	movs	r3, #0
 801223e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8012240:	2300      	movs	r3, #0
 8012242:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8012244:	78fb      	ldrb	r3, [r7, #3]
 8012246:	f003 0303 	and.w	r3, r3, #3
 801224a:	2b00      	cmp	r3, #0
 801224c:	d106      	bne.n	801225c <tcp_enqueue_flags+0x2c>
 801224e:	4b67      	ldr	r3, [pc, #412]	; (80123ec <tcp_enqueue_flags+0x1bc>)
 8012250:	f240 4211 	movw	r2, #1041	; 0x411
 8012254:	4966      	ldr	r1, [pc, #408]	; (80123f0 <tcp_enqueue_flags+0x1c0>)
 8012256:	4867      	ldr	r0, [pc, #412]	; (80123f4 <tcp_enqueue_flags+0x1c4>)
 8012258:	f004 fd12 	bl	8016c80 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	2b00      	cmp	r3, #0
 8012260:	d106      	bne.n	8012270 <tcp_enqueue_flags+0x40>
 8012262:	4b62      	ldr	r3, [pc, #392]	; (80123ec <tcp_enqueue_flags+0x1bc>)
 8012264:	f240 4213 	movw	r2, #1043	; 0x413
 8012268:	4963      	ldr	r1, [pc, #396]	; (80123f8 <tcp_enqueue_flags+0x1c8>)
 801226a:	4862      	ldr	r0, [pc, #392]	; (80123f4 <tcp_enqueue_flags+0x1c4>)
 801226c:	f004 fd08 	bl	8016c80 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8012270:	78fb      	ldrb	r3, [r7, #3]
 8012272:	f003 0302 	and.w	r3, r3, #2
 8012276:	2b00      	cmp	r3, #0
 8012278:	d001      	beq.n	801227e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801227a:	2301      	movs	r3, #1
 801227c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801227e:	7ffb      	ldrb	r3, [r7, #31]
 8012280:	009b      	lsls	r3, r3, #2
 8012282:	b2db      	uxtb	r3, r3
 8012284:	f003 0304 	and.w	r3, r3, #4
 8012288:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801228a:	7dfb      	ldrb	r3, [r7, #23]
 801228c:	b29b      	uxth	r3, r3
 801228e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012292:	4619      	mov	r1, r3
 8012294:	2036      	movs	r0, #54	; 0x36
 8012296:	f7fa f9f3 	bl	800c680 <pbuf_alloc>
 801229a:	6138      	str	r0, [r7, #16]
 801229c:	693b      	ldr	r3, [r7, #16]
 801229e:	2b00      	cmp	r3, #0
 80122a0:	d109      	bne.n	80122b6 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	8b5b      	ldrh	r3, [r3, #26]
 80122a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80122aa:	b29a      	uxth	r2, r3
 80122ac:	687b      	ldr	r3, [r7, #4]
 80122ae:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80122b0:	f04f 33ff 	mov.w	r3, #4294967295
 80122b4:	e095      	b.n	80123e2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80122b6:	693b      	ldr	r3, [r7, #16]
 80122b8:	895a      	ldrh	r2, [r3, #10]
 80122ba:	7dfb      	ldrb	r3, [r7, #23]
 80122bc:	b29b      	uxth	r3, r3
 80122be:	429a      	cmp	r2, r3
 80122c0:	d206      	bcs.n	80122d0 <tcp_enqueue_flags+0xa0>
 80122c2:	4b4a      	ldr	r3, [pc, #296]	; (80123ec <tcp_enqueue_flags+0x1bc>)
 80122c4:	f240 4239 	movw	r2, #1081	; 0x439
 80122c8:	494c      	ldr	r1, [pc, #304]	; (80123fc <tcp_enqueue_flags+0x1cc>)
 80122ca:	484a      	ldr	r0, [pc, #296]	; (80123f4 <tcp_enqueue_flags+0x1c4>)
 80122cc:	f004 fcd8 	bl	8016c80 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80122d4:	78fa      	ldrb	r2, [r7, #3]
 80122d6:	7ffb      	ldrb	r3, [r7, #31]
 80122d8:	9300      	str	r3, [sp, #0]
 80122da:	460b      	mov	r3, r1
 80122dc:	6939      	ldr	r1, [r7, #16]
 80122de:	6878      	ldr	r0, [r7, #4]
 80122e0:	f7ff f918 	bl	8011514 <tcp_create_segment>
 80122e4:	60f8      	str	r0, [r7, #12]
 80122e6:	68fb      	ldr	r3, [r7, #12]
 80122e8:	2b00      	cmp	r3, #0
 80122ea:	d109      	bne.n	8012300 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	8b5b      	ldrh	r3, [r3, #26]
 80122f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80122f4:	b29a      	uxth	r2, r3
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80122fa:	f04f 33ff 	mov.w	r3, #4294967295
 80122fe:	e070      	b.n	80123e2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8012300:	68fb      	ldr	r3, [r7, #12]
 8012302:	68db      	ldr	r3, [r3, #12]
 8012304:	f003 0303 	and.w	r3, r3, #3
 8012308:	2b00      	cmp	r3, #0
 801230a:	d006      	beq.n	801231a <tcp_enqueue_flags+0xea>
 801230c:	4b37      	ldr	r3, [pc, #220]	; (80123ec <tcp_enqueue_flags+0x1bc>)
 801230e:	f240 4242 	movw	r2, #1090	; 0x442
 8012312:	493b      	ldr	r1, [pc, #236]	; (8012400 <tcp_enqueue_flags+0x1d0>)
 8012314:	4837      	ldr	r0, [pc, #220]	; (80123f4 <tcp_enqueue_flags+0x1c4>)
 8012316:	f004 fcb3 	bl	8016c80 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801231a:	68fb      	ldr	r3, [r7, #12]
 801231c:	891b      	ldrh	r3, [r3, #8]
 801231e:	2b00      	cmp	r3, #0
 8012320:	d006      	beq.n	8012330 <tcp_enqueue_flags+0x100>
 8012322:	4b32      	ldr	r3, [pc, #200]	; (80123ec <tcp_enqueue_flags+0x1bc>)
 8012324:	f240 4243 	movw	r2, #1091	; 0x443
 8012328:	4936      	ldr	r1, [pc, #216]	; (8012404 <tcp_enqueue_flags+0x1d4>)
 801232a:	4832      	ldr	r0, [pc, #200]	; (80123f4 <tcp_enqueue_flags+0x1c4>)
 801232c:	f004 fca8 	bl	8016c80 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012334:	2b00      	cmp	r3, #0
 8012336:	d103      	bne.n	8012340 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	68fa      	ldr	r2, [r7, #12]
 801233c:	66da      	str	r2, [r3, #108]	; 0x6c
 801233e:	e00d      	b.n	801235c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012344:	61bb      	str	r3, [r7, #24]
 8012346:	e002      	b.n	801234e <tcp_enqueue_flags+0x11e>
 8012348:	69bb      	ldr	r3, [r7, #24]
 801234a:	681b      	ldr	r3, [r3, #0]
 801234c:	61bb      	str	r3, [r7, #24]
 801234e:	69bb      	ldr	r3, [r7, #24]
 8012350:	681b      	ldr	r3, [r3, #0]
 8012352:	2b00      	cmp	r3, #0
 8012354:	d1f8      	bne.n	8012348 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8012356:	69bb      	ldr	r3, [r7, #24]
 8012358:	68fa      	ldr	r2, [r7, #12]
 801235a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	2200      	movs	r2, #0
 8012360:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8012364:	78fb      	ldrb	r3, [r7, #3]
 8012366:	f003 0302 	and.w	r3, r3, #2
 801236a:	2b00      	cmp	r3, #0
 801236c:	d104      	bne.n	8012378 <tcp_enqueue_flags+0x148>
 801236e:	78fb      	ldrb	r3, [r7, #3]
 8012370:	f003 0301 	and.w	r3, r3, #1
 8012374:	2b00      	cmp	r3, #0
 8012376:	d004      	beq.n	8012382 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801237c:	1c5a      	adds	r2, r3, #1
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8012382:	78fb      	ldrb	r3, [r7, #3]
 8012384:	f003 0301 	and.w	r3, r3, #1
 8012388:	2b00      	cmp	r3, #0
 801238a:	d006      	beq.n	801239a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801238c:	687b      	ldr	r3, [r7, #4]
 801238e:	8b5b      	ldrh	r3, [r3, #26]
 8012390:	f043 0320 	orr.w	r3, r3, #32
 8012394:	b29a      	uxth	r2, r3
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801239a:	68fb      	ldr	r3, [r7, #12]
 801239c:	685b      	ldr	r3, [r3, #4]
 801239e:	4618      	mov	r0, r3
 80123a0:	f7fa fce0 	bl	800cd64 <pbuf_clen>
 80123a4:	4603      	mov	r3, r0
 80123a6:	461a      	mov	r2, r3
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80123ae:	4413      	add	r3, r2
 80123b0:	b29a      	uxth	r2, r3
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80123be:	2b00      	cmp	r3, #0
 80123c0:	d00e      	beq.n	80123e0 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80123c6:	2b00      	cmp	r3, #0
 80123c8:	d10a      	bne.n	80123e0 <tcp_enqueue_flags+0x1b0>
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80123ce:	2b00      	cmp	r3, #0
 80123d0:	d106      	bne.n	80123e0 <tcp_enqueue_flags+0x1b0>
 80123d2:	4b06      	ldr	r3, [pc, #24]	; (80123ec <tcp_enqueue_flags+0x1bc>)
 80123d4:	f240 4265 	movw	r2, #1125	; 0x465
 80123d8:	490b      	ldr	r1, [pc, #44]	; (8012408 <tcp_enqueue_flags+0x1d8>)
 80123da:	4806      	ldr	r0, [pc, #24]	; (80123f4 <tcp_enqueue_flags+0x1c4>)
 80123dc:	f004 fc50 	bl	8016c80 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80123e0:	2300      	movs	r3, #0
}
 80123e2:	4618      	mov	r0, r3
 80123e4:	3720      	adds	r7, #32
 80123e6:	46bd      	mov	sp, r7
 80123e8:	bd80      	pop	{r7, pc}
 80123ea:	bf00      	nop
 80123ec:	080197f4 	.word	0x080197f4
 80123f0:	08019c18 	.word	0x08019c18
 80123f4:	08019848 	.word	0x08019848
 80123f8:	08019c70 	.word	0x08019c70
 80123fc:	08019c90 	.word	0x08019c90
 8012400:	08019ccc 	.word	0x08019ccc
 8012404:	08019ce4 	.word	0x08019ce4
 8012408:	08019d10 	.word	0x08019d10

0801240c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801240c:	b5b0      	push	{r4, r5, r7, lr}
 801240e:	b08a      	sub	sp, #40	; 0x28
 8012410:	af00      	add	r7, sp, #0
 8012412:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	2b00      	cmp	r3, #0
 8012418:	d106      	bne.n	8012428 <tcp_output+0x1c>
 801241a:	4b8a      	ldr	r3, [pc, #552]	; (8012644 <tcp_output+0x238>)
 801241c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8012420:	4989      	ldr	r1, [pc, #548]	; (8012648 <tcp_output+0x23c>)
 8012422:	488a      	ldr	r0, [pc, #552]	; (801264c <tcp_output+0x240>)
 8012424:	f004 fc2c 	bl	8016c80 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	7d1b      	ldrb	r3, [r3, #20]
 801242c:	2b01      	cmp	r3, #1
 801242e:	d106      	bne.n	801243e <tcp_output+0x32>
 8012430:	4b84      	ldr	r3, [pc, #528]	; (8012644 <tcp_output+0x238>)
 8012432:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8012436:	4986      	ldr	r1, [pc, #536]	; (8012650 <tcp_output+0x244>)
 8012438:	4884      	ldr	r0, [pc, #528]	; (801264c <tcp_output+0x240>)
 801243a:	f004 fc21 	bl	8016c80 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801243e:	4b85      	ldr	r3, [pc, #532]	; (8012654 <tcp_output+0x248>)
 8012440:	681b      	ldr	r3, [r3, #0]
 8012442:	687a      	ldr	r2, [r7, #4]
 8012444:	429a      	cmp	r2, r3
 8012446:	d101      	bne.n	801244c <tcp_output+0x40>
    return ERR_OK;
 8012448:	2300      	movs	r3, #0
 801244a:	e1ce      	b.n	80127ea <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012458:	4293      	cmp	r3, r2
 801245a:	bf28      	it	cs
 801245c:	4613      	movcs	r3, r2
 801245e:	b29b      	uxth	r3, r3
 8012460:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012466:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8012468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801246a:	2b00      	cmp	r3, #0
 801246c:	d10b      	bne.n	8012486 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801246e:	687b      	ldr	r3, [r7, #4]
 8012470:	8b5b      	ldrh	r3, [r3, #26]
 8012472:	f003 0302 	and.w	r3, r3, #2
 8012476:	2b00      	cmp	r3, #0
 8012478:	f000 81aa 	beq.w	80127d0 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 801247c:	6878      	ldr	r0, [r7, #4]
 801247e:	f000 fdcb 	bl	8013018 <tcp_send_empty_ack>
 8012482:	4603      	mov	r3, r0
 8012484:	e1b1      	b.n	80127ea <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8012486:	6879      	ldr	r1, [r7, #4]
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	3304      	adds	r3, #4
 801248c:	461a      	mov	r2, r3
 801248e:	6878      	ldr	r0, [r7, #4]
 8012490:	f7ff f824 	bl	80114dc <tcp_route>
 8012494:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8012496:	697b      	ldr	r3, [r7, #20]
 8012498:	2b00      	cmp	r3, #0
 801249a:	d102      	bne.n	80124a2 <tcp_output+0x96>
    return ERR_RTE;
 801249c:	f06f 0303 	mvn.w	r3, #3
 80124a0:	e1a3      	b.n	80127ea <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	2b00      	cmp	r3, #0
 80124a6:	d003      	beq.n	80124b0 <tcp_output+0xa4>
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	681b      	ldr	r3, [r3, #0]
 80124ac:	2b00      	cmp	r3, #0
 80124ae:	d111      	bne.n	80124d4 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80124b0:	697b      	ldr	r3, [r7, #20]
 80124b2:	2b00      	cmp	r3, #0
 80124b4:	d002      	beq.n	80124bc <tcp_output+0xb0>
 80124b6:	697b      	ldr	r3, [r7, #20]
 80124b8:	3304      	adds	r3, #4
 80124ba:	e000      	b.n	80124be <tcp_output+0xb2>
 80124bc:	2300      	movs	r3, #0
 80124be:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80124c0:	693b      	ldr	r3, [r7, #16]
 80124c2:	2b00      	cmp	r3, #0
 80124c4:	d102      	bne.n	80124cc <tcp_output+0xc0>
      return ERR_RTE;
 80124c6:	f06f 0303 	mvn.w	r3, #3
 80124ca:	e18e      	b.n	80127ea <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80124cc:	693b      	ldr	r3, [r7, #16]
 80124ce:	681a      	ldr	r2, [r3, #0]
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80124d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124d6:	68db      	ldr	r3, [r3, #12]
 80124d8:	685b      	ldr	r3, [r3, #4]
 80124da:	4618      	mov	r0, r3
 80124dc:	f7f8 ff6c 	bl	800b3b8 <lwip_htonl>
 80124e0:	4602      	mov	r2, r0
 80124e2:	687b      	ldr	r3, [r7, #4]
 80124e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80124e6:	1ad3      	subs	r3, r2, r3
 80124e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80124ea:	8912      	ldrh	r2, [r2, #8]
 80124ec:	4413      	add	r3, r2
 80124ee:	69ba      	ldr	r2, [r7, #24]
 80124f0:	429a      	cmp	r2, r3
 80124f2:	d227      	bcs.n	8012544 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80124fa:	461a      	mov	r2, r3
 80124fc:	69bb      	ldr	r3, [r7, #24]
 80124fe:	4293      	cmp	r3, r2
 8012500:	d114      	bne.n	801252c <tcp_output+0x120>
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012506:	2b00      	cmp	r3, #0
 8012508:	d110      	bne.n	801252c <tcp_output+0x120>
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8012510:	2b00      	cmp	r3, #0
 8012512:	d10b      	bne.n	801252c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	2200      	movs	r2, #0
 8012518:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	2201      	movs	r2, #1
 8012520:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	2200      	movs	r2, #0
 8012528:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	8b5b      	ldrh	r3, [r3, #26]
 8012530:	f003 0302 	and.w	r3, r3, #2
 8012534:	2b00      	cmp	r3, #0
 8012536:	f000 814d 	beq.w	80127d4 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801253a:	6878      	ldr	r0, [r7, #4]
 801253c:	f000 fd6c 	bl	8013018 <tcp_send_empty_ack>
 8012540:	4603      	mov	r3, r0
 8012542:	e152      	b.n	80127ea <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	2200      	movs	r2, #0
 8012548:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012550:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8012552:	6a3b      	ldr	r3, [r7, #32]
 8012554:	2b00      	cmp	r3, #0
 8012556:	f000 811c 	beq.w	8012792 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801255a:	e002      	b.n	8012562 <tcp_output+0x156>
 801255c:	6a3b      	ldr	r3, [r7, #32]
 801255e:	681b      	ldr	r3, [r3, #0]
 8012560:	623b      	str	r3, [r7, #32]
 8012562:	6a3b      	ldr	r3, [r7, #32]
 8012564:	681b      	ldr	r3, [r3, #0]
 8012566:	2b00      	cmp	r3, #0
 8012568:	d1f8      	bne.n	801255c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801256a:	e112      	b.n	8012792 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801256c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801256e:	68db      	ldr	r3, [r3, #12]
 8012570:	899b      	ldrh	r3, [r3, #12]
 8012572:	b29b      	uxth	r3, r3
 8012574:	4618      	mov	r0, r3
 8012576:	f7f8 ff0b 	bl	800b390 <lwip_htons>
 801257a:	4603      	mov	r3, r0
 801257c:	b2db      	uxtb	r3, r3
 801257e:	f003 0304 	and.w	r3, r3, #4
 8012582:	2b00      	cmp	r3, #0
 8012584:	d006      	beq.n	8012594 <tcp_output+0x188>
 8012586:	4b2f      	ldr	r3, [pc, #188]	; (8012644 <tcp_output+0x238>)
 8012588:	f240 5236 	movw	r2, #1334	; 0x536
 801258c:	4932      	ldr	r1, [pc, #200]	; (8012658 <tcp_output+0x24c>)
 801258e:	482f      	ldr	r0, [pc, #188]	; (801264c <tcp_output+0x240>)
 8012590:	f004 fb76 	bl	8016c80 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012594:	687b      	ldr	r3, [r7, #4]
 8012596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012598:	2b00      	cmp	r3, #0
 801259a:	d01f      	beq.n	80125dc <tcp_output+0x1d0>
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	8b5b      	ldrh	r3, [r3, #26]
 80125a0:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80125a4:	2b00      	cmp	r3, #0
 80125a6:	d119      	bne.n	80125dc <tcp_output+0x1d0>
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80125ac:	2b00      	cmp	r3, #0
 80125ae:	d00b      	beq.n	80125c8 <tcp_output+0x1bc>
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80125b4:	681b      	ldr	r3, [r3, #0]
 80125b6:	2b00      	cmp	r3, #0
 80125b8:	d110      	bne.n	80125dc <tcp_output+0x1d0>
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80125be:	891a      	ldrh	r2, [r3, #8]
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80125c4:	429a      	cmp	r2, r3
 80125c6:	d209      	bcs.n	80125dc <tcp_output+0x1d0>
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80125ce:	2b00      	cmp	r3, #0
 80125d0:	d004      	beq.n	80125dc <tcp_output+0x1d0>
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80125d8:	2b08      	cmp	r3, #8
 80125da:	d901      	bls.n	80125e0 <tcp_output+0x1d4>
 80125dc:	2301      	movs	r3, #1
 80125de:	e000      	b.n	80125e2 <tcp_output+0x1d6>
 80125e0:	2300      	movs	r3, #0
 80125e2:	2b00      	cmp	r3, #0
 80125e4:	d106      	bne.n	80125f4 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	8b5b      	ldrh	r3, [r3, #26]
 80125ea:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80125ee:	2b00      	cmp	r3, #0
 80125f0:	f000 80e4 	beq.w	80127bc <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	7d1b      	ldrb	r3, [r3, #20]
 80125f8:	2b02      	cmp	r3, #2
 80125fa:	d00d      	beq.n	8012618 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80125fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125fe:	68db      	ldr	r3, [r3, #12]
 8012600:	899b      	ldrh	r3, [r3, #12]
 8012602:	b29c      	uxth	r4, r3
 8012604:	2010      	movs	r0, #16
 8012606:	f7f8 fec3 	bl	800b390 <lwip_htons>
 801260a:	4603      	mov	r3, r0
 801260c:	461a      	mov	r2, r3
 801260e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012610:	68db      	ldr	r3, [r3, #12]
 8012612:	4322      	orrs	r2, r4
 8012614:	b292      	uxth	r2, r2
 8012616:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8012618:	697a      	ldr	r2, [r7, #20]
 801261a:	6879      	ldr	r1, [r7, #4]
 801261c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801261e:	f000 f909 	bl	8012834 <tcp_output_segment>
 8012622:	4603      	mov	r3, r0
 8012624:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8012626:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801262a:	2b00      	cmp	r3, #0
 801262c:	d016      	beq.n	801265c <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801262e:	687b      	ldr	r3, [r7, #4]
 8012630:	8b5b      	ldrh	r3, [r3, #26]
 8012632:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012636:	b29a      	uxth	r2, r3
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	835a      	strh	r2, [r3, #26]
      return err;
 801263c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012640:	e0d3      	b.n	80127ea <tcp_output+0x3de>
 8012642:	bf00      	nop
 8012644:	080197f4 	.word	0x080197f4
 8012648:	08019d38 	.word	0x08019d38
 801264c:	08019848 	.word	0x08019848
 8012650:	08019d50 	.word	0x08019d50
 8012654:	2000be5c 	.word	0x2000be5c
 8012658:	08019d78 	.word	0x08019d78
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801265c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801265e:	681a      	ldr	r2, [r3, #0]
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	7d1b      	ldrb	r3, [r3, #20]
 8012668:	2b02      	cmp	r3, #2
 801266a:	d006      	beq.n	801267a <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	8b5b      	ldrh	r3, [r3, #26]
 8012670:	f023 0303 	bic.w	r3, r3, #3
 8012674:	b29a      	uxth	r2, r3
 8012676:	687b      	ldr	r3, [r7, #4]
 8012678:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801267a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801267c:	68db      	ldr	r3, [r3, #12]
 801267e:	685b      	ldr	r3, [r3, #4]
 8012680:	4618      	mov	r0, r3
 8012682:	f7f8 fe99 	bl	800b3b8 <lwip_htonl>
 8012686:	4604      	mov	r4, r0
 8012688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801268a:	891b      	ldrh	r3, [r3, #8]
 801268c:	461d      	mov	r5, r3
 801268e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012690:	68db      	ldr	r3, [r3, #12]
 8012692:	899b      	ldrh	r3, [r3, #12]
 8012694:	b29b      	uxth	r3, r3
 8012696:	4618      	mov	r0, r3
 8012698:	f7f8 fe7a 	bl	800b390 <lwip_htons>
 801269c:	4603      	mov	r3, r0
 801269e:	b2db      	uxtb	r3, r3
 80126a0:	f003 0303 	and.w	r3, r3, #3
 80126a4:	2b00      	cmp	r3, #0
 80126a6:	d001      	beq.n	80126ac <tcp_output+0x2a0>
 80126a8:	2301      	movs	r3, #1
 80126aa:	e000      	b.n	80126ae <tcp_output+0x2a2>
 80126ac:	2300      	movs	r3, #0
 80126ae:	442b      	add	r3, r5
 80126b0:	4423      	add	r3, r4
 80126b2:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80126b8:	68bb      	ldr	r3, [r7, #8]
 80126ba:	1ad3      	subs	r3, r2, r3
 80126bc:	2b00      	cmp	r3, #0
 80126be:	da02      	bge.n	80126c6 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	68ba      	ldr	r2, [r7, #8]
 80126c4:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80126c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126c8:	891b      	ldrh	r3, [r3, #8]
 80126ca:	461c      	mov	r4, r3
 80126cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126ce:	68db      	ldr	r3, [r3, #12]
 80126d0:	899b      	ldrh	r3, [r3, #12]
 80126d2:	b29b      	uxth	r3, r3
 80126d4:	4618      	mov	r0, r3
 80126d6:	f7f8 fe5b 	bl	800b390 <lwip_htons>
 80126da:	4603      	mov	r3, r0
 80126dc:	b2db      	uxtb	r3, r3
 80126de:	f003 0303 	and.w	r3, r3, #3
 80126e2:	2b00      	cmp	r3, #0
 80126e4:	d001      	beq.n	80126ea <tcp_output+0x2de>
 80126e6:	2301      	movs	r3, #1
 80126e8:	e000      	b.n	80126ec <tcp_output+0x2e0>
 80126ea:	2300      	movs	r3, #0
 80126ec:	4423      	add	r3, r4
 80126ee:	2b00      	cmp	r3, #0
 80126f0:	d049      	beq.n	8012786 <tcp_output+0x37a>
      seg->next = NULL;
 80126f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126f4:	2200      	movs	r2, #0
 80126f6:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80126fc:	2b00      	cmp	r3, #0
 80126fe:	d105      	bne.n	801270c <tcp_output+0x300>
        pcb->unacked = seg;
 8012700:	687b      	ldr	r3, [r7, #4]
 8012702:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012704:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8012706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012708:	623b      	str	r3, [r7, #32]
 801270a:	e03f      	b.n	801278c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801270c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801270e:	68db      	ldr	r3, [r3, #12]
 8012710:	685b      	ldr	r3, [r3, #4]
 8012712:	4618      	mov	r0, r3
 8012714:	f7f8 fe50 	bl	800b3b8 <lwip_htonl>
 8012718:	4604      	mov	r4, r0
 801271a:	6a3b      	ldr	r3, [r7, #32]
 801271c:	68db      	ldr	r3, [r3, #12]
 801271e:	685b      	ldr	r3, [r3, #4]
 8012720:	4618      	mov	r0, r3
 8012722:	f7f8 fe49 	bl	800b3b8 <lwip_htonl>
 8012726:	4603      	mov	r3, r0
 8012728:	1ae3      	subs	r3, r4, r3
 801272a:	2b00      	cmp	r3, #0
 801272c:	da24      	bge.n	8012778 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801272e:	687b      	ldr	r3, [r7, #4]
 8012730:	3370      	adds	r3, #112	; 0x70
 8012732:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012734:	e002      	b.n	801273c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8012736:	69fb      	ldr	r3, [r7, #28]
 8012738:	681b      	ldr	r3, [r3, #0]
 801273a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801273c:	69fb      	ldr	r3, [r7, #28]
 801273e:	681b      	ldr	r3, [r3, #0]
 8012740:	2b00      	cmp	r3, #0
 8012742:	d011      	beq.n	8012768 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012744:	69fb      	ldr	r3, [r7, #28]
 8012746:	681b      	ldr	r3, [r3, #0]
 8012748:	68db      	ldr	r3, [r3, #12]
 801274a:	685b      	ldr	r3, [r3, #4]
 801274c:	4618      	mov	r0, r3
 801274e:	f7f8 fe33 	bl	800b3b8 <lwip_htonl>
 8012752:	4604      	mov	r4, r0
 8012754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012756:	68db      	ldr	r3, [r3, #12]
 8012758:	685b      	ldr	r3, [r3, #4]
 801275a:	4618      	mov	r0, r3
 801275c:	f7f8 fe2c 	bl	800b3b8 <lwip_htonl>
 8012760:	4603      	mov	r3, r0
 8012762:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8012764:	2b00      	cmp	r3, #0
 8012766:	dbe6      	blt.n	8012736 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8012768:	69fb      	ldr	r3, [r7, #28]
 801276a:	681a      	ldr	r2, [r3, #0]
 801276c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801276e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8012770:	69fb      	ldr	r3, [r7, #28]
 8012772:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012774:	601a      	str	r2, [r3, #0]
 8012776:	e009      	b.n	801278c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8012778:	6a3b      	ldr	r3, [r7, #32]
 801277a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801277c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801277e:	6a3b      	ldr	r3, [r7, #32]
 8012780:	681b      	ldr	r3, [r3, #0]
 8012782:	623b      	str	r3, [r7, #32]
 8012784:	e002      	b.n	801278c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8012786:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012788:	f7fb ff33 	bl	800e5f2 <tcp_seg_free>
    }
    seg = pcb->unsent;
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012790:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8012792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012794:	2b00      	cmp	r3, #0
 8012796:	d012      	beq.n	80127be <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8012798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801279a:	68db      	ldr	r3, [r3, #12]
 801279c:	685b      	ldr	r3, [r3, #4]
 801279e:	4618      	mov	r0, r3
 80127a0:	f7f8 fe0a 	bl	800b3b8 <lwip_htonl>
 80127a4:	4602      	mov	r2, r0
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80127aa:	1ad3      	subs	r3, r2, r3
 80127ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80127ae:	8912      	ldrh	r2, [r2, #8]
 80127b0:	4413      	add	r3, r2
  while (seg != NULL &&
 80127b2:	69ba      	ldr	r2, [r7, #24]
 80127b4:	429a      	cmp	r2, r3
 80127b6:	f4bf aed9 	bcs.w	801256c <tcp_output+0x160>
 80127ba:	e000      	b.n	80127be <tcp_output+0x3b2>
      break;
 80127bc:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80127c2:	2b00      	cmp	r3, #0
 80127c4:	d108      	bne.n	80127d8 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80127c6:	687b      	ldr	r3, [r7, #4]
 80127c8:	2200      	movs	r2, #0
 80127ca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80127ce:	e004      	b.n	80127da <tcp_output+0x3ce>
    goto output_done;
 80127d0:	bf00      	nop
 80127d2:	e002      	b.n	80127da <tcp_output+0x3ce>
    goto output_done;
 80127d4:	bf00      	nop
 80127d6:	e000      	b.n	80127da <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80127d8:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	8b5b      	ldrh	r3, [r3, #26]
 80127de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80127e2:	b29a      	uxth	r2, r3
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80127e8:	2300      	movs	r3, #0
}
 80127ea:	4618      	mov	r0, r3
 80127ec:	3728      	adds	r7, #40	; 0x28
 80127ee:	46bd      	mov	sp, r7
 80127f0:	bdb0      	pop	{r4, r5, r7, pc}
 80127f2:	bf00      	nop

080127f4 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80127f4:	b580      	push	{r7, lr}
 80127f6:	b082      	sub	sp, #8
 80127f8:	af00      	add	r7, sp, #0
 80127fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80127fc:	687b      	ldr	r3, [r7, #4]
 80127fe:	2b00      	cmp	r3, #0
 8012800:	d106      	bne.n	8012810 <tcp_output_segment_busy+0x1c>
 8012802:	4b09      	ldr	r3, [pc, #36]	; (8012828 <tcp_output_segment_busy+0x34>)
 8012804:	f240 529a 	movw	r2, #1434	; 0x59a
 8012808:	4908      	ldr	r1, [pc, #32]	; (801282c <tcp_output_segment_busy+0x38>)
 801280a:	4809      	ldr	r0, [pc, #36]	; (8012830 <tcp_output_segment_busy+0x3c>)
 801280c:	f004 fa38 	bl	8016c80 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8012810:	687b      	ldr	r3, [r7, #4]
 8012812:	685b      	ldr	r3, [r3, #4]
 8012814:	7b9b      	ldrb	r3, [r3, #14]
 8012816:	2b01      	cmp	r3, #1
 8012818:	d001      	beq.n	801281e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801281a:	2301      	movs	r3, #1
 801281c:	e000      	b.n	8012820 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801281e:	2300      	movs	r3, #0
}
 8012820:	4618      	mov	r0, r3
 8012822:	3708      	adds	r7, #8
 8012824:	46bd      	mov	sp, r7
 8012826:	bd80      	pop	{r7, pc}
 8012828:	080197f4 	.word	0x080197f4
 801282c:	08019d90 	.word	0x08019d90
 8012830:	08019848 	.word	0x08019848

08012834 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8012834:	b5b0      	push	{r4, r5, r7, lr}
 8012836:	b08c      	sub	sp, #48	; 0x30
 8012838:	af04      	add	r7, sp, #16
 801283a:	60f8      	str	r0, [r7, #12]
 801283c:	60b9      	str	r1, [r7, #8]
 801283e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8012840:	68fb      	ldr	r3, [r7, #12]
 8012842:	2b00      	cmp	r3, #0
 8012844:	d106      	bne.n	8012854 <tcp_output_segment+0x20>
 8012846:	4b63      	ldr	r3, [pc, #396]	; (80129d4 <tcp_output_segment+0x1a0>)
 8012848:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 801284c:	4962      	ldr	r1, [pc, #392]	; (80129d8 <tcp_output_segment+0x1a4>)
 801284e:	4863      	ldr	r0, [pc, #396]	; (80129dc <tcp_output_segment+0x1a8>)
 8012850:	f004 fa16 	bl	8016c80 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8012854:	68bb      	ldr	r3, [r7, #8]
 8012856:	2b00      	cmp	r3, #0
 8012858:	d106      	bne.n	8012868 <tcp_output_segment+0x34>
 801285a:	4b5e      	ldr	r3, [pc, #376]	; (80129d4 <tcp_output_segment+0x1a0>)
 801285c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8012860:	495f      	ldr	r1, [pc, #380]	; (80129e0 <tcp_output_segment+0x1ac>)
 8012862:	485e      	ldr	r0, [pc, #376]	; (80129dc <tcp_output_segment+0x1a8>)
 8012864:	f004 fa0c 	bl	8016c80 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	2b00      	cmp	r3, #0
 801286c:	d106      	bne.n	801287c <tcp_output_segment+0x48>
 801286e:	4b59      	ldr	r3, [pc, #356]	; (80129d4 <tcp_output_segment+0x1a0>)
 8012870:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8012874:	495b      	ldr	r1, [pc, #364]	; (80129e4 <tcp_output_segment+0x1b0>)
 8012876:	4859      	ldr	r0, [pc, #356]	; (80129dc <tcp_output_segment+0x1a8>)
 8012878:	f004 fa02 	bl	8016c80 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801287c:	68f8      	ldr	r0, [r7, #12]
 801287e:	f7ff ffb9 	bl	80127f4 <tcp_output_segment_busy>
 8012882:	4603      	mov	r3, r0
 8012884:	2b00      	cmp	r3, #0
 8012886:	d001      	beq.n	801288c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8012888:	2300      	movs	r3, #0
 801288a:	e09f      	b.n	80129cc <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801288c:	68bb      	ldr	r3, [r7, #8]
 801288e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012890:	68fb      	ldr	r3, [r7, #12]
 8012892:	68dc      	ldr	r4, [r3, #12]
 8012894:	4610      	mov	r0, r2
 8012896:	f7f8 fd8f 	bl	800b3b8 <lwip_htonl>
 801289a:	4603      	mov	r3, r0
 801289c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801289e:	68bb      	ldr	r3, [r7, #8]
 80128a0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80128a2:	68fb      	ldr	r3, [r7, #12]
 80128a4:	68dc      	ldr	r4, [r3, #12]
 80128a6:	4610      	mov	r0, r2
 80128a8:	f7f8 fd72 	bl	800b390 <lwip_htons>
 80128ac:	4603      	mov	r3, r0
 80128ae:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80128b0:	68bb      	ldr	r3, [r7, #8]
 80128b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80128b4:	68ba      	ldr	r2, [r7, #8]
 80128b6:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80128b8:	441a      	add	r2, r3
 80128ba:	68bb      	ldr	r3, [r7, #8]
 80128bc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80128be:	68fb      	ldr	r3, [r7, #12]
 80128c0:	68db      	ldr	r3, [r3, #12]
 80128c2:	3314      	adds	r3, #20
 80128c4:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80128c6:	68fb      	ldr	r3, [r7, #12]
 80128c8:	7a9b      	ldrb	r3, [r3, #10]
 80128ca:	f003 0301 	and.w	r3, r3, #1
 80128ce:	2b00      	cmp	r3, #0
 80128d0:	d015      	beq.n	80128fe <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80128d2:	68bb      	ldr	r3, [r7, #8]
 80128d4:	3304      	adds	r3, #4
 80128d6:	461a      	mov	r2, r3
 80128d8:	6879      	ldr	r1, [r7, #4]
 80128da:	f44f 7006 	mov.w	r0, #536	; 0x218
 80128de:	f7fc fa33 	bl	800ed48 <tcp_eff_send_mss_netif>
 80128e2:	4603      	mov	r3, r0
 80128e4:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80128e6:	8b7b      	ldrh	r3, [r7, #26]
 80128e8:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 80128ec:	4618      	mov	r0, r3
 80128ee:	f7f8 fd63 	bl	800b3b8 <lwip_htonl>
 80128f2:	4602      	mov	r2, r0
 80128f4:	69fb      	ldr	r3, [r7, #28]
 80128f6:	601a      	str	r2, [r3, #0]
    opts += 1;
 80128f8:	69fb      	ldr	r3, [r7, #28]
 80128fa:	3304      	adds	r3, #4
 80128fc:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80128fe:	68bb      	ldr	r3, [r7, #8]
 8012900:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8012904:	2b00      	cmp	r3, #0
 8012906:	da02      	bge.n	801290e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8012908:	68bb      	ldr	r3, [r7, #8]
 801290a:	2200      	movs	r2, #0
 801290c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801290e:	68bb      	ldr	r3, [r7, #8]
 8012910:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012912:	2b00      	cmp	r3, #0
 8012914:	d10c      	bne.n	8012930 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8012916:	4b34      	ldr	r3, [pc, #208]	; (80129e8 <tcp_output_segment+0x1b4>)
 8012918:	681a      	ldr	r2, [r3, #0]
 801291a:	68bb      	ldr	r3, [r7, #8]
 801291c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801291e:	68fb      	ldr	r3, [r7, #12]
 8012920:	68db      	ldr	r3, [r3, #12]
 8012922:	685b      	ldr	r3, [r3, #4]
 8012924:	4618      	mov	r0, r3
 8012926:	f7f8 fd47 	bl	800b3b8 <lwip_htonl>
 801292a:	4602      	mov	r2, r0
 801292c:	68bb      	ldr	r3, [r7, #8]
 801292e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8012930:	68fb      	ldr	r3, [r7, #12]
 8012932:	68da      	ldr	r2, [r3, #12]
 8012934:	68fb      	ldr	r3, [r7, #12]
 8012936:	685b      	ldr	r3, [r3, #4]
 8012938:	685b      	ldr	r3, [r3, #4]
 801293a:	1ad3      	subs	r3, r2, r3
 801293c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801293e:	68fb      	ldr	r3, [r7, #12]
 8012940:	685b      	ldr	r3, [r3, #4]
 8012942:	8959      	ldrh	r1, [r3, #10]
 8012944:	68fb      	ldr	r3, [r7, #12]
 8012946:	685b      	ldr	r3, [r3, #4]
 8012948:	8b3a      	ldrh	r2, [r7, #24]
 801294a:	1a8a      	subs	r2, r1, r2
 801294c:	b292      	uxth	r2, r2
 801294e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8012950:	68fb      	ldr	r3, [r7, #12]
 8012952:	685b      	ldr	r3, [r3, #4]
 8012954:	8919      	ldrh	r1, [r3, #8]
 8012956:	68fb      	ldr	r3, [r7, #12]
 8012958:	685b      	ldr	r3, [r3, #4]
 801295a:	8b3a      	ldrh	r2, [r7, #24]
 801295c:	1a8a      	subs	r2, r1, r2
 801295e:	b292      	uxth	r2, r2
 8012960:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8012962:	68fb      	ldr	r3, [r7, #12]
 8012964:	685b      	ldr	r3, [r3, #4]
 8012966:	68fa      	ldr	r2, [r7, #12]
 8012968:	68d2      	ldr	r2, [r2, #12]
 801296a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801296c:	68fb      	ldr	r3, [r7, #12]
 801296e:	68db      	ldr	r3, [r3, #12]
 8012970:	2200      	movs	r2, #0
 8012972:	741a      	strb	r2, [r3, #16]
 8012974:	2200      	movs	r2, #0
 8012976:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8012978:	68fb      	ldr	r3, [r7, #12]
 801297a:	68db      	ldr	r3, [r3, #12]
 801297c:	f103 0214 	add.w	r2, r3, #20
 8012980:	68fb      	ldr	r3, [r7, #12]
 8012982:	7a9b      	ldrb	r3, [r3, #10]
 8012984:	009b      	lsls	r3, r3, #2
 8012986:	f003 0304 	and.w	r3, r3, #4
 801298a:	4413      	add	r3, r2
 801298c:	69fa      	ldr	r2, [r7, #28]
 801298e:	429a      	cmp	r2, r3
 8012990:	d006      	beq.n	80129a0 <tcp_output_segment+0x16c>
 8012992:	4b10      	ldr	r3, [pc, #64]	; (80129d4 <tcp_output_segment+0x1a0>)
 8012994:	f240 621c 	movw	r2, #1564	; 0x61c
 8012998:	4914      	ldr	r1, [pc, #80]	; (80129ec <tcp_output_segment+0x1b8>)
 801299a:	4810      	ldr	r0, [pc, #64]	; (80129dc <tcp_output_segment+0x1a8>)
 801299c:	f004 f970 	bl	8016c80 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80129a0:	68fb      	ldr	r3, [r7, #12]
 80129a2:	6858      	ldr	r0, [r3, #4]
 80129a4:	68b9      	ldr	r1, [r7, #8]
 80129a6:	68bb      	ldr	r3, [r7, #8]
 80129a8:	1d1c      	adds	r4, r3, #4
 80129aa:	68bb      	ldr	r3, [r7, #8]
 80129ac:	7add      	ldrb	r5, [r3, #11]
 80129ae:	68bb      	ldr	r3, [r7, #8]
 80129b0:	7a9b      	ldrb	r3, [r3, #10]
 80129b2:	687a      	ldr	r2, [r7, #4]
 80129b4:	9202      	str	r2, [sp, #8]
 80129b6:	2206      	movs	r2, #6
 80129b8:	9201      	str	r2, [sp, #4]
 80129ba:	9300      	str	r3, [sp, #0]
 80129bc:	462b      	mov	r3, r5
 80129be:	4622      	mov	r2, r4
 80129c0:	f002 fac2 	bl	8014f48 <ip4_output_if>
 80129c4:	4603      	mov	r3, r0
 80129c6:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 80129c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80129cc:	4618      	mov	r0, r3
 80129ce:	3720      	adds	r7, #32
 80129d0:	46bd      	mov	sp, r7
 80129d2:	bdb0      	pop	{r4, r5, r7, pc}
 80129d4:	080197f4 	.word	0x080197f4
 80129d8:	08019db8 	.word	0x08019db8
 80129dc:	08019848 	.word	0x08019848
 80129e0:	08019dd8 	.word	0x08019dd8
 80129e4:	08019df8 	.word	0x08019df8
 80129e8:	2000be10 	.word	0x2000be10
 80129ec:	08019e1c 	.word	0x08019e1c

080129f0 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80129f0:	b5b0      	push	{r4, r5, r7, lr}
 80129f2:	b084      	sub	sp, #16
 80129f4:	af00      	add	r7, sp, #0
 80129f6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	2b00      	cmp	r3, #0
 80129fc:	d106      	bne.n	8012a0c <tcp_rexmit_rto_prepare+0x1c>
 80129fe:	4b31      	ldr	r3, [pc, #196]	; (8012ac4 <tcp_rexmit_rto_prepare+0xd4>)
 8012a00:	f240 6263 	movw	r2, #1635	; 0x663
 8012a04:	4930      	ldr	r1, [pc, #192]	; (8012ac8 <tcp_rexmit_rto_prepare+0xd8>)
 8012a06:	4831      	ldr	r0, [pc, #196]	; (8012acc <tcp_rexmit_rto_prepare+0xdc>)
 8012a08:	f004 f93a 	bl	8016c80 <iprintf>

  if (pcb->unacked == NULL) {
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012a10:	2b00      	cmp	r3, #0
 8012a12:	d102      	bne.n	8012a1a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8012a14:	f06f 0305 	mvn.w	r3, #5
 8012a18:	e050      	b.n	8012abc <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012a1e:	60fb      	str	r3, [r7, #12]
 8012a20:	e00b      	b.n	8012a3a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8012a22:	68f8      	ldr	r0, [r7, #12]
 8012a24:	f7ff fee6 	bl	80127f4 <tcp_output_segment_busy>
 8012a28:	4603      	mov	r3, r0
 8012a2a:	2b00      	cmp	r3, #0
 8012a2c:	d002      	beq.n	8012a34 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8012a2e:	f06f 0305 	mvn.w	r3, #5
 8012a32:	e043      	b.n	8012abc <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8012a34:	68fb      	ldr	r3, [r7, #12]
 8012a36:	681b      	ldr	r3, [r3, #0]
 8012a38:	60fb      	str	r3, [r7, #12]
 8012a3a:	68fb      	ldr	r3, [r7, #12]
 8012a3c:	681b      	ldr	r3, [r3, #0]
 8012a3e:	2b00      	cmp	r3, #0
 8012a40:	d1ef      	bne.n	8012a22 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8012a42:	68f8      	ldr	r0, [r7, #12]
 8012a44:	f7ff fed6 	bl	80127f4 <tcp_output_segment_busy>
 8012a48:	4603      	mov	r3, r0
 8012a4a:	2b00      	cmp	r3, #0
 8012a4c:	d002      	beq.n	8012a54 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8012a4e:	f06f 0305 	mvn.w	r3, #5
 8012a52:	e033      	b.n	8012abc <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8012a58:	68fb      	ldr	r3, [r7, #12]
 8012a5a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	2200      	movs	r2, #0
 8012a68:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8012a6a:	687b      	ldr	r3, [r7, #4]
 8012a6c:	8b5b      	ldrh	r3, [r3, #26]
 8012a6e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8012a72:	b29a      	uxth	r2, r3
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8012a78:	68fb      	ldr	r3, [r7, #12]
 8012a7a:	68db      	ldr	r3, [r3, #12]
 8012a7c:	685b      	ldr	r3, [r3, #4]
 8012a7e:	4618      	mov	r0, r3
 8012a80:	f7f8 fc9a 	bl	800b3b8 <lwip_htonl>
 8012a84:	4604      	mov	r4, r0
 8012a86:	68fb      	ldr	r3, [r7, #12]
 8012a88:	891b      	ldrh	r3, [r3, #8]
 8012a8a:	461d      	mov	r5, r3
 8012a8c:	68fb      	ldr	r3, [r7, #12]
 8012a8e:	68db      	ldr	r3, [r3, #12]
 8012a90:	899b      	ldrh	r3, [r3, #12]
 8012a92:	b29b      	uxth	r3, r3
 8012a94:	4618      	mov	r0, r3
 8012a96:	f7f8 fc7b 	bl	800b390 <lwip_htons>
 8012a9a:	4603      	mov	r3, r0
 8012a9c:	b2db      	uxtb	r3, r3
 8012a9e:	f003 0303 	and.w	r3, r3, #3
 8012aa2:	2b00      	cmp	r3, #0
 8012aa4:	d001      	beq.n	8012aaa <tcp_rexmit_rto_prepare+0xba>
 8012aa6:	2301      	movs	r3, #1
 8012aa8:	e000      	b.n	8012aac <tcp_rexmit_rto_prepare+0xbc>
 8012aaa:	2300      	movs	r3, #0
 8012aac:	442b      	add	r3, r5
 8012aae:	18e2      	adds	r2, r4, r3
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	2200      	movs	r2, #0
 8012ab8:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8012aba:	2300      	movs	r3, #0
}
 8012abc:	4618      	mov	r0, r3
 8012abe:	3710      	adds	r7, #16
 8012ac0:	46bd      	mov	sp, r7
 8012ac2:	bdb0      	pop	{r4, r5, r7, pc}
 8012ac4:	080197f4 	.word	0x080197f4
 8012ac8:	08019e30 	.word	0x08019e30
 8012acc:	08019848 	.word	0x08019848

08012ad0 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8012ad0:	b580      	push	{r7, lr}
 8012ad2:	b082      	sub	sp, #8
 8012ad4:	af00      	add	r7, sp, #0
 8012ad6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8012ad8:	687b      	ldr	r3, [r7, #4]
 8012ada:	2b00      	cmp	r3, #0
 8012adc:	d106      	bne.n	8012aec <tcp_rexmit_rto_commit+0x1c>
 8012ade:	4b0d      	ldr	r3, [pc, #52]	; (8012b14 <tcp_rexmit_rto_commit+0x44>)
 8012ae0:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8012ae4:	490c      	ldr	r1, [pc, #48]	; (8012b18 <tcp_rexmit_rto_commit+0x48>)
 8012ae6:	480d      	ldr	r0, [pc, #52]	; (8012b1c <tcp_rexmit_rto_commit+0x4c>)
 8012ae8:	f004 f8ca 	bl	8016c80 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8012aec:	687b      	ldr	r3, [r7, #4]
 8012aee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012af2:	2bff      	cmp	r3, #255	; 0xff
 8012af4:	d007      	beq.n	8012b06 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012afc:	3301      	adds	r3, #1
 8012afe:	b2da      	uxtb	r2, r3
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8012b06:	6878      	ldr	r0, [r7, #4]
 8012b08:	f7ff fc80 	bl	801240c <tcp_output>
}
 8012b0c:	bf00      	nop
 8012b0e:	3708      	adds	r7, #8
 8012b10:	46bd      	mov	sp, r7
 8012b12:	bd80      	pop	{r7, pc}
 8012b14:	080197f4 	.word	0x080197f4
 8012b18:	08019e54 	.word	0x08019e54
 8012b1c:	08019848 	.word	0x08019848

08012b20 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8012b20:	b580      	push	{r7, lr}
 8012b22:	b082      	sub	sp, #8
 8012b24:	af00      	add	r7, sp, #0
 8012b26:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8012b28:	687b      	ldr	r3, [r7, #4]
 8012b2a:	2b00      	cmp	r3, #0
 8012b2c:	d106      	bne.n	8012b3c <tcp_rexmit_rto+0x1c>
 8012b2e:	4b0a      	ldr	r3, [pc, #40]	; (8012b58 <tcp_rexmit_rto+0x38>)
 8012b30:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8012b34:	4909      	ldr	r1, [pc, #36]	; (8012b5c <tcp_rexmit_rto+0x3c>)
 8012b36:	480a      	ldr	r0, [pc, #40]	; (8012b60 <tcp_rexmit_rto+0x40>)
 8012b38:	f004 f8a2 	bl	8016c80 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8012b3c:	6878      	ldr	r0, [r7, #4]
 8012b3e:	f7ff ff57 	bl	80129f0 <tcp_rexmit_rto_prepare>
 8012b42:	4603      	mov	r3, r0
 8012b44:	2b00      	cmp	r3, #0
 8012b46:	d102      	bne.n	8012b4e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8012b48:	6878      	ldr	r0, [r7, #4]
 8012b4a:	f7ff ffc1 	bl	8012ad0 <tcp_rexmit_rto_commit>
  }
}
 8012b4e:	bf00      	nop
 8012b50:	3708      	adds	r7, #8
 8012b52:	46bd      	mov	sp, r7
 8012b54:	bd80      	pop	{r7, pc}
 8012b56:	bf00      	nop
 8012b58:	080197f4 	.word	0x080197f4
 8012b5c:	08019e78 	.word	0x08019e78
 8012b60:	08019848 	.word	0x08019848

08012b64 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8012b64:	b590      	push	{r4, r7, lr}
 8012b66:	b085      	sub	sp, #20
 8012b68:	af00      	add	r7, sp, #0
 8012b6a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8012b6c:	687b      	ldr	r3, [r7, #4]
 8012b6e:	2b00      	cmp	r3, #0
 8012b70:	d106      	bne.n	8012b80 <tcp_rexmit+0x1c>
 8012b72:	4b2f      	ldr	r3, [pc, #188]	; (8012c30 <tcp_rexmit+0xcc>)
 8012b74:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8012b78:	492e      	ldr	r1, [pc, #184]	; (8012c34 <tcp_rexmit+0xd0>)
 8012b7a:	482f      	ldr	r0, [pc, #188]	; (8012c38 <tcp_rexmit+0xd4>)
 8012b7c:	f004 f880 	bl	8016c80 <iprintf>

  if (pcb->unacked == NULL) {
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012b84:	2b00      	cmp	r3, #0
 8012b86:	d102      	bne.n	8012b8e <tcp_rexmit+0x2a>
    return ERR_VAL;
 8012b88:	f06f 0305 	mvn.w	r3, #5
 8012b8c:	e04c      	b.n	8012c28 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8012b8e:	687b      	ldr	r3, [r7, #4]
 8012b90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012b92:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8012b94:	68b8      	ldr	r0, [r7, #8]
 8012b96:	f7ff fe2d 	bl	80127f4 <tcp_output_segment_busy>
 8012b9a:	4603      	mov	r3, r0
 8012b9c:	2b00      	cmp	r3, #0
 8012b9e:	d002      	beq.n	8012ba6 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8012ba0:	f06f 0305 	mvn.w	r3, #5
 8012ba4:	e040      	b.n	8012c28 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8012ba6:	68bb      	ldr	r3, [r7, #8]
 8012ba8:	681a      	ldr	r2, [r3, #0]
 8012baa:	687b      	ldr	r3, [r7, #4]
 8012bac:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	336c      	adds	r3, #108	; 0x6c
 8012bb2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012bb4:	e002      	b.n	8012bbc <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8012bb6:	68fb      	ldr	r3, [r7, #12]
 8012bb8:	681b      	ldr	r3, [r3, #0]
 8012bba:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012bbc:	68fb      	ldr	r3, [r7, #12]
 8012bbe:	681b      	ldr	r3, [r3, #0]
 8012bc0:	2b00      	cmp	r3, #0
 8012bc2:	d011      	beq.n	8012be8 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012bc4:	68fb      	ldr	r3, [r7, #12]
 8012bc6:	681b      	ldr	r3, [r3, #0]
 8012bc8:	68db      	ldr	r3, [r3, #12]
 8012bca:	685b      	ldr	r3, [r3, #4]
 8012bcc:	4618      	mov	r0, r3
 8012bce:	f7f8 fbf3 	bl	800b3b8 <lwip_htonl>
 8012bd2:	4604      	mov	r4, r0
 8012bd4:	68bb      	ldr	r3, [r7, #8]
 8012bd6:	68db      	ldr	r3, [r3, #12]
 8012bd8:	685b      	ldr	r3, [r3, #4]
 8012bda:	4618      	mov	r0, r3
 8012bdc:	f7f8 fbec 	bl	800b3b8 <lwip_htonl>
 8012be0:	4603      	mov	r3, r0
 8012be2:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8012be4:	2b00      	cmp	r3, #0
 8012be6:	dbe6      	blt.n	8012bb6 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8012be8:	68fb      	ldr	r3, [r7, #12]
 8012bea:	681a      	ldr	r2, [r3, #0]
 8012bec:	68bb      	ldr	r3, [r7, #8]
 8012bee:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8012bf0:	68fb      	ldr	r3, [r7, #12]
 8012bf2:	68ba      	ldr	r2, [r7, #8]
 8012bf4:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8012bf6:	68bb      	ldr	r3, [r7, #8]
 8012bf8:	681b      	ldr	r3, [r3, #0]
 8012bfa:	2b00      	cmp	r3, #0
 8012bfc:	d103      	bne.n	8012c06 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	2200      	movs	r2, #0
 8012c02:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8012c06:	687b      	ldr	r3, [r7, #4]
 8012c08:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012c0c:	2bff      	cmp	r3, #255	; 0xff
 8012c0e:	d007      	beq.n	8012c20 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012c16:	3301      	adds	r3, #1
 8012c18:	b2da      	uxtb	r2, r3
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	2200      	movs	r2, #0
 8012c24:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8012c26:	2300      	movs	r3, #0
}
 8012c28:	4618      	mov	r0, r3
 8012c2a:	3714      	adds	r7, #20
 8012c2c:	46bd      	mov	sp, r7
 8012c2e:	bd90      	pop	{r4, r7, pc}
 8012c30:	080197f4 	.word	0x080197f4
 8012c34:	08019e94 	.word	0x08019e94
 8012c38:	08019848 	.word	0x08019848

08012c3c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8012c3c:	b580      	push	{r7, lr}
 8012c3e:	b082      	sub	sp, #8
 8012c40:	af00      	add	r7, sp, #0
 8012c42:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	2b00      	cmp	r3, #0
 8012c48:	d106      	bne.n	8012c58 <tcp_rexmit_fast+0x1c>
 8012c4a:	4b2a      	ldr	r3, [pc, #168]	; (8012cf4 <tcp_rexmit_fast+0xb8>)
 8012c4c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8012c50:	4929      	ldr	r1, [pc, #164]	; (8012cf8 <tcp_rexmit_fast+0xbc>)
 8012c52:	482a      	ldr	r0, [pc, #168]	; (8012cfc <tcp_rexmit_fast+0xc0>)
 8012c54:	f004 f814 	bl	8016c80 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8012c58:	687b      	ldr	r3, [r7, #4]
 8012c5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012c5c:	2b00      	cmp	r3, #0
 8012c5e:	d044      	beq.n	8012cea <tcp_rexmit_fast+0xae>
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	8b5b      	ldrh	r3, [r3, #26]
 8012c64:	f003 0304 	and.w	r3, r3, #4
 8012c68:	2b00      	cmp	r3, #0
 8012c6a:	d13e      	bne.n	8012cea <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8012c6c:	6878      	ldr	r0, [r7, #4]
 8012c6e:	f7ff ff79 	bl	8012b64 <tcp_rexmit>
 8012c72:	4603      	mov	r3, r0
 8012c74:	2b00      	cmp	r3, #0
 8012c76:	d138      	bne.n	8012cea <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8012c78:	687b      	ldr	r3, [r7, #4]
 8012c7a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8012c7e:	687b      	ldr	r3, [r7, #4]
 8012c80:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012c84:	4293      	cmp	r3, r2
 8012c86:	bf28      	it	cs
 8012c88:	4613      	movcs	r3, r2
 8012c8a:	b29b      	uxth	r3, r3
 8012c8c:	0fda      	lsrs	r2, r3, #31
 8012c8e:	4413      	add	r3, r2
 8012c90:	105b      	asrs	r3, r3, #1
 8012c92:	b29a      	uxth	r2, r3
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8012ca0:	461a      	mov	r2, r3
 8012ca2:	687b      	ldr	r3, [r7, #4]
 8012ca4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012ca6:	005b      	lsls	r3, r3, #1
 8012ca8:	429a      	cmp	r2, r3
 8012caa:	d206      	bcs.n	8012cba <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012cb0:	005b      	lsls	r3, r3, #1
 8012cb2:	b29a      	uxth	r2, r3
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8012cc0:	687b      	ldr	r3, [r7, #4]
 8012cc2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012cc4:	4619      	mov	r1, r3
 8012cc6:	0049      	lsls	r1, r1, #1
 8012cc8:	440b      	add	r3, r1
 8012cca:	b29b      	uxth	r3, r3
 8012ccc:	4413      	add	r3, r2
 8012cce:	b29a      	uxth	r2, r3
 8012cd0:	687b      	ldr	r3, [r7, #4]
 8012cd2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8012cd6:	687b      	ldr	r3, [r7, #4]
 8012cd8:	8b5b      	ldrh	r3, [r3, #26]
 8012cda:	f043 0304 	orr.w	r3, r3, #4
 8012cde:	b29a      	uxth	r2, r3
 8012ce0:	687b      	ldr	r3, [r7, #4]
 8012ce2:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8012ce4:	687b      	ldr	r3, [r7, #4]
 8012ce6:	2200      	movs	r2, #0
 8012ce8:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8012cea:	bf00      	nop
 8012cec:	3708      	adds	r7, #8
 8012cee:	46bd      	mov	sp, r7
 8012cf0:	bd80      	pop	{r7, pc}
 8012cf2:	bf00      	nop
 8012cf4:	080197f4 	.word	0x080197f4
 8012cf8:	08019eac 	.word	0x08019eac
 8012cfc:	08019848 	.word	0x08019848

08012d00 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8012d00:	b580      	push	{r7, lr}
 8012d02:	b086      	sub	sp, #24
 8012d04:	af00      	add	r7, sp, #0
 8012d06:	60f8      	str	r0, [r7, #12]
 8012d08:	607b      	str	r3, [r7, #4]
 8012d0a:	460b      	mov	r3, r1
 8012d0c:	817b      	strh	r3, [r7, #10]
 8012d0e:	4613      	mov	r3, r2
 8012d10:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8012d12:	897a      	ldrh	r2, [r7, #10]
 8012d14:	893b      	ldrh	r3, [r7, #8]
 8012d16:	4413      	add	r3, r2
 8012d18:	b29b      	uxth	r3, r3
 8012d1a:	3314      	adds	r3, #20
 8012d1c:	b29b      	uxth	r3, r3
 8012d1e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012d22:	4619      	mov	r1, r3
 8012d24:	2022      	movs	r0, #34	; 0x22
 8012d26:	f7f9 fcab 	bl	800c680 <pbuf_alloc>
 8012d2a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8012d2c:	697b      	ldr	r3, [r7, #20]
 8012d2e:	2b00      	cmp	r3, #0
 8012d30:	d04d      	beq.n	8012dce <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8012d32:	897b      	ldrh	r3, [r7, #10]
 8012d34:	3313      	adds	r3, #19
 8012d36:	697a      	ldr	r2, [r7, #20]
 8012d38:	8952      	ldrh	r2, [r2, #10]
 8012d3a:	4293      	cmp	r3, r2
 8012d3c:	db06      	blt.n	8012d4c <tcp_output_alloc_header_common+0x4c>
 8012d3e:	4b26      	ldr	r3, [pc, #152]	; (8012dd8 <tcp_output_alloc_header_common+0xd8>)
 8012d40:	f240 7223 	movw	r2, #1827	; 0x723
 8012d44:	4925      	ldr	r1, [pc, #148]	; (8012ddc <tcp_output_alloc_header_common+0xdc>)
 8012d46:	4826      	ldr	r0, [pc, #152]	; (8012de0 <tcp_output_alloc_header_common+0xe0>)
 8012d48:	f003 ff9a 	bl	8016c80 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8012d4c:	697b      	ldr	r3, [r7, #20]
 8012d4e:	685b      	ldr	r3, [r3, #4]
 8012d50:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8012d52:	8c3b      	ldrh	r3, [r7, #32]
 8012d54:	4618      	mov	r0, r3
 8012d56:	f7f8 fb1b 	bl	800b390 <lwip_htons>
 8012d5a:	4603      	mov	r3, r0
 8012d5c:	461a      	mov	r2, r3
 8012d5e:	693b      	ldr	r3, [r7, #16]
 8012d60:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8012d62:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012d64:	4618      	mov	r0, r3
 8012d66:	f7f8 fb13 	bl	800b390 <lwip_htons>
 8012d6a:	4603      	mov	r3, r0
 8012d6c:	461a      	mov	r2, r3
 8012d6e:	693b      	ldr	r3, [r7, #16]
 8012d70:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8012d72:	693b      	ldr	r3, [r7, #16]
 8012d74:	687a      	ldr	r2, [r7, #4]
 8012d76:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8012d78:	68f8      	ldr	r0, [r7, #12]
 8012d7a:	f7f8 fb1d 	bl	800b3b8 <lwip_htonl>
 8012d7e:	4602      	mov	r2, r0
 8012d80:	693b      	ldr	r3, [r7, #16]
 8012d82:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8012d84:	897b      	ldrh	r3, [r7, #10]
 8012d86:	089b      	lsrs	r3, r3, #2
 8012d88:	b29b      	uxth	r3, r3
 8012d8a:	3305      	adds	r3, #5
 8012d8c:	b29b      	uxth	r3, r3
 8012d8e:	031b      	lsls	r3, r3, #12
 8012d90:	b29a      	uxth	r2, r3
 8012d92:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012d96:	b29b      	uxth	r3, r3
 8012d98:	4313      	orrs	r3, r2
 8012d9a:	b29b      	uxth	r3, r3
 8012d9c:	4618      	mov	r0, r3
 8012d9e:	f7f8 faf7 	bl	800b390 <lwip_htons>
 8012da2:	4603      	mov	r3, r0
 8012da4:	461a      	mov	r2, r3
 8012da6:	693b      	ldr	r3, [r7, #16]
 8012da8:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8012daa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8012dac:	4618      	mov	r0, r3
 8012dae:	f7f8 faef 	bl	800b390 <lwip_htons>
 8012db2:	4603      	mov	r3, r0
 8012db4:	461a      	mov	r2, r3
 8012db6:	693b      	ldr	r3, [r7, #16]
 8012db8:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8012dba:	693b      	ldr	r3, [r7, #16]
 8012dbc:	2200      	movs	r2, #0
 8012dbe:	741a      	strb	r2, [r3, #16]
 8012dc0:	2200      	movs	r2, #0
 8012dc2:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8012dc4:	693b      	ldr	r3, [r7, #16]
 8012dc6:	2200      	movs	r2, #0
 8012dc8:	749a      	strb	r2, [r3, #18]
 8012dca:	2200      	movs	r2, #0
 8012dcc:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8012dce:	697b      	ldr	r3, [r7, #20]
}
 8012dd0:	4618      	mov	r0, r3
 8012dd2:	3718      	adds	r7, #24
 8012dd4:	46bd      	mov	sp, r7
 8012dd6:	bd80      	pop	{r7, pc}
 8012dd8:	080197f4 	.word	0x080197f4
 8012ddc:	08019ecc 	.word	0x08019ecc
 8012de0:	08019848 	.word	0x08019848

08012de4 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8012de4:	b5b0      	push	{r4, r5, r7, lr}
 8012de6:	b08a      	sub	sp, #40	; 0x28
 8012de8:	af04      	add	r7, sp, #16
 8012dea:	60f8      	str	r0, [r7, #12]
 8012dec:	607b      	str	r3, [r7, #4]
 8012dee:	460b      	mov	r3, r1
 8012df0:	817b      	strh	r3, [r7, #10]
 8012df2:	4613      	mov	r3, r2
 8012df4:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8012df6:	68fb      	ldr	r3, [r7, #12]
 8012df8:	2b00      	cmp	r3, #0
 8012dfa:	d106      	bne.n	8012e0a <tcp_output_alloc_header+0x26>
 8012dfc:	4b15      	ldr	r3, [pc, #84]	; (8012e54 <tcp_output_alloc_header+0x70>)
 8012dfe:	f240 7242 	movw	r2, #1858	; 0x742
 8012e02:	4915      	ldr	r1, [pc, #84]	; (8012e58 <tcp_output_alloc_header+0x74>)
 8012e04:	4815      	ldr	r0, [pc, #84]	; (8012e5c <tcp_output_alloc_header+0x78>)
 8012e06:	f003 ff3b 	bl	8016c80 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8012e0a:	68fb      	ldr	r3, [r7, #12]
 8012e0c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8012e0e:	68fb      	ldr	r3, [r7, #12]
 8012e10:	8adb      	ldrh	r3, [r3, #22]
 8012e12:	68fa      	ldr	r2, [r7, #12]
 8012e14:	8b12      	ldrh	r2, [r2, #24]
 8012e16:	68f9      	ldr	r1, [r7, #12]
 8012e18:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8012e1a:	893d      	ldrh	r5, [r7, #8]
 8012e1c:	897c      	ldrh	r4, [r7, #10]
 8012e1e:	9103      	str	r1, [sp, #12]
 8012e20:	2110      	movs	r1, #16
 8012e22:	9102      	str	r1, [sp, #8]
 8012e24:	9201      	str	r2, [sp, #4]
 8012e26:	9300      	str	r3, [sp, #0]
 8012e28:	687b      	ldr	r3, [r7, #4]
 8012e2a:	462a      	mov	r2, r5
 8012e2c:	4621      	mov	r1, r4
 8012e2e:	f7ff ff67 	bl	8012d00 <tcp_output_alloc_header_common>
 8012e32:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8012e34:	697b      	ldr	r3, [r7, #20]
 8012e36:	2b00      	cmp	r3, #0
 8012e38:	d006      	beq.n	8012e48 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012e3a:	68fb      	ldr	r3, [r7, #12]
 8012e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e3e:	68fa      	ldr	r2, [r7, #12]
 8012e40:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8012e42:	441a      	add	r2, r3
 8012e44:	68fb      	ldr	r3, [r7, #12]
 8012e46:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8012e48:	697b      	ldr	r3, [r7, #20]
}
 8012e4a:	4618      	mov	r0, r3
 8012e4c:	3718      	adds	r7, #24
 8012e4e:	46bd      	mov	sp, r7
 8012e50:	bdb0      	pop	{r4, r5, r7, pc}
 8012e52:	bf00      	nop
 8012e54:	080197f4 	.word	0x080197f4
 8012e58:	08019efc 	.word	0x08019efc
 8012e5c:	08019848 	.word	0x08019848

08012e60 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8012e60:	b580      	push	{r7, lr}
 8012e62:	b088      	sub	sp, #32
 8012e64:	af00      	add	r7, sp, #0
 8012e66:	60f8      	str	r0, [r7, #12]
 8012e68:	60b9      	str	r1, [r7, #8]
 8012e6a:	4611      	mov	r1, r2
 8012e6c:	461a      	mov	r2, r3
 8012e6e:	460b      	mov	r3, r1
 8012e70:	71fb      	strb	r3, [r7, #7]
 8012e72:	4613      	mov	r3, r2
 8012e74:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8012e76:	2300      	movs	r3, #0
 8012e78:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8012e7a:	68bb      	ldr	r3, [r7, #8]
 8012e7c:	2b00      	cmp	r3, #0
 8012e7e:	d106      	bne.n	8012e8e <tcp_output_fill_options+0x2e>
 8012e80:	4b13      	ldr	r3, [pc, #76]	; (8012ed0 <tcp_output_fill_options+0x70>)
 8012e82:	f240 7256 	movw	r2, #1878	; 0x756
 8012e86:	4913      	ldr	r1, [pc, #76]	; (8012ed4 <tcp_output_fill_options+0x74>)
 8012e88:	4813      	ldr	r0, [pc, #76]	; (8012ed8 <tcp_output_fill_options+0x78>)
 8012e8a:	f003 fef9 	bl	8016c80 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8012e8e:	68bb      	ldr	r3, [r7, #8]
 8012e90:	685b      	ldr	r3, [r3, #4]
 8012e92:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8012e94:	69bb      	ldr	r3, [r7, #24]
 8012e96:	3314      	adds	r3, #20
 8012e98:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8012e9a:	69bb      	ldr	r3, [r7, #24]
 8012e9c:	f103 0214 	add.w	r2, r3, #20
 8012ea0:	8bfb      	ldrh	r3, [r7, #30]
 8012ea2:	009b      	lsls	r3, r3, #2
 8012ea4:	4619      	mov	r1, r3
 8012ea6:	79fb      	ldrb	r3, [r7, #7]
 8012ea8:	009b      	lsls	r3, r3, #2
 8012eaa:	f003 0304 	and.w	r3, r3, #4
 8012eae:	440b      	add	r3, r1
 8012eb0:	4413      	add	r3, r2
 8012eb2:	697a      	ldr	r2, [r7, #20]
 8012eb4:	429a      	cmp	r2, r3
 8012eb6:	d006      	beq.n	8012ec6 <tcp_output_fill_options+0x66>
 8012eb8:	4b05      	ldr	r3, [pc, #20]	; (8012ed0 <tcp_output_fill_options+0x70>)
 8012eba:	f240 7275 	movw	r2, #1909	; 0x775
 8012ebe:	4907      	ldr	r1, [pc, #28]	; (8012edc <tcp_output_fill_options+0x7c>)
 8012ec0:	4805      	ldr	r0, [pc, #20]	; (8012ed8 <tcp_output_fill_options+0x78>)
 8012ec2:	f003 fedd 	bl	8016c80 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8012ec6:	bf00      	nop
 8012ec8:	3720      	adds	r7, #32
 8012eca:	46bd      	mov	sp, r7
 8012ecc:	bd80      	pop	{r7, pc}
 8012ece:	bf00      	nop
 8012ed0:	080197f4 	.word	0x080197f4
 8012ed4:	08019f24 	.word	0x08019f24
 8012ed8:	08019848 	.word	0x08019848
 8012edc:	08019e1c 	.word	0x08019e1c

08012ee0 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8012ee0:	b580      	push	{r7, lr}
 8012ee2:	b08a      	sub	sp, #40	; 0x28
 8012ee4:	af04      	add	r7, sp, #16
 8012ee6:	60f8      	str	r0, [r7, #12]
 8012ee8:	60b9      	str	r1, [r7, #8]
 8012eea:	607a      	str	r2, [r7, #4]
 8012eec:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8012eee:	68bb      	ldr	r3, [r7, #8]
 8012ef0:	2b00      	cmp	r3, #0
 8012ef2:	d106      	bne.n	8012f02 <tcp_output_control_segment+0x22>
 8012ef4:	4b1c      	ldr	r3, [pc, #112]	; (8012f68 <tcp_output_control_segment+0x88>)
 8012ef6:	f240 7287 	movw	r2, #1927	; 0x787
 8012efa:	491c      	ldr	r1, [pc, #112]	; (8012f6c <tcp_output_control_segment+0x8c>)
 8012efc:	481c      	ldr	r0, [pc, #112]	; (8012f70 <tcp_output_control_segment+0x90>)
 8012efe:	f003 febf 	bl	8016c80 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8012f02:	683a      	ldr	r2, [r7, #0]
 8012f04:	6879      	ldr	r1, [r7, #4]
 8012f06:	68f8      	ldr	r0, [r7, #12]
 8012f08:	f7fe fae8 	bl	80114dc <tcp_route>
 8012f0c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8012f0e:	693b      	ldr	r3, [r7, #16]
 8012f10:	2b00      	cmp	r3, #0
 8012f12:	d102      	bne.n	8012f1a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8012f14:	23fc      	movs	r3, #252	; 0xfc
 8012f16:	75fb      	strb	r3, [r7, #23]
 8012f18:	e01c      	b.n	8012f54 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8012f1a:	68fb      	ldr	r3, [r7, #12]
 8012f1c:	2b00      	cmp	r3, #0
 8012f1e:	d006      	beq.n	8012f2e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8012f20:	68fb      	ldr	r3, [r7, #12]
 8012f22:	7adb      	ldrb	r3, [r3, #11]
 8012f24:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8012f26:	68fb      	ldr	r3, [r7, #12]
 8012f28:	7a9b      	ldrb	r3, [r3, #10]
 8012f2a:	757b      	strb	r3, [r7, #21]
 8012f2c:	e003      	b.n	8012f36 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8012f2e:	23ff      	movs	r3, #255	; 0xff
 8012f30:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8012f32:	2300      	movs	r3, #0
 8012f34:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8012f36:	7dba      	ldrb	r2, [r7, #22]
 8012f38:	693b      	ldr	r3, [r7, #16]
 8012f3a:	9302      	str	r3, [sp, #8]
 8012f3c:	2306      	movs	r3, #6
 8012f3e:	9301      	str	r3, [sp, #4]
 8012f40:	7d7b      	ldrb	r3, [r7, #21]
 8012f42:	9300      	str	r3, [sp, #0]
 8012f44:	4613      	mov	r3, r2
 8012f46:	683a      	ldr	r2, [r7, #0]
 8012f48:	6879      	ldr	r1, [r7, #4]
 8012f4a:	68b8      	ldr	r0, [r7, #8]
 8012f4c:	f001 fffc 	bl	8014f48 <ip4_output_if>
 8012f50:	4603      	mov	r3, r0
 8012f52:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8012f54:	68b8      	ldr	r0, [r7, #8]
 8012f56:	f7f9 fe77 	bl	800cc48 <pbuf_free>
  return err;
 8012f5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012f5e:	4618      	mov	r0, r3
 8012f60:	3718      	adds	r7, #24
 8012f62:	46bd      	mov	sp, r7
 8012f64:	bd80      	pop	{r7, pc}
 8012f66:	bf00      	nop
 8012f68:	080197f4 	.word	0x080197f4
 8012f6c:	08019f4c 	.word	0x08019f4c
 8012f70:	08019848 	.word	0x08019848

08012f74 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8012f74:	b590      	push	{r4, r7, lr}
 8012f76:	b08b      	sub	sp, #44	; 0x2c
 8012f78:	af04      	add	r7, sp, #16
 8012f7a:	60f8      	str	r0, [r7, #12]
 8012f7c:	60b9      	str	r1, [r7, #8]
 8012f7e:	607a      	str	r2, [r7, #4]
 8012f80:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8012f82:	683b      	ldr	r3, [r7, #0]
 8012f84:	2b00      	cmp	r3, #0
 8012f86:	d106      	bne.n	8012f96 <tcp_rst+0x22>
 8012f88:	4b1f      	ldr	r3, [pc, #124]	; (8013008 <tcp_rst+0x94>)
 8012f8a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8012f8e:	491f      	ldr	r1, [pc, #124]	; (801300c <tcp_rst+0x98>)
 8012f90:	481f      	ldr	r0, [pc, #124]	; (8013010 <tcp_rst+0x9c>)
 8012f92:	f003 fe75 	bl	8016c80 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8012f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f98:	2b00      	cmp	r3, #0
 8012f9a:	d106      	bne.n	8012faa <tcp_rst+0x36>
 8012f9c:	4b1a      	ldr	r3, [pc, #104]	; (8013008 <tcp_rst+0x94>)
 8012f9e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8012fa2:	491c      	ldr	r1, [pc, #112]	; (8013014 <tcp_rst+0xa0>)
 8012fa4:	481a      	ldr	r0, [pc, #104]	; (8013010 <tcp_rst+0x9c>)
 8012fa6:	f003 fe6b 	bl	8016c80 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012faa:	2300      	movs	r3, #0
 8012fac:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8012fae:	f246 0308 	movw	r3, #24584	; 0x6008
 8012fb2:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8012fb4:	7dfb      	ldrb	r3, [r7, #23]
 8012fb6:	b29c      	uxth	r4, r3
 8012fb8:	68b8      	ldr	r0, [r7, #8]
 8012fba:	f7f8 f9fd 	bl	800b3b8 <lwip_htonl>
 8012fbe:	4602      	mov	r2, r0
 8012fc0:	8abb      	ldrh	r3, [r7, #20]
 8012fc2:	9303      	str	r3, [sp, #12]
 8012fc4:	2314      	movs	r3, #20
 8012fc6:	9302      	str	r3, [sp, #8]
 8012fc8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8012fca:	9301      	str	r3, [sp, #4]
 8012fcc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8012fce:	9300      	str	r3, [sp, #0]
 8012fd0:	4613      	mov	r3, r2
 8012fd2:	2200      	movs	r2, #0
 8012fd4:	4621      	mov	r1, r4
 8012fd6:	6878      	ldr	r0, [r7, #4]
 8012fd8:	f7ff fe92 	bl	8012d00 <tcp_output_alloc_header_common>
 8012fdc:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8012fde:	693b      	ldr	r3, [r7, #16]
 8012fe0:	2b00      	cmp	r3, #0
 8012fe2:	d00c      	beq.n	8012ffe <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012fe4:	7dfb      	ldrb	r3, [r7, #23]
 8012fe6:	2200      	movs	r2, #0
 8012fe8:	6939      	ldr	r1, [r7, #16]
 8012fea:	68f8      	ldr	r0, [r7, #12]
 8012fec:	f7ff ff38 	bl	8012e60 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8012ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ff2:	683a      	ldr	r2, [r7, #0]
 8012ff4:	6939      	ldr	r1, [r7, #16]
 8012ff6:	68f8      	ldr	r0, [r7, #12]
 8012ff8:	f7ff ff72 	bl	8012ee0 <tcp_output_control_segment>
 8012ffc:	e000      	b.n	8013000 <tcp_rst+0x8c>
    return;
 8012ffe:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8013000:	371c      	adds	r7, #28
 8013002:	46bd      	mov	sp, r7
 8013004:	bd90      	pop	{r4, r7, pc}
 8013006:	bf00      	nop
 8013008:	080197f4 	.word	0x080197f4
 801300c:	08019f78 	.word	0x08019f78
 8013010:	08019848 	.word	0x08019848
 8013014:	08019f94 	.word	0x08019f94

08013018 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8013018:	b590      	push	{r4, r7, lr}
 801301a:	b087      	sub	sp, #28
 801301c:	af00      	add	r7, sp, #0
 801301e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8013020:	2300      	movs	r3, #0
 8013022:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8013024:	2300      	movs	r3, #0
 8013026:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8013028:	687b      	ldr	r3, [r7, #4]
 801302a:	2b00      	cmp	r3, #0
 801302c:	d106      	bne.n	801303c <tcp_send_empty_ack+0x24>
 801302e:	4b28      	ldr	r3, [pc, #160]	; (80130d0 <tcp_send_empty_ack+0xb8>)
 8013030:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8013034:	4927      	ldr	r1, [pc, #156]	; (80130d4 <tcp_send_empty_ack+0xbc>)
 8013036:	4828      	ldr	r0, [pc, #160]	; (80130d8 <tcp_send_empty_ack+0xc0>)
 8013038:	f003 fe22 	bl	8016c80 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801303c:	7dfb      	ldrb	r3, [r7, #23]
 801303e:	009b      	lsls	r3, r3, #2
 8013040:	b2db      	uxtb	r3, r3
 8013042:	f003 0304 	and.w	r3, r3, #4
 8013046:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8013048:	7d7b      	ldrb	r3, [r7, #21]
 801304a:	b29c      	uxth	r4, r3
 801304c:	687b      	ldr	r3, [r7, #4]
 801304e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013050:	4618      	mov	r0, r3
 8013052:	f7f8 f9b1 	bl	800b3b8 <lwip_htonl>
 8013056:	4603      	mov	r3, r0
 8013058:	2200      	movs	r2, #0
 801305a:	4621      	mov	r1, r4
 801305c:	6878      	ldr	r0, [r7, #4]
 801305e:	f7ff fec1 	bl	8012de4 <tcp_output_alloc_header>
 8013062:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013064:	693b      	ldr	r3, [r7, #16]
 8013066:	2b00      	cmp	r3, #0
 8013068:	d109      	bne.n	801307e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801306a:	687b      	ldr	r3, [r7, #4]
 801306c:	8b5b      	ldrh	r3, [r3, #26]
 801306e:	f043 0303 	orr.w	r3, r3, #3
 8013072:	b29a      	uxth	r2, r3
 8013074:	687b      	ldr	r3, [r7, #4]
 8013076:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8013078:	f06f 0301 	mvn.w	r3, #1
 801307c:	e023      	b.n	80130c6 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801307e:	7dbb      	ldrb	r3, [r7, #22]
 8013080:	7dfa      	ldrb	r2, [r7, #23]
 8013082:	6939      	ldr	r1, [r7, #16]
 8013084:	6878      	ldr	r0, [r7, #4]
 8013086:	f7ff feeb 	bl	8012e60 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801308a:	687a      	ldr	r2, [r7, #4]
 801308c:	687b      	ldr	r3, [r7, #4]
 801308e:	3304      	adds	r3, #4
 8013090:	6939      	ldr	r1, [r7, #16]
 8013092:	6878      	ldr	r0, [r7, #4]
 8013094:	f7ff ff24 	bl	8012ee0 <tcp_output_control_segment>
 8013098:	4603      	mov	r3, r0
 801309a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801309c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80130a0:	2b00      	cmp	r3, #0
 80130a2:	d007      	beq.n	80130b4 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80130a4:	687b      	ldr	r3, [r7, #4]
 80130a6:	8b5b      	ldrh	r3, [r3, #26]
 80130a8:	f043 0303 	orr.w	r3, r3, #3
 80130ac:	b29a      	uxth	r2, r3
 80130ae:	687b      	ldr	r3, [r7, #4]
 80130b0:	835a      	strh	r2, [r3, #26]
 80130b2:	e006      	b.n	80130c2 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	8b5b      	ldrh	r3, [r3, #26]
 80130b8:	f023 0303 	bic.w	r3, r3, #3
 80130bc:	b29a      	uxth	r2, r3
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80130c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80130c6:	4618      	mov	r0, r3
 80130c8:	371c      	adds	r7, #28
 80130ca:	46bd      	mov	sp, r7
 80130cc:	bd90      	pop	{r4, r7, pc}
 80130ce:	bf00      	nop
 80130d0:	080197f4 	.word	0x080197f4
 80130d4:	08019fb0 	.word	0x08019fb0
 80130d8:	08019848 	.word	0x08019848

080130dc <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80130dc:	b590      	push	{r4, r7, lr}
 80130de:	b087      	sub	sp, #28
 80130e0:	af00      	add	r7, sp, #0
 80130e2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80130e4:	2300      	movs	r3, #0
 80130e6:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80130e8:	687b      	ldr	r3, [r7, #4]
 80130ea:	2b00      	cmp	r3, #0
 80130ec:	d106      	bne.n	80130fc <tcp_keepalive+0x20>
 80130ee:	4b18      	ldr	r3, [pc, #96]	; (8013150 <tcp_keepalive+0x74>)
 80130f0:	f640 0224 	movw	r2, #2084	; 0x824
 80130f4:	4917      	ldr	r1, [pc, #92]	; (8013154 <tcp_keepalive+0x78>)
 80130f6:	4818      	ldr	r0, [pc, #96]	; (8013158 <tcp_keepalive+0x7c>)
 80130f8:	f003 fdc2 	bl	8016c80 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 80130fc:	7dfb      	ldrb	r3, [r7, #23]
 80130fe:	b29c      	uxth	r4, r3
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013104:	3b01      	subs	r3, #1
 8013106:	4618      	mov	r0, r3
 8013108:	f7f8 f956 	bl	800b3b8 <lwip_htonl>
 801310c:	4603      	mov	r3, r0
 801310e:	2200      	movs	r2, #0
 8013110:	4621      	mov	r1, r4
 8013112:	6878      	ldr	r0, [r7, #4]
 8013114:	f7ff fe66 	bl	8012de4 <tcp_output_alloc_header>
 8013118:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801311a:	693b      	ldr	r3, [r7, #16]
 801311c:	2b00      	cmp	r3, #0
 801311e:	d102      	bne.n	8013126 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8013120:	f04f 33ff 	mov.w	r3, #4294967295
 8013124:	e010      	b.n	8013148 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013126:	7dfb      	ldrb	r3, [r7, #23]
 8013128:	2200      	movs	r2, #0
 801312a:	6939      	ldr	r1, [r7, #16]
 801312c:	6878      	ldr	r0, [r7, #4]
 801312e:	f7ff fe97 	bl	8012e60 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013132:	687a      	ldr	r2, [r7, #4]
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	3304      	adds	r3, #4
 8013138:	6939      	ldr	r1, [r7, #16]
 801313a:	6878      	ldr	r0, [r7, #4]
 801313c:	f7ff fed0 	bl	8012ee0 <tcp_output_control_segment>
 8013140:	4603      	mov	r3, r0
 8013142:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8013144:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013148:	4618      	mov	r0, r3
 801314a:	371c      	adds	r7, #28
 801314c:	46bd      	mov	sp, r7
 801314e:	bd90      	pop	{r4, r7, pc}
 8013150:	080197f4 	.word	0x080197f4
 8013154:	08019fd0 	.word	0x08019fd0
 8013158:	08019848 	.word	0x08019848

0801315c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801315c:	b590      	push	{r4, r7, lr}
 801315e:	b08b      	sub	sp, #44	; 0x2c
 8013160:	af00      	add	r7, sp, #0
 8013162:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013164:	2300      	movs	r3, #0
 8013166:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801316a:	687b      	ldr	r3, [r7, #4]
 801316c:	2b00      	cmp	r3, #0
 801316e:	d106      	bne.n	801317e <tcp_zero_window_probe+0x22>
 8013170:	4b4c      	ldr	r3, [pc, #304]	; (80132a4 <tcp_zero_window_probe+0x148>)
 8013172:	f640 024f 	movw	r2, #2127	; 0x84f
 8013176:	494c      	ldr	r1, [pc, #304]	; (80132a8 <tcp_zero_window_probe+0x14c>)
 8013178:	484c      	ldr	r0, [pc, #304]	; (80132ac <tcp_zero_window_probe+0x150>)
 801317a:	f003 fd81 	bl	8016c80 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801317e:	687b      	ldr	r3, [r7, #4]
 8013180:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013182:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8013184:	6a3b      	ldr	r3, [r7, #32]
 8013186:	2b00      	cmp	r3, #0
 8013188:	d101      	bne.n	801318e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801318a:	2300      	movs	r3, #0
 801318c:	e086      	b.n	801329c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801318e:	687b      	ldr	r3, [r7, #4]
 8013190:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8013194:	2bff      	cmp	r3, #255	; 0xff
 8013196:	d007      	beq.n	80131a8 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8013198:	687b      	ldr	r3, [r7, #4]
 801319a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801319e:	3301      	adds	r3, #1
 80131a0:	b2da      	uxtb	r2, r3
 80131a2:	687b      	ldr	r3, [r7, #4]
 80131a4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80131a8:	6a3b      	ldr	r3, [r7, #32]
 80131aa:	68db      	ldr	r3, [r3, #12]
 80131ac:	899b      	ldrh	r3, [r3, #12]
 80131ae:	b29b      	uxth	r3, r3
 80131b0:	4618      	mov	r0, r3
 80131b2:	f7f8 f8ed 	bl	800b390 <lwip_htons>
 80131b6:	4603      	mov	r3, r0
 80131b8:	b2db      	uxtb	r3, r3
 80131ba:	f003 0301 	and.w	r3, r3, #1
 80131be:	2b00      	cmp	r3, #0
 80131c0:	d005      	beq.n	80131ce <tcp_zero_window_probe+0x72>
 80131c2:	6a3b      	ldr	r3, [r7, #32]
 80131c4:	891b      	ldrh	r3, [r3, #8]
 80131c6:	2b00      	cmp	r3, #0
 80131c8:	d101      	bne.n	80131ce <tcp_zero_window_probe+0x72>
 80131ca:	2301      	movs	r3, #1
 80131cc:	e000      	b.n	80131d0 <tcp_zero_window_probe+0x74>
 80131ce:	2300      	movs	r3, #0
 80131d0:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80131d2:	7ffb      	ldrb	r3, [r7, #31]
 80131d4:	2b00      	cmp	r3, #0
 80131d6:	bf0c      	ite	eq
 80131d8:	2301      	moveq	r3, #1
 80131da:	2300      	movne	r3, #0
 80131dc:	b2db      	uxtb	r3, r3
 80131de:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80131e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80131e4:	b299      	uxth	r1, r3
 80131e6:	6a3b      	ldr	r3, [r7, #32]
 80131e8:	68db      	ldr	r3, [r3, #12]
 80131ea:	685b      	ldr	r3, [r3, #4]
 80131ec:	8bba      	ldrh	r2, [r7, #28]
 80131ee:	6878      	ldr	r0, [r7, #4]
 80131f0:	f7ff fdf8 	bl	8012de4 <tcp_output_alloc_header>
 80131f4:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80131f6:	69bb      	ldr	r3, [r7, #24]
 80131f8:	2b00      	cmp	r3, #0
 80131fa:	d102      	bne.n	8013202 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80131fc:	f04f 33ff 	mov.w	r3, #4294967295
 8013200:	e04c      	b.n	801329c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8013202:	69bb      	ldr	r3, [r7, #24]
 8013204:	685b      	ldr	r3, [r3, #4]
 8013206:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8013208:	7ffb      	ldrb	r3, [r7, #31]
 801320a:	2b00      	cmp	r3, #0
 801320c:	d011      	beq.n	8013232 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801320e:	697b      	ldr	r3, [r7, #20]
 8013210:	899b      	ldrh	r3, [r3, #12]
 8013212:	b29b      	uxth	r3, r3
 8013214:	b21b      	sxth	r3, r3
 8013216:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801321a:	b21c      	sxth	r4, r3
 801321c:	2011      	movs	r0, #17
 801321e:	f7f8 f8b7 	bl	800b390 <lwip_htons>
 8013222:	4603      	mov	r3, r0
 8013224:	b21b      	sxth	r3, r3
 8013226:	4323      	orrs	r3, r4
 8013228:	b21b      	sxth	r3, r3
 801322a:	b29a      	uxth	r2, r3
 801322c:	697b      	ldr	r3, [r7, #20]
 801322e:	819a      	strh	r2, [r3, #12]
 8013230:	e010      	b.n	8013254 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8013232:	69bb      	ldr	r3, [r7, #24]
 8013234:	685b      	ldr	r3, [r3, #4]
 8013236:	3314      	adds	r3, #20
 8013238:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801323a:	6a3b      	ldr	r3, [r7, #32]
 801323c:	6858      	ldr	r0, [r3, #4]
 801323e:	6a3b      	ldr	r3, [r7, #32]
 8013240:	685b      	ldr	r3, [r3, #4]
 8013242:	891a      	ldrh	r2, [r3, #8]
 8013244:	6a3b      	ldr	r3, [r7, #32]
 8013246:	891b      	ldrh	r3, [r3, #8]
 8013248:	1ad3      	subs	r3, r2, r3
 801324a:	b29b      	uxth	r3, r3
 801324c:	2201      	movs	r2, #1
 801324e:	6939      	ldr	r1, [r7, #16]
 8013250:	f7f9 feee 	bl	800d030 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8013254:	6a3b      	ldr	r3, [r7, #32]
 8013256:	68db      	ldr	r3, [r3, #12]
 8013258:	685b      	ldr	r3, [r3, #4]
 801325a:	4618      	mov	r0, r3
 801325c:	f7f8 f8ac 	bl	800b3b8 <lwip_htonl>
 8013260:	4603      	mov	r3, r0
 8013262:	3301      	adds	r3, #1
 8013264:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8013266:	687b      	ldr	r3, [r7, #4]
 8013268:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801326a:	68fb      	ldr	r3, [r7, #12]
 801326c:	1ad3      	subs	r3, r2, r3
 801326e:	2b00      	cmp	r3, #0
 8013270:	da02      	bge.n	8013278 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8013272:	687b      	ldr	r3, [r7, #4]
 8013274:	68fa      	ldr	r2, [r7, #12]
 8013276:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013278:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801327c:	2200      	movs	r2, #0
 801327e:	69b9      	ldr	r1, [r7, #24]
 8013280:	6878      	ldr	r0, [r7, #4]
 8013282:	f7ff fded 	bl	8012e60 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013286:	687a      	ldr	r2, [r7, #4]
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	3304      	adds	r3, #4
 801328c:	69b9      	ldr	r1, [r7, #24]
 801328e:	6878      	ldr	r0, [r7, #4]
 8013290:	f7ff fe26 	bl	8012ee0 <tcp_output_control_segment>
 8013294:	4603      	mov	r3, r0
 8013296:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8013298:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801329c:	4618      	mov	r0, r3
 801329e:	372c      	adds	r7, #44	; 0x2c
 80132a0:	46bd      	mov	sp, r7
 80132a2:	bd90      	pop	{r4, r7, pc}
 80132a4:	080197f4 	.word	0x080197f4
 80132a8:	08019fec 	.word	0x08019fec
 80132ac:	08019848 	.word	0x08019848

080132b0 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80132b0:	b580      	push	{r7, lr}
 80132b2:	b082      	sub	sp, #8
 80132b4:	af00      	add	r7, sp, #0
 80132b6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80132b8:	f7fa f80a 	bl	800d2d0 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80132bc:	4b0a      	ldr	r3, [pc, #40]	; (80132e8 <tcpip_tcp_timer+0x38>)
 80132be:	681b      	ldr	r3, [r3, #0]
 80132c0:	2b00      	cmp	r3, #0
 80132c2:	d103      	bne.n	80132cc <tcpip_tcp_timer+0x1c>
 80132c4:	4b09      	ldr	r3, [pc, #36]	; (80132ec <tcpip_tcp_timer+0x3c>)
 80132c6:	681b      	ldr	r3, [r3, #0]
 80132c8:	2b00      	cmp	r3, #0
 80132ca:	d005      	beq.n	80132d8 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80132cc:	2200      	movs	r2, #0
 80132ce:	4908      	ldr	r1, [pc, #32]	; (80132f0 <tcpip_tcp_timer+0x40>)
 80132d0:	20fa      	movs	r0, #250	; 0xfa
 80132d2:	f000 f8f3 	bl	80134bc <sys_timeout>
 80132d6:	e003      	b.n	80132e0 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80132d8:	4b06      	ldr	r3, [pc, #24]	; (80132f4 <tcpip_tcp_timer+0x44>)
 80132da:	2200      	movs	r2, #0
 80132dc:	601a      	str	r2, [r3, #0]
  }
}
 80132de:	bf00      	nop
 80132e0:	bf00      	nop
 80132e2:	3708      	adds	r7, #8
 80132e4:	46bd      	mov	sp, r7
 80132e6:	bd80      	pop	{r7, pc}
 80132e8:	2000be1c 	.word	0x2000be1c
 80132ec:	2000be20 	.word	0x2000be20
 80132f0:	080132b1 	.word	0x080132b1
 80132f4:	2000be68 	.word	0x2000be68

080132f8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80132f8:	b580      	push	{r7, lr}
 80132fa:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80132fc:	4b0a      	ldr	r3, [pc, #40]	; (8013328 <tcp_timer_needed+0x30>)
 80132fe:	681b      	ldr	r3, [r3, #0]
 8013300:	2b00      	cmp	r3, #0
 8013302:	d10f      	bne.n	8013324 <tcp_timer_needed+0x2c>
 8013304:	4b09      	ldr	r3, [pc, #36]	; (801332c <tcp_timer_needed+0x34>)
 8013306:	681b      	ldr	r3, [r3, #0]
 8013308:	2b00      	cmp	r3, #0
 801330a:	d103      	bne.n	8013314 <tcp_timer_needed+0x1c>
 801330c:	4b08      	ldr	r3, [pc, #32]	; (8013330 <tcp_timer_needed+0x38>)
 801330e:	681b      	ldr	r3, [r3, #0]
 8013310:	2b00      	cmp	r3, #0
 8013312:	d007      	beq.n	8013324 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8013314:	4b04      	ldr	r3, [pc, #16]	; (8013328 <tcp_timer_needed+0x30>)
 8013316:	2201      	movs	r2, #1
 8013318:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801331a:	2200      	movs	r2, #0
 801331c:	4905      	ldr	r1, [pc, #20]	; (8013334 <tcp_timer_needed+0x3c>)
 801331e:	20fa      	movs	r0, #250	; 0xfa
 8013320:	f000 f8cc 	bl	80134bc <sys_timeout>
  }
}
 8013324:	bf00      	nop
 8013326:	bd80      	pop	{r7, pc}
 8013328:	2000be68 	.word	0x2000be68
 801332c:	2000be1c 	.word	0x2000be1c
 8013330:	2000be20 	.word	0x2000be20
 8013334:	080132b1 	.word	0x080132b1

08013338 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8013338:	b580      	push	{r7, lr}
 801333a:	b086      	sub	sp, #24
 801333c:	af00      	add	r7, sp, #0
 801333e:	60f8      	str	r0, [r7, #12]
 8013340:	60b9      	str	r1, [r7, #8]
 8013342:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8013344:	200a      	movs	r0, #10
 8013346:	f7f8 fdd3 	bl	800bef0 <memp_malloc>
 801334a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801334c:	693b      	ldr	r3, [r7, #16]
 801334e:	2b00      	cmp	r3, #0
 8013350:	d109      	bne.n	8013366 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8013352:	693b      	ldr	r3, [r7, #16]
 8013354:	2b00      	cmp	r3, #0
 8013356:	d151      	bne.n	80133fc <sys_timeout_abs+0xc4>
 8013358:	4b2a      	ldr	r3, [pc, #168]	; (8013404 <sys_timeout_abs+0xcc>)
 801335a:	22be      	movs	r2, #190	; 0xbe
 801335c:	492a      	ldr	r1, [pc, #168]	; (8013408 <sys_timeout_abs+0xd0>)
 801335e:	482b      	ldr	r0, [pc, #172]	; (801340c <sys_timeout_abs+0xd4>)
 8013360:	f003 fc8e 	bl	8016c80 <iprintf>
    return;
 8013364:	e04a      	b.n	80133fc <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8013366:	693b      	ldr	r3, [r7, #16]
 8013368:	2200      	movs	r2, #0
 801336a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801336c:	693b      	ldr	r3, [r7, #16]
 801336e:	68ba      	ldr	r2, [r7, #8]
 8013370:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8013372:	693b      	ldr	r3, [r7, #16]
 8013374:	687a      	ldr	r2, [r7, #4]
 8013376:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8013378:	693b      	ldr	r3, [r7, #16]
 801337a:	68fa      	ldr	r2, [r7, #12]
 801337c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801337e:	4b24      	ldr	r3, [pc, #144]	; (8013410 <sys_timeout_abs+0xd8>)
 8013380:	681b      	ldr	r3, [r3, #0]
 8013382:	2b00      	cmp	r3, #0
 8013384:	d103      	bne.n	801338e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8013386:	4a22      	ldr	r2, [pc, #136]	; (8013410 <sys_timeout_abs+0xd8>)
 8013388:	693b      	ldr	r3, [r7, #16]
 801338a:	6013      	str	r3, [r2, #0]
    return;
 801338c:	e037      	b.n	80133fe <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801338e:	693b      	ldr	r3, [r7, #16]
 8013390:	685a      	ldr	r2, [r3, #4]
 8013392:	4b1f      	ldr	r3, [pc, #124]	; (8013410 <sys_timeout_abs+0xd8>)
 8013394:	681b      	ldr	r3, [r3, #0]
 8013396:	685b      	ldr	r3, [r3, #4]
 8013398:	1ad3      	subs	r3, r2, r3
 801339a:	0fdb      	lsrs	r3, r3, #31
 801339c:	f003 0301 	and.w	r3, r3, #1
 80133a0:	b2db      	uxtb	r3, r3
 80133a2:	2b00      	cmp	r3, #0
 80133a4:	d007      	beq.n	80133b6 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80133a6:	4b1a      	ldr	r3, [pc, #104]	; (8013410 <sys_timeout_abs+0xd8>)
 80133a8:	681a      	ldr	r2, [r3, #0]
 80133aa:	693b      	ldr	r3, [r7, #16]
 80133ac:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80133ae:	4a18      	ldr	r2, [pc, #96]	; (8013410 <sys_timeout_abs+0xd8>)
 80133b0:	693b      	ldr	r3, [r7, #16]
 80133b2:	6013      	str	r3, [r2, #0]
 80133b4:	e023      	b.n	80133fe <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80133b6:	4b16      	ldr	r3, [pc, #88]	; (8013410 <sys_timeout_abs+0xd8>)
 80133b8:	681b      	ldr	r3, [r3, #0]
 80133ba:	617b      	str	r3, [r7, #20]
 80133bc:	e01a      	b.n	80133f4 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80133be:	697b      	ldr	r3, [r7, #20]
 80133c0:	681b      	ldr	r3, [r3, #0]
 80133c2:	2b00      	cmp	r3, #0
 80133c4:	d00b      	beq.n	80133de <sys_timeout_abs+0xa6>
 80133c6:	693b      	ldr	r3, [r7, #16]
 80133c8:	685a      	ldr	r2, [r3, #4]
 80133ca:	697b      	ldr	r3, [r7, #20]
 80133cc:	681b      	ldr	r3, [r3, #0]
 80133ce:	685b      	ldr	r3, [r3, #4]
 80133d0:	1ad3      	subs	r3, r2, r3
 80133d2:	0fdb      	lsrs	r3, r3, #31
 80133d4:	f003 0301 	and.w	r3, r3, #1
 80133d8:	b2db      	uxtb	r3, r3
 80133da:	2b00      	cmp	r3, #0
 80133dc:	d007      	beq.n	80133ee <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80133de:	697b      	ldr	r3, [r7, #20]
 80133e0:	681a      	ldr	r2, [r3, #0]
 80133e2:	693b      	ldr	r3, [r7, #16]
 80133e4:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80133e6:	697b      	ldr	r3, [r7, #20]
 80133e8:	693a      	ldr	r2, [r7, #16]
 80133ea:	601a      	str	r2, [r3, #0]
        break;
 80133ec:	e007      	b.n	80133fe <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80133ee:	697b      	ldr	r3, [r7, #20]
 80133f0:	681b      	ldr	r3, [r3, #0]
 80133f2:	617b      	str	r3, [r7, #20]
 80133f4:	697b      	ldr	r3, [r7, #20]
 80133f6:	2b00      	cmp	r3, #0
 80133f8:	d1e1      	bne.n	80133be <sys_timeout_abs+0x86>
 80133fa:	e000      	b.n	80133fe <sys_timeout_abs+0xc6>
    return;
 80133fc:	bf00      	nop
      }
    }
  }
}
 80133fe:	3718      	adds	r7, #24
 8013400:	46bd      	mov	sp, r7
 8013402:	bd80      	pop	{r7, pc}
 8013404:	0801a010 	.word	0x0801a010
 8013408:	0801a044 	.word	0x0801a044
 801340c:	0801a084 	.word	0x0801a084
 8013410:	2000be60 	.word	0x2000be60

08013414 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8013414:	b580      	push	{r7, lr}
 8013416:	b086      	sub	sp, #24
 8013418:	af00      	add	r7, sp, #0
 801341a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8013420:	697b      	ldr	r3, [r7, #20]
 8013422:	685b      	ldr	r3, [r3, #4]
 8013424:	4798      	blx	r3

  now = sys_now();
 8013426:	f7f2 fae1 	bl	80059ec <sys_now>
 801342a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801342c:	697b      	ldr	r3, [r7, #20]
 801342e:	681a      	ldr	r2, [r3, #0]
 8013430:	4b0f      	ldr	r3, [pc, #60]	; (8013470 <lwip_cyclic_timer+0x5c>)
 8013432:	681b      	ldr	r3, [r3, #0]
 8013434:	4413      	add	r3, r2
 8013436:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8013438:	68fa      	ldr	r2, [r7, #12]
 801343a:	693b      	ldr	r3, [r7, #16]
 801343c:	1ad3      	subs	r3, r2, r3
 801343e:	0fdb      	lsrs	r3, r3, #31
 8013440:	f003 0301 	and.w	r3, r3, #1
 8013444:	b2db      	uxtb	r3, r3
 8013446:	2b00      	cmp	r3, #0
 8013448:	d009      	beq.n	801345e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801344a:	697b      	ldr	r3, [r7, #20]
 801344c:	681a      	ldr	r2, [r3, #0]
 801344e:	693b      	ldr	r3, [r7, #16]
 8013450:	4413      	add	r3, r2
 8013452:	687a      	ldr	r2, [r7, #4]
 8013454:	4907      	ldr	r1, [pc, #28]	; (8013474 <lwip_cyclic_timer+0x60>)
 8013456:	4618      	mov	r0, r3
 8013458:	f7ff ff6e 	bl	8013338 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801345c:	e004      	b.n	8013468 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801345e:	687a      	ldr	r2, [r7, #4]
 8013460:	4904      	ldr	r1, [pc, #16]	; (8013474 <lwip_cyclic_timer+0x60>)
 8013462:	68f8      	ldr	r0, [r7, #12]
 8013464:	f7ff ff68 	bl	8013338 <sys_timeout_abs>
}
 8013468:	bf00      	nop
 801346a:	3718      	adds	r7, #24
 801346c:	46bd      	mov	sp, r7
 801346e:	bd80      	pop	{r7, pc}
 8013470:	2000be64 	.word	0x2000be64
 8013474:	08013415 	.word	0x08013415

08013478 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8013478:	b580      	push	{r7, lr}
 801347a:	b082      	sub	sp, #8
 801347c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801347e:	2301      	movs	r3, #1
 8013480:	607b      	str	r3, [r7, #4]
 8013482:	e00e      	b.n	80134a2 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8013484:	4a0b      	ldr	r2, [pc, #44]	; (80134b4 <sys_timeouts_init+0x3c>)
 8013486:	687b      	ldr	r3, [r7, #4]
 8013488:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801348c:	687b      	ldr	r3, [r7, #4]
 801348e:	00db      	lsls	r3, r3, #3
 8013490:	4a08      	ldr	r2, [pc, #32]	; (80134b4 <sys_timeouts_init+0x3c>)
 8013492:	4413      	add	r3, r2
 8013494:	461a      	mov	r2, r3
 8013496:	4908      	ldr	r1, [pc, #32]	; (80134b8 <sys_timeouts_init+0x40>)
 8013498:	f000 f810 	bl	80134bc <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801349c:	687b      	ldr	r3, [r7, #4]
 801349e:	3301      	adds	r3, #1
 80134a0:	607b      	str	r3, [r7, #4]
 80134a2:	687b      	ldr	r3, [r7, #4]
 80134a4:	2b02      	cmp	r3, #2
 80134a6:	d9ed      	bls.n	8013484 <sys_timeouts_init+0xc>
  }
}
 80134a8:	bf00      	nop
 80134aa:	bf00      	nop
 80134ac:	3708      	adds	r7, #8
 80134ae:	46bd      	mov	sp, r7
 80134b0:	bd80      	pop	{r7, pc}
 80134b2:	bf00      	nop
 80134b4:	0801ac48 	.word	0x0801ac48
 80134b8:	08013415 	.word	0x08013415

080134bc <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80134bc:	b580      	push	{r7, lr}
 80134be:	b086      	sub	sp, #24
 80134c0:	af00      	add	r7, sp, #0
 80134c2:	60f8      	str	r0, [r7, #12]
 80134c4:	60b9      	str	r1, [r7, #8]
 80134c6:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80134c8:	68fb      	ldr	r3, [r7, #12]
 80134ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80134ce:	d306      	bcc.n	80134de <sys_timeout+0x22>
 80134d0:	4b0a      	ldr	r3, [pc, #40]	; (80134fc <sys_timeout+0x40>)
 80134d2:	f240 1229 	movw	r2, #297	; 0x129
 80134d6:	490a      	ldr	r1, [pc, #40]	; (8013500 <sys_timeout+0x44>)
 80134d8:	480a      	ldr	r0, [pc, #40]	; (8013504 <sys_timeout+0x48>)
 80134da:	f003 fbd1 	bl	8016c80 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80134de:	f7f2 fa85 	bl	80059ec <sys_now>
 80134e2:	4602      	mov	r2, r0
 80134e4:	68fb      	ldr	r3, [r7, #12]
 80134e6:	4413      	add	r3, r2
 80134e8:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80134ea:	687a      	ldr	r2, [r7, #4]
 80134ec:	68b9      	ldr	r1, [r7, #8]
 80134ee:	6978      	ldr	r0, [r7, #20]
 80134f0:	f7ff ff22 	bl	8013338 <sys_timeout_abs>
#endif
}
 80134f4:	bf00      	nop
 80134f6:	3718      	adds	r7, #24
 80134f8:	46bd      	mov	sp, r7
 80134fa:	bd80      	pop	{r7, pc}
 80134fc:	0801a010 	.word	0x0801a010
 8013500:	0801a0ac 	.word	0x0801a0ac
 8013504:	0801a084 	.word	0x0801a084

08013508 <sys_untimeout>:
 * @param handler callback function that would be called by the timeout
 * @param arg callback argument that would be passed to handler
*/
void
sys_untimeout(sys_timeout_handler handler, void *arg)
{
 8013508:	b580      	push	{r7, lr}
 801350a:	b084      	sub	sp, #16
 801350c:	af00      	add	r7, sp, #0
 801350e:	6078      	str	r0, [r7, #4]
 8013510:	6039      	str	r1, [r7, #0]
  struct sys_timeo *prev_t, *t;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8013512:	4b19      	ldr	r3, [pc, #100]	; (8013578 <sys_untimeout+0x70>)
 8013514:	681b      	ldr	r3, [r3, #0]
 8013516:	2b00      	cmp	r3, #0
 8013518:	d029      	beq.n	801356e <sys_untimeout+0x66>
    return;
  }

  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 801351a:	4b17      	ldr	r3, [pc, #92]	; (8013578 <sys_untimeout+0x70>)
 801351c:	681b      	ldr	r3, [r3, #0]
 801351e:	60bb      	str	r3, [r7, #8]
 8013520:	2300      	movs	r3, #0
 8013522:	60fb      	str	r3, [r7, #12]
 8013524:	e01f      	b.n	8013566 <sys_untimeout+0x5e>
    if ((t->h == handler) && (t->arg == arg)) {
 8013526:	68bb      	ldr	r3, [r7, #8]
 8013528:	689b      	ldr	r3, [r3, #8]
 801352a:	687a      	ldr	r2, [r7, #4]
 801352c:	429a      	cmp	r2, r3
 801352e:	d115      	bne.n	801355c <sys_untimeout+0x54>
 8013530:	68bb      	ldr	r3, [r7, #8]
 8013532:	68db      	ldr	r3, [r3, #12]
 8013534:	683a      	ldr	r2, [r7, #0]
 8013536:	429a      	cmp	r2, r3
 8013538:	d110      	bne.n	801355c <sys_untimeout+0x54>
      /* We have a match */
      /* Unlink from previous in list */
      if (prev_t == NULL) {
 801353a:	68fb      	ldr	r3, [r7, #12]
 801353c:	2b00      	cmp	r3, #0
 801353e:	d104      	bne.n	801354a <sys_untimeout+0x42>
        next_timeout = t->next;
 8013540:	68bb      	ldr	r3, [r7, #8]
 8013542:	681b      	ldr	r3, [r3, #0]
 8013544:	4a0c      	ldr	r2, [pc, #48]	; (8013578 <sys_untimeout+0x70>)
 8013546:	6013      	str	r3, [r2, #0]
 8013548:	e003      	b.n	8013552 <sys_untimeout+0x4a>
      } else {
        prev_t->next = t->next;
 801354a:	68bb      	ldr	r3, [r7, #8]
 801354c:	681a      	ldr	r2, [r3, #0]
 801354e:	68fb      	ldr	r3, [r7, #12]
 8013550:	601a      	str	r2, [r3, #0]
      }
      memp_free(MEMP_SYS_TIMEOUT, t);
 8013552:	68b9      	ldr	r1, [r7, #8]
 8013554:	200a      	movs	r0, #10
 8013556:	f7f8 fd41 	bl	800bfdc <memp_free>
      return;
 801355a:	e009      	b.n	8013570 <sys_untimeout+0x68>
  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 801355c:	68bb      	ldr	r3, [r7, #8]
 801355e:	60fb      	str	r3, [r7, #12]
 8013560:	68bb      	ldr	r3, [r7, #8]
 8013562:	681b      	ldr	r3, [r3, #0]
 8013564:	60bb      	str	r3, [r7, #8]
 8013566:	68bb      	ldr	r3, [r7, #8]
 8013568:	2b00      	cmp	r3, #0
 801356a:	d1dc      	bne.n	8013526 <sys_untimeout+0x1e>
    }
  }
  return;
 801356c:	e000      	b.n	8013570 <sys_untimeout+0x68>
    return;
 801356e:	bf00      	nop
}
 8013570:	3710      	adds	r7, #16
 8013572:	46bd      	mov	sp, r7
 8013574:	bd80      	pop	{r7, pc}
 8013576:	bf00      	nop
 8013578:	2000be60 	.word	0x2000be60

0801357c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801357c:	b580      	push	{r7, lr}
 801357e:	b084      	sub	sp, #16
 8013580:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8013582:	f7f2 fa33 	bl	80059ec <sys_now>
 8013586:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8013588:	4b17      	ldr	r3, [pc, #92]	; (80135e8 <sys_check_timeouts+0x6c>)
 801358a:	681b      	ldr	r3, [r3, #0]
 801358c:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801358e:	68bb      	ldr	r3, [r7, #8]
 8013590:	2b00      	cmp	r3, #0
 8013592:	d022      	beq.n	80135da <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8013594:	68bb      	ldr	r3, [r7, #8]
 8013596:	685b      	ldr	r3, [r3, #4]
 8013598:	68fa      	ldr	r2, [r7, #12]
 801359a:	1ad3      	subs	r3, r2, r3
 801359c:	0fdb      	lsrs	r3, r3, #31
 801359e:	f003 0301 	and.w	r3, r3, #1
 80135a2:	b2db      	uxtb	r3, r3
 80135a4:	2b00      	cmp	r3, #0
 80135a6:	d11a      	bne.n	80135de <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 80135a8:	68bb      	ldr	r3, [r7, #8]
 80135aa:	681b      	ldr	r3, [r3, #0]
 80135ac:	4a0e      	ldr	r2, [pc, #56]	; (80135e8 <sys_check_timeouts+0x6c>)
 80135ae:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 80135b0:	68bb      	ldr	r3, [r7, #8]
 80135b2:	689b      	ldr	r3, [r3, #8]
 80135b4:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 80135b6:	68bb      	ldr	r3, [r7, #8]
 80135b8:	68db      	ldr	r3, [r3, #12]
 80135ba:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 80135bc:	68bb      	ldr	r3, [r7, #8]
 80135be:	685b      	ldr	r3, [r3, #4]
 80135c0:	4a0a      	ldr	r2, [pc, #40]	; (80135ec <sys_check_timeouts+0x70>)
 80135c2:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80135c4:	68b9      	ldr	r1, [r7, #8]
 80135c6:	200a      	movs	r0, #10
 80135c8:	f7f8 fd08 	bl	800bfdc <memp_free>
    if (handler != NULL) {
 80135cc:	687b      	ldr	r3, [r7, #4]
 80135ce:	2b00      	cmp	r3, #0
 80135d0:	d0da      	beq.n	8013588 <sys_check_timeouts+0xc>
      handler(arg);
 80135d2:	687b      	ldr	r3, [r7, #4]
 80135d4:	6838      	ldr	r0, [r7, #0]
 80135d6:	4798      	blx	r3
  do {
 80135d8:	e7d6      	b.n	8013588 <sys_check_timeouts+0xc>
      return;
 80135da:	bf00      	nop
 80135dc:	e000      	b.n	80135e0 <sys_check_timeouts+0x64>
      return;
 80135de:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80135e0:	3710      	adds	r7, #16
 80135e2:	46bd      	mov	sp, r7
 80135e4:	bd80      	pop	{r7, pc}
 80135e6:	bf00      	nop
 80135e8:	2000be60 	.word	0x2000be60
 80135ec:	2000be64 	.word	0x2000be64

080135f0 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 80135f0:	b580      	push	{r7, lr}
 80135f2:	b082      	sub	sp, #8
 80135f4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 80135f6:	4b16      	ldr	r3, [pc, #88]	; (8013650 <sys_timeouts_sleeptime+0x60>)
 80135f8:	681b      	ldr	r3, [r3, #0]
 80135fa:	2b00      	cmp	r3, #0
 80135fc:	d102      	bne.n	8013604 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 80135fe:	f04f 33ff 	mov.w	r3, #4294967295
 8013602:	e020      	b.n	8013646 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8013604:	f7f2 f9f2 	bl	80059ec <sys_now>
 8013608:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801360a:	4b11      	ldr	r3, [pc, #68]	; (8013650 <sys_timeouts_sleeptime+0x60>)
 801360c:	681b      	ldr	r3, [r3, #0]
 801360e:	685a      	ldr	r2, [r3, #4]
 8013610:	687b      	ldr	r3, [r7, #4]
 8013612:	1ad3      	subs	r3, r2, r3
 8013614:	0fdb      	lsrs	r3, r3, #31
 8013616:	f003 0301 	and.w	r3, r3, #1
 801361a:	b2db      	uxtb	r3, r3
 801361c:	2b00      	cmp	r3, #0
 801361e:	d001      	beq.n	8013624 <sys_timeouts_sleeptime+0x34>
    return 0;
 8013620:	2300      	movs	r3, #0
 8013622:	e010      	b.n	8013646 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8013624:	4b0a      	ldr	r3, [pc, #40]	; (8013650 <sys_timeouts_sleeptime+0x60>)
 8013626:	681b      	ldr	r3, [r3, #0]
 8013628:	685a      	ldr	r2, [r3, #4]
 801362a:	687b      	ldr	r3, [r7, #4]
 801362c:	1ad3      	subs	r3, r2, r3
 801362e:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8013630:	683b      	ldr	r3, [r7, #0]
 8013632:	2b00      	cmp	r3, #0
 8013634:	da06      	bge.n	8013644 <sys_timeouts_sleeptime+0x54>
 8013636:	4b07      	ldr	r3, [pc, #28]	; (8013654 <sys_timeouts_sleeptime+0x64>)
 8013638:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 801363c:	4906      	ldr	r1, [pc, #24]	; (8013658 <sys_timeouts_sleeptime+0x68>)
 801363e:	4807      	ldr	r0, [pc, #28]	; (801365c <sys_timeouts_sleeptime+0x6c>)
 8013640:	f003 fb1e 	bl	8016c80 <iprintf>
    return ret;
 8013644:	683b      	ldr	r3, [r7, #0]
  }
}
 8013646:	4618      	mov	r0, r3
 8013648:	3708      	adds	r7, #8
 801364a:	46bd      	mov	sp, r7
 801364c:	bd80      	pop	{r7, pc}
 801364e:	bf00      	nop
 8013650:	2000be60 	.word	0x2000be60
 8013654:	0801a010 	.word	0x0801a010
 8013658:	0801a0e4 	.word	0x0801a0e4
 801365c:	0801a084 	.word	0x0801a084

08013660 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8013660:	b580      	push	{r7, lr}
 8013662:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8013664:	f003 fb24 	bl	8016cb0 <rand>
 8013668:	4603      	mov	r3, r0
 801366a:	b29b      	uxth	r3, r3
 801366c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8013670:	b29b      	uxth	r3, r3
 8013672:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8013676:	b29a      	uxth	r2, r3
 8013678:	4b01      	ldr	r3, [pc, #4]	; (8013680 <udp_init+0x20>)
 801367a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801367c:	bf00      	nop
 801367e:	bd80      	pop	{r7, pc}
 8013680:	20000018 	.word	0x20000018

08013684 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8013684:	b580      	push	{r7, lr}
 8013686:	b084      	sub	sp, #16
 8013688:	af00      	add	r7, sp, #0
 801368a:	60f8      	str	r0, [r7, #12]
 801368c:	60b9      	str	r1, [r7, #8]
 801368e:	4613      	mov	r3, r2
 8013690:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8013692:	68fb      	ldr	r3, [r7, #12]
 8013694:	2b00      	cmp	r3, #0
 8013696:	d105      	bne.n	80136a4 <udp_input_local_match+0x20>
 8013698:	4b27      	ldr	r3, [pc, #156]	; (8013738 <udp_input_local_match+0xb4>)
 801369a:	2287      	movs	r2, #135	; 0x87
 801369c:	4927      	ldr	r1, [pc, #156]	; (801373c <udp_input_local_match+0xb8>)
 801369e:	4828      	ldr	r0, [pc, #160]	; (8013740 <udp_input_local_match+0xbc>)
 80136a0:	f003 faee 	bl	8016c80 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80136a4:	68bb      	ldr	r3, [r7, #8]
 80136a6:	2b00      	cmp	r3, #0
 80136a8:	d105      	bne.n	80136b6 <udp_input_local_match+0x32>
 80136aa:	4b23      	ldr	r3, [pc, #140]	; (8013738 <udp_input_local_match+0xb4>)
 80136ac:	2288      	movs	r2, #136	; 0x88
 80136ae:	4925      	ldr	r1, [pc, #148]	; (8013744 <udp_input_local_match+0xc0>)
 80136b0:	4823      	ldr	r0, [pc, #140]	; (8013740 <udp_input_local_match+0xbc>)
 80136b2:	f003 fae5 	bl	8016c80 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80136b6:	68fb      	ldr	r3, [r7, #12]
 80136b8:	7a1b      	ldrb	r3, [r3, #8]
 80136ba:	2b00      	cmp	r3, #0
 80136bc:	d00b      	beq.n	80136d6 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80136be:	68fb      	ldr	r3, [r7, #12]
 80136c0:	7a1a      	ldrb	r2, [r3, #8]
 80136c2:	4b21      	ldr	r3, [pc, #132]	; (8013748 <udp_input_local_match+0xc4>)
 80136c4:	685b      	ldr	r3, [r3, #4]
 80136c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80136ca:	3301      	adds	r3, #1
 80136cc:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80136ce:	429a      	cmp	r2, r3
 80136d0:	d001      	beq.n	80136d6 <udp_input_local_match+0x52>
    return 0;
 80136d2:	2300      	movs	r3, #0
 80136d4:	e02b      	b.n	801372e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80136d6:	79fb      	ldrb	r3, [r7, #7]
 80136d8:	2b00      	cmp	r3, #0
 80136da:	d018      	beq.n	801370e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80136dc:	68fb      	ldr	r3, [r7, #12]
 80136de:	2b00      	cmp	r3, #0
 80136e0:	d013      	beq.n	801370a <udp_input_local_match+0x86>
 80136e2:	68fb      	ldr	r3, [r7, #12]
 80136e4:	681b      	ldr	r3, [r3, #0]
 80136e6:	2b00      	cmp	r3, #0
 80136e8:	d00f      	beq.n	801370a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80136ea:	4b17      	ldr	r3, [pc, #92]	; (8013748 <udp_input_local_match+0xc4>)
 80136ec:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80136ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80136f2:	d00a      	beq.n	801370a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80136f4:	68fb      	ldr	r3, [r7, #12]
 80136f6:	681a      	ldr	r2, [r3, #0]
 80136f8:	4b13      	ldr	r3, [pc, #76]	; (8013748 <udp_input_local_match+0xc4>)
 80136fa:	695b      	ldr	r3, [r3, #20]
 80136fc:	405a      	eors	r2, r3
 80136fe:	68bb      	ldr	r3, [r7, #8]
 8013700:	3308      	adds	r3, #8
 8013702:	681b      	ldr	r3, [r3, #0]
 8013704:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8013706:	2b00      	cmp	r3, #0
 8013708:	d110      	bne.n	801372c <udp_input_local_match+0xa8>
          return 1;
 801370a:	2301      	movs	r3, #1
 801370c:	e00f      	b.n	801372e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801370e:	68fb      	ldr	r3, [r7, #12]
 8013710:	2b00      	cmp	r3, #0
 8013712:	d009      	beq.n	8013728 <udp_input_local_match+0xa4>
 8013714:	68fb      	ldr	r3, [r7, #12]
 8013716:	681b      	ldr	r3, [r3, #0]
 8013718:	2b00      	cmp	r3, #0
 801371a:	d005      	beq.n	8013728 <udp_input_local_match+0xa4>
 801371c:	68fb      	ldr	r3, [r7, #12]
 801371e:	681a      	ldr	r2, [r3, #0]
 8013720:	4b09      	ldr	r3, [pc, #36]	; (8013748 <udp_input_local_match+0xc4>)
 8013722:	695b      	ldr	r3, [r3, #20]
 8013724:	429a      	cmp	r2, r3
 8013726:	d101      	bne.n	801372c <udp_input_local_match+0xa8>
        return 1;
 8013728:	2301      	movs	r3, #1
 801372a:	e000      	b.n	801372e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801372c:	2300      	movs	r3, #0
}
 801372e:	4618      	mov	r0, r3
 8013730:	3710      	adds	r7, #16
 8013732:	46bd      	mov	sp, r7
 8013734:	bd80      	pop	{r7, pc}
 8013736:	bf00      	nop
 8013738:	0801a0f8 	.word	0x0801a0f8
 801373c:	0801a128 	.word	0x0801a128
 8013740:	0801a14c 	.word	0x0801a14c
 8013744:	0801a174 	.word	0x0801a174
 8013748:	20008d10 	.word	0x20008d10

0801374c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801374c:	b590      	push	{r4, r7, lr}
 801374e:	b08d      	sub	sp, #52	; 0x34
 8013750:	af02      	add	r7, sp, #8
 8013752:	6078      	str	r0, [r7, #4]
 8013754:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8013756:	2300      	movs	r3, #0
 8013758:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801375a:	687b      	ldr	r3, [r7, #4]
 801375c:	2b00      	cmp	r3, #0
 801375e:	d105      	bne.n	801376c <udp_input+0x20>
 8013760:	4b7c      	ldr	r3, [pc, #496]	; (8013954 <udp_input+0x208>)
 8013762:	22cf      	movs	r2, #207	; 0xcf
 8013764:	497c      	ldr	r1, [pc, #496]	; (8013958 <udp_input+0x20c>)
 8013766:	487d      	ldr	r0, [pc, #500]	; (801395c <udp_input+0x210>)
 8013768:	f003 fa8a 	bl	8016c80 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801376c:	683b      	ldr	r3, [r7, #0]
 801376e:	2b00      	cmp	r3, #0
 8013770:	d105      	bne.n	801377e <udp_input+0x32>
 8013772:	4b78      	ldr	r3, [pc, #480]	; (8013954 <udp_input+0x208>)
 8013774:	22d0      	movs	r2, #208	; 0xd0
 8013776:	497a      	ldr	r1, [pc, #488]	; (8013960 <udp_input+0x214>)
 8013778:	4878      	ldr	r0, [pc, #480]	; (801395c <udp_input+0x210>)
 801377a:	f003 fa81 	bl	8016c80 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801377e:	687b      	ldr	r3, [r7, #4]
 8013780:	895b      	ldrh	r3, [r3, #10]
 8013782:	2b07      	cmp	r3, #7
 8013784:	d803      	bhi.n	801378e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8013786:	6878      	ldr	r0, [r7, #4]
 8013788:	f7f9 fa5e 	bl	800cc48 <pbuf_free>
    goto end;
 801378c:	e0de      	b.n	801394c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801378e:	687b      	ldr	r3, [r7, #4]
 8013790:	685b      	ldr	r3, [r3, #4]
 8013792:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8013794:	4b73      	ldr	r3, [pc, #460]	; (8013964 <udp_input+0x218>)
 8013796:	695b      	ldr	r3, [r3, #20]
 8013798:	4a72      	ldr	r2, [pc, #456]	; (8013964 <udp_input+0x218>)
 801379a:	6812      	ldr	r2, [r2, #0]
 801379c:	4611      	mov	r1, r2
 801379e:	4618      	mov	r0, r3
 80137a0:	f001 fcaa 	bl	80150f8 <ip4_addr_isbroadcast_u32>
 80137a4:	4603      	mov	r3, r0
 80137a6:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80137a8:	697b      	ldr	r3, [r7, #20]
 80137aa:	881b      	ldrh	r3, [r3, #0]
 80137ac:	b29b      	uxth	r3, r3
 80137ae:	4618      	mov	r0, r3
 80137b0:	f7f7 fdee 	bl	800b390 <lwip_htons>
 80137b4:	4603      	mov	r3, r0
 80137b6:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80137b8:	697b      	ldr	r3, [r7, #20]
 80137ba:	885b      	ldrh	r3, [r3, #2]
 80137bc:	b29b      	uxth	r3, r3
 80137be:	4618      	mov	r0, r3
 80137c0:	f7f7 fde6 	bl	800b390 <lwip_htons>
 80137c4:	4603      	mov	r3, r0
 80137c6:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80137c8:	2300      	movs	r3, #0
 80137ca:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 80137cc:	2300      	movs	r3, #0
 80137ce:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80137d0:	2300      	movs	r3, #0
 80137d2:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80137d4:	4b64      	ldr	r3, [pc, #400]	; (8013968 <udp_input+0x21c>)
 80137d6:	681b      	ldr	r3, [r3, #0]
 80137d8:	627b      	str	r3, [r7, #36]	; 0x24
 80137da:	e054      	b.n	8013886 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80137dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137de:	8a5b      	ldrh	r3, [r3, #18]
 80137e0:	89fa      	ldrh	r2, [r7, #14]
 80137e2:	429a      	cmp	r2, r3
 80137e4:	d14a      	bne.n	801387c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80137e6:	7cfb      	ldrb	r3, [r7, #19]
 80137e8:	461a      	mov	r2, r3
 80137ea:	6839      	ldr	r1, [r7, #0]
 80137ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80137ee:	f7ff ff49 	bl	8013684 <udp_input_local_match>
 80137f2:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80137f4:	2b00      	cmp	r3, #0
 80137f6:	d041      	beq.n	801387c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80137f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137fa:	7c1b      	ldrb	r3, [r3, #16]
 80137fc:	f003 0304 	and.w	r3, r3, #4
 8013800:	2b00      	cmp	r3, #0
 8013802:	d11d      	bne.n	8013840 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8013804:	69fb      	ldr	r3, [r7, #28]
 8013806:	2b00      	cmp	r3, #0
 8013808:	d102      	bne.n	8013810 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801380a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801380c:	61fb      	str	r3, [r7, #28]
 801380e:	e017      	b.n	8013840 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8013810:	7cfb      	ldrb	r3, [r7, #19]
 8013812:	2b00      	cmp	r3, #0
 8013814:	d014      	beq.n	8013840 <udp_input+0xf4>
 8013816:	4b53      	ldr	r3, [pc, #332]	; (8013964 <udp_input+0x218>)
 8013818:	695b      	ldr	r3, [r3, #20]
 801381a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801381e:	d10f      	bne.n	8013840 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8013820:	69fb      	ldr	r3, [r7, #28]
 8013822:	681a      	ldr	r2, [r3, #0]
 8013824:	683b      	ldr	r3, [r7, #0]
 8013826:	3304      	adds	r3, #4
 8013828:	681b      	ldr	r3, [r3, #0]
 801382a:	429a      	cmp	r2, r3
 801382c:	d008      	beq.n	8013840 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801382e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013830:	681a      	ldr	r2, [r3, #0]
 8013832:	683b      	ldr	r3, [r7, #0]
 8013834:	3304      	adds	r3, #4
 8013836:	681b      	ldr	r3, [r3, #0]
 8013838:	429a      	cmp	r2, r3
 801383a:	d101      	bne.n	8013840 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801383c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801383e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8013840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013842:	8a9b      	ldrh	r3, [r3, #20]
 8013844:	8a3a      	ldrh	r2, [r7, #16]
 8013846:	429a      	cmp	r2, r3
 8013848:	d118      	bne.n	801387c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801384a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801384c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801384e:	2b00      	cmp	r3, #0
 8013850:	d005      	beq.n	801385e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8013852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013854:	685a      	ldr	r2, [r3, #4]
 8013856:	4b43      	ldr	r3, [pc, #268]	; (8013964 <udp_input+0x218>)
 8013858:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801385a:	429a      	cmp	r2, r3
 801385c:	d10e      	bne.n	801387c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801385e:	6a3b      	ldr	r3, [r7, #32]
 8013860:	2b00      	cmp	r3, #0
 8013862:	d014      	beq.n	801388e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8013864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013866:	68da      	ldr	r2, [r3, #12]
 8013868:	6a3b      	ldr	r3, [r7, #32]
 801386a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801386c:	4b3e      	ldr	r3, [pc, #248]	; (8013968 <udp_input+0x21c>)
 801386e:	681a      	ldr	r2, [r3, #0]
 8013870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013872:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8013874:	4a3c      	ldr	r2, [pc, #240]	; (8013968 <udp_input+0x21c>)
 8013876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013878:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801387a:	e008      	b.n	801388e <udp_input+0x142>
      }
    }

    prev = pcb;
 801387c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801387e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013882:	68db      	ldr	r3, [r3, #12]
 8013884:	627b      	str	r3, [r7, #36]	; 0x24
 8013886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013888:	2b00      	cmp	r3, #0
 801388a:	d1a7      	bne.n	80137dc <udp_input+0x90>
 801388c:	e000      	b.n	8013890 <udp_input+0x144>
        break;
 801388e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8013890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013892:	2b00      	cmp	r3, #0
 8013894:	d101      	bne.n	801389a <udp_input+0x14e>
    pcb = uncon_pcb;
 8013896:	69fb      	ldr	r3, [r7, #28]
 8013898:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801389a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801389c:	2b00      	cmp	r3, #0
 801389e:	d002      	beq.n	80138a6 <udp_input+0x15a>
    for_us = 1;
 80138a0:	2301      	movs	r3, #1
 80138a2:	76fb      	strb	r3, [r7, #27]
 80138a4:	e00a      	b.n	80138bc <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80138a6:	683b      	ldr	r3, [r7, #0]
 80138a8:	3304      	adds	r3, #4
 80138aa:	681a      	ldr	r2, [r3, #0]
 80138ac:	4b2d      	ldr	r3, [pc, #180]	; (8013964 <udp_input+0x218>)
 80138ae:	695b      	ldr	r3, [r3, #20]
 80138b0:	429a      	cmp	r2, r3
 80138b2:	bf0c      	ite	eq
 80138b4:	2301      	moveq	r3, #1
 80138b6:	2300      	movne	r3, #0
 80138b8:	b2db      	uxtb	r3, r3
 80138ba:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80138bc:	7efb      	ldrb	r3, [r7, #27]
 80138be:	2b00      	cmp	r3, #0
 80138c0:	d041      	beq.n	8013946 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80138c2:	2108      	movs	r1, #8
 80138c4:	6878      	ldr	r0, [r7, #4]
 80138c6:	f7f9 f939 	bl	800cb3c <pbuf_remove_header>
 80138ca:	4603      	mov	r3, r0
 80138cc:	2b00      	cmp	r3, #0
 80138ce:	d00a      	beq.n	80138e6 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80138d0:	4b20      	ldr	r3, [pc, #128]	; (8013954 <udp_input+0x208>)
 80138d2:	f44f 72b8 	mov.w	r2, #368	; 0x170
 80138d6:	4925      	ldr	r1, [pc, #148]	; (801396c <udp_input+0x220>)
 80138d8:	4820      	ldr	r0, [pc, #128]	; (801395c <udp_input+0x210>)
 80138da:	f003 f9d1 	bl	8016c80 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80138de:	6878      	ldr	r0, [r7, #4]
 80138e0:	f7f9 f9b2 	bl	800cc48 <pbuf_free>
      goto end;
 80138e4:	e032      	b.n	801394c <udp_input+0x200>
    }

    if (pcb != NULL) {
 80138e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138e8:	2b00      	cmp	r3, #0
 80138ea:	d012      	beq.n	8013912 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80138ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138ee:	699b      	ldr	r3, [r3, #24]
 80138f0:	2b00      	cmp	r3, #0
 80138f2:	d00a      	beq.n	801390a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80138f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138f6:	699c      	ldr	r4, [r3, #24]
 80138f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138fa:	69d8      	ldr	r0, [r3, #28]
 80138fc:	8a3b      	ldrh	r3, [r7, #16]
 80138fe:	9300      	str	r3, [sp, #0]
 8013900:	4b1b      	ldr	r3, [pc, #108]	; (8013970 <udp_input+0x224>)
 8013902:	687a      	ldr	r2, [r7, #4]
 8013904:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013906:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8013908:	e021      	b.n	801394e <udp_input+0x202>
        pbuf_free(p);
 801390a:	6878      	ldr	r0, [r7, #4]
 801390c:	f7f9 f99c 	bl	800cc48 <pbuf_free>
        goto end;
 8013910:	e01c      	b.n	801394c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8013912:	7cfb      	ldrb	r3, [r7, #19]
 8013914:	2b00      	cmp	r3, #0
 8013916:	d112      	bne.n	801393e <udp_input+0x1f2>
 8013918:	4b12      	ldr	r3, [pc, #72]	; (8013964 <udp_input+0x218>)
 801391a:	695b      	ldr	r3, [r3, #20]
 801391c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013920:	2be0      	cmp	r3, #224	; 0xe0
 8013922:	d00c      	beq.n	801393e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8013924:	4b0f      	ldr	r3, [pc, #60]	; (8013964 <udp_input+0x218>)
 8013926:	899b      	ldrh	r3, [r3, #12]
 8013928:	3308      	adds	r3, #8
 801392a:	b29b      	uxth	r3, r3
 801392c:	b21b      	sxth	r3, r3
 801392e:	4619      	mov	r1, r3
 8013930:	6878      	ldr	r0, [r7, #4]
 8013932:	f7f9 f976 	bl	800cc22 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8013936:	2103      	movs	r1, #3
 8013938:	6878      	ldr	r0, [r7, #4]
 801393a:	f001 f8b5 	bl	8014aa8 <icmp_dest_unreach>
      pbuf_free(p);
 801393e:	6878      	ldr	r0, [r7, #4]
 8013940:	f7f9 f982 	bl	800cc48 <pbuf_free>
  return;
 8013944:	e003      	b.n	801394e <udp_input+0x202>
    pbuf_free(p);
 8013946:	6878      	ldr	r0, [r7, #4]
 8013948:	f7f9 f97e 	bl	800cc48 <pbuf_free>
  return;
 801394c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801394e:	372c      	adds	r7, #44	; 0x2c
 8013950:	46bd      	mov	sp, r7
 8013952:	bd90      	pop	{r4, r7, pc}
 8013954:	0801a0f8 	.word	0x0801a0f8
 8013958:	0801a19c 	.word	0x0801a19c
 801395c:	0801a14c 	.word	0x0801a14c
 8013960:	0801a1b4 	.word	0x0801a1b4
 8013964:	20008d10 	.word	0x20008d10
 8013968:	2000be6c 	.word	0x2000be6c
 801396c:	0801a1d0 	.word	0x0801a1d0
 8013970:	20008d20 	.word	0x20008d20

08013974 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8013974:	b480      	push	{r7}
 8013976:	b085      	sub	sp, #20
 8013978:	af00      	add	r7, sp, #0
 801397a:	6078      	str	r0, [r7, #4]
 801397c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801397e:	687b      	ldr	r3, [r7, #4]
 8013980:	2b00      	cmp	r3, #0
 8013982:	d01e      	beq.n	80139c2 <udp_netif_ip_addr_changed+0x4e>
 8013984:	687b      	ldr	r3, [r7, #4]
 8013986:	681b      	ldr	r3, [r3, #0]
 8013988:	2b00      	cmp	r3, #0
 801398a:	d01a      	beq.n	80139c2 <udp_netif_ip_addr_changed+0x4e>
 801398c:	683b      	ldr	r3, [r7, #0]
 801398e:	2b00      	cmp	r3, #0
 8013990:	d017      	beq.n	80139c2 <udp_netif_ip_addr_changed+0x4e>
 8013992:	683b      	ldr	r3, [r7, #0]
 8013994:	681b      	ldr	r3, [r3, #0]
 8013996:	2b00      	cmp	r3, #0
 8013998:	d013      	beq.n	80139c2 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801399a:	4b0c      	ldr	r3, [pc, #48]	; (80139cc <udp_netif_ip_addr_changed+0x58>)
 801399c:	681b      	ldr	r3, [r3, #0]
 801399e:	60fb      	str	r3, [r7, #12]
 80139a0:	e00c      	b.n	80139bc <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80139a2:	68fb      	ldr	r3, [r7, #12]
 80139a4:	681a      	ldr	r2, [r3, #0]
 80139a6:	687b      	ldr	r3, [r7, #4]
 80139a8:	681b      	ldr	r3, [r3, #0]
 80139aa:	429a      	cmp	r2, r3
 80139ac:	d103      	bne.n	80139b6 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80139ae:	683b      	ldr	r3, [r7, #0]
 80139b0:	681a      	ldr	r2, [r3, #0]
 80139b2:	68fb      	ldr	r3, [r7, #12]
 80139b4:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80139b6:	68fb      	ldr	r3, [r7, #12]
 80139b8:	68db      	ldr	r3, [r3, #12]
 80139ba:	60fb      	str	r3, [r7, #12]
 80139bc:	68fb      	ldr	r3, [r7, #12]
 80139be:	2b00      	cmp	r3, #0
 80139c0:	d1ef      	bne.n	80139a2 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80139c2:	bf00      	nop
 80139c4:	3714      	adds	r7, #20
 80139c6:	46bd      	mov	sp, r7
 80139c8:	bc80      	pop	{r7}
 80139ca:	4770      	bx	lr
 80139cc:	2000be6c 	.word	0x2000be6c

080139d0 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80139d0:	b580      	push	{r7, lr}
 80139d2:	b082      	sub	sp, #8
 80139d4:	af00      	add	r7, sp, #0
 80139d6:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80139d8:	4915      	ldr	r1, [pc, #84]	; (8013a30 <etharp_free_entry+0x60>)
 80139da:	687a      	ldr	r2, [r7, #4]
 80139dc:	4613      	mov	r3, r2
 80139de:	005b      	lsls	r3, r3, #1
 80139e0:	4413      	add	r3, r2
 80139e2:	00db      	lsls	r3, r3, #3
 80139e4:	440b      	add	r3, r1
 80139e6:	681b      	ldr	r3, [r3, #0]
 80139e8:	2b00      	cmp	r3, #0
 80139ea:	d013      	beq.n	8013a14 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80139ec:	4910      	ldr	r1, [pc, #64]	; (8013a30 <etharp_free_entry+0x60>)
 80139ee:	687a      	ldr	r2, [r7, #4]
 80139f0:	4613      	mov	r3, r2
 80139f2:	005b      	lsls	r3, r3, #1
 80139f4:	4413      	add	r3, r2
 80139f6:	00db      	lsls	r3, r3, #3
 80139f8:	440b      	add	r3, r1
 80139fa:	681b      	ldr	r3, [r3, #0]
 80139fc:	4618      	mov	r0, r3
 80139fe:	f7f9 f923 	bl	800cc48 <pbuf_free>
    arp_table[i].q = NULL;
 8013a02:	490b      	ldr	r1, [pc, #44]	; (8013a30 <etharp_free_entry+0x60>)
 8013a04:	687a      	ldr	r2, [r7, #4]
 8013a06:	4613      	mov	r3, r2
 8013a08:	005b      	lsls	r3, r3, #1
 8013a0a:	4413      	add	r3, r2
 8013a0c:	00db      	lsls	r3, r3, #3
 8013a0e:	440b      	add	r3, r1
 8013a10:	2200      	movs	r2, #0
 8013a12:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8013a14:	4906      	ldr	r1, [pc, #24]	; (8013a30 <etharp_free_entry+0x60>)
 8013a16:	687a      	ldr	r2, [r7, #4]
 8013a18:	4613      	mov	r3, r2
 8013a1a:	005b      	lsls	r3, r3, #1
 8013a1c:	4413      	add	r3, r2
 8013a1e:	00db      	lsls	r3, r3, #3
 8013a20:	440b      	add	r3, r1
 8013a22:	3314      	adds	r3, #20
 8013a24:	2200      	movs	r2, #0
 8013a26:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8013a28:	bf00      	nop
 8013a2a:	3708      	adds	r7, #8
 8013a2c:	46bd      	mov	sp, r7
 8013a2e:	bd80      	pop	{r7, pc}
 8013a30:	2000be70 	.word	0x2000be70

08013a34 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8013a34:	b580      	push	{r7, lr}
 8013a36:	b082      	sub	sp, #8
 8013a38:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013a3a:	2300      	movs	r3, #0
 8013a3c:	607b      	str	r3, [r7, #4]
 8013a3e:	e096      	b.n	8013b6e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8013a40:	494f      	ldr	r1, [pc, #316]	; (8013b80 <etharp_tmr+0x14c>)
 8013a42:	687a      	ldr	r2, [r7, #4]
 8013a44:	4613      	mov	r3, r2
 8013a46:	005b      	lsls	r3, r3, #1
 8013a48:	4413      	add	r3, r2
 8013a4a:	00db      	lsls	r3, r3, #3
 8013a4c:	440b      	add	r3, r1
 8013a4e:	3314      	adds	r3, #20
 8013a50:	781b      	ldrb	r3, [r3, #0]
 8013a52:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8013a54:	78fb      	ldrb	r3, [r7, #3]
 8013a56:	2b00      	cmp	r3, #0
 8013a58:	f000 8086 	beq.w	8013b68 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8013a5c:	4948      	ldr	r1, [pc, #288]	; (8013b80 <etharp_tmr+0x14c>)
 8013a5e:	687a      	ldr	r2, [r7, #4]
 8013a60:	4613      	mov	r3, r2
 8013a62:	005b      	lsls	r3, r3, #1
 8013a64:	4413      	add	r3, r2
 8013a66:	00db      	lsls	r3, r3, #3
 8013a68:	440b      	add	r3, r1
 8013a6a:	3312      	adds	r3, #18
 8013a6c:	881b      	ldrh	r3, [r3, #0]
 8013a6e:	3301      	adds	r3, #1
 8013a70:	b298      	uxth	r0, r3
 8013a72:	4943      	ldr	r1, [pc, #268]	; (8013b80 <etharp_tmr+0x14c>)
 8013a74:	687a      	ldr	r2, [r7, #4]
 8013a76:	4613      	mov	r3, r2
 8013a78:	005b      	lsls	r3, r3, #1
 8013a7a:	4413      	add	r3, r2
 8013a7c:	00db      	lsls	r3, r3, #3
 8013a7e:	440b      	add	r3, r1
 8013a80:	3312      	adds	r3, #18
 8013a82:	4602      	mov	r2, r0
 8013a84:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8013a86:	493e      	ldr	r1, [pc, #248]	; (8013b80 <etharp_tmr+0x14c>)
 8013a88:	687a      	ldr	r2, [r7, #4]
 8013a8a:	4613      	mov	r3, r2
 8013a8c:	005b      	lsls	r3, r3, #1
 8013a8e:	4413      	add	r3, r2
 8013a90:	00db      	lsls	r3, r3, #3
 8013a92:	440b      	add	r3, r1
 8013a94:	3312      	adds	r3, #18
 8013a96:	881b      	ldrh	r3, [r3, #0]
 8013a98:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8013a9c:	d215      	bcs.n	8013aca <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8013a9e:	4938      	ldr	r1, [pc, #224]	; (8013b80 <etharp_tmr+0x14c>)
 8013aa0:	687a      	ldr	r2, [r7, #4]
 8013aa2:	4613      	mov	r3, r2
 8013aa4:	005b      	lsls	r3, r3, #1
 8013aa6:	4413      	add	r3, r2
 8013aa8:	00db      	lsls	r3, r3, #3
 8013aaa:	440b      	add	r3, r1
 8013aac:	3314      	adds	r3, #20
 8013aae:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8013ab0:	2b01      	cmp	r3, #1
 8013ab2:	d10e      	bne.n	8013ad2 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8013ab4:	4932      	ldr	r1, [pc, #200]	; (8013b80 <etharp_tmr+0x14c>)
 8013ab6:	687a      	ldr	r2, [r7, #4]
 8013ab8:	4613      	mov	r3, r2
 8013aba:	005b      	lsls	r3, r3, #1
 8013abc:	4413      	add	r3, r2
 8013abe:	00db      	lsls	r3, r3, #3
 8013ac0:	440b      	add	r3, r1
 8013ac2:	3312      	adds	r3, #18
 8013ac4:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8013ac6:	2b04      	cmp	r3, #4
 8013ac8:	d903      	bls.n	8013ad2 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8013aca:	6878      	ldr	r0, [r7, #4]
 8013acc:	f7ff ff80 	bl	80139d0 <etharp_free_entry>
 8013ad0:	e04a      	b.n	8013b68 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8013ad2:	492b      	ldr	r1, [pc, #172]	; (8013b80 <etharp_tmr+0x14c>)
 8013ad4:	687a      	ldr	r2, [r7, #4]
 8013ad6:	4613      	mov	r3, r2
 8013ad8:	005b      	lsls	r3, r3, #1
 8013ada:	4413      	add	r3, r2
 8013adc:	00db      	lsls	r3, r3, #3
 8013ade:	440b      	add	r3, r1
 8013ae0:	3314      	adds	r3, #20
 8013ae2:	781b      	ldrb	r3, [r3, #0]
 8013ae4:	2b03      	cmp	r3, #3
 8013ae6:	d10a      	bne.n	8013afe <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8013ae8:	4925      	ldr	r1, [pc, #148]	; (8013b80 <etharp_tmr+0x14c>)
 8013aea:	687a      	ldr	r2, [r7, #4]
 8013aec:	4613      	mov	r3, r2
 8013aee:	005b      	lsls	r3, r3, #1
 8013af0:	4413      	add	r3, r2
 8013af2:	00db      	lsls	r3, r3, #3
 8013af4:	440b      	add	r3, r1
 8013af6:	3314      	adds	r3, #20
 8013af8:	2204      	movs	r2, #4
 8013afa:	701a      	strb	r2, [r3, #0]
 8013afc:	e034      	b.n	8013b68 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8013afe:	4920      	ldr	r1, [pc, #128]	; (8013b80 <etharp_tmr+0x14c>)
 8013b00:	687a      	ldr	r2, [r7, #4]
 8013b02:	4613      	mov	r3, r2
 8013b04:	005b      	lsls	r3, r3, #1
 8013b06:	4413      	add	r3, r2
 8013b08:	00db      	lsls	r3, r3, #3
 8013b0a:	440b      	add	r3, r1
 8013b0c:	3314      	adds	r3, #20
 8013b0e:	781b      	ldrb	r3, [r3, #0]
 8013b10:	2b04      	cmp	r3, #4
 8013b12:	d10a      	bne.n	8013b2a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8013b14:	491a      	ldr	r1, [pc, #104]	; (8013b80 <etharp_tmr+0x14c>)
 8013b16:	687a      	ldr	r2, [r7, #4]
 8013b18:	4613      	mov	r3, r2
 8013b1a:	005b      	lsls	r3, r3, #1
 8013b1c:	4413      	add	r3, r2
 8013b1e:	00db      	lsls	r3, r3, #3
 8013b20:	440b      	add	r3, r1
 8013b22:	3314      	adds	r3, #20
 8013b24:	2202      	movs	r2, #2
 8013b26:	701a      	strb	r2, [r3, #0]
 8013b28:	e01e      	b.n	8013b68 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8013b2a:	4915      	ldr	r1, [pc, #84]	; (8013b80 <etharp_tmr+0x14c>)
 8013b2c:	687a      	ldr	r2, [r7, #4]
 8013b2e:	4613      	mov	r3, r2
 8013b30:	005b      	lsls	r3, r3, #1
 8013b32:	4413      	add	r3, r2
 8013b34:	00db      	lsls	r3, r3, #3
 8013b36:	440b      	add	r3, r1
 8013b38:	3314      	adds	r3, #20
 8013b3a:	781b      	ldrb	r3, [r3, #0]
 8013b3c:	2b01      	cmp	r3, #1
 8013b3e:	d113      	bne.n	8013b68 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8013b40:	490f      	ldr	r1, [pc, #60]	; (8013b80 <etharp_tmr+0x14c>)
 8013b42:	687a      	ldr	r2, [r7, #4]
 8013b44:	4613      	mov	r3, r2
 8013b46:	005b      	lsls	r3, r3, #1
 8013b48:	4413      	add	r3, r2
 8013b4a:	00db      	lsls	r3, r3, #3
 8013b4c:	440b      	add	r3, r1
 8013b4e:	3308      	adds	r3, #8
 8013b50:	6818      	ldr	r0, [r3, #0]
 8013b52:	687a      	ldr	r2, [r7, #4]
 8013b54:	4613      	mov	r3, r2
 8013b56:	005b      	lsls	r3, r3, #1
 8013b58:	4413      	add	r3, r2
 8013b5a:	00db      	lsls	r3, r3, #3
 8013b5c:	4a08      	ldr	r2, [pc, #32]	; (8013b80 <etharp_tmr+0x14c>)
 8013b5e:	4413      	add	r3, r2
 8013b60:	3304      	adds	r3, #4
 8013b62:	4619      	mov	r1, r3
 8013b64:	f000 fe6e 	bl	8014844 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013b68:	687b      	ldr	r3, [r7, #4]
 8013b6a:	3301      	adds	r3, #1
 8013b6c:	607b      	str	r3, [r7, #4]
 8013b6e:	687b      	ldr	r3, [r7, #4]
 8013b70:	2b09      	cmp	r3, #9
 8013b72:	f77f af65 	ble.w	8013a40 <etharp_tmr+0xc>
      }
    }
  }
}
 8013b76:	bf00      	nop
 8013b78:	bf00      	nop
 8013b7a:	3708      	adds	r7, #8
 8013b7c:	46bd      	mov	sp, r7
 8013b7e:	bd80      	pop	{r7, pc}
 8013b80:	2000be70 	.word	0x2000be70

08013b84 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8013b84:	b580      	push	{r7, lr}
 8013b86:	b08a      	sub	sp, #40	; 0x28
 8013b88:	af00      	add	r7, sp, #0
 8013b8a:	60f8      	str	r0, [r7, #12]
 8013b8c:	460b      	mov	r3, r1
 8013b8e:	607a      	str	r2, [r7, #4]
 8013b90:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8013b92:	230a      	movs	r3, #10
 8013b94:	84fb      	strh	r3, [r7, #38]	; 0x26
 8013b96:	230a      	movs	r3, #10
 8013b98:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8013b9a:	230a      	movs	r3, #10
 8013b9c:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8013b9e:	2300      	movs	r3, #0
 8013ba0:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8013ba2:	230a      	movs	r3, #10
 8013ba4:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8013ba6:	2300      	movs	r3, #0
 8013ba8:	83bb      	strh	r3, [r7, #28]
 8013baa:	2300      	movs	r3, #0
 8013bac:	837b      	strh	r3, [r7, #26]
 8013bae:	2300      	movs	r3, #0
 8013bb0:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013bb2:	2300      	movs	r3, #0
 8013bb4:	843b      	strh	r3, [r7, #32]
 8013bb6:	e0ae      	b.n	8013d16 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8013bb8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013bbc:	49a6      	ldr	r1, [pc, #664]	; (8013e58 <etharp_find_entry+0x2d4>)
 8013bbe:	4613      	mov	r3, r2
 8013bc0:	005b      	lsls	r3, r3, #1
 8013bc2:	4413      	add	r3, r2
 8013bc4:	00db      	lsls	r3, r3, #3
 8013bc6:	440b      	add	r3, r1
 8013bc8:	3314      	adds	r3, #20
 8013bca:	781b      	ldrb	r3, [r3, #0]
 8013bcc:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8013bce:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8013bd2:	2b0a      	cmp	r3, #10
 8013bd4:	d105      	bne.n	8013be2 <etharp_find_entry+0x5e>
 8013bd6:	7dfb      	ldrb	r3, [r7, #23]
 8013bd8:	2b00      	cmp	r3, #0
 8013bda:	d102      	bne.n	8013be2 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8013bdc:	8c3b      	ldrh	r3, [r7, #32]
 8013bde:	847b      	strh	r3, [r7, #34]	; 0x22
 8013be0:	e095      	b.n	8013d0e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8013be2:	7dfb      	ldrb	r3, [r7, #23]
 8013be4:	2b00      	cmp	r3, #0
 8013be6:	f000 8092 	beq.w	8013d0e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8013bea:	7dfb      	ldrb	r3, [r7, #23]
 8013bec:	2b01      	cmp	r3, #1
 8013bee:	d009      	beq.n	8013c04 <etharp_find_entry+0x80>
 8013bf0:	7dfb      	ldrb	r3, [r7, #23]
 8013bf2:	2b01      	cmp	r3, #1
 8013bf4:	d806      	bhi.n	8013c04 <etharp_find_entry+0x80>
 8013bf6:	4b99      	ldr	r3, [pc, #612]	; (8013e5c <etharp_find_entry+0x2d8>)
 8013bf8:	f240 1223 	movw	r2, #291	; 0x123
 8013bfc:	4998      	ldr	r1, [pc, #608]	; (8013e60 <etharp_find_entry+0x2dc>)
 8013bfe:	4899      	ldr	r0, [pc, #612]	; (8013e64 <etharp_find_entry+0x2e0>)
 8013c00:	f003 f83e 	bl	8016c80 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8013c04:	68fb      	ldr	r3, [r7, #12]
 8013c06:	2b00      	cmp	r3, #0
 8013c08:	d020      	beq.n	8013c4c <etharp_find_entry+0xc8>
 8013c0a:	68fb      	ldr	r3, [r7, #12]
 8013c0c:	6819      	ldr	r1, [r3, #0]
 8013c0e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013c12:	4891      	ldr	r0, [pc, #580]	; (8013e58 <etharp_find_entry+0x2d4>)
 8013c14:	4613      	mov	r3, r2
 8013c16:	005b      	lsls	r3, r3, #1
 8013c18:	4413      	add	r3, r2
 8013c1a:	00db      	lsls	r3, r3, #3
 8013c1c:	4403      	add	r3, r0
 8013c1e:	3304      	adds	r3, #4
 8013c20:	681b      	ldr	r3, [r3, #0]
 8013c22:	4299      	cmp	r1, r3
 8013c24:	d112      	bne.n	8013c4c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8013c26:	687b      	ldr	r3, [r7, #4]
 8013c28:	2b00      	cmp	r3, #0
 8013c2a:	d00c      	beq.n	8013c46 <etharp_find_entry+0xc2>
 8013c2c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013c30:	4989      	ldr	r1, [pc, #548]	; (8013e58 <etharp_find_entry+0x2d4>)
 8013c32:	4613      	mov	r3, r2
 8013c34:	005b      	lsls	r3, r3, #1
 8013c36:	4413      	add	r3, r2
 8013c38:	00db      	lsls	r3, r3, #3
 8013c3a:	440b      	add	r3, r1
 8013c3c:	3308      	adds	r3, #8
 8013c3e:	681b      	ldr	r3, [r3, #0]
 8013c40:	687a      	ldr	r2, [r7, #4]
 8013c42:	429a      	cmp	r2, r3
 8013c44:	d102      	bne.n	8013c4c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8013c46:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013c4a:	e100      	b.n	8013e4e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8013c4c:	7dfb      	ldrb	r3, [r7, #23]
 8013c4e:	2b01      	cmp	r3, #1
 8013c50:	d140      	bne.n	8013cd4 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8013c52:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013c56:	4980      	ldr	r1, [pc, #512]	; (8013e58 <etharp_find_entry+0x2d4>)
 8013c58:	4613      	mov	r3, r2
 8013c5a:	005b      	lsls	r3, r3, #1
 8013c5c:	4413      	add	r3, r2
 8013c5e:	00db      	lsls	r3, r3, #3
 8013c60:	440b      	add	r3, r1
 8013c62:	681b      	ldr	r3, [r3, #0]
 8013c64:	2b00      	cmp	r3, #0
 8013c66:	d01a      	beq.n	8013c9e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8013c68:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013c6c:	497a      	ldr	r1, [pc, #488]	; (8013e58 <etharp_find_entry+0x2d4>)
 8013c6e:	4613      	mov	r3, r2
 8013c70:	005b      	lsls	r3, r3, #1
 8013c72:	4413      	add	r3, r2
 8013c74:	00db      	lsls	r3, r3, #3
 8013c76:	440b      	add	r3, r1
 8013c78:	3312      	adds	r3, #18
 8013c7a:	881b      	ldrh	r3, [r3, #0]
 8013c7c:	8bba      	ldrh	r2, [r7, #28]
 8013c7e:	429a      	cmp	r2, r3
 8013c80:	d845      	bhi.n	8013d0e <etharp_find_entry+0x18a>
            old_queue = i;
 8013c82:	8c3b      	ldrh	r3, [r7, #32]
 8013c84:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8013c86:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013c8a:	4973      	ldr	r1, [pc, #460]	; (8013e58 <etharp_find_entry+0x2d4>)
 8013c8c:	4613      	mov	r3, r2
 8013c8e:	005b      	lsls	r3, r3, #1
 8013c90:	4413      	add	r3, r2
 8013c92:	00db      	lsls	r3, r3, #3
 8013c94:	440b      	add	r3, r1
 8013c96:	3312      	adds	r3, #18
 8013c98:	881b      	ldrh	r3, [r3, #0]
 8013c9a:	83bb      	strh	r3, [r7, #28]
 8013c9c:	e037      	b.n	8013d0e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8013c9e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013ca2:	496d      	ldr	r1, [pc, #436]	; (8013e58 <etharp_find_entry+0x2d4>)
 8013ca4:	4613      	mov	r3, r2
 8013ca6:	005b      	lsls	r3, r3, #1
 8013ca8:	4413      	add	r3, r2
 8013caa:	00db      	lsls	r3, r3, #3
 8013cac:	440b      	add	r3, r1
 8013cae:	3312      	adds	r3, #18
 8013cb0:	881b      	ldrh	r3, [r3, #0]
 8013cb2:	8b7a      	ldrh	r2, [r7, #26]
 8013cb4:	429a      	cmp	r2, r3
 8013cb6:	d82a      	bhi.n	8013d0e <etharp_find_entry+0x18a>
            old_pending = i;
 8013cb8:	8c3b      	ldrh	r3, [r7, #32]
 8013cba:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8013cbc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013cc0:	4965      	ldr	r1, [pc, #404]	; (8013e58 <etharp_find_entry+0x2d4>)
 8013cc2:	4613      	mov	r3, r2
 8013cc4:	005b      	lsls	r3, r3, #1
 8013cc6:	4413      	add	r3, r2
 8013cc8:	00db      	lsls	r3, r3, #3
 8013cca:	440b      	add	r3, r1
 8013ccc:	3312      	adds	r3, #18
 8013cce:	881b      	ldrh	r3, [r3, #0]
 8013cd0:	837b      	strh	r3, [r7, #26]
 8013cd2:	e01c      	b.n	8013d0e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8013cd4:	7dfb      	ldrb	r3, [r7, #23]
 8013cd6:	2b01      	cmp	r3, #1
 8013cd8:	d919      	bls.n	8013d0e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8013cda:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013cde:	495e      	ldr	r1, [pc, #376]	; (8013e58 <etharp_find_entry+0x2d4>)
 8013ce0:	4613      	mov	r3, r2
 8013ce2:	005b      	lsls	r3, r3, #1
 8013ce4:	4413      	add	r3, r2
 8013ce6:	00db      	lsls	r3, r3, #3
 8013ce8:	440b      	add	r3, r1
 8013cea:	3312      	adds	r3, #18
 8013cec:	881b      	ldrh	r3, [r3, #0]
 8013cee:	8b3a      	ldrh	r2, [r7, #24]
 8013cf0:	429a      	cmp	r2, r3
 8013cf2:	d80c      	bhi.n	8013d0e <etharp_find_entry+0x18a>
            old_stable = i;
 8013cf4:	8c3b      	ldrh	r3, [r7, #32]
 8013cf6:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8013cf8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013cfc:	4956      	ldr	r1, [pc, #344]	; (8013e58 <etharp_find_entry+0x2d4>)
 8013cfe:	4613      	mov	r3, r2
 8013d00:	005b      	lsls	r3, r3, #1
 8013d02:	4413      	add	r3, r2
 8013d04:	00db      	lsls	r3, r3, #3
 8013d06:	440b      	add	r3, r1
 8013d08:	3312      	adds	r3, #18
 8013d0a:	881b      	ldrh	r3, [r3, #0]
 8013d0c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013d0e:	8c3b      	ldrh	r3, [r7, #32]
 8013d10:	3301      	adds	r3, #1
 8013d12:	b29b      	uxth	r3, r3
 8013d14:	843b      	strh	r3, [r7, #32]
 8013d16:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013d1a:	2b09      	cmp	r3, #9
 8013d1c:	f77f af4c 	ble.w	8013bb8 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8013d20:	7afb      	ldrb	r3, [r7, #11]
 8013d22:	f003 0302 	and.w	r3, r3, #2
 8013d26:	2b00      	cmp	r3, #0
 8013d28:	d108      	bne.n	8013d3c <etharp_find_entry+0x1b8>
 8013d2a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8013d2e:	2b0a      	cmp	r3, #10
 8013d30:	d107      	bne.n	8013d42 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8013d32:	7afb      	ldrb	r3, [r7, #11]
 8013d34:	f003 0301 	and.w	r3, r3, #1
 8013d38:	2b00      	cmp	r3, #0
 8013d3a:	d102      	bne.n	8013d42 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8013d3c:	f04f 33ff 	mov.w	r3, #4294967295
 8013d40:	e085      	b.n	8013e4e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8013d42:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8013d46:	2b09      	cmp	r3, #9
 8013d48:	dc02      	bgt.n	8013d50 <etharp_find_entry+0x1cc>
    i = empty;
 8013d4a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013d4c:	843b      	strh	r3, [r7, #32]
 8013d4e:	e039      	b.n	8013dc4 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8013d50:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8013d54:	2b09      	cmp	r3, #9
 8013d56:	dc14      	bgt.n	8013d82 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8013d58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013d5a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8013d5c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013d60:	493d      	ldr	r1, [pc, #244]	; (8013e58 <etharp_find_entry+0x2d4>)
 8013d62:	4613      	mov	r3, r2
 8013d64:	005b      	lsls	r3, r3, #1
 8013d66:	4413      	add	r3, r2
 8013d68:	00db      	lsls	r3, r3, #3
 8013d6a:	440b      	add	r3, r1
 8013d6c:	681b      	ldr	r3, [r3, #0]
 8013d6e:	2b00      	cmp	r3, #0
 8013d70:	d018      	beq.n	8013da4 <etharp_find_entry+0x220>
 8013d72:	4b3a      	ldr	r3, [pc, #232]	; (8013e5c <etharp_find_entry+0x2d8>)
 8013d74:	f240 126d 	movw	r2, #365	; 0x16d
 8013d78:	493b      	ldr	r1, [pc, #236]	; (8013e68 <etharp_find_entry+0x2e4>)
 8013d7a:	483a      	ldr	r0, [pc, #232]	; (8013e64 <etharp_find_entry+0x2e0>)
 8013d7c:	f002 ff80 	bl	8016c80 <iprintf>
 8013d80:	e010      	b.n	8013da4 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8013d82:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8013d86:	2b09      	cmp	r3, #9
 8013d88:	dc02      	bgt.n	8013d90 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8013d8a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013d8c:	843b      	strh	r3, [r7, #32]
 8013d8e:	e009      	b.n	8013da4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8013d90:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8013d94:	2b09      	cmp	r3, #9
 8013d96:	dc02      	bgt.n	8013d9e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8013d98:	8bfb      	ldrh	r3, [r7, #30]
 8013d9a:	843b      	strh	r3, [r7, #32]
 8013d9c:	e002      	b.n	8013da4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8013d9e:	f04f 33ff 	mov.w	r3, #4294967295
 8013da2:	e054      	b.n	8013e4e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8013da4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013da8:	2b09      	cmp	r3, #9
 8013daa:	dd06      	ble.n	8013dba <etharp_find_entry+0x236>
 8013dac:	4b2b      	ldr	r3, [pc, #172]	; (8013e5c <etharp_find_entry+0x2d8>)
 8013dae:	f240 127f 	movw	r2, #383	; 0x17f
 8013db2:	492e      	ldr	r1, [pc, #184]	; (8013e6c <etharp_find_entry+0x2e8>)
 8013db4:	482b      	ldr	r0, [pc, #172]	; (8013e64 <etharp_find_entry+0x2e0>)
 8013db6:	f002 ff63 	bl	8016c80 <iprintf>
    etharp_free_entry(i);
 8013dba:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013dbe:	4618      	mov	r0, r3
 8013dc0:	f7ff fe06 	bl	80139d0 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8013dc4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013dc8:	2b09      	cmp	r3, #9
 8013dca:	dd06      	ble.n	8013dda <etharp_find_entry+0x256>
 8013dcc:	4b23      	ldr	r3, [pc, #140]	; (8013e5c <etharp_find_entry+0x2d8>)
 8013dce:	f240 1283 	movw	r2, #387	; 0x183
 8013dd2:	4926      	ldr	r1, [pc, #152]	; (8013e6c <etharp_find_entry+0x2e8>)
 8013dd4:	4823      	ldr	r0, [pc, #140]	; (8013e64 <etharp_find_entry+0x2e0>)
 8013dd6:	f002 ff53 	bl	8016c80 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8013dda:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013dde:	491e      	ldr	r1, [pc, #120]	; (8013e58 <etharp_find_entry+0x2d4>)
 8013de0:	4613      	mov	r3, r2
 8013de2:	005b      	lsls	r3, r3, #1
 8013de4:	4413      	add	r3, r2
 8013de6:	00db      	lsls	r3, r3, #3
 8013de8:	440b      	add	r3, r1
 8013dea:	3314      	adds	r3, #20
 8013dec:	781b      	ldrb	r3, [r3, #0]
 8013dee:	2b00      	cmp	r3, #0
 8013df0:	d006      	beq.n	8013e00 <etharp_find_entry+0x27c>
 8013df2:	4b1a      	ldr	r3, [pc, #104]	; (8013e5c <etharp_find_entry+0x2d8>)
 8013df4:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8013df8:	491d      	ldr	r1, [pc, #116]	; (8013e70 <etharp_find_entry+0x2ec>)
 8013dfa:	481a      	ldr	r0, [pc, #104]	; (8013e64 <etharp_find_entry+0x2e0>)
 8013dfc:	f002 ff40 	bl	8016c80 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8013e00:	68fb      	ldr	r3, [r7, #12]
 8013e02:	2b00      	cmp	r3, #0
 8013e04:	d00b      	beq.n	8013e1e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8013e06:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013e0a:	68fb      	ldr	r3, [r7, #12]
 8013e0c:	6819      	ldr	r1, [r3, #0]
 8013e0e:	4812      	ldr	r0, [pc, #72]	; (8013e58 <etharp_find_entry+0x2d4>)
 8013e10:	4613      	mov	r3, r2
 8013e12:	005b      	lsls	r3, r3, #1
 8013e14:	4413      	add	r3, r2
 8013e16:	00db      	lsls	r3, r3, #3
 8013e18:	4403      	add	r3, r0
 8013e1a:	3304      	adds	r3, #4
 8013e1c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8013e1e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013e22:	490d      	ldr	r1, [pc, #52]	; (8013e58 <etharp_find_entry+0x2d4>)
 8013e24:	4613      	mov	r3, r2
 8013e26:	005b      	lsls	r3, r3, #1
 8013e28:	4413      	add	r3, r2
 8013e2a:	00db      	lsls	r3, r3, #3
 8013e2c:	440b      	add	r3, r1
 8013e2e:	3312      	adds	r3, #18
 8013e30:	2200      	movs	r2, #0
 8013e32:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8013e34:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013e38:	4907      	ldr	r1, [pc, #28]	; (8013e58 <etharp_find_entry+0x2d4>)
 8013e3a:	4613      	mov	r3, r2
 8013e3c:	005b      	lsls	r3, r3, #1
 8013e3e:	4413      	add	r3, r2
 8013e40:	00db      	lsls	r3, r3, #3
 8013e42:	440b      	add	r3, r1
 8013e44:	3308      	adds	r3, #8
 8013e46:	687a      	ldr	r2, [r7, #4]
 8013e48:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8013e4a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8013e4e:	4618      	mov	r0, r3
 8013e50:	3728      	adds	r7, #40	; 0x28
 8013e52:	46bd      	mov	sp, r7
 8013e54:	bd80      	pop	{r7, pc}
 8013e56:	bf00      	nop
 8013e58:	2000be70 	.word	0x2000be70
 8013e5c:	0801a45c 	.word	0x0801a45c
 8013e60:	0801a494 	.word	0x0801a494
 8013e64:	0801a4d4 	.word	0x0801a4d4
 8013e68:	0801a4fc 	.word	0x0801a4fc
 8013e6c:	0801a514 	.word	0x0801a514
 8013e70:	0801a528 	.word	0x0801a528

08013e74 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8013e74:	b580      	push	{r7, lr}
 8013e76:	b088      	sub	sp, #32
 8013e78:	af02      	add	r7, sp, #8
 8013e7a:	60f8      	str	r0, [r7, #12]
 8013e7c:	60b9      	str	r1, [r7, #8]
 8013e7e:	607a      	str	r2, [r7, #4]
 8013e80:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8013e82:	68fb      	ldr	r3, [r7, #12]
 8013e84:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013e88:	2b06      	cmp	r3, #6
 8013e8a:	d006      	beq.n	8013e9a <etharp_update_arp_entry+0x26>
 8013e8c:	4b48      	ldr	r3, [pc, #288]	; (8013fb0 <etharp_update_arp_entry+0x13c>)
 8013e8e:	f240 12a9 	movw	r2, #425	; 0x1a9
 8013e92:	4948      	ldr	r1, [pc, #288]	; (8013fb4 <etharp_update_arp_entry+0x140>)
 8013e94:	4848      	ldr	r0, [pc, #288]	; (8013fb8 <etharp_update_arp_entry+0x144>)
 8013e96:	f002 fef3 	bl	8016c80 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8013e9a:	68bb      	ldr	r3, [r7, #8]
 8013e9c:	2b00      	cmp	r3, #0
 8013e9e:	d012      	beq.n	8013ec6 <etharp_update_arp_entry+0x52>
 8013ea0:	68bb      	ldr	r3, [r7, #8]
 8013ea2:	681b      	ldr	r3, [r3, #0]
 8013ea4:	2b00      	cmp	r3, #0
 8013ea6:	d00e      	beq.n	8013ec6 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8013ea8:	68bb      	ldr	r3, [r7, #8]
 8013eaa:	681b      	ldr	r3, [r3, #0]
 8013eac:	68f9      	ldr	r1, [r7, #12]
 8013eae:	4618      	mov	r0, r3
 8013eb0:	f001 f922 	bl	80150f8 <ip4_addr_isbroadcast_u32>
 8013eb4:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8013eb6:	2b00      	cmp	r3, #0
 8013eb8:	d105      	bne.n	8013ec6 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8013eba:	68bb      	ldr	r3, [r7, #8]
 8013ebc:	681b      	ldr	r3, [r3, #0]
 8013ebe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8013ec2:	2be0      	cmp	r3, #224	; 0xe0
 8013ec4:	d102      	bne.n	8013ecc <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8013ec6:	f06f 030f 	mvn.w	r3, #15
 8013eca:	e06c      	b.n	8013fa6 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8013ecc:	78fb      	ldrb	r3, [r7, #3]
 8013ece:	68fa      	ldr	r2, [r7, #12]
 8013ed0:	4619      	mov	r1, r3
 8013ed2:	68b8      	ldr	r0, [r7, #8]
 8013ed4:	f7ff fe56 	bl	8013b84 <etharp_find_entry>
 8013ed8:	4603      	mov	r3, r0
 8013eda:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8013edc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8013ee0:	2b00      	cmp	r3, #0
 8013ee2:	da02      	bge.n	8013eea <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8013ee4:	8afb      	ldrh	r3, [r7, #22]
 8013ee6:	b25b      	sxtb	r3, r3
 8013ee8:	e05d      	b.n	8013fa6 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8013eea:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013eee:	4933      	ldr	r1, [pc, #204]	; (8013fbc <etharp_update_arp_entry+0x148>)
 8013ef0:	4613      	mov	r3, r2
 8013ef2:	005b      	lsls	r3, r3, #1
 8013ef4:	4413      	add	r3, r2
 8013ef6:	00db      	lsls	r3, r3, #3
 8013ef8:	440b      	add	r3, r1
 8013efa:	3314      	adds	r3, #20
 8013efc:	2202      	movs	r2, #2
 8013efe:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8013f00:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013f04:	492d      	ldr	r1, [pc, #180]	; (8013fbc <etharp_update_arp_entry+0x148>)
 8013f06:	4613      	mov	r3, r2
 8013f08:	005b      	lsls	r3, r3, #1
 8013f0a:	4413      	add	r3, r2
 8013f0c:	00db      	lsls	r3, r3, #3
 8013f0e:	440b      	add	r3, r1
 8013f10:	3308      	adds	r3, #8
 8013f12:	68fa      	ldr	r2, [r7, #12]
 8013f14:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8013f16:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013f1a:	4613      	mov	r3, r2
 8013f1c:	005b      	lsls	r3, r3, #1
 8013f1e:	4413      	add	r3, r2
 8013f20:	00db      	lsls	r3, r3, #3
 8013f22:	3308      	adds	r3, #8
 8013f24:	4a25      	ldr	r2, [pc, #148]	; (8013fbc <etharp_update_arp_entry+0x148>)
 8013f26:	4413      	add	r3, r2
 8013f28:	3304      	adds	r3, #4
 8013f2a:	2206      	movs	r2, #6
 8013f2c:	6879      	ldr	r1, [r7, #4]
 8013f2e:	4618      	mov	r0, r3
 8013f30:	f002 fdb2 	bl	8016a98 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8013f34:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013f38:	4920      	ldr	r1, [pc, #128]	; (8013fbc <etharp_update_arp_entry+0x148>)
 8013f3a:	4613      	mov	r3, r2
 8013f3c:	005b      	lsls	r3, r3, #1
 8013f3e:	4413      	add	r3, r2
 8013f40:	00db      	lsls	r3, r3, #3
 8013f42:	440b      	add	r3, r1
 8013f44:	3312      	adds	r3, #18
 8013f46:	2200      	movs	r2, #0
 8013f48:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8013f4a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013f4e:	491b      	ldr	r1, [pc, #108]	; (8013fbc <etharp_update_arp_entry+0x148>)
 8013f50:	4613      	mov	r3, r2
 8013f52:	005b      	lsls	r3, r3, #1
 8013f54:	4413      	add	r3, r2
 8013f56:	00db      	lsls	r3, r3, #3
 8013f58:	440b      	add	r3, r1
 8013f5a:	681b      	ldr	r3, [r3, #0]
 8013f5c:	2b00      	cmp	r3, #0
 8013f5e:	d021      	beq.n	8013fa4 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8013f60:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013f64:	4915      	ldr	r1, [pc, #84]	; (8013fbc <etharp_update_arp_entry+0x148>)
 8013f66:	4613      	mov	r3, r2
 8013f68:	005b      	lsls	r3, r3, #1
 8013f6a:	4413      	add	r3, r2
 8013f6c:	00db      	lsls	r3, r3, #3
 8013f6e:	440b      	add	r3, r1
 8013f70:	681b      	ldr	r3, [r3, #0]
 8013f72:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8013f74:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013f78:	4910      	ldr	r1, [pc, #64]	; (8013fbc <etharp_update_arp_entry+0x148>)
 8013f7a:	4613      	mov	r3, r2
 8013f7c:	005b      	lsls	r3, r3, #1
 8013f7e:	4413      	add	r3, r2
 8013f80:	00db      	lsls	r3, r3, #3
 8013f82:	440b      	add	r3, r1
 8013f84:	2200      	movs	r2, #0
 8013f86:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8013f88:	68fb      	ldr	r3, [r7, #12]
 8013f8a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8013f8e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8013f92:	9300      	str	r3, [sp, #0]
 8013f94:	687b      	ldr	r3, [r7, #4]
 8013f96:	6939      	ldr	r1, [r7, #16]
 8013f98:	68f8      	ldr	r0, [r7, #12]
 8013f9a:	f001 ffb9 	bl	8015f10 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8013f9e:	6938      	ldr	r0, [r7, #16]
 8013fa0:	f7f8 fe52 	bl	800cc48 <pbuf_free>
  }
  return ERR_OK;
 8013fa4:	2300      	movs	r3, #0
}
 8013fa6:	4618      	mov	r0, r3
 8013fa8:	3718      	adds	r7, #24
 8013faa:	46bd      	mov	sp, r7
 8013fac:	bd80      	pop	{r7, pc}
 8013fae:	bf00      	nop
 8013fb0:	0801a45c 	.word	0x0801a45c
 8013fb4:	0801a554 	.word	0x0801a554
 8013fb8:	0801a4d4 	.word	0x0801a4d4
 8013fbc:	2000be70 	.word	0x2000be70

08013fc0 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8013fc0:	b580      	push	{r7, lr}
 8013fc2:	b084      	sub	sp, #16
 8013fc4:	af00      	add	r7, sp, #0
 8013fc6:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013fc8:	2300      	movs	r3, #0
 8013fca:	60fb      	str	r3, [r7, #12]
 8013fcc:	e01e      	b.n	801400c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8013fce:	4913      	ldr	r1, [pc, #76]	; (801401c <etharp_cleanup_netif+0x5c>)
 8013fd0:	68fa      	ldr	r2, [r7, #12]
 8013fd2:	4613      	mov	r3, r2
 8013fd4:	005b      	lsls	r3, r3, #1
 8013fd6:	4413      	add	r3, r2
 8013fd8:	00db      	lsls	r3, r3, #3
 8013fda:	440b      	add	r3, r1
 8013fdc:	3314      	adds	r3, #20
 8013fde:	781b      	ldrb	r3, [r3, #0]
 8013fe0:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8013fe2:	7afb      	ldrb	r3, [r7, #11]
 8013fe4:	2b00      	cmp	r3, #0
 8013fe6:	d00e      	beq.n	8014006 <etharp_cleanup_netif+0x46>
 8013fe8:	490c      	ldr	r1, [pc, #48]	; (801401c <etharp_cleanup_netif+0x5c>)
 8013fea:	68fa      	ldr	r2, [r7, #12]
 8013fec:	4613      	mov	r3, r2
 8013fee:	005b      	lsls	r3, r3, #1
 8013ff0:	4413      	add	r3, r2
 8013ff2:	00db      	lsls	r3, r3, #3
 8013ff4:	440b      	add	r3, r1
 8013ff6:	3308      	adds	r3, #8
 8013ff8:	681b      	ldr	r3, [r3, #0]
 8013ffa:	687a      	ldr	r2, [r7, #4]
 8013ffc:	429a      	cmp	r2, r3
 8013ffe:	d102      	bne.n	8014006 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8014000:	68f8      	ldr	r0, [r7, #12]
 8014002:	f7ff fce5 	bl	80139d0 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014006:	68fb      	ldr	r3, [r7, #12]
 8014008:	3301      	adds	r3, #1
 801400a:	60fb      	str	r3, [r7, #12]
 801400c:	68fb      	ldr	r3, [r7, #12]
 801400e:	2b09      	cmp	r3, #9
 8014010:	dddd      	ble.n	8013fce <etharp_cleanup_netif+0xe>
    }
  }
}
 8014012:	bf00      	nop
 8014014:	bf00      	nop
 8014016:	3710      	adds	r7, #16
 8014018:	46bd      	mov	sp, r7
 801401a:	bd80      	pop	{r7, pc}
 801401c:	2000be70 	.word	0x2000be70

08014020 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8014020:	b5b0      	push	{r4, r5, r7, lr}
 8014022:	b08a      	sub	sp, #40	; 0x28
 8014024:	af04      	add	r7, sp, #16
 8014026:	6078      	str	r0, [r7, #4]
 8014028:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801402a:	683b      	ldr	r3, [r7, #0]
 801402c:	2b00      	cmp	r3, #0
 801402e:	d107      	bne.n	8014040 <etharp_input+0x20>
 8014030:	4b3d      	ldr	r3, [pc, #244]	; (8014128 <etharp_input+0x108>)
 8014032:	f240 228a 	movw	r2, #650	; 0x28a
 8014036:	493d      	ldr	r1, [pc, #244]	; (801412c <etharp_input+0x10c>)
 8014038:	483d      	ldr	r0, [pc, #244]	; (8014130 <etharp_input+0x110>)
 801403a:	f002 fe21 	bl	8016c80 <iprintf>
 801403e:	e06f      	b.n	8014120 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8014040:	687b      	ldr	r3, [r7, #4]
 8014042:	685b      	ldr	r3, [r3, #4]
 8014044:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8014046:	693b      	ldr	r3, [r7, #16]
 8014048:	881b      	ldrh	r3, [r3, #0]
 801404a:	b29b      	uxth	r3, r3
 801404c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014050:	d10c      	bne.n	801406c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8014052:	693b      	ldr	r3, [r7, #16]
 8014054:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8014056:	2b06      	cmp	r3, #6
 8014058:	d108      	bne.n	801406c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801405a:	693b      	ldr	r3, [r7, #16]
 801405c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801405e:	2b04      	cmp	r3, #4
 8014060:	d104      	bne.n	801406c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8014062:	693b      	ldr	r3, [r7, #16]
 8014064:	885b      	ldrh	r3, [r3, #2]
 8014066:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8014068:	2b08      	cmp	r3, #8
 801406a:	d003      	beq.n	8014074 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801406c:	6878      	ldr	r0, [r7, #4]
 801406e:	f7f8 fdeb 	bl	800cc48 <pbuf_free>
    return;
 8014072:	e055      	b.n	8014120 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8014074:	693b      	ldr	r3, [r7, #16]
 8014076:	330e      	adds	r3, #14
 8014078:	681b      	ldr	r3, [r3, #0]
 801407a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801407c:	693b      	ldr	r3, [r7, #16]
 801407e:	3318      	adds	r3, #24
 8014080:	681b      	ldr	r3, [r3, #0]
 8014082:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8014084:	683b      	ldr	r3, [r7, #0]
 8014086:	3304      	adds	r3, #4
 8014088:	681b      	ldr	r3, [r3, #0]
 801408a:	2b00      	cmp	r3, #0
 801408c:	d102      	bne.n	8014094 <etharp_input+0x74>
    for_us = 0;
 801408e:	2300      	movs	r3, #0
 8014090:	75fb      	strb	r3, [r7, #23]
 8014092:	e009      	b.n	80140a8 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8014094:	68ba      	ldr	r2, [r7, #8]
 8014096:	683b      	ldr	r3, [r7, #0]
 8014098:	3304      	adds	r3, #4
 801409a:	681b      	ldr	r3, [r3, #0]
 801409c:	429a      	cmp	r2, r3
 801409e:	bf0c      	ite	eq
 80140a0:	2301      	moveq	r3, #1
 80140a2:	2300      	movne	r3, #0
 80140a4:	b2db      	uxtb	r3, r3
 80140a6:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80140a8:	693b      	ldr	r3, [r7, #16]
 80140aa:	f103 0208 	add.w	r2, r3, #8
 80140ae:	7dfb      	ldrb	r3, [r7, #23]
 80140b0:	2b00      	cmp	r3, #0
 80140b2:	d001      	beq.n	80140b8 <etharp_input+0x98>
 80140b4:	2301      	movs	r3, #1
 80140b6:	e000      	b.n	80140ba <etharp_input+0x9a>
 80140b8:	2302      	movs	r3, #2
 80140ba:	f107 010c 	add.w	r1, r7, #12
 80140be:	6838      	ldr	r0, [r7, #0]
 80140c0:	f7ff fed8 	bl	8013e74 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80140c4:	693b      	ldr	r3, [r7, #16]
 80140c6:	88db      	ldrh	r3, [r3, #6]
 80140c8:	b29b      	uxth	r3, r3
 80140ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80140ce:	d003      	beq.n	80140d8 <etharp_input+0xb8>
 80140d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80140d4:	d01e      	beq.n	8014114 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80140d6:	e020      	b.n	801411a <etharp_input+0xfa>
      if (for_us) {
 80140d8:	7dfb      	ldrb	r3, [r7, #23]
 80140da:	2b00      	cmp	r3, #0
 80140dc:	d01c      	beq.n	8014118 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80140de:	683b      	ldr	r3, [r7, #0]
 80140e0:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80140e4:	693b      	ldr	r3, [r7, #16]
 80140e6:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80140ea:	683b      	ldr	r3, [r7, #0]
 80140ec:	f103 0526 	add.w	r5, r3, #38	; 0x26
 80140f0:	683b      	ldr	r3, [r7, #0]
 80140f2:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80140f4:	693a      	ldr	r2, [r7, #16]
 80140f6:	3208      	adds	r2, #8
        etharp_raw(netif,
 80140f8:	2102      	movs	r1, #2
 80140fa:	9103      	str	r1, [sp, #12]
 80140fc:	f107 010c 	add.w	r1, r7, #12
 8014100:	9102      	str	r1, [sp, #8]
 8014102:	9201      	str	r2, [sp, #4]
 8014104:	9300      	str	r3, [sp, #0]
 8014106:	462b      	mov	r3, r5
 8014108:	4622      	mov	r2, r4
 801410a:	4601      	mov	r1, r0
 801410c:	6838      	ldr	r0, [r7, #0]
 801410e:	f000 faeb 	bl	80146e8 <etharp_raw>
      break;
 8014112:	e001      	b.n	8014118 <etharp_input+0xf8>
      break;
 8014114:	bf00      	nop
 8014116:	e000      	b.n	801411a <etharp_input+0xfa>
      break;
 8014118:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801411a:	6878      	ldr	r0, [r7, #4]
 801411c:	f7f8 fd94 	bl	800cc48 <pbuf_free>
}
 8014120:	3718      	adds	r7, #24
 8014122:	46bd      	mov	sp, r7
 8014124:	bdb0      	pop	{r4, r5, r7, pc}
 8014126:	bf00      	nop
 8014128:	0801a45c 	.word	0x0801a45c
 801412c:	0801a5ac 	.word	0x0801a5ac
 8014130:	0801a4d4 	.word	0x0801a4d4

08014134 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8014134:	b580      	push	{r7, lr}
 8014136:	b086      	sub	sp, #24
 8014138:	af02      	add	r7, sp, #8
 801413a:	60f8      	str	r0, [r7, #12]
 801413c:	60b9      	str	r1, [r7, #8]
 801413e:	4613      	mov	r3, r2
 8014140:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8014142:	79fa      	ldrb	r2, [r7, #7]
 8014144:	4944      	ldr	r1, [pc, #272]	; (8014258 <etharp_output_to_arp_index+0x124>)
 8014146:	4613      	mov	r3, r2
 8014148:	005b      	lsls	r3, r3, #1
 801414a:	4413      	add	r3, r2
 801414c:	00db      	lsls	r3, r3, #3
 801414e:	440b      	add	r3, r1
 8014150:	3314      	adds	r3, #20
 8014152:	781b      	ldrb	r3, [r3, #0]
 8014154:	2b01      	cmp	r3, #1
 8014156:	d806      	bhi.n	8014166 <etharp_output_to_arp_index+0x32>
 8014158:	4b40      	ldr	r3, [pc, #256]	; (801425c <etharp_output_to_arp_index+0x128>)
 801415a:	f240 22ee 	movw	r2, #750	; 0x2ee
 801415e:	4940      	ldr	r1, [pc, #256]	; (8014260 <etharp_output_to_arp_index+0x12c>)
 8014160:	4840      	ldr	r0, [pc, #256]	; (8014264 <etharp_output_to_arp_index+0x130>)
 8014162:	f002 fd8d 	bl	8016c80 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8014166:	79fa      	ldrb	r2, [r7, #7]
 8014168:	493b      	ldr	r1, [pc, #236]	; (8014258 <etharp_output_to_arp_index+0x124>)
 801416a:	4613      	mov	r3, r2
 801416c:	005b      	lsls	r3, r3, #1
 801416e:	4413      	add	r3, r2
 8014170:	00db      	lsls	r3, r3, #3
 8014172:	440b      	add	r3, r1
 8014174:	3314      	adds	r3, #20
 8014176:	781b      	ldrb	r3, [r3, #0]
 8014178:	2b02      	cmp	r3, #2
 801417a:	d153      	bne.n	8014224 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801417c:	79fa      	ldrb	r2, [r7, #7]
 801417e:	4936      	ldr	r1, [pc, #216]	; (8014258 <etharp_output_to_arp_index+0x124>)
 8014180:	4613      	mov	r3, r2
 8014182:	005b      	lsls	r3, r3, #1
 8014184:	4413      	add	r3, r2
 8014186:	00db      	lsls	r3, r3, #3
 8014188:	440b      	add	r3, r1
 801418a:	3312      	adds	r3, #18
 801418c:	881b      	ldrh	r3, [r3, #0]
 801418e:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8014192:	d919      	bls.n	80141c8 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8014194:	79fa      	ldrb	r2, [r7, #7]
 8014196:	4613      	mov	r3, r2
 8014198:	005b      	lsls	r3, r3, #1
 801419a:	4413      	add	r3, r2
 801419c:	00db      	lsls	r3, r3, #3
 801419e:	4a2e      	ldr	r2, [pc, #184]	; (8014258 <etharp_output_to_arp_index+0x124>)
 80141a0:	4413      	add	r3, r2
 80141a2:	3304      	adds	r3, #4
 80141a4:	4619      	mov	r1, r3
 80141a6:	68f8      	ldr	r0, [r7, #12]
 80141a8:	f000 fb4c 	bl	8014844 <etharp_request>
 80141ac:	4603      	mov	r3, r0
 80141ae:	2b00      	cmp	r3, #0
 80141b0:	d138      	bne.n	8014224 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80141b2:	79fa      	ldrb	r2, [r7, #7]
 80141b4:	4928      	ldr	r1, [pc, #160]	; (8014258 <etharp_output_to_arp_index+0x124>)
 80141b6:	4613      	mov	r3, r2
 80141b8:	005b      	lsls	r3, r3, #1
 80141ba:	4413      	add	r3, r2
 80141bc:	00db      	lsls	r3, r3, #3
 80141be:	440b      	add	r3, r1
 80141c0:	3314      	adds	r3, #20
 80141c2:	2203      	movs	r2, #3
 80141c4:	701a      	strb	r2, [r3, #0]
 80141c6:	e02d      	b.n	8014224 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80141c8:	79fa      	ldrb	r2, [r7, #7]
 80141ca:	4923      	ldr	r1, [pc, #140]	; (8014258 <etharp_output_to_arp_index+0x124>)
 80141cc:	4613      	mov	r3, r2
 80141ce:	005b      	lsls	r3, r3, #1
 80141d0:	4413      	add	r3, r2
 80141d2:	00db      	lsls	r3, r3, #3
 80141d4:	440b      	add	r3, r1
 80141d6:	3312      	adds	r3, #18
 80141d8:	881b      	ldrh	r3, [r3, #0]
 80141da:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80141de:	d321      	bcc.n	8014224 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80141e0:	79fa      	ldrb	r2, [r7, #7]
 80141e2:	4613      	mov	r3, r2
 80141e4:	005b      	lsls	r3, r3, #1
 80141e6:	4413      	add	r3, r2
 80141e8:	00db      	lsls	r3, r3, #3
 80141ea:	4a1b      	ldr	r2, [pc, #108]	; (8014258 <etharp_output_to_arp_index+0x124>)
 80141ec:	4413      	add	r3, r2
 80141ee:	1d19      	adds	r1, r3, #4
 80141f0:	79fa      	ldrb	r2, [r7, #7]
 80141f2:	4613      	mov	r3, r2
 80141f4:	005b      	lsls	r3, r3, #1
 80141f6:	4413      	add	r3, r2
 80141f8:	00db      	lsls	r3, r3, #3
 80141fa:	3308      	adds	r3, #8
 80141fc:	4a16      	ldr	r2, [pc, #88]	; (8014258 <etharp_output_to_arp_index+0x124>)
 80141fe:	4413      	add	r3, r2
 8014200:	3304      	adds	r3, #4
 8014202:	461a      	mov	r2, r3
 8014204:	68f8      	ldr	r0, [r7, #12]
 8014206:	f000 fafb 	bl	8014800 <etharp_request_dst>
 801420a:	4603      	mov	r3, r0
 801420c:	2b00      	cmp	r3, #0
 801420e:	d109      	bne.n	8014224 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8014210:	79fa      	ldrb	r2, [r7, #7]
 8014212:	4911      	ldr	r1, [pc, #68]	; (8014258 <etharp_output_to_arp_index+0x124>)
 8014214:	4613      	mov	r3, r2
 8014216:	005b      	lsls	r3, r3, #1
 8014218:	4413      	add	r3, r2
 801421a:	00db      	lsls	r3, r3, #3
 801421c:	440b      	add	r3, r1
 801421e:	3314      	adds	r3, #20
 8014220:	2203      	movs	r2, #3
 8014222:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8014224:	68fb      	ldr	r3, [r7, #12]
 8014226:	f103 0126 	add.w	r1, r3, #38	; 0x26
 801422a:	79fa      	ldrb	r2, [r7, #7]
 801422c:	4613      	mov	r3, r2
 801422e:	005b      	lsls	r3, r3, #1
 8014230:	4413      	add	r3, r2
 8014232:	00db      	lsls	r3, r3, #3
 8014234:	3308      	adds	r3, #8
 8014236:	4a08      	ldr	r2, [pc, #32]	; (8014258 <etharp_output_to_arp_index+0x124>)
 8014238:	4413      	add	r3, r2
 801423a:	3304      	adds	r3, #4
 801423c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014240:	9200      	str	r2, [sp, #0]
 8014242:	460a      	mov	r2, r1
 8014244:	68b9      	ldr	r1, [r7, #8]
 8014246:	68f8      	ldr	r0, [r7, #12]
 8014248:	f001 fe62 	bl	8015f10 <ethernet_output>
 801424c:	4603      	mov	r3, r0
}
 801424e:	4618      	mov	r0, r3
 8014250:	3710      	adds	r7, #16
 8014252:	46bd      	mov	sp, r7
 8014254:	bd80      	pop	{r7, pc}
 8014256:	bf00      	nop
 8014258:	2000be70 	.word	0x2000be70
 801425c:	0801a45c 	.word	0x0801a45c
 8014260:	0801a5cc 	.word	0x0801a5cc
 8014264:	0801a4d4 	.word	0x0801a4d4

08014268 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8014268:	b580      	push	{r7, lr}
 801426a:	b08a      	sub	sp, #40	; 0x28
 801426c:	af02      	add	r7, sp, #8
 801426e:	60f8      	str	r0, [r7, #12]
 8014270:	60b9      	str	r1, [r7, #8]
 8014272:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8014274:	687b      	ldr	r3, [r7, #4]
 8014276:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8014278:	68fb      	ldr	r3, [r7, #12]
 801427a:	2b00      	cmp	r3, #0
 801427c:	d106      	bne.n	801428c <etharp_output+0x24>
 801427e:	4b73      	ldr	r3, [pc, #460]	; (801444c <etharp_output+0x1e4>)
 8014280:	f240 321e 	movw	r2, #798	; 0x31e
 8014284:	4972      	ldr	r1, [pc, #456]	; (8014450 <etharp_output+0x1e8>)
 8014286:	4873      	ldr	r0, [pc, #460]	; (8014454 <etharp_output+0x1ec>)
 8014288:	f002 fcfa 	bl	8016c80 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801428c:	68bb      	ldr	r3, [r7, #8]
 801428e:	2b00      	cmp	r3, #0
 8014290:	d106      	bne.n	80142a0 <etharp_output+0x38>
 8014292:	4b6e      	ldr	r3, [pc, #440]	; (801444c <etharp_output+0x1e4>)
 8014294:	f240 321f 	movw	r2, #799	; 0x31f
 8014298:	496f      	ldr	r1, [pc, #444]	; (8014458 <etharp_output+0x1f0>)
 801429a:	486e      	ldr	r0, [pc, #440]	; (8014454 <etharp_output+0x1ec>)
 801429c:	f002 fcf0 	bl	8016c80 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80142a0:	687b      	ldr	r3, [r7, #4]
 80142a2:	2b00      	cmp	r3, #0
 80142a4:	d106      	bne.n	80142b4 <etharp_output+0x4c>
 80142a6:	4b69      	ldr	r3, [pc, #420]	; (801444c <etharp_output+0x1e4>)
 80142a8:	f44f 7248 	mov.w	r2, #800	; 0x320
 80142ac:	496b      	ldr	r1, [pc, #428]	; (801445c <etharp_output+0x1f4>)
 80142ae:	4869      	ldr	r0, [pc, #420]	; (8014454 <etharp_output+0x1ec>)
 80142b0:	f002 fce6 	bl	8016c80 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80142b4:	687b      	ldr	r3, [r7, #4]
 80142b6:	681b      	ldr	r3, [r3, #0]
 80142b8:	68f9      	ldr	r1, [r7, #12]
 80142ba:	4618      	mov	r0, r3
 80142bc:	f000 ff1c 	bl	80150f8 <ip4_addr_isbroadcast_u32>
 80142c0:	4603      	mov	r3, r0
 80142c2:	2b00      	cmp	r3, #0
 80142c4:	d002      	beq.n	80142cc <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80142c6:	4b66      	ldr	r3, [pc, #408]	; (8014460 <etharp_output+0x1f8>)
 80142c8:	61fb      	str	r3, [r7, #28]
 80142ca:	e0af      	b.n	801442c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80142cc:	687b      	ldr	r3, [r7, #4]
 80142ce:	681b      	ldr	r3, [r3, #0]
 80142d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80142d4:	2be0      	cmp	r3, #224	; 0xe0
 80142d6:	d118      	bne.n	801430a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80142d8:	2301      	movs	r3, #1
 80142da:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80142dc:	2300      	movs	r3, #0
 80142de:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80142e0:	235e      	movs	r3, #94	; 0x5e
 80142e2:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80142e4:	687b      	ldr	r3, [r7, #4]
 80142e6:	3301      	adds	r3, #1
 80142e8:	781b      	ldrb	r3, [r3, #0]
 80142ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80142ee:	b2db      	uxtb	r3, r3
 80142f0:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80142f2:	687b      	ldr	r3, [r7, #4]
 80142f4:	3302      	adds	r3, #2
 80142f6:	781b      	ldrb	r3, [r3, #0]
 80142f8:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80142fa:	687b      	ldr	r3, [r7, #4]
 80142fc:	3303      	adds	r3, #3
 80142fe:	781b      	ldrb	r3, [r3, #0]
 8014300:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8014302:	f107 0310 	add.w	r3, r7, #16
 8014306:	61fb      	str	r3, [r7, #28]
 8014308:	e090      	b.n	801442c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801430a:	687b      	ldr	r3, [r7, #4]
 801430c:	681a      	ldr	r2, [r3, #0]
 801430e:	68fb      	ldr	r3, [r7, #12]
 8014310:	3304      	adds	r3, #4
 8014312:	681b      	ldr	r3, [r3, #0]
 8014314:	405a      	eors	r2, r3
 8014316:	68fb      	ldr	r3, [r7, #12]
 8014318:	3308      	adds	r3, #8
 801431a:	681b      	ldr	r3, [r3, #0]
 801431c:	4013      	ands	r3, r2
 801431e:	2b00      	cmp	r3, #0
 8014320:	d012      	beq.n	8014348 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8014322:	687b      	ldr	r3, [r7, #4]
 8014324:	681b      	ldr	r3, [r3, #0]
 8014326:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8014328:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 801432c:	4293      	cmp	r3, r2
 801432e:	d00b      	beq.n	8014348 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8014330:	68fb      	ldr	r3, [r7, #12]
 8014332:	330c      	adds	r3, #12
 8014334:	681b      	ldr	r3, [r3, #0]
 8014336:	2b00      	cmp	r3, #0
 8014338:	d003      	beq.n	8014342 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801433a:	68fb      	ldr	r3, [r7, #12]
 801433c:	330c      	adds	r3, #12
 801433e:	61bb      	str	r3, [r7, #24]
 8014340:	e002      	b.n	8014348 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8014342:	f06f 0303 	mvn.w	r3, #3
 8014346:	e07d      	b.n	8014444 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8014348:	4b46      	ldr	r3, [pc, #280]	; (8014464 <etharp_output+0x1fc>)
 801434a:	781b      	ldrb	r3, [r3, #0]
 801434c:	4619      	mov	r1, r3
 801434e:	4a46      	ldr	r2, [pc, #280]	; (8014468 <etharp_output+0x200>)
 8014350:	460b      	mov	r3, r1
 8014352:	005b      	lsls	r3, r3, #1
 8014354:	440b      	add	r3, r1
 8014356:	00db      	lsls	r3, r3, #3
 8014358:	4413      	add	r3, r2
 801435a:	3314      	adds	r3, #20
 801435c:	781b      	ldrb	r3, [r3, #0]
 801435e:	2b01      	cmp	r3, #1
 8014360:	d925      	bls.n	80143ae <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8014362:	4b40      	ldr	r3, [pc, #256]	; (8014464 <etharp_output+0x1fc>)
 8014364:	781b      	ldrb	r3, [r3, #0]
 8014366:	4619      	mov	r1, r3
 8014368:	4a3f      	ldr	r2, [pc, #252]	; (8014468 <etharp_output+0x200>)
 801436a:	460b      	mov	r3, r1
 801436c:	005b      	lsls	r3, r3, #1
 801436e:	440b      	add	r3, r1
 8014370:	00db      	lsls	r3, r3, #3
 8014372:	4413      	add	r3, r2
 8014374:	3308      	adds	r3, #8
 8014376:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8014378:	68fa      	ldr	r2, [r7, #12]
 801437a:	429a      	cmp	r2, r3
 801437c:	d117      	bne.n	80143ae <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801437e:	69bb      	ldr	r3, [r7, #24]
 8014380:	681a      	ldr	r2, [r3, #0]
 8014382:	4b38      	ldr	r3, [pc, #224]	; (8014464 <etharp_output+0x1fc>)
 8014384:	781b      	ldrb	r3, [r3, #0]
 8014386:	4618      	mov	r0, r3
 8014388:	4937      	ldr	r1, [pc, #220]	; (8014468 <etharp_output+0x200>)
 801438a:	4603      	mov	r3, r0
 801438c:	005b      	lsls	r3, r3, #1
 801438e:	4403      	add	r3, r0
 8014390:	00db      	lsls	r3, r3, #3
 8014392:	440b      	add	r3, r1
 8014394:	3304      	adds	r3, #4
 8014396:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8014398:	429a      	cmp	r2, r3
 801439a:	d108      	bne.n	80143ae <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801439c:	4b31      	ldr	r3, [pc, #196]	; (8014464 <etharp_output+0x1fc>)
 801439e:	781b      	ldrb	r3, [r3, #0]
 80143a0:	461a      	mov	r2, r3
 80143a2:	68b9      	ldr	r1, [r7, #8]
 80143a4:	68f8      	ldr	r0, [r7, #12]
 80143a6:	f7ff fec5 	bl	8014134 <etharp_output_to_arp_index>
 80143aa:	4603      	mov	r3, r0
 80143ac:	e04a      	b.n	8014444 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80143ae:	2300      	movs	r3, #0
 80143b0:	75fb      	strb	r3, [r7, #23]
 80143b2:	e031      	b.n	8014418 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80143b4:	7dfa      	ldrb	r2, [r7, #23]
 80143b6:	492c      	ldr	r1, [pc, #176]	; (8014468 <etharp_output+0x200>)
 80143b8:	4613      	mov	r3, r2
 80143ba:	005b      	lsls	r3, r3, #1
 80143bc:	4413      	add	r3, r2
 80143be:	00db      	lsls	r3, r3, #3
 80143c0:	440b      	add	r3, r1
 80143c2:	3314      	adds	r3, #20
 80143c4:	781b      	ldrb	r3, [r3, #0]
 80143c6:	2b01      	cmp	r3, #1
 80143c8:	d923      	bls.n	8014412 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80143ca:	7dfa      	ldrb	r2, [r7, #23]
 80143cc:	4926      	ldr	r1, [pc, #152]	; (8014468 <etharp_output+0x200>)
 80143ce:	4613      	mov	r3, r2
 80143d0:	005b      	lsls	r3, r3, #1
 80143d2:	4413      	add	r3, r2
 80143d4:	00db      	lsls	r3, r3, #3
 80143d6:	440b      	add	r3, r1
 80143d8:	3308      	adds	r3, #8
 80143da:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80143dc:	68fa      	ldr	r2, [r7, #12]
 80143de:	429a      	cmp	r2, r3
 80143e0:	d117      	bne.n	8014412 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80143e2:	69bb      	ldr	r3, [r7, #24]
 80143e4:	6819      	ldr	r1, [r3, #0]
 80143e6:	7dfa      	ldrb	r2, [r7, #23]
 80143e8:	481f      	ldr	r0, [pc, #124]	; (8014468 <etharp_output+0x200>)
 80143ea:	4613      	mov	r3, r2
 80143ec:	005b      	lsls	r3, r3, #1
 80143ee:	4413      	add	r3, r2
 80143f0:	00db      	lsls	r3, r3, #3
 80143f2:	4403      	add	r3, r0
 80143f4:	3304      	adds	r3, #4
 80143f6:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80143f8:	4299      	cmp	r1, r3
 80143fa:	d10a      	bne.n	8014412 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80143fc:	4a19      	ldr	r2, [pc, #100]	; (8014464 <etharp_output+0x1fc>)
 80143fe:	7dfb      	ldrb	r3, [r7, #23]
 8014400:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8014402:	7dfb      	ldrb	r3, [r7, #23]
 8014404:	461a      	mov	r2, r3
 8014406:	68b9      	ldr	r1, [r7, #8]
 8014408:	68f8      	ldr	r0, [r7, #12]
 801440a:	f7ff fe93 	bl	8014134 <etharp_output_to_arp_index>
 801440e:	4603      	mov	r3, r0
 8014410:	e018      	b.n	8014444 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8014412:	7dfb      	ldrb	r3, [r7, #23]
 8014414:	3301      	adds	r3, #1
 8014416:	75fb      	strb	r3, [r7, #23]
 8014418:	7dfb      	ldrb	r3, [r7, #23]
 801441a:	2b09      	cmp	r3, #9
 801441c:	d9ca      	bls.n	80143b4 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801441e:	68ba      	ldr	r2, [r7, #8]
 8014420:	69b9      	ldr	r1, [r7, #24]
 8014422:	68f8      	ldr	r0, [r7, #12]
 8014424:	f000 f822 	bl	801446c <etharp_query>
 8014428:	4603      	mov	r3, r0
 801442a:	e00b      	b.n	8014444 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801442c:	68fb      	ldr	r3, [r7, #12]
 801442e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8014432:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014436:	9300      	str	r3, [sp, #0]
 8014438:	69fb      	ldr	r3, [r7, #28]
 801443a:	68b9      	ldr	r1, [r7, #8]
 801443c:	68f8      	ldr	r0, [r7, #12]
 801443e:	f001 fd67 	bl	8015f10 <ethernet_output>
 8014442:	4603      	mov	r3, r0
}
 8014444:	4618      	mov	r0, r3
 8014446:	3720      	adds	r7, #32
 8014448:	46bd      	mov	sp, r7
 801444a:	bd80      	pop	{r7, pc}
 801444c:	0801a45c 	.word	0x0801a45c
 8014450:	0801a5ac 	.word	0x0801a5ac
 8014454:	0801a4d4 	.word	0x0801a4d4
 8014458:	0801a5fc 	.word	0x0801a5fc
 801445c:	0801a59c 	.word	0x0801a59c
 8014460:	0801ac64 	.word	0x0801ac64
 8014464:	2000bf60 	.word	0x2000bf60
 8014468:	2000be70 	.word	0x2000be70

0801446c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801446c:	b580      	push	{r7, lr}
 801446e:	b08c      	sub	sp, #48	; 0x30
 8014470:	af02      	add	r7, sp, #8
 8014472:	60f8      	str	r0, [r7, #12]
 8014474:	60b9      	str	r1, [r7, #8]
 8014476:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8014478:	68fb      	ldr	r3, [r7, #12]
 801447a:	3326      	adds	r3, #38	; 0x26
 801447c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801447e:	23ff      	movs	r3, #255	; 0xff
 8014480:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8014484:	2300      	movs	r3, #0
 8014486:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8014488:	68bb      	ldr	r3, [r7, #8]
 801448a:	681b      	ldr	r3, [r3, #0]
 801448c:	68f9      	ldr	r1, [r7, #12]
 801448e:	4618      	mov	r0, r3
 8014490:	f000 fe32 	bl	80150f8 <ip4_addr_isbroadcast_u32>
 8014494:	4603      	mov	r3, r0
 8014496:	2b00      	cmp	r3, #0
 8014498:	d10c      	bne.n	80144b4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801449a:	68bb      	ldr	r3, [r7, #8]
 801449c:	681b      	ldr	r3, [r3, #0]
 801449e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80144a2:	2be0      	cmp	r3, #224	; 0xe0
 80144a4:	d006      	beq.n	80144b4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80144a6:	68bb      	ldr	r3, [r7, #8]
 80144a8:	2b00      	cmp	r3, #0
 80144aa:	d003      	beq.n	80144b4 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80144ac:	68bb      	ldr	r3, [r7, #8]
 80144ae:	681b      	ldr	r3, [r3, #0]
 80144b0:	2b00      	cmp	r3, #0
 80144b2:	d102      	bne.n	80144ba <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80144b4:	f06f 030f 	mvn.w	r3, #15
 80144b8:	e101      	b.n	80146be <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80144ba:	68fa      	ldr	r2, [r7, #12]
 80144bc:	2101      	movs	r1, #1
 80144be:	68b8      	ldr	r0, [r7, #8]
 80144c0:	f7ff fb60 	bl	8013b84 <etharp_find_entry>
 80144c4:	4603      	mov	r3, r0
 80144c6:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80144c8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80144cc:	2b00      	cmp	r3, #0
 80144ce:	da02      	bge.n	80144d6 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80144d0:	8a7b      	ldrh	r3, [r7, #18]
 80144d2:	b25b      	sxtb	r3, r3
 80144d4:	e0f3      	b.n	80146be <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80144d6:	8a7b      	ldrh	r3, [r7, #18]
 80144d8:	2b7e      	cmp	r3, #126	; 0x7e
 80144da:	d906      	bls.n	80144ea <etharp_query+0x7e>
 80144dc:	4b7a      	ldr	r3, [pc, #488]	; (80146c8 <etharp_query+0x25c>)
 80144de:	f240 32c1 	movw	r2, #961	; 0x3c1
 80144e2:	497a      	ldr	r1, [pc, #488]	; (80146cc <etharp_query+0x260>)
 80144e4:	487a      	ldr	r0, [pc, #488]	; (80146d0 <etharp_query+0x264>)
 80144e6:	f002 fbcb 	bl	8016c80 <iprintf>
  i = (netif_addr_idx_t)i_err;
 80144ea:	8a7b      	ldrh	r3, [r7, #18]
 80144ec:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80144ee:	7c7a      	ldrb	r2, [r7, #17]
 80144f0:	4978      	ldr	r1, [pc, #480]	; (80146d4 <etharp_query+0x268>)
 80144f2:	4613      	mov	r3, r2
 80144f4:	005b      	lsls	r3, r3, #1
 80144f6:	4413      	add	r3, r2
 80144f8:	00db      	lsls	r3, r3, #3
 80144fa:	440b      	add	r3, r1
 80144fc:	3314      	adds	r3, #20
 80144fe:	781b      	ldrb	r3, [r3, #0]
 8014500:	2b00      	cmp	r3, #0
 8014502:	d115      	bne.n	8014530 <etharp_query+0xc4>
    is_new_entry = 1;
 8014504:	2301      	movs	r3, #1
 8014506:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8014508:	7c7a      	ldrb	r2, [r7, #17]
 801450a:	4972      	ldr	r1, [pc, #456]	; (80146d4 <etharp_query+0x268>)
 801450c:	4613      	mov	r3, r2
 801450e:	005b      	lsls	r3, r3, #1
 8014510:	4413      	add	r3, r2
 8014512:	00db      	lsls	r3, r3, #3
 8014514:	440b      	add	r3, r1
 8014516:	3314      	adds	r3, #20
 8014518:	2201      	movs	r2, #1
 801451a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801451c:	7c7a      	ldrb	r2, [r7, #17]
 801451e:	496d      	ldr	r1, [pc, #436]	; (80146d4 <etharp_query+0x268>)
 8014520:	4613      	mov	r3, r2
 8014522:	005b      	lsls	r3, r3, #1
 8014524:	4413      	add	r3, r2
 8014526:	00db      	lsls	r3, r3, #3
 8014528:	440b      	add	r3, r1
 801452a:	3308      	adds	r3, #8
 801452c:	68fa      	ldr	r2, [r7, #12]
 801452e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8014530:	7c7a      	ldrb	r2, [r7, #17]
 8014532:	4968      	ldr	r1, [pc, #416]	; (80146d4 <etharp_query+0x268>)
 8014534:	4613      	mov	r3, r2
 8014536:	005b      	lsls	r3, r3, #1
 8014538:	4413      	add	r3, r2
 801453a:	00db      	lsls	r3, r3, #3
 801453c:	440b      	add	r3, r1
 801453e:	3314      	adds	r3, #20
 8014540:	781b      	ldrb	r3, [r3, #0]
 8014542:	2b01      	cmp	r3, #1
 8014544:	d011      	beq.n	801456a <etharp_query+0xfe>
 8014546:	7c7a      	ldrb	r2, [r7, #17]
 8014548:	4962      	ldr	r1, [pc, #392]	; (80146d4 <etharp_query+0x268>)
 801454a:	4613      	mov	r3, r2
 801454c:	005b      	lsls	r3, r3, #1
 801454e:	4413      	add	r3, r2
 8014550:	00db      	lsls	r3, r3, #3
 8014552:	440b      	add	r3, r1
 8014554:	3314      	adds	r3, #20
 8014556:	781b      	ldrb	r3, [r3, #0]
 8014558:	2b01      	cmp	r3, #1
 801455a:	d806      	bhi.n	801456a <etharp_query+0xfe>
 801455c:	4b5a      	ldr	r3, [pc, #360]	; (80146c8 <etharp_query+0x25c>)
 801455e:	f240 32cd 	movw	r2, #973	; 0x3cd
 8014562:	495d      	ldr	r1, [pc, #372]	; (80146d8 <etharp_query+0x26c>)
 8014564:	485a      	ldr	r0, [pc, #360]	; (80146d0 <etharp_query+0x264>)
 8014566:	f002 fb8b 	bl	8016c80 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801456a:	6a3b      	ldr	r3, [r7, #32]
 801456c:	2b00      	cmp	r3, #0
 801456e:	d102      	bne.n	8014576 <etharp_query+0x10a>
 8014570:	687b      	ldr	r3, [r7, #4]
 8014572:	2b00      	cmp	r3, #0
 8014574:	d10c      	bne.n	8014590 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8014576:	68b9      	ldr	r1, [r7, #8]
 8014578:	68f8      	ldr	r0, [r7, #12]
 801457a:	f000 f963 	bl	8014844 <etharp_request>
 801457e:	4603      	mov	r3, r0
 8014580:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8014584:	687b      	ldr	r3, [r7, #4]
 8014586:	2b00      	cmp	r3, #0
 8014588:	d102      	bne.n	8014590 <etharp_query+0x124>
      return result;
 801458a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801458e:	e096      	b.n	80146be <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8014590:	687b      	ldr	r3, [r7, #4]
 8014592:	2b00      	cmp	r3, #0
 8014594:	d106      	bne.n	80145a4 <etharp_query+0x138>
 8014596:	4b4c      	ldr	r3, [pc, #304]	; (80146c8 <etharp_query+0x25c>)
 8014598:	f240 32e1 	movw	r2, #993	; 0x3e1
 801459c:	494f      	ldr	r1, [pc, #316]	; (80146dc <etharp_query+0x270>)
 801459e:	484c      	ldr	r0, [pc, #304]	; (80146d0 <etharp_query+0x264>)
 80145a0:	f002 fb6e 	bl	8016c80 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80145a4:	7c7a      	ldrb	r2, [r7, #17]
 80145a6:	494b      	ldr	r1, [pc, #300]	; (80146d4 <etharp_query+0x268>)
 80145a8:	4613      	mov	r3, r2
 80145aa:	005b      	lsls	r3, r3, #1
 80145ac:	4413      	add	r3, r2
 80145ae:	00db      	lsls	r3, r3, #3
 80145b0:	440b      	add	r3, r1
 80145b2:	3314      	adds	r3, #20
 80145b4:	781b      	ldrb	r3, [r3, #0]
 80145b6:	2b01      	cmp	r3, #1
 80145b8:	d917      	bls.n	80145ea <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80145ba:	4a49      	ldr	r2, [pc, #292]	; (80146e0 <etharp_query+0x274>)
 80145bc:	7c7b      	ldrb	r3, [r7, #17]
 80145be:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80145c0:	7c7a      	ldrb	r2, [r7, #17]
 80145c2:	4613      	mov	r3, r2
 80145c4:	005b      	lsls	r3, r3, #1
 80145c6:	4413      	add	r3, r2
 80145c8:	00db      	lsls	r3, r3, #3
 80145ca:	3308      	adds	r3, #8
 80145cc:	4a41      	ldr	r2, [pc, #260]	; (80146d4 <etharp_query+0x268>)
 80145ce:	4413      	add	r3, r2
 80145d0:	3304      	adds	r3, #4
 80145d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80145d6:	9200      	str	r2, [sp, #0]
 80145d8:	697a      	ldr	r2, [r7, #20]
 80145da:	6879      	ldr	r1, [r7, #4]
 80145dc:	68f8      	ldr	r0, [r7, #12]
 80145de:	f001 fc97 	bl	8015f10 <ethernet_output>
 80145e2:	4603      	mov	r3, r0
 80145e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80145e8:	e067      	b.n	80146ba <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80145ea:	7c7a      	ldrb	r2, [r7, #17]
 80145ec:	4939      	ldr	r1, [pc, #228]	; (80146d4 <etharp_query+0x268>)
 80145ee:	4613      	mov	r3, r2
 80145f0:	005b      	lsls	r3, r3, #1
 80145f2:	4413      	add	r3, r2
 80145f4:	00db      	lsls	r3, r3, #3
 80145f6:	440b      	add	r3, r1
 80145f8:	3314      	adds	r3, #20
 80145fa:	781b      	ldrb	r3, [r3, #0]
 80145fc:	2b01      	cmp	r3, #1
 80145fe:	d15c      	bne.n	80146ba <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8014600:	2300      	movs	r3, #0
 8014602:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8014604:	687b      	ldr	r3, [r7, #4]
 8014606:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014608:	e01c      	b.n	8014644 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801460a:	69fb      	ldr	r3, [r7, #28]
 801460c:	895a      	ldrh	r2, [r3, #10]
 801460e:	69fb      	ldr	r3, [r7, #28]
 8014610:	891b      	ldrh	r3, [r3, #8]
 8014612:	429a      	cmp	r2, r3
 8014614:	d10a      	bne.n	801462c <etharp_query+0x1c0>
 8014616:	69fb      	ldr	r3, [r7, #28]
 8014618:	681b      	ldr	r3, [r3, #0]
 801461a:	2b00      	cmp	r3, #0
 801461c:	d006      	beq.n	801462c <etharp_query+0x1c0>
 801461e:	4b2a      	ldr	r3, [pc, #168]	; (80146c8 <etharp_query+0x25c>)
 8014620:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8014624:	492f      	ldr	r1, [pc, #188]	; (80146e4 <etharp_query+0x278>)
 8014626:	482a      	ldr	r0, [pc, #168]	; (80146d0 <etharp_query+0x264>)
 8014628:	f002 fb2a 	bl	8016c80 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801462c:	69fb      	ldr	r3, [r7, #28]
 801462e:	7b1b      	ldrb	r3, [r3, #12]
 8014630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014634:	2b00      	cmp	r3, #0
 8014636:	d002      	beq.n	801463e <etharp_query+0x1d2>
        copy_needed = 1;
 8014638:	2301      	movs	r3, #1
 801463a:	61bb      	str	r3, [r7, #24]
        break;
 801463c:	e005      	b.n	801464a <etharp_query+0x1de>
      }
      p = p->next;
 801463e:	69fb      	ldr	r3, [r7, #28]
 8014640:	681b      	ldr	r3, [r3, #0]
 8014642:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014644:	69fb      	ldr	r3, [r7, #28]
 8014646:	2b00      	cmp	r3, #0
 8014648:	d1df      	bne.n	801460a <etharp_query+0x19e>
    }
    if (copy_needed) {
 801464a:	69bb      	ldr	r3, [r7, #24]
 801464c:	2b00      	cmp	r3, #0
 801464e:	d007      	beq.n	8014660 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8014650:	687a      	ldr	r2, [r7, #4]
 8014652:	f44f 7120 	mov.w	r1, #640	; 0x280
 8014656:	200e      	movs	r0, #14
 8014658:	f7f8 fd84 	bl	800d164 <pbuf_clone>
 801465c:	61f8      	str	r0, [r7, #28]
 801465e:	e004      	b.n	801466a <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8014660:	687b      	ldr	r3, [r7, #4]
 8014662:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8014664:	69f8      	ldr	r0, [r7, #28]
 8014666:	f7f8 fb93 	bl	800cd90 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801466a:	69fb      	ldr	r3, [r7, #28]
 801466c:	2b00      	cmp	r3, #0
 801466e:	d021      	beq.n	80146b4 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8014670:	7c7a      	ldrb	r2, [r7, #17]
 8014672:	4918      	ldr	r1, [pc, #96]	; (80146d4 <etharp_query+0x268>)
 8014674:	4613      	mov	r3, r2
 8014676:	005b      	lsls	r3, r3, #1
 8014678:	4413      	add	r3, r2
 801467a:	00db      	lsls	r3, r3, #3
 801467c:	440b      	add	r3, r1
 801467e:	681b      	ldr	r3, [r3, #0]
 8014680:	2b00      	cmp	r3, #0
 8014682:	d00a      	beq.n	801469a <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8014684:	7c7a      	ldrb	r2, [r7, #17]
 8014686:	4913      	ldr	r1, [pc, #76]	; (80146d4 <etharp_query+0x268>)
 8014688:	4613      	mov	r3, r2
 801468a:	005b      	lsls	r3, r3, #1
 801468c:	4413      	add	r3, r2
 801468e:	00db      	lsls	r3, r3, #3
 8014690:	440b      	add	r3, r1
 8014692:	681b      	ldr	r3, [r3, #0]
 8014694:	4618      	mov	r0, r3
 8014696:	f7f8 fad7 	bl	800cc48 <pbuf_free>
      }
      arp_table[i].q = p;
 801469a:	7c7a      	ldrb	r2, [r7, #17]
 801469c:	490d      	ldr	r1, [pc, #52]	; (80146d4 <etharp_query+0x268>)
 801469e:	4613      	mov	r3, r2
 80146a0:	005b      	lsls	r3, r3, #1
 80146a2:	4413      	add	r3, r2
 80146a4:	00db      	lsls	r3, r3, #3
 80146a6:	440b      	add	r3, r1
 80146a8:	69fa      	ldr	r2, [r7, #28]
 80146aa:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80146ac:	2300      	movs	r3, #0
 80146ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80146b2:	e002      	b.n	80146ba <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80146b4:	23ff      	movs	r3, #255	; 0xff
 80146b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 80146ba:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80146be:	4618      	mov	r0, r3
 80146c0:	3728      	adds	r7, #40	; 0x28
 80146c2:	46bd      	mov	sp, r7
 80146c4:	bd80      	pop	{r7, pc}
 80146c6:	bf00      	nop
 80146c8:	0801a45c 	.word	0x0801a45c
 80146cc:	0801a608 	.word	0x0801a608
 80146d0:	0801a4d4 	.word	0x0801a4d4
 80146d4:	2000be70 	.word	0x2000be70
 80146d8:	0801a618 	.word	0x0801a618
 80146dc:	0801a5fc 	.word	0x0801a5fc
 80146e0:	2000bf60 	.word	0x2000bf60
 80146e4:	0801a640 	.word	0x0801a640

080146e8 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80146e8:	b580      	push	{r7, lr}
 80146ea:	b08a      	sub	sp, #40	; 0x28
 80146ec:	af02      	add	r7, sp, #8
 80146ee:	60f8      	str	r0, [r7, #12]
 80146f0:	60b9      	str	r1, [r7, #8]
 80146f2:	607a      	str	r2, [r7, #4]
 80146f4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80146f6:	2300      	movs	r3, #0
 80146f8:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80146fa:	68fb      	ldr	r3, [r7, #12]
 80146fc:	2b00      	cmp	r3, #0
 80146fe:	d106      	bne.n	801470e <etharp_raw+0x26>
 8014700:	4b3a      	ldr	r3, [pc, #232]	; (80147ec <etharp_raw+0x104>)
 8014702:	f240 4257 	movw	r2, #1111	; 0x457
 8014706:	493a      	ldr	r1, [pc, #232]	; (80147f0 <etharp_raw+0x108>)
 8014708:	483a      	ldr	r0, [pc, #232]	; (80147f4 <etharp_raw+0x10c>)
 801470a:	f002 fab9 	bl	8016c80 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801470e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014712:	211c      	movs	r1, #28
 8014714:	200e      	movs	r0, #14
 8014716:	f7f7 ffb3 	bl	800c680 <pbuf_alloc>
 801471a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801471c:	69bb      	ldr	r3, [r7, #24]
 801471e:	2b00      	cmp	r3, #0
 8014720:	d102      	bne.n	8014728 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8014722:	f04f 33ff 	mov.w	r3, #4294967295
 8014726:	e05d      	b.n	80147e4 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8014728:	69bb      	ldr	r3, [r7, #24]
 801472a:	895b      	ldrh	r3, [r3, #10]
 801472c:	2b1b      	cmp	r3, #27
 801472e:	d806      	bhi.n	801473e <etharp_raw+0x56>
 8014730:	4b2e      	ldr	r3, [pc, #184]	; (80147ec <etharp_raw+0x104>)
 8014732:	f240 4262 	movw	r2, #1122	; 0x462
 8014736:	4930      	ldr	r1, [pc, #192]	; (80147f8 <etharp_raw+0x110>)
 8014738:	482e      	ldr	r0, [pc, #184]	; (80147f4 <etharp_raw+0x10c>)
 801473a:	f002 faa1 	bl	8016c80 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801473e:	69bb      	ldr	r3, [r7, #24]
 8014740:	685b      	ldr	r3, [r3, #4]
 8014742:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8014744:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8014746:	4618      	mov	r0, r3
 8014748:	f7f6 fe22 	bl	800b390 <lwip_htons>
 801474c:	4603      	mov	r3, r0
 801474e:	461a      	mov	r2, r3
 8014750:	697b      	ldr	r3, [r7, #20]
 8014752:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8014754:	68fb      	ldr	r3, [r7, #12]
 8014756:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801475a:	2b06      	cmp	r3, #6
 801475c:	d006      	beq.n	801476c <etharp_raw+0x84>
 801475e:	4b23      	ldr	r3, [pc, #140]	; (80147ec <etharp_raw+0x104>)
 8014760:	f240 4269 	movw	r2, #1129	; 0x469
 8014764:	4925      	ldr	r1, [pc, #148]	; (80147fc <etharp_raw+0x114>)
 8014766:	4823      	ldr	r0, [pc, #140]	; (80147f4 <etharp_raw+0x10c>)
 8014768:	f002 fa8a 	bl	8016c80 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801476c:	697b      	ldr	r3, [r7, #20]
 801476e:	3308      	adds	r3, #8
 8014770:	2206      	movs	r2, #6
 8014772:	6839      	ldr	r1, [r7, #0]
 8014774:	4618      	mov	r0, r3
 8014776:	f002 f98f 	bl	8016a98 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801477a:	697b      	ldr	r3, [r7, #20]
 801477c:	3312      	adds	r3, #18
 801477e:	2206      	movs	r2, #6
 8014780:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014782:	4618      	mov	r0, r3
 8014784:	f002 f988 	bl	8016a98 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8014788:	697b      	ldr	r3, [r7, #20]
 801478a:	330e      	adds	r3, #14
 801478c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801478e:	6812      	ldr	r2, [r2, #0]
 8014790:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8014792:	697b      	ldr	r3, [r7, #20]
 8014794:	3318      	adds	r3, #24
 8014796:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014798:	6812      	ldr	r2, [r2, #0]
 801479a:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801479c:	697b      	ldr	r3, [r7, #20]
 801479e:	2200      	movs	r2, #0
 80147a0:	701a      	strb	r2, [r3, #0]
 80147a2:	2200      	movs	r2, #0
 80147a4:	f042 0201 	orr.w	r2, r2, #1
 80147a8:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80147aa:	697b      	ldr	r3, [r7, #20]
 80147ac:	2200      	movs	r2, #0
 80147ae:	f042 0208 	orr.w	r2, r2, #8
 80147b2:	709a      	strb	r2, [r3, #2]
 80147b4:	2200      	movs	r2, #0
 80147b6:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80147b8:	697b      	ldr	r3, [r7, #20]
 80147ba:	2206      	movs	r2, #6
 80147bc:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80147be:	697b      	ldr	r3, [r7, #20]
 80147c0:	2204      	movs	r2, #4
 80147c2:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80147c4:	f640 0306 	movw	r3, #2054	; 0x806
 80147c8:	9300      	str	r3, [sp, #0]
 80147ca:	687b      	ldr	r3, [r7, #4]
 80147cc:	68ba      	ldr	r2, [r7, #8]
 80147ce:	69b9      	ldr	r1, [r7, #24]
 80147d0:	68f8      	ldr	r0, [r7, #12]
 80147d2:	f001 fb9d 	bl	8015f10 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80147d6:	69b8      	ldr	r0, [r7, #24]
 80147d8:	f7f8 fa36 	bl	800cc48 <pbuf_free>
  p = NULL;
 80147dc:	2300      	movs	r3, #0
 80147de:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80147e0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80147e4:	4618      	mov	r0, r3
 80147e6:	3720      	adds	r7, #32
 80147e8:	46bd      	mov	sp, r7
 80147ea:	bd80      	pop	{r7, pc}
 80147ec:	0801a45c 	.word	0x0801a45c
 80147f0:	0801a5ac 	.word	0x0801a5ac
 80147f4:	0801a4d4 	.word	0x0801a4d4
 80147f8:	0801a65c 	.word	0x0801a65c
 80147fc:	0801a690 	.word	0x0801a690

08014800 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8014800:	b580      	push	{r7, lr}
 8014802:	b088      	sub	sp, #32
 8014804:	af04      	add	r7, sp, #16
 8014806:	60f8      	str	r0, [r7, #12]
 8014808:	60b9      	str	r1, [r7, #8]
 801480a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801480c:	68fb      	ldr	r3, [r7, #12]
 801480e:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8014812:	68fb      	ldr	r3, [r7, #12]
 8014814:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8014818:	68fb      	ldr	r3, [r7, #12]
 801481a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801481c:	2201      	movs	r2, #1
 801481e:	9203      	str	r2, [sp, #12]
 8014820:	68ba      	ldr	r2, [r7, #8]
 8014822:	9202      	str	r2, [sp, #8]
 8014824:	4a06      	ldr	r2, [pc, #24]	; (8014840 <etharp_request_dst+0x40>)
 8014826:	9201      	str	r2, [sp, #4]
 8014828:	9300      	str	r3, [sp, #0]
 801482a:	4603      	mov	r3, r0
 801482c:	687a      	ldr	r2, [r7, #4]
 801482e:	68f8      	ldr	r0, [r7, #12]
 8014830:	f7ff ff5a 	bl	80146e8 <etharp_raw>
 8014834:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8014836:	4618      	mov	r0, r3
 8014838:	3710      	adds	r7, #16
 801483a:	46bd      	mov	sp, r7
 801483c:	bd80      	pop	{r7, pc}
 801483e:	bf00      	nop
 8014840:	0801ac6c 	.word	0x0801ac6c

08014844 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8014844:	b580      	push	{r7, lr}
 8014846:	b082      	sub	sp, #8
 8014848:	af00      	add	r7, sp, #0
 801484a:	6078      	str	r0, [r7, #4]
 801484c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801484e:	4a05      	ldr	r2, [pc, #20]	; (8014864 <etharp_request+0x20>)
 8014850:	6839      	ldr	r1, [r7, #0]
 8014852:	6878      	ldr	r0, [r7, #4]
 8014854:	f7ff ffd4 	bl	8014800 <etharp_request_dst>
 8014858:	4603      	mov	r3, r0
}
 801485a:	4618      	mov	r0, r3
 801485c:	3708      	adds	r7, #8
 801485e:	46bd      	mov	sp, r7
 8014860:	bd80      	pop	{r7, pc}
 8014862:	bf00      	nop
 8014864:	0801ac64 	.word	0x0801ac64

08014868 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8014868:	b580      	push	{r7, lr}
 801486a:	b08e      	sub	sp, #56	; 0x38
 801486c:	af04      	add	r7, sp, #16
 801486e:	6078      	str	r0, [r7, #4]
 8014870:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8014872:	4b87      	ldr	r3, [pc, #540]	; (8014a90 <icmp_input+0x228>)
 8014874:	689b      	ldr	r3, [r3, #8]
 8014876:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8014878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801487a:	781b      	ldrb	r3, [r3, #0]
 801487c:	f003 030f 	and.w	r3, r3, #15
 8014880:	b2db      	uxtb	r3, r3
 8014882:	009b      	lsls	r3, r3, #2
 8014884:	b2db      	uxtb	r3, r3
 8014886:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8014888:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801488a:	2b13      	cmp	r3, #19
 801488c:	f240 80e8 	bls.w	8014a60 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8014890:	687b      	ldr	r3, [r7, #4]
 8014892:	895b      	ldrh	r3, [r3, #10]
 8014894:	2b03      	cmp	r3, #3
 8014896:	f240 80e5 	bls.w	8014a64 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801489a:	687b      	ldr	r3, [r7, #4]
 801489c:	685b      	ldr	r3, [r3, #4]
 801489e:	781b      	ldrb	r3, [r3, #0]
 80148a0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80148a4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80148a8:	2b00      	cmp	r3, #0
 80148aa:	f000 80d2 	beq.w	8014a52 <icmp_input+0x1ea>
 80148ae:	2b08      	cmp	r3, #8
 80148b0:	f040 80d2 	bne.w	8014a58 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80148b4:	4b77      	ldr	r3, [pc, #476]	; (8014a94 <icmp_input+0x22c>)
 80148b6:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80148b8:	4b75      	ldr	r3, [pc, #468]	; (8014a90 <icmp_input+0x228>)
 80148ba:	695b      	ldr	r3, [r3, #20]
 80148bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80148c0:	2be0      	cmp	r3, #224	; 0xe0
 80148c2:	f000 80d6 	beq.w	8014a72 <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80148c6:	4b72      	ldr	r3, [pc, #456]	; (8014a90 <icmp_input+0x228>)
 80148c8:	695b      	ldr	r3, [r3, #20]
 80148ca:	4a71      	ldr	r2, [pc, #452]	; (8014a90 <icmp_input+0x228>)
 80148cc:	6812      	ldr	r2, [r2, #0]
 80148ce:	4611      	mov	r1, r2
 80148d0:	4618      	mov	r0, r3
 80148d2:	f000 fc11 	bl	80150f8 <ip4_addr_isbroadcast_u32>
 80148d6:	4603      	mov	r3, r0
 80148d8:	2b00      	cmp	r3, #0
 80148da:	f040 80cc 	bne.w	8014a76 <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80148de:	687b      	ldr	r3, [r7, #4]
 80148e0:	891b      	ldrh	r3, [r3, #8]
 80148e2:	2b07      	cmp	r3, #7
 80148e4:	f240 80c0 	bls.w	8014a68 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 80148e8:	6878      	ldr	r0, [r7, #4]
 80148ea:	f7f6 fdeb 	bl	800b4c4 <inet_chksum_pbuf>
 80148ee:	4603      	mov	r3, r0
 80148f0:	2b00      	cmp	r3, #0
 80148f2:	d003      	beq.n	80148fc <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 80148f4:	6878      	ldr	r0, [r7, #4]
 80148f6:	f7f8 f9a7 	bl	800cc48 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 80148fa:	e0c5      	b.n	8014a88 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80148fc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80148fe:	330e      	adds	r3, #14
 8014900:	4619      	mov	r1, r3
 8014902:	6878      	ldr	r0, [r7, #4]
 8014904:	f7f8 f90a 	bl	800cb1c <pbuf_add_header>
 8014908:	4603      	mov	r3, r0
 801490a:	2b00      	cmp	r3, #0
 801490c:	d04b      	beq.n	80149a6 <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801490e:	687b      	ldr	r3, [r7, #4]
 8014910:	891a      	ldrh	r2, [r3, #8]
 8014912:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014914:	4413      	add	r3, r2
 8014916:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8014918:	687b      	ldr	r3, [r7, #4]
 801491a:	891b      	ldrh	r3, [r3, #8]
 801491c:	8b7a      	ldrh	r2, [r7, #26]
 801491e:	429a      	cmp	r2, r3
 8014920:	f0c0 80ab 	bcc.w	8014a7a <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8014924:	8b7b      	ldrh	r3, [r7, #26]
 8014926:	f44f 7220 	mov.w	r2, #640	; 0x280
 801492a:	4619      	mov	r1, r3
 801492c:	200e      	movs	r0, #14
 801492e:	f7f7 fea7 	bl	800c680 <pbuf_alloc>
 8014932:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8014934:	697b      	ldr	r3, [r7, #20]
 8014936:	2b00      	cmp	r3, #0
 8014938:	f000 80a1 	beq.w	8014a7e <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801493c:	697b      	ldr	r3, [r7, #20]
 801493e:	895b      	ldrh	r3, [r3, #10]
 8014940:	461a      	mov	r2, r3
 8014942:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014944:	3308      	adds	r3, #8
 8014946:	429a      	cmp	r2, r3
 8014948:	d203      	bcs.n	8014952 <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801494a:	6978      	ldr	r0, [r7, #20]
 801494c:	f7f8 f97c 	bl	800cc48 <pbuf_free>
          goto icmperr;
 8014950:	e096      	b.n	8014a80 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8014952:	697b      	ldr	r3, [r7, #20]
 8014954:	685b      	ldr	r3, [r3, #4]
 8014956:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8014958:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801495a:	4618      	mov	r0, r3
 801495c:	f002 f89c 	bl	8016a98 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8014960:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014962:	4619      	mov	r1, r3
 8014964:	6978      	ldr	r0, [r7, #20]
 8014966:	f7f8 f8e9 	bl	800cb3c <pbuf_remove_header>
 801496a:	4603      	mov	r3, r0
 801496c:	2b00      	cmp	r3, #0
 801496e:	d009      	beq.n	8014984 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8014970:	4b49      	ldr	r3, [pc, #292]	; (8014a98 <icmp_input+0x230>)
 8014972:	22b6      	movs	r2, #182	; 0xb6
 8014974:	4949      	ldr	r1, [pc, #292]	; (8014a9c <icmp_input+0x234>)
 8014976:	484a      	ldr	r0, [pc, #296]	; (8014aa0 <icmp_input+0x238>)
 8014978:	f002 f982 	bl	8016c80 <iprintf>
          pbuf_free(r);
 801497c:	6978      	ldr	r0, [r7, #20]
 801497e:	f7f8 f963 	bl	800cc48 <pbuf_free>
          goto icmperr;
 8014982:	e07d      	b.n	8014a80 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8014984:	6879      	ldr	r1, [r7, #4]
 8014986:	6978      	ldr	r0, [r7, #20]
 8014988:	f7f8 fa80 	bl	800ce8c <pbuf_copy>
 801498c:	4603      	mov	r3, r0
 801498e:	2b00      	cmp	r3, #0
 8014990:	d003      	beq.n	801499a <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8014992:	6978      	ldr	r0, [r7, #20]
 8014994:	f7f8 f958 	bl	800cc48 <pbuf_free>
          goto icmperr;
 8014998:	e072      	b.n	8014a80 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 801499a:	6878      	ldr	r0, [r7, #4]
 801499c:	f7f8 f954 	bl	800cc48 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80149a0:	697b      	ldr	r3, [r7, #20]
 80149a2:	607b      	str	r3, [r7, #4]
 80149a4:	e00f      	b.n	80149c6 <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80149a6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80149a8:	330e      	adds	r3, #14
 80149aa:	4619      	mov	r1, r3
 80149ac:	6878      	ldr	r0, [r7, #4]
 80149ae:	f7f8 f8c5 	bl	800cb3c <pbuf_remove_header>
 80149b2:	4603      	mov	r3, r0
 80149b4:	2b00      	cmp	r3, #0
 80149b6:	d006      	beq.n	80149c6 <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80149b8:	4b37      	ldr	r3, [pc, #220]	; (8014a98 <icmp_input+0x230>)
 80149ba:	22c7      	movs	r2, #199	; 0xc7
 80149bc:	4939      	ldr	r1, [pc, #228]	; (8014aa4 <icmp_input+0x23c>)
 80149be:	4838      	ldr	r0, [pc, #224]	; (8014aa0 <icmp_input+0x238>)
 80149c0:	f002 f95e 	bl	8016c80 <iprintf>
          goto icmperr;
 80149c4:	e05c      	b.n	8014a80 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80149c6:	687b      	ldr	r3, [r7, #4]
 80149c8:	685b      	ldr	r3, [r3, #4]
 80149ca:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80149cc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80149ce:	4619      	mov	r1, r3
 80149d0:	6878      	ldr	r0, [r7, #4]
 80149d2:	f7f8 f8a3 	bl	800cb1c <pbuf_add_header>
 80149d6:	4603      	mov	r3, r0
 80149d8:	2b00      	cmp	r3, #0
 80149da:	d13c      	bne.n	8014a56 <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80149dc:	687b      	ldr	r3, [r7, #4]
 80149de:	685b      	ldr	r3, [r3, #4]
 80149e0:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80149e2:	69fb      	ldr	r3, [r7, #28]
 80149e4:	681a      	ldr	r2, [r3, #0]
 80149e6:	68fb      	ldr	r3, [r7, #12]
 80149e8:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80149ea:	4b29      	ldr	r3, [pc, #164]	; (8014a90 <icmp_input+0x228>)
 80149ec:	691a      	ldr	r2, [r3, #16]
 80149ee:	68fb      	ldr	r3, [r7, #12]
 80149f0:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80149f2:	693b      	ldr	r3, [r7, #16]
 80149f4:	2200      	movs	r2, #0
 80149f6:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 80149f8:	693b      	ldr	r3, [r7, #16]
 80149fa:	885b      	ldrh	r3, [r3, #2]
 80149fc:	b29b      	uxth	r3, r3
 80149fe:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8014a02:	4293      	cmp	r3, r2
 8014a04:	d907      	bls.n	8014a16 <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8014a06:	693b      	ldr	r3, [r7, #16]
 8014a08:	885b      	ldrh	r3, [r3, #2]
 8014a0a:	b29b      	uxth	r3, r3
 8014a0c:	3309      	adds	r3, #9
 8014a0e:	b29a      	uxth	r2, r3
 8014a10:	693b      	ldr	r3, [r7, #16]
 8014a12:	805a      	strh	r2, [r3, #2]
 8014a14:	e006      	b.n	8014a24 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 8014a16:	693b      	ldr	r3, [r7, #16]
 8014a18:	885b      	ldrh	r3, [r3, #2]
 8014a1a:	b29b      	uxth	r3, r3
 8014a1c:	3308      	adds	r3, #8
 8014a1e:	b29a      	uxth	r2, r3
 8014a20:	693b      	ldr	r3, [r7, #16]
 8014a22:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8014a24:	68fb      	ldr	r3, [r7, #12]
 8014a26:	22ff      	movs	r2, #255	; 0xff
 8014a28:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8014a2a:	68fb      	ldr	r3, [r7, #12]
 8014a2c:	2200      	movs	r2, #0
 8014a2e:	729a      	strb	r2, [r3, #10]
 8014a30:	2200      	movs	r2, #0
 8014a32:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8014a34:	683b      	ldr	r3, [r7, #0]
 8014a36:	9302      	str	r3, [sp, #8]
 8014a38:	2301      	movs	r3, #1
 8014a3a:	9301      	str	r3, [sp, #4]
 8014a3c:	2300      	movs	r3, #0
 8014a3e:	9300      	str	r3, [sp, #0]
 8014a40:	23ff      	movs	r3, #255	; 0xff
 8014a42:	2200      	movs	r2, #0
 8014a44:	69f9      	ldr	r1, [r7, #28]
 8014a46:	6878      	ldr	r0, [r7, #4]
 8014a48:	f000 fa7e 	bl	8014f48 <ip4_output_if>
 8014a4c:	4603      	mov	r3, r0
 8014a4e:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8014a50:	e001      	b.n	8014a56 <icmp_input+0x1ee>
      break;
 8014a52:	bf00      	nop
 8014a54:	e000      	b.n	8014a58 <icmp_input+0x1f0>
      break;
 8014a56:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8014a58:	6878      	ldr	r0, [r7, #4]
 8014a5a:	f7f8 f8f5 	bl	800cc48 <pbuf_free>
  return;
 8014a5e:	e013      	b.n	8014a88 <icmp_input+0x220>
    goto lenerr;
 8014a60:	bf00      	nop
 8014a62:	e002      	b.n	8014a6a <icmp_input+0x202>
    goto lenerr;
 8014a64:	bf00      	nop
 8014a66:	e000      	b.n	8014a6a <icmp_input+0x202>
        goto lenerr;
 8014a68:	bf00      	nop
lenerr:
  pbuf_free(p);
 8014a6a:	6878      	ldr	r0, [r7, #4]
 8014a6c:	f7f8 f8ec 	bl	800cc48 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8014a70:	e00a      	b.n	8014a88 <icmp_input+0x220>
        goto icmperr;
 8014a72:	bf00      	nop
 8014a74:	e004      	b.n	8014a80 <icmp_input+0x218>
        goto icmperr;
 8014a76:	bf00      	nop
 8014a78:	e002      	b.n	8014a80 <icmp_input+0x218>
          goto icmperr;
 8014a7a:	bf00      	nop
 8014a7c:	e000      	b.n	8014a80 <icmp_input+0x218>
          goto icmperr;
 8014a7e:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8014a80:	6878      	ldr	r0, [r7, #4]
 8014a82:	f7f8 f8e1 	bl	800cc48 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8014a86:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8014a88:	3728      	adds	r7, #40	; 0x28
 8014a8a:	46bd      	mov	sp, r7
 8014a8c:	bd80      	pop	{r7, pc}
 8014a8e:	bf00      	nop
 8014a90:	20008d10 	.word	0x20008d10
 8014a94:	20008d24 	.word	0x20008d24
 8014a98:	0801a6d4 	.word	0x0801a6d4
 8014a9c:	0801a70c 	.word	0x0801a70c
 8014aa0:	0801a744 	.word	0x0801a744
 8014aa4:	0801a76c 	.word	0x0801a76c

08014aa8 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8014aa8:	b580      	push	{r7, lr}
 8014aaa:	b082      	sub	sp, #8
 8014aac:	af00      	add	r7, sp, #0
 8014aae:	6078      	str	r0, [r7, #4]
 8014ab0:	460b      	mov	r3, r1
 8014ab2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8014ab4:	78fb      	ldrb	r3, [r7, #3]
 8014ab6:	461a      	mov	r2, r3
 8014ab8:	2103      	movs	r1, #3
 8014aba:	6878      	ldr	r0, [r7, #4]
 8014abc:	f000 f814 	bl	8014ae8 <icmp_send_response>
}
 8014ac0:	bf00      	nop
 8014ac2:	3708      	adds	r7, #8
 8014ac4:	46bd      	mov	sp, r7
 8014ac6:	bd80      	pop	{r7, pc}

08014ac8 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8014ac8:	b580      	push	{r7, lr}
 8014aca:	b082      	sub	sp, #8
 8014acc:	af00      	add	r7, sp, #0
 8014ace:	6078      	str	r0, [r7, #4]
 8014ad0:	460b      	mov	r3, r1
 8014ad2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8014ad4:	78fb      	ldrb	r3, [r7, #3]
 8014ad6:	461a      	mov	r2, r3
 8014ad8:	210b      	movs	r1, #11
 8014ada:	6878      	ldr	r0, [r7, #4]
 8014adc:	f000 f804 	bl	8014ae8 <icmp_send_response>
}
 8014ae0:	bf00      	nop
 8014ae2:	3708      	adds	r7, #8
 8014ae4:	46bd      	mov	sp, r7
 8014ae6:	bd80      	pop	{r7, pc}

08014ae8 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8014ae8:	b580      	push	{r7, lr}
 8014aea:	b08c      	sub	sp, #48	; 0x30
 8014aec:	af04      	add	r7, sp, #16
 8014aee:	6078      	str	r0, [r7, #4]
 8014af0:	460b      	mov	r3, r1
 8014af2:	70fb      	strb	r3, [r7, #3]
 8014af4:	4613      	mov	r3, r2
 8014af6:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8014af8:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014afc:	2124      	movs	r1, #36	; 0x24
 8014afe:	2022      	movs	r0, #34	; 0x22
 8014b00:	f7f7 fdbe 	bl	800c680 <pbuf_alloc>
 8014b04:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8014b06:	69fb      	ldr	r3, [r7, #28]
 8014b08:	2b00      	cmp	r3, #0
 8014b0a:	d056      	beq.n	8014bba <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8014b0c:	69fb      	ldr	r3, [r7, #28]
 8014b0e:	895b      	ldrh	r3, [r3, #10]
 8014b10:	2b23      	cmp	r3, #35	; 0x23
 8014b12:	d806      	bhi.n	8014b22 <icmp_send_response+0x3a>
 8014b14:	4b2b      	ldr	r3, [pc, #172]	; (8014bc4 <icmp_send_response+0xdc>)
 8014b16:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8014b1a:	492b      	ldr	r1, [pc, #172]	; (8014bc8 <icmp_send_response+0xe0>)
 8014b1c:	482b      	ldr	r0, [pc, #172]	; (8014bcc <icmp_send_response+0xe4>)
 8014b1e:	f002 f8af 	bl	8016c80 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8014b22:	687b      	ldr	r3, [r7, #4]
 8014b24:	685b      	ldr	r3, [r3, #4]
 8014b26:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8014b28:	69fb      	ldr	r3, [r7, #28]
 8014b2a:	685b      	ldr	r3, [r3, #4]
 8014b2c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8014b2e:	697b      	ldr	r3, [r7, #20]
 8014b30:	78fa      	ldrb	r2, [r7, #3]
 8014b32:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8014b34:	697b      	ldr	r3, [r7, #20]
 8014b36:	78ba      	ldrb	r2, [r7, #2]
 8014b38:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8014b3a:	697b      	ldr	r3, [r7, #20]
 8014b3c:	2200      	movs	r2, #0
 8014b3e:	711a      	strb	r2, [r3, #4]
 8014b40:	2200      	movs	r2, #0
 8014b42:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8014b44:	697b      	ldr	r3, [r7, #20]
 8014b46:	2200      	movs	r2, #0
 8014b48:	719a      	strb	r2, [r3, #6]
 8014b4a:	2200      	movs	r2, #0
 8014b4c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8014b4e:	69fb      	ldr	r3, [r7, #28]
 8014b50:	685b      	ldr	r3, [r3, #4]
 8014b52:	f103 0008 	add.w	r0, r3, #8
 8014b56:	687b      	ldr	r3, [r7, #4]
 8014b58:	685b      	ldr	r3, [r3, #4]
 8014b5a:	221c      	movs	r2, #28
 8014b5c:	4619      	mov	r1, r3
 8014b5e:	f001 ff9b 	bl	8016a98 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8014b62:	69bb      	ldr	r3, [r7, #24]
 8014b64:	68db      	ldr	r3, [r3, #12]
 8014b66:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8014b68:	f107 030c 	add.w	r3, r7, #12
 8014b6c:	4618      	mov	r0, r3
 8014b6e:	f000 f82f 	bl	8014bd0 <ip4_route>
 8014b72:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8014b74:	693b      	ldr	r3, [r7, #16]
 8014b76:	2b00      	cmp	r3, #0
 8014b78:	d01b      	beq.n	8014bb2 <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8014b7a:	697b      	ldr	r3, [r7, #20]
 8014b7c:	2200      	movs	r2, #0
 8014b7e:	709a      	strb	r2, [r3, #2]
 8014b80:	2200      	movs	r2, #0
 8014b82:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8014b84:	69fb      	ldr	r3, [r7, #28]
 8014b86:	895b      	ldrh	r3, [r3, #10]
 8014b88:	4619      	mov	r1, r3
 8014b8a:	6978      	ldr	r0, [r7, #20]
 8014b8c:	f7f6 fc88 	bl	800b4a0 <inet_chksum>
 8014b90:	4603      	mov	r3, r0
 8014b92:	461a      	mov	r2, r3
 8014b94:	697b      	ldr	r3, [r7, #20]
 8014b96:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8014b98:	f107 020c 	add.w	r2, r7, #12
 8014b9c:	693b      	ldr	r3, [r7, #16]
 8014b9e:	9302      	str	r3, [sp, #8]
 8014ba0:	2301      	movs	r3, #1
 8014ba2:	9301      	str	r3, [sp, #4]
 8014ba4:	2300      	movs	r3, #0
 8014ba6:	9300      	str	r3, [sp, #0]
 8014ba8:	23ff      	movs	r3, #255	; 0xff
 8014baa:	2100      	movs	r1, #0
 8014bac:	69f8      	ldr	r0, [r7, #28]
 8014bae:	f000 f9cb 	bl	8014f48 <ip4_output_if>
  }
  pbuf_free(q);
 8014bb2:	69f8      	ldr	r0, [r7, #28]
 8014bb4:	f7f8 f848 	bl	800cc48 <pbuf_free>
 8014bb8:	e000      	b.n	8014bbc <icmp_send_response+0xd4>
    return;
 8014bba:	bf00      	nop
}
 8014bbc:	3720      	adds	r7, #32
 8014bbe:	46bd      	mov	sp, r7
 8014bc0:	bd80      	pop	{r7, pc}
 8014bc2:	bf00      	nop
 8014bc4:	0801a6d4 	.word	0x0801a6d4
 8014bc8:	0801a7a0 	.word	0x0801a7a0
 8014bcc:	0801a744 	.word	0x0801a744

08014bd0 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8014bd0:	b480      	push	{r7}
 8014bd2:	b085      	sub	sp, #20
 8014bd4:	af00      	add	r7, sp, #0
 8014bd6:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8014bd8:	4b32      	ldr	r3, [pc, #200]	; (8014ca4 <ip4_route+0xd4>)
 8014bda:	681b      	ldr	r3, [r3, #0]
 8014bdc:	60fb      	str	r3, [r7, #12]
 8014bde:	e036      	b.n	8014c4e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8014be0:	68fb      	ldr	r3, [r7, #12]
 8014be2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014be6:	f003 0301 	and.w	r3, r3, #1
 8014bea:	b2db      	uxtb	r3, r3
 8014bec:	2b00      	cmp	r3, #0
 8014bee:	d02b      	beq.n	8014c48 <ip4_route+0x78>
 8014bf0:	68fb      	ldr	r3, [r7, #12]
 8014bf2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014bf6:	089b      	lsrs	r3, r3, #2
 8014bf8:	f003 0301 	and.w	r3, r3, #1
 8014bfc:	b2db      	uxtb	r3, r3
 8014bfe:	2b00      	cmp	r3, #0
 8014c00:	d022      	beq.n	8014c48 <ip4_route+0x78>
 8014c02:	68fb      	ldr	r3, [r7, #12]
 8014c04:	3304      	adds	r3, #4
 8014c06:	681b      	ldr	r3, [r3, #0]
 8014c08:	2b00      	cmp	r3, #0
 8014c0a:	d01d      	beq.n	8014c48 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8014c0c:	687b      	ldr	r3, [r7, #4]
 8014c0e:	681a      	ldr	r2, [r3, #0]
 8014c10:	68fb      	ldr	r3, [r7, #12]
 8014c12:	3304      	adds	r3, #4
 8014c14:	681b      	ldr	r3, [r3, #0]
 8014c16:	405a      	eors	r2, r3
 8014c18:	68fb      	ldr	r3, [r7, #12]
 8014c1a:	3308      	adds	r3, #8
 8014c1c:	681b      	ldr	r3, [r3, #0]
 8014c1e:	4013      	ands	r3, r2
 8014c20:	2b00      	cmp	r3, #0
 8014c22:	d101      	bne.n	8014c28 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8014c24:	68fb      	ldr	r3, [r7, #12]
 8014c26:	e038      	b.n	8014c9a <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8014c28:	68fb      	ldr	r3, [r7, #12]
 8014c2a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014c2e:	f003 0302 	and.w	r3, r3, #2
 8014c32:	2b00      	cmp	r3, #0
 8014c34:	d108      	bne.n	8014c48 <ip4_route+0x78>
 8014c36:	687b      	ldr	r3, [r7, #4]
 8014c38:	681a      	ldr	r2, [r3, #0]
 8014c3a:	68fb      	ldr	r3, [r7, #12]
 8014c3c:	330c      	adds	r3, #12
 8014c3e:	681b      	ldr	r3, [r3, #0]
 8014c40:	429a      	cmp	r2, r3
 8014c42:	d101      	bne.n	8014c48 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8014c44:	68fb      	ldr	r3, [r7, #12]
 8014c46:	e028      	b.n	8014c9a <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8014c48:	68fb      	ldr	r3, [r7, #12]
 8014c4a:	681b      	ldr	r3, [r3, #0]
 8014c4c:	60fb      	str	r3, [r7, #12]
 8014c4e:	68fb      	ldr	r3, [r7, #12]
 8014c50:	2b00      	cmp	r3, #0
 8014c52:	d1c5      	bne.n	8014be0 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8014c54:	4b14      	ldr	r3, [pc, #80]	; (8014ca8 <ip4_route+0xd8>)
 8014c56:	681b      	ldr	r3, [r3, #0]
 8014c58:	2b00      	cmp	r3, #0
 8014c5a:	d01a      	beq.n	8014c92 <ip4_route+0xc2>
 8014c5c:	4b12      	ldr	r3, [pc, #72]	; (8014ca8 <ip4_route+0xd8>)
 8014c5e:	681b      	ldr	r3, [r3, #0]
 8014c60:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014c64:	f003 0301 	and.w	r3, r3, #1
 8014c68:	2b00      	cmp	r3, #0
 8014c6a:	d012      	beq.n	8014c92 <ip4_route+0xc2>
 8014c6c:	4b0e      	ldr	r3, [pc, #56]	; (8014ca8 <ip4_route+0xd8>)
 8014c6e:	681b      	ldr	r3, [r3, #0]
 8014c70:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014c74:	f003 0304 	and.w	r3, r3, #4
 8014c78:	2b00      	cmp	r3, #0
 8014c7a:	d00a      	beq.n	8014c92 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8014c7c:	4b0a      	ldr	r3, [pc, #40]	; (8014ca8 <ip4_route+0xd8>)
 8014c7e:	681b      	ldr	r3, [r3, #0]
 8014c80:	3304      	adds	r3, #4
 8014c82:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8014c84:	2b00      	cmp	r3, #0
 8014c86:	d004      	beq.n	8014c92 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8014c88:	687b      	ldr	r3, [r7, #4]
 8014c8a:	681b      	ldr	r3, [r3, #0]
 8014c8c:	b2db      	uxtb	r3, r3
 8014c8e:	2b7f      	cmp	r3, #127	; 0x7f
 8014c90:	d101      	bne.n	8014c96 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8014c92:	2300      	movs	r3, #0
 8014c94:	e001      	b.n	8014c9a <ip4_route+0xca>
  }

  return netif_default;
 8014c96:	4b04      	ldr	r3, [pc, #16]	; (8014ca8 <ip4_route+0xd8>)
 8014c98:	681b      	ldr	r3, [r3, #0]
}
 8014c9a:	4618      	mov	r0, r3
 8014c9c:	3714      	adds	r7, #20
 8014c9e:	46bd      	mov	sp, r7
 8014ca0:	bc80      	pop	{r7}
 8014ca2:	4770      	bx	lr
 8014ca4:	2000be04 	.word	0x2000be04
 8014ca8:	2000be08 	.word	0x2000be08

08014cac <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8014cac:	b580      	push	{r7, lr}
 8014cae:	b082      	sub	sp, #8
 8014cb0:	af00      	add	r7, sp, #0
 8014cb2:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8014cb4:	687b      	ldr	r3, [r7, #4]
 8014cb6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014cba:	f003 0301 	and.w	r3, r3, #1
 8014cbe:	b2db      	uxtb	r3, r3
 8014cc0:	2b00      	cmp	r3, #0
 8014cc2:	d016      	beq.n	8014cf2 <ip4_input_accept+0x46>
 8014cc4:	687b      	ldr	r3, [r7, #4]
 8014cc6:	3304      	adds	r3, #4
 8014cc8:	681b      	ldr	r3, [r3, #0]
 8014cca:	2b00      	cmp	r3, #0
 8014ccc:	d011      	beq.n	8014cf2 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8014cce:	4b0b      	ldr	r3, [pc, #44]	; (8014cfc <ip4_input_accept+0x50>)
 8014cd0:	695a      	ldr	r2, [r3, #20]
 8014cd2:	687b      	ldr	r3, [r7, #4]
 8014cd4:	3304      	adds	r3, #4
 8014cd6:	681b      	ldr	r3, [r3, #0]
 8014cd8:	429a      	cmp	r2, r3
 8014cda:	d008      	beq.n	8014cee <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8014cdc:	4b07      	ldr	r3, [pc, #28]	; (8014cfc <ip4_input_accept+0x50>)
 8014cde:	695b      	ldr	r3, [r3, #20]
 8014ce0:	6879      	ldr	r1, [r7, #4]
 8014ce2:	4618      	mov	r0, r3
 8014ce4:	f000 fa08 	bl	80150f8 <ip4_addr_isbroadcast_u32>
 8014ce8:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8014cea:	2b00      	cmp	r3, #0
 8014cec:	d001      	beq.n	8014cf2 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8014cee:	2301      	movs	r3, #1
 8014cf0:	e000      	b.n	8014cf4 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8014cf2:	2300      	movs	r3, #0
}
 8014cf4:	4618      	mov	r0, r3
 8014cf6:	3708      	adds	r7, #8
 8014cf8:	46bd      	mov	sp, r7
 8014cfa:	bd80      	pop	{r7, pc}
 8014cfc:	20008d10 	.word	0x20008d10

08014d00 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8014d00:	b580      	push	{r7, lr}
 8014d02:	b086      	sub	sp, #24
 8014d04:	af00      	add	r7, sp, #0
 8014d06:	6078      	str	r0, [r7, #4]
 8014d08:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8014d0a:	687b      	ldr	r3, [r7, #4]
 8014d0c:	685b      	ldr	r3, [r3, #4]
 8014d0e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8014d10:	697b      	ldr	r3, [r7, #20]
 8014d12:	781b      	ldrb	r3, [r3, #0]
 8014d14:	091b      	lsrs	r3, r3, #4
 8014d16:	b2db      	uxtb	r3, r3
 8014d18:	2b04      	cmp	r3, #4
 8014d1a:	d004      	beq.n	8014d26 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8014d1c:	6878      	ldr	r0, [r7, #4]
 8014d1e:	f7f7 ff93 	bl	800cc48 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8014d22:	2300      	movs	r3, #0
 8014d24:	e107      	b.n	8014f36 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8014d26:	697b      	ldr	r3, [r7, #20]
 8014d28:	781b      	ldrb	r3, [r3, #0]
 8014d2a:	f003 030f 	and.w	r3, r3, #15
 8014d2e:	b2db      	uxtb	r3, r3
 8014d30:	009b      	lsls	r3, r3, #2
 8014d32:	b2db      	uxtb	r3, r3
 8014d34:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8014d36:	697b      	ldr	r3, [r7, #20]
 8014d38:	885b      	ldrh	r3, [r3, #2]
 8014d3a:	b29b      	uxth	r3, r3
 8014d3c:	4618      	mov	r0, r3
 8014d3e:	f7f6 fb27 	bl	800b390 <lwip_htons>
 8014d42:	4603      	mov	r3, r0
 8014d44:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8014d46:	687b      	ldr	r3, [r7, #4]
 8014d48:	891b      	ldrh	r3, [r3, #8]
 8014d4a:	89ba      	ldrh	r2, [r7, #12]
 8014d4c:	429a      	cmp	r2, r3
 8014d4e:	d204      	bcs.n	8014d5a <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8014d50:	89bb      	ldrh	r3, [r7, #12]
 8014d52:	4619      	mov	r1, r3
 8014d54:	6878      	ldr	r0, [r7, #4]
 8014d56:	f7f7 fdf1 	bl	800c93c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8014d5a:	687b      	ldr	r3, [r7, #4]
 8014d5c:	895b      	ldrh	r3, [r3, #10]
 8014d5e:	89fa      	ldrh	r2, [r7, #14]
 8014d60:	429a      	cmp	r2, r3
 8014d62:	d807      	bhi.n	8014d74 <ip4_input+0x74>
 8014d64:	687b      	ldr	r3, [r7, #4]
 8014d66:	891b      	ldrh	r3, [r3, #8]
 8014d68:	89ba      	ldrh	r2, [r7, #12]
 8014d6a:	429a      	cmp	r2, r3
 8014d6c:	d802      	bhi.n	8014d74 <ip4_input+0x74>
 8014d6e:	89fb      	ldrh	r3, [r7, #14]
 8014d70:	2b13      	cmp	r3, #19
 8014d72:	d804      	bhi.n	8014d7e <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8014d74:	6878      	ldr	r0, [r7, #4]
 8014d76:	f7f7 ff67 	bl	800cc48 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8014d7a:	2300      	movs	r3, #0
 8014d7c:	e0db      	b.n	8014f36 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8014d7e:	697b      	ldr	r3, [r7, #20]
 8014d80:	691b      	ldr	r3, [r3, #16]
 8014d82:	4a6f      	ldr	r2, [pc, #444]	; (8014f40 <ip4_input+0x240>)
 8014d84:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8014d86:	697b      	ldr	r3, [r7, #20]
 8014d88:	68db      	ldr	r3, [r3, #12]
 8014d8a:	4a6d      	ldr	r2, [pc, #436]	; (8014f40 <ip4_input+0x240>)
 8014d8c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014d8e:	4b6c      	ldr	r3, [pc, #432]	; (8014f40 <ip4_input+0x240>)
 8014d90:	695b      	ldr	r3, [r3, #20]
 8014d92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014d96:	2be0      	cmp	r3, #224	; 0xe0
 8014d98:	d112      	bne.n	8014dc0 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8014d9a:	683b      	ldr	r3, [r7, #0]
 8014d9c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014da0:	f003 0301 	and.w	r3, r3, #1
 8014da4:	b2db      	uxtb	r3, r3
 8014da6:	2b00      	cmp	r3, #0
 8014da8:	d007      	beq.n	8014dba <ip4_input+0xba>
 8014daa:	683b      	ldr	r3, [r7, #0]
 8014dac:	3304      	adds	r3, #4
 8014dae:	681b      	ldr	r3, [r3, #0]
 8014db0:	2b00      	cmp	r3, #0
 8014db2:	d002      	beq.n	8014dba <ip4_input+0xba>
      netif = inp;
 8014db4:	683b      	ldr	r3, [r7, #0]
 8014db6:	613b      	str	r3, [r7, #16]
 8014db8:	e02a      	b.n	8014e10 <ip4_input+0x110>
    } else {
      netif = NULL;
 8014dba:	2300      	movs	r3, #0
 8014dbc:	613b      	str	r3, [r7, #16]
 8014dbe:	e027      	b.n	8014e10 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8014dc0:	6838      	ldr	r0, [r7, #0]
 8014dc2:	f7ff ff73 	bl	8014cac <ip4_input_accept>
 8014dc6:	4603      	mov	r3, r0
 8014dc8:	2b00      	cmp	r3, #0
 8014dca:	d002      	beq.n	8014dd2 <ip4_input+0xd2>
      netif = inp;
 8014dcc:	683b      	ldr	r3, [r7, #0]
 8014dce:	613b      	str	r3, [r7, #16]
 8014dd0:	e01e      	b.n	8014e10 <ip4_input+0x110>
    } else {
      netif = NULL;
 8014dd2:	2300      	movs	r3, #0
 8014dd4:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8014dd6:	4b5a      	ldr	r3, [pc, #360]	; (8014f40 <ip4_input+0x240>)
 8014dd8:	695b      	ldr	r3, [r3, #20]
 8014dda:	b2db      	uxtb	r3, r3
 8014ddc:	2b7f      	cmp	r3, #127	; 0x7f
 8014dde:	d017      	beq.n	8014e10 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8014de0:	4b58      	ldr	r3, [pc, #352]	; (8014f44 <ip4_input+0x244>)
 8014de2:	681b      	ldr	r3, [r3, #0]
 8014de4:	613b      	str	r3, [r7, #16]
 8014de6:	e00e      	b.n	8014e06 <ip4_input+0x106>
          if (netif == inp) {
 8014de8:	693a      	ldr	r2, [r7, #16]
 8014dea:	683b      	ldr	r3, [r7, #0]
 8014dec:	429a      	cmp	r2, r3
 8014dee:	d006      	beq.n	8014dfe <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8014df0:	6938      	ldr	r0, [r7, #16]
 8014df2:	f7ff ff5b 	bl	8014cac <ip4_input_accept>
 8014df6:	4603      	mov	r3, r0
 8014df8:	2b00      	cmp	r3, #0
 8014dfa:	d108      	bne.n	8014e0e <ip4_input+0x10e>
 8014dfc:	e000      	b.n	8014e00 <ip4_input+0x100>
            continue;
 8014dfe:	bf00      	nop
        NETIF_FOREACH(netif) {
 8014e00:	693b      	ldr	r3, [r7, #16]
 8014e02:	681b      	ldr	r3, [r3, #0]
 8014e04:	613b      	str	r3, [r7, #16]
 8014e06:	693b      	ldr	r3, [r7, #16]
 8014e08:	2b00      	cmp	r3, #0
 8014e0a:	d1ed      	bne.n	8014de8 <ip4_input+0xe8>
 8014e0c:	e000      	b.n	8014e10 <ip4_input+0x110>
            break;
 8014e0e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8014e10:	4b4b      	ldr	r3, [pc, #300]	; (8014f40 <ip4_input+0x240>)
 8014e12:	691b      	ldr	r3, [r3, #16]
 8014e14:	6839      	ldr	r1, [r7, #0]
 8014e16:	4618      	mov	r0, r3
 8014e18:	f000 f96e 	bl	80150f8 <ip4_addr_isbroadcast_u32>
 8014e1c:	4603      	mov	r3, r0
 8014e1e:	2b00      	cmp	r3, #0
 8014e20:	d105      	bne.n	8014e2e <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8014e22:	4b47      	ldr	r3, [pc, #284]	; (8014f40 <ip4_input+0x240>)
 8014e24:	691b      	ldr	r3, [r3, #16]
 8014e26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8014e2a:	2be0      	cmp	r3, #224	; 0xe0
 8014e2c:	d104      	bne.n	8014e38 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8014e2e:	6878      	ldr	r0, [r7, #4]
 8014e30:	f7f7 ff0a 	bl	800cc48 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8014e34:	2300      	movs	r3, #0
 8014e36:	e07e      	b.n	8014f36 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8014e38:	693b      	ldr	r3, [r7, #16]
 8014e3a:	2b00      	cmp	r3, #0
 8014e3c:	d104      	bne.n	8014e48 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8014e3e:	6878      	ldr	r0, [r7, #4]
 8014e40:	f7f7 ff02 	bl	800cc48 <pbuf_free>
    return ERR_OK;
 8014e44:	2300      	movs	r3, #0
 8014e46:	e076      	b.n	8014f36 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8014e48:	697b      	ldr	r3, [r7, #20]
 8014e4a:	88db      	ldrh	r3, [r3, #6]
 8014e4c:	b29b      	uxth	r3, r3
 8014e4e:	461a      	mov	r2, r3
 8014e50:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8014e54:	4013      	ands	r3, r2
 8014e56:	2b00      	cmp	r3, #0
 8014e58:	d00b      	beq.n	8014e72 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8014e5a:	6878      	ldr	r0, [r7, #4]
 8014e5c:	f000 fc90 	bl	8015780 <ip4_reass>
 8014e60:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8014e62:	687b      	ldr	r3, [r7, #4]
 8014e64:	2b00      	cmp	r3, #0
 8014e66:	d101      	bne.n	8014e6c <ip4_input+0x16c>
      return ERR_OK;
 8014e68:	2300      	movs	r3, #0
 8014e6a:	e064      	b.n	8014f36 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8014e6c:	687b      	ldr	r3, [r7, #4]
 8014e6e:	685b      	ldr	r3, [r3, #4]
 8014e70:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8014e72:	4a33      	ldr	r2, [pc, #204]	; (8014f40 <ip4_input+0x240>)
 8014e74:	693b      	ldr	r3, [r7, #16]
 8014e76:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8014e78:	4a31      	ldr	r2, [pc, #196]	; (8014f40 <ip4_input+0x240>)
 8014e7a:	683b      	ldr	r3, [r7, #0]
 8014e7c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8014e7e:	4a30      	ldr	r2, [pc, #192]	; (8014f40 <ip4_input+0x240>)
 8014e80:	697b      	ldr	r3, [r7, #20]
 8014e82:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8014e84:	697b      	ldr	r3, [r7, #20]
 8014e86:	781b      	ldrb	r3, [r3, #0]
 8014e88:	f003 030f 	and.w	r3, r3, #15
 8014e8c:	b2db      	uxtb	r3, r3
 8014e8e:	009b      	lsls	r3, r3, #2
 8014e90:	b2db      	uxtb	r3, r3
 8014e92:	b29a      	uxth	r2, r3
 8014e94:	4b2a      	ldr	r3, [pc, #168]	; (8014f40 <ip4_input+0x240>)
 8014e96:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8014e98:	89fb      	ldrh	r3, [r7, #14]
 8014e9a:	4619      	mov	r1, r3
 8014e9c:	6878      	ldr	r0, [r7, #4]
 8014e9e:	f7f7 fe4d 	bl	800cb3c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8014ea2:	697b      	ldr	r3, [r7, #20]
 8014ea4:	7a5b      	ldrb	r3, [r3, #9]
 8014ea6:	2b11      	cmp	r3, #17
 8014ea8:	d006      	beq.n	8014eb8 <ip4_input+0x1b8>
 8014eaa:	2b11      	cmp	r3, #17
 8014eac:	dc13      	bgt.n	8014ed6 <ip4_input+0x1d6>
 8014eae:	2b01      	cmp	r3, #1
 8014eb0:	d00c      	beq.n	8014ecc <ip4_input+0x1cc>
 8014eb2:	2b06      	cmp	r3, #6
 8014eb4:	d005      	beq.n	8014ec2 <ip4_input+0x1c2>
 8014eb6:	e00e      	b.n	8014ed6 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8014eb8:	6839      	ldr	r1, [r7, #0]
 8014eba:	6878      	ldr	r0, [r7, #4]
 8014ebc:	f7fe fc46 	bl	801374c <udp_input>
        break;
 8014ec0:	e026      	b.n	8014f10 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8014ec2:	6839      	ldr	r1, [r7, #0]
 8014ec4:	6878      	ldr	r0, [r7, #4]
 8014ec6:	f7f9 fffd 	bl	800eec4 <tcp_input>
        break;
 8014eca:	e021      	b.n	8014f10 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8014ecc:	6839      	ldr	r1, [r7, #0]
 8014ece:	6878      	ldr	r0, [r7, #4]
 8014ed0:	f7ff fcca 	bl	8014868 <icmp_input>
        break;
 8014ed4:	e01c      	b.n	8014f10 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8014ed6:	4b1a      	ldr	r3, [pc, #104]	; (8014f40 <ip4_input+0x240>)
 8014ed8:	695b      	ldr	r3, [r3, #20]
 8014eda:	6939      	ldr	r1, [r7, #16]
 8014edc:	4618      	mov	r0, r3
 8014ede:	f000 f90b 	bl	80150f8 <ip4_addr_isbroadcast_u32>
 8014ee2:	4603      	mov	r3, r0
 8014ee4:	2b00      	cmp	r3, #0
 8014ee6:	d10f      	bne.n	8014f08 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014ee8:	4b15      	ldr	r3, [pc, #84]	; (8014f40 <ip4_input+0x240>)
 8014eea:	695b      	ldr	r3, [r3, #20]
 8014eec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8014ef0:	2be0      	cmp	r3, #224	; 0xe0
 8014ef2:	d009      	beq.n	8014f08 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8014ef4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014ef8:	4619      	mov	r1, r3
 8014efa:	6878      	ldr	r0, [r7, #4]
 8014efc:	f7f7 fe91 	bl	800cc22 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8014f00:	2102      	movs	r1, #2
 8014f02:	6878      	ldr	r0, [r7, #4]
 8014f04:	f7ff fdd0 	bl	8014aa8 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8014f08:	6878      	ldr	r0, [r7, #4]
 8014f0a:	f7f7 fe9d 	bl	800cc48 <pbuf_free>
        break;
 8014f0e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8014f10:	4b0b      	ldr	r3, [pc, #44]	; (8014f40 <ip4_input+0x240>)
 8014f12:	2200      	movs	r2, #0
 8014f14:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8014f16:	4b0a      	ldr	r3, [pc, #40]	; (8014f40 <ip4_input+0x240>)
 8014f18:	2200      	movs	r2, #0
 8014f1a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8014f1c:	4b08      	ldr	r3, [pc, #32]	; (8014f40 <ip4_input+0x240>)
 8014f1e:	2200      	movs	r2, #0
 8014f20:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8014f22:	4b07      	ldr	r3, [pc, #28]	; (8014f40 <ip4_input+0x240>)
 8014f24:	2200      	movs	r2, #0
 8014f26:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8014f28:	4b05      	ldr	r3, [pc, #20]	; (8014f40 <ip4_input+0x240>)
 8014f2a:	2200      	movs	r2, #0
 8014f2c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8014f2e:	4b04      	ldr	r3, [pc, #16]	; (8014f40 <ip4_input+0x240>)
 8014f30:	2200      	movs	r2, #0
 8014f32:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8014f34:	2300      	movs	r3, #0
}
 8014f36:	4618      	mov	r0, r3
 8014f38:	3718      	adds	r7, #24
 8014f3a:	46bd      	mov	sp, r7
 8014f3c:	bd80      	pop	{r7, pc}
 8014f3e:	bf00      	nop
 8014f40:	20008d10 	.word	0x20008d10
 8014f44:	2000be04 	.word	0x2000be04

08014f48 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8014f48:	b580      	push	{r7, lr}
 8014f4a:	b08a      	sub	sp, #40	; 0x28
 8014f4c:	af04      	add	r7, sp, #16
 8014f4e:	60f8      	str	r0, [r7, #12]
 8014f50:	60b9      	str	r1, [r7, #8]
 8014f52:	607a      	str	r2, [r7, #4]
 8014f54:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8014f56:	68bb      	ldr	r3, [r7, #8]
 8014f58:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8014f5a:	687b      	ldr	r3, [r7, #4]
 8014f5c:	2b00      	cmp	r3, #0
 8014f5e:	d009      	beq.n	8014f74 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8014f60:	68bb      	ldr	r3, [r7, #8]
 8014f62:	2b00      	cmp	r3, #0
 8014f64:	d003      	beq.n	8014f6e <ip4_output_if+0x26>
 8014f66:	68bb      	ldr	r3, [r7, #8]
 8014f68:	681b      	ldr	r3, [r3, #0]
 8014f6a:	2b00      	cmp	r3, #0
 8014f6c:	d102      	bne.n	8014f74 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8014f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f70:	3304      	adds	r3, #4
 8014f72:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8014f74:	78fa      	ldrb	r2, [r7, #3]
 8014f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f78:	9302      	str	r3, [sp, #8]
 8014f7a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8014f7e:	9301      	str	r3, [sp, #4]
 8014f80:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014f84:	9300      	str	r3, [sp, #0]
 8014f86:	4613      	mov	r3, r2
 8014f88:	687a      	ldr	r2, [r7, #4]
 8014f8a:	6979      	ldr	r1, [r7, #20]
 8014f8c:	68f8      	ldr	r0, [r7, #12]
 8014f8e:	f000 f805 	bl	8014f9c <ip4_output_if_src>
 8014f92:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8014f94:	4618      	mov	r0, r3
 8014f96:	3718      	adds	r7, #24
 8014f98:	46bd      	mov	sp, r7
 8014f9a:	bd80      	pop	{r7, pc}

08014f9c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8014f9c:	b580      	push	{r7, lr}
 8014f9e:	b088      	sub	sp, #32
 8014fa0:	af00      	add	r7, sp, #0
 8014fa2:	60f8      	str	r0, [r7, #12]
 8014fa4:	60b9      	str	r1, [r7, #8]
 8014fa6:	607a      	str	r2, [r7, #4]
 8014fa8:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8014faa:	68fb      	ldr	r3, [r7, #12]
 8014fac:	7b9b      	ldrb	r3, [r3, #14]
 8014fae:	2b01      	cmp	r3, #1
 8014fb0:	d006      	beq.n	8014fc0 <ip4_output_if_src+0x24>
 8014fb2:	4b4b      	ldr	r3, [pc, #300]	; (80150e0 <ip4_output_if_src+0x144>)
 8014fb4:	f44f 7255 	mov.w	r2, #852	; 0x354
 8014fb8:	494a      	ldr	r1, [pc, #296]	; (80150e4 <ip4_output_if_src+0x148>)
 8014fba:	484b      	ldr	r0, [pc, #300]	; (80150e8 <ip4_output_if_src+0x14c>)
 8014fbc:	f001 fe60 	bl	8016c80 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8014fc0:	687b      	ldr	r3, [r7, #4]
 8014fc2:	2b00      	cmp	r3, #0
 8014fc4:	d060      	beq.n	8015088 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8014fc6:	2314      	movs	r3, #20
 8014fc8:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8014fca:	2114      	movs	r1, #20
 8014fcc:	68f8      	ldr	r0, [r7, #12]
 8014fce:	f7f7 fda5 	bl	800cb1c <pbuf_add_header>
 8014fd2:	4603      	mov	r3, r0
 8014fd4:	2b00      	cmp	r3, #0
 8014fd6:	d002      	beq.n	8014fde <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8014fd8:	f06f 0301 	mvn.w	r3, #1
 8014fdc:	e07c      	b.n	80150d8 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8014fde:	68fb      	ldr	r3, [r7, #12]
 8014fe0:	685b      	ldr	r3, [r3, #4]
 8014fe2:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8014fe4:	68fb      	ldr	r3, [r7, #12]
 8014fe6:	895b      	ldrh	r3, [r3, #10]
 8014fe8:	2b13      	cmp	r3, #19
 8014fea:	d806      	bhi.n	8014ffa <ip4_output_if_src+0x5e>
 8014fec:	4b3c      	ldr	r3, [pc, #240]	; (80150e0 <ip4_output_if_src+0x144>)
 8014fee:	f44f 7262 	mov.w	r2, #904	; 0x388
 8014ff2:	493e      	ldr	r1, [pc, #248]	; (80150ec <ip4_output_if_src+0x150>)
 8014ff4:	483c      	ldr	r0, [pc, #240]	; (80150e8 <ip4_output_if_src+0x14c>)
 8014ff6:	f001 fe43 	bl	8016c80 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8014ffa:	69fb      	ldr	r3, [r7, #28]
 8014ffc:	78fa      	ldrb	r2, [r7, #3]
 8014ffe:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8015000:	69fb      	ldr	r3, [r7, #28]
 8015002:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8015006:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8015008:	687b      	ldr	r3, [r7, #4]
 801500a:	681a      	ldr	r2, [r3, #0]
 801500c:	69fb      	ldr	r3, [r7, #28]
 801500e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8015010:	8b7b      	ldrh	r3, [r7, #26]
 8015012:	089b      	lsrs	r3, r3, #2
 8015014:	b29b      	uxth	r3, r3
 8015016:	b2db      	uxtb	r3, r3
 8015018:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801501c:	b2da      	uxtb	r2, r3
 801501e:	69fb      	ldr	r3, [r7, #28]
 8015020:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8015022:	69fb      	ldr	r3, [r7, #28]
 8015024:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8015028:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801502a:	68fb      	ldr	r3, [r7, #12]
 801502c:	891b      	ldrh	r3, [r3, #8]
 801502e:	4618      	mov	r0, r3
 8015030:	f7f6 f9ae 	bl	800b390 <lwip_htons>
 8015034:	4603      	mov	r3, r0
 8015036:	461a      	mov	r2, r3
 8015038:	69fb      	ldr	r3, [r7, #28]
 801503a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801503c:	69fb      	ldr	r3, [r7, #28]
 801503e:	2200      	movs	r2, #0
 8015040:	719a      	strb	r2, [r3, #6]
 8015042:	2200      	movs	r2, #0
 8015044:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8015046:	4b2a      	ldr	r3, [pc, #168]	; (80150f0 <ip4_output_if_src+0x154>)
 8015048:	881b      	ldrh	r3, [r3, #0]
 801504a:	4618      	mov	r0, r3
 801504c:	f7f6 f9a0 	bl	800b390 <lwip_htons>
 8015050:	4603      	mov	r3, r0
 8015052:	461a      	mov	r2, r3
 8015054:	69fb      	ldr	r3, [r7, #28]
 8015056:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8015058:	4b25      	ldr	r3, [pc, #148]	; (80150f0 <ip4_output_if_src+0x154>)
 801505a:	881b      	ldrh	r3, [r3, #0]
 801505c:	3301      	adds	r3, #1
 801505e:	b29a      	uxth	r2, r3
 8015060:	4b23      	ldr	r3, [pc, #140]	; (80150f0 <ip4_output_if_src+0x154>)
 8015062:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8015064:	68bb      	ldr	r3, [r7, #8]
 8015066:	2b00      	cmp	r3, #0
 8015068:	d104      	bne.n	8015074 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801506a:	4b22      	ldr	r3, [pc, #136]	; (80150f4 <ip4_output_if_src+0x158>)
 801506c:	681a      	ldr	r2, [r3, #0]
 801506e:	69fb      	ldr	r3, [r7, #28]
 8015070:	60da      	str	r2, [r3, #12]
 8015072:	e003      	b.n	801507c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8015074:	68bb      	ldr	r3, [r7, #8]
 8015076:	681a      	ldr	r2, [r3, #0]
 8015078:	69fb      	ldr	r3, [r7, #28]
 801507a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801507c:	69fb      	ldr	r3, [r7, #28]
 801507e:	2200      	movs	r2, #0
 8015080:	729a      	strb	r2, [r3, #10]
 8015082:	2200      	movs	r2, #0
 8015084:	72da      	strb	r2, [r3, #11]
 8015086:	e00f      	b.n	80150a8 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8015088:	68fb      	ldr	r3, [r7, #12]
 801508a:	895b      	ldrh	r3, [r3, #10]
 801508c:	2b13      	cmp	r3, #19
 801508e:	d802      	bhi.n	8015096 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8015090:	f06f 0301 	mvn.w	r3, #1
 8015094:	e020      	b.n	80150d8 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8015096:	68fb      	ldr	r3, [r7, #12]
 8015098:	685b      	ldr	r3, [r3, #4]
 801509a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801509c:	69fb      	ldr	r3, [r7, #28]
 801509e:	691b      	ldr	r3, [r3, #16]
 80150a0:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80150a2:	f107 0314 	add.w	r3, r7, #20
 80150a6:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80150a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150aa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80150ac:	2b00      	cmp	r3, #0
 80150ae:	d00c      	beq.n	80150ca <ip4_output_if_src+0x12e>
 80150b0:	68fb      	ldr	r3, [r7, #12]
 80150b2:	891a      	ldrh	r2, [r3, #8]
 80150b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150b6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80150b8:	429a      	cmp	r2, r3
 80150ba:	d906      	bls.n	80150ca <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80150bc:	687a      	ldr	r2, [r7, #4]
 80150be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80150c0:	68f8      	ldr	r0, [r7, #12]
 80150c2:	f000 fd51 	bl	8015b68 <ip4_frag>
 80150c6:	4603      	mov	r3, r0
 80150c8:	e006      	b.n	80150d8 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80150ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150cc:	695b      	ldr	r3, [r3, #20]
 80150ce:	687a      	ldr	r2, [r7, #4]
 80150d0:	68f9      	ldr	r1, [r7, #12]
 80150d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80150d4:	4798      	blx	r3
 80150d6:	4603      	mov	r3, r0
}
 80150d8:	4618      	mov	r0, r3
 80150da:	3720      	adds	r7, #32
 80150dc:	46bd      	mov	sp, r7
 80150de:	bd80      	pop	{r7, pc}
 80150e0:	0801a7cc 	.word	0x0801a7cc
 80150e4:	0801a800 	.word	0x0801a800
 80150e8:	0801a80c 	.word	0x0801a80c
 80150ec:	0801a834 	.word	0x0801a834
 80150f0:	2000bf62 	.word	0x2000bf62
 80150f4:	0801ac60 	.word	0x0801ac60

080150f8 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80150f8:	b480      	push	{r7}
 80150fa:	b085      	sub	sp, #20
 80150fc:	af00      	add	r7, sp, #0
 80150fe:	6078      	str	r0, [r7, #4]
 8015100:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8015102:	687b      	ldr	r3, [r7, #4]
 8015104:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8015106:	687b      	ldr	r3, [r7, #4]
 8015108:	f1b3 3fff 	cmp.w	r3, #4294967295
 801510c:	d002      	beq.n	8015114 <ip4_addr_isbroadcast_u32+0x1c>
 801510e:	687b      	ldr	r3, [r7, #4]
 8015110:	2b00      	cmp	r3, #0
 8015112:	d101      	bne.n	8015118 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8015114:	2301      	movs	r3, #1
 8015116:	e02a      	b.n	801516e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8015118:	683b      	ldr	r3, [r7, #0]
 801511a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801511e:	f003 0302 	and.w	r3, r3, #2
 8015122:	2b00      	cmp	r3, #0
 8015124:	d101      	bne.n	801512a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8015126:	2300      	movs	r3, #0
 8015128:	e021      	b.n	801516e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801512a:	683b      	ldr	r3, [r7, #0]
 801512c:	3304      	adds	r3, #4
 801512e:	681b      	ldr	r3, [r3, #0]
 8015130:	687a      	ldr	r2, [r7, #4]
 8015132:	429a      	cmp	r2, r3
 8015134:	d101      	bne.n	801513a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8015136:	2300      	movs	r3, #0
 8015138:	e019      	b.n	801516e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801513a:	68fa      	ldr	r2, [r7, #12]
 801513c:	683b      	ldr	r3, [r7, #0]
 801513e:	3304      	adds	r3, #4
 8015140:	681b      	ldr	r3, [r3, #0]
 8015142:	405a      	eors	r2, r3
 8015144:	683b      	ldr	r3, [r7, #0]
 8015146:	3308      	adds	r3, #8
 8015148:	681b      	ldr	r3, [r3, #0]
 801514a:	4013      	ands	r3, r2
 801514c:	2b00      	cmp	r3, #0
 801514e:	d10d      	bne.n	801516c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015150:	683b      	ldr	r3, [r7, #0]
 8015152:	3308      	adds	r3, #8
 8015154:	681b      	ldr	r3, [r3, #0]
 8015156:	43da      	mvns	r2, r3
 8015158:	687b      	ldr	r3, [r7, #4]
 801515a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801515c:	683b      	ldr	r3, [r7, #0]
 801515e:	3308      	adds	r3, #8
 8015160:	681b      	ldr	r3, [r3, #0]
 8015162:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015164:	429a      	cmp	r2, r3
 8015166:	d101      	bne.n	801516c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8015168:	2301      	movs	r3, #1
 801516a:	e000      	b.n	801516e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801516c:	2300      	movs	r3, #0
  }
}
 801516e:	4618      	mov	r0, r3
 8015170:	3714      	adds	r7, #20
 8015172:	46bd      	mov	sp, r7
 8015174:	bc80      	pop	{r7}
 8015176:	4770      	bx	lr

08015178 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8015178:	b580      	push	{r7, lr}
 801517a:	b084      	sub	sp, #16
 801517c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801517e:	2300      	movs	r3, #0
 8015180:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8015182:	4b12      	ldr	r3, [pc, #72]	; (80151cc <ip_reass_tmr+0x54>)
 8015184:	681b      	ldr	r3, [r3, #0]
 8015186:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8015188:	e018      	b.n	80151bc <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801518a:	68fb      	ldr	r3, [r7, #12]
 801518c:	7fdb      	ldrb	r3, [r3, #31]
 801518e:	2b00      	cmp	r3, #0
 8015190:	d00b      	beq.n	80151aa <ip_reass_tmr+0x32>
      r->timer--;
 8015192:	68fb      	ldr	r3, [r7, #12]
 8015194:	7fdb      	ldrb	r3, [r3, #31]
 8015196:	3b01      	subs	r3, #1
 8015198:	b2da      	uxtb	r2, r3
 801519a:	68fb      	ldr	r3, [r7, #12]
 801519c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801519e:	68fb      	ldr	r3, [r7, #12]
 80151a0:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80151a2:	68fb      	ldr	r3, [r7, #12]
 80151a4:	681b      	ldr	r3, [r3, #0]
 80151a6:	60fb      	str	r3, [r7, #12]
 80151a8:	e008      	b.n	80151bc <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80151aa:	68fb      	ldr	r3, [r7, #12]
 80151ac:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80151ae:	68fb      	ldr	r3, [r7, #12]
 80151b0:	681b      	ldr	r3, [r3, #0]
 80151b2:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80151b4:	68b9      	ldr	r1, [r7, #8]
 80151b6:	6878      	ldr	r0, [r7, #4]
 80151b8:	f000 f80a 	bl	80151d0 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80151bc:	68fb      	ldr	r3, [r7, #12]
 80151be:	2b00      	cmp	r3, #0
 80151c0:	d1e3      	bne.n	801518a <ip_reass_tmr+0x12>
    }
  }
}
 80151c2:	bf00      	nop
 80151c4:	bf00      	nop
 80151c6:	3710      	adds	r7, #16
 80151c8:	46bd      	mov	sp, r7
 80151ca:	bd80      	pop	{r7, pc}
 80151cc:	2000bf64 	.word	0x2000bf64

080151d0 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80151d0:	b580      	push	{r7, lr}
 80151d2:	b088      	sub	sp, #32
 80151d4:	af00      	add	r7, sp, #0
 80151d6:	6078      	str	r0, [r7, #4]
 80151d8:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80151da:	2300      	movs	r3, #0
 80151dc:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80151de:	683a      	ldr	r2, [r7, #0]
 80151e0:	687b      	ldr	r3, [r7, #4]
 80151e2:	429a      	cmp	r2, r3
 80151e4:	d105      	bne.n	80151f2 <ip_reass_free_complete_datagram+0x22>
 80151e6:	4b45      	ldr	r3, [pc, #276]	; (80152fc <ip_reass_free_complete_datagram+0x12c>)
 80151e8:	22ab      	movs	r2, #171	; 0xab
 80151ea:	4945      	ldr	r1, [pc, #276]	; (8015300 <ip_reass_free_complete_datagram+0x130>)
 80151ec:	4845      	ldr	r0, [pc, #276]	; (8015304 <ip_reass_free_complete_datagram+0x134>)
 80151ee:	f001 fd47 	bl	8016c80 <iprintf>
  if (prev != NULL) {
 80151f2:	683b      	ldr	r3, [r7, #0]
 80151f4:	2b00      	cmp	r3, #0
 80151f6:	d00a      	beq.n	801520e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80151f8:	683b      	ldr	r3, [r7, #0]
 80151fa:	681b      	ldr	r3, [r3, #0]
 80151fc:	687a      	ldr	r2, [r7, #4]
 80151fe:	429a      	cmp	r2, r3
 8015200:	d005      	beq.n	801520e <ip_reass_free_complete_datagram+0x3e>
 8015202:	4b3e      	ldr	r3, [pc, #248]	; (80152fc <ip_reass_free_complete_datagram+0x12c>)
 8015204:	22ad      	movs	r2, #173	; 0xad
 8015206:	4940      	ldr	r1, [pc, #256]	; (8015308 <ip_reass_free_complete_datagram+0x138>)
 8015208:	483e      	ldr	r0, [pc, #248]	; (8015304 <ip_reass_free_complete_datagram+0x134>)
 801520a:	f001 fd39 	bl	8016c80 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801520e:	687b      	ldr	r3, [r7, #4]
 8015210:	685b      	ldr	r3, [r3, #4]
 8015212:	685b      	ldr	r3, [r3, #4]
 8015214:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8015216:	697b      	ldr	r3, [r7, #20]
 8015218:	889b      	ldrh	r3, [r3, #4]
 801521a:	b29b      	uxth	r3, r3
 801521c:	2b00      	cmp	r3, #0
 801521e:	d12a      	bne.n	8015276 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8015220:	687b      	ldr	r3, [r7, #4]
 8015222:	685b      	ldr	r3, [r3, #4]
 8015224:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8015226:	697b      	ldr	r3, [r7, #20]
 8015228:	681a      	ldr	r2, [r3, #0]
 801522a:	687b      	ldr	r3, [r7, #4]
 801522c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801522e:	69bb      	ldr	r3, [r7, #24]
 8015230:	6858      	ldr	r0, [r3, #4]
 8015232:	687b      	ldr	r3, [r7, #4]
 8015234:	3308      	adds	r3, #8
 8015236:	2214      	movs	r2, #20
 8015238:	4619      	mov	r1, r3
 801523a:	f001 fc2d 	bl	8016a98 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801523e:	2101      	movs	r1, #1
 8015240:	69b8      	ldr	r0, [r7, #24]
 8015242:	f7ff fc41 	bl	8014ac8 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8015246:	69b8      	ldr	r0, [r7, #24]
 8015248:	f7f7 fd8c 	bl	800cd64 <pbuf_clen>
 801524c:	4603      	mov	r3, r0
 801524e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8015250:	8bfa      	ldrh	r2, [r7, #30]
 8015252:	8a7b      	ldrh	r3, [r7, #18]
 8015254:	4413      	add	r3, r2
 8015256:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801525a:	db05      	blt.n	8015268 <ip_reass_free_complete_datagram+0x98>
 801525c:	4b27      	ldr	r3, [pc, #156]	; (80152fc <ip_reass_free_complete_datagram+0x12c>)
 801525e:	22bc      	movs	r2, #188	; 0xbc
 8015260:	492a      	ldr	r1, [pc, #168]	; (801530c <ip_reass_free_complete_datagram+0x13c>)
 8015262:	4828      	ldr	r0, [pc, #160]	; (8015304 <ip_reass_free_complete_datagram+0x134>)
 8015264:	f001 fd0c 	bl	8016c80 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8015268:	8bfa      	ldrh	r2, [r7, #30]
 801526a:	8a7b      	ldrh	r3, [r7, #18]
 801526c:	4413      	add	r3, r2
 801526e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8015270:	69b8      	ldr	r0, [r7, #24]
 8015272:	f7f7 fce9 	bl	800cc48 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8015276:	687b      	ldr	r3, [r7, #4]
 8015278:	685b      	ldr	r3, [r3, #4]
 801527a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801527c:	e01f      	b.n	80152be <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801527e:	69bb      	ldr	r3, [r7, #24]
 8015280:	685b      	ldr	r3, [r3, #4]
 8015282:	617b      	str	r3, [r7, #20]
    pcur = p;
 8015284:	69bb      	ldr	r3, [r7, #24]
 8015286:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8015288:	697b      	ldr	r3, [r7, #20]
 801528a:	681b      	ldr	r3, [r3, #0]
 801528c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801528e:	68f8      	ldr	r0, [r7, #12]
 8015290:	f7f7 fd68 	bl	800cd64 <pbuf_clen>
 8015294:	4603      	mov	r3, r0
 8015296:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8015298:	8bfa      	ldrh	r2, [r7, #30]
 801529a:	8a7b      	ldrh	r3, [r7, #18]
 801529c:	4413      	add	r3, r2
 801529e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80152a2:	db05      	blt.n	80152b0 <ip_reass_free_complete_datagram+0xe0>
 80152a4:	4b15      	ldr	r3, [pc, #84]	; (80152fc <ip_reass_free_complete_datagram+0x12c>)
 80152a6:	22cc      	movs	r2, #204	; 0xcc
 80152a8:	4918      	ldr	r1, [pc, #96]	; (801530c <ip_reass_free_complete_datagram+0x13c>)
 80152aa:	4816      	ldr	r0, [pc, #88]	; (8015304 <ip_reass_free_complete_datagram+0x134>)
 80152ac:	f001 fce8 	bl	8016c80 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80152b0:	8bfa      	ldrh	r2, [r7, #30]
 80152b2:	8a7b      	ldrh	r3, [r7, #18]
 80152b4:	4413      	add	r3, r2
 80152b6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80152b8:	68f8      	ldr	r0, [r7, #12]
 80152ba:	f7f7 fcc5 	bl	800cc48 <pbuf_free>
  while (p != NULL) {
 80152be:	69bb      	ldr	r3, [r7, #24]
 80152c0:	2b00      	cmp	r3, #0
 80152c2:	d1dc      	bne.n	801527e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80152c4:	6839      	ldr	r1, [r7, #0]
 80152c6:	6878      	ldr	r0, [r7, #4]
 80152c8:	f000 f8c2 	bl	8015450 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80152cc:	4b10      	ldr	r3, [pc, #64]	; (8015310 <ip_reass_free_complete_datagram+0x140>)
 80152ce:	881b      	ldrh	r3, [r3, #0]
 80152d0:	8bfa      	ldrh	r2, [r7, #30]
 80152d2:	429a      	cmp	r2, r3
 80152d4:	d905      	bls.n	80152e2 <ip_reass_free_complete_datagram+0x112>
 80152d6:	4b09      	ldr	r3, [pc, #36]	; (80152fc <ip_reass_free_complete_datagram+0x12c>)
 80152d8:	22d2      	movs	r2, #210	; 0xd2
 80152da:	490e      	ldr	r1, [pc, #56]	; (8015314 <ip_reass_free_complete_datagram+0x144>)
 80152dc:	4809      	ldr	r0, [pc, #36]	; (8015304 <ip_reass_free_complete_datagram+0x134>)
 80152de:	f001 fccf 	bl	8016c80 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80152e2:	4b0b      	ldr	r3, [pc, #44]	; (8015310 <ip_reass_free_complete_datagram+0x140>)
 80152e4:	881a      	ldrh	r2, [r3, #0]
 80152e6:	8bfb      	ldrh	r3, [r7, #30]
 80152e8:	1ad3      	subs	r3, r2, r3
 80152ea:	b29a      	uxth	r2, r3
 80152ec:	4b08      	ldr	r3, [pc, #32]	; (8015310 <ip_reass_free_complete_datagram+0x140>)
 80152ee:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80152f0:	8bfb      	ldrh	r3, [r7, #30]
}
 80152f2:	4618      	mov	r0, r3
 80152f4:	3720      	adds	r7, #32
 80152f6:	46bd      	mov	sp, r7
 80152f8:	bd80      	pop	{r7, pc}
 80152fa:	bf00      	nop
 80152fc:	0801a864 	.word	0x0801a864
 8015300:	0801a8a0 	.word	0x0801a8a0
 8015304:	0801a8ac 	.word	0x0801a8ac
 8015308:	0801a8d4 	.word	0x0801a8d4
 801530c:	0801a8e8 	.word	0x0801a8e8
 8015310:	2000bf68 	.word	0x2000bf68
 8015314:	0801a908 	.word	0x0801a908

08015318 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8015318:	b580      	push	{r7, lr}
 801531a:	b08a      	sub	sp, #40	; 0x28
 801531c:	af00      	add	r7, sp, #0
 801531e:	6078      	str	r0, [r7, #4]
 8015320:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8015322:	2300      	movs	r3, #0
 8015324:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8015326:	2300      	movs	r3, #0
 8015328:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801532a:	2300      	movs	r3, #0
 801532c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801532e:	2300      	movs	r3, #0
 8015330:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8015332:	2300      	movs	r3, #0
 8015334:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8015336:	4b28      	ldr	r3, [pc, #160]	; (80153d8 <ip_reass_remove_oldest_datagram+0xc0>)
 8015338:	681b      	ldr	r3, [r3, #0]
 801533a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801533c:	e030      	b.n	80153a0 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801533e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015340:	695a      	ldr	r2, [r3, #20]
 8015342:	687b      	ldr	r3, [r7, #4]
 8015344:	68db      	ldr	r3, [r3, #12]
 8015346:	429a      	cmp	r2, r3
 8015348:	d10c      	bne.n	8015364 <ip_reass_remove_oldest_datagram+0x4c>
 801534a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801534c:	699a      	ldr	r2, [r3, #24]
 801534e:	687b      	ldr	r3, [r7, #4]
 8015350:	691b      	ldr	r3, [r3, #16]
 8015352:	429a      	cmp	r2, r3
 8015354:	d106      	bne.n	8015364 <ip_reass_remove_oldest_datagram+0x4c>
 8015356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015358:	899a      	ldrh	r2, [r3, #12]
 801535a:	687b      	ldr	r3, [r7, #4]
 801535c:	889b      	ldrh	r3, [r3, #4]
 801535e:	b29b      	uxth	r3, r3
 8015360:	429a      	cmp	r2, r3
 8015362:	d014      	beq.n	801538e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8015364:	693b      	ldr	r3, [r7, #16]
 8015366:	3301      	adds	r3, #1
 8015368:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801536a:	6a3b      	ldr	r3, [r7, #32]
 801536c:	2b00      	cmp	r3, #0
 801536e:	d104      	bne.n	801537a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8015370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015372:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8015374:	69fb      	ldr	r3, [r7, #28]
 8015376:	61bb      	str	r3, [r7, #24]
 8015378:	e009      	b.n	801538e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801537a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801537c:	7fda      	ldrb	r2, [r3, #31]
 801537e:	6a3b      	ldr	r3, [r7, #32]
 8015380:	7fdb      	ldrb	r3, [r3, #31]
 8015382:	429a      	cmp	r2, r3
 8015384:	d803      	bhi.n	801538e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8015386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015388:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801538a:	69fb      	ldr	r3, [r7, #28]
 801538c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801538e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015390:	681b      	ldr	r3, [r3, #0]
 8015392:	2b00      	cmp	r3, #0
 8015394:	d001      	beq.n	801539a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8015396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015398:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801539a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801539c:	681b      	ldr	r3, [r3, #0]
 801539e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80153a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153a2:	2b00      	cmp	r3, #0
 80153a4:	d1cb      	bne.n	801533e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80153a6:	6a3b      	ldr	r3, [r7, #32]
 80153a8:	2b00      	cmp	r3, #0
 80153aa:	d008      	beq.n	80153be <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80153ac:	69b9      	ldr	r1, [r7, #24]
 80153ae:	6a38      	ldr	r0, [r7, #32]
 80153b0:	f7ff ff0e 	bl	80151d0 <ip_reass_free_complete_datagram>
 80153b4:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80153b6:	697a      	ldr	r2, [r7, #20]
 80153b8:	68fb      	ldr	r3, [r7, #12]
 80153ba:	4413      	add	r3, r2
 80153bc:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80153be:	697a      	ldr	r2, [r7, #20]
 80153c0:	683b      	ldr	r3, [r7, #0]
 80153c2:	429a      	cmp	r2, r3
 80153c4:	da02      	bge.n	80153cc <ip_reass_remove_oldest_datagram+0xb4>
 80153c6:	693b      	ldr	r3, [r7, #16]
 80153c8:	2b01      	cmp	r3, #1
 80153ca:	dcac      	bgt.n	8015326 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80153cc:	697b      	ldr	r3, [r7, #20]
}
 80153ce:	4618      	mov	r0, r3
 80153d0:	3728      	adds	r7, #40	; 0x28
 80153d2:	46bd      	mov	sp, r7
 80153d4:	bd80      	pop	{r7, pc}
 80153d6:	bf00      	nop
 80153d8:	2000bf64 	.word	0x2000bf64

080153dc <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80153dc:	b580      	push	{r7, lr}
 80153de:	b084      	sub	sp, #16
 80153e0:	af00      	add	r7, sp, #0
 80153e2:	6078      	str	r0, [r7, #4]
 80153e4:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80153e6:	2004      	movs	r0, #4
 80153e8:	f7f6 fd82 	bl	800bef0 <memp_malloc>
 80153ec:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80153ee:	68fb      	ldr	r3, [r7, #12]
 80153f0:	2b00      	cmp	r3, #0
 80153f2:	d110      	bne.n	8015416 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80153f4:	6839      	ldr	r1, [r7, #0]
 80153f6:	6878      	ldr	r0, [r7, #4]
 80153f8:	f7ff ff8e 	bl	8015318 <ip_reass_remove_oldest_datagram>
 80153fc:	4602      	mov	r2, r0
 80153fe:	683b      	ldr	r3, [r7, #0]
 8015400:	4293      	cmp	r3, r2
 8015402:	dc03      	bgt.n	801540c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015404:	2004      	movs	r0, #4
 8015406:	f7f6 fd73 	bl	800bef0 <memp_malloc>
 801540a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801540c:	68fb      	ldr	r3, [r7, #12]
 801540e:	2b00      	cmp	r3, #0
 8015410:	d101      	bne.n	8015416 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8015412:	2300      	movs	r3, #0
 8015414:	e016      	b.n	8015444 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8015416:	2220      	movs	r2, #32
 8015418:	2100      	movs	r1, #0
 801541a:	68f8      	ldr	r0, [r7, #12]
 801541c:	f001 fb4a 	bl	8016ab4 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8015420:	68fb      	ldr	r3, [r7, #12]
 8015422:	220f      	movs	r2, #15
 8015424:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8015426:	4b09      	ldr	r3, [pc, #36]	; (801544c <ip_reass_enqueue_new_datagram+0x70>)
 8015428:	681a      	ldr	r2, [r3, #0]
 801542a:	68fb      	ldr	r3, [r7, #12]
 801542c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801542e:	4a07      	ldr	r2, [pc, #28]	; (801544c <ip_reass_enqueue_new_datagram+0x70>)
 8015430:	68fb      	ldr	r3, [r7, #12]
 8015432:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8015434:	68fb      	ldr	r3, [r7, #12]
 8015436:	3308      	adds	r3, #8
 8015438:	2214      	movs	r2, #20
 801543a:	6879      	ldr	r1, [r7, #4]
 801543c:	4618      	mov	r0, r3
 801543e:	f001 fb2b 	bl	8016a98 <memcpy>
  return ipr;
 8015442:	68fb      	ldr	r3, [r7, #12]
}
 8015444:	4618      	mov	r0, r3
 8015446:	3710      	adds	r7, #16
 8015448:	46bd      	mov	sp, r7
 801544a:	bd80      	pop	{r7, pc}
 801544c:	2000bf64 	.word	0x2000bf64

08015450 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8015450:	b580      	push	{r7, lr}
 8015452:	b082      	sub	sp, #8
 8015454:	af00      	add	r7, sp, #0
 8015456:	6078      	str	r0, [r7, #4]
 8015458:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801545a:	4b10      	ldr	r3, [pc, #64]	; (801549c <ip_reass_dequeue_datagram+0x4c>)
 801545c:	681b      	ldr	r3, [r3, #0]
 801545e:	687a      	ldr	r2, [r7, #4]
 8015460:	429a      	cmp	r2, r3
 8015462:	d104      	bne.n	801546e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8015464:	687b      	ldr	r3, [r7, #4]
 8015466:	681b      	ldr	r3, [r3, #0]
 8015468:	4a0c      	ldr	r2, [pc, #48]	; (801549c <ip_reass_dequeue_datagram+0x4c>)
 801546a:	6013      	str	r3, [r2, #0]
 801546c:	e00d      	b.n	801548a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801546e:	683b      	ldr	r3, [r7, #0]
 8015470:	2b00      	cmp	r3, #0
 8015472:	d106      	bne.n	8015482 <ip_reass_dequeue_datagram+0x32>
 8015474:	4b0a      	ldr	r3, [pc, #40]	; (80154a0 <ip_reass_dequeue_datagram+0x50>)
 8015476:	f240 1245 	movw	r2, #325	; 0x145
 801547a:	490a      	ldr	r1, [pc, #40]	; (80154a4 <ip_reass_dequeue_datagram+0x54>)
 801547c:	480a      	ldr	r0, [pc, #40]	; (80154a8 <ip_reass_dequeue_datagram+0x58>)
 801547e:	f001 fbff 	bl	8016c80 <iprintf>
    prev->next = ipr->next;
 8015482:	687b      	ldr	r3, [r7, #4]
 8015484:	681a      	ldr	r2, [r3, #0]
 8015486:	683b      	ldr	r3, [r7, #0]
 8015488:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801548a:	6879      	ldr	r1, [r7, #4]
 801548c:	2004      	movs	r0, #4
 801548e:	f7f6 fda5 	bl	800bfdc <memp_free>
}
 8015492:	bf00      	nop
 8015494:	3708      	adds	r7, #8
 8015496:	46bd      	mov	sp, r7
 8015498:	bd80      	pop	{r7, pc}
 801549a:	bf00      	nop
 801549c:	2000bf64 	.word	0x2000bf64
 80154a0:	0801a864 	.word	0x0801a864
 80154a4:	0801a92c 	.word	0x0801a92c
 80154a8:	0801a8ac 	.word	0x0801a8ac

080154ac <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80154ac:	b580      	push	{r7, lr}
 80154ae:	b08c      	sub	sp, #48	; 0x30
 80154b0:	af00      	add	r7, sp, #0
 80154b2:	60f8      	str	r0, [r7, #12]
 80154b4:	60b9      	str	r1, [r7, #8]
 80154b6:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80154b8:	2300      	movs	r3, #0
 80154ba:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80154bc:	2301      	movs	r3, #1
 80154be:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80154c0:	68bb      	ldr	r3, [r7, #8]
 80154c2:	685b      	ldr	r3, [r3, #4]
 80154c4:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80154c6:	69fb      	ldr	r3, [r7, #28]
 80154c8:	885b      	ldrh	r3, [r3, #2]
 80154ca:	b29b      	uxth	r3, r3
 80154cc:	4618      	mov	r0, r3
 80154ce:	f7f5 ff5f 	bl	800b390 <lwip_htons>
 80154d2:	4603      	mov	r3, r0
 80154d4:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80154d6:	69fb      	ldr	r3, [r7, #28]
 80154d8:	781b      	ldrb	r3, [r3, #0]
 80154da:	f003 030f 	and.w	r3, r3, #15
 80154de:	b2db      	uxtb	r3, r3
 80154e0:	009b      	lsls	r3, r3, #2
 80154e2:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80154e4:	7e7b      	ldrb	r3, [r7, #25]
 80154e6:	b29b      	uxth	r3, r3
 80154e8:	8b7a      	ldrh	r2, [r7, #26]
 80154ea:	429a      	cmp	r2, r3
 80154ec:	d202      	bcs.n	80154f4 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80154ee:	f04f 33ff 	mov.w	r3, #4294967295
 80154f2:	e135      	b.n	8015760 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80154f4:	7e7b      	ldrb	r3, [r7, #25]
 80154f6:	b29b      	uxth	r3, r3
 80154f8:	8b7a      	ldrh	r2, [r7, #26]
 80154fa:	1ad3      	subs	r3, r2, r3
 80154fc:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80154fe:	69fb      	ldr	r3, [r7, #28]
 8015500:	88db      	ldrh	r3, [r3, #6]
 8015502:	b29b      	uxth	r3, r3
 8015504:	4618      	mov	r0, r3
 8015506:	f7f5 ff43 	bl	800b390 <lwip_htons>
 801550a:	4603      	mov	r3, r0
 801550c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015510:	b29b      	uxth	r3, r3
 8015512:	00db      	lsls	r3, r3, #3
 8015514:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8015516:	68bb      	ldr	r3, [r7, #8]
 8015518:	685b      	ldr	r3, [r3, #4]
 801551a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801551c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801551e:	2200      	movs	r2, #0
 8015520:	701a      	strb	r2, [r3, #0]
 8015522:	2200      	movs	r2, #0
 8015524:	705a      	strb	r2, [r3, #1]
 8015526:	2200      	movs	r2, #0
 8015528:	709a      	strb	r2, [r3, #2]
 801552a:	2200      	movs	r2, #0
 801552c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801552e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015530:	8afa      	ldrh	r2, [r7, #22]
 8015532:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8015534:	8afa      	ldrh	r2, [r7, #22]
 8015536:	8b7b      	ldrh	r3, [r7, #26]
 8015538:	4413      	add	r3, r2
 801553a:	b29a      	uxth	r2, r3
 801553c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801553e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8015540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015542:	88db      	ldrh	r3, [r3, #6]
 8015544:	b29b      	uxth	r3, r3
 8015546:	8afa      	ldrh	r2, [r7, #22]
 8015548:	429a      	cmp	r2, r3
 801554a:	d902      	bls.n	8015552 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801554c:	f04f 33ff 	mov.w	r3, #4294967295
 8015550:	e106      	b.n	8015760 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8015552:	68fb      	ldr	r3, [r7, #12]
 8015554:	685b      	ldr	r3, [r3, #4]
 8015556:	627b      	str	r3, [r7, #36]	; 0x24
 8015558:	e068      	b.n	801562c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801555a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801555c:	685b      	ldr	r3, [r3, #4]
 801555e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8015560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015562:	889b      	ldrh	r3, [r3, #4]
 8015564:	b29a      	uxth	r2, r3
 8015566:	693b      	ldr	r3, [r7, #16]
 8015568:	889b      	ldrh	r3, [r3, #4]
 801556a:	b29b      	uxth	r3, r3
 801556c:	429a      	cmp	r2, r3
 801556e:	d235      	bcs.n	80155dc <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8015570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015572:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015574:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8015576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015578:	2b00      	cmp	r3, #0
 801557a:	d020      	beq.n	80155be <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801557c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801557e:	889b      	ldrh	r3, [r3, #4]
 8015580:	b29a      	uxth	r2, r3
 8015582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015584:	88db      	ldrh	r3, [r3, #6]
 8015586:	b29b      	uxth	r3, r3
 8015588:	429a      	cmp	r2, r3
 801558a:	d307      	bcc.n	801559c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801558c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801558e:	88db      	ldrh	r3, [r3, #6]
 8015590:	b29a      	uxth	r2, r3
 8015592:	693b      	ldr	r3, [r7, #16]
 8015594:	889b      	ldrh	r3, [r3, #4]
 8015596:	b29b      	uxth	r3, r3
 8015598:	429a      	cmp	r2, r3
 801559a:	d902      	bls.n	80155a2 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801559c:	f04f 33ff 	mov.w	r3, #4294967295
 80155a0:	e0de      	b.n	8015760 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80155a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80155a4:	68ba      	ldr	r2, [r7, #8]
 80155a6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80155a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80155aa:	88db      	ldrh	r3, [r3, #6]
 80155ac:	b29a      	uxth	r2, r3
 80155ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80155b0:	889b      	ldrh	r3, [r3, #4]
 80155b2:	b29b      	uxth	r3, r3
 80155b4:	429a      	cmp	r2, r3
 80155b6:	d03d      	beq.n	8015634 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80155b8:	2300      	movs	r3, #0
 80155ba:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80155bc:	e03a      	b.n	8015634 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80155be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80155c0:	88db      	ldrh	r3, [r3, #6]
 80155c2:	b29a      	uxth	r2, r3
 80155c4:	693b      	ldr	r3, [r7, #16]
 80155c6:	889b      	ldrh	r3, [r3, #4]
 80155c8:	b29b      	uxth	r3, r3
 80155ca:	429a      	cmp	r2, r3
 80155cc:	d902      	bls.n	80155d4 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80155ce:	f04f 33ff 	mov.w	r3, #4294967295
 80155d2:	e0c5      	b.n	8015760 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80155d4:	68fb      	ldr	r3, [r7, #12]
 80155d6:	68ba      	ldr	r2, [r7, #8]
 80155d8:	605a      	str	r2, [r3, #4]
      break;
 80155da:	e02b      	b.n	8015634 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80155dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80155de:	889b      	ldrh	r3, [r3, #4]
 80155e0:	b29a      	uxth	r2, r3
 80155e2:	693b      	ldr	r3, [r7, #16]
 80155e4:	889b      	ldrh	r3, [r3, #4]
 80155e6:	b29b      	uxth	r3, r3
 80155e8:	429a      	cmp	r2, r3
 80155ea:	d102      	bne.n	80155f2 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80155ec:	f04f 33ff 	mov.w	r3, #4294967295
 80155f0:	e0b6      	b.n	8015760 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80155f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80155f4:	889b      	ldrh	r3, [r3, #4]
 80155f6:	b29a      	uxth	r2, r3
 80155f8:	693b      	ldr	r3, [r7, #16]
 80155fa:	88db      	ldrh	r3, [r3, #6]
 80155fc:	b29b      	uxth	r3, r3
 80155fe:	429a      	cmp	r2, r3
 8015600:	d202      	bcs.n	8015608 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015602:	f04f 33ff 	mov.w	r3, #4294967295
 8015606:	e0ab      	b.n	8015760 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8015608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801560a:	2b00      	cmp	r3, #0
 801560c:	d009      	beq.n	8015622 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801560e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015610:	88db      	ldrh	r3, [r3, #6]
 8015612:	b29a      	uxth	r2, r3
 8015614:	693b      	ldr	r3, [r7, #16]
 8015616:	889b      	ldrh	r3, [r3, #4]
 8015618:	b29b      	uxth	r3, r3
 801561a:	429a      	cmp	r2, r3
 801561c:	d001      	beq.n	8015622 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801561e:	2300      	movs	r3, #0
 8015620:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8015622:	693b      	ldr	r3, [r7, #16]
 8015624:	681b      	ldr	r3, [r3, #0]
 8015626:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8015628:	693b      	ldr	r3, [r7, #16]
 801562a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801562c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801562e:	2b00      	cmp	r3, #0
 8015630:	d193      	bne.n	801555a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8015632:	e000      	b.n	8015636 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8015634:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8015636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015638:	2b00      	cmp	r3, #0
 801563a:	d12d      	bne.n	8015698 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801563c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801563e:	2b00      	cmp	r3, #0
 8015640:	d01c      	beq.n	801567c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8015642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015644:	88db      	ldrh	r3, [r3, #6]
 8015646:	b29a      	uxth	r2, r3
 8015648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801564a:	889b      	ldrh	r3, [r3, #4]
 801564c:	b29b      	uxth	r3, r3
 801564e:	429a      	cmp	r2, r3
 8015650:	d906      	bls.n	8015660 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8015652:	4b45      	ldr	r3, [pc, #276]	; (8015768 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015654:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8015658:	4944      	ldr	r1, [pc, #272]	; (801576c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801565a:	4845      	ldr	r0, [pc, #276]	; (8015770 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801565c:	f001 fb10 	bl	8016c80 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8015660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015662:	68ba      	ldr	r2, [r7, #8]
 8015664:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8015666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015668:	88db      	ldrh	r3, [r3, #6]
 801566a:	b29a      	uxth	r2, r3
 801566c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801566e:	889b      	ldrh	r3, [r3, #4]
 8015670:	b29b      	uxth	r3, r3
 8015672:	429a      	cmp	r2, r3
 8015674:	d010      	beq.n	8015698 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8015676:	2300      	movs	r3, #0
 8015678:	623b      	str	r3, [r7, #32]
 801567a:	e00d      	b.n	8015698 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801567c:	68fb      	ldr	r3, [r7, #12]
 801567e:	685b      	ldr	r3, [r3, #4]
 8015680:	2b00      	cmp	r3, #0
 8015682:	d006      	beq.n	8015692 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8015684:	4b38      	ldr	r3, [pc, #224]	; (8015768 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015686:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801568a:	493a      	ldr	r1, [pc, #232]	; (8015774 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801568c:	4838      	ldr	r0, [pc, #224]	; (8015770 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801568e:	f001 faf7 	bl	8016c80 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8015692:	68fb      	ldr	r3, [r7, #12]
 8015694:	68ba      	ldr	r2, [r7, #8]
 8015696:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8015698:	687b      	ldr	r3, [r7, #4]
 801569a:	2b00      	cmp	r3, #0
 801569c:	d105      	bne.n	80156aa <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801569e:	68fb      	ldr	r3, [r7, #12]
 80156a0:	7f9b      	ldrb	r3, [r3, #30]
 80156a2:	f003 0301 	and.w	r3, r3, #1
 80156a6:	2b00      	cmp	r3, #0
 80156a8:	d059      	beq.n	801575e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80156aa:	6a3b      	ldr	r3, [r7, #32]
 80156ac:	2b00      	cmp	r3, #0
 80156ae:	d04f      	beq.n	8015750 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80156b0:	68fb      	ldr	r3, [r7, #12]
 80156b2:	685b      	ldr	r3, [r3, #4]
 80156b4:	2b00      	cmp	r3, #0
 80156b6:	d006      	beq.n	80156c6 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80156b8:	68fb      	ldr	r3, [r7, #12]
 80156ba:	685b      	ldr	r3, [r3, #4]
 80156bc:	685b      	ldr	r3, [r3, #4]
 80156be:	889b      	ldrh	r3, [r3, #4]
 80156c0:	b29b      	uxth	r3, r3
 80156c2:	2b00      	cmp	r3, #0
 80156c4:	d002      	beq.n	80156cc <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80156c6:	2300      	movs	r3, #0
 80156c8:	623b      	str	r3, [r7, #32]
 80156ca:	e041      	b.n	8015750 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80156cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156ce:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 80156d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156d2:	681b      	ldr	r3, [r3, #0]
 80156d4:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80156d6:	e012      	b.n	80156fe <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80156d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156da:	685b      	ldr	r3, [r3, #4]
 80156dc:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 80156de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80156e0:	88db      	ldrh	r3, [r3, #6]
 80156e2:	b29a      	uxth	r2, r3
 80156e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156e6:	889b      	ldrh	r3, [r3, #4]
 80156e8:	b29b      	uxth	r3, r3
 80156ea:	429a      	cmp	r2, r3
 80156ec:	d002      	beq.n	80156f4 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80156ee:	2300      	movs	r3, #0
 80156f0:	623b      	str	r3, [r7, #32]
            break;
 80156f2:	e007      	b.n	8015704 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80156f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156f6:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 80156f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156fa:	681b      	ldr	r3, [r3, #0]
 80156fc:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80156fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015700:	2b00      	cmp	r3, #0
 8015702:	d1e9      	bne.n	80156d8 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8015704:	6a3b      	ldr	r3, [r7, #32]
 8015706:	2b00      	cmp	r3, #0
 8015708:	d022      	beq.n	8015750 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801570a:	68fb      	ldr	r3, [r7, #12]
 801570c:	685b      	ldr	r3, [r3, #4]
 801570e:	2b00      	cmp	r3, #0
 8015710:	d106      	bne.n	8015720 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8015712:	4b15      	ldr	r3, [pc, #84]	; (8015768 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015714:	f240 12df 	movw	r2, #479	; 0x1df
 8015718:	4917      	ldr	r1, [pc, #92]	; (8015778 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801571a:	4815      	ldr	r0, [pc, #84]	; (8015770 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801571c:	f001 fab0 	bl	8016c80 <iprintf>
          LWIP_ASSERT("sanity check",
 8015720:	68fb      	ldr	r3, [r7, #12]
 8015722:	685b      	ldr	r3, [r3, #4]
 8015724:	685b      	ldr	r3, [r3, #4]
 8015726:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015728:	429a      	cmp	r2, r3
 801572a:	d106      	bne.n	801573a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801572c:	4b0e      	ldr	r3, [pc, #56]	; (8015768 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801572e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8015732:	4911      	ldr	r1, [pc, #68]	; (8015778 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8015734:	480e      	ldr	r0, [pc, #56]	; (8015770 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015736:	f001 faa3 	bl	8016c80 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801573a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801573c:	681b      	ldr	r3, [r3, #0]
 801573e:	2b00      	cmp	r3, #0
 8015740:	d006      	beq.n	8015750 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8015742:	4b09      	ldr	r3, [pc, #36]	; (8015768 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015744:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8015748:	490c      	ldr	r1, [pc, #48]	; (801577c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801574a:	4809      	ldr	r0, [pc, #36]	; (8015770 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801574c:	f001 fa98 	bl	8016c80 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8015750:	6a3b      	ldr	r3, [r7, #32]
 8015752:	2b00      	cmp	r3, #0
 8015754:	bf14      	ite	ne
 8015756:	2301      	movne	r3, #1
 8015758:	2300      	moveq	r3, #0
 801575a:	b2db      	uxtb	r3, r3
 801575c:	e000      	b.n	8015760 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801575e:	2300      	movs	r3, #0
}
 8015760:	4618      	mov	r0, r3
 8015762:	3730      	adds	r7, #48	; 0x30
 8015764:	46bd      	mov	sp, r7
 8015766:	bd80      	pop	{r7, pc}
 8015768:	0801a864 	.word	0x0801a864
 801576c:	0801a948 	.word	0x0801a948
 8015770:	0801a8ac 	.word	0x0801a8ac
 8015774:	0801a968 	.word	0x0801a968
 8015778:	0801a9a0 	.word	0x0801a9a0
 801577c:	0801a9b0 	.word	0x0801a9b0

08015780 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8015780:	b580      	push	{r7, lr}
 8015782:	b08e      	sub	sp, #56	; 0x38
 8015784:	af00      	add	r7, sp, #0
 8015786:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8015788:	687b      	ldr	r3, [r7, #4]
 801578a:	685b      	ldr	r3, [r3, #4]
 801578c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801578e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015790:	781b      	ldrb	r3, [r3, #0]
 8015792:	f003 030f 	and.w	r3, r3, #15
 8015796:	b2db      	uxtb	r3, r3
 8015798:	009b      	lsls	r3, r3, #2
 801579a:	b2db      	uxtb	r3, r3
 801579c:	2b14      	cmp	r3, #20
 801579e:	f040 8171 	bne.w	8015a84 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80157a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157a4:	88db      	ldrh	r3, [r3, #6]
 80157a6:	b29b      	uxth	r3, r3
 80157a8:	4618      	mov	r0, r3
 80157aa:	f7f5 fdf1 	bl	800b390 <lwip_htons>
 80157ae:	4603      	mov	r3, r0
 80157b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80157b4:	b29b      	uxth	r3, r3
 80157b6:	00db      	lsls	r3, r3, #3
 80157b8:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80157ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157bc:	885b      	ldrh	r3, [r3, #2]
 80157be:	b29b      	uxth	r3, r3
 80157c0:	4618      	mov	r0, r3
 80157c2:	f7f5 fde5 	bl	800b390 <lwip_htons>
 80157c6:	4603      	mov	r3, r0
 80157c8:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80157ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157cc:	781b      	ldrb	r3, [r3, #0]
 80157ce:	f003 030f 	and.w	r3, r3, #15
 80157d2:	b2db      	uxtb	r3, r3
 80157d4:	009b      	lsls	r3, r3, #2
 80157d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 80157da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80157de:	b29b      	uxth	r3, r3
 80157e0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80157e2:	429a      	cmp	r2, r3
 80157e4:	f0c0 8150 	bcc.w	8015a88 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80157e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80157ec:	b29b      	uxth	r3, r3
 80157ee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80157f0:	1ad3      	subs	r3, r2, r3
 80157f2:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80157f4:	6878      	ldr	r0, [r7, #4]
 80157f6:	f7f7 fab5 	bl	800cd64 <pbuf_clen>
 80157fa:	4603      	mov	r3, r0
 80157fc:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80157fe:	4b8c      	ldr	r3, [pc, #560]	; (8015a30 <ip4_reass+0x2b0>)
 8015800:	881b      	ldrh	r3, [r3, #0]
 8015802:	461a      	mov	r2, r3
 8015804:	8c3b      	ldrh	r3, [r7, #32]
 8015806:	4413      	add	r3, r2
 8015808:	2b0a      	cmp	r3, #10
 801580a:	dd10      	ble.n	801582e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801580c:	8c3b      	ldrh	r3, [r7, #32]
 801580e:	4619      	mov	r1, r3
 8015810:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015812:	f7ff fd81 	bl	8015318 <ip_reass_remove_oldest_datagram>
 8015816:	4603      	mov	r3, r0
 8015818:	2b00      	cmp	r3, #0
 801581a:	f000 8137 	beq.w	8015a8c <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801581e:	4b84      	ldr	r3, [pc, #528]	; (8015a30 <ip4_reass+0x2b0>)
 8015820:	881b      	ldrh	r3, [r3, #0]
 8015822:	461a      	mov	r2, r3
 8015824:	8c3b      	ldrh	r3, [r7, #32]
 8015826:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8015828:	2b0a      	cmp	r3, #10
 801582a:	f300 812f 	bgt.w	8015a8c <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801582e:	4b81      	ldr	r3, [pc, #516]	; (8015a34 <ip4_reass+0x2b4>)
 8015830:	681b      	ldr	r3, [r3, #0]
 8015832:	633b      	str	r3, [r7, #48]	; 0x30
 8015834:	e015      	b.n	8015862 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8015836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015838:	695a      	ldr	r2, [r3, #20]
 801583a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801583c:	68db      	ldr	r3, [r3, #12]
 801583e:	429a      	cmp	r2, r3
 8015840:	d10c      	bne.n	801585c <ip4_reass+0xdc>
 8015842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015844:	699a      	ldr	r2, [r3, #24]
 8015846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015848:	691b      	ldr	r3, [r3, #16]
 801584a:	429a      	cmp	r2, r3
 801584c:	d106      	bne.n	801585c <ip4_reass+0xdc>
 801584e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015850:	899a      	ldrh	r2, [r3, #12]
 8015852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015854:	889b      	ldrh	r3, [r3, #4]
 8015856:	b29b      	uxth	r3, r3
 8015858:	429a      	cmp	r2, r3
 801585a:	d006      	beq.n	801586a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801585c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801585e:	681b      	ldr	r3, [r3, #0]
 8015860:	633b      	str	r3, [r7, #48]	; 0x30
 8015862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015864:	2b00      	cmp	r3, #0
 8015866:	d1e6      	bne.n	8015836 <ip4_reass+0xb6>
 8015868:	e000      	b.n	801586c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801586a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801586c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801586e:	2b00      	cmp	r3, #0
 8015870:	d109      	bne.n	8015886 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8015872:	8c3b      	ldrh	r3, [r7, #32]
 8015874:	4619      	mov	r1, r3
 8015876:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015878:	f7ff fdb0 	bl	80153dc <ip_reass_enqueue_new_datagram>
 801587c:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801587e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015880:	2b00      	cmp	r3, #0
 8015882:	d11c      	bne.n	80158be <ip4_reass+0x13e>
      goto nullreturn;
 8015884:	e105      	b.n	8015a92 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8015886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015888:	88db      	ldrh	r3, [r3, #6]
 801588a:	b29b      	uxth	r3, r3
 801588c:	4618      	mov	r0, r3
 801588e:	f7f5 fd7f 	bl	800b390 <lwip_htons>
 8015892:	4603      	mov	r3, r0
 8015894:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015898:	2b00      	cmp	r3, #0
 801589a:	d110      	bne.n	80158be <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801589c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801589e:	89db      	ldrh	r3, [r3, #14]
 80158a0:	4618      	mov	r0, r3
 80158a2:	f7f5 fd75 	bl	800b390 <lwip_htons>
 80158a6:	4603      	mov	r3, r0
 80158a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80158ac:	2b00      	cmp	r3, #0
 80158ae:	d006      	beq.n	80158be <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80158b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80158b2:	3308      	adds	r3, #8
 80158b4:	2214      	movs	r2, #20
 80158b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80158b8:	4618      	mov	r0, r3
 80158ba:	f001 f8ed 	bl	8016a98 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80158be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158c0:	88db      	ldrh	r3, [r3, #6]
 80158c2:	b29b      	uxth	r3, r3
 80158c4:	f003 0320 	and.w	r3, r3, #32
 80158c8:	2b00      	cmp	r3, #0
 80158ca:	bf0c      	ite	eq
 80158cc:	2301      	moveq	r3, #1
 80158ce:	2300      	movne	r3, #0
 80158d0:	b2db      	uxtb	r3, r3
 80158d2:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80158d4:	69fb      	ldr	r3, [r7, #28]
 80158d6:	2b00      	cmp	r3, #0
 80158d8:	d00e      	beq.n	80158f8 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80158da:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80158dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80158de:	4413      	add	r3, r2
 80158e0:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80158e2:	8b7a      	ldrh	r2, [r7, #26]
 80158e4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80158e6:	429a      	cmp	r2, r3
 80158e8:	f0c0 80a0 	bcc.w	8015a2c <ip4_reass+0x2ac>
 80158ec:	8b7b      	ldrh	r3, [r7, #26]
 80158ee:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80158f2:	4293      	cmp	r3, r2
 80158f4:	f200 809a 	bhi.w	8015a2c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80158f8:	69fa      	ldr	r2, [r7, #28]
 80158fa:	6879      	ldr	r1, [r7, #4]
 80158fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80158fe:	f7ff fdd5 	bl	80154ac <ip_reass_chain_frag_into_datagram_and_validate>
 8015902:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8015904:	697b      	ldr	r3, [r7, #20]
 8015906:	f1b3 3fff 	cmp.w	r3, #4294967295
 801590a:	f000 809b 	beq.w	8015a44 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801590e:	4b48      	ldr	r3, [pc, #288]	; (8015a30 <ip4_reass+0x2b0>)
 8015910:	881a      	ldrh	r2, [r3, #0]
 8015912:	8c3b      	ldrh	r3, [r7, #32]
 8015914:	4413      	add	r3, r2
 8015916:	b29a      	uxth	r2, r3
 8015918:	4b45      	ldr	r3, [pc, #276]	; (8015a30 <ip4_reass+0x2b0>)
 801591a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801591c:	69fb      	ldr	r3, [r7, #28]
 801591e:	2b00      	cmp	r3, #0
 8015920:	d00d      	beq.n	801593e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8015922:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8015924:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015926:	4413      	add	r3, r2
 8015928:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801592a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801592c:	8a7a      	ldrh	r2, [r7, #18]
 801592e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8015930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015932:	7f9b      	ldrb	r3, [r3, #30]
 8015934:	f043 0301 	orr.w	r3, r3, #1
 8015938:	b2da      	uxtb	r2, r3
 801593a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801593c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801593e:	697b      	ldr	r3, [r7, #20]
 8015940:	2b01      	cmp	r3, #1
 8015942:	d171      	bne.n	8015a28 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8015944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015946:	8b9b      	ldrh	r3, [r3, #28]
 8015948:	3314      	adds	r3, #20
 801594a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801594c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801594e:	685b      	ldr	r3, [r3, #4]
 8015950:	685b      	ldr	r3, [r3, #4]
 8015952:	681b      	ldr	r3, [r3, #0]
 8015954:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8015956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015958:	685b      	ldr	r3, [r3, #4]
 801595a:	685b      	ldr	r3, [r3, #4]
 801595c:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801595e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015960:	3308      	adds	r3, #8
 8015962:	2214      	movs	r2, #20
 8015964:	4619      	mov	r1, r3
 8015966:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015968:	f001 f896 	bl	8016a98 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801596c:	8a3b      	ldrh	r3, [r7, #16]
 801596e:	4618      	mov	r0, r3
 8015970:	f7f5 fd0e 	bl	800b390 <lwip_htons>
 8015974:	4603      	mov	r3, r0
 8015976:	461a      	mov	r2, r3
 8015978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801597a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801597c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801597e:	2200      	movs	r2, #0
 8015980:	719a      	strb	r2, [r3, #6]
 8015982:	2200      	movs	r2, #0
 8015984:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8015986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015988:	2200      	movs	r2, #0
 801598a:	729a      	strb	r2, [r3, #10]
 801598c:	2200      	movs	r2, #0
 801598e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8015990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015992:	685b      	ldr	r3, [r3, #4]
 8015994:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8015996:	e00d      	b.n	80159b4 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8015998:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801599a:	685b      	ldr	r3, [r3, #4]
 801599c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801599e:	2114      	movs	r1, #20
 80159a0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80159a2:	f7f7 f8cb 	bl	800cb3c <pbuf_remove_header>
      pbuf_cat(p, r);
 80159a6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80159a8:	6878      	ldr	r0, [r7, #4]
 80159aa:	f7f7 fa19 	bl	800cde0 <pbuf_cat>
      r = iprh->next_pbuf;
 80159ae:	68fb      	ldr	r3, [r7, #12]
 80159b0:	681b      	ldr	r3, [r3, #0]
 80159b2:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80159b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80159b6:	2b00      	cmp	r3, #0
 80159b8:	d1ee      	bne.n	8015998 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80159ba:	4b1e      	ldr	r3, [pc, #120]	; (8015a34 <ip4_reass+0x2b4>)
 80159bc:	681b      	ldr	r3, [r3, #0]
 80159be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80159c0:	429a      	cmp	r2, r3
 80159c2:	d102      	bne.n	80159ca <ip4_reass+0x24a>
      ipr_prev = NULL;
 80159c4:	2300      	movs	r3, #0
 80159c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80159c8:	e010      	b.n	80159ec <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80159ca:	4b1a      	ldr	r3, [pc, #104]	; (8015a34 <ip4_reass+0x2b4>)
 80159cc:	681b      	ldr	r3, [r3, #0]
 80159ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80159d0:	e007      	b.n	80159e2 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80159d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159d4:	681b      	ldr	r3, [r3, #0]
 80159d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80159d8:	429a      	cmp	r2, r3
 80159da:	d006      	beq.n	80159ea <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80159dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159de:	681b      	ldr	r3, [r3, #0]
 80159e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80159e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159e4:	2b00      	cmp	r3, #0
 80159e6:	d1f4      	bne.n	80159d2 <ip4_reass+0x252>
 80159e8:	e000      	b.n	80159ec <ip4_reass+0x26c>
          break;
 80159ea:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80159ec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80159ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80159f0:	f7ff fd2e 	bl	8015450 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80159f4:	6878      	ldr	r0, [r7, #4]
 80159f6:	f7f7 f9b5 	bl	800cd64 <pbuf_clen>
 80159fa:	4603      	mov	r3, r0
 80159fc:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80159fe:	4b0c      	ldr	r3, [pc, #48]	; (8015a30 <ip4_reass+0x2b0>)
 8015a00:	881b      	ldrh	r3, [r3, #0]
 8015a02:	8c3a      	ldrh	r2, [r7, #32]
 8015a04:	429a      	cmp	r2, r3
 8015a06:	d906      	bls.n	8015a16 <ip4_reass+0x296>
 8015a08:	4b0b      	ldr	r3, [pc, #44]	; (8015a38 <ip4_reass+0x2b8>)
 8015a0a:	f240 229b 	movw	r2, #667	; 0x29b
 8015a0e:	490b      	ldr	r1, [pc, #44]	; (8015a3c <ip4_reass+0x2bc>)
 8015a10:	480b      	ldr	r0, [pc, #44]	; (8015a40 <ip4_reass+0x2c0>)
 8015a12:	f001 f935 	bl	8016c80 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8015a16:	4b06      	ldr	r3, [pc, #24]	; (8015a30 <ip4_reass+0x2b0>)
 8015a18:	881a      	ldrh	r2, [r3, #0]
 8015a1a:	8c3b      	ldrh	r3, [r7, #32]
 8015a1c:	1ad3      	subs	r3, r2, r3
 8015a1e:	b29a      	uxth	r2, r3
 8015a20:	4b03      	ldr	r3, [pc, #12]	; (8015a30 <ip4_reass+0x2b0>)
 8015a22:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8015a24:	687b      	ldr	r3, [r7, #4]
 8015a26:	e038      	b.n	8015a9a <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8015a28:	2300      	movs	r3, #0
 8015a2a:	e036      	b.n	8015a9a <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8015a2c:	bf00      	nop
 8015a2e:	e00a      	b.n	8015a46 <ip4_reass+0x2c6>
 8015a30:	2000bf68 	.word	0x2000bf68
 8015a34:	2000bf64 	.word	0x2000bf64
 8015a38:	0801a864 	.word	0x0801a864
 8015a3c:	0801a9d4 	.word	0x0801a9d4
 8015a40:	0801a8ac 	.word	0x0801a8ac
    goto nullreturn_ipr;
 8015a44:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8015a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a48:	2b00      	cmp	r3, #0
 8015a4a:	d106      	bne.n	8015a5a <ip4_reass+0x2da>
 8015a4c:	4b15      	ldr	r3, [pc, #84]	; (8015aa4 <ip4_reass+0x324>)
 8015a4e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8015a52:	4915      	ldr	r1, [pc, #84]	; (8015aa8 <ip4_reass+0x328>)
 8015a54:	4815      	ldr	r0, [pc, #84]	; (8015aac <ip4_reass+0x32c>)
 8015a56:	f001 f913 	bl	8016c80 <iprintf>
  if (ipr->p == NULL) {
 8015a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a5c:	685b      	ldr	r3, [r3, #4]
 8015a5e:	2b00      	cmp	r3, #0
 8015a60:	d116      	bne.n	8015a90 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8015a62:	4b13      	ldr	r3, [pc, #76]	; (8015ab0 <ip4_reass+0x330>)
 8015a64:	681b      	ldr	r3, [r3, #0]
 8015a66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015a68:	429a      	cmp	r2, r3
 8015a6a:	d006      	beq.n	8015a7a <ip4_reass+0x2fa>
 8015a6c:	4b0d      	ldr	r3, [pc, #52]	; (8015aa4 <ip4_reass+0x324>)
 8015a6e:	f240 22ab 	movw	r2, #683	; 0x2ab
 8015a72:	4910      	ldr	r1, [pc, #64]	; (8015ab4 <ip4_reass+0x334>)
 8015a74:	480d      	ldr	r0, [pc, #52]	; (8015aac <ip4_reass+0x32c>)
 8015a76:	f001 f903 	bl	8016c80 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8015a7a:	2100      	movs	r1, #0
 8015a7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015a7e:	f7ff fce7 	bl	8015450 <ip_reass_dequeue_datagram>
 8015a82:	e006      	b.n	8015a92 <ip4_reass+0x312>
    goto nullreturn;
 8015a84:	bf00      	nop
 8015a86:	e004      	b.n	8015a92 <ip4_reass+0x312>
    goto nullreturn;
 8015a88:	bf00      	nop
 8015a8a:	e002      	b.n	8015a92 <ip4_reass+0x312>
      goto nullreturn;
 8015a8c:	bf00      	nop
 8015a8e:	e000      	b.n	8015a92 <ip4_reass+0x312>
  }

nullreturn:
 8015a90:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8015a92:	6878      	ldr	r0, [r7, #4]
 8015a94:	f7f7 f8d8 	bl	800cc48 <pbuf_free>
  return NULL;
 8015a98:	2300      	movs	r3, #0
}
 8015a9a:	4618      	mov	r0, r3
 8015a9c:	3738      	adds	r7, #56	; 0x38
 8015a9e:	46bd      	mov	sp, r7
 8015aa0:	bd80      	pop	{r7, pc}
 8015aa2:	bf00      	nop
 8015aa4:	0801a864 	.word	0x0801a864
 8015aa8:	0801a9f0 	.word	0x0801a9f0
 8015aac:	0801a8ac 	.word	0x0801a8ac
 8015ab0:	2000bf64 	.word	0x2000bf64
 8015ab4:	0801a9fc 	.word	0x0801a9fc

08015ab8 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8015ab8:	b580      	push	{r7, lr}
 8015aba:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8015abc:	2005      	movs	r0, #5
 8015abe:	f7f6 fa17 	bl	800bef0 <memp_malloc>
 8015ac2:	4603      	mov	r3, r0
}
 8015ac4:	4618      	mov	r0, r3
 8015ac6:	bd80      	pop	{r7, pc}

08015ac8 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8015ac8:	b580      	push	{r7, lr}
 8015aca:	b082      	sub	sp, #8
 8015acc:	af00      	add	r7, sp, #0
 8015ace:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8015ad0:	687b      	ldr	r3, [r7, #4]
 8015ad2:	2b00      	cmp	r3, #0
 8015ad4:	d106      	bne.n	8015ae4 <ip_frag_free_pbuf_custom_ref+0x1c>
 8015ad6:	4b07      	ldr	r3, [pc, #28]	; (8015af4 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8015ad8:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8015adc:	4906      	ldr	r1, [pc, #24]	; (8015af8 <ip_frag_free_pbuf_custom_ref+0x30>)
 8015ade:	4807      	ldr	r0, [pc, #28]	; (8015afc <ip_frag_free_pbuf_custom_ref+0x34>)
 8015ae0:	f001 f8ce 	bl	8016c80 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8015ae4:	6879      	ldr	r1, [r7, #4]
 8015ae6:	2005      	movs	r0, #5
 8015ae8:	f7f6 fa78 	bl	800bfdc <memp_free>
}
 8015aec:	bf00      	nop
 8015aee:	3708      	adds	r7, #8
 8015af0:	46bd      	mov	sp, r7
 8015af2:	bd80      	pop	{r7, pc}
 8015af4:	0801a864 	.word	0x0801a864
 8015af8:	0801aa1c 	.word	0x0801aa1c
 8015afc:	0801a8ac 	.word	0x0801a8ac

08015b00 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8015b00:	b580      	push	{r7, lr}
 8015b02:	b084      	sub	sp, #16
 8015b04:	af00      	add	r7, sp, #0
 8015b06:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8015b08:	687b      	ldr	r3, [r7, #4]
 8015b0a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8015b0c:	68fb      	ldr	r3, [r7, #12]
 8015b0e:	2b00      	cmp	r3, #0
 8015b10:	d106      	bne.n	8015b20 <ipfrag_free_pbuf_custom+0x20>
 8015b12:	4b11      	ldr	r3, [pc, #68]	; (8015b58 <ipfrag_free_pbuf_custom+0x58>)
 8015b14:	f240 22ce 	movw	r2, #718	; 0x2ce
 8015b18:	4910      	ldr	r1, [pc, #64]	; (8015b5c <ipfrag_free_pbuf_custom+0x5c>)
 8015b1a:	4811      	ldr	r0, [pc, #68]	; (8015b60 <ipfrag_free_pbuf_custom+0x60>)
 8015b1c:	f001 f8b0 	bl	8016c80 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8015b20:	68fa      	ldr	r2, [r7, #12]
 8015b22:	687b      	ldr	r3, [r7, #4]
 8015b24:	429a      	cmp	r2, r3
 8015b26:	d006      	beq.n	8015b36 <ipfrag_free_pbuf_custom+0x36>
 8015b28:	4b0b      	ldr	r3, [pc, #44]	; (8015b58 <ipfrag_free_pbuf_custom+0x58>)
 8015b2a:	f240 22cf 	movw	r2, #719	; 0x2cf
 8015b2e:	490d      	ldr	r1, [pc, #52]	; (8015b64 <ipfrag_free_pbuf_custom+0x64>)
 8015b30:	480b      	ldr	r0, [pc, #44]	; (8015b60 <ipfrag_free_pbuf_custom+0x60>)
 8015b32:	f001 f8a5 	bl	8016c80 <iprintf>
  if (pcr->original != NULL) {
 8015b36:	68fb      	ldr	r3, [r7, #12]
 8015b38:	695b      	ldr	r3, [r3, #20]
 8015b3a:	2b00      	cmp	r3, #0
 8015b3c:	d004      	beq.n	8015b48 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8015b3e:	68fb      	ldr	r3, [r7, #12]
 8015b40:	695b      	ldr	r3, [r3, #20]
 8015b42:	4618      	mov	r0, r3
 8015b44:	f7f7 f880 	bl	800cc48 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8015b48:	68f8      	ldr	r0, [r7, #12]
 8015b4a:	f7ff ffbd 	bl	8015ac8 <ip_frag_free_pbuf_custom_ref>
}
 8015b4e:	bf00      	nop
 8015b50:	3710      	adds	r7, #16
 8015b52:	46bd      	mov	sp, r7
 8015b54:	bd80      	pop	{r7, pc}
 8015b56:	bf00      	nop
 8015b58:	0801a864 	.word	0x0801a864
 8015b5c:	0801aa28 	.word	0x0801aa28
 8015b60:	0801a8ac 	.word	0x0801a8ac
 8015b64:	0801aa34 	.word	0x0801aa34

08015b68 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8015b68:	b580      	push	{r7, lr}
 8015b6a:	b094      	sub	sp, #80	; 0x50
 8015b6c:	af02      	add	r7, sp, #8
 8015b6e:	60f8      	str	r0, [r7, #12]
 8015b70:	60b9      	str	r1, [r7, #8]
 8015b72:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8015b74:	2300      	movs	r3, #0
 8015b76:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8015b7a:	68bb      	ldr	r3, [r7, #8]
 8015b7c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8015b7e:	3b14      	subs	r3, #20
 8015b80:	2b00      	cmp	r3, #0
 8015b82:	da00      	bge.n	8015b86 <ip4_frag+0x1e>
 8015b84:	3307      	adds	r3, #7
 8015b86:	10db      	asrs	r3, r3, #3
 8015b88:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8015b8a:	2314      	movs	r3, #20
 8015b8c:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8015b8e:	68fb      	ldr	r3, [r7, #12]
 8015b90:	685b      	ldr	r3, [r3, #4]
 8015b92:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8015b94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015b96:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8015b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b9a:	781b      	ldrb	r3, [r3, #0]
 8015b9c:	f003 030f 	and.w	r3, r3, #15
 8015ba0:	b2db      	uxtb	r3, r3
 8015ba2:	009b      	lsls	r3, r3, #2
 8015ba4:	b2db      	uxtb	r3, r3
 8015ba6:	2b14      	cmp	r3, #20
 8015ba8:	d002      	beq.n	8015bb0 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8015baa:	f06f 0305 	mvn.w	r3, #5
 8015bae:	e110      	b.n	8015dd2 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8015bb0:	68fb      	ldr	r3, [r7, #12]
 8015bb2:	895b      	ldrh	r3, [r3, #10]
 8015bb4:	2b13      	cmp	r3, #19
 8015bb6:	d809      	bhi.n	8015bcc <ip4_frag+0x64>
 8015bb8:	4b88      	ldr	r3, [pc, #544]	; (8015ddc <ip4_frag+0x274>)
 8015bba:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8015bbe:	4988      	ldr	r1, [pc, #544]	; (8015de0 <ip4_frag+0x278>)
 8015bc0:	4888      	ldr	r0, [pc, #544]	; (8015de4 <ip4_frag+0x27c>)
 8015bc2:	f001 f85d 	bl	8016c80 <iprintf>
 8015bc6:	f06f 0305 	mvn.w	r3, #5
 8015bca:	e102      	b.n	8015dd2 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8015bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015bce:	88db      	ldrh	r3, [r3, #6]
 8015bd0:	b29b      	uxth	r3, r3
 8015bd2:	4618      	mov	r0, r3
 8015bd4:	f7f5 fbdc 	bl	800b390 <lwip_htons>
 8015bd8:	4603      	mov	r3, r0
 8015bda:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8015bdc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015bde:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015be2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8015be6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015be8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8015bec:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8015bee:	68fb      	ldr	r3, [r7, #12]
 8015bf0:	891b      	ldrh	r3, [r3, #8]
 8015bf2:	3b14      	subs	r3, #20
 8015bf4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8015bf8:	e0e1      	b.n	8015dbe <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8015bfa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015bfc:	00db      	lsls	r3, r3, #3
 8015bfe:	b29b      	uxth	r3, r3
 8015c00:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015c04:	4293      	cmp	r3, r2
 8015c06:	bf28      	it	cs
 8015c08:	4613      	movcs	r3, r2
 8015c0a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8015c0c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015c10:	2114      	movs	r1, #20
 8015c12:	200e      	movs	r0, #14
 8015c14:	f7f6 fd34 	bl	800c680 <pbuf_alloc>
 8015c18:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8015c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c1c:	2b00      	cmp	r3, #0
 8015c1e:	f000 80d5 	beq.w	8015dcc <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8015c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c24:	895b      	ldrh	r3, [r3, #10]
 8015c26:	2b13      	cmp	r3, #19
 8015c28:	d806      	bhi.n	8015c38 <ip4_frag+0xd0>
 8015c2a:	4b6c      	ldr	r3, [pc, #432]	; (8015ddc <ip4_frag+0x274>)
 8015c2c:	f44f 7249 	mov.w	r2, #804	; 0x324
 8015c30:	496d      	ldr	r1, [pc, #436]	; (8015de8 <ip4_frag+0x280>)
 8015c32:	486c      	ldr	r0, [pc, #432]	; (8015de4 <ip4_frag+0x27c>)
 8015c34:	f001 f824 	bl	8016c80 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8015c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c3a:	685b      	ldr	r3, [r3, #4]
 8015c3c:	2214      	movs	r2, #20
 8015c3e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8015c40:	4618      	mov	r0, r3
 8015c42:	f000 ff29 	bl	8016a98 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8015c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c48:	685b      	ldr	r3, [r3, #4]
 8015c4a:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8015c4c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8015c4e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8015c52:	e064      	b.n	8015d1e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8015c54:	68fb      	ldr	r3, [r7, #12]
 8015c56:	895a      	ldrh	r2, [r3, #10]
 8015c58:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015c5a:	1ad3      	subs	r3, r2, r3
 8015c5c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8015c5e:	68fb      	ldr	r3, [r7, #12]
 8015c60:	895b      	ldrh	r3, [r3, #10]
 8015c62:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8015c64:	429a      	cmp	r2, r3
 8015c66:	d906      	bls.n	8015c76 <ip4_frag+0x10e>
 8015c68:	4b5c      	ldr	r3, [pc, #368]	; (8015ddc <ip4_frag+0x274>)
 8015c6a:	f240 322d 	movw	r2, #813	; 0x32d
 8015c6e:	495f      	ldr	r1, [pc, #380]	; (8015dec <ip4_frag+0x284>)
 8015c70:	485c      	ldr	r0, [pc, #368]	; (8015de4 <ip4_frag+0x27c>)
 8015c72:	f001 f805 	bl	8016c80 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8015c76:	8bfa      	ldrh	r2, [r7, #30]
 8015c78:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8015c7c:	4293      	cmp	r3, r2
 8015c7e:	bf28      	it	cs
 8015c80:	4613      	movcs	r3, r2
 8015c82:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8015c86:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8015c8a:	2b00      	cmp	r3, #0
 8015c8c:	d105      	bne.n	8015c9a <ip4_frag+0x132>
        poff = 0;
 8015c8e:	2300      	movs	r3, #0
 8015c90:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8015c92:	68fb      	ldr	r3, [r7, #12]
 8015c94:	681b      	ldr	r3, [r3, #0]
 8015c96:	60fb      	str	r3, [r7, #12]
        continue;
 8015c98:	e041      	b.n	8015d1e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8015c9a:	f7ff ff0d 	bl	8015ab8 <ip_frag_alloc_pbuf_custom_ref>
 8015c9e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8015ca0:	69bb      	ldr	r3, [r7, #24]
 8015ca2:	2b00      	cmp	r3, #0
 8015ca4:	d103      	bne.n	8015cae <ip4_frag+0x146>
        pbuf_free(rambuf);
 8015ca6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015ca8:	f7f6 ffce 	bl	800cc48 <pbuf_free>
        goto memerr;
 8015cac:	e08f      	b.n	8015dce <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8015cae:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8015cb0:	68fb      	ldr	r3, [r7, #12]
 8015cb2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8015cb4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015cb6:	4413      	add	r3, r2
 8015cb8:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8015cbc:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8015cc0:	9201      	str	r2, [sp, #4]
 8015cc2:	9300      	str	r3, [sp, #0]
 8015cc4:	4603      	mov	r3, r0
 8015cc6:	2241      	movs	r2, #65	; 0x41
 8015cc8:	2000      	movs	r0, #0
 8015cca:	f7f6 fe03 	bl	800c8d4 <pbuf_alloced_custom>
 8015cce:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8015cd0:	697b      	ldr	r3, [r7, #20]
 8015cd2:	2b00      	cmp	r3, #0
 8015cd4:	d106      	bne.n	8015ce4 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8015cd6:	69b8      	ldr	r0, [r7, #24]
 8015cd8:	f7ff fef6 	bl	8015ac8 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8015cdc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015cde:	f7f6 ffb3 	bl	800cc48 <pbuf_free>
        goto memerr;
 8015ce2:	e074      	b.n	8015dce <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8015ce4:	68f8      	ldr	r0, [r7, #12]
 8015ce6:	f7f7 f853 	bl	800cd90 <pbuf_ref>
      pcr->original = p;
 8015cea:	69bb      	ldr	r3, [r7, #24]
 8015cec:	68fa      	ldr	r2, [r7, #12]
 8015cee:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8015cf0:	69bb      	ldr	r3, [r7, #24]
 8015cf2:	4a3f      	ldr	r2, [pc, #252]	; (8015df0 <ip4_frag+0x288>)
 8015cf4:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8015cf6:	6979      	ldr	r1, [r7, #20]
 8015cf8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015cfa:	f7f7 f871 	bl	800cde0 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8015cfe:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8015d02:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8015d06:	1ad3      	subs	r3, r2, r3
 8015d08:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8015d0c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8015d10:	2b00      	cmp	r3, #0
 8015d12:	d004      	beq.n	8015d1e <ip4_frag+0x1b6>
        poff = 0;
 8015d14:	2300      	movs	r3, #0
 8015d16:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8015d18:	68fb      	ldr	r3, [r7, #12]
 8015d1a:	681b      	ldr	r3, [r3, #0]
 8015d1c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8015d1e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8015d22:	2b00      	cmp	r3, #0
 8015d24:	d196      	bne.n	8015c54 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8015d26:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8015d28:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8015d2c:	4413      	add	r3, r2
 8015d2e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8015d30:	68bb      	ldr	r3, [r7, #8]
 8015d32:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8015d34:	f1a3 0213 	sub.w	r2, r3, #19
 8015d38:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015d3c:	429a      	cmp	r2, r3
 8015d3e:	bfcc      	ite	gt
 8015d40:	2301      	movgt	r3, #1
 8015d42:	2300      	movle	r3, #0
 8015d44:	b2db      	uxtb	r3, r3
 8015d46:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8015d48:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8015d4c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015d50:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8015d52:	6a3b      	ldr	r3, [r7, #32]
 8015d54:	2b00      	cmp	r3, #0
 8015d56:	d002      	beq.n	8015d5e <ip4_frag+0x1f6>
 8015d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d5a:	2b00      	cmp	r3, #0
 8015d5c:	d003      	beq.n	8015d66 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8015d5e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015d60:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8015d64:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8015d66:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015d68:	4618      	mov	r0, r3
 8015d6a:	f7f5 fb11 	bl	800b390 <lwip_htons>
 8015d6e:	4603      	mov	r3, r0
 8015d70:	461a      	mov	r2, r3
 8015d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d74:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8015d76:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8015d78:	3314      	adds	r3, #20
 8015d7a:	b29b      	uxth	r3, r3
 8015d7c:	4618      	mov	r0, r3
 8015d7e:	f7f5 fb07 	bl	800b390 <lwip_htons>
 8015d82:	4603      	mov	r3, r0
 8015d84:	461a      	mov	r2, r3
 8015d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d88:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8015d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d8c:	2200      	movs	r2, #0
 8015d8e:	729a      	strb	r2, [r3, #10]
 8015d90:	2200      	movs	r2, #0
 8015d92:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8015d94:	68bb      	ldr	r3, [r7, #8]
 8015d96:	695b      	ldr	r3, [r3, #20]
 8015d98:	687a      	ldr	r2, [r7, #4]
 8015d9a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015d9c:	68b8      	ldr	r0, [r7, #8]
 8015d9e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8015da0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015da2:	f7f6 ff51 	bl	800cc48 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8015da6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015daa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8015dac:	1ad3      	subs	r3, r2, r3
 8015dae:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8015db2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8015db6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015db8:	4413      	add	r3, r2
 8015dba:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8015dbe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015dc2:	2b00      	cmp	r3, #0
 8015dc4:	f47f af19 	bne.w	8015bfa <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8015dc8:	2300      	movs	r3, #0
 8015dca:	e002      	b.n	8015dd2 <ip4_frag+0x26a>
      goto memerr;
 8015dcc:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8015dce:	f04f 33ff 	mov.w	r3, #4294967295
}
 8015dd2:	4618      	mov	r0, r3
 8015dd4:	3748      	adds	r7, #72	; 0x48
 8015dd6:	46bd      	mov	sp, r7
 8015dd8:	bd80      	pop	{r7, pc}
 8015dda:	bf00      	nop
 8015ddc:	0801a864 	.word	0x0801a864
 8015de0:	0801aa40 	.word	0x0801aa40
 8015de4:	0801a8ac 	.word	0x0801a8ac
 8015de8:	0801aa5c 	.word	0x0801aa5c
 8015dec:	0801aa7c 	.word	0x0801aa7c
 8015df0:	08015b01 	.word	0x08015b01

08015df4 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8015df4:	b580      	push	{r7, lr}
 8015df6:	b086      	sub	sp, #24
 8015df8:	af00      	add	r7, sp, #0
 8015dfa:	6078      	str	r0, [r7, #4]
 8015dfc:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8015dfe:	230e      	movs	r3, #14
 8015e00:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8015e02:	687b      	ldr	r3, [r7, #4]
 8015e04:	895b      	ldrh	r3, [r3, #10]
 8015e06:	2b0e      	cmp	r3, #14
 8015e08:	d96e      	bls.n	8015ee8 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8015e0a:	687b      	ldr	r3, [r7, #4]
 8015e0c:	7bdb      	ldrb	r3, [r3, #15]
 8015e0e:	2b00      	cmp	r3, #0
 8015e10:	d106      	bne.n	8015e20 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8015e12:	683b      	ldr	r3, [r7, #0]
 8015e14:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015e18:	3301      	adds	r3, #1
 8015e1a:	b2da      	uxtb	r2, r3
 8015e1c:	687b      	ldr	r3, [r7, #4]
 8015e1e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8015e20:	687b      	ldr	r3, [r7, #4]
 8015e22:	685b      	ldr	r3, [r3, #4]
 8015e24:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8015e26:	693b      	ldr	r3, [r7, #16]
 8015e28:	7b1a      	ldrb	r2, [r3, #12]
 8015e2a:	7b5b      	ldrb	r3, [r3, #13]
 8015e2c:	021b      	lsls	r3, r3, #8
 8015e2e:	4313      	orrs	r3, r2
 8015e30:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8015e32:	693b      	ldr	r3, [r7, #16]
 8015e34:	781b      	ldrb	r3, [r3, #0]
 8015e36:	f003 0301 	and.w	r3, r3, #1
 8015e3a:	2b00      	cmp	r3, #0
 8015e3c:	d023      	beq.n	8015e86 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8015e3e:	693b      	ldr	r3, [r7, #16]
 8015e40:	781b      	ldrb	r3, [r3, #0]
 8015e42:	2b01      	cmp	r3, #1
 8015e44:	d10f      	bne.n	8015e66 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8015e46:	693b      	ldr	r3, [r7, #16]
 8015e48:	785b      	ldrb	r3, [r3, #1]
 8015e4a:	2b00      	cmp	r3, #0
 8015e4c:	d11b      	bne.n	8015e86 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8015e4e:	693b      	ldr	r3, [r7, #16]
 8015e50:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8015e52:	2b5e      	cmp	r3, #94	; 0x5e
 8015e54:	d117      	bne.n	8015e86 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8015e56:	687b      	ldr	r3, [r7, #4]
 8015e58:	7b5b      	ldrb	r3, [r3, #13]
 8015e5a:	f043 0310 	orr.w	r3, r3, #16
 8015e5e:	b2da      	uxtb	r2, r3
 8015e60:	687b      	ldr	r3, [r7, #4]
 8015e62:	735a      	strb	r2, [r3, #13]
 8015e64:	e00f      	b.n	8015e86 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8015e66:	693b      	ldr	r3, [r7, #16]
 8015e68:	2206      	movs	r2, #6
 8015e6a:	4928      	ldr	r1, [pc, #160]	; (8015f0c <ethernet_input+0x118>)
 8015e6c:	4618      	mov	r0, r3
 8015e6e:	f000 fe03 	bl	8016a78 <memcmp>
 8015e72:	4603      	mov	r3, r0
 8015e74:	2b00      	cmp	r3, #0
 8015e76:	d106      	bne.n	8015e86 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8015e78:	687b      	ldr	r3, [r7, #4]
 8015e7a:	7b5b      	ldrb	r3, [r3, #13]
 8015e7c:	f043 0308 	orr.w	r3, r3, #8
 8015e80:	b2da      	uxtb	r2, r3
 8015e82:	687b      	ldr	r3, [r7, #4]
 8015e84:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8015e86:	89fb      	ldrh	r3, [r7, #14]
 8015e88:	2b08      	cmp	r3, #8
 8015e8a:	d003      	beq.n	8015e94 <ethernet_input+0xa0>
 8015e8c:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8015e90:	d014      	beq.n	8015ebc <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8015e92:	e032      	b.n	8015efa <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8015e94:	683b      	ldr	r3, [r7, #0]
 8015e96:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015e9a:	f003 0308 	and.w	r3, r3, #8
 8015e9e:	2b00      	cmp	r3, #0
 8015ea0:	d024      	beq.n	8015eec <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8015ea2:	8afb      	ldrh	r3, [r7, #22]
 8015ea4:	4619      	mov	r1, r3
 8015ea6:	6878      	ldr	r0, [r7, #4]
 8015ea8:	f7f6 fe48 	bl	800cb3c <pbuf_remove_header>
 8015eac:	4603      	mov	r3, r0
 8015eae:	2b00      	cmp	r3, #0
 8015eb0:	d11e      	bne.n	8015ef0 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8015eb2:	6839      	ldr	r1, [r7, #0]
 8015eb4:	6878      	ldr	r0, [r7, #4]
 8015eb6:	f7fe ff23 	bl	8014d00 <ip4_input>
      break;
 8015eba:	e013      	b.n	8015ee4 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8015ebc:	683b      	ldr	r3, [r7, #0]
 8015ebe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015ec2:	f003 0308 	and.w	r3, r3, #8
 8015ec6:	2b00      	cmp	r3, #0
 8015ec8:	d014      	beq.n	8015ef4 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8015eca:	8afb      	ldrh	r3, [r7, #22]
 8015ecc:	4619      	mov	r1, r3
 8015ece:	6878      	ldr	r0, [r7, #4]
 8015ed0:	f7f6 fe34 	bl	800cb3c <pbuf_remove_header>
 8015ed4:	4603      	mov	r3, r0
 8015ed6:	2b00      	cmp	r3, #0
 8015ed8:	d10e      	bne.n	8015ef8 <ethernet_input+0x104>
        etharp_input(p, netif);
 8015eda:	6839      	ldr	r1, [r7, #0]
 8015edc:	6878      	ldr	r0, [r7, #4]
 8015ede:	f7fe f89f 	bl	8014020 <etharp_input>
      break;
 8015ee2:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8015ee4:	2300      	movs	r3, #0
 8015ee6:	e00c      	b.n	8015f02 <ethernet_input+0x10e>
    goto free_and_return;
 8015ee8:	bf00      	nop
 8015eea:	e006      	b.n	8015efa <ethernet_input+0x106>
        goto free_and_return;
 8015eec:	bf00      	nop
 8015eee:	e004      	b.n	8015efa <ethernet_input+0x106>
        goto free_and_return;
 8015ef0:	bf00      	nop
 8015ef2:	e002      	b.n	8015efa <ethernet_input+0x106>
        goto free_and_return;
 8015ef4:	bf00      	nop
 8015ef6:	e000      	b.n	8015efa <ethernet_input+0x106>
        goto free_and_return;
 8015ef8:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8015efa:	6878      	ldr	r0, [r7, #4]
 8015efc:	f7f6 fea4 	bl	800cc48 <pbuf_free>
  return ERR_OK;
 8015f00:	2300      	movs	r3, #0
}
 8015f02:	4618      	mov	r0, r3
 8015f04:	3718      	adds	r7, #24
 8015f06:	46bd      	mov	sp, r7
 8015f08:	bd80      	pop	{r7, pc}
 8015f0a:	bf00      	nop
 8015f0c:	0801ac64 	.word	0x0801ac64

08015f10 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8015f10:	b580      	push	{r7, lr}
 8015f12:	b086      	sub	sp, #24
 8015f14:	af00      	add	r7, sp, #0
 8015f16:	60f8      	str	r0, [r7, #12]
 8015f18:	60b9      	str	r1, [r7, #8]
 8015f1a:	607a      	str	r2, [r7, #4]
 8015f1c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8015f1e:	8c3b      	ldrh	r3, [r7, #32]
 8015f20:	4618      	mov	r0, r3
 8015f22:	f7f5 fa35 	bl	800b390 <lwip_htons>
 8015f26:	4603      	mov	r3, r0
 8015f28:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8015f2a:	210e      	movs	r1, #14
 8015f2c:	68b8      	ldr	r0, [r7, #8]
 8015f2e:	f7f6 fdf5 	bl	800cb1c <pbuf_add_header>
 8015f32:	4603      	mov	r3, r0
 8015f34:	2b00      	cmp	r3, #0
 8015f36:	d125      	bne.n	8015f84 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8015f38:	68bb      	ldr	r3, [r7, #8]
 8015f3a:	685b      	ldr	r3, [r3, #4]
 8015f3c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8015f3e:	693b      	ldr	r3, [r7, #16]
 8015f40:	8afa      	ldrh	r2, [r7, #22]
 8015f42:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8015f44:	693b      	ldr	r3, [r7, #16]
 8015f46:	2206      	movs	r2, #6
 8015f48:	6839      	ldr	r1, [r7, #0]
 8015f4a:	4618      	mov	r0, r3
 8015f4c:	f000 fda4 	bl	8016a98 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8015f50:	693b      	ldr	r3, [r7, #16]
 8015f52:	3306      	adds	r3, #6
 8015f54:	2206      	movs	r2, #6
 8015f56:	6879      	ldr	r1, [r7, #4]
 8015f58:	4618      	mov	r0, r3
 8015f5a:	f000 fd9d 	bl	8016a98 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8015f5e:	68fb      	ldr	r3, [r7, #12]
 8015f60:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8015f64:	2b06      	cmp	r3, #6
 8015f66:	d006      	beq.n	8015f76 <ethernet_output+0x66>
 8015f68:	4b0a      	ldr	r3, [pc, #40]	; (8015f94 <ethernet_output+0x84>)
 8015f6a:	f44f 7299 	mov.w	r2, #306	; 0x132
 8015f6e:	490a      	ldr	r1, [pc, #40]	; (8015f98 <ethernet_output+0x88>)
 8015f70:	480a      	ldr	r0, [pc, #40]	; (8015f9c <ethernet_output+0x8c>)
 8015f72:	f000 fe85 	bl	8016c80 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8015f76:	68fb      	ldr	r3, [r7, #12]
 8015f78:	699b      	ldr	r3, [r3, #24]
 8015f7a:	68b9      	ldr	r1, [r7, #8]
 8015f7c:	68f8      	ldr	r0, [r7, #12]
 8015f7e:	4798      	blx	r3
 8015f80:	4603      	mov	r3, r0
 8015f82:	e002      	b.n	8015f8a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8015f84:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8015f86:	f06f 0301 	mvn.w	r3, #1
}
 8015f8a:	4618      	mov	r0, r3
 8015f8c:	3718      	adds	r7, #24
 8015f8e:	46bd      	mov	sp, r7
 8015f90:	bd80      	pop	{r7, pc}
 8015f92:	bf00      	nop
 8015f94:	0801aa8c 	.word	0x0801aa8c
 8015f98:	0801aac4 	.word	0x0801aac4
 8015f9c:	0801aaf8 	.word	0x0801aaf8

08015fa0 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8015fa0:	b580      	push	{r7, lr}
 8015fa2:	b086      	sub	sp, #24
 8015fa4:	af00      	add	r7, sp, #0
 8015fa6:	6078      	str	r0, [r7, #4]
 8015fa8:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8015faa:	683b      	ldr	r3, [r7, #0]
 8015fac:	60bb      	str	r3, [r7, #8]
 8015fae:	2304      	movs	r3, #4
 8015fb0:	60fb      	str	r3, [r7, #12]
 8015fb2:	2300      	movs	r3, #0
 8015fb4:	613b      	str	r3, [r7, #16]
 8015fb6:	2300      	movs	r3, #0
 8015fb8:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8015fba:	f107 0308 	add.w	r3, r7, #8
 8015fbe:	2100      	movs	r1, #0
 8015fc0:	4618      	mov	r0, r3
 8015fc2:	f7f1 f901 	bl	80071c8 <osMessageCreate>
 8015fc6:	4602      	mov	r2, r0
 8015fc8:	687b      	ldr	r3, [r7, #4]
 8015fca:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8015fcc:	687b      	ldr	r3, [r7, #4]
 8015fce:	681b      	ldr	r3, [r3, #0]
 8015fd0:	2b00      	cmp	r3, #0
 8015fd2:	d102      	bne.n	8015fda <sys_mbox_new+0x3a>
    return ERR_MEM;
 8015fd4:	f04f 33ff 	mov.w	r3, #4294967295
 8015fd8:	e000      	b.n	8015fdc <sys_mbox_new+0x3c>

  return ERR_OK;
 8015fda:	2300      	movs	r3, #0
}
 8015fdc:	4618      	mov	r0, r3
 8015fde:	3718      	adds	r7, #24
 8015fe0:	46bd      	mov	sp, r7
 8015fe2:	bd80      	pop	{r7, pc}

08015fe4 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8015fe4:	b580      	push	{r7, lr}
 8015fe6:	b084      	sub	sp, #16
 8015fe8:	af00      	add	r7, sp, #0
 8015fea:	6078      	str	r0, [r7, #4]
 8015fec:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8015fee:	687b      	ldr	r3, [r7, #4]
 8015ff0:	681b      	ldr	r3, [r3, #0]
 8015ff2:	6839      	ldr	r1, [r7, #0]
 8015ff4:	2200      	movs	r2, #0
 8015ff6:	4618      	mov	r0, r3
 8015ff8:	f7f1 f90e 	bl	8007218 <osMessagePut>
 8015ffc:	4603      	mov	r3, r0
 8015ffe:	2b00      	cmp	r3, #0
 8016000:	d102      	bne.n	8016008 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8016002:	2300      	movs	r3, #0
 8016004:	73fb      	strb	r3, [r7, #15]
 8016006:	e001      	b.n	801600c <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8016008:	23ff      	movs	r3, #255	; 0xff
 801600a:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801600c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016010:	4618      	mov	r0, r3
 8016012:	3710      	adds	r7, #16
 8016014:	46bd      	mov	sp, r7
 8016016:	bd80      	pop	{r7, pc}

08016018 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8016018:	b580      	push	{r7, lr}
 801601a:	b08c      	sub	sp, #48	; 0x30
 801601c:	af00      	add	r7, sp, #0
 801601e:	61f8      	str	r0, [r7, #28]
 8016020:	61b9      	str	r1, [r7, #24]
 8016022:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8016024:	f7f0 ff40 	bl	8006ea8 <osKernelSysTick>
 8016028:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801602a:	697b      	ldr	r3, [r7, #20]
 801602c:	2b00      	cmp	r3, #0
 801602e:	d017      	beq.n	8016060 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8016030:	69fb      	ldr	r3, [r7, #28]
 8016032:	6819      	ldr	r1, [r3, #0]
 8016034:	f107 0320 	add.w	r3, r7, #32
 8016038:	697a      	ldr	r2, [r7, #20]
 801603a:	4618      	mov	r0, r3
 801603c:	f7f1 f92c 	bl	8007298 <osMessageGet>

    if(event.status == osEventMessage)
 8016040:	6a3b      	ldr	r3, [r7, #32]
 8016042:	2b10      	cmp	r3, #16
 8016044:	d109      	bne.n	801605a <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8016046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016048:	461a      	mov	r2, r3
 801604a:	69bb      	ldr	r3, [r7, #24]
 801604c:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 801604e:	f7f0 ff2b 	bl	8006ea8 <osKernelSysTick>
 8016052:	4602      	mov	r2, r0
 8016054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016056:	1ad3      	subs	r3, r2, r3
 8016058:	e019      	b.n	801608e <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801605a:	f04f 33ff 	mov.w	r3, #4294967295
 801605e:	e016      	b.n	801608e <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8016060:	69fb      	ldr	r3, [r7, #28]
 8016062:	6819      	ldr	r1, [r3, #0]
 8016064:	463b      	mov	r3, r7
 8016066:	f04f 32ff 	mov.w	r2, #4294967295
 801606a:	4618      	mov	r0, r3
 801606c:	f7f1 f914 	bl	8007298 <osMessageGet>
 8016070:	f107 0320 	add.w	r3, r7, #32
 8016074:	463a      	mov	r2, r7
 8016076:	ca07      	ldmia	r2, {r0, r1, r2}
 8016078:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 801607c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801607e:	461a      	mov	r2, r3
 8016080:	69bb      	ldr	r3, [r7, #24]
 8016082:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8016084:	f7f0 ff10 	bl	8006ea8 <osKernelSysTick>
 8016088:	4602      	mov	r2, r0
 801608a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801608c:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801608e:	4618      	mov	r0, r3
 8016090:	3730      	adds	r7, #48	; 0x30
 8016092:	46bd      	mov	sp, r7
 8016094:	bd80      	pop	{r7, pc}

08016096 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8016096:	b480      	push	{r7}
 8016098:	b083      	sub	sp, #12
 801609a:	af00      	add	r7, sp, #0
 801609c:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801609e:	687b      	ldr	r3, [r7, #4]
 80160a0:	681b      	ldr	r3, [r3, #0]
 80160a2:	2b00      	cmp	r3, #0
 80160a4:	d101      	bne.n	80160aa <sys_mbox_valid+0x14>
    return 0;
 80160a6:	2300      	movs	r3, #0
 80160a8:	e000      	b.n	80160ac <sys_mbox_valid+0x16>
  else
    return 1;
 80160aa:	2301      	movs	r3, #1
}
 80160ac:	4618      	mov	r0, r3
 80160ae:	370c      	adds	r7, #12
 80160b0:	46bd      	mov	sp, r7
 80160b2:	bc80      	pop	{r7}
 80160b4:	4770      	bx	lr
	...

080160b8 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 80160b8:	b580      	push	{r7, lr}
 80160ba:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 80160bc:	4803      	ldr	r0, [pc, #12]	; (80160cc <sys_init+0x14>)
 80160be:	f7f0 ff63 	bl	8006f88 <osMutexCreate>
 80160c2:	4603      	mov	r3, r0
 80160c4:	4a02      	ldr	r2, [pc, #8]	; (80160d0 <sys_init+0x18>)
 80160c6:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 80160c8:	bf00      	nop
 80160ca:	bd80      	pop	{r7, pc}
 80160cc:	0801ac74 	.word	0x0801ac74
 80160d0:	2000bf6c 	.word	0x2000bf6c

080160d4 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 80160d4:	b580      	push	{r7, lr}
 80160d6:	b084      	sub	sp, #16
 80160d8:	af00      	add	r7, sp, #0
 80160da:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 80160dc:	2300      	movs	r3, #0
 80160de:	60bb      	str	r3, [r7, #8]
 80160e0:	2300      	movs	r3, #0
 80160e2:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 80160e4:	f107 0308 	add.w	r3, r7, #8
 80160e8:	4618      	mov	r0, r3
 80160ea:	f7f0 ff4d 	bl	8006f88 <osMutexCreate>
 80160ee:	4602      	mov	r2, r0
 80160f0:	687b      	ldr	r3, [r7, #4]
 80160f2:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 80160f4:	687b      	ldr	r3, [r7, #4]
 80160f6:	681b      	ldr	r3, [r3, #0]
 80160f8:	2b00      	cmp	r3, #0
 80160fa:	d102      	bne.n	8016102 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80160fc:	f04f 33ff 	mov.w	r3, #4294967295
 8016100:	e000      	b.n	8016104 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8016102:	2300      	movs	r3, #0
}
 8016104:	4618      	mov	r0, r3
 8016106:	3710      	adds	r7, #16
 8016108:	46bd      	mov	sp, r7
 801610a:	bd80      	pop	{r7, pc}

0801610c <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801610c:	b580      	push	{r7, lr}
 801610e:	b082      	sub	sp, #8
 8016110:	af00      	add	r7, sp, #0
 8016112:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8016114:	687b      	ldr	r3, [r7, #4]
 8016116:	681b      	ldr	r3, [r3, #0]
 8016118:	f04f 31ff 	mov.w	r1, #4294967295
 801611c:	4618      	mov	r0, r3
 801611e:	f7f0 ff4b 	bl	8006fb8 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8016122:	bf00      	nop
 8016124:	3708      	adds	r7, #8
 8016126:	46bd      	mov	sp, r7
 8016128:	bd80      	pop	{r7, pc}

0801612a <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801612a:	b580      	push	{r7, lr}
 801612c:	b082      	sub	sp, #8
 801612e:	af00      	add	r7, sp, #0
 8016130:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8016132:	687b      	ldr	r3, [r7, #4]
 8016134:	681b      	ldr	r3, [r3, #0]
 8016136:	4618      	mov	r0, r3
 8016138:	f7f0 ff8c 	bl	8007054 <osMutexRelease>
}
 801613c:	bf00      	nop
 801613e:	3708      	adds	r7, #8
 8016140:	46bd      	mov	sp, r7
 8016142:	bd80      	pop	{r7, pc}

08016144 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8016144:	b580      	push	{r7, lr}
 8016146:	b08c      	sub	sp, #48	; 0x30
 8016148:	af00      	add	r7, sp, #0
 801614a:	60f8      	str	r0, [r7, #12]
 801614c:	60b9      	str	r1, [r7, #8]
 801614e:	607a      	str	r2, [r7, #4]
 8016150:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8016152:	f107 0314 	add.w	r3, r7, #20
 8016156:	2200      	movs	r2, #0
 8016158:	601a      	str	r2, [r3, #0]
 801615a:	605a      	str	r2, [r3, #4]
 801615c:	609a      	str	r2, [r3, #8]
 801615e:	60da      	str	r2, [r3, #12]
 8016160:	611a      	str	r2, [r3, #16]
 8016162:	615a      	str	r2, [r3, #20]
 8016164:	619a      	str	r2, [r3, #24]
 8016166:	68fb      	ldr	r3, [r7, #12]
 8016168:	617b      	str	r3, [r7, #20]
 801616a:	68bb      	ldr	r3, [r7, #8]
 801616c:	61bb      	str	r3, [r7, #24]
 801616e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016170:	b21b      	sxth	r3, r3
 8016172:	83bb      	strh	r3, [r7, #28]
 8016174:	683b      	ldr	r3, [r7, #0]
 8016176:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8016178:	f107 0314 	add.w	r3, r7, #20
 801617c:	6879      	ldr	r1, [r7, #4]
 801617e:	4618      	mov	r0, r3
 8016180:	f7f0 fea2 	bl	8006ec8 <osThreadCreate>
 8016184:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8016186:	4618      	mov	r0, r3
 8016188:	3730      	adds	r7, #48	; 0x30
 801618a:	46bd      	mov	sp, r7
 801618c:	bd80      	pop	{r7, pc}
	...

08016190 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8016190:	b580      	push	{r7, lr}
 8016192:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8016194:	4b04      	ldr	r3, [pc, #16]	; (80161a8 <sys_arch_protect+0x18>)
 8016196:	681b      	ldr	r3, [r3, #0]
 8016198:	f04f 31ff 	mov.w	r1, #4294967295
 801619c:	4618      	mov	r0, r3
 801619e:	f7f0 ff0b 	bl	8006fb8 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 80161a2:	2301      	movs	r3, #1
}
 80161a4:	4618      	mov	r0, r3
 80161a6:	bd80      	pop	{r7, pc}
 80161a8:	2000bf6c 	.word	0x2000bf6c

080161ac <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 80161ac:	b580      	push	{r7, lr}
 80161ae:	b082      	sub	sp, #8
 80161b0:	af00      	add	r7, sp, #0
 80161b2:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 80161b4:	4b04      	ldr	r3, [pc, #16]	; (80161c8 <sys_arch_unprotect+0x1c>)
 80161b6:	681b      	ldr	r3, [r3, #0]
 80161b8:	4618      	mov	r0, r3
 80161ba:	f7f0 ff4b 	bl	8007054 <osMutexRelease>
}
 80161be:	bf00      	nop
 80161c0:	3708      	adds	r7, #8
 80161c2:	46bd      	mov	sp, r7
 80161c4:	bd80      	pop	{r7, pc}
 80161c6:	bf00      	nop
 80161c8:	2000bf6c 	.word	0x2000bf6c

080161cc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80161cc:	b580      	push	{r7, lr}
 80161ce:	b082      	sub	sp, #8
 80161d0:	af00      	add	r7, sp, #0
 80161d2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80161d4:	687b      	ldr	r3, [r7, #4]
 80161d6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80161da:	687b      	ldr	r3, [r7, #4]
 80161dc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80161e0:	4619      	mov	r1, r3
 80161e2:	4610      	mov	r0, r2
 80161e4:	f7ef fccc 	bl	8005b80 <USBD_LL_SetupStage>
}
 80161e8:	bf00      	nop
 80161ea:	3708      	adds	r7, #8
 80161ec:	46bd      	mov	sp, r7
 80161ee:	bd80      	pop	{r7, pc}

080161f0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80161f0:	b580      	push	{r7, lr}
 80161f2:	b082      	sub	sp, #8
 80161f4:	af00      	add	r7, sp, #0
 80161f6:	6078      	str	r0, [r7, #4]
 80161f8:	460b      	mov	r3, r1
 80161fa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80161fc:	687b      	ldr	r3, [r7, #4]
 80161fe:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8016202:	78fa      	ldrb	r2, [r7, #3]
 8016204:	6879      	ldr	r1, [r7, #4]
 8016206:	4613      	mov	r3, r2
 8016208:	00db      	lsls	r3, r3, #3
 801620a:	4413      	add	r3, r2
 801620c:	009b      	lsls	r3, r3, #2
 801620e:	440b      	add	r3, r1
 8016210:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8016214:	681a      	ldr	r2, [r3, #0]
 8016216:	78fb      	ldrb	r3, [r7, #3]
 8016218:	4619      	mov	r1, r3
 801621a:	f7ef fd06 	bl	8005c2a <USBD_LL_DataOutStage>
}
 801621e:	bf00      	nop
 8016220:	3708      	adds	r7, #8
 8016222:	46bd      	mov	sp, r7
 8016224:	bd80      	pop	{r7, pc}

08016226 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016226:	b580      	push	{r7, lr}
 8016228:	b082      	sub	sp, #8
 801622a:	af00      	add	r7, sp, #0
 801622c:	6078      	str	r0, [r7, #4]
 801622e:	460b      	mov	r3, r1
 8016230:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8016232:	687b      	ldr	r3, [r7, #4]
 8016234:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8016238:	78fa      	ldrb	r2, [r7, #3]
 801623a:	6879      	ldr	r1, [r7, #4]
 801623c:	4613      	mov	r3, r2
 801623e:	00db      	lsls	r3, r3, #3
 8016240:	4413      	add	r3, r2
 8016242:	009b      	lsls	r3, r3, #2
 8016244:	440b      	add	r3, r1
 8016246:	334c      	adds	r3, #76	; 0x4c
 8016248:	681a      	ldr	r2, [r3, #0]
 801624a:	78fb      	ldrb	r3, [r7, #3]
 801624c:	4619      	mov	r1, r3
 801624e:	f7ef fd9f 	bl	8005d90 <USBD_LL_DataInStage>
}
 8016252:	bf00      	nop
 8016254:	3708      	adds	r7, #8
 8016256:	46bd      	mov	sp, r7
 8016258:	bd80      	pop	{r7, pc}

0801625a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801625a:	b580      	push	{r7, lr}
 801625c:	b082      	sub	sp, #8
 801625e:	af00      	add	r7, sp, #0
 8016260:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8016262:	687b      	ldr	r3, [r7, #4]
 8016264:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016268:	4618      	mov	r0, r3
 801626a:	f7ef fed0 	bl	800600e <USBD_LL_SOF>
}
 801626e:	bf00      	nop
 8016270:	3708      	adds	r7, #8
 8016272:	46bd      	mov	sp, r7
 8016274:	bd80      	pop	{r7, pc}

08016276 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016276:	b580      	push	{r7, lr}
 8016278:	b084      	sub	sp, #16
 801627a:	af00      	add	r7, sp, #0
 801627c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801627e:	2301      	movs	r3, #1
 8016280:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8016282:	687b      	ldr	r3, [r7, #4]
 8016284:	68db      	ldr	r3, [r3, #12]
 8016286:	2b00      	cmp	r3, #0
 8016288:	d102      	bne.n	8016290 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801628a:	2300      	movs	r3, #0
 801628c:	73fb      	strb	r3, [r7, #15]
 801628e:	e008      	b.n	80162a2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8016290:	687b      	ldr	r3, [r7, #4]
 8016292:	68db      	ldr	r3, [r3, #12]
 8016294:	2b02      	cmp	r3, #2
 8016296:	d102      	bne.n	801629e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8016298:	2301      	movs	r3, #1
 801629a:	73fb      	strb	r3, [r7, #15]
 801629c:	e001      	b.n	80162a2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801629e:	f7ea fb03 	bl	80008a8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80162a2:	687b      	ldr	r3, [r7, #4]
 80162a4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80162a8:	7bfa      	ldrb	r2, [r7, #15]
 80162aa:	4611      	mov	r1, r2
 80162ac:	4618      	mov	r0, r3
 80162ae:	f7ef fe73 	bl	8005f98 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80162b2:	687b      	ldr	r3, [r7, #4]
 80162b4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80162b8:	4618      	mov	r0, r3
 80162ba:	f7ef fe1b 	bl	8005ef4 <USBD_LL_Reset>
}
 80162be:	bf00      	nop
 80162c0:	3710      	adds	r7, #16
 80162c2:	46bd      	mov	sp, r7
 80162c4:	bd80      	pop	{r7, pc}
	...

080162c8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80162c8:	b580      	push	{r7, lr}
 80162ca:	b082      	sub	sp, #8
 80162cc:	af00      	add	r7, sp, #0
 80162ce:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80162d0:	687b      	ldr	r3, [r7, #4]
 80162d2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80162d6:	4618      	mov	r0, r3
 80162d8:	f7ef fe6d 	bl	8005fb6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80162dc:	687b      	ldr	r3, [r7, #4]
 80162de:	681b      	ldr	r3, [r3, #0]
 80162e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80162e4:	681b      	ldr	r3, [r3, #0]
 80162e6:	687a      	ldr	r2, [r7, #4]
 80162e8:	6812      	ldr	r2, [r2, #0]
 80162ea:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80162ee:	f043 0301 	orr.w	r3, r3, #1
 80162f2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80162f4:	687b      	ldr	r3, [r7, #4]
 80162f6:	6a1b      	ldr	r3, [r3, #32]
 80162f8:	2b00      	cmp	r3, #0
 80162fa:	d005      	beq.n	8016308 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80162fc:	4b04      	ldr	r3, [pc, #16]	; (8016310 <HAL_PCD_SuspendCallback+0x48>)
 80162fe:	691b      	ldr	r3, [r3, #16]
 8016300:	4a03      	ldr	r2, [pc, #12]	; (8016310 <HAL_PCD_SuspendCallback+0x48>)
 8016302:	f043 0306 	orr.w	r3, r3, #6
 8016306:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8016308:	bf00      	nop
 801630a:	3708      	adds	r7, #8
 801630c:	46bd      	mov	sp, r7
 801630e:	bd80      	pop	{r7, pc}
 8016310:	e000ed00 	.word	0xe000ed00

08016314 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016314:	b580      	push	{r7, lr}
 8016316:	b082      	sub	sp, #8
 8016318:	af00      	add	r7, sp, #0
 801631a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801631c:	687b      	ldr	r3, [r7, #4]
 801631e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016322:	4618      	mov	r0, r3
 8016324:	f7ef fe5c 	bl	8005fe0 <USBD_LL_Resume>
}
 8016328:	bf00      	nop
 801632a:	3708      	adds	r7, #8
 801632c:	46bd      	mov	sp, r7
 801632e:	bd80      	pop	{r7, pc}

08016330 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016330:	b580      	push	{r7, lr}
 8016332:	b082      	sub	sp, #8
 8016334:	af00      	add	r7, sp, #0
 8016336:	6078      	str	r0, [r7, #4]
 8016338:	460b      	mov	r3, r1
 801633a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801633c:	687b      	ldr	r3, [r7, #4]
 801633e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016342:	78fa      	ldrb	r2, [r7, #3]
 8016344:	4611      	mov	r1, r2
 8016346:	4618      	mov	r0, r3
 8016348:	f7ef feb3 	bl	80060b2 <USBD_LL_IsoOUTIncomplete>
}
 801634c:	bf00      	nop
 801634e:	3708      	adds	r7, #8
 8016350:	46bd      	mov	sp, r7
 8016352:	bd80      	pop	{r7, pc}

08016354 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016354:	b580      	push	{r7, lr}
 8016356:	b082      	sub	sp, #8
 8016358:	af00      	add	r7, sp, #0
 801635a:	6078      	str	r0, [r7, #4]
 801635c:	460b      	mov	r3, r1
 801635e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016360:	687b      	ldr	r3, [r7, #4]
 8016362:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016366:	78fa      	ldrb	r2, [r7, #3]
 8016368:	4611      	mov	r1, r2
 801636a:	4618      	mov	r0, r3
 801636c:	f7ef fe6f 	bl	800604e <USBD_LL_IsoINIncomplete>
}
 8016370:	bf00      	nop
 8016372:	3708      	adds	r7, #8
 8016374:	46bd      	mov	sp, r7
 8016376:	bd80      	pop	{r7, pc}

08016378 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016378:	b580      	push	{r7, lr}
 801637a:	b082      	sub	sp, #8
 801637c:	af00      	add	r7, sp, #0
 801637e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8016380:	687b      	ldr	r3, [r7, #4]
 8016382:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016386:	4618      	mov	r0, r3
 8016388:	f7ef fec5 	bl	8006116 <USBD_LL_DevConnected>
}
 801638c:	bf00      	nop
 801638e:	3708      	adds	r7, #8
 8016390:	46bd      	mov	sp, r7
 8016392:	bd80      	pop	{r7, pc}

08016394 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016394:	b580      	push	{r7, lr}
 8016396:	b082      	sub	sp, #8
 8016398:	af00      	add	r7, sp, #0
 801639a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801639c:	687b      	ldr	r3, [r7, #4]
 801639e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80163a2:	4618      	mov	r0, r3
 80163a4:	f7ef fec1 	bl	800612a <USBD_LL_DevDisconnected>
}
 80163a8:	bf00      	nop
 80163aa:	3708      	adds	r7, #8
 80163ac:	46bd      	mov	sp, r7
 80163ae:	bd80      	pop	{r7, pc}

080163b0 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80163b0:	b580      	push	{r7, lr}
 80163b2:	b084      	sub	sp, #16
 80163b4:	af00      	add	r7, sp, #0
 80163b6:	6078      	str	r0, [r7, #4]
 80163b8:	4608      	mov	r0, r1
 80163ba:	4611      	mov	r1, r2
 80163bc:	461a      	mov	r2, r3
 80163be:	4603      	mov	r3, r0
 80163c0:	70fb      	strb	r3, [r7, #3]
 80163c2:	460b      	mov	r3, r1
 80163c4:	70bb      	strb	r3, [r7, #2]
 80163c6:	4613      	mov	r3, r2
 80163c8:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80163ca:	2300      	movs	r3, #0
 80163cc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80163ce:	2300      	movs	r3, #0
 80163d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80163d2:	687b      	ldr	r3, [r7, #4]
 80163d4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80163d8:	78bb      	ldrb	r3, [r7, #2]
 80163da:	883a      	ldrh	r2, [r7, #0]
 80163dc:	78f9      	ldrb	r1, [r7, #3]
 80163de:	f7ec fc25 	bl	8002c2c <HAL_PCD_EP_Open>
 80163e2:	4603      	mov	r3, r0
 80163e4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80163e6:	7bfb      	ldrb	r3, [r7, #15]
 80163e8:	4618      	mov	r0, r3
 80163ea:	f000 f8d1 	bl	8016590 <USBD_Get_USB_Status>
 80163ee:	4603      	mov	r3, r0
 80163f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80163f2:	7bbb      	ldrb	r3, [r7, #14]
}
 80163f4:	4618      	mov	r0, r3
 80163f6:	3710      	adds	r7, #16
 80163f8:	46bd      	mov	sp, r7
 80163fa:	bd80      	pop	{r7, pc}

080163fc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80163fc:	b580      	push	{r7, lr}
 80163fe:	b084      	sub	sp, #16
 8016400:	af00      	add	r7, sp, #0
 8016402:	6078      	str	r0, [r7, #4]
 8016404:	460b      	mov	r3, r1
 8016406:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016408:	2300      	movs	r3, #0
 801640a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801640c:	2300      	movs	r3, #0
 801640e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8016410:	687b      	ldr	r3, [r7, #4]
 8016412:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016416:	78fa      	ldrb	r2, [r7, #3]
 8016418:	4611      	mov	r1, r2
 801641a:	4618      	mov	r0, r3
 801641c:	f7ec fd03 	bl	8002e26 <HAL_PCD_EP_SetStall>
 8016420:	4603      	mov	r3, r0
 8016422:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016424:	7bfb      	ldrb	r3, [r7, #15]
 8016426:	4618      	mov	r0, r3
 8016428:	f000 f8b2 	bl	8016590 <USBD_Get_USB_Status>
 801642c:	4603      	mov	r3, r0
 801642e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016430:	7bbb      	ldrb	r3, [r7, #14]
}
 8016432:	4618      	mov	r0, r3
 8016434:	3710      	adds	r7, #16
 8016436:	46bd      	mov	sp, r7
 8016438:	bd80      	pop	{r7, pc}

0801643a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801643a:	b580      	push	{r7, lr}
 801643c:	b084      	sub	sp, #16
 801643e:	af00      	add	r7, sp, #0
 8016440:	6078      	str	r0, [r7, #4]
 8016442:	460b      	mov	r3, r1
 8016444:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016446:	2300      	movs	r3, #0
 8016448:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801644a:	2300      	movs	r3, #0
 801644c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801644e:	687b      	ldr	r3, [r7, #4]
 8016450:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016454:	78fa      	ldrb	r2, [r7, #3]
 8016456:	4611      	mov	r1, r2
 8016458:	4618      	mov	r0, r3
 801645a:	f7ec fd48 	bl	8002eee <HAL_PCD_EP_ClrStall>
 801645e:	4603      	mov	r3, r0
 8016460:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016462:	7bfb      	ldrb	r3, [r7, #15]
 8016464:	4618      	mov	r0, r3
 8016466:	f000 f893 	bl	8016590 <USBD_Get_USB_Status>
 801646a:	4603      	mov	r3, r0
 801646c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801646e:	7bbb      	ldrb	r3, [r7, #14]
}
 8016470:	4618      	mov	r0, r3
 8016472:	3710      	adds	r7, #16
 8016474:	46bd      	mov	sp, r7
 8016476:	bd80      	pop	{r7, pc}

08016478 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016478:	b480      	push	{r7}
 801647a:	b085      	sub	sp, #20
 801647c:	af00      	add	r7, sp, #0
 801647e:	6078      	str	r0, [r7, #4]
 8016480:	460b      	mov	r3, r1
 8016482:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8016484:	687b      	ldr	r3, [r7, #4]
 8016486:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801648a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801648c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016490:	2b00      	cmp	r3, #0
 8016492:	da0b      	bge.n	80164ac <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8016494:	78fb      	ldrb	r3, [r7, #3]
 8016496:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801649a:	68f9      	ldr	r1, [r7, #12]
 801649c:	4613      	mov	r3, r2
 801649e:	00db      	lsls	r3, r3, #3
 80164a0:	4413      	add	r3, r2
 80164a2:	009b      	lsls	r3, r3, #2
 80164a4:	440b      	add	r3, r1
 80164a6:	333e      	adds	r3, #62	; 0x3e
 80164a8:	781b      	ldrb	r3, [r3, #0]
 80164aa:	e00b      	b.n	80164c4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80164ac:	78fb      	ldrb	r3, [r7, #3]
 80164ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80164b2:	68f9      	ldr	r1, [r7, #12]
 80164b4:	4613      	mov	r3, r2
 80164b6:	00db      	lsls	r3, r3, #3
 80164b8:	4413      	add	r3, r2
 80164ba:	009b      	lsls	r3, r3, #2
 80164bc:	440b      	add	r3, r1
 80164be:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80164c2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80164c4:	4618      	mov	r0, r3
 80164c6:	3714      	adds	r7, #20
 80164c8:	46bd      	mov	sp, r7
 80164ca:	bc80      	pop	{r7}
 80164cc:	4770      	bx	lr

080164ce <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80164ce:	b580      	push	{r7, lr}
 80164d0:	b084      	sub	sp, #16
 80164d2:	af00      	add	r7, sp, #0
 80164d4:	6078      	str	r0, [r7, #4]
 80164d6:	460b      	mov	r3, r1
 80164d8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80164da:	2300      	movs	r3, #0
 80164dc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80164de:	2300      	movs	r3, #0
 80164e0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80164e2:	687b      	ldr	r3, [r7, #4]
 80164e4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80164e8:	78fa      	ldrb	r2, [r7, #3]
 80164ea:	4611      	mov	r1, r2
 80164ec:	4618      	mov	r0, r3
 80164ee:	f7ec fb78 	bl	8002be2 <HAL_PCD_SetAddress>
 80164f2:	4603      	mov	r3, r0
 80164f4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80164f6:	7bfb      	ldrb	r3, [r7, #15]
 80164f8:	4618      	mov	r0, r3
 80164fa:	f000 f849 	bl	8016590 <USBD_Get_USB_Status>
 80164fe:	4603      	mov	r3, r0
 8016500:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016502:	7bbb      	ldrb	r3, [r7, #14]
}
 8016504:	4618      	mov	r0, r3
 8016506:	3710      	adds	r7, #16
 8016508:	46bd      	mov	sp, r7
 801650a:	bd80      	pop	{r7, pc}

0801650c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801650c:	b580      	push	{r7, lr}
 801650e:	b086      	sub	sp, #24
 8016510:	af00      	add	r7, sp, #0
 8016512:	60f8      	str	r0, [r7, #12]
 8016514:	607a      	str	r2, [r7, #4]
 8016516:	603b      	str	r3, [r7, #0]
 8016518:	460b      	mov	r3, r1
 801651a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801651c:	2300      	movs	r3, #0
 801651e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016520:	2300      	movs	r3, #0
 8016522:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8016524:	68fb      	ldr	r3, [r7, #12]
 8016526:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801652a:	7af9      	ldrb	r1, [r7, #11]
 801652c:	683b      	ldr	r3, [r7, #0]
 801652e:	687a      	ldr	r2, [r7, #4]
 8016530:	f7ec fc2f 	bl	8002d92 <HAL_PCD_EP_Transmit>
 8016534:	4603      	mov	r3, r0
 8016536:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016538:	7dfb      	ldrb	r3, [r7, #23]
 801653a:	4618      	mov	r0, r3
 801653c:	f000 f828 	bl	8016590 <USBD_Get_USB_Status>
 8016540:	4603      	mov	r3, r0
 8016542:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016544:	7dbb      	ldrb	r3, [r7, #22]
}
 8016546:	4618      	mov	r0, r3
 8016548:	3718      	adds	r7, #24
 801654a:	46bd      	mov	sp, r7
 801654c:	bd80      	pop	{r7, pc}

0801654e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801654e:	b580      	push	{r7, lr}
 8016550:	b086      	sub	sp, #24
 8016552:	af00      	add	r7, sp, #0
 8016554:	60f8      	str	r0, [r7, #12]
 8016556:	607a      	str	r2, [r7, #4]
 8016558:	603b      	str	r3, [r7, #0]
 801655a:	460b      	mov	r3, r1
 801655c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801655e:	2300      	movs	r3, #0
 8016560:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016562:	2300      	movs	r3, #0
 8016564:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8016566:	68fb      	ldr	r3, [r7, #12]
 8016568:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801656c:	7af9      	ldrb	r1, [r7, #11]
 801656e:	683b      	ldr	r3, [r7, #0]
 8016570:	687a      	ldr	r2, [r7, #4]
 8016572:	f7ec fbc3 	bl	8002cfc <HAL_PCD_EP_Receive>
 8016576:	4603      	mov	r3, r0
 8016578:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801657a:	7dfb      	ldrb	r3, [r7, #23]
 801657c:	4618      	mov	r0, r3
 801657e:	f000 f807 	bl	8016590 <USBD_Get_USB_Status>
 8016582:	4603      	mov	r3, r0
 8016584:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016586:	7dbb      	ldrb	r3, [r7, #22]
}
 8016588:	4618      	mov	r0, r3
 801658a:	3718      	adds	r7, #24
 801658c:	46bd      	mov	sp, r7
 801658e:	bd80      	pop	{r7, pc}

08016590 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8016590:	b480      	push	{r7}
 8016592:	b085      	sub	sp, #20
 8016594:	af00      	add	r7, sp, #0
 8016596:	4603      	mov	r3, r0
 8016598:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801659a:	2300      	movs	r3, #0
 801659c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801659e:	79fb      	ldrb	r3, [r7, #7]
 80165a0:	2b03      	cmp	r3, #3
 80165a2:	d817      	bhi.n	80165d4 <USBD_Get_USB_Status+0x44>
 80165a4:	a201      	add	r2, pc, #4	; (adr r2, 80165ac <USBD_Get_USB_Status+0x1c>)
 80165a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80165aa:	bf00      	nop
 80165ac:	080165bd 	.word	0x080165bd
 80165b0:	080165c3 	.word	0x080165c3
 80165b4:	080165c9 	.word	0x080165c9
 80165b8:	080165cf 	.word	0x080165cf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80165bc:	2300      	movs	r3, #0
 80165be:	73fb      	strb	r3, [r7, #15]
    break;
 80165c0:	e00b      	b.n	80165da <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80165c2:	2303      	movs	r3, #3
 80165c4:	73fb      	strb	r3, [r7, #15]
    break;
 80165c6:	e008      	b.n	80165da <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80165c8:	2301      	movs	r3, #1
 80165ca:	73fb      	strb	r3, [r7, #15]
    break;
 80165cc:	e005      	b.n	80165da <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80165ce:	2303      	movs	r3, #3
 80165d0:	73fb      	strb	r3, [r7, #15]
    break;
 80165d2:	e002      	b.n	80165da <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80165d4:	2303      	movs	r3, #3
 80165d6:	73fb      	strb	r3, [r7, #15]
    break;
 80165d8:	bf00      	nop
  }
  return usb_status;
 80165da:	7bfb      	ldrb	r3, [r7, #15]
}
 80165dc:	4618      	mov	r0, r3
 80165de:	3714      	adds	r7, #20
 80165e0:	46bd      	mov	sp, r7
 80165e2:	bc80      	pop	{r7}
 80165e4:	4770      	bx	lr
 80165e6:	bf00      	nop

080165e8 <__sflush_r>:
 80165e8:	898a      	ldrh	r2, [r1, #12]
 80165ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80165ec:	4605      	mov	r5, r0
 80165ee:	0710      	lsls	r0, r2, #28
 80165f0:	460c      	mov	r4, r1
 80165f2:	d457      	bmi.n	80166a4 <__sflush_r+0xbc>
 80165f4:	684b      	ldr	r3, [r1, #4]
 80165f6:	2b00      	cmp	r3, #0
 80165f8:	dc04      	bgt.n	8016604 <__sflush_r+0x1c>
 80165fa:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80165fc:	2b00      	cmp	r3, #0
 80165fe:	dc01      	bgt.n	8016604 <__sflush_r+0x1c>
 8016600:	2000      	movs	r0, #0
 8016602:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016604:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016606:	2e00      	cmp	r6, #0
 8016608:	d0fa      	beq.n	8016600 <__sflush_r+0x18>
 801660a:	2300      	movs	r3, #0
 801660c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016610:	682f      	ldr	r7, [r5, #0]
 8016612:	602b      	str	r3, [r5, #0]
 8016614:	d032      	beq.n	801667c <__sflush_r+0x94>
 8016616:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8016618:	89a3      	ldrh	r3, [r4, #12]
 801661a:	075a      	lsls	r2, r3, #29
 801661c:	d505      	bpl.n	801662a <__sflush_r+0x42>
 801661e:	6863      	ldr	r3, [r4, #4]
 8016620:	1ac0      	subs	r0, r0, r3
 8016622:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016624:	b10b      	cbz	r3, 801662a <__sflush_r+0x42>
 8016626:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016628:	1ac0      	subs	r0, r0, r3
 801662a:	2300      	movs	r3, #0
 801662c:	4602      	mov	r2, r0
 801662e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016630:	6a21      	ldr	r1, [r4, #32]
 8016632:	4628      	mov	r0, r5
 8016634:	47b0      	blx	r6
 8016636:	1c43      	adds	r3, r0, #1
 8016638:	89a3      	ldrh	r3, [r4, #12]
 801663a:	d106      	bne.n	801664a <__sflush_r+0x62>
 801663c:	6829      	ldr	r1, [r5, #0]
 801663e:	291d      	cmp	r1, #29
 8016640:	d82c      	bhi.n	801669c <__sflush_r+0xb4>
 8016642:	4a29      	ldr	r2, [pc, #164]	; (80166e8 <__sflush_r+0x100>)
 8016644:	40ca      	lsrs	r2, r1
 8016646:	07d6      	lsls	r6, r2, #31
 8016648:	d528      	bpl.n	801669c <__sflush_r+0xb4>
 801664a:	2200      	movs	r2, #0
 801664c:	6062      	str	r2, [r4, #4]
 801664e:	04d9      	lsls	r1, r3, #19
 8016650:	6922      	ldr	r2, [r4, #16]
 8016652:	6022      	str	r2, [r4, #0]
 8016654:	d504      	bpl.n	8016660 <__sflush_r+0x78>
 8016656:	1c42      	adds	r2, r0, #1
 8016658:	d101      	bne.n	801665e <__sflush_r+0x76>
 801665a:	682b      	ldr	r3, [r5, #0]
 801665c:	b903      	cbnz	r3, 8016660 <__sflush_r+0x78>
 801665e:	6560      	str	r0, [r4, #84]	; 0x54
 8016660:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016662:	602f      	str	r7, [r5, #0]
 8016664:	2900      	cmp	r1, #0
 8016666:	d0cb      	beq.n	8016600 <__sflush_r+0x18>
 8016668:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801666c:	4299      	cmp	r1, r3
 801666e:	d002      	beq.n	8016676 <__sflush_r+0x8e>
 8016670:	4628      	mov	r0, r5
 8016672:	f000 fa27 	bl	8016ac4 <_free_r>
 8016676:	2000      	movs	r0, #0
 8016678:	6360      	str	r0, [r4, #52]	; 0x34
 801667a:	e7c2      	b.n	8016602 <__sflush_r+0x1a>
 801667c:	6a21      	ldr	r1, [r4, #32]
 801667e:	2301      	movs	r3, #1
 8016680:	4628      	mov	r0, r5
 8016682:	47b0      	blx	r6
 8016684:	1c41      	adds	r1, r0, #1
 8016686:	d1c7      	bne.n	8016618 <__sflush_r+0x30>
 8016688:	682b      	ldr	r3, [r5, #0]
 801668a:	2b00      	cmp	r3, #0
 801668c:	d0c4      	beq.n	8016618 <__sflush_r+0x30>
 801668e:	2b1d      	cmp	r3, #29
 8016690:	d001      	beq.n	8016696 <__sflush_r+0xae>
 8016692:	2b16      	cmp	r3, #22
 8016694:	d101      	bne.n	801669a <__sflush_r+0xb2>
 8016696:	602f      	str	r7, [r5, #0]
 8016698:	e7b2      	b.n	8016600 <__sflush_r+0x18>
 801669a:	89a3      	ldrh	r3, [r4, #12]
 801669c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80166a0:	81a3      	strh	r3, [r4, #12]
 80166a2:	e7ae      	b.n	8016602 <__sflush_r+0x1a>
 80166a4:	690f      	ldr	r7, [r1, #16]
 80166a6:	2f00      	cmp	r7, #0
 80166a8:	d0aa      	beq.n	8016600 <__sflush_r+0x18>
 80166aa:	0793      	lsls	r3, r2, #30
 80166ac:	680e      	ldr	r6, [r1, #0]
 80166ae:	bf08      	it	eq
 80166b0:	694b      	ldreq	r3, [r1, #20]
 80166b2:	600f      	str	r7, [r1, #0]
 80166b4:	bf18      	it	ne
 80166b6:	2300      	movne	r3, #0
 80166b8:	1bf6      	subs	r6, r6, r7
 80166ba:	608b      	str	r3, [r1, #8]
 80166bc:	2e00      	cmp	r6, #0
 80166be:	dd9f      	ble.n	8016600 <__sflush_r+0x18>
 80166c0:	6a21      	ldr	r1, [r4, #32]
 80166c2:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80166c6:	4633      	mov	r3, r6
 80166c8:	463a      	mov	r2, r7
 80166ca:	4628      	mov	r0, r5
 80166cc:	47e0      	blx	ip
 80166ce:	2800      	cmp	r0, #0
 80166d0:	dc06      	bgt.n	80166e0 <__sflush_r+0xf8>
 80166d2:	89a3      	ldrh	r3, [r4, #12]
 80166d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80166d8:	81a3      	strh	r3, [r4, #12]
 80166da:	f04f 30ff 	mov.w	r0, #4294967295
 80166de:	e790      	b.n	8016602 <__sflush_r+0x1a>
 80166e0:	4407      	add	r7, r0
 80166e2:	1a36      	subs	r6, r6, r0
 80166e4:	e7ea      	b.n	80166bc <__sflush_r+0xd4>
 80166e6:	bf00      	nop
 80166e8:	20400001 	.word	0x20400001

080166ec <_fflush_r>:
 80166ec:	b538      	push	{r3, r4, r5, lr}
 80166ee:	690b      	ldr	r3, [r1, #16]
 80166f0:	4605      	mov	r5, r0
 80166f2:	460c      	mov	r4, r1
 80166f4:	b913      	cbnz	r3, 80166fc <_fflush_r+0x10>
 80166f6:	2500      	movs	r5, #0
 80166f8:	4628      	mov	r0, r5
 80166fa:	bd38      	pop	{r3, r4, r5, pc}
 80166fc:	b118      	cbz	r0, 8016706 <_fflush_r+0x1a>
 80166fe:	6983      	ldr	r3, [r0, #24]
 8016700:	b90b      	cbnz	r3, 8016706 <_fflush_r+0x1a>
 8016702:	f000 f887 	bl	8016814 <__sinit>
 8016706:	4b14      	ldr	r3, [pc, #80]	; (8016758 <_fflush_r+0x6c>)
 8016708:	429c      	cmp	r4, r3
 801670a:	d11b      	bne.n	8016744 <_fflush_r+0x58>
 801670c:	686c      	ldr	r4, [r5, #4]
 801670e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016712:	2b00      	cmp	r3, #0
 8016714:	d0ef      	beq.n	80166f6 <_fflush_r+0xa>
 8016716:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016718:	07d0      	lsls	r0, r2, #31
 801671a:	d404      	bmi.n	8016726 <_fflush_r+0x3a>
 801671c:	0599      	lsls	r1, r3, #22
 801671e:	d402      	bmi.n	8016726 <_fflush_r+0x3a>
 8016720:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016722:	f000 f93a 	bl	801699a <__retarget_lock_acquire_recursive>
 8016726:	4628      	mov	r0, r5
 8016728:	4621      	mov	r1, r4
 801672a:	f7ff ff5d 	bl	80165e8 <__sflush_r>
 801672e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016730:	07da      	lsls	r2, r3, #31
 8016732:	4605      	mov	r5, r0
 8016734:	d4e0      	bmi.n	80166f8 <_fflush_r+0xc>
 8016736:	89a3      	ldrh	r3, [r4, #12]
 8016738:	059b      	lsls	r3, r3, #22
 801673a:	d4dd      	bmi.n	80166f8 <_fflush_r+0xc>
 801673c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801673e:	f000 f92d 	bl	801699c <__retarget_lock_release_recursive>
 8016742:	e7d9      	b.n	80166f8 <_fflush_r+0xc>
 8016744:	4b05      	ldr	r3, [pc, #20]	; (801675c <_fflush_r+0x70>)
 8016746:	429c      	cmp	r4, r3
 8016748:	d101      	bne.n	801674e <_fflush_r+0x62>
 801674a:	68ac      	ldr	r4, [r5, #8]
 801674c:	e7df      	b.n	801670e <_fflush_r+0x22>
 801674e:	4b04      	ldr	r3, [pc, #16]	; (8016760 <_fflush_r+0x74>)
 8016750:	429c      	cmp	r4, r3
 8016752:	bf08      	it	eq
 8016754:	68ec      	ldreq	r4, [r5, #12]
 8016756:	e7da      	b.n	801670e <_fflush_r+0x22>
 8016758:	0801ac9c 	.word	0x0801ac9c
 801675c:	0801acbc 	.word	0x0801acbc
 8016760:	0801ac7c 	.word	0x0801ac7c

08016764 <std>:
 8016764:	2300      	movs	r3, #0
 8016766:	b510      	push	{r4, lr}
 8016768:	4604      	mov	r4, r0
 801676a:	e9c0 3300 	strd	r3, r3, [r0]
 801676e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016772:	6083      	str	r3, [r0, #8]
 8016774:	8181      	strh	r1, [r0, #12]
 8016776:	6643      	str	r3, [r0, #100]	; 0x64
 8016778:	81c2      	strh	r2, [r0, #14]
 801677a:	6183      	str	r3, [r0, #24]
 801677c:	4619      	mov	r1, r3
 801677e:	2208      	movs	r2, #8
 8016780:	305c      	adds	r0, #92	; 0x5c
 8016782:	f000 f997 	bl	8016ab4 <memset>
 8016786:	4b05      	ldr	r3, [pc, #20]	; (801679c <std+0x38>)
 8016788:	6263      	str	r3, [r4, #36]	; 0x24
 801678a:	4b05      	ldr	r3, [pc, #20]	; (80167a0 <std+0x3c>)
 801678c:	62a3      	str	r3, [r4, #40]	; 0x28
 801678e:	4b05      	ldr	r3, [pc, #20]	; (80167a4 <std+0x40>)
 8016790:	62e3      	str	r3, [r4, #44]	; 0x2c
 8016792:	4b05      	ldr	r3, [pc, #20]	; (80167a8 <std+0x44>)
 8016794:	6224      	str	r4, [r4, #32]
 8016796:	6323      	str	r3, [r4, #48]	; 0x30
 8016798:	bd10      	pop	{r4, pc}
 801679a:	bf00      	nop
 801679c:	08016e21 	.word	0x08016e21
 80167a0:	08016e43 	.word	0x08016e43
 80167a4:	08016e7b 	.word	0x08016e7b
 80167a8:	08016e9f 	.word	0x08016e9f

080167ac <_cleanup_r>:
 80167ac:	4901      	ldr	r1, [pc, #4]	; (80167b4 <_cleanup_r+0x8>)
 80167ae:	f000 b8af 	b.w	8016910 <_fwalk_reent>
 80167b2:	bf00      	nop
 80167b4:	080166ed 	.word	0x080166ed

080167b8 <__sfmoreglue>:
 80167b8:	b570      	push	{r4, r5, r6, lr}
 80167ba:	2268      	movs	r2, #104	; 0x68
 80167bc:	1e4d      	subs	r5, r1, #1
 80167be:	4355      	muls	r5, r2
 80167c0:	460e      	mov	r6, r1
 80167c2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80167c6:	f000 f9e7 	bl	8016b98 <_malloc_r>
 80167ca:	4604      	mov	r4, r0
 80167cc:	b140      	cbz	r0, 80167e0 <__sfmoreglue+0x28>
 80167ce:	2100      	movs	r1, #0
 80167d0:	e9c0 1600 	strd	r1, r6, [r0]
 80167d4:	300c      	adds	r0, #12
 80167d6:	60a0      	str	r0, [r4, #8]
 80167d8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80167dc:	f000 f96a 	bl	8016ab4 <memset>
 80167e0:	4620      	mov	r0, r4
 80167e2:	bd70      	pop	{r4, r5, r6, pc}

080167e4 <__sfp_lock_acquire>:
 80167e4:	4801      	ldr	r0, [pc, #4]	; (80167ec <__sfp_lock_acquire+0x8>)
 80167e6:	f000 b8d8 	b.w	801699a <__retarget_lock_acquire_recursive>
 80167ea:	bf00      	nop
 80167ec:	2000c47d 	.word	0x2000c47d

080167f0 <__sfp_lock_release>:
 80167f0:	4801      	ldr	r0, [pc, #4]	; (80167f8 <__sfp_lock_release+0x8>)
 80167f2:	f000 b8d3 	b.w	801699c <__retarget_lock_release_recursive>
 80167f6:	bf00      	nop
 80167f8:	2000c47d 	.word	0x2000c47d

080167fc <__sinit_lock_acquire>:
 80167fc:	4801      	ldr	r0, [pc, #4]	; (8016804 <__sinit_lock_acquire+0x8>)
 80167fe:	f000 b8cc 	b.w	801699a <__retarget_lock_acquire_recursive>
 8016802:	bf00      	nop
 8016804:	2000c47e 	.word	0x2000c47e

08016808 <__sinit_lock_release>:
 8016808:	4801      	ldr	r0, [pc, #4]	; (8016810 <__sinit_lock_release+0x8>)
 801680a:	f000 b8c7 	b.w	801699c <__retarget_lock_release_recursive>
 801680e:	bf00      	nop
 8016810:	2000c47e 	.word	0x2000c47e

08016814 <__sinit>:
 8016814:	b510      	push	{r4, lr}
 8016816:	4604      	mov	r4, r0
 8016818:	f7ff fff0 	bl	80167fc <__sinit_lock_acquire>
 801681c:	69a3      	ldr	r3, [r4, #24]
 801681e:	b11b      	cbz	r3, 8016828 <__sinit+0x14>
 8016820:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016824:	f7ff bff0 	b.w	8016808 <__sinit_lock_release>
 8016828:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801682c:	6523      	str	r3, [r4, #80]	; 0x50
 801682e:	4b13      	ldr	r3, [pc, #76]	; (801687c <__sinit+0x68>)
 8016830:	4a13      	ldr	r2, [pc, #76]	; (8016880 <__sinit+0x6c>)
 8016832:	681b      	ldr	r3, [r3, #0]
 8016834:	62a2      	str	r2, [r4, #40]	; 0x28
 8016836:	42a3      	cmp	r3, r4
 8016838:	bf04      	itt	eq
 801683a:	2301      	moveq	r3, #1
 801683c:	61a3      	streq	r3, [r4, #24]
 801683e:	4620      	mov	r0, r4
 8016840:	f000 f820 	bl	8016884 <__sfp>
 8016844:	6060      	str	r0, [r4, #4]
 8016846:	4620      	mov	r0, r4
 8016848:	f000 f81c 	bl	8016884 <__sfp>
 801684c:	60a0      	str	r0, [r4, #8]
 801684e:	4620      	mov	r0, r4
 8016850:	f000 f818 	bl	8016884 <__sfp>
 8016854:	2200      	movs	r2, #0
 8016856:	60e0      	str	r0, [r4, #12]
 8016858:	2104      	movs	r1, #4
 801685a:	6860      	ldr	r0, [r4, #4]
 801685c:	f7ff ff82 	bl	8016764 <std>
 8016860:	68a0      	ldr	r0, [r4, #8]
 8016862:	2201      	movs	r2, #1
 8016864:	2109      	movs	r1, #9
 8016866:	f7ff ff7d 	bl	8016764 <std>
 801686a:	68e0      	ldr	r0, [r4, #12]
 801686c:	2202      	movs	r2, #2
 801686e:	2112      	movs	r1, #18
 8016870:	f7ff ff78 	bl	8016764 <std>
 8016874:	2301      	movs	r3, #1
 8016876:	61a3      	str	r3, [r4, #24]
 8016878:	e7d2      	b.n	8016820 <__sinit+0xc>
 801687a:	bf00      	nop
 801687c:	0801acdc 	.word	0x0801acdc
 8016880:	080167ad 	.word	0x080167ad

08016884 <__sfp>:
 8016884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016886:	4607      	mov	r7, r0
 8016888:	f7ff ffac 	bl	80167e4 <__sfp_lock_acquire>
 801688c:	4b1e      	ldr	r3, [pc, #120]	; (8016908 <__sfp+0x84>)
 801688e:	681e      	ldr	r6, [r3, #0]
 8016890:	69b3      	ldr	r3, [r6, #24]
 8016892:	b913      	cbnz	r3, 801689a <__sfp+0x16>
 8016894:	4630      	mov	r0, r6
 8016896:	f7ff ffbd 	bl	8016814 <__sinit>
 801689a:	3648      	adds	r6, #72	; 0x48
 801689c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80168a0:	3b01      	subs	r3, #1
 80168a2:	d503      	bpl.n	80168ac <__sfp+0x28>
 80168a4:	6833      	ldr	r3, [r6, #0]
 80168a6:	b30b      	cbz	r3, 80168ec <__sfp+0x68>
 80168a8:	6836      	ldr	r6, [r6, #0]
 80168aa:	e7f7      	b.n	801689c <__sfp+0x18>
 80168ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80168b0:	b9d5      	cbnz	r5, 80168e8 <__sfp+0x64>
 80168b2:	4b16      	ldr	r3, [pc, #88]	; (801690c <__sfp+0x88>)
 80168b4:	60e3      	str	r3, [r4, #12]
 80168b6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80168ba:	6665      	str	r5, [r4, #100]	; 0x64
 80168bc:	f000 f86c 	bl	8016998 <__retarget_lock_init_recursive>
 80168c0:	f7ff ff96 	bl	80167f0 <__sfp_lock_release>
 80168c4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80168c8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80168cc:	6025      	str	r5, [r4, #0]
 80168ce:	61a5      	str	r5, [r4, #24]
 80168d0:	2208      	movs	r2, #8
 80168d2:	4629      	mov	r1, r5
 80168d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80168d8:	f000 f8ec 	bl	8016ab4 <memset>
 80168dc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80168e0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80168e4:	4620      	mov	r0, r4
 80168e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80168e8:	3468      	adds	r4, #104	; 0x68
 80168ea:	e7d9      	b.n	80168a0 <__sfp+0x1c>
 80168ec:	2104      	movs	r1, #4
 80168ee:	4638      	mov	r0, r7
 80168f0:	f7ff ff62 	bl	80167b8 <__sfmoreglue>
 80168f4:	4604      	mov	r4, r0
 80168f6:	6030      	str	r0, [r6, #0]
 80168f8:	2800      	cmp	r0, #0
 80168fa:	d1d5      	bne.n	80168a8 <__sfp+0x24>
 80168fc:	f7ff ff78 	bl	80167f0 <__sfp_lock_release>
 8016900:	230c      	movs	r3, #12
 8016902:	603b      	str	r3, [r7, #0]
 8016904:	e7ee      	b.n	80168e4 <__sfp+0x60>
 8016906:	bf00      	nop
 8016908:	0801acdc 	.word	0x0801acdc
 801690c:	ffff0001 	.word	0xffff0001

08016910 <_fwalk_reent>:
 8016910:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016914:	4606      	mov	r6, r0
 8016916:	4688      	mov	r8, r1
 8016918:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801691c:	2700      	movs	r7, #0
 801691e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016922:	f1b9 0901 	subs.w	r9, r9, #1
 8016926:	d505      	bpl.n	8016934 <_fwalk_reent+0x24>
 8016928:	6824      	ldr	r4, [r4, #0]
 801692a:	2c00      	cmp	r4, #0
 801692c:	d1f7      	bne.n	801691e <_fwalk_reent+0xe>
 801692e:	4638      	mov	r0, r7
 8016930:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016934:	89ab      	ldrh	r3, [r5, #12]
 8016936:	2b01      	cmp	r3, #1
 8016938:	d907      	bls.n	801694a <_fwalk_reent+0x3a>
 801693a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801693e:	3301      	adds	r3, #1
 8016940:	d003      	beq.n	801694a <_fwalk_reent+0x3a>
 8016942:	4629      	mov	r1, r5
 8016944:	4630      	mov	r0, r6
 8016946:	47c0      	blx	r8
 8016948:	4307      	orrs	r7, r0
 801694a:	3568      	adds	r5, #104	; 0x68
 801694c:	e7e9      	b.n	8016922 <_fwalk_reent+0x12>
	...

08016950 <__libc_init_array>:
 8016950:	b570      	push	{r4, r5, r6, lr}
 8016952:	4d0d      	ldr	r5, [pc, #52]	; (8016988 <__libc_init_array+0x38>)
 8016954:	4c0d      	ldr	r4, [pc, #52]	; (801698c <__libc_init_array+0x3c>)
 8016956:	1b64      	subs	r4, r4, r5
 8016958:	10a4      	asrs	r4, r4, #2
 801695a:	2600      	movs	r6, #0
 801695c:	42a6      	cmp	r6, r4
 801695e:	d109      	bne.n	8016974 <__libc_init_array+0x24>
 8016960:	4d0b      	ldr	r5, [pc, #44]	; (8016990 <__libc_init_array+0x40>)
 8016962:	4c0c      	ldr	r4, [pc, #48]	; (8016994 <__libc_init_array+0x44>)
 8016964:	f000 ff3c 	bl	80177e0 <_init>
 8016968:	1b64      	subs	r4, r4, r5
 801696a:	10a4      	asrs	r4, r4, #2
 801696c:	2600      	movs	r6, #0
 801696e:	42a6      	cmp	r6, r4
 8016970:	d105      	bne.n	801697e <__libc_init_array+0x2e>
 8016972:	bd70      	pop	{r4, r5, r6, pc}
 8016974:	f855 3b04 	ldr.w	r3, [r5], #4
 8016978:	4798      	blx	r3
 801697a:	3601      	adds	r6, #1
 801697c:	e7ee      	b.n	801695c <__libc_init_array+0xc>
 801697e:	f855 3b04 	ldr.w	r3, [r5], #4
 8016982:	4798      	blx	r3
 8016984:	3601      	adds	r6, #1
 8016986:	e7f2      	b.n	801696e <__libc_init_array+0x1e>
 8016988:	0801adcc 	.word	0x0801adcc
 801698c:	0801adcc 	.word	0x0801adcc
 8016990:	0801adcc 	.word	0x0801adcc
 8016994:	0801add0 	.word	0x0801add0

08016998 <__retarget_lock_init_recursive>:
 8016998:	4770      	bx	lr

0801699a <__retarget_lock_acquire_recursive>:
 801699a:	4770      	bx	lr

0801699c <__retarget_lock_release_recursive>:
 801699c:	4770      	bx	lr

0801699e <__swhatbuf_r>:
 801699e:	b570      	push	{r4, r5, r6, lr}
 80169a0:	460e      	mov	r6, r1
 80169a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80169a6:	2900      	cmp	r1, #0
 80169a8:	b096      	sub	sp, #88	; 0x58
 80169aa:	4614      	mov	r4, r2
 80169ac:	461d      	mov	r5, r3
 80169ae:	da08      	bge.n	80169c2 <__swhatbuf_r+0x24>
 80169b0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80169b4:	2200      	movs	r2, #0
 80169b6:	602a      	str	r2, [r5, #0]
 80169b8:	061a      	lsls	r2, r3, #24
 80169ba:	d410      	bmi.n	80169de <__swhatbuf_r+0x40>
 80169bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80169c0:	e00e      	b.n	80169e0 <__swhatbuf_r+0x42>
 80169c2:	466a      	mov	r2, sp
 80169c4:	f000 fb82 	bl	80170cc <_fstat_r>
 80169c8:	2800      	cmp	r0, #0
 80169ca:	dbf1      	blt.n	80169b0 <__swhatbuf_r+0x12>
 80169cc:	9a01      	ldr	r2, [sp, #4]
 80169ce:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80169d2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80169d6:	425a      	negs	r2, r3
 80169d8:	415a      	adcs	r2, r3
 80169da:	602a      	str	r2, [r5, #0]
 80169dc:	e7ee      	b.n	80169bc <__swhatbuf_r+0x1e>
 80169de:	2340      	movs	r3, #64	; 0x40
 80169e0:	2000      	movs	r0, #0
 80169e2:	6023      	str	r3, [r4, #0]
 80169e4:	b016      	add	sp, #88	; 0x58
 80169e6:	bd70      	pop	{r4, r5, r6, pc}

080169e8 <__smakebuf_r>:
 80169e8:	898b      	ldrh	r3, [r1, #12]
 80169ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80169ec:	079d      	lsls	r5, r3, #30
 80169ee:	4606      	mov	r6, r0
 80169f0:	460c      	mov	r4, r1
 80169f2:	d507      	bpl.n	8016a04 <__smakebuf_r+0x1c>
 80169f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80169f8:	6023      	str	r3, [r4, #0]
 80169fa:	6123      	str	r3, [r4, #16]
 80169fc:	2301      	movs	r3, #1
 80169fe:	6163      	str	r3, [r4, #20]
 8016a00:	b002      	add	sp, #8
 8016a02:	bd70      	pop	{r4, r5, r6, pc}
 8016a04:	ab01      	add	r3, sp, #4
 8016a06:	466a      	mov	r2, sp
 8016a08:	f7ff ffc9 	bl	801699e <__swhatbuf_r>
 8016a0c:	9900      	ldr	r1, [sp, #0]
 8016a0e:	4605      	mov	r5, r0
 8016a10:	4630      	mov	r0, r6
 8016a12:	f000 f8c1 	bl	8016b98 <_malloc_r>
 8016a16:	b948      	cbnz	r0, 8016a2c <__smakebuf_r+0x44>
 8016a18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016a1c:	059a      	lsls	r2, r3, #22
 8016a1e:	d4ef      	bmi.n	8016a00 <__smakebuf_r+0x18>
 8016a20:	f023 0303 	bic.w	r3, r3, #3
 8016a24:	f043 0302 	orr.w	r3, r3, #2
 8016a28:	81a3      	strh	r3, [r4, #12]
 8016a2a:	e7e3      	b.n	80169f4 <__smakebuf_r+0xc>
 8016a2c:	4b0d      	ldr	r3, [pc, #52]	; (8016a64 <__smakebuf_r+0x7c>)
 8016a2e:	62b3      	str	r3, [r6, #40]	; 0x28
 8016a30:	89a3      	ldrh	r3, [r4, #12]
 8016a32:	6020      	str	r0, [r4, #0]
 8016a34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016a38:	81a3      	strh	r3, [r4, #12]
 8016a3a:	9b00      	ldr	r3, [sp, #0]
 8016a3c:	6163      	str	r3, [r4, #20]
 8016a3e:	9b01      	ldr	r3, [sp, #4]
 8016a40:	6120      	str	r0, [r4, #16]
 8016a42:	b15b      	cbz	r3, 8016a5c <__smakebuf_r+0x74>
 8016a44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016a48:	4630      	mov	r0, r6
 8016a4a:	f000 fb51 	bl	80170f0 <_isatty_r>
 8016a4e:	b128      	cbz	r0, 8016a5c <__smakebuf_r+0x74>
 8016a50:	89a3      	ldrh	r3, [r4, #12]
 8016a52:	f023 0303 	bic.w	r3, r3, #3
 8016a56:	f043 0301 	orr.w	r3, r3, #1
 8016a5a:	81a3      	strh	r3, [r4, #12]
 8016a5c:	89a0      	ldrh	r0, [r4, #12]
 8016a5e:	4305      	orrs	r5, r0
 8016a60:	81a5      	strh	r5, [r4, #12]
 8016a62:	e7cd      	b.n	8016a00 <__smakebuf_r+0x18>
 8016a64:	080167ad 	.word	0x080167ad

08016a68 <malloc>:
 8016a68:	4b02      	ldr	r3, [pc, #8]	; (8016a74 <malloc+0xc>)
 8016a6a:	4601      	mov	r1, r0
 8016a6c:	6818      	ldr	r0, [r3, #0]
 8016a6e:	f000 b893 	b.w	8016b98 <_malloc_r>
 8016a72:	bf00      	nop
 8016a74:	2000001c 	.word	0x2000001c

08016a78 <memcmp>:
 8016a78:	b510      	push	{r4, lr}
 8016a7a:	3901      	subs	r1, #1
 8016a7c:	4402      	add	r2, r0
 8016a7e:	4290      	cmp	r0, r2
 8016a80:	d101      	bne.n	8016a86 <memcmp+0xe>
 8016a82:	2000      	movs	r0, #0
 8016a84:	e005      	b.n	8016a92 <memcmp+0x1a>
 8016a86:	7803      	ldrb	r3, [r0, #0]
 8016a88:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8016a8c:	42a3      	cmp	r3, r4
 8016a8e:	d001      	beq.n	8016a94 <memcmp+0x1c>
 8016a90:	1b18      	subs	r0, r3, r4
 8016a92:	bd10      	pop	{r4, pc}
 8016a94:	3001      	adds	r0, #1
 8016a96:	e7f2      	b.n	8016a7e <memcmp+0x6>

08016a98 <memcpy>:
 8016a98:	440a      	add	r2, r1
 8016a9a:	4291      	cmp	r1, r2
 8016a9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8016aa0:	d100      	bne.n	8016aa4 <memcpy+0xc>
 8016aa2:	4770      	bx	lr
 8016aa4:	b510      	push	{r4, lr}
 8016aa6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016aaa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016aae:	4291      	cmp	r1, r2
 8016ab0:	d1f9      	bne.n	8016aa6 <memcpy+0xe>
 8016ab2:	bd10      	pop	{r4, pc}

08016ab4 <memset>:
 8016ab4:	4402      	add	r2, r0
 8016ab6:	4603      	mov	r3, r0
 8016ab8:	4293      	cmp	r3, r2
 8016aba:	d100      	bne.n	8016abe <memset+0xa>
 8016abc:	4770      	bx	lr
 8016abe:	f803 1b01 	strb.w	r1, [r3], #1
 8016ac2:	e7f9      	b.n	8016ab8 <memset+0x4>

08016ac4 <_free_r>:
 8016ac4:	b538      	push	{r3, r4, r5, lr}
 8016ac6:	4605      	mov	r5, r0
 8016ac8:	2900      	cmp	r1, #0
 8016aca:	d041      	beq.n	8016b50 <_free_r+0x8c>
 8016acc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016ad0:	1f0c      	subs	r4, r1, #4
 8016ad2:	2b00      	cmp	r3, #0
 8016ad4:	bfb8      	it	lt
 8016ad6:	18e4      	addlt	r4, r4, r3
 8016ad8:	f000 fb2c 	bl	8017134 <__malloc_lock>
 8016adc:	4a1d      	ldr	r2, [pc, #116]	; (8016b54 <_free_r+0x90>)
 8016ade:	6813      	ldr	r3, [r2, #0]
 8016ae0:	b933      	cbnz	r3, 8016af0 <_free_r+0x2c>
 8016ae2:	6063      	str	r3, [r4, #4]
 8016ae4:	6014      	str	r4, [r2, #0]
 8016ae6:	4628      	mov	r0, r5
 8016ae8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016aec:	f000 bb28 	b.w	8017140 <__malloc_unlock>
 8016af0:	42a3      	cmp	r3, r4
 8016af2:	d908      	bls.n	8016b06 <_free_r+0x42>
 8016af4:	6820      	ldr	r0, [r4, #0]
 8016af6:	1821      	adds	r1, r4, r0
 8016af8:	428b      	cmp	r3, r1
 8016afa:	bf01      	itttt	eq
 8016afc:	6819      	ldreq	r1, [r3, #0]
 8016afe:	685b      	ldreq	r3, [r3, #4]
 8016b00:	1809      	addeq	r1, r1, r0
 8016b02:	6021      	streq	r1, [r4, #0]
 8016b04:	e7ed      	b.n	8016ae2 <_free_r+0x1e>
 8016b06:	461a      	mov	r2, r3
 8016b08:	685b      	ldr	r3, [r3, #4]
 8016b0a:	b10b      	cbz	r3, 8016b10 <_free_r+0x4c>
 8016b0c:	42a3      	cmp	r3, r4
 8016b0e:	d9fa      	bls.n	8016b06 <_free_r+0x42>
 8016b10:	6811      	ldr	r1, [r2, #0]
 8016b12:	1850      	adds	r0, r2, r1
 8016b14:	42a0      	cmp	r0, r4
 8016b16:	d10b      	bne.n	8016b30 <_free_r+0x6c>
 8016b18:	6820      	ldr	r0, [r4, #0]
 8016b1a:	4401      	add	r1, r0
 8016b1c:	1850      	adds	r0, r2, r1
 8016b1e:	4283      	cmp	r3, r0
 8016b20:	6011      	str	r1, [r2, #0]
 8016b22:	d1e0      	bne.n	8016ae6 <_free_r+0x22>
 8016b24:	6818      	ldr	r0, [r3, #0]
 8016b26:	685b      	ldr	r3, [r3, #4]
 8016b28:	6053      	str	r3, [r2, #4]
 8016b2a:	4401      	add	r1, r0
 8016b2c:	6011      	str	r1, [r2, #0]
 8016b2e:	e7da      	b.n	8016ae6 <_free_r+0x22>
 8016b30:	d902      	bls.n	8016b38 <_free_r+0x74>
 8016b32:	230c      	movs	r3, #12
 8016b34:	602b      	str	r3, [r5, #0]
 8016b36:	e7d6      	b.n	8016ae6 <_free_r+0x22>
 8016b38:	6820      	ldr	r0, [r4, #0]
 8016b3a:	1821      	adds	r1, r4, r0
 8016b3c:	428b      	cmp	r3, r1
 8016b3e:	bf04      	itt	eq
 8016b40:	6819      	ldreq	r1, [r3, #0]
 8016b42:	685b      	ldreq	r3, [r3, #4]
 8016b44:	6063      	str	r3, [r4, #4]
 8016b46:	bf04      	itt	eq
 8016b48:	1809      	addeq	r1, r1, r0
 8016b4a:	6021      	streq	r1, [r4, #0]
 8016b4c:	6054      	str	r4, [r2, #4]
 8016b4e:	e7ca      	b.n	8016ae6 <_free_r+0x22>
 8016b50:	bd38      	pop	{r3, r4, r5, pc}
 8016b52:	bf00      	nop
 8016b54:	2000c480 	.word	0x2000c480

08016b58 <sbrk_aligned>:
 8016b58:	b570      	push	{r4, r5, r6, lr}
 8016b5a:	4e0e      	ldr	r6, [pc, #56]	; (8016b94 <sbrk_aligned+0x3c>)
 8016b5c:	460c      	mov	r4, r1
 8016b5e:	6831      	ldr	r1, [r6, #0]
 8016b60:	4605      	mov	r5, r0
 8016b62:	b911      	cbnz	r1, 8016b6a <sbrk_aligned+0x12>
 8016b64:	f000 f94c 	bl	8016e00 <_sbrk_r>
 8016b68:	6030      	str	r0, [r6, #0]
 8016b6a:	4621      	mov	r1, r4
 8016b6c:	4628      	mov	r0, r5
 8016b6e:	f000 f947 	bl	8016e00 <_sbrk_r>
 8016b72:	1c43      	adds	r3, r0, #1
 8016b74:	d00a      	beq.n	8016b8c <sbrk_aligned+0x34>
 8016b76:	1cc4      	adds	r4, r0, #3
 8016b78:	f024 0403 	bic.w	r4, r4, #3
 8016b7c:	42a0      	cmp	r0, r4
 8016b7e:	d007      	beq.n	8016b90 <sbrk_aligned+0x38>
 8016b80:	1a21      	subs	r1, r4, r0
 8016b82:	4628      	mov	r0, r5
 8016b84:	f000 f93c 	bl	8016e00 <_sbrk_r>
 8016b88:	3001      	adds	r0, #1
 8016b8a:	d101      	bne.n	8016b90 <sbrk_aligned+0x38>
 8016b8c:	f04f 34ff 	mov.w	r4, #4294967295
 8016b90:	4620      	mov	r0, r4
 8016b92:	bd70      	pop	{r4, r5, r6, pc}
 8016b94:	2000c484 	.word	0x2000c484

08016b98 <_malloc_r>:
 8016b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016b9c:	1ccd      	adds	r5, r1, #3
 8016b9e:	f025 0503 	bic.w	r5, r5, #3
 8016ba2:	3508      	adds	r5, #8
 8016ba4:	2d0c      	cmp	r5, #12
 8016ba6:	bf38      	it	cc
 8016ba8:	250c      	movcc	r5, #12
 8016baa:	2d00      	cmp	r5, #0
 8016bac:	4607      	mov	r7, r0
 8016bae:	db01      	blt.n	8016bb4 <_malloc_r+0x1c>
 8016bb0:	42a9      	cmp	r1, r5
 8016bb2:	d905      	bls.n	8016bc0 <_malloc_r+0x28>
 8016bb4:	230c      	movs	r3, #12
 8016bb6:	603b      	str	r3, [r7, #0]
 8016bb8:	2600      	movs	r6, #0
 8016bba:	4630      	mov	r0, r6
 8016bbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016bc0:	4e2e      	ldr	r6, [pc, #184]	; (8016c7c <_malloc_r+0xe4>)
 8016bc2:	f000 fab7 	bl	8017134 <__malloc_lock>
 8016bc6:	6833      	ldr	r3, [r6, #0]
 8016bc8:	461c      	mov	r4, r3
 8016bca:	bb34      	cbnz	r4, 8016c1a <_malloc_r+0x82>
 8016bcc:	4629      	mov	r1, r5
 8016bce:	4638      	mov	r0, r7
 8016bd0:	f7ff ffc2 	bl	8016b58 <sbrk_aligned>
 8016bd4:	1c43      	adds	r3, r0, #1
 8016bd6:	4604      	mov	r4, r0
 8016bd8:	d14d      	bne.n	8016c76 <_malloc_r+0xde>
 8016bda:	6834      	ldr	r4, [r6, #0]
 8016bdc:	4626      	mov	r6, r4
 8016bde:	2e00      	cmp	r6, #0
 8016be0:	d140      	bne.n	8016c64 <_malloc_r+0xcc>
 8016be2:	6823      	ldr	r3, [r4, #0]
 8016be4:	4631      	mov	r1, r6
 8016be6:	4638      	mov	r0, r7
 8016be8:	eb04 0803 	add.w	r8, r4, r3
 8016bec:	f000 f908 	bl	8016e00 <_sbrk_r>
 8016bf0:	4580      	cmp	r8, r0
 8016bf2:	d13a      	bne.n	8016c6a <_malloc_r+0xd2>
 8016bf4:	6821      	ldr	r1, [r4, #0]
 8016bf6:	3503      	adds	r5, #3
 8016bf8:	1a6d      	subs	r5, r5, r1
 8016bfa:	f025 0503 	bic.w	r5, r5, #3
 8016bfe:	3508      	adds	r5, #8
 8016c00:	2d0c      	cmp	r5, #12
 8016c02:	bf38      	it	cc
 8016c04:	250c      	movcc	r5, #12
 8016c06:	4629      	mov	r1, r5
 8016c08:	4638      	mov	r0, r7
 8016c0a:	f7ff ffa5 	bl	8016b58 <sbrk_aligned>
 8016c0e:	3001      	adds	r0, #1
 8016c10:	d02b      	beq.n	8016c6a <_malloc_r+0xd2>
 8016c12:	6823      	ldr	r3, [r4, #0]
 8016c14:	442b      	add	r3, r5
 8016c16:	6023      	str	r3, [r4, #0]
 8016c18:	e00e      	b.n	8016c38 <_malloc_r+0xa0>
 8016c1a:	6822      	ldr	r2, [r4, #0]
 8016c1c:	1b52      	subs	r2, r2, r5
 8016c1e:	d41e      	bmi.n	8016c5e <_malloc_r+0xc6>
 8016c20:	2a0b      	cmp	r2, #11
 8016c22:	d916      	bls.n	8016c52 <_malloc_r+0xba>
 8016c24:	1961      	adds	r1, r4, r5
 8016c26:	42a3      	cmp	r3, r4
 8016c28:	6025      	str	r5, [r4, #0]
 8016c2a:	bf18      	it	ne
 8016c2c:	6059      	strne	r1, [r3, #4]
 8016c2e:	6863      	ldr	r3, [r4, #4]
 8016c30:	bf08      	it	eq
 8016c32:	6031      	streq	r1, [r6, #0]
 8016c34:	5162      	str	r2, [r4, r5]
 8016c36:	604b      	str	r3, [r1, #4]
 8016c38:	4638      	mov	r0, r7
 8016c3a:	f104 060b 	add.w	r6, r4, #11
 8016c3e:	f000 fa7f 	bl	8017140 <__malloc_unlock>
 8016c42:	f026 0607 	bic.w	r6, r6, #7
 8016c46:	1d23      	adds	r3, r4, #4
 8016c48:	1af2      	subs	r2, r6, r3
 8016c4a:	d0b6      	beq.n	8016bba <_malloc_r+0x22>
 8016c4c:	1b9b      	subs	r3, r3, r6
 8016c4e:	50a3      	str	r3, [r4, r2]
 8016c50:	e7b3      	b.n	8016bba <_malloc_r+0x22>
 8016c52:	6862      	ldr	r2, [r4, #4]
 8016c54:	42a3      	cmp	r3, r4
 8016c56:	bf0c      	ite	eq
 8016c58:	6032      	streq	r2, [r6, #0]
 8016c5a:	605a      	strne	r2, [r3, #4]
 8016c5c:	e7ec      	b.n	8016c38 <_malloc_r+0xa0>
 8016c5e:	4623      	mov	r3, r4
 8016c60:	6864      	ldr	r4, [r4, #4]
 8016c62:	e7b2      	b.n	8016bca <_malloc_r+0x32>
 8016c64:	4634      	mov	r4, r6
 8016c66:	6876      	ldr	r6, [r6, #4]
 8016c68:	e7b9      	b.n	8016bde <_malloc_r+0x46>
 8016c6a:	230c      	movs	r3, #12
 8016c6c:	603b      	str	r3, [r7, #0]
 8016c6e:	4638      	mov	r0, r7
 8016c70:	f000 fa66 	bl	8017140 <__malloc_unlock>
 8016c74:	e7a1      	b.n	8016bba <_malloc_r+0x22>
 8016c76:	6025      	str	r5, [r4, #0]
 8016c78:	e7de      	b.n	8016c38 <_malloc_r+0xa0>
 8016c7a:	bf00      	nop
 8016c7c:	2000c480 	.word	0x2000c480

08016c80 <iprintf>:
 8016c80:	b40f      	push	{r0, r1, r2, r3}
 8016c82:	4b0a      	ldr	r3, [pc, #40]	; (8016cac <iprintf+0x2c>)
 8016c84:	b513      	push	{r0, r1, r4, lr}
 8016c86:	681c      	ldr	r4, [r3, #0]
 8016c88:	b124      	cbz	r4, 8016c94 <iprintf+0x14>
 8016c8a:	69a3      	ldr	r3, [r4, #24]
 8016c8c:	b913      	cbnz	r3, 8016c94 <iprintf+0x14>
 8016c8e:	4620      	mov	r0, r4
 8016c90:	f7ff fdc0 	bl	8016814 <__sinit>
 8016c94:	ab05      	add	r3, sp, #20
 8016c96:	9a04      	ldr	r2, [sp, #16]
 8016c98:	68a1      	ldr	r1, [r4, #8]
 8016c9a:	9301      	str	r3, [sp, #4]
 8016c9c:	4620      	mov	r0, r4
 8016c9e:	f000 fa7d 	bl	801719c <_vfiprintf_r>
 8016ca2:	b002      	add	sp, #8
 8016ca4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016ca8:	b004      	add	sp, #16
 8016caa:	4770      	bx	lr
 8016cac:	2000001c 	.word	0x2000001c

08016cb0 <rand>:
 8016cb0:	4b16      	ldr	r3, [pc, #88]	; (8016d0c <rand+0x5c>)
 8016cb2:	b510      	push	{r4, lr}
 8016cb4:	681c      	ldr	r4, [r3, #0]
 8016cb6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8016cb8:	b9b3      	cbnz	r3, 8016ce8 <rand+0x38>
 8016cba:	2018      	movs	r0, #24
 8016cbc:	f7ff fed4 	bl	8016a68 <malloc>
 8016cc0:	4602      	mov	r2, r0
 8016cc2:	63a0      	str	r0, [r4, #56]	; 0x38
 8016cc4:	b920      	cbnz	r0, 8016cd0 <rand+0x20>
 8016cc6:	4b12      	ldr	r3, [pc, #72]	; (8016d10 <rand+0x60>)
 8016cc8:	4812      	ldr	r0, [pc, #72]	; (8016d14 <rand+0x64>)
 8016cca:	214e      	movs	r1, #78	; 0x4e
 8016ccc:	f000 f9be 	bl	801704c <__assert_func>
 8016cd0:	4911      	ldr	r1, [pc, #68]	; (8016d18 <rand+0x68>)
 8016cd2:	4b12      	ldr	r3, [pc, #72]	; (8016d1c <rand+0x6c>)
 8016cd4:	e9c0 1300 	strd	r1, r3, [r0]
 8016cd8:	4b11      	ldr	r3, [pc, #68]	; (8016d20 <rand+0x70>)
 8016cda:	6083      	str	r3, [r0, #8]
 8016cdc:	230b      	movs	r3, #11
 8016cde:	8183      	strh	r3, [r0, #12]
 8016ce0:	2100      	movs	r1, #0
 8016ce2:	2001      	movs	r0, #1
 8016ce4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8016ce8:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8016cea:	4a0e      	ldr	r2, [pc, #56]	; (8016d24 <rand+0x74>)
 8016cec:	6920      	ldr	r0, [r4, #16]
 8016cee:	6963      	ldr	r3, [r4, #20]
 8016cf0:	490d      	ldr	r1, [pc, #52]	; (8016d28 <rand+0x78>)
 8016cf2:	4342      	muls	r2, r0
 8016cf4:	fb01 2203 	mla	r2, r1, r3, r2
 8016cf8:	fba0 0101 	umull	r0, r1, r0, r1
 8016cfc:	1c43      	adds	r3, r0, #1
 8016cfe:	eb42 0001 	adc.w	r0, r2, r1
 8016d02:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8016d06:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8016d0a:	bd10      	pop	{r4, pc}
 8016d0c:	2000001c 	.word	0x2000001c
 8016d10:	0801ace0 	.word	0x0801ace0
 8016d14:	0801acf7 	.word	0x0801acf7
 8016d18:	abcd330e 	.word	0xabcd330e
 8016d1c:	e66d1234 	.word	0xe66d1234
 8016d20:	0005deec 	.word	0x0005deec
 8016d24:	5851f42d 	.word	0x5851f42d
 8016d28:	4c957f2d 	.word	0x4c957f2d

08016d2c <cleanup_glue>:
 8016d2c:	b538      	push	{r3, r4, r5, lr}
 8016d2e:	460c      	mov	r4, r1
 8016d30:	6809      	ldr	r1, [r1, #0]
 8016d32:	4605      	mov	r5, r0
 8016d34:	b109      	cbz	r1, 8016d3a <cleanup_glue+0xe>
 8016d36:	f7ff fff9 	bl	8016d2c <cleanup_glue>
 8016d3a:	4621      	mov	r1, r4
 8016d3c:	4628      	mov	r0, r5
 8016d3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016d42:	f7ff bebf 	b.w	8016ac4 <_free_r>
	...

08016d48 <_reclaim_reent>:
 8016d48:	4b2c      	ldr	r3, [pc, #176]	; (8016dfc <_reclaim_reent+0xb4>)
 8016d4a:	681b      	ldr	r3, [r3, #0]
 8016d4c:	4283      	cmp	r3, r0
 8016d4e:	b570      	push	{r4, r5, r6, lr}
 8016d50:	4604      	mov	r4, r0
 8016d52:	d051      	beq.n	8016df8 <_reclaim_reent+0xb0>
 8016d54:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8016d56:	b143      	cbz	r3, 8016d6a <_reclaim_reent+0x22>
 8016d58:	68db      	ldr	r3, [r3, #12]
 8016d5a:	2b00      	cmp	r3, #0
 8016d5c:	d14a      	bne.n	8016df4 <_reclaim_reent+0xac>
 8016d5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016d60:	6819      	ldr	r1, [r3, #0]
 8016d62:	b111      	cbz	r1, 8016d6a <_reclaim_reent+0x22>
 8016d64:	4620      	mov	r0, r4
 8016d66:	f7ff fead 	bl	8016ac4 <_free_r>
 8016d6a:	6961      	ldr	r1, [r4, #20]
 8016d6c:	b111      	cbz	r1, 8016d74 <_reclaim_reent+0x2c>
 8016d6e:	4620      	mov	r0, r4
 8016d70:	f7ff fea8 	bl	8016ac4 <_free_r>
 8016d74:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8016d76:	b111      	cbz	r1, 8016d7e <_reclaim_reent+0x36>
 8016d78:	4620      	mov	r0, r4
 8016d7a:	f7ff fea3 	bl	8016ac4 <_free_r>
 8016d7e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8016d80:	b111      	cbz	r1, 8016d88 <_reclaim_reent+0x40>
 8016d82:	4620      	mov	r0, r4
 8016d84:	f7ff fe9e 	bl	8016ac4 <_free_r>
 8016d88:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8016d8a:	b111      	cbz	r1, 8016d92 <_reclaim_reent+0x4a>
 8016d8c:	4620      	mov	r0, r4
 8016d8e:	f7ff fe99 	bl	8016ac4 <_free_r>
 8016d92:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8016d94:	b111      	cbz	r1, 8016d9c <_reclaim_reent+0x54>
 8016d96:	4620      	mov	r0, r4
 8016d98:	f7ff fe94 	bl	8016ac4 <_free_r>
 8016d9c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8016d9e:	b111      	cbz	r1, 8016da6 <_reclaim_reent+0x5e>
 8016da0:	4620      	mov	r0, r4
 8016da2:	f7ff fe8f 	bl	8016ac4 <_free_r>
 8016da6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8016da8:	b111      	cbz	r1, 8016db0 <_reclaim_reent+0x68>
 8016daa:	4620      	mov	r0, r4
 8016dac:	f7ff fe8a 	bl	8016ac4 <_free_r>
 8016db0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016db2:	b111      	cbz	r1, 8016dba <_reclaim_reent+0x72>
 8016db4:	4620      	mov	r0, r4
 8016db6:	f7ff fe85 	bl	8016ac4 <_free_r>
 8016dba:	69a3      	ldr	r3, [r4, #24]
 8016dbc:	b1e3      	cbz	r3, 8016df8 <_reclaim_reent+0xb0>
 8016dbe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8016dc0:	4620      	mov	r0, r4
 8016dc2:	4798      	blx	r3
 8016dc4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8016dc6:	b1b9      	cbz	r1, 8016df8 <_reclaim_reent+0xb0>
 8016dc8:	4620      	mov	r0, r4
 8016dca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016dce:	f7ff bfad 	b.w	8016d2c <cleanup_glue>
 8016dd2:	5949      	ldr	r1, [r1, r5]
 8016dd4:	b941      	cbnz	r1, 8016de8 <_reclaim_reent+0xa0>
 8016dd6:	3504      	adds	r5, #4
 8016dd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016dda:	2d80      	cmp	r5, #128	; 0x80
 8016ddc:	68d9      	ldr	r1, [r3, #12]
 8016dde:	d1f8      	bne.n	8016dd2 <_reclaim_reent+0x8a>
 8016de0:	4620      	mov	r0, r4
 8016de2:	f7ff fe6f 	bl	8016ac4 <_free_r>
 8016de6:	e7ba      	b.n	8016d5e <_reclaim_reent+0x16>
 8016de8:	680e      	ldr	r6, [r1, #0]
 8016dea:	4620      	mov	r0, r4
 8016dec:	f7ff fe6a 	bl	8016ac4 <_free_r>
 8016df0:	4631      	mov	r1, r6
 8016df2:	e7ef      	b.n	8016dd4 <_reclaim_reent+0x8c>
 8016df4:	2500      	movs	r5, #0
 8016df6:	e7ef      	b.n	8016dd8 <_reclaim_reent+0x90>
 8016df8:	bd70      	pop	{r4, r5, r6, pc}
 8016dfa:	bf00      	nop
 8016dfc:	2000001c 	.word	0x2000001c

08016e00 <_sbrk_r>:
 8016e00:	b538      	push	{r3, r4, r5, lr}
 8016e02:	4d06      	ldr	r5, [pc, #24]	; (8016e1c <_sbrk_r+0x1c>)
 8016e04:	2300      	movs	r3, #0
 8016e06:	4604      	mov	r4, r0
 8016e08:	4608      	mov	r0, r1
 8016e0a:	602b      	str	r3, [r5, #0]
 8016e0c:	f7e9 fe92 	bl	8000b34 <_sbrk>
 8016e10:	1c43      	adds	r3, r0, #1
 8016e12:	d102      	bne.n	8016e1a <_sbrk_r+0x1a>
 8016e14:	682b      	ldr	r3, [r5, #0]
 8016e16:	b103      	cbz	r3, 8016e1a <_sbrk_r+0x1a>
 8016e18:	6023      	str	r3, [r4, #0]
 8016e1a:	bd38      	pop	{r3, r4, r5, pc}
 8016e1c:	2000c488 	.word	0x2000c488

08016e20 <__sread>:
 8016e20:	b510      	push	{r4, lr}
 8016e22:	460c      	mov	r4, r1
 8016e24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016e28:	f000 fc7c 	bl	8017724 <_read_r>
 8016e2c:	2800      	cmp	r0, #0
 8016e2e:	bfab      	itete	ge
 8016e30:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016e32:	89a3      	ldrhlt	r3, [r4, #12]
 8016e34:	181b      	addge	r3, r3, r0
 8016e36:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8016e3a:	bfac      	ite	ge
 8016e3c:	6563      	strge	r3, [r4, #84]	; 0x54
 8016e3e:	81a3      	strhlt	r3, [r4, #12]
 8016e40:	bd10      	pop	{r4, pc}

08016e42 <__swrite>:
 8016e42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e46:	461f      	mov	r7, r3
 8016e48:	898b      	ldrh	r3, [r1, #12]
 8016e4a:	05db      	lsls	r3, r3, #23
 8016e4c:	4605      	mov	r5, r0
 8016e4e:	460c      	mov	r4, r1
 8016e50:	4616      	mov	r6, r2
 8016e52:	d505      	bpl.n	8016e60 <__swrite+0x1e>
 8016e54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016e58:	2302      	movs	r3, #2
 8016e5a:	2200      	movs	r2, #0
 8016e5c:	f000 f958 	bl	8017110 <_lseek_r>
 8016e60:	89a3      	ldrh	r3, [r4, #12]
 8016e62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016e66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016e6a:	81a3      	strh	r3, [r4, #12]
 8016e6c:	4632      	mov	r2, r6
 8016e6e:	463b      	mov	r3, r7
 8016e70:	4628      	mov	r0, r5
 8016e72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016e76:	f000 b869 	b.w	8016f4c <_write_r>

08016e7a <__sseek>:
 8016e7a:	b510      	push	{r4, lr}
 8016e7c:	460c      	mov	r4, r1
 8016e7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016e82:	f000 f945 	bl	8017110 <_lseek_r>
 8016e86:	1c43      	adds	r3, r0, #1
 8016e88:	89a3      	ldrh	r3, [r4, #12]
 8016e8a:	bf15      	itete	ne
 8016e8c:	6560      	strne	r0, [r4, #84]	; 0x54
 8016e8e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8016e92:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8016e96:	81a3      	strheq	r3, [r4, #12]
 8016e98:	bf18      	it	ne
 8016e9a:	81a3      	strhne	r3, [r4, #12]
 8016e9c:	bd10      	pop	{r4, pc}

08016e9e <__sclose>:
 8016e9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016ea2:	f000 b8f1 	b.w	8017088 <_close_r>
	...

08016ea8 <__swbuf_r>:
 8016ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016eaa:	460e      	mov	r6, r1
 8016eac:	4614      	mov	r4, r2
 8016eae:	4605      	mov	r5, r0
 8016eb0:	b118      	cbz	r0, 8016eba <__swbuf_r+0x12>
 8016eb2:	6983      	ldr	r3, [r0, #24]
 8016eb4:	b90b      	cbnz	r3, 8016eba <__swbuf_r+0x12>
 8016eb6:	f7ff fcad 	bl	8016814 <__sinit>
 8016eba:	4b21      	ldr	r3, [pc, #132]	; (8016f40 <__swbuf_r+0x98>)
 8016ebc:	429c      	cmp	r4, r3
 8016ebe:	d12b      	bne.n	8016f18 <__swbuf_r+0x70>
 8016ec0:	686c      	ldr	r4, [r5, #4]
 8016ec2:	69a3      	ldr	r3, [r4, #24]
 8016ec4:	60a3      	str	r3, [r4, #8]
 8016ec6:	89a3      	ldrh	r3, [r4, #12]
 8016ec8:	071a      	lsls	r2, r3, #28
 8016eca:	d52f      	bpl.n	8016f2c <__swbuf_r+0x84>
 8016ecc:	6923      	ldr	r3, [r4, #16]
 8016ece:	b36b      	cbz	r3, 8016f2c <__swbuf_r+0x84>
 8016ed0:	6923      	ldr	r3, [r4, #16]
 8016ed2:	6820      	ldr	r0, [r4, #0]
 8016ed4:	1ac0      	subs	r0, r0, r3
 8016ed6:	6963      	ldr	r3, [r4, #20]
 8016ed8:	b2f6      	uxtb	r6, r6
 8016eda:	4283      	cmp	r3, r0
 8016edc:	4637      	mov	r7, r6
 8016ede:	dc04      	bgt.n	8016eea <__swbuf_r+0x42>
 8016ee0:	4621      	mov	r1, r4
 8016ee2:	4628      	mov	r0, r5
 8016ee4:	f7ff fc02 	bl	80166ec <_fflush_r>
 8016ee8:	bb30      	cbnz	r0, 8016f38 <__swbuf_r+0x90>
 8016eea:	68a3      	ldr	r3, [r4, #8]
 8016eec:	3b01      	subs	r3, #1
 8016eee:	60a3      	str	r3, [r4, #8]
 8016ef0:	6823      	ldr	r3, [r4, #0]
 8016ef2:	1c5a      	adds	r2, r3, #1
 8016ef4:	6022      	str	r2, [r4, #0]
 8016ef6:	701e      	strb	r6, [r3, #0]
 8016ef8:	6963      	ldr	r3, [r4, #20]
 8016efa:	3001      	adds	r0, #1
 8016efc:	4283      	cmp	r3, r0
 8016efe:	d004      	beq.n	8016f0a <__swbuf_r+0x62>
 8016f00:	89a3      	ldrh	r3, [r4, #12]
 8016f02:	07db      	lsls	r3, r3, #31
 8016f04:	d506      	bpl.n	8016f14 <__swbuf_r+0x6c>
 8016f06:	2e0a      	cmp	r6, #10
 8016f08:	d104      	bne.n	8016f14 <__swbuf_r+0x6c>
 8016f0a:	4621      	mov	r1, r4
 8016f0c:	4628      	mov	r0, r5
 8016f0e:	f7ff fbed 	bl	80166ec <_fflush_r>
 8016f12:	b988      	cbnz	r0, 8016f38 <__swbuf_r+0x90>
 8016f14:	4638      	mov	r0, r7
 8016f16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016f18:	4b0a      	ldr	r3, [pc, #40]	; (8016f44 <__swbuf_r+0x9c>)
 8016f1a:	429c      	cmp	r4, r3
 8016f1c:	d101      	bne.n	8016f22 <__swbuf_r+0x7a>
 8016f1e:	68ac      	ldr	r4, [r5, #8]
 8016f20:	e7cf      	b.n	8016ec2 <__swbuf_r+0x1a>
 8016f22:	4b09      	ldr	r3, [pc, #36]	; (8016f48 <__swbuf_r+0xa0>)
 8016f24:	429c      	cmp	r4, r3
 8016f26:	bf08      	it	eq
 8016f28:	68ec      	ldreq	r4, [r5, #12]
 8016f2a:	e7ca      	b.n	8016ec2 <__swbuf_r+0x1a>
 8016f2c:	4621      	mov	r1, r4
 8016f2e:	4628      	mov	r0, r5
 8016f30:	f000 f81e 	bl	8016f70 <__swsetup_r>
 8016f34:	2800      	cmp	r0, #0
 8016f36:	d0cb      	beq.n	8016ed0 <__swbuf_r+0x28>
 8016f38:	f04f 37ff 	mov.w	r7, #4294967295
 8016f3c:	e7ea      	b.n	8016f14 <__swbuf_r+0x6c>
 8016f3e:	bf00      	nop
 8016f40:	0801ac9c 	.word	0x0801ac9c
 8016f44:	0801acbc 	.word	0x0801acbc
 8016f48:	0801ac7c 	.word	0x0801ac7c

08016f4c <_write_r>:
 8016f4c:	b538      	push	{r3, r4, r5, lr}
 8016f4e:	4d07      	ldr	r5, [pc, #28]	; (8016f6c <_write_r+0x20>)
 8016f50:	4604      	mov	r4, r0
 8016f52:	4608      	mov	r0, r1
 8016f54:	4611      	mov	r1, r2
 8016f56:	2200      	movs	r2, #0
 8016f58:	602a      	str	r2, [r5, #0]
 8016f5a:	461a      	mov	r2, r3
 8016f5c:	f7e9 fd9d 	bl	8000a9a <_write>
 8016f60:	1c43      	adds	r3, r0, #1
 8016f62:	d102      	bne.n	8016f6a <_write_r+0x1e>
 8016f64:	682b      	ldr	r3, [r5, #0]
 8016f66:	b103      	cbz	r3, 8016f6a <_write_r+0x1e>
 8016f68:	6023      	str	r3, [r4, #0]
 8016f6a:	bd38      	pop	{r3, r4, r5, pc}
 8016f6c:	2000c488 	.word	0x2000c488

08016f70 <__swsetup_r>:
 8016f70:	4b32      	ldr	r3, [pc, #200]	; (801703c <__swsetup_r+0xcc>)
 8016f72:	b570      	push	{r4, r5, r6, lr}
 8016f74:	681d      	ldr	r5, [r3, #0]
 8016f76:	4606      	mov	r6, r0
 8016f78:	460c      	mov	r4, r1
 8016f7a:	b125      	cbz	r5, 8016f86 <__swsetup_r+0x16>
 8016f7c:	69ab      	ldr	r3, [r5, #24]
 8016f7e:	b913      	cbnz	r3, 8016f86 <__swsetup_r+0x16>
 8016f80:	4628      	mov	r0, r5
 8016f82:	f7ff fc47 	bl	8016814 <__sinit>
 8016f86:	4b2e      	ldr	r3, [pc, #184]	; (8017040 <__swsetup_r+0xd0>)
 8016f88:	429c      	cmp	r4, r3
 8016f8a:	d10f      	bne.n	8016fac <__swsetup_r+0x3c>
 8016f8c:	686c      	ldr	r4, [r5, #4]
 8016f8e:	89a3      	ldrh	r3, [r4, #12]
 8016f90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016f94:	0719      	lsls	r1, r3, #28
 8016f96:	d42c      	bmi.n	8016ff2 <__swsetup_r+0x82>
 8016f98:	06dd      	lsls	r5, r3, #27
 8016f9a:	d411      	bmi.n	8016fc0 <__swsetup_r+0x50>
 8016f9c:	2309      	movs	r3, #9
 8016f9e:	6033      	str	r3, [r6, #0]
 8016fa0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8016fa4:	81a3      	strh	r3, [r4, #12]
 8016fa6:	f04f 30ff 	mov.w	r0, #4294967295
 8016faa:	e03e      	b.n	801702a <__swsetup_r+0xba>
 8016fac:	4b25      	ldr	r3, [pc, #148]	; (8017044 <__swsetup_r+0xd4>)
 8016fae:	429c      	cmp	r4, r3
 8016fb0:	d101      	bne.n	8016fb6 <__swsetup_r+0x46>
 8016fb2:	68ac      	ldr	r4, [r5, #8]
 8016fb4:	e7eb      	b.n	8016f8e <__swsetup_r+0x1e>
 8016fb6:	4b24      	ldr	r3, [pc, #144]	; (8017048 <__swsetup_r+0xd8>)
 8016fb8:	429c      	cmp	r4, r3
 8016fba:	bf08      	it	eq
 8016fbc:	68ec      	ldreq	r4, [r5, #12]
 8016fbe:	e7e6      	b.n	8016f8e <__swsetup_r+0x1e>
 8016fc0:	0758      	lsls	r0, r3, #29
 8016fc2:	d512      	bpl.n	8016fea <__swsetup_r+0x7a>
 8016fc4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016fc6:	b141      	cbz	r1, 8016fda <__swsetup_r+0x6a>
 8016fc8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016fcc:	4299      	cmp	r1, r3
 8016fce:	d002      	beq.n	8016fd6 <__swsetup_r+0x66>
 8016fd0:	4630      	mov	r0, r6
 8016fd2:	f7ff fd77 	bl	8016ac4 <_free_r>
 8016fd6:	2300      	movs	r3, #0
 8016fd8:	6363      	str	r3, [r4, #52]	; 0x34
 8016fda:	89a3      	ldrh	r3, [r4, #12]
 8016fdc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8016fe0:	81a3      	strh	r3, [r4, #12]
 8016fe2:	2300      	movs	r3, #0
 8016fe4:	6063      	str	r3, [r4, #4]
 8016fe6:	6923      	ldr	r3, [r4, #16]
 8016fe8:	6023      	str	r3, [r4, #0]
 8016fea:	89a3      	ldrh	r3, [r4, #12]
 8016fec:	f043 0308 	orr.w	r3, r3, #8
 8016ff0:	81a3      	strh	r3, [r4, #12]
 8016ff2:	6923      	ldr	r3, [r4, #16]
 8016ff4:	b94b      	cbnz	r3, 801700a <__swsetup_r+0x9a>
 8016ff6:	89a3      	ldrh	r3, [r4, #12]
 8016ff8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016ffc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017000:	d003      	beq.n	801700a <__swsetup_r+0x9a>
 8017002:	4621      	mov	r1, r4
 8017004:	4630      	mov	r0, r6
 8017006:	f7ff fcef 	bl	80169e8 <__smakebuf_r>
 801700a:	89a0      	ldrh	r0, [r4, #12]
 801700c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017010:	f010 0301 	ands.w	r3, r0, #1
 8017014:	d00a      	beq.n	801702c <__swsetup_r+0xbc>
 8017016:	2300      	movs	r3, #0
 8017018:	60a3      	str	r3, [r4, #8]
 801701a:	6963      	ldr	r3, [r4, #20]
 801701c:	425b      	negs	r3, r3
 801701e:	61a3      	str	r3, [r4, #24]
 8017020:	6923      	ldr	r3, [r4, #16]
 8017022:	b943      	cbnz	r3, 8017036 <__swsetup_r+0xc6>
 8017024:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8017028:	d1ba      	bne.n	8016fa0 <__swsetup_r+0x30>
 801702a:	bd70      	pop	{r4, r5, r6, pc}
 801702c:	0781      	lsls	r1, r0, #30
 801702e:	bf58      	it	pl
 8017030:	6963      	ldrpl	r3, [r4, #20]
 8017032:	60a3      	str	r3, [r4, #8]
 8017034:	e7f4      	b.n	8017020 <__swsetup_r+0xb0>
 8017036:	2000      	movs	r0, #0
 8017038:	e7f7      	b.n	801702a <__swsetup_r+0xba>
 801703a:	bf00      	nop
 801703c:	2000001c 	.word	0x2000001c
 8017040:	0801ac9c 	.word	0x0801ac9c
 8017044:	0801acbc 	.word	0x0801acbc
 8017048:	0801ac7c 	.word	0x0801ac7c

0801704c <__assert_func>:
 801704c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801704e:	4614      	mov	r4, r2
 8017050:	461a      	mov	r2, r3
 8017052:	4b09      	ldr	r3, [pc, #36]	; (8017078 <__assert_func+0x2c>)
 8017054:	681b      	ldr	r3, [r3, #0]
 8017056:	4605      	mov	r5, r0
 8017058:	68d8      	ldr	r0, [r3, #12]
 801705a:	b14c      	cbz	r4, 8017070 <__assert_func+0x24>
 801705c:	4b07      	ldr	r3, [pc, #28]	; (801707c <__assert_func+0x30>)
 801705e:	9100      	str	r1, [sp, #0]
 8017060:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017064:	4906      	ldr	r1, [pc, #24]	; (8017080 <__assert_func+0x34>)
 8017066:	462b      	mov	r3, r5
 8017068:	f000 f81e 	bl	80170a8 <fiprintf>
 801706c:	f000 fb6c 	bl	8017748 <abort>
 8017070:	4b04      	ldr	r3, [pc, #16]	; (8017084 <__assert_func+0x38>)
 8017072:	461c      	mov	r4, r3
 8017074:	e7f3      	b.n	801705e <__assert_func+0x12>
 8017076:	bf00      	nop
 8017078:	2000001c 	.word	0x2000001c
 801707c:	0801ad52 	.word	0x0801ad52
 8017080:	0801ad5f 	.word	0x0801ad5f
 8017084:	0801ad8d 	.word	0x0801ad8d

08017088 <_close_r>:
 8017088:	b538      	push	{r3, r4, r5, lr}
 801708a:	4d06      	ldr	r5, [pc, #24]	; (80170a4 <_close_r+0x1c>)
 801708c:	2300      	movs	r3, #0
 801708e:	4604      	mov	r4, r0
 8017090:	4608      	mov	r0, r1
 8017092:	602b      	str	r3, [r5, #0]
 8017094:	f7e9 fd1d 	bl	8000ad2 <_close>
 8017098:	1c43      	adds	r3, r0, #1
 801709a:	d102      	bne.n	80170a2 <_close_r+0x1a>
 801709c:	682b      	ldr	r3, [r5, #0]
 801709e:	b103      	cbz	r3, 80170a2 <_close_r+0x1a>
 80170a0:	6023      	str	r3, [r4, #0]
 80170a2:	bd38      	pop	{r3, r4, r5, pc}
 80170a4:	2000c488 	.word	0x2000c488

080170a8 <fiprintf>:
 80170a8:	b40e      	push	{r1, r2, r3}
 80170aa:	b503      	push	{r0, r1, lr}
 80170ac:	4601      	mov	r1, r0
 80170ae:	ab03      	add	r3, sp, #12
 80170b0:	4805      	ldr	r0, [pc, #20]	; (80170c8 <fiprintf+0x20>)
 80170b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80170b6:	6800      	ldr	r0, [r0, #0]
 80170b8:	9301      	str	r3, [sp, #4]
 80170ba:	f000 f86f 	bl	801719c <_vfiprintf_r>
 80170be:	b002      	add	sp, #8
 80170c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80170c4:	b003      	add	sp, #12
 80170c6:	4770      	bx	lr
 80170c8:	2000001c 	.word	0x2000001c

080170cc <_fstat_r>:
 80170cc:	b538      	push	{r3, r4, r5, lr}
 80170ce:	4d07      	ldr	r5, [pc, #28]	; (80170ec <_fstat_r+0x20>)
 80170d0:	2300      	movs	r3, #0
 80170d2:	4604      	mov	r4, r0
 80170d4:	4608      	mov	r0, r1
 80170d6:	4611      	mov	r1, r2
 80170d8:	602b      	str	r3, [r5, #0]
 80170da:	f7e9 fd05 	bl	8000ae8 <_fstat>
 80170de:	1c43      	adds	r3, r0, #1
 80170e0:	d102      	bne.n	80170e8 <_fstat_r+0x1c>
 80170e2:	682b      	ldr	r3, [r5, #0]
 80170e4:	b103      	cbz	r3, 80170e8 <_fstat_r+0x1c>
 80170e6:	6023      	str	r3, [r4, #0]
 80170e8:	bd38      	pop	{r3, r4, r5, pc}
 80170ea:	bf00      	nop
 80170ec:	2000c488 	.word	0x2000c488

080170f0 <_isatty_r>:
 80170f0:	b538      	push	{r3, r4, r5, lr}
 80170f2:	4d06      	ldr	r5, [pc, #24]	; (801710c <_isatty_r+0x1c>)
 80170f4:	2300      	movs	r3, #0
 80170f6:	4604      	mov	r4, r0
 80170f8:	4608      	mov	r0, r1
 80170fa:	602b      	str	r3, [r5, #0]
 80170fc:	f7e9 fd03 	bl	8000b06 <_isatty>
 8017100:	1c43      	adds	r3, r0, #1
 8017102:	d102      	bne.n	801710a <_isatty_r+0x1a>
 8017104:	682b      	ldr	r3, [r5, #0]
 8017106:	b103      	cbz	r3, 801710a <_isatty_r+0x1a>
 8017108:	6023      	str	r3, [r4, #0]
 801710a:	bd38      	pop	{r3, r4, r5, pc}
 801710c:	2000c488 	.word	0x2000c488

08017110 <_lseek_r>:
 8017110:	b538      	push	{r3, r4, r5, lr}
 8017112:	4d07      	ldr	r5, [pc, #28]	; (8017130 <_lseek_r+0x20>)
 8017114:	4604      	mov	r4, r0
 8017116:	4608      	mov	r0, r1
 8017118:	4611      	mov	r1, r2
 801711a:	2200      	movs	r2, #0
 801711c:	602a      	str	r2, [r5, #0]
 801711e:	461a      	mov	r2, r3
 8017120:	f7e9 fcfb 	bl	8000b1a <_lseek>
 8017124:	1c43      	adds	r3, r0, #1
 8017126:	d102      	bne.n	801712e <_lseek_r+0x1e>
 8017128:	682b      	ldr	r3, [r5, #0]
 801712a:	b103      	cbz	r3, 801712e <_lseek_r+0x1e>
 801712c:	6023      	str	r3, [r4, #0]
 801712e:	bd38      	pop	{r3, r4, r5, pc}
 8017130:	2000c488 	.word	0x2000c488

08017134 <__malloc_lock>:
 8017134:	4801      	ldr	r0, [pc, #4]	; (801713c <__malloc_lock+0x8>)
 8017136:	f7ff bc30 	b.w	801699a <__retarget_lock_acquire_recursive>
 801713a:	bf00      	nop
 801713c:	2000c47c 	.word	0x2000c47c

08017140 <__malloc_unlock>:
 8017140:	4801      	ldr	r0, [pc, #4]	; (8017148 <__malloc_unlock+0x8>)
 8017142:	f7ff bc2b 	b.w	801699c <__retarget_lock_release_recursive>
 8017146:	bf00      	nop
 8017148:	2000c47c 	.word	0x2000c47c

0801714c <__sfputc_r>:
 801714c:	6893      	ldr	r3, [r2, #8]
 801714e:	3b01      	subs	r3, #1
 8017150:	2b00      	cmp	r3, #0
 8017152:	b410      	push	{r4}
 8017154:	6093      	str	r3, [r2, #8]
 8017156:	da07      	bge.n	8017168 <__sfputc_r+0x1c>
 8017158:	6994      	ldr	r4, [r2, #24]
 801715a:	42a3      	cmp	r3, r4
 801715c:	db01      	blt.n	8017162 <__sfputc_r+0x16>
 801715e:	290a      	cmp	r1, #10
 8017160:	d102      	bne.n	8017168 <__sfputc_r+0x1c>
 8017162:	bc10      	pop	{r4}
 8017164:	f7ff bea0 	b.w	8016ea8 <__swbuf_r>
 8017168:	6813      	ldr	r3, [r2, #0]
 801716a:	1c58      	adds	r0, r3, #1
 801716c:	6010      	str	r0, [r2, #0]
 801716e:	7019      	strb	r1, [r3, #0]
 8017170:	4608      	mov	r0, r1
 8017172:	bc10      	pop	{r4}
 8017174:	4770      	bx	lr

08017176 <__sfputs_r>:
 8017176:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017178:	4606      	mov	r6, r0
 801717a:	460f      	mov	r7, r1
 801717c:	4614      	mov	r4, r2
 801717e:	18d5      	adds	r5, r2, r3
 8017180:	42ac      	cmp	r4, r5
 8017182:	d101      	bne.n	8017188 <__sfputs_r+0x12>
 8017184:	2000      	movs	r0, #0
 8017186:	e007      	b.n	8017198 <__sfputs_r+0x22>
 8017188:	f814 1b01 	ldrb.w	r1, [r4], #1
 801718c:	463a      	mov	r2, r7
 801718e:	4630      	mov	r0, r6
 8017190:	f7ff ffdc 	bl	801714c <__sfputc_r>
 8017194:	1c43      	adds	r3, r0, #1
 8017196:	d1f3      	bne.n	8017180 <__sfputs_r+0xa>
 8017198:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801719c <_vfiprintf_r>:
 801719c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80171a0:	460d      	mov	r5, r1
 80171a2:	b09d      	sub	sp, #116	; 0x74
 80171a4:	4614      	mov	r4, r2
 80171a6:	4698      	mov	r8, r3
 80171a8:	4606      	mov	r6, r0
 80171aa:	b118      	cbz	r0, 80171b4 <_vfiprintf_r+0x18>
 80171ac:	6983      	ldr	r3, [r0, #24]
 80171ae:	b90b      	cbnz	r3, 80171b4 <_vfiprintf_r+0x18>
 80171b0:	f7ff fb30 	bl	8016814 <__sinit>
 80171b4:	4b89      	ldr	r3, [pc, #548]	; (80173dc <_vfiprintf_r+0x240>)
 80171b6:	429d      	cmp	r5, r3
 80171b8:	d11b      	bne.n	80171f2 <_vfiprintf_r+0x56>
 80171ba:	6875      	ldr	r5, [r6, #4]
 80171bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80171be:	07d9      	lsls	r1, r3, #31
 80171c0:	d405      	bmi.n	80171ce <_vfiprintf_r+0x32>
 80171c2:	89ab      	ldrh	r3, [r5, #12]
 80171c4:	059a      	lsls	r2, r3, #22
 80171c6:	d402      	bmi.n	80171ce <_vfiprintf_r+0x32>
 80171c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80171ca:	f7ff fbe6 	bl	801699a <__retarget_lock_acquire_recursive>
 80171ce:	89ab      	ldrh	r3, [r5, #12]
 80171d0:	071b      	lsls	r3, r3, #28
 80171d2:	d501      	bpl.n	80171d8 <_vfiprintf_r+0x3c>
 80171d4:	692b      	ldr	r3, [r5, #16]
 80171d6:	b9eb      	cbnz	r3, 8017214 <_vfiprintf_r+0x78>
 80171d8:	4629      	mov	r1, r5
 80171da:	4630      	mov	r0, r6
 80171dc:	f7ff fec8 	bl	8016f70 <__swsetup_r>
 80171e0:	b1c0      	cbz	r0, 8017214 <_vfiprintf_r+0x78>
 80171e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80171e4:	07dc      	lsls	r4, r3, #31
 80171e6:	d50e      	bpl.n	8017206 <_vfiprintf_r+0x6a>
 80171e8:	f04f 30ff 	mov.w	r0, #4294967295
 80171ec:	b01d      	add	sp, #116	; 0x74
 80171ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80171f2:	4b7b      	ldr	r3, [pc, #492]	; (80173e0 <_vfiprintf_r+0x244>)
 80171f4:	429d      	cmp	r5, r3
 80171f6:	d101      	bne.n	80171fc <_vfiprintf_r+0x60>
 80171f8:	68b5      	ldr	r5, [r6, #8]
 80171fa:	e7df      	b.n	80171bc <_vfiprintf_r+0x20>
 80171fc:	4b79      	ldr	r3, [pc, #484]	; (80173e4 <_vfiprintf_r+0x248>)
 80171fe:	429d      	cmp	r5, r3
 8017200:	bf08      	it	eq
 8017202:	68f5      	ldreq	r5, [r6, #12]
 8017204:	e7da      	b.n	80171bc <_vfiprintf_r+0x20>
 8017206:	89ab      	ldrh	r3, [r5, #12]
 8017208:	0598      	lsls	r0, r3, #22
 801720a:	d4ed      	bmi.n	80171e8 <_vfiprintf_r+0x4c>
 801720c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801720e:	f7ff fbc5 	bl	801699c <__retarget_lock_release_recursive>
 8017212:	e7e9      	b.n	80171e8 <_vfiprintf_r+0x4c>
 8017214:	2300      	movs	r3, #0
 8017216:	9309      	str	r3, [sp, #36]	; 0x24
 8017218:	2320      	movs	r3, #32
 801721a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801721e:	f8cd 800c 	str.w	r8, [sp, #12]
 8017222:	2330      	movs	r3, #48	; 0x30
 8017224:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80173e8 <_vfiprintf_r+0x24c>
 8017228:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801722c:	f04f 0901 	mov.w	r9, #1
 8017230:	4623      	mov	r3, r4
 8017232:	469a      	mov	sl, r3
 8017234:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017238:	b10a      	cbz	r2, 801723e <_vfiprintf_r+0xa2>
 801723a:	2a25      	cmp	r2, #37	; 0x25
 801723c:	d1f9      	bne.n	8017232 <_vfiprintf_r+0x96>
 801723e:	ebba 0b04 	subs.w	fp, sl, r4
 8017242:	d00b      	beq.n	801725c <_vfiprintf_r+0xc0>
 8017244:	465b      	mov	r3, fp
 8017246:	4622      	mov	r2, r4
 8017248:	4629      	mov	r1, r5
 801724a:	4630      	mov	r0, r6
 801724c:	f7ff ff93 	bl	8017176 <__sfputs_r>
 8017250:	3001      	adds	r0, #1
 8017252:	f000 80aa 	beq.w	80173aa <_vfiprintf_r+0x20e>
 8017256:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017258:	445a      	add	r2, fp
 801725a:	9209      	str	r2, [sp, #36]	; 0x24
 801725c:	f89a 3000 	ldrb.w	r3, [sl]
 8017260:	2b00      	cmp	r3, #0
 8017262:	f000 80a2 	beq.w	80173aa <_vfiprintf_r+0x20e>
 8017266:	2300      	movs	r3, #0
 8017268:	f04f 32ff 	mov.w	r2, #4294967295
 801726c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017270:	f10a 0a01 	add.w	sl, sl, #1
 8017274:	9304      	str	r3, [sp, #16]
 8017276:	9307      	str	r3, [sp, #28]
 8017278:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801727c:	931a      	str	r3, [sp, #104]	; 0x68
 801727e:	4654      	mov	r4, sl
 8017280:	2205      	movs	r2, #5
 8017282:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017286:	4858      	ldr	r0, [pc, #352]	; (80173e8 <_vfiprintf_r+0x24c>)
 8017288:	f7e8 ffa2 	bl	80001d0 <memchr>
 801728c:	9a04      	ldr	r2, [sp, #16]
 801728e:	b9d8      	cbnz	r0, 80172c8 <_vfiprintf_r+0x12c>
 8017290:	06d1      	lsls	r1, r2, #27
 8017292:	bf44      	itt	mi
 8017294:	2320      	movmi	r3, #32
 8017296:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801729a:	0713      	lsls	r3, r2, #28
 801729c:	bf44      	itt	mi
 801729e:	232b      	movmi	r3, #43	; 0x2b
 80172a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80172a4:	f89a 3000 	ldrb.w	r3, [sl]
 80172a8:	2b2a      	cmp	r3, #42	; 0x2a
 80172aa:	d015      	beq.n	80172d8 <_vfiprintf_r+0x13c>
 80172ac:	9a07      	ldr	r2, [sp, #28]
 80172ae:	4654      	mov	r4, sl
 80172b0:	2000      	movs	r0, #0
 80172b2:	f04f 0c0a 	mov.w	ip, #10
 80172b6:	4621      	mov	r1, r4
 80172b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80172bc:	3b30      	subs	r3, #48	; 0x30
 80172be:	2b09      	cmp	r3, #9
 80172c0:	d94e      	bls.n	8017360 <_vfiprintf_r+0x1c4>
 80172c2:	b1b0      	cbz	r0, 80172f2 <_vfiprintf_r+0x156>
 80172c4:	9207      	str	r2, [sp, #28]
 80172c6:	e014      	b.n	80172f2 <_vfiprintf_r+0x156>
 80172c8:	eba0 0308 	sub.w	r3, r0, r8
 80172cc:	fa09 f303 	lsl.w	r3, r9, r3
 80172d0:	4313      	orrs	r3, r2
 80172d2:	9304      	str	r3, [sp, #16]
 80172d4:	46a2      	mov	sl, r4
 80172d6:	e7d2      	b.n	801727e <_vfiprintf_r+0xe2>
 80172d8:	9b03      	ldr	r3, [sp, #12]
 80172da:	1d19      	adds	r1, r3, #4
 80172dc:	681b      	ldr	r3, [r3, #0]
 80172de:	9103      	str	r1, [sp, #12]
 80172e0:	2b00      	cmp	r3, #0
 80172e2:	bfbb      	ittet	lt
 80172e4:	425b      	neglt	r3, r3
 80172e6:	f042 0202 	orrlt.w	r2, r2, #2
 80172ea:	9307      	strge	r3, [sp, #28]
 80172ec:	9307      	strlt	r3, [sp, #28]
 80172ee:	bfb8      	it	lt
 80172f0:	9204      	strlt	r2, [sp, #16]
 80172f2:	7823      	ldrb	r3, [r4, #0]
 80172f4:	2b2e      	cmp	r3, #46	; 0x2e
 80172f6:	d10c      	bne.n	8017312 <_vfiprintf_r+0x176>
 80172f8:	7863      	ldrb	r3, [r4, #1]
 80172fa:	2b2a      	cmp	r3, #42	; 0x2a
 80172fc:	d135      	bne.n	801736a <_vfiprintf_r+0x1ce>
 80172fe:	9b03      	ldr	r3, [sp, #12]
 8017300:	1d1a      	adds	r2, r3, #4
 8017302:	681b      	ldr	r3, [r3, #0]
 8017304:	9203      	str	r2, [sp, #12]
 8017306:	2b00      	cmp	r3, #0
 8017308:	bfb8      	it	lt
 801730a:	f04f 33ff 	movlt.w	r3, #4294967295
 801730e:	3402      	adds	r4, #2
 8017310:	9305      	str	r3, [sp, #20]
 8017312:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80173ec <_vfiprintf_r+0x250>
 8017316:	7821      	ldrb	r1, [r4, #0]
 8017318:	2203      	movs	r2, #3
 801731a:	4650      	mov	r0, sl
 801731c:	f7e8 ff58 	bl	80001d0 <memchr>
 8017320:	b140      	cbz	r0, 8017334 <_vfiprintf_r+0x198>
 8017322:	2340      	movs	r3, #64	; 0x40
 8017324:	eba0 000a 	sub.w	r0, r0, sl
 8017328:	fa03 f000 	lsl.w	r0, r3, r0
 801732c:	9b04      	ldr	r3, [sp, #16]
 801732e:	4303      	orrs	r3, r0
 8017330:	3401      	adds	r4, #1
 8017332:	9304      	str	r3, [sp, #16]
 8017334:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017338:	482d      	ldr	r0, [pc, #180]	; (80173f0 <_vfiprintf_r+0x254>)
 801733a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801733e:	2206      	movs	r2, #6
 8017340:	f7e8 ff46 	bl	80001d0 <memchr>
 8017344:	2800      	cmp	r0, #0
 8017346:	d03f      	beq.n	80173c8 <_vfiprintf_r+0x22c>
 8017348:	4b2a      	ldr	r3, [pc, #168]	; (80173f4 <_vfiprintf_r+0x258>)
 801734a:	bb1b      	cbnz	r3, 8017394 <_vfiprintf_r+0x1f8>
 801734c:	9b03      	ldr	r3, [sp, #12]
 801734e:	3307      	adds	r3, #7
 8017350:	f023 0307 	bic.w	r3, r3, #7
 8017354:	3308      	adds	r3, #8
 8017356:	9303      	str	r3, [sp, #12]
 8017358:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801735a:	443b      	add	r3, r7
 801735c:	9309      	str	r3, [sp, #36]	; 0x24
 801735e:	e767      	b.n	8017230 <_vfiprintf_r+0x94>
 8017360:	fb0c 3202 	mla	r2, ip, r2, r3
 8017364:	460c      	mov	r4, r1
 8017366:	2001      	movs	r0, #1
 8017368:	e7a5      	b.n	80172b6 <_vfiprintf_r+0x11a>
 801736a:	2300      	movs	r3, #0
 801736c:	3401      	adds	r4, #1
 801736e:	9305      	str	r3, [sp, #20]
 8017370:	4619      	mov	r1, r3
 8017372:	f04f 0c0a 	mov.w	ip, #10
 8017376:	4620      	mov	r0, r4
 8017378:	f810 2b01 	ldrb.w	r2, [r0], #1
 801737c:	3a30      	subs	r2, #48	; 0x30
 801737e:	2a09      	cmp	r2, #9
 8017380:	d903      	bls.n	801738a <_vfiprintf_r+0x1ee>
 8017382:	2b00      	cmp	r3, #0
 8017384:	d0c5      	beq.n	8017312 <_vfiprintf_r+0x176>
 8017386:	9105      	str	r1, [sp, #20]
 8017388:	e7c3      	b.n	8017312 <_vfiprintf_r+0x176>
 801738a:	fb0c 2101 	mla	r1, ip, r1, r2
 801738e:	4604      	mov	r4, r0
 8017390:	2301      	movs	r3, #1
 8017392:	e7f0      	b.n	8017376 <_vfiprintf_r+0x1da>
 8017394:	ab03      	add	r3, sp, #12
 8017396:	9300      	str	r3, [sp, #0]
 8017398:	462a      	mov	r2, r5
 801739a:	4b17      	ldr	r3, [pc, #92]	; (80173f8 <_vfiprintf_r+0x25c>)
 801739c:	a904      	add	r1, sp, #16
 801739e:	4630      	mov	r0, r6
 80173a0:	f3af 8000 	nop.w
 80173a4:	4607      	mov	r7, r0
 80173a6:	1c78      	adds	r0, r7, #1
 80173a8:	d1d6      	bne.n	8017358 <_vfiprintf_r+0x1bc>
 80173aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80173ac:	07d9      	lsls	r1, r3, #31
 80173ae:	d405      	bmi.n	80173bc <_vfiprintf_r+0x220>
 80173b0:	89ab      	ldrh	r3, [r5, #12]
 80173b2:	059a      	lsls	r2, r3, #22
 80173b4:	d402      	bmi.n	80173bc <_vfiprintf_r+0x220>
 80173b6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80173b8:	f7ff faf0 	bl	801699c <__retarget_lock_release_recursive>
 80173bc:	89ab      	ldrh	r3, [r5, #12]
 80173be:	065b      	lsls	r3, r3, #25
 80173c0:	f53f af12 	bmi.w	80171e8 <_vfiprintf_r+0x4c>
 80173c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80173c6:	e711      	b.n	80171ec <_vfiprintf_r+0x50>
 80173c8:	ab03      	add	r3, sp, #12
 80173ca:	9300      	str	r3, [sp, #0]
 80173cc:	462a      	mov	r2, r5
 80173ce:	4b0a      	ldr	r3, [pc, #40]	; (80173f8 <_vfiprintf_r+0x25c>)
 80173d0:	a904      	add	r1, sp, #16
 80173d2:	4630      	mov	r0, r6
 80173d4:	f000 f880 	bl	80174d8 <_printf_i>
 80173d8:	e7e4      	b.n	80173a4 <_vfiprintf_r+0x208>
 80173da:	bf00      	nop
 80173dc:	0801ac9c 	.word	0x0801ac9c
 80173e0:	0801acbc 	.word	0x0801acbc
 80173e4:	0801ac7c 	.word	0x0801ac7c
 80173e8:	0801ad8e 	.word	0x0801ad8e
 80173ec:	0801ad94 	.word	0x0801ad94
 80173f0:	0801ad98 	.word	0x0801ad98
 80173f4:	00000000 	.word	0x00000000
 80173f8:	08017177 	.word	0x08017177

080173fc <_printf_common>:
 80173fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017400:	4616      	mov	r6, r2
 8017402:	4699      	mov	r9, r3
 8017404:	688a      	ldr	r2, [r1, #8]
 8017406:	690b      	ldr	r3, [r1, #16]
 8017408:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801740c:	4293      	cmp	r3, r2
 801740e:	bfb8      	it	lt
 8017410:	4613      	movlt	r3, r2
 8017412:	6033      	str	r3, [r6, #0]
 8017414:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017418:	4607      	mov	r7, r0
 801741a:	460c      	mov	r4, r1
 801741c:	b10a      	cbz	r2, 8017422 <_printf_common+0x26>
 801741e:	3301      	adds	r3, #1
 8017420:	6033      	str	r3, [r6, #0]
 8017422:	6823      	ldr	r3, [r4, #0]
 8017424:	0699      	lsls	r1, r3, #26
 8017426:	bf42      	ittt	mi
 8017428:	6833      	ldrmi	r3, [r6, #0]
 801742a:	3302      	addmi	r3, #2
 801742c:	6033      	strmi	r3, [r6, #0]
 801742e:	6825      	ldr	r5, [r4, #0]
 8017430:	f015 0506 	ands.w	r5, r5, #6
 8017434:	d106      	bne.n	8017444 <_printf_common+0x48>
 8017436:	f104 0a19 	add.w	sl, r4, #25
 801743a:	68e3      	ldr	r3, [r4, #12]
 801743c:	6832      	ldr	r2, [r6, #0]
 801743e:	1a9b      	subs	r3, r3, r2
 8017440:	42ab      	cmp	r3, r5
 8017442:	dc26      	bgt.n	8017492 <_printf_common+0x96>
 8017444:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8017448:	1e13      	subs	r3, r2, #0
 801744a:	6822      	ldr	r2, [r4, #0]
 801744c:	bf18      	it	ne
 801744e:	2301      	movne	r3, #1
 8017450:	0692      	lsls	r2, r2, #26
 8017452:	d42b      	bmi.n	80174ac <_printf_common+0xb0>
 8017454:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017458:	4649      	mov	r1, r9
 801745a:	4638      	mov	r0, r7
 801745c:	47c0      	blx	r8
 801745e:	3001      	adds	r0, #1
 8017460:	d01e      	beq.n	80174a0 <_printf_common+0xa4>
 8017462:	6823      	ldr	r3, [r4, #0]
 8017464:	68e5      	ldr	r5, [r4, #12]
 8017466:	6832      	ldr	r2, [r6, #0]
 8017468:	f003 0306 	and.w	r3, r3, #6
 801746c:	2b04      	cmp	r3, #4
 801746e:	bf08      	it	eq
 8017470:	1aad      	subeq	r5, r5, r2
 8017472:	68a3      	ldr	r3, [r4, #8]
 8017474:	6922      	ldr	r2, [r4, #16]
 8017476:	bf0c      	ite	eq
 8017478:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801747c:	2500      	movne	r5, #0
 801747e:	4293      	cmp	r3, r2
 8017480:	bfc4      	itt	gt
 8017482:	1a9b      	subgt	r3, r3, r2
 8017484:	18ed      	addgt	r5, r5, r3
 8017486:	2600      	movs	r6, #0
 8017488:	341a      	adds	r4, #26
 801748a:	42b5      	cmp	r5, r6
 801748c:	d11a      	bne.n	80174c4 <_printf_common+0xc8>
 801748e:	2000      	movs	r0, #0
 8017490:	e008      	b.n	80174a4 <_printf_common+0xa8>
 8017492:	2301      	movs	r3, #1
 8017494:	4652      	mov	r2, sl
 8017496:	4649      	mov	r1, r9
 8017498:	4638      	mov	r0, r7
 801749a:	47c0      	blx	r8
 801749c:	3001      	adds	r0, #1
 801749e:	d103      	bne.n	80174a8 <_printf_common+0xac>
 80174a0:	f04f 30ff 	mov.w	r0, #4294967295
 80174a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80174a8:	3501      	adds	r5, #1
 80174aa:	e7c6      	b.n	801743a <_printf_common+0x3e>
 80174ac:	18e1      	adds	r1, r4, r3
 80174ae:	1c5a      	adds	r2, r3, #1
 80174b0:	2030      	movs	r0, #48	; 0x30
 80174b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80174b6:	4422      	add	r2, r4
 80174b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80174bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80174c0:	3302      	adds	r3, #2
 80174c2:	e7c7      	b.n	8017454 <_printf_common+0x58>
 80174c4:	2301      	movs	r3, #1
 80174c6:	4622      	mov	r2, r4
 80174c8:	4649      	mov	r1, r9
 80174ca:	4638      	mov	r0, r7
 80174cc:	47c0      	blx	r8
 80174ce:	3001      	adds	r0, #1
 80174d0:	d0e6      	beq.n	80174a0 <_printf_common+0xa4>
 80174d2:	3601      	adds	r6, #1
 80174d4:	e7d9      	b.n	801748a <_printf_common+0x8e>
	...

080174d8 <_printf_i>:
 80174d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80174dc:	7e0f      	ldrb	r7, [r1, #24]
 80174de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80174e0:	2f78      	cmp	r7, #120	; 0x78
 80174e2:	4691      	mov	r9, r2
 80174e4:	4680      	mov	r8, r0
 80174e6:	460c      	mov	r4, r1
 80174e8:	469a      	mov	sl, r3
 80174ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80174ee:	d807      	bhi.n	8017500 <_printf_i+0x28>
 80174f0:	2f62      	cmp	r7, #98	; 0x62
 80174f2:	d80a      	bhi.n	801750a <_printf_i+0x32>
 80174f4:	2f00      	cmp	r7, #0
 80174f6:	f000 80d8 	beq.w	80176aa <_printf_i+0x1d2>
 80174fa:	2f58      	cmp	r7, #88	; 0x58
 80174fc:	f000 80a3 	beq.w	8017646 <_printf_i+0x16e>
 8017500:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017504:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8017508:	e03a      	b.n	8017580 <_printf_i+0xa8>
 801750a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801750e:	2b15      	cmp	r3, #21
 8017510:	d8f6      	bhi.n	8017500 <_printf_i+0x28>
 8017512:	a101      	add	r1, pc, #4	; (adr r1, 8017518 <_printf_i+0x40>)
 8017514:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017518:	08017571 	.word	0x08017571
 801751c:	08017585 	.word	0x08017585
 8017520:	08017501 	.word	0x08017501
 8017524:	08017501 	.word	0x08017501
 8017528:	08017501 	.word	0x08017501
 801752c:	08017501 	.word	0x08017501
 8017530:	08017585 	.word	0x08017585
 8017534:	08017501 	.word	0x08017501
 8017538:	08017501 	.word	0x08017501
 801753c:	08017501 	.word	0x08017501
 8017540:	08017501 	.word	0x08017501
 8017544:	08017691 	.word	0x08017691
 8017548:	080175b5 	.word	0x080175b5
 801754c:	08017673 	.word	0x08017673
 8017550:	08017501 	.word	0x08017501
 8017554:	08017501 	.word	0x08017501
 8017558:	080176b3 	.word	0x080176b3
 801755c:	08017501 	.word	0x08017501
 8017560:	080175b5 	.word	0x080175b5
 8017564:	08017501 	.word	0x08017501
 8017568:	08017501 	.word	0x08017501
 801756c:	0801767b 	.word	0x0801767b
 8017570:	682b      	ldr	r3, [r5, #0]
 8017572:	1d1a      	adds	r2, r3, #4
 8017574:	681b      	ldr	r3, [r3, #0]
 8017576:	602a      	str	r2, [r5, #0]
 8017578:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801757c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017580:	2301      	movs	r3, #1
 8017582:	e0a3      	b.n	80176cc <_printf_i+0x1f4>
 8017584:	6820      	ldr	r0, [r4, #0]
 8017586:	6829      	ldr	r1, [r5, #0]
 8017588:	0606      	lsls	r6, r0, #24
 801758a:	f101 0304 	add.w	r3, r1, #4
 801758e:	d50a      	bpl.n	80175a6 <_printf_i+0xce>
 8017590:	680e      	ldr	r6, [r1, #0]
 8017592:	602b      	str	r3, [r5, #0]
 8017594:	2e00      	cmp	r6, #0
 8017596:	da03      	bge.n	80175a0 <_printf_i+0xc8>
 8017598:	232d      	movs	r3, #45	; 0x2d
 801759a:	4276      	negs	r6, r6
 801759c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80175a0:	485e      	ldr	r0, [pc, #376]	; (801771c <_printf_i+0x244>)
 80175a2:	230a      	movs	r3, #10
 80175a4:	e019      	b.n	80175da <_printf_i+0x102>
 80175a6:	680e      	ldr	r6, [r1, #0]
 80175a8:	602b      	str	r3, [r5, #0]
 80175aa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80175ae:	bf18      	it	ne
 80175b0:	b236      	sxthne	r6, r6
 80175b2:	e7ef      	b.n	8017594 <_printf_i+0xbc>
 80175b4:	682b      	ldr	r3, [r5, #0]
 80175b6:	6820      	ldr	r0, [r4, #0]
 80175b8:	1d19      	adds	r1, r3, #4
 80175ba:	6029      	str	r1, [r5, #0]
 80175bc:	0601      	lsls	r1, r0, #24
 80175be:	d501      	bpl.n	80175c4 <_printf_i+0xec>
 80175c0:	681e      	ldr	r6, [r3, #0]
 80175c2:	e002      	b.n	80175ca <_printf_i+0xf2>
 80175c4:	0646      	lsls	r6, r0, #25
 80175c6:	d5fb      	bpl.n	80175c0 <_printf_i+0xe8>
 80175c8:	881e      	ldrh	r6, [r3, #0]
 80175ca:	4854      	ldr	r0, [pc, #336]	; (801771c <_printf_i+0x244>)
 80175cc:	2f6f      	cmp	r7, #111	; 0x6f
 80175ce:	bf0c      	ite	eq
 80175d0:	2308      	moveq	r3, #8
 80175d2:	230a      	movne	r3, #10
 80175d4:	2100      	movs	r1, #0
 80175d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80175da:	6865      	ldr	r5, [r4, #4]
 80175dc:	60a5      	str	r5, [r4, #8]
 80175de:	2d00      	cmp	r5, #0
 80175e0:	bfa2      	ittt	ge
 80175e2:	6821      	ldrge	r1, [r4, #0]
 80175e4:	f021 0104 	bicge.w	r1, r1, #4
 80175e8:	6021      	strge	r1, [r4, #0]
 80175ea:	b90e      	cbnz	r6, 80175f0 <_printf_i+0x118>
 80175ec:	2d00      	cmp	r5, #0
 80175ee:	d04d      	beq.n	801768c <_printf_i+0x1b4>
 80175f0:	4615      	mov	r5, r2
 80175f2:	fbb6 f1f3 	udiv	r1, r6, r3
 80175f6:	fb03 6711 	mls	r7, r3, r1, r6
 80175fa:	5dc7      	ldrb	r7, [r0, r7]
 80175fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8017600:	4637      	mov	r7, r6
 8017602:	42bb      	cmp	r3, r7
 8017604:	460e      	mov	r6, r1
 8017606:	d9f4      	bls.n	80175f2 <_printf_i+0x11a>
 8017608:	2b08      	cmp	r3, #8
 801760a:	d10b      	bne.n	8017624 <_printf_i+0x14c>
 801760c:	6823      	ldr	r3, [r4, #0]
 801760e:	07de      	lsls	r6, r3, #31
 8017610:	d508      	bpl.n	8017624 <_printf_i+0x14c>
 8017612:	6923      	ldr	r3, [r4, #16]
 8017614:	6861      	ldr	r1, [r4, #4]
 8017616:	4299      	cmp	r1, r3
 8017618:	bfde      	ittt	le
 801761a:	2330      	movle	r3, #48	; 0x30
 801761c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8017620:	f105 35ff 	addle.w	r5, r5, #4294967295
 8017624:	1b52      	subs	r2, r2, r5
 8017626:	6122      	str	r2, [r4, #16]
 8017628:	f8cd a000 	str.w	sl, [sp]
 801762c:	464b      	mov	r3, r9
 801762e:	aa03      	add	r2, sp, #12
 8017630:	4621      	mov	r1, r4
 8017632:	4640      	mov	r0, r8
 8017634:	f7ff fee2 	bl	80173fc <_printf_common>
 8017638:	3001      	adds	r0, #1
 801763a:	d14c      	bne.n	80176d6 <_printf_i+0x1fe>
 801763c:	f04f 30ff 	mov.w	r0, #4294967295
 8017640:	b004      	add	sp, #16
 8017642:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017646:	4835      	ldr	r0, [pc, #212]	; (801771c <_printf_i+0x244>)
 8017648:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801764c:	6829      	ldr	r1, [r5, #0]
 801764e:	6823      	ldr	r3, [r4, #0]
 8017650:	f851 6b04 	ldr.w	r6, [r1], #4
 8017654:	6029      	str	r1, [r5, #0]
 8017656:	061d      	lsls	r5, r3, #24
 8017658:	d514      	bpl.n	8017684 <_printf_i+0x1ac>
 801765a:	07df      	lsls	r7, r3, #31
 801765c:	bf44      	itt	mi
 801765e:	f043 0320 	orrmi.w	r3, r3, #32
 8017662:	6023      	strmi	r3, [r4, #0]
 8017664:	b91e      	cbnz	r6, 801766e <_printf_i+0x196>
 8017666:	6823      	ldr	r3, [r4, #0]
 8017668:	f023 0320 	bic.w	r3, r3, #32
 801766c:	6023      	str	r3, [r4, #0]
 801766e:	2310      	movs	r3, #16
 8017670:	e7b0      	b.n	80175d4 <_printf_i+0xfc>
 8017672:	6823      	ldr	r3, [r4, #0]
 8017674:	f043 0320 	orr.w	r3, r3, #32
 8017678:	6023      	str	r3, [r4, #0]
 801767a:	2378      	movs	r3, #120	; 0x78
 801767c:	4828      	ldr	r0, [pc, #160]	; (8017720 <_printf_i+0x248>)
 801767e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8017682:	e7e3      	b.n	801764c <_printf_i+0x174>
 8017684:	0659      	lsls	r1, r3, #25
 8017686:	bf48      	it	mi
 8017688:	b2b6      	uxthmi	r6, r6
 801768a:	e7e6      	b.n	801765a <_printf_i+0x182>
 801768c:	4615      	mov	r5, r2
 801768e:	e7bb      	b.n	8017608 <_printf_i+0x130>
 8017690:	682b      	ldr	r3, [r5, #0]
 8017692:	6826      	ldr	r6, [r4, #0]
 8017694:	6961      	ldr	r1, [r4, #20]
 8017696:	1d18      	adds	r0, r3, #4
 8017698:	6028      	str	r0, [r5, #0]
 801769a:	0635      	lsls	r5, r6, #24
 801769c:	681b      	ldr	r3, [r3, #0]
 801769e:	d501      	bpl.n	80176a4 <_printf_i+0x1cc>
 80176a0:	6019      	str	r1, [r3, #0]
 80176a2:	e002      	b.n	80176aa <_printf_i+0x1d2>
 80176a4:	0670      	lsls	r0, r6, #25
 80176a6:	d5fb      	bpl.n	80176a0 <_printf_i+0x1c8>
 80176a8:	8019      	strh	r1, [r3, #0]
 80176aa:	2300      	movs	r3, #0
 80176ac:	6123      	str	r3, [r4, #16]
 80176ae:	4615      	mov	r5, r2
 80176b0:	e7ba      	b.n	8017628 <_printf_i+0x150>
 80176b2:	682b      	ldr	r3, [r5, #0]
 80176b4:	1d1a      	adds	r2, r3, #4
 80176b6:	602a      	str	r2, [r5, #0]
 80176b8:	681d      	ldr	r5, [r3, #0]
 80176ba:	6862      	ldr	r2, [r4, #4]
 80176bc:	2100      	movs	r1, #0
 80176be:	4628      	mov	r0, r5
 80176c0:	f7e8 fd86 	bl	80001d0 <memchr>
 80176c4:	b108      	cbz	r0, 80176ca <_printf_i+0x1f2>
 80176c6:	1b40      	subs	r0, r0, r5
 80176c8:	6060      	str	r0, [r4, #4]
 80176ca:	6863      	ldr	r3, [r4, #4]
 80176cc:	6123      	str	r3, [r4, #16]
 80176ce:	2300      	movs	r3, #0
 80176d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80176d4:	e7a8      	b.n	8017628 <_printf_i+0x150>
 80176d6:	6923      	ldr	r3, [r4, #16]
 80176d8:	462a      	mov	r2, r5
 80176da:	4649      	mov	r1, r9
 80176dc:	4640      	mov	r0, r8
 80176de:	47d0      	blx	sl
 80176e0:	3001      	adds	r0, #1
 80176e2:	d0ab      	beq.n	801763c <_printf_i+0x164>
 80176e4:	6823      	ldr	r3, [r4, #0]
 80176e6:	079b      	lsls	r3, r3, #30
 80176e8:	d413      	bmi.n	8017712 <_printf_i+0x23a>
 80176ea:	68e0      	ldr	r0, [r4, #12]
 80176ec:	9b03      	ldr	r3, [sp, #12]
 80176ee:	4298      	cmp	r0, r3
 80176f0:	bfb8      	it	lt
 80176f2:	4618      	movlt	r0, r3
 80176f4:	e7a4      	b.n	8017640 <_printf_i+0x168>
 80176f6:	2301      	movs	r3, #1
 80176f8:	4632      	mov	r2, r6
 80176fa:	4649      	mov	r1, r9
 80176fc:	4640      	mov	r0, r8
 80176fe:	47d0      	blx	sl
 8017700:	3001      	adds	r0, #1
 8017702:	d09b      	beq.n	801763c <_printf_i+0x164>
 8017704:	3501      	adds	r5, #1
 8017706:	68e3      	ldr	r3, [r4, #12]
 8017708:	9903      	ldr	r1, [sp, #12]
 801770a:	1a5b      	subs	r3, r3, r1
 801770c:	42ab      	cmp	r3, r5
 801770e:	dcf2      	bgt.n	80176f6 <_printf_i+0x21e>
 8017710:	e7eb      	b.n	80176ea <_printf_i+0x212>
 8017712:	2500      	movs	r5, #0
 8017714:	f104 0619 	add.w	r6, r4, #25
 8017718:	e7f5      	b.n	8017706 <_printf_i+0x22e>
 801771a:	bf00      	nop
 801771c:	0801ad9f 	.word	0x0801ad9f
 8017720:	0801adb0 	.word	0x0801adb0

08017724 <_read_r>:
 8017724:	b538      	push	{r3, r4, r5, lr}
 8017726:	4d07      	ldr	r5, [pc, #28]	; (8017744 <_read_r+0x20>)
 8017728:	4604      	mov	r4, r0
 801772a:	4608      	mov	r0, r1
 801772c:	4611      	mov	r1, r2
 801772e:	2200      	movs	r2, #0
 8017730:	602a      	str	r2, [r5, #0]
 8017732:	461a      	mov	r2, r3
 8017734:	f7e9 f994 	bl	8000a60 <_read>
 8017738:	1c43      	adds	r3, r0, #1
 801773a:	d102      	bne.n	8017742 <_read_r+0x1e>
 801773c:	682b      	ldr	r3, [r5, #0]
 801773e:	b103      	cbz	r3, 8017742 <_read_r+0x1e>
 8017740:	6023      	str	r3, [r4, #0]
 8017742:	bd38      	pop	{r3, r4, r5, pc}
 8017744:	2000c488 	.word	0x2000c488

08017748 <abort>:
 8017748:	b508      	push	{r3, lr}
 801774a:	2006      	movs	r0, #6
 801774c:	f000 f82c 	bl	80177a8 <raise>
 8017750:	2001      	movs	r0, #1
 8017752:	f7e9 f97b 	bl	8000a4c <_exit>

08017756 <_raise_r>:
 8017756:	291f      	cmp	r1, #31
 8017758:	b538      	push	{r3, r4, r5, lr}
 801775a:	4604      	mov	r4, r0
 801775c:	460d      	mov	r5, r1
 801775e:	d904      	bls.n	801776a <_raise_r+0x14>
 8017760:	2316      	movs	r3, #22
 8017762:	6003      	str	r3, [r0, #0]
 8017764:	f04f 30ff 	mov.w	r0, #4294967295
 8017768:	bd38      	pop	{r3, r4, r5, pc}
 801776a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801776c:	b112      	cbz	r2, 8017774 <_raise_r+0x1e>
 801776e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017772:	b94b      	cbnz	r3, 8017788 <_raise_r+0x32>
 8017774:	4620      	mov	r0, r4
 8017776:	f000 f831 	bl	80177dc <_getpid_r>
 801777a:	462a      	mov	r2, r5
 801777c:	4601      	mov	r1, r0
 801777e:	4620      	mov	r0, r4
 8017780:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017784:	f000 b818 	b.w	80177b8 <_kill_r>
 8017788:	2b01      	cmp	r3, #1
 801778a:	d00a      	beq.n	80177a2 <_raise_r+0x4c>
 801778c:	1c59      	adds	r1, r3, #1
 801778e:	d103      	bne.n	8017798 <_raise_r+0x42>
 8017790:	2316      	movs	r3, #22
 8017792:	6003      	str	r3, [r0, #0]
 8017794:	2001      	movs	r0, #1
 8017796:	e7e7      	b.n	8017768 <_raise_r+0x12>
 8017798:	2400      	movs	r4, #0
 801779a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801779e:	4628      	mov	r0, r5
 80177a0:	4798      	blx	r3
 80177a2:	2000      	movs	r0, #0
 80177a4:	e7e0      	b.n	8017768 <_raise_r+0x12>
	...

080177a8 <raise>:
 80177a8:	4b02      	ldr	r3, [pc, #8]	; (80177b4 <raise+0xc>)
 80177aa:	4601      	mov	r1, r0
 80177ac:	6818      	ldr	r0, [r3, #0]
 80177ae:	f7ff bfd2 	b.w	8017756 <_raise_r>
 80177b2:	bf00      	nop
 80177b4:	2000001c 	.word	0x2000001c

080177b8 <_kill_r>:
 80177b8:	b538      	push	{r3, r4, r5, lr}
 80177ba:	4d07      	ldr	r5, [pc, #28]	; (80177d8 <_kill_r+0x20>)
 80177bc:	2300      	movs	r3, #0
 80177be:	4604      	mov	r4, r0
 80177c0:	4608      	mov	r0, r1
 80177c2:	4611      	mov	r1, r2
 80177c4:	602b      	str	r3, [r5, #0]
 80177c6:	f7e9 f92f 	bl	8000a28 <_kill>
 80177ca:	1c43      	adds	r3, r0, #1
 80177cc:	d102      	bne.n	80177d4 <_kill_r+0x1c>
 80177ce:	682b      	ldr	r3, [r5, #0]
 80177d0:	b103      	cbz	r3, 80177d4 <_kill_r+0x1c>
 80177d2:	6023      	str	r3, [r4, #0]
 80177d4:	bd38      	pop	{r3, r4, r5, pc}
 80177d6:	bf00      	nop
 80177d8:	2000c488 	.word	0x2000c488

080177dc <_getpid_r>:
 80177dc:	f7e9 b91c 	b.w	8000a18 <_getpid>

080177e0 <_init>:
 80177e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80177e2:	bf00      	nop
 80177e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80177e6:	bc08      	pop	{r3}
 80177e8:	469e      	mov	lr, r3
 80177ea:	4770      	bx	lr

080177ec <_fini>:
 80177ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80177ee:	bf00      	nop
 80177f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80177f2:	bc08      	pop	{r3}
 80177f4:	469e      	mov	lr, r3
 80177f6:	4770      	bx	lr
